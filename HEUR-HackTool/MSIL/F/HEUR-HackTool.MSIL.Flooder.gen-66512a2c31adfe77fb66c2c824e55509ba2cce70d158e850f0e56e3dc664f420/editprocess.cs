// Decompiled with JetBrains decompiler
// Type: Dark_RAT.editprocess
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class editprocess : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;

    [DebuggerNonUserCode]
    static editprocess()
    {
    }

    [DebuggerNonUserCode]
    public editprocess()
    {
      this.Load += new EventHandler(this.editprocess_Load);
      editprocess.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (editprocess.__ENCList)
      {
        if (editprocess.__ENCList.Count == editprocess.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (editprocess.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (editprocess.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                editprocess.__ENCList[index1] = editprocess.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          editprocess.__ENCList.RemoveRange(index1, checked (editprocess.__ENCList.Count - index1));
          editprocess.__ENCList.Capacity = editprocess.__ENCList.Count;
        }
        editprocess.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (editprocess));
      this.TextBox1 = new TextBox();
      this.Button1 = new Button();
      this.Button2 = new Button();
      this.SuspendLayout();
      TextBox textBox1_1 = this.TextBox1;
      Point point1 = new Point(12, 12);
      Point point2 = point1;
      textBox1_1.Location = point2;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1_2 = this.TextBox1;
      Size size1 = new Size(140, 20);
      Size size2 = size1;
      textBox1_2.Size = size2;
      this.TextBox1.TabIndex = 9;
      this.TextBox1.Text = "firefox";
      this.Button1.Image = (Image) componentResourceManager.GetObject("Button1.Image");
      this.Button1.ImageAlign = ContentAlignment.MiddleLeft;
      Button button1_1 = this.Button1;
      point1 = new Point(12, 38);
      Point point3 = point1;
      button1_1.Location = point3;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(140, 23);
      Size size3 = size1;
      button1_2.Size = size3;
      this.Button1.TabIndex = 8;
      this.Button1.Text = "SUSPEND";
      this.Button1.UseVisualStyleBackColor = true;
      this.Button2.Image = (Image) componentResourceManager.GetObject("Button2.Image");
      this.Button2.ImageAlign = ContentAlignment.MiddleLeft;
      Button button2_1 = this.Button2;
      point1 = new Point(12, 67);
      Point point4 = point1;
      button2_1.Location = point4;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(140, 23);
      Size size4 = size1;
      button2_2.Size = size4;
      this.Button2.TabIndex = 10;
      this.Button2.Text = "RESUME";
      this.Button2.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(163, 100);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.TextBox1);
      this.Controls.Add((Control) this.Button1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MaximizeBox = false;
      this.Name = nameof (editprocess);
      this.Text = "Sus / Res Process";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TextBox TextBox1
    {
      [DebuggerNonUserCode] get => this._TextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual Button Button2
    {
      [DebuggerNonUserCode] get => this._Button2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        if (this._Button2 != null)
          this._Button2.Click -= eventHandler;
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += eventHandler;
      }
    }

    private void editprocess_Load(object sender, EventArgs e)
    {
    }

    private void Button1_Click(object sender, EventArgs e) => MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|suspendprocess|" + this.TextBox1.Text));

    private void Button2_Click(object sender, EventArgs e) => MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|resumeprocess|" + this.TextBox1.Text));
  }
}
