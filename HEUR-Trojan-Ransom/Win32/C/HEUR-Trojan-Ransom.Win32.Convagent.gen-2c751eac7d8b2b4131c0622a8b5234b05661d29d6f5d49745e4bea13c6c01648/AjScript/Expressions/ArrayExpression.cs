// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.ArrayExpression
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using System;
using System.Collections.Generic;

namespace AjScript.Expressions
{
  public class ArrayExpression : IExpression
  {
    private IExpression expression;
    private ICollection<IExpression> arguments;

    public ArrayExpression(IExpression expression, ICollection<IExpression> arguments)
    {
      this.expression = expression;
      this.arguments = arguments;
    }

    public IExpression Expression => this.expression;

    public ICollection<IExpression> Arguments => this.arguments;

    public object Evaluate(IContext context)
    {
      object obj = (object) null;
      return this.Evaluate(context, ref obj);
    }

    public object Evaluate(IContext context, ref object obj)
    {
      obj = this.Expression.Evaluate(context);
      object[] indexes = (object[]) null;
      if (this.arguments != null)
      {
        List<object> objectList = new List<object>();
        foreach (IExpression expression in (IEnumerable<IExpression>) this.arguments)
          objectList.Add(expression.Evaluate(context));
        indexes = objectList.ToArray();
      }
      return obj == null ? (object) null : ObjectUtilities.GetIndexedValue(obj, indexes);
    }

    private static Type AsType(IExpression expression)
    {
      string name = ArrayExpression.AsName(expression);
      return name == null ? (Type) null : TypeUtilities.AsType(name);
    }

    private static string AsName(IExpression expression)
    {
      if (!(expression is DotExpression))
        return (string) null;
      DotExpression dotExpression = (DotExpression) expression;
      return ArrayExpression.AsName(dotExpression.Expression) + "." + dotExpression.Name;
    }
  }
}
