// Decompiled with JetBrains decompiler
// Type: ModuleNameSpace.ReadKey_Box
// Assembly: installer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE36CCF7-21FD-4261-9C31-8B7F15D1A5A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\VHO-Trojan.MSIL.Convagent.gen-668779a07751d78171d250ab0016b85e84293cc1703def87a04451a1e2df8b37.exe

using System;
using System.Drawing;
using System.Management.Automation.Host;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace ModuleNameSpace
{
  public class ReadKey_Box
  {
    [DllImport("user32.dll")]
    public static extern int ToUnicode(
      uint wVirtKey,
      uint wScanCode,
      byte[] lpKeyState,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pwszBuff,
      int cchBuff,
      uint wFlags);

    private static string GetCharFromKeys(Keys keys, bool blShift, bool blAltGr)
    {
      StringBuilder pwszBuff = new StringBuilder(64);
      byte[] lpKeyState = new byte[256];
      if (blShift)
        lpKeyState[16] = byte.MaxValue;
      if (blAltGr)
      {
        lpKeyState[17] = byte.MaxValue;
        lpKeyState[18] = byte.MaxValue;
      }
      return ReadKey_Box.ToUnicode((uint) keys, 0U, lpKeyState, pwszBuff, 64, 0U) >= 1 ? pwszBuff.ToString() : "\0";
    }

    public static KeyInfo Show(string strTitle, string strPrompt, bool blIncludeKeyDown)
    {
      ReadKey_Box.Keyboard_Form keyboardForm = new ReadKey_Box.Keyboard_Form();
      Label label = new Label();
      if (string.IsNullOrEmpty(strPrompt))
        label.Text = "Press a key";
      else
        label.Text = strPrompt;
      label.Location = new Point(9, 19);
      label.MaximumSize = new System.Drawing.Size(Screen.FromControl((Control) keyboardForm).Bounds.Width * 5 / 8 - 18, 0);
      label.AutoSize = true;
      keyboardForm.Controls.Add((Control) label);
      if (string.IsNullOrEmpty(strTitle))
        keyboardForm.Text = AppDomain.CurrentDomain.FriendlyName;
      else
        keyboardForm.Text = strTitle;
      keyboardForm.ClientSize = new System.Drawing.Size(Math.Max(178, label.Right + 10), label.Bottom + 55);
      keyboardForm.FormBorderStyle = FormBorderStyle.FixedDialog;
      keyboardForm.StartPosition = FormStartPosition.CenterScreen;
      try
      {
        keyboardForm.Icon = Icon.ExtractAssociatedIcon(Assembly.GetExecutingAssembly().Location);
      }
      catch
      {
      }
      keyboardForm.MinimizeBox = false;
      keyboardForm.MaximizeBox = false;
      keyboardForm.checkKeyDown = blIncludeKeyDown;
      int num = (int) keyboardForm.ShowDialog();
      return keyboardForm.keyinfo;
    }

    private class Keyboard_Form : Form
    {
      public bool checkKeyDown = true;
      public KeyInfo keyinfo;

      public Keyboard_Form()
      {
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.KeyDown += new KeyEventHandler(this.Keyboard_Form_KeyDown);
        this.KeyUp += new KeyEventHandler(this.Keyboard_Form_KeyUp);
      }

      private void Keyboard_Form_KeyDown(object sender, KeyEventArgs e)
      {
        if (!this.checkKeyDown)
          return;
        this.keyinfo.VirtualKeyCode = e.KeyValue;
        this.keyinfo.Character = ReadKey_Box.GetCharFromKeys(e.KeyCode, e.Shift, e.Alt & e.Control)[0];
        this.keyinfo.KeyDown = false;
        this.keyinfo.ControlKeyState = (ControlKeyStates) 0;
        if (e.Alt)
          this.keyinfo.ControlKeyState = ControlKeyStates.RightAltPressed | ControlKeyStates.LeftAltPressed;
        if (e.Control)
        {
          this.keyinfo.ControlKeyState |= ControlKeyStates.RightCtrlPressed | ControlKeyStates.LeftCtrlPressed;
          if (!e.Alt && e.KeyValue > 64 && e.KeyValue < 96)
            this.keyinfo.Character = (char) (e.KeyValue - 64);
        }
        if (e.Shift)
          this.keyinfo.ControlKeyState |= ControlKeyStates.ShiftPressed;
        if ((e.Modifiers & Keys.Capital) > Keys.None)
          this.keyinfo.ControlKeyState |= ControlKeyStates.CapsLockOn;
        if ((e.Modifiers & Keys.NumLock) > Keys.None)
          this.keyinfo.ControlKeyState |= ControlKeyStates.NumLockOn;
        this.Close();
      }

      private void Keyboard_Form_KeyUp(object sender, KeyEventArgs e)
      {
        if (this.checkKeyDown)
          return;
        this.keyinfo.VirtualKeyCode = e.KeyValue;
        this.keyinfo.Character = ReadKey_Box.GetCharFromKeys(e.KeyCode, e.Shift, e.Alt & e.Control)[0];
        this.keyinfo.KeyDown = true;
        this.keyinfo.ControlKeyState = (ControlKeyStates) 0;
        if (e.Alt)
          this.keyinfo.ControlKeyState = ControlKeyStates.RightAltPressed | ControlKeyStates.LeftAltPressed;
        if (e.Control)
        {
          this.keyinfo.ControlKeyState |= ControlKeyStates.RightCtrlPressed | ControlKeyStates.LeftCtrlPressed;
          if (!e.Alt && e.KeyValue > 64 && e.KeyValue < 96)
            this.keyinfo.Character = (char) (e.KeyValue - 64);
        }
        if (e.Shift)
          this.keyinfo.ControlKeyState |= ControlKeyStates.ShiftPressed;
        if ((e.Modifiers & Keys.Capital) > Keys.None)
          this.keyinfo.ControlKeyState |= ControlKeyStates.CapsLockOn;
        if ((e.Modifiers & Keys.NumLock) > Keys.None)
          this.keyinfo.ControlKeyState |= ControlKeyStates.NumLockOn;
        this.Close();
      }
    }
  }
}
