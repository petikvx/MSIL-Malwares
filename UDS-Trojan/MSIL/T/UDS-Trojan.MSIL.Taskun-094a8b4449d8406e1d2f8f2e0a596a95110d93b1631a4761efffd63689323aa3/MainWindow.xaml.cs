// Decompiled with JetBrains decompiler
// Type: SpiritIslandCompanion.MainWindow
// Assembly: ToBase64Transf, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6B961B69-7A46-441C-8970-EA733FFAA49A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan.MSIL.Taskun-094a8b4449d8406e1d2f8f2e0a596a95110d93b1631a4761efffd63689323aa3.exe

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;

namespace SpiritIslandCompanion
{
  public partial class MainWindow : Window, IComponentConnector
  {
    private Invasion invasion = new Invasion();
    private Card _draggedImage;
    private Point _mousePosition;
    public static readonly DependencyProperty ScaleValueProperty = DependencyProperty.Register(nameof (ScaleValue), typeof (double), typeof (MainWindow), (PropertyMetadata) new UIPropertyMetadata((object) 1.0, new PropertyChangedCallback(MainWindow.OnScaleValueChanged), new CoerceValueCallback(MainWindow.OnCoerceScaleValue)));
    internal MainWindow frmMain;
    internal Menu mainMenu;
    internal MenuItem newGame;
    internal MenuItem eventMissionariesArrive;
    internal MenuItem eventNewSpeciesSpread;
    internal MenuItem eventIgnoreTheCuriosity;
    internal MenuItem eventWeaveLiesInTheirMinds;
    internal MenuItem eventSlaveRebellion;
    internal MenuItem eventWarTouchesTheIslandsShores;
    internal MenuItem showTopFear;
    internal MenuItem about;
    internal Grid MainGrid;
    internal ScaleTransform ApplicationScaleTransform;
    internal Canvas mainCanvas;
    internal Image imgMyAdversaryCard;
    internal Image imgFearEarnedDeck;
    internal Button btnFear;
    internal Label lblFear;
    internal Label lblFearUntilNext;
    internal TextBlock tbTurnOrder;
    internal Image imgBlightCard;
    internal Image imgEventDeck;
    internal Image imgEventDiscard;
    internal Image imgFearDeck;
    internal Label lblBlight;
    internal Label lblFearCardsEarned;
    internal Image imgFearDiscard;
    internal Label lblFearDeckCount;
    internal Button btnRemoveOneFear;
    internal Image imgTerrorCard;
    internal Image imgInvaderDeck;
    internal Image imgInvaderBuildDeck;
    internal Image imgInvaderRavageDeck;
    internal Image imgInvaderDiscard;
    internal Button btnAddBlight;
    internal Button btnRemoveBlight;
    internal Image imgHighImmigrationTile;
    internal Image imgInvaderHighImmigration;
    internal Label lblInvaderDeck;
    private bool _contentLoaded;

    public MainWindow()
    {
      this.InitializeComponent();
      this.DataContext = (object) this.invasion;
    }

    private void frmMain_Loaded(object sender, RoutedEventArgs e)
    {
      this.tbTurnOrder.Text = "Growth > Gain Energy > Choose Powers\n\nFast Effects\n\nBlighted Island Effect > Event Card > Fear Card\n\nRavage > Build > Explore > (Adv. Inv. Cards)\n\nSlow Effects\n\nTime Passes";
      this.StartNewGame();
    }

    private void SetUpGameBoardDecks()
    {
      for (int index = 0; index < this.invasion.FearDeck.Count; ++index)
      {
        FearCard element = this.invasion.FearDeck[index];
        this.DealCardToNewDeck((Card) element);
        Panel.SetZIndex((UIElement) element, this.invasion.FearDeck.Count - index);
        this.mainCanvas.Children.Add((UIElement) element);
      }
      for (int index = 0; index < this.invasion.EventDeck.Count; ++index)
      {
        EventCard element = this.invasion.EventDeck[index];
        this.DealCardToNewDeck((Card) element);
        Panel.SetZIndex((UIElement) element, this.invasion.EventDeck.Count - index);
        this.mainCanvas.Children.Add((UIElement) element);
      }
      for (int index = 0; index < this.invasion.InvaderDeck.Count; ++index)
      {
        InvaderCard element = this.invasion.InvaderDeck[index];
        this.DealCardToNewDeck((Card) element);
        Panel.SetZIndex((UIElement) element, this.invasion.InvaderDeck.Count - index);
        this.mainCanvas.Children.Add((UIElement) element);
      }
      foreach (BlightCard element in (Collection<BlightCard>) this.invasion.BlightDeck)
      {
        this.DealCardToNewDeck((Card) element);
        this.mainCanvas.Children.Add((UIElement) element);
      }
      foreach (AdversaryCard element in (Collection<AdversaryCard>) this.invasion.AdversaryDeck)
      {
        if (this.invasion.MyAdversary.Id == element.Id)
        {
          this.DealCardToNewDeck((Card) element);
          Panel.SetZIndex((UIElement) element, 1);
          this.mainCanvas.Children.Add((UIElement) element);
        }
      }
      if (this.invasion.HighImmigration)
        this.SetBoardForEngland();
      else
        this.RemoveHighImmigrationTile();
    }

    private void StartNewGame()
    {
      FrmNewGame frmNewGame = new FrmNewGame();
      frmNewGame.MyAdversaryList = this.invasion.AdversaryDeck;
      bool? nullable = frmNewGame.ShowDialog();
      bool flag = true;
      if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
        return;
      this.ClearGameBoard();
      this.invasion = new Invasion(frmNewGame.ChosenAdversary, frmNewGame.AdversaryLevel, frmNewGame.PlayerCount);
      this.SetUpGameBoardDecks();
      this.DataContext = (object) this.invasion;
    }

    private void ClearGameBoard()
    {
      this.invasion.TerrorCardOut = false;
      List<UIElement> uiElementList = new List<UIElement>();
      foreach (UIElement child in this.mainCanvas.Children)
      {
        if (child.GetType() == typeof (FearCard) || child.GetType() == typeof (EventCard) || child.GetType() == typeof (InvaderCard) || child.GetType() == typeof (BlightCard) || child.GetType() == typeof (TerrorCard) || child.GetType() == typeof (Card))
          uiElementList.Add(child);
      }
      foreach (UIElement element in uiElementList)
        this.mainCanvas.Children.Remove(element);
    }

    private void CheckForWinOrLose()
    {
      if (this.invasion.FearDeck.Count == 0)
      {
        int num1 = (int) MessageBox.Show("You Win! =)");
      }
      else if (this.invasion.InvaderDeck.Count == 0)
      {
        int num2 = (int) MessageBox.Show("You've been Colonized! =(");
      }
      else
      {
        if (this.invasion.Blight != 0)
          return;
        int num3 = (int) MessageBox.Show("You lose! =(");
      }
    }

    private void GainOneFearCard()
    {
      this.invasion.FearEarnedDeck.Insert(0, this.invasion.FearDeck[0]);
      this.MoveCardToNextLocation((Card) this.invasion.FearEarnedDeck[0]);
      this.invasion.FearDeck.RemoveAt(0);
    }

    private void SetBoardForEngland()
    {
      this.imgHighImmigrationTile.Visibility = Visibility.Visible;
      this.imgInvaderHighImmigration.Visibility = Visibility.Visible;
    }

    private void RemoveHighImmigrationTile()
    {
      this.imgHighImmigrationTile.Visibility = Visibility.Collapsed;
      this.imgInvaderHighImmigration.Visibility = Visibility.Collapsed;
    }

    private void UseTopFearCard()
    {
      this.invasion.FearEarnedDeck[0].FlipCard();
      this.ShowCardZoom((Card) this.invasion.FearEarnedDeck[0]);
      this.invasion.FearDiscardDeck.Insert(0, this.invasion.FearEarnedDeck[0]);
      this.MoveCardToNextLocation((Card) this.invasion.FearDiscardDeck[0]);
      this.invasion.FearEarnedDeck.RemoveAt(0);
    }

    private void UseTopEventCard()
    {
      this.invasion.EventDeck[0].FlipCard();
      this.ShowCardZoom((Card) this.invasion.EventDeck[0]);
      this.invasion.EventDiscardDeck.Insert(0, this.invasion.EventDeck[0]);
      this.MoveCardToNextLocation((Card) this.invasion.EventDiscardDeck[0]);
      this.invasion.EventDeck.RemoveAt(0);
    }

    private void UseTopInvaderCard()
    {
      this.invasion.InvaderDeck[0].FlipCard();
      this.ShowCardZoom((Card) this.invasion.InvaderDeck[0]);
      if (this.invasion.InvaderHighImmigrationDeck.Count > 0)
      {
        this.invasion.InvaderDiscardDeck.Insert(0, this.invasion.InvaderHighImmigrationDeck[0]);
        this.MoveCardToNextLocation((Card) this.invasion.InvaderDiscardDeck[0]);
        this.invasion.InvaderHighImmigrationDeck.RemoveAt(0);
      }
      if (this.invasion.InvaderRavageDeck.Count > 0 && this.invasion.HighImmigration)
      {
        this.invasion.InvaderHighImmigrationDeck.Insert(0, this.invasion.InvaderRavageDeck[0]);
        this.MoveCardToNextLocation((Card) this.invasion.InvaderHighImmigrationDeck[0]);
        this.invasion.InvaderRavageDeck.RemoveAt(0);
      }
      if (this.invasion.InvaderRavageDeck.Count > 0 && !this.invasion.HighImmigration)
      {
        this.invasion.InvaderDiscardDeck.Insert(0, this.invasion.InvaderRavageDeck[0]);
        this.MoveCardToNextLocation((Card) this.invasion.InvaderDiscardDeck[0]);
        this.invasion.InvaderRavageDeck.RemoveAt(0);
      }
      if (this.invasion.InvaderBuildDeck.Count > 0)
      {
        this.invasion.InvaderRavageDeck.Insert(0, this.invasion.InvaderBuildDeck[0]);
        this.MoveCardToNextLocation((Card) this.invasion.InvaderRavageDeck[0]);
        this.invasion.InvaderBuildDeck.RemoveAt(0);
      }
      if (this.invasion.InvaderDeck.Count > 0)
      {
        this.invasion.InvaderBuildDeck.Insert(0, this.invasion.InvaderDeck[0]);
        this.MoveCardToNextLocation((Card) this.invasion.InvaderBuildDeck[0]);
        this.invasion.InvaderDeck.RemoveAt(0);
      }
      if (!this.invasion.HighImmigration || this.invasion.MyAdversary.Level != 3 || this.invasion.InvaderDiscardDeck.Count != 3)
        return;
      this.invasion.HighImmigration = false;
      if (this.invasion.InvaderHighImmigrationDeck.Count > 0)
      {
        this.invasion.InvaderDiscardDeck.Insert(0, this.invasion.InvaderHighImmigrationDeck[0]);
        this.MoveCardToNextLocation((Card) this.invasion.InvaderDiscardDeck[0]);
        this.invasion.InvaderHighImmigrationDeck.RemoveAt(0);
      }
      this.RemoveHighImmigrationTile();
    }

    private void DealCardToNewDeck(Card card)
    {
      if (card.GetType() == typeof (FearCard))
      {
        Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgFearDeck));
        Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgFearDeck));
      }
      else if (card.GetType() == typeof (EventCard))
      {
        Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgEventDeck));
        Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgEventDeck));
      }
      else if (card.GetType() == typeof (InvaderCard))
      {
        Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgInvaderDeck));
        Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgInvaderDeck));
      }
      else if (card.GetType() == typeof (BlightCard))
      {
        Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgBlightCard));
        Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgBlightCard));
      }
      else if (card.GetType() == typeof (TerrorCard))
      {
        Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgTerrorCard));
        Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgTerrorCard));
      }
      else
      {
        if (!(card.GetType() == typeof (AdversaryCard)))
          return;
        Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgMyAdversaryCard));
        Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgMyAdversaryCard));
      }
    }

    private void MoveCardToNextLocation(Card card)
    {
      if (card.GetType() == typeof (EventCard))
      {
        Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgEventDiscard));
        Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgEventDiscard));
        this.BringToFront((UIElement) card);
      }
      else if (card.GetType() == typeof (FearCard))
      {
        if (((IEnumerable<Card>) this.invasion.FearDeck).Contains<Card>(card))
        {
          Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgFearEarnedDeck));
          Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgFearEarnedDeck));
          this.BringToFront((UIElement) card);
        }
        else
        {
          if (!((IEnumerable<Card>) this.invasion.FearEarnedDeck).Contains<Card>(card))
            return;
          Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgFearDiscard));
          Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgFearDiscard));
          this.BringToFront((UIElement) card);
        }
      }
      else
      {
        if (!(card.GetType() == typeof (InvaderCard)))
          return;
        if (((IEnumerable<Card>) this.invasion.InvaderDeck).Contains<Card>(card))
        {
          Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgInvaderBuildDeck));
          Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgInvaderBuildDeck));
          this.BringToFront((UIElement) card);
        }
        else if (((IEnumerable<Card>) this.invasion.InvaderBuildDeck).Contains<Card>(card))
        {
          Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgInvaderRavageDeck));
          Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgInvaderRavageDeck));
          this.BringToFront((UIElement) card);
        }
        else if (((IEnumerable<Card>) this.invasion.InvaderRavageDeck).Contains<Card>(card) && this.invasion.HighImmigration)
        {
          Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgInvaderHighImmigration));
          Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgInvaderHighImmigration));
          this.BringToFront((UIElement) card);
        }
        else if (((IEnumerable<Card>) this.invasion.InvaderRavageDeck).Contains<Card>(card) && !this.invasion.HighImmigration)
        {
          Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgInvaderDiscard));
          Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgInvaderDiscard));
          this.BringToFront((UIElement) card);
        }
        else if (((IEnumerable<Card>) this.invasion.InvaderHighImmigrationDeck).Contains<Card>(card))
        {
          Canvas.SetLeft((UIElement) card, Canvas.GetLeft((UIElement) this.imgInvaderDiscard));
          Canvas.SetTop((UIElement) card, Canvas.GetTop((UIElement) this.imgInvaderDiscard));
          this.BringToFront((UIElement) card);
        }
      }
    }

    private void btnFear_Click(object sender, RoutedEventArgs e)
    {
      ++this.invasion.Fear;
      if (this.invasion.FearUntilNextCard == 0 && this.invasion.FearDeck.Count > 0)
      {
        this.GainOneFearCard();
        this.invasion.Fear = 0;
        this.CheckForWinOrLose();
      }
      if (this.invasion.FearDeck.Count == this.invasion.TotalFearCardsNeededToWin - this.invasion.FirstTerrorThreshold && !this.invasion.TerrorCardOut)
      {
        this.DealCardToNewDeck((Card) this.invasion.TerrorDeck[0]);
        this.mainCanvas.Children.Add((UIElement) this.invasion.TerrorDeck[0]);
        this.invasion.TerrorCardOut = true;
      }
      else
      {
        if (this.invasion.FearDeck.Count != this.invasion.TotalFearCardsNeededToWin - this.invasion.SecondTerrorThreshold || this.invasion.TerrorDeck[0].Source == this.invasion.TerrorDeck[0].FrontSide)
          return;
        this.invasion.TerrorDeck[0].FlipCard();
      }
    }

    private void btnRemoveOneFear_Click(object sender, RoutedEventArgs e) => --this.invasion.Fear;

    private void btnAddBlight_Click(object sender, RoutedEventArgs e) => ++this.invasion.Blight;

    private void btnRemoveBlight_Click(object sender, RoutedEventArgs e)
    {
      --this.invasion.Blight;
      if (this.invasion.Blight == 0 && !this.invasion.BlightDeck[0].IsFaceUp())
      {
        this.invasion.BlightDeck[0].FlipCard();
        this.invasion.Blight = this.invasion.PlayerCount * 5;
        new FrmCardView()
        {
          ShowCard = this.invasion.BlightDeck[0].Source
        }.ShowDialog();
        int num = (int) MessageBox.Show("Please remove the appropriate amount of Blight.");
      }
      else
      {
        if (this.invasion.Blight != 0 || !this.invasion.BlightDeck[0].IsFaceUp())
          return;
        int num = (int) MessageBox.Show("You lose! =(");
      }
    }

    private void NewGame_Click(object sender, RoutedEventArgs e) => this.StartNewGame();

    private void about_Click(object sender, RoutedEventArgs e) => new FrmAbout().ShowDialog();

    private void eventIgnoreTheCuriosity_Click(object sender, RoutedEventArgs e)
    {
      if (this.invasion.InvaderDeck.Count <= 0)
        return;
      this.invasion.InvaderBox.Insert(0, this.invasion.InvaderDeck[0]);
      this.invasion.InvaderDeck[0].Visibility = Visibility.Hidden;
      this.invasion.InvaderDeck.RemoveAt(0);
    }

    private void eventNewSpeciesSpread_Click(object sender, RoutedEventArgs e)
    {
      if (this.invasion.EventDiscardDeck.Count <= 0)
        return;
      this.invasion.EventDeck.Insert(2, this.invasion.EventDiscardDeck[0]);
      this.invasion.EventDiscardDeck[0].Visibility = Visibility.Hidden;
      this.invasion.EventDiscardDeck.RemoveAt(0);
    }

    private void eventSlaveRebellion_Click(object sender, RoutedEventArgs e)
    {
      if (this.invasion.EventDiscardDeck.Count <= 0 || this.invasion.MyAdversary.Id != 3 || this.invasion.MyAdversary.Level < 2)
        return;
      this.invasion.EventDeck.Insert(3, this.invasion.EventDiscardDeck[0]);
      this.invasion.EventDiscardDeck[0].Visibility = Visibility.Hidden;
      this.invasion.EventDiscardDeck.RemoveAt(0);
    }

    private void eventWarTouchesTheIslandsShores_Click(object sender, RoutedEventArgs e)
    {
      this.invasion.FearDeck.Insert(0, this.invasion.FearBox[0]);
      this.DealCardToNewDeck((Card) this.invasion.FearDeck[0]);
      this.mainCanvas.Children.Add((UIElement) this.invasion.FearDeck[0]);
      this.BringToFront((UIElement) this.invasion.FearDeck[0]);
      this.invasion.FearBox.RemoveAt(0);
    }

    private void eventWeaveLiesInTheirMinds_Click(object sender, RoutedEventArgs e)
    {
      if (this.invasion.FearDeck.Count <= 0)
        return;
      this.invasion.FearBox.Insert(0, this.invasion.FearDeck[0]);
      this.invasion.FearDeck[0].Visibility = Visibility.Hidden;
      this.invasion.FearDeck.RemoveAt(0);
    }

    private void showTopFear_Click(object sender, RoutedEventArgs e)
    {
      if (this.invasion.FearDeck.Count <= 0)
        return;
      this.invasion.FearDeck[0].FlipCard();
    }

    private void DoDoubleClickCardAction(Card card)
    {
      if (card.GetType() == typeof (FearCard) && ((IEnumerable<Card>) this.invasion.FearEarnedDeck).Contains<Card>(card))
        this.UseTopFearCard();
      else if (card.GetType() == typeof (EventCard) && ((IEnumerable<Card>) this.invasion.EventDeck).Contains<Card>(card))
        this.UseTopEventCard();
      else if (card.GetType() == typeof (InvaderCard) && ((IEnumerable<Card>) this.invasion.InvaderDeck).Contains<Card>(card))
        this.UseTopInvaderCard();
      else
        this.ShowCardZoom(card);
    }

    private void ShowCardZoom(Card card)
    {
      FrmCardView frmCardView = new FrmCardView();
      frmCardView.ShowCard = card.Source;
      frmCardView.Owner = Application.Current.MainWindow;
      frmCardView.ShowDialog();
    }

    private void mainCanvas_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
    {
      if (!(e.Source is Card source) || e.ChangedButton != MouseButton.Left || e.ClickCount != 2)
        return;
      this._draggedImage = (Card) null;
      this.DoDoubleClickCardAction(source);
    }

    private void mainCanvas_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
    {
      if (this._draggedImage == null)
        return;
      this.mainCanvas.ReleaseMouseCapture();
      this._draggedImage = (Card) null;
    }

    private void mainCanvas_MouseMove(object sender, MouseEventArgs e)
    {
      if (this._draggedImage == null)
        return;
      Point position = e.GetPosition((IInputElement) this.mainCanvas);
      Vector vector = position - this._mousePosition;
      this._mousePosition = position;
      Canvas.SetLeft((UIElement) this._draggedImage, Canvas.GetLeft((UIElement) this._draggedImage) + vector.X);
      Canvas.SetTop((UIElement) this._draggedImage, Canvas.GetTop((UIElement) this._draggedImage) + vector.Y);
    }

    public void BringToFront(UIElement element) => this.UpdateZOrder(element, true);

    public void SendToBack(UIElement element) => this.UpdateZOrder(element, false);

    private void UpdateZOrder(UIElement element, bool bringToFront)
    {
      if (element == null)
        throw new ArgumentNullException(nameof (element));
      if (!this.mainCanvas.Children.Contains(element))
        throw new ArgumentException("Must be a child element of the Canvas.", nameof (element));
      int num1 = -1;
      if (bringToFront)
      {
        foreach (UIElement child in this.mainCanvas.Children)
        {
          if (child.Visibility != Visibility.Collapsed)
            ++num1;
        }
      }
      else
        num1 = 0;
      int num2 = num1 == 0 ? 1 : -1;
      int zindex1 = Panel.GetZIndex(element);
      foreach (UIElement child in this.mainCanvas.Children)
      {
        if (child == element)
        {
          Panel.SetZIndex(element, num1);
        }
        else
        {
          int zindex2 = Panel.GetZIndex(child);
          if (bringToFront && zindex1 < zindex2 || !bringToFront && zindex2 < zindex1)
            Panel.SetZIndex(child, zindex2 + num2);
        }
      }
      Panel.SetZIndex((UIElement) this.lblBlight, 99);
      Panel.SetZIndex((UIElement) this.lblFear, 99);
      Panel.SetZIndex((UIElement) this.lblFearCardsEarned, 99);
      Panel.SetZIndex((UIElement) this.lblFearDeckCount, 99);
      Panel.SetZIndex((UIElement) this.lblFearUntilNext, 99);
      Panel.SetZIndex((UIElement) this.lblInvaderDeck, 99);
    }

    private static object OnCoerceScaleValue(DependencyObject o, object value) => o is MainWindow mainWindow ? (object) mainWindow.OnCoerceScaleValue((double) value) : value;

    private static void OnScaleValueChanged(
      DependencyObject o,
      DependencyPropertyChangedEventArgs e)
    {
      if (!(o is MainWindow mainWindow))
        return;
      mainWindow.OnScaleValueChanged((double) e.OldValue, (double) e.NewValue);
    }

    protected virtual double OnCoerceScaleValue(double value)
    {
      if (double.IsNaN(value))
        return 1.0;
      value = Math.Max(0.1, value);
      return value;
    }

    protected virtual void OnScaleValueChanged(double oldValue, double newValue)
    {
    }

    public double ScaleValue
    {
      get => (double) this.GetValue(MainWindow.ScaleValueProperty);
      set => this.SetValue(MainWindow.ScaleValueProperty, (object) value);
    }

    private void MainGrid_SizeChanged(object sender, EventArgs e) => this.CalculateScale();

    private void CalculateScale() => this.ScaleValue = (double) MainWindow.OnCoerceScaleValue((DependencyObject) this.frmMain, (object) Math.Min(this.ActualWidth / (this.frmMain.MinWidth * 2.0), this.ActualHeight / (this.frmMain.MinHeight * 1.9)));

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ToBase64Transf;component/mainwindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.frmMain = (MainWindow) target;
          this.frmMain.Loaded += new RoutedEventHandler(this.frmMain_Loaded);
          break;
        case 2:
          this.mainMenu = (Menu) target;
          break;
        case 3:
          this.newGame = (MenuItem) target;
          this.newGame.Click += new RoutedEventHandler(this.NewGame_Click);
          break;
        case 4:
          this.eventMissionariesArrive = (MenuItem) target;
          this.eventMissionariesArrive.Click += new RoutedEventHandler(this.eventNewSpeciesSpread_Click);
          break;
        case 5:
          this.eventNewSpeciesSpread = (MenuItem) target;
          this.eventNewSpeciesSpread.Click += new RoutedEventHandler(this.eventNewSpeciesSpread_Click);
          break;
        case 6:
          this.eventIgnoreTheCuriosity = (MenuItem) target;
          this.eventIgnoreTheCuriosity.Click += new RoutedEventHandler(this.eventIgnoreTheCuriosity_Click);
          break;
        case 7:
          this.eventWeaveLiesInTheirMinds = (MenuItem) target;
          this.eventWeaveLiesInTheirMinds.Click += new RoutedEventHandler(this.eventWeaveLiesInTheirMinds_Click);
          break;
        case 8:
          this.eventSlaveRebellion = (MenuItem) target;
          this.eventSlaveRebellion.Click += new RoutedEventHandler(this.eventSlaveRebellion_Click);
          break;
        case 9:
          this.eventWarTouchesTheIslandsShores = (MenuItem) target;
          this.eventWarTouchesTheIslandsShores.Click += new RoutedEventHandler(this.eventWarTouchesTheIslandsShores_Click);
          break;
        case 10:
          this.showTopFear = (MenuItem) target;
          this.showTopFear.Click += new RoutedEventHandler(this.showTopFear_Click);
          break;
        case 11:
          this.about = (MenuItem) target;
          this.about.Click += new RoutedEventHandler(this.about_Click);
          break;
        case 12:
          this.MainGrid = (Grid) target;
          this.MainGrid.SizeChanged += new SizeChangedEventHandler(this.MainGrid_SizeChanged);
          break;
        case 13:
          this.ApplicationScaleTransform = (ScaleTransform) target;
          break;
        case 14:
          this.mainCanvas = (Canvas) target;
          this.mainCanvas.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainCanvas_MouseLeftButtonDown);
          this.mainCanvas.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainCanvas_MouseLeftButtonUp);
          this.mainCanvas.MouseMove += new MouseEventHandler(this.mainCanvas_MouseMove);
          break;
        case 15:
          this.imgMyAdversaryCard = (Image) target;
          break;
        case 16:
          this.imgFearEarnedDeck = (Image) target;
          break;
        case 17:
          this.btnFear = (Button) target;
          this.btnFear.Click += new RoutedEventHandler(this.btnFear_Click);
          break;
        case 18:
          this.lblFear = (Label) target;
          break;
        case 19:
          this.lblFearUntilNext = (Label) target;
          break;
        case 20:
          this.tbTurnOrder = (TextBlock) target;
          break;
        case 21:
          this.imgBlightCard = (Image) target;
          break;
        case 22:
          this.imgEventDeck = (Image) target;
          break;
        case 23:
          this.imgEventDiscard = (Image) target;
          break;
        case 24:
          this.imgFearDeck = (Image) target;
          break;
        case 25:
          this.lblBlight = (Label) target;
          break;
        case 26:
          this.lblFearCardsEarned = (Label) target;
          break;
        case 27:
          this.imgFearDiscard = (Image) target;
          break;
        case 28:
          this.lblFearDeckCount = (Label) target;
          break;
        case 29:
          this.btnRemoveOneFear = (Button) target;
          this.btnRemoveOneFear.Click += new RoutedEventHandler(this.btnRemoveOneFear_Click);
          break;
        case 30:
          this.imgTerrorCard = (Image) target;
          break;
        case 31:
          this.imgInvaderDeck = (Image) target;
          break;
        case 32:
          this.imgInvaderBuildDeck = (Image) target;
          break;
        case 33:
          this.imgInvaderRavageDeck = (Image) target;
          break;
        case 34:
          this.imgInvaderDiscard = (Image) target;
          break;
        case 35:
          this.btnAddBlight = (Button) target;
          this.btnAddBlight.Click += new RoutedEventHandler(this.btnAddBlight_Click);
          break;
        case 36:
          this.btnRemoveBlight = (Button) target;
          this.btnRemoveBlight.Click += new RoutedEventHandler(this.btnRemoveBlight_Click);
          break;
        case 37:
          this.imgHighImmigrationTile = (Image) target;
          break;
        case 38:
          this.imgInvaderHighImmigration = (Image) target;
          break;
        case 39:
          this.lblInvaderDeck = (Label) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
