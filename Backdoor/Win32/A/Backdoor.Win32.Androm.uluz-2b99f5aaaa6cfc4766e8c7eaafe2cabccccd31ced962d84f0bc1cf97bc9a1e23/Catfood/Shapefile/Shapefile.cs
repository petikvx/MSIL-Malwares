// Decompiled with JetBrains decompiler
// Type: Catfood.Shapefile.Shapefile
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Data.OleDb;
using System.IO;

namespace Catfood.Shapefile
{
  public class Shapefile : 
    IDisposable,
    IEnumerator<Shape>,
    IEnumerator,
    IEnumerable<Shape>,
    IEnumerable
  {
    public const string ConnectionStringTemplateJet = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Extended Properties=dBase IV";
    public const string ConnectionStringTemplateAce = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=dBase IV";
    private const string DbSelectStringTemplate = "SELECT * FROM [{0}]";
    private const string MainPathExtension = "shp";
    private const string IndexPathExtension = "shx";
    private const string DbasePathExtension = "dbf";
    private bool _disposed;
    private bool _opened;
    private bool _rawMetadataOnly;
    private int _currentIndex = -1;
    private int _count;
    private RectangleD _boundingBox;
    private ShapeType _type;
    private string _shapefileMainPath;
    private string _shapefileIndexPath;
    private string _shapefileDbasePath;
    private string _shapefileTempDbasePath;
    private FileStream _mainStream;
    private FileStream _indexStream;
    private Header _mainHeader;
    private Header _indexHeader;
    private OleDbConnection _dbConnection;
    private OleDbCommand _dbCommand;
    private OleDbDataReader _dbReader;
    private string _connectionStringTemplate;

    public Shapefile()
      : this((string) null, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Extended Properties=dBase IV")
    {
    }

    public Shapefile(string path)
      : this(path, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Extended Properties=dBase IV")
    {
    }

    public Shapefile(string path, string connectionStringTemplate)
    {
      this.ConnectionStringTemplate = connectionStringTemplate != null ? connectionStringTemplate : throw new ArgumentNullException(nameof (connectionStringTemplate));
      if (path == null)
        return;
      this.Open(path);
    }

    public void Open(string path)
    {
      if (this._disposed)
        throw new ObjectDisposedException(nameof (Shapefile));
      if (path == null)
        throw new ArgumentNullException(nameof (path));
      this._shapefileMainPath = path.Length > 0 ? Path.ChangeExtension(path, "shp") : throw new ArgumentException("path parameter is empty", nameof (path));
      this._shapefileIndexPath = Path.ChangeExtension(path, "shx");
      this._shapefileDbasePath = Path.ChangeExtension(path, "dbf");
      if (!File.Exists(this._shapefileMainPath))
        throw new FileNotFoundException("Shapefile main file not found", this._shapefileMainPath);
      if (!File.Exists(this._shapefileIndexPath))
        throw new FileNotFoundException("Shapefile index file not found", this._shapefileIndexPath);
      if (!File.Exists(this._shapefileDbasePath))
        throw new FileNotFoundException("Shapefile dBase file not found", this._shapefileDbasePath);
      this._mainStream = File.Open(this._shapefileMainPath, FileMode.Open, FileAccess.Read, FileShare.Read);
      this._indexStream = File.Open(this._shapefileIndexPath, FileMode.Open, FileAccess.Read, FileShare.Read);
      if (this._mainStream.Length < 100L)
        throw new InvalidOperationException("Shapefile main file does not contain a valid header");
      if (this._indexStream.Length < 100L)
        throw new InvalidOperationException("Shapefile index file does not contain a valid header");
      byte[] numArray = new byte[100];
      this._mainStream.Read(numArray, 0, 100);
      this._mainHeader = new Header(numArray);
      this._indexStream.Read(numArray, 0, 100);
      this._indexHeader = new Header(numArray);
      this._type = this._mainHeader.ShapeType;
      this._boundingBox = new RectangleD(this._mainHeader.XMin, this._mainHeader.YMin, this._mainHeader.XMax, this._mainHeader.YMax);
      this._count = (this._indexHeader.FileLength - 50) / 4;
      this.OpenDb();
      this._opened = true;
    }

    public void Close() => this.Dispose();

    public string ConnectionStringTemplate
    {
      get => this._connectionStringTemplate;
      set => this._connectionStringTemplate = value;
    }

    public bool RawMetadataOnly
    {
      get => this._rawMetadataOnly;
      set => this._rawMetadataOnly = value;
    }

    public int Count
    {
      get
      {
        if (this._disposed)
          throw new ObjectDisposedException(nameof (Shapefile));
        if (!this._opened)
          throw new InvalidOperationException("Shapefile not open.");
        return this._count;
      }
    }

    public RectangleD BoundingBox
    {
      get
      {
        if (this._disposed)
          throw new ObjectDisposedException(nameof (Shapefile));
        if (!this._opened)
          throw new InvalidOperationException("Shapefile not open.");
        return this._boundingBox;
      }
    }

    public ShapeType Type
    {
      get
      {
        if (this._disposed)
          throw new ObjectDisposedException(nameof (Shapefile));
        if (!this._opened)
          throw new InvalidOperationException("Shapefile not open.");
        return this._type;
      }
    }

    private void OpenDb()
    {
      string path = this._shapefileDbasePath;
      if (Path.GetFileNameWithoutExtension(path).Length > 8)
      {
        string tempFileName = Path.GetTempFileName();
        try
        {
          File.Delete(tempFileName);
        }
        catch
        {
        }
        this._shapefileTempDbasePath = Path.ChangeExtension(tempFileName, "dbf");
        File.Copy(this._shapefileDbasePath, this._shapefileTempDbasePath, true);
        path = this._shapefileTempDbasePath;
      }
      string connectionString = string.Format(this.ConnectionStringTemplate, (object) Path.GetDirectoryName(path));
      string cmdText = string.Format("SELECT * FROM [{0}]", (object) Path.GetFileNameWithoutExtension(path));
      this._dbConnection = new OleDbConnection(connectionString);
      this._dbConnection.Open();
      this._dbCommand = new OleDbCommand(cmdText, this._dbConnection);
      this._dbReader = this._dbCommand.ExecuteReader();
    }

    private void CloseDb()
    {
      if (this._dbReader != null)
      {
        this._dbReader.Close();
        this._dbReader = (OleDbDataReader) null;
      }
      if (this._dbCommand != null)
      {
        this._dbCommand.Dispose();
        this._dbCommand = (OleDbCommand) null;
      }
      if (this._dbConnection != null)
      {
        this._dbConnection.Close();
        this._dbConnection = (OleDbConnection) null;
      }
      if (this._shapefileTempDbasePath == null)
        return;
      if (File.Exists(this._shapefileTempDbasePath))
      {
        try
        {
          File.Delete(this._shapefileTempDbasePath);
        }
        catch
        {
        }
      }
      this._shapefileTempDbasePath = (string) null;
    }

    ~Shapefile() => this.Dispose(false);

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    private void Dispose(bool canDisposeManagedResources)
    {
      if (this._disposed)
        return;
      if (canDisposeManagedResources)
      {
        if (this._mainStream != null)
        {
          this._mainStream.Close();
          this._mainStream = (FileStream) null;
        }
        if (this._indexStream != null)
        {
          this._indexStream.Close();
          this._indexStream = (FileStream) null;
        }
        this.CloseDb();
      }
      this._disposed = true;
      this._opened = false;
    }

    public Shape Current
    {
      get
      {
        if (this._disposed)
          throw new ObjectDisposedException(nameof (Shapefile));
        if (!this._opened)
          throw new InvalidOperationException("Shapefile not open.");
        StringDictionary metadata = (StringDictionary) null;
        if (!this.RawMetadataOnly)
        {
          metadata = new StringDictionary();
          for (int ordinal = 0; ordinal < this._dbReader.FieldCount; ++ordinal)
            metadata.Add(this._dbReader.GetName(ordinal), this._dbReader.GetValue(ordinal).ToString());
        }
        byte[] buffer = new byte[8];
        this._indexStream.Seek((long) (100 + this._currentIndex * 8), SeekOrigin.Begin);
        this._indexStream.Read(buffer, 0, buffer.Length);
        int int32 = EndianBitConverter.ToInt32(buffer, 0, ProvidedOrder.Big);
        int count = EndianBitConverter.ToInt32(buffer, 4, ProvidedOrder.Big) * 2 + 8;
        byte[] numArray = new byte[count];
        this._mainStream.Seek((long) (int32 * 2), SeekOrigin.Begin);
        this._mainStream.Read(numArray, 0, count);
        return ShapeFactory.ParseShape(numArray, metadata, (IDataRecord) this._dbReader);
      }
    }

    object IEnumerator.Current
    {
      get
      {
        if (this._disposed)
          throw new ObjectDisposedException(nameof (Shapefile));
        if (!this._opened)
          throw new InvalidOperationException("Shapefile not open.");
        return (object) this.Current;
      }
    }

    public bool MoveNext()
    {
      if (this._disposed)
        throw new ObjectDisposedException(nameof (Shapefile));
      if (!this._opened)
        throw new InvalidOperationException("Shapefile not open.");
      if (this._currentIndex++ >= this._count - 1)
        return false;
      if (!this._dbReader.Read())
        throw new InvalidOperationException("Metadata database does not contain a record for the next shape");
      return true;
    }

    public void Reset()
    {
      if (this._disposed)
        throw new ObjectDisposedException(nameof (Shapefile));
      if (!this._opened)
        throw new InvalidOperationException("Shapefile not open.");
      this.CloseDb();
      this.OpenDb();
      this._currentIndex = -1;
    }

    public IEnumerator<Shape> GetEnumerator() => (IEnumerator<Shape>) this;

    IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this;
  }
}
