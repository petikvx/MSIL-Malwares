// Decompiled with JetBrains decompiler
// Type: #Ff.#dg
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023Ff;
using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace \u0023Ff
{
  internal class \u0023dg : Control
  {
    internal int \u00239f;
    private readonly Bitmap \u0023ag;
    private readonly Bitmap \u0023bg;
    internal readonly Timer \u0023Jf;
    private float \u0023Mf;
    private float \u0023Nf;

    [MethodImpl(MethodImplOptions.NoInlining)]
    void Control.\u0023cg([In] EventArgs obj0)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              if (this.DesignMode)
                goto label_8;
              else
                goto case 4;
            case 4:
              \u0023\u0023.\u00234i(this, this.Visible);
              int num3 = 5;
              num2 = \u0023dg.WNbBF95oaI1eYgeuRAn() ? num3 : num3;
              continue;
            case 5:
              goto label_3;
            default:
              if (\u0023dg.s9hACq5WLwO2ixqNKJ1())
              {
                num2 = 4;
                continue;
              }
              goto case 4;
          }
        }
label_1:
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Control) this).OnVisibleChanged(obj0));
        num1 = 3;
      }
label_8:
      return;
label_3:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    void Control.\u0023Cf([In] EventArgs obj0)
    {
      this.Size = new Size(Convert.ToInt32(250f * this.\u0023Mf), Convert.ToInt32(42f * this.\u0023Nf));
      // ISSUE: explicit non-virtual call
      __nonvirtual (((Control) this).OnResize(obj0));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    void Control.\u0023Qf([In] float obj0, [In] float obj1)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            this.\u0023Mf = obj0;
            num2 = 4;
            break;
          case 1:
          case 4:
            this.\u0023Nf = obj1;
            // ISSUE: explicit non-virtual call
            __nonvirtual (((Control) this).ScaleCore(obj0, obj1));
            goto case 2;
          case 2:
            ((Control) this).OnResize(EventArgs.Empty);
            num2 = 5;
            break;
          case 5:
            goto label_7;
          default:
            num1 = 2;
            continue;
        }
        num1 = num2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    void Control.\u0023Sf([In] bool obj0)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_3;
            case 1:
            case 2:
              if (this.\u0023ag != null)
              {
                int num3 = 4;
                num2 = \u0023dg.WNbBF95oaI1eYgeuRAn() ? num3 : num3;
                continue;
              }
              goto label_1;
            case 4:
              goto label_8;
            case 5:
              goto label_1;
            case 6:
              goto label_7;
            default:
              goto label_11;
          }
        }
label_1:
        this.\u0023Jf.Dispose();
label_2:
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Control) this).Dispose(obj0));
        num1 = 6;
        continue;
label_3:
        if (obj0)
        {
          num1 = 2;
          continue;
        }
        goto label_2;
label_8:
        this.\u0023ag.Dispose();
        goto label_1;
label_11:
        num1 = 5;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    void Control.\u0023Rf([In] PaintEventArgs obj0)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              if (this.\u00239f > 0)
              {
                obj0.Graphics.SetClip(new Rectangle(Convert.ToInt32(46f * this.\u0023Mf), 0, Convert.ToInt32(165f * this.\u0023Mf), Convert.ToInt32(34f * this.\u0023Nf)));
                obj0.Graphics.DrawImage((Image) this.\u0023ag, new Rectangle(Convert.ToInt32((float) (this.\u00239f - 6) * this.\u0023Mf), Convert.ToInt32(16f * this.\u0023Nf), Convert.ToInt32(40f * this.\u0023Mf), Convert.ToInt32(12f * this.\u0023Nf)), 0, 0, 40, 12, GraphicsUnit.Pixel);
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto case 2;
              }
              else
                goto label_7;
            case 1:
              goto label_1;
            case 2:
            case 5:
              if (this.\u0023ag == null)
                goto label_12;
              else
                goto case 0;
            case 4:
              if (this.\u0023bg != null)
              {
                obj0.Graphics.DrawImage((Image) this.\u0023bg, new Rectangle(0, 0, Convert.ToInt32(250f * this.\u0023Mf), Convert.ToInt32(42f * this.\u0023Nf)), new Rectangle(0, 0, 250, 42), GraphicsUnit.Pixel);
                num2 = 5;
                continue;
              }
              goto case 2;
            case 6:
              goto label_13;
            default:
              goto label_10;
          }
        }
label_1:
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Control) this).OnPaint(obj0));
        num1 = 4;
        continue;
label_10:
        num1 = 0;
      }
label_7:
      return;
label_12:
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023Tf([In] object obj0, [In] EventArgs obj1)
    {
      int num = 4;
      if (true)
        goto label_3;
label_1:
      if (this.\u00239f <= 198)
        goto label_6;
      else
        goto label_5;
label_3:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            this.\u00239f += 11;
            if (true)
            {
              num = 1;
              continue;
            }
            goto label_8;
          case 1:
            goto label_1;
          case 2:
          case 3:
            goto label_5;
          case 5:
            goto label_2;
          default:
            num = 3;
            continue;
        }
      }
label_2:
      return;
label_8:
      return;
label_5:
      this.\u00239f = 0;
label_6:
      this.Refresh();
      num = 5;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0023dg()
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this.\u0023Nf = 1f;
            goto case 3;
          case 1:
          case 6:
            this.\u0023ag = \u0023\u0023.\u00235i("data");
            this.\u0023bg = \u0023\u0023.\u00235i("network");
            this.\u0023Jf = new Timer();
            this.\u0023Mf = 1f;
            num1 = 0;
            continue;
          case 2:
            this.\u00239f = 99;
            num1 = 6;
            continue;
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.\u0023Jf.Interval = 85;
            this.\u0023Jf.Tick += new EventHandler(this.\u0023Tf);
            num2 = 5;
            break;
          case 4:
          case 5:
            this.Size = new Size(250, 42);
            this.TabStop = false;
            this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.DoubleBuffer, true);
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_9;
          case 7:
            goto label_10;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_10:
      return;
label_9:;
    }

    internal static bool s9hACq5WLwO2ixqNKJ1() => true;

    internal static bool WNbBF95oaI1eYgeuRAn() => false;
  }
}
