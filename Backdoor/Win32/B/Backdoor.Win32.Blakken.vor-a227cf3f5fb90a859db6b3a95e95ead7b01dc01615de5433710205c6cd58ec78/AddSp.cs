// Decompiled with JetBrains decompiler
// Type: ManagerMarket.AddSp
// Assembly: cDisplayClass310, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8C7A4461-A171-4409-B75B-AB5BE5ABB986
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\Backdoor.Win32.Blakken.vor-a227cf3f5fb90a859db6b3a95e95ead7b01dc01615de5433710205c6cd58ec78.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ManagerMarket
{
  [DesignerGenerated]
  public class AddSp : Form
  {
    private IContainer components;
    private DataBaseAccess dataaccess;

    public AddSp()
    {
      this.Load += new EventHandler(this.AddSp_Load);
      this.dataaccess = new DataBaseAccess();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.lablbla = new Label();
      this.labbale = new Label();
      this.Label3 = new Label();
      this.txtLoaisp = new TextBox();
      this.txtMasp = new TextBox();
      this.txtTensp = new TextBox();
      this.Label4 = new Label();
      this.txtSoluong = new TextBox();
      this.btnOK = new Button();
      this.btnCanc = new Button();
      this.SuspendLayout();
      this.lablbla.AutoSize = true;
      this.lablbla.Location = new Point(13, 26);
      this.lablbla.Name = "lablbla";
      this.lablbla.Size = new Size(44, 13);
      this.lablbla.TabIndex = 0;
      this.lablbla.Text = "Loai SP";
      this.labbale.AutoSize = true;
      this.labbale.Location = new Point(13, 71);
      this.labbale.Name = "labbale";
      this.labbale.Size = new Size(39, 13);
      this.labbale.TabIndex = 1;
      this.labbale.Text = "Ma SP";
      this.Label3.AutoSize = true;
      this.Label3.Location = new Point(13, 119);
      this.Label3.Name = "Label3";
      this.Label3.Size = new Size(43, 13);
      this.Label3.TabIndex = 2;
      this.Label3.Text = "Ten SP";
      this.txtLoaisp.Location = new Point(72, 23);
      this.txtLoaisp.Name = "txtLoaisp";
      this.txtLoaisp.ReadOnly = true;
      this.txtLoaisp.Size = new Size(179, 20);
      this.txtLoaisp.TabIndex = 3;
      this.txtMasp.Location = new Point(72, 68);
      this.txtMasp.Name = "txtMasp";
      this.txtMasp.Size = new Size(179, 20);
      this.txtMasp.TabIndex = 4;
      this.txtTensp.Location = new Point(72, 116);
      this.txtTensp.Name = "txtTensp";
      this.txtTensp.Size = new Size(179, 20);
      this.txtTensp.TabIndex = 5;
      this.Label4.AutoSize = true;
      this.Label4.Location = new Point(13, 168);
      this.Label4.Name = "Label4";
      this.Label4.Size = new Size(53, 13);
      this.Label4.TabIndex = 6;
      this.Label4.Text = "So Luong";
      this.txtSoluong.Location = new Point(72, 168);
      this.txtSoluong.Name = "txtSoluong";
      this.txtSoluong.Size = new Size(179, 20);
      this.txtSoluong.TabIndex = 7;
      this.btnOK.Location = new Point(48, 207);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new Size(75, 23);
      this.btnOK.TabIndex = 8;
      this.btnOK.Text = "OK";
      this.btnOK.UseVisualStyleBackColor = true;
      this.btnCanc.Location = new Point(160, 207);
      this.btnCanc.Name = "btnCanc";
      this.btnCanc.Size = new Size(75, 23);
      this.btnCanc.TabIndex = 9;
      this.btnCanc.Text = "Cancel";
      this.btnCanc.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(284, 262);
      this.Controls.Add((Control) this.btnCanc);
      this.Controls.Add((Control) this.btnOK);
      this.Controls.Add((Control) this.txtSoluong);
      this.Controls.Add((Control) this.Label4);
      this.Controls.Add((Control) this.txtTensp);
      this.Controls.Add((Control) this.txtMasp);
      this.Controls.Add((Control) this.txtLoaisp);
      this.Controls.Add((Control) this.Label3);
      this.Controls.Add((Control) this.labbale);
      this.Controls.Add((Control) this.lablbla);
      this.Name = nameof (AddSp);
      this.Text = nameof (AddSp);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("lablbla")]
    internal virtual Label lablbla { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("labbale")]
    internal virtual Label labbale { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label3")]
    internal virtual Label Label3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtLoaisp")]
    internal virtual TextBox txtLoaisp { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtMasp")]
    internal virtual TextBox txtMasp { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtTensp")]
    internal virtual TextBox txtTensp { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label4")]
    internal virtual Label Label4 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtSoluong")]
    internal virtual TextBox txtSoluong { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button btnOK
    {
      get => this._btnOK;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnOK_Click);
        Button btnOk1 = this._btnOK;
        if (btnOk1 != null)
          btnOk1.Click -= eventHandler;
        this._btnOK = value;
        Button btnOk2 = this._btnOK;
        if (btnOk2 == null)
          return;
        btnOk2.Click += eventHandler;
      }
    }

    internal virtual Button btnCanc
    {
      get => this._btnCanc;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnCanc_Click);
        Button btnCanc1 = this._btnCanc;
        if (btnCanc1 != null)
          btnCanc1.Click -= eventHandler;
        this._btnCanc = value;
        Button btnCanc2 = this._btnCanc;
        if (btnCanc2 == null)
          return;
        btnCanc2.Click += eventHandler;
      }
    }

    private object AddStudent() => (object) this.dataaccess.ExecuteNoneQuery("INSERT INTO SanPham (MaSP,TenSP,SL,MaLSP)" + string.Format("VALUES ('{0}','{1}','{2}','{3}')", (object) this.txtMasp.Text, (object) this.txtTensp.Text, (object) this.txtSoluong.Text, (object) this.txtLoaisp.Text));

    private object IsEmpty() => (object) (bool) (string.IsNullOrEmpty(this.txtMasp.Text) || string.IsNullOrEmpty(this.txtTensp.Text) || string.IsNullOrEmpty(this.txtSoluong.Text) ? 1 : (string.IsNullOrEmpty(this.txtLoaisp.Text) ? 1 : 0));

    private void AddSp_Load(object sender, EventArgs e)
    {
    }

    private void btnOK_Click(object sender, EventArgs e)
    {
      if (Conversions.ToBoolean(this.IsEmpty()))
      {
        int num1 = (int) MessageBox.Show("Chua nhap gia tri", "Error", MessageBoxButtons.OK);
      }
      else
      {
        if (Conversions.ToBoolean(this.AddStudent()))
        {
          int num2 = (int) MessageBox.Show("Them thanh cong", "Success", MessageBoxButtons.OK);
          this.DialogResult = DialogResult.OK;
        }
        else
        {
          int num3 = (int) MessageBox.Show("Them that bai", "Error", MessageBoxButtons.OK);
          this.DialogResult = DialogResult.No;
        }
        this.Close();
      }
    }

    private void btnCanc_Click(object sender, EventArgs e) => this.Close();
  }
}
