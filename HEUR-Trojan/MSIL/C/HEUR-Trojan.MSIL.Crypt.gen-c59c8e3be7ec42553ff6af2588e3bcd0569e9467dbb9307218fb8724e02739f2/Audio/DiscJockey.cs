// Decompiled with JetBrains decompiler
// Type: Cradiator.Audio.DiscJockey
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Config;
using Cradiator.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Cradiator.Audio
{
  public class DiscJockey : IConfigObserver
  {
    private IEnumerable<ProjectStatus> _previousBuildData = (IEnumerable<ProjectStatus>) new List<ProjectStatus>();
    private readonly IAudioPlayer _audioPlayer;
    private readonly SpeechMaker _speechMaker;
    private string _brokenBuildSound;
    private string _fixedBuildSound;

    public DiscJockey(
      IConfigSettings configSettings,
      IAudioPlayer audioPlayer,
      SpeechMaker speechMaker)
    {
      this._audioPlayer = audioPlayer;
      this._speechMaker = speechMaker;
      this._brokenBuildSound = configSettings.BrokenBuildSound;
      this._fixedBuildSound = configSettings.FixedBuildSound;
      configSettings.AddObserver((IConfigObserver) this);
    }

    public void PlaySounds(IEnumerable<ProjectStatus> currentBuildData)
    {
      IEnumerable<ProjectStatus> projectStatuses1 = currentBuildData.Where<ProjectStatus>((Func<ProjectStatus, bool>) (proj => proj.IsBroken)).Intersect<ProjectStatus>(this._previousBuildData.Where<ProjectStatus>((Func<ProjectStatus, bool>) (proj => !proj.IsBroken)));
      if (projectStatuses1.Any<ProjectStatus>())
      {
        this._audioPlayer.Play(this._brokenBuildSound);
        this._audioPlayer.Say(this._speechMaker.BuildIsBroken(projectStatuses1));
      }
      else
      {
        IEnumerable<ProjectStatus> projectStatuses2 = currentBuildData.Where<ProjectStatus>((Func<ProjectStatus, bool>) (proj => proj.IsSuccessful)).Intersect<ProjectStatus>(this._previousBuildData.Where<ProjectStatus>((Func<ProjectStatus, bool>) (proj => !proj.IsSuccessful)));
        if (projectStatuses2.Any<ProjectStatus>())
        {
          this._audioPlayer.Play(this._fixedBuildSound);
          this._audioPlayer.Say(this._speechMaker.BuildIsFixed(projectStatuses2));
        }
      }
      this._previousBuildData = currentBuildData;
    }

    public void ConfigUpdated(ConfigSettings newSettings)
    {
      this._brokenBuildSound = newSettings.BrokenBuildSound;
      this._fixedBuildSound = newSettings.FixedBuildSound;
    }
  }
}
