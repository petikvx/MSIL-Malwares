// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: Eviden, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 0FBAEA8D-82D6-42CE-BC01-F979DED3F8E4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-25002a8f723189cf80ad649d7af9ccf8c389291bb64e2eed7665e7a21823634b.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -420453416;
      JSONNode jsonNode;
      int aIndex;
      int count;
      bool flag1;
      int index;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -776851299)) % 19U)
        {
          case 0:
            ++aIndex;
            num1 = (int) num2 * 1825299318 ^ -1770194229;
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 2100026983 ^ 1013196298;
            continue;
          case 2:
            this._dice = new Dice();
            jsonNode = json["players"];
            num1 = (int) num2 * -904746458 ^ -518295619;
            continue;
          case 3:
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * 890533494 ^ 2036300718;
            continue;
          case 4:
            count = jsonNode.Count;
            num1 = (int) num2 * -1740141024 ^ -1078719081;
            continue;
          case 5:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * -315185684 ^ 853149336;
            continue;
          case 6:
            this._random = Game.\u206B‭‪⁪‏​​⁪‍‭⁭​‎‏‪‍⁬‏‮‭‬‬⁫‏‎‬‭⁫‪​‌‌‪‍⁪‏‬‮‬‭‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * 1052897885 ^ 1379858914;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -773989569 ^ -929517301;
            continue;
          case 8:
            goto label_3;
          case 9:
            int num3 = flag2 ? 1730375674 : (num3 = 1197491559);
            num1 = num3 ^ (int) num2 * 1074638674;
            continue;
          case 10:
            goto label_1;
          case 11:
            this._buffer = buffer;
            num1 = (int) num2 * 1265862359 ^ 1962271393;
            continue;
          case 12:
            int num4 = flag1 ? -1970460511 : (num4 = -1792213205);
            num1 = num4 ^ (int) num2 * 461680221;
            continue;
          case 13:
            num1 = (int) num2 * -453269396 ^ -1220940107;
            continue;
          case 14:
            this.Players = new Player[count];
            num1 = (int) num2 * 920393837 ^ 754872790;
            continue;
          case 15:
            this._playerStates[index] = new PlayerState();
            num1 = -1338983213;
            continue;
          case 16:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -1169838688;
            continue;
          case 17:
            flag1 = aIndex < count;
            num1 = -177497806;
            continue;
          case 18:
            flag2 = index < count;
            num1 = -200352244;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 779803835;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 462300830)) % 12U)
          {
            case 0:
              int num3 = playerState.State == State.Playing ? -653831134 : (num3 = -997181719);
              num1 = num3 ^ (int) num2 * -1159166096;
              continue;
            case 2:
              playerState = playerStates[index];
              num1 = 54586530;
              continue;
            case 3:
              goto label_1;
            case 4:
              num1 = 1243259640;
              continue;
            case 5:
              int num4 = finished1 ? -1822435611 : (num4 = -1635928450);
              num1 = num4 ^ (int) num2 * -1412870712;
              continue;
            case 6:
              finished2 = true;
              num1 = (int) num2 * -983376777 ^ 2047600797;
              continue;
            case 7:
              finished2 = true;
              num1 = (int) num2 * -1915804072 ^ -1488840009;
              continue;
            case 8:
              finished2 = false;
              num1 = (int) num2 * 368835109 ^ 793591379;
              continue;
            case 9:
              int num5;
              num1 = num5 = index < playerStates.Length ? 20900884 : (num5 = 1059294832);
              continue;
            case 10:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * -307921094 ^ -2123670769;
              continue;
            case 11:
              ++index;
              num1 = 1819918867;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = 1227696469;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 265349254)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Losers.Clear();
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * -484569901 ^ 1017248822;
            continue;
          case 2:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 3405899 ^ 169969869;
            continue;
          case 3:
            this.Winners.Clear();
            num1 = (int) num2 * -1258293400 ^ -475785949;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 1006389766 ^ 1809787774;
            continue;
          case 6:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1059772086 ^ -1910149630;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1275147159;
      int index;
      Player player;
      int num2;
      bool flag1;
      int planningCardsCount;
      PlayerState playerState;
      bool flag2;
      bool morePlanningSprint;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1869120196)) % 28U)
        {
          case 0:
            num2 = 0;
            num1 = 1193753574;
            continue;
          case 1:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = 1237237511;
            continue;
          case 2:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1189976721 ^ 1371141396;
            continue;
          case 3:
            goto label_1;
          case 4:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 537489549 ^ 1331941532;
            continue;
          case 5:
            playerState.State = State.Playing;
            num1 = (int) num3 * -1485303866 ^ -1437599594;
            continue;
          case 6:
            num1 = 218152333;
            continue;
          case 7:
            index = 0;
            num1 = (int) num3 * -829479329 ^ -616776116;
            continue;
          case 8:
            int num4 = !flag1 ? -1625826200 : (num4 = -760193526);
            num1 = num4 ^ (int) num3 * 176905752;
            continue;
          case 9:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1848146492 ^ -396170053;
            continue;
          case 10:
            num1 = (int) num3 * -1884487736 ^ 1965124124;
            continue;
          case 11:
            int num5 = !morePlanningSprint ? 1166554003 : (num5 = 1204470131);
            num1 = num5 ^ (int) num3 * -171265549;
            continue;
          case 12:
            int num6 = flag2 ? 181430397 : (num6 = 1735551403);
            num1 = num6 ^ (int) num3 * 34360956;
            continue;
          case 13:
            int num7 = flag3 ? 1296443056 : (num7 = 1054656517);
            num1 = num7 ^ (int) num3 * 224389677;
            continue;
          case 14:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -487360844 ^ -1975484455;
            continue;
          case 15:
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            num1 = (int) num3 * 1138066102 ^ -1098083912;
            continue;
          case 16:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 130458740 ^ 1487795038;
            continue;
          case 17:
            playerState.Sprint = 1;
            num1 = (int) num3 * -823827561 ^ -241434814;
            continue;
          case 18:
            num1 = (int) num3 * -25838961 ^ -319035036;
            continue;
          case 19:
            num1 = 531113129;
            continue;
          case 20:
            goto label_3;
          case 21:
            num1 = (int) num3 * -1288106150 ^ 237817413;
            continue;
          case 22:
            num1 = (int) num3 * -2108071283 ^ 1892150164;
            continue;
          case 23:
            flag3 = index < this.Players.Length;
            num1 = 1976840105;
            continue;
          case 24:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1937327288 ^ -382829256;
            continue;
          case 25:
            num1 = 673858459;
            continue;
          case 26:
            flag1 = num2 > 0;
            num1 = 747826784;
            continue;
          case 27:
            player = this.Players[index];
            num1 = (int) num3 * -474351059 ^ -1594264936;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -1862231791;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -428765102)) % 14U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            flag = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 379183275 ^ 323899854;
            continue;
          case 3:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -933462612 ^ -2024388645;
            continue;
          case 4:
            num1 = (int) num2 * -1510038583 ^ 1282326409;
            continue;
          case 5:
            this.Print((object) Game.\u206A‭⁮‬​⁬‪‫‎‏⁫⁮‪‎⁪‌⁬⁪‬⁬⁯‏⁯⁪‬​‪‮‌‌‏⁯⁪‫‏‮⁮‮‏‮‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = -1423593062;
            continue;
          case 6:
            this._currentPlayer = 0;
            int num3 = this._currentTurn <= 0 ? -1196570013 : (num3 = -1046475437);
            num1 = num3 ^ (int) num2 * 972487379;
            continue;
          case 7:
            ++this._currentPlayer;
            num1 = (int) num2 * 2056201022 ^ -1834049382;
            continue;
          case 8:
            this.PlayerTurn(this._currentPlayer);
            num1 = -1317475643;
            continue;
          case 9:
            num1 = (int) num2 * -1561152225 ^ 1978834606;
            continue;
          case 10:
            this.Print((object) Game.\u202D‭‏‍⁮⁯‫⁮‍⁪​⁫⁪⁯‮⁭⁬‎‫‏⁮‍⁭‭⁮⁭‎‌‎​‬‭⁭‎⁯‮‪⁬‪‬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1407065427 ^ 1790524974;
            continue;
          case 11:
            num1 = (int) num2 * -1161764139 ^ -281034597;
            continue;
          case 12:
            int num4 = !flag ? -1521618836 : (num4 = -416267560);
            num1 = num4 ^ (int) num2 * -1266192970;
            continue;
          case 13:
            num1 = (int) num2 * -164896152 ^ -1782149591;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = -397429414;
      while (true)
      {
        uint num2;
        int index;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        Card card;
        PlayerState playerState2;
        bool flag3;
        int num3;
        bool flag4;
        int num4;
        bool flag5;
        bool onlyOneWinner;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num5;
        switch ((num2 = (uint) (num1 ^ -347173518)) % 84U)
        {
          case 0:
            num1 = -693869576;
            continue;
          case 1:
            num1 = -1855894674;
            continue;
          case 2:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u202D‭‏‍⁮⁯‫⁮‍⁪​⁫⁪⁯‮⁭⁬‎‫‏⁮‍⁭‭⁮⁭‎‌‎​‬‭⁭‎⁯‮‪⁬‪‬‮("\t", playerState3 != null ? Game.\u200E‎⁬‍​‮‎‭‬⁬‮‪⁫‪‏⁬‌‬‏‍‮⁪‏⁯​⁪‍‮‏⁭⁪⁮⁯‍‬​‪‪⁫‮((object) playerState3) : (string) null));
            num1 = -2081166300;
            continue;
          case 3:
            num1 = -1277949691;
            continue;
          case 4:
            num1 = (int) num2 * -1827253282 ^ 1537894735;
            continue;
          case 5:
            num1 = (int) num2 * -1922997448 ^ 2115324887;
            continue;
          case 6:
            num1 = -1389112246;
            continue;
          case 7:
            ++index;
            num1 = -1926340341;
            continue;
          case 8:
            ++playerState2.Sprint;
            num1 = (int) num2 * -669936124 ^ 2085086958;
            continue;
          case 9:
            int num6 = !flag12 ? 601684248 : (num6 = 532623740);
            num1 = num6 ^ (int) num2 * 1352644518;
            continue;
          case 10:
            flag7 = playerState2.State != 0;
            num1 = (int) num2 * 2034736851 ^ -1667720264;
            continue;
          case 11:
            num1 = (int) num2 * 348993375 ^ -190440428;
            continue;
          case 12:
            int num7 = num4 != playerIndex ? -359359878 : (num7 = -1204523323);
            num1 = num7 ^ (int) num2 * 1458143079;
            continue;
          case 13:
            playerState2.State = State.Lose;
            num1 = (int) num2 * 4610338 ^ 1515313673;
            continue;
          case 14:
            goto label_1;
          case 15:
            num1 = (int) num2 * 2075939116 ^ -963345287;
            continue;
          case 16:
            int num8;
            num1 = num8 = playerState2.Sprint > this.Rules.SprintCount ? -478962750 : (num8 = -693869576);
            continue;
          case 17:
            flag3 = true;
            num3 = card.Impact;
            num1 = (int) num2 * 630561914 ^ 1936955823;
            continue;
          case 18:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * -609857698 ^ 167717649;
            continue;
          case 19:
            int num9 = !flag1 ? -922657481 : (num9 = -1138400822);
            num1 = num9 ^ (int) num2 * 2054891700;
            continue;
          case 20:
            playerState1 = this._playerStates[index];
            num1 = -1689083625;
            continue;
          case 21:
            num1 = (int) num2 * -1943226533 ^ 700939254;
            continue;
          case 22:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag1 ? (object) "ALL " : (object) "", flag6 ? (object) "receives" : (object) "pays", (object) Game.\u200D‌‭‬​‬‬⁪‪‏‫‭‮‍⁪‬‎‬⁯‏⁫‫⁬‏⁯‍‪‌‮‌⁭⁪‪‏‭⁫​‭‮(num3), flag3 ? (object) "advance" : (object) "stay");
            num1 = -294518323;
            continue;
          case 23:
            card = this.DrawCard();
            flag6 = card.Impact < 0;
            num1 = -585343215;
            continue;
          case 24:
            int num10 = flag7 ? -307848271 : (num10 = -224374109);
            num1 = num10 ^ (int) num2 * -1850990364;
            continue;
          case 25:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -181789807 ^ 541939124;
            continue;
          case 26:
            this.Print((object) Game.\u202D‭‏‍⁮⁯‫⁮‍⁪​⁫⁪⁯‮⁭⁬‎‫‏⁮‍⁭‭⁮⁭‎‌‎​‬‭⁭‎⁯‮‪⁬‪‬‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -655629439 ^ 988300717;
            continue;
          case 27:
            num1 = (int) num2 * -269756301 ^ -1917490371;
            continue;
          case 28:
            num1 = -1870942867;
            continue;
          case 29:
            num1 = (int) num2 * -1626461587 ^ 1082834661;
            continue;
          case 30:
            flag3 = true;
            num1 = (int) num2 * -612893867 ^ -888836669;
            continue;
          case 31:
            flag5 = num4 < this._playerStates.Length;
            num1 = -813661886;
            continue;
          case 32:
            num1 = (int) num2 * -950514997 ^ 1831505659;
            continue;
          case 33:
            playerState2.Resources -= num3;
            flag8 = playerState2.Resources < 0;
            num1 = (int) num2 * -1150914571 ^ 1505893577;
            continue;
          case 34:
            int num11 = !flag8 ? -2115190518 : (num11 = -1431120055);
            num1 = num11 ^ (int) num2 * -2027556281;
            continue;
          case 35:
            num1 = -79215038;
            continue;
          case 36:
            num1 = (int) num2 * 767811778 ^ 1907629035;
            continue;
          case 37:
            int num12;
            num1 = num12 = playerState2.Sprint >= 0 ? -1108637427 : (num12 = -1179936710);
            continue;
          case 38:
            this.Losers.Add(num4);
            num1 = (int) num2 * 1611163652 ^ -1812687812;
            continue;
          case 39:
            num1 = (int) num2 * 795137981 ^ -1689428961;
            continue;
          case 40:
            num4 = 0;
            num1 = (int) num2 * 1906725690 ^ -1916276427;
            continue;
          case 41:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 42:
            playerState2.State = State.Won;
            num1 = (int) num2 * -422961583 ^ -559578503;
            continue;
          case 43:
            num1 = (int) num2 * 661780801 ^ -305768503;
            continue;
          case 44:
            num1 = (int) num2 * -21909858 ^ 767089046;
            continue;
          case 45:
            flag2 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -708469221 ^ 1798734071;
            continue;
          case 46:
            playerState1.State = State.Lose;
            flag10 = !this.Losers.Contains(index);
            num1 = -1625099132;
            continue;
          case 47:
            int num13 = flag11 ? 419901415 : (num13 = 173256207);
            num1 = num13 ^ (int) num2 * 341304864;
            continue;
          case 48:
            int num14 = !flag9 ? -997022632 : (num14 = -489009539);
            num1 = num14 ^ (int) num2 * 426668896;
            continue;
          case 49:
            num1 = -1983345525;
            continue;
          case 50:
            num1 = (int) num2 * 1635716060 ^ -1736772409;
            continue;
          case 51:
            int num15 = !onlyOneWinner ? 1103214086 : (num15 = 1563671399);
            num1 = num15 ^ (int) num2 * 2000312636;
            continue;
          case 52:
            playerState2 = this._playerStates[playerIndex];
            num1 = (int) num2 * 731249451 ^ -1317259032;
            continue;
          case 53:
            num1 = -771535469;
            continue;
          case 54:
            int num16 = flag10 ? 1665041228 : (num16 = 1218271005);
            num1 = num16 ^ (int) num2 * -2123873242;
            continue;
          case 55:
            flag4 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1540584978;
            continue;
          case 56:
            ++num4;
            num1 = -1903432419;
            continue;
          case 57:
            int num17;
            num1 = num17 = index < this._playerStates.Length ? -287962858 : (num17 = -1474295906);
            continue;
          case 58:
            num1 = (int) num2 * 1079858269 ^ -1501655804;
            continue;
          case 59:
            index = 0;
            num1 = (int) num2 * 1400084591 ^ -779839977;
            continue;
          case 60:
            int num18;
            num1 = num18 = this.Losers.Contains(num4) ? -1818717585 : (num18 = -1857265432);
            continue;
          case 61:
            this._finished = true;
            num1 = (int) num2 * 1843833558 ^ -1945849496;
            continue;
          case 62:
            this.Losers.Add(index);
            num1 = (int) num2 * 1961519455 ^ 449522441;
            continue;
          case 63:
            flag11 = !flag6;
            num1 = (int) num2 * 1809525829 ^ 2075994338;
            continue;
          case 64:
            num1 = (int) num2 * -1449505243 ^ 1858666991;
            continue;
          case 65:
            int num19 = card.Impact - player.PlannedForCard(card.Type);
            flag3 = num19 < this.Rules.StayOnSprintMinDiff;
            num3 = Game.\u200D‌‏‬‬⁫​‭⁯⁪‌‮‌‮‏‏‍‌‭⁯‎‫‮‍⁮‪‌⁪‎‬⁬⁬‍​⁮‬‭⁫⁫‍‮(0, num19);
            num1 = (int) num2 * -46208641 ^ 1240168399;
            continue;
          case 66:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -1034547089 ^ -1792187121;
            continue;
          case 67:
            flag3 = false;
            num1 = -804271233;
            continue;
          case 68:
            int num20 = !flag5 ? 643411548 : (num20 = 1832987749);
            num1 = num20 ^ (int) num2 * -2082984663;
            continue;
          case 69:
            num1 = (int) num2 * -180715373 ^ 1645753207;
            continue;
          case 70:
            int num21 = !flag2 ? 1699496793 : (num21 = 673451100);
            num1 = num21 ^ (int) num2 * -2033192916;
            continue;
          case 71:
            num1 = (int) num2 * 1009822737 ^ -201355421;
            continue;
          case 72:
            num1 = (int) num2 * -887706669 ^ -2060828260;
            continue;
          case 73:
            num1 = (int) num2 * 1201899209 ^ -2103393551;
            continue;
          case 74:
            num1 = (int) num2 * 113844315 ^ -105430066;
            continue;
          case 75:
            num1 = (int) num2 * 933861828 ^ 1722987892;
            continue;
          case 76:
            int num22 = flag4 ? 1140409627 : (num22 = 242125833);
            num1 = num22 ^ (int) num2 * 150411780;
            continue;
          case 77:
            flag12 = flag3;
            num1 = -188418725;
            continue;
          case 78:
            goto label_3;
          case 79:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * 779971143 ^ 153126498;
            continue;
          case 80:
            ++playerState2.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1208391083 ^ -710081212;
            continue;
          case 81:
            playerState1.Resources -= Game.\u200D‌‏‬‬⁫​‭⁯⁪‌‮‌‮‏‏‍‌‭⁯‎‫‮‍⁮‪‌⁪‎‬⁬⁬‍​⁮‬‭⁫⁫‍‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            flag9 = playerState1.Resources >= 0;
            num1 = (int) num2 * 299791365 ^ -1930155465;
            continue;
          case 82:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 734066126 ^ -1531376699;
            continue;
          case 83:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1718315756 ^ -237084358;
            continue;
          default:
            goto label_89;
        }
        flag1 = num5 != 0;
        num1 = -748356935;
      }
label_3:
      return;
label_89:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1431189864;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1333630207)) % 8U)
        {
          case 0:
            card2 = card1;
            num1 = (int) num2 * -1520299227 ^ 1271862714;
            continue;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -660576066 ^ -143678187;
            continue;
          case 2:
            int num3 = flag ? 77172702 : (num3 = 313805965);
            num1 = num3 ^ (int) num2 * 1834354085;
            continue;
          case 3:
            num1 = (int) num2 * 606344780 ^ 1972131402;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.ShuffleCards();
            num1 = (int) num2 * -1900183330 ^ -336282903;
            continue;
          case 6:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = -546564831;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = 2111491292;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1418915666)) % 8U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * 2068164197 ^ -782138285;
            continue;
          case 1:
            num1 = (int) num2 * 2023033220 ^ 1035716169;
            continue;
          case 2:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? 1975950926 : (num3 = 2042659602);
            continue;
          case 3:
            goto label_1;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200E‎⁬‍​‮‎‭‬⁬‮‪⁫‪‏⁬‌‬‏‍‮⁪‏⁯​⁪‍‮‏⁭⁪⁮⁯‍‬​‪‪⁫‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200C‮‎⁪⁮⁭‎‌​​‬⁫‌⁬‭⁬⁫‬​‪⁬‬​‪⁯‌‫⁯⁪‍⁪⁭‮​⁮⁪⁪‫⁯‬‮(strArray);
            num1 = 326905215;
            continue;
          case 5:
            ++index;
            num1 = (int) num2 * 195049655 ^ -1605089829;
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * 1713264447 ^ 979952130;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = -599084141;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -38338423)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 846312107 ^ -317771172;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u200D‌‭‬⁪⁫‌‏⁫‎‍⁫‮⁭​⁫‏⁫⁫‌‏​‪⁭‫‎⁫‏⁯‭​‏‏⁭⁪⁫⁫‏⁭‍‮(this._buffer, Game.\u206D⁯‎⁮‍​⁪‪‮⁪⁯‍‌⁬‫⁯​‌‎⁪⁪⁮​⁪‍‮‫​⁪⁫⁮⁫⁪‍‏‍‌‮⁬‪‮(Game.\u200E‎⁬‍​‮‎‭‬⁬‮‪⁫‪‏⁬‌‬‏‍‮⁪‏⁯​⁪‍‮‏⁭⁪⁮⁯‍‬​‪‪⁫‮(text), more));

    static Random \u206B‭‪⁪‏​​⁪‍‭⁭​‎‏‪‍⁬‏‮‭‬‬⁫‏‎‬‭⁫‪​‌‌‪‍⁪‏‬‮‬‭‮([In] int obj0) => new Random(obj0);

    static string \u206A‭⁮‬​⁬‪‫‎‏⁫⁮‪‎⁪‌⁬⁪‬⁬⁯‏⁯⁪‬​‪‮‌‌‏⁯⁪‫‏‮⁮‮‏‮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202D‭‏‍⁮⁯‫⁮‍⁪​⁫⁪⁯‮⁭⁬‎‫‏⁮‍⁭‭⁮⁭‎‌‎​‬‭⁭‎⁯‮‪⁬‪‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200D‌‏‬‬⁫​‭⁯⁪‌‮‌‮‏‏‍‌‭⁯‎‫‮‍⁮‪‌⁪‎‬⁬⁬‍​⁮‬‭⁫⁫‍‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200D‌‭‬​‬‬⁪‪‏‫‭‮‍⁪‬‎‬⁯‏⁫‫⁬‏⁯‍‪‌‮‌⁭⁪‪‏‭⁫​‭‮([In] int obj0) => Math.Abs(obj0);

    static string \u200E‎⁬‍​‮‎‭‬⁬‮‪⁫‪‏⁬‌‬‏‍‮⁪‏⁯​⁪‍‮‏⁭⁪⁮⁯‍‬​‪‪⁫‮([In] object obj0) => obj0.ToString();

    static string \u200C‮‎⁪⁮⁭‎‌​​‬⁫‌⁬‭⁬⁫‬​‪⁬‬​‪⁯‌‫⁯⁪‍⁪⁭‮​⁮⁪⁪‫⁯‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206D⁯‎⁮‍​⁪‪‮⁪⁯‍‌⁬‫⁯​‌‎⁪⁪⁮​⁪‍‮‫​⁪⁫⁮⁫⁪‍‏‍‌‮⁬‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200D‌‭‬⁪⁫‌‏⁫‎‍⁫‮⁭​⁫‏⁫⁫‌‏​‪⁭‫‎⁫‏⁯‭​‏‏⁭⁪⁫⁫‏⁭‍‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
