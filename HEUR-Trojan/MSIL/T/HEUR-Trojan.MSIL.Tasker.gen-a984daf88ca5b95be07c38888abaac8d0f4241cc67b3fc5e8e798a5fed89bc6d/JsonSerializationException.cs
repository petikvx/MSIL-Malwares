// Decompiled with JetBrains decompiler
// Type: JsonSerializationException
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;

public sealed class JsonSerializationException : Exception
{
  public JsonSerializationException.ErrorType Type { get; private set; }

  public JsonSerializationException()
    : base(JsonSerializationException.GetDefaultMessage(JsonSerializationException.ErrorType.Unknown))
  {
  }

  public JsonSerializationException(JsonSerializationException.ErrorType type)
    : this(JsonSerializationException.GetDefaultMessage(type), type)
  {
  }

  public JsonSerializationException(string message, JsonSerializationException.ErrorType type)
    : base(message)
  {
    this.Type = type;
  }

  private static string GetDefaultMessage(JsonSerializationException.ErrorType type)
  {
    string defaultMessage;
    switch (type)
    {
      case JsonSerializationException.ErrorType.InvalidNumber:
        defaultMessage = "The value been serialized contains an invalid number value (NAN, infinity).";
        break;
      case JsonSerializationException.ErrorType.InvalidValueType:
        defaultMessage = "The value been serialized contains (or is) an invalid JSON type.";
        break;
      case JsonSerializationException.ErrorType.CircularReference:
        defaultMessage = "The value been serialized contains circular references.";
        break;
      default:
        defaultMessage = "An error occurred during serialization.";
        break;
    }
    return defaultMessage;
  }

  public enum ErrorType
  {
    Unknown,
    InvalidNumber,
    InvalidValueType,
    CircularReference,
  }
}
