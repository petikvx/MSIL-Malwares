// Decompiled with JetBrains decompiler
// Type: #c.#m
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023c;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;

namespace \u0023c
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [StandardModule]
  [HideModuleName]
  internal sealed class \u0023m
  {
    private static readonly \u0023m.\u0023z<\u0023d> \u0023e;
    private static readonly \u0023m.\u0023z<\u0023b> \u0023f;
    private static readonly \u0023m.\u0023z<User> \u0023g;
    private static readonly \u0023m.\u0023z<\u0023m.\u0023w> \u0023h;

    [MethodImpl(MethodImplOptions.NoInlining)]
    static \u0023m()
    {
      try
      {
        bool flag = false;
        Assembly executingAssembly = Assembly.GetExecutingAssembly();
        int num1 = 3;
        if (!\u0023m.tUxdHB33E9k4irG92U())
          goto label_5;
label_1:
        if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
        {
          \u0023m.\u0023e = new \u0023m.\u0023z<\u0023d>();
          goto label_9;
        }
label_2:
        throw new SecurityException("Assembly has been tampered");
label_4:
        int num2;
        num1 = num2;
label_5:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
              goto label_1;
            case 2:
            case 4:
              goto label_9;
            case 3:
              if (\u0023\u0023.\u0023Pi(executingAssembly.Location, true, out flag) && flag)
              {
                if (true)
                {
                  num1 = 0;
                  continue;
                }
                goto label_9;
              }
              else
                goto label_2;
            case 5:
              goto label_10;
            default:
              goto label_6;
          }
        }
label_6:
        num2 = 4;
        goto label_4;
label_10:
        \u0023m.\u0023h = new \u0023m.\u0023z<\u0023m.\u0023w>();
        return;
label_9:
        \u0023m.\u0023f = new \u0023m.\u0023z<\u0023b>();
        \u0023m.\u0023g = new \u0023m.\u0023z<User>();
        num2 = 5;
        goto label_4;
      }
      catch (Exception ex)
      {
        \u0023\u0023.\u00236i(ex);
        throw;
      }
    }

    [HelpKeyword("My.Computer")]
    internal static \u0023d Computer
    {
      [DebuggerHidden, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return \u0023m.\u0023e.GetInstance;
        }
        catch (Exception ex)
        {
          \u0023d d1;
          \u0023d d2 = d1;
          \u0023\u0023.\u0023Oj(ex, (object) d2);
          throw;
        }
      }
    }

    [HelpKeyword("My.Application")]
    internal static \u0023b Application
    {
      [DebuggerHidden, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return \u0023m.\u0023f.GetInstance;
        }
        catch (Exception ex)
        {
          \u0023b b1;
          \u0023b b2 = b1;
          \u0023\u0023.\u0023Oj(ex, (object) b2);
          throw;
        }
      }
    }

    [HelpKeyword("My.User")]
    internal static User User
    {
      [DebuggerHidden, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return \u0023m.\u0023g.GetInstance;
        }
        catch (Exception ex)
        {
          User user1;
          User user2 = user1;
          \u0023\u0023.\u0023Oj(ex, (object) user2);
          throw;
        }
      }
    }

    [HelpKeyword("My.WebServices")]
    internal static \u0023m.\u0023w WebServices
    {
      [DebuggerHidden, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        try
        {
          return \u0023m.\u0023h.GetInstance;
        }
        catch (Exception ex)
        {
          \u0023m.\u0023w w1;
          \u0023m.\u0023w w2 = w1;
          \u0023\u0023.\u0023Oj(ex, (object) w2);
          throw;
        }
      }
    }

    internal static bool VJQDrhiPTyLpn1rbBm() => true;

    internal static bool tUxdHB33E9k4irG92U() => false;

    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class \u0023w
    {
      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      [MethodImpl(MethodImplOptions.NoInlining)]
      bool object.\u0023n(object _param1)
      {
        try
        {
          // ISSUE: explicit non-virtual call
          return __nonvirtual (((object) this).Equals(RuntimeHelpers.GetObjectValue(_param1)));
        }
        catch (Exception ex)
        {
          bool flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> local = (ValueType) flag;
          object obj = _param1;
          \u0023\u0023.\u0023Dj(ex, (object) local, (object) this, obj);
          throw;
        }
      }

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      [MethodImpl(MethodImplOptions.NoInlining)]
      int object.\u0023p()
      {
        try
        {
          // ISSUE: explicit non-virtual call
          return __nonvirtual (((object) this).GetHashCode());
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> local = (ValueType) num;
          \u0023\u0023.\u0023Jk(ex, (object) local, (object) this);
          throw;
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      [MethodImpl(MethodImplOptions.NoInlining)]
      internal Type \u0023q()
      {
        try
        {
          return typeof (\u0023m.\u0023w);
        }
        catch (Exception ex)
        {
          Type type1;
          Type type2 = type1;
          \u0023\u0023.\u0023Jk(ex, (object) type2, (object) this);
          throw;
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      [MethodImpl(MethodImplOptions.NoInlining)]
      string object.\u0023r()
      {
        try
        {
          // ISSUE: explicit non-virtual call
          return __nonvirtual (((object) this).ToString());
        }
        catch (Exception ex)
        {
          string str1;
          string str2 = str1;
          \u0023\u0023.\u0023Jk(ex, (object) str2, (object) this);
          throw;
        }
      }

      [DebuggerHidden]
      [MethodImpl(MethodImplOptions.NoInlining)]
      private static \u0023u \u0023s<\u0023u>(\u0023u _param0) where \u0023u : new()
      {
        try
        {
          return (object) _param0 == null ? new \u0023u() : _param0;
        }
        catch (Exception ex)
        {
          \u0023u u;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023u> local1 = (object) u;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023u> local2 = (object) _param0;
          \u0023\u0023.\u0023Jk(ex, (object) local1, (object) local2);
          throw;
        }
      }

      [DebuggerHidden]
      [MethodImpl(MethodImplOptions.NoInlining)]
      private void \u0023v<\u0023u>(ref \u0023u _param1)
      {
        \u0023u u1;
        try
        {
          ref \u0023u local = ref _param1;
          u1 = default (\u0023u);
          \u0023u u2 = u1;
          local = u2;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<\u0023u> local1 = (object) u1;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023u> local2 = (object) _param1;
          \u0023\u0023.\u0023Dj(ex, (object) local1, (object) this, (object) local2);
          throw;
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023w()
      {
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      static \u0023w()
      {
        int num1 = 3;
        if (true)
          goto label_3;
label_1:
        Assembly executingAssembly;
        bool flag;
        if (!\u0023\u0023.\u0023jk(executingAssembly.Location, true, out flag) || !flag)
          goto label_10;
        else
          goto label_6;
label_2:
        int num2;
        num1 = num2;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
              executingAssembly = Assembly.GetExecutingAssembly();
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto label_6;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_8;
            case 5:
              goto label_6;
            case 6:
              goto label_9;
            default:
              num1 = 5;
              continue;
          }
        }
label_9:
        return;
label_8:
        flag = false;
        num2 = 0;
        goto label_2;
label_6:
        if (executingAssembly.FullName.EndsWith("34256fcd934ca661"))
        {
          num2 = 6;
          goto label_2;
        }
label_10:
        throw new SecurityException("Assembly has been tampered");
      }

      internal static bool QqQ81om8W4xI9kFTf2() => true;

      internal static bool FrxKEuIE4W4DCGTpV9() => false;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [ComVisible(false)]
    internal sealed class \u0023z<\u0023u> where \u0023u : new()
    {
      internal \u0023u GetInstance
      {
        [DebuggerHidden, MethodImpl(MethodImplOptions.NoInlining)] get
        {
          try
          {
            if ((object) \u0023m.\u0023z<\u0023u>.\u0023x == null)
              \u0023m.\u0023z<\u0023u>.\u0023x = new \u0023u();
            return \u0023m.\u0023z<\u0023u>.\u0023x;
          }
          catch (Exception ex)
          {
            \u0023u u;
            __Boxed<\u0023u> local = (object) u;
            \u0023\u0023.\u0023Jk(ex, (object) local, (object) this);
            throw;
          }
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023z()
      {
      }
    }
  }
}
