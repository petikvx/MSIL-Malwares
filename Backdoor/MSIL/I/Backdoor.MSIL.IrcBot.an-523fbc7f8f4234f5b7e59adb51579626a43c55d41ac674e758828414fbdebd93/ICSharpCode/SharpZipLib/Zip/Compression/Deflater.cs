// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.Compression.Deflater
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;

namespace ICSharpCode.SharpZipLib.Zip.Compression
{
  public class Deflater
  {
    public const int BEST_COMPRESSION = 9;
    public const int BEST_SPEED = 1;
    public const int DEFAULT_COMPRESSION = -1;
    public const int NO_COMPRESSION = 0;
    public const int DEFLATED = 8;
    private const int \uE00F = 1;
    private const int \uE00E = 4;
    private const int \uE00D = 8;
    private const int \uE00C = 0;
    private const int \uE00B = 1;
    private const int \uE00A = 16;
    private const int \uE009 = 20;
    private const int \uE008 = 28;
    private const int \uE007 = 30;
    private const int \uE006 = 127;
    private int \uE005;
    private bool \uE004;
    private int \uE003;
    private long \uE002;
    private DeflaterPending \uE001;
    private DeflaterEngine \uE000;

    public Deflater()
      : this(-1, false)
    {
    }

    public Deflater(int level)
      : this(level, false)
    {
    }

    public Deflater(int level, bool noZlibHeaderOrFooter)
    {
      if (level == -1)
        level = 6;
      else if (level < 0 || level > 9)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uE06D\uE064\uE077\uE064\uE06D", 57345));
      this.\uE001 = new DeflaterPending();
      this.\uE000 = new DeflaterEngine(this.\uE001);
      this.\uE004 = noZlibHeaderOrFooter;
      this.SetStrategy(DeflateStrategy.Default);
      this.SetLevel(level);
      this.Reset();
    }

    public void Reset()
    {
      this.\uE003 = this.\uE004 ? 16 : 0;
      this.\uE002 = 0L;
      this.\uE001.Reset();
      this.\uE000.Reset();
    }

    public int Adler => this.\uE000.Adler;

    public long TotalIn => this.\uE000.TotalIn;

    public long TotalOut => this.\uE002;

    public void Flush() => this.\uE003 |= 4;

    public void Finish() => this.\uE003 |= 12;

    public bool IsFinished => this.\uE003 == 30 && this.\uE001.IsFlushed;

    public bool IsNeedingInput => this.\uE000.NeedsInput();

    public void SetInput(byte[] input) => this.SetInput(input, 0, input.Length);

    public void SetInput(byte[] input, int offset, int count)
    {
      if ((this.\uE003 & 8) != 0)
        throw new InvalidOperationException(\uE01B.\uE000("\uF37E\uF351\uF356\uF351\uF34B\uF350\uF310\uF311\uF318\uF359\uF354\uF34A\uF35D\uF359\uF35C\uF341\uF318\uF35B\uF359\uF354\uF354\uF35D\uF35C", 62264));
      this.\uE000.SetInput(input, offset, count);
    }

    public void SetLevel(int level)
    {
      if (level == -1)
        level = 6;
      else if (level < 0 || level > 9)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uE06D\uE064\uE077\uE064\uE06D", 57345));
      if (this.\uE005 == level)
        return;
      this.\uE005 = level;
      this.\uE000.SetLevel(level);
    }

    public int GetLevel() => this.\uE005;

    public void SetStrategy(DeflateStrategy strategy) => this.\uE000.Strategy = strategy;

    public int Deflate(byte[] output) => this.Deflate(output, 0, output.Length);

    public int Deflate(byte[] output, int offset, int length)
    {
      int num1 = length;
      if (this.\uE003 == (int) sbyte.MaxValue)
        throw new InvalidOperationException(\uE01B.\uE000("\uEA35\uEA14\uEA17\uEA1D\uEA10\uEA05\uEA14\uEA03\uEA51\uEA12\uEA1D\uEA1E\uEA02\uEA14\uEA15", 60017));
      if (this.\uE003 < 16)
      {
        int num2 = 30720;
        int num3 = this.\uE005 - 1 >> 1;
        if (num3 < 0 || num3 > 3)
          num3 = 3;
        int num4 = num2 | num3 << 6;
        if ((this.\uE003 & 1) != 0)
          num4 |= 32;
        this.\uE001.WriteShortMSB(num4 + (31 - num4 % 31));
        if ((this.\uE003 & 1) != 0)
        {
          int adler = this.\uE000.Adler;
          this.\uE000.ResetAdler();
          this.\uE001.WriteShortMSB(adler >> 16);
          this.\uE001.WriteShortMSB(adler & (int) ushort.MaxValue);
        }
        this.\uE003 = 16 | this.\uE003 & 12;
      }
      while (true)
      {
        do
        {
          do
          {
            int num5 = this.\uE001.Flush(output, offset, length);
            offset += num5;
            this.\uE002 += (long) num5;
            length -= num5;
            if (length == 0 || this.\uE003 == 30)
              goto label_24;
          }
          while (this.\uE000.Deflate((this.\uE003 & 4) != 0, (this.\uE003 & 8) != 0));
          if (this.\uE003 == 16)
            return num1 - length;
          if (this.\uE003 == 20)
          {
            if (this.\uE005 != 0)
            {
              for (int index = 8 + (-this.\uE001.BitCount & 7); index > 0; index -= 10)
                this.\uE001.WriteBits(2, 10);
            }
            this.\uE003 = 16;
          }
        }
        while (this.\uE003 != 28);
        this.\uE001.AlignToByte();
        if (!this.\uE004)
        {
          int adler = this.\uE000.Adler;
          this.\uE001.WriteShortMSB(adler >> 16);
          this.\uE001.WriteShortMSB(adler & (int) ushort.MaxValue);
        }
        this.\uE003 = 30;
      }
label_24:
      return num1 - length;
    }

    public void SetDictionary(byte[] dictionary) => this.SetDictionary(dictionary, 0, dictionary.Length);

    public void SetDictionary(byte[] dictionary, int index, int count)
    {
      this.\uE003 = this.\uE003 == 0 ? 1 : throw new InvalidOperationException();
      this.\uE000.SetDictionary(dictionary, index, count);
    }
  }
}
