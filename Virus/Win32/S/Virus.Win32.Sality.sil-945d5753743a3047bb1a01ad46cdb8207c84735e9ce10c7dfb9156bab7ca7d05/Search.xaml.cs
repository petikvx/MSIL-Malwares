// Decompiled with JetBrains decompiler
// Type: Appointments.Search
// Assembly: Appointments, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 296A15D6-EEB9-4ED6-B937-9857DD43439A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Sality.sil-945d5753743a3047bb1a01ad46cdb8207c84735e9ce10c7dfb9156bab7ca7d05.exe

using Microsoft.Windows.Controls;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;

namespace Appointments
{
  [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
  public partial class Search : Window, IComponentConnector
  {
    private myAppointmentsDataContext DC = new myAppointmentsDataContext();
    internal Label label1;
    internal ComboBox comboBox_showAppointmentPatient;
    internal Button button1;
    internal ListView listView1;
    internal Button button2;
    internal Separator separator1;
    private bool _contentLoaded;

    public Search() => this.InitializeComponent();

    private void comboBox1_DropDownOpened(object sender, EventArgs e)
    {
      IQueryable<string> source = this.DC.Patients.Select<Patient, string>((System.Linq.Expressions.Expression<Func<Patient, string>>) (pat => pat.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_showAppointmentPatient.ItemsSource = (IEnumerable) source;
    }

    private void comboBox1_GotFocus(object sender, RoutedEventArgs e)
    {
      IQueryable<string> source = this.DC.Patients.Select<Patient, string>((System.Linq.Expressions.Expression<Func<Patient, string>>) (pat => pat.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_showAppointmentPatient.ItemsSource = (IEnumerable) source;
    }

    private void button1_Click(object sender, RoutedEventArgs e)
    {
      this.comboBox_showAppointmentPatient.Text = this.comboBox_showAppointmentPatient.Text.Trim();
      if (this.comboBox_showAppointmentPatient.SelectedIndex == -1)
      {
        int num = (int) MessageBox.Show("لم يتم تحديد اسم مريض للبحث , يرجى إعادة المحاولة", "خطأ", MessageBoxButton.OK, MessageBoxImage.Hand);
        this.comboBox_showAppointmentPatient.Focus();
      }
      else
      {
        IQueryable<Appointment> source = this.DC.Appointments.Where<Appointment>((System.Linq.Expressions.Expression<Func<Appointment, bool>>) (query => query.Patient.Name == this.comboBox_showAppointmentPatient.SelectedItem.ToString()));
        if (source.Count<Appointment>() == 0)
        {
          int num = (int) MessageBox.Show("لا يوجد مواعيد محددة للمريض الذي قمت باختياره", "انتبه", MessageBoxButton.OK, MessageBoxImage.Asterisk);
        }
        else
        {
          this.listView1.ItemsSource = (IEnumerable) source;
          this.Height = 516.0;
        }
      }
    }

    private void button2_Click(object sender, RoutedEventArgs e) => this.Close();

    private void Window_Loaded(object sender, RoutedEventArgs e)
    {
      InputLanguageManager.SetInputLanguage((DependencyObject) this.comboBox_showAppointmentPatient, CultureInfo.CreateSpecificCulture("ar"));
      this.Height = 135.0;
    }

    [DebuggerNonUserCode]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/Appointments;component/search.xaml", UriKind.Relative));
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          this.label1 = (Label) target;
          break;
        case 3:
          this.comboBox_showAppointmentPatient = (ComboBox) target;
          this.comboBox_showAppointmentPatient.DropDownOpened += new EventHandler(this.comboBox1_DropDownOpened);
          this.comboBox_showAppointmentPatient.GotFocus += new RoutedEventHandler(this.comboBox1_GotFocus);
          break;
        case 4:
          this.button1 = (Button) target;
          this.button1.Click += new RoutedEventHandler(this.button1_Click);
          break;
        case 5:
          this.listView1 = (ListView) target;
          break;
        case 6:
          this.button2 = (Button) target;
          this.button2.Click += new RoutedEventHandler(this.button2_Click);
          break;
        case 7:
          this.separator1 = (Separator) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
