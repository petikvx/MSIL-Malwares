// Decompiled with JetBrains decompiler
// Type: ⒮櫥稐楍�凁菒ᄰ
// Assembly: App, Version=6.11.5.1, Culture=neutral, PublicKeyToken=null
// MVID: D376BF24-63A2-4062-8FD1-D05465F36129
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Reconyc.glja-c820da99cd06e5e8e8d7140d3f3ce35a6531e572b2cf3fd2bbacd3354fbb5df0.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

internal static class \u24AE櫥稐楍\uFFFD凁菒ᄰ
{
  [DllImport("ntdll.dll", EntryPoint = "NtQueryInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  private static extern int 䭌홷腷䄻ꑣꋻ\u2AF8篏(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength,
    out int ReturnLength);

  [DllImport("ntdll.dll", EntryPoint = "NtSetInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  private static extern uint \u0F0E䜸慔灇瀞誝憫\uE79C(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength);

  [DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
  private static extern bool ꜫ謜ᦍ뺊ﰮ痂瘖䡜(IntPtr hObject);

  [DllImport("kernel32.dll", EntryPoint = "IsDebuggerPresent")]
  private static extern bool 볕ງ켮\uE0F7\u000Dᯮ\uFFFD딾();

  [DllImport("kernel32.dll", EntryPoint = "OutputDebugString")]
  private static extern int 쉣矶\uE3E3ꚉ壻\uED81\uFFFD깉(string str);

  public static void ጠ\u22EF\uF0BEﴕﵞ\u21F2︠\uE7AB()
  {
    int num1 = 10 - -(6 - 3) - (7 + 4);
    while (true)
    {
      Thread thread;
      bool flag;
      int num2;
      switch (num1)
      {
        case 1:
          goto label_13;
        case 2:
          if (Environment.GetEnvironmentVariable("COR_ENABLE_PROFILING") == null)
          {
            num1 = ~-7 - (8 - 8) - 2;
            continue;
          }
          num2 = 0;
          goto label_9;
        case 3:
          Environment.FailFast("Profiler detected");
          break;
        case 4:
          num2 = Environment.GetEnvironmentVariable("COR_PROFILER") == null ? 1 : 0;
          goto label_9;
        case 5:
          if (!flag)
          {
            num1 = ~~--3;
            continue;
          }
          break;
        case 6:
          thread.Start((object) null);
          num1 = ~2 - -11 - 8;
          continue;
        default:
          num1 = -~~-1;
          continue;
      }
      thread = new Thread(new ParameterizedThreadStart(\u24AE櫥稐楍\uFFFD凁菒ᄰ.鵭\uF515ꗙ鯙\uE347ꮵꐋ踲));
      thread.IsBackground = true;
      num1 = ~(~13 + (5 + 2));
      continue;
label_9:
      flag = num2 != 0;
      num1 = ~(~3 + (2 + 8) - 19) - 7;
    }
label_13:;
  }

  private static void 鵭\uF515ꗙ鯙\uE347ꮵꐋ踲(object thread)
  {
    Thread thread1 = thread as Thread;
    int num1 = --15 - 6;
    while (true)
    {
      int num2;
      do
      {
        int num3;
        switch (num1)
        {
          case 1:
            num1 = --22 - (9 - 2) - 4;
            continue;
          case 2:
            Thread.Sleep(500);
            num1 = ~(--4 - -7 - (8 + 4));
            continue;
          case 3:
            if (!Debugger.IsAttached)
            {
              num3 = !Debugger.IsLogging() ? 1 : 0;
              break;
            }
            goto case 4;
          case 4:
            num3 = 0;
            break;
          case 5:
            thread1 = new Thread(new ParameterizedThreadStart(\u24AE櫥稐楍\uFFFD凁菒ᄰ.鵭\uF515ꗙ鯙\uE347ꮵꐋ踲));
            thread1.IsBackground = true;
            num1 = 16 - ~-8 - ~3 - 3;
            continue;
          case 6:
            Environment.FailFast("Debugger detected (Managed)");
            num1 = -(~-3 - 9);
            continue;
          case 7:
label_12:
            if (!thread1.IsAlive)
            {
              Environment.FailFast("Loop broken");
              num1 = -(9 + 4 + (7 - 2) - 30) - 4;
              continue;
            }
            goto case 8;
          case 8:
            Thread.Sleep(1000);
            num1 = ~~--1;
            continue;
          case 9:
            num2 = thread1 != null ? 1 : 0;
            num1 = -~~0;
            continue;
          case 10:
            goto label_17;
          case 11:
            goto label_18;
          default:
            num1 = -7 - (5 - 9) - -14;
            continue;
        }
        if (num3 == 0)
          num1 = 5 - ---1;
        else
          goto label_12;
      }
      while (num2 != 0);
      num1 = ~(11 - -~7 + ~8);
      continue;
label_17:
      thread1.Start((object) Thread.CurrentThread);
      num1 = -(--10 - (8 + 4));
      continue;
label_18:
      num1 = ~(~-3 - 6);
    }
  }
}
