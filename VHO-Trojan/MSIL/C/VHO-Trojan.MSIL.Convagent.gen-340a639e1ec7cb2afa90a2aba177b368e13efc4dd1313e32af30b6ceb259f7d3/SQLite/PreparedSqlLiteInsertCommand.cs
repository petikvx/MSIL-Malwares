// Decompiled with JetBrains decompiler
// Type: SQLite.PreparedSqlLiteInsertCommand
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using Community.CsharpSqlite;
using System;

namespace SQLite
{
  public class PreparedSqlLiteInsertCommand : IDisposable
  {
    internal static readonly Sqlite3.Vdbe NullStatement;

    public bool Initialized { get; set; }

    protected SQLiteConnection Connection { get; set; }

    public string CommandText { get; set; }

    protected Sqlite3.Vdbe Statement { get; set; }

    internal PreparedSqlLiteInsertCommand(SQLiteConnection conn) => this.Connection = conn;

    public int ExecuteNonQuery(object[] source)
    {
      int num1 = this.Connection.Trace ? 1 : 0;
      if (!this.Initialized)
      {
        this.Statement = this.Prepare();
        this.Initialized = true;
      }
      if (source != null)
      {
        for (int index = 0; index < source.Length; ++index)
          SQLiteCommand.BindParameter(this.Statement, index + 1, source[index], this.Connection.StoreDateTimeAsTicks);
      }
      SQLite3.Result r = SQLite3.Step(this.Statement);
      switch (r)
      {
        case SQLite3.Result.Error:
          string errmsg = SQLite3.GetErrmsg(this.Connection.Handle);
          int num2 = (int) SQLite3.Reset(this.Statement);
          throw SQLiteException.New(r, errmsg);
        case SQLite3.Result.Done:
          int num3 = SQLite3.Changes(this.Connection.Handle);
          int num4 = (int) SQLite3.Reset(this.Statement);
          return num3;
        default:
          int num5 = (int) SQLite3.Reset(this.Statement);
          throw SQLiteException.New(r, r.ToString());
      }
    }

    protected virtual Sqlite3.Vdbe Prepare() => SQLite3.Prepare2(this.Connection.Handle, this.CommandText);

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    private void Dispose(bool disposing)
    {
      if (this.Statement == PreparedSqlLiteInsertCommand.NullStatement)
        return;
      try
      {
        int num = (int) SQLite3.Finalize(this.Statement);
      }
      finally
      {
        this.Statement = PreparedSqlLiteInsertCommand.NullStatement;
        this.Connection = (SQLiteConnection) null;
      }
    }

    ~PreparedSqlLiteInsertCommand() => this.Dispose(false);
  }
}
