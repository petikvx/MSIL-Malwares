// Decompiled with JetBrains decompiler
// Type: MyApp.Connection
// Assembly: CobianRAT, Version=1.0.40.7, Culture=neutral, PublicKeyToken=null
// MVID: E2EA0EB9-E35B-43B8-8108-8D71E6EED121
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\Trojan-Spy.MSIL.Keylogger.cmqq-1f2c145fc77049b9437c9aedfd8332be167246bc270d98c22deca902fc967563.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
using System.Windows.Forms;

namespace MyApp
{
  public sealed class Connection
  {
    private static List<WeakReference> HD4x9gWZTt;
    public Bitmap COI;
    public object PC;
    public object CN;
    public object img;
    public object uniqueid;
    public object folder;
    public object Notuser;
    public object IP;
    public object Information;
    public TcpClient CL;
    public DataGridViewRow D;
    private Connection.GotDataEventHandler hCKxvIK78a;
    public bool Screen;
    public object TT;
    public object TPing;
    public object TS;
    public object TAC;
    public object Cping;
    public object OkCL;
    public object Connected;
    public object Disconnected;
    public System.Windows.Forms.Timer T1;
    private BinaryFormatter lwBxu2sSBm;
    public string Name;
    public bool CBHOK;
    private Thread Nv4x7D1VBy;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    static Connection()
    {
      // ISSUE: unable to decompile the method.
    }

    public event Connection.GotDataEventHandler GotData
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] add
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] remove
      {
        // ISSUE: unable to decompile the method.
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SendByte(string s, byte[] by)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Connection(TcpClient client)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void noclient()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SubPing()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Read()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void fO7xsJcrur(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IqTxbvFWHa()
    {
      // ISSUE: unable to decompile the method.
    }

    public virtual System.Windows.Forms.Timer Tim
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Disconnect()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void send(object msg)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SendData(object msg)
    {
      // ISSUE: unable to decompile the method.
    }

    public delegate void GotDataEventHandler(object obj);

    private delegate void p0hLcxUxNhPfOpflrG();
  }
}
