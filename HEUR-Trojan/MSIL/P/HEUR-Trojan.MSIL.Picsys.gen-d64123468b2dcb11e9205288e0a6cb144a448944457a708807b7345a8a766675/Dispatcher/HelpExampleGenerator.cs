// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.HelpExampleGenerator
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Xml;
using System.Xml.Schema;

namespace System.ServiceModel.Dispatcher
{
  internal class HelpExampleGenerator
  {
    private const int MaxDepthLevel = 256;
    public const string XmlSchemaNamespace = "http://www.w3.org/2001/XMLSchema";
    public const string XmlNamespacePrefix = "xmlns";
    public const string XmlSchemaInstanceNamespace = "http://www.w3.org/2001/XMLSchema-instance";
    public const string XmlSchemaInstanceNil = "nil";
    public const string XmlSchemaInstanceType = "type";
    private static Dictionary<Type, Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>> XmlObjectHandler = new Dictionary<Type, Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>>()
    {
      {
        typeof (XmlSchemaComplexContent),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ContentHandler)
      },
      {
        typeof (XmlSchemaSimpleContent),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ContentHandler)
      },
      {
        typeof (XmlSchemaSimpleTypeRestriction),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.SimpleTypeRestrictionHandler)
      },
      {
        typeof (XmlSchemaChoice),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ChoiceHandler)
      },
      {
        typeof (XmlSchemaComplexContentExtension),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaSimpleContentExtension),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAny),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAnyAttribute),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAnnotated),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchema),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAttributeGroup),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaAttributeGroupRef),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaComplexContentRestriction),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaSimpleContentRestriction),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaEnumerationFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaMaxExclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMaxInclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMinExclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMinInclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaNumericFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaFractionDigitsFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaLengthFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMaxLengthFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMinLengthFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaTotalDigitsFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaPatternFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaWhiteSpaceFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaGroup),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaIdentityConstraint),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaKey),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaKeyref),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaUnique),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaNotation),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaAll),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaGroupRef),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaSimpleTypeUnion),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaSimpleTypeList),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.XmlSimpleTypeListHandler)
      },
      {
        typeof (XmlSchemaXPath),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaAttribute),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.XmlAttributeHandler)
      },
      {
        typeof (XmlSchemaElement),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.XmlElementHandler)
      },
      {
        typeof (XmlSchemaComplexType),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.XmlComplexTypeHandler)
      },
      {
        typeof (XmlSchemaSequence),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.XmlSequenceHandler)
      },
      {
        typeof (XmlSchemaSimpleType),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.XmlSimpleTypeHandler)
      }
    };
    private static Dictionary<Type, Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>> JsonObjectHandler = new Dictionary<Type, Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>>()
    {
      {
        typeof (XmlSchemaComplexContent),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ContentHandler)
      },
      {
        typeof (XmlSchemaSimpleContent),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ContentHandler)
      },
      {
        typeof (XmlSchemaSimpleTypeRestriction),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.SimpleTypeRestrictionHandler)
      },
      {
        typeof (XmlSchemaChoice),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ChoiceHandler)
      },
      {
        typeof (XmlSchemaComplexContentExtension),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaSimpleContentExtension),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAny),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAnyAttribute),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAnnotated),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchema),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaAttributeGroup),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaAttributeGroupRef),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaComplexContentRestriction),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaSimpleContentRestriction),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaEnumerationFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.EmptyHandler)
      },
      {
        typeof (XmlSchemaMaxExclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMaxInclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMinExclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMinInclusiveFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaNumericFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaFractionDigitsFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaLengthFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMaxLengthFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaMinLengthFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaTotalDigitsFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaPatternFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaWhiteSpaceFacet),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaGroup),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaIdentityConstraint),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaKey),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaKeyref),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaUnique),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaNotation),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaAll),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaGroupRef),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaSimpleTypeUnion),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaSimpleTypeList),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.JsonSimpleTypeListHandler)
      },
      {
        typeof (XmlSchemaXPath),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.ErrorHandler)
      },
      {
        typeof (XmlSchemaElement),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.JsonElementHandler)
      },
      {
        typeof (XmlSchemaComplexType),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.JsonComplexTypeHandler)
      },
      {
        typeof (XmlSchemaSequence),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.JsonSequenceHandler)
      },
      {
        typeof (XmlSchemaSimpleType),
        new Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>(HelpExampleGenerator.JsonSimpleTypeHandler)
      }
    };

    public static void GenerateJsonSample(
      XmlSchemaSet schemaSet,
      XmlQualifiedName name,
      XmlWriter writer,
      IDictionary<XmlQualifiedName, Type> knownTypes)
    {
      HelpExampleGenerator.HelpExampleGeneratorContext context = new HelpExampleGenerator.HelpExampleGeneratorContext()
      {
        currentDepthLevel = 0,
        elementDepth = (IDictionary<XmlSchemaElement, int>) new Dictionary<XmlSchemaElement, int>(),
        knownTypes = knownTypes,
        objectHandler = HelpExampleGenerator.JsonObjectHandler,
        schemaSet = schemaSet,
        overrideElementName = "root",
        writer = writer
      };
      if (!schemaSet.IsCompiled)
        schemaSet.Compile();
      HelpExampleGenerator.InvokeHandler(schemaSet.GlobalElements[name], context);
    }

    public static void GenerateXmlSample(
      XmlSchemaSet schemaSet,
      XmlQualifiedName name,
      XmlWriter writer)
    {
      HelpExampleGenerator.HelpExampleGeneratorContext context = new HelpExampleGenerator.HelpExampleGeneratorContext()
      {
        currentDepthLevel = 0,
        elementDepth = (IDictionary<XmlSchemaElement, int>) new Dictionary<XmlSchemaElement, int>(),
        knownTypes = (IDictionary<XmlQualifiedName, Type>) null,
        objectHandler = HelpExampleGenerator.XmlObjectHandler,
        schemaSet = schemaSet,
        overrideElementName = (string) null,
        writer = writer
      };
      if (!schemaSet.IsCompiled)
        schemaSet.Compile();
      HelpExampleGenerator.InvokeHandler(schemaSet.GlobalElements[name], context);
    }

    [DebuggerStepThrough]
    private static void InvokeHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      if (++context.currentDepthLevel < 256)
      {
        Type type = schemaObject.GetType();
        Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext> action;
        if (context.objectHandler.TryGetValue(type, out action))
          action(schemaObject, context);
        else if (type.Name != "EmptyParticle")
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.HelpExampleGeneratorHandlerNotFound, (object) schemaObject.GetType().Name)));
        }
        --context.currentDepthLevel;
      }
      else
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.HelpExampleGeneratorMaxDepthLevelReached, (object) schemaObject.GetType().Name)));
      }
    }

    private static void XmlAttributeHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaAttribute xmlSchemaAttribute = (XmlSchemaAttribute) schemaObject;
      string forXmlSimpleType = HelpExampleGenerator.GenerateContentForXmlSimpleType(xmlSchemaAttribute.AttributeSchemaType);
      if (string.IsNullOrEmpty(forXmlSimpleType))
        context.writer.WriteAttributeString("i", "nil", "http://www.w3.org/2001/XMLSchema-instance", "true");
      else
        context.writer.WriteAttributeString(xmlSchemaAttribute.QualifiedName.Name, xmlSchemaAttribute.QualifiedName.Namespace, forXmlSimpleType);
    }

    private static void ChoiceHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      HelpExampleGenerator.InvokeHandler(((XmlSchemaGroupBase) schemaObject).Items[0], context);
    }

    private static void ContentHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      HelpExampleGenerator.InvokeHandler((XmlSchemaObject) ((XmlSchemaContentModel) schemaObject).Content, context);
    }

    private static void SimpleTypeRestrictionHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      foreach (XmlSchemaObject facet in ((XmlSchemaSimpleTypeRestriction) schemaObject).Facets)
        HelpExampleGenerator.InvokeHandler(facet, context);
    }

    private static void ErrorHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      // ISSUE: reference to a compiler-generated method
      throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.HelpExampleGeneratorSchemaObjectNotSupported, (object) schemaObject.GetType().Name)));
    }

    private static void EmptyHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
    }

    private static void XmlElementHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaElement element = (XmlSchemaElement) schemaObject;
      XmlSchemaElement validElementsComment = HelpExampleGenerator.GenerateValidElementsComment(element, context);
      context.writer.WriteStartElement(element.QualifiedName.Name, element.QualifiedName.Namespace);
      if (validElementsComment != element)
      {
        string str = validElementsComment.QualifiedName.Name;
        if (validElementsComment.QualifiedName.Namespace != element.QualifiedName.Namespace && !string.IsNullOrEmpty(validElementsComment.QualifiedName.Namespace))
        {
          string localName = context.writer.LookupPrefix(validElementsComment.QualifiedName.Namespace);
          if (localName == null)
          {
            localName = "d" + context.currentDepthLevel.ToString((IFormatProvider) NumberFormatInfo.InvariantInfo);
            context.writer.WriteAttributeString("xmlns", localName, (string) null, validElementsComment.QualifiedName.Namespace);
          }
          str = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}:{1}", new object[2]
          {
            (object) localName,
            (object) validElementsComment.QualifiedName.Name
          });
        }
        context.writer.WriteAttributeString("i", "type", "http://www.w3.org/2001/XMLSchema-instance", str);
      }
      foreach (XmlSchemaObject constraint in validElementsComment.Constraints)
        HelpExampleGenerator.InvokeHandler(constraint, context);
      HelpExampleGenerator.InvokeHandler((XmlSchemaObject) validElementsComment.ElementSchemaType, context);
      context.writer.WriteEndElement();
    }

    private static void XmlComplexTypeHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaComplexType schemaComplexType = (XmlSchemaComplexType) schemaObject;
      foreach (XmlSchemaObject schemaObject1 in (IEnumerable) schemaComplexType.AttributeUses.Values)
        HelpExampleGenerator.InvokeHandler(schemaObject1, context);
      if (schemaComplexType.ContentModel != null)
        HelpExampleGenerator.InvokeHandler((XmlSchemaObject) schemaComplexType.ContentModel, context);
      HelpExampleGenerator.InvokeHandler((XmlSchemaObject) schemaComplexType.ContentTypeParticle, context);
      if (!schemaComplexType.IsMixed)
        return;
      // ISSUE: reference to a compiler-generated method
      context.writer.WriteString(SR2.GetString(SR2.HelpExampleGeneratorThisElementContainsText));
    }

    private static void XmlSequenceHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaObjectEnumerator enumerator = ((XmlSchemaGroupBase) schemaObject).Items.GetEnumerator();
      try
      {
label_11:
        while (enumerator.MoveNext())
        {
          XmlSchemaObject current = enumerator.Current;
          XmlSchemaElement xmlSchemaElement = current as XmlSchemaElement;
          int num1 = 0;
          while (true)
          {
            if (xmlSchemaElement != null && num1 < 2 && xmlSchemaElement.MaxOccurs > (Decimal) num1)
            {
              if (xmlSchemaElement != null && HelpExampleGenerator.IsObject(xmlSchemaElement))
              {
                int num2 = 0;
                context.elementDepth.TryGetValue(xmlSchemaElement, out num2);
                if ((context.elementDepth[xmlSchemaElement] = num2 + 1) < 3)
                {
                  HelpExampleGenerator.InvokeHandler(current, context);
                }
                else
                {
                  context.writer.WriteStartElement(xmlSchemaElement.QualifiedName.Name, xmlSchemaElement.QualifiedName.Namespace);
                  context.writer.WriteAttributeString("i", "nil", "http://www.w3.org/2001/XMLSchema-instance", "true");
                  context.writer.WriteEndElement();
                }
                --context.elementDepth[xmlSchemaElement];
              }
              else
                HelpExampleGenerator.InvokeHandler(current, context);
              ++num1;
            }
            else
              goto label_11;
          }
        }
      }
      finally
      {
        if (enumerator is IDisposable disposable)
          disposable.Dispose();
      }
    }

    private static void XmlSimpleTypeListHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      HelpExampleGenerator.InvokeHandler((XmlSchemaObject) ((XmlSchemaSimpleTypeList) schemaObject).ItemType, context);
    }

    private static void XmlSimpleTypeHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaSimpleType simpleType = (XmlSchemaSimpleType) schemaObject;
      if (simpleType.QualifiedName.Namespace != "http://schemas.microsoft.com/2003/10/Serialization/" && simpleType.QualifiedName.Namespace != "http://www.w3.org/2001/XMLSchema" && simpleType.QualifiedName.Name != "guid")
        HelpExampleGenerator.InvokeHandler((XmlSchemaObject) simpleType.Content, context);
      string forXmlSimpleType = HelpExampleGenerator.GenerateContentForXmlSimpleType(simpleType);
      if (string.IsNullOrEmpty(forXmlSimpleType))
      {
        if (simpleType.Content is XmlSchemaSimpleTypeList)
          return;
        context.writer.WriteAttributeString("i", "nil", "http://www.w3.org/2001/XMLSchema-instance", "true");
      }
      else
        context.writer.WriteString(forXmlSimpleType);
    }

    private static string GenerateContentForXmlSimpleType(XmlSchemaSimpleType simpleType)
    {
      if (simpleType.Content != null && simpleType.Content is XmlSchemaSimpleTypeRestriction)
      {
        foreach (XmlSchemaObject facet in ((XmlSchemaSimpleTypeRestriction) simpleType.Content).Facets)
        {
          if (facet is XmlSchemaEnumerationFacet)
            return ((XmlSchemaFacet) facet).Value;
        }
      }
      if (simpleType.QualifiedName.Name == "dateTime")
        return DateTime.Parse("1999-05-31T11:20:00", (IFormatProvider) CultureInfo.InvariantCulture).ToString("s", (IFormatProvider) CultureInfo.InvariantCulture);
      return simpleType.QualifiedName.Name == "char" ? "97" : HelpExampleGenerator.GetConstantValue(simpleType.QualifiedName.Name);
    }

    private static void JsonElementHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaElement element = (XmlSchemaElement) schemaObject;
      XmlSchemaElement xmlSchemaElement = HelpExampleGenerator.GetDerivedTypes(element, context).FirstOrDefault<XmlSchemaElement>() ?? element;
      if (context.overrideElementName != null)
      {
        context.writer.WriteStartElement((string) null, context.overrideElementName, (string) null);
        context.overrideElementName = (string) null;
      }
      else
        context.writer.WriteStartElement((string) null, element.Name, (string) null);
      if (HelpExampleGenerator.IsArrayElementType(element))
      {
        context.writer.WriteAttributeString("type", "array");
        context.overrideElementName = "item";
      }
      else if (HelpExampleGenerator.IsObject(element))
      {
        if (xmlSchemaElement != element)
        {
          Type type = (Type) null;
          context.knownTypes.TryGetValue(xmlSchemaElement.QualifiedName, out type);
          if (type != (Type) null)
          {
            context.writer.WriteStartAttribute((string) null, "__type", (string) null);
            context.writer.WriteString(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}:#{1}", new object[2]
            {
              (object) type.Name,
              (object) type.Namespace
            }));
            context.writer.WriteEndAttribute();
          }
        }
        context.writer.WriteAttributeString("type", "object");
      }
      HelpExampleGenerator.InvokeHandler((XmlSchemaObject) xmlSchemaElement.ElementSchemaType, context);
      context.overrideElementName = (string) null;
      context.writer.WriteEndElement();
    }

    private static void JsonComplexTypeHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaComplexType schemaComplexType = (XmlSchemaComplexType) schemaObject;
      if (schemaComplexType.ContentModel != null)
        HelpExampleGenerator.InvokeHandler((XmlSchemaObject) schemaComplexType.ContentModel, context);
      HelpExampleGenerator.InvokeHandler((XmlSchemaObject) schemaComplexType.ContentTypeParticle, context);
    }

    private static void JsonSequenceHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      foreach (XmlSchemaObject schemaObject1 in ((XmlSchemaGroupBase) schemaObject).Items)
      {
        if (schemaObject1 is XmlSchemaElement xmlSchemaElement && HelpExampleGenerator.IsObject(xmlSchemaElement))
        {
          int num = 0;
          context.elementDepth.TryGetValue(xmlSchemaElement, out num);
          if ((context.elementDepth[xmlSchemaElement] = num + 1) < 3)
          {
            HelpExampleGenerator.InvokeHandler(schemaObject1, context);
          }
          else
          {
            if (context.overrideElementName != null)
            {
              context.writer.WriteStartElement(context.overrideElementName);
              context.overrideElementName = (string) null;
            }
            else
              context.writer.WriteStartElement(xmlSchemaElement.QualifiedName.Name);
            context.writer.WriteAttributeString("type", "null");
            context.writer.WriteEndElement();
          }
          --context.elementDepth[xmlSchemaElement];
        }
        else
          HelpExampleGenerator.InvokeHandler(schemaObject1, context);
      }
    }

    private static void JsonSimpleTypeListHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      HelpExampleGenerator.InvokeHandler((XmlSchemaObject) ((XmlSchemaSimpleTypeList) schemaObject).ItemType, context);
    }

    private static void JsonSimpleTypeHandler(
      XmlSchemaObject schemaObject,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaSimpleType schemaSimpleType = (XmlSchemaSimpleType) schemaObject;
      if (schemaSimpleType.Content != null)
      {
        if (schemaSimpleType.Content is XmlSchemaSimpleTypeRestriction)
        {
          foreach (XmlSchemaObject facet in ((XmlSchemaSimpleTypeRestriction) schemaSimpleType.Content).Facets)
          {
            if (facet is XmlSchemaEnumerationFacet)
            {
              context.writer.WriteAttributeString(string.Empty, "type", string.Empty, "number");
              context.writer.WriteString("0");
              return;
            }
          }
        }
        else if (schemaSimpleType.Content is XmlSchemaSimpleTypeList)
          HelpExampleGenerator.InvokeHandler((XmlSchemaObject) schemaSimpleType.Content, context);
      }
      string constantValue = HelpExampleGenerator.GetConstantValue(schemaSimpleType.QualifiedName.Name);
      if (schemaSimpleType.QualifiedName.Name == "base64Binary")
      {
        char[] charArray = constantValue.ToCharArray();
        context.writer.WriteAttributeString(string.Empty, "type", string.Empty, "array");
        for (int index = 0; index < charArray.Length; ++index)
        {
          context.writer.WriteStartElement("item", string.Empty);
          context.writer.WriteAttributeString(string.Empty, "type", string.Empty, "number");
          context.writer.WriteValue((int) charArray[index]);
          context.writer.WriteEndElement();
        }
      }
      else if (schemaSimpleType.QualifiedName.Name == "dateTime")
      {
        DateTime dateTime = DateTime.Parse("1999-05-31T11:20:00", (IFormatProvider) CultureInfo.InvariantCulture);
        context.writer.WriteString("/Date(");
        context.writer.WriteValue((dateTime.ToUniversalTime().Ticks - JsonGlobals.unixEpochTicks) / 10000L);
        switch (dateTime.Kind)
        {
          case DateTimeKind.Unspecified:
          case DateTimeKind.Local:
            TimeSpan utcOffset = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime.ToLocalTime());
            if (utcOffset.Ticks < 0L)
              context.writer.WriteString("-");
            else
              context.writer.WriteString("+");
            int num1 = Math.Abs(utcOffset.Hours);
            context.writer.WriteString(num1 < 10 ? "0" + (object) num1 : num1.ToString((IFormatProvider) CultureInfo.InvariantCulture));
            int num2 = Math.Abs(utcOffset.Minutes);
            context.writer.WriteString(num2 < 10 ? "0" + (object) num2 : num2.ToString((IFormatProvider) CultureInfo.InvariantCulture));
            break;
        }
        context.writer.WriteString(")/");
      }
      else if (schemaSimpleType.QualifiedName.Name == "char")
        context.writer.WriteString(XmlConvert.ToString('a'));
      else if (!string.IsNullOrEmpty(constantValue))
      {
        if (schemaSimpleType.QualifiedName.Name == "integer" || schemaSimpleType.QualifiedName.Name == "int" || schemaSimpleType.QualifiedName.Name == "long" || schemaSimpleType.QualifiedName.Name == "unsignedLong" || schemaSimpleType.QualifiedName.Name == "unsignedInt" || schemaSimpleType.QualifiedName.Name == "short" || schemaSimpleType.QualifiedName.Name == "unsignedShort" || schemaSimpleType.QualifiedName.Name == "byte" || schemaSimpleType.QualifiedName.Name == "unsignedByte" || schemaSimpleType.QualifiedName.Name == "decimal" || schemaSimpleType.QualifiedName.Name == "float" || schemaSimpleType.QualifiedName.Name == "double" || schemaSimpleType.QualifiedName.Name == "negativeInteger" || schemaSimpleType.QualifiedName.Name == "nonPositiveInteger" || schemaSimpleType.QualifiedName.Name == "positiveInteger" || schemaSimpleType.QualifiedName.Name == "nonNegativeInteger")
          context.writer.WriteAttributeString("type", "number");
        else if (schemaSimpleType.QualifiedName.Name == "boolean")
          context.writer.WriteAttributeString("type", "boolean");
        context.writer.WriteString(constantValue);
      }
      else
      {
        if (schemaSimpleType.Content is XmlSchemaSimpleTypeList)
          return;
        context.writer.WriteAttributeString("type", "null");
      }
    }

    private static string GetConstantValue(string typeName)
    {
      if (typeName == "base64Binary")
        return "QmFzZSA2NCBTdHJlYW0=";
      if (typeName == "string" || typeName == "normalizedString" || typeName == "token" || typeName == "NMTOKEN" || typeName == "NMTOKENS")
      {
        // ISSUE: reference to a compiler-generated method
        return SR2.GetString(SR2.HelpExampleGeneratorStringContent);
      }
      if (typeName == "hexBinary")
        return "GpM7";
      if (typeName == "integer" || typeName == "int")
        return "2147483647";
      if (typeName == "positiveInteger" || typeName == "nonNegativeInteger")
        return "+2147483647";
      if (typeName == "long")
        return "9223372036854775807";
      if (typeName == "unsignedLong")
        return "18446744073709551615";
      if (typeName == "unsignedInt")
        return "4294967295";
      if (typeName == "short")
        return "32767";
      if (typeName == "unsignedShort")
        return "65535";
      if (typeName == "byte")
        return "127";
      if (typeName == "unsignedByte")
        return "255";
      if (typeName == "decimal")
        return "12678967.543233";
      if (typeName == "float")
        return "1.26743237E+15";
      if (typeName == "double")
        return "1.26743233E+15";
      if (typeName == "negativeInteger" || typeName == "nonPositiveInteger")
        return "-12678967543233";
      if (typeName == "boolean")
        return "true";
      if (typeName == "duration")
        return "P428DT10H30M12.3S";
      if (typeName == "date")
        return "1999-05-31";
      if (typeName == "time")
        return "13:20:00.000, 13:20:00.000-05:00";
      if (typeName == "gYear")
        return "1999";
      if (typeName == "gYearMonth")
        return "1999-02";
      if (typeName == "gMonth")
        return "--05";
      if (typeName == "gMonthDay")
        return "--05-31";
      if (typeName == "gDay")
        return "---31";
      if (typeName == "Name")
        return "Name";
      if (typeName == "QName" || typeName == "NOTATION")
        return "namespace:Name";
      if (typeName == "NCName" || typeName == "ID" || typeName == "IDREF" || typeName == "IDREFS" || typeName == "ENTITY" || typeName == "ENTITY" || typeName == "ID")
        return "NCNameString";
      if (typeName == "anyURI")
        return "http://www.example.com/";
      if (typeName == "language")
      {
        // ISSUE: reference to a compiler-generated method
        return SR2.GetString(SR2.HelpExampleGeneratorLanguage);
      }
      return typeName == "guid" ? "1627aea5-8e0a-4371-9022-9b504344e724" : (string) null;
    }

    private static XmlSchemaElement GenerateValidElementsComment(
      XmlSchemaElement element,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      XmlSchemaElement validElementsComment = element;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (XmlSchemaElement derivedType in HelpExampleGenerator.GetDerivedTypes(element, context))
      {
        if (validElementsComment == element)
          validElementsComment = derivedType;
        if (stringBuilder.Length > 0)
        {
          stringBuilder.AppendFormat(", {0}", (object) derivedType.Name);
        }
        else
        {
          // ISSUE: reference to a compiler-generated method
          stringBuilder.AppendFormat(SR2.GetString(SR2.HelpPageValidElementOfType, (object) derivedType.Name));
        }
      }
      if (stringBuilder.Length > 0)
        context.writer.WriteComment(stringBuilder.ToString());
      return validElementsComment;
    }

    private static IEnumerable<XmlSchemaElement> GetDerivedTypes(
      XmlSchemaElement element,
      HelpExampleGenerator.HelpExampleGeneratorContext context)
    {
      if (element.ElementSchemaType is XmlSchemaComplexType)
      {
        foreach (XmlSchemaElement xmlSchemaElement in (IEnumerable<XmlSchemaElement>) context.schemaSet.GlobalElements.Values.OfType<XmlSchemaElement>().Where<XmlSchemaElement>((Func<XmlSchemaElement, bool>) (e => !e.IsAbstract && e.ElementSchemaType != element.ElementSchemaType && e.ElementSchemaType is XmlSchemaComplexType && HelpExampleGenerator.DerivesFrom((XmlSchemaComplexType) element.ElementSchemaType, (XmlSchemaComplexType) e.ElementSchemaType))).OrderBy<XmlSchemaElement, string>((Func<XmlSchemaElement, string>) (e => e.Name)))
          yield return xmlSchemaElement;
      }
    }

    private static bool DerivesFrom(XmlSchemaComplexType parent, XmlSchemaComplexType child)
    {
      if (parent == child)
        return true;
      return child.BaseXmlSchemaType is XmlSchemaComplexType && HelpExampleGenerator.DerivesFrom(parent, (XmlSchemaComplexType) child.BaseXmlSchemaType);
    }

    private static bool IsArrayElementType(XmlSchemaElement element)
    {
      if (element.ElementSchemaType is XmlSchemaComplexType)
      {
        XmlSchemaComplexType elementSchemaType = element.ElementSchemaType as XmlSchemaComplexType;
        if (elementSchemaType.ContentTypeParticle != null && elementSchemaType.ContentTypeParticle is XmlSchemaSequence)
        {
          XmlSchemaSequence contentTypeParticle = elementSchemaType.ContentTypeParticle as XmlSchemaSequence;
          if (contentTypeParticle.Items.Count > 0 && contentTypeParticle.Items[0] is XmlSchemaElement xmlSchemaElement && xmlSchemaElement.MaxOccurs > 1M)
            return true;
        }
      }
      return false;
    }

    private static bool IsObject(XmlSchemaElement element) => element.ElementSchemaType is XmlSchemaComplexType;

    private class HelpExampleGeneratorContext
    {
      public string overrideElementName;
      public int currentDepthLevel;
      public IDictionary<XmlQualifiedName, Type> knownTypes;
      public XmlSchemaSet schemaSet;
      public IDictionary<XmlSchemaElement, int> elementDepth;
      public XmlWriter writer;
      public Dictionary<Type, Action<XmlSchemaObject, HelpExampleGenerator.HelpExampleGeneratorContext>> objectHandler;
    }
  }
}
