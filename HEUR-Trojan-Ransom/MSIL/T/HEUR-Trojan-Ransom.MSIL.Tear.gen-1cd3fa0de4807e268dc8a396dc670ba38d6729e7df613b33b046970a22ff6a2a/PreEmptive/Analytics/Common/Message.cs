// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Message
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace PreEmptive.Analytics.Common
{
  public class Message : Tag
  {
    private string a = Utils.a("톻\uDBBD뎿뇁ꗃꇅ귇", 8);
    private IAttributeLimiter b;
    private WeakReference c = new WeakReference((object) null);
    private int d = -1;
    private int e = -1;

    public override string TagName
    {
      get
      {
        int num1 = -26149;
        int num2 = num1;
        num1 = -26149;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
    }

    public BinaryInfoTag BinaryInfo
    {
      get
      {
        int num1 = 1496;
        int num2 = num1;
        num1 = 1496;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.f;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 336;
        int num2 = num1;
        num1 = 336;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.f = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Message(Guid session, [Optional] ExtendedKeys keys, [Optional] BinaryInfoTag binary)
    {
      int A_1 = 7;
      this.a = Utils.a("횺\uD8BC첾닀ꋂꋄꋆ", A_1);
      this.c = new WeakReference((object) null);
      this.d = -1;
      this.e = -1;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (binary != null)
        goto label_3;
label_2:
      this.AddAttribute(Utils.a("튺\uD9BC", A_1), Guid.NewGuid().ToString());
      this.AddAttribute(Utils.a("\uDCBA\uD8BC톾꓀뇂꓄돆곈꿊", A_1), DateTime.UtcNow.ToISOFormat());
      this.AddAttribute(Utils.a("좺\uD8BC첾닀ꫂ\uAAC4꧆", A_1), session.ToString());
      if (keys == null || keys.Map == null)
        return;
      this.InnerTags.AddRange(keys.ToTags().Cast<Tag>());
      return;
label_3:
      this.BinaryInfo = binary;
      this.InnerTags.Add((Tag) binary);
      goto label_2;
    }

    public Message(string messageType) => this.a = messageType;

    public static Message FromTag(Tag tag)
    {
      int num1 = 28589;
      int num2 = num1;
      num1 = 28589;
      int num3 = num1;
      Message message;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_24:
          return message;
        default:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 0;
          switch (num4)
          {
            default:
              message = new Message(tag.TagName);
              using (List<PreEmptive.Analytics.Common.Tags.Attribute>.Enumerator enumerator = tag.Attributes.GetEnumerator())
              {
                num4 = 1;
                int num5 = num4;
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                      if (!enumerator.MoveNext())
                      {
                        num4 = 4;
                        num5 = num4;
                        continue;
                      }
                      PreEmptive.Analytics.Common.Tags.Attribute current = enumerator.Current;
                      message.AddAttribute(current.Name, current.Value);
                      num4 = 3;
                      num5 = num4;
                      continue;
                    case 1:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 2:
                      goto label_13;
                    case 4:
                      num4 = 2;
                      num5 = num4;
                      continue;
                  }
                  num4 = 0;
                  num5 = num4;
                }
              }
label_13:
              int num6 = 1;
              if (num6 == 0)
                ;
              using (List<Tag>.Enumerator enumerator = tag.InnerTags.GetEnumerator())
              {
                num6 = 1;
                int num7 = num6;
                while (true)
                {
                  switch (num7)
                  {
                    case 0:
                      if (!enumerator.MoveNext())
                      {
                        num6 = 4;
                        num7 = num6;
                        continue;
                      }
                      Tag current = enumerator.Current;
                      message.InnerTags.Add(current);
                      num6 = 3;
                      num7 = num6;
                      continue;
                    case 1:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 2:
                      goto label_24;
                    case 4:
                      num6 = 2;
                      num7 = num6;
                      continue;
                  }
                  num6 = 0;
                  num7 = num6;
                }
              }
          }
      }
    }

    public override string ToString(IAttributeLimiter limits)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 0;
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num1 = -13543;
            int num3 = num1;
            num1 = -13543;
            int num4 = num1;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                continue;
              default:
                num1 = 0;
                if (num1 == 0)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
          case 1:
            goto label_11;
          case 2:
            goto label_9;
          case 3:
            num1 = 1;
            num2 = num1;
            continue;
        }
        if (this.e <= 0)
        {
          num1 = 3;
          num2 = num1;
        }
        else
        {
          num1 = 2;
          num2 = num1;
        }
      }
label_9:
      int capacity = this.e;
      goto label_12;
label_11:
      capacity = 250;
label_12:
      StringBuilder sb = new StringBuilder(capacity);
      this.AppendToStringBuilder(sb, limits);
      return sb.ToString();
    }

    public override string ToString()
    {
      int num1 = -23719;
      int num2 = num1;
      num1 = -23719;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          return this.ToString((IAttributeLimiter) null);
        default:
          goto case 1;
      }
    }

    public override void AppendToStringBuilder(StringBuilder sb, IAttributeLimiter limits)
    {
      int num1 = 10;
      StringBuilder target;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            goto label_5;
          case 1:
            target = this.c.Target as StringBuilder;
            num2 = 3;
            num1 = num2;
            continue;
          case 2:
            if (limits == this.b)
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            break;
          case 3:
            if (target != null)
            {
              num2 = 5;
              num1 = num2;
              continue;
            }
            break;
          case 4:
            if (this.e != -1)
            {
              num2 = 0;
              num1 = num2;
              continue;
            }
            break;
          case 5:
            num2 = 7;
            num1 = num2;
            continue;
          case 6:
            num2 = 1;
            if (num2 == 0)
              ;
            num2 = 2;
            num1 = num2;
            continue;
          case 7:
            if (this.d != -1)
            {
              num2 = 9;
              num1 = num2;
              continue;
            }
            break;
          case 8:
            if (limits != null)
            {
              num2 = 6;
              num1 = num2;
              continue;
            }
            goto case 1;
          case 9:
            num2 = 4;
            num1 = num2;
            continue;
          case 10:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 11:
            num2 = 8;
            num1 = num2;
            continue;
          case 12:
            if (limits != null)
            {
              num2 = 13;
              num1 = num2;
              continue;
            }
            goto label_28;
          case 13:
            this.b = limits;
            num2 = 14;
            num1 = num2;
            continue;
          case 14:
            goto label_28;
          default:
label_3:
            if (this.c != null)
            {
              num2 = 11;
              num1 = num2;
              continue;
            }
            break;
        }
        this.c = new WeakReference((object) sb);
        num2 = 3365;
        int num3 = num2;
        num2 = 3365;
        int num4 = num2;
        switch (num3 == num4 ? 1 : 0)
        {
          case 0:
          case 2:
            goto label_5;
          default:
            num2 = 0;
            if (num2 == 0)
              ;
            num2 = 12;
            num1 = num2;
            continue;
        }
      }
label_5:
      int length = sb.Length;
      sb.Append(target.ToString(this.d, this.e));
      this.d = length;
      this.c = new WeakReference((object) sb);
      return;
label_28:
      this.d = sb.Length;
      base.AppendToStringBuilder(sb, limits);
      this.e = sb.Length - this.d;
    }

    public void InvalidateStringCache()
    {
      int num1 = -11603;
      int num2 = num1;
      num1 = -11603;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.c = (WeakReference) null;
          this.d = -1;
          this.e = -1;
          this.b = (IAttributeLimiter) null;
          break;
        default:
          goto case 1;
      }
    }
  }
}
