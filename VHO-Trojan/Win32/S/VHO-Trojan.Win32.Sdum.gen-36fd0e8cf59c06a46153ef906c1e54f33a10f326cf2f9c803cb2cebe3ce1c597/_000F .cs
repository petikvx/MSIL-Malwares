// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Ajlbzsprazkudye, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 074BCB68-5832-4D3E-2067-BA519DB97273
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-36fd0e8cf59c06a46153ef906c1e54f33a10f326cf2f9c803cb2cebe3ce1c597.exe

using System;
using System.Runtime.CompilerServices;

internal sealed class \u000F\u2002 : \u000E\u2001
{
  private Enum \u0002;

  public \u000F\u2002()
  {
    if (true)
      ;
    // ISSUE: explicit constructor call
    base.\u002Ector(15);
  }

  public \u000F\u2002(Enum _param1)
    : this()
  {
    Enum @enum = _param1 ?? (Enum) \u000F\u2002.\u0002.Value;
    if (false)
      return;
    this.\u0002 = @enum;
  }

  public Enum \u0002()
  {
    if (true)
      ;
    return this.\u0002;
  }

  public void \u0002(Enum _param1)
  {
    Enum @enum = _param1 != null ? _param1 : throw new ArgumentException();
    if (false)
      return;
    this.\u0002 = @enum;
  }

  [SpecialName]
  public override object \u000E\u2001\u2004\u2003\u2004\u2003\u0002()
  {
    if (true)
      ;
    return (object) this.\u0002();
  }

  [SpecialName]
  public override void \u000E\u2001\u2004\u2003\u2004\u2003\u0002(object _param1)
  {
    Enum @enum = (Enum) Enum.Parse(this.\u0002().GetType(), _param1.ToString());
    if (false)
      return;
    this.\u0002(@enum);
  }

  public override \u000E\u2001 \u000E\u2001\u2004\u2003\u2004\u2003\u0002(
    \u000E\u2001 _param1)
  {
    Type type1 = _param1.\u0002();
    if (true)
      goto label_3;
label_1:
    int num1 = _param1.\u0002();
    if (true)
      goto label_4;
label_2:
    int num2;
    switch (num2)
    {
      case 6:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u0002\u2004) _param1).\u0002()));
        break;
      case 8:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u000F\u2007) _param1).\u0002()));
        break;
      case 10:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u000E\u2005) _param1).\u0002()));
        break;
      case 15:
        Type type2 = this.\u0002.GetType();
        if (true)
          goto label_8;
label_6:
        Enum enum1 = ((\u000F\u2002) _param1).\u0002();
        if (true)
          goto label_9;
label_7:
        Enum enum2;
        Type enumType;
        if ((object) enum2.GetType() == (object) enumType)
        {
          this.\u0002(enum2);
          break;
        }
        this.\u0002((Enum) Enum.ToObject(enumType, (object) enum2));
        break;
label_9:
        enum2 = enum1;
        goto label_7;
label_8:
        enumType = type2;
        goto label_6;
      case 16:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u0006\u2004) _param1).\u0002()));
        break;
      case 19:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u0003\u2005) _param1).\u0002()));
        break;
      case 21:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u000E\u2003) _param1).\u0002()));
        break;
      case 23:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u0002\u2006) _param1).\u0002()));
        break;
      case 25:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u0008\u2005) _param1).\u0002()));
        break;
      case 26:
        this.\u0002((Enum) Enum.ToObject(this.\u0002.GetType(), ((\u000F\u2004) _param1).\u0002()));
        break;
      default:
        throw new ArgumentOutOfRangeException();
    }
    return (\u000E\u2001) this;
label_4:
    num2 = num1;
    goto label_2;
label_3:
    this.\u0002(type1);
    goto label_1;
  }

  public override \u000E\u2001 \u000E\u2001\u2004\u2003\u2004\u2003\u0002()
  {
    if (true)
      ;
    \u000F\u2002 obj = new \u000F\u2002(this.\u0002);
    if (true)
      ;
    obj.\u0002(base.\u0002());
    return (\u000E\u2001) obj;
  }

  private enum \u0002
  {
    Value,
  }
}
