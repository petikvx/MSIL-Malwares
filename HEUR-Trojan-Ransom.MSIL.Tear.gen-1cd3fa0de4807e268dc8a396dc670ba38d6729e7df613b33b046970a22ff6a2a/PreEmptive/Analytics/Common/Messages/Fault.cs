// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Messages.Fault
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

namespace PreEmptive.Analytics.Common.Messages
{
  public class Fault : Message
  {
    private string h;

    public override string TagName
    {
      get
      {
        int A_1 = 13;
        int num1 = 17704;
        int num2 = num1;
        num1 = 17704;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (true)
              ;
            if (false)
              ;
            return Utils.a("\uA7C0ꋂ냄ꯆ뷈", A_1);
          default:
            goto case 1;
        }
      }
    }

    public override string TagDescription
    {
      get
      {
        int num1 = -1865;
        int num2 = num1;
        num1 = -1865;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
    }

    public Fault(
      IPlatform platform,
      ExceptionInfo exceptionInfo,
      Guid session,
      [Optional] ExtendedKeys keys,
      [Optional] BinaryInfoTag binary,
      [Optional] bool includeAppComponents)
    {
      int A_1 = 8;
      this.h = Utils.a("\uD9BB욽ꎿ\uA7C1듃닅ꇇꗉꋋ", A_1);
      // ISSUE: explicit constructor call
      base.\u002Ector(session, keys, binary);
      string lowerInvariant = exceptionInfo.ExceptionType.ToString().ToLowerInvariant();
      this.AddAttribute(Utils.a("\uD9BB좽ꖿ곁냃", A_1), lowerInvariant);
      this.AddOptionalAttribute(Utils.a("\uDFBB톽궿꿁ꇃ\uA8C5볇", A_1), exceptionInfo.Comment);
      this.AddOptionalAttribute(Utils.a("\uDFBB톽꺿뛁ꗃꗅ볇", A_1), exceptionInfo.Contact);
      this.h = lowerInvariant + Utils.a("鲻", A_1) + this.h;
      Exception exception = exceptionInfo.Exception;
      if (exception == null)
      {
        ExceptionTag exceptionTag = new ExceptionTag(Utils.a("\uE9BB킽ꮿ곁ꯃ뇅ꛇ", A_1), exceptionInfo.Message);
        exceptionTag.InnerTags.Add((Tag) new StackTag(type: Utils.a("\uE9BB킽ꮿ곁ꯃ뇅ꛇ", A_1), method: Utils.a("\uE9BB킽ꮿ곁ꯃ뇅ꛇ", A_1)));
        this.InnerTags.Add((Tag) exceptionTag);
      }
      else if (exceptionInfo.Message != null)
        exception.Data[(object) Utils.a("僚욽ꎿ\uA7C1듃닅ꇇꗉꋋ菍뗏ꇑ\uA7D3럕뿗뿙", A_1)] = (object) exceptionInfo.Message;
      int sequence = -1;
      for (; exception != null; exception = exception.InnerException)
      {
        ++sequence;
        ExceptionTag exceptionTag = new ExceptionTag(sequence, exception.Data[(object) Utils.a("僚욽ꎿ\uA7C1듃닅ꇇꗉꋋ胍뇏뿑뇓", A_1)] == null ? ((object) exception).GetType().ToString() : exception.Data[(object) Utils.a("僚욽ꎿ\uA7C1듃닅ꇇꗉꋋ胍뇏뿑뇓", A_1)] as string, exception.Data[(object) Utils.a("僚욽ꎿ\uA7C1듃닅ꇇꗉꋋ菍뗏ꇑ\uA7D3럕뿗뿙", A_1)] == null ? exception.Message : exception.Data[(object) Utils.a("僚욽ꎿ\uA7C1듃닅ꇇꗉꋋ菍뗏ꇑ\uA7D3럕뿗뿙", A_1)] as string);
        IList<StackInfo> stackInfoList = (IList<StackInfo>) new List<StackInfo>();
        if (exception.Data[(object) Utils.a("\uEFBB쪽ꆿꇁ꿃鋅뫇ꯉ꿋ꯍ", A_1)] != null)
          stackInfoList = Fault.GetStackInfo(exception.Data[(object) Utils.a("\uEFBB쪽ꆿꇁ꿃鋅뫇ꯉ꿋ꯍ", A_1)] as string, exception.Data[(object) Utils.a("\uEFBB쪽ꆿꇁ꿃鋅뫇ꯉ꿋ꯍ苏럑돓돕ꃗ", A_1)] as string);
        try
        {
          if (stackInfoList.Count == 0)
            stackInfoList = platform.GetStackInfo(exception);
        }
        catch
        {
        }
        if (stackInfoList.Count == 0)
          stackInfoList = Fault.GetStackInfo(exception.StackTrace);
        if (stackInfoList.Count == 0)
          stackInfoList.Add(new StackInfo(0, Utils.a("\uE9BB킽ꮿ곁ꯃ뇅ꛇ", A_1), Utils.a("\uE9BB킽ꮿ곁ꯃ뇅ꛇ", A_1), (string) null, (string) null, (string) null));
        foreach (StackInfo stackInfo in (IEnumerable<StackInfo>) stackInfoList)
          exceptionTag.InnerTags.Add((Tag) new StackTag(stackInfo.Sequence, stackInfo.Type, stackInfo.Method, stackInfo.Signature, stackInfo.File, stackInfo.Line));
        this.InnerTags.Add((Tag) exceptionTag);
      }
      if (!includeAppComponents)
        return;
      IList<ComponentInfo> componentInfoList = (IList<ComponentInfo>) new List<ComponentInfo>();
      try
      {
        componentInfoList = platform.GetComponentInfo();
      }
      catch
      {
      }
      foreach (ComponentInfo componentInfo in (IEnumerable<ComponentInfo>) componentInfoList)
        this.InnerTags.Add((Tag) new AppComponentTag(componentInfo.Name, componentInfo.Version, componentInfo.FullName));
    }

    public static IList<StackInfo> GetStackInfo(
      string stackTrace,
      [Optional] string customStackTraceRegex)
    {
      int A_1 = 6;
      int num1 = 23107;
      int num2 = num1;
      num1 = 23107;
      int num3 = num1;
      int num4;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_3:
          List<StackInfo> stackInfo;
          List<string> stringList;
          int num5;
          switch (0)
          {
            case 0:
label_5:
              stackInfo = new List<StackInfo>();
              stringList = new List<string>();
              stringList.Add(Utils.a("\uE4B9\uE0BB춽\uEABF\uECC1\uEEC3髅\uAAC7\uE2C9\uF3CB\uF2CD\uA4CFꯑꓓ돕\uE6D7\uF4D9\uF7DB苝컟맡뫣뫥샧탩뇫쓭\uD9EF껱\uDAF3\uDEF5쟷웹釻鯽瓿樁㨃娅缇℉┋☍⼏⸑朓缕缗␙䀛㘝ฟࠡ砣༥ħȩጫح氯ሱ栳䄵ጷ昹᰻\u173D᰿扁ᡃㅅ捇ᙉ汋晍潏湑\u3253㽕㑗㽙扛灝䩟嵡䵣㩥剧㙩᭫䕭Ɐ剱屳䥵䑷ᙹᕻၽ\uE57F벁\uDF83뚅ꖇ뎉톋ꖍ꾏뮑좓\uE495ꞗ뺙\uE09B낝誟ﺡ횣馥貧莩", A_1));
              stringList.Add(Utils.a("\uE4B9\uE0BB춽\uEABF黁돃\uEDC5铇막\uE4CB\uF1CD\uECCF뿑뇓ꋕ냗\uE4D9\uF2DB\uF4DD짟\uDDE1룣컥샧헩탫裭駯黱釳죵훷탹헻ꋽ㫿⨁㬃㨅搇按戋欍⸏䤑␓㬕℗䜙㜛ℝट縡ḣࠥȧษ", A_1));
              num5 = 0;
              num4 = num5;
              goto default;
            default:
              List<string>.Enumerator enumerator;
              while (true)
              {
                switch (num4)
                {
                  case 0:
                    if (!string.IsNullOrEmpty(customStackTraceRegex))
                    {
                      num5 = 2;
                      num4 = num5;
                      continue;
                    }
                    goto case 1;
                  case 1:
                    num5 = 3;
                    num4 = num5;
                    continue;
                  case 2:
                    stringList.Add(customStackTraceRegex);
                    num5 = 1;
                    num4 = num5;
                    continue;
                  case 3:
                    if (stackTrace != null)
                    {
                      num5 = 5;
                      num4 = num5;
                      continue;
                    }
                    goto label_39;
                  case 4:
                    goto label_34;
                  case 5:
                    enumerator = stringList.GetEnumerator();
                    num5 = 4;
                    num4 = num5;
                    continue;
                  default:
                    goto label_5;
                }
              }
label_34:
              num5 = 1;
              if (num5 == 0)
                ;
              try
              {
                num5 = 1;
                int num6 = num5;
                while (true)
                {
                  string current;
                  switch (num6)
                  {
                    case 0:
                      if (!enumerator.MoveNext())
                      {
                        num5 = 3;
                        num6 = num5;
                        continue;
                      }
                      current = enumerator.Current;
                      num5 = 2;
                      num6 = num5;
                      continue;
                    case 1:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 2:
                      try
                      {
                        MatchCollection matchCollection;
                        switch (0)
                        {
                          case 0:
label_16:
                            matchCollection = Regex.Matches(stackTrace, current, RegexOptions.Multiline);
                            num5 = 0;
                            num6 = num5;
                            goto default;
                          default:
                            while (true)
                            {
                              int i;
                              switch (num6)
                              {
                                case 0:
                                  if (matchCollection.Count > 0)
                                  {
                                    num5 = 4;
                                    num6 = num5;
                                    continue;
                                  }
                                  break;
                                case 1:
                                case 7:
                                  num5 = 3;
                                  num6 = num5;
                                  continue;
                                case 2:
                                  num5 = 5;
                                  num6 = num5;
                                  continue;
                                case 3:
                                  if (i < matchCollection.Count)
                                  {
                                    Match match = matchCollection[i];
                                    stackInfo.Add(new StackInfo()
                                    {
                                      Sequence = i,
                                      Type = match.Groups[Utils.a("캹얻캽ꖿ", A_1)].Value.Sanitize(),
                                      Method = match.Groups[Utils.a("ힹ\uD9BB쪽ꢿ", A_1)].Value.Sanitize(),
                                      Signature = match.Groups[Utils.a("즹햻\uD9BD", A_1)].Value.Sanitize(),
                                      File = match.Groups[Utils.a("\uDCB9햻튽ꖿ", A_1)].Value.Sanitize(),
                                      Line = match.Groups[Utils.a("횹햻킽ꖿ", A_1)].Value.Sanitize()
                                    });
                                    ++i;
                                    num5 = 7;
                                    num6 = num5;
                                    continue;
                                  }
                                  num5 = 2;
                                  num6 = num5;
                                  continue;
                                case 4:
                                  i = 0;
                                  num5 = 1;
                                  num6 = num5;
                                  continue;
                                case 5:
                                  if (stackInfo.Count > 0)
                                  {
                                    num5 = 8;
                                    num6 = num5;
                                    continue;
                                  }
                                  break;
                                case 6:
                                  goto label_31;
                                case 8:
                                  num5 = 6;
                                  num6 = num5;
                                  continue;
                                case 9:
                                  goto label_11;
                                default:
                                  goto label_16;
                              }
                              num5 = 9;
                              num6 = num5;
                            }
                        }
                      }
                      catch
                      {
                        break;
                      }
                    case 3:
label_31:
                      num5 = 4;
                      num6 = num5;
                      continue;
                    case 4:
                      goto label_39;
                  }
label_11:
                  num5 = 0;
                  num6 = num5;
                }
              }
              finally
              {
                enumerator.Dispose();
              }
label_39:
              return (IList<StackInfo>) stackInfo;
          }
        default:
          if (true)
            ;
          num4 = 0;
          switch (num4)
          {
            default:
              goto label_3;
          }
      }
    }
  }
}
