// Decompiled with JetBrains decompiler
// Type: �嵱հ-ζ.tΠیչ�
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-871a0b2fa5664bd5ed819edb7c037b81b2b552e4ab9eec6f87adbf32d51365ef.exe

using \uFFFD嵱հ\u002Dζ;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;

namespace \uFFFD嵱հ\u002Dζ
{
  [StandardModule]
  public sealed class tΠیչ\uFFFD
  {
    public const uint 泮Ɖܣﾭ\u0026 = 0;
    public const uint ʭ\uFFFD\u07FB䕃Ԝ = 8;
    public const uint ǎʓjϱ\u07B9 = 4;
    public static byte[] \uFFFDƉ\uFFFD\uFFFD\u07B9 = BitConverter.GetBytes(1296188491);
    public static string Ś\uFFFDިãŎ = "ObjectLength";
    public static string ջױ\uFFFD\uFFFDW = "ChainingModeGCM";
    public static string 뫆恁\uFFFDչ\uFFFD = "AuthTagLength";
    public static string ΩǎKȨt = "ChainingMode";
    public static string \u060C\uFFFDW\u02F3ܣ = "KeyDataBlob";
    public static string \uFFFD\u0040ۨęڿ = "AES";
    public static string k콪\u05C3ܣ\u1CFC = "Microsoft Primitive Provider";
    public static int Ăޤœ㹃\uFFFD = 1;
    public static int 皍c\uFFFDс̧ = 1;
    public static uint BҟņՄϒ = 3221266434;

    [DllImport("bcrypt.dll", EntryPoint = "BCryptOpenAlgorithmProvider", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint ڿіޤ\u05C9Ԍ(
      out IntPtr Ī2ٕųԜ,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      [MarshalAs(UnmanagedType.LPWStr)] string _param2,
      uint _param3);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptCloseAlgorithmProvider", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint ԹҚ\u05C9éœ(IntPtr _param0, uint _param1);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptGetProperty", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint \u0040KΑߡB(
      IntPtr _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      byte[] _param2,
      int _param3,
      ref int _param4,
      uint _param5);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptSetProperty", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern uint ãݶӛ\u26CAε(
      IntPtr ˤܪ뜸ãՕ,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      byte[] _param2,
      int _param3,
      int _param4);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptImportKey", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint 䇹\uFFFDi恁\uFFFD(
      IntPtr _param0,
      IntPtr _param1,
      [MarshalAs(UnmanagedType.LPWStr)] string 丐ҚAջ퓜,
      out IntPtr _param3,
      IntPtr ϫҟמņœ,
      int _param5,
      byte[] _param6,
      int _param7,
      uint _param8);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptDestroyKey", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint 恁ݶ\uFFFDܹԜ(IntPtr _param0);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptEncrypt", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint ٷ؜ζϘ\u0385(
      IntPtr _param0,
      byte[] _param1,
      int 뜸Ң콪ﾭŔ,
      ref tΠیչ\uFFFD.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO _param3,
      byte[] _param4,
      int _param5,
      byte[] _param6,
      int _param7,
      ref int _param8,
      uint _param9);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptDecrypt", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern uint Z\uFFFD콪\u07B4ϫ(
      IntPtr _param0,
      byte[] _param1,
      int _param2,
      ref tΠیչ\uFFFD.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO _param3,
      byte[] _param4,
      int _param5,
      byte[] _param6,
      int _param7,
      ref int _param8,
      int _param9);

    public struct BCRYPT_PSS_PADDING_INFO
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string pszAlgId;
      public int cbSalt;

      public BCRYPT_PSS_PADDING_INFO(string pszAlgId, int cbSalt)
        : this()
      {
        this.pszAlgId = pszAlgId;
        this.cbSalt = cbSalt;
      }
    }

    public struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO : IDisposable
    {
      public int cbSize;
      public int dwInfoVersion;
      public IntPtr pbNonce;
      public int cbNonce;
      public IntPtr pbAuthData;
      public int cbAuthData;
      public IntPtr pbTag;
      public int cbTag;
      public IntPtr pbMacContext;
      public int cbMacContext;
      public int cbAAD;
      public long cbData;
      public int dwFlags;

      public BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(byte[] iv, byte[] aad, byte[] tag)
        : this()
      {
        this.dwInfoVersion = tΠیչ\uFFFD.皍c\uFFFDс̧;
        this.cbSize = Marshal.SizeOf(typeof (tΠیչ\uFFFD.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO));
        if (iv != null)
        {
          this.cbNonce = iv.Length;
          this.pbNonce = Marshal.AllocHGlobal(this.cbNonce);
          Marshal.Copy(iv, 0, this.pbNonce, this.cbNonce);
        }
        if (aad != null)
        {
          this.cbAuthData = aad.Length;
          this.pbAuthData = Marshal.AllocHGlobal(this.cbAuthData);
          Marshal.Copy(aad, 0, this.pbAuthData, this.cbAuthData);
        }
        if (tag == null)
          return;
        this.cbTag = tag.Length;
        this.pbTag = Marshal.AllocHGlobal(this.cbTag);
        Marshal.Copy(tag, 0, this.pbTag, this.cbTag);
        this.cbMacContext = tag.Length;
        this.pbMacContext = Marshal.AllocHGlobal(this.cbMacContext);
      }

      public void Dispose()
      {
        if (this.pbNonce != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbNonce);
        if (this.pbTag != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbTag);
        if (this.pbAuthData != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbAuthData);
        if (!(this.pbMacContext != IntPtr.Zero))
          return;
        Marshal.FreeHGlobal(this.pbMacContext);
      }
    }

    public struct BCRYPT_KEY_LENGTHS_STRUCT
    {
      public int dwMinLength;
      public int dwMaxLength;
      public int dwIncrement;
    }

    public struct BCRYPT_OAEP_PADDING_INFO
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string pszAlgId;
      public IntPtr pbLabel;
      public int cbLabel;

      public BCRYPT_OAEP_PADDING_INFO(string alg)
        : this()
      {
        this.pszAlgId = alg;
        this.pbLabel = IntPtr.Zero;
        this.cbLabel = 0;
      }
    }
  }
}
