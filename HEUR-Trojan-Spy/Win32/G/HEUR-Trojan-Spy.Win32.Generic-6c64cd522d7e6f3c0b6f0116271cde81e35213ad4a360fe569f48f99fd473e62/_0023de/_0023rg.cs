// Decompiled with JetBrains decompiler
// Type: #de.#rg
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u0023de;
using System;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;
using System.Windows.Forms;

namespace \u0023de
{
  internal abstract class \u0023rg
  {
    private static readonly bool \u0023eg = Convert.ToBoolean("False");
    internal static readonly string \u0023fg = "1";
    internal static \u0023rg \u0023gg;
    private IWebProxy \u0023ee;
    internal EventHandler \u0023Je;
    internal \u0023of \u0023fe;

    protected abstract void \u0023hg([In] \u0023hf obj0);

    protected abstract void \u0023ig([In] \u00239e obj0);

    protected abstract void \u0023jg([In] \u0023nf obj0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023kg([In] object obj0, [In] ThreadExceptionEventArgs obj1)
    {
      try
      {
        Exception exception = obj1.Exception;
        int num = 4;
        if (true)
          goto label_5;
label_1:
        if (exception is SecurityException && \u0023rg.\u0023fg == "1" && this.\u0023ng(exception as SecurityException))
        {
          if (!\u0023rg.WC8q6b5n9QZmr3ma4LA())
          {
            num = 5;
            goto label_5;
          }
        }
        else
        {
          this.\u0023lf(exception, true, false);
          return;
        }
label_3:
        System.Type type;
        if (type.Name == "UnhandledException" && type.Namespace == "SmartAssembly.SmartExceptionsCore")
        {
          exception = (Exception) type.GetField("PreviousException").GetValue((object) exception);
          goto label_1;
        }
        else
          goto label_1;
label_5:
        while (true)
        {
          switch (num)
          {
            case 0:
            case 1:
              goto label_3;
            case 2:
            case 3:
              goto label_1;
            case 4:
              type = exception.GetType();
              if (\u0023rg.aAiBlB5MqXF1VwmxQXB())
              {
                num = 0;
                continue;
              }
              goto label_8;
            case 5:
              goto label_11;
            default:
              num = 3;
              continue;
          }
        }
label_11:
        return;
label_8:;
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023lg([In] object obj0, [In] UnhandledExceptionEventArgs obj1)
    {
      try
      {
        int num1;
        if (obj1.ExceptionObject is SecurityException)
        {
          num1 = 3;
          goto label_8;
        }
label_4:
        if (!(obj1.ExceptionObject is Exception))
          return;
        num1 = 4;
label_8:
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_6;
            case 1:
            case 2:
              goto label_2;
            case 4:
              goto label_11;
            default:
              num2 = 2;
              continue;
          }
        }
label_2:
        if (this.\u0023ng(obj1.ExceptionObject as SecurityException))
          return;
        goto label_4;
label_6:
        if (!(\u0023rg.\u0023fg == "1"))
          goto label_4;
        else
          goto label_2;
label_11:
        this.\u0023lf((Exception) obj1.ExceptionObject, !obj1.IsTerminating, false);
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual Guid \u0023mg() => Guid.Empty;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal bool \u0023ng([In] SecurityException obj0)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        \u0023nf nf;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 2:
              goto label_2;
            case 3:
            case 5:
              goto label_9;
            case 4:
              this.\u0023jg(nf);
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_9;
            case 6:
              goto label_10;
            default:
              num2 = 5;
              continue;
          }
        }
label_1:
        nf = new \u0023nf(obj0);
        num1 = 4;
        continue;
label_2:
        if (!nf.\u0023lf)
        {
          if (nf.\u0023ff)
            goto label_10;
        }
        else
          break;
label_9:
        Application.Exit();
        num1 = 6;
      }
      return false;
label_10:
      return true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0023lf([In] Exception obj0, [In] bool obj1, [In] bool obj2)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Assembly[] assemblies;
        while (true)
        {
          System.Type type;
          switch (num2)
          {
            case 0:
            case 4:
              type = obj0.GetType();
              int num3 = 5;
              num2 = \u0023rg.WC8q6b5n9QZmr3ma4LA() ? num3 : num3;
              continue;
            case 1:
              goto label_2;
            case 2:
            case 3:
              obj0 = (Exception) type.GetField("PreviousException").GetValue((object) obj0);
              break;
            case 5:
              if (!(type.Name == "UnhandledException"))
                break;
              goto label_22;
            case 6:
              if (!(type.Namespace == "SmartAssembly.SmartExceptionsCore"))
                break;
              goto case 2;
            case 7:
              goto label_38;
            default:
              num2 = 2;
              continue;
          }
          bool flag = true;
          if (obj0 != null)
          {
            if (!(obj0 is ThreadAbortException))
            {
              try
              {
                \u0023Te te = new \u0023Te(this.\u0023mg(), obj0, this.\u0023ee);
                \u0023\u0023.\u0023gl(new \u0023of(this.\u0023qg), (\u0023ge) te);
                \u0023\u0023.\u0023ej(te, new EventHandler(this.\u0023pg));
                \u0023\u0023.\u0023pk(new \u0023af(this.\u0023og), te);
                \u0023hf hf = new \u0023hf(te, obj0);
                if (\u0023\u0023.\u00231i() != null)
                  hf.\u0023cf = true;
                if (!obj1)
                {
                  hf.\u0023ef = false;
                  hf.\u0023ff = false;
                }
                else if (obj2 || \u0023rg.\u0023eg)
                {
                  hf.\u0023ef = false;
                  hf.\u0023ff = true;
                }
                this.\u0023hg(hf);
                flag = !hf.\u0023ff;
              }
              catch (ThreadAbortException ex)
              {
              }
              catch (Exception ex)
              {
                this.\u0023ig(new \u00239e(ex));
              }
              if (flag)
              {
                assemblies = AppDomain.CurrentDomain.GetAssemblies();
                if (true)
                  num2 = 1;
                else
                  goto label_38;
              }
              else
                goto label_26;
            }
            else
              goto label_17;
          }
          else
            goto label_42;
        }
label_2:
label_14:
        for (int index = 0; index < assemblies.Length; ++index)
        {
          Assembly assembly = assemblies[index];
          try
          {
            string fullName = assembly.FullName;
            int num4 = 3;
            object obj;
            while (true)
            {
              int num5 = num4;
              while (true)
              {
                switch (num5)
                {
                  case 0:
                  case 3:
                    goto label_5;
                  case 1:
                  case 2:
                    goto label_10;
                  case 4:
                    goto label_11;
                  default:
                    num5 = 2;
                    continue;
                }
              }
label_5:
              if (fullName.EndsWith("31bf3856ad364e35"))
              {
                if (!fullName.StartsWith("PresentationFramework,"))
                  goto label_14;
              }
              else
                goto label_14;
label_10:
              obj = assembly.GetType("System.Windows.Application").GetProperty("Current").GetGetMethod().Invoke((object) null, (object[]) null);
              num4 = 4;
            }
label_11:
            obj.GetType().GetMethod("Shutdown", new System.Type[0]).Invoke(obj, (object[]) null);
          }
          catch
          {
          }
        }
        num1 = 7;
        continue;
label_22:
        num1 = 6;
      }
label_42:
      return;
label_17:
      return;
label_26:
      return;
label_38:
      try
      {
        Environment.ExitCode = -532462766;
        Application.Exit();
      }
      catch
      {
        try
        {
          Environment.Exit(-532462766);
        }
        catch
        {
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023og([In] object obj0, [In] \u00239e obj1) => this.\u0023ig(obj1);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023pg([In] object obj0, [In] EventArgs obj1)
    {
      int num1 = 3;
      if (\u0023rg.WC8q6b5n9QZmr3ma4LA())
        ;
      while (true)
      {
        EventHandler je;
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            je = this.\u0023Je;
            num1 = 4;
            continue;
          case 1:
          case 4:
            if (je == null)
              goto label_5;
            else
              goto case 2;
          case 2:
            je(obj0, obj1);
            num2 = 5;
            break;
          case 5:
            goto label_1;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_5:
      return;
label_1:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void \u0023qg([In] object obj0, [In] \u0023tf obj1)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        \u0023of fe;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              fe = this.\u0023fe;
              if (!\u0023rg.WC8q6b5n9QZmr3ma4LA())
              {
                num2 = 1;
                continue;
              }
              goto case 1;
            case 1:
              if (fe == null)
                goto label_3;
              else
                goto case 2;
            case 2:
            case 4:
              fe(obj0, obj1);
              num2 = 5;
              continue;
            case 5:
              goto label_9;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 4;
      }
label_3:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected \u0023rg()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static \u0023rg()
    {
    }

    internal static bool aAiBlB5MqXF1VwmxQXB() => true;

    internal static bool WC8q6b5n9QZmr3ma4LA() => false;
  }
}
