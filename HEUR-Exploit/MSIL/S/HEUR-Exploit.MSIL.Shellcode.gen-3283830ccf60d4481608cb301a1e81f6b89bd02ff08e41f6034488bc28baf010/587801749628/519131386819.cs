// Decompiled with JetBrains decompiler
// Type: 587801749628.519131386819
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003101937135063;
using \u003175470086973;
using \u003272277330780;
using \u003308652683381;
using \u003587801749628;
using \u003628951805400;
using \u003721396290897;
using \u003757385355798;
using \u003896877406398;
using \u003903860872383;
using System;
using System.Globalization;
using System.IO;
using System.Xml;

namespace \u003587801749628
{
  internal static class \u003519131386819
  {
    internal static readonly long \u003885598197445 = 621355968000000000;
    private const string \u003154229358232 = "yyyy-MM-ddTHH:mm:ss.FFFFFFFK";
    private const int \u003410231664565 = 36524;
    private const int \u003053306792923 = 146097;
    private const int \u003145019236663 = 1461;
    private const int \u003333451719275 = 365;
    private const long \u003100809049087 = 864000000000;
    private static readonly int[] \u003714874330432 = new int[13]
    {
      0,
      31,
      59,
      90,
      120,
      151,
      181,
      212,
      243,
      273,
      304,
      334,
      365
    };
    private static readonly int[] \u003203622100924 = new int[13]
    {
      0,
      31,
      60,
      91,
      121,
      152,
      182,
      213,
      244,
      274,
      305,
      335,
      366
    };

    public static TimeSpan \u003241040132074(this DateTime _param0) => TimeZoneInfo.Local.GetUtcOffset(_param0);

    public static XmlDateTimeSerializationMode \u003933044583518(
      DateTimeKind _param0)
    {
      switch (_param0)
      {
        case DateTimeKind.Unspecified:
          return XmlDateTimeSerializationMode.Unspecified;
        case DateTimeKind.Utc:
          return XmlDateTimeSerializationMode.Utc;
        case DateTimeKind.Local:
          return XmlDateTimeSerializationMode.Local;
        default:
          throw \u003770915038270.\u003669207498834("kind", (object) _param0, "Unexpected DateTimeKind value.");
      }
    }

    internal static DateTime \u003986046126316(DateTime _param0, \u003790816064334 _param1)
    {
      switch (_param1)
      {
        case \u003790816064334.Local:
          _param0 = \u003519131386819.\u003265245507631(_param0);
          goto case \u003790816064334.RoundtripKind;
        case \u003790816064334.Utc:
          _param0 = \u003519131386819.\u003234631551796(_param0);
          goto case \u003790816064334.RoundtripKind;
        case \u003790816064334.Unspecified:
          _param0 = new DateTime(_param0.Ticks, DateTimeKind.Unspecified);
          goto case \u003790816064334.RoundtripKind;
        case \u003790816064334.RoundtripKind:
          return _param0;
        default:
          throw new ArgumentException("Invalid date time handling value.");
      }
    }

    private static DateTime \u003265245507631(DateTime _param0)
    {
      switch (_param0.Kind)
      {
        case DateTimeKind.Unspecified:
          return new DateTime(_param0.Ticks, DateTimeKind.Local);
        case DateTimeKind.Utc:
          return _param0.ToLocalTime();
        case DateTimeKind.Local:
          return _param0;
        default:
          return _param0;
      }
    }

    private static DateTime \u003234631551796(DateTime _param0)
    {
      switch (_param0.Kind)
      {
        case DateTimeKind.Unspecified:
          return new DateTime(_param0.Ticks, DateTimeKind.Utc);
        case DateTimeKind.Utc:
          return _param0;
        case DateTimeKind.Local:
          return _param0.ToUniversalTime();
        default:
          return _param0;
      }
    }

    private static long \u003517575555155(DateTime _param0) => _param0.Kind == DateTimeKind.Utc ? _param0.Ticks : \u003519131386819.\u003836167894421(_param0, _param0.\u003241040132074());

    private static long \u003836167894421(DateTime _param0, TimeSpan _param1)
    {
      if (_param0.Kind == DateTimeKind.Utc || _param0 == DateTime.MaxValue || _param0 == DateTime.MinValue)
        return _param0.Ticks;
      long num = _param0.Ticks - _param1.Ticks;
      if (num > 3155378975999999999L)
        return 3155378975999999999;
      return num < 0L ? 0L : num;
    }

    internal static long \u003085341948674(DateTime _param0, TimeSpan _param1) => \u003519131386819.\u003555426131262(\u003519131386819.\u003836167894421(_param0, _param1));

    internal static long \u003189791925550(DateTime _param0) => \u003519131386819.\u003347988087003(_param0, true);

    internal static long \u003347988087003(DateTime _param0, bool _param1) => \u003519131386819.\u003555426131262(_param1 ? \u003519131386819.\u003517575555155(_param0) : _param0.Ticks);

    private static long \u003555426131262(long _param0) => (_param0 - \u003519131386819.\u003885598197445) / 10000L;

    internal static DateTime \u003001393328202(long _param0) => new DateTime(_param0 * 10000L + \u003519131386819.\u003885598197445, DateTimeKind.Utc);

    internal static bool \u003442026190960(
      \u003153558145358 _param0,
      \u003790816064334 _param1,
      out DateTime _param2)
    {
      \u003869178423919 obj = new \u003869178423919();
      if (!obj.\u003409492878995(_param0.\u003011921092234, _param0.\u003519552708578, _param0.\u003351124807798))
      {
        _param2 = new DateTime();
        return false;
      }
      DateTime dateTime = \u003519131386819.\u003060847531497(obj);
      switch (obj.\u003406194874343)
      {
        case \u003824778253927.Utc:
          dateTime = new DateTime(dateTime.Ticks, DateTimeKind.Utc);
          break;
        case \u003824778253927.LocalWestOfUtc:
          TimeSpan timeSpan1 = new TimeSpan(obj.\u003599533470335, obj.\u003393517455101, 0);
          long ticks1 = dateTime.Ticks + timeSpan1.Ticks;
          if (ticks1 <= DateTime.MaxValue.Ticks)
          {
            dateTime = new DateTime(ticks1, DateTimeKind.Utc).ToLocalTime();
            break;
          }
          long ticks2 = ticks1 + dateTime.\u003241040132074().Ticks;
          if (ticks2 > DateTime.MaxValue.Ticks)
            ticks2 = DateTime.MaxValue.Ticks;
          dateTime = new DateTime(ticks2, DateTimeKind.Local);
          break;
        case \u003824778253927.LocalEastOfUtc:
          TimeSpan timeSpan2 = new TimeSpan(obj.\u003599533470335, obj.\u003393517455101, 0);
          long ticks3 = dateTime.Ticks - timeSpan2.Ticks;
          if (ticks3 >= DateTime.MinValue.Ticks)
          {
            dateTime = new DateTime(ticks3, DateTimeKind.Utc).ToLocalTime();
            break;
          }
          long ticks4 = ticks3 + dateTime.\u003241040132074().Ticks;
          if (ticks4 < DateTime.MinValue.Ticks)
            ticks4 = DateTime.MinValue.Ticks;
          dateTime = new DateTime(ticks4, DateTimeKind.Local);
          break;
      }
      _param2 = \u003519131386819.\u003986046126316(dateTime, _param1);
      return true;
    }

    internal static bool \u003484981445727(\u003153558145358 _param0, out DateTimeOffset _param1)
    {
      \u003869178423919 obj = new \u003869178423919();
      if (!obj.\u003409492878995(_param0.\u003011921092234, _param0.\u003519552708578, _param0.\u003351124807798))
      {
        _param1 = new DateTimeOffset();
        return false;
      }
      DateTime dateTime = \u003519131386819.\u003060847531497(obj);
      TimeSpan offset;
      switch (obj.\u003406194874343)
      {
        case \u003824778253927.Utc:
          offset = new TimeSpan(0L);
          break;
        case \u003824778253927.LocalWestOfUtc:
          offset = new TimeSpan(-obj.\u003599533470335, -obj.\u003393517455101, 0);
          break;
        case \u003824778253927.LocalEastOfUtc:
          offset = new TimeSpan(obj.\u003599533470335, obj.\u003393517455101, 0);
          break;
        default:
          offset = TimeZoneInfo.Local.GetUtcOffset(dateTime);
          break;
      }
      long num = dateTime.Ticks - offset.Ticks;
      if (num < 0L || num > 3155378975999999999L)
      {
        _param1 = new DateTimeOffset();
        return false;
      }
      _param1 = new DateTimeOffset(dateTime, offset);
      return true;
    }

    private static DateTime \u003060847531497(\u003869178423919 _param0)
    {
      bool flag;
      if (_param0.\u003364480277989 == 24)
      {
        flag = true;
        _param0.\u003364480277989 = 0;
      }
      else
        flag = false;
      DateTime dateTime = new DateTime(_param0.\u003798046950927, _param0.\u003106932700896, _param0.\u003777425014702, _param0.\u003364480277989, _param0.\u003887451862613, _param0.\u003308892877952);
      dateTime = dateTime.AddTicks((long) _param0.\u003115699783981);
      if (flag)
        dateTime = dateTime.AddDays(1.0);
      return dateTime;
    }

    internal static bool \u003109415339045(
      \u003153558145358 _param0,
      \u003790816064334 _param1,
      string _param2,
      CultureInfo _param3,
      out DateTime _param4)
    {
      if (_param0.\u003351124807798 > 0)
      {
        int i = _param0.\u003519552708578;
        if (_param0.get_Item(i) == '/')
        {
          if (_param0.\u003351124807798 >= 9 && _param0.\u003349825804843("/Date(") && _param0.\u003892652428424(")/") && \u003519131386819.\u003550460782620(_param0, _param1, out _param4))
            return true;
        }
        else if (_param0.\u003351124807798 >= 19 && _param0.\u003351124807798 <= 40 && char.IsDigit(_param0.get_Item(i)) && _param0.get_Item(i + 10) == 'T' && \u003519131386819.\u003442026190960(_param0, _param1, out _param4))
          return true;
        if (!string.IsNullOrEmpty(_param2) && \u003519131386819.\u003514504149869(_param0.ToString(), _param1, _param2, _param3, out _param4))
          return true;
      }
      _param4 = new DateTime();
      return false;
    }

    internal static bool \u003006315813200(
      string _param0,
      \u003790816064334 _param1,
      string _param2,
      CultureInfo _param3,
      out DateTime _param4)
    {
      if (_param0.Length > 0)
      {
        if (_param0[0] == '/')
        {
          if (_param0.Length >= 9 && _param0.StartsWith("/Date(", StringComparison.Ordinal) && _param0.EndsWith(")/", StringComparison.Ordinal) && \u003519131386819.\u003550460782620(new \u003153558145358(_param0.ToCharArray(), 0, _param0.Length), _param1, out _param4))
            return true;
        }
        else if (_param0.Length >= 19 && _param0.Length <= 40 && char.IsDigit(_param0[0]) && _param0[10] == 'T' && DateTime.TryParseExact(_param0, "yyyy-MM-ddTHH:mm:ss.FFFFFFFK", (IFormatProvider) CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind, out _param4))
        {
          _param4 = \u003519131386819.\u003986046126316(_param4, _param1);
          return true;
        }
        if (!string.IsNullOrEmpty(_param2) && \u003519131386819.\u003514504149869(_param0, _param1, _param2, _param3, out _param4))
          return true;
      }
      _param4 = new DateTime();
      return false;
    }

    internal static bool \u003794019798522(
      \u003153558145358 _param0,
      string _param1,
      CultureInfo _param2,
      out DateTimeOffset _param3)
    {
      if (_param0.\u003351124807798 > 0)
      {
        int i = _param0.\u003519552708578;
        if (_param0.get_Item(i) == '/')
        {
          if (_param0.\u003351124807798 >= 9 && _param0.\u003349825804843("/Date(") && _param0.\u003892652428424(")/") && \u003519131386819.\u003894078234097(_param0, out _param3))
            return true;
        }
        else if (_param0.\u003351124807798 >= 19 && _param0.\u003351124807798 <= 40 && char.IsDigit(_param0.get_Item(i)) && _param0.get_Item(i + 10) == 'T' && \u003519131386819.\u003484981445727(_param0, out _param3))
          return true;
        if (!string.IsNullOrEmpty(_param1) && \u003519131386819.\u003244500912570(_param0.ToString(), _param1, _param2, out _param3))
          return true;
      }
      _param3 = new DateTimeOffset();
      return false;
    }

    internal static bool \u003768334333785(
      string _param0,
      string _param1,
      CultureInfo _param2,
      out DateTimeOffset _param3)
    {
      if (_param0.Length > 0)
      {
        if (_param0[0] == '/')
        {
          if (_param0.Length >= 9 && _param0.StartsWith("/Date(", StringComparison.Ordinal) && _param0.EndsWith(")/", StringComparison.Ordinal) && \u003519131386819.\u003894078234097(new \u003153558145358(_param0.ToCharArray(), 0, _param0.Length), out _param3))
            return true;
        }
        else if (_param0.Length >= 19 && _param0.Length <= 40 && char.IsDigit(_param0[0]) && _param0[10] == 'T' && DateTimeOffset.TryParseExact(_param0, "yyyy-MM-ddTHH:mm:ss.FFFFFFFK", (IFormatProvider) CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind, out _param3) && \u003519131386819.\u003484981445727(new \u003153558145358(_param0.ToCharArray(), 0, _param0.Length), out _param3))
          return true;
        if (!string.IsNullOrEmpty(_param1) && \u003519131386819.\u003244500912570(_param0, _param1, _param2, out _param3))
          return true;
      }
      _param3 = new DateTimeOffset();
      return false;
    }

    private static bool \u003094077081838(
      \u003153558145358 _param0,
      out long _param1,
      out TimeSpan _param2,
      out DateTimeKind _param3)
    {
      _param3 = DateTimeKind.Utc;
      int num = _param0.\u003324426179809('+', 7, _param0.\u003351124807798 - 8);
      if (num == -1)
        num = _param0.\u003324426179809('-', 7, _param0.\u003351124807798 - 8);
      if (num != -1)
      {
        _param3 = DateTimeKind.Local;
        if (!\u003519131386819.\u003929871982430(_param0, num + _param0.\u003519552708578, out _param2))
        {
          _param1 = 0L;
          return false;
        }
      }
      else
      {
        _param2 = TimeSpan.Zero;
        num = _param0.\u003351124807798 - 2;
      }
      return \u003594264013390.\u003996050494539(_param0.\u003011921092234, 6 + _param0.\u003519552708578, num - 6, out _param1) == \u003574970756994.Success;
    }

    private static bool \u003550460782620(
      \u003153558145358 _param0,
      \u003790816064334 _param1,
      out DateTime _param2)
    {
      long num;
      DateTimeKind dateTimeKind;
      if (!\u003519131386819.\u003094077081838(_param0, out num, out TimeSpan _, out dateTimeKind))
      {
        _param2 = new DateTime();
        return false;
      }
      DateTime dateTime = \u003519131386819.\u003001393328202(num);
      switch (dateTimeKind)
      {
        case DateTimeKind.Unspecified:
          _param2 = DateTime.SpecifyKind(dateTime.ToLocalTime(), DateTimeKind.Unspecified);
          break;
        case DateTimeKind.Local:
          _param2 = dateTime.ToLocalTime();
          break;
        default:
          _param2 = dateTime;
          break;
      }
      _param2 = \u003519131386819.\u003986046126316(_param2, _param1);
      return true;
    }

    private static bool \u003514504149869(
      string _param0,
      \u003790816064334 _param1,
      string _param2,
      CultureInfo _param3,
      out DateTime _param4)
    {
      DateTime result;
      if (DateTime.TryParseExact(_param0, _param2, (IFormatProvider) _param3, DateTimeStyles.RoundtripKind, out result))
      {
        DateTime dateTime = \u003519131386819.\u003986046126316(result, _param1);
        _param4 = dateTime;
        return true;
      }
      _param4 = new DateTime();
      return false;
    }

    private static bool \u003894078234097(\u003153558145358 _param0, out DateTimeOffset _param1)
    {
      long num;
      TimeSpan offset;
      if (!\u003519131386819.\u003094077081838(_param0, out num, out offset, out DateTimeKind _))
      {
        _param1 = (DateTimeOffset) new DateTime();
        return false;
      }
      DateTime dateTime = \u003519131386819.\u003001393328202(num);
      _param1 = new DateTimeOffset(dateTime.Add(offset).Ticks, offset);
      return true;
    }

    private static bool \u003244500912570(
      string _param0,
      string _param1,
      CultureInfo _param2,
      out DateTimeOffset _param3)
    {
      DateTimeOffset result;
      if (DateTimeOffset.TryParseExact(_param0, _param1, (IFormatProvider) _param2, DateTimeStyles.RoundtripKind, out result))
      {
        _param3 = result;
        return true;
      }
      _param3 = new DateTimeOffset();
      return false;
    }

    private static bool \u003929871982430(
      \u003153558145358 _param0,
      int _param1,
      out TimeSpan _param2)
    {
      bool flag = _param0.get_Item(_param1) == '-';
      int num1;
      if (\u003594264013390.\u003011807937998(_param0.\u003011921092234, _param1 + 1, 2, out num1) != \u003574970756994.Success)
      {
        _param2 = new TimeSpan();
        return false;
      }
      int num2 = 0;
      if (_param0.\u003351124807798 - _param1 > 5 && \u003594264013390.\u003011807937998(_param0.\u003011921092234, _param1 + 3, 2, out num2) != \u003574970756994.Success)
      {
        _param2 = new TimeSpan();
        return false;
      }
      _param2 = TimeSpan.FromHours((double) num1) + TimeSpan.FromMinutes((double) num2);
      if (flag)
        _param2 = _param2.Negate();
      return true;
    }

    internal static void \u003781367547111(
      TextWriter _param0,
      DateTime _param1,
      \u003015461100840 _param2,
      string _param3,
      CultureInfo _param4)
    {
      if (string.IsNullOrEmpty(_param3))
      {
        char[] buffer = new char[64];
        int count = \u003519131386819.\u003012741661204(buffer, 0, _param1, new TimeSpan?(), _param1.Kind, _param2);
        _param0.Write(buffer, 0, count);
      }
      else
        _param0.Write(_param1.ToString(_param3, (IFormatProvider) _param4));
    }

    internal static int \u003012741661204(
      char[] _param0,
      int _param1,
      DateTime _param2,
      TimeSpan? _param3,
      DateTimeKind _param4,
      \u003015461100840 _param5)
    {
      int destinationIndex1 = _param1;
      int num1;
      if (_param5 == \u003015461100840.MicrosoftDateFormat)
      {
        TimeSpan timeSpan = _param3 ?? _param2.\u003241040132074();
        long num2 = \u003519131386819.\u003085341948674(_param2, timeSpan);
        "\\/Date(".CopyTo(0, _param0, destinationIndex1, 7);
        int destinationIndex2 = destinationIndex1 + 7;
        string str = num2.ToString((IFormatProvider) CultureInfo.InvariantCulture);
        str.CopyTo(0, _param0, destinationIndex2, str.Length);
        int destinationIndex3 = destinationIndex2 + str.Length;
        switch (_param4)
        {
          case DateTimeKind.Unspecified:
            if (_param2 != DateTime.MaxValue && _param2 != DateTime.MinValue)
            {
              destinationIndex3 = \u003519131386819.\u003322410929394(_param0, destinationIndex3, timeSpan, _param5);
              break;
            }
            break;
          case DateTimeKind.Local:
            destinationIndex3 = \u003519131386819.\u003322410929394(_param0, destinationIndex3, timeSpan, _param5);
            break;
        }
        ")\\/".CopyTo(0, _param0, destinationIndex3, 3);
        num1 = destinationIndex3 + 3;
      }
      else
      {
        num1 = \u003519131386819.\u003191879066979(_param0, destinationIndex1, _param2);
        switch (_param4)
        {
          case DateTimeKind.Utc:
            _param0[num1++] = 'Z';
            break;
          case DateTimeKind.Local:
            num1 = \u003519131386819.\u003322410929394(_param0, num1, _param3 ?? _param2.\u003241040132074(), _param5);
            break;
        }
      }
      return num1;
    }

    internal static int \u003191879066979(char[] _param0, int _param1, DateTime _param2)
    {
      int num1 = 19;
      int num2;
      int num3;
      int num4;
      \u003519131386819.\u003215196512763(_param2, out num2, out num3, out num4);
      \u003519131386819.\u003002183317449(_param0, _param1, num2, 4);
      _param0[_param1 + 4] = '-';
      \u003519131386819.\u003002183317449(_param0, _param1 + 5, num3, 2);
      _param0[_param1 + 7] = '-';
      \u003519131386819.\u003002183317449(_param0, _param1 + 8, num4, 2);
      _param0[_param1 + 10] = 'T';
      \u003519131386819.\u003002183317449(_param0, _param1 + 11, _param2.Hour, 2);
      _param0[_param1 + 13] = ':';
      \u003519131386819.\u003002183317449(_param0, _param1 + 14, _param2.Minute, 2);
      _param0[_param1 + 16] = ':';
      \u003519131386819.\u003002183317449(_param0, _param1 + 17, _param2.Second, 2);
      int num5 = (int) (_param2.Ticks % 10000000L);
      if (num5 != 0)
      {
        int num6 = 7;
        for (; num5 % 10 == 0; num5 /= 10)
          --num6;
        _param0[_param1 + 19] = '.';
        \u003519131386819.\u003002183317449(_param0, _param1 + 20, num5, num6);
        num1 += num6 + 1;
      }
      return _param1 + num1;
    }

    private static void \u003002183317449(char[] _param0, int _param1, int _param2, int _param3)
    {
      while (_param3-- != 0)
      {
        _param0[_param1 + _param3] = (char) (_param2 % 10 + 48);
        _param2 /= 10;
      }
    }

    internal static int \u003322410929394(
      char[] _param0,
      int _param1,
      TimeSpan _param2,
      \u003015461100840 _param3)
    {
      _param0[_param1++] = _param2.Ticks >= 0L ? '+' : '-';
      int num1 = Math.Abs(_param2.Hours);
      \u003519131386819.\u003002183317449(_param0, _param1, num1, 2);
      _param1 += 2;
      if (_param3 == \u003015461100840.IsoDateFormat)
        _param0[_param1++] = ':';
      int num2 = Math.Abs(_param2.Minutes);
      \u003519131386819.\u003002183317449(_param0, _param1, num2, 2);
      _param1 += 2;
      return _param1;
    }

    internal static void \u003210217066356(
      TextWriter _param0,
      DateTimeOffset _param1,
      \u003015461100840 _param2,
      string _param3,
      CultureInfo _param4)
    {
      if (string.IsNullOrEmpty(_param3))
      {
        char[] buffer = new char[64];
        int count = \u003519131386819.\u003012741661204(buffer, 0, _param2 == \u003015461100840.IsoDateFormat ? _param1.DateTime : _param1.UtcDateTime, new TimeSpan?(_param1.Offset), DateTimeKind.Local, _param2);
        _param0.Write(buffer, 0, count);
      }
      else
        _param0.Write(_param1.ToString(_param3, (IFormatProvider) _param4));
    }

    private static void \u003215196512763(
      DateTime _param0,
      out int _param1,
      out int _param2,
      out int _param3)
    {
      int num1 = (int) (_param0.Ticks / 864000000000L);
      int num2 = num1 / 146097;
      int num3 = num1 - num2 * 146097;
      int num4 = num3 / 36524;
      if (num4 == 4)
        num4 = 3;
      int num5 = num3 - num4 * 36524;
      int num6 = num5 / 1461;
      int num7 = num5 - num6 * 1461;
      int num8 = num7 / 365;
      if (num8 == 4)
        num8 = 3;
      _param1 = num2 * 400 + num4 * 100 + num6 * 4 + num8 + 1;
      int num9 = num7 - num8 * 365;
      int[] numArray = (num8 != 3 ? 0 : (num6 != 24 ? 1 : (num4 == 3 ? 1 : 0))) != 0 ? \u003519131386819.\u003203622100924 : \u003519131386819.\u003714874330432;
      int index = num9 >> 6;
      while (num9 >= numArray[index])
        ++index;
      _param2 = index;
      _param3 = num9 - numArray[index - 1] + 1;
    }
  }
}
