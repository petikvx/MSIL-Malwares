// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Sdevmxl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F0B5D56E-2738-4851-005E-7CC3B980D8C1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-48b6f61e37bef66ece1cb50e0c137e2a6d8aef5a2828b910497332377e982a03.exe

using System;
using System.IO;
using System.Security.Cryptography;

internal sealed class \u0003\u2006 : Stream
{
  private int \u0002;
  private int \u0003;
  private int \u0005;
  private Stream \u0008;
  private \u0006 \u0006;
  private int \u000E;
  private bool \u000F;
  private bool \u0002\u2000;
  private bool \u0003\u2000;
  private byte[] \u0005\u2000;
  private int \u0008\u2000;
  private byte[] \u0006\u2000;
  private int \u000E\u2000;
  private int \u000F\u2000;
  private int \u0002\u2001;
  private bool \u0003\u2001;

  public \u0003\u2006(Stream _param1, \u0006 _param2)
  {
    if (_param1 == null)
      throw new ArgumentNullException(\u0008\u2008\u2000.\u0002(-1247409399));
    if (_param2 == null)
      throw new ArgumentNullException(\u0008\u2008\u2000.\u0002(-1247409716));
    Stream stream = _param1;
    if (true)
      goto label_7;
label_5:
    \u0006 obj = _param2;
    if (true)
      goto label_8;
label_6:
    if (this.\u0008.Length < 4L)
      throw new InvalidOperationException();
    if (false)
      return;
    this.\u0002();
    return;
label_8:
    this.\u0006 = obj;
    goto label_6;
label_7:
    this.\u0008 = stream;
    goto label_5;
  }

  private void \u0002()
  {
    int num1 = this.\u0006.\u0006\u2006\u2007​\u2008\u0002();
    if (true)
      goto label_4;
label_1:
    byte[] numArray = new byte[this.\u0008\u2000];
    if (true)
      goto label_5;
label_2:
    int num2 = this.\u0006.\u0006\u2006\u2007​\u2008\u0003();
    if (true)
      goto label_6;
label_3:
    this.\u0006\u2000 = new byte[this.\u0002\u2001];
    return;
label_6:
    this.\u0002\u2001 = num2;
    goto label_3;
label_5:
    this.\u0005\u2000 = numArray;
    goto label_2;
label_4:
    this.\u0008\u2000 = num1;
    goto label_1;
  }

  public override bool CanRead => true;

  public override bool CanSeek => true;

  public override bool CanWrite => false;

  public override long Length
  {
    get
    {
      if (true)
        goto label_2;
label_1:
      return (long) this.\u0002;
label_2:
      this.\u0008();
      goto label_1;
    }
  }

  public override long Position
  {
    get
    {
      if (true)
        ;
      int num1 = this.\u000E;
      if (true)
        ;
      int num2 = this.\u0002\u2001;
      int num3 = num1 * num2;
      if (true)
        ;
      int num4 = this.\u000F\u2000;
      return (long) (num3 + num4);
    }
    set
    {
      int num1 = (int) value / this.\u0002\u2001;
      if (true)
        goto label_4;
label_1:
      int num2 = (int) value % this.\u0002\u2001;
      if (true)
        goto label_5;
label_2:
      int num3;
      if (this.\u000E == num3)
        return;
      int num4 = num3;
      if (true)
        goto label_8;
label_7:
      this.\u0003\u2000 = true;
      this.\u000F = false;
      return;
label_8:
      this.\u000E = num4;
      goto label_7;
label_5:
      this.\u000F\u2000 = num2;
      goto label_2;
label_4:
      num3 = num1;
      goto label_1;
    }
  }

  public override long Seek(long _param1, SeekOrigin _param2)
  {
    int num1 = (int) _param2;
    if (true)
      ;
    switch (num1)
    {
      case 0:
        if (true)
          ;
        long num2 = _param1;
        if (true)
          ;
        this.Position = num2;
        break;
      case 1:
        this.Position += _param1;
        break;
      case 2:
        this.Position = this.Length + _param1;
        break;
    }
    return this.Position;
  }

  public override void SetLength(long _param1) => throw new NotSupportedException();

  public override int Read(byte[] _param1, int _param2, int _param3)
  {
    if (_param2 < 0)
      throw new ArgumentOutOfRangeException(\u0008\u2008\u2000.\u0002(-1247409732));
    if (_param3 < 0)
      throw new ArgumentOutOfRangeException(\u0008\u2008\u2000.\u0002(-1247409751));
    if (_param1.Length - _param2 < _param3)
      throw new ArgumentException();
    if (_param3 == 0)
      return 0;
    int num1 = _param3;
    if (true)
      goto label_11;
label_9:
    int num2 = _param2;
    if (true)
      goto label_12;
label_10:
    int count1;
    int dstOffset;
    if (this.\u000F\u2000 < this.\u0002\u2001)
    {
      if (true)
        goto label_16;
label_14:
      int num3 = this.\u000E\u2000 - this.\u000F\u2000;
      if (true)
        goto label_17;
label_15:
      int count2;
      if (count2 <= _param3)
      {
        Buffer.BlockCopy((Array) this.\u0006\u2000, this.\u000F\u2000, (Array) _param1, _param2, count2);
        this.\u000F\u2000 = this.\u000E\u2000;
        if (this.\u0002\u2000)
          return count2;
        count1 -= count2;
        dstOffset += count2;
        goto label_22;
      }
      else
      {
        Buffer.BlockCopy((Array) this.\u0006\u2000, this.\u000F\u2000, (Array) _param1, _param2, _param3);
        this.\u000F\u2000 += _param3;
        return _param3;
      }
label_17:
      count2 = num3;
      goto label_15;
label_16:
      this.\u0003();
      goto label_14;
    }
label_22:
    if (this.\u0002\u2000)
      return _param3 - count1;
    while (count1 > 0)
    {
      this.\u0005();
      if (this.\u0002\u2000)
        return _param3 - count1;
      int count3 = this.\u000E\u2000;
      if (count1 >= count3)
      {
        Buffer.BlockCopy((Array) this.\u0006\u2000, 0, (Array) _param1, dstOffset, count3);
        dstOffset += count3;
        count1 -= count3;
        this.\u000F\u2000 = count3;
      }
      else
      {
        Buffer.BlockCopy((Array) this.\u0006\u2000, 0, (Array) _param1, dstOffset, count1);
        this.\u000F\u2000 = count1;
        return _param3;
      }
    }
    return _param3;
label_12:
    dstOffset = num2;
    goto label_10;
label_11:
    count1 = num1;
    goto label_9;
  }

  private void \u0003()
  {
    if (true)
      goto label_2;
label_1:
    if (this.\u000F)
      return;
    if (true)
      goto label_7;
label_4:
    if (true)
      goto label_8;
label_5:
    int num = this.\u000E;
    if (this.\u0003\u2000)
    {
      this.\u0008.Position = (long) (4 + num * this.\u0008\u2000);
      this.\u0003\u2000 = false;
    }
    this.\u0002(num);
    return;
label_8:
    this.\u0002\u2000 = false;
    goto label_5;
label_7:
    this.\u000F = true;
    goto label_4;
label_2:
    this.\u0008();
    goto label_1;
  }

  private void \u0005()
  {
    int num1 = this.\u000E + 1;
    if (true)
      goto label_2;
label_1:
    int num2;
    if (this.\u0002(num2))
    {
      int num3 = num2;
      if (true)
        goto label_5;
label_4:
      if (true)
      {
        this.\u000F\u2000 = 0;
        goto label_7;
      }
      else
        goto label_7;
label_5:
      this.\u000E = num3;
      goto label_4;
    }
label_7:
    this.\u000F = true;
    return;
label_2:
    num2 = num1;
    goto label_1;
  }

  private bool \u0002(int _param1)
  {
    int offset;
    if (true)
      offset = 0;
    int num1;
    for (; offset < this.\u0008\u2000; offset += num1)
    {
      int num2 = this.\u0008.Read(this.\u0005\u2000, offset, this.\u0008\u2000 - offset);
      if (true)
        goto label_4;
label_3:
      if (num1 == 0)
      {
        if (offset != 0)
          throw new InvalidOperationException();
        if (true)
          goto label_9;
label_8:
        return false;
label_9:
        this.\u0002\u2000 = true;
        goto label_8;
      }
      else
        continue;
label_4:
      num1 = num2;
      goto label_3;
    }
    this.\u000E\u2000 = this.\u0006.\u0006\u2006\u2007​\u2008\u0002(this.\u0005\u2000, 0, this.\u0008\u2000, this.\u0006\u2000, 0, (RandomNumberGenerator) null);
    if (_param1 == this.\u0003)
      this.\u000E\u2000 = this.\u0005;
    return true;
  }

  private void \u0008()
  {
    if (this.\u0003\u2001)
      return;
    if (this.\u0008.Position != 0L)
    {
      this.\u0008.Position = 0L;
      if (true)
        this.\u0003\u2000 = true;
    }
    \u0002\u2000\u2000 obj1 = \u0003\u2006.\u0002(this.\u0008);
    if (true)
      goto label_7;
label_5:
    \u0002\u2000\u2000 obj2;
    int num = obj2.\u0002;
    if (true)
      goto label_8;
label_6:
    this.\u0003 = this.\u0002 / this.\u0002\u2001;
    this.\u0005 = this.\u0002 % this.\u0002\u2001;
    this.\u0003\u2001 = true;
    return;
label_8:
    this.\u0002 = num;
    goto label_6;
label_7:
    obj2 = obj1;
    goto label_5;
  }

  private static \u0002\u2000\u2000 \u0002(Stream _param0)
  {
    \u0002​ obj1 = new \u0002​(_param0, 0);
    \u0002​ obj2;
    if (true)
      obj2 = obj1;
    \u0002\u2000\u2000 obj3;
    try
    {
      \u0008\u2002 obj4 = new \u0008\u2002((\u0005\u2004) obj2);
      \u0008\u2002 obj5;
      if (true)
        obj5 = obj4;
      try
      {
        \u0002\u2000\u2000 obj6 = new \u0002\u2000\u2000(obj5.\u0006());
        if (true)
          obj3 = obj6;
      }
      finally
      {
        ((IDisposable) obj5).Dispose();
      }
    }
    finally
    {
      obj2.Dispose();
    }
    return obj3;
  }

  public override void Flush()
  {
  }

  public override void Write(byte[] _param1, int _param2, int _param3) => throw new NotSupportedException();
}
