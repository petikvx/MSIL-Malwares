// Decompiled with JetBrains decompiler
// Type: Autodesk.ExpressTools.AliasEdit.BnsStr
// Assembly: alias, Version=18.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 30B32B4B-BB59-4BDE-A34F-3A89FA31757D
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Virus.Win32.Qvod.b-ac27f4b9ea6bdc870c5c3930c4f29eda3be51969560d72a79a191f4f50597cfb.exe

using Autodesk.ExpressTools.AliasEdit.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Autodesk.ExpressTools.AliasEdit
{
  [StandardModule]
  internal sealed class BnsStr
  {
    public const short MAX_DEFAULTCHAR = 2;
    public const short MAX_LEADBYTES = 12;
    public const short REMOTE_NAME_INFO_LEVEL = 2;
    public const short UNIVERSAL_NAME_INFO_LEVEL = 1;
    private const short ERROR_BAD_DEVICE = 1200;
    private const short ERROR_CONNECTION_UNAVAIL = 1201;
    private const short ERROR_EXTENDED_ERROR = 1208;
    private const short ERROR_MORE_DATA = 234;
    private const short ERROR_NOT_SUPPORTED = 50;
    private const short ERROR_NO_NET_OR_BAD_PATH = 1203;
    private const short ERROR_NO_NETWORK = 1222;
    private const short ERROR_NOT_CONNECTED = 2250;
    private const short NO_ERROR = 0;
    private const short DRIVE_REMOTE = 4;
    private static string[] LocalShares;
    public static bool LocalShareInit;
    private static string[] RemoteDrives;
    public static bool RemoteDrivesInit;
    private const int SHARD_PATH = 2;
    private const short CSIDL_RECENT = 8;

    [DllImport("kernel32", EntryPoint = "GetFullPathNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetFullPathName(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName,
      int nBufferLength,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBuffer,
      ref int lpFilePart);

    [DllImport("kernel32", EntryPoint = "GetTempFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetTempFileName(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszPath,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpPrefixString,
      int wUnique,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpTempFileName);

    [DllImport("kernel32", EntryPoint = "ExpandEnvironmentStringsA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int ExpandEnvironmentStrings(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSrc,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDst,
      int nSize);

    [DllImport("kernel32", EntryPoint = "GetPrivateProfileSectionA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetPrivateProfileSection(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpAppName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpReturnedString,
      int nSize,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName);

    [DllImport("kernel32", EntryPoint = "WritePrivateProfileSectionA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int WritePrivateProfileSection(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpAppName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName);

    [DllImport("kernel32", EntryPoint = "GetPrivateProfileStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetPrivateProfileString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpApplicationName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpKeyName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDefault,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpReturnedString,
      int nSize,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName);

    [DllImport("kernel32", EntryPoint = "WritePrivateProfileStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int WritePrivateProfileString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpApplicationName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpKeyName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetTickCount();

    [DllImport("kernel32", EntryPoint = "GetTempPathA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetTempPath(int nBufferLength, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBuffer);

    [DllImport("kernel32", EntryPoint = "GetDriveTypeA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetDriveType([MarshalAs(UnmanagedType.VBByRefStr)] ref string nDrive);

    [DllImport("kernel32", EntryPoint = "GetLogicalDriveStringsA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetLogicalDriveStrings(int nBufferLength, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBuffer);

    [DllImport("mpr.dll", EntryPoint = "WNetGetConnectionA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int WNetGetConnection(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszLocalName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszRemoteName,
      ref int cbRemoteName);

    [DllImport("mpr.dll", EntryPoint = "WNetGetUniversalNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int WNetGetUniversalName(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpLocalPath,
      int dwInfoLevel,
      ref object lpBuffer,
      ref int lpBufferSize);

    [DllImport("apigid32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern void agCopyData(ref object Source, ref object dest, int nCount);

    [DllImport("apigid32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern string agGetStringFromLPSTR([MarshalAs(UnmanagedType.VBByRefStr)] ref string src);

    [DllImport("apigid32.dll", EntryPoint = "agGetStringFromLPSTR", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern string agGetStringFromPointer(int ptr);

    [DllImport("apigid32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int agGetAddressForObject(ref object object_Renamed);

    [DllImport("shell32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHAddToRecentDocs(int flags, [MarshalAs(UnmanagedType.VBByRefStr)] ref string Data);

    [DllImport("shell32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHGetSpecialFolderLocation(int hwndOwner, int nFolder, ref int pidl);

    [DllImport("shell32.dll", EntryPoint = "SHGetPathFromIDListA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHGetPathFromIDList(int pidl, [MarshalAs(UnmanagedType.VBByRefStr)] ref string pszPath);

    [DllImport("kernel32", EntryPoint = "GetCommandLineA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetCommandLineAPI();

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetOEMCP();

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetCPInfo(int CodePage, ref BnsStr.CPINFO lpCPInfo);

    public static bool Is2ByteSystem()
    {
      BnsStr.CPINFO lpCPInfo = new BnsStr.CPINFO();
      BnsStr.GetCPInfo(BnsStr.GetOEMCP(), ref lpCPInfo);
      bool flag;
      if (lpCPInfo.MaxCharSize > 1)
        flag = true;
      return flag;
    }

    public static string WhatsMyName()
    {
      string[] str_Renamed = new string[1];
      string stringFromPointer = BnsStr.agGetStringFromPointer(BnsStr.GetCommandLineAPI());
      return Conversions.ToInteger(BnsStr.acetParseCmdLine(ref stringFromPointer, ref str_Renamed)) < 0 ? "" : str_Renamed[0];
    }

    public static bool IsDirectory(ref string fna)
    {
label_0:
      int num1;
      bool flag1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        fna = BnsStr.sStrip(fna);
label_2:
        num3 = 3;
        if (Operators.CompareString(fna, "", false) == 0)
          goto label_10;
label_3:
        num3 = 4;
        ref string local1 = ref fna;
        string str_Renamed1 = fna;
        string str1 = "\\.";
        ref string local2 = ref str1;
        string str2 = BnsStr.RightStrip(str_Renamed1, ref local2);
        local1 = str2;
label_4:
        num3 = 5;
        ref string local3 = ref fna;
        string str_Renamed2 = fna;
        string str3 = "\\";
        ref string local4 = ref str3;
        string str4 = BnsStr.RightStrip(str_Renamed2, ref local4);
        local3 = str4;
label_5:
        num3 = 6;
        fna = BnsStr.bnsGetFullPathName(ref fna);
label_6:
        num3 = 7;
        fna = BnsStr.FindFile(fna, ".");
label_7:
        num3 = 8;
        if (Operators.CompareString(fna, "", false) == 0)
          goto label_10;
label_8:
        num3 = 9;
        if ((FileSystem.GetAttr(fna) & FileAttribute.Directory) == 0)
          goto label_10;
label_9:
        num3 = 10;
        bool flag2 = true;
label_10:
        flag1 = flag2;
        goto label_17;
label_12:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
              case 12:
              case 13:
              case 14:
                goto label_10;
              case 15:
                goto label_17;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_12;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_17:
      int num5 = flag1 ? 1 : 0;
      if (num2 == 0)
        return num5 != 0;
      ProjectData.ClearProjectError();
      return num5 != 0;
    }

    public static string strAddExt(string fna, ref string ext)
    {
      fna = BnsStr.sStrip(fna);
      if (Operators.CompareString(fna, "", false) != 0)
      {
        string fileExt = BnsStr.GetFileExt(ref fna);
        if (!BnsStr.strEqual(ref fileExt, ref ext))
          fna += ext;
      }
      return fna;
    }

    public static bool AddFileToRecentDocuments(ref string fna)
    {
      bool recentDocuments;
      if (BnsStr.SHAddToRecentDocs(2, ref fna) != 0)
        recentDocuments = true;
      return recentDocuments;
    }

    public static bool IsSameFile(string fna, string fna2)
    {
      bool flag1;
      if (Strings.Len(fna) > 0 & Strings.Len(fna2) > 0)
      {
        fna = BnsStr.bnsGetFullPathName(ref fna);
        fna2 = BnsStr.bnsGetFullPathName(ref fna2);
        if (BnsStr.strEqual(ref fna, ref fna2))
          flag1 = true;
        else if (Strings.InStr(1, fna, "\\") != 0 & Strings.InStr(1, fna2, "\\") != 0)
        {
          ref string local1 = ref fna;
          bool flag2 = false;
          ref bool local2 = ref flag2;
          string str1 = BnsStr.UncName(ref local1, ref local2);
          ref string local3 = ref str1;
          ref string local4 = ref fna2;
          bool flag3 = false;
          ref bool local5 = ref flag3;
          string str2 = BnsStr.UncName(ref local4, ref local5);
          ref string local6 = ref str2;
          if (BnsStr.strEqual(ref local3, ref local6))
            flag1 = true;
        }
      }
      return flag1;
    }

    public static string UncName(ref string lpLocalPath, ref bool refresh = false) => lpLocalPath;

    public static string UNCtoLocalName(ref string unc, ref bool refresh = false) => unc;

    public static int GetRemoteDrives(ref string[] rd)
    {
      int index1 = 0;
      int num1 = 110;
      string lpBuffer = Strings.Space(num1);
      int logicalDriveStrings = BnsStr.GetLogicalDriveStrings(num1, ref lpBuffer);
      string[] strresult = new string[1];
      if (logicalDriveStrings > 0)
      {
        string strmain = Strings.Left(lpBuffer, logicalDriveStrings);
        string delim = "\0";
        int num2 = BnsStr.StrDelim(ref delim, ref strmain, ref strresult);
        if (num2 >= 0)
        {
          rd = new string[checked (num2 + 1)];
          int num3 = num2;
          int index2 = 0;
          while (index2 <= num3)
          {
            if (BnsStr.IsNetDrive((object) strresult[index2]))
            {
              string str1 = BnsStr.strAddBackSlash(strresult[index2]);
              ref string local1 = ref strresult[index2];
              delim = "";
              ref string local2 = ref delim;
              string Left = BnsStr.Drive2UNC(ref local1, ref local2);
              if (Operators.CompareString(Left, "", false) != 0)
              {
                string str2 = Strings.UCase(str1);
                string str3 = Strings.UCase(Left);
                rd[index1] = str2;
                rd[index1] = str3;
                checked { ++index1; }
              }
            }
            checked { ++index2; }
          }
          if (index1 > 0)
            rd = (string[]) Utils.CopyArray((Array) rd, (Array) new string[checked (index1 - 1 + 1)]);
        }
      }
      return checked (index1 - 1);
    }

    public static bool IsNetDrive(object str_Renamed)
    {
label_0:
      int num1;
      bool flag1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        bool flag2 = false;
label_2:
        num3 = 3;
        str_Renamed = (object) BnsStr.strRemoveBackSlash(Conversions.ToString(str_Renamed));
label_3:
        num3 = 4;
        string nDrive = Conversions.ToString(str_Renamed);
        int driveType = BnsStr.GetDriveType(ref nDrive);
label_4:
        num3 = 5;
        if (driveType != 4)
          goto label_6;
label_5:
        num3 = 6;
        flag2 = true;
label_6:
        flag1 = flag2;
        goto label_13;
label_8:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 8:
                goto label_6;
              case 9:
                goto label_13;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      int num5 = flag1 ? 1 : 0;
      if (num2 == 0)
        return num5 != 0;
      ProjectData.ClearProjectError();
      return num5 != 0;
    }

    public static string Drive2UNC(ref string strDriveLetter, ref string msg = "")
    {
label_0:
      int num1;
      string str1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
label_1:
        int num3 = 2;
        string lpszLocalName = BnsStr.strRemoveBackSlash(strDriveLetter);
label_2:
        num3 = 3;
        string lpszRemoteName = new string(' ', (int) byte.MaxValue);
label_3:
        num3 = 4;
        int cbRemoteName = Strings.Len(lpszRemoteName);
label_4:
        num3 = 5;
        int connection = BnsStr.WNetGetConnection(ref lpszLocalName, ref lpszRemoteName, ref cbRemoteName);
label_5:
        num3 = 6;
        int num4 = connection;
label_6:
        num3 = 9;
        if (num4 != 1200)
          goto label_8;
label_7:
        num3 = 10;
        msg += "Error: Bad Device";
        goto label_23;
label_8:
        num3 = 12;
        if (num4 != 1201)
          goto label_10;
label_9:
        num3 = 13;
        msg += "Error: Connection Un-Available";
        goto label_23;
label_10:
        num3 = 15;
        if (num4 != 1208)
          goto label_12;
label_11:
        num3 = 16;
        msg += "Error: Extended Error";
        goto label_23;
label_12:
        num3 = 18;
        if (num4 != 234)
          goto label_14;
label_13:
        num3 = 19;
        msg += "Error: More Data";
        goto label_23;
label_14:
        num3 = 21;
        if (num4 != 50)
          goto label_16;
label_15:
        num3 = 22;
        msg += "Error: Feature not Supported";
        goto label_23;
label_16:
        num3 = 24;
        if (num4 != 1203)
          goto label_18;
label_17:
        num3 = 25;
        msg += "Error: No Network Available or Bad Path";
        goto label_23;
label_18:
        num3 = 27;
        if (num4 != 1222)
          goto label_20;
label_19:
        num3 = 28;
        msg += "Error: No Network Available";
        goto label_23;
label_20:
        num3 = 30;
        if (num4 != 2250)
          goto label_22;
label_21:
        num3 = 31;
        msg += "Error: Not Connected";
        goto label_23;
label_22:
        num3 = 33;
        if (num4 != 0)
          ;
label_23:
        num3 = 35;
        if (Strings.Len(msg) == 0)
          goto label_25;
label_24:
        num3 = 36;
        str1 = "";
        goto label_39;
label_25:
        num3 = 38;
label_26:
        num3 = 39;
        string str_Renamed = Strings.Left(lpszRemoteName, cbRemoteName);
label_27:
        num3 = 40;
        str_Renamed = BnsStr.StripNullString(ref str_Renamed);
label_28:
        num3 = 41;
        str1 = BnsStr.strAddBackSlash(str_Renamed);
        goto label_39;
label_34:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 11:
              case 14:
              case 17:
              case 20:
              case 23:
              case 26:
              case 29:
              case 32:
              case 34:
              case 35:
                goto label_23;
              case 8:
              case 9:
                goto label_6;
              case 10:
                goto label_7;
              case 12:
                goto label_8;
              case 13:
                goto label_9;
              case 15:
                goto label_10;
              case 16:
                goto label_11;
              case 18:
                goto label_12;
              case 19:
                goto label_13;
              case 21:
                goto label_14;
              case 22:
                goto label_15;
              case 24:
                goto label_16;
              case 25:
                goto label_17;
              case 27:
                goto label_18;
              case 28:
                goto label_19;
              case 30:
                goto label_20;
              case 31:
                goto label_21;
              case 33:
                goto label_22;
              case 36:
                goto label_24;
              case 37:
              case 42:
              case 43:
              case 46:
              case 47:
                goto label_39;
              case 38:
                goto label_25;
              case 39:
                goto label_26;
              case 40:
                goto label_27;
              case 41:
                goto label_28;
              case 44:
                goto label_29;
              case 45:
                break;
              default:
                goto label_38;
            }
            break;
          case 2:
label_29:
            num3 = 44;
            int num6 = (int) Interaction.MsgBox((object) ("error trap: " + Information.Err().Description), MsgBoxStyle.Information);
            break;
          default:
            goto label_38;
        }
        num3 = 45;
        ProjectData.ClearProjectError();
        num2 = num2 != 0 ? 0 : throw ProjectData.CreateProjectError(-2146828268);
        goto label_39;
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_34;
      }
label_38:
      throw ProjectData.CreateProjectError(-2146828237);
label_39:
      string str2 = str1;
      if (num2 == 0)
        return str2;
      ProjectData.ClearProjectError();
      return str2;
    }

    public static bool FileDelete(string fna)
    {
label_0:
      int num1;
      bool flag1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        bool flag2 = false;
label_2:
        num3 = 3;
        fna = BnsStr.FindFile(fna, ".");
label_3:
        num3 = 4;
        if (Operators.CompareString(fna, "", false) == 0)
          goto label_8;
label_4:
        num3 = 5;
        BnsStr.AttrMinus(fna, (object) FileAttribute.ReadOnly, (object) FileAttribute.Hidden, (object) FileAttribute.System);
label_5:
        num3 = 6;
        FileSystem.Kill(fna);
label_6:
        num3 = 7;
        if (Operators.CompareString(BnsStr.FindFile(fna, "."), "", false) != 0)
          goto label_8;
label_7:
        num3 = 8;
        flag2 = true;
label_8:
        flag1 = flag2;
        goto label_15;
label_10:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
              case 10:
              case 11:
                goto label_8;
              case 12:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      int num5 = flag1 ? 1 : 0;
      if (num2 == 0)
        return num5 != 0;
      ProjectData.ClearProjectError();
      return num5 != 0;
    }

    public static bool AttrPlus(string fna, params object[] att)
    {
      int num1;
      bool flag1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        bool flag2 = false;
        int num3 = Information.UBound((Array) att);
        fna = BnsStr.FindFile(fna, ".");
        if (num3 >= 0 & Operators.CompareString(fna, "", false) != 0)
        {
          int attr = (int) FileSystem.GetAttr(fna);
          int num4 = attr;
          int num5 = num3;
          int index = 0;
          while (index <= num5)
          {
            int integer = Conversions.ToInteger(att[index]);
            if ((~attr & integer) != 0)
              checked { attr += integer; }
            checked { ++index; }
          }
          if (num4 != attr)
          {
            FileSystem.SetAttr(fna, (FileAttribute) attr);
            flag2 = true;
          }
        }
        flag1 = flag2;
        goto label_15;
label_10:
        num2 = -1;
        switch (num1)
        {
          case 2:
            Information.Err().Clear();
            flag1 = false;
            goto label_15;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      int num6 = flag1 ? 1 : 0;
      if (num2 == 0)
        return num6 != 0;
      ProjectData.ClearProjectError();
      return num6 != 0;
    }

    public static bool AttrMinus(string fna, params object[] att)
    {
      int num1;
      bool flag1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        bool flag2 = false;
        int num3 = Information.UBound((Array) att);
        fna = BnsStr.FindFile(fna, ".");
        if (num3 >= 0 & Operators.CompareString(fna, "", false) != 0)
        {
          int attr = (int) FileSystem.GetAttr(fna);
          int num4 = attr;
          int num5 = num3;
          int index = 0;
          while (index <= num5)
          {
            int integer = Conversions.ToInteger(att[index]);
            if ((attr & integer) != 0)
              checked { attr -= integer; }
            checked { ++index; }
          }
          if (num4 != attr)
          {
            FileSystem.SetAttr(fna, (FileAttribute) attr);
            flag2 = true;
          }
        }
        flag1 = flag2;
        goto label_15;
label_10:
        num2 = -1;
        switch (num1)
        {
          case 2:
            Information.Err().Clear();
            flag1 = false;
            goto label_15;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      int num6 = flag1 ? 1 : 0;
      if (num2 == 0)
        return num6 != 0;
      ProjectData.ClearProjectError();
      return num6 != 0;
    }

    public static object strNL() => (object) "\r\n";

    public static string strAddBackSlash(string str_Renamed)
    {
      if (Operators.CompareString(str_Renamed, "", false) != 0 && Operators.CompareString(Strings.Right(str_Renamed, 1), "\\", false) != 0)
        str_Renamed += "\\";
      return str_Renamed;
    }

    public static string strRemoveBackSlash(string str_Renamed)
    {
      if (Operators.CompareString(str_Renamed, "", false) != 0 && Operators.CompareString(Strings.Right(str_Renamed, 1), "\\", false) == 0)
        str_Renamed = Strings.Left(str_Renamed, checked (Strings.Len(str_Renamed) - 1));
      return str_Renamed;
    }

    public static string GenerateTempFileName(ref string path = "", ref string prefix = "", ref string ext = ".tmp")
    {
      if (Operators.CompareString(path, "", false) != 0)
      {
        path = BnsStr.FindFile(path, ".");
        path = BnsStr.strAddBackSlash(path);
      }
      if (Operators.CompareString(path, "", false) == 0)
        path = BnsStr.WinTempDir();
      if (Operators.CompareString(ext, "", false) == 0)
        ext = ".tmp";
      if (Operators.CompareString(Strings.Left(ext, 1), ".", false) != 0)
        ext = "." + ext;
      int num1 = 0;
      string fna;
      do
      {
        int num2 = checked (BnsStr.GetTickCount() + num1);
        checked { ++num1; }
        string str1 = Strings.Right(Conversions.ToString(num2), 2);
        int CharCode = Conversions.ToInteger(Strings.Right(Conversions.ToString(num2), 2));
        while (CharCode < 65 | CharCode > 90)
          CharCode = CharCode >= 65 ? checked ((int) Math.Round(unchecked ((double) CharCode * 0.75))) : checked ((int) Math.Round(unchecked ((double) CharCode * 2.0 + 1.0)));
        string str2 = Conversions.ToString(Strings.Chr(CharCode)) + Conversion.Hex(Conversions.ToInteger(Strings.Right(Conversions.ToString(checked ((int) Math.Round(unchecked ((double) num2 / 3.0)))), 2)));
        fna = path + prefix + str2 + str1 + ext;
      }
      while (!(Operators.CompareString(BnsStr.FindFile(fna, "."), "", false) == 0 | num1 > 100));
      return fna;
    }

    public static string WinTempDir()
    {
      int num = 256;
      string lpBuffer = Strings.Space(num);
      int tempPath = BnsStr.GetTempPath(num, ref lpBuffer);
      return tempPath <= 0 ? "" : BnsStr.strAddBackSlash(Strings.Left(lpBuffer, tempPath));
    }

    public static int DirArray(ref string spec, ref string[] str_Renamed, ref int attr = 0)
    {
      int num1;
      int num2;
      int num3;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        string filePath = BnsStr.GetFilePath(ref spec);
        int num4 = 100;
        str_Renamed = new string[checked (num4 + 1)];
        string Left = FileSystem.Dir(spec, (FileAttribute) attr);
        int index = 0;
        str_Renamed = (string[]) Utils.CopyArray((Array) str_Renamed, (Array) new string[checked (num4 + 1)]);
        while (Operators.CompareString(Left, "", false) != 0)
        {
          if (index > num4)
            checked { num4 += 100; }
          str_Renamed[index] = filePath + Left;
          Left = FileSystem.Dir();
          checked { ++index; }
        }
        str_Renamed = new string[1];
        str_Renamed = (string[]) Utils.CopyArray((Array) str_Renamed, (Array) new string[checked (index - 1 + 1)]);
        if (index > 0)
          ;
        num2 = checked (index - 1);
        goto label_13;
label_8:
        num3 = -1;
        switch (num1)
        {
          case 2:
            num2 = -1;
            goto label_13;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      int num5 = num2;
      if (num3 == 0)
        return num5;
      ProjectData.ClearProjectError();
      return num5;
    }

    public static string StrDoubleQuote(string str_Renamed)
    {
      if (Strings.Len(str_Renamed) > 0)
      {
        if (Operators.CompareString(Strings.Left(str_Renamed, 1), "\"", false) != 0)
          str_Renamed = "\"" + str_Renamed;
        if (Operators.CompareString(Strings.Right(str_Renamed, 1), "\"", false) != 0)
          str_Renamed += "\"";
      }
      return str_Renamed;
    }

    public static bool strEqual(ref string str_Renamed, ref string str2) => Operators.CompareString(Strings.UCase(str_Renamed), Strings.UCase(str2), false) == 0;

    public static string strToTabDelim(ref string[] str_Renamed)
    {
      string tabDelim = str_Renamed[0];
      int num = Information.UBound((Array) str_Renamed);
      int index = 1;
      while (index <= num)
      {
        tabDelim = tabDelim + "\t" + str_Renamed[index];
        checked { ++index; }
      }
      return tabDelim;
    }

    public static int bnsDelay(ref int ticks)
    {
      int tickCount = BnsStr.GetTickCount();
      while (checked (BnsStr.GetTickCount() - tickCount) < ticks)
        Application.DoEvents();
      return ticks;
    }

    public static string StripNullString(ref string str_Renamed)
    {
      int Start = 1;
      string str = "";
      while (Start <= Strings.Len(str_Renamed))
      {
        string Left = Strings.Mid(str_Renamed, Start, 1);
        if (Operators.CompareString(Left, "\0", false) != 0)
          str += Left;
        else
          Start = checked (Strings.Len(str_Renamed) + 1);
        checked { ++Start; }
      }
      return str;
    }

    public static int Acet_get_ini_Sect(ref string fna, ref string sect, ref string[] sectdata)
    {
      int num1 = 2500;
      Strings.Space(num1);
      string lpReturnedString = Strings.Space(num1);
      int num2 = 50;
      sectdata = new string[checked (num2 + 1)];
      int Length = BnsStr.GetPrivateProfileSection(ref sect, ref lpReturnedString, num1, ref fna);
      if (Length > 0)
      {
        string str = Strings.Left(lpReturnedString, Length);
        Length = 0;
        string Left1 = "";
        int num3 = Strings.Len(str);
        int Start = 1;
        while (Start <= num3)
        {
          string Left2 = Strings.Mid(str, Start, 1);
          if (Operators.CompareString(Left2, "\0", false) == 0)
          {
            if (Length > num2)
            {
              checked { num2 += 50; }
              sectdata = (string[]) Utils.CopyArray((Array) sectdata, (Array) new string[checked (num2 + 1)]);
            }
            if (Operators.CompareString(Left1, "", false) != 0)
              sectdata[Length] = Left1;
            Left1 = "";
            checked { ++Length; }
          }
          else
            Left1 += Left2;
          checked { ++Start; }
        }
      }
      int iniSect;
      if (Length > 0)
      {
        iniSect = checked (Length - 1);
        sectdata = (string[]) Utils.CopyArray((Array) sectdata, (Array) new string[checked (iniSect + 1)]);
      }
      else
        iniSect = -1;
      return iniSect;
    }

    public static bool Acet_put_ini_sect(ref string fna, ref string sect, ref string[] sectdata)
    {
      string Left = "";
      int num = Information.UBound((Array) sectdata);
      int index = 0;
      while (index <= num)
      {
        Left = Operators.CompareString(Left, "", false) == 0 ? sectdata[index] : Left + "\0" + sectdata[index];
        checked { ++index; }
      }
      string lpString = Left + "\0\0";
      return BnsStr.WritePrivateProfileSection(ref sect, ref lpString, ref fna) != 0;
    }

    public static string FindFile(string fna, string path = "")
    {
      int num1;
      string str1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        fna = BnsStr.sStrip(fna);
        string str_Renamed1 = fna;
        string str2 = "\"";
        ref string local1 = ref str2;
        fna = BnsStr.RightStrip(str_Renamed1, ref local1);
        string str_Renamed2 = fna;
        string str3 = "\"";
        ref string local2 = ref str3;
        fna = BnsStr.LeftStrip(str_Renamed2, ref local2);
        str1 = "";
        if (Operators.CompareString(fna, "", false) != 0)
        {
          int Attributes = 55;
          ref string local3 = ref fna;
          bool flag = false;
          ref bool local4 = ref flag;
          fna = BnsStr.UNCtoLocalName(ref local3, ref local4);
          string Expression = FileSystem.Dir(fna, (FileAttribute) Attributes);
          string[] strresult = new string[1];
          if (Strings.Len(Expression) == 0)
          {
            if (Operators.CompareString(BnsStr.GetFilePath(ref fna), "", false) == 0)
            {
              if (Information.IsNothing((object) path) | Operators.CompareString(path, "", false) == 0)
              {
                path = Interaction.Environ("PATH");
                path = FileSystem.CurDir() + ";" + path;
              }
              string str4 = "\"";
              ref string local5 = ref str4;
              string delim = "";
              ref string local6 = ref delim;
              ref string local7 = ref path;
              path = BnsStr.StrReplace(ref local5, ref local6, ref local7);
              BnsStr.bnsExpandEnvironmentStrings(ref path);
              delim = ";";
              int num3 = BnsStr.StrDelim(ref delim, ref path, ref strresult);
              int index1 = 0;
              while (index1 <= num3)
              {
                if (Operators.CompareString(Strings.Right(strresult[index1], 1), "\\", false) != 0 & Operators.CompareString(Strings.Right(strresult[index1], 1), "/", false) != 0)
                  strresult[index1] = strresult[index1] + "\\";
                FileInfo[] files = MyProject.Computer.FileSystem.GetDirectoryInfo(strresult[index1]).GetFiles();
                int index2 = 0;
                while (index2 < files.Length)
                {
                  FileInfo fileInfo = files[index2];
                  if (Operators.CompareString(fileInfo.Name, fna, false) == 0)
                  {
                    Expression = fileInfo.FullName;
                    index1 = num3;
                    break;
                  }
                  checked { ++index2; }
                }
                checked { ++index1; }
              }
            }
          }
          else
            Expression = BnsStr.bnsGetFullPathName(ref fna);
          str1 = Expression;
          goto label_22;
        }
        else
          goto label_22;
label_17:
        num2 = -1;
        switch (num1)
        {
          case 2:
            goto label_22;
        }
      }
      catch (Exception ex) when (
      {
        // ISSUE: unable to correctly present filter
        int num4;
        if (ex is Exception & num1 != 0 & num4 == 0)
        {
          SuccessfulFiltering;
        }
        else
          throw;
      }
      )
      {
        ProjectData.SetProjectError(ex);
        goto label_17;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_22:
      string file = str1;
      if (num2 == 0)
        return file;
      ProjectData.ClearProjectError();
      return file;
    }

    public static bool Filename_Valid(ref string fna, ref bool validateDir = true)
    {
      bool flag;
      if (Operators.CompareString(fna, "", false) == 0 | Strings.InStr(1, fna, "*", CompareMethod.Text) != 0 | Strings.InStr(1, fna, "?", CompareMethod.Text) != 0 | Strings.InStr(1, fna, "<", CompareMethod.Text) != 0 | Strings.InStr(1, fna, "<", CompareMethod.Text) != 0 | Strings.InStr(1, fna, "|", CompareMethod.Text) != 0)
        flag = false;
      else if (validateDir)
      {
        string str = BnsStr.GetFilePath(ref fna);
        if (Operators.CompareString(str, "", false) == 0)
          str = ".\\";
        flag = Operators.CompareString(BnsStr.FindFile(str), "", false) != 0;
      }
      else
        flag = true;
      return flag;
    }

    public static string bnsGetFullPathName(ref string fna)
    {
      int num1;
      string str;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        string lpBuffer = Strings.Space((int) byte.MaxValue);
        int maxValue = (int) byte.MaxValue;
        int lpFilePart;
        int fullPathName = BnsStr.GetFullPathName(ref fna, maxValue, ref lpBuffer, ref lpFilePart);
        str = Strings.Left(lpBuffer, fullPathName);
        goto label_6;
label_1:
        num2 = -1;
        switch (num1)
        {
          case 2:
            goto label_6;
        }
      }
      catch (Exception ex) when (
      {
        // ISSUE: unable to correctly present filter
        int num3;
        if (ex is Exception & num1 != 0 & num3 == 0)
        {
          SuccessfulFiltering;
        }
        else
          throw;
      }
      )
      {
        ProjectData.SetProjectError(ex);
        goto label_1;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_6:
      string fullPathName1 = str;
      if (num2 == 0)
        return fullPathName1;
      ProjectData.ClearProjectError();
      return fullPathName1;
    }

    public static string GetFilePath(ref string fna)
    {
      int num = Strings.Len(fna);
      int Length = 0;
      int Start = 1;
      while (Start <= num)
      {
        string Left = Strings.Mid(fna, Start, 1);
        if (Operators.CompareString(Left, "\\", false) == 0 | Operators.CompareString(Left, "/", false) == 0 | Operators.CompareString(Left, ":", false) == 0)
          Length = Start;
        checked { ++Start; }
      }
      return Strings.Left(fna, Length);
    }

    public static string GetFileBaseName(ref string fna)
    {
      string fileBaseName = "";
      int num1 = Strings.Len(BnsStr.GetFilePath(ref fna));
      int num2 = Strings.Len(BnsStr.GetFileExt(ref fna));
      int Length = checked (Strings.Len(fna) - num1 - num2);
      int Start = checked (num1 + 1);
      if (Length >= 0 & Start >= 0)
        fileBaseName = Strings.Mid(fna, Start, Length);
      return fileBaseName;
    }

    public static string GetFileExt(ref string fna)
    {
      string fileExt = "";
      if (Strings.Len(fna) > 1)
      {
        int num = 0;
        int Start = Strings.Len(fna);
        while (Start > 0 & num < 4)
        {
          if (Operators.CompareString(Strings.Mid(fna, Start, 1), ".", false) == 0)
          {
            fileExt = Strings.Mid(fna, Start);
            Start = -1;
          }
          else if (Operators.CompareString(Strings.Mid(fna, Start, 1), "\\", false) == 0 | Operators.CompareString(Strings.Mid(fna, Start, 1), "/", false) == 0)
            Start = -1;
          checked { --Start; }
          checked { ++num; }
        }
      }
      return fileExt;
    }

    public static void bnsExpandEnvironmentStrings(ref string str_Renamed)
    {
      if (str_Renamed.Length == 0 | !str_Renamed.Contains("%"))
        return;
      int num = 0;
      int Start = Strings.InStr(1, str_Renamed, "%");
      if (Start > 0)
        num = Strings.InStr(checked (Start + 1), str_Renamed, "%");
      for (; num > 0; num = Start <= 0 ? 0 : Strings.InStr(checked (Start + 1), str_Renamed, "%"))
      {
        if (checked (num - Start) > 1)
        {
          string variable = Strings.Mid(str_Renamed, checked (Start + 1), checked (num - Start - 1));
          string oldstr = Strings.Mid(str_Renamed, Start, checked (num - Start + 1));
          string environmentVariable = Environment.GetEnvironmentVariable(variable);
          if (Operators.CompareString(environmentVariable, "", false) != 0)
          {
            str_Renamed = BnsStr.StrReplace(ref oldstr, ref environmentVariable, ref str_Renamed);
            Start = Strings.InStr(1, str_Renamed, "%");
          }
          else
            Start = num;
        }
        else
          Start = num;
      }
    }

    public static string StrReplace(ref string oldstr, ref string newstr, ref string mainstr)
    {
      string str1;
      if (Operators.CompareString(oldstr, "", false) == 0)
        str1 = mainstr;
      else if (Strings.InStr(1, mainstr, oldstr) == 0)
      {
        str1 = mainstr;
      }
      else
      {
        Strings.Len(newstr);
        int Length = Strings.Len(oldstr);
        int num = Strings.Len(mainstr);
        string str2 = "";
        int Start = 1;
        while (Start <= checked (Strings.Len(mainstr) - Length + 1))
        {
          if (Operators.CompareString(Strings.Mid(mainstr, Start, Length), oldstr, false) == 0)
          {
            str2 += newstr;
            checked { Start += Length; }
          }
          else
          {
            str2 += Strings.Mid(mainstr, Start, 1);
            checked { ++Start; }
          }
        }
        str1 = str2 + Strings.Mid(mainstr, Start, checked (num - Start + 1));
      }
      return str1;
    }

    public static int StrDelim(ref string delim, ref string strmain, ref string[] strresult)
    {
      strresult = new string[checked (Strings.Len(strmain) + 1 + 1)];
      int num1 = Strings.Len(delim);
      int num2 = Strings.Len(strmain);
      int Start = 1;
      int index1 = 0;
      for (int index2 = Strings.InStr(Start, strmain, delim); index2 > 0; index2 = Strings.InStr(Start, strmain, delim))
      {
        strresult[index1] = Strings.Mid(strmain, Start, checked (index2 - Start));
        Start = checked (index2 + num1);
        checked { ++index1; }
      }
      strresult[index1] = Strings.Mid(strmain, Start, checked (num2 - Start + 1));
      strresult = (string[]) Utils.CopyArray((Array) strresult, (Array) new string[checked (index1 + 1)]);
      return index1;
    }

    public static int GetCommandLine(ref string[] argarray, ref object MaxArgs = 20)
    {
      string cmd = Interaction.Command();
      return Conversions.ToInteger(BnsStr.acetParseCmdLine(ref cmd, ref argarray));
    }

    public static object acetParseCmdLine(ref string cmd, ref string[] str_Renamed)
    {
      str_Renamed = new string[1];
      int num1 = Strings.Len(cmd);
      int cmdLine = -1;
      str_Renamed = (string[]) Utils.CopyArray((Array) str_Renamed, (Array) new string[checked (cmdLine + 1)]);
      int num2 = num1;
      int Start = 1;
      while (Start <= num2)
      {
        string Left = Strings.Mid(cmd, Start, 1);
        int num3;
        if (Operators.CompareString(Left, "\"", false) == 0)
          checked { ++num3; }
        bool flag;
        if ((double) num3 == Conversion.Fix((double) num3 / 2.0) * 2.0 & (Operators.CompareString(Left, " ", false) == 0 | Operators.CompareString(Left, "\t", false) == 0))
        {
          flag = false;
        }
        else
        {
          if (!flag)
          {
            checked { ++cmdLine; }
            if (Information.UBound((Array) str_Renamed) >= cmdLine)
              ;
          }
          flag = true;
          if (Operators.CompareString(Left, "\"", false) != 0)
            str_Renamed[cmdLine] = str_Renamed[cmdLine] + Left;
        }
        checked { ++Start; }
      }
      str_Renamed = new string[1];
      str_Renamed = (string[]) Utils.CopyArray((Array) str_Renamed, (Array) new string[checked (cmdLine + 1)]);
      if (cmdLine >= 0)
        ;
      return (object) cmdLine;
    }

    public static string LeftStrip(string str_Renamed, ref string stripit = " ")
    {
      int Length1 = Strings.Len(str_Renamed);
      for (int Length2 = Strings.Len(stripit); Length1 >= Length2 & Operators.CompareString(Strings.Left(str_Renamed, Length2), stripit, false) == 0; str_Renamed = Strings.Mid(str_Renamed, checked (Length2 + 1), Length1))
        checked { Length1 -= Length2; }
      return str_Renamed;
    }

    public static string RightStrip(string str_Renamed, ref string stripit = " ")
    {
      int Length1 = Strings.Len(str_Renamed);
      for (int Length2 = Strings.Len(stripit); Length1 >= Length2 & Operators.CompareString(Strings.Right(str_Renamed, Length2), stripit, false) == 0; str_Renamed = Strings.Left(str_Renamed, Length1))
        checked { Length1 -= Length2; }
      return str_Renamed;
    }

    public static string sStrip(string str_Renamed)
    {
      string str1 = "\t";
      ref string local1 = ref str1;
      string str2 = " ";
      ref string local2 = ref str2;
      ref string local3 = ref str_Renamed;
      str_Renamed = BnsStr.StrReplace(ref local1, ref local2, ref local3);
      string str_Renamed1 = str_Renamed;
      string str3 = " ";
      ref string local4 = ref str3;
      str_Renamed = BnsStr.RightStrip(str_Renamed1, ref local4);
      string str_Renamed2 = str_Renamed;
      string str4 = " ";
      ref string local5 = ref str4;
      str_Renamed = BnsStr.LeftStrip(str_Renamed2, ref local5);
      return str_Renamed;
    }

    public static int ReadTxtFile(ref string fna, ref string[] txt, ref int maxwait = 0)
    {
label_0:
      int num1;
      int num2;
      int num3;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num4 = 2;
        ref string local1 = ref fna;
        bool flag = true;
        ref bool local2 = ref flag;
        if (BnsStr.Filename_Valid(ref local1, ref local2))
          goto label_3;
label_2:
        num4 = 3;
        num2 = -1;
        goto label_27;
label_3:
        num4 = 6;
        ref string local3 = ref fna;
        string str1 = "r";
        ref string local4 = ref str1;
        string str2 = "";
        ref string local5 = ref str2;
        ref int local6 = ref maxwait;
        int FileNumber = BnsStr.acetOpen(ref local3, ref local4, ref local5, ref local6);
label_4:
        num4 = 7;
        if (FileNumber != 0)
          goto label_6;
label_5:
        num4 = 8;
        num2 = -1;
        goto label_27;
label_6:
        num4 = 11;
        int num5 = checked ((int) FileSystem.LOF(FileNumber));
label_7:
        num4 = 12;
        num5 = checked ((int) Math.Round(Conversion.Fix(unchecked ((double) num5 / 80.0))));
label_8:
        num4 = 13;
        txt = new string[checked (num5 + 1)];
label_9:
        num4 = 16;
        int index = 0;
        goto label_16;
label_10:
        num4 = 19;
        string str3 = FileSystem.LineInput(FileNumber);
label_11:
        num4 = 20;
        if (index <= num5)
          goto label_14;
label_12:
        num4 = 21;
        num5 = Conversion.Fix(checked (num5 + 80));
label_13:
        num4 = 22;
        txt = (string[]) Utils.CopyArray((Array) txt, (Array) new string[checked (num5 + 1)]);
label_14:
        num4 = 26;
        txt[index] = str3;
label_15:
        num4 = 27;
        checked { ++index; }
label_16:
        num4 = 18;
        if (!FileSystem.EOF(FileNumber))
          goto label_10;
label_17:
        num4 = 29;
        FileSystem.FileClose(FileNumber);
label_18:
        num4 = 30;
        if (index <= 0)
          goto label_20;
label_19:
        num4 = 31;
        txt = (string[]) Utils.CopyArray((Array) txt, (Array) new string[checked (index - 1 + 1)]);
label_20:
        num4 = 35;
        num2 = checked (index - 1);
        goto label_27;
label_22:
        num3 = num4;
        switch (num1)
        {
          case 1:
            int num6 = num3 + 1;
            num3 = 0;
            switch (num6)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 9:
              case 36:
                goto label_27;
              case 5:
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 10:
              case 11:
                goto label_6;
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 14:
              case 16:
                goto label_9;
              case 17:
              case 18:
              case 28:
                goto label_16;
              case 19:
                goto label_10;
              case 20:
                goto label_11;
              case 21:
                goto label_12;
              case 22:
                goto label_13;
              case 23:
              case 25:
              case 26:
                goto label_14;
              case 27:
                goto label_15;
              case 29:
                goto label_17;
              case 30:
                goto label_18;
              case 31:
                goto label_19;
              case 32:
              case 34:
              case 35:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_22;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_27:
      int num7 = num2;
      if (num3 == 0)
        return num7;
      ProjectData.ClearProjectError();
      return num7;
    }

    public static int WriteTxtFile(ref string fna, ref string[] txt, ref int maxwait = 0)
    {
label_0:
      int num1;
      int num2;
      int num3;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num4 = 2;
        ref string local1 = ref fna;
        bool flag = true;
        ref bool local2 = ref flag;
        if (BnsStr.Filename_Valid(ref local1, ref local2))
          goto label_3;
label_2:
        num4 = 3;
        num2 = -1;
        goto label_19;
label_3:
        num4 = 6;
        int num5 = Information.UBound((Array) txt);
label_4:
        num4 = 7;
        ref string local3 = ref fna;
        string str1 = "w";
        ref string local4 = ref str1;
        string str2 = "";
        ref string local5 = ref str2;
        ref int local6 = ref maxwait;
        int FileNumber = BnsStr.acetOpen(ref local3, ref local4, ref local5, ref local6);
label_5:
        num4 = 8;
        if (FileNumber != 0)
          goto label_7;
label_6:
        num4 = 9;
        num2 = -1;
        goto label_19;
label_7:
        num4 = 12;
        int num6 = num5;
        int index = 0;
        goto label_10;
label_8:
        num4 = 13;
        FileSystem.PrintLine(FileNumber, (object) txt[index]);
label_9:
        num4 = 14;
        checked { ++index; }
label_10:
        if (index <= num6)
          goto label_8;
label_11:
        num4 = 15;
        FileSystem.FileClose(FileNumber);
label_12:
        num4 = 16;
        num2 = checked (index - 1);
        goto label_19;
label_14:
        num3 = num4;
        switch (num1)
        {
          case 1:
            int num7 = num3 + 1;
            num3 = 0;
            switch (num7)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 10:
              case 17:
                goto label_19;
              case 5:
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 9:
                goto label_6;
              case 11:
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 14:
                goto label_9;
              case 15:
                goto label_11;
              case 16:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_14;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_19:
      int num8 = num2;
      if (num3 == 0)
        return num8;
      ProjectData.ClearProjectError();
      return num8;
    }

    public static int AppendTxtFile(ref string fna, ref string[] txt, ref int maxwait = 0)
    {
label_0:
      int num1;
      int num2;
      int num3;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num4 = 2;
        ref string local1 = ref fna;
        bool flag = true;
        ref bool local2 = ref flag;
        if (BnsStr.Filename_Valid(ref local1, ref local2))
          goto label_3;
label_2:
        num4 = 3;
        num2 = -1;
        goto label_19;
label_3:
        num4 = 6;
        int num5 = Information.UBound((Array) txt);
label_4:
        num4 = 7;
        ref string local3 = ref fna;
        string str1 = "a";
        ref string local4 = ref str1;
        string str2 = "";
        ref string local5 = ref str2;
        ref int local6 = ref maxwait;
        int FileNumber = BnsStr.acetOpen(ref local3, ref local4, ref local5, ref local6);
label_5:
        num4 = 8;
        if (FileNumber != 0)
          goto label_7;
label_6:
        num4 = 9;
        num2 = -1;
        goto label_19;
label_7:
        num4 = 12;
        int num6 = num5;
        int index = 0;
        goto label_10;
label_8:
        num4 = 13;
        FileSystem.PrintLine(FileNumber, (object) txt[index]);
label_9:
        num4 = 14;
        checked { ++index; }
label_10:
        if (index <= num6)
          goto label_8;
label_11:
        num4 = 15;
        FileSystem.FileClose(FileNumber);
label_12:
        num4 = 16;
        num2 = checked (index - 1);
        goto label_19;
label_14:
        num3 = num4;
        switch (num1)
        {
          case 1:
            int num7 = num3 + 1;
            num3 = 0;
            switch (num7)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 10:
              case 17:
                goto label_19;
              case 5:
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 9:
                goto label_6;
              case 11:
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 14:
                goto label_9;
              case 15:
                goto label_11;
              case 16:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_14;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_19:
      int num8 = num2;
      if (num3 == 0)
        return num8;
      ProjectData.ClearProjectError();
      return num8;
    }

    public static int acetOpen(ref string fna, ref string ac, ref string fLock = "", ref int maxwait = 0)
    {
label_0:
      int num1;
      int num2;
      int num3;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
label_1:
        int num4 = 2;
        int ticks = 200;
label_2:
        num4 = 3;
        fLock = Strings.UCase(fLock);
label_3:
        num4 = 4;
        int FileNumber = FileSystem.FreeFile();
label_4:
        num4 = 5;
        int num5 = 0;
label_5:
        num4 = 6;
        bool flag = false;
        goto label_54;
label_6:
        num4 = 9;
        string Left1 = Strings.UCase(ac);
label_7:
        num4 = 12;
        if (Operators.CompareString(Left1, "R", false) != 0)
          goto label_24;
label_8:
        num4 = 13;
        if (Operators.CompareString(BnsStr.FindFile(fna, "."), "", false) == 0)
          goto label_21;
label_9:
        num4 = 14;
        string Left2 = fLock;
label_10:
        num4 = 17;
        if (Operators.CompareString(Left2, "R", false) != 0)
          goto label_12;
label_11:
        num4 = 18;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Input, Share: OpenShare.LockRead);
        goto label_20;
label_12:
        num4 = 20;
        if (Operators.CompareString(Left2, "W", false) != 0)
          goto label_14;
label_13:
        num4 = 21;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Input, Share: OpenShare.LockWrite);
        goto label_20;
label_14:
        num4 = 23;
        if (Operators.CompareString(Left2, "RW", false) != 0)
          goto label_16;
label_15:
        num4 = 24;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Input, Share: OpenShare.LockReadWrite);
        goto label_20;
label_16:
        num4 = 26;
        if (Operators.CompareString(Left2, "S", false) != 0)
          goto label_18;
label_17:
        num4 = 27;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Input, Share: OpenShare.Shared);
        goto label_20;
label_18:
        num4 = 29;
        if (Operators.CompareString(Left2, "", false) != 0)
          goto label_20;
label_19:
        num4 = 30;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Input);
label_20:
        num4 = 32;
        flag = !flag;
        goto label_54;
label_21:
        num4 = 34;
label_22:
        num4 = 35;
        FileNumber = 0;
label_23:
        num4 = 36;
        flag = true;
        goto label_54;
label_24:
        num4 = 39;
        if (Operators.CompareString(Left1, "W", false) != 0)
          goto label_38;
label_25:
        num4 = 40;
        BnsStr.AttrMinus(fna, (object) FileAttribute.Hidden);
label_26:
        num4 = 41;
        string Left3 = fLock;
label_27:
        num4 = 44;
        if (Operators.CompareString(Left3, "R", false) != 0)
          goto label_29;
label_28:
        num4 = 45;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Output, Share: OpenShare.LockRead);
        goto label_37;
label_29:
        num4 = 47;
        if (Operators.CompareString(Left3, "W", false) != 0)
          goto label_31;
label_30:
        num4 = 48;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Output, Share: OpenShare.LockWrite);
        goto label_37;
label_31:
        num4 = 50;
        if (Operators.CompareString(Left3, "RW", false) != 0)
          goto label_33;
label_32:
        num4 = 51;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Output, Share: OpenShare.LockReadWrite);
        goto label_37;
label_33:
        num4 = 53;
        if (Operators.CompareString(Left3, "S", false) != 0)
          goto label_35;
label_34:
        num4 = 54;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Output, Share: OpenShare.Shared);
        goto label_37;
label_35:
        num4 = 56;
        if (Operators.CompareString(Left3, "", false) != 0)
          goto label_37;
label_36:
        num4 = 57;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Output);
label_37:
        num4 = 59;
        flag = !flag;
        goto label_54;
label_38:
        num4 = 61;
        if (Operators.CompareString(Left1, "A", false) != 0)
          goto label_52;
label_39:
        num4 = 62;
        BnsStr.AttrMinus(fna, (object) FileAttribute.Hidden);
label_40:
        num4 = 63;
        string Left4 = fLock;
label_41:
        num4 = 66;
        if (Operators.CompareString(Left4, "R", false) != 0)
          goto label_43;
label_42:
        num4 = 67;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Append, Share: OpenShare.LockRead);
        goto label_51;
label_43:
        num4 = 69;
        if (Operators.CompareString(Left4, "W", false) != 0)
          goto label_45;
label_44:
        num4 = 70;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Append, Share: OpenShare.LockWrite);
        goto label_51;
label_45:
        num4 = 72;
        if (Operators.CompareString(Left4, "RW", false) != 0)
          goto label_47;
label_46:
        num4 = 73;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Append, Share: OpenShare.LockReadWrite);
        goto label_51;
label_47:
        num4 = 75;
        if (Operators.CompareString(Left4, "S", false) != 0)
          goto label_49;
label_48:
        num4 = 76;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Append, Share: OpenShare.Shared);
        goto label_51;
label_49:
        num4 = 78;
        if (Operators.CompareString(Left4, "", false) != 0)
          goto label_51;
label_50:
        num4 = 79;
        FileSystem.FileOpen(FileNumber, fna, OpenMode.Append);
label_51:
        num4 = 81;
        flag = !flag;
        goto label_54;
label_52:
        num4 = 84;
        FileNumber = 0;
label_53:
        num4 = 85;
        flag = true;
label_54:
        num4 = 8;
        if (!flag & num5 <= maxwait)
          goto label_6;
label_68:
        num3 = FileNumber;
        goto label_75;
label_70:
        num2 = num4;
        int number;
        switch (num1)
        {
          case 1:
label_69:
            int num6 = num2 + 1;
            num2 = 0;
            switch (num6)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 8:
              case 10:
              case 33:
              case 37:
              case 38:
              case 60:
              case 82:
              case 86:
              case 87:
                goto label_54;
              case 9:
                goto label_6;
              case 11:
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 14:
                goto label_9;
              case 15:
              case 19:
              case 22:
              case 25:
              case 28:
              case 31:
              case 32:
                goto label_20;
              case 16:
              case 17:
                goto label_10;
              case 18:
                goto label_11;
              case 20:
                goto label_12;
              case 21:
                goto label_13;
              case 23:
                goto label_14;
              case 24:
                goto label_15;
              case 26:
                goto label_16;
              case 27:
                goto label_17;
              case 29:
                goto label_18;
              case 30:
                goto label_19;
              case 34:
                goto label_21;
              case 35:
                goto label_22;
              case 36:
                goto label_23;
              case 39:
                goto label_24;
              case 40:
                goto label_25;
              case 41:
                goto label_26;
              case 42:
              case 46:
              case 49:
              case 52:
              case 55:
              case 58:
              case 59:
                goto label_37;
              case 43:
              case 44:
                goto label_27;
              case 45:
                goto label_28;
              case 47:
                goto label_29;
              case 48:
                goto label_30;
              case 50:
                goto label_31;
              case 51:
                goto label_32;
              case 53:
                goto label_33;
              case 54:
                goto label_34;
              case 56:
                goto label_35;
              case 57:
                goto label_36;
              case 61:
                goto label_38;
              case 62:
                goto label_39;
              case 63:
                goto label_40;
              case 64:
              case 68:
              case 71:
              case 74:
              case 77:
              case 80:
              case 81:
                goto label_51;
              case 65:
              case 66:
                goto label_41;
              case 67:
                goto label_42;
              case 69:
                goto label_43;
              case 70:
                goto label_44;
              case 72:
                goto label_45;
              case 73:
                goto label_46;
              case 75:
                goto label_47;
              case 76:
                goto label_48;
              case 78:
                goto label_49;
              case 79:
                goto label_50;
              case 83:
              case 84:
                goto label_52;
              case 85:
                goto label_53;
              case 88:
              case 97:
              case 100:
              case 101:
              case 102:
              case 105:
              case 106:
                goto label_68;
              case 89:
                goto label_55;
              case 90:
                break;
              case 91:
                goto label_57;
              case 92:
                goto label_58;
              case 93:
                goto label_59;
              case 94:
                goto label_60;
              case 95:
                goto label_61;
              case 96:
                goto label_62;
              case 98:
                goto label_63;
              case 99:
                goto label_64;
              case 103:
                goto label_66;
              case 104:
                goto label_67;
              case 107:
                goto label_75;
              default:
                goto label_74;
            }
            break;
          case 2:
label_55:
            num4 = 89;
            number = Information.Err().Number;
            break;
          default:
            goto label_74;
        }
        num4 = 90;
        string description = Information.Err().Description;
label_57:
        num4 = 91;
        if (!(number == 55 | number == 70))
          goto label_66;
label_58:
        num4 = 92;
        BnsStr.bnsDelay(ref ticks);
label_59:
        num4 = 93;
        checked { num5 += ticks; }
label_60:
        num4 = 94;
        flag = !flag;
label_61:
        num4 = 95;
        if (num5 < maxwait)
          goto label_63;
label_62:
        num4 = 96;
        FileNumber = 0;
        goto label_68;
label_63:
        num4 = 98;
label_64:
        num4 = 99;
        ProjectData.ClearProjectError();
        if (num2 == 0)
          throw ProjectData.CreateProjectError(-2146828268);
        goto label_69;
label_66:
        num4 = 103;
label_67:
        num4 = 104;
        FileNumber = 0;
        goto label_68;
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_70;
      }
label_74:
      throw ProjectData.CreateProjectError(-2146828237);
label_75:
      int num7 = num3;
      if (num2 == 0)
        return num7;
      ProjectData.ClearProjectError();
      return num7;
    }

    public static int strMemberPosition(ref string a, ref string[] b, ref bool ignorcase = false)
    {
      int num1 = -1;
      if (Information.UBound((Array) b) >= 0)
      {
        int num2 = Information.UBound((Array) b);
        int index = 0;
        while (index <= num2)
        {
          if (Operators.CompareString(a, b[index], false) == 0)
          {
            num1 = index;
            index = Information.UBound((Array) b);
          }
          else if (ignorcase && BnsStr.strEqual(ref a, ref b[index]))
          {
            num1 = index;
            index = Information.UBound((Array) b);
          }
          checked { ++index; }
        }
      }
      return num1;
    }

    public static object strSort(ref string[] txt)
    {
      int num = Information.UBound((Array) txt);
      object obj = (object) null;
      bool flag = true;
      while (flag)
      {
        flag = false;
        int index = 0;
        while (index < num)
        {
          if (Operators.CompareString(txt[index], txt[checked (index + 1)], false) > 0)
          {
            string str = txt[index];
            txt[index] = txt[checked (index + 1)];
            txt[checked (index + 1)] = str;
            flag = true;
          }
          checked { ++index; }
        }
      }
      return obj;
    }

    public static object strReverse_Renamed(ref string[] txt)
    {
      object obj = (object) null;
      int num1 = Information.UBound((Array) txt);
      int num2 = checked ((int) Math.Round(Conversion.Fix(unchecked ((double) checked (num1 + 1) / 2.0))));
      int index = 0;
      while (index < num2)
      {
        string str = txt[index];
        txt[index] = txt[checked (num1 - index)];
        txt[checked (num1 - index)] = str;
        checked { ++index; }
      }
      return obj;
    }

    public static string strFormat(ref string msg1, params object[] args)
    {
      int num1 = Information.UBound((Array) args);
      string[] str_Renamed = new string[checked (num1 + 1)];
      string str;
      if (num1 >= 0)
      {
        int num2 = num1;
        int index = 0;
        while (index <= num2)
        {
          str_Renamed[index] = Conversions.ToString(args[index]);
          checked { ++index; }
        }
        str = BnsStr.strFormatA(ref msg1, ref str_Renamed);
      }
      else
        str = msg1;
      return str;
    }

    public static string strFormatA(ref string msg1, ref string[] str_Renamed)
    {
      string newstr1 = "Randy" + Conversions.ToString(BnsStr.GetTickCount()) + "Kintzley";
      string mainstr1 = msg1;
      string oldstr1 = "%%";
      string mainstr2 = BnsStr.StrReplace(ref oldstr1, ref newstr1, ref mainstr1);
      int num1 = checked (Information.UBound((Array) str_Renamed) + 1);
      int num2 = Information.UBound((Array) str_Renamed);
      int num3 = Information.LBound((Array) str_Renamed);
      int index = num2;
      string oldstr2;
      while (index >= num3)
      {
        string mainstr3 = str_Renamed[index];
        oldstr2 = "%";
        string newstr2 = BnsStr.StrReplace(ref oldstr2, ref newstr1, ref mainstr3);
        string oldstr3 = "%" + Conversions.ToString(num1);
        mainstr2 = BnsStr.StrReplace(ref oldstr3, ref newstr2, ref mainstr2);
        checked { --num1; }
        checked { index += -1; }
      }
      ref string local1 = ref newstr1;
      oldstr2 = "%";
      ref string local2 = ref oldstr2;
      ref string local3 = ref mainstr2;
      mainstr2 = BnsStr.StrReplace(ref local1, ref local2, ref local3);
      return mainstr2;
    }

    public struct CPINFO
    {
      public int MaxCharSize;
      [VBFixedArray(2)]
      public byte[] DefaultChar;
      [VBFixedArray(12)]
      public byte[] LeadByte;

      public void Initialize()
      {
        this.DefaultChar = new byte[3];
        this.LeadByte = new byte[13];
      }
    }

    public struct REMOTE_NAME_INFO
    {
      public int pUniversalName;
      public int pConnectionName;
      public int pRemainingPath;
    }
  }
}
