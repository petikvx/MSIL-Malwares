// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: p的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E9517A17-41D2-4860-BC69-C7D574C89AF9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9548c6a9da2d6cee9d27565c0055be4429cabfae9287ab3e525aaba66fd67032.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
      this.Clear();
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.WhitePieces.Values.GetEnumerator();
      try
      {
label_7:
        int num1 = enumerator1.MoveNext() ? 1946453213 : (num1 = 1404954290);
        ChessPiece current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1575611744)) % 6U)
          {
            case 0:
              num1 = 1946453213;
              continue;
            case 1:
              this.FindMoveFrom(current.Current);
              num1 = (int) num2 * 6458316 ^ 1537655332;
              continue;
            case 2:
              num1 = (int) num2 * 36677835 ^ 1201996887;
              continue;
            case 3:
              goto label_7;
            case 5:
              current = enumerator1.Current;
              num1 = 479896193;
              continue;
            default:
              goto label_13;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_9:
        int num3 = 2013589754;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1575611744)) % 3U)
          {
            case 1:
              num3 = (int) num4 * 615438830 ^ 295639844;
              continue;
            case 2:
              goto label_9;
            default:
              goto label_12;
          }
        }
label_12:;
      }
label_13:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator2 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_20:
        int num5 = enumerator2.MoveNext() ? 565637481 : (num5 = 804391593);
        ChessPiece current;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1575611744)) % 6U)
          {
            case 0:
              this.FindMoveFrom(current.Current);
              num5 = (int) num6 * 1381186317 ^ -2052254479;
              continue;
            case 1:
              current = enumerator2.Current;
              num5 = 97494150;
              continue;
            case 2:
              goto label_20;
            case 4:
              num5 = 565637481;
              continue;
            case 5:
              num5 = (int) num6 * -1679483461 ^ -1499219041;
              continue;
            default:
              goto label_27;
          }
        }
      }
      finally
      {
        enumerator2.Dispose();
label_22:
        int num7 = 858103680;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ 1575611744)) % 3U)
          {
            case 0:
              goto label_22;
            case 1:
              num7 = (int) num8 * -1871875455 ^ -603936948;
              continue;
            default:
              goto label_26;
          }
        }
label_26:;
      }
label_27:
      bool showAllMoves = this.board.ShowAllMoves;
label_28:
      int num9 = 723153228;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ 1575611744)) % 5U)
        {
          case 0:
            num9 = (int) num10 * 1835887777 ^ -1732453619;
            continue;
          case 1:
            int num11 = !showAllMoves ? -453147474 : (num11 = -317176465);
            num9 = num11 ^ (int) num10 * 1000044866;
            continue;
          case 2:
            this.HighLightMoveStyle();
            num9 = (int) num10 * -2085129544 ^ 358200819;
            continue;
          case 3:
            goto label_30;
          case 4:
            goto label_28;
          default:
            goto label_24;
        }
      }
label_30:
      return;
label_24:;
    }

    public void FindMoveFrom(Square x)
    {
      int num1;
      switch (x.Piece.Kind)
      {
        case Pieces.Pawn:
label_8:
          this.handlePawn(x);
          num1 = 1960205432;
          break;
        case Pieces.Knight:
label_5:
          this.handleKnight(x);
          num1 = 1414187596;
          break;
        case Pieces.Bishop:
label_14:
          this.handleBishop(x);
          num1 = 429367906;
          break;
        case Pieces.Rook:
label_4:
          this.handleRook(x);
          num1 = 1526749333;
          break;
        case Pieces.King:
label_7:
          this.handleKing(x);
          num1 = 273155318;
          break;
        case Pieces.Queen:
label_6:
          this.handleQueen(x);
          num1 = 1663242016;
          break;
        default:
label_1:
          num1 = 1672311358;
          break;
      }
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1586760079)) % 16U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1334543375 ^ 2117359392;
            continue;
          case 2:
            goto label_14;
          case 3:
            num1 = (int) num2 * -84190917 ^ 769801358;
            continue;
          case 4:
            goto label_7;
          case 5:
            num1 = (int) num2 * -1910121630 ^ 1607677717;
            continue;
          case 6:
            goto label_5;
          case 7:
            num1 = (int) num2 * -630314434 ^ 406422445;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 420850914 ^ 525001901;
            continue;
          case 10:
            num1 = (int) num2 * 1916972795 ^ -1202985983;
            continue;
          case 11:
            goto label_8;
          case 12:
            goto label_4;
          case 13:
            num1 = (int) num2 * 1331808362 ^ -962830104;
            continue;
          case 14:
            goto label_6;
          case 15:
            num1 = (int) num2 * 899710452 ^ -446626381;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
      int num2 = 0;
      if (x.Piece.Color == PieceColor.White)
        goto label_8;
label_1:
      int num3 = 1941770739;
label_2:
      int num4;
      while (true)
      {
        uint num5;
        int num6;
        int num7;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        Square square;
        bool isEmpty;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        int num8;
        bool flag9;
        bool flag10;
        int b;
        bool flag11;
        bool flag12;
        bool flag13;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        switch ((num5 = (uint) (num3 ^ 1948353531)) % 65U)
        {
          case 0:
            int num18;
            num3 = num18 = num7 >= 8 ? 85171963 : (num18 = 1535230862);
            continue;
          case 1:
            int num19 = !flag2 ? 971232983 : (num19 = 1538951074);
            num3 = num19 ^ (int) num5 * -1638780684;
            continue;
          case 2:
            if (num2 >= 0)
            {
              num3 = (int) num5 * 118137093 ^ -208794066;
              continue;
            }
            goto label_85;
          case 3:
            num10 = x.Piece.Color == PieceColor.White ? 1 : 0;
            break;
          case 4:
            num1 = x.File + 1;
            num3 = 1643010889;
            continue;
          case 5:
            num1 = x.File;
            num2 = x.Rank + num8;
            if (num2 < 0)
            {
              num12 = 0;
              goto label_23;
            }
            else
            {
              num3 = (int) num5 * 948096349 ^ -635159099;
              continue;
            }
          case 6:
            if (x.Rank != 4)
            {
              num10 = 0;
              break;
            }
            num3 = 1099976555;
            continue;
          case 7:
            int num20 = !flag13 ? 1509844005 : (num20 = 110948699);
            num3 = num20 ^ (int) num5 * 643415397;
            continue;
          case 8:
            int num21 = !flag10 ? 153073350 : (num21 = 2052109557);
            num3 = num21 ^ (int) num5 * 1517652751;
            continue;
          case 9:
            flag10 = num6 >= 0;
            num3 = (int) num5 * -683589738 ^ 1994011020;
            continue;
          case 10:
            this.addMove(num1, num2, x);
            num3 = (int) num5 * 1112330950 ^ 1144109100;
            continue;
          case 11:
            num3 = (int) num5 * -969954378 ^ -961737580;
            continue;
          case 12:
            int num22 = !square.IsEmpty ? 759060527 : (num22 = 1441933554);
            num3 = num22 ^ (int) num5 * -53087508;
            continue;
          case 13:
            flag7 = x.Rank == num4;
            num3 = 1561611402;
            continue;
          case 14:
            num12 = num2 < 8 ? 1 : 0;
            goto label_23;
          case 15:
            square = this.board[num1, num2];
            isEmpty = square.IsEmpty;
            num3 = (int) num5 * -1444530576 ^ 1229788375;
            continue;
          case 16:
            num1 = x.File - 1;
            num2 = x.Rank + num8;
            num3 = 985097018;
            continue;
          case 17:
            num3 = 1285248143;
            continue;
          case 18:
            num13 = this.board[num6, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_74;
          case 19:
            goto label_3;
          case 20:
            if (num1 >= 0)
            {
              num3 = (int) num5 * -97360798 ^ 2084229146;
              continue;
            }
            goto label_96;
          case 21:
            num6 = x.File - 1;
            num3 = (int) num5 * 1574068612 ^ 1777270177;
            continue;
          case 22:
            int num23 = !isEmpty ? 178437479 : (num23 = 916629131);
            num3 = num23 ^ (int) num5 * 98519241;
            continue;
          case 23:
            num3 = 1926703885;
            continue;
          case 24:
            num14 = num2 < 8 ? 1 : 0;
            goto label_97;
          case 25:
            num15 = -1;
            goto label_91;
          case 26:
            flag4 = this.board.lastPassantPawn == this.board[num7, x.Rank].Piece;
            num3 = (int) num5 * 661395589 ^ -1816151932;
            continue;
          case 27:
            goto label_1;
          case 28:
            num2 = x.Rank + 2 * num8;
            num3 = (int) num5 * -1742271036 ^ -1045043368;
            continue;
          case 29:
            this.addMove(num1, num2, x);
            num3 = (int) num5 * 2022384230 ^ 1087511554;
            continue;
          case 30:
            int num24 = !flag9 ? -2127070193 : (num24 = -784440414);
            num3 = num24 ^ (int) num5 * -1238923381;
            continue;
          case 31:
            int num25 = !flag3 ? -287705122 : (num25 = -1219434446);
            num3 = num25 ^ (int) num5 * 284307791;
            continue;
          case 32:
            int num26 = !flag12 ? -1739820364 : (num26 = -877872684);
            num3 = num26 ^ (int) num5 * 392694975;
            continue;
          case 33:
            if (!flag1)
            {
              num3 = (int) num5 * 248986806 ^ -1953428059;
              continue;
            }
            num16 = 5;
            goto label_64;
          case 34:
            this.addMove(num1, num2, x);
            num3 = (int) num5 * 1195478519 ^ 1371246045;
            continue;
          case 35:
            num17 = this.board[num7, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_42;
          case 36:
            int num27 = this.board.lastPassantPawn != this.board[num6, x.Rank].Piece ? -1148945391 : (num27 = -1131081398);
            num3 = num27 ^ (int) num5 * 457305434;
            continue;
          case 37:
            num7 = x.File + 1;
            num3 = (int) num5 * 1696831581 ^ 1488936595;
            continue;
          case 38:
            this.addCapture(num7, b, x, this.board[num7, x.Rank].Piece);
            num3 = (int) num5 * 315131084 ^ 1572325783;
            continue;
          case 39:
            num16 = 2;
            goto label_64;
          case 40:
            flag5 = flag1 | flag6;
            num3 = (int) num5 * 522229771 ^ 1777987171;
            continue;
          case 41:
            num3 = 276243731;
            continue;
          case 42:
            goto label_7;
          case 43:
            if (num1 < 8)
            {
              num3 = (int) num5 * -1936393883 ^ -18699313;
              continue;
            }
            goto label_85;
          case 44:
            int num28 = !flag7 ? -323110545 : (num28 = -950632348);
            num3 = num28 ^ (int) num5 * -2136704079;
            continue;
          case 45:
            if (this.board[num6, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num3 = (int) num5 * -97070830 ^ -489978581;
              continue;
            }
            num13 = 0;
            goto label_74;
          case 46:
            this.addCapture(num6, b, x, this.board[num6, x.Rank].Piece);
            num3 = (int) num5 * 810159408 ^ 1323060619;
            continue;
          case 47:
            num2 = x.Rank + num8;
            num3 = (int) num5 * -884349827 ^ -357830525;
            continue;
          case 48:
            this.addMove(num1, num2, x);
            num3 = (int) num5 * 2137845293 ^ -160587001;
            continue;
          case 49:
            if (this.board[num7, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num3 = (int) num5 * 1082781603 ^ -1916782700;
              continue;
            }
            num17 = 0;
            goto label_42;
          case 50:
            if (num2 >= 0)
            {
              num3 = (int) num5 * 1137316988 ^ 1548984137;
              continue;
            }
            goto label_96;
          case 51:
            int num29 = flag8 ? 625478848 : (num29 = 1474893354);
            num3 = num29 ^ (int) num5 * -1077011359;
            continue;
          case 52:
            int num30 = square.IsEmpty ? -2079999312 : (num30 = -413787040);
            num3 = num30 ^ (int) num5 * -684381947;
            continue;
          case 53:
            square = this.board[num1, num2];
            num3 = (int) num5 * 1143988107 ^ -1224556649;
            continue;
          case 54:
            int num31 = !flag4 ? -1717399502 : (num31 = -1584134773);
            num3 = num31 ^ (int) num5 * -702964019;
            continue;
          case 55:
            if (x.Piece.Color != PieceColor.White)
            {
              num3 = (int) num5 * 608754227 ^ 43870110;
              continue;
            }
            num15 = 1;
            goto label_91;
          case 56:
            num3 = (int) num5 * 1081990004 ^ 303155274;
            continue;
          case 57:
            square = this.board[num1, num2];
            num3 = (int) num5 * -1026094196 ^ -1948834687;
            continue;
          case 58:
            int num32 = flag5 ? -1971357206 : (num32 = -733383624);
            num3 = num32 ^ (int) num5 * 505123033;
            continue;
          case 59:
            num11 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_35;
          case 60:
            int num33 = !flag11 ? -1414376421 : (num33 = -720501246);
            num3 = num33 ^ (int) num5 * 128972382;
            continue;
          case 61:
            num9 = num2 < 8 ? 1 : 0;
            goto label_86;
          case 62:
            flag9 = this.board[num6, x.Rank].Piece != null;
            num3 = (int) num5 * -1251619240 ^ 512081999;
            continue;
          case 63:
            flag2 = this.board[num7, x.Rank].Piece != null;
            num3 = (int) num5 * 259519614 ^ -1276203638;
            continue;
          case 64:
            num3 = 785077529;
            continue;
          default:
            goto label_98;
        }
        flag1 = num10 != 0;
        if (x.Rank == 3)
        {
          num3 = 1677265679;
          continue;
        }
        num11 = 0;
        goto label_35;
label_23:
        flag3 = num12 != 0;
        num3 = 362434758;
        continue;
label_35:
        flag6 = num11 != 0;
        num3 = 1899786800;
        continue;
label_42:
        flag8 = num17 != 0;
        num3 = 674152842;
        continue;
label_64:
        b = num16;
        num3 = 1372328926;
        continue;
label_74:
        flag11 = num13 != 0;
        num3 = 2004015547;
        continue;
label_85:
        num9 = 0;
label_86:
        flag12 = num9 != 0;
        num3 = 231614824;
        continue;
label_91:
        num8 = num15;
        num3 = 1917075699;
        continue;
label_96:
        num14 = 0;
label_97:
        flag13 = num14 != 0;
        num3 = 806193157;
      }
label_3:
      return;
label_98:
      return;
label_7:
      int num34 = 6;
      goto label_9;
label_8:
      num34 = 1;
label_9:
      num4 = num34;
      num3 = 275581047;
      goto label_2;
    }

    private void handleQueen(Square x)
    {
      this.handleRook(x);
label_1:
      int num1 = 1867526729;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 895313198)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.handleBishop(x);
            num1 = (int) num2 * -226897310 ^ 192000394;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1610428431 ^ 1986073054;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
label_1:
      int num1 = 798932213;
      bool flag1;
      bool canCastleKingSide1;
      bool canCastleQueenSide1;
      bool canCastleKingSide2;
      bool canCastleQueenSide2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 688189740)) % 29U)
        {
          case 0:
            goto label_3;
          case 1:
            flag1 = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 986604157 ^ 2135871725;
            continue;
          case 2:
            canCastleQueenSide2 = this.board.WhiteCanCastleQueenSide;
            num1 = 207725647;
            continue;
          case 3:
            this.addMove(x.File + 1, x.Rank + 1, x);
            this.addMove(x.File + 1, x.Rank - 1, x);
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * 2055150929 ^ -841361560;
            continue;
          case 4:
            int num3 = canCastleKingSide1 ? -706095925 : (num3 = -617584393);
            num1 = num3 ^ (int) num2 * -1148764575;
            continue;
          case 5:
            this.addMove(x.File, x.Rank + 1, x);
            num1 = (int) num2 * -1407345639 ^ 660541734;
            continue;
          case 6:
            num1 = (int) num2 * 1945564866 ^ -934364485;
            continue;
          case 7:
            int num4 = !canCastleKingSide2 ? -452254381 : (num4 = -1190942044);
            num1 = num4 ^ (int) num2 * -1337534786;
            continue;
          case 8:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1088595053 ^ 65430346;
            continue;
          case 9:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1040432760 ^ -44916747;
            continue;
          case 10:
            int num5 = canCastleQueenSide2 ? -1442096712 : (num5 = -707429712);
            num1 = num5 ^ (int) num2 * -1103500226;
            continue;
          case 11:
            num1 = (int) num2 * -489766418 ^ -769057532;
            continue;
          case 12:
            int num6 = !flag1 ? -926483216 : (num6 = -1222438016);
            num1 = num6 ^ (int) num2 * 1507424835;
            continue;
          case 13:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -2119674152 ^ -212949499;
            continue;
          case 14:
            int num7 = flag2 ? -208280936 : (num7 = -564207183);
            num1 = num7 ^ (int) num2 * 704421805;
            continue;
          case 15:
            num1 = (int) num2 * -2089680195 ^ 593239009;
            continue;
          case 16:
            num1 = 401337597;
            continue;
          case 17:
            canCastleKingSide2 = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * 1984635211 ^ 1064625094;
            continue;
          case 18:
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * -1001159039 ^ 229313541;
            continue;
          case 19:
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * -462634103 ^ -1795573854;
            continue;
          case 20:
            flag2 = x.Piece.Color == PieceColor.Black;
            num1 = 25414352;
            continue;
          case 21:
            num1 = 234233495;
            continue;
          case 22:
            int num8 = canCastleQueenSide1 ? -963629814 : (num8 = -1697471455);
            num1 = num8 ^ (int) num2 * -805125701;
            continue;
          case 23:
            canCastleKingSide1 = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * -959724534 ^ 1833741650;
            continue;
          case 24:
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * -1803010460 ^ -2065027922;
            continue;
          case 25:
            canCastleQueenSide1 = this.board.BlackCanCastleQueenSide;
            num1 = 407301664;
            continue;
          case 26:
            this.handleBigCastling(x);
            num1 = (int) num2 * -737313040 ^ -1653538467;
            continue;
          case 27:
            goto label_1;
          case 28:
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * -836072351 ^ 794372160;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
label_1:
      int num1 = 607127573;
      while (true)
      {
        uint num2;
        Square square2;
        bool flag;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ 370492827)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -258370033 ^ 1368146724;
            continue;
          case 2:
            num3 = square2.IsEmpty ? 1 : 0;
            goto label_6;
          case 3:
            if (square3.IsEmpty)
            {
              num1 = (int) num2 * -1837650385 ^ -1835510828;
              continue;
            }
            break;
          case 4:
            square2 = this.board[x.File - 3, x.Rank];
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -1975501558 ^ -1801253176;
              continue;
            }
            break;
          case 5:
            goto label_1;
          case 6:
            square3 = this.board[x.File - 2, x.Rank];
            num1 = (int) num2 * -1488400241 ^ -1165707971;
            continue;
          case 7:
            int num4 = flag ? 2006478053 : (num4 = 1645560084);
            num1 = num4 ^ (int) num2 * -952713199;
            continue;
          default:
            goto label_14;
        }
        num3 = 0;
label_6:
        flag = num3 != 0;
        num1 = 913059516;
      }
label_3:
      return;
label_14:;
    }

    private void handleSmallCastling(Square x)
    {
      Square square1 = this.board[x.File + 1, x.Rank];
label_1:
      int num1 = 1020573591;
      while (true)
      {
        uint num2;
        bool flag;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1719408093)) % 6U)
        {
          case 0:
            int num4 = flag ? 53215441 : (num4 = 1652922976);
            num1 = num4 ^ (int) num2 * -562448215;
            continue;
          case 1:
            goto label_3;
          case 2:
            square2 = this.board[x.File + 2, x.Rank];
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -894852443 ^ -1382531704;
              continue;
            }
            num3 = 0;
            break;
          case 3:
            goto label_1;
          case 4:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * 138133140 ^ -233371470;
            continue;
          case 5:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          default:
            goto label_11;
        }
        flag = num3 != 0;
        num1 = 330061767;
      }
label_3:
      return;
label_11:;
    }

    private void handleRook(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = 1593684626;
      bool flag1;
      int num3;
      bool flag2;
      int num4;
      bool flag3;
      int num5;
      int b1;
      bool flag4;
      int b2;
      bool flag5;
      bool flag6;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ 2108098542)) % 37U)
        {
          case 0:
            num2 = (int) num6 * -396975714 ^ -1888437497;
            continue;
          case 1:
            num2 = (int) num6 * -1686449596 ^ 1917034977;
            continue;
          case 2:
            ++num1;
            num2 = (int) num6 * 525164444 ^ 1292035973;
            continue;
          case 3:
            num3 = 1;
            num2 = 1113257472;
            continue;
          case 4:
            num2 = 918174580;
            continue;
          case 5:
            flag3 = this.addMove(x.File, b2, x);
            num2 = (int) num6 * 845164348 ^ 472519193;
            continue;
          case 6:
            flag2 = num4 < 8;
            num2 = 976731585;
            continue;
          case 7:
            int num7 = !flag6 ? 1733439 : (num7 = 1119029313);
            num2 = num7 ^ (int) num6 * 241724802;
            continue;
          case 8:
            num4 = 1;
            num2 = 266605076;
            continue;
          case 9:
            num5 = 1;
            num2 = 841031297;
            continue;
          case 10:
            goto label_1;
          case 11:
            num2 = 1747000162;
            continue;
          case 12:
            b1 = x.Rank + num1;
            num2 = 1115251323;
            continue;
          case 13:
            flag1 = this.addMove(x.File + num4, x.Rank, x);
            num2 = 640246148;
            continue;
          case 14:
            ++num5;
            num2 = (int) num6 * -1330376419 ^ -1166929310;
            continue;
          case 15:
            int num8 = !flag2 ? -1841823995 : (num8 = -1376557299);
            num2 = num8 ^ (int) num6 * -1427535166;
            continue;
          case 16:
            num2 = 364824547;
            continue;
          case 17:
            flag6 = num3 < 8;
            num2 = 360625804;
            continue;
          case 18:
            int num9;
            num2 = num9 = num5 < 8 ? 817874203 : (num9 = 259848907);
            continue;
          case 19:
            int num10 = !flag3 ? 1965944893 : (num10 = 715740586);
            num2 = num10 ^ (int) num6 * -1717731566;
            continue;
          case 20:
            num2 = 668434007;
            continue;
          case 21:
            goto label_3;
          case 22:
            num2 = (int) num6 * -1021746114 ^ 638839927;
            continue;
          case 23:
            ++num3;
            num2 = (int) num6 * -283202478 ^ -696641708;
            continue;
          case 24:
            num2 = 1693130877;
            continue;
          case 25:
            num2 = 1400207270;
            continue;
          case 26:
            num2 = (int) num6 * 365760231 ^ 724375984;
            continue;
          case 27:
            int num11 = !flag1 ? -260183654 : (num11 = -416980656);
            num2 = num11 ^ (int) num6 * -915276898;
            continue;
          case 28:
            flag5 = this.addMove(x.File - num5, x.Rank, x);
            num2 = (int) num6 * 2072700042 ^ 1756309387;
            continue;
          case 29:
            b2 = x.Rank - num3;
            num2 = (int) num6 * 2105500800 ^ -888587870;
            continue;
          case 30:
            int num12 = !flag5 ? 351307774 : (num12 = 781306711);
            num2 = num12 ^ (int) num6 * 604414907;
            continue;
          case 31:
            int num13 = flag4 ? 891887950 : (num13 = 596399197);
            num2 = num13 ^ (int) num6 * -1646012471;
            continue;
          case 32:
            flag4 = this.addMove(x.File, b1, x);
            num2 = (int) num6 * 481234018 ^ -391366990;
            continue;
          case 33:
            num2 = (int) num6 * 532650240 ^ 1555826379;
            continue;
          case 34:
            num2 = (int) num6 * -513902945 ^ 442329019;
            continue;
          case 35:
            int num14;
            num2 = num14 = num1 < 8 ? 1654232162 : (num14 = 226367738);
            continue;
          case 36:
            ++num4;
            num2 = (int) num6 * -170122425 ^ -277473137;
            continue;
          default:
            goto label_39;
        }
      }
label_3:
      return;
label_39:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = -1856553132;
      bool flag1;
      int num2;
      int num3;
      bool flag2;
      int num4;
      int a1;
      int b1;
      bool flag3;
      bool flag4;
      int a2;
      int b2;
      bool flag5;
      int num5;
      int a3;
      int b3;
      bool flag6;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1646241452)) % 39U)
        {
          case 0:
            flag5 = num2 < 8;
            num1 = -713392820;
            continue;
          case 1:
            flag2 = num5 < 8;
            num1 = -1949553536;
            continue;
          case 2:
            int num7 = !flag2 ? -1491020256 : (num7 = -167938455);
            num1 = num7 ^ (int) num6 * -376215591;
            continue;
          case 3:
            num1 = (int) num6 * 1068077462 ^ 727595992;
            continue;
          case 4:
            int num8 = flag3 ? -471306594 : (num8 = -434926268);
            num1 = num8 ^ (int) num6 * -842386341;
            continue;
          case 5:
            int num9 = flag4 ? -852592586 : (num9 = -555697683);
            num1 = num9 ^ (int) num6 * -1834732694;
            continue;
          case 6:
            flag1 = this.addMove(x.File + num3, x.Rank + num3, x);
            num1 = -2015329793;
            continue;
          case 7:
            num1 = (int) num6 * 1515295265 ^ -249505564;
            continue;
          case 8:
            int num10 = !flag6 ? -320612476 : (num10 = -512425532);
            num1 = num10 ^ (int) num6 * 1561518919;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num6 * -832588862 ^ -245006287;
            continue;
          case 11:
            num1 = -291455121;
            continue;
          case 12:
            ++num4;
            num1 = -1010627050;
            continue;
          case 13:
            num2 = 1;
            num1 = -1733694348;
            continue;
          case 14:
            num1 = (int) num6 * -184538530 ^ -663092231;
            continue;
          case 15:
            num1 = (int) num6 * 673327376 ^ 1173631036;
            continue;
          case 16:
            num1 = -652691714;
            continue;
          case 17:
            ++num3;
            num1 = (int) num6 * -1252026557 ^ 1268015447;
            continue;
          case 18:
            a1 = x.File - num4;
            b1 = x.Rank + num4;
            num1 = (int) num6 * 893282072 ^ 1971558730;
            continue;
          case 19:
            num1 = -1833228174;
            continue;
          case 20:
            a3 = x.File + num2;
            b3 = x.Rank - num2;
            num1 = -1904134664;
            continue;
          case 21:
            int num11;
            num1 = num11 = num4 >= 8 ? -2005769767 : (num11 = -2062790457);
            continue;
          case 22:
            num1 = -1278592947;
            continue;
          case 23:
            num5 = 1;
            num1 = -1471159397;
            continue;
          case 24:
            flag6 = this.addMove(a3, b3, x);
            num1 = (int) num6 * 49491118 ^ -1714792730;
            continue;
          case 25:
            goto label_3;
          case 26:
            ++num2;
            num1 = (int) num6 * -1580823537 ^ -309662078;
            continue;
          case 27:
            num1 = (int) num6 * 215585117 ^ 2019698188;
            continue;
          case 28:
            flag4 = this.addMove(a1, b1, x);
            num1 = (int) num6 * 182758484 ^ 1992417747;
            continue;
          case 29:
            num1 = -1556388884;
            continue;
          case 30:
            a2 = x.File - num5;
            b2 = x.Rank - num5;
            num1 = (int) num6 * -632757776 ^ -1450914448;
            continue;
          case 31:
            num1 = (int) num6 * -47133234 ^ -1878152769;
            continue;
          case 32:
            int num12;
            num1 = num12 = num3 >= 8 ? -797438352 : (num12 = -25844555);
            continue;
          case 33:
            flag3 = this.addMove(a2, b2, x);
            num1 = (int) num6 * -784805445 ^ -469302202;
            continue;
          case 34:
            ++num5;
            num1 = (int) num6 * 1796903829 ^ -1248839980;
            continue;
          case 35:
            int num13 = !flag1 ? 2040197588 : (num13 = 362182666);
            num1 = num13 ^ (int) num6 * 533368294;
            continue;
          case 36:
            num3 = 1;
            num1 = (int) num6 * -979813584 ^ 725393087;
            continue;
          case 37:
            int num14 = flag5 ? -1887613331 : (num14 = -902670923);
            num1 = num14 ^ (int) num6 * -1118394099;
            continue;
          case 38:
            num4 = 1;
            num1 = -1592214090;
            continue;
          default:
            goto label_41;
        }
      }
label_3:
      return;
label_41:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = -1631543026;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        Square sq;
        int File;
        int[] numArray1;
        int[] numArray2;
        int index;
        bool isEmpty;
        int Rank;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1063252967)) % 20U)
        {
          case 0:
            goto label_3;
          case 1:
            int num4;
            num1 = num4 = sq.Piece.Color == x.Piece.Color ? -525037151 : (num4 = -1941967449);
            continue;
          case 2:
            goto label_1;
          case 3:
            int num5 = isEmpty ? -605683839 : (num5 = -985676439);
            num1 = num5 ^ (int) num2 * 526670111;
            continue;
          case 4:
            num1 = (int) num2 * -412119510 ^ 1191827145;
            continue;
          case 5:
            if (File <= 7)
            {
              num1 = (int) num2 * 603382970 ^ 428478680;
              continue;
            }
            break;
          case 6:
            ++index;
            num1 = -803161556;
            continue;
          case 7:
            num1 = -649092553;
            continue;
          case 8:
            num1 = -1837109753;
            continue;
          case 9:
            int num6;
            num1 = num6 = index < 8 ? -270510794 : (num6 = -1685728423);
            continue;
          case 10:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 944960237 ^ 1538577691;
            continue;
          case 11:
            piece = x.Piece;
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206A‬⁭⁮‮‫⁫⁯​⁫‪‭⁫‏‏‮​⁯‫⁬‫‏‏⁫⁬‬⁫‫⁭‮‬‫‭⁪⁮‫‎‌‎‎‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray1 = numArray3;
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206A‬⁭⁮‮‫⁫⁯​⁫‪‭⁫‏‏‮​⁯‫⁬‫‏‏⁫⁬‬⁫‫⁭‮‬‫‭⁪⁮‫‎‌‎‎‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray2 = numArray4;
            index = 0;
            num1 = (int) num2 * 1798823874 ^ 1490783810;
            continue;
          case 12:
            sq = this.board[File, Rank];
            num1 = -1495758960;
            continue;
          case 13:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * -721013901 ^ -1987471563;
            continue;
          case 14:
            File = x.File + numArray1[index];
            num1 = (int) num2 * 1875289829 ^ -641479329;
            continue;
          case 15:
            num3 = Rank > 7 ? 1 : 0;
            goto label_19;
          case 16:
            Rank = x.Rank + numArray2[index];
            if (File >= 0)
            {
              num1 = (int) num2 * -603181365 ^ 641157363;
              continue;
            }
            break;
          case 17:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1369436370 ^ 2075945395;
            continue;
          case 18:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 1169295299 ^ -323206078;
              continue;
            }
            break;
          case 19:
            num1 = (int) num2 * 300329736 ^ 425866527;
            continue;
          default:
            goto label_27;
        }
        num3 = 1;
label_19:
        int num7;
        num1 = num7 = num3 != 0 ? -1393569958 : (num7 = -943102143);
      }
label_3:
      return;
label_27:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = 292015983;
      ChessPiece piece;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 976849180)) % 5U)
        {
          case 0:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -800929695 ^ -165987364;
            continue;
          case 1:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * 232434380 ^ 411855828;
            continue;
          case 2:
            piece = x.Piece;
            sq = this.board[a, b];
            num1 = (int) num2 * -1520028752 ^ -406338856;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = 1853960586;
      bool flag1;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        Square sq;
        bool isEmpty;
        UserAction kind;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1033439953)) % 28U)
        {
          case 0:
            num1 = (int) num2 * 1447176589 ^ -578682443;
            continue;
          case 1:
            flag2 = sq.Piece.Color != x.Piece.Color;
            num1 = 1976913039;
            continue;
          case 2:
            int num5 = !flag3 ? 501246815 : (num5 = 993324848);
            num1 = num5 ^ (int) num2 * -112658025;
            continue;
          case 3:
            if (a >= 0)
            {
              num1 = (int) num2 * 1568693155 ^ 487696614;
              continue;
            }
            break;
          case 4:
            flag1 = false;
            num1 = 1342484862;
            continue;
          case 5:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = 333582251;
            continue;
          case 6:
            if (a <= 7)
            {
              num1 = (int) num2 * -1612738311 ^ -896553022;
              continue;
            }
            break;
          case 7:
            kind = UserAction.Capture;
            num1 = (int) num2 * 1341250328 ^ -1945967287;
            continue;
          case 8:
            int num6 = sq.Piece.Kind == Pieces.King ? -75578843 : (num6 = -1357885620);
            num1 = num6 ^ (int) num2 * -1506855322;
            continue;
          case 9:
            num3 = b > 7 ? 1 : 0;
            goto label_17;
          case 10:
            int num7 = !flag2 ? 1103818984 : (num7 = 1859271340);
            num1 = num7 ^ (int) num2 * 206702453;
            continue;
          case 11:
            flag1 = true;
            num1 = (int) num2 * -374046617 ^ 1671477699;
            continue;
          case 12:
            piece = x.Piece;
            sq = this.board[a, b];
            isEmpty = sq.IsEmpty;
            num1 = 1327851246;
            continue;
          case 13:
            num1 = 1273126956;
            continue;
          case 14:
            flag1 = true;
            num1 = (int) num2 * 1904834253 ^ -1050043206;
            continue;
          case 15:
            flag1 = true;
            num1 = 1342484862;
            continue;
          case 16:
            num1 = (int) num2 * 1173566661 ^ 1477233366;
            continue;
          case 17:
            if (b >= 0)
            {
              num1 = (int) num2 * 1033031913 ^ 694781077;
              continue;
            }
            break;
          case 18:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -1536495243 ^ 1169810371;
            continue;
          case 19:
            int num8 = isEmpty ? -994416502 : (num8 = -512484479);
            num1 = num8 ^ (int) num2 * -1835242609;
            continue;
          case 20:
            if (x.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * 144375863 ^ 164946299;
              continue;
            }
            num4 = 0;
            goto label_27;
          case 21:
            goto label_1;
          case 22:
            num1 = (int) num2 * 738488064 ^ 2007884056;
            continue;
          case 24:
            num1 = (int) num2 * -448314425 ^ 2118360321;
            continue;
          case 25:
            num1 = (int) num2 * 575906277 ^ 1204212323;
            continue;
          case 26:
            num4 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            goto label_27;
          case 27:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * -268323050 ^ -351164507;
            continue;
          default:
            goto label_37;
        }
        num3 = 1;
label_17:
        flag3 = num3 != 0;
        num1 = 720085479;
        continue;
label_27:
        int num9;
        num1 = num9 = num4 != 0 ? 2116507949 : (num9 = 590854936);
      }
label_37:
      return flag1;
    }

    static void \u206A‬⁭⁮‮‫⁫⁯​⁫‪‭⁫‏‏‮​⁯‫⁬‫‏‏⁫⁬‬⁫‫⁭‮‬‫‭⁪⁮‫‎‌‎‎‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
