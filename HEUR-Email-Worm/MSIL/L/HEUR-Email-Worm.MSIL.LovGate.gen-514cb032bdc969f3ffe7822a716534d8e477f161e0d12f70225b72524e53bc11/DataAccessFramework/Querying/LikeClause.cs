// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.Querying.LikeClause
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System.Runtime.InteropServices;
using System.Text;

namespace DataAccessFramework.Querying
{
  public class LikeClause : WherePart
  {
    private readonly WherePart _left;
    private readonly StringConstant _right;

    public LikeClause(WherePart left, string right)
    {
      this._left = left;
      this._right = new StringConstant(LikeClause.\u202D‌⁬⁯‪⁪‬‎⁬‌⁭​‫‍​‮‌⁪⁮⁮⁪‌‫‌‪‫‏⁮‍​⁪⁫‏‬⁭⁬‌⁪⁫‫‮(right, \u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(2586117834U)));
    }

    internal override void BuildSql(BuildSqlContext sqlContext)
    {
label_1:
      int num1 = 106489306;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1206088809)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 751699653 ^ 945266652;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            this._left.BuildSql(sqlContext);
            num1 = (int) num2 * -157074157 ^ 850217668;
            continue;
          case 4:
            this._right.BuildSql(sqlContext);
            num1 = (int) num2 * -1387957305 ^ 1373180204;
            continue;
          case 5:
            LikeClause.\u200C‪⁭⁮‏⁫⁯⁯⁯‌‪‌‭‏‪‏⁯‬⁭⁬‬‮⁬‫⁬‬‪‌⁬‬‪⁮‫‌‫‪‍⁫‎‪‮(sqlContext.Builder, \u003CModule\u003E.\u206F‌⁮​‫‫‮‬⁭⁬⁫⁮⁫⁭‌‮‌‏‬​⁭⁫‪​‫‮‬‫‬⁪⁬‍‍‮‬⁯‮‏‌‮‮<string>(2251492411U));
            num1 = (int) num2 * -799871098 ^ 1568597651;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    static string \u202D‌⁬⁯‪⁪‬‎⁬‌⁭​‫‍​‮‌⁪⁮⁮⁪‌‫‌‪‫‏⁮‍​⁪⁫‏‬⁭⁬‌⁪⁫‫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static StringBuilder \u200C‪⁭⁮‏⁫⁯⁯⁯‌‪‌‭‏‪‏⁯‬⁭⁬‬‮⁬‫⁬‬‪‌⁬‬‪⁮‫‌‫‪‍⁫‎‪‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.Append(obj1);
    }
  }
}
