// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: MhNU3, Version=4.1.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 093A5ACE-0A8F-4032-9F11-90141D4C005F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\Trojan.MSIL.Crypt.hzmf-2be5886c62ee2be49c5fc842f464c82dc524e83b8fa379fac049ecb730d31e7b.exe

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

internal class \u003CModule\u003E
{
  private static \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮ \u200D‍⁫‍‌⁪‮‭⁭‮‮‌⁯⁬‎⁪⁫‎⁭⁮​⁫⁭⁯⁯‭‮‪​‫⁯⁫⁫⁬‬‮​‮⁭‪‮;

  static \u003CModule\u003E() => \u003CModule\u003E.\u206F‌‍‫​‪‭‎⁭‌‬‮⁯‎‏‬‍‪‪‌⁪‫‮​‎⁪‪‍‪⁮⁭⁪⁫⁯‏⁭‮‍‬‫‮();

  private static void \u206F‌‍‫​‪‭‎⁭‌‬‮⁯‎‏‬‍‪‪‌⁪‫‮​‎⁪‪‍‪⁮⁭⁪⁫⁯‏⁭‮‍‬‫‮()
  {
    string str = "COR";
    if (\u003CModule\u003E.\u202C‪‎⁬⁯⁯‪⁪‏‮‏​‎⁮⁯‏‮⁫⁭‮‍‭⁮⁭‬‫⁮⁭‪‌‬⁬‮⁫​⁪⁬⁬‍‮(\u003CModule\u003E.\u202B‎‮‎⁬‫⁭‭‌⁪‏‌‪⁮‫‌‪‬⁪‬‬⁫‍⁮⁯‭​‌‎⁪⁬‬​‍⁭‏‭‍‍⁬‮(str, "_PROFILER")) != null || \u003CModule\u003E.\u200D‌‍‌⁭⁬‫‮‍⁫⁯⁪⁮‍‪⁫‬‭‪⁮‮⁯‎‮‎⁬‪⁪‬​‬‏‮⁫‎⁮⁭‭⁮‭‮(\u003CModule\u003E.\u206B⁮‎​‫⁪​‏‬⁯​‎‍⁭‮‫⁯⁭​‮‫⁪‎⁪⁭‏⁫‏⁮⁫‌‮‭⁬⁫​‭⁬‮⁯‮(str, "_ENABLE_PROFILING")) != null)
      \u003CModule\u003E.\u200D⁫‪⁬‭⁮⁫‪⁫‎‭⁪⁬‭‏‪‫‌‬​⁮‎‏⁮‫⁪⁭‬‭‬‫‭‌⁫‍⁬⁪‮‍‪‮((string) null);
    Process process = \u003CModule\u003E.\u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮();
    if (process != null && \u003CModule\u003E.\u206A⁪⁭​⁮‫‪⁫‫‭‪‌‎⁪‪⁬​​‏⁬‎‏‌‍​⁫⁪⁬⁯‌⁪⁮‮‌‪‍⁫⁪‪‫‮(\u003CModule\u003E.\u200E‎‭‏‫‎‫⁬‌‎‪‍‬⁮‮⁭‎​​⁯⁮‭‏‮‌‭‌‭‭‎‭‎‬‫‫‏⁮⁮‮‮‮(\u003CModule\u003E.\u202C⁮⁭⁬⁯‎​‎⁮‏‮‎‭‪‪⁮‪‌‭⁯‏‫‌‎⁪⁫‍⁮‏⁫‍‍⁬‫‍‪⁪⁪​‮‮(process)), "dnspy"))
      \u003CModule\u003E.\u202C⁮‏⁫​⁯​‌‬​‪⁮⁪‫‭⁫⁮⁫‫⁪‬‬​⁭‎⁪‮⁯⁭‎‪‌​⁯⁭‭‫​⁫‎‮("");
    Thread thread = \u003CModule\u003E.\u206A‭⁬⁭‎⁬​​⁮‎​⁭‌‍⁯‭‌‍‫‪‭⁬‎⁪‫⁪⁭‭‬⁭⁮⁪⁮‏⁪‍‎⁯​⁫‮(new ParameterizedThreadStart(\u003CModule\u003E.\u206B⁪⁯‌​⁮⁫‏‎‮‏⁯⁫‌⁪‌‌‌⁯‏​⁮⁪⁮‭‭⁯‮⁪⁭‍‪‌⁮⁮​‮‍‭‪‮));
    \u003CModule\u003E.\u200E‪‫⁮‎⁫‫⁯‪‫⁭‏‍‎⁮‫‏‪⁬⁪​⁬⁯⁭‍‬‭‎⁫⁯‪‬⁬‪⁭‍⁫⁭‏‭‮(thread, true);
    \u003CModule\u003E.\u202E‌‌‍‮⁪‮⁫‍‎‍⁬⁬⁮⁪⁯⁯⁭‎‌‬‭‫⁫⁯‌‬‮‪‎‌‍​‏‍‍⁭‭‎‫‮(thread, (object) null);
  }

  internal static Process \u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮() => \u003CModule\u003E.\u200D‍⁫‍‌⁪‮‭⁭‮‮‌⁯⁬‎⁪⁫‎⁭⁮​⁫⁭⁯⁯‭‮‪​‫⁯⁫⁫⁬‬‮​‮⁭‪‮.\u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮();

  [DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
  private static extern bool \u200C‬⁪​⁫‬⁯​‎‌‪‌‎‬⁫⁬‪‌‫‮⁭‭⁪⁪⁮‭​‬⁬⁫‪‏‌⁭​⁭‭⁭⁬⁫‮([In] IntPtr obj0);

  [DllImport("kernel32.dll", EntryPoint = "IsDebuggerPresent")]
  private static extern bool \u206F‫⁫‭‮‬‮‪‌⁫⁫⁭‬‌‭⁮‮​‪⁭⁫⁪⁮‪‮‍⁫‪‪‫⁭⁮‏⁫‌‭⁭⁪​⁯‮();

  [DllImport("kernel32.dll", EntryPoint = "OutputDebugString", CharSet = CharSet.Auto)]
  private static extern int \u206C‎‪‮⁮⁬‬⁫‎⁯‏⁭‪‎‮‮‪‮⁭‏‍‭‎⁪‫⁫‬⁭‌⁮⁬⁯‭‍‏​⁯‍‍⁬‮([In] string obj0);

  private static void \u206B⁪⁯‌​⁮⁫‏‎‮‏⁯⁫‌⁪‌‌‌⁯‏​⁮⁪⁮‭‭⁯‮⁪⁭‍‪‌⁮⁮​‮‍‭‪‮([In] object obj0)
  {
    if (!(obj0 is Thread thread))
    {
      thread = \u003CModule\u003E.\u200E⁭‏‫‬⁬‫‭‮‫‍‪‪​‎‌⁫‪‪‬⁫⁫‍‫⁭⁯⁯⁪⁯⁪‌⁫​‍‬‮‫⁫‏⁮‮(new ParameterizedThreadStart(\u003CModule\u003E.\u206B⁪⁯‌​⁮⁫‏‎‮‏⁯⁫‌⁪‌‌‌⁯‏​⁮⁪⁮‭‭⁯‮⁪⁭‍‪‌⁮⁮​‮‍‭‪‮));
      \u003CModule\u003E.\u206F‏⁭⁬⁯‫⁪⁯⁪​⁬⁯‮⁫⁪⁪‬⁯‮​⁫‎⁯‮‌⁮‫⁯‫⁭‮‭‏‬‌‪‮⁫‏‬‮(thread, true);
      \u003CModule\u003E.\u206E‏‫⁯⁯⁪⁮⁬‏⁫⁯⁯​⁭⁮⁮‌‏‪‪‌​‭​‬⁭⁮⁪‏‫‫⁯⁫⁯‌⁭‍⁯⁪‬‮(thread, (object) \u003CModule\u003E.\u202C⁬‮‪‏‌‫‪‬‎⁫​​⁪‏‌‬⁬⁬‍‌​⁬⁯⁫⁭‪‎⁯⁭⁫​⁬‎⁬‮⁫‮‏⁫‮());
      \u003CModule\u003E.\u206D‏‎‪‮‏⁪‪‏‬‫⁭‬​⁬‮⁬‎​‎⁬‫⁬‭‏⁬‎‌⁪‍⁮⁪⁭⁬⁯⁪​‬‪⁪‮(500);
    }
    while (true)
    {
      if (\u003CModule\u003E.\u202C‪​⁭‬‬‌​‪⁪‮‌‬‭‪⁭⁬⁮‌‎‌‬‭​⁪​⁪⁯⁬‬‌‬‌‪⁫⁪‮⁮‍‭‮() || \u003CModule\u003E.\u200B​‍‭‬‬⁫⁪‪⁫⁪‎‫‬⁮​⁮‪⁬​‫‍⁭‍‍‮‌‎⁫⁪⁬‮‍⁫‬‏‌‫‮‌‮())
        \u003CModule\u003E.\u202A​‍⁮⁬‏‍‫‍‎‎⁫⁫‮‬⁭​‬‪‍‪‌⁬⁭‭⁬‍‮⁭‏⁪‬⁫⁫‌‎⁮⁪‮‌‮("");
      if (\u003CModule\u003E.\u206F‫⁫‭‮‬‮‪‌⁫⁫⁭‬‌‭⁮‮​‪⁭⁫⁪⁮‪‮‍⁫‪‪‫⁭⁮‏⁫‌‭⁭⁪​⁯‮())
        \u003CModule\u003E.\u200C‌‍​⁭‍‏⁭‮‍‭⁭‍‏‫⁯‪‏⁫‫‫⁫⁭⁯⁭⁭‬‍​‎⁯⁬⁬⁫‎‌⁮⁭‭‌‮("");
      Process process = \u003CModule\u003E.\u202C‎‎‌⁪⁪‍‭⁯‎​⁫⁯‪‬⁬‬‪⁫‏⁪‍⁬⁭⁭⁫​⁪⁬‫⁮⁫⁮⁬⁮⁯‏⁯‍‬‮();
      if (\u003CModule\u003E.\u200D‌‭‍⁫‍⁫‭‏‎‮‏⁪‭‍‫⁬​‍​‍‭‭‮‪‭‌⁬⁬⁬‮‬‬‏‮‫‫​‎⁮‮(process) == IntPtr.Zero)
        \u003CModule\u003E.\u200B‪‎‌⁮‪⁪⁯‪‬⁬⁮‍⁭‬‮⁯‌‏‎​‫‍‏‬‭‮‭‍‫‪⁬⁫⁮⁬⁭⁭⁯⁫‌‮("");
      \u003CModule\u003E.\u206E‌⁯​‭⁯⁭‪‏‭‌‍‪‬‬⁭⁪⁬⁬‭‎‫⁪⁮​‏‬​⁫‏‏⁪⁪‬‍⁭⁪‫‏‭‮(process);
      if (\u003CModule\u003E.\u206C‎‪‮⁮⁬‬⁫‎⁯‏⁭‪‎‮‮‪‮⁭‏‍‭‎⁪‫⁫‬⁭‌⁮⁬⁯‭‍‏​⁯‍‍⁬‮("") > IntPtr.Size)
        \u003CModule\u003E.\u200E⁯​⁮‌⁭‌‬‍‏⁭‌‫⁪⁭‎‭⁭⁮‫‫⁯‫‌‭‏⁫‪‮⁯‭‍⁮​⁬‬⁬⁯‌‮‮("");
      try
      {
        \u003CModule\u003E.\u200C‬⁪​⁫‬⁯​‎‌‪‌‎‬⁫⁬‪‌‫‮⁭‭⁪⁪⁮‭​‬⁬⁫‪‏‌⁭​⁭‭⁭⁬⁫‮(IntPtr.Zero);
      }
      catch
      {
        \u003CModule\u003E.\u202B‍‏‮‍‫⁬‬‏‪⁬⁭‎‎‬‮‬‍⁬‎⁭‌⁫‏‭⁫⁯⁯⁪⁪‌⁭‮‭‎‎​‭⁬‮‮("");
      }
      if (!\u003CModule\u003E.\u206A⁯⁮‪⁪‬‍‪⁪​⁫​‫‍⁪⁬⁮⁭‌‮⁭‬​‫‌⁯⁬⁪‬‬‌‫⁭‏‭​⁪⁯‫⁮‮(thread))
        \u003CModule\u003E.\u202E⁯⁯‮‮‏​‏​‪⁪⁫⁯⁬‭⁭‌⁭‫⁯‮‮​⁮‬‏‫‫‪⁫⁬‮⁮‌‪⁭⁭⁫⁬⁪‮("");
      \u003CModule\u003E.\u206C⁭‭‌‮‭​⁮‏‬‎⁫‎‮‫⁪‮⁫‪⁮‌⁫‫‪⁮‭⁭‬‍‬‎⁭‪‌‫‭‫⁪⁫⁪‮(1000);
    }
  }

  static string \u202B‎‮‎⁬‫⁭‭‌⁪‏‌‪⁮‫‌‪‬⁪‬‬⁫‍⁮⁯‭​‌‎⁪⁬‬​‍⁭‏‭‍‍⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

  static string \u202C‪‎⁬⁯⁯‪⁪‏‮‏​‎⁮⁯‏‮⁫⁭‮‍‭⁮⁭‬‫⁮⁭‪‌‬⁬‮⁫​⁪⁬⁬‍‮([In] string obj0) => Environment.GetEnvironmentVariable(obj0);

  static string \u206B⁮‎​‫⁪​‏‬⁯​‎‍⁭‮‫⁯⁭​‮‫⁪‎⁪⁭‏⁫‏⁮⁫‌‮‭⁬⁫​‭⁬‮⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

  static string \u200D‌‍‌⁭⁬‫‮‍⁫⁯⁪⁮‍‪⁫‬‭‪⁮‮⁯‎‮‎⁬‪⁪‬​‬‏‮⁫‎⁮⁭‭⁮‭‮([In] string obj0) => Environment.GetEnvironmentVariable(obj0);

  static void \u200D⁫‪⁬‭⁮⁫‪⁫‎‭⁪⁬‭‏‪‫‌‬​⁮‎‏⁮‫⁪⁭‬‭‬‫‭‌⁫‍⁬⁪‮‍‪‮([In] string obj0) => Environment.FailFast(obj0);

  static string \u202C⁮⁭⁬⁯‎​‎⁮‏‮‎‭‪‪⁮‪‌‭⁯‏‫‌‎⁪⁫‍⁮‏⁫‍‍⁬‫‍‪⁪⁪​‮‮([In] Process obj0) => obj0.ProcessName;

  static string \u200E‎‭‏‫‎‫⁬‌‎‪‍‬⁮‮⁭‎​​⁯⁮‭‏‮‌‭‌‭‭‎‭‎‬‫‫‏⁮⁮‮‮‮([In] string obj0) => obj0.ToLower();

  static bool \u206A⁪⁭​⁮‫‪⁫‫‭‪‌‎⁪‪⁬​​‏⁬‎‏‌‍​⁫⁪⁬⁯‌⁪⁮‮‌‪‍⁫⁪‪‫‮([In] string obj0, [In] string obj1) => obj0.Contains(obj1);

  static void \u202C⁮‏⁫​⁯​‌‬​‪⁮⁪‫‭⁫⁮⁫‫⁪‬‬​⁭‎⁪‮⁯⁭‎‪‌​⁯⁭‭‫​⁫‎‮([In] string obj0) => Environment.FailFast(obj0);

  static Thread \u206A‭⁬⁭‎⁬​​⁮‎​⁭‌‍⁯‭‌‍‫‪‭⁬‎⁪‫⁪⁭‭‬⁭⁮⁪⁮‏⁪‍‎⁯​⁫‮([In] ParameterizedThreadStart obj0) => new Thread(obj0);

  static void \u200E‪‫⁮‎⁫‫⁯‪‫⁭‏‍‎⁮‫‏‪⁬⁪​⁬⁯⁭‍‬‭‎⁫⁯‪‬⁬‪⁭‍⁫⁭‏‭‮([In] Thread obj0, [In] bool obj1) => obj0.IsBackground = obj1;

  static void \u202E‌‌‍‮⁪‮⁫‍‎‍⁬⁬⁮⁪⁯⁯⁭‎‌‬‭‫⁫⁯‌‬‮‪‎‌‍​‏‍‍⁭‭‎‫‮([In] Thread obj0, [In] object obj1) => obj0.Start(obj1);

  static Thread \u200E⁭‏‫‬⁬‫‭‮‫‍‪‪​‎‌⁫‪‪‬⁫⁫‍‫⁭⁯⁯⁪⁯⁪‌⁫​‍‬‮‫⁫‏⁮‮([In] ParameterizedThreadStart obj0) => new Thread(obj0);

  static void \u206F‏⁭⁬⁯‫⁪⁯⁪​⁬⁯‮⁫⁪⁪‬⁯‮​⁫‎⁯‮‌⁮‫⁯‫⁭‮‭‏‬‌‪‮⁫‏‬‮([In] Thread obj0, [In] bool obj1) => obj0.IsBackground = obj1;

  static Thread \u202C⁬‮‪‏‌‫‪‬‎⁫​​⁪‏‌‬⁬⁬‍‌​⁬⁯⁫⁭‪‎⁯⁭⁫​⁬‎⁬‮⁫‮‏⁫‮() => Thread.CurrentThread;

  static void \u206E‏‫⁯⁯⁪⁮⁬‏⁫⁯⁯​⁭⁮⁮‌‏‪‪‌​‭​‬⁭⁮⁪‏‫‫⁯⁫⁯‌⁭‍⁯⁪‬‮([In] Thread obj0, [In] object obj1) => obj0.Start(obj1);

  static void \u206D‏‎‪‮‏⁪‪‏‬‫⁭‬​⁬‮⁬‎​‎⁬‫⁬‭‏⁬‎‌⁪‍⁮⁪⁭⁬⁯⁪​‬‪⁪‮([In] int obj0) => Thread.Sleep(obj0);

  static bool \u202C‪​⁭‬‬‌​‪⁪‮‌‬‭‪⁭⁬⁮‌‎‌‬‭​⁪​⁪⁯⁬‬‌‬‌‪⁫⁪‮⁮‍‭‮() => Debugger.IsAttached;

  static bool \u200B​‍‭‬‬⁫⁪‪⁫⁪‎‫‬⁮​⁮‪⁬​‫‍⁭‍‍‮‌‎⁫⁪⁬‮‍⁫‬‏‌‫‮‌‮() => Debugger.IsLogging();

  static void \u202A​‍⁮⁬‏‍‫‍‎‎⁫⁫‮‬⁭​‬‪‍‪‌⁬⁭‭⁬‍‮⁭‏⁪‬⁫⁫‌‎⁮⁪‮‌‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u200C‌‍​⁭‍‏⁭‮‍‭⁭‍‏‫⁯‪‏⁫‫‫⁫⁭⁯⁭⁭‬‍​‎⁯⁬⁬⁫‎‌⁮⁭‭‌‮([In] string obj0) => Environment.FailFast(obj0);

  static Process \u202C‎‎‌⁪⁪‍‭⁯‎​⁫⁯‪‬⁬‬‪⁫‏⁪‍⁬⁭⁭⁫​⁪⁬‫⁮⁫⁮⁬⁮⁯‏⁯‍‬‮() => Process.GetCurrentProcess();

  static IntPtr \u200D‌‭‍⁫‍⁫‭‏‎‮‏⁪‭‍‫⁬​‍​‍‭‭‮‪‭‌⁬⁬⁬‮‬‬‏‮‫‫​‎⁮‮([In] Process obj0) => obj0.Handle;

  static void \u200B‪‎‌⁮‪⁪⁯‪‬⁬⁮‍⁭‬‮⁯‌‏‎​‫‍‏‬‭‮‭‍‫‪⁬⁫⁮⁬⁭⁭⁯⁫‌‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u206E‌⁯​‭⁯⁭‪‏‭‌‍‪‬‬⁭⁪⁬⁬‭‎‫⁪⁮​‏‬​⁫‏‏⁪⁪‬‍⁭⁪‫‏‭‮([In] Process obj0) => obj0.Close();

  static void \u200E⁯​⁮‌⁭‌‬‍‏⁭‌‫⁪⁭‎‭⁭⁮‫‫⁯‫‌‭‏⁫‪‮⁯‭‍⁮​⁬‬⁬⁯‌‮‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u202B‍‏‮‍‫⁬‬‏‪⁬⁭‎‎‬‮‬‍⁬‎⁭‌⁫‏‭⁫⁯⁯⁪⁪‌⁭‮‭‎‎​‭⁬‮‮([In] string obj0) => Environment.FailFast(obj0);

  static bool \u206A⁯⁮‪⁪‬‍‪⁪​⁫​‫‍⁪⁬⁮⁭‌‮⁭‬​‫‌⁯⁬⁪‬‬‌‫⁭‏‭​⁪⁯‫⁮‮([In] Thread obj0) => obj0.IsAlive;

  static void \u202E⁯⁯‮‮‏​‏​‪⁪⁫⁯⁬‭⁭‌⁭‫⁯‮‮​⁮‬‏‫‫‪⁫⁬‮⁮‌‪⁭⁭⁫⁬⁪‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u206C⁭‭‌‮‭​⁮‏‬‎⁫‎‮‫⁪‮⁫‪⁮‌⁫‫‪⁮‭⁭‬‍‬‎⁭‪‌‫‭‫⁪⁫⁪‮([In] int obj0) => Thread.Sleep(obj0);

  private struct \u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮
  {
    internal IntPtr \u202B‮⁭‎‬⁬⁮‏‎⁫⁭⁬​‎‫‌‍⁭‍​​‎​⁮‭⁫‫⁯⁪‬‭⁭‏‮‬‎⁯⁪‍‏‮;
    internal IntPtr \u206E‬‪‮​⁮⁫​⁭⁬‪‎‮‏‎‬‮‌‌⁮‍‎⁬‍‌⁫‫⁯⁯‬⁬‍‬​⁪‪⁭‭‭⁬‮;
    internal IntPtr \u206F⁭‮‭⁫⁬‬⁭⁭‎‌‬‮⁮‌⁫‌​⁬‌‭⁬‭‫⁪⁭⁪‌‏⁮‭⁯‫‭‫‎⁫‏‏⁯‮;
    internal IntPtr \u200E‪​‍⁬⁪⁯⁭‏‬‏‭⁭‎‏⁪‏‎‭⁯‍⁪‫‎‍‎⁭‪‍​‍⁬​‮⁬‌⁪⁯‬⁮‮;
    internal IntPtr \u206E‎⁯⁪⁮‮⁬⁫‬‍‫‍⁯‭‌⁪⁯​‎‪‬‪⁫‭‭⁪⁭‬‪​‏⁬⁯​‫⁪⁪⁪‮;
    internal IntPtr \u202C‍⁪‎⁯‎⁪⁭‫‮‬⁯‏⁪‪⁭‎‪‍‬‮⁫‮⁮⁭⁪⁬‪​‮⁮‮‏‪⁬⁭⁪‪⁬⁭‮;

    [DllImport("ntdll.dll", EntryPoint = "NtQueryInformationProcess")]
    private static extern int \u206E‭⁫‪⁮‍​⁯⁭⁮‫⁬⁪⁫​⁮⁯⁪⁬⁪⁫⁫‏‫‭‍⁯‌⁪‌⁯⁬‍‬‭‪​‏‮‮‮(
      [In] IntPtr obj0,
      [In] int obj1,
      [In] ref \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮ obj2,
      [In] int obj3,
      [In] ref int obj4);

    internal Process \u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮() => \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮(\u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u206E​⁬⁬⁯‪⁯⁫​⁫‍‍‪‪‏‪‍​‍⁬‍⁯‎‌⁯⁬⁫⁪‪‫‫​‭‎⁬⁮‬⁬‏‎‮(\u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u206D⁭‎‌⁫⁫​⁬‏‭⁮⁬‫⁪‬‍‌​⁭‮‍‭‎⁬⁪‫‬‎‍⁮⁬‪⁯‏⁪‏‍⁫⁯‬‮()));

    internal static Process \u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮([In] int obj0) => \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮(\u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u206F⁭‌‌‎⁯⁪⁫⁫⁮‫‪‭⁭‬⁮‌⁭⁬‫⁪​‎‭⁯‬‬⁫‬‍‏⁬‮‮⁯‏‌⁬⁭‌‮(\u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u202A‬‌‌⁮⁪⁭⁮‌​‌‍‍⁭‭‮⁭‮‪⁫‮‪​⁭‍‍‬⁯‭‫‍‎⁯‮‏⁪‬⁬‪⁭‮(obj0)));

    internal static Process \u202B‬⁯‮⁬⁭⁭​⁫‫⁮‭‎⁮⁮​‎​‭‬‪‫​⁮​‪​⁫‎‬‍‏⁭​​‏​⁮‎‭‮([In] IntPtr obj0)
    {
      \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮ obj = new \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮();
      int num1;
      int num2 = \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u206E‭⁫‪⁮‍​⁯⁭⁮‫⁬⁪⁫​⁮⁯⁪⁬⁪⁫⁫‏‫‭‍⁯‌⁪‌⁯⁬‍‬‭‪​‏‮‮‮(obj0, 0, ref obj, \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u206B‭​‏‬⁫‌‌‪‎⁬⁮‌‬‍‮⁪‎‮‬⁭‫‮⁫⁮‪‍⁬‌​‏⁪⁬‪‭​‭‮⁫‬‮((object) obj), ref num1);
      if (num2 != 0)
        throw \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u200F‌‪⁫⁯‏‮​​‪‫‌⁯​‍⁯⁭‎‎‮‪​⁯⁭⁫‪‭‎⁯‭⁪‪​⁬⁯⁫‪​‌‏‮(num2);
      try
      {
        return \u003CModule\u003E.\u206F⁬⁬‍⁪‎‍⁮‬⁭⁭‫⁪‫‮‬‌​‏⁯⁭‬⁬⁭‫‪⁯‫‍⁭‍⁫‫‎⁭‫‬⁫⁫⁭‮.\u206F‭⁪‪⁪⁬⁯​‌‍‬​⁪‏‪‮‌‫⁭‍⁬‬​⁭‍‍​⁫⁮‫‍‪⁫⁮‫⁫‏⁪‬⁭‮(obj.\u202C‍⁪‎⁯‎⁪⁭‫‮‬⁯‏⁪‪⁭‎‪‍‬‮⁫‮⁮⁭⁪⁬‪​‮⁮‮‏‪⁬⁭⁪‪⁬⁭‮.ToInt32());
      }
      catch (ArgumentException ex)
      {
        return (Process) null;
      }
    }

    static Process \u206D⁭‎‌⁫⁫​⁬‏‭⁮⁬‫⁪‬‍‌​⁭‮‍‭‎⁬⁪‫‬‎‍⁮⁬‪⁯‏⁪‏‍⁫⁯‬‮() => Process.GetCurrentProcess();

    static IntPtr \u206E​⁬⁬⁯‪⁯⁫​⁫‍‍‪‪‏‪‍​‍⁬‍⁯‎‌⁯⁬⁫⁪‪‫‫​‭‎⁬⁮‬⁬‏‎‮([In] Process obj0) => obj0.Handle;

    static Process \u202A‬‌‌⁮⁪⁭⁮‌​‌‍‍⁭‭‮⁭‮‪⁫‮‪​⁭‍‍‬⁯‭‫‍‎⁯‮‏⁪‬⁬‪⁭‮([In] int obj0) => Process.GetProcessById(obj0);

    static IntPtr \u206F⁭‌‌‎⁯⁪⁫⁫⁮‫‪‭⁭‬⁮‌⁭⁬‫⁪​‎‭⁯‬‬⁫‬‍‏⁬‮‮⁯‏‌⁬⁭‌‮([In] Process obj0) => obj0.Handle;

    static int \u206B‭​‏‬⁫‌‌‪‎⁬⁮‌‬‍‮⁪‎‮‬⁭‫‮⁫⁮‪‍⁬‌​‏⁪⁬‪‭​‭‮⁫‬‮([In] object obj0) => Marshal.SizeOf(obj0);

    static Win32Exception \u200F‌‪⁫⁯‏‮​​‪‫‌⁯​‍⁯⁭‎‎‮‪​⁯⁭⁫‪‭‎⁯‭⁪‪​⁬⁯⁫‪​‌‏‮([In] int obj0) => new Win32Exception(obj0);

    static Process \u206F‭⁪‪⁪⁬⁯​‌‍‬​⁪‏‪‮‌‫⁭‍⁬‬​⁭‍‍​⁫⁮‫‍‪⁫⁮‫⁫‏⁪‬⁭‮([In] int obj0) => Process.GetProcessById(obj0);
  }
}
