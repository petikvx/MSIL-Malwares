// Decompiled with JetBrains decompiler
// Type: c.Filter.InterceptorThreadFilter
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Adapter;
using c.Configurations;
using c.Items;
using c.Specifications;
using c.Wrappers;
using Fireball.Docking;
using Fireball.Windows.Forms;
using GLuaR.Attributes;
using GLuaR.Exporters;
using GLuaR.Importers;
using GLuaR.Maps;
using GLuaR.Queues;
using GLuaR.Shared;
using GLuaR.Workers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace c.Filter
{
  public class InterceptorThreadFilter
  {
    private readonly ClassWrapper reponse;
    private readonly ComparatorPredicateMapping rules;
    private readonly SingletonThreadFilter _Annotation;
    private readonly ConfigPredicateMapping _Queue;
    public ContextMenuStrip _Watcher;
    public ContextMenuStrip val;
    public ContextMenuStrip @object;
    public ImageList container;
    public DockContainer exporter;
    public ExceptionComparatorSpec merchant;
    public ContextMenuStrip _Consumer;
    public ContextMenuStrip m_Writer;
    public TreeView _Value;
    private bool m_Decorator;
    private RequestComparatorSpec _Tokenizer;
    private DicWrapper observer;
    private StatePredicateMapping m_Instance;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public InterceptorThreadFilter(
      DockContainer i,
      ContextMenuStrip visitor,
      ContextMenuStrip proc,
      ContextMenuStrip vis2,
      ContextMenuStrip selection3,
      ContextMenuStrip ivk4,
      ImageList cust5)
    {
      int num1 = 6;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 6:
            ImporterMapper.InitAccount();
            num2 = 5;
            break;
          case 1:
          case 5:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.exporter = i;
            this.container = cust5;
            this._Annotation = new SingletonThreadFilter(this);
            this._Value = this._Annotation.m_ConfigWrapper;
            this.container = this._Annotation.stateWrapper;
            num2 = 4;
            break;
          case 2:
            this.rules = ComparatorPredicateMapping.Load(Application.StartupPath + "\\code.db");
            this._Queue = new ConfigPredicateMapping(this.rules, cust5, this);
            num1 = 8;
            continue;
          case 3:
            this.@object = this._Annotation._ResolverWrapper;
            num2 = 2;
            break;
          case 4:
            this._Annotation.Show(i, (DockState) 8);
            ClassWrapper classWrapper = new ClassWrapper("http://code.google.com/p/gluar/issues/list");
            classWrapper.TabText = "Bug Reporter";
            this.reponse = classWrapper;
            this.m_Writer = visitor;
            num2 = 7;
            break;
          case 7:
            this.val = proc;
            this._Consumer = this._Annotation.m_StatusWrapper;
            this._Watcher = this._Annotation.importerWrapper;
            goto case 3;
          case 8:
            goto label_10;
          default:
            num1 = 3;
            continue;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool SetWrapper() => this.merchant != null;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool LoginWrapper() => this.merchant.RemoveField();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CloneWrapper(Page def)
    {
      int num = 5;
      bool flag1;
      bool flag2;
      int index;
      IDockableWindow[] documents;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 5:
            documents = this.exporter.Documents;
            if (InterceptorThreadFilter.MapManager())
            {
              num = 1;
              continue;
            }
            goto case 1;
          case 1:
            index = 0;
            goto case 2;
          case 2:
          case 4:
            if (index >= documents.Length)
            {
              flag2 = false;
              if (!InterceptorThreadFilter.RemoveManager())
              {
                num = 7;
                continue;
              }
              goto case 0;
            }
            else
            {
              DockableWindow spec = (DockableWindow) documents[index];
              if (!InterceptorThreadFilter.ComputeWrapper(spec))
              {
                flag1 = ((Control) spec).Tag == def;
                goto case 6;
              }
              else
              {
                if (InterceptorThreadFilter.MapManager())
                {
                  num = 3;
                  continue;
                }
                goto label_14;
              }
            }
          case 3:
            ++index;
            num = 2;
            continue;
          case 6:
            if (!flag1)
              goto case 3;
            else
              goto label_2;
          case 7:
            goto label_14;
          default:
            if (true)
            {
              num = 6;
              continue;
            }
            goto case 2;
        }
      }
label_2:
      flag2 = true;
label_14:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool SortWrapper(DescriptorGetterWorker info)
    {
      int num1 = 4;
      bool flag;
      while (true)
      {
        int num2 = num1;
        int index;
        IDockableWindow[] documents;
        DockableWindow spec;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              documents = this.exporter.Documents;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_2;
            case 1:
              if (index < documents.Length)
              {
                spec = (DockableWindow) documents[index];
                if (!InterceptorThreadFilter.ComputeWrapper(spec))
                {
                  if (InterceptorThreadFilter.MapManager())
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_14;
                }
                else
                  goto label_4;
              }
              else
                goto label_9;
            case 2:
              index = 0;
              goto case 1;
            case 3:
            case 5:
              goto label_1;
            case 6:
              goto label_2;
            case 7:
              goto label_14;
            default:
              if (InterceptorThreadFilter.MapManager())
              {
                num2 = 5;
                continue;
              }
              goto case 1;
          }
        }
label_2:
        ++index;
        num1 = 1;
        continue;
label_4:
        if (((DescriptorGetterWorker) ((Control) spec).Tag)._Client != info._Client)
          goto label_2;
        else
          break;
label_9:
        flag = false;
        num1 = 7;
      }
label_1:
      flag = true;
label_14:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CustomizeWrapper()
    {
      int num1 = 6;
      if (InterceptorThreadFilter.MapManager())
        goto label_7;
label_1:
      int index = 0;
      goto label_10;
label_6:
      int num2;
      num1 = num2;
label_7:
      IDockableWindow[] documents;
      DockableWindow spec;
      bool flag1;
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            if (flag1)
            {
              flag2 = true;
              if (InterceptorThreadFilter.MapManager())
              {
                num1 = 5;
                continue;
              }
              goto label_15;
            }
            else
              goto label_9;
          case 1:
          case 4:
            goto label_1;
          case 2:
          case 3:
            if (InterceptorThreadFilter.ComputeWrapper(spec))
            {
              flag1 = ((DescriptorGetterWorker) ((Control) spec).Tag)._Client == (PreLinkToolDispID) 0;
              goto case 0;
            }
            else
              goto label_9;
          case 5:
          case 7:
            goto label_15;
          case 6:
            documents = this.exporter.Documents;
            num1 = 4;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      num2 = 0;
      goto label_6;
label_9:
      ++index;
      goto label_10;
label_15:
      return flag2;
label_10:
      if (index < documents.Length)
      {
        spec = (DockableWindow) documents[index];
        num2 = 3;
        goto label_6;
      }
      else
      {
        flag2 = false;
        num2 = 7;
        goto label_6;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ReadWrapper()
    {
      int num1 = 5;
      if (true)
        goto label_10;
label_1:
      IDockableWindow[] documents = this.exporter.Documents;
      int num2 = 3;
label_9:
      num1 = num2;
label_10:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            goto label_1;
          case 1:
          case 2:
            goto label_3;
          case 3:
            goto label_5;
          case 4:
            flag = false;
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_3;
          case 6:
          case 7:
            goto label_12;
          default:
            goto label_11;
        }
      }
label_3:
      int index;
      for (; index < documents.Length; ++index)
      {
        DockableWindow spec = (DockableWindow) documents[index];
        if (!InterceptorThreadFilter.ComputeWrapper(spec) || ((DescriptorGetterWorker) ((Control) spec).Tag)._Client != (PreLinkToolDispID) 1)
          continue;
        flag = true;
        goto label_12;
      }
      num2 = 4;
      goto label_9;
label_5:
      index = 0;
      num2 = 1;
      goto label_9;
label_11:
      num2 = 6;
      goto label_9;
label_12:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static bool ComputeWrapper(DockableWindow spec) => spec != null && ((object) spec).GetType().Name != "CodeTab";

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool VerifyWrapper() => this.exporter.Documents.Length != 0;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool AwakeWrapper()
    {
      int num1 = 6;
      if (InterceptorThreadFilter.MapManager())
        goto label_9;
label_1:
      bool flag1 = true;
      goto label_16;
label_9:
      while (true)
      {
        int index;
        IDockableWindow[] documents;
        int num2;
        bool flag2;
        bool flag3;
        switch (num1)
        {
          case 0:
          case 2:
            index = 0;
            break;
          case 1:
          case 4:
            if (!flag3)
            {
              flag1 = false;
              num2 = 7;
              goto label_8;
            }
            else
            {
              documents = this.exporter.Documents;
              if (true)
              {
                num1 = 0;
                continue;
              }
              goto label_16;
            }
          case 3:
label_12:
            if (!flag2)
            {
              ++index;
              break;
            }
            if (InterceptorThreadFilter.MapManager())
            {
              num1 = 5;
              continue;
            }
            goto case 1;
          case 5:
            goto label_1;
          case 6:
            flag3 = this.VerifyWrapper();
            num2 = 4;
            goto label_8;
          case 7:
            goto label_16;
          default:
            num1 = 3;
            continue;
        }
        if (index < documents.Length)
        {
          flag2 = InterceptorThreadFilter.CollectWrapper((DockableWindow) documents[index]);
          goto label_12;
        }
        else
          break;
label_8:
        num1 = num2;
      }
      flag1 = false;
label_16:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ListWrapper() => InterceptorThreadFilter.ComputeWrapper((DockableWindow) this.exporter.ActiveDocument);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static bool CollectWrapper(DockableWindow config) => config != null && ((object) config).GetType().Name == "CodeTab";

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool InsertWrapper(char def)
    {
      int num1 = 1;
      if (true)
        goto label_7;
label_1:
      if (def != '.' && def != ':' && def != '&' && def != '~')
        num1 = 7;
      else
        goto label_14;
label_7:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            if (def != '\t' && def != '\r' && def != '\n')
            {
              num2 = 5;
              break;
            }
            goto label_14;
          case 1:
            if (def != ' ')
            {
              num1 = 0;
              continue;
            }
            goto label_14;
          case 2:
          case 5:
            if (def == '(')
              goto label_14;
            else
              goto case 3;
          case 3:
          case 6:
            if (def != '|' && def != '!')
            {
              num2 = 4;
              break;
            }
            goto label_14;
          case 4:
            goto label_1;
          case 7:
            goto label_13;
          default:
            int num3 = 6;
            num1 = InterceptorThreadFilter.RemoveManager() ? num3 : num3;
            continue;
        }
        num1 = num2;
      }
label_13:
      int num4 = def == '-' ? 1 : 0;
      goto label_15;
label_14:
      num4 = 1;
label_15:
      return num4 != 0;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool WriteWrapper(string reference)
    {
      int num1 = 3;
      if (true)
        goto label_14;
label_1:
      bool flag1;
      foreach (Page page in this.merchant.broadcaster)
      {
        int num2 = 2;
        if (true)
          goto label_5;
label_4:
        if (!(page.m_Worker == reference))
          continue;
        goto label_7;
label_5:
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_4;
            case 1:
            case 3:
              goto label_7;
            case 4:
              goto label_16;
            default:
              num2 = 3;
              continue;
          }
        }
label_7:
        flag1 = true;
        num2 = 4;
        goto label_5;
      }
label_10:
      flag1 = false;
      int num3 = 5;
label_13:
      num1 = num3;
label_14:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_11;
          case 1:
          case 4:
            goto label_12;
          case 2:
            goto label_1;
          case 5:
            goto label_16;
          default:
            num1 = 2;
            continue;
        }
      }
label_11:
      bool flag2 = this.SetWrapper();
      num3 = 4;
      goto label_13;
label_12:
      if (!flag2)
        goto label_10;
      else
        goto label_1;
label_16:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string RegisterWrapper() => this.VerifyWrapper() ? this.exporter.ActiveDocument.DockHandler.TabText : "";

    [MethodImpl(MethodImplOptions.NoInlining)]
    public TreeNode LogoutWrapper() => this._Value.SelectedNode ?? (TreeNode) null;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CompareWrapper()
    {
      int num1 = 4;
      if (InterceptorThreadFilter.MapManager())
        goto label_6;
label_1:
      this.InterruptWrapper();
      this.m_Instance._MapperWrapper.Items.Clear();
      num1 = 0;
label_6:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            this._Tokenizer.Hide();
            ((Component) this._Tokenizer).Dispose();
            goto case 1;
          case 1:
          case 3:
            this.m_Instance.Hide();
            ((Component) this.m_Instance).Dispose();
            num2 = 6;
            break;
          case 4:
            this.DefineWrapper();
            num2 = 5;
            break;
          case 5:
            goto label_1;
          case 6:
            goto label_8;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DefineWrapper() => this._Value.Nodes.Clear();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InterruptWrapper()
    {
      int num1 = 6;
      if (!InterceptorThreadFilter.RemoveManager())
        goto label_13;
label_1:
      IDockableWindow[] documents = this.exporter.Documents;
      int num2 = 1;
label_12:
      num1 = num2;
label_13:
      bool flag;
      DockableWindow spec;
      while (true)
      {
        int index;
        bool wrapper;
        switch (num1)
        {
          case 0:
          case 4:
            if (!flag)
              break;
            goto label_4;
          case 1:
            index = 0;
            goto label_5;
          case 2:
          case 5:
label_10:
            if (!wrapper)
              break;
            goto label_7;
          case 3:
            goto label_7;
          case 6:
            goto label_1;
          case 7:
            goto label_11;
          default:
            num1 = 3;
            continue;
        }
        ((Form) spec).Close();
label_4:
        ++index;
label_5:
        if (index >= documents.Length)
        {
          num1 = 7;
        }
        else
        {
          spec = (DockableWindow) documents[index];
          wrapper = InterceptorThreadFilter.ComputeWrapper(spec);
          if (true)
            num1 = 5;
          else
            goto label_10;
        }
      }
label_7:
      flag = ((DescriptorGetterWorker) ((Control) spec).Tag)._Client == (PreLinkToolDispID) 0;
      num2 = 0;
      goto label_12;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void QueryWrapper()
    {
      this.DefineWrapper();
      this.OrderWrapper(this.merchant);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void MapWrapper(Page item)
    {
      int num1 = 3;
      IEnumerator enumerator;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              if (!flag)
              {
                enumerator = this._Value.Nodes[0].Nodes.GetEnumerator();
                if (InterceptorThreadFilter.MapManager())
                {
                  num2 = 5;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_8;
            case 2:
              goto label_21;
            case 3:
              goto label_1;
            case 4:
              goto label_15;
            case 5:
              goto label_10;
            default:
              if (InterceptorThreadFilter.MapManager())
              {
                num2 = 4;
                continue;
              }
              goto label_7;
          }
        }
label_1:
        flag = !this.SetWrapper();
        num1 = 0;
      }
label_8:
      return;
label_21:
      return;
label_15:
      return;
label_7:
      return;
label_10:
      try
      {
label_20:
        while (enumerator.MoveNext())
        {
          TreeNode current = (TreeNode) enumerator.Current;
          int num3 = 3;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 3:
                if (!(current.Tag is Page))
                {
                  num3 = 4;
                  continue;
                }
                if (current.Tag != item)
                  goto label_19;
                else
                  goto case 2;
              case 1:
              case 4:
                goto label_20;
              case 2:
                current.Remove();
                num3 = 5;
                continue;
              case 5:
                goto label_19;
              default:
                num3 = 2;
                continue;
            }
          }
label_19:;
        }
      }
      finally
      {
        if (enumerator is IDisposable disposable)
          disposable.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DisableWrapper(Page param, string result)
    {
      int num1 = 3;
      if (InterceptorThreadFilter.MapManager())
        goto label_7;
label_1:
      bool flag1 = !this.SetWrapper();
      int num2 = 0;
label_6:
      num1 = num2;
label_7:
      IEnumerator enumerator;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            if (!flag1)
            {
              enumerator = this._Value.Nodes[0].Nodes.GetEnumerator();
              num1 = 5;
              continue;
            }
            goto label_5;
          case 2:
            goto label_23;
          case 3:
            goto label_1;
          case 4:
            goto label_13;
          case 5:
            goto label_9;
          default:
            goto label_8;
        }
      }
label_5:
      return;
label_23:
      return;
label_13:
      return;
label_8:
      num2 = 4;
      goto label_6;
label_9:
      try
      {
        while (enumerator.MoveNext())
        {
          TreeNode current = (TreeNode) enumerator.Current;
          int num3 = 3;
          if (true)
            goto label_16;
label_11:
          int num4;
          bool flag2;
          if (!(current.Tag is Page))
          {
            num4 = 4;
          }
          else
          {
            flag2 = current.Tag == param;
            goto label_18;
          }
label_15:
          num3 = num4;
label_16:
          switch (num3)
          {
            case 0:
            case 3:
              goto label_11;
            case 1:
            case 4:
              continue;
            case 2:
              break;
            case 5:
              goto label_20;
            default:
              num4 = 2;
              goto label_15;
          }
label_18:
          if (flag2)
          {
            current.Text = result;
            if (!InterceptorThreadFilter.RemoveManager())
            {
              num3 = 5;
              goto label_16;
            }
          }
          else
            goto label_21;
label_20:
label_21:;
        }
      }
      finally
      {
        if (enumerator is IDisposable disposable)
          disposable.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InvokeWrapper(string task)
    {
      int num1 = 4;
      if (true)
        goto label_5;
label_1:
      this._Value.Nodes[0].Text = "Project '" + task + "'";
      int num2 = 5;
      num1 = InterceptorThreadFilter.RemoveManager() ? num2 : num2;
label_5:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            flag = this.SetWrapper();
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto label_3;
          case 1:
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 5:
            goto label_7;
          default:
            num1 = 1;
            continue;
        }
      }
label_3:
      if (!flag)
        return;
      goto label_1;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RateWrapper() => this._Queue.Show(this.exporter);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PrintWrapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CountWrapper()
    {
      int num1 = 5;
label_9:
      while (true)
      {
        bool flag;
        int num2;
        IDockableWindow[] documents;
        int index;
        DockableWindow spec;
        switch (num1)
        {
          case 0:
          case 5:
            flag = this.CustomizeWrapper();
            num2 = 1;
            break;
          case 1:
            if (flag)
            {
              documents = this.exporter.Documents;
              index = 0;
              num2 = 2;
              break;
            }
            goto label_7;
          case 2:
          case 4:
            while (index >= documents.Length)
            {
              if (true)
              {
                num1 = 7;
                goto label_9;
              }
            }
            spec = (DockableWindow) documents[index];
            if (!InterceptorThreadFilter.ComputeWrapper(spec) || ((DescriptorGetterWorker) ((Control) spec).Tag)._Client != (PreLinkToolDispID) 0)
              goto label_12;
            else
              goto case 3;
          case 3:
          case 6:
            ((Form) spec).Close();
            goto label_12;
          case 7:
            goto label_13;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        continue;
label_12:
        ++index;
        num1 = 4;
      }
label_7:
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CallWrapper()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_14;
            case 1:
              goto label_1;
            case 2:
              goto label_15;
            case 3:
              if (!flag)
              {
                if (!this.ReadWrapper())
                {
                  if (this.observer != null)
                  {
                    this.observer.Show(this.exporter, (DockState) 6);
                    num2 = 7;
                    continue;
                  }
                  goto label_3;
                }
                else
                  goto label_9;
              }
              else
                goto label_16;
            case 4:
            case 5:
              goto label_10;
            case 6:
              goto label_12;
            case 7:
              goto label_13;
            default:
              if (InterceptorThreadFilter.MapManager())
              {
                num2 = 6;
                continue;
              }
              goto case 3;
          }
        }
label_1:
        flag = !this.SetWrapper();
        num1 = 3;
        continue;
label_3:
        this.observer = new DicWrapper(this.merchant);
        goto label_12;
label_9:
        this.ManageWrapper();
        num1 = 0;
        continue;
label_12:
        this.observer.TabText = "[ Project Properties ]";
        num1 = 5;
      }
label_14:
      return;
label_15:
      return;
label_16:
      return;
label_10:
      this.observer.DockableAreas = (DockAreas) 32;
      this.observer.Show(this.exporter, (DockState) 6);
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ManageWrapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InstantiateWrapper()
    {
      int num1 = 5;
      if (true)
        goto label_8;
label_1:
      bool flag = !this.ReadWrapper();
      int num2 = 4;
label_7:
      num1 = num2;
label_8:
      IDockableWindow[] documents;
      int index;
      switch (num1)
      {
        case 0:
          index = 0;
          break;
        case 1:
        case 4:
          if (flag)
            return;
          documents = this.exporter.Documents;
          num2 = 0;
          goto label_7;
        case 2:
        case 3:
label_10:
          ++index;
          break;
        case 5:
          goto label_1;
        case 6:
          return;
        default:
          num2 = 2;
          goto label_7;
      }
      if (index < documents.Length)
      {
        DockableWindow dockableWindow = (DockableWindow) documents[index];
        goto label_10;
      }
      else
      {
        num2 = 6;
        goto label_7;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ReflectWrapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void OrderWrapper(ExceptionComparatorSpec v)
    {
      int num1 = 6;
      while (true)
      {
        List<Page>.Enumerator enumerator1;
        int num2;
        switch (num1)
        {
          case 0:
          case 6:
            this.merchant = v;
            num2 = 4;
            break;
          case 1:
          case 2:
            this._Value.Nodes.Add(new TreeNode()
            {
              Text = "Project '" + v.m_Product + "'",
              ImageKey = "root",
              Tag = (object) v,
              ContextMenuStrip = this._Consumer,
              SelectedImageKey = "root"
            });
            using (List<RefThreadFilter>.Enumerator enumerator2 = v.listener.GetEnumerator())
            {
label_23:
              while (enumerator2.MoveNext())
              {
                RefThreadFilter current = enumerator2.Current;
                int num3 = 2;
                TreeNode node;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 2:
                      node = new TreeNode()
                      {
                        Text = current.m_Database,
                        ContextMenuStrip = this.@object,
                        ImageKey = "project_folder_closed",
                        SelectedImageKey = "project_folder_closed",
                        Tag = (object) current
                      };
                      num3 = 4;
                      continue;
                    case 1:
                    case 4:
                      current.m_Class = node;
                      this._Value.Nodes[0].Nodes.Add(node);
                      goto case 3;
                    case 3:
                      current.CancelField(this, v);
                      num3 = 5;
                      continue;
                    case 5:
                      goto label_23;
                    default:
                      num3 = 3;
                      continue;
                  }
                }
              }
            }
            enumerator1 = v.broadcaster.GetEnumerator();
            goto case 5;
          case 3:
            this._Tokenizer.Show(this.exporter, (DockState) 4);
            this.m_Instance = new StatePredicateMapping(this);
            this.m_Instance.Show(this.exporter, (DockState) 4);
            this.m_Instance.OrderRule();
            num2 = 7;
            break;
          case 4:
            this.DefineWrapper();
            num2 = 1;
            break;
          case 5:
            try
            {
label_12:
              while (enumerator1.MoveNext())
              {
                Page current = enumerator1.Current;
                int num4 = 1;
                while (true)
                {
                  int num5 = num4;
                  bool flag;
                  TreeNode node1;
                  while (true)
                  {
                    switch (num5)
                    {
                      case 0:
                      case 3:
                        this._Value.Nodes[0].Nodes.Add(node1);
                        if (true)
                        {
                          num5 = 6;
                          continue;
                        }
                        goto label_12;
                      case 1:
                        goto label_11;
                      case 2:
                      case 4:
                        current.m_Expression = node1;
                        goto case 0;
                      case 5:
                        if (flag)
                        {
                          current.m_Base = false;
                          current.m_Connection = true;
                          node1 = new TreeNode()
                          {
                            Text = current.m_Reg,
                            ContextMenuStrip = this._Watcher,
                            ImageKey = "file_lost",
                            SelectedImageKey = "file_lost",
                            Tag = (object) current
                          };
                          if (true)
                          {
                            num5 = 4;
                            continue;
                          }
                          goto case 0;
                        }
                        else
                          goto label_6;
                      case 6:
                      case 7:
                        goto label_12;
                      default:
                        num5 = 0;
                        continue;
                    }
                  }
label_6:
                  current.m_Worker = v._Code + "\\" + current.m_Reg;
                  current.m_Connection = true;
                  current.m_Base = true;
                  TreeNode node2 = new TreeNode()
                  {
                    Text = current.m_Reg,
                    ContextMenuStrip = this._Watcher,
                    ImageKey = "code",
                    SelectedImageKey = "code",
                    Tag = (object) current
                  };
                  current.m_Expression = node2;
                  this._Value.Nodes[0].Nodes.Add(node2);
                  num4 = 7;
                  continue;
label_11:
                  flag = !File.Exists(v._Code + "\\" + current.m_Reg);
                  num4 = 5;
                }
              }
            }
            finally
            {
              enumerator1.Dispose();
            }
            this._Value.ExpandAll();
            this._Tokenizer = new RequestComparatorSpec(this);
            num2 = 3;
            break;
          case 7:
            goto label_24;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_24:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void StartWrapper()
    {
      this.merchant = (ExceptionComparatorSpec) null;
      this.CompareWrapper();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PushWrapper()
    {
      int num1 = 5;
      if (true)
        goto label_4;
label_1:
label_2:
      DialogResult dialogResult1 = ConsumerConfigConfig.MoveFactory("Opening a new project will close the current project. Continue?");
      goto label_24;
label_4:
      DialogResult dialogResult2;
      while (true)
      {
        int num2;
        DialogResult dialogResult3;
        bool flag;
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
            if (!flag)
            {
              this.merchant = ExceptionComparatorSpec.CalcField();
              if (this.merchant != null)
              {
                this.AssetWrapper();
                this.OrderWrapper(this.merchant);
                num2 = 10;
                break;
              }
              goto label_11;
            }
            else
            {
              num2 = 2;
              break;
            }
          case 2:
            if (!this.LoginWrapper())
            {
              dialogResult3 = ConsumerConfigConfig.MoveFactory("Your project has not been saved, would you like to do so now?");
              int num3 = 9;
              num1 = InterceptorThreadFilter.RemoveManager() ? num3 : num3;
              continue;
            }
            goto label_2;
          case 3:
            goto label_12;
          case 5:
            flag = this.SetWrapper();
            num2 = 1;
            break;
          case 6:
          case 8:
            if (dialogResult2 == DialogResult.Yes)
            {
              this.StartWrapper();
              this.PushWrapper();
              num2 = 3;
              break;
            }
            goto label_21;
          case 7:
            goto label_24;
          case 9:
            switch (dialogResult3)
            {
              case DialogResult.Cancel:
                goto label_20;
              case DialogResult.Yes:
                this.merchant.Save();
                num2 = 0;
                break;
              default:
                goto label_1;
            }
            break;
          case 10:
            goto label_26;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
      }
label_12:
      return;
label_20:
      return;
label_11:
      return;
label_21:
      if (dialogResult2 == DialogResult.No)
        ;
      return;
label_24:
      dialogResult2 = dialogResult1;
      if (dialogResult2 == DialogResult.Cancel)
        return;
      if (InterceptorThreadFilter.MapManager())
      {
        num1 = 8;
        goto label_4;
      }
label_26:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitWrapper()
    {
      int num1 = 9;
      if (true)
        goto label_34;
label_1:
      OpenFileDialog openFileDialog1;
      this.merchant._Code = new FileInfo(openFileDialog1.FileName).Directory.FullName;
      this.merchant.m_Proxy = true;
      foreach (RefThreadFilter task in this.merchant.listener)
      {
        int num2 = 2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_4;
            case 1:
            case 3:
              goto label_7;
            default:
              num2 = 3;
              continue;
          }
        }
label_4:
        task.FlushField(task, true);
label_7:;
      }
      this.OrderWrapper(this.merchant);
      int num3 = 11;
label_33:
      num1 = num3;
label_34:
      bool flag1;
      DialogResult dialogResult1;
      while (true)
      {
        bool flag2;
        DialogResult dialogResult2;
        switch (num1)
        {
          case 0:
          case 9:
            flag2 = this.SetWrapper();
            num1 = 3;
            continue;
          case 1:
            flag1 = this.merchant == null;
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto case 6;
          case 2:
            goto label_31;
          case 3:
            if (flag2)
            {
              if (!this.LoginWrapper())
              {
                dialogResult2 = ConsumerConfigConfig.MoveFactory("Your project has not been saved, would you like to do so now?");
                if (dialogResult2 != DialogResult.Cancel)
                {
                  num1 = 10;
                  continue;
                }
                goto label_36;
              }
              else
                break;
            }
            else
            {
              OpenFileDialog openFileDialog2 = new OpenFileDialog();
              openFileDialog2.Title = "Open project...";
              openFileDialog2.CheckFileExists = true;
              openFileDialog2.CheckPathExists = true;
              openFileDialog2.DereferenceLinks = true;
              openFileDialog2.Filter = "GLua Projects (*.glu)|*.glu";
              openFileDialog2.Multiselect = false;
              openFileDialog1 = openFileDialog2;
              if (openFileDialog1.ShowDialog() == DialogResult.OK)
              {
                this.merchant = ExceptionComparatorSpec.DestroyField(openFileDialog1.FileName);
                num1 = 1;
                continue;
              }
              goto label_24;
            }
          case 4:
            goto label_20;
          case 5:
          case 8:
            goto label_1;
          case 6:
label_13:
            break;
          case 7:
            goto label_28;
          case 10:
            switch (dialogResult2)
            {
              case DialogResult.Yes:
                this.merchant.Save();
                goto label_13;
              case DialogResult.No:
                goto label_13;
              default:
                goto label_38;
            }
          case 11:
            goto label_40;
          default:
            goto label_35;
        }
        dialogResult1 = ConsumerConfigConfig.MoveFactory("Opening a new project will close the current project. Continue?");
        if (dialogResult1 != DialogResult.Cancel)
        {
          int num4 = 2;
          num1 = InterceptorThreadFilter.RemoveManager() ? num4 : num4;
        }
        else
          break;
      }
      return;
label_36:
      return;
label_20:
      if (dialogResult1 == DialogResult.No)
        ;
      return;
label_24:
      return;
label_28:
      if (flag1)
        return;
      this.merchant._Interpreter = openFileDialog1.FileName;
      num3 = 5;
      goto label_33;
label_31:
      if (dialogResult1 == DialogResult.Yes)
      {
        this.StartWrapper();
        this.InitWrapper();
        return;
      }
      goto label_20;
label_35:
      num3 = 4;
      goto label_33;
label_38:
      num3 = 6;
      goto label_33;
label_40:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ValidateWrapper()
    {
      int num1 = 6;
      if (true)
        goto label_13;
label_1:
      DialogResult dialogResult;
      int num2;
      switch (dialogResult)
      {
        case DialogResult.Cancel:
          return;
        case DialogResult.Yes:
          this.merchant.Save();
          this.StartWrapper();
          return;
        case DialogResult.No:
          this.StartWrapper();
          num2 = 1;
          break;
        default:
          return;
      }
label_12:
      num1 = num2;
label_13:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
            goto label_4;
          case 2:
            while (!flag)
            {
              if (this.LoginWrapper())
              {
                this.StartWrapper();
                if (true)
                {
                  num1 = 8;
                  goto label_13;
                }
                else
                  goto case 6;
              }
              else if (!InterceptorThreadFilter.RemoveManager())
              {
                num1 = 7;
                goto label_13;
              }
            }
            goto label_18;
          case 3:
            goto label_3;
          case 5:
            goto label_2;
          case 6:
            flag = !this.SetWrapper();
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto label_11;
          case 7:
            goto label_11;
          case 8:
            goto label_19;
          default:
            goto label_14;
        }
      }
label_11:
      dialogResult = ConsumerConfigConfig.MoveFactory("Your project has not been saved, would you like to do so now?");
      goto label_1;
label_4:
      return;
label_3:
      return;
label_2:
      return;
label_14:
      num2 = 0;
      goto label_12;
label_18:
      num2 = 3;
      goto label_12;
label_19:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void AssetWrapper()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_9;
            case 1:
            case 6:
              if (flag1)
              {
                if (!(this.merchant._Interpreter == ""))
                {
                  this.merchant.Save();
                  num2 = 7;
                  continue;
                }
                goto label_13;
              }
              else
                goto label_2;
            case 3:
              goto label_1;
            case 4:
              goto label_7;
            case 5:
              goto label_10;
            case 7:
              goto label_14;
            default:
              goto label_6;
          }
        }
label_1:
        bool flag2;
        SaveFileDialog saveFileDialog1;
        if (!flag2)
        {
          this.merchant._Interpreter = saveFileDialog1.FileName;
          goto label_10;
        }
        else
          break;
label_6:
        num1 = 5;
        continue;
label_9:
        flag1 = this.SetWrapper();
        num1 = 6;
        continue;
label_10:
        this.merchant._Code = new FileInfo(this.merchant._Interpreter).Directory.FullName;
        num1 = 4;
        continue;
label_13:
        SaveFileDialog saveFileDialog2 = new SaveFileDialog();
        saveFileDialog2.Title = "Save project...";
        saveFileDialog2.AddExtension = true;
        saveFileDialog2.DefaultExt = ".glu";
        saveFileDialog2.Filter = "GLua Project (*.glu)|*.glu";
        saveFileDialog2.OverwritePrompt = true;
        saveFileDialog2.SupportMultiDottedExtensions = true;
        saveFileDialog2.ValidateNames = true;
        saveFileDialog1 = saveFileDialog2;
        flag2 = saveFileDialog1.ShowDialog() != DialogResult.OK;
        num1 = 3;
      }
      return;
label_7:
      this.merchant.Save();
      goto label_14;
label_2:
      return;
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DeleteWrapper()
    {
      if (!this.SetWrapper())
        ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void UpdateWrapper()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        OpenFileDialog openFileDialog1;
        string[] fileNames;
        int index;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_9;
            case 1:
              OpenFileDialog openFileDialog2 = new OpenFileDialog();
              openFileDialog2.Title = "Open file...";
              openFileDialog2.CheckFileExists = true;
              openFileDialog2.CheckPathExists = true;
              openFileDialog2.DereferenceLinks = true;
              openFileDialog2.Filter = "Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";
              openFileDialog2.Multiselect = true;
              openFileDialog1 = openFileDialog2;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_9;
            case 2:
              index = 0;
              goto case 5;
            case 4:
              if (openFileDialog1.ShowDialog() == DialogResult.OK)
              {
                fileNames = openFileDialog1.FileNames;
                num2 = 2;
                continue;
              }
              goto label_14;
            case 5:
            case 7:
              if (index >= fileNames.Length)
              {
                if (InterceptorThreadFilter.MapManager())
                {
                  num2 = 8;
                  continue;
                }
                goto case 1;
              }
              else
                goto label_5;
            case 6:
              goto label_13;
            case 8:
              goto label_2;
            default:
              if (InterceptorThreadFilter.MapManager())
              {
                num2 = 6;
                continue;
              }
              goto label_13;
          }
        }
label_5:
        string fileName = fileNames[index];
        Page info = new Page();
        info.m_Worker = fileName;
        num1 = 0;
        continue;
label_9:
        FileInfo fileInfo = new FileInfo(fileName);
        info.m_Reg = fileInfo.Name;
        info.m_Connection = true;
        this.ConnectWrapper(info);
label_13:
        ++index;
        num1 = 7;
      }
label_14:
      return;
label_2:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SelectWrapper(string reference)
    {
      int num1 = 1;
      Page info;
      while (true)
      {
        switch (num1)
        {
          case 0:
            FileInfo fileInfo = new FileInfo(reference);
            info.m_Reg = fileInfo.Name;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 2;
          case 1:
            info = new Page() { m_Worker = reference };
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 3;
          case 2:
          case 5:
            info.m_Connection = true;
            goto case 3;
          case 3:
          case 4:
            this.ConnectWrapper(info);
            if (!InterceptorThreadFilter.RemoveManager())
            {
              num1 = 6;
              continue;
            }
            goto case 0;
          case 6:
            goto label_7;
          default:
            int num2 = 4;
            num1 = InterceptorThreadFilter.RemoveManager() ? num2 : num2;
            continue;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ConnectWrapper(Page info)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        PropertyPredicateMapping predicateMapping1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 3:
              this.m_Decorator = false;
              num2 = 6;
              continue;
            case 2:
            case 5:
              if (flag)
              {
                info.m_Iterator = predicateMapping1.m_QueueField;
                goto case 1;
              }
              else
                goto case 1;
            case 4:
              goto label_1;
            case 6:
              goto label_9;
            default:
              num2 = 1;
              continue;
          }
        }
label_1:
        PropertyPredicateMapping predicateMapping2 = new PropertyPredicateMapping(info);
        predicateMapping2.TabText = info.m_Reg;
        predicateMapping1 = predicateMapping2;
        predicateMapping1.Show(this.exporter);
        flag = info.m_Iterator == null;
        num1 = 5;
        continue;
label_3:
        this.m_Decorator = true;
        num1 = 4;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ViewWrapper(Page task)
    {
      int num1 = 1;
      while (true)
      {
        bool flag;
        int num2;
        TreeNode node1;
        switch (num1)
        {
          case 0:
          case 1:
            flag = task._Stub == null;
            num2 = 5;
            break;
          case 2:
            goto label_11;
          case 3:
          case 6:
            this._Value.Nodes[0].Nodes.Add(node1);
            this._Value.ExpandAll();
            num2 = 2;
            break;
          case 4:
            this.merchant.broadcaster.Add(task);
            node1 = new TreeNode()
            {
              Text = task.m_Reg,
              ImageKey = "code",
              ContextMenuStrip = this._Watcher,
              SelectedImageKey = "code",
              Tag = (object) task
            };
            task.m_Expression = node1;
            goto case 3;
          case 5:
            if (flag)
            {
              num2 = 4;
              break;
            }
            task._Stub._Serializer.Add(task);
            TreeNode node2 = new TreeNode()
            {
              Text = task.m_Reg,
              ImageKey = "code",
              ContextMenuStrip = this._Watcher,
              SelectedImageKey = "code",
              Tag = (object) task
            };
            task.m_Expression = node2;
            task._Stub.m_Class.Nodes.Add(node2);
            this._Value.ExpandAll();
            num2 = 7;
            break;
          case 7:
            goto label_10;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 3;
        }
        num1 = num2;
      }
label_11:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PrepareWrapper(RefThreadFilter last)
    {
      int num1 = 2;
      if (true)
        goto label_5;
label_1:
      this._Value.ExpandAll();
      int num2 = 6;
label_4:
      num1 = num2;
label_5:
      TreeNode node;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
          case 5:
            goto label_1;
          case 1:
          case 4:
            goto label_7;
          case 2:
            node = new TreeNode()
            {
              Text = last.m_Database,
              ImageKey = "project_folder_closed",
              ContextMenuStrip = this.@object,
              SelectedImageKey = "project_folder_closed",
              Tag = (object) last
            };
            if (InterceptorThreadFilter.MapManager())
            {
              num1 = 4;
              continue;
            }
            goto label_10;
          case 6:
            goto label_2;
          default:
            goto label_6;
        }
      }
label_2:
      return;
label_6:
      num2 = 5;
      goto label_4;
label_7:
      last.m_Class = node;
      if (last.indexer != null)
      {
        last.indexer.m_Class.Nodes.Add(node);
        goto label_1;
      }
      else
      {
        this._Value.Nodes[0].Nodes.Add(node);
        num2 = 0;
        goto label_4;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ChangeWrapper()
    {
      int num1 = 6;
      MethodConfigItem methodConfigItem;
      while (true)
      {
        int num2 = num1;
        List<RefThreadFilter>.Enumerator enumerator1;
        bool flag1;
        bool flag2;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 5:
              goto label_38;
            case 1:
              goto label_50;
            case 2:
              goto label_12;
            case 3:
              if (methodConfigItem.ShowDialog() == DialogResult.OK)
              {
                if (this._Annotation.m_ConfigWrapper.SelectedNode == null)
                {
                  num3 = 0;
                  break;
                }
                goto label_60;
              }
              else
                goto label_58;
            case 4:
              goto label_26;
            case 6:
              goto label_49;
            case 7:
              goto label_63;
            case 8:
              goto label_56;
            case 9:
              num3 = this._Annotation.m_ConfigWrapper.SelectedNode.Tag.GetType().Name == "Project" ? 1 : 0;
              break;
            case 10:
            case 12:
              goto label_1;
            case 11:
              if (flag2)
              {
                int num4 = 0;
                num2 = InterceptorThreadFilter.RemoveManager() ? num4 : num4;
                continue;
              }
              goto label_54;
            case 13:
              goto label_67;
            default:
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto case 9;
          }
          if (num3 != 0)
          {
            flag1 = false;
            enumerator1 = this.merchant.listener.GetEnumerator();
            num2 = 4;
          }
          else if (this._Annotation.m_ConfigWrapper.SelectedNode != null && this._Annotation.m_ConfigWrapper.SelectedNode.Tag.GetType().Name == "Folder")
            num2 = 2;
          else
            goto label_64;
        }
label_1:
        int index;
        StringBuilder stringBuilder1;
        RefThreadFilter refThreadFilter;
        if (index < 0 || refThreadFilter == this._Annotation.m_ConfigWrapper.SelectedNode.Tag)
        {
          stringBuilder1.Append("\\");
          try
          {
            StringBuilder stringBuilder2 = stringBuilder1;
            string str;
            if (stringBuilder2 == null)
            {
              int num5 = 2;
              while (true)
              {
                switch (num5)
                {
                  case 0:
                  case 2:
                    goto label_5;
                  case 1:
                  case 3:
                    goto label_11;
                  default:
                    num5 = 3;
                    continue;
                }
              }
label_5:
              str = (string) null;
            }
            else
              str = stringBuilder2.ToString();
            string text = methodConfigItem.producer.Text;
            Directory.CreateDirectory(str + text);
          }
          catch
          {
          }
label_11:
          RefThreadFilter last = new RefThreadFilter()
          {
            m_Database = methodConfigItem.producer.Text,
            m_Context = this.merchant,
            indexer = (RefThreadFilter) this._Annotation.m_ConfigWrapper.SelectedNode.Tag,
            _List = this
          };
          ((RefThreadFilter) this._Annotation.m_ConfigWrapper.SelectedNode.Tag).issuer.Add(last);
          this.PrepareWrapper(last);
          num1 = 13;
          continue;
        }
        List<RefThreadFilter> refThreadFilterList;
        refThreadFilter = refThreadFilterList[index];
        stringBuilder1.Append("\\" + refThreadFilter.m_Database);
        --index;
        num1 = 12;
        continue;
label_12:
        bool flag3 = false;
        using (List<RefThreadFilter>.Enumerator enumerator2 = ((RefThreadFilter) this._Annotation.m_ConfigWrapper.SelectedNode.Tag).issuer.GetEnumerator())
        {
label_22:
          while (enumerator2.MoveNext())
          {
            RefThreadFilter current = enumerator2.Current;
            int num6 = 4;
            while (true)
            {
              int num7 = num6;
              while (true)
              {
                switch (num7)
                {
                  case 0:
                  case 2:
                    flag3 = true;
                    if (true)
                    {
                      num7 = 5;
                      continue;
                    }
                    goto case 4;
                  case 1:
                  case 3:
                    goto label_22;
                  case 4:
                    if (!(current.m_Database != methodConfigItem.producer.Text))
                    {
                      int num8 = (int) ConsumerConfigConfig.EnableFactory(" Folder Already Exists: " + methodConfigItem.producer.Text + " ");
                      goto case 0;
                    }
                    else
                      goto label_21;
                  case 5:
                    goto label_24;
                  default:
                    goto label_18;
                }
              }
label_18:
              num6 = 0;
              continue;
label_21:
              num6 = 3;
            }
          }
        }
label_24:
        if (!flag3)
        {
          num1 = 8;
          continue;
        }
        goto label_67;
label_26:
        try
        {
label_35:
          while (enumerator1.MoveNext())
          {
            RefThreadFilter current = enumerator1.Current;
            int num9 = 2;
            while (true)
            {
              int num10;
              bool flag4;
              switch (num9)
              {
                case 0:
                case 2:
                  flag4 = current.m_Database != methodConfigItem.producer.Text;
                  num10 = 4;
                  break;
                case 1:
                case 4:
                  if (!flag4)
                  {
                    int num11 = (int) ConsumerConfigConfig.EnableFactory(" Folder Already Exists: " + methodConfigItem.producer.Text + " ");
                    goto case 3;
                  }
                  else
                    goto label_35;
                case 3:
                  flag1 = true;
                  num10 = 5;
                  break;
                case 5:
                  goto label_37;
                default:
                  int num12 = 3;
                  num9 = InterceptorThreadFilter.RemoveManager() ? num12 : num12;
                  continue;
              }
              num9 = num10;
            }
          }
        }
        finally
        {
          enumerator1.Dispose();
        }
label_37:
        flag2 = !flag1;
        num1 = 11;
        continue;
label_49:
        methodConfigItem = new MethodConfigItem();
        num1 = 3;
        continue;
label_50:
        refThreadFilter = (RefThreadFilter) this._Annotation.m_ConfigWrapper.SelectedNode.Tag;
        refThreadFilterList = new List<RefThreadFilter>();
        for (; refThreadFilter != null; refThreadFilter = refThreadFilter.indexer)
          refThreadFilterList.Add(refThreadFilter);
        index = refThreadFilterList.Count - 1;
        goto label_1;
label_56:
        stringBuilder1 = new StringBuilder(this.merchant._Code);
        num1 = 1;
        continue;
label_60:
        num1 = 9;
      }
label_38:
      try
      {
        Directory.CreateDirectory(this.merchant._Code + "\\" + methodConfigItem.producer.Text);
      }
      catch
      {
        int num13 = (int) ConsumerConfigConfig.EnableFactory("Unable to create folder " + this.merchant._Code + "\\" + methodConfigItem.producer.Text);
      }
      RefThreadFilter last1 = new RefThreadFilter()
      {
        m_Database = methodConfigItem.producer.Text,
        m_Context = this.merchant,
        indexer = (RefThreadFilter) null,
        _List = this
      };
      this.merchant.listener.Add(last1);
      goto label_63;
label_58:
      return;
label_54:
      return;
label_63:
      this.PrepareWrapper(last1);
      return;
label_64:
      return;
label_67:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void TestWrapper(Page spec)
    {
      if (!this.SetWrapper())
        ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ConcatWrapper(Page key)
    {
      if (!this.SetWrapper())
        ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void AddWrapper(Page value)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PostWrapper(Page first)
    {
      int num1 = 7;
      while (true)
      {
        int num2 = num1;
        bool flag;
        PropertyPredicateMapping predicateMapping1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              flag = this.CloneWrapper(first);
              int num3 = 6;
              num2 = InterceptorThreadFilter.RemoveManager() ? num3 : num3;
              continue;
            case 1:
              goto label_15;
            case 2:
            case 3:
              this.AddWrapper(first);
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_4;
            case 4:
              first.m_Expression.ImageKey = "code";
              first.m_Expression.SelectedImageKey = "code";
              if (!this.m_Decorator)
              {
                this.m_Decorator = true;
                PropertyPredicateMapping predicateMapping2 = new PropertyPredicateMapping(first);
                predicateMapping2.TabText = first.m_Reg;
                predicateMapping1 = predicateMapping2;
                predicateMapping1.Show(this.exporter);
                num2 = 5;
                continue;
              }
              goto label_17;
            case 5:
              first.m_Iterator = predicateMapping1.m_QueueField;
              this.m_Decorator = false;
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 0;
            case 6:
              if (!flag)
              {
                if (File.Exists(first.m_Worker))
                {
                  first.m_Base = true;
                  goto case 4;
                }
                else
                  goto label_11;
              }
              else
                goto label_2;
            case 8:
              goto label_16;
            default:
              goto label_9;
          }
        }
label_2:
        num1 = 3;
        continue;
label_9:
        num1 = 4;
      }
label_4:
      return;
label_15:
      return;
label_16:
      return;
label_11:
      int num4 = (int) ConsumerConfigConfig.EnableFactory("The file '%FILE%' in the current project could not be found.".Replace("%FILE%", first.m_Reg));
      return;
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalculateWrapper(Page res) => res.Save();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void IncludeWrapper(DescriptorGetterWorker item)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 2:
              goto label_9;
            case 3:
              goto label_10;
            case 4:
              goto label_4;
            case 5:
              goto label_8;
            case 6:
              goto label_16;
            default:
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_15;
          }
        }
label_1:
        bool flag = this.SortWrapper(item);
        num1 = 4;
        continue;
label_4:
        PreLinkToolDispID client;
        if (!flag)
        {
          client = item._Client;
          if (client != (PreLinkToolDispID) 0)
          {
            num1 = 1;
            continue;
          }
          goto label_11;
        }
        else
          break;
label_9:
        if (client == (PreLinkToolDispID) 1)
        {
          this.CallWrapper();
          num1 = 6;
        }
        else
          goto label_2;
      }
      return;
label_2:
      return;
label_11:
      this.RateWrapper();
      return;
label_10:
      return;
label_8:
      return;
label_16:
      return;
label_15:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ResolveWrapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void StopWrapper(Page v)
    {
      int num1 = 0;
      if (true)
        goto label_7;
label_1:
      int index = 0;
      goto label_12;
label_6:
      int num2;
      num1 = num2;
label_7:
      IDockableWindow[] documents;
      while (true)
      {
        switch (num1)
        {
          case 0:
            documents = this.exporter.Documents;
            if (InterceptorThreadFilter.MapManager())
            {
              num1 = 3;
              continue;
            }
            goto label_15;
          case 1:
          case 3:
            goto label_1;
          case 2:
          case 4:
            goto label_9;
          case 5:
            goto label_15;
          case 6:
            goto label_11;
          case 7:
            goto label_4;
          default:
            goto label_8;
        }
      }
label_4:
      return;
label_8:
      num2 = 5;
      goto label_6;
label_9:
label_10:
label_11:
      ++index;
label_12:
      DockableWindow spec;
      bool flag;
      if (index < documents.Length)
      {
        spec = (DockableWindow) documents[index];
        if (InterceptorThreadFilter.ComputeWrapper(spec))
        {
          num2 = 6;
          goto label_6;
        }
        else
          flag = ((Control) spec).Tag == v;
      }
      else
      {
        num2 = 7;
        goto label_6;
      }
label_15:
      if (flag)
      {
        ((Form) spec).Close();
        num2 = 2;
        goto label_6;
      }
      else
        goto label_10;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PatchWrapper(Page first, string b)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        DockableWindow spec;
        IDockableWindow[] documents;
        while (true)
        {
          bool flag;
          int index;
          switch (num2)
          {
            case 0:
              break;
            case 1:
            case 2:
label_12:
              if (index < documents.Length)
              {
                spec = (DockableWindow) documents[index];
                if (!InterceptorThreadFilter.ComputeWrapper(spec))
                {
                  flag = ((Control) spec).Tag == first;
                  goto case 3;
                }
                else
                  break;
              }
              else
              {
                num2 = 7;
                continue;
              }
            case 3:
            case 5:
              if (!flag)
                goto case 0;
              else
                goto label_2;
            case 4:
              goto label_3;
            case 6:
              index = 0;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_15;
            case 7:
              goto label_5;
            default:
              goto label_9;
          }
          ++index;
          goto label_12;
        }
label_2:
        ((Control) spec).Text = b;
        num1 = 0;
        continue;
label_3:
        documents = this.exporter.Documents;
        num1 = 6;
        continue;
label_9:
        num1 = 5;
      }
label_5:
      return;
label_15:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ForgotWrapper()
    {
      int num1 = 7;
      if (InterceptorThreadFilter.MapManager())
        goto label_14;
label_1:
      int index = 0;
      goto label_28;
label_13:
      int num2;
      num1 = num2;
label_14:
      IDockableWindow[] documents;
      DockableWindow spec;
      DialogResult dialogResult1;
      DialogResult dialogResult2;
      Page tag;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_30;
          case 1:
            goto label_27;
          case 2:
          case 6:
            tag = (Page) ((Control) spec).Tag;
            if (!tag.m_Connection)
            {
              dialogResult1 = ConsumerConfigConfig.MoveFactory("The file '%FILE%' has not been saved, would you like to do so now?".Replace("%FILE%", tag.m_Reg));
              num1 = 5;
              continue;
            }
            goto label_23;
          case 3:
            goto label_7;
          case 4:
            goto label_11;
          case 5:
            dialogResult2 = dialogResult1;
            if (true)
            {
              num1 = 10;
              continue;
            }
            goto label_11;
          case 7:
            documents = this.exporter.Documents;
            num1 = 9;
            continue;
          case 8:
          case 10:
            goto label_18;
          case 9:
            goto label_1;
          case 11:
            goto label_31;
          default:
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 2;
        }
      }
label_7:
      bool flag;
      while (spec != this.exporter.ActiveDocument)
      {
        if (InterceptorThreadFilter.ComputeWrapper(spec))
        {
          if (((DescriptorGetterWorker) ((Control) spec).Tag)._Client == (PreLinkToolDispID) 0)
            this.CountWrapper();
          flag = ((DescriptorGetterWorker) ((Control) spec).Tag)._Client == (PreLinkToolDispID) 1;
          if (!InterceptorThreadFilter.RemoveManager())
          {
            num1 = 4;
            goto label_14;
          }
        }
        else if (((Control) spec).Tag is Page)
        {
          num2 = 2;
          goto label_13;
        }
        else
          goto label_25;
      }
      num2 = 1;
      goto label_13;
label_11:
      if (flag)
      {
        this.InstantiateWrapper();
        goto label_30;
      }
      else
        goto label_26;
label_31:
      return;
label_18:
      switch (dialogResult2)
      {
        case DialogResult.Cancel:
          return;
        case DialogResult.Yes:
          tag.Save();
          ((Form) spec).Close();
          goto label_24;
        case DialogResult.No:
          ((Form) spec).Close();
          goto label_24;
        default:
          goto label_24;
      }
label_23:
      ((Form) spec).Close();
label_24:
label_25:
label_26:
label_27:
      ++index;
label_28:
      if (index < documents.Length)
      {
        spec = (DockableWindow) documents[index];
        num2 = 3;
        goto label_13;
      }
      else if (InterceptorThreadFilter.MapManager())
      {
        num1 = 11;
        goto label_14;
      }
label_30:
      goto label_26;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SearchWrapper()
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
            ((Page) ((Control) this.exporter.ActiveDocument).Tag).Save();
            num1 = 6;
            continue;
          case 1:
          case 5:
            if (!flag)
            {
              if (!(((object) this.exporter.ActiveDocument).GetType().Name != "CodeTab"))
              {
                Debug.WriteLine("Active Tabs Name: " + ((Control) this.exporter.ActiveDocument).Tag.GetType().Name);
                if (!(((Control) this.exporter.ActiveDocument).Tag.GetType().Name == "OpenedFile"))
                  goto label_5;
                else
                  goto case 0;
              }
              else
                goto label_14;
            }
            else
            {
              num2 = 3;
              break;
            }
          case 2:
            goto label_2;
          case 3:
            goto label_13;
          case 4:
            flag = this.exporter.ActiveDocument == null;
            num1 = 5;
            continue;
          case 6:
            goto label_12;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
      }
label_14:
      return;
label_5:
      return;
label_2:
      return;
label_13:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void GetWrapper()
    {
      int num = 5;
      SaveFileDialog saveFileDialog1;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
              AnnotationPredicateQueue.ForgotField(saveFileDialog1.FileName, this.merchant);
              num = 6;
              continue;
            }
            goto label_12;
          case 1:
          case 4:
            if (!flag)
            {
              SaveFileDialog saveFileDialog2 = new SaveFileDialog();
              saveFileDialog2.AddExtension = true;
              saveFileDialog2.DefaultExt = ".txt";
              saveFileDialog2.FileName = "info.txt";
              saveFileDialog2.Filter = "Info Files (info.txt)|info.txt";
              saveFileDialog2.InitialDirectory = this.merchant._Code;
              saveFileDialog2.Title = "Save Info File...";
              saveFileDialog1 = saveFileDialog2;
              goto case 0;
            }
            else
            {
              num = 3;
              continue;
            }
          case 2:
            goto label_1;
          case 3:
            goto label_11;
          case 5:
            flag = !this.SetWrapper();
            num = 4;
            continue;
          case 6:
            goto label_10;
          default:
            if (true)
            {
              num = 0;
              continue;
            }
            goto case 5;
        }
      }
label_1:
      return;
label_11:
      return;
label_12:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool RemoveWrapper()
    {
      int num1 = 11;
      bool flag1;
      while (true)
      {
        DockableWindow spec;
        int num2;
        bool flag2;
        DialogResult dialogResult1;
        DialogResult dialogResult2;
        Page tag;
        IDockableWindow[] documents;
        int index;
        switch (num1)
        {
          case 0:
            if (!tag.m_Connection)
            {
              dialogResult2 = ConsumerConfigConfig.MoveFactory("The file '%FILE%' has not been saved, would you like to do so now?".Replace("%FILE%", tag.m_Reg));
              if (true)
              {
                num1 = 1;
                continue;
              }
              goto case 3;
            }
            else
              goto case 7;
          case 1:
          case 8:
            switch (dialogResult2)
            {
              case DialogResult.Cancel:
                goto label_14;
              case DialogResult.Yes:
                tag.Save();
                num1 = 12;
                continue;
              case DialogResult.No:
                ((Form) spec).Close();
                goto label_15;
              default:
                goto label_15;
            }
          case 2:
            if (flag2)
            {
              if (!this.LoginWrapper())
              {
                dialogResult1 = ConsumerConfigConfig.MoveFactory("Your project has not been saved, would you like to do so now?");
                num2 = 9;
                break;
              }
              goto label_29;
            }
            else
              goto label_30;
          case 3:
            goto label_22;
          case 4:
          case 5:
            if (index < documents.Length)
            {
              spec = (DockableWindow) documents[index];
              num2 = 6;
              break;
            }
            num2 = 3;
            break;
          case 6:
            if (!InterceptorThreadFilter.ComputeWrapper(spec) && ((Control) spec).Tag is Page)
            {
              tag = (Page) ((Control) spec).Tag;
              if (!InterceptorThreadFilter.RemoveManager())
              {
                num1 = 0;
                continue;
              }
              goto label_34;
            }
            else
              goto case 7;
          case 7:
label_16:
            ++index;
            goto case 4;
          case 9:
            switch (dialogResult1)
            {
              case DialogResult.Cancel:
                goto label_27;
              case DialogResult.Yes:
                this.AssetWrapper();
                num2 = 10;
                break;
              case DialogResult.No:
                this.StartWrapper();
                goto label_28;
              default:
                goto label_28;
            }
            break;
          case 10:
            this.StartWrapper();
            goto label_28;
          case 11:
            flag2 = this.SetWrapper();
            num1 = 2;
            continue;
          case 12:
            ((Form) spec).Close();
            goto label_15;
          case 13:
            goto label_34;
          default:
            num2 = 7;
            break;
        }
label_2:
        num1 = num2;
        continue;
label_15:
        goto label_16;
label_22:
        flag1 = true;
        num2 = 13;
        goto label_2;
label_28:
label_29:
        this.StartWrapper();
label_30:
        if (this.AwakeWrapper())
        {
          documents = this.exporter.Documents;
          index = 0;
          num2 = 5;
          goto label_2;
        }
        else
          goto label_22;
      }
label_14:
      flag1 = false;
      goto label_34;
label_27:
      flag1 = false;
label_34:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalcWrapper()
    {
      int num1 = 1;
      if (!InterceptorThreadFilter.MapManager())
        goto label_27;
label_21:
      ProductWrapperAttribute wrapperAttribute;
      Page task;
      string str;
      bool flag1;
      while (true)
      {
        string name;
        int num2;
        bool flag2;
        bool flag3;
        switch (num1)
        {
          case 0:
            if (name == "Folder")
              goto label_9;
            else
              goto case 11;
          case 1:
            flag2 = !this.SetWrapper();
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 0;
          case 2:
            goto label_27;
          case 3:
            goto label_13;
          case 4:
          case 5:
            if (!(name == "Project"))
            {
              num2 = 0;
              break;
            }
            goto label_8;
          case 6:
            if (!flag2)
            {
              wrapperAttribute = new ProductWrapperAttribute();
              if (wrapperAttribute.ShowDialog() == DialogResult.OK)
              {
                task = new Page();
                flag3 = this._Annotation.m_ConfigWrapper.SelectedNode == null;
                if (true)
                {
                  num1 = 12;
                  continue;
                }
                goto case 11;
              }
              else
                goto label_7;
            }
            else
              goto label_16;
          case 7:
            this.AssetWrapper();
            num1 = 9;
            continue;
          case 8:
          case 10:
            goto label_26;
          case 9:
            this.SelectWrapper(str + "\\" + wrapperAttribute.LogoutFactory());
            num1 = 13;
            continue;
          case 11:
            if (name == "OpenedFile")
            {
              flag1 = ((Page) this._Annotation.m_ConfigWrapper.SelectedNode.Tag)._Stub == null;
              num1 = 3;
              continue;
            }
            str = this.merchant._Code;
            num1 = 10;
            continue;
          case 12:
            if (!flag3)
            {
              name = this._Annotation.m_ConfigWrapper.SelectedNode.Tag.GetType().Name;
              num2 = 5;
              break;
            }
            str = this.merchant._Code;
            task._Stub = (RefThreadFilter) null;
            num1 = 2;
            continue;
          case 13:
            goto label_30;
          default:
            num2 = 11;
            break;
        }
        num1 = num2;
      }
label_16:
      return;
label_7:
      return;
label_8:
      str = this.merchant._Code;
      task._Stub = (RefThreadFilter) null;
      goto label_27;
label_9:
      str = ((RefThreadFilter) this._Annotation.m_ConfigWrapper.SelectedNode.Tag).SetupField();
      task._Stub = (RefThreadFilter) this._Annotation.m_ConfigWrapper.SelectedNode.Tag;
      goto label_27;
label_13:
      if (flag1)
      {
        str = this.merchant._Code;
        task._Stub = (RefThreadFilter) null;
        goto label_27;
      }
      else
      {
        str = ((Page) this._Annotation.m_ConfigWrapper.SelectedNode.Tag)._Stub.SetupField();
        task._Stub = ((Page) this._Annotation.m_ConfigWrapper.SelectedNode.Tag)._Stub;
        goto label_27;
      }
label_26:
      task._Stub = (RefThreadFilter) null;
      goto label_27;
label_30:
      return;
label_27:
      if (File.Exists(str + "\\" + wrapperAttribute.LogoutFactory()))
      {
        int num3 = (int) ConsumerConfigConfig.EnableFactory("The filename you have selected already exists.");
        this.CalcWrapper();
      }
      else
      {
        File.Create(str + "\\" + wrapperAttribute.LogoutFactory()).Close();
        File.WriteAllText(str + "\\" + wrapperAttribute.LogoutFactory(), this.DestroyWrapper(wrapperAttribute.WriteFactory().getterField));
        task.m_Reg = wrapperAttribute.LogoutFactory();
        task.m_Connection = false;
        task.m_Worker = str + "\\" + task.m_Reg;
        this.merchant.m_Proxy = false;
        this.ViewWrapper(task);
        int num4 = 7;
        num1 = InterceptorThreadFilter.RemoveManager() ? num4 : num4;
        goto label_21;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string DestroyWrapper(string v) => new Regex("\\$\\{(\\w+?)\\}", RegexOptions.Compiled).Replace(v, (MatchEvaluator) (value => value.Groups[1].Value));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ExcludeWrapper()
    {
      int num1 = 2;
      while (true)
      {
        Page task;
        int num2;
        bool flag1;
        OpenFileDialog openFileDialog1;
        bool flag2;
        FileInfo fileInfo;
        RefThreadFilter refThreadFilter;
        int index;
        string[] fileNames;
        switch (num1)
        {
          case 0:
          case 4:
            task.m_Worker = this.merchant._Code + "\\" + task.m_Reg;
            break;
          case 1:
            int num3 = (int) ConsumerConfigConfig.EnableFactory("The added file already exists.");
            goto case 7;
          case 2:
            flag1 = !this.SetWrapper();
            num2 = 10;
            goto label_27;
          case 3:
label_5:
            task = new Page()
            {
              m_Reg = fileInfo.Name,
              m_Connection = true,
              _Stub = refThreadFilter,
              m_Worker = refThreadFilter.SetupField() + "\\" + fileInfo.Name
            };
            break;
          case 5:
          case 8:
            break;
          case 6:
            if (!flag2)
            {
              fileNames = openFileDialog1.FileNames;
              index = 0;
              goto label_10;
            }
            else
            {
              num2 = 11;
              goto label_27;
            }
          case 7:
            ++index;
            goto label_10;
          case 9:
label_23:
            this.merchant.m_Proxy = false;
            this.AssetWrapper();
            num2 = 12;
            goto label_27;
          case 10:
            if (!flag1)
            {
              OpenFileDialog openFileDialog2 = new OpenFileDialog();
              openFileDialog2.Filter = "Lua Files (*.lua)|*.lua";
              openFileDialog2.Multiselect = true;
              openFileDialog2.Title = "Add Existing Item...";
              openFileDialog1 = openFileDialog2;
              flag2 = openFileDialog1.ShowDialog() != DialogResult.OK;
              if (InterceptorThreadFilter.MapManager())
              {
                num1 = 6;
                continue;
              }
              goto case 3;
            }
            else
              goto label_16;
          case 11:
            goto label_12;
          case 12:
            goto label_30;
          default:
            num2 = 3;
            goto label_27;
        }
label_7:
        if (!this.WriteWrapper(task.m_Worker))
        {
          this.ViewWrapper(task);
          num2 = 7;
          goto label_27;
        }
        else
        {
          num2 = 1;
          goto label_27;
        }
label_10:
        if (index >= fileNames.Length)
        {
          num2 = 9;
        }
        else
        {
          fileInfo = new FileInfo(fileNames[index]);
          object tag = this._Annotation.m_ConfigWrapper.SelectedNode.Tag;
          string name = tag.GetType().Name;
          if (!(name == "OpenedFile"))
          {
            if (!(name == "Folder"))
            {
              task = new Page()
              {
                m_Reg = fileInfo.Name,
                m_Connection = true
              };
              task.m_Worker = this.merchant._Code + "\\" + task.m_Reg;
              goto label_7;
            }
            else
            {
              refThreadFilter = (RefThreadFilter) tag;
              goto label_5;
            }
          }
          else
          {
            Page page = (Page) tag;
            if (page._Stub == null)
            {
              task = new Page()
              {
                m_Reg = fileInfo.Name,
                m_Connection = true
              };
              num2 = 0;
            }
            else
            {
              task = new Page()
              {
                m_Reg = fileInfo.Name,
                m_Connection = true,
                _Stub = page._Stub,
                m_Worker = page._Stub.SetupField() + "\\" + fileInfo.Name
              };
              if (InterceptorThreadFilter.MapManager())
              {
                num1 = 8;
                continue;
              }
              goto label_23;
            }
          }
        }
label_27:
        num1 = num2;
      }
label_16:
      return;
label_12:
      return;
label_30:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FindWrapper(RefThreadFilter setup)
    {
      int num1 = 4;
      if (InterceptorThreadFilter.MapManager())
        goto label_13;
label_1:
      Directory.Delete(setup.SetupField(), true);
      bool flag = setup.indexer == null;
      num1 = 6;
label_13:
      DialogResult dialogResult;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            dialogResult = ConsumerConfigConfig.MoveFactory("Do you want to remove the physical folder from the hard drive?\nYes: Remove both Project Reference and Physical Folder\nNo: Remove Project Reference and leave Physical Folder\nCancel: Cancel File Operation");
            int num2 = 2;
            num1 = InterceptorThreadFilter.RemoveManager() ? num2 : num2;
            continue;
          case 1:
            goto label_2;
          case 2:
            int num3;
            switch (dialogResult)
            {
              case DialogResult.Yes:
                setup.m_Class.Remove();
                num3 = 7;
                break;
              case DialogResult.No:
                setup.m_Class.Remove();
                if (setup.indexer != null)
                {
                  setup.indexer.issuer.Remove(setup);
                  num3 = 8;
                  break;
                }
                goto label_6;
              default:
                goto label_11;
            }
            num1 = num3;
            continue;
          case 3:
            goto label_16;
          case 5:
            goto label_17;
          case 6:
            if (!flag)
            {
              setup.indexer.issuer.Remove(setup);
              if (InterceptorThreadFilter.MapManager())
              {
                num1 = 3;
                continue;
              }
              goto case 0;
            }
            else
              goto label_2;
          case 7:
            goto label_1;
          case 8:
            goto label_15;
          default:
            num1 = 1;
            continue;
        }
      }
label_2:
      this.merchant.listener.Remove(setup);
      return;
label_11:
      return;
label_6:
      this.merchant.listener.Remove(setup);
      goto label_15;
label_16:
      return;
label_17:
      return;
label_15:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RestartWrapper(Page def)
    {
      int num1 = 4;
      bool flag;
      while (true)
      {
        int num2 = num1;
        DialogResult dialogResult;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_7;
            case 1:
            case 5:
              switch (dialogResult)
              {
                case DialogResult.Yes:
                  def.m_Expression.Remove();
                  if (def.m_Worker != null)
                  {
                    File.Delete(def.m_Worker);
                    if (true)
                    {
                      num2 = 2;
                      continue;
                    }
                    goto label_5;
                  }
                  else
                    goto label_6;
                case DialogResult.No:
                  goto label_15;
                default:
                  goto label_17;
              }
            case 2:
              goto label_5;
            case 4:
              dialogResult = ConsumerConfigConfig.MoveFactory("Do you want to remove the physical File from the hard drive?\nYes: Remove both Project Reference and Physical File\nNo: Remove Project Reference and leave Physical File\nCancel: Cancel File Operation");
              int num3 = 5;
              num2 = InterceptorThreadFilter.RemoveManager() ? num3 : num3;
              continue;
            case 6:
              goto label_12;
            case 7:
            case 9:
              goto label_18;
            case 8:
              goto label_19;
            default:
              goto label_11;
          }
        }
label_5:
label_6:
        flag = def._Stub == null;
        num1 = 0;
        continue;
label_11:
        num1 = 8;
        continue;
label_12:
        def.m_Expression.Remove();
        if (def._Stub != null)
        {
          def._Stub._Serializer.Remove(def);
          num1 = 9;
          continue;
        }
        this.merchant.broadcaster.Remove(def);
        num1 = 7;
        continue;
label_15:
        num1 = 6;
      }
label_7:
      if (flag)
      {
        this.merchant.broadcaster.Remove(def);
        return;
      }
      def._Stub._Serializer.Remove(def);
      return;
label_19:
      return;
label_17:
      return;
label_18:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool VisitWrapper()
    {
      int num = 4;
      bool flag1;
      bool flag2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            if (!flag2)
            {
              if (!this.ListWrapper())
              {
                flag1 = ((CodeEditorControl) ((Control) this.exporter.ActiveDocument.DockHandler.DockPanel).Controls[0]).CanUndo;
                num = 6;
                continue;
              }
              goto label_5;
            }
            else
            {
              num = 2;
              continue;
            }
          case 2:
            goto label_1;
          case 3:
          case 5:
          case 6:
            goto label_10;
          case 4:
            flag2 = !this.VerifyWrapper();
            if (InterceptorThreadFilter.MapManager())
            {
              num = 0;
              continue;
            }
            goto case 0;
          default:
            if (InterceptorThreadFilter.MapManager())
            {
              num = 5;
              continue;
            }
            goto label_10;
        }
      }
label_1:
      flag1 = false;
      goto label_10;
label_5:
      flag1 = false;
label_10:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ResetWrapper()
    {
      int num1 = 4;
      if (InterceptorThreadFilter.MapManager())
        goto label_7;
label_1:
      bool flag1;
      bool flag2;
      int num2;
      CodeEditorControl control;
      if (flag1)
      {
        flag2 = false;
        goto label_11;
      }
      else if (this.ListWrapper())
      {
        flag2 = false;
        num2 = 2;
      }
      else
      {
        control = (CodeEditorControl) ((Control) this.exporter.ActiveDocument.DockHandler.DockPanel).Controls[0];
        goto label_10;
      }
label_6:
      num1 = num2;
label_7:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_9;
          case 1:
          case 5:
            goto label_1;
          case 2:
          case 6:
            goto label_11;
          case 3:
            goto label_10;
          default:
            num1 = 3;
            continue;
        }
      }
label_9:
      flag1 = !this.VerifyWrapper();
      num2 = 5;
      goto label_6;
label_10:
      flag2 = control.CanRedo;
      num2 = 6;
      goto label_6;
label_11:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool SetupWrapper()
    {
      int num1 = 1;
      bool flag1;
      if (!InterceptorThreadFilter.RemoveManager())
      {
        bool flag2;
        while (true)
        {
          int num2;
          bool flag3;
          switch (num1)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
              flag3 = this.VerifyWrapper();
              num2 = 4;
              break;
            case 3:
            case 5:
            case 6:
              goto label_9;
            case 4:
              if (!flag3)
              {
                flag1 = false;
                if (true)
                {
                  num1 = 6;
                  continue;
                }
                goto label_2;
              }
              else
              {
                flag2 = this.ListWrapper();
                num2 = 0;
                break;
              }
            default:
              num1 = 5;
              continue;
          }
          num1 = num2;
        }
label_2:
        flag1 = !flag2 && ((CodeEditorControl) ((Control) this.exporter.ActiveDocument.DockHandler.DockPanel).Controls[0]).CanCopy;
      }
label_9:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CancelWrapper()
    {
      int num = 4;
      if (true)
        goto label_4;
label_1:
      bool flag1;
      bool flag2;
      CodeEditorControl control;
      if (flag1)
      {
        flag2 = false;
        goto label_11;
      }
      else
      {
        control = (CodeEditorControl) ((Control) this.exporter.ActiveDocument.DockHandler.DockPanel).Controls[0];
        goto label_10;
      }
label_4:
      bool flag3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            goto label_10;
          case 1:
            if (!flag3)
            {
              flag1 = this.ListWrapper();
              if (true)
              {
                num = 5;
                continue;
              }
              goto label_10;
            }
            else
              goto label_8;
          case 2:
          case 5:
            goto label_1;
          case 4:
            flag3 = !this.VerifyWrapper();
            num = 1;
            continue;
          case 6:
            goto label_11;
          default:
            num = 0;
            continue;
        }
      }
label_8:
      flag2 = false;
      goto label_11;
label_10:
      flag2 = control.CanCopy;
      num = 6;
      goto label_4;
label_11:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CreateWrapper()
    {
      int num1 = 5;
      bool wrapper;
      while (true)
      {
        int num2 = num1;
        CodeEditorControl control;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_8;
            case 1:
            case 2:
              if (!flag)
              {
                if (!this.ListWrapper())
                {
                  control = (CodeEditorControl) ((Control) this.exporter.ActiveDocument.DockHandler.DockPanel).Controls[0];
                  goto case 3;
                }
                else
                  goto label_3;
              }
              else
                goto label_10;
            case 3:
              wrapper = control.CanPaste;
              num2 = 6;
              continue;
            case 4:
            case 6:
              goto label_11;
            default:
              int num3 = 3;
              num2 = InterceptorThreadFilter.RemoveManager() ? num3 : num3;
              continue;
          }
        }
label_8:
        flag = !this.VerifyWrapper();
        num1 = 2;
        continue;
label_10:
        wrapper = false;
        num1 = 4;
      }
label_3:
      wrapper = false;
label_11:
      return wrapper;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CheckWrapper() => this.AwakeWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FlushWrapper()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        CodeEditorControl queueField;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              if (!flag)
              {
                if (InterceptorThreadFilter.CollectWrapper((DockableWindow) this.exporter.ActiveDocument))
                {
                  queueField = ((PropertyPredicateMapping) this.exporter.ActiveDocument).m_QueueField;
                  goto case 3;
                }
                else
                  goto label_1;
              }
              else
                goto label_10;
            case 2:
              goto label_7;
            case 3:
            case 5:
              queueField.Undo();
              num2 = 6;
              continue;
            case 4:
              goto label_12;
            case 6:
              goto label_11;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 5;
        continue;
label_7:
        flag = this.ListWrapper();
        num1 = 0;
        continue;
label_10:
        num1 = 4;
      }
label_1:
      return;
label_12:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FillWrapper()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_12;
            case 1:
            case 3:
              if (flag1)
              {
                num2 = 0;
                continue;
              }
              goto label_4;
            case 2:
              goto label_13;
            case 4:
              goto label_1;
            case 5:
              flag1 = this.ListWrapper();
              if (InterceptorThreadFilter.MapManager())
              {
                num2 = 3;
                continue;
              }
              goto label_11;
            case 6:
              goto label_11;
            default:
              goto label_7;
          }
        }
label_1:
        bool flag2;
        if (flag2)
        {
          ((PropertyPredicateMapping) this.exporter.ActiveDocument).m_QueueField.Redo();
          num1 = 6;
          continue;
        }
        break;
label_4:
        flag2 = InterceptorThreadFilter.CollectWrapper((DockableWindow) this.exporter.ActiveDocument);
        goto label_1;
label_7:
        num1 = 4;
      }
      return;
label_12:
      return;
label_13:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PublishWrapper()
    {
      int num = 2;
      CodeEditorControl queueField;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            flag = this.ListWrapper();
            num = 3;
            continue;
          case 1:
          case 3:
            if (!flag && InterceptorThreadFilter.CollectWrapper((DockableWindow) this.exporter.ActiveDocument))
            {
              if (true)
              {
                num = 5;
                continue;
              }
              goto case 5;
            }
            else
              goto label_9;
          case 4:
            queueField.Cut();
            num = 6;
            continue;
          case 5:
            queueField = ((PropertyPredicateMapping) this.exporter.ActiveDocument).m_QueueField;
            goto case 4;
          case 6:
            goto label_8;
          default:
            if (!InterceptorThreadFilter.RemoveManager())
            {
              num = 4;
              continue;
            }
            goto label_8;
        }
      }
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PopWrapper()
    {
      int num = 0;
      if (true)
        goto label_6;
label_1:
      bool flag1 = this.ListWrapper();
      if (true)
      {
        num = 4;
        goto label_6;
      }
label_2:
      if (flag1)
        return;
      bool flag2 = InterceptorThreadFilter.CollectWrapper((DockableWindow) this.exporter.ActiveDocument);
      num = 2;
label_6:
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_1;
          case 1:
          case 4:
            goto label_2;
          case 2:
            if (!flag2)
              goto label_5;
            else
              goto case 3;
          case 3:
          case 5:
            ((PropertyPredicateMapping) this.exporter.ActiveDocument).m_QueueField.Copy();
            if (true)
            {
              num = 6;
              continue;
            }
            goto label_9;
          case 6:
            goto label_9;
          default:
            num = 5;
            continue;
        }
      }
label_5:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void NewWrapper()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        CodeEditorControl queueField;
        while (true)
        {
          switch (num2)
          {
            case 0:
              queueField = ((PropertyPredicateMapping) this.exporter.ActiveDocument).m_QueueField;
              goto case 3;
            case 1:
            case 2:
              goto label_6;
            case 3:
            case 5:
              queueField.Paste();
              if (!InterceptorThreadFilter.RemoveManager())
              {
                num2 = 6;
                continue;
              }
              goto label_9;
            case 4:
              goto label_1;
            case 6:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_1:
        bool flag = this.ListWrapper();
        num1 = 2;
        continue;
label_5:
        num1 = 5;
        continue;
label_6:
        if (!flag && InterceptorThreadFilter.CollectWrapper((DockableWindow) this.exporter.ActiveDocument))
          num1 = 0;
        else
          break;
      }
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Delete()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_12;
            case 1:
              flag = this.ListWrapper();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_8;
            case 2:
              goto label_13;
            case 3:
            case 4:
              goto label_6;
            case 5:
              goto label_8;
            case 6:
              goto label_10;
            default:
              if (!InterceptorThreadFilter.RemoveManager())
              {
                num2 = 4;
                continue;
              }
              goto label_6;
          }
        }
label_6:
        ((PropertyPredicateMapping) this.exporter.ActiveDocument).m_QueueField.Delete();
        num1 = 6;
        continue;
label_8:
        if (!flag)
        {
          if (!InterceptorThreadFilter.CollectWrapper((DockableWindow) this.exporter.ActiveDocument))
            break;
          goto label_6;
        }
        else
          num1 = 0;
      }
      return;
label_12:
      return;
label_13:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RunWrapper()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        CodeEditorControl queueField;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_8;
            case 1:
            case 2:
              if (!flag)
              {
                if (InterceptorThreadFilter.CollectWrapper((DockableWindow) this.exporter.ActiveDocument))
                {
                  queueField = ((PropertyPredicateMapping) this.exporter.ActiveDocument).m_QueueField;
                  goto case 4;
                }
                else
                  goto label_7;
              }
              else
              {
                num2 = 5;
                continue;
              }
            case 4:
              queueField.SelectAll();
              int num3 = 6;
              num2 = InterceptorThreadFilter.RemoveManager() ? num3 : num3;
              continue;
            case 5:
              goto label_12;
            case 6:
              goto label_11;
            default:
              num2 = 4;
              continue;
          }
        }
label_8:
        flag = this.ListWrapper();
        num1 = 2;
      }
label_7:
      return;
label_12:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RevertWrapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void EnableMapper(string init)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void MoveMapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SetMapper() => this.RevertWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LoginMapper(string i)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CloneMapper() => this.MoveMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SortMapper()
    {
      int num1 = 4;
      if (InterceptorThreadFilter.RemoveManager())
        return;
      while (true)
      {
        SaveFileDialog saveFileDialog1;
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 1:
            if (!flag)
            {
              SaveFileDialog saveFileDialog2 = new SaveFileDialog();
              saveFileDialog2.AddExtension = true;
              saveFileDialog2.DefaultExt = ".txt";
              saveFileDialog2.FileName = "info.txt";
              saveFileDialog2.Filter = "Info Files (info.txt)|info.txt";
              saveFileDialog2.InitialDirectory = this.merchant._Code;
              saveFileDialog2.Title = "Save Info File...";
              saveFileDialog1 = saveFileDialog2;
              num2 = 5;
              break;
            }
            goto label_12;
          case 2:
          case 5:
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
              AnnotationPredicateQueue.ForgotField(saveFileDialog1.FileName, this.merchant);
              num2 = 6;
              break;
            }
            goto label_13;
          case 3:
            goto label_2;
          case 4:
            flag = !this.SetWrapper();
            num2 = 0;
            break;
          case 6:
            goto label_11;
          default:
            if (InterceptorThreadFilter.MapManager())
            {
              num1 = 3;
              continue;
            }
            goto label_11;
        }
        num1 = num2;
      }
label_12:
      return;
label_13:
      return;
label_2:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CustomizeMapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ReadMapper()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ComputeMapper() => this._Annotation.Show();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void VerifyMapper() => this._Annotation.Hide();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void AwakeMapper()
    {
      int num1 = 3;
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            flag = this._Tokenizer == null;
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_8;
          case 1:
          case 4:
            if (!flag)
            {
              this._Tokenizer.Show();
              int num2 = 5;
              num1 = InterceptorThreadFilter.RemoveManager() ? num2 : num2;
              continue;
            }
            goto label_10;
          case 2:
            goto label_5;
          case 5:
            goto label_8;
          default:
            if (InterceptorThreadFilter.MapManager())
            {
              num1 = 2;
              continue;
            }
            goto label_4;
        }
      }
label_10:
      return;
label_5:
      return;
label_4:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ListMapper()
    {
      int num1 = 3;
      if (InterceptorThreadFilter.RemoveManager())
        ;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 3:
            flag = this.m_Instance == null;
            num2 = 4;
            break;
          case 1:
            goto label_2;
          case 2:
            goto label_1;
          case 4:
            if (!flag)
            {
              this.m_Instance.Show();
              num2 = 5;
              break;
            }
            goto label_10;
          case 5:
            goto label_9;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_10:
      return;
label_2:
      return;
label_1:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CollectMapper() => this.reponse.Show(this.exporter);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InsertMapper(object param, TreeNodeMouseClickEventArgs cont)
    {
      if (this._Value.SelectedNode != null)
        ;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void WriteMapper()
    {
      int num1 = 0;
      if (InterceptorThreadFilter.RemoveManager())
        ;
      while (true)
      {
        ValueConfigConfig valueConfigConfig;
        bool flag;
        int num2;
        MappingInvocationAdapter invocationAdapter;
        switch (num1)
        {
          case 0:
            valueConfigConfig = new ValueConfigConfig();
            num2 = 2;
            break;
          case 1:
          case 2:
            if (valueConfigConfig.ShowDialog() == DialogResult.OK)
            {
              invocationAdapter = new MappingInvocationAdapter();
              num1 = 6;
              continue;
            }
            goto label_1;
          case 3:
          case 4:
            goto label_12;
          case 5:
            if (flag)
            {
              valueConfigConfig.m_ExporterWrapper.SelectedIndex = 2;
              num2 = 3;
              break;
            }
            goto label_12;
          case 6:
            flag = valueConfigConfig.m_ExporterWrapper.SelectedIndex == -1;
            goto case 5;
          case 7:
            goto label_13;
          default:
            num2 = 5;
            break;
        }
label_3:
        num1 = num2;
        continue;
label_12:
        invocationAdapter.Priority = (MappingInvocationAdapter.AdvisorStateStatus) valueConfigConfig.m_ExporterWrapper.SelectedIndex;
        invocationAdapter.EnableWrapper(valueConfigConfig.merchantWrapper.Text);
        this.merchant._Helper.Add(invocationAdapter);
        this.m_Instance.OrderRule();
        num2 = 7;
        goto label_3;
      }
label_1:
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RegisterMapper(ListViewItem info)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        MappingInvocationAdapter invocationAdapter1;
        ValueConfigConfig valueConfigConfig1;
        bool flag1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_1;
            case 1:
            case 6:
              foreach (MappingInvocationAdapter invocationAdapter2 in this.merchant._Helper)
              {
                int num3 = 2;
                while (true)
                {
                  int num4 = num3;
                  bool flag3;
                  while (true)
                  {
                    switch (num4)
                    {
                      case 0:
                      case 2:
                        flag3 = invocationAdapter2._Advisor == info;
                        goto case 1;
                      case 1:
                      case 3:
                        if (flag3)
                        {
                          invocationAdapter1 = invocationAdapter2;
                          num4 = 4;
                          continue;
                        }
                        goto label_21;
                      case 4:
                        goto label_21;
                      default:
                        goto label_18;
                    }
                  }
label_18:
                  num3 = 3;
                }
label_21:;
              }
              flag2 = invocationAdapter1 == null;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_26;
            case 2:
              goto label_7;
            case 3:
              goto label_2;
            case 4:
              if (flag1)
                valueConfigConfig1.m_ExporterWrapper.SelectedIndex = 2;
              invocationAdapter1.Priority = (MappingInvocationAdapter.AdvisorStateStatus) valueConfigConfig1.m_ExporterWrapper.SelectedIndex;
              this.m_Instance.OrderRule();
              if (InterceptorThreadFilter.MapManager())
              {
                num2 = 7;
                continue;
              }
              goto label_7;
            case 7:
              goto label_26;
            default:
              goto label_11;
          }
        }
label_1:
        invocationAdapter1 = (MappingInvocationAdapter) null;
        num1 = 6;
        continue;
label_2:
        bool flag4;
        if (flag4)
        {
          invocationAdapter1.EnableWrapper(valueConfigConfig1.merchantWrapper.Text);
          flag1 = valueConfigConfig1.m_ExporterWrapper.SelectedIndex == -1;
          num1 = 4;
          continue;
        }
        break;
label_7:
        if (!flag2)
        {
          ValueConfigConfig valueConfigConfig2 = new ValueConfigConfig();
          valueConfigConfig2.merchantWrapper.Text = invocationAdapter1.RevertField();
          valueConfigConfig2.m_ExporterWrapper.SelectedIndex = (int) invocationAdapter1.Priority;
          valueConfigConfig1 = valueConfigConfig2;
          flag4 = valueConfigConfig1.ShowDialog() == DialogResult.OK;
          goto label_2;
        }
        else
          goto label_27;
label_11:
        num1 = 3;
      }
      return;
label_27:
      return;
label_26:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LogoutMapper(ListView.SelectedListViewItemCollection info)
    {
      int num1 = 4;
      if (true)
        goto label_22;
label_1:
      foreach (ListViewItem listViewItem in info)
      {
        foreach (MappingInvocationAdapter invocationAdapter in this.merchant._Helper)
        {
          int num2 = 3;
          if (InterceptorThreadFilter.MapManager())
            goto label_7;
label_6:
          bool flag = invocationAdapter._Advisor == listViewItem;
          goto label_9;
label_7:
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_6;
              case 1:
              case 2:
                goto label_9;
              case 4:
                goto label_11;
              default:
                num2 = 2;
                continue;
            }
          }
label_9:
          if (flag)
          {
            this.merchant._Helper.Remove(invocationAdapter);
            num2 = 4;
            goto label_7;
          }
label_11:;
        }
      }
label_18:
      this.m_Instance.OrderRule();
      if (InterceptorThreadFilter.MapManager())
      {
        num1 = 5;
        goto label_22;
      }
label_19:
      bool flag1 = ConsumerConfigConfig.MoveFactory("Do you want to delete these tasks?") == DialogResult.Yes;
      num1 = 3;
label_22:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_19;
          case 1:
          case 2:
            goto label_1;
          case 3:
            goto label_20;
          case 5:
            goto label_21;
          default:
            if (!InterceptorThreadFilter.RemoveManager())
            {
              num1 = 1;
              continue;
            }
            goto label_24;
        }
      }
label_20:
      if (!flag1)
        goto label_18;
      else
        goto label_1;
label_21:
      return;
label_24:;
    }

    internal static bool MapManager() => true;

    internal static bool RemoveManager() => false;
  }
}
