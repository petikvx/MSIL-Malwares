// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Ugyzlkqxhz, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 36C42683-5959-4132-14CD-452F458D436C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-4a8dd354270640e1f224c81a20ef8fe72cb21c70497b1226a189ab89a38421e0.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;

internal sealed class \u0008\u2004 : \u0005\u2004, IDisposable
{
  private byte[] \u0002;
  private int \u0003;
  private int \u0005;
  private int \u0008;
  private int \u0006;
  private bool \u000E;
  private bool \u000F;
  private bool \u0002\u2000;
  private bool \u0003\u2000;

  public \u0008\u2004()
  {
    if (true)
      ;
    // ISSUE: explicit constructor call
    this.\u002Ector(0);
  }

  public \u0008\u2004(int _param1)
  {
    byte[] numArray = _param1 >= 0 ? new byte[_param1] : throw new ArgumentOutOfRangeException();
    if (true)
      goto label_6;
label_3:
    int num = _param1;
    if (true)
      goto label_7;
label_4:
    if (true)
      goto label_8;
label_5:
    this.\u000F = true;
    this.\u0003 = 0;
    this.\u0002\u2000 = true;
    return;
label_8:
    this.\u000E = true;
    goto label_5;
label_7:
    this.\u0006 = num;
    goto label_4;
label_6:
    this.\u0002 = numArray;
    goto label_3;
  }

  public \u0008\u2004(byte[] _param1)
  {
    if (true)
      ;
    byte[] numArray = _param1;
    if (true)
      ;
    // ISSUE: explicit constructor call
    this.\u002Ector(numArray, true);
  }

  public \u0008\u2004(byte[] _param1, bool _param2)
  {
    byte[] numArray = _param1 != null ? _param1 : throw new ArgumentNullException();
    if (true)
      goto label_6;
label_3:
    int length = _param1.Length;
    if (true)
      goto label_7;
label_4:
    if (true)
      goto label_8;
label_5:
    int num;
    this.\u0008 = num;
    this.\u000F = _param2;
    this.\u0003 = 0;
    this.\u0002\u2000 = true;
    return;
label_8:
    this.\u0006 = length;
    goto label_5;
label_7:
    num = length;
    goto label_4;
label_6:
    this.\u0002 = numArray;
    goto label_3;
  }

  public \u0008\u2004(byte[] _param1, int _param2, int _param3)
  {
    if (true)
      ;
    byte[] numArray = _param1;
    if (true)
      ;
    int num1 = _param2;
    if (true)
      ;
    int num2 = _param3;
    // ISSUE: explicit constructor call
    this.\u002Ector(numArray, num1, num2, true);
  }

  public \u0008\u2004(byte[] _param1, int _param2, int _param3, bool _param4)
  {
    if (_param1 == null)
      throw new ArgumentNullException();
    if (_param2 < 0)
      throw new ArgumentOutOfRangeException();
    if (_param3 < 0)
      throw new ArgumentOutOfRangeException();
    if (_param1.Length - _param2 < _param3)
      throw new ArgumentException();
    byte[] numArray = _param1;
    if (true)
      goto label_12;
label_9:
    int num1 = _param2;
    if (true)
      goto label_13;
label_10:
    if (true)
      goto label_14;
label_11:
    int num2;
    this.\u0003 = num2;
    this.\u0008 = this.\u0006 = _param2 + _param3;
    this.\u000F = _param4;
    this.\u000E = false;
    this.\u0002\u2000 = true;
    return;
label_14:
    this.\u0005 = num1;
    goto label_11;
label_13:
    num2 = num1;
    goto label_10;
label_12:
    this.\u0002 = numArray;
    goto label_9;
  }

  [SpecialName]
  public override bool \u0005\u2004\u2009\u2005\u2008\u0002()
  {
    if (true)
      ;
    return this.\u0002\u2000;
  }

  [SpecialName]
  public override bool \u0005\u2004\u2009\u2005\u2008\u0005()
  {
    if (true)
      ;
    return this.\u0002\u2000;
  }

  [SpecialName]
  public override bool \u0005\u2004\u2009\u2005\u2008\u0003()
  {
    if (true)
      ;
    return this.\u000F;
  }

  protected override void \u0005\u2004\u2009\u2005\u2008\u0002(bool _param1)
  {
    if (this.\u0003\u2000)
      return;
    if (_param1)
    {
      if (true)
        goto label_5;
label_3:
      if (true)
        goto label_6;
label_4:
      if (true)
      {
        this.\u000E = false;
        goto label_8;
      }
      else
        goto label_8;
label_6:
      this.\u000F = false;
      goto label_4;
label_5:
      this.\u0002\u2000 = false;
      goto label_3;
    }
label_8:
    this.\u0003\u2000 = true;
  }

  private bool \u0002(int _param1)
  {
    if (_param1 < 0)
      throw new IOException();
    if (_param1 <= this.\u0006)
      return false;
    int num1 = _param1;
    if (true)
      goto label_5;
label_4:
    int num2;
    if (num2 < 256)
    {
      if (true)
        num2 = 256;
    }
    if (num2 < this.\u0006 * 2)
    {
      int num3 = this.\u0006 * 2;
      if (true)
        num2 = num3;
    }
    this.\u0002(num2);
    return true;
label_5:
    num2 = num1;
    goto label_4;
  }

  public override void \u0005\u2004\u2009\u2005\u2008\u0003()
  {
  }

  internal byte[] \u0002()
  {
    if (true)
      ;
    return this.\u0002;
  }

  internal void \u0002(out int _param1, out int _param2)
  {
    if (true)
      ;
    if (!this.\u0002\u2000)
      throw new Exception();
    ref int local = ref _param1;
    if (true)
      ;
    if (true)
      ;
    int num = this.\u0003;
    local = num;
    _param2 = this.\u0008;
  }

  internal int \u0002()
  {
    if (true)
      ;
    if (!this.\u0002\u2000)
      throw new Exception();
    if (true)
      ;
    return this.\u0005;
  }

  public int \u0002(int _param1)
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    int num1 = this.\u0008 - this.\u0005;
    if (true)
      goto label_4;
label_3:
    int num2;
    if (num2 > _param1)
    {
      int num3 = _param1;
      if (true)
        num2 = num3;
    }
    if (num2 < 0)
    {
      if (true)
        num2 = 0;
    }
    this.\u0005 += num2;
    return num2;
label_4:
    num2 = num1;
    goto label_3;
  }

  public int \u0003()
  {
    if (true)
      ;
    if (!this.\u0002\u2000)
      throw new Exception();
    if (true)
      ;
    int num1 = this.\u0006;
    if (true)
      ;
    int num2 = this.\u0003;
    return num1 - num2;
  }

  public void \u0002(int _param1)
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    if (_param1 == this.\u0006)
      return;
    if (!this.\u000E)
      throw new Exception();
    if (_param1 < this.\u0008)
      throw new ArgumentOutOfRangeException();
    if (_param1 > 0)
    {
      byte[] numArray1 = new byte[_param1];
      if (true)
        goto label_10;
label_9:
      byte[] numArray2;
      if (this.\u0008 > 0)
      {
        byte[] src = this.\u0002;
        byte[] dst = numArray2;
        int count = this.\u0008;
        if (true)
          Buffer.BlockCopy((Array) src, 0, (Array) dst, 0, count);
      }
      byte[] numArray3 = numArray2;
      if (true)
      {
        this.\u0002 = numArray3;
        goto label_17;
      }
      else
        goto label_17;
label_10:
      numArray2 = numArray1;
      goto label_9;
    }
    else
      this.\u0002 = (byte[]) null;
label_17:
    this.\u0006 = _param1;
  }

  [SpecialName]
  public override long \u0005\u2004\u2009\u2005\u2008\u0002()
  {
    if (true)
      ;
    if (!this.\u0002\u2000)
      throw new Exception();
    if (true)
      ;
    int num1 = this.\u0008;
    if (true)
      ;
    int num2 = this.\u0003;
    return (long) (num1 - num2);
  }

  [SpecialName]
  public override long \u0005\u2004\u2009\u2005\u2008\u0003()
  {
    if (true)
      ;
    if (!this.\u0002\u2000)
      throw new Exception();
    if (true)
      ;
    int num1 = this.\u0005;
    if (true)
      ;
    int num2 = this.\u0003;
    return (long) (num1 - num2);
  }

  [SpecialName]
  public override void \u0005\u2004\u2009\u2005\u2008\u0002(long _param1)
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    if (_param1 < 0L)
      throw new ArgumentOutOfRangeException();
    if (_param1 > (long) int.MaxValue)
      throw new ArgumentOutOfRangeException();
    int num = this.\u0003 + (int) _param1;
    if (false)
      return;
    this.\u0005 = num;
  }

  public override int \u0005\u2004\u2009\u2005\u2008\u0002(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    if (_param1 == null)
      throw new ArgumentNullException();
    if (_param2 < 0)
      throw new ArgumentOutOfRangeException();
    if (_param3 < 0)
      throw new ArgumentOutOfRangeException();
    if (_param1.Length - _param2 < _param3)
      throw new ArgumentException();
    int num1 = this.\u0008 - this.\u0005;
    if (true)
      goto label_12;
label_11:
    int count;
    if (count > _param3)
    {
      int num2 = _param3;
      if (true)
        count = num2;
    }
    if (count <= 0)
      return 0;
    if (count <= 8)
    {
      int num3 = count;
      int num4;
      if (true)
        num4 = num3;
      while (--num4 >= 0)
        _param1[_param2 + num4] = this.\u0002[this.\u0005 + num4];
    }
    else
      Buffer.BlockCopy((Array) this.\u0002, this.\u0005, (Array) _param1, _param2, count);
    this.\u0005 += count;
    return count;
label_12:
    count = num1;
    goto label_11;
  }

  public override int \u0005\u2004\u2009\u2005\u2008\u0002()
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    if (this.\u0005 >= this.\u0008)
      return -1;
    byte[] numArray = this.\u0002;
    int num1 = this.\u0005;
    if (true)
      goto label_7;
label_5:
    int num2;
    int num3 = num2 + 1;
    if (true)
      goto label_8;
label_6:
    int index = num2;
    return (int) numArray[index];
label_8:
    this.\u0005 = num3;
    goto label_6;
label_7:
    num2 = num1;
    goto label_5;
  }

  public override long \u0005\u2004\u2009\u2005\u2008\u0002(long _param1, int _param2)
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    if (_param1 > (long) int.MaxValue)
      throw new ArgumentOutOfRangeException();
    switch (_param2)
    {
      case 0:
        if (_param1 < 0L)
          throw new IOException();
        int num1 = this.\u0003 + (int) _param1;
        if (true)
        {
          this.\u0005 = num1;
          break;
        }
        break;
      case 1:
        if (_param1 + (long) this.\u0005 < (long) this.\u0003)
          throw new IOException();
        int num2 = this.\u0005 + (int) _param1;
        if (true)
        {
          this.\u0005 = num2;
          break;
        }
        break;
      case 2:
        if ((long) this.\u0008 + _param1 < (long) this.\u0003)
          throw new IOException();
        int num3 = this.\u0008 + (int) _param1;
        if (true)
        {
          this.\u0005 = num3;
          break;
        }
        break;
      default:
        throw new ArgumentException();
    }
    return (long) this.\u0005;
  }

  public override void \u0005\u2004\u2009\u2005\u2008\u0003(long _param1)
  {
    if (!this.\u000F)
      throw new Exception();
    if (_param1 > (long) int.MaxValue)
      throw new ArgumentOutOfRangeException();
    if (_param1 < 0L || _param1 > (long) (int.MaxValue - this.\u0003))
      throw new ArgumentOutOfRangeException();
    int num1 = this.\u0003 + (int) _param1;
    if (true)
      goto label_8;
label_7:
    int num2;
    if (!this.\u0002(num2) && num2 > this.\u0008)
    {
      byte[] numArray = this.\u0002;
      int index = this.\u0008;
      int length = num2 - this.\u0008;
      if (true)
        Array.Clear((Array) numArray, index, length);
    }
    int num3 = num2;
    if (true)
      goto label_14;
label_12:
    if (this.\u0005 <= num2)
      return;
    this.\u0005 = num2;
    return;
label_14:
    this.\u0008 = num3;
    goto label_12;
label_8:
    num2 = num1;
    goto label_7;
  }

  public byte[] \u0003()
  {
    byte[] numArray1 = new byte[this.\u0008 - this.\u0003];
    if (true)
      goto label_3;
label_1:
    byte[] src = this.\u0002;
    int srcOffset = this.\u0003;
    byte[] numArray2;
    byte[] dst = numArray2;
    int count = this.\u0008 - this.\u0003;
    if (true)
      goto label_4;
label_2:
    return numArray2;
label_4:
    Buffer.BlockCopy((Array) src, srcOffset, (Array) dst, 0, count);
    goto label_2;
label_3:
    numArray2 = numArray1;
    goto label_1;
  }

  public override void \u0005\u2004\u2009\u2005\u2008\u0002(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    if (!this.\u000F)
      throw new Exception();
    if (_param1 == null)
      throw new ArgumentNullException();
    if (_param2 < 0)
      throw new ArgumentOutOfRangeException();
    if (_param3 < 0)
      throw new ArgumentOutOfRangeException();
    if (_param1.Length - _param2 < _param3)
      throw new ArgumentException();
    int num1 = this.\u0005 + _param3;
    if (true)
      goto label_14;
label_13:
    int num2;
    if (num2 < 0)
      throw new IOException();
    if (num2 > this.\u0008)
    {
      int num3 = this.\u0005 > this.\u0008 ? 1 : 0;
      if (true)
        goto label_19;
label_18:
      bool flag;
      if (num2 > this.\u0006 && this.\u0002(num2))
      {
        if (true)
          flag = false;
      }
      if (flag)
        Array.Clear((Array) this.\u0002, this.\u0008, num2 - this.\u0008);
      this.\u0008 = num2;
      goto label_25;
label_19:
      flag = num3 != 0;
      goto label_18;
    }
label_25:
    if (_param3 <= 8)
    {
      int num4 = _param3;
      while (--num4 >= 0)
        this.\u0002[this.\u0005 + num4] = _param1[_param2 + num4];
    }
    else
      Buffer.BlockCopy((Array) _param1, _param2, (Array) this.\u0002, this.\u0005, _param3);
    this.\u0005 = num2;
    return;
label_14:
    num2 = num1;
    goto label_13;
  }

  public override void \u0005\u2004\u2009\u2005\u2008\u0002(byte _param1)
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    if (!this.\u000F)
      throw new Exception();
    if (this.\u0005 >= this.\u0008)
    {
      int num1 = this.\u0005 + 1;
      if (true)
        goto label_8;
label_6:
      int num2 = this.\u0005 > this.\u0008 ? 1 : 0;
      if (true)
        goto label_9;
label_7:
      int num3;
      bool flag;
      if (num3 >= this.\u0006 && this.\u0002(num3))
      {
        if (true)
          flag = false;
      }
      if (flag)
        Array.Clear((Array) this.\u0002, this.\u0008, this.\u0005 - this.\u0008);
      this.\u0008 = num3;
      goto label_15;
label_9:
      flag = num2 != 0;
      goto label_7;
label_8:
      num3 = num1;
      goto label_6;
    }
label_15:
    this.\u0002[this.\u0005++] = _param1;
  }

  public void \u0002(Stream _param1)
  {
    if (true)
      ;
    if (!this.\u0002\u2000)
      throw new Exception();
    Stream stream1 = _param1;
    if (true)
      ;
    if (stream1 == null)
      throw new ArgumentNullException();
    Stream stream2 = _param1;
    if (true)
      ;
    byte[] buffer = this.\u0002;
    int offset = this.\u0003;
    int count = this.\u0008 - this.\u0003;
    stream2.Write(buffer, offset, count);
  }

  internal int \u0005()
  {
    if (!this.\u0002\u2000)
      throw new Exception();
    int num1 = this.\u0005 + 4;
    if (true)
      goto label_6;
label_3:
    if (true)
      goto label_7;
label_4:
    int num2;
    int num3 = num2;
    if (true)
      goto label_8;
label_5:
    int num4;
    if (num4 > this.\u0008)
    {
      this.\u0005 = this.\u0008;
      throw new Exception();
    }
    return (int) this.\u0002[num4 - 1] << 24 | (int) this.\u0002[num4 - 2] << 16 | (int) this.\u0002[num4 - 4] | (int) this.\u0002[num4 - 3] << 8;
label_8:
    num4 = num3;
    goto label_5;
label_7:
    this.\u0005 = num1;
    goto label_4;
label_6:
    num2 = num1;
    goto label_3;
  }
}
