// Decompiled with JetBrains decompiler
// Type: DirectX.Capture.Filter
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.KillAV.ao-937fd99ab6df975f8ace26b4ce6ead21ae41a82f170fbe18646720cacc517e69.exe

using DShowNET;
using DShowNET.Device;
using System;
using System.Runtime.InteropServices;

namespace DirectX.Capture
{
  public class Filter : IComparable
  {
    public string Name;
    public string MonikerString;

    public Filter(string monikerString)
    {
      this.Name = this.getName(monikerString);
      this.MonikerString = monikerString;
    }

    internal Filter(UCOMIMoniker moniker)
    {
      this.Name = this.getName(moniker);
      this.MonikerString = this.getMonikerString(moniker);
    }

    protected string getMonikerString(UCOMIMoniker moniker)
    {
      string ppszDisplayName;
      moniker.GetDisplayName((UCOMIBindCtx) null, (UCOMIMoniker) null, out ppszDisplayName);
      return ppszDisplayName;
    }

    protected string getName(UCOMIMoniker moniker)
    {
      object ppvObj = (object) null;
      IPropertyBag propertyBag1 = (IPropertyBag) null;
      try
      {
        Guid guid = typeof (IPropertyBag).GUID;
        moniker.BindToStorage((UCOMIBindCtx) null, (UCOMIMoniker) null, ref guid, out ppvObj);
        IPropertyBag propertyBag2 = (IPropertyBag) ppvObj;
        object pVar = (object) "";
        int errorCode = propertyBag2.Read("FriendlyName", ref pVar, IntPtr.Zero);
        if (errorCode != 0)
          Marshal.ThrowExceptionForHR(errorCode);
        return pVar as string;
      }
      catch (Exception ex)
      {
        return "";
      }
      finally
      {
        propertyBag1 = (IPropertyBag) null;
        if (ppvObj != null)
          Marshal.ReleaseComObject(ppvObj);
      }
    }

    protected string getName(string monikerString)
    {
      UCOMIMoniker ucomiMoniker = (UCOMIMoniker) null;
      UCOMIMoniker ppmkOut = (UCOMIMoniker) null;
      try
      {
        ucomiMoniker = this.getAnyMoniker();
        ucomiMoniker.ParseDisplayName((UCOMIBindCtx) null, (UCOMIMoniker) null, monikerString, out int _, out ppmkOut);
        return this.getName(ucomiMoniker);
      }
      finally
      {
        if (ucomiMoniker != null)
          Marshal.ReleaseComObject((object) ucomiMoniker);
        if (ppmkOut != null)
          Marshal.ReleaseComObject((object) ppmkOut);
      }
    }

    protected UCOMIMoniker getAnyMoniker()
    {
      Guid compressorCategory = FilterCategory.VideoCompressorCategory;
      object o = (object) null;
      ICreateDevEnum createDevEnum = (ICreateDevEnum) null;
      UCOMIEnumMoniker ppEnumMoniker = (UCOMIEnumMoniker) null;
      UCOMIMoniker[] rgelt = new UCOMIMoniker[1];
      try
      {
        o = Activator.CreateInstance(Type.GetTypeFromCLSID(Clsid.SystemDeviceEnum));
        ((ICreateDevEnum) o).CreateClassEnumerator(ref compressorCategory, out ppEnumMoniker, 0);
        if (ppEnumMoniker.Next(1, rgelt, out int _) != 0)
          rgelt[0] = (UCOMIMoniker) null;
        return rgelt[0];
      }
      finally
      {
        createDevEnum = (ICreateDevEnum) null;
        if (ppEnumMoniker != null)
          Marshal.ReleaseComObject((object) ppEnumMoniker);
        if (o != null)
          Marshal.ReleaseComObject(o);
      }
    }

    public int CompareTo(object obj) => obj == null ? 1 : this.Name.CompareTo(((Filter) obj).Name);
  }
}
