// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Configuration.WebMessageEncodingElement
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.ComponentModel;
using System.Configuration;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Configuration
{
  [ComVisible(false)]
  public sealed class WebMessageEncodingElement : BindingElementExtensionElement
  {
    private const string ConfigurationStringsWebContentTypeMapperType = "webContentTypeMapperType";

    public override System.Type BindingElementType => typeof (WebMessageEncodingBindingElement);

    [ConfigurationProperty("maxReadPoolSize", DefaultValue = 64)]
    [IntegerValidator(MinValue = 1)]
    public int MaxReadPoolSize
    {
      get => (int) this["maxReadPoolSize"];
      set => this["maxReadPoolSize"] = (object) value;
    }

    [ConfigurationProperty("maxWritePoolSize", DefaultValue = 16)]
    [IntegerValidator(MinValue = 1)]
    public int MaxWritePoolSize
    {
      get => (int) this["maxWritePoolSize"];
      set => this["maxWritePoolSize"] = (object) value;
    }

    [ConfigurationProperty("readerQuotas")]
    public XmlDictionaryReaderQuotasElement ReaderQuotas => (XmlDictionaryReaderQuotasElement) this["readerQuotas"];

    [ConfigurationProperty("webContentTypeMapperType", DefaultValue = "")]
    [StringValidator(MinLength = 0)]
    public string WebContentTypeMapperType
    {
      get => (string) this["webContentTypeMapperType"];
      set
      {
        if (string.IsNullOrEmpty(value))
          value = string.Empty;
        this["webContentTypeMapperType"] = (object) value;
      }
    }

    [ConfigurationProperty("writeEncoding", DefaultValue = "utf-8")]
    [TypeConverter(typeof (EncodingConverter))]
    [WebEncodingValidator]
    public Encoding WriteEncoding
    {
      get => (Encoding) this["writeEncoding"];
      set => this["writeEncoding"] = (object) value;
    }

    public override void ApplyConfiguration(BindingElement bindingElement)
    {
      base.ApplyConfiguration(bindingElement);
      WebMessageEncodingBindingElement encodingBindingElement = (WebMessageEncodingBindingElement) bindingElement;
      encodingBindingElement.WriteEncoding = this.WriteEncoding;
      encodingBindingElement.MaxReadPoolSize = this.MaxReadPoolSize;
      encodingBindingElement.MaxWritePoolSize = this.MaxWritePoolSize;
      if (!string.IsNullOrEmpty(this.WebContentTypeMapperType))
      {
        System.Type type = System.Type.GetType(this.WebContentTypeMapperType, true);
        if (!typeof (WebContentTypeMapper).IsAssignableFrom(type))
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ConfigurationErrorsException(SR2.GetString(SR2.ConfigInvalidWebContentTypeMapper, (object) type, (object) "webContentTypeMapperType", (object) typeof (WebMessageEncodingBindingElement), (object) typeof (WebContentTypeMapper))));
        }
        try
        {
          encodingBindingElement.ContentTypeMapper = (WebContentTypeMapper) Activator.CreateInstance(type);
        }
        catch (MissingMethodException ex)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ConfigurationErrorsException(SR2.GetString(SR2.ConfigWebContentTypeMapperNoConstructor, (object) type, (object) "webContentTypeMapperType", (object) typeof (WebMessageEncodingBindingElement), (object) typeof (WebContentTypeMapper)), (Exception) ex));
        }
      }
      this.ApplyConfiguration(this.ReaderQuotas, encodingBindingElement.ReaderQuotas);
    }

    public override void CopyFrom(ServiceModelExtensionElement from)
    {
      base.CopyFrom(from);
      WebMessageEncodingElement messageEncodingElement = (WebMessageEncodingElement) from;
      this.WriteEncoding = messageEncodingElement.WriteEncoding;
      this.MaxReadPoolSize = messageEncodingElement.MaxReadPoolSize;
      this.MaxWritePoolSize = messageEncodingElement.MaxWritePoolSize;
      this.WebContentTypeMapperType = messageEncodingElement.WebContentTypeMapperType;
      this.ReaderQuotas.MaxArrayLength = messageEncodingElement.ReaderQuotas.MaxArrayLength;
      this.ReaderQuotas.MaxBytesPerRead = messageEncodingElement.ReaderQuotas.MaxBytesPerRead;
      this.ReaderQuotas.MaxDepth = messageEncodingElement.ReaderQuotas.MaxDepth;
      this.ReaderQuotas.MaxNameTableCharCount = messageEncodingElement.ReaderQuotas.MaxNameTableCharCount;
      this.ReaderQuotas.MaxStringContentLength = messageEncodingElement.ReaderQuotas.MaxStringContentLength;
    }

    protected internal override BindingElement CreateBindingElement()
    {
      WebMessageEncodingBindingElement bindingElement = new WebMessageEncodingBindingElement();
      this.ApplyConfiguration((BindingElement) bindingElement);
      return (BindingElement) bindingElement;
    }

    internal void ApplyConfiguration(
      XmlDictionaryReaderQuotasElement currentQuotas,
      XmlDictionaryReaderQuotas readerQuotas)
    {
      if (readerQuotas == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (readerQuotas));
      if (currentQuotas.MaxDepth != 0)
        readerQuotas.MaxDepth = currentQuotas.MaxDepth;
      if (currentQuotas.MaxStringContentLength != 0)
        readerQuotas.MaxStringContentLength = currentQuotas.MaxStringContentLength;
      if (currentQuotas.MaxArrayLength != 0)
        readerQuotas.MaxArrayLength = currentQuotas.MaxArrayLength;
      if (currentQuotas.MaxBytesPerRead != 0)
        readerQuotas.MaxBytesPerRead = currentQuotas.MaxBytesPerRead;
      if (currentQuotas.MaxNameTableCharCount == 0)
        return;
      readerQuotas.MaxNameTableCharCount = currentQuotas.MaxNameTableCharCount;
    }
  }
}
