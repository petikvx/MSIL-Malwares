// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: 0的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D533F7C-4FE9-47C1-AE3D-12E223DC01C7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7b4b43d22be88ed3b2054ef7090ebb7b44ecc03dffa6c32e578002c9a12cbea8.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = -666688024;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -392100660)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags();
            num1 = (int) num2 * -2136937205 ^ -293225994;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1028483510 ^ -1201940931;
            continue;
          case 4:
            this.ChessBoard = b;
            num1 = (int) num2 * 557195457 ^ 1403519055;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public ChessCore()
    {
label_1:
      int num1 = 537680104;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 650126583)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1147937338 ^ 2046981556;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void RestartGame()
    {
label_1:
      int num1 = -1677818663;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1890182776)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags();
            num1 = (int) num2 * -221470408 ^ -465941630;
            continue;
          case 2:
            this.ChessBoard.Restart();
            num1 = (int) num2 * 878153976 ^ 1230797276;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = -170872322;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1568396897)) % 6U)
        {
          case 0:
            this.WhosPlaying = PieceColor.White;
            this.TurnId = 1;
            num1 = (int) num2 * 1366147896 ^ -485360942;
            continue;
          case 1:
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * -1665135882 ^ -1507375429;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.DisableTurn = turn;
            num1 = (int) num2 * -102586512 ^ -758360333;
            continue;
          case 4:
            this.Turns.Clear();
            num1 = (int) num2 * 402593500 ^ -2063658860;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestPassant()
    {
      new DebugChess(this.ChessBoard).TestPassant();
label_1:
      int num1 = 1620503712;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 850311313)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 560623012 ^ -1222616734;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -354853559 ^ -993939674;
            continue;
          case 4:
            num1 = (int) num2 * -1329018965 ^ 636776271;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestSinglePiece(Pieces x)
    {
      new DebugChess(this.ChessBoard).TestSinglePiece(x);
label_1:
      int num1 = 339718461;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1951320924)) % 5U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * -1892977859 ^ 492023802;
            continue;
          case 1:
            num1 = (int) num2 * -163215323 ^ 1713084927;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -333638337 ^ 725363234;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCastling()
    {
      new DebugChess(this.ChessBoard).TestCastling();
label_1:
      int num1 = 1258160691;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1127081822)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 967245632 ^ 276564357;
            continue;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -498821124 ^ -2140273026;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCheck()
    {
      new DebugChess(this.ChessBoard).TestCheck();
      this.resetFlags(true);
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = -218083445;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -38462547)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1222458915 ^ -417571363;
            continue;
          case 2:
            new DebugChess(this.ChessBoard).TestDiscoverCheck();
            num1 = (int) num2 * -1957919166 ^ -1111270528;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.resetFlags(true);
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 1268135036;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1354989999)) % 4U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * 479341663 ^ 122565650;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * 1074282295 ^ 743835266;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -702815349;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2119287256)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1383520321 ^ -573305443;
            continue;
          case 2:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * 1334857923 ^ 1318843283;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 165971576 ^ -239612326;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }
  }
}
