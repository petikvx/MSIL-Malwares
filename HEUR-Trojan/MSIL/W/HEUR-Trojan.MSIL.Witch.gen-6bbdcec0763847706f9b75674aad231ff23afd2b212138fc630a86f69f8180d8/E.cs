// Decompiled with JetBrains decompiler
// Type: WindowsFormsApp1.E
// Assembly: Kffxmjkup, Version=0.0.52.0, Culture=neutral, PublicKeyToken=null
// MVID: A3D42A33-7E04-4546-0720-DC34BF455AE6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.Witch.gen-6bbdcec0763847706f9b75674aad231ff23afd2b212138fc630a86f69f8180d8.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace WindowsFormsApp1
{
  internal static class E
  {
    private static int h;
    private static E.b b;
    private static Dictionary<int, string> a;
    private static byte[] c;
    private static int e;
    private static E.a i;
    private static short d;
    private static byte[] f;
    private static int g;

    [MethodImpl(MethodImplOptions.NoInlining)]
    static E()
    {
      if (true)
        goto label_7;
label_1:
      int num1;
      int num2 = 1109758220 - num1;
      if (true)
        goto label_8;
label_2:
      Dictionary<int, string> dictionary = new Dictionary<int, string>(24);
      if (true)
        goto label_9;
label_3:
      if (true)
        goto label_10;
label_4:
      int num3;
      StackTrace stackTrace = new StackTrace(num3, false);
      if (true)
        goto label_11;
label_5:
      int num4 = num3 - 2;
      if (true)
        goto label_12;
label_6:
      StackTrace a;
      StackFrame frame = a.GetFrame(num3);
      int num5 = num3;
      if (frame == null)
      {
        a = new StackTrace();
        num5 = 1;
        frame = a.GetFrame(num5);
      }
      int num6;
      int num7 = ~--~-~~-~-~((-738407206 ^ num1) + num6) ^ ~-~--~~-~-~(num1 - 817851242 ^ num6);
      MethodBase method = frame?.GetMethod();
      if (frame != null)
        num7 ^= -~-~-~~-~(795578637 - num1 - num6);
      Type declaringType = method?.DeclaringType;
      int num8;
      if ((object) declaringType == (object) typeof (RuntimeMethodHandle))
      {
        E.i = (E.a) 4 | E.i;
        num8 = num7 ^ num1 - 1109757413 + num6 + num3;
      }
      else if ((object) declaringType == null)
      {
        if (E.a(a, num5))
        {
          num8 = num7 ^ -~~--~~-~-~((num1 ^ -1140545320) - num6) - num3;
          E.i |= (E.a) 16;
        }
        else
        {
          E.i = (E.a) 1 | E.i;
          num8 = num7 ^ -~~--~~-~-~(num1 - 1109729466 ^ num6);
        }
      }
      else
      {
        num8 = num7 ^ -~-~-~~-~-~(1409002382 - num1 + num6) - num3;
        E.i |= (E.a) 16;
      }
      E.h += num8;
      return;
label_12:
      num3 = num4;
      goto label_6;
label_11:
      a = stackTrace;
      goto label_5;
label_10:
      num3 = 2;
      goto label_4;
label_9:
      E.a = dictionary;
      goto label_3;
label_8:
      num6 = num2;
      goto label_2;
label_7:
      num1 = 1259392319;
      goto label_1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static string a(int a)
    {
      Dictionary<int, string> a1 = E.a;
      if (true)
        goto label_2;
label_1:
      Dictionary<int, string> dictionary1;
      Dictionary<int, string> dictionary2 = dictionary1;
      if (true)
        Monitor.Enter((object) dictionary2);
      string str1;
      try
      {
        string str2;
        if (E.a.TryGetValue(a, out str2))
        {
          string str3 = str2;
          if (true)
            str1 = str3;
        }
        else
          str1 = E.a(a, true);
      }
      finally
      {
        Monitor.Exit((object) dictionary1);
      }
      return str1;
label_2:
      dictionary1 = a1;
      goto label_1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static string a(int a, bool b)
    {
      if (true)
        goto label_3;
label_1:
      int num1;
      int num2 = 396514949 - num1;
      if (true)
        goto label_4;
label_2:
      string str1;
      if (true)
        str1 = (string) null;
      int num3;
      byte[] numArray1;
      int num4;
      do
      {
        int num5;
        if (E.b == null)
        {
          Assembly executingAssembly = Assembly.GetExecutingAssembly();
          if (true)
            goto label_16;
label_9:
          Assembly.GetCallingAssembly();
          if (true)
            goto label_17;
label_10:
          int num6 = E.e | (num1 ^ -677195545) - num3;
          if (true)
            goto label_18;
label_11:
          Assembly a1;
          Assembly assembly = a1;
          StringBuilder stringBuilder1 = new StringBuilder();
          if (true)
            goto label_19;
label_12:
          int num7 = -377429337 - num1 + num3;
          if (true)
            goto label_20;
label_13:
          StringBuilder stringBuilder2;
          int num8;
          stringBuilder2.Append((char) num8).Append((char) (num8 >> 16));
          int num9 = -141531795 ^ num1 ^ num3;
          if (true)
            goto label_21;
label_14:
          stringBuilder2.Append((char) num8).Append((char) (num8 >> 16));
          int num10 = -377429328 - num1 + num3;
          if (true)
            goto label_22;
label_15:
          stringBuilder2.Append((char) (num8 >> 16)).Append((char) num8);
          int num11 = num1 + 1452498275 - num3;
          stringBuilder2.Append((char) (num11 >> 16)).Append((char) num11);
          num8 = 396523145 - num1 ^ num3;
          stringBuilder2.Append((char) num8);
          string name = stringBuilder2.ToString();
          Stream manifestResourceStream = assembly.GetManifestResourceStream(name);
          int skipFrames = 2;
          StackTrace a2 = new StackTrace(skipFrames, false);
          E.e ^= (num1 ^ 677757891) + num3 | skipFrames;
          int index = skipFrames - 2;
          StackFrame frame = a2.GetFrame(index);
          int num12 = index;
          if (frame == null)
          {
            a2 = new StackTrace();
            num12 = 1;
            frame = a2.GetFrame(num12);
          }
          MethodBase method = frame?.GetMethod();
          E.e ^= index + (num1 + 915029467 - num3);
          Type declaringType = method?.DeclaringType;
          if (frame == null)
            E.e ^= 396434904 - num1 ^ num3;
          bool flag = (object) declaringType == (object) typeof (RuntimeMethodHandle);
          E.e ^= (677755429 ^ num1) + num3;
          if (!flag)
          {
            flag = (object) declaringType == null;
            if (flag)
            {
              if (E.a(a2, num12))
                flag = false;
              else
                E.e ^= 396434936 - num1 ^ num3;
            }
          }
          if (flag == (a2 != null))
            E.e = 32 ^ E.e;
          E.e ^= (-677744701 ^ num1) - num3 | 1 + index;
          E.b = new E.b(manifestResourceStream);
          short a3 = (short) ((int) E.b.a() ^ (int) (short) -~~--~-~~(num1 - 396494343 + num3));
          if (a3 == (short) 0)
            E.d = (short) ((int) E.b.a() ^ (int) (short) -~~--~~-~-~(396521595 - num1 ^ num3));
          else
            E.c = E.b.a((int) a3);
          E.f = E.a(E.a(a1));
          int num13 = E.h ^ (num1 ^ -1028107829) + num3;
          E.h = 0;
          long num14 = G.a();
          int num15 = num13 ^ (int) (uint) num14 ^ 700864162 + num1 ^ num3 ^ (num1 ^ -1191008998) + num3;
          int num16 = num15;
          int num17 = (396519922 - num1 ^ num3) * num16 % ((num1 ^ -667837624) - num3);
          int num18 = -915029222 - num1 + num3;
          int num19 = num17;
          WindowsFormsApp1.f<int> enumerator = ((WindowsFormsApp1.c<int>) new WindowsFormsApp1.a.f(num1 - 396514951 | num3)
          {
            l = num19
          }).GetEnumerator();
          try
          {
            while (enumerator.wzaydrbwwlj5uqhvewjdekcuyr4cbqzuPIta())
            {
              int num20 = enumerator.wzaydrbwwlj5uqhvewjdekcuyr4cbqzuPIta();
              num17 ^= num20 - num18;
              num18 -= num17 + 3 >> 8;
            }
          }
          finally
          {
            enumerator?.t2fdfwm7kd8596bky26gnuapycch32u3PIta();
          }
          int num21 = num17 - (-280154513 ^ num1 ^ num3) ^ 657313139 - num1 - num3;
          num5 = (num15 ^ -~-~-~~-~(num1 ^ 456052126 ^ num3)) + num21;
          E.g = num5;
          E.e = E.e & -646594025 - num1 + num3 ^ num1 + 915036127 - num3;
          if ((E.i & (E.a) -~~--~~-~-~(-915029357 - num1 + num3)) == (E.a) 0)
          {
            E.e = (num1 ^ -677709505) - num3;
            goto label_46;
          }
          else
            goto label_46;
label_22:
          num8 = num10;
          goto label_15;
label_21:
          num8 = num9;
          goto label_14;
label_20:
          num8 = num7;
          goto label_13;
label_19:
          stringBuilder2 = stringBuilder1;
          goto label_12;
label_18:
          E.e = num6;
          goto label_11;
label_17:
          goto label_10;
label_16:
          a1 = executingAssembly;
          goto label_9;
        }
        else
          num5 = E.g;
label_46:
        if (E.e == -914985377 - num1 + num3)
          return new string(new char[3]
          {
            (char) (-677755587 ^ num1 ^ num3),
            '0',
            (char) (396515037 - num1 - num3)
          });
        int num22 = a ^ num1 - 1213449819 + num3 ^ num5 ^ -167809223 - num1 ^ num3;
        E.b.a().Position = (long) num22;
        if (E.c != null)
        {
          numArray1 = E.c;
        }
        else
        {
          short a4 = E.d != (short) -1 ? E.d : (short) ((int) E.b.a() ^ num1 - 396484673 + num3 ^ num22);
          if (a4 == (short) 0)
          {
            numArray1 = (byte[]) null;
          }
          else
          {
            numArray1 = E.b.a((int) a4);
            for (int index = 0; index != numArray1.Length; index = 1 + index)
              numArray1[index] ^= (byte) (E.g >> ((index & 3) << 3));
          }
        }
        num4 = E.b.a() ^ num22 ^ ~-~--~~-~(-650759683 - num1 - num3) ^ num5;
        if (num4 == (num1 - 396514951 | num3))
        {
          byte[] numArray2 = E.b.a(4);
          a = (num1 ^ -405154304) + num3 ^ num5;
          a = ((int) numArray2[2] | (int) numArray2[3] << 16 | (int) numArray2[0] << 8 | (int) numArray2[1] << 24) ^ -a;
        }
        else
          goto label_57;
      }
      while (!E.a.TryGetValue(a, out str1));
      return str1;
label_57:
      bool flag1 = (num4 & (378158427 + num1 ^ num3)) != 0;
      bool flag2 = (num4 & 1470256773 - num1 - num3) != 0;
      bool flag3 = (num4 & (1469728101 ^ num1 ^ num3)) != 0;
      int a5 = num4 & 1183464794 + num1 - num3;
      byte[] numArray3 = numArray1;
      byte[] numArray4 = E.b.a(a5);
      byte[] numArray5 = numArray3;
      byte num23 = numArray5[1];
      int length1 = numArray4.Length;
      byte num24 = (byte) (11 + length1 ^ (int) num23 + 7);
      uint num25 = (uint) (((int) numArray5[0] | (int) numArray5[2] << 8) + ((int) num24 << 3));
      ushort num26 = 0;
      int index1 = 0;
      while (index1 < length1)
      {
        if ((index1 & 1) == 0)
        {
          num25 = (uint) ((int) num25 * (396433058 - num1 ^ num3) + (num1 + 917560350 - num3));
          num26 = (ushort) (num25 >> 16);
        }
        byte num27 = (byte) num26;
        num26 >>= 8;
        byte num28 = numArray4[index1];
        numArray4[index1] = (byte) ((uint) ((int) num28 ^ (int) num23 ^ (int) num24 + 3) ^ (uint) num27);
        index1 = 1 + index1;
        num24 = num28;
      }
      byte[] a6 = numArray4;
      if (E.f != null != (E.e != (396021259 - num1 ^ num3)))
      {
        for (int index2 = 0; index2 < a5; ++index2)
        {
          byte num29 = E.f[7 & index2];
          byte num30 = (byte) ((int) num29 << 3 | (int) num29 >> 5);
          a6[index2] = (byte) ((uint) a6[index2] ^ (uint) num30);
        }
      }
      int num31 = E.e - 12;
      byte[] numArray6;
      int length2;
      if (!flag2)
      {
        numArray6 = a6;
        length2 = a5;
      }
      else
      {
        length2 = (int) a6[2] | (int) a6[0] << 16 | (int) a6[3] << 8 | (int) a6[1] << 24;
        numArray6 = new byte[length2];
        E.a(a6, 4, numArray6);
      }
      string str2;
      if (flag1 && num31 == num1 + 916637141 - num3)
      {
        char[] chArray = new char[length2];
        for (int index3 = 0; index3 < length2; ++index3)
          chArray[index3] = (char) numArray6[index3];
        str2 = new string(chArray);
      }
      else
        str2 = Encoding.Unicode.GetString(numArray6, 0, numArray6.Length);
      int num32 = num31 + ((num1 ^ -677755622 ^ num3) + (3 & num31) << 5);
      if (num32 != 398126879 - num1 - num3)
      {
        int num33 = a + a5 ^ num1 + 915142387 ^ num3 ^ num32 & (677754760 ^ num1) + num3;
        ref int local = ref num33;
        StringBuilder stringBuilder = new StringBuilder();
        int num34 = 396515037 - num1 - num3;
        stringBuilder.Append((char) (byte) num34);
        string format = stringBuilder.ToString();
        str2 = local.ToString(format);
      }
      if (!flag3 & b)
      {
        str2 = string.Intern(str2);
        E.a[a] = str2;
        if (E.a.Count == 24)
        {
          E.b.b();
          E.b = (E.b) null;
          E.c = (byte[]) null;
          E.f = (byte[]) null;
        }
      }
      return str2;
label_4:
      num3 = num2;
      goto label_2;
label_3:
      num1 = -259257195;
      goto label_1;
    }

    private static AssemblyName a(Assembly a)
    {
      AssemblyName assemblyName1;
      try
      {
        AssemblyName name = a.GetName();
        if (true)
          assemblyName1 = name;
      }
      catch
      {
        AssemblyName assemblyName2 = new AssemblyName(a.FullName);
        if (true)
          assemblyName1 = assemblyName2;
      }
      return assemblyName1;
    }

    private static byte[] a(AssemblyName a)
    {
      byte[] publicKeyToken = a.GetPublicKeyToken();
      if (true)
        goto label_2;
label_1:
      byte[] numArray;
      if (numArray != null && numArray.Length == 0)
      {
        if (true)
          numArray = (byte[]) null;
      }
      return numArray;
label_2:
      numArray = publicKeyToken;
      goto label_1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool a(StackTrace a, int b)
    {
      StackTrace stackTrace = a;
      int index = b + 1;
      if (true)
        goto label_3;
label_1:
      StackFrame frame1 = stackTrace.GetFrame(index);
      if (true)
        goto label_4;
label_2:
      StackFrame stackFrame;
      Assembly assembly1 = stackFrame?.GetMethod()?.DeclaringType?.Assembly;
      if (true)
        goto label_6;
label_5:
      Assembly a1;
      if ((object) a1 != null)
      {
        byte[] numArray = E.a(E.a(a1));
        if (numArray != null && numArray.Length == 8 && numArray[0] == (byte) 183 && numArray[7] == (byte) 137)
          return true;
      }
      Assembly assembly2;
      do
      {
        StackFrame frame2 = a.GetFrame(++b);
        if (frame2 != null)
          assembly2 = frame2.GetMethod()?.DeclaringType?.Assembly;
        else
          goto label_12;
      }
      while ((object) assembly2 == null || (object) assembly2 != (object) typeof (E).Assembly);
      return true;
label_12:
      return false;
label_6:
      a1 = assembly1;
      goto label_5;
label_4:
      stackFrame = frame1;
      goto label_2;
label_3:
      b = index;
      goto label_1;
    }

    private static void a(byte[] a, int b, byte[] c)
    {
      if (true)
        goto label_4;
label_1:
      if (true)
        goto label_5;
label_2:
      if (true)
        goto label_6;
label_3:
      int length = c.Length;
label_16:
      int num1;
      int num2;
      int num3;
      while (num1 < length)
      {
        if ((num3 <<= 1) == 256)
        {
          num3 = 1;
          num2 = (int) a[b++];
        }
        if ((num2 & num3) != 0)
        {
          int num4 = ((int) a[b] >> 2) + 3;
          int num5 = ((int) a[b] << 8 | (int) a[b + 1]) & 1023;
          b += 2;
          int num6 = num1 - num5;
          if (num6 < 0)
            break;
          while (true)
          {
            if (--num4 >= 0 && num1 < length)
              c[num1++] = c[num6++];
            else
              goto label_16;
          }
        }
        else
          c[num1++] = a[b++];
      }
      return;
label_6:
      num3 = 128;
      goto label_3;
label_5:
      num2 = 0;
      goto label_2;
label_4:
      num1 = 0;
      goto label_1;
    }

    private enum a
    {
    }

    private sealed class b
    {
      private Stream a;
      private byte[] b;

      public b(Stream a)
      {
        Stream stream = a;
        if (true)
          goto label_3;
label_1:
        byte[] numArray = new byte[4];
        if (false)
          return;
        this.b = numArray;
        return;
label_3:
        this.a = stream;
        goto label_1;
      }

      public Stream a()
      {
        if (true)
          ;
        return this.a;
      }

      public short a()
      {
        if (true)
          goto label_2;
label_1:
        return (short) ((int) this.b[0] | (int) this.b[1] << 8);
label_2:
        this.a(2);
        goto label_1;
      }

      public int a()
      {
        if (true)
          goto label_2;
label_1:
        return (int) this.b[0] | (int) this.b[1] << 8 | (int) this.b[2] << 16 | (int) this.b[3] << 24;
label_2:
        this.a(4);
        goto label_1;
      }

      private void a() => throw new EndOfStreamException();

      private void a(int a)
      {
        if (true)
          goto label_3;
label_1:
        if (true)
          goto label_4;
label_2:
        int offset;
        int num1;
        if (a == 1)
        {
          int num2 = this.a.ReadByte();
          if (true)
            goto label_8;
label_6:
          if (num1 == -1)
            this.a();
          this.b[0] = (byte) num1;
          return;
label_8:
          num1 = num2;
          goto label_6;
        }
        else
        {
          do
          {
            int num3 = this.a.Read(this.b, offset, a - offset);
            if (num3 == 0)
              this.a();
            offset += num3;
          }
          while (offset < a);
          return;
        }
label_4:
        num1 = 0;
        goto label_2;
label_3:
        offset = 0;
        goto label_1;
      }

      public void b()
      {
        Stream a = this.a;
        if (true)
          goto label_3;
label_1:
        if (true)
          goto label_4;
label_2:
        Stream stream;
        stream?.Close();
        if (false)
          return;
        this.b = (byte[]) null;
        return;
label_4:
        this.a = (Stream) null;
        goto label_2;
label_3:
        stream = a;
        goto label_1;
      }

      public byte[] a(int a)
      {
        byte[] numArray1 = a >= 0 ? new byte[a] : throw new ArgumentOutOfRangeException();
        if (true)
          goto label_4;
label_3:
        int length;
        if (true)
          length = 0;
        byte[] numArray2;
        do
        {
          int num1 = this.a.Read(numArray2, length, a);
          if (true)
            goto label_8;
label_7:
          int num2;
          if (num2 != 0)
          {
            length += num2;
            a -= num2;
            continue;
          }
          break;
label_8:
          num2 = num1;
          goto label_7;
        }
        while (a > 0);
        if (length != numArray2.Length)
        {
          byte[] dst = new byte[length];
          Buffer.BlockCopy((Array) numArray2, 0, (Array) dst, 0, length);
          numArray2 = dst;
        }
        return numArray2;
label_4:
        numArray2 = numArray1;
        goto label_3;
      }
    }
  }
}
