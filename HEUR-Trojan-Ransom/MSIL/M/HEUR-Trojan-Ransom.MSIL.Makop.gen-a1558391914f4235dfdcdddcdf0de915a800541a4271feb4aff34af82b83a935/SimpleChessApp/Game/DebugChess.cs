// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: fC, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2BFFC2A0-BEF7-47FD-8B55-B5339EE53E65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-a1558391914f4235dfdcdddcdf0de915a800541a4271feb4aff34af82b83a935.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = -1454133779;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -330384792)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1683521445 ^ 1160443083;
            continue;
          case 2:
            this.b = board;
            num1 = (int) num2 * -370080667 ^ 2018953213;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 1461313094 ^ 254013091;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 102720191;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1574134929)) % 14U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * -117476900 ^ -308324229;
            continue;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * -2025195322 ^ -282317178;
            continue;
          case 3:
            num1 = (int) num2 * -628344776 ^ 1393766663;
            continue;
          case 4:
            int num3 = x != Pieces.King ? -1642103013 : (num3 = -1607805092);
            num1 = num3 ^ (int) num2 * -1355071469;
            continue;
          case 5:
            num1 = (int) num2 * 107299574 ^ 1197312027;
            continue;
          case 6:
            num1 = (int) num2 * -1079525487 ^ -901587604;
            continue;
          case 7:
            num1 = (int) num2 * 1526429546 ^ -377155265;
            continue;
          case 8:
            goto label_3;
          case 9:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1577408351 ^ 830894439;
            continue;
          case 10:
            this.b.DisableTurns = true;
            num1 = 1639135166;
            continue;
          case 11:
            num1 = (int) num2 * -1383649789 ^ -933207266;
            continue;
          case 12:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * 2002431952 ^ -890488732;
            continue;
          case 13:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1912880306 ^ 1195854608;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    internal void TestPassant()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1258816471;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1708759820)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1374401663 ^ 927432157;
            continue;
          case 2:
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 956469318 ^ -50390109;
            continue;
          case 3:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -1016609800 ^ 1864040297;
            continue;
          case 4:
            num1 = (int) num2 * -745586193 ^ -436532356;
            continue;
          case 5:
            num1 = (int) num2 * 502072640 ^ -1402667285;
            continue;
          case 6:
            goto label_3;
          case 7:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 1841117532 ^ -921511612;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1509430987 ^ 1318597934;
            continue;
          case 9:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 1149455587 ^ 1426292469;
            continue;
          case 10:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 747149062 ^ -1301526707;
            continue;
          case 11:
            num1 = (int) num2 * -1550127355 ^ 252955780;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    internal void TestPromotion()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -275073177;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -588809334)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -1333276075 ^ 738848217;
            continue;
          case 1:
            num1 = (int) num2 * 1161389916 ^ 1306661136;
            continue;
          case 2:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -77079364 ^ -1686163367;
            continue;
          case 3:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 1294873258 ^ 671489245;
            continue;
          case 4:
            num1 = (int) num2 * -1257859488 ^ 1629796077;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -951516892 ^ -154630447;
            continue;
          case 7:
            num1 = (int) num2 * -618882162 ^ 1974491890;
            continue;
          case 8:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 680239540 ^ -940211511;
            continue;
          case 9:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * 2023279179 ^ -85412452;
            continue;
          case 10:
            goto label_3;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1108943212;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 219035498)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 1488383403 ^ -196678781;
            continue;
          case 1:
            num1 = (int) num2 * -1418778750 ^ 2058785814;
            continue;
          case 2:
            goto label_1;
          case 4:
            this.b.addWhite(0, 0, Pieces.Rook);
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1466948681 ^ -310144627;
            continue;
          case 5:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -1683477301 ^ -2090913786;
            continue;
          case 6:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1552831774 ^ 312584353;
            continue;
          case 7:
            num1 = (int) num2 * 1196681253 ^ -1527763728;
            continue;
          case 8:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1765642358 ^ -228167806;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      this.b.addWhite(7, 0, Pieces.Rook);
      this.b.lights.FindAllMoves();
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 623881529;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1365882624)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -2063716987 ^ -563086974;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 96851049 ^ -225203716;
            continue;
          case 3:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * -1810584452 ^ 898521526;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.b.ClearBoard();
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 2066759346 ^ 1621870327;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -809385692;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -959358743)) % 6U)
        {
          case 0:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1294249599 ^ 1761236798;
            continue;
          case 1:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * -1381404193 ^ -2100984694;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 868601820 ^ -1312667017;
            continue;
          case 5:
            this.b.ClearBoard();
            num1 = (int) num2 * -1952180491 ^ 721958861;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.b.lights.FindAllMoves();
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -647199740;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1409275177)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 55976122 ^ -1275615085;
            continue;
          case 1:
            this.b.addWhite(7, 0, Pieces.Rook);
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * -1821091718 ^ 1384845194;
            continue;
          case 2:
            num1 = (int) num2 * 1486003824 ^ -1158325506;
            continue;
          case 3:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * -224710845 ^ -1154480069;
            continue;
          case 4:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -458238051 ^ 1754516985;
            continue;
          case 5:
            this.b.addBlack(7, 7, Pieces.Rook);
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -459244592 ^ 2105924697;
            continue;
          case 6:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1921370701 ^ 737291812;
            continue;
          case 7:
            this.b.ClearBoard();
            this.b.DisableTurns = true;
            num1 = (int) num2 * 1652927735 ^ 1695167748;
            continue;
          case 8:
            goto label_3;
          case 9:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 211468544 ^ -597117693;
            continue;
          case 10:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1546140737 ^ -2043344171;
            continue;
          case 11:
            goto label_1;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }
  }
}
