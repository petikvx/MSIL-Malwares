// Decompiled with JetBrains decompiler
// Type: y9X.Qw5
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using c0T;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using x7X;
using Xz9;

namespace y9X
{
  [DesignerGenerated]
  public class Qw5 : Form
  {
    private IContainer ႤႷ;
    [AccessedThroughProperty("Ⴐ")]
    private Label ႤႠ;
    [AccessedThroughProperty("Ⴅ")]
    private Label ႤႥ;
    [AccessedThroughProperty("Ⴓ")]
    private TextBox ႤႣ;
    [AccessedThroughProperty("Ⴈ")]
    private TextBox ႤႼ;
    [AccessedThroughProperty("ႠႠ")]
    private Label ႳႳ;
    public string ႳႰ;
    private j8C.n1Y Ⴗ = new j8C.n1Y();

    public Qw5()
    {
      this.Shown += new EventHandler(this.Xz0);
      this.Kx2();
    }

    protected virtual void Ty5([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.ႤႷ == null)
          return;
        this.ႤႷ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void Kx2()
    {
      this.Ⴄ = new Label();
      this.Ⴀ = new Button();
      this.Ⴍ = new Label();
      this.Ⴗ = new Label();
      this.Ⴐ = new Label();
      this.Ⴃ = new Label();
      this.Ⴅ = new Label();
      this.Ⴓ = new TextBox();
      this.Ⴈ = new TextBox();
      this.Ⴜ = new TextBox();
      this.ႠႤ = new TextBox();
      this.ႠႠ = new Label();
      this.ႠႭ = new Label();
      this.SuspendLayout();
      this.Ⴄ.AutoSize = true;
      this.Ⴄ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Ⴄ.Location = new Point(136, 38);
      this.Ⴄ.Name = "Label1";
      this.Ⴄ.Size = new Size(144, 20);
      this.Ⴄ.TabIndex = 0;
      this.Ⴄ.Text = "Attendance ID";
      this.Ⴀ.BackColor = Color.MediumSeaGreen;
      this.Ⴀ.Cursor = Cursors.Hand;
      this.Ⴀ.Font = new Font("Algerian", 7.8f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Ⴀ.ForeColor = SystemColors.ActiveCaptionText;
      this.Ⴀ.Location = new Point(48, 298);
      this.Ⴀ.Margin = new Padding(4, 5, 4, 5);
      this.Ⴀ.Name = "btnUpdate";
      this.Ⴀ.Size = new Size(126, 42);
      this.Ⴀ.TabIndex = 12;
      this.Ⴀ.Text = "&Update";
      this.Ⴀ.UseVisualStyleBackColor = false;
      this.Ⴍ.AutoSize = true;
      this.Ⴍ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Ⴍ.Location = new Point(314, 38);
      this.Ⴍ.Name = "lblid";
      this.Ⴍ.Size = new Size(77, 20);
      this.Ⴍ.TabIndex = 13;
      this.Ⴍ.Text = "Label2";
      this.Ⴗ.AutoSize = true;
      this.Ⴗ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Ⴗ.Location = new Point(45, 161);
      this.Ⴗ.Name = "Label3";
      this.Ⴗ.Size = new Size(71, 20);
      this.Ⴗ.TabIndex = 14;
      this.Ⴗ.Text = "Time in";
      this.Ⴐ.AutoSize = true;
      this.Ⴐ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Ⴐ.Location = new Point(45, 212);
      this.Ⴐ.Name = "Label4";
      this.Ⴐ.Size = new Size(84, 20);
      this.Ⴐ.TabIndex = 15;
      this.Ⴐ.Text = "Lunch In";
      this.Ⴃ.AutoSize = true;
      this.Ⴃ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Ⴃ.Location = new Point(285, 161);
      this.Ⴃ.Name = "Label7";
      this.Ⴃ.Size = new Size(86, 20);
      this.Ⴃ.TabIndex = 18;
      this.Ⴃ.Text = "Time Out";
      this.Ⴅ.AutoSize = true;
      this.Ⴅ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Ⴅ.Location = new Point(285, 212);
      this.Ⴅ.Name = "Label9";
      this.Ⴅ.Size = new Size(99, 20);
      this.Ⴅ.TabIndex = 20;
      this.Ⴅ.Text = "Lunch Out";
      this.Ⴓ.Location = new Point(140, 161);
      this.Ⴓ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴓ.Name = "txtTimein";
      this.Ⴓ.Size = new Size(112, 26);
      this.Ⴓ.TabIndex = 1;
      this.Ⴈ.Location = new Point(140, 212);
      this.Ⴈ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴈ.Name = "txtlunchin";
      this.Ⴈ.Size = new Size(112, 26);
      this.Ⴈ.TabIndex = 2;
      this.Ⴜ.Location = new Point(399, 161);
      this.Ⴜ.Margin = new Padding(3, 4, 3, 4);
      this.Ⴜ.Name = "txtTimeout";
      this.Ⴜ.Size = new Size(112, 26);
      this.Ⴜ.TabIndex = 3;
      this.ႠႤ.Location = new Point(399, 212);
      this.ႠႤ.Margin = new Padding(3, 4, 3, 4);
      this.ႠႤ.Name = "txtlunchout";
      this.ႠႤ.Size = new Size(112, 26);
      this.ႠႤ.TabIndex = 4;
      this.ႠႠ.AutoSize = true;
      this.ႠႠ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.ႠႠ.Location = new Point(314, 96);
      this.ႠႠ.Name = "lbldate";
      this.ႠႠ.Size = new Size(77, 20);
      this.ႠႠ.TabIndex = 26;
      this.ႠႠ.Text = "Label5";
      this.ႠႭ.AutoSize = true;
      this.ႠႭ.Font = new Font("Algerian", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.ႠႭ.Location = new Point(136, 96);
      this.ႠႭ.Name = "Label6";
      this.ႠႭ.Size = new Size(55, 20);
      this.ႠႭ.TabIndex = 25;
      this.ႠႭ.Text = "Date";
      this.AcceptButton = (IButtonControl) this.Ⴀ;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Tan;
      this.ClientSize = new Size(613, 368);
      this.Controls.Add((Control) this.ႠႠ);
      this.Controls.Add((Control) this.ႠႭ);
      this.Controls.Add((Control) this.ႠႤ);
      this.Controls.Add((Control) this.Ⴜ);
      this.Controls.Add((Control) this.Ⴈ);
      this.Controls.Add((Control) this.Ⴓ);
      this.Controls.Add((Control) this.Ⴅ);
      this.Controls.Add((Control) this.Ⴃ);
      this.Controls.Add((Control) this.Ⴐ);
      this.Controls.Add((Control) this.Ⴗ);
      this.Controls.Add((Control) this.Ⴍ);
      this.Controls.Add((Control) this.Ⴀ);
      this.Controls.Add((Control) this.Ⴄ);
      this.Margin = new Padding(3, 4, 3, 4);
      this.Name = "ႤႰ";
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "FrmUpdate";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Ⴄ
    {
      get => this.Ⴗ.Ⴐ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴐ = (object) value as Label;
    }

    internal virtual Button Ⴀ
    {
      get => this.Ⴗ.Ⴍ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.t5W);
        ButtonBase ⴍ1 = (ButtonBase) this.Ⴗ.Ⴍ;
        if ((Button) ⴍ1 != null)
          ⴍ1.Click -= (EventHandler) multicastDelegate;
        this.Ⴗ.Ⴍ = (ButtonBase) value as Button;
        ButtonBase ⴍ2 = (ButtonBase) this.Ⴗ.Ⴍ;
        if (!(ⴍ2 is Button))
          return;
        (ⴍ2 as Button).Click += (EventHandler) multicastDelegate;
      }
    }

    internal virtual Label Ⴍ
    {
      get => this.Ⴗ.Ⴀ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴀ = value;
    }

    internal virtual Label Ⴗ
    {
      get => this.Ⴗ.Ⴃ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴃ = (Control) value as Label;
    }

    internal virtual Label Ⴐ
    {
      get => this.ႤႠ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႤႠ = value;
    }

    internal virtual Label Ⴃ
    {
      get => this.Ⴗ.Ⴄ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴄ = (object) value as Label;
    }

    internal virtual Label Ⴅ
    {
      get => this.ႤႥ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႤႥ = value;
    }

    internal virtual TextBox Ⴓ
    {
      get => this.ႤႣ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႤႣ = value;
    }

    internal virtual TextBox Ⴈ
    {
      get => this.ႤႼ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႤႼ = value;
    }

    internal virtual TextBox Ⴜ
    {
      get => this.Ⴗ.Ⴓ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴓ = value;
    }

    internal virtual TextBox ႠႤ
    {
      get => this.Ⴗ.Ⴈ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴈ = (object) value as TextBox;
    }

    internal virtual Label ႠႠ
    {
      get => this.ႳႳ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႳ = value;
    }

    internal virtual Label ႠႭ
    {
      get => this.Ⴗ.Ⴗ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴗ.Ⴗ = value;
    }

    public void Tn5()
    {
      this.Ⴍ.Text = "";
      this.ႠႠ.Text = "";
      this.Ⴈ.Text = "";
      this.ႠႤ.Text = "";
      this.Ⴓ.Text = "";
      this.Ⴜ.Text = "";
      this.Ⴓ.Focus();
    }

    private void Xz0([In] object obj0, [In] EventArgs obj1)
    {
      this.Tn5();
      Table<Ap0> ⴍ = new Tt1().Ⴍ;
      Expression expression = (Expression) Expression.Parameter(typeof (Ap0), "o");
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Ap0, bool>> predicate = Expression.Lambda<Func<Ap0, bool>>((Expression) Expression.Equal((Expression) Expression.Call((Expression) null, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Operators.CompareString)), new Expression[3]
      {
        (Expression) Expression.Property((Expression) (expression as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.x8N))),
        (Expression) Expression.Field((Expression) Expression.Constant((object) this, typeof (Qw5)), FieldInfo.GetFieldFromHandle(__fieldref (Qw5.ႳႰ))),
        (Expression) Expression.Constant((object) false, typeof (bool))
      }), (Expression) Expression.Constant((object) 0, typeof (int)), false, (MethodInfo) null), expression as ParameterExpression);
      INotifyPropertyChanged notifyPropertyChanged = (INotifyPropertyChanged) ⴍ.FirstOrDefault<Ap0>(predicate);
      if (!(notifyPropertyChanged is Ap0))
      {
        int num = (int) MessageBox.Show("Attendance not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        this.Close();
      }
      else
      {
        this.Ⴍ.Text = ((Ap0) notifyPropertyChanged).Ⴃ;
        this.ႠႠ.Text = ((Ap0) notifyPropertyChanged).Ⴀ.ToString();
        this.Ⴓ.Text = (notifyPropertyChanged as Ap0).Ⴀ.ToString();
        this.Ⴜ.Text = ((Ap0) notifyPropertyChanged).Ⴓ.ToString();
        this.Ⴈ.Text = ((Ap0) notifyPropertyChanged).Ⴈ.ToString();
        this.ႠႤ.Text = ((Ap0) notifyPropertyChanged).Ⴗ.ToString();
      }
    }

    private void t5W([In] object obj0, [In] EventArgs obj1)
    {
      if (!this.ValidateChildren())
        return;
      DataContext dataContext = (DataContext) new Tt1();
      Table<Ap0> ⴍ = (dataContext as Tt1).Ⴍ;
      object obj2 = (object) Expression.Parameter(typeof (Ap0), "o");
      // ISSUE: method reference
      // ISSUE: method reference
      // ISSUE: field reference
      Expression<Func<Ap0, bool>> predicate = Expression.Lambda<Func<Ap0, bool>>((Expression) Expression.Equal((Expression) Expression.Call((Expression) null, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Operators.CompareString)), new Expression[3]
      {
        (Expression) Expression.Property((Expression) (obj2 as ParameterExpression), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ap0.x8N))),
        (Expression) Expression.Field((Expression) Expression.Constant((object) this, typeof (Qw5)), FieldInfo.GetFieldFromHandle(__fieldref (Qw5.ႳႰ))),
        (Expression) Expression.Constant((object) false, typeof (bool))
      }), (Expression) Expression.Constant((object) 0, typeof (int)), false, (MethodInfo) null), (ParameterExpression) obj2);
      object obj3 = (object) ⴍ.FirstOrDefault<Ap0>(predicate);
      if ((Ap0) obj3 == null)
      {
        int num = (int) MessageBox.Show("Attendance not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        this.Close();
      }
      else
      {
        object obj4 = (object) new Ap0();
        ((Ap0) obj3).Ⴃ = this.Ⴍ.Text;
        try
        {
          DateTime exact;
          if (Operators.CompareString(this.Ⴓ.Text, "", false) != 0)
          {
            Ap0 ap0 = (Ap0) obj3;
            exact = DateTime.ParseExact(this.Ⴓ.Text, "HH:mm:ss", (IFormatProvider) DateTimeFormatInfo.InvariantInfo);
            TimeSpan? nullable = new TimeSpan?(exact.TimeOfDay);
            ap0.Ⴀ = nullable;
          }
          if (Operators.CompareString(this.Ⴜ.Text, "", false) != 0)
          {
            Ap0 ap0 = obj3 as Ap0;
            exact = DateTime.ParseExact(this.Ⴜ.Text, "HH:mm:ss", (IFormatProvider) DateTimeFormatInfo.InvariantInfo);
            TimeSpan? nullable = new TimeSpan?(exact.TimeOfDay);
            ap0.Ⴓ = nullable;
          }
          if (Operators.CompareString(this.Ⴈ.Text, "", false) != 0)
          {
            Ap0 ap0 = (Ap0) obj3;
            exact = DateTime.ParseExact(this.Ⴈ.Text, "HH:mm:ss", (IFormatProvider) DateTimeFormatInfo.InvariantInfo);
            TimeSpan? nullable = new TimeSpan?(exact.TimeOfDay);
            ap0.Ⴈ = nullable;
          }
          if (Operators.CompareString(this.ႠႤ.Text, "", false) != 0)
          {
            Ap0 ap0 = (Ap0) obj3;
            exact = DateTime.ParseExact(this.ႠႤ.Text, "HH:mm:ss", (IFormatProvider) DateTimeFormatInfo.InvariantInfo);
            TimeSpan? nullable = new TimeSpan?(exact.TimeOfDay);
            ap0.Ⴗ = nullable;
          }
          int num = (int) MessageBox.Show("Attendance [" + (obj3 as Ap0).Ⴃ + "] updated", "Done", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num = (int) MessageBox.Show("Make sure time is in corrent format hh:mm:ss in 24 hour format", "Format Incorrent", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          ProjectData.ClearProjectError();
        }
        dataContext.SubmitChanges();
      }
    }
  }
}
