// Decompiled with JetBrains decompiler
// Type: Windows_Firewall.My.MySettings
// Assembly: Windows Firewall, Version=12.5.2.3, Culture=neutral, PublicKeyToken=null
// MVID: B2F50818-876B-4F01-AE88-291FA22C03A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.AntiAV.gen-0a7f9a4a2ff6257feb79223e3432cef859eda0b8e5738450449fd016eb059f70.exe

using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using WindowsFirewall;

namespace Windows_Firewall.My
{
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
  [CompilerGenerated]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) OptionsManager.SelectToolbox((SettingsBase) EmulatorService.SelectToolbox());
    private static bool addedHandler;
    private static object addedHandlerLockObject = ProjectSet.SelectToolbox(EmulatorAttribute.SelectToolbox());

    [DebuggerNonUserCode]
    public MySettings()
    {
    }

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!ClientSite.SelectToolbox((object) ActivityContext.SelectToolbox))
        return;
label_1:
      switch (3)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MySettings.AutoSaveSettings);
          }
          StoreAttribute.SelectToolbox((object) ToolboxSerializer.SelectToolbox());
          break;
      }
    }

    public static MySettings Default
    {
      get
      {
        if (!MySettings.addedHandler)
        {
label_1:
          switch (6)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (MySettings.get_Default);
              }
              object handlerLockObject = MySettings.addedHandlerLockObject;
              DeviceLayout.SelectToolbox(handlerLockObject);
              EditorQueue.SelectToolbox(handlerLockObject);
              try
              {
                if (!MySettings.addedHandler)
                {
label_6:
                  switch (1)
                  {
                    case 0:
                      goto label_6;
                    default:
                      GroupQueue.SelectToolbox((object) ActivityContext.SelectToolbox, (ShutdownEventHandler) ((sender, e) =>
                      {
                        if (!ClientSite.SelectToolbox((object) ActivityContext.SelectToolbox))
                          return;
label_1:
                        switch (3)
                        {
                          case 0:
                            goto label_1;
                          default:
                            if (false)
                            {
                              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (MySettings.AutoSaveSettings);
                            }
                            StoreAttribute.SelectToolbox((object) ToolboxSerializer.SelectToolbox());
                            break;
                        }
                      }));
                      MySettings.addedHandler = true;
                      break;
                  }
                }
              }
              finally
              {
                ConditionOptions.SelectToolbox(handlerLockObject);
              }
              break;
          }
        }
        MySettings defaultInstance = MySettings.defaultInstance;
        return defaultInstance;
      }
    }
  }
}
