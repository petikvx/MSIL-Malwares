// Decompiled with JetBrains decompiler
// Type: TextScanner
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.IO;

public sealed class TextScanner
{
  private TextReader reader;
  private TextPosition position;

  public TextPosition Position => this.position;

  public bool CanRead => this.reader.Peek() != -1;

  public TextScanner(TextReader reader) => this.reader = reader ?? throw new ArgumentNullException(nameof (reader));

  public char Peek()
  {
    int num = this.reader.Peek();
    return num != -1 ? (char) num : throw new JsonParseException(JsonParseException.ErrorType.IncompleteMessage, this.position);
  }

  public char Read()
  {
    int num = this.reader.Read();
    switch (num)
    {
      case -1:
        throw new JsonParseException(JsonParseException.ErrorType.IncompleteMessage, this.position);
      case 10:
        ++this.position.line;
        this.position.column = 0L;
        return '\n';
      case 13:
        if (this.reader.Peek() == 10)
        {
          this.reader.Read();
          goto case 10;
        }
        else
          goto case 10;
      default:
        ++this.position.column;
        return (char) num;
    }
  }

  public void SkipWhitespace()
  {
    while (char.IsWhiteSpace(this.Peek()))
    {
      int num = (int) this.Read();
    }
  }

  public void Assert(char next)
  {
    if ((int) this.Peek() != (int) next)
      throw new JsonParseException(string.Format("Parser expected '{0}'", (object) next), JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.position);
    int num = (int) this.Read();
  }

  public void Assert(string next)
  {
    try
    {
      for (int index = 0; index < next.Length; ++index)
        this.Assert(next[index]);
    }
    catch (JsonParseException ex) when (ex.Type == JsonParseException.ErrorType.InvalidOrUnexpectedCharacter)
    {
      throw new JsonParseException("Parser expected '" + next + "'", JsonParseException.ErrorType.InvalidOrUnexpectedCharacter, this.position);
    }
  }
}
