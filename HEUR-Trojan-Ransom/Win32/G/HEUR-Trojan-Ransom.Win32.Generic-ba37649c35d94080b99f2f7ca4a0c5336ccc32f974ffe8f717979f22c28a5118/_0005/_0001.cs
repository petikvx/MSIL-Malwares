// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Printed PI Usd document, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 65E54DF2-527C-4BC3-9C2D-01CB8B13C8B1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\HEUR-Trojan-Ransom.Win32.Generic-ba37649c35d94080b99f2f7ca4a0c5336ccc32f974ffe8f717979f22c28a5118.exe

using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0005
{
  [\u0001.\u0001]
  [\u0003.\u0001]
  internal static class \u0001
  {
    private static ModuleHandle \u0001;
    private static char[] \u0001;

    [\u0001.\u0001]
    [\u0002.\u0001]
    [\u0003.\u0001]
    public static void \u0001([In] int obj0)
    {
      Type type;
      try
      {
        Type typeFromHandle = Type.GetTypeFromHandle(\u0005.\u0001.\u0001.ResolveTypeHandle(33554433 + obj0));
        if (true)
          type = typeFromHandle;
      }
      catch
      {
        return;
      }
      FieldInfo[] fields = type.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
      if (true)
        goto label_49;
label_5:
      if (true)
        goto label_50;
label_47:
      FieldInfo[] fieldInfoArray;
      int index1;
      for (; index1 < fieldInfoArray.Length; ++index1)
      {
        FieldInfo fieldInfo1 = fieldInfoArray[index1];
        if (true)
          goto label_51;
label_7:
        FieldInfo fieldInfo2;
        string name = fieldInfo2.Name;
        if (true)
          goto label_52;
label_8:
        if (true)
          goto label_53;
label_9:
        int num1 = 0;
        string str;
        int num2 = str.Length;
        int num3;
        while (true)
        {
          num3 = num2 - 1;
          if (false)
            num2 = num3;
          else
            break;
        }
        bool flag;
        for (int index2 = num3; index2 >= 0; --index2)
        {
          char ch = str[index2];
          if (ch == '~')
          {
            flag = true;
            break;
          }
          for (int index3 = 0; index3 < 58; ++index3)
          {
            if ((int) \u0005.\u0001.\u0001[index3] == (int) ch)
            {
              num1 = num1 * 58 + index3;
              break;
            }
          }
        }
        MethodInfo methodFromHandle;
        try
        {
          methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(\u0005.\u0001.\u0001.ResolveMethodHandle(num1 + 167772161));
        }
        catch
        {
          continue;
        }
        Delegate @delegate;
        if (methodFromHandle.IsStatic)
        {
          try
          {
            @delegate = Delegate.CreateDelegate(fieldInfo2.FieldType, methodFromHandle);
          }
          catch (Exception ex)
          {
            continue;
          }
        }
        else
        {
          ParameterInfo[] parameters = methodFromHandle.GetParameters();
          int length = parameters.Length + 1;
          Type[] parameterTypes = new Type[length];
          parameterTypes[0] = typeof (object);
          int num4;
          int num5;
          for (int index4 = 1; index4 < length; index4 = num4 + num5)
          {
            parameterTypes[index4] = parameters[index4 - 1].ParameterType;
            num4 = index4;
            num5 = 1;
            if (num5 == 0)
              goto label_40;
          }
          DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, methodFromHandle.ReturnType, parameterTypes, type, true);
          ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
          ilGenerator.Emit(OpCodes.Ldarg_0);
          if (length > 1)
            ilGenerator.Emit(OpCodes.Ldarg_1);
          if (length > 2)
            ilGenerator.Emit(OpCodes.Ldarg_2);
          if (length > 3)
            ilGenerator.Emit(OpCodes.Ldarg_3);
          int num6;
          if (length > 4)
            num6 = 4;
          else
            goto label_41;
label_39:
          int num7 = num6;
          num5 = length;
          num4 = num7;
label_40:
          if (num4 < num5)
          {
            ilGenerator.Emit(OpCodes.Ldarg_S, num6);
            ++num6;
            goto label_39;
          }
label_41:
          ilGenerator.Emit(OpCodes.Tailcall);
          ilGenerator.Emit(flag ? OpCodes.Callvirt : OpCodes.Call, methodFromHandle);
          ilGenerator.Emit(OpCodes.Ret);
          try
          {
            @delegate = dynamicMethod.CreateDelegate(type);
          }
          catch
          {
            continue;
          }
        }
        try
        {
          fieldInfo2.SetValue((object) null, (object) @delegate);
          continue;
        }
        catch
        {
          continue;
        }
label_53:
        flag = false;
        goto label_9;
label_52:
        str = name;
        goto label_8;
label_51:
        fieldInfo2 = fieldInfo1;
        goto label_7;
      }
      return;
label_50:
      index1 = 0;
      goto label_47;
label_49:
      fieldInfoArray = fields;
      goto label_5;
    }

    static \u0001()
    {
      char[] chArray = new char[58];
      // ISSUE: field reference
      RuntimeFieldHandle fldHandle = __fieldref (\u0001.\u0002.\u0001);
      if (true)
        goto label_7;
label_1:
      \u0005.\u0001.\u0001 = chArray;
      do
      {
        Type type1;
        if (true)
        {
          Type type2 = typeof (MulticastDelegate);
          if (true)
            type1 = type2;
        }
        if ((object) type1 != null)
          \u0005.\u0001.\u0001 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
      }
      while (false);
      return;
label_7:
      RuntimeHelpers.InitializeArray((Array) chArray, fldHandle);
      goto label_1;
    }
  }
}
