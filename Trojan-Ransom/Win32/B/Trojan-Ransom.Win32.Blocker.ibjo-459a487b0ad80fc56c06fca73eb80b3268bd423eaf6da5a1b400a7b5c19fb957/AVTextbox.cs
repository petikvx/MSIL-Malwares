// Decompiled with JetBrains decompiler
// Type: FileLocker.AVTextbox
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  public class AVTextbox : Control
  {
    private static List<WeakReference> __ENCList;
    [AccessedThroughProperty("txtbox")]
    private TextBox _txtbox;
    private bool _passmask;
    private int _maxchars;
    private HorizontalAlignment _align;
    private bool _multiline;

    [DebuggerNonUserCode]
    static AVTextbox()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      AVTextbox.__ENCList = new List<WeakReference>();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object object_0)
    {
      lock (AVTextbox.__ENCList)
      {
        if (AVTextbox.__ENCList.Count == AVTextbox.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (AVTextbox.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (AVTextbox.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                AVTextbox.__ENCList[index1] = AVTextbox.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          AVTextbox.__ENCList.RemoveRange(index1, checked (AVTextbox.__ENCList.Count - index1));
          AVTextbox.__ENCList.Capacity = AVTextbox.__ENCList.Count;
        }
        AVTextbox.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(object_0)));
      }
    }

    private virtual TextBox txtbox
    {
      [DebuggerNonUserCode] get => this._txtbox;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = (EventHandler) ((sender, e) => this.TextChngTxtBox());
        if (this._txtbox != null)
          this._txtbox.TextChanged -= eventHandler;
        this._txtbox = value;
        if (this._txtbox == null)
          return;
        this._txtbox.TextChanged += eventHandler;
      }
    }

    public bool UseSystemPasswordChar
    {
      get => this._passmask;
      set
      {
        this.txtbox.UseSystemPasswordChar = this.UseSystemPasswordChar;
        this._passmask = value;
        this.Invalidate();
      }
    }

    public int MaxLength
    {
      get => this._maxchars;
      set
      {
        this._maxchars = value;
        this.txtbox.MaxLength = this.MaxLength;
        this.Invalidate();
      }
    }

    public HorizontalAlignment TextAlignment
    {
      get => this._align;
      set
      {
        this._align = value;
        this.Invalidate();
      }
    }

    public bool MultiLine
    {
      get => this._multiline;
      set
      {
        this._multiline = value;
        this.Invalidate();
      }
    }

    protected override void OnTextChanged(EventArgs e)
    {
      base.OnTextChanged(e);
      this.Invalidate();
    }

    protected override void OnBackColorChanged(EventArgs e)
    {
      base.OnBackColorChanged(e);
      this.txtbox.BackColor = this.BackColor;
      this.Invalidate();
    }

    protected override void OnForeColorChanged(EventArgs e)
    {
      base.OnForeColorChanged(e);
      this.txtbox.ForeColor = this.ForeColor;
      this.Invalidate();
    }

    protected override void OnFontChanged(EventArgs e)
    {
      base.OnFontChanged(e);
      this.txtbox.Font = this.Font;
    }

    protected override void OnGotFocus(EventArgs e)
    {
      base.OnGotFocus(e);
      this.txtbox.Focus();
    }

    public void TextChngTxtBox() => this.Text = this.txtbox.Text;

    public void TextChng() => this.txtbox.Text = this.Text;

    public void NewTextBox()
    {
      TextBox txtbox = this.txtbox;
      txtbox.Multiline = false;
      txtbox.BackColor = Color.FromArgb(43, 43, 43);
      txtbox.ForeColor = this.ForeColor;
      txtbox.Text = string.Empty;
      txtbox.TextAlign = HorizontalAlignment.Center;
      txtbox.BorderStyle = BorderStyle.None;
      txtbox.Location = new Point(7, 5);
      txtbox.Font = new Font("Verdana", 10f);
      txtbox.Size = new Size(checked (this.Width - 10), 33);
      txtbox.UseSystemPasswordChar = this.UseSystemPasswordChar;
    }

    public AVTextbox()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.TextChanged += (EventHandler) ((sender, e) => this.TextChng());
      AVTextbox.__ENCAddToList((object) this);
      this.txtbox = new TextBox();
      this._passmask = false;
      this._maxchars = (int) short.MaxValue;
      this._multiline = false;
      this.NewTextBox();
      this.Controls.Add((Control) this.txtbox);
      this.SetStyle(ControlStyles.UserPaint, true);
      this.SetStyle(ControlStyles.SupportsTransparentBackColor, true);
      this.Text = "";
      this.BackColor = Color.White;
      this.ForeColor = Color.Gray;
      this.Font = new Font("Verdana", 10f);
      this.Size = new Size(135, 33);
      this.DoubleBuffered = true;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      Bitmap bitmap = new Bitmap(this.Width, this.Height);
      Graphics graphics = Graphics.FromImage((Image) bitmap);
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      this.Height = 33;
      TextBox txtbox = this.txtbox;
      txtbox.Width = checked (this.Width - 10);
      txtbox.TextAlign = this.TextAlignment;
      txtbox.UseSystemPasswordChar = this.UseSystemPasswordChar;
      txtbox.Height = 33;
      graphics.Clear(Color.Transparent);
      graphics.DrawRectangle(new Pen((Brush) new SolidBrush(Color.FromArgb(216, 216, 216))), new Rectangle(0, 0, checked (this.Width - 1), checked (this.Height - 1)));
      NewLateBinding.LateCall((object) e.Graphics, (System.Type) null, "DrawImage", new object[3]
      {
        RuntimeHelpers.GetObjectValue(bitmap.Clone()),
        (object) 0,
        (object) 0
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      graphics.Dispose();
      bitmap.Dispose();
    }
  }
}
