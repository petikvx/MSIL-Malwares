// Decompiled with JetBrains decompiler
// Type: Core.Infrastructure.Logging.LoggedActionFactory
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Helpers;
using log4net;
using log4net.Core;
using System;

namespace Core.Infrastructure.Logging
{
  public static class LoggedActionFactory
  {
    public static void AfterEntityAdd<T>(ILog log, T entity) where T : class => LoggedActionFactory.EntityInfo<T>(log, "Added {0}".FormatWith((object) ((ILoggerWrapper) log).Logger.Name), entity);

    public static void BeforeEntityAdd<T>(ILog log, T entity) where T : class => LoggedActionFactory.EntityInfo<T>(log, "Attempting to add {0}".FormatWith((object) ((ILoggerWrapper) log).Logger.Name), entity);

    public static void EntityAdd<T>(ILog log, T entity) where T : class => LoggedActionFactory.EntityInfo<T>(log, "Adding {0}".FormatWith((object) ((ILoggerWrapper) log).Logger.Name), entity);

    public static void AfterEntityRemove<T>(ILog log, T entity) where T : class => LoggedActionFactory.EntityInfo<T>(log, "Added {0}".FormatWith((object) ((ILoggerWrapper) log).Logger.Name), entity);

    public static void BeforeEntityRemove<T>(ILog log, T entity) where T : class => LoggedActionFactory.EntityInfo<T>(log, "Attempting to remove {0}".FormatWith((object) ((ILoggerWrapper) log).Logger.Name), entity);

    public static void EntityRemove<T>(ILog log, T entity) where T : class => LoggedActionFactory.EntityInfo<T>(log, "Removing {0}".FormatWith((object) ((ILoggerWrapper) log).Logger.Name), entity);

    public static void EntityInfo<T>(ILog log, string message, T entity) where T : class => log.Info((object) (message + " {0}".FormatWith((object) entity.ToString())));

    public static void Fatal<T>(ILog log, string message, T entity) where T : class
    {
      string str = (object) entity != null ? entity.ToString() : string.Empty;
      log.Fatal((object) (message + " {0}".FormatWith((object) str).Trim()));
    }

    public static void Fatal<T>(ILog log, string message) => LoggedActionFactory.Fatal<object>(log, message, (object) null);

    public static string FormatWith(this string target, params object[] args)
    {
      Checks.Argument.IsNotEmpty(target, nameof (target));
      return string.Format((IFormatProvider) Constants.CurrentCulture, target, args);
    }
  }
}
