// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEYear
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEYear : TemporalExpression
  {
    public int Start { get; set; }

    public int? End { get; set; }

    public TEYear(int year)
    {
label_1:
      int num1 = 1867394699;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1361721679)) % 5U)
        {
          case 0:
            this.Start = year;
            num1 = (int) num2 * 463793523 ^ -993850508;
            continue;
          case 1:
            num1 = (int) num2 * -439075061 ^ 1487867170;
            continue;
          case 2:
            num1 = (int) num2 * 454993688 ^ 481594294;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public TEYear(int start, int end)
    {
label_1:
      int num1 = 1457025910;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1274197111)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1747407183 ^ -2034728364;
            continue;
          case 2:
            num1 = (int) num2 * -1053748098 ^ -2094129481;
            continue;
          case 3:
            num1 = (int) num2 * -1081362443 ^ -920663971;
            continue;
          case 4:
            this.Start = start;
            num1 = (int) num2 * 1085972380 ^ 212816852;
            continue;
          case 5:
            this.End = new int?(end);
            num1 = (int) num2 * 215621605 ^ -119071520;
            continue;
          case 6:
            num1 = (int) num2 * -1897094996 ^ 1298153879;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public override bool Includes(DateTime aDate)
    {
      int? end = this.End;
label_1:
      int num1 = 710388428;
      bool flag1;
      while (true)
      {
        uint num2;
        bool hasValue;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 179069945)) % 13U)
        {
          case 1:
            num1 = (int) num2 * 1011603492 ^ -491581148;
            continue;
          case 2:
            goto label_12;
          case 3:
            num1 = (int) num2 * 1415584822 ^ 1129434974;
            continue;
          case 4:
            if (aDate.Year < this.Start)
            {
              num3 = 0;
              break;
            }
            num1 = 990175949;
            continue;
          case 5:
            flag1 = aDate.Year == this.Start;
            num1 = 1110982812;
            continue;
          case 6:
            int num4 = hasValue ? 2084479063 : (num4 = 669227215);
            num1 = num4 ^ (int) num2 * -1556889981;
            continue;
          case 7:
            goto label_1;
          case 8:
            hasValue = end.HasValue;
            num1 = (int) num2 * 954751738 ^ -1235573840;
            continue;
          case 9:
            num1 = (int) num2 * -1953521872 ^ 24684202;
            continue;
          case 10:
            end = this.End;
            int start = this.Start;
            flag2 = end.GetValueOrDefault() < start & end.HasValue;
            num1 = (int) num2 * 1738811673 ^ 1765707198;
            continue;
          case 11:
            int year = aDate.Year;
            end = this.End;
            int valueOrDefault = end.GetValueOrDefault();
            num3 = year <= valueOrDefault & end.HasValue ? 1 : 0;
            break;
          case 12:
            int num5 = !flag2 ? -1069806818 : (num5 = -1384935158);
            num1 = num5 ^ (int) num2 * -1333225119;
            continue;
          default:
            goto label_17;
        }
        flag1 = num3 != 0;
        num1 = 1517569503;
      }
label_12:
      throw TEYear.\u200E‪‏‌‮⁬⁪⁯⁯⁪⁬⁬⁮‏⁯⁫⁫‍⁭‎⁯⁯‬​​‎⁯⁮​‏‭‪‍⁫‫‌‌‍‎⁫‮();
label_17:
      return flag1;
    }

    static ArgumentException \u200E‪‏‌‮⁬⁪⁯⁯⁪⁬⁬⁮‏⁯⁫⁫‍⁭‎⁯⁯‬​​‎⁯⁮​‏‭‪‍⁫‫‌‌‍‎⁫‮() => new ArgumentException();
  }
}
