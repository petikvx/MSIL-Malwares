// Decompiled with JetBrains decompiler
// Type: ProtoBuf.Serializers.ArrayDecorator
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf.Meta;
using System;
using System.Collections;

namespace ProtoBuf.Serializers
{
  internal sealed class ArrayDecorator : ProtoDecoratorBase
  {
    private readonly int fieldNumber;
    private const byte OPTIONS_WritePacked = 1;
    private const byte OPTIONS_OverwriteList = 2;
    private const byte OPTIONS_SupportNull = 4;
    private readonly byte options;
    private readonly WireType packedWireType;
    private readonly Type arrayType;
    private readonly Type itemType;

    public ArrayDecorator(
      TypeModel model,
      IProtoSerializer tail,
      int fieldNumber,
      bool writePacked,
      WireType packedWireType,
      Type arrayType,
      bool overwriteList,
      bool supportNull)
      : base(tail)
    {
      this.itemType = arrayType.GetElementType();
      if (!supportNull)
      {
        if ((object) Helpers.GetUnderlyingType(this.itemType) == null)
        {
          Type itemType1 = this.itemType;
        }
      }
      else
      {
        Type itemType2 = this.itemType;
      }
      if ((writePacked || packedWireType != WireType.None) && fieldNumber <= 0)
        throw new ArgumentOutOfRangeException(nameof (fieldNumber));
      if (!ListDecorator.CanPack(packedWireType))
      {
        if (writePacked)
          throw new InvalidOperationException("Only simple data-types can use packed encoding");
        packedWireType = WireType.None;
      }
      this.fieldNumber = fieldNumber;
      this.packedWireType = packedWireType;
      if (writePacked)
        this.options |= (byte) 1;
      if (overwriteList)
        this.options |= (byte) 2;
      if (supportNull)
        this.options |= (byte) 4;
      this.arrayType = arrayType;
    }

    public override Type ExpectedType => this.arrayType;

    public override bool RequiresOldValue => this.AppendToCollection;

    public override bool ReturnsValue => true;

    private bool AppendToCollection => ((int) this.options & 2) == 0;

    private bool SupportNull => ((uint) this.options & 4U) > 0U;

    public override void Write(object value, ProtoWriter dest)
    {
      IList list = (IList) value;
      int count = list.Count;
      bool flag1 = ((uint) this.options & 1U) > 0U;
      SubItemToken token;
      if (flag1)
      {
        ProtoWriter.WriteFieldHeader(this.fieldNumber, WireType.String, dest);
        token = ProtoWriter.StartSubItem(value, dest);
        ProtoWriter.SetPackedField(this.fieldNumber, dest);
      }
      else
        token = new SubItemToken();
      bool flag2 = !this.SupportNull;
      for (int index = 0; index < count; ++index)
      {
        object obj = list[index];
        if (flag2 && obj == null)
          throw new NullReferenceException();
        this.Tail.Write(obj, dest);
      }
      if (!flag1)
        return;
      ProtoWriter.EndSubItem(token, dest);
    }

    public override object Read(object value, ProtoReader source)
    {
      int fieldNumber = source.FieldNumber;
      BasicList basicList = new BasicList();
      if (this.packedWireType != WireType.None && source.WireType == WireType.String)
      {
        SubItemToken token = ProtoReader.StartSubItem(source);
        while (ProtoReader.HasSubValue(this.packedWireType, source))
          basicList.Add(this.Tail.Read((object) null, source));
        ProtoReader.EndSubItem(token, source);
      }
      else
      {
        do
        {
          basicList.Add(this.Tail.Read((object) null, source));
        }
        while (source.TryReadFieldHeader(fieldNumber));
      }
      int offset = this.AppendToCollection ? (value == null ? 0 : ((Array) value).Length) : 0;
      Array instance = Array.CreateInstance(this.itemType, offset + basicList.Count);
      if (offset != 0)
        ((Array) value).CopyTo(instance, 0);
      basicList.CopyTo(instance, offset);
      return (object) instance;
    }
  }
}
