// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.UsageCountStore1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.IsolatedStorage;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace SmartAssembly.SmartUsageCore
{
  public static class UsageCountStore1
  {
    private const string AssemblyID = "{100fd8cd-4fe2-410e-8c33-ae1af08ef31d}";
    private static readonly string s_BuildHash;
    private static readonly string s_UsageFile;
    private static readonly string s_DynamicUsageFolder;
    private static readonly string s_UsageFileLock;
    private static readonly IsolatedStorageFile s_IsolatedStorage;
    private static readonly Encoding s_Encoding;
    private static readonly HashAlgorithm s_Hash;

    static UsageCountStore1()
    {
      try
      {
        UsageCountStore1.s_BuildHash = "{FA0844EB-EF82-404C-B76C-C092ABDB9392}".Substring(1, 8);
        UsageCountStore1.s_UsageFile = Path.Combine(UsageCountStore1.s_BuildHash, "Usages.bin");
        UsageCountStore1.s_DynamicUsageFolder = Path.Combine(UsageCountStore1.s_BuildHash, "D");
        UsageCountStore1.s_UsageFileLock = Path.Combine(UsageCountStore1.s_BuildHash, "l");
        UsageCountStore1.s_Encoding = Encoding.UTF8;
        UsageCountStore1.s_Hash = (HashAlgorithm) new MD5CryptoServiceProvider();
        UsageCountStore1.s_IsolatedStorage = IsolatedStorageFile.GetUserStoreForAssembly();
        UsageCountStore1.s_IsolatedStorage.CreateDirectory(UsageCountStore1.s_BuildHash);
        UsageCountStore1.s_IsolatedStorage.CreateDirectory(UsageCountStore1.s_DynamicUsageFolder);
      }
      catch (Exception ex)
      {
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    private static IDisposable GetGlobalUsageCountFileLock()
    {
      try
      {
        return (IDisposable) new UsageCountStore1.DisposableMutex(UsageCountStore1.s_UsageFileLock);
      }
      catch (Exception ex)
      {
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    private static IsolatedStorageFileStream TryOpenLockFile()
    {
      IsolatedStorageFileStream storageFileStream1;
      int id;
      byte[] bytes;
      try
      {
        IsolatedStorageFileStream storageFileStream2;
        try
        {
          storageFileStream1 = new IsolatedStorageFileStream(UsageCountStore1.s_UsageFileLock, FileMode.Create, FileAccess.Read, FileShare.None);
          Encoding utF8 = Encoding.UTF8;
          id = Process.GetCurrentProcess().Id;
          string s = id.ToString();
          bytes = utF8.GetBytes(s);
          storageFileStream1.Write(bytes, 0, bytes.Length);
          storageFileStream2 = storageFileStream1;
        }
        catch (IOException ex)
        {
          storageFileStream2 = (IsolatedStorageFileStream) null;
        }
        return storageFileStream2;
      }
      catch (Exception ex)
      {
        IsolatedStorageFileStream o1 = storageFileStream1;
        byte[] o2 = bytes;
        IsolatedStorageFileStream storageFileStream3;
        IsolatedStorageFileStream o3 = storageFileStream3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) id;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    private static IsolatedStorageFileStream OpenIsolatedFile(
      string relativeFile,
      FileMode mode,
      FileAccess access)
    {
      try
      {
        return new IsolatedStorageFileStream(relativeFile, mode, access, FileShare.None, UsageCountStore1.s_IsolatedStorage);
      }
      catch (Exception ex)
      {
        string o1 = relativeFile;
        // ISSUE: variable of a boxed type
        __Boxed<FileMode> o2 = (Enum) mode;
        // ISSUE: variable of a boxed type
        __Boxed<FileAccess> o3 = (Enum) access;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    private static void DeleteIsolatedFile(string relativeFile)
    {
      try
      {
        try
        {
          UsageCountStore1.s_IsolatedStorage.DeleteFile(relativeFile);
        }
        catch (IsolatedStorageException ex)
        {
        }
      }
      catch (Exception ex)
      {
        string o1 = relativeFile;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    private static void IncrementCount(string usageFile, long countPosition)
    {
      IsolatedStorageFileStream storageFileStream;
      ulong num;
      try
      {
        storageFileStream = UsageCountStore1.OpenIsolatedFile(usageFile, FileMode.OpenOrCreate, FileAccess.ReadWrite);
        try
        {
          storageFileStream.Position = countPosition + 8L;
          storageFileStream.Position = countPosition;
          num = new BinaryReader((Stream) storageFileStream).ReadUInt64();
          ++num;
          storageFileStream.Position = countPosition;
          new BinaryWriter((Stream) storageFileStream).Write(num);
        }
        finally
        {
          storageFileStream?.Dispose();
        }
      }
      catch (Exception ex)
      {
        IsolatedStorageFileStream o1 = storageFileStream;
        // ISSUE: variable of a boxed type
        __Boxed<ulong> o2 = (ValueType) num;
        string o3 = usageFile;
        // ISSUE: variable of a boxed type
        __Boxed<long> o4 = (ValueType) countPosition;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    public static void IncrementUsage(uint featureId)
    {
      IDisposable disposable;
      try
      {
        disposable = (IDisposable) null;
        try
        {
          disposable = UsageCountStore1.GetGlobalUsageCountFileLock();
          UsageCountStore1.IncrementCount(UsageCountStore1.s_UsageFile, (long) (featureId * 8U));
        }
        catch (Exception ex)
        {
        }
        finally
        {
          disposable?.Dispose();
        }
      }
      catch (Exception ex)
      {
        IDisposable o1 = disposable;
        // ISSUE: variable of a boxed type
        __Boxed<uint> o2 = (ValueType) featureId;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    private static string GetDynamicFeatureUsageFilename(string featureName)
    {
      byte[] bytes;
      string featureUsageFilename;
      byte[] hash;
      Guid guid;
      string path2;
      string str;
      string relativeFile;
      IsolatedStorageFileStream storageFileStream;
      try
      {
        bytes = UsageCountStore1.s_Encoding.GetBytes(featureName);
        featureUsageFilename = Convert.ToBase64String(bytes).Replace('\\', '@');
        if (featureUsageFilename.Length > 50)
        {
          hash = UsageCountStore1.s_Hash.ComputeHash(bytes);
          guid = new Guid(hash);
          path2 = guid.ToString().Substring(0, 18);
          str = Path.Combine(UsageCountStore1.s_DynamicUsageFolder, path2);
          featureUsageFilename = str + ".bin";
          relativeFile = str + ".txt";
          storageFileStream = (IsolatedStorageFileStream) null;
          try
          {
            storageFileStream = UsageCountStore1.OpenIsolatedFile(relativeFile, FileMode.CreateNew, FileAccess.Write);
            storageFileStream.Write(bytes, 0, bytes.Length);
          }
          catch (IOException ex)
          {
          }
          finally
          {
            storageFileStream?.Close();
          }
        }
        else
          featureUsageFilename = Path.Combine(UsageCountStore1.s_DynamicUsageFolder, featureUsageFilename + ".bin");
        return featureUsageFilename;
      }
      catch (Exception ex)
      {
        byte[] o1 = bytes;
        string o2 = featureUsageFilename;
        byte[] o3 = hash;
        string o4 = path2;
        string o5 = str;
        string o6 = relativeFile;
        IsolatedStorageFileStream o7 = storageFileStream;
        // ISSUE: variable of a boxed type
        __Boxed<Guid> o8 = (ValueType) guid;
        string o9 = featureName;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
        throw;
      }
    }

    public static void IncrementUsage(string featureName)
    {
      IDisposable disposable;
      string featureUsageFilename;
      try
      {
        disposable = (IDisposable) null;
        try
        {
          disposable = UsageCountStore1.GetGlobalUsageCountFileLock();
          featureUsageFilename = UsageCountStore1.GetDynamicFeatureUsageFilename(featureName);
          UsageCountStore1.IncrementCount(featureUsageFilename, 0L);
        }
        catch (Exception ex)
        {
        }
        finally
        {
          disposable?.Dispose();
        }
      }
      catch (Exception ex)
      {
        IDisposable o1 = disposable;
        string o2 = featureUsageFilename;
        string o3 = featureName;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    private static ulong[] GetUsageCountsFromFile(string fileName)
    {
      IsolatedStorageFileStream storageFileStream;
      byte[] numArray;
      ulong[] dst;
      try
      {
        storageFileStream = new IsolatedStorageFileStream(fileName, FileMode.OpenOrCreate, FileAccess.Read, FileShare.None, UsageCountStore1.s_IsolatedStorage);
        try
        {
          numArray = new byte[storageFileStream.Length];
          storageFileStream.Read(numArray, 0, numArray.Length);
          dst = new ulong[numArray.Length / 8];
          Buffer.BlockCopy((Array) numArray, 0, (Array) dst, 0, numArray.Length);
        }
        finally
        {
          storageFileStream?.Dispose();
        }
        return dst;
      }
      catch (Exception ex)
      {
        ulong[] o1 = dst;
        IsolatedStorageFileStream o2 = storageFileStream;
        byte[] o3 = numArray;
        string o4 = fileName;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    public static UsageCounts1 GetAllUsageCountsAndReset()
    {
      IDisposable usageCountFileLock;
      UsageCounts1 allUsageCounts;
      UsageCounts1 usageCountsAndReset;
      try
      {
        usageCountFileLock = UsageCountStore1.GetGlobalUsageCountFileLock();
        try
        {
          allUsageCounts = UsageCountStore1.UnprotectedGetAllUsageCounts();
          UsageCountStore1.UnprotectedReset();
          usageCountsAndReset = allUsageCounts;
        }
        finally
        {
          usageCountFileLock?.Dispose();
        }
        return usageCountsAndReset;
      }
      catch (Exception ex)
      {
        UsageCounts1 o1 = allUsageCounts;
        UsageCounts1 o2 = usageCountsAndReset;
        IDisposable o3 = usageCountFileLock;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    public static UsageCounts1 GetAllUsageCounts()
    {
      IDisposable usageCountFileLock;
      UsageCounts1 allUsageCounts;
      try
      {
        usageCountFileLock = UsageCountStore1.GetGlobalUsageCountFileLock();
        try
        {
          allUsageCounts = UsageCountStore1.UnprotectedGetAllUsageCounts();
        }
        finally
        {
          usageCountFileLock?.Dispose();
        }
        return allUsageCounts;
      }
      catch (Exception ex)
      {
        UsageCounts1 o1 = allUsageCounts;
        IDisposable o2 = usageCountFileLock;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    public static void Reset()
    {
      IDisposable usageCountFileLock;
      try
      {
        usageCountFileLock = UsageCountStore1.GetGlobalUsageCountFileLock();
        try
        {
          UsageCountStore1.UnprotectedReset();
        }
        finally
        {
          usageCountFileLock?.Dispose();
        }
      }
      catch (Exception ex)
      {
        IDisposable o1 = usageCountFileLock;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    private static UsageCounts1 UnprotectedGetAllUsageCounts()
    {
      ulong[] usageCountsFromFile1;
      Dictionary<string, ulong> dynamicFeatureCounts;
      string[] fileNames;
      int index;
      string str;
      string withoutExtension;
      string fileName;
      ulong[] usageCountsFromFile2;
      string relativeFile;
      IsolatedStorageFileStream storageFileStream;
      byte[] numArray;
      try
      {
        usageCountsFromFile1 = UsageCountStore1.GetUsageCountsFromFile(UsageCountStore1.s_UsageFile);
        dynamicFeatureCounts = new Dictionary<string, ulong>();
        try
        {
          fileNames = UsageCountStore1.s_IsolatedStorage.GetFileNames(UsageCountStore1.s_DynamicUsageFolder + "\\*.bin");
          for (index = 0; index < fileNames.Length; ++index)
          {
            str = fileNames[index];
            withoutExtension = Path.GetFileNameWithoutExtension(str);
            fileName = Path.Combine(UsageCountStore1.s_DynamicUsageFolder, str);
            usageCountsFromFile2 = UsageCountStore1.GetUsageCountsFromFile(fileName);
            relativeFile = Path.Combine(UsageCountStore1.s_DynamicUsageFolder, withoutExtension + ".txt");
            storageFileStream = (IsolatedStorageFileStream) null;
            try
            {
              storageFileStream = UsageCountStore1.OpenIsolatedFile(relativeFile, FileMode.Open, FileAccess.Read);
              numArray = new byte[storageFileStream.Length];
              storageFileStream.Read(numArray, 0, numArray.Length);
              withoutExtension = UsageCountStore1.s_Encoding.GetString(numArray);
            }
            catch (FileNotFoundException ex)
            {
              withoutExtension = UsageCountStore1.s_Encoding.GetString(Convert.FromBase64String(withoutExtension.Replace('@', '\\')));
            }
            finally
            {
              storageFileStream?.Close();
            }
            dynamicFeatureCounts[withoutExtension] = usageCountsFromFile2[0];
          }
        }
        catch (DirectoryNotFoundException ex)
        {
        }
        return new UsageCounts1(usageCountsFromFile1, dynamicFeatureCounts);
      }
      catch (Exception ex)
      {
        object[] objects = new object[11]
        {
          (object) usageCountsFromFile1,
          (object) dynamicFeatureCounts,
          (object) str,
          (object) withoutExtension,
          (object) fileName,
          (object) usageCountsFromFile2,
          (object) relativeFile,
          (object) storageFileStream,
          (object) numArray,
          (object) fileNames,
          (object) index
        };
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    private static void UnprotectedReset()
    {
      string[] fileNames;
      int index;
      string str;
      string withoutExtension;
      string relativeFile1;
      string relativeFile2;
      try
      {
        UsageCountStore1.DeleteIsolatedFile(UsageCountStore1.s_UsageFile);
        try
        {
          fileNames = UsageCountStore1.s_IsolatedStorage.GetFileNames(UsageCountStore1.s_DynamicUsageFolder + "\\*.bin");
          for (index = 0; index < fileNames.Length; ++index)
          {
            str = fileNames[index];
            withoutExtension = Path.GetFileNameWithoutExtension(str);
            relativeFile1 = Path.Combine(UsageCountStore1.s_DynamicUsageFolder, str);
            UsageCountStore1.DeleteIsolatedFile(relativeFile1);
            relativeFile2 = Path.Combine(UsageCountStore1.s_DynamicUsageFolder, withoutExtension + ".txt");
            UsageCountStore1.DeleteIsolatedFile(relativeFile2);
          }
        }
        catch (DirectoryNotFoundException ex)
        {
        }
        try
        {
          UsageCountStore1.s_IsolatedStorage.DeleteDirectory(UsageCountStore1.s_DynamicUsageFolder);
        }
        catch (IsolatedStorageException ex)
        {
        }
        UsageCountStore1.s_IsolatedStorage.CreateDirectory(UsageCountStore1.s_DynamicUsageFolder);
      }
      catch (Exception ex)
      {
        string o1 = str;
        string o2 = withoutExtension;
        string o3 = relativeFile1;
        string o4 = relativeFile2;
        string[] o5 = fileNames;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) index;
        SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    private sealed class DisposableMutex : IDisposable
    {
      private static readonly CultureInfo s_EnUSCulture;
      private readonly CultureInfo m_OldCultureInfo;
      private readonly Mutex m_Mutex;

      public DisposableMutex(string mutexName)
      {
        try
        {
          this.m_OldCultureInfo = Thread.CurrentThread.CurrentUICulture;
          Thread.CurrentThread.CurrentUICulture = UsageCountStore1.DisposableMutex.s_EnUSCulture;
          if (mutexName.Length > 260)
            mutexName = mutexName.Remove(261);
          mutexName = mutexName.Replace(Path.DirectorySeparatorChar, '_');
          this.m_Mutex = new Mutex(false, mutexName);
          try
          {
            this.m_Mutex.WaitOne();
          }
          catch (AbandonedMutexException ex)
          {
          }
        }
        catch (Exception ex)
        {
          string o2 = mutexName;
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public void Dispose()
      {
        try
        {
          this.m_Mutex.ReleaseMutex();
          this.m_Mutex.Close();
          Thread.CurrentThread.CurrentUICulture = this.m_OldCultureInfo;
        }
        catch (Exception ex)
        {
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      static DisposableMutex()
      {
        try
        {
          UsageCountStore1.DisposableMutex.s_EnUSCulture = CultureInfo.GetCultureInfo("en-US");
        }
        catch (Exception ex)
        {
          SmartAssembly.SmartExceptionsCore.StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }
  }
}
