// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Attributes.Template
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using System;
using System.Runtime.CompilerServices;

namespace IEnumUnkn.Attributes
{
  [Serializable]
  internal class Template : Exception
  {
    private static readonly string _Consumer;
    private static readonly string broadcaster;
    private static readonly string m_Proc;
    private static readonly string _RequestManager;
    private static readonly string m_ManagerManager;
    private static readonly string m_FieldManager;
    private static readonly string m_MapperManager;
    public string _CustomerManager;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Template(
      bool isdef,
      bool readcaller,
      bool readserv,
      bool acceptcaller2,
      bool ispol3,
      bool isinit4)
    {
      int num1 = 4;
      while (true)
      {
        bool flag1;
        bool flag2;
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            ListenerManager.InitStub();
            num2 = 1;
            break;
          case 1:
label_18:
            this._CustomerManager = "";
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num2 = 9;
            break;
          case 2:
            this._CustomerManager += Template.m_FieldManager;
            goto label_12;
          case 3:
          case 6:
            if (flag2)
              this._CustomerManager += Template.broadcaster;
            if (!readserv)
            {
              this._CustomerManager += Template.m_Proc;
              int num3 = 5;
              num1 = Template.ReflectStub() ? num3 : num3;
              continue;
            }
            goto case 5;
          case 5:
            if (acceptcaller2)
              goto label_15;
            else
              goto case 8;
          case 7:
            if (flag1)
            {
              num1 = 2;
              continue;
            }
            goto label_12;
          case 8:
            this._CustomerManager += Template._RequestManager;
            goto label_15;
          case 9:
            if (!isdef)
              this._CustomerManager += Template._Consumer;
            flag2 = !readcaller;
            num2 = 6;
            break;
          case 10:
            goto label_24;
          default:
            num2 = 8;
            break;
        }
label_7:
        num1 = num2;
        continue;
label_12:
        if (!ispol3 || !isinit4)
        {
          this._CustomerManager += Template.m_MapperManager;
          num2 = 10;
          goto label_7;
        }
        else
          break;
label_15:
        if (!ispol3)
          this._CustomerManager += Template.m_ManagerManager;
        flag1 = !isinit4;
        if (true)
          num1 = 7;
        else
          goto label_18;
      }
      return;
label_24:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static Template()
    {
      int num1 = 4;
      if (!Template.ReflectStub())
        goto label_5;
label_1:
      Template.m_MapperManager = "Refer to the tutorial window for the list of allowed symbols.";
      num1 = 6;
label_5:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
            Template._Consumer = "Usernames must be between 3 and 10 characters.";
            Template.broadcaster = "Only letters, numbers and seperator characters (Underscore, dash, period, comma, slash) allowed in usernames. ";
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_3;
          case 2:
          case 5:
            goto label_3;
          case 4:
            ListenerManager.InitStub();
            num2 = 1;
            break;
          case 6:
            goto label_8;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
      }
label_3:
      Template.m_Proc = "This username is taken. ";
      Template._RequestManager = "Passwords must be between 8 and 15 characters. ";
      Template.m_ManagerManager = "Password must consist of letters, numbers and symbols. ";
      Template.m_FieldManager = "Passwords must contain a minimum of one number, symbol, upper and lower case character. ";
      goto label_1;
label_8:;
    }

    internal static bool RevertObject() => true;

    internal static bool ReflectStub() => false;
  }
}
