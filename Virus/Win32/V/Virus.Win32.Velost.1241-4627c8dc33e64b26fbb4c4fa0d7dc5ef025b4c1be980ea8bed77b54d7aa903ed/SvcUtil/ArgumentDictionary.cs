// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.SvcUtil.ArgumentDictionary
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System.Collections.Generic;
using System.Globalization;

namespace Microsoft.Tools.ServiceModel.SvcUtil
{
  internal class ArgumentDictionary
  {
    private Dictionary<string, IList<string>> contents;

    internal ArgumentDictionary(int capacity) => this.contents = new Dictionary<string, IList<string>>(capacity);

    internal void Add(string key, string value)
    {
      IList<string> values;
      if (!this.ContainsArgument(key))
      {
        values = (IList<string>) new List<string>();
        this.Add(key, values);
      }
      else
        values = this.GetArguments(key);
      values.Add(value);
    }

    internal string GetArgument(string key)
    {
      IList<string> stringList;
      return this.contents.TryGetValue(key.ToLower(CultureInfo.InvariantCulture), out stringList) ? stringList[0] : (string) null;
    }

    internal IList<string> GetArguments(string key)
    {
      IList<string> arguments;
      if (!this.contents.TryGetValue(key.ToLower(CultureInfo.InvariantCulture), out arguments))
        arguments = (IList<string>) new List<string>();
      return arguments;
    }

    internal bool ContainsArgument(string key) => this.contents.ContainsKey(key.ToLower(CultureInfo.InvariantCulture));

    internal void Add(string key, IList<string> values) => this.contents.Add(key.ToLower(CultureInfo.InvariantCulture), values);

    internal int Count => this.contents.Count;
  }
}
