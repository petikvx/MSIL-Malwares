// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.CoreClient
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Messages;
using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

namespace PreEmptive.Analytics.Common
{
  public class CoreClient : 
    IClientToolsProvider,
    IConfigurationProvider,
    ILoggerProvider,
    IPlatformProvider
  {
    public const string InstanceIdKey = "InstanceID";
    public const string GeneratedUserNameKey = "GeneratedUserName";
    private bool a;
    private global::c b;
    private DateTime c = DateTime.MinValue;
    private ExtendedKeys d;
    private BinaryInfo e;

    public IFlowController FlowController
    {
      get
      {
        int num1 = -14543;
        int num2 = num1;
        num1 = -14543;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.f;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 30582;
        int num2 = num1;
        num1 = 30582;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.f = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public IPlatform Platform
    {
      get
      {
        int num1 = 18427;
        int num2 = num1;
        num1 = 18427;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.g;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -25792;
        int num2 = num1;
        num1 = -25792;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.g = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ILogger Logger
    {
      get
      {
        int num1 = -5022;
        int num2 = num1;
        num1 = -5022;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 20212;
        int num2 = num1;
        num1 = 20212;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool AppStarted
    {
      get
      {
        int num1 = 11989;
        int num2 = num1;
        num1 = 11989;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.i;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -12417;
        int num2 = num1;
        num1 = -12417;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.i = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public IMessageQueue MessageQueue
    {
      get
      {
        int num1 = 7596;
        int num2 = num1;
        num1 = 7596;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.j;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 6889;
        int num2 = num1;
        num1 = 6889;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.j = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Configuration Configuration
    {
      get
      {
        int num1 = 8038;
        int num2 = num1;
        num1 = 8038;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.k;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 25607;
        int num2 = num1;
        num1 = 25607;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.k = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public FeatureCorrelator Correlator
    {
      get
      {
        int num1 = -28264;
        int num2 = num1;
        num1 = -28264;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.l;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -21296;
        int num2 = num1;
        num1 = -21296;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.l = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    internal ISettingsStore SettingsStore
    {
      get
      {
        int num1 = -32103;
        int num2 = num1;
        num1 = -32103;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.m;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -1503;
        int num2 = num1;
        num1 = -1503;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.m = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public CoreClient(IPlatform platform, [Optional] ILogger logger)
    {
      this.Platform = platform;
      this.AppStarted = false;
      this.Logger = logger ?? (ILogger) new BlankLogger();
      this.b = new global::c((IAsyncProvider) platform, new Action<global::c>(this.a));
    }

    private void a(global::c A_0)
    {
      int A_1 = 3;
      int num1 = -16896;
      int num2 = num1;
      num1 = -16896;
      int num3 = num1;
      int num4;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_4:
          bool lockTaken = false;
          CoreClient coreClient;
          try
          {
            DateTime dateTime;
            int? sessionExtensionWindow1;
            int num5;
            switch (0)
            {
              case 0:
label_7:
                Monitor.Enter((object) (coreClient = this), ref lockTaken);
                dateTime = A_0.c();
                sessionExtensionWindow1 = this.Configuration.StopBehavior.SessionExtensionWindow;
                num5 = 0;
                num4 = num5;
                goto default;
              default:
                while (true)
                {
                  int? sessionExtensionWindow2;
                  int num6;
                  int num7;
                  switch (num4)
                  {
                    case 0:
                      if (sessionExtensionWindow1.GetValueOrDefault() < 1)
                      {
                        num5 = 1;
                        num4 = num5;
                        continue;
                      }
                      num5 = 3;
                      num4 = num5;
                      continue;
                    case 1:
                      num5 = 5;
                      num4 = num5;
                      continue;
                    case 2:
                      if (this.AppStarted)
                      {
                        num5 = 18;
                        num4 = num5;
                        continue;
                      }
                      goto case 6;
                    case 3:
                      num6 = 0;
                      goto label_26;
                    case 4:
                      if (this.c < dateTime)
                      {
                        num5 = 10;
                        num4 = num5;
                        continue;
                      }
                      break;
                    case 5:
                      num6 = sessionExtensionWindow1.HasValue ? 1 : 0;
                      goto label_26;
                    case 6:
                    case 14:
                      num5 = 12;
                      num4 = num5;
                      continue;
                    case 7:
                      num5 = 4;
                      num4 = num5;
                      continue;
                    case 8:
                      if (sessionExtensionWindow2.GetValueOrDefault() > 0)
                      {
                        num5 = 13;
                        num4 = num5;
                        continue;
                      }
                      num5 = 9;
                      num4 = num5;
                      continue;
                    case 9:
                      num7 = 0;
                      goto label_31;
                    case 10:
label_33:
                      num5 = 2;
                      num4 = num5;
                      continue;
                    case 11:
                      if (this.AppStarted)
                      {
                        num5 = 15;
                        num4 = num5;
                        continue;
                      }
                      goto case 6;
                    case 12:
                      goto label_43;
                    case 13:
                      num5 = 17;
                      num4 = num5;
                      continue;
                    case 15:
                      this.c = DateTime.MinValue;
                      this.Logger.LogInfo(Utils.a("\uE3B6톸\uDEBA鶼ﺾ釀諂\uE5C4냆\uA8C8룊\uEDCC껎뷐뻒뫔ꓖ귘ﯚ껜ꯞ軠鏢闤苦跨쟪췬跮蓰蟲헴胶飸裺\uDDFC链搀猂焄✆漈礊戌戎ㄐ怒愔砖椘欚琜焞䘠̢䜤带न䨪䌬\u0F2E吰刲䜴嬶倸帺似Ἶ㍀♂⅄㉆❈⽊ⱌⅎ═獒ᑔ❖⥘㝚㑜㱞`ᝢ\u0C64\u0866ݨ㡪ᥬ\u0E6EͰݲ", A_1));
                      num5 = 6;
                      num4 = num5;
                      continue;
                    case 16:
                      sessionExtensionWindow2 = this.Configuration.StopBehavior.SessionExtensionWindow;
                      num5 = 8;
                      num4 = num5;
                      continue;
                    case 17:
                      num7 = sessionExtensionWindow2.HasValue ? 1 : 0;
                      goto label_31;
                    case 18:
                      this.Logger.LogInfo(Utils.a("\uE3B6톸\uDEBA鶼ﺾ釀諂\uE5C4껆뫈\uEBCA꿌\uAACE룐뷒닔\uF7D6\uAAD8꿚닜꿞釠蛢臤쟦诨軪軬軮蓰胲郴ퟶ跸鏺飼\uDFFE爀昂瘄理怈搊挌⼎琐欒愔爖眘栚琜瀞传̢儤並䐨个弬\u0F2E吰䬲䔴帶䬸帺夼", A_1));
                      this.a(this.d, this.e, true, A_4: true);
                      num5 = 14;
                      num4 = num5;
                      continue;
                    default:
                      goto label_7;
                  }
label_15:
                  num5 = 11;
                  num4 = num5;
                  continue;
label_26:
                  if (num6 == 0)
                  {
                    num5 = 16;
                    num4 = num5;
                    continue;
                  }
                  goto label_33;
label_31:
                  if (num7 != 0)
                  {
                    num5 = 7;
                    num4 = num5;
                  }
                  else
                    goto label_15;
                }
label_43:
                return;
            }
          }
          finally
          {
            int num8 = 0;
            while (true)
            {
              int num9;
              switch (num8)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  Monitor.Exit((object) coreClient);
                  num9 = 2;
                  num8 = num9;
                  continue;
                case 2:
                  goto label_44;
              }
              if (lockTaken)
              {
                num9 = 1;
                num8 = num9;
              }
              else
                break;
            }
label_44:;
          }
        default:
          if (false)
            ;
          if (true)
            ;
          num4 = 0;
          switch (num4)
          {
            default:
              goto label_4;
          }
      }
    }

    public Guid GetActiveDefaultSession()
    {
      int num1 = 11178;
      int num2 = num1;
      num1 = 11178;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          return Guid.Empty;
        default:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          if (this.AppStarted)
            return this.Configuration.DefaultSession;
          goto case 0;
      }
    }

    public bool ApplicationStart(
      Configuration configuration,
      [Optional] ExtendedKeys keys,
      [Optional] BinaryInfo binary,
      [Optional] IFlowController flowController)
    {
      int A_1 = 7;
      switch (0)
      {
        default:
          int num1 = 3329;
          switch (3329 == num1 ? 1 : 0)
          {
            case 0:
            case 2:
label_46:
              return this.AppStarted;
            default:
              num1 = 0;
              if (num1 == 0)
                ;
              num1 = 0;
              int num2 = num1;
              bool lockTaken;
              while (true)
              {
                bool flag;
                switch (num2)
                {
                  case 0:
                    switch (0)
                    {
                      case 0:
                        goto label_6;
                      default:
                        continue;
                    }
                  case 1:
                    this.b.d(-1);
                    num1 = 4;
                    num2 = num1;
                    continue;
                  case 2:
                    lockTaken = false;
                    num1 = 6;
                    num2 = num1;
                    continue;
                  case 3:
                    this.Logger.LogInfo(Utils.a("ﺺ얼쮾돀ꋂ\uE5C4蛆마믊ꇌꛎ닐닒ꇔ뻖뛘뗚軜ꯞ胠釢釤쟦鯨軪軬諮飰藲郴鏶ퟸ\uDBFA듼駾℀戂欄✆䠈笊紌挎砐瀒琔挖瀘琚猜䰞唠䰢唤ܦ䀨堪ബ崮吰倲倴帶伸帺夼Ἶ㙀⩂ㅄ⽆⁈╊浌ᱎ㑐⁒♔㹖㙘㕚ᡜ❞ᕠ٢\u0B64ᑦhѪͬ㡮ᡰᵲᅴᡶ\u0E78坺嵼ᙾ\uF580ꎂ\uF284\uEE86\uE588\uE78A권\uED8E\uF490뎒ﲔ\uF096\uF798\uF49A\uEF9C爵얠趢薤", A_1));
                    this.c = DateTime.UtcNow.AddMilliseconds((double) this.Configuration.StopBehavior.SessionExtensionWindow.Value);
                    num1 = 9;
                    num2 = num1;
                    continue;
                  case 4:
                    if (!this.AppStarted)
                    {
                      num1 = 12;
                      num2 = num1;
                      continue;
                    }
                    break;
                  case 5:
                    num1 = 7;
                    num2 = num1;
                    continue;
                  case 6:
                    goto label_12;
                  case 7:
                    if (this.Configuration.StopBehavior.SessionExtensionWindow.Value > 0)
                    {
                      num1 = 3;
                      num2 = num1;
                      continue;
                    }
                    goto label_38;
                  case 8:
                    if (flag)
                    {
                      num1 = 1;
                      num2 = num1;
                      continue;
                    }
                    break;
                  case 9:
                  case 10:
                    goto label_46;
                  case 11:
                    if (!flag)
                    {
                      num1 = 5;
                      num2 = num1;
                      continue;
                    }
                    goto label_38;
                  case 12:
                    goto label_11;
                  default:
label_6:
                    if (!this.AppStarted)
                    {
                      num1 = 2;
                      num2 = num1;
                      continue;
                    }
                    flag = this.b.d();
                    num1 = 8;
                    num2 = num1;
                    continue;
                }
                num1 = 11;
                num2 = num1;
                continue;
label_38:
                this.Logger.LogWarning(Utils.a("諸\uEDBC\uF6BE\uE1C0ꯂ꓄듆\uE9C8\uAACAꇌ뷎듐닒뇔껖律맚룜뫞迠쏢雤鏦裨駪駬諮闰\uDDF2", A_1));
                num1 = 1;
                if (num1 == 0)
                  ;
                num1 = 10;
                num2 = num1;
              }
label_11:
              return this.ApplicationStart(configuration, keys, binary, flowController);
label_12:
              CoreClient coreClient;
              try
              {
                Monitor.Enter((object) (coreClient = this), ref lockTaken);
                try
                {
                  num1 = 0;
                  int num3 = num1;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                        switch (0)
                        {
                          case 0:
                            goto label_16;
                          default:
                            continue;
                        }
                      case 1:
                        IFlowController flowController1 = flowController;
                        if (flowController1 == null)
                          flowController1 = (IFlowController) new PreEmptive.Analytics.Common.FlowController()
                          {
                            SupportOfflineStorage = this.Configuration.SupportOfflineStorage,
                            Offline = this.Configuration.Offline,
                            MinimumFailureCount = this.Configuration.MinimumFailureCount,
                            MinimumTimeToLive = this.Configuration.MinimumTimeToLive,
                            MaximumBatchSize = this.Configuration.MaximumBatchSize
                          };
                        this.FlowController = flowController1;
                        this.b(keys, binary);
                        num1 = 5;
                        num3 = num1;
                        continue;
                      case 2:
                        this.Platform.MergeStopDefaults(configuration);
                        this.Configuration = configuration.Copy();
                        num1 = 3;
                        num3 = num1;
                        continue;
                      case 3:
                        this.a(this.Configuration != null, Utils.a("\uF8BA튼톾\uA7C0ꫂꋄ닆믈\uAACA만ꛎ뻐뷒\uF5D4뻖\uAAD8ﯚ돜꫞跠迢쯤", A_1));
                        num1 = 4;
                        num3 = num1;
                        continue;
                      case 4:
                        this.a(Uri.TryCreate((this.Configuration.UseSSL ? Utils.a("펺즼쮾뇀냂ￄ\uE8C6\uE6C8", A_1) : Utils.a("펺즼쮾뇀蓼\uEAC4\uE8C6", A_1)) + this.Configuration.Endpoint, UriKind.Absolute, out Uri _), Utils.a("\uEFBA햼\uDABE\uE1C0ꛂꯄꏆ마\uA4CA\uA4CCꇎꗐ\uF3D2胔藖闘ﯚ드곞쇠諢诤釦裨蟪蓬诮\uDDF0폲鯴苶闸韺퇼\uDFFE渀焂┄戆搈笊礌瘎㼐", A_1));
                        num1 = 1;
                        num3 = num1;
                        continue;
                      case 5:
                        goto label_46;
                      default:
label_16:
                        if (configuration != null)
                        {
                          num1 = 2;
                          num3 = num1;
                          continue;
                        }
                        goto case 3;
                    }
                  }
                }
                catch (global::b ex)
                {
                  goto case 0;
                }
                catch (Exception ex)
                {
                  this.Logger.LogException(ex, Utils.a("諸펼龾듀귂ꃄ뿆마껊껌믎듐럒\uF5D4닖ꇘ룚룜꿞闠諢諤触짨蓪軬賮蓰臲郴鏶", A_1));
                  goto case 0;
                }
              }
              finally
              {
                int num4 = 0;
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 1:
                      Monitor.Exit((object) coreClient);
                      num4 = 2;
                      continue;
                    case 2:
                      goto label_32;
                  }
                  if (lockTaken)
                    num4 = 1;
                  else
                    break;
                }
label_32:;
              }
          }
      }
    }

    private void a(bool A_0, string A_1)
    {
      int A_1_1 = 6;
      int num1 = -8003;
      int num2 = num1;
      num1 = -8003;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          this.Logger.LogError(A_1 + Utils.a("骹\uE8BB횽ꖿ\uE2C1藃雅臇\uEAC9믋\uA7CD볏뻑\uF4D3룕럗껙ﳛ볝藟싡韣鋥觧飩飫语铯\uDCF1", A_1_1));
          throw new global::b();
        default:
          if (true)
            ;
          if (false)
            ;
          if (A_0)
            break;
          goto case 0;
      }
    }

    private void b(ExtendedKeys A_0, BinaryInfo A_1)
    {
      int A_1_1 = 18;
      int num1 = -564;
      int num2 = num1;
      num1 = -564;
      int num3 = num1;
      int num4;
      int num5;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_5:
          this.a(this.Configuration.OptIn, Utils.a("觅룇뻉藋ꃍ\uF0CF믑\uA7D3\uF6D5ꯗ뿙\uA8DBﻝ铟跡쓣胥觧蛩\u9FEB语\uDEEF", A_1_1));
          this.a(this.Configuration.CompanyID != Guid.Empty, Utils.a("藅\uA7C7\uA7C9볋꿍뻏ꯑ\uF4D3鿕鳗龎鯛ꯝ觟蛡쓣迥鯧쫩藫胭蛯鏱飳\u9FF5鳷퓹", A_1_1));
          this.a(this.Configuration.ApplicationID != Guid.Empty, Utils.a("蟅룇뫉ꃋ\uA7CD돏돑ꃓ뿕럗듙ﳛ韝ꓟ싡ꏣ鏥臧軩쳫蟭華틱鷳飵軷鯹郻韽擿Ⰱ", A_1_1));
          this.a(this.FlowController.CanStartClient(), Utils.a("鋅ꃇ꿉\uECCB귍ꗏꃑꛓ돕뛗껙ﳛ\u9FDD냟ꯡ쓣藥蟧蓩諫蟭韯蟱蛳韵賷鏹鏻都\u20FF昁欃挅笇⨉戋愍搏㈑甓稕琗甙欛㸝䴟䜡圣唥䤧䴩䤫崭ု䘱嬳ᘵ娷弹᰻䴽┿ⱁぃ晅❇㡉汋ⵍㅏㅑ㱓㍕㱗瑙", A_1_1));
          this.a(this.Configuration.StopBehavior.StopTimeout.Value >= 0, Utils.a("闅볇ꗉ볋髍맏뿑뇓맕귗껙ﳛ돝闟釡郣웥諧迩쳫语臯蟱闳髵\uD8F7軹鏻\uDEFD濿瀁␃愅稇漉洋稍甏怑㐓戕瀗笙爛㸝ဟడ", A_1_1));
          num5 = 0;
          num4 = num5;
          break;
        default:
          if (false)
            ;
          if (true)
            ;
          switch (0)
          {
            case 0:
              goto label_5;
          }
          break;
      }
      while (true)
      {
        switch (num4)
        {
          case 0:
            if (this.Configuration.StopBehavior.NeededTimeForSavingAtStop.Value > this.Configuration.StopBehavior.StopTimeout.Value)
            {
              num5 = 1;
              num4 = num5;
              continue;
            }
            goto label_9;
          case 1:
            this.Logger.LogWarning(Utils.a("装귇꿉\uA8CBꯍ듏蛑뷓믕뷗鳙돛곝돟菡鋣迥蛧跩귫髭ꏯ蛱鯳蛵\uD8F7鏹迻\uDEFD柿瀁愃朅簇漉縋⸍搏稑甓砕㠗䤙栛焝借瘡䴣䬥䴧䔩夫娭ᰯሱ䌳帵儷夹吻ḽ\u243Fⵁ⅃㕅♇浉㡋湍㵏㍑㽓㍕硗㭙\u325B❝䁟ᅡţ\u0865᭧ཀྵ䉫乭㙯᭱\u0C73ήᙷᵹ屻ᱽ勵ꊁ\uF783\uE385ﲇﺉ\uE58B\uE08D\uF78F늑\uDA93\uF395ﶗﺙ鍊瞧\uF49F쮡즣쎥\uEEA7얩\uDEABﶭ톯쒱\uDDB3\uD8B5\uDFB7﮹좻\uEDBD뒿귁듃\uE6C5볇ꗉ\uECCB鷍\uA4CF뷑ꓓ苕뇗럙맛뇝闟雡쏣闥죧鳩跫苭藯韱", A_1_1));
            this.Configuration.StopBehavior.NeededTimeForSavingAtStop = new int?(this.Configuration.StopBehavior.StopTimeout.Value);
            num5 = 2;
            num4 = num5;
            continue;
          case 2:
            goto label_9;
          default:
            goto label_5;
        }
      }
label_9:
      this.a(this.Configuration.StopBehavior.NeededTimeForSavingAtStop.Value >= 0, Utils.a("装귇꿉\uA8CBꯍ듏蛑뷓믕뷗鳙돛곝돟菡鋣迥蛧跩귫髭ꏯ蛱鯳蛵\uD8F7韹觻跽瓿∁昃挅⠇洉縋欍焏昑焓搕㠗甙減㸝䔟匡儣䜥䐧\u0A29堫䄭ုȱᨳ", A_1_1));
      this.a(A_0, A_1);
    }

    private void a(ExtendedKeys A_0, BinaryInfo A_1)
    {
      int num1 = -19186;
      int num2 = num1;
      num1 = -19186;
      int num3 = num1;
      int num4;
      int num5;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_4:
          this.a();
          this.MessageQueue.Start();
          num4 = 0;
          num5 = num4;
          break;
        default:
          num4 = 0;
          if (num4 == 0)
            ;
          switch (0)
          {
            case 0:
              goto label_4;
          }
          break;
      }
      while (true)
      {
        switch (num5)
        {
          case 0:
            if (!this.a)
            {
              num4 = 1;
              num5 = num4;
              continue;
            }
            goto label_8;
          case 1:
            this.MessageQueue.Queue((Message) new PreEmptive.Analytics.Common.Messages.ApplicationStart(this.c(), this.b(), this.Configuration.DefaultSession, A_0, CoreClient.a(A_1)));
            this.MessageQueue.Queue((Message) new SessionStart(this.Configuration.DefaultSession, CoreClient.a(A_1)));
            num4 = 2;
            num5 = num4;
            continue;
          case 2:
            goto label_8;
          default:
            goto label_4;
        }
      }
label_8:
      num4 = 1;
      if (num4 == 0)
        ;
      this.AppStarted = true;
    }

    private HostTag c()
    {
      int A_1 = 19;
      int num1 = 12784;
      int num2 = num1;
      num1 = 12784;
      int num3 = num1;
      HostInfo hostInfo;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          if (false)
            ;
          OSInfo osInfo = new OSInfo()
          {
            Name = Utils.a("닆\uA7C8ꃊꏌꃎꛐ뷒", A_1)
          };
          try
          {
            osInfo = this.Platform.GetOSInfo();
          }
          catch
          {
          }
          return new HostTag(hostInfo, osInfo, this.Configuration.OmitPersonalInfo);
        default:
          if (true)
            ;
          hostInfo = new HostInfo()
          {
            IPAddress = Utils.a("\uF6C6\uFBC8ﳊ\uE3CCￎ\uFFD0\uE3D2ﯔ\uE6D6", A_1),
            SourceLangName = Utils.a("닆\uA7C8ꃊꏌꃎꛐ뷒\uF5D4淪韘黚觜", A_1),
            SourceLangVersion = Utils.a("\uF7C6\uE7C8\uFBCA", A_1)
          };
          try
          {
            hostInfo = this.Platform.GetHostInfo();
            goto case 0;
          }
          catch
          {
            goto case 0;
          }
      }
    }

    private UserTag b()
    {
      UserInfo userInfo;
      try
      {
        userInfo = this.Platform.GetUserInfo();
      }
      catch
      {
        userInfo = new UserInfo() { HashedName = "" };
      }
      userInfo.InstanceID = this.Configuration.InstanceID;
      int num1 = 2;
      int num2 = num1;
label_6:
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_5;
          case 1:
            num1 = 17512;
            int num3 = num1;
            num1 = 17512;
            int num4 = num1;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                continue;
              default:
                num1 = 0;
                if (num1 == 0)
                  ;
                num1 = 0;
                num2 = num1;
                continue;
            }
          case 2:
            if (!this.Configuration.InstanceIdUserSet)
            {
              num1 = 1;
              num2 = num1;
              continue;
            }
            num1 = 3;
            num2 = num1;
            continue;
          case 3:
            goto label_13;
          default:
            goto label_7;
        }
      }
label_5:
      switch (0)
      {
        case 0:
          break;
        default:
          goto label_6;
      }
label_7:
      num1 = 1;
      if (num1 == 0)
        ;
      string str = this.Configuration.InstanceID;
      goto label_14;
label_13:
      str = this.Platform.GetGeneratedUserName(this.Configuration, this.Logger);
label_14:
      string fallbackName = str;
      return new UserTag(userInfo, this.Configuration.OmitPersonalInfo, fallbackName);
    }

    private void a()
    {
      int num1 = 7;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this.Configuration.InstanceID = Guid.NewGuid().ToString();
            this.Configuration.GeneratedUserName = this.Configuration.InstanceID;
            num2 = 9;
            num1 = num2;
            continue;
          case 1:
            this.Configuration.MessageGroup = this.Configuration.DefaultSession;
            num2 = 3;
            num1 = num2;
            continue;
          case 2:
            if (string.IsNullOrEmpty(this.Configuration.InstanceID))
            {
              num2 = 0;
              num1 = num2;
              continue;
            }
            break;
          case 3:
            this.a = false;
            num2 = 24;
            num1 = num2;
            continue;
          case 4:
            this.Configuration.Endpoint = this.Platform.GetDefaultEndpoint();
            num2 = 23;
            num1 = num2;
            continue;
          case 5:
            goto label_16;
          case 6:
          case 22:
            num2 = 8;
            num1 = num2;
            continue;
          case 7:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 8:
            if (this.MessageQueue != null)
            {
              num2 = 25;
              num1 = num2;
              continue;
            }
            goto case 19;
          case 9:
            num2 = 1;
            if (num2 == 0)
              break;
            break;
          case 10:
            if (this.Configuration.DefaultSession == Guid.Empty)
            {
              num2 = 12;
              num1 = num2;
              continue;
            }
            num2 = 15;
            num1 = num2;
            continue;
          case 11:
            this.a = true;
            num2 = 18;
            num1 = num2;
            continue;
          case 12:
            this.Configuration.DefaultSession = Guid.NewGuid();
            num2 = 17;
            num1 = num2;
            continue;
          case 13:
            num2 = -12077;
            int num3 = num2;
            num2 = -12077;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_10;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                this.Configuration.InstanceID = this.Platform.GetInstanceId(this.Configuration, this.Logger);
                num2 = 2;
                num1 = num2;
                continue;
            }
          case 14:
            this.Configuration.MessageGroup = Guid.NewGuid();
            num2 = 11;
            num1 = num2;
            continue;
          case 15:
            if (this.Configuration.MessageGroup == Guid.Empty)
            {
              num2 = 14;
              num1 = num2;
              continue;
            }
            goto case 11;
          case 16:
            if (this.MessageQueue.Stopped)
            {
              num2 = 19;
              num1 = num2;
              continue;
            }
            goto case 20;
          case 17:
            if (this.Configuration.MessageGroup == Guid.Empty)
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            goto case 3;
          case 18:
          case 24:
            num2 = 21;
            num1 = num2;
            continue;
          case 19:
label_10:
            this.MessageQueue = (IMessageQueue) new PreEmptive.Analytics.Common.MessageQueue((IClientToolsProvider) this, this.FlowController);
            num2 = 20;
            num1 = num2;
            continue;
          case 20:
            num2 = 5;
            num1 = num2;
            continue;
          case 21:
            if (this.Configuration.InstanceID != null)
            {
              this.Configuration.InstanceIdUserSet = true;
              num2 = 6;
              num1 = num2;
              continue;
            }
            num2 = 13;
            num1 = num2;
            continue;
          case 23:
            num2 = 10;
            num1 = num2;
            continue;
          case 25:
            num2 = 16;
            num1 = num2;
            continue;
          default:
label_3:
            if (string.IsNullOrEmpty(this.Configuration.Endpoint))
            {
              num2 = 4;
              num1 = num2;
              continue;
            }
            goto case 23;
        }
        this.Configuration.InstanceIdUserSet = false;
        num2 = 22;
        num1 = num2;
      }
label_16:
      this.Correlator = this.Correlator ?? new FeatureCorrelator();
    }

    public void ApplicationStop(
      [Optional] ExtendedKeys keys,
      [Optional] BinaryInfo binary,
      [Optional] bool synchronous,
      [Optional] bool immediate)
    {
      int A_1 = 18;
      switch (0)
      {
        default:
          int num1 = 2;
          int num2;
          bool lockTaken;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_7;
              case 1:
                goto label_40;
              case 2:
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
              case 3:
                lockTaken = false;
                num2 = 0;
                num1 = num2;
                continue;
            }
            if (this.AppStarted)
            {
              num2 = 1;
              if (num2 == 0)
                ;
              num2 = 3;
              num1 = num2;
            }
            else
            {
              this.Logger.LogWarning(Utils.a("蟅飇菉\uECCB\uA7CDꏏ\uF2D1뫓맕곗龎껛ꯝ軟賡跣裥迧쓩쳫꿭胯英飳\u9FF5鯷鯹裻韽濿氁␃甅簇攉簋⸍朏笑砓稕㠗琙猛樝\u001F䀡䄣إ䴧利䤫䴭䔯䘱儳刵ᘷ", A_1));
              num2 = 1;
              num1 = num2;
            }
          }
label_40:
          break;
label_7:
          CoreClient coreClient;
          try
          {
            switch (0)
            {
              case 0:
label_11:
                Monitor.Enter((object) (coreClient = this), ref lockTaken);
                num2 = 3;
                num1 = num2;
                goto default;
              default:
                while (true)
                {
                  num2 = 675;
                  int num3 = num2;
                  num2 = 675;
                  int num4 = num2;
                  switch (num3 == num4 ? 1 : 0)
                  {
                    case 0:
                    case 2:
label_21:
                      num2 = 9;
                      num1 = num2;
                      continue;
                    default:
                      num2 = 0;
                      if (num2 == 0)
                        ;
                      int? sessionExtensionWindow;
                      int num5;
                      switch (num1)
                      {
                        case 0:
                          if (synchronous)
                          {
                            num2 = 4;
                            num1 = num2;
                            continue;
                          }
                          goto case 5;
                        case 1:
                          this.b.d(10);
                          num2 = 12;
                          num1 = num2;
                          continue;
                        case 2:
                          goto label_42;
                        case 3:
                          if (immediate)
                          {
                            num2 = 1;
                            num1 = num2;
                            continue;
                          }
                          goto case 12;
                        case 4:
                          sessionExtensionWindow = this.Configuration.StopBehavior.SessionExtensionWindow;
                          num2 = 6;
                          num1 = num2;
                          continue;
                        case 5:
label_31:
                          this.a(keys, binary, synchronous, A_4: immediate);
                          num2 = 2;
                          num1 = num2;
                          continue;
                        case 6:
                          if (sessionExtensionWindow.GetValueOrDefault() > 0)
                          {
                            num2 = 13;
                            num1 = num2;
                            continue;
                          }
                          goto label_21;
                        case 7:
                          this.Logger.LogWarning(Utils.a("蟅\uE8C7막뗋ꃍ돏뫑ꛓ맕뛗뗙\uA9DB귝샟ꏡ铣雥蓧菩迫迭蓯鯱鯳飵\uD8F7꧹裻釽烿∁猃朅笇⨉縋欍猏眑紓怕紗縙〛㸝䈟圡倣إ䰧弩䤫อ䐯崱ᐳ攵崷䤹伻圽⼿ⱁŃ㹅㱇⽉≋㵍㥏㵑㩓ŕㅗ㑙㡛ㅝ\u175F䉡٣ͥŧѩ୫乭ᅯᅱsή\u0E77᭹\u087B\u1B7D\uE47F꺁ꒃ\uEF85ﲇꪉﮋ\uE78Dﲏﺑ뒓\uF395ﺗﲙ鍊ﶝ풟쮡튣쎥쒧펩貫청햯銱햳억솷풹\uDFBB횽늿귁\uAAC3꧅뷇막\uECCB꿍뻏뛑\uF4D3룕럗듙\uF1DB볝賟跡蟣跥臧蓩诫", A_1));
                          num2 = 5;
                          num1 = num2;
                          continue;
                        case 8:
                          num2 = 10;
                          num1 = num2;
                          continue;
                        case 9:
                          num5 = 0;
                          break;
                        case 10:
                          if (!immediate)
                          {
                            num2 = 7;
                            num1 = num2;
                            continue;
                          }
                          goto case 5;
                        case 11:
                          num5 = sessionExtensionWindow.HasValue ? 1 : 0;
                          break;
                        case 12:
                          num2 = 0;
                          num1 = num2;
                          continue;
                        case 13:
                          num2 = 11;
                          num1 = num2;
                          continue;
                        default:
                          goto label_11;
                      }
                      if (num5 != 0)
                      {
                        num2 = 8;
                        num1 = num2;
                        continue;
                      }
                      goto label_31;
                  }
                }
label_42:
                return;
            }
          }
          finally
          {
            int num6 = 2;
            while (true)
            {
              switch (num6)
              {
                case 0:
                  Monitor.Exit((object) coreClient);
                  num6 = 1;
                  continue;
                case 1:
                  goto label_38;
                case 2:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
              }
              if (lockTaken)
                num6 = 0;
              else
                break;
            }
label_38:;
          }
      }
    }

    private void a(ExtendedKeys A_0, BinaryInfo A_1, [Optional] bool A_2, [Optional] int? A_3, [Optional] bool A_4)
    {
      int A_1_1 = 0;
      int num1 = 0;
      switch (num1)
      {
        default:
          // ISSUE: variable of a compiler-generated type
          CoreClient.a a;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              // ISSUE: object of a compiler-generated type is created
              a = new CoreClient.a();
              // ISSUE: reference to a compiler-generated field
              a.c = A_0;
              // ISSUE: reference to a compiler-generated field
              a.d = A_1;
              // ISSUE: reference to a compiler-generated field
              a.b = this;
              num2 = 1;
              if (num2 == 0)
                ;
              num2 = 2;
              num1 = num2;
              goto default;
            default:
              while (true)
              {
                CancellationToken token;
                Task task;
                switch (num1)
                {
                  case 0:
                    goto label_29;
                  case 1:
                    if (!A_4)
                    {
                      num2 = 14;
                      num1 = num2;
                      continue;
                    }
                    break;
                  case 2:
                    num2 = 24190;
                    int num3 = num2;
                    num2 = 24190;
                    int num4 = num2;
                    switch (num3 == num4 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        continue;
                      default:
                        num2 = 0;
                        if (num2 == 0)
                          ;
                        if (!this.AppStarted)
                        {
                          num2 = 5;
                          num1 = num2;
                          continue;
                        }
                        // ISSUE: reference to a compiler-generated field
                        this.d = a.c;
                        // ISSUE: reference to a compiler-generated field
                        this.e = a.d;
                        num2 = 13;
                        num1 = num2;
                        continue;
                    }
                  case 3:
                    goto label_32;
                  case 4:
                    // ISSUE: reference to a compiler-generated method
                    task = Task.Factory.StartNew(new Action(a.f), token);
                    num2 = 10;
                    num1 = num2;
                    continue;
                  case 5:
                    num2 = 3;
                    num1 = num2;
                    continue;
                  case 6:
                    A_3 = this.Configuration.StopBehavior.StopTimeout;
                    num2 = 11;
                    num1 = num2;
                    continue;
                  case 7:
                    num2 = 1;
                    num1 = num2;
                    continue;
                  case 8:
                    goto label_21;
                  case 9:
                    if (A_2)
                    {
                      num2 = 12;
                      num1 = num2;
                      continue;
                    }
                    // ISSUE: reference to a compiler-generated field
                    this.Platform.ExecuteAsync<object>(a.a, highPriority: true);
                    num2 = 0;
                    num1 = num2;
                    continue;
                  case 10:
                    if (!task.Wait(A_3.Value, token))
                    {
                      num2 = 8;
                      num1 = num2;
                      continue;
                    }
                    goto label_19;
                  case 11:
                    this.AppStarted = false;
                    // ISSUE: reference to a compiler-generated field
                    // ISSUE: reference to a compiler-generated method
                    a.a = new Func<object>(a.e);
                    num2 = 9;
                    num1 = num2;
                    continue;
                  case 12:
                    token = new CancellationTokenSource().Token;
                    num2 = 4;
                    num1 = num2;
                    continue;
                  case 13:
                    if (this.Configuration.StopBehavior.SessionExtensionWindow.Value >= 1)
                    {
                      num2 = 7;
                      num1 = num2;
                      continue;
                    }
                    break;
                  case 14:
                    goto label_9;
                  case 15:
                    if (!A_3.HasValue)
                    {
                      num2 = 6;
                      num1 = num2;
                      continue;
                    }
                    goto case 11;
                  default:
                    goto label_3;
                }
                num2 = 15;
                num1 = num2;
              }
label_29:
              return;
label_32:
              return;
label_9:
              this.Logger.LogInfo(Utils.a("\uF5B3욵좷횹햻\uDDBDꆿ뛁귃꧅ꛇ駉룋ꇍꃏ\uF2D1럓럕듗뛙맛뫝컟싡럣菥鯧駩藫臭黯틱釳軵賷\u9FF9鋻跽槿洁樃★簇按愋欍戏㈑甓甕気猙樛缝吟䜡䀣", A_1_1));
              this.b.c(this.Configuration.StopBehavior.SessionExtensionWindow.Value);
              return;
label_21:
              this.Logger.LogWarning(Utils.a("\uF5B3욵좷횹햻\uDDBDꆿ뛁귃꧅ꛇ\uEAC9鿋뫍뿏ꋑ\uF4D3뻕맗꧙ﳛꫝ觟迡臣若죧藩駫髭\uDEEF틱꛳鏵賷迹軻都槿氁挃★氇漉缋縍礏昑焓㘕瘗甙栛㸝䈟䜡䴣䠥伧\u0A29伫䄭崯䈱堳匵䰷弹堻", A_1_1));
              return;
label_19:
              return;
          }
      }
    }

    public void FeatureTick(string name, [Optional] ExtendedKeys keys, [Optional] Guid? session, [Optional] BinaryInfo binary)
    {
      int A_1 = 2;
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            if (!string.IsNullOrEmpty(name))
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            goto label_13;
          case 1:
            goto label_8;
          case 2:
            num2 = -19664;
            int num3 = num2;
            num2 = -19664;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_12;
              default:
                num2 = 1;
                if (num2 == 0)
                  ;
                num2 = 0;
                if (num2 == 0)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
          case 3:
            goto label_12;
        }
        if (!this.AppStarted)
        {
          num2 = 3;
          num1 = num2;
        }
        else
        {
          num2 = 0;
          num1 = num2;
        }
      }
label_8:
      this.MessageQueue.Queue((Message) new PreEmptive.Analytics.Common.Tags.FeatureTick(name, session.a(this.Configuration.DefaultSession), keys, CoreClient.a(binary)));
      return;
label_12:
      this.Logger.LogError(Utils.a("\uF7B5\uE8B7\uF3B9鲻횽ꆿ뇁\uE4C3\uA8C5\uA7C7뻉\uECCB곍뗏럑뫓\uF6D5ꯗ껙뷛곝铟蟡胣죥죧곩觫迭蓯蟱蛳鏵\uD8F7軹闻鷽毿∁猃漅搇昉Ⰻ怍缏昑㐓琕紗㨙漛笝丟嘡ਣ", A_1));
      return;
label_13:
      this.Logger.LogError(Utils.a("\uF0B5\uDDB7\uDBB9좻쮽늿\uA7C1\uE4C3닅ꇇ꧉\uA7CB\uEECD뻏돑맓돕\uF8D7동꿛ﻝ藟诡郣軥跧飩쳫胭藯黱飳훵韷裹\uDCFB鯽淿爁瀃缅☇⨉䨋欍焏昑愓搕紗㨙栛眝䌟䤡У儥䄧䘩䀫อ帯崱䀳ᘵ娷弹᰻䴽┿ⱁぃ桅", A_1));
    }

    public void FeatureTick(string name, Guid? session, [Optional] BinaryInfo binary)
    {
      int A_1 = 1;
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            if (!string.IsNullOrEmpty(name))
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            goto label_13;
          case 1:
            goto label_7;
          case 2:
            num2 = 24681;
            int num3 = num2;
            num2 = 24681;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_12;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
          case 3:
            goto label_12;
        }
        if (!this.AppStarted)
        {
          num2 = 3;
          num1 = num2;
        }
        else
        {
          num2 = 1;
          if (num2 == 0)
            ;
          num2 = 0;
          num1 = num2;
        }
      }
label_7:
      this.MessageQueue.Queue((Message) new PreEmptive.Analytics.Common.Tags.FeatureTick(name, session.a(this.Configuration.DefaultSession), binary: CoreClient.a(binary)));
      return;
label_12:
      this.Logger.LogError(Utils.a("\uF4B4\uE7B6\uF0B8鮺햼\uDEBE닀\uE3C2ꯄ\uA8C6뷈\uEBCA꿌\uAACE듐뷒\uF5D4ꓖ귘뫚꿜ꯞ蓠蟢쯤쟦꿨軪賬鯮蓰臲郴ퟶ跸鋺黼链℀琂氄欆攈⬊挌怎攐㌒眔爖㤘栚砜焞唠ഢ", A_1));
      return;
label_13:
      this.Logger.LogError(Utils.a("\uF3B4튶\uD8B8쾺좼춾꓀\uE3C2뇄껆\uAAC8ꃊ\uEDCCꇎ냐뻒냔\uF7D6냘\uA8DA\uFDDC뫞裠韢跤苦鯨쯪菬髮鷰\u9FF2헴飶诸\uDBFA飼鋾焀眂簄⤆⤈䴊栌渎攐昒朔爖㤘漚琜簞䨠̢判並䔨䜪ബ䄮帰䜲ᔴ唶尸ᬺ丼娾⽀㝂歄", A_1));
    }

    public void FeatureStart(
      string name,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary,
      [Optional] Guid? group)
    {
      int A_1 = 9;
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            if (string.IsNullOrEmpty(name))
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            goto label_13;
          case 1:
            goto label_8;
          case 2:
            num2 = -14481;
            int num3 = num2;
            num2 = -14481;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_12;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                num2 = 1;
                if (num2 == 0)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
          case 3:
            goto label_12;
        }
        if (!this.AppStarted)
        {
          num2 = 3;
          num1 = num2;
        }
        else
        {
          num2 = 0;
          num1 = num2;
        }
      }
label_8:
      this.Logger.LogError(Utils.a("﮼\uDABEꃀ럂냄뗆곈\uEBCA뻌믎냐ꇒꇔ\uF7D6럘뫚냜뫞쇠諢雤쟦賨苪駬蟮铰臲헴駶賸韺釼\uDFFE渀焂┄戆搈笊礌瘎㼐㌒匔爖砘漚栜洞䐠̢嘤匦䠨太夬\u0F2E䘰娲头嬶ᤸ唺刼䬾慀⅂⁄杆㩈\u2E4A⍌㭎罐", A_1));
      return;
label_12:
      this.Logger.LogError(Utils.a("ﲼ\uEFBE裀\uE3C2귄ꛆ뫈\uEBCAꏌꃎꗐ\uF3D2럔닖볘뗚\uFDDC곞闠苢韤鏦賨迪쏬쿮런雲铴菶賸觺飼\uDFFE爀眂搄甆紈⬊稌明紐缒㔔礖瘘漚㴜紞䐠̢嘤䈦䜨弪̬", A_1));
      return;
label_13:
      this.MessageQueue.Queue((Message) new global::f(name, session.a(this.Configuration.DefaultSession), group.a(this.Correlator.Start(name).UniqueId), keys, CoreClient.a(binary)));
    }

    public void FeatureStop(
      string name,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary,
      [Optional] Guid? group)
    {
      int A_1 = 4;
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            if (string.IsNullOrEmpty(name))
            {
              num2 = 1;
              if (num2 == 0)
                ;
              num2 = 1;
              num1 = num2;
              continue;
            }
            goto label_13;
          case 1:
            goto label_7;
          case 2:
            num2 = 7310;
            int num3 = num2;
            num2 = 7310;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_12;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
          case 3:
            goto label_12;
        }
        if (!this.AppStarted)
        {
          num2 = 3;
          num1 = num2;
        }
        else
        {
          num2 = 0;
          num1 = num2;
        }
      }
label_7:
      this.Logger.LogError(Utils.a("ﺷ\uDFB9\uDDBB쪽떿냁ꇃ\uE6C5믇뻉ꏋ뻍\uF0CF병뗓믕뷗龎뗛귝샟蟡跣鋥胧迩黫컭黯蟱飳髵\uD8F7闹軻\uDEFD旿漁球爅焇␉Ⰻ䠍甏猑怓挕樗缙㰛洝吟䴡吣إ弧䌩䀫䈭ု就嬳䈵ᠷ堹夻ḽ㌿❁⩃㉅晇", A_1));
      return;
label_12:
      this.Logger.LogError(Utils.a("醴\uEAB9\uF5BB麽ꢿꏁ럃\uE6C5ꛇꗉ룋\uEECD닏럑뇓룕\uF8D7꧙\uA8DB뿝鋟雡臣若웧쫩ꫫ语釯蛱至蓵鷷\uDAF9迻諽濿爁␃焅愇昉怋⸍縏紑怓㘕稗缙㰛洝䔟䰡倣ࠥ", A_1));
      return;
label_13:
      this.MessageQueue.Queue((Message) new global::g(name, session.a(this.Configuration.DefaultSession), group.a(this.Correlator.Stop(name).UniqueId), keys, CoreClient.a(binary)));
    }

    public void ReportException(
      ExceptionInfo exceptionInfo,
      [Optional] bool optinOverride,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int A_1 = 2;
      int num1 = 7;
      while (true)
      {
        int num2;
        bool flag;
        int num3;
        switch (num1)
        {
          case 0:
            if (!optinOverride)
            {
              num2 = 15;
              num1 = num2;
              continue;
            }
            break;
          case 1:
            goto label_22;
          case 2:
            if (exceptionInfo != null)
            {
              num2 = 9;
              num1 = num2;
              continue;
            }
            num2 = 18;
            num1 = num2;
            continue;
          case 3:
            num3 = 0;
            goto label_15;
          case 4:
            goto label_33;
          case 5:
            num2 = 1;
            if (num2 == 0)
              goto label_13;
            else
              goto label_13;
          case 6:
            num2 = 0;
            num1 = num2;
            continue;
          case 7:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 8:
            num2 = 12;
            num1 = num2;
            continue;
          case 9:
            if (!optinOverride)
            {
              num2 = 3;
              num1 = num2;
              continue;
            }
            num2 = 8;
            num1 = num2;
            continue;
          case 10:
            num2 = 17;
            num1 = num2;
            continue;
          case 11:
            this.Logger.LogInfo(Utils.a("\uF7B5첷캹\uD9BB펽낿뛁귃\uA8C5꿇\uEAC9귋ꃍ\uF0CF돑ꇓꋕ럗럙뷛ꫝ觟臡쓣\uA7E5飧髩뿫髭釯胱胳훵賷闹\uDCFB賽旿爁欃琅簇⨉洋怍』眑氓甕紗標栛眝伟䰡ਣ", A_1));
            this.Configuration.OptIn = true;
            this.ApplicationStart(this.Configuration);
            num2 = 10;
            num1 = num2;
            continue;
          case 12:
            num3 = !this.AppStarted ? 1 : 0;
            goto label_15;
          case 13:
            if (flag)
            {
              num2 = 11;
              num1 = num2;
              continue;
            }
            goto case 10;
          case 14:
            this.ApplicationStop(synchronous: true);
            this.Configuration.OptIn = false;
            num2 = 4;
            num1 = num2;
            continue;
          case 15:
            goto label_14;
          case 16:
            if (flag)
            {
              num2 = 14;
              num1 = num2;
              continue;
            }
            goto label_37;
          case 17:
            if (this.AppStarted)
            {
              num2 = 5;
              num1 = num2;
              continue;
            }
            goto case 20;
          case 18:
            goto label_38;
          case 19:
            if (this.Configuration == null)
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            num2 = 2;
            num1 = num2;
            continue;
          case 20:
            num2 = 16;
            num1 = num2;
            continue;
          default:
label_3:
            if (!this.AppStarted)
            {
              num2 = 11916;
              int num4 = num2;
              num2 = 11916;
              int num5 = num2;
              switch (num4 == num5 ? 1 : 0)
              {
                case 0:
                case 2:
                  goto label_13;
                default:
                  num2 = 0;
                  if (num2 == 0)
                    ;
                  num2 = 6;
                  num1 = num2;
                  continue;
              }
            }
            else
              break;
        }
        num2 = 19;
        num1 = num2;
        continue;
label_13:
        this.MessageQueue.Queue((Message) new Fault(this.Platform, exceptionInfo, session.a(this.Configuration.DefaultSession), keys, CoreClient.a(binary), true));
        num2 = 20;
        num1 = num2;
        continue;
label_15:
        flag = num3 != 0;
        num2 = 13;
        num1 = num2;
      }
label_33:
      return;
label_14:
      this.Logger.LogError(Utils.a("\uF7B5\uE8B7\uF3B9鲻횽ꆿ뇁\uE4C3\uA8C5\uA7C7뻉\uECCB곍뗏럑뫓\uF6D5ꯗ껙뷛곝铟蟡胣죥죧꿩铫跭闯英胳\u9FF5韷铹\uDCFB觽槿渁栃★昇攉砋⸍爏眑㐓搕紗標猛氝吟䜡䀣ࠥ", A_1));
      return;
label_22:
      this.Logger.LogError(Utils.a("\uE2B5킷\uDFB9鲻ﾽ邿证\uE4C3껅꧇막\uECCBꃍ뿏ꛑ\uF4D3듕뷗뿙닛ﻝ菟跡諣胥臧跩駫鳭闯雱퓳苵韷\uDAF9迻鯽滿昁␃欅洇礉缋漍眏眑朓㠕㠗丙琛笝\u001F䜡尣䔥䴧娩堫䜭弯就ᐳ嬵崷䤹伻弽✿❁摃ㅅⅇ♉⁋湍㹏㵑⁓癕㩗㽙籛ⵝ՟ౡၣ䡥", A_1));
      return;
label_37:
      return;
label_38:
      this.Logger.LogError(Utils.a("\uF8B5ힷ骹쪻\uDFBD겿ꯁꃃ\uE6C5귇닉꿋ꯍꃏꛑ뷓맕뛗龎뗛냝蛟跡難该觧黩藫臭黯틱鳳韵请\uDAF9黻鯽旿氁␃瘅稇攉程服琏眑瀓㠕㠗丙琛笝\u001F䜡尣䔥䴧娩堫䜭弯就ᐳ嬵崷䤹伻弽✿❁摃ㅅⅇ♉⁋湍㹏㵑⁓癕㩗㽙籛ⵝ՟ౡၣ䡥", A_1));
    }

    public void ReportTamper(
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary,
      [Optional] Configuration config)
    {
      int A_1 = 6;
      int num1 = 2;
      while (true)
      {
        int num2 = 1;
        if (num2 == 0)
          ;
        num2 = -28127;
        int num3 = num2;
        num2 = -28127;
        int num4 = num2;
        bool flag1;
        bool flag2;
        switch (num3 == num4 ? 1 : 0)
        {
          case 0:
          case 2:
label_26:
            flag2 = !this.AppStarted;
            flag1 = false;
            num2 = 10;
            num1 = num2;
            continue;
          default:
            num2 = 0;
            if (num2 == 0)
              ;
            switch (num1)
            {
              case 0:
                goto label_26;
              case 1:
                num2 = 15;
                num1 = num2;
                continue;
              case 2:
                switch (0)
                {
                  case 0:
                    goto label_6;
                  default:
                    continue;
                }
              case 3:
                goto label_10;
              case 4:
                if (config == null)
                {
                  num2 = 3;
                  num1 = num2;
                  continue;
                }
                break;
              case 5:
                num2 = 4;
                num1 = num2;
                continue;
              case 6:
                this.ApplicationStop(synchronous: true);
                config.OptIn = flag1;
                num2 = 12;
                num1 = num2;
                continue;
              case 7:
                config = this.Configuration;
                num2 = 0;
                num1 = num2;
                continue;
              case 8:
                this.Logger.LogInfo(Utils.a("﮹좻쪽ꖿ꿁듃닅ꇇ\uA4C9ꯋ\uEECD뇏병\uF4D3럕귗껙돛돝臟雡跣藥죧ꯩ鳫黭ꏯ蛱闳蓵賷\uDAF9裻釽\u20FF瀁愃瘅朇砉砋⸍焏㈑怓眕甗標礛氝ฟ", A_1));
                flag1 = config.OptIn;
                config.OptIn = true;
                this.ApplicationStart(config);
                num2 = 14;
                num1 = num2;
                continue;
              case 9:
                this.MessageQueue.Queue((Message) new Tamper(session.a(this.Configuration.DefaultSession), keys, CoreClient.a(binary)));
                num2 = 1;
                num1 = num2;
                continue;
              case 10:
                if (flag2)
                {
                  num2 = 8;
                  num1 = num2;
                  continue;
                }
                goto case 14;
              case 11:
                if (this.AppStarted)
                {
                  num2 = 9;
                  num1 = num2;
                  continue;
                }
                goto case 1;
              case 12:
                goto label_25;
              case 13:
                if (config == null)
                {
                  num2 = 7;
                  num1 = num2;
                  continue;
                }
                goto label_26;
              case 14:
                num2 = 11;
                num1 = num2;
                continue;
              case 15:
                if (flag2)
                {
                  num2 = 6;
                  num1 = num2;
                  continue;
                }
                goto label_29;
              default:
label_6:
                if (this.Configuration == null)
                {
                  num2 = 5;
                  num1 = num2;
                  continue;
                }
                break;
            }
            num2 = 13;
            num1 = num2;
            continue;
        }
      }
label_25:
      return;
label_10:
      this.Logger.LogError(Utils.a("\uEEB9풻\uDBBD\uE0BF菁铃迅\uE8C7ꋉ귋뷍\uF0CF병믓ꋕ\uF8D7룙맛믝軟싡蟣觥蛧賩藫觭藯胱釳鋵\uD8F7軹鏻\uDEFD珿朁樃戅⠇有椋納挏猑猓猕欗㐙㰛䨝䠟䜡У別䤧䜩尫䬭䈯ሱ夳匵䬷䤹崻夽┿扁㍃⽅⑇♉汋⁍㽏♑瑓㑕㵗穙⽛㭝\u0E5Fᙡ䩣", A_1));
      return;
label_29:;
    }

    public void ReportDebugging(
      [Optional] bool optinOverride,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary,
      [Optional] Configuration config)
    {
      int A_1 = 2;
      int num1 = 16;
      while (true)
      {
        int num2;
        bool flag1;
        bool flag2;
        int num3;
        switch (num1)
        {
          case 0:
            if (flag1)
            {
              num2 = 14;
              num1 = num2;
              continue;
            }
            goto label_52;
          case 1:
            num3 = !this.AppStarted ? 1 : 0;
            goto label_29;
          case 2:
            if (this.AppStarted)
            {
              num2 = 11;
              num1 = num2;
              continue;
            }
            goto case 28;
          case 3:
            this.Logger.LogInfo(Utils.a("\uF7B5첷캹\uD9BB펽낿뛁귃\uA8C5꿇\uEAC9귋ꃍ\uF0CF돑ꇓꋕ럗럙뷛ꫝ觟臡쓣\uA7E5飧髩뿫髭釯胱胳훵賷闹\uDCFB賽旿爁欃琅簇⨉栋欍爏朑猓焕焗琙笛〝", A_1));
            flag2 = config.OptIn;
            config.OptIn = true;
            this.ApplicationStart(config);
            num2 = 13;
            num1 = num2;
            continue;
          case 4:
            num2 = 19783;
            int num4 = num2;
            num2 = 19783;
            int num5 = num2;
            switch (num4 == num5 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_20;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                num2 = 8;
                num1 = num2;
                continue;
            }
          case 5:
            goto label_50;
          case 6:
            config = this.Configuration;
            num2 = 18;
            num1 = num2;
            continue;
          case 7:
            if (optinOverride)
            {
              num2 = 25;
              num1 = num2;
              continue;
            }
            break;
          case 8:
            if (optinOverride)
              goto label_43;
            else
              goto label_20;
          case 9:
            num2 = 12;
            num1 = num2;
            continue;
          case 10:
            num2 = 1;
            num1 = num2;
            continue;
          case 11:
            this.MessageQueue.Queue((Message) new Fault(this.Platform, ExceptionInfo.Caught(Utils.a("햵ힷힹ銻캽늿\uA7C1ꇃꯅ룇뻉ꗋ룍뗏ﳑ郓돕뫗꿙믛망觟賡菣ꗥ胧迩迫藭", A_1), Utils.a("\uF2B5\uDDB7\uD8B9즻\uD9BD\uA7BFꯁ\uAAC3ꇅ\uE8C7뷉귋뷍\uF0CF뛑뇓ꋕ뷗맙\uA8DB믝蓟쳡", A_1), Utils.a("\uE3B5횷톹튻톽랿곁\uE4C3鏅ꛇꇉꋋꇍ\uA7CF병", A_1), Utils.a("麵隷邹閻麽\uE8BF\uECC1\uEEC3\uEFC5", A_1)), session.a(this.Configuration.DefaultSession), keys, CoreClient.a(binary)));
            num2 = 28;
            num1 = num2;
            continue;
          case 12:
            if (config == null)
            {
              num2 = 20;
              num1 = num2;
              continue;
            }
            goto label_21;
          case 13:
            num2 = 2;
            num1 = num2;
            continue;
          case 14:
            this.ApplicationStop(synchronous: true);
            config.OptIn = flag2;
            num2 = 5;
            num1 = num2;
            continue;
          case 15:
            num3 = 0;
            goto label_29;
          case 16:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 17:
            if (flag1)
            {
              num2 = 3;
              num1 = num2;
              continue;
            }
            goto case 13;
          case 18:
            num2 = 24;
            num1 = num2;
            continue;
          case 19:
            if (!config.OptIn)
            {
              num2 = 4;
              num1 = num2;
              continue;
            }
            goto label_43;
          case 20:
            goto label_42;
          case 21:
            goto label_5;
          case 22:
            if (config == null)
            {
              num2 = 6;
              num1 = num2;
              continue;
            }
            goto case 18;
          case 23:
            num2 = 1;
            if (num2 == 0)
              ;
            num2 = 7;
            num1 = num2;
            continue;
          case 24:
            if (!this.AppStarted)
            {
              num2 = 29;
              num1 = num2;
              continue;
            }
            goto label_43;
          case 25:
            num2 = 26;
            num1 = num2;
            continue;
          case 26:
            if (!config.OptIn)
            {
              num2 = 10;
              num1 = num2;
              continue;
            }
            break;
          case 27:
            if (!config.OptIn)
            {
              num2 = 23;
              num1 = num2;
              continue;
            }
            goto case 10;
          case 28:
            num2 = 0;
            num1 = num2;
            continue;
          case 29:
            num2 = 19;
            num1 = num2;
            continue;
          default:
label_3:
            if (this.Configuration == null)
            {
              num2 = 9;
              num1 = num2;
              continue;
            }
            goto label_21;
        }
        num2 = 15;
        num1 = num2;
        continue;
label_20:
        num2 = 21;
        num1 = num2;
        continue;
label_21:
        num2 = 22;
        num1 = num2;
        continue;
label_29:
        flag1 = num3 != 0;
        flag2 = false;
        num2 = 17;
        num1 = num2;
        continue;
label_43:
        num2 = 27;
        num1 = num2;
      }
label_50:
      return;
label_5:
      this.Logger.LogError(Utils.a("\uF7B5\uE8B7\uF3B9鲻횽ꆿ뇁\uE4C3\uA8C5\uA7C7뻉\uECCB곍뗏럑뫓\uF6D5ꯗ껙뷛곝铟蟡胣죥죧껩觫賭藯闱鏳\u9FF5雷鷹\uDCFB觽槿渁栃★昇攉砋⸍爏眑㐓搕紗標猛氝吟䜡䀣ࠥ", A_1));
      return;
label_52:
      return;
label_42:
      this.Logger.LogError(Utils.a("\uE2B5킷\uDFB9鲻ﾽ邿证\uE4C3껅꧇막\uECCBꃍ뿏ꛑ\uF4D3듕뷗뿙닛ﻝ菟跡諣胥臧跩駫鳭闯雱퓳苵韷\uDAF9迻鯽滿昁␃欅洇礉缋漍眏眑朓㠕㠗丙琛笝\u001F䘡䄣䐥崧䴩䬫䜭帯唱ᐳ嬵崷䤹伻弽✿❁摃ㅅⅇ♉⁋湍㹏㵑⁓癕㩗㽙籛ⵝ՟ౡၣ䡥", A_1));
    }

    public virtual void ReportExpiration(
      Guid slid,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int A_1 = 5;
      int num1 = 3;
      while (true)
      {
        int num2 = 1;
        if (num2 == 0)
          ;
        num2 = 6944;
        int num3 = num2;
        num2 = 6944;
        int num4 = num2;
        switch (num3 == num4 ? 1 : 0)
        {
          case 0:
          case 2:
            goto label_12;
          default:
            num2 = 0;
            if (num2 == 0)
              ;
            switch (num1)
            {
              case 0:
                if (Guid.Empty == slid)
                {
                  num2 = 1;
                  num1 = num2;
                  continue;
                }
                goto label_13;
              case 1:
                goto label_8;
              case 2:
                goto label_12;
              case 3:
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
            if (!this.AppStarted)
            {
              num2 = 2;
              num1 = num2;
              continue;
            }
            num2 = 0;
            num1 = num2;
            continue;
        }
      }
label_8:
      this.Logger.LogError(Utils.a("\uEAB8펺\uD8BC펾\uA7C0꿂계ꇆ곈\uEBCA蓌诎\uF1D0뫒ꛔ\uF7D6볘뛚규ꯞ飠쏢ꋤ닦ꃨ꿪쏬쿮냰菲藴鯶郸飺鳼课栀氂欄✆䰈猊紌明挐爒愔縖瘘甚㴜栞䠠伢䤤ܦ䜨䐪夬\u0F2E匰嘲ᔴ䐶尸唺䤼ᄾ", A_1));
      return;
label_12:
      this.Logger.LogError(Utils.a("\uF8B8\uEBBA\uF4BC龾꧀ꋂ뛄\uE7C6\uA7C8\uA4CA만\uEFCE돐뛒냔맖律\uA8DA\uA9DC뻞鏠韢胤菦쟨쯪곬\u9FEE臰\u9FF2鳴银飸迺铼郾漀⌂䀄缆礈戊缌渎攐稒稔礖㤘氚琜猞䴠̢䬤䠦崨ପ伬䨮ᄰ䀲倴夶䴸ᔺ", A_1));
      return;
label_13:
      this.MessageQueue.Queue((Message) new global::d(slid, session.a(this.Configuration.DefaultSession), keys, CoreClient.a(binary)));
    }

    public virtual void ReportExpirationWarning(
      Guid slid,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int A_1 = 10;
      int num1 = 3;
      int num2;
      while (true)
      {
        num2 = 19386;
        int num3 = num2;
        num2 = 19386;
        int num4 = num2;
        switch (num3 == num4 ? 1 : 0)
        {
          case 0:
          case 2:
            goto label_12;
          default:
            num2 = 0;
            if (num2 == 0)
              ;
            switch (num1)
            {
              case 0:
                if (Guid.Empty == slid)
                {
                  num2 = 1;
                  num1 = num2;
                  continue;
                }
                goto label_13;
              case 1:
                goto label_8;
              case 2:
                goto label_7;
              case 3:
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
            }
            if (!this.AppStarted)
            {
              num2 = 2;
              num1 = num2;
              continue;
            }
            num2 = 0;
            num1 = num2;
            continue;
        }
      }
label_7:
      num2 = 1;
      if (num2 == 0)
        goto label_12;
      else
        goto label_12;
label_8:
      this.Logger.LogError(Utils.a("\uEDBDꢿ\uA7C1ꣃꃅ\uA4C7ꏉ\uAACBꯍ\uF0CF鯑郓\uF6D5뇗꧙ﳛ믝跟鋡郣\u9FE5죧귩맫\uA7ED듯\uDCF1퓳럵裷諹郻韽揿持瀃漅朇搉Ⰻ䬍栏我紓搕礗渙甛焝丟ȡ猣䜥娧䐩䔫䀭圯ሱ䌳張吷嘹᰻倽⼿㙁摃⑅ⵇ橉㽋⭍㹏♑穓", A_1));
      return;
label_12:
      this.Logger.LogError(Utils.a("ﾽ邿证\uE4C3껅꧇막\uECCBꃍ뿏ꛑ\uF4D3듕뷗뿙닛ﻝ鏟雡藣铥鳧迩裫샭탯돱蓳蛵铷鏹\u9FFB\u9FFD瓿欁欃栅⠇伉琋縍礏怑甓戕焗甙爛㸝真䌡嘣䠥䄧䐩䬫อ䜯嬱堳娵ᠷ吹医䨽怿⁁⅃晅㭇⽉≋㩍繏", A_1));
      return;
label_13:
      this.MessageQueue.Queue((Message) new global::e(slid, session.a(this.Configuration.DefaultSession), keys, CoreClient.a(binary)));
    }

    public void SystemProfile([Optional] ExtendedKeys keys, [Optional] Guid? session, [Optional] BinaryInfo binary)
    {
      int A_1 = 18;
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      CoreClient.b b = new CoreClient.b();
      // ISSUE: reference to a compiler-generated field
      b.b = keys;
      // ISSUE: reference to a compiler-generated field
      b.c = session;
      // ISSUE: reference to a compiler-generated field
      b.d = binary;
      // ISSUE: reference to a compiler-generated field
      b.a = this;
      if (!this.AppStarted)
      {
        int num = 27028;
        switch (27028 == num ? 1 : 0)
        {
          case 0:
          case 2:
            break;
          default:
            num = 1;
            if (num == 0)
              ;
            num = 0;
            if (num == 0)
              ;
            this.Logger.LogError(Utils.a("蟅飇菉\uECCBꛍ뇏ꇑ\uF4D3룕럗껙ﳛ볝藟蟡諣웥鯧黩跫鳭蓯韱郳\uD8F5\uD8F7꧹藻跽瓿朁椃★砇砉挋栍礏縑焓㘕漗猙瀛爝\u001F䰡䬣別ࠧ䠩䤫อ䌯圱娳䈵ᘷ", A_1));
            return;
        }
      }
      // ISSUE: reference to a compiler-generated method
      this.Platform.ExecuteAsync(new Action(b.e));
    }

    public void PerformanceProbe(string name, [Optional] ExtendedKeys keys, [Optional] Guid? session, [Optional] BinaryInfo binary)
    {
      int A_1 = 14;
      int num1;
      // ISSUE: variable of a compiler-generated type
      CoreClient.c c;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          // ISSUE: object of a compiler-generated type is created
          c = new CoreClient.c();
          // ISSUE: reference to a compiler-generated field
          c.b = name;
          // ISSUE: reference to a compiler-generated field
          c.c = keys;
          // ISSUE: reference to a compiler-generated field
          c.d = session;
          // ISSUE: reference to a compiler-generated field
          c.e = binary;
          // ISSUE: reference to a compiler-generated field
          c.a = this;
          num2 = 3;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                // ISSUE: reference to a compiler-generated field
                if (string.IsNullOrEmpty(c.b))
                {
                  num2 = 1;
                  num1 = num2;
                  continue;
                }
                goto label_13;
              case 1:
                goto label_9;
              case 2:
                goto label_12;
              case 3:
                if (!this.AppStarted)
                {
                  num2 = 2;
                  num1 = num2;
                  continue;
                }
                num2 = 0;
                num1 = num2;
                continue;
              default:
                goto label_2;
            }
          }
label_9:
          num2 = 18405;
          int num3 = num2;
          num2 = 18405;
          int num4 = num2;
          switch (num3 == num4 ? 1 : 0)
          {
            case 0:
            case 2:
              break;
            default:
              num2 = 0;
              if (num2 == 0)
                ;
              num2 = 1;
              if (num2 == 0)
                ;
              this.Logger.LogError(Utils.a("鋁ꇃ듅껇ꗉ뻋ꏍ뇏병럓돕\uF8D7\uAAD9껛뇝苟蟡쓣裥觧蟩觫컭駯臱퓳飵跷雹郻\uDEFD濿瀁␃挅攇稉砋眍㸏㈑䐓猕樗簙猛氝䴟䌡䨣䔥䴧\u0A29尫尭弯倱儳ᘵ伷匹倻刽怿ⱁ⭃㉅桇⡉⥋湍⍏㝑㩓≕癗", A_1));
              return;
          }
label_12:
          this.Logger.LogError(Utils.a("菁铃迅\uE8C7ꋉ귋뷍\uF0CF병믓ꋕ\uF8D7룙맛믝軟싡韣鋥觧飩飫语铯\uDCF1퓳꛵鷷裹髻釽狿漁攃栅欇漉Ⰻ縍戏紑瘓猕㠗洙甛爝䰟ȡ䨣䤥尧\u0A29丫䬭ု䄱儳堵䰷ᐹ", A_1));
          break;
label_13:
          // ISSUE: reference to a compiler-generated method
          this.Platform.ExecuteAsync(new Action(c.f));
          break;
      }
    }

    private static BinaryInfoTag a(BinaryInfo A_0)
    {
      int num1;
      if (A_0 != null)
      {
        num1 = 6843;
        int num2 = num1;
        num1 = 6843;
        int num3 = num1;
        switch (num2 == num3 ? 1 : 0)
        {
          case 0:
          case 2:
            break;
          default:
            num1 = 0;
            if (num1 == 0)
              ;
            return A_0.ToTag();
        }
      }
      num1 = 1;
      if (num1 == 0)
        ;
      return (BinaryInfoTag) null;
    }

    public void SendMessages()
    {
      int A_1 = 15;
      int num1 = 6;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            goto label_14;
          case 1:
            if (this.MessageQueue == null)
              goto label_18;
            else
              break;
          case 2:
            goto label_12;
          case 3:
            num2 = 4;
            num1 = num2;
            continue;
          case 4:
            num2 = 1;
            if (num2 == 0)
              ;
            if (this.FlowController.SendDisabled)
            {
              num2 = -19737;
              int num3 = num2;
              num2 = -19737;
              int num4 = num2;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  break;
                default:
                  num2 = 0;
                  if (num2 == 0)
                    ;
                  num2 = 5;
                  num1 = num2;
                  continue;
              }
            }
            else
            {
              this.MessageQueue.SendMessages();
              num2 = 0;
              num1 = num2;
              continue;
            }
            break;
          case 5:
            goto label_5;
          case 6:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          default:
label_3:
            if (!this.AppStarted)
            {
              num2 = 2;
              num1 = num2;
              continue;
            }
            num2 = 1;
            num1 = num2;
            continue;
        }
        num2 = 3;
        num1 = num2;
      }
label_14:
      return;
label_5:
      this.Logger.LogError(Utils.a("郂ꃄ꧆귈ꋊꏌ꣎\uF1D0뫒ꛔ\uF7D6뷘닚껜뻞菠迢胤菦짨觪铬쿮韰\u9FF2髴胶\uD9F8飺鋼釾甀焂樄欆攈渊缌ℎㄐ䀒瀔礖紘嘚砜氞删䈢䈤䈦娨ପ娬䘮崰弲ᔴ匶嘸ᬺ匼倾㕀⭂ⱄ⥆\u2E48橊", A_1));
      return;
label_12:
      this.Logger.LogWarning(Utils.a("苂闄軆\uE9C8ꏊ곌볎\uF1D0뷒뫔ꏖ律맚룜뫞迠쏢雤鏦裨駪駬諮闰\uDDF2헴ꓶ鳸闺駼닾搀瀂瘄昆済渊縌⼎昐稒礔笖㤘缚爜㼞传䰢儤伦䀨䔪䨬ฮ", A_1));
      return;
label_18:;
    }

    public void SetSendDisabled(bool value)
    {
      int A_1 = 8;
      int num1 = 6;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            if (value != this.FlowController.SendDisabled)
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            goto label_15;
          case 1:
            this.FlowController.SendDisabled = value;
            num2 = 4;
            num1 = num2;
            continue;
          case 2:
            goto label_16;
          case 3:
            goto label_11;
          case 4:
            if (this.MessageQueue != null)
            {
              num2 = 5026;
              int num3 = num2;
              num2 = 5026;
              int num4 = num2;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  break;
                default:
                  num2 = 1;
                  if (num2 == 0)
                    ;
                  num2 = 0;
                  if (num2 == 0)
                    ;
                  num2 = 5;
                  num1 = num2;
                  continue;
              }
            }
            else
              goto label_19;
            break;
          case 5:
            this.MessageQueue.SendDisabledChanged(value);
            break;
          case 6:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          default:
label_3:
            if (!this.AppStarted)
            {
              num2 = 2;
              num1 = num2;
              continue;
            }
            num2 = 0;
            num1 = num2;
            continue;
        }
        num2 = 3;
        num1 = num2;
      }
label_11:
      return;
label_19:
      return;
label_15:
      return;
label_16:
      this.Logger.LogWarning(Utils.a("ﶻ\uEEBD覿\uE2C1곃\uA7C5믇\uEAC9ꋋꇍ\uA4CF\uF2D1뛓돕뷗듙ﳛ귝铟菡難鋥跧軩싫컭ꏯ韱胳ꗵ鷷铹飻뫽槿焁攃搅搇漉栋⸍朏笑砓稕㠗縙猛㸝丟䴡倣严䄧䐩䬫\u0F2D", A_1));
    }

    public void SetSessionOptIn(bool value, [Optional] Configuration config)
    {
      int A_1 = 14;
      int num1 = 7;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num2 = 3;
            num1 = num2;
            continue;
          case 1:
            num2 = 4;
            num1 = num2;
            continue;
          case 2:
            num2 = 5;
            num1 = num2;
            continue;
          case 3:
            if (this.Configuration != null)
            {
              num2 = 6;
              num1 = num2;
              continue;
            }
            goto case 1;
          case 4:
            if (!this.AppStarted)
            {
              num2 = 2;
              num1 = num2;
              continue;
            }
            goto label_18;
          case 5:
            if (value)
            {
              num2 = 8;
              num1 = num2;
              continue;
            }
            goto label_22;
          case 6:
            this.Configuration.OptIn = value;
            this.Logger.LogInfo(string.Format(Utils.a("雁곃ꏅ\uE8C7막꧋뷍ꏏ믑믓룕\uF8D7闙곛ꫝ꧟賡쓣軥觧駩쳫賭闯韱髳훵请\u9FF9裻\uDEFD瓿洁␃紅㠇眉", A_1), new object[1]
            {
              (object) value
            }));
            num2 = 1;
            num1 = num2;
            continue;
          case 7:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 8:
            this.Logger.LogInfo(Utils.a("釁ꇃ뗅믇ꏉꏋꃍ鿏ꋑꃓ鿕뛗龎듛뿝鏟싡蛣菥跧蓩쳫鷭闯蛱퓳苵韷\uDAF9裻賽痿朁␃朅昇渉Ⰻ稍砏眑㐓圕䠗匙㰛椝䄟儡У䠥䜧帩ఫ席䈯圱䈳張圷伹伻刽㤿扁㝃㉅⥇㡉㡋⭍㑏籑瑓ᕕ㥗㙙せ㝝\u0E5Fա䑣❥ᡧᩩkݭ\u136F\u1371sή\u1777ᑹ⽻\u0A7D\uE17F\uF081\uF083ꢅꚇꒉ", A_1));
            this.ApplicationStart(config, flowController: this.FlowController);
            num2 = -13022;
            int num3 = num2;
            num2 = -13022;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                continue;
              default:
                num2 = 0;
                if (num2 == 0)
                  ;
                num2 = 1;
                if (num2 == 0)
                  ;
                num2 = 9;
                num1 = num2;
                continue;
            }
          case 9:
            goto label_14;
          case 10:
            config.OptIn = value;
            num2 = 0;
            num1 = num2;
            continue;
          default:
label_3:
            if (config != null)
            {
              num2 = 10;
              num1 = num2;
              continue;
            }
            goto case 0;
        }
      }
label_14:
      return;
label_22:
      return;
label_18:;
    }
  }
}
