// Decompiled with JetBrains decompiler
// Type: ChessBoard.ChessBoard
// Assembly: IArraySortHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B08900B5-C53F-4995-B311-D7E8DC4113C6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcrg-fe8d5c5d892bac95b940a26cf50aacf262dd40e3394fc1ba8444ab3842a16fda.exe

using ChessBoard.Chessmens;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace ChessBoard
{
  public class ChessBoard
  {
    public GameStatus Status;

    public BoardCell[,] BoardCells { get; set; }

    public ChessBoard()
    {
    }

    public ChessBoard(BoardCell[,] boardCells)
    {
label_1:
      int num1 = -395389700;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1688337570)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.BoardCells = boardCells;
            num1 = (int) num2 * 1046353444 ^ 891932633;
            continue;
          case 3:
            num1 = (int) num2 * 535100820 ^ -1602336581;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public ChessBoard(string serializedChessboard)
    {
      ChessBoard.ChessBoard chessBoard = (ChessBoard.ChessBoard) null;
      ChessBoardBuilder.NormilizedBoardCells(chessBoard.BoardCells);
      this.BoardCells = chessBoard.BoardCells;
      this.Status = chessBoard.Status;
    }

    public void SetStartPosition()
    {
    }

    public string GetSerializedChessBoard()
    {
label_1:
      int num1 = -725454581;
      string serializedChessBoard;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1255485252)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 381597761 ^ -1030567731;
            continue;
          case 2:
            goto label_1;
          case 3:
            serializedChessBoard = "";
            num1 = (int) num2 * 591915317 ^ 1498885847;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return serializedChessBoard;
    }

    public GameStatus MoveChessman(
      Cell oldPosition,
      Cell newPosition,
      ChessmenType? newType = null)
    {
label_1:
      int num1 = -813708714;
      BaseChessman chessman;
      GameStatus gameStatus;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1870151607)) % 16U)
        {
          case 0:
            this.BoardCells[oldPosition.Row, oldPosition.Column].Chessman = (BaseChessman) null;
            num1 = (int) num2 * 165027411 ^ -1404742207;
            continue;
          case 1:
            this.BoardCells[newPosition.Row, newPosition.Column].Chessman = chessman;
            num1 = (int) num2 * 572325638 ^ -556732236;
            continue;
          case 2:
            num1 = (int) num2 * -356779232 ^ 594048653;
            continue;
          case 4:
            this.MakeCastlingIfPossible(chessman, oldPosition, newPosition);
            ChessBoard.ChessBoard.ChangeTypeInCasePawnAndPossible(ref chessman, newPosition, newType);
            num1 = (int) num2 * -1317051129 ^ 829732457;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.Status = GameStatus.WhiteTurn;
            num1 = (int) num2 * -1276755998 ^ -34402789;
            continue;
          case 7:
            num1 = (int) num2 * -1320493943 ^ 111844677;
            continue;
          case 8:
            num1 = (int) num2 * 1244810824 ^ 1705598360;
            continue;
          case 9:
            this.FailIfWrongColorAndStatus(chessman.Color);
            num1 = (int) num2 * -220443466 ^ 233873317;
            continue;
          case 10:
            this.FailIfWrongNewPosition(oldPosition, newPosition);
            num1 = (int) num2 * 523236492 ^ 557548099;
            continue;
          case 11:
            gameStatus = this.SwitchStatus(chessman.Color);
            num1 = (int) num2 * -2032788584 ^ -1991140906;
            continue;
          case 12:
            chessman.Moved = true;
            num1 = (int) num2 * -1819629080 ^ 1732969908;
            continue;
          case 13:
            num1 = (int) num2 * -261733172 ^ -1593555211;
            continue;
          case 14:
            chessman = this.BoardCells[oldPosition.Row, oldPosition.Column].Chessman;
            num1 = (int) num2 * 322805021 ^ 111127382;
            continue;
          case 15:
            ChessBoard.ChessBoard.FailIfArgumnetsAreNull(oldPosition, newPosition);
            this.BoardCells = ChessBoardBuilder.GetStartPositionBoardCells();
            num1 = (int) num2 * 50085357 ^ -507011380;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return gameStatus;
    }

    public List<Cell> GetAcceptableCells(Cell cell)
    {
      bool flag = cell == null;
label_1:
      int num1 = -1276818827;
      BaseChessman chessman;
      List<Cell> acceptableCells;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1613255860)) % 7U)
        {
          case 0:
            chessman = this.BoardCells[cell.Row, cell.Column].Chessman;
            num1 = -695449041;
            continue;
          case 1:
            acceptableCells = chessman.GetAcceptableCells(this.BoardCells, cell);
            num1 = (int) num2 * -594050947 ^ 338978920;
            continue;
          case 2:
            int num3 = flag ? 719364168 : (num3 = 264653483);
            num1 = num3 ^ (int) num2 * 673265947;
            continue;
          case 3:
            num1 = (int) num2 * 372884512 ^ -737610549;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_4;
          default:
            goto label_8;
        }
      }
label_4:
      throw ChessBoard.ChessBoard.\u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(\u003CModule\u003E.\u206A⁪‍‌‪⁫‎⁮‫⁮⁭‎‍‌⁪⁪⁯⁫‪⁪‌‮‍⁬⁮‭​⁮⁭⁪⁮⁯​⁮⁭‬‫‎‫‏‮<string>(3452478176U));
label_8:
      return acceptableCells;
    }

    public void GiveUp(Colorz color) => this.Status = color == Colorz.White ? GameStatus.BlackWin : GameStatus.WhiteWin;

    public bool IsGameOver()
    {
      if (this.Status == GameStatus.WhiteWin)
        goto label_8;
label_1:
      int num1 = -910700111;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1508014300)) % 7U)
        {
          case 0:
            if (this.Status != GameStatus.StalemateForBlack)
            {
              num1 = (int) num2 * 1141231060 ^ 790002402;
              continue;
            }
            goto label_8;
          case 1:
            if (this.Status != GameStatus.StalemateForWhite)
            {
              num1 = (int) num2 * -2026017255 ^ -1969216575;
              continue;
            }
            goto label_8;
          case 2:
            num1 = (int) num2 * -834388231 ^ -1319147450;
            continue;
          case 3:
            goto label_7;
          case 4:
            goto label_1;
          case 6:
            if (this.Status != GameStatus.BlackWin)
            {
              num1 = (int) num2 * 979267765 ^ -2009770963;
              continue;
            }
            goto label_8;
          default:
            goto label_13;
        }
      }
label_7:
      int num3 = this.Status == GameStatus.Draw ? 1 : 0;
      goto label_9;
label_13:
      bool flag;
      return flag;
label_8:
      num3 = 1;
label_9:
      flag = num3 != 0;
      num1 = -1543712855;
      goto label_2;
    }

    private GameStatus SwitchStatus(Colorz currentColor)
    {
label_1:
      int num1 = 137885929;
      GameStatus gameStatus;
      while (true)
      {
        uint num2;
        Colorz colorz;
        List<Cell> allAcceptableCells;
        Cell cellToCheck;
        BoardCell king;
        bool flag1;
        bool flag2;
        int num3;
        int num4;
        int num5;
        int num6;
        int num7;
        switch ((num2 = (uint) (num1 ^ 1940134200)) % 26U)
        {
          case 0:
            if (currentColor == Colorz.White)
            {
              num3 = 3;
              break;
            }
            num1 = (int) num2 * -806754666 ^ 578826603;
            continue;
          case 1:
            allAcceptableCells = this.GetAllAcceptableCells(colorz);
            int num8 = !BaseChessman.IsCellUnderShah(this.BoardCells, cellToCheck, colorz) ? -2004770256 : (num8 = -111331826);
            num1 = num8 ^ (int) num2 * -1159651355;
            continue;
          case 2:
            if (currentColor != Colorz.White)
            {
              num1 = 1517476028;
              continue;
            }
            num4 = 1;
            goto label_28;
          case 3:
            if (currentColor != Colorz.White)
            {
              num1 = (int) num2 * -259937751 ^ -1582384089;
              continue;
            }
            num5 = 1;
            goto label_41;
          case 4:
            num4 = 0;
            goto label_28;
          case 5:
            int num9;
            num1 = num9 = allAcceptableCells.Any<Cell>() ? 470757466 : (num9 = 643118720);
            continue;
          case 6:
            int num10 = flag1 ? 258374379 : (num10 = 226076484);
            num1 = num10 ^ (int) num2 * 939742006;
            continue;
          case 7:
            num1 = (int) num2 * 806179761 ^ 313693866;
            continue;
          case 8:
            king = King.FindKing(this.BoardCells, colorz);
            num1 = (int) num2 * 925497006 ^ -1269038449;
            continue;
          case 9:
            num3 = 2;
            break;
          case 10:
            flag2 = allAcceptableCells.Any<Cell>();
            num1 = (int) num2 * 1529635367 ^ 125166214;
            continue;
          case 11:
            num6 = 5;
            goto label_11;
          case 12:
            flag1 = this.AreOnlyKingOnTheBoard();
            num1 = 1133802430;
            continue;
          case 13:
            goto label_1;
          case 14:
            if (currentColor == Colorz.White)
            {
              num6 = 4;
              goto label_11;
            }
            else
            {
              num1 = 2084222499;
              continue;
            }
          case 15:
            num1 = (int) num2 * 1056475683 ^ -1152360164;
            continue;
          case 16:
            num1 = (int) num2 * 1833342268 ^ 1384242057;
            continue;
          case 17:
            cellToCheck = new Cell(king.Row, king.Column);
            num1 = (int) num2 * -1400854194 ^ 2106424833;
            continue;
          case 18:
            int num11 = !flag2 ? -716644658 : (num11 = -1201162430);
            num1 = num11 ^ (int) num2 * -863709049;
            continue;
          case 20:
            num1 = (int) num2 * -228910645 ^ -941920193;
            continue;
          case 21:
            gameStatus = GameStatus.Draw;
            num1 = (int) num2 * -1920237968 ^ -882806869;
            continue;
          case 22:
            num5 = 0;
            goto label_41;
          case 23:
            num7 = 7;
            goto label_31;
          case 24:
            if (currentColor != Colorz.White)
            {
              num1 = (int) num2 * -1412674068 ^ -1548922429;
              continue;
            }
            num7 = 6;
            goto label_31;
          case 25:
            num1 = (int) num2 * -63924453 ^ -987456745;
            continue;
          default:
            goto label_42;
        }
        gameStatus = (GameStatus) num3;
        num1 = 1870771001;
        continue;
label_11:
        gameStatus = (GameStatus) num6;
        num1 = 1236343343;
        continue;
label_28:
        gameStatus = (GameStatus) num4;
        num1 = 426101036;
        continue;
label_31:
        gameStatus = (GameStatus) num7;
        num1 = 1917950314;
        continue;
label_41:
        colorz = (Colorz) num5;
        num1 = 1644506288;
      }
label_42:
      return gameStatus;
    }

    private bool AreOnlyKingOnTheBoard()
    {
label_1:
      int num1 = 248516432;
      int index1;
      int index2;
      bool flag1;
      int num2;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 93697959)) % 16U)
        {
          case 0:
            int num4 = flag3 ? -1702008822 : (num4 = -1170603633);
            num1 = num4 ^ (int) num3 * 476835790;
            continue;
          case 1:
            int num5 = !flag1 ? -1868028841 : (num5 = -200633258);
            num1 = num5 ^ (int) num3 * 1370078850;
            continue;
          case 2:
            ++index1;
            num1 = (int) num3 * 485926513 ^ 165632000;
            continue;
          case 3:
            int num6;
            num1 = num6 = this.BoardCells[index1, index2].Chessman != null ? 257970797 : (num6 = 1647846008);
            continue;
          case 4:
            goto label_1;
          case 5:
            flag3 = index1 < 8;
            num1 = 1560293719;
            continue;
          case 6:
            num1 = (int) num3 * 29523032 ^ 190156194;
            continue;
          case 7:
            num2 = 0;
            index1 = 0;
            num1 = (int) num3 * -2146122645 ^ 1312385948;
            continue;
          case 8:
            flag2 = num2 == 2;
            num1 = (int) num3 * -1933479931 ^ 80286179;
            continue;
          case 10:
            ++num2;
            num1 = (int) num3 * 464218852 ^ 36465040;
            continue;
          case 11:
            num1 = (int) num3 * 106415869 ^ 344047846;
            continue;
          case 12:
            num1 = (int) num3 * 1034186954 ^ 1549570582;
            continue;
          case 13:
            index2 = 0;
            num1 = 1811882108;
            continue;
          case 14:
            flag1 = index2 < 8;
            num1 = 318885238;
            continue;
          case 15:
            ++index2;
            num1 = 1522120073;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return flag2;
    }

    private List<Cell> GetAllAcceptableCells(Colorz currentColor)
    {
      List<Cell> cellList = new List<Cell>();
      int index1 = 0;
label_1:
      int num1 = 2078609065;
      List<Cell> allAcceptableCells;
      while (true)
      {
        uint num2;
        int index2;
        List<Cell> acceptableCells;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        switch ((num2 = (uint) (num1 ^ 492372517)) % 22U)
        {
          case 0:
            int num4 = !flag4 ? 1745386260 : (num4 = 483752323);
            num1 = num4 ^ (int) num2 * -546748401;
            continue;
          case 1:
            flag4 = index1 < 8;
            num1 = 89640861;
            continue;
          case 2:
            num1 = (int) num2 * 1774335557 ^ 513621834;
            continue;
          case 3:
            num3 = acceptableCells.Any<Cell>() ? 1 : 0;
            break;
          case 4:
            num1 = 1743729097;
            continue;
          case 5:
            int num5 = flag1 ? -662802204 : (num5 = -1902523582);
            num1 = num5 ^ (int) num2 * 1992243623;
            continue;
          case 6:
            num1 = (int) num2 * -2102038870 ^ 126601125;
            continue;
          case 7:
            num1 = (int) num2 * 1204273966 ^ -185006293;
            continue;
          case 8:
            ++index2;
            num1 = 1046330622;
            continue;
          case 10:
            flag2 = this.BoardCells[index1, index2].Chessman == null;
            num1 = 1296946793;
            continue;
          case 11:
            goto label_1;
          case 12:
            ++index1;
            num1 = (int) num2 * 451047900 ^ -1794489258;
            continue;
          case 13:
            cellList.AddRange((IEnumerable<Cell>) acceptableCells);
            num1 = (int) num2 * -1136776399 ^ -872364128;
            continue;
          case 14:
            int num6 = flag3 ? 2058129986 : (num6 = 577203957);
            num1 = num6 ^ (int) num2 * 1185551368;
            continue;
          case 15:
            if (acceptableCells == null)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 1765304450 ^ -160048908;
            continue;
          case 16:
            int num7 = !flag2 ? -738262776 : (num7 = -1123811489);
            num1 = num7 ^ (int) num2 * -1018962125;
            continue;
          case 17:
            flag3 = this.BoardCells[index1, index2].Chessman.Color != currentColor;
            num1 = 36173487;
            continue;
          case 18:
            index2 = 0;
            num1 = 1046330622;
            continue;
          case 19:
            allAcceptableCells = cellList;
            num1 = (int) num2 * -299956077 ^ 2059370769;
            continue;
          case 20:
            acceptableCells = this.GetAcceptableCells(new Cell(this.BoardCells[index1, index2].Row, this.BoardCells[index1, index2].Column));
            num1 = 1622112996;
            continue;
          case 21:
            flag1 = index2 < 8;
            num1 = 677447628;
            continue;
          default:
            goto label_26;
        }
        int num8;
        num1 = num8 = num3 == 0 ? 1221106087 : (num8 = 923458706);
      }
label_26:
      return allAcceptableCells;
    }

    private void MakeCastlingIfPossible(BaseChessman chessman, Cell oldPosition, Cell newPosition)
    {
label_1:
      int num1 = 1372232853;
      while (true)
      {
        uint num2;
        int index1;
        bool flag1;
        bool flag2;
        bool flag3;
        Rook rook;
        bool flag4;
        int index2;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 481143667)) % 18U)
        {
          case 0:
            num1 = (int) num2 * 61758303 ^ 1358687060;
            continue;
          case 1:
            this.BoardCells[oldPosition.Row, index1].Chessman = (BaseChessman) rook;
            num1 = (int) num2 * 1450590150 ^ -312017414;
            continue;
          case 2:
            num3 = 7;
            goto label_21;
          case 3:
            flag2 = !flag1;
            num1 = (int) num2 * -294784698 ^ -566793047;
            continue;
          case 4:
            int num6 = flag2 ? -513350447 : (num6 = -1655361044);
            num1 = num6 ^ (int) num2 * 72633822;
            continue;
          case 5:
            num4 = !(chessman is King) ? 1 : 0;
            goto label_26;
          case 6:
            if (chessman.Type == ChessmenType.King)
            {
              num1 = (int) num2 * 1240271751 ^ -2004063466;
              continue;
            }
            num4 = 1;
            goto label_26;
          case 7:
            goto label_1;
          case 8:
            rook = new Rook(chessman.Color);
            this.BoardCells[oldPosition.Row, index2].Chessman = (BaseChessman) null;
            num1 = (int) num2 * 694969304 ^ -1807697669;
            continue;
          case 9:
            goto label_3;
          case 10:
            num1 = (int) num2 * -353145898 ^ 994160966;
            continue;
          case 11:
            num5 = 5;
            break;
          case 12:
            int num7 = !flag4 ? 294795447 : (num7 = 1355482849);
            num1 = num7 ^ (int) num2 * 913655304;
            continue;
          case 13:
            num1 = (int) num2 * -1506068776 ^ -1409210814;
            continue;
          case 14:
            flag1 = ChessBoard.ChessBoard.\u200F⁫‏⁮​⁫⁬‬‮‍‪‭‎‭‍​​‌‎‏⁮‪‮⁫‫⁪⁮‎‌‌⁮‪⁮‍⁮‫⁫‭‫‎‮(oldPosition.Column - newPosition.Column) == 2;
            num1 = 1027167612;
            continue;
          case 15:
            if (flag3)
            {
              num5 = 3;
              break;
            }
            num1 = (int) num2 * -392213302 ^ -867108536;
            continue;
          case 16:
            num1 = (int) num2 * -986092050 ^ -1033854906;
            continue;
          case 17:
            flag3 = oldPosition.Column > newPosition.Column;
            if (flag3)
            {
              num3 = 0;
              goto label_21;
            }
            else
            {
              num1 = 1269613725;
              continue;
            }
          default:
            goto label_29;
        }
        index1 = num5;
        num1 = 880321235;
        continue;
label_21:
        index2 = num3;
        num1 = 1370633700;
        continue;
label_26:
        flag4 = num4 != 0;
        num1 = 1371046857;
      }
label_3:
      return;
label_29:;
    }

    private static void ChangeTypeInCasePawnAndPossible(
      ref BaseChessman chessman,
      Cell newPosition,
      ChessmenType? newType)
    {
      if (chessman.Type != ChessmenType.Pawn)
        goto label_14;
label_1:
      int num1 = 1018865445;
label_2:
      bool flag1;
      while (true)
      {
        uint num2;
        ChessmenType? nullable;
        ChessmenType chessmenType;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1065056355)) % 15U)
        {
          case 0:
            goto label_1;
          case 1:
            chessman = ChessmanFactory.TryToCreateChessman(chessman.Color, newType.Value);
            num1 = 1573205019;
            continue;
          case 2:
            nullable = newType;
            num1 = 1370725101;
            continue;
          case 3:
            chessmenType = ChessmenType.Pawn;
            if (nullable.GetValueOrDefault() == chessmenType & nullable.HasValue)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 828903812 ^ -1484752625;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_4;
          case 6:
            num1 = (int) num2 * -1757884662 ^ 1308673161;
            continue;
          case 7:
            int num4 = flag2 ? -1221015186 : (num4 = -1434846431);
            num1 = num4 ^ (int) num2 * 1772288184;
            continue;
          case 8:
            goto label_16;
          case 9:
            goto label_13;
          case 10:
            num3 = nullable.GetValueOrDefault() == chessmenType & nullable.HasValue ? 1 : 0;
            break;
          case 11:
            nullable = newType;
            num1 = (int) num2 * -2138693502 ^ -1616077847;
            continue;
          case 12:
            flag2 = !newType.HasValue;
            num1 = 2061764395;
            continue;
          case 13:
            chessmenType = ChessmenType.King;
            num1 = (int) num2 * 132946018 ^ -1201753937;
            continue;
          case 14:
            int num5 = !flag1 ? -675095085 : (num5 = -1889910022);
            num1 = num5 ^ (int) num2 * -1284406798;
            continue;
          default:
            goto label_22;
        }
        int num6;
        num1 = num6 = num3 != 0 ? 677351752 : (num6 = 440497973);
      }
label_3:
      return;
label_22:
      return;
label_4:
      throw ChessBoard.ChessBoard.\u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(\u003CModule\u003E.\u206B⁫‌⁫‫⁮‮⁫‎‎⁫‬‎⁫⁪‍‪‎​‮‏‫⁫‮⁭⁪‮‎‮‍⁪‎‎​⁪⁮⁪​‎⁬‮<string>(966120072U));
label_13:
      int num7 = !((Pawn) chessman).IsLastRow(newPosition.Row) ? 1 : 0;
      goto label_15;
label_16:
      throw ChessBoard.ChessBoard.\u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(\u003CModule\u003E.\u200E‫‭⁪⁪‌‮‍‏⁮‎‮⁯‍‪‏⁪⁭​​⁫‍‫‏‌‌‭‫⁬‫‬‭⁮‮‎‪⁬‍⁫‪‮<string>(3188397750U));
label_14:
      num7 = 1;
label_15:
      flag1 = num7 != 0;
      num1 = 1428809477;
      goto label_2;
    }

    private void FailIfWrongNewPosition(Cell oldPosition, Cell newPosition)
    {
label_1:
      int num1 = -320884107;
      List<Cell> acceptableCells;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -640146138)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            acceptableCells = this.GetAcceptableCells(oldPosition);
            num1 = (int) num2 * 1766874467 ^ -1955645645;
            continue;
          case 2:
            // ISSUE: reference to a compiler-generated method
            int num3 = acceptableCells.Any<Cell>((Func<Cell, bool>) (cell => ChessBoard.ChessBoard.\u003C\u003Ec__DisplayClass19_0.\u200C⁭‫⁬⁬⁭‮⁮⁮‫‪‮‪⁯‪‮⁭‍⁭‏‌⁮‬‮⁬‍⁮‍‍‬‎‮⁯‭‪⁫‭⁮⁫‫‮((object) cell, (object) newPosition))) ? -796777323 : (num3 = -1279919296);
            num1 = num3 ^ (int) num2 * 1215506489;
            continue;
          case 3:
            num1 = (int) num2 * 590220274 ^ 762387737;
            continue;
          case 4:
            goto label_6;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_6:
      throw ChessBoard.ChessBoard.\u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(\u003CModule\u003E.\u206A‎⁪‌‎​⁪⁫⁪‎‎‌⁮‌⁭‌⁫​​‪‭⁫⁬‫⁮‍⁫‪⁪‎‫‬⁪‎‬‬⁯​‍‮‮<string>(3858855392U));
    }

    private static void FailIfArgumnetsAreNull(Cell oldPosition, Cell newPosition)
    {
label_1:
      int num1 = -1105127419;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1732572140)) % 6U)
        {
          case 0:
            num3 = newPosition == null ? 1 : 0;
            break;
          case 1:
            if (oldPosition != null)
            {
              num1 = (int) num2 * -879878798 ^ -1930106822;
              continue;
            }
            num3 = 1;
            break;
          case 2:
            int num4 = flag ? 725530714 : (num4 = 264642923);
            num1 = num4 ^ (int) num2 * -409555086;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_6;
          case 5:
            goto label_1;
          default:
            goto label_11;
        }
        flag = num3 != 0;
        num1 = -449030158;
      }
label_3:
      return;
label_11:
      return;
label_6:
      throw ChessBoard.ChessBoard.\u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(\u003CModule\u003E.\u200E‫‭⁪⁪‌‮‍‏⁮‎‮⁯‍‪‏⁪⁭​​⁫‍‫‏‌‌‭‫⁬‫‬‭⁮‮‎‪⁬‍⁫‪‮<string>(544088081U));
    }

    private void FailIfWrongColorAndStatus(Colorz color)
    {
label_1:
      int num1 = 1107380923;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 343354465)) % 11U)
        {
          case 0:
            int num4 = !flag2 ? 1051848798 : (num4 = 9512431);
            num1 = num4 ^ (int) num2 * -475347201;
            continue;
          case 1:
            goto label_15;
          case 2:
            num3 = this.IsMovementAvailableForColor(Colorz.White) ? 1 : 0;
            break;
          case 3:
            flag2 = this.IsGameOver();
            num1 = (int) num2 * -2011250347 ^ -280423060;
            continue;
          case 4:
            if (this.IsMovementAvailableForColor(Colorz.Black))
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 533249952 ^ -1407243834;
            continue;
          case 5:
            int num5;
            num1 = num5 = color != Colorz.White ? 730900838 : (num5 = 1440269512);
            continue;
          case 6:
            if (color != Colorz.Black)
            {
              num3 = 0;
              break;
            }
            num1 = 1273028411;
            continue;
          case 7:
            goto label_1;
          case 8:
            int num6 = !flag1 ? -1923801417 : (num6 = -1101876763);
            num1 = num6 ^ (int) num2 * -1620531496;
            continue;
          case 9:
            goto label_8;
          case 10:
            goto label_11;
          default:
            goto label_3;
        }
        flag1 = num3 != 0;
        num1 = 31300829;
      }
label_8:
      return;
label_3:
      return;
label_11:
      throw ChessBoard.ChessBoard.\u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(\u003CModule\u003E.\u206A⁪‍‌‪⁫‎⁮‫⁮⁭‎‍‌⁪⁪⁯⁫‪⁪‌‮‍⁬⁮‭​⁮⁭⁪⁮⁯​⁮⁭‬‫‎‫‏‮<string>(1940511646U));
label_15:
      throw ChessBoard.ChessBoard.\u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(\u003CModule\u003E.\u206A⁪‍‌‪⁫‎⁮‫⁮⁭‎‍‌⁪⁪⁯⁫‪⁪‌‮‍⁬⁮‭​⁮⁭⁪⁮⁯​⁮⁭‬‫‎‫‏‮<string>(1362429668U));
    }

    private bool IsMovementAvailableForColor(Colorz color)
    {
      bool flag1 = color == Colorz.White;
label_1:
      int num1 = 356778811;
      bool flag2;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 157176991)) % 9U)
        {
          case 0:
            if (this.Status != GameStatus.ShahForBlack)
            {
              num1 = 1457746708;
              continue;
            }
            num3 = 1;
            goto label_13;
          case 1:
            num1 = (int) num2 * 504871423 ^ 2060182985;
            continue;
          case 2:
            int num5 = !flag1 ? 1775443990 : (num5 = 1633667187);
            num1 = num5 ^ (int) num2 * -1803184910;
            continue;
          case 3:
            num3 = this.Status == GameStatus.BlackTurn ? 1 : 0;
            goto label_13;
          case 4:
            num1 = (int) num2 * 1662361761 ^ -309764994;
            continue;
          case 5:
            goto label_1;
          case 6:
            if (this.Status == GameStatus.ShahForWhite)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * -1758573601 ^ -1232429744;
            continue;
          case 8:
            num4 = this.Status == GameStatus.WhiteTurn ? 1 : 0;
            break;
          default:
            goto label_16;
        }
        flag2 = num4 != 0;
        num1 = 824019912;
        continue;
label_13:
        flag2 = num3 != 0;
        num1 = 2099847361;
      }
label_16:
      return flag2;
    }

    static ArgumentException \u200E‫​‪‮‌‭‬⁮⁭‏⁪‎‍‬⁫⁫‬​‍⁫⁪‭‪‍⁭⁯‍⁭‬‪‎⁬‍​⁪‫‪⁫⁮‮(
      [In] string obj0)
    {
      return new ArgumentException(obj0);
    }

    static int \u200F⁫‏⁮​⁫⁬‬‮‍‪‭‎‭‍​​‌‎‏⁮‪‮⁫‫⁪⁮‎‌‌⁮‪⁮‍⁮‫⁫‭‫‎‮([In] int obj0) => Math.Abs(obj0);
  }
}
