// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.Utils.DateDifference
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace TemporalToolkit.Utils
{
  public class DateDifference
  {
    private int[] monthDay;
    private DateTime fromDate;
    private DateTime toDate;

    public int Years { get; set; }

    public int Months { get; set; }

    public int Days { get; set; }

    public int TotalMonths
    {
      get
      {
label_1:
        int num1 = 1709596182;
        int totalMonths;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1605599631)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 1434709282 ^ 2076346076;
              continue;
            case 1:
              totalMonths = this.Years * 12 + this.Months;
              num1 = (int) num2 * -837884309 ^ -660155500;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return totalMonths;
      }
    }

    public DateDifference(DateTime d1, DateTime d2)
    {
      int[] numArray = new int[12];
      // ISSUE: field reference
      DateDifference.\u202D​‌⁮⁮⁯‍‭⁬‮‮‪⁯‮‌⁫⁬‫⁮‪‭‫‬‪‫⁯‪‪⁭‪​‌‭‬⁮‬‎‍‌‮‮((Array) numArray, __fieldref (\u003CPrivateImplementationDetails\u003E.D2562FC95AD9314C85BB8498C779AB53ACEA1F13840F5505500ED76DA160E1A3));
      this.monthDay = numArray;
      // ISSUE: explicit constructor call
      base.\u002Ector();
label_1:
      int num1 = 1942368824;
      int num2;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 209240070)) % 42U)
        {
          case 0:
            num1 = (int) num3 * -2114877432 ^ 1664073705;
            continue;
          case 1:
            flag3 = num2 == -1;
            num1 = 2031717662;
            continue;
          case 2:
            num2 = 28;
            num1 = 1937519157;
            continue;
          case 3:
            num1 = 942370961;
            continue;
          case 4:
            this.fromDate = d2;
            this.toDate = d1;
            num1 = (int) num3 * 209132780 ^ -967953675;
            continue;
          case 5:
            num1 = (int) num3 * 1004567742 ^ 1803158514;
            continue;
          case 6:
            int num4 = flag3 ? -2019255971 : (num4 = -2112564241);
            num1 = num4 ^ (int) num3 * -1193471278;
            continue;
          case 7:
            this.fromDate = d1;
            num1 = 609974480;
            continue;
          case 8:
            num1 = (int) num3 * 1924427154 ^ 1298707844;
            continue;
          case 9:
            this.Days = this.toDate.Day - this.fromDate.Day;
            num1 = (int) num3 * -2139107075 ^ -1515475586;
            continue;
          case 10:
            int num5;
            num1 = num5 = this.fromDate.Month + num2 <= this.toDate.Month ? 930414656 : (num5 = 595759761);
            continue;
          case 11:
            this.Months = this.toDate.Month + 12 - (this.fromDate.Month + num2);
            num1 = (int) num3 * -410640521 ^ 386476556;
            continue;
          case 12:
            num1 = (int) num3 * -654668913 ^ -544847222;
            continue;
          case 13:
            num1 = (int) num3 * 898496163 ^ -785829896;
            continue;
          case 14:
            num2 = 1;
            num1 = (int) num3 * -1979253936 ^ 1837781022;
            continue;
          case 15:
            num2 = 0;
            num1 = 1893295517;
            continue;
          case 16:
            this.Days = this.toDate.Day + num2 - this.fromDate.Day;
            num1 = (int) num3 * -118874242 ^ -1176115008;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * 331527327 ^ -1883450699;
            continue;
          case 18:
            num1 = (int) num3 * -1704419166 ^ -855661233;
            continue;
          case 19:
            num1 = (int) num3 * -662492854 ^ -633551041;
            continue;
          case 20:
            num1 = (int) num3 * 1223767686 ^ -432975664;
            continue;
          case 21:
            int num6;
            num1 = num6 = num2 == 0 ? 1525245433 : (num6 = 2135534682);
            continue;
          case 22:
            num1 = (int) num3 * 1184515134 ^ 601357154;
            continue;
          case 23:
            num1 = 1826635359;
            continue;
          case 24:
            flag2 = d1 > d2;
            num1 = (int) num3 * 1195013563 ^ 409955029;
            continue;
          case 25:
            goto label_3;
          case 26:
            num1 = (int) num3 * 955960358 ^ -1168062870;
            continue;
          case 27:
            int num7 = !flag2 ? -6517000 : (num7 = -570156025);
            num1 = num7 ^ (int) num3 * -2118603757;
            continue;
          case 28:
            this.Years = this.toDate.Year - (this.fromDate.Year + num2);
            num1 = 1034800493;
            continue;
          case 29:
            int num8 = this.fromDate.Day > this.toDate.Day ? -501941174 : (num8 = -1736107991);
            num1 = num8 ^ (int) num3 * -2096838772;
            continue;
          case 30:
            num1 = (int) num3 * -1442214940 ^ 1617874292;
            continue;
          case 31:
            int num9 = !flag1 ? 1040486317 : (num9 = 591121096);
            num1 = num9 ^ (int) num3 * -1827807597;
            continue;
          case 32:
            num1 = (int) num3 * 796612922 ^ -1431179827;
            continue;
          case 33:
            num1 = (int) num3 * 1113112864 ^ 419218486;
            continue;
          case 34:
            this.Months = this.toDate.Month - (this.fromDate.Month + num2);
            num1 = 237236319;
            continue;
          case 35:
            num2 = 29;
            num1 = (int) num3 * 403896507 ^ -1350771510;
            continue;
          case 36:
            goto label_1;
          case 37:
            flag1 = DateTime.IsLeapYear(this.fromDate.Year);
            num1 = (int) num3 * 1000449801 ^ 457046176;
            continue;
          case 38:
            this.toDate = d2;
            num1 = (int) num3 * 2002633673 ^ 795076406;
            continue;
          case 39:
            num2 = 1;
            num1 = (int) num3 * -1643346624 ^ 964123112;
            continue;
          case 40:
            num2 = this.monthDay[this.fromDate.Month - 1];
            num1 = (int) num3 * 2016956735 ^ 15688521;
            continue;
          case 41:
            num1 = (int) num3 * 2140869439 ^ -446731727;
            continue;
          default:
            goto label_44;
        }
      }
label_3:
      return;
label_44:;
    }

    public override string ToString() => DateDifference.\u206A‭‮‫‮‭‭‎​‌‬‍‏⁯‪⁬‌‭​⁮‌‍⁪⁫‮‏‎‪‭⁮‪‫‌⁯⁭‮‏​⁫‪‮(new string[6]
    {
      this.Years.ToString(),
      \u003CModule\u003E.\u202B‌‍⁯‮‭‫‎‌‏⁫‭‮⁮‏‎‫⁯⁯⁫‪‬‌‏‌⁭⁮‎‎⁪⁫‫⁯‮‍⁮⁬​‮⁫‮<string>(72572709U),
      this.Months.ToString(),
      \u003CModule\u003E.\u206C‮⁬⁭​⁭‬⁫‌⁯‬⁪‫⁯​‎⁯⁬⁯‭‮⁪⁪‮‮⁮⁪‏⁮‪‎⁬‫‏⁭⁪‮⁫‮⁮‮<string>(782741070U),
      this.Days.ToString(),
      \u003CModule\u003E.\u206C‮⁬⁭​⁭‬⁫‌⁯‬⁪‫⁯​‎⁯⁬⁯‭‮⁪⁪‮‮⁮⁪‏⁮‪‎⁬‫‏⁭⁪‮⁫‮⁮‮<string>(3632668042U)
    });

    static void \u202D​‌⁮⁮⁯‍‭⁬‮‮‪⁯‮‌⁫⁬‫⁮‪‭‫‬‪‫⁯‪‪⁭‪​‌‭‬⁮‬‎‍‌‮‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);

    static string \u206A‭‮‫‮‭‭‎​‌‬‍‏⁯‪⁬‌‭​⁮‌‍⁪⁫‮‏‎‪‭⁮‪‫‌⁯⁭‮‏​⁫‪‮([In] string[] obj0) => string.Concat(obj0);
  }
}
