// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.SecurityExceptionEventArgs
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.Shared;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security;
using System.Windows.Forms;

namespace SmartAssembly.SmartExceptionsCore
{
  public class SecurityExceptionEventArgs : EventArgs
  {
    private AppPathFinder.Ⴃ Ⴈ;

    public SecurityException SecurityException
    {
      get
      {
        try
        {
          return this.Ⴈ.Ⴈ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    public string SecurityMessage
    {
      get
      {
        try
        {
          return this.Ⴈ.Ⴀ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    public bool CanContinue
    {
      get
      {
        try
        {
          return this.Ⴈ.Ⴃ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
    }

    public bool TryToContinue
    {
      get
      {
        try
        {
          return this.Ⴈ.Ⴄ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
      set
      {
        bool flag;
        try
        {
          flag = value;
          this.Ⴈ.Ⴄ = flag;
        }
        catch (Exception ex)
        {
          __Boxed<bool> o1 = (ValueType) flag;
          __Boxed<bool> o3 = (ValueType) value;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }
    }

    public bool ReportException
    {
      get
      {
        try
        {
          return this.Ⴈ.Ⴐ;
        }
        catch (Exception ex)
        {
          int num;
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }
      set
      {
        bool flag;
        try
        {
          flag = value;
          this.Ⴈ.Ⴐ = flag;
        }
        catch (Exception ex)
        {
          __Boxed<bool> o1 = (ValueType) flag;
          __Boxed<bool> o3 = (ValueType) value;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }
    }

    public SecurityExceptionEventArgs(SecurityException securityException)
    {
      string empty = string.Empty;
      this.Ⴈ.Ⴀ = empty;
      bool flag = true;
      this.Ⴈ.Ⴃ = flag;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      SecurityException securityException1;
      try
      {
        securityException1 = securityException;
        this.Ⴈ.Ⴈ = securityException1;
      }
      catch (Exception ex)
      {
        string o1 = empty;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o2 = (ValueType) flag;
        SecurityException o3 = securityException1;
        SecurityException o5 = securityException;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
        throw;
      }
    }

    public SecurityExceptionEventArgs(SecurityException securityException, bool canContinue)
      : this(securityException)
    {
      bool flag;
      try
      {
        flag = canContinue;
        this.Ⴈ.Ⴃ = flag;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> o1 = (ValueType) flag;
        SecurityException o3 = securityException;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) canContinue;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) this, (object) o3, (object) o4);
        throw;
      }
    }

    public SecurityExceptionEventArgs(string securityMessage, bool canContinue)
      : this(new SecurityException(securityMessage), canContinue)
    {
      string str;
      try
      {
        str = securityMessage;
        this.Ⴈ.Ⴀ = str;
      }
      catch (Exception ex)
      {
        string o1 = str;
        string o3 = securityMessage;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) canContinue;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) this, (object) o3, (object) o4);
        throw;
      }
    }

    static SecurityExceptionEventArgs()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static bool Ⴀ([In] DateTime obj0, [In] DateTime obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 29:
            num2 = 7;
            break;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 4:
              num1 = 2;
              continue;
            case 1:
            case 2:
              goto label_3;
            case 3:
              num1 = 2;
              continue;
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SecurityExceptionEventArgs.Ⴀ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return obj0 < obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<DateTime> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<DateTime> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static object Ⴗ([In] System.Type obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 46:
            num2 = 2;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 2:
            case 4:
              goto label_8;
            case 3:
              num1 = 5;
              continue;
            case 5:
              goto label_3;
            case 6:
              num1 = 5;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SecurityExceptionEventArgs.Ⴗ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return Activator.CreateInstance(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        System.Type o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static int Ⴓ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj5 ^ obj4)
        {
          case 85:
            num2 = 2;
            break;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 7;
              continue;
            case 1:
            case 3:
              num1 = 7;
              continue;
            case 2:
            case 4:
              goto label_8;
            case 6:
            case 7:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SecurityExceptionEventArgs.Ⴓ);
              num1 = 7;
              continue;
          }
        }
label_8:
        return obj0.Read(obj1, obj2, obj3);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Stream o2 = obj0;
        byte[] o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) obj5;
        StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7);
        throw;
      }
    }

    internal static short Ⴜ([In] byte[] obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 118:
            num2 = 3;
            break;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              num1 = 2;
              continue;
            case 1:
            case 5:
              num1 = 2;
              continue;
            case 2:
            case 4:
            case 7:
              goto label_3;
            case 3:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SecurityExceptionEventArgs.Ⴜ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return BitConverter.ToInt16(obj0, obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        byte[] o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static void ႠႥ(
      [In] Control obj0,
      [In] int obj1,
      [In] int obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5,
      [In] int obj6)
    {
      int num1;
      try
      {
        num1 = 3;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 4:
              goto label_7;
            case 1:
              num1 = 3;
              continue;
            case 5:
              goto label_8;
            default:
              int num2;
              switch (obj6 ^ obj5)
              {
                case 17:
                  num2 = 0;
                  break;
                default:
                  num2 = 1;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.SetBounds(obj1, obj2, obj3, obj4);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Control o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) obj4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o8 = (ValueType) obj5;
        // ISSUE: variable of a boxed type
        __Boxed<int> o9 = (ValueType) obj6;
        StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴈ
    {
      internal short[] Ⴅ;
      internal byte[] Ⴗ;
      internal int Ⴃ;
      internal int Ⴄ;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct ႠႠ
    {
      internal ReportSender1 Ⴓ;
    }
  }
}
