// Decompiled with JetBrains decompiler
// Type: VMS.OSService.Concrete.Inventory.InventoryReplicator
// Assembly: VMS.OSP.Service, Version=1.4.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 7B29B897-26BF-407B-B0D0-14253383A174
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.Win32.Patched.mf-06a1c79ea1bf078d9f5816243d6887697530720ed581c2975d99154e2a24648f.exe

using System;
using System.Net;
using System.Threading;
using VMS.OSP.Inventory;
using VMS.OSP.Inventory.Common;
using VMS.OSP.Services;
using VMS.OSP.Services.Configuration;
using VMS.OSP.Services.Logging;
using VMS.OSService.Abstract;

namespace VMS.OSService.Concrete.Inventory
{
  public class InventoryReplicator : AbstractService
  {
    private const int cSlowReplicationInterval = 7200000;
    private const int cPendingReplicationInterval = 3000;
    private const int cStartReplicationDelay = 5000;
    private const string cSysLogCategory = "InventoryComponent";
    private System.Threading.Timer _timer;
    private InventoryReplicator.TState _currState;
    private DateTime _lastReplicationRequested = DateTime.MaxValue;

    public InventoryReplicator() => this._timer = new System.Threading.Timer(new TimerCallback(this.OnTimer), (object) null, -1, -1);

    private InventoryReplicator.TState CurrState
    {
      get => this._currState;
      set => this._currState = value;
    }

    protected void OnTimer(object o)
    {
      lock (this)
      {
        switch (this.CurrState)
        {
          case InventoryReplicator.TState.cReplicationPeriodic:
            this.ReplicateClientInventory();
            this.RegisterWorkstation();
            break;
          case InventoryReplicator.TState.cReplicationAfterChanges:
            if ((DateTime.Now - this._lastReplicationRequested).TotalMilliseconds < 5000.0)
              break;
            this._timer.Change(7200000, 7200000);
            this.CurrState = InventoryReplicator.TState.cReplicationPeriodic;
            this.ReplicateClientInventory();
            break;
        }
      }
    }

    internal override void OnCustomEvent(int command)
    {
      switch (command)
      {
        case 160:
          this.ReplicateRequested();
          break;
        case 161:
          this.RegisterWorkstation();
          break;
      }
    }

    internal override void OnStart(string[] args)
    {
      this.WriteSysLog((OSP_SEVERITY) 6, "InventoryComponent", "Inventory Component started");
      this._timer.Change(100, 7200000);
    }

    internal override void OnStop()
    {
      this.WriteSysLog((OSP_SEVERITY) 6, "InventoryComponent", "Inventory Component stopped");
      this._timer.Change(-1, -1);
    }

    private string InventoryWebServiceUrl => string.Format("http://{0}/ospservices/inventory.asmx", (object) Env.GetServerNameAndPort());

    private void ReplicateClientInventory()
    {
      WebRequest.DefaultWebProxy = (IWebProxy) null;
      VMS.OSP.Inventory.Inventory inventory = new VMS.OSP.Inventory.Inventory();
      inventory.Url = this.InventoryWebServiceUrl;
      string inventoryFileLocation = InventoryConstants.ClientInventoryFileLocation;
      string fileLocationVer3 = InventoryConstants.ClientInventoryFileLocationVer3;
      try
      {
        VMSInventoryDoc vmsInventoryDoc = new VMSInventoryDoc();
        if (System.IO.File.Exists(inventoryFileLocation))
        {
          vmsInventoryDoc.Open(inventoryFileLocation, true);
          inventory.MergeLocalInventory(vmsInventoryDoc.InternalDataSet);
          this.WriteSysLog((OSP_SEVERITY) 6, "InventoryComponent", "Successfully replicated client inventory version 2 to the server.");
        }
        vmsInventoryDoc.Open(fileLocationVer3, true);
        inventory.MergeLocalInventory(vmsInventoryDoc.InternalDataSet);
        this.WriteSysLog((OSP_SEVERITY) 6, "InventoryComponent", "Successfully replicated client inventory version 3 to the server.");
      }
      catch (Exception ex)
      {
        this.WriteSysLog((OSP_SEVERITY) 3, "InventoryComponent", "" + "Error occurd while replicating client inventory to the server.\r\n" + ex.Message + "\r\n" + "\r\n------- Details ----------\r\n" + "Type\t\t: " + ex.GetType().ToString() + "Source\t\t: " + ex.Source + "\r\n" + "XmlFile\t\t: " + inventoryFileLocation + "\r\n" + "WebService\t: " + this.InventoryWebServiceUrl);
      }
    }

    public void ReplicateRequested()
    {
      this.CurrState = InventoryReplicator.TState.cReplicationAfterChanges;
      this._lastReplicationRequested = DateTime.Now;
      this._timer.Change(3000, 3000);
    }

    private void RegisterWorkstation()
    {
      try
      {
        string siteFileLocation = InventoryConstants.ClientRegisterSiteFileLocation;
        if (!System.IO.File.Exists(siteFileLocation))
          return;
        VMSSiteAdminDoc vmsSiteAdminDoc = VMSSiteAdminDoc.Load(siteFileLocation);
        if (!new OSPClientLibraryFactory().CreateOspClientServices("DEFAULT").SiteAdmin.RegisterWorkstationToSite(vmsSiteAdminDoc.SiteId))
          return;
        System.IO.File.Delete(siteFileLocation);
      }
      catch (Exception ex)
      {
        this.WriteSysLog((OSP_SEVERITY) 3, "InventoryComponent", "" + "Error occurd while registering workstation in site on the server.\r\n" + ex.Message + "\r\n" + "\r\n------- Details ----------\r\n" + "Type\t\t: " + ex.GetType().ToString() + "Source\t\t: " + ex.Source + "\r\n");
      }
    }

    private enum TState
    {
      cReplicationPeriodic,
      cReplicationAfterChanges,
    }
  }
}
