// Decompiled with JetBrains decompiler
// Type: Aura.Protection.StringOnline.OnlinePhase
// Assembly: Kudeta Crypter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 16F9F4AC-EE0C-4DE1-A1E6-B297F2D4338B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-VirTool.MSIL.Crypto.gen-a09f476c823deb3aadbd99b5e979f18689723f0ab3b5690e0b9a42cf2007f2a8.exe

using Aura.Services;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Aura.Protection.StringOnline
{
  public static class OnlinePhase
  {
    public static void Execute(ModuleDef module)
    {
      OnlinePhase.InjectClass1(module);
      foreach (TypeDef type in module.GetTypes())
      {
        if (!type.IsGlobalModuleType)
        {
          foreach (MethodDef method in (IEnumerable<MethodDef>) type.Methods)
          {
            if (method.HasBody && method.Body.HasInstructions && !method.Name.Contains("Decoder"))
            {
              for (int index = 0; index < ((ICollection<Instruction>) method.Body.Instructions).Count; ++index)
              {
                if (method.Body.Instructions[index].OpCode == OpCodes.Ldstr)
                {
                  string hex = OnlinePhase.ConvertStringToHex(method.Body.Instructions[index].Operand.ToString());
                  method.Body.Instructions[index].Operand = (object) hex;
                  method.Body.Instructions.Insert(index + 1, Instruction.Create(OpCodes.Call, (IMethod) MainWindow.Init));
                }
              }
              method.Body.SimplifyBranches();
            }
          }
        }
      }
    }

    public static string ConvertStringToHex(string asciiString)
    {
      string empty = string.Empty;
      foreach (int num in asciiString)
        empty += string.Format("{0:x2}", (object) Convert.ToUInt32(num.ToString()));
      return empty;
    }

    public static void InjectClass1(ModuleDef module)
    {
      MainWindow.Init = (MethodDef) InjectHelper.Inject(ModuleDefMD.Load(typeof (OnlineString).Module).ResolveTypeDef(MDToken.ToRID(typeof (OnlineString).MetadataToken)), module.GlobalType, module).Single<IDnlibDef>((Func<IDnlibDef, bool>) (method => UTF8String.op_Equality(((IFullName) method).Name, "Decoder")));
      foreach (MethodDef method in (IEnumerable<MethodDef>) module.GlobalType.Methods)
      {
        if (!UTF8String.op_Inequality(method.Name, ".ctor"))
        {
          module.GlobalType.Remove(method);
          break;
        }
      }
    }
  }
}
