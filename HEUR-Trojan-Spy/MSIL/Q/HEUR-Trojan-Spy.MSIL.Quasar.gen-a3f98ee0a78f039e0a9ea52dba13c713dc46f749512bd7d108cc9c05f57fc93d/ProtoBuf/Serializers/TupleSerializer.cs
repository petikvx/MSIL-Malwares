// Decompiled with JetBrains decompiler
// Type: ProtoBuf.Serializers.TupleSerializer
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf.Meta;
using System;
using System.Reflection;

namespace ProtoBuf.Serializers
{
  internal sealed class TupleSerializer : IProtoTypeSerializer, IProtoSerializer
  {
    private readonly MemberInfo[] members;
    private readonly ConstructorInfo ctor;
    private IProtoSerializer[] tails;

    public TupleSerializer(RuntimeTypeModel model, ConstructorInfo ctor, MemberInfo[] members)
    {
      if ((object) ctor == null)
        throw new ArgumentNullException(nameof (ctor));
      if (members == null)
        throw new ArgumentNullException(nameof (members));
      this.ctor = ctor;
      this.members = members;
      this.tails = new IProtoSerializer[members.Length];
      ParameterInfo[] parameters = ctor.GetParameters();
      for (int index = 0; index < members.Length; ++index)
      {
        Type parameterType = parameters[index].ParameterType;
        Type itemType = (Type) null;
        Type defaultType = (Type) null;
        MetaType.ResolveListTypes((TypeModel) model, parameterType, ref itemType, ref defaultType);
        Type type = (object) itemType == null ? parameterType : itemType;
        bool asReference = false;
        if (model.FindOrAddAuto(type, false, true, false) >= 0)
          asReference = model[type].AsReferenceDefault;
        WireType defaultWireType;
        IProtoSerializer tail = (IProtoSerializer) new TagDecorator(index + 1, defaultWireType, false, ValueMember.TryGetCoreSerializer(model, DataFormat.Default, type, out defaultWireType, asReference, false, false, true) ?? throw new InvalidOperationException("No serializer defined for type: " + type.FullName));
        IProtoSerializer protoSerializer = (object) itemType != null ? (!parameterType.IsArray ? (IProtoSerializer) ListDecorator.Create((TypeModel) model, parameterType, defaultType, tail, index + 1, false, defaultWireType, true, false, false) : (IProtoSerializer) new ArrayDecorator((TypeModel) model, tail, index + 1, false, defaultWireType, parameterType, false, false)) : tail;
        this.tails[index] = protoSerializer;
      }
    }

    public bool HasCallbacks(TypeModel.CallbackType callbackType) => false;

    public Type ExpectedType => this.ctor.DeclaringType;

    void IProtoTypeSerializer.Callback(
      object value,
      TypeModel.CallbackType callbackType,
      SerializationContext context)
    {
    }

    object IProtoTypeSerializer.CreateInstance(ProtoReader source) => throw new NotSupportedException();

    private object GetValue(object obj, int index)
    {
      if (this.members[index] is PropertyInfo member1)
      {
        if (obj != null)
          return member1.GetValue(obj, (object[]) null);
        return !Helpers.IsValueType(member1.PropertyType) ? (object) null : Activator.CreateInstance(member1.PropertyType);
      }
      if (!(this.members[index] is FieldInfo member2))
        throw new InvalidOperationException();
      if (obj != null)
        return member2.GetValue(obj);
      return !Helpers.IsValueType(member2.FieldType) ? (object) null : Activator.CreateInstance(member2.FieldType);
    }

    public object Read(object value, ProtoReader source)
    {
      object[] parameters = new object[this.members.Length];
      bool flag = false;
      if (value == null)
        flag = true;
      for (int index = 0; index < parameters.Length; ++index)
        parameters[index] = this.GetValue(value, index);
      int num;
      while ((num = source.ReadFieldHeader()) > 0)
      {
        flag = true;
        if (num <= this.tails.Length)
        {
          IProtoSerializer tail = this.tails[num - 1];
          parameters[num - 1] = this.tails[num - 1].Read(tail.RequiresOldValue ? parameters[num - 1] : (object) null, source);
        }
        else
          source.SkipField();
      }
      return !flag ? value : this.ctor.Invoke(parameters);
    }

    public void Write(object value, ProtoWriter dest)
    {
      for (int index = 0; index < this.tails.Length; ++index)
      {
        object obj = this.GetValue(value, index);
        if (obj != null)
          this.tails[index].Write(obj, dest);
      }
    }

    public bool RequiresOldValue => true;

    public bool ReturnsValue => false;

    private Type GetMemberType(int index) => Helpers.GetMemberType(this.members[index]) ?? throw new InvalidOperationException();

    bool IProtoTypeSerializer.CanCreateInstance() => false;
  }
}
