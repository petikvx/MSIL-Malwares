// Decompiled with JetBrains decompiler
// Type: ProjNet.Templates.Token
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Collections;
using IRefl.Lists;
using IRefl.Producers;
using IRefl.Wrappers;
using ProjNet.Maps;
using ProjNet.Structs;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.Templates
{
  public class Token : Queue, Initializer, RegistryStatusMap, CodeObjectProducer
  {
    private Page m_Event;
    private FieldTemplate m_Proxy;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Token(
      Page instance,
      FieldTemplate caller,
      TestPageOption tag,
      string vis2,
      string ord3,
      long key4_amount,
      string t5,
      string task6,
      string pol7)
    {
      int num = 3;
      if (true)
        goto label_4;
label_1:
      PageAdvisorStructBuilder.PrepareCreator();
      num = 4;
label_4:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            this.m_Proxy = caller;
            num = 5;
            continue;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector(tag, vis2, ord3, key4_amount, t5, task6, pol7);
            this.m_Event = instance;
            goto case 0;
          case 3:
            goto label_1;
          case 5:
            goto label_7;
          default:
            if (true)
            {
              num = 0;
              continue;
            }
            goto label_6;
        }
      }
label_7:
      return;
label_6:;
    }

    public static Token WGS84
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new Token((Page) ExporterTemplate.WGS84, (FieldTemplate) null, (TestPageOption) 1002, "World Geodetic System 1984", "EPSG", 6326L, string.Empty, "EPSG's WGS 84 datum has been the then current realisation. No distinction is made between the original WGS 84 frame, WGS 84 (G730), WGS 84 (G873) and WGS 84 (G1150). Since 1997, WGS 84 has been maintained within 10cm of the then current ITRF.", string.Empty);
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Token StartRegistry()
    {
      int num1 = 4;
      Token token1;
      while (true)
      {
        int num2 = num1;
        Token token2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_2;
            case 1:
            case 3:
              token2.ResetItem(new FieldTemplate(0.0, 0.0, 4.5, 0.0, 0.0, 0.554, 0.219));
              goto case 2;
            case 2:
              token1 = token2;
              int num3 = 5;
              num2 = Token.FindList() ? num3 : num3;
              continue;
            case 5:
              goto label_7;
            default:
              goto label_6;
          }
        }
label_2:
        token2 = new Token((Page) ExporterTemplate.TestProcess(), (FieldTemplate) null, (TestPageOption) 1002, "World Geodetic System 1972", "EPSG", 6322L, string.Empty, "Used by GPS before 1987. For Transit satellite positioning see also WGS 72BE. Datum code 6323 reserved for southern hemisphere ProjCS's.", string.Empty);
        num1 = 3;
        continue;
label_6:
        num1 = 2;
      }
label_7:
      return token1;
    }

    public static Token ETRF89
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        int num1 = 3;
        Token token1;
        while (true)
        {
          int num2 = num1;
          Token token2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                token2 = new Token((Page) ExporterTemplate.InterruptProcess(), (FieldTemplate) null, (TestPageOption) 1002, "European Terrestrial Reference System 1989", "EPSG", 6258L, nameof (ETRF89), "The distinction in usage between ETRF89 and ETRS89 is confused: although in principle conceptually different in practice both are used for the realisation.", string.Empty);
                if (Token.StopList())
                {
                  num2 = 2;
                  continue;
                }
                goto case 4;
              case 1:
              case 2:
                token2.ResetItem(new FieldTemplate());
                goto case 4;
              case 4:
                token1 = token2;
                num2 = 5;
                continue;
              case 5:
                goto label_8;
              default:
                goto label_6;
            }
          }
label_6:
          num1 = 4;
        }
label_8:
        return token1;
      }
    }

    public static Token ED50
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new Token((Page) ExporterTemplate.AssetRegistry(), new FieldTemplate(-87.0, -98.0, -121.0, 0.0, 0.0, 0.0, 0.0), (TestPageOption) 1002, "European Datum 1950", "EPSG", 6230L, nameof (ED50), string.Empty, string.Empty);
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Page NewItem() => this.m_Event;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DestroyItem(Page task) => this.m_Event = task;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public FieldTemplate ResolveItem() => this.m_Proxy;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ResetItem(FieldTemplate var1) => this.m_Proxy = var1;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus()
    {
      int num1 = 6;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_10;
            case 1:
            case 3:
              stringBuilder.AppendFormat("DATUM[\"{0}\", {1}", (object) this.Name, (object) this.m_Event.RevertStatus());
              if (this.m_Proxy == null)
                goto case 5;
              else
                goto label_2;
            case 2:
            case 4:
              stringBuilder.AppendFormat(", {0}", (object) this.m_Proxy.RateRegistry());
              goto case 5;
            case 5:
              if (!string.IsNullOrEmpty(this.CountItem()) && this.SelectItem() > 0L)
              {
                stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.CountItem(), (object) this.SelectItem());
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_10;
            case 6:
              stringBuilder = new StringBuilder();
              num2 = 3;
              continue;
            case 7:
              goto label_11;
            default:
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 6;
          }
        }
label_2:
        num1 = 4;
        continue;
label_10:
        stringBuilder.Append("]");
        str = stringBuilder.ToString();
        num1 = 7;
      }
label_11:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_HorizontalDatum DatumType=\"{0}\">{1}{2}{3}</CS_HorizontalDatum>", (object) (int) this.CompareItem(), (object) this.ListRegistry(), (object) this.NewItem().AssetItem(), this.ResolveItem() == null ? (object) string.Empty : (object) this.ResolveItem().SortRegistry());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object init)
    {
      int num1 = 5;
      Token token;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (this.NewItem() == null)
              {
                num2 = 8;
                continue;
              }
              goto label_19;
            case 1:
            case 3:
              if (!flag2)
              {
                token = init as Token;
                if (token.ResolveItem() != null || this.ResolveItem() == null)
                {
                  if (token.ResolveItem() == null || token.ResolveItem().Equals(this.ResolveItem()))
                  {
                    if (token == null)
                      goto case 4;
                    else
                      goto label_10;
                  }
                  else
                    goto label_8;
                }
                else
                  goto label_6;
              }
              else
                goto label_4;
            case 2:
              goto label_21;
            case 4:
            case 7:
              if (token == null)
              {
                num2 = 0;
                continue;
              }
              goto label_19;
            case 5:
              flag2 = !(init is Token);
              int num3 = 3;
              num2 = Token.FindList() ? num3 : num3;
              continue;
            case 6:
              if (this.NewItem() == null || !token.NewItem().InvokeItem((object) this.NewItem()))
                goto case 4;
              else
                goto label_18;
            case 8:
              goto label_18;
            default:
              num2 = 7;
              continue;
          }
        }
label_6:
        flag1 = false;
        num1 = 2;
        continue;
label_10:
        num1 = 6;
      }
label_4:
      flag1 = false;
      goto label_21;
label_8:
      flag1 = false;
      goto label_21;
label_18:
      int num4 = this.CompareItem() == token.CompareItem() ? 1 : 0;
      goto label_20;
label_19:
      num4 = 0;
label_20:
      flag1 = num4 != 0;
label_21:
      return flag1;
    }

    internal static bool StopList() => true;

    internal static bool FindList() => false;
  }
}
