// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Definitions.Descriptor
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Collections;
using IEnumUnkn.Mappers;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Markup;

namespace IEnumUnkn.Definitions
{
  public class Descriptor : Window, IComponentConnector
  {
    private bool _Adapter;
    private bool repository;
    internal StackPanel panel_MainUI;
    internal DockPanel panel_Settings;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    internal MediaElement BackgroundVideo;
    private bool helper;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Adapter;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._Adapter = value;
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.repository;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.repository = value;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Descriptor()
    {
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            ListenerManager.InitStub();
            num = 3;
            continue;
          case 1:
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.InitializeComponent();
            this.StateChanged += new EventHandler(((StubServiceMapper) Application.Current).CalcRequest);
            this.Music_enabled = true;
            num = 4;
            continue;
          case 4:
            this.Hints_enabled = true;
            goto case 5;
          case 5:
            this.DataContext = (object) this;
            num = 6;
            continue;
          case 6:
            goto label_7;
          default:
            num = 5;
            continue;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InsertMapper(object config, RoutedEventArgs pred)
    {
      int num = 4;
      if (true)
        goto label_4;
label_1:
      Window window;
      window.Show();
      if (true)
      {
        num = 5;
        goto label_4;
      }
label_2:
      window = (Window) new MessageBridgeRule(this._Adapter, this.repository, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
      if (Descriptor.DestroyObject())
      {
        num = 0;
        goto label_4;
      }
label_3:
      Application.Current.MainWindow = window;
      this.Close();
      goto label_1;
label_4:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
          case 3:
            goto label_1;
          case 4:
            goto label_2;
          case 5:
            goto label_7;
          default:
            num = 3;
            continue;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Quit(object sender, RoutedEventArgs e) => this.Close();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Leaderboard(object sender, RoutedEventArgs e)
    {
      int num1 = 2;
      if (!Descriptor.UpdateObject())
        goto label_5;
label_1:
      StateCallbackCollection callbackCollection = new StateCallbackCollection(this.Music_enabled, this.Hints_enabled, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
      int num2 = 4;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 4:
            goto label_3;
          case 3:
            goto label_2;
          case 5:
            goto label_8;
          default:
            if (Descriptor.DestroyObject())
            {
              num1 = 3;
              continue;
            }
            goto label_7;
        }
      }
label_2:
      callbackCollection.Show();
      num2 = 5;
      goto label_4;
label_3:
      Application.Current.MainWindow = (Window) callbackCollection;
      this.Close();
      goto label_2;
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetupMapper(object item, RoutedEventArgs result)
    {
      int num1 = 5;
      if (true)
        goto label_12;
label_7:
      this.BackgroundVideo.Position = TimeSpan.Zero;
      num1 = 7;
label_12:
      Uri uri1;
      bool flag;
      Uri uri2;
      Uri uri3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            uri1 = new Uri("pack://siteoforigin:,,,/Images/RetroCommercialSega.mp4");
            uri3 = new Uri("pack://siteoforigin:,,,/Images/RetroCommercial90s.mp4");
            num2 = 3;
            break;
          case 2:
          case 3:
            if (!(this.BackgroundVideo.Source == uri2))
            {
              flag = this.BackgroundVideo.Source == uri1;
              num2 = 4;
              break;
            }
            goto label_10;
          case 4:
            goto label_3;
          case 5:
            uri2 = new Uri("pack://siteoforigin:,,,/Images/RetroCommercial.mp4");
            num2 = 0;
            break;
          case 6:
            goto label_7;
          case 7:
            goto label_14;
          default:
            int num3 = 6;
            num1 = Descriptor.UpdateObject() ? num3 : num3;
            continue;
        }
        num1 = num2;
      }
label_3:
      if (flag)
      {
        this.BackgroundVideo.Source = uri3;
        goto label_7;
      }
      else if (this.BackgroundVideo.Source == uri3)
      {
        this.BackgroundVideo.Source = uri2;
        goto label_7;
      }
      else
        goto label_7;
label_10:
      this.BackgroundVideo.Source = uri1;
      goto label_7;
label_14:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Uri resourceLocator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_2;
            case 1:
            case 5:
              goto label_3;
            case 2:
              Application.LoadComponent((object) this, resourceLocator);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_2;
            case 3:
              resourceLocator = new Uri("/IEnumUnkn;component/welcomescreen.xaml", UriKind.Relative);
              goto case 2;
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_9;
          }
        }
label_2:
        bool helper = this.helper;
        num1 = 5;
        continue;
label_3:
        if (!helper)
        {
          this.helper = true;
          num1 = 3;
        }
        else
          break;
      }
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int i_Ptr, object counter)
    {
      int num1 = 7;
      while (true)
      {
        int num2;
        int num3;
        int num4;
        switch (num1)
        {
          case 0:
            goto label_17;
          case 1:
            switch (num4)
            {
              case 1:
                goto label_6;
              case 2:
                goto label_7;
              case 3:
                goto label_8;
              case 4:
                goto label_9;
              case 5:
                goto label_10;
              case 6:
                this.chkMusicEnabled = (CheckBox) counter;
                num1 = 0;
                continue;
              case 7:
                goto label_13;
              case 8:
                goto label_2;
              case 9:
                this.BackgroundVideo = (MediaElement) counter;
                this.BackgroundVideo.MediaEnded += new RoutedEventHandler(this.SetupMapper);
                num2 = 4;
                break;
              default:
                this.helper = true;
                num2 = 8;
                break;
            }
            break;
          case 2:
            num4 = num3;
            num2 = 1;
            break;
          case 3:
            goto label_18;
          case 4:
            goto label_19;
          case 5:
            goto label_20;
          case 6:
            goto label_21;
          case 7:
            num3 = i_Ptr;
            num2 = 2;
            break;
          case 8:
            goto label_22;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
      }
label_2:
      this.chkHints = (CheckBox) counter;
      return;
label_6:
      this.panel_MainUI = (StackPanel) counter;
      return;
label_7:
      ((ButtonBase) counter).Click += new RoutedEventHandler(this.InsertMapper);
      return;
label_8:
      ((ButtonBase) counter).Click += new RoutedEventHandler(this.Quit);
      return;
label_9:
      ((ButtonBase) counter).Click += new RoutedEventHandler(this.Leaderboard);
      return;
label_10:
      this.panel_Settings = (DockPanel) counter;
      return;
label_13:
      this.chkFullscreen = (CheckBox) counter;
      return;
label_17:
      return;
label_18:
      return;
label_19:
      return;
label_20:
      return;
label_21:
      return;
label_22:;
    }

    internal static bool DestroyObject() => true;

    internal static bool UpdateObject() => false;
  }
}
