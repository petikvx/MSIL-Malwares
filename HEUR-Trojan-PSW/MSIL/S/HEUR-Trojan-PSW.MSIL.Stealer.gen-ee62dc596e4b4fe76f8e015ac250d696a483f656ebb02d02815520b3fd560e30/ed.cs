// Decompiled with JetBrains decompiler
// Type: wG.ed
// Assembly: Type, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 716CE3A9-BAD1-470D-912F-B421D403F66E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee62dc596e4b4fe76f8e015ac250d696a483f656ebb02d02815520b3fd560e30.exe

using System;

namespace wG
{
  public class ed
  {
    private int sC;
    private int pS;
    private int Uv;
    private byte[] hX;
    internal static ed xR;

    public ed(int _param1)
    {
      XTG.fvQjdC();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.sC = _param1;
      this.hX = new byte[_param1];
      this.pS = 0;
      this.Uv = 0;
      int num1 = 0;
      if (false)
        goto label_3;
label_1:
      switch (num1)
      {
        case 0:
          return;
        default:
          return;
      }
label_3:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public void Ph(byte _param1)
    {
      this.hX[this.pS] = _param1;
      this.pS = (this.pS + 1) % this.sC;
      this.Uv = Math.Max(this.Uv + 1, this.sC);
    }

    public void yO(byte[] _param1)
    {
      for (int index = 0; index < _param1.Length; ++index)
        this.Ph(_param1[index]);
      int num = 0;
      if (ed.zF() == null)
        goto label_7;
label_1:
      switch (num)
      {
        case 0:
          return;
        default:
          return;
      }
label_7:
      num = 0;
      goto label_1;
    }

    public bool gi(string _param1)
    {
      char[] charArray = _param1.ToCharArray();
      byte[] numArray = new byte[charArray.Length];
      for (int index = 0; index < charArray.Length; ++index)
        numArray[index] = (byte) charArray[index];
      int num1 = 0;
      if (ed.zF() != null)
        goto label_5;
label_1:
      bool flag;
      switch (num1)
      {
        case 1:
          return flag;
        default:
          flag = this.HL(numArray);
          goto case 1;
      }
label_5:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public bool HL(byte[] _param1)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        switch (num2)
        {
          case 1:
            flag2 = this.Uv < _param1.Length;
            num2 = !ed.De() ? 0 : 0;
            continue;
          case 2:
          case 3:
            goto label_8;
          default:
            if (flag2)
            {
              flag1 = false;
              if (ed.zF() == null)
              {
                num2 = 2;
                continue;
              }
              goto label_1;
            }
            else
              goto label_6;
        }
      }
label_6:
      for (int index = 0; index < _param1.Length; ++index)
      {
        if ((int) this.hX[(this.pS + index) % this.sC] != (int) _param1[index])
        {
          flag1 = false;
          if (ed.De())
          {
            num2 = 3;
            goto label_2;
          }
          else
            goto label_1;
        }
      }
      flag1 = true;
label_8:
      return flag1;
    }

    internal static bool De() => ed.xR == null;

    internal static ed zF() => ed.xR;
  }
}
