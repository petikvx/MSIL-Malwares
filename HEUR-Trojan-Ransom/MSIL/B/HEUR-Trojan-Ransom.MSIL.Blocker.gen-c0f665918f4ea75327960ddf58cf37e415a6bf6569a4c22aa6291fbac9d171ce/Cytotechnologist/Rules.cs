// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: SafeArrayTypeMismatchExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: FE98C20D-A437-4C5F-9849-D190358A66A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c0f665918f4ea75327960ddf58cf37e415a6bf6569a4c22aa6291fbac9d171ce.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1307094561;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 474114087)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -861663433 ^ 1583625434;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 710467081;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2131609753)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -1527352062 ^ 1534679872;
            continue;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 2078105333 ^ -1319628192;
            continue;
          case 3:
            num1 = (int) num2 * -491076177 ^ 1995636620;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 606402925;
      bool flag;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1467669139)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            riskChances = numArray;
            num1 = (int) num2 * 2100012063 ^ 1722595474;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 444466695;
            continue;
          case 4:
            num1 = (int) num2 * -346973440 ^ 2096963802;
            continue;
          case 5:
            int num3 = flag ? -1351577958 : (num3 = -1669268094);
            num1 = num3 ^ (int) num2 * -68748833;
            continue;
          case 6:
            aIndex = 0;
            num1 = (int) num2 * 286793059 ^ -866231731;
            continue;
          case 7:
            flag = aIndex < numArray.Length;
            num1 = 247108266;
            continue;
          case 8:
            ++aIndex;
            num1 = (int) num2 * 1994199612 ^ 1098904007;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 281057962;
      List<Card> cardList;
      bool flag;
      int aIndex1;
      int aIndex2;
      int num2;
      int count;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 409699344)) % 20U)
        {
          case 0:
            goto label_1;
          case 1:
            aIndex1 = 0;
            num1 = (int) num3 * -1593020262 ^ 1297884738;
            continue;
          case 2:
            int num4;
            num1 = num4 = num2 >= jsonNode[aIndex1].AsInt ? 459471051 : (num4 = 909489339);
            continue;
          case 3:
            cardList.Add(new Card()
            {
              Impact = flag ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            ++num2;
            num1 = 858290790;
            continue;
          case 4:
            num1 = 921218299;
            continue;
          case 5:
            ++aIndex2;
            num1 = (int) num3 * -1864030186 ^ 1018465029;
            continue;
          case 6:
            num1 = 229645290;
            continue;
          case 7:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * 590182102 ^ -208507249;
            continue;
          case 8:
            int num5;
            num1 = num5 = aIndex1 >= maxImpact * 2 ? 1461241753 : (num5 = 1834345854);
            continue;
          case 9:
            num1 = (int) num3 * -1369418326 ^ -2077535815;
            continue;
          case 10:
            count = json.Count;
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * 42645981 ^ 2082691383;
            continue;
          case 11:
            int num6;
            num1 = num6 = aIndex2 >= count ? 665185888 : (num6 = 1599303360);
            continue;
          case 12:
            array = cardList.ToArray();
            num1 = (int) num3 * -279027737 ^ -1136678962;
            continue;
          case 13:
            num1 = (int) num3 * 1676874501 ^ 371024648;
            continue;
          case 14:
            num2 = 0;
            num1 = (int) num3 * -1171538280 ^ 1292431894;
            continue;
          case 15:
            num1 = (int) num3 * 1973180102 ^ -1615837214;
            continue;
          case 16:
            ++aIndex1;
            num1 = (int) num3 * -994276591 ^ -1035400896;
            continue;
          case 17:
            flag = aIndex1 < maxImpact;
            num1 = (int) num3 * -828290341 ^ 368544556;
            continue;
          case 19:
            num1 = 1190392829;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 702107545;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 114470009)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u202C⁮‌⁫⁬‬⁯‌⁯⁮‌⁪⁯‮‬⁭‌⁬‪‭‪⁮‎‏⁪‮‌‌‍⁯​‏‮‍‪‪⁫⁬⁪‭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 137725036 ^ 1235016079;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 491178303;
      string str1;
      int index;
      Card[] cards;
      Card card1;
      int num2;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1007384028)) % 18U)
        {
          case 0:
            num2 = 0;
            num1 = (int) num3 * -107294599 ^ 174739178;
            continue;
          case 1:
            str2 = Rules.\u202B‎⁬⁯⁬‌⁯‮‪‎‭⁬⁯⁭⁫‎‍‭⁬‬‪‍‎‪‭​⁫⁬‪‮​‌⁭⁬‬⁫⁯‮‪‌‮(str1, "\n]");
            num1 = (int) num3 * 795963151 ^ -815717169;
            continue;
          case 3:
            str1 = "[\n\t";
            num1 = (int) num3 * -410064385 ^ -669977453;
            continue;
          case 4:
            num1 = (int) num3 * -911016539 ^ -1972416716;
            continue;
          case 5:
            int num4 = flag ? 1270575434 : (num4 = 683059403);
            num1 = num4 ^ (int) num3 * 1216474679;
            continue;
          case 6:
            num1 = (int) num3 * 673336021 ^ -773811863;
            continue;
          case 7:
            int num5;
            num1 = num5 = index >= cards.Length ? 493700355 : (num5 = 2054430431);
            continue;
          case 8:
            num1 = (int) num3 * -8927122 ^ -533617039;
            continue;
          case 9:
            num1 = (int) num3 * -2119372629 ^ 35767831;
            continue;
          case 10:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206E⁬⁫‬⁫‭⁬⁯​​‪⁬⁫⁬‫⁯⁪⁬‬‍‬​⁮⁮⁮‭‌‎‎⁬‫‪⁯⁬‪⁪‭⁪⁫‮((object) card2) : (string) null;
            str1 = Rules.\u206E⁫‬‍⁯⁭‪⁪‎‎⁭⁪⁫‬‪​‎‪‮⁭⁮⁪‭‍⁭⁬⁯⁮​⁬‭⁪‏‫‪​‏⁯​⁫‮(str3, str4, " ");
            num1 = 1757983856;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * -1826115354 ^ 1036604871;
            continue;
          case 12:
            cards = this.Cards;
            num1 = (int) num3 * 1515479749 ^ -609319110;
            continue;
          case 13:
            card1 = cards[index];
            flag = num2 != card1.Type;
            num1 = 502761637;
            continue;
          case 14:
            goto label_1;
          case 15:
            str1 = Rules.\u202B‎⁬⁯⁬‌⁯‮‪‎‭⁬⁯⁭⁫‎‍‭⁬‬‪‍‎‪‭​⁫⁬‪‮​‌⁭⁬‬⁫⁯‮‪‌‮(str1, "\n\t");
            num1 = (int) num3 * -565254335 ^ 1953406866;
            continue;
          case 16:
            index = 0;
            num1 = (int) num3 * 2124684263 ^ 1719160674;
            continue;
          case 17:
            num2 = card1.Type;
            num1 = (int) num3 * -1758547872 ^ -643841771;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u202B‎⁬⁯⁬‌⁯‮‪‎‭⁬⁯⁭⁫‎‍‭⁬‬‪‍‎‪‭​⁫⁬‪‮​‌⁭⁬‬⁫⁯‮‪‌‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206F‎‌‪‍​‬‮‪⁪‭‮‮⁯‎‬‬⁬⁭⁮⁬‎⁪‍⁮‌⁫⁯‭‌‏‏⁭‭​‪‍⁬⁭‍‮()));
label_1:
      int num1 = 1451113910;
      bool flag;
      string str2;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1124258852)) % 9U)
        {
          case 0:
            str2 = Rules.\u202B‎⁬⁯⁬‌⁯‮‪‎‭⁬⁯⁭⁫‎‍‭⁬‬‪‍‎‪‭​⁫⁬‪‮​‌⁭⁬‬⁫⁯‮‪‌‮(str1, " ]");
            num1 = (int) num2 * 962666947 ^ -889616302;
            continue;
          case 1:
            num1 = (int) num2 * 608380242 ^ -207112920;
            continue;
          case 2:
            flag = index < this.RiskChances.Length;
            num1 = 508412801;
            continue;
          case 3:
            int num3 = flag ? 715541134 : (num3 = 1331324606);
            num1 = num3 ^ (int) num2 * 450971037;
            continue;
          case 4:
            str1 = Rules.\u206E⁫‬‍⁯⁭‪⁪‎‎⁭⁪⁫‬‪​‎‪‮⁭⁮⁪‭‍⁭⁬⁯⁮​⁬‭⁪‏‫‪​‏⁯​⁫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206F‎‌‪‍​‬‮‪⁪‭‮‮⁯‎‬‬⁬⁭⁮⁬‎⁪‍⁮‌⁫⁯‭‌‏‏⁭‭​‪‍⁬⁭‍‮()));
            ++index;
            num1 = 2042260820;
            continue;
          case 5:
            index = 1;
            num1 = (int) num2 * 441316874 ^ -553209698;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 1173699925 ^ 906443742;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u202C⁮‌⁫⁬‬⁯‌⁯⁮‌⁪⁯‮‬⁭‌⁬‪‭‪⁮‎‏⁪‮‌‌‍⁯​‏‮‍‪‪⁫⁬⁪‭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202B‎⁬⁯⁬‌⁯‮‪‎‭⁬⁯⁭⁫‎‍‭⁬‬‪‍‎‪‭​⁫⁬‪‮​‌⁭⁬‬⁫⁯‮‪‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206E⁬⁫‬⁫‭⁬⁯​​‪⁬⁫⁬‫⁯⁪⁬‬‍‬​⁮⁮⁮‭‌‎‎⁬‫‪⁯⁬‪⁪‭⁪⁫‮([In] object obj0) => obj0.ToString();

    static string \u206E⁫‬‍⁯⁭‪⁪‎‎⁭⁪⁫‬‪​‎‪‮⁭⁮⁪‭‍⁭⁬⁯⁮​⁬‭⁪‏‫‪​‏⁯​⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206F‎‌‪‍​‬‮‪⁪‭‮‮⁯‎‬‬⁬⁭⁮⁬‎⁪‍⁮‌⁫⁯‭‌‏‏⁭‭​‪‍⁬⁭‍‮() => CultureInfo.InvariantCulture;
  }
}
