// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: SessionMa, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 29EA69E7-0E4F-4884-A9FC-633229D6DF5B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c4ce569311f22121bf069cebfeb39abebfd9109cf9a147e550f8801c49529685.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -883329771;
      JSONNode jsonNode;
      int count;
      int aIndex;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -945837407)) % 20U)
        {
          case 0:
            int num3;
            num1 = num3 = index < count ? -449555800 : (num3 = -1563311539);
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 1555008643 ^ -532748801;
            continue;
          case 2:
            this._buffer = buffer;
            num1 = (int) num2 * 2003705070 ^ 312755782;
            continue;
          case 3:
            num1 = (int) num2 * 1477878311 ^ 187748148;
            continue;
          case 4:
            goto label_3;
          case 5:
            ++aIndex;
            num1 = (int) num2 * 1460409972 ^ -280109187;
            continue;
          case 6:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * -2124521608 ^ 375144027;
            continue;
          case 7:
            this._random = Game.\u202B⁬‬⁯‌​‌‬⁯​‌⁪⁮‬‭⁫‌⁯‫‪‏‎⁪⁪​‬​​⁬‬‪‫‌‏‫‬⁬‬‫‭‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -1090434241 ^ -1099061877;
            continue;
          case 8:
            num1 = (int) num2 * 428469100 ^ -414920989;
            continue;
          case 9:
            int num4 = flag ? -1737481264 : (num4 = -1136665927);
            num1 = num4 ^ (int) num2 * 1443380891;
            continue;
          case 10:
            this.Players = new Player[count];
            num1 = (int) num2 * -149114428 ^ 1414463920;
            continue;
          case 11:
            goto label_1;
          case 12:
            flag = aIndex < count;
            num1 = -992821076;
            continue;
          case 13:
            num1 = (int) num2 * -68147357 ^ -1220515434;
            continue;
          case 14:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -817684872;
            continue;
          case 15:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -309871282 ^ 1455651525;
            continue;
          case 16:
            ++index;
            num1 = (int) num2 * -865633259 ^ -2094374359;
            continue;
          case 17:
            this._playerStates[index] = new PlayerState();
            num1 = -973492795;
            continue;
          case 18:
            index = 0;
            num1 = (int) num2 * -1589410714 ^ -1645923990;
            continue;
          case 19:
            this._dice = new Dice();
            num1 = (int) num2 * -153706311 ^ -803344908;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -568005643;
        PlayerState[] playerStates;
        int index;
        bool flag;
        bool finished1;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -701181385)) % 15U)
          {
            case 0:
              ++index;
              num1 = -2143960431;
              continue;
            case 1:
              flag = playerStates[index].State == State.Playing;
              num1 = -1419396186;
              continue;
            case 2:
              num1 = (int) num2 * 896943897 ^ -384989611;
              continue;
            case 3:
              num1 = (int) num2 * -67151014 ^ -1511658301;
              continue;
            case 5:
              finished1 = this._finished;
              num1 = (int) num2 * -1718126855 ^ -1363753920;
              continue;
            case 6:
              int num3 = flag ? -327068796 : (num3 = -742615580);
              num1 = num3 ^ (int) num2 * -797932821;
              continue;
            case 7:
              int num4 = finished1 ? -1807946995 : (num4 = -515591470);
              num1 = num4 ^ (int) num2 * -676874995;
              continue;
            case 8:
              finished2 = false;
              num1 = (int) num2 * 1010400866 ^ 323708947;
              continue;
            case 9:
              finished2 = true;
              num1 = (int) num2 * -333932123 ^ -822838716;
              continue;
            case 10:
              goto label_1;
            case 11:
              finished2 = true;
              num1 = (int) num2 * -1576638231 ^ -1569049832;
              continue;
            case 12:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * -1002865251 ^ 639028585;
              continue;
            case 13:
              num1 = -1363023432;
              continue;
            case 14:
              int num5;
              num1 = num5 = index < playerStates.Length ? -955064295 : (num5 = -1147024394);
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
      this.Winners.Clear();
label_1:
      int num1 = 1456925175;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 224621595)) % 7U)
        {
          case 0:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1255558512 ^ 1511151519;
            continue;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * 2035570127 ^ -154074811;
            continue;
          case 2:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 957953875 ^ -313414364;
            continue;
          case 3:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1354419322 ^ 414131684;
            continue;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          case 6:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 815612171 ^ -1538744839;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1153139894;
      int num2;
      int planningCardsCount;
      bool flag1;
      bool morePlanningSprint;
      int index;
      bool flag2;
      PlayerState playerState;
      Player player;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 673427491)) % 26U)
        {
          case 0:
            num1 = 1969080828;
            continue;
          case 1:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1185772076 ^ 670375728;
            continue;
          case 2:
            int num4 = !flag2 ? 2000697411 : (num4 = 778984614);
            num1 = num4 ^ (int) num3 * 1029463339;
            continue;
          case 3:
            goto label_1;
          case 4:
            ++index;
            num1 = (int) num3 * -1366406394 ^ 806348473;
            continue;
          case 5:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1752562361 ^ -853731786;
            continue;
          case 6:
            int num5 = !morePlanningSprint ? -1847083756 : (num5 = -1185615535);
            num1 = num5 ^ (int) num3 * 1732382642;
            continue;
          case 7:
            int num6 = flag3 ? 1831074347 : (num6 = 635676995);
            num1 = num6 ^ (int) num3 * -639939315;
            continue;
          case 8:
            num1 = (int) num3 * -535915144 ^ -133309451;
            continue;
          case 9:
            num1 = (int) num3 * 2004446483 ^ 390360202;
            continue;
          case 10:
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * 1834778558 ^ 691766177;
            continue;
          case 11:
            index = 0;
            num1 = (int) num3 * 1909120867 ^ -1387854894;
            continue;
          case 12:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * 1030159484 ^ -660707469;
            continue;
          case 13:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = 1467865213;
            continue;
          case 14:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * -2025087051 ^ 1630247373;
            continue;
          case 15:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1684048349;
            continue;
          case 16:
            goto label_3;
          case 17:
            num1 = (int) num3 * 1892363662 ^ -1967754520;
            continue;
          case 18:
            num1 = (int) num3 * 433385261 ^ 646365844;
            continue;
          case 19:
            num2 = 0;
            num1 = 754645605;
            continue;
          case 20:
            int num7 = !flag1 ? 1267562288 : (num7 = 1124570470);
            num1 = num7 ^ (int) num3 * -1750250407;
            continue;
          case 21:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 500617176 ^ 192043890;
            continue;
          case 22:
            playerState.Sprint = 0;
            num1 = (int) num3 * -1600664339 ^ 11616477;
            continue;
          case 23:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = 814383245;
            continue;
          case 24:
            flag2 = index < this.Players.Length;
            num1 = 1802295563;
            continue;
          case 25:
            flag3 = num2 > 0;
            num1 = 2034502820;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 331175341;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 257472302)) % 16U)
        {
          case 0:
            this.Print((object) Game.\u206F‌⁮‪⁫⁯‎‭⁯‏​⁬‫⁪‪⁮‫‫‭⁪⁬⁪⁭⁯‮‫‬‪‏⁭⁭‬‮​‭‌⁪‎⁫‫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 19364389;
            continue;
          case 1:
            this.Print((object) Game.\u200E‫‌⁯‎‫‏‭⁮⁬⁫⁯‌‎‪⁫‭⁬⁯‫‌⁪‫⁭‭⁪‌⁭‪‫‪‎⁬‌⁭‪​​⁫‏‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -1418387916 ^ -361583835;
            continue;
          case 2:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1447446245 ^ 397376773;
            continue;
          case 3:
            ++this._currentPlayer;
            num1 = (int) num2 * 248426504 ^ 476952079;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -719181492 ^ -2014454350;
            continue;
          case 6:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 134904148 ^ 1210769463;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * -604758275 ^ 877705476;
            continue;
          case 9:
            flag = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 1126274268 ^ 948980846;
            continue;
          case 10:
            num1 = (int) num2 * -963809923 ^ 382162818;
            continue;
          case 11:
            num1 = (int) num2 * 1233668004 ^ -1169475884;
            continue;
          case 12:
            int num3 = flag ? -690814654 : (num3 = -1660183340);
            num1 = num3 ^ (int) num2 * -1521458421;
            continue;
          case 13:
            int num4 = this._currentTurn <= 0 ? -1599781102 : (num4 = -215141593);
            num1 = num4 ^ (int) num2 * -717354356;
            continue;
          case 14:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1625782793;
            continue;
          case 15:
            num1 = (int) num2 * -1708541461 ^ -1571428975;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
      PlayerState playerState1 = this._playerStates[playerIndex];
      this.Print((object) Game.\u200E‫‌⁯‎‫‏‭⁮⁬⁫⁯‌‎‪⁫‭⁬⁯‫‌⁪‫⁭‭⁪‌⁭‪‫‪‎⁬‌⁭‪​​⁫‏‮("\nPLAYER ", playerIndex.ToString()));
label_1:
      int num1 = 583960463;
      while (true)
      {
        uint num2;
        int num3;
        Card card;
        bool flag1;
        int index;
        bool flag2;
        bool flag3;
        int num4;
        int num5;
        bool flag4;
        PlayerState playerState2;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool onlyOneWinner;
        bool flag11;
        bool flag12;
        bool flag13;
        int num6;
        switch ((num2 = (uint) (num1 ^ 1615039512)) % 87U)
        {
          case 0:
            num1 = (int) num2 * -1157352646 ^ -1937642996;
            continue;
          case 1:
            card = this.DrawCard();
            num1 = 1803054651;
            continue;
          case 2:
            int num7 = playerState1.Resources >= 0 ? 870649368 : (num7 = 826270407);
            num1 = num7 ^ (int) num2 * -957246450;
            continue;
          case 3:
            flag6 = num4 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -910419161 ^ -2119438715;
            continue;
          case 4:
            int num8 = !flag11 ? -1033088551 : (num8 = -1375946983);
            num1 = num8 ^ (int) num2 * -2085298999;
            continue;
          case 5:
            num1 = 2020622016;
            continue;
          case 6:
            num1 = (int) num2 * 1518028022 ^ 809508830;
            continue;
          case 7:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * -1643997240 ^ -1196945330;
            continue;
          case 8:
            num1 = 143336971;
            continue;
          case 9:
            num1 = (int) num2 * 1397845330 ^ 564730117;
            continue;
          case 10:
            flag2 = index < this._playerStates.Length;
            num1 = 34293161;
            continue;
          case 11:
            int num9 = flag4 ? -1318338553 : (num9 = -1069047808);
            num1 = num9 ^ (int) num2 * -408240997;
            continue;
          case 12:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1213327387 ^ -1108986427;
            continue;
          case 13:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -1863823526 ^ 1108474726;
            continue;
          case 14:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200E‫‌⁯‎‫‏‭⁮⁬⁫⁯‌‎‪⁫‭⁬⁯‫‌⁪‫⁭‭⁪‌⁭‪‫‪‎⁬‌⁭‪​​⁫‏‮("\t", playerState3 != null ? Game.\u202E‬⁯⁮⁬‎⁫‌‍‪⁬⁭‭‎‏‭⁭​‎‍‎⁬‍‮​‭⁬​‎‫​‌‪‬⁭‍‬⁮⁬⁮‮((object) playerState3) : (string) null));
            num1 = 1658408271;
            continue;
          case 15:
            goto label_1;
          case 16:
            int num10;
            num1 = num10 = num3 < this._playerStates.Length ? 935083999 : (num10 = 1886348445);
            continue;
          case 17:
            num1 = (int) num2 * -564025975 ^ 1182177106;
            continue;
          case 18:
            num1 = (int) num2 * 1619237179 ^ 511726111;
            continue;
          case 19:
            playerState2.State = State.Lose;
            num1 = 1242433263;
            continue;
          case 20:
            num1 = (int) num2 * 1353395048 ^ -65621880;
            continue;
          case 21:
            playerState1.Resources -= num5;
            num1 = (int) num2 * -651423177 ^ -839215752;
            continue;
          case 22:
            int num11;
            num1 = num11 = flag6 ? 781725937 : (num11 = 282902979);
            continue;
          case 23:
            num1 = (int) num2 * 33967008 ^ -266349013;
            continue;
          case 24:
            int num12;
            num1 = num12 = num3 != playerIndex ? 491828565 : (num12 = 1233941357);
            continue;
          case 25:
            num1 = (int) num2 * 30947773 ^ -1074725265;
            continue;
          case 26:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1114341582 ^ 1585038684;
            continue;
          case 27:
            num1 = (int) num2 * 135383112 ^ -272071792;
            continue;
          case 28:
            index = 0;
            num1 = 660291696;
            continue;
          case 29:
            flag8 = playerState2.Resources >= 0;
            num1 = (int) num2 * -647674876 ^ 258394076;
            continue;
          case 30:
            int num13 = flag13 ? -375263168 : (num13 = -13599557);
            num1 = num13 ^ (int) num2 * -1144345951;
            continue;
          case 31:
            num1 = (int) num2 * -1939416747 ^ -315351354;
            continue;
          case 32:
            int num14 = !flag2 ? -1633293998 : (num14 = -1486441394);
            num1 = num14 ^ (int) num2 * 1731251363;
            continue;
          case 33:
            num1 = (int) num2 * -322314195 ^ -1939346950;
            continue;
          case 34:
            num1 = 415684395;
            continue;
          case 35:
            num5 = Game.\u206E‬‪​⁬⁯⁭‫⁪‪‮‍⁯‭‬‫⁮‭‬‭‎‫⁯‍⁭‪‏⁬⁪‫⁯‏​‌⁪‪⁯⁫⁬⁪‮(0, num4);
            num1 = (int) num2 * -1231179566 ^ 1065125509;
            continue;
          case 36:
            num1 = (int) num2 * 56449718 ^ -477668338;
            continue;
          case 37:
            num1 = 1659333028;
            continue;
          case 38:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 342870207 ^ 1970299628;
            continue;
          case 39:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u206E‬‪​⁬⁯⁭‫⁪‪‮‍⁯‭‬‫⁮‭‬‭‎‫⁯‍⁭‪‏⁬⁪‫⁯‏​‌⁪‪⁯⁫⁬⁪‮(0, num5 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -522375740 ^ 1493326294;
            continue;
          case 40:
            this.Losers.Add(index);
            num1 = (int) num2 * -689702248 ^ -1045037721;
            continue;
          case 41:
            flag3 = !this.Losers.Contains(num3);
            num1 = 1943491502;
            continue;
          case 42:
            flag6 = false;
            num1 = 408493882;
            continue;
          case 43:
            ++num3;
            num1 = 381871396;
            continue;
          case 44:
            int num15 = !flag3 ? -370992793 : (num15 = -1681146768);
            num1 = num15 ^ (int) num2 * -1981241999;
            continue;
          case 45:
            num1 = 1489090236;
            continue;
          case 46:
            int num16 = !onlyOneWinner ? -91287808 : (num16 = -1578390674);
            num1 = num16 ^ (int) num2 * -1828800018;
            continue;
          case 47:
            int num17 = flag8 ? -1390000563 : (num17 = -478386814);
            num1 = num17 ^ (int) num2 * 1641035002;
            continue;
          case 48:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1965191822 ^ 533256238;
            continue;
          case 49:
            flag5 = card.Impact < 0;
            num1 = (int) num2 * -567066655 ^ 506383312;
            continue;
          case 50:
            num1 = (int) num2 * -947827564 ^ 750902580;
            continue;
          case 51:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -2026447841 ^ 356922682;
            continue;
          case 52:
            ++playerState1.Sprint;
            num1 = (int) num2 * 826865235 ^ -1959473690;
            continue;
          case 53:
            num1 = (int) num2 * -1357915525 ^ -404636723;
            continue;
          case 54:
            flag6 = true;
            num5 = card.Impact;
            num1 = 644022426;
            continue;
          case 55:
            num1 = (int) num2 * 1168062354 ^ 1246015832;
            continue;
          case 56:
            flag10 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 405332025 ^ -1125684368;
            continue;
          case 57:
            goto label_3;
          case 58:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag1 ? (object) "ALL " : (object) "", flag5 ? (object) "receives" : (object) "pays", (object) Game.\u206B⁯⁪‬⁬⁭‮‬⁮‍‭⁪‌‏⁫⁬‪‫⁮⁬⁮‏⁬‭​​⁬‎⁪⁯‬⁫‭‌⁯‭‏‍‌‫‮(num5), flag6 ? (object) "advance" : (object) "stay");
            num1 = 304520688;
            continue;
          case 59:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -1566578623 ^ -1168304795;
            continue;
          case 60:
            flag13 = !this.Losers.Contains(index);
            num1 = (int) num2 * -1398432692 ^ 1613564016;
            continue;
          case 61:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1708510080 ^ 979101222;
            continue;
          case 62:
            flag7 = playerState1.Sprint < 0;
            num1 = 355301206;
            continue;
          case 63:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1041095595 ^ -1374298852;
            continue;
          case 64:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1439190587 ^ -65488498;
            continue;
          case 65:
            flag12 = !flag1;
            num1 = (int) num2 * 1585750000 ^ 1705356136;
            continue;
          case 66:
            flag9 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 1993895345;
            continue;
          case 67:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 68:
            num1 = (int) num2 * -863961208 ^ 174321178;
            continue;
          case 69:
            flag11 = playerState1.State != 0;
            num1 = (int) num2 * 675205853 ^ -1898663480;
            continue;
          case 70:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -2134751155 ^ -1556575456;
            continue;
          case 71:
            num1 = (int) num2 * 1817345941 ^ -1077221362;
            continue;
          case 72:
            int num18 = flag12 ? 2009370856 : (num18 = 1868320137);
            num1 = num18 ^ (int) num2 * -1202921850;
            continue;
          case 73:
            num1 = (int) num2 * -1360305455 ^ 71032379;
            continue;
          case 74:
            num1 = (int) num2 * -465677001 ^ 1438915351;
            continue;
          case 75:
            flag4 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 1032567977;
            continue;
          case 76:
            num1 = (int) num2 * 956440590 ^ 1179518684;
            continue;
          case 77:
            num1 = 513059384;
            continue;
          case 78:
            num1 = (int) num2 * 1772773648 ^ 213840854;
            continue;
          case 79:
            int num19 = !flag10 ? -1384956050 : (num19 = -37453709);
            num1 = num19 ^ (int) num2 * 510554519;
            continue;
          case 80:
            num1 = (int) num2 * 767210646 ^ -1188338065;
            continue;
          case 81:
            ++index;
            num1 = 482613326;
            continue;
          case 82:
            int num20 = flag9 ? -120418569 : (num20 = -126857918);
            num1 = num20 ^ (int) num2 * -1605609581;
            continue;
          case 83:
            flag6 = true;
            num1 = (int) num2 * -498827915 ^ -544580795;
            continue;
          case 84:
            int num21 = flag5 ? -393058107 : (num21 = -1739823715);
            num1 = num21 ^ (int) num2 * -260039568;
            continue;
          case 85:
            int num22 = flag7 ? 558990559 : (num22 = 1182574953);
            num1 = num22 ^ (int) num2 * -1612222118;
            continue;
          case 86:
            num1 = (int) num2 * -1717312348 ^ 947996846;
            continue;
          default:
            goto label_92;
        }
        flag1 = num6 != 0;
        num1 = 446068632;
      }
label_3:
      return;
label_92:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1626302868;
      Card card1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1334529043)) % 6U)
        {
          case 0:
            Card card2 = this._deck[0];
            this._deck.RemoveAt(0);
            card1 = card2;
            num1 = -1710404507;
            continue;
          case 1:
            int num3 = this._deck.Count <= 0 ? 256200695 : (num3 = 1617993227);
            num1 = num3 ^ (int) num2 * 626992998;
            continue;
          case 3:
            num1 = (int) num2 * 657612376 ^ -790177083;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -1045436871 ^ -1294549394;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return card1;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 2084189276;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1859226470)) % 8U)
        {
          case 0:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? 1589976439 : (num3 = 857416538);
            continue;
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202E‬⁯⁮⁬‎⁫‌‍‪⁬⁭‭‎‏‭⁭​‎‍‎⁬‍‮​‭⁬​‎‫​‌‪‬⁭‍‬⁮⁬⁮‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200B⁭‍‎⁯⁭‬‪⁬‭‪‏‏‫⁫⁪⁬⁮⁭​‮⁭⁭‌‭‎‫‫‎‍‏⁭⁮⁯‪‎⁭‍⁬‫‮(strArray);
            num1 = 2017647496;
            continue;
          case 2:
            str1 = "";
            num1 = (int) num2 * -1284199306 ^ 1654342993;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * -546723997 ^ 660067415;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 2107443065 ^ 1883795269;
            continue;
          case 5:
            goto label_1;
          case 6:
            ++index;
            num1 = (int) num2 * 362264361 ^ 2034357384;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -945613341;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -810291063)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = this.ToString(false);
            num1 = (int) num2 * -1288532229 ^ -873675573;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 1694424856;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1942251113)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u200D‮⁮⁫​‬‏​‮⁫⁫⁬⁫‪‌‏‭‬⁪​⁯⁬‏‭‪⁮‍⁫‌⁫⁭‫⁯⁮‭‬‪‎‏⁬‮(this._buffer, Game.\u206A‍⁯​⁭⁪⁪‏‫⁬⁭⁮‌‏⁫‬⁫⁯‫‫⁮⁪‬⁭‬‬‌⁮‍‮‪⁭⁬⁭‬‏‪‮⁪⁬‮(Game.\u202E‬⁯⁮⁬‎⁫‌‍‪⁬⁭‭‎‏‭⁭​‎‍‎⁬‍‮​‭⁬​‎‫​‌‪‬⁭‍‬⁮⁬⁮‮(text), more));
            num1 = (int) num2 * 1596852620 ^ 303053555;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u202B⁬‬⁯‌​‌‬⁯​‌⁪⁮‬‭⁫‌⁯‫‪‏‎⁪⁪​‬​​⁬‬‪‫‌‏‫‬⁬‬‫‭‮([In] int obj0) => new Random(obj0);

    static string \u206F‌⁮‪⁫⁯‎‭⁯‏​⁬‫⁪‪⁮‫‫‭⁪⁬⁪⁭⁯‮‫‬‪‏⁭⁭‬‮​‭‌⁪‎⁫‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200E‫‌⁯‎‫‏‭⁮⁬⁫⁯‌‎‪⁫‭⁬⁯‫‌⁪‫⁭‭⁪‌⁭‪‫‪‎⁬‌⁭‪​​⁫‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206E‬‪​⁬⁯⁭‫⁪‪‮‍⁯‭‬‫⁮‭‬‭‎‫⁯‍⁭‪‏⁬⁪‫⁯‏​‌⁪‪⁯⁫⁬⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206B⁯⁪‬⁬⁭‮‬⁮‍‭⁪‌‏⁫⁬‪‫⁮⁬⁮‏⁬‭​​⁬‎⁪⁯‬⁫‭‌⁯‭‏‍‌‫‮([In] int obj0) => Math.Abs(obj0);

    static string \u202E‬⁯⁮⁬‎⁫‌‍‪⁬⁭‭‎‏‭⁭​‎‍‎⁬‍‮​‭⁬​‎‫​‌‪‬⁭‍‬⁮⁬⁮‮([In] object obj0) => obj0.ToString();

    static string \u200B⁭‍‎⁯⁭‬‪⁬‭‪‏‏‫⁫⁪⁬⁮⁭​‮⁭⁭‌‭‎‫‫‎‍‏⁭⁮⁯‪‎⁭‍⁬‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A‍⁯​⁭⁪⁪‏‫⁬⁭⁮‌‏⁫‬⁫⁯‫‫⁮⁪‬⁭‬‬‌⁮‍‮‪⁭⁬⁭‬‏‪‮⁪⁬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200D‮⁮⁫​‬‏​‮⁫⁫⁬⁫‪‌‏‭‬⁪​⁯⁬‏‭‪⁮‍⁫‌⁫⁭‫⁯⁮‭‬‪‎‏⁬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
