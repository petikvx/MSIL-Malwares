// Decompiled with JetBrains decompiler
// Type: Aura.Protection.InvalidMD.InvalidMDPhase
// Assembly: Kudeta Crypter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 16F9F4AC-EE0C-4DE1-A1E6-B297F2D4338B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-VirTool.MSIL.Crypto.gen-a09f476c823deb3aadbd99b5e979f18689723f0ab3b5690e0b9a42cf2007f2a8.exe

using Aura.Protection.Renamer;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;

namespace Aura.Protection.InvalidMD
{
  internal class InvalidMDPhase
  {
    public static void Execute(AssemblyDef asm)
    {
      ModuleDef manifestModule = asm.ManifestModule;
      manifestModule.Mvid = new Guid?();
      manifestModule.Name = UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal));
      asm.ManifestModule.Import((FieldDef) new FieldDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal))));
      foreach (TypeDef type in (IEnumerable<TypeDef>) manifestModule.Types)
      {
        TypeDef typeDef = (TypeDef) new TypeDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal)));
        ((ICollection<MethodDef>) typeDef.Methods).Add((MethodDef) new MethodDefUser());
        ((ICollection<TypeDef>) typeDef.NestedTypes).Add((TypeDef) new TypeDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal))));
        MethodDef methodDef = (MethodDef) new MethodDefUser();
        ((ICollection<MethodDef>) typeDef.Methods).Add(methodDef);
        ((ICollection<TypeDef>) type.NestedTypes).Add(typeDef);
        ((ICollection<EventDef>) type.Events).Add((EventDef) new EventDefUser());
        foreach (MethodDef method in (IEnumerable<MethodDef>) type.Methods)
        {
          if (method.Body != null)
          {
            method.Body.SimplifyBranches();
            if (string.Compare(method.ReturnType.FullName, "System.Void", StringComparison.Ordinal) == 0 && method.HasBody && ((ICollection<Instruction>) method.Body.Instructions).Count != 0)
            {
              Local local1 = new Local(Extensions.ToTypeSig(asm.ManifestModule.Import(typeof (int)), true));
              Local local2 = new Local(Extensions.ToTypeSig(asm.ManifestModule.Import(typeof (bool)), true));
              method.Body.Variables.Add(local1);
              method.Body.Variables.Add(local2);
              Instruction instruction1 = method.Body.Instructions[((ICollection<Instruction>) method.Body.Instructions).Count - 1];
              Instruction instruction2 = new Instruction(OpCodes.Ret);
              Instruction instruction3 = new Instruction(OpCodes.Ldc_I4_1);
              method.Body.Instructions.Insert(0, new Instruction(OpCodes.Ldc_I4_0));
              method.Body.Instructions.Insert(1, new Instruction(OpCodes.Stloc, (object) local1));
              method.Body.Instructions.Insert(2, new Instruction(OpCodes.Br, (object) instruction3));
              Instruction instruction4 = new Instruction(OpCodes.Ldloc, (object) local1);
              method.Body.Instructions.Insert(3, instruction4);
              method.Body.Instructions.Insert(4, new Instruction(OpCodes.Ldc_I4_0));
              method.Body.Instructions.Insert(5, new Instruction(OpCodes.Ceq));
              method.Body.Instructions.Insert(6, new Instruction(OpCodes.Ldc_I4_1));
              method.Body.Instructions.Insert(7, new Instruction(OpCodes.Ceq));
              method.Body.Instructions.Insert(8, new Instruction(OpCodes.Stloc, (object) local2));
              method.Body.Instructions.Insert(9, new Instruction(OpCodes.Ldloc, (object) local2));
              method.Body.Instructions.Insert(10, new Instruction(OpCodes.Brtrue, (object) method.Body.Instructions[10]));
              method.Body.Instructions.Insert(11, new Instruction(OpCodes.Ret));
              method.Body.Instructions.Insert(12, new Instruction(OpCodes.Calli));
              method.Body.Instructions.Insert(13, new Instruction(OpCodes.Sizeof, (object) instruction1));
              method.Body.Instructions.Insert(((ICollection<Instruction>) method.Body.Instructions).Count, instruction3);
              method.Body.Instructions.Insert(((ICollection<Instruction>) method.Body.Instructions).Count, new Instruction(OpCodes.Stloc, (object) local2));
              method.Body.Instructions.Insert(((ICollection<Instruction>) method.Body.Instructions).Count, new Instruction(OpCodes.Br, (object) instruction4));
              method.Body.Instructions.Insert(((ICollection<Instruction>) method.Body.Instructions).Count, instruction2);
              ExceptionHandler exceptionHandler = new ExceptionHandler((ExceptionHandlerType) 2)
              {
                HandlerStart = method.Body.Instructions[10],
                HandlerEnd = method.Body.Instructions[11],
                TryEnd = method.Body.Instructions[14],
                TryStart = method.Body.Instructions[12]
              };
              if (!method.Body.HasExceptionHandlers)
                ((ICollection<ExceptionHandler>) method.Body.ExceptionHandlers).Add(exceptionHandler);
              method.Body.OptimizeBranches();
              method.Body.OptimizeMacros();
            }
          }
        }
      }
      TypeDef typeDef1 = (TypeDef) new TypeDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal)));
      FieldDef fieldDef = (FieldDef) new FieldDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal)), new FieldSig(Extensions.ToTypeSig(manifestModule.Import(typeof (MindLated_png)), true)));
      ((ICollection<FieldDef>) typeDef1.Fields).Add(fieldDef);
      typeDef1.BaseType = manifestModule.Import(typeof (MindLated_png));
      ((ICollection<TypeDef>) manifestModule.Types).Add(typeDef1);
      TypeDefUser typeDefUser = new TypeDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal)));
      ((TypeDef) typeDefUser).IsInterface = true;
      ((TypeDef) typeDefUser).IsSealed = true;
      TypeDef typeDef2 = (TypeDef) typeDefUser;
      ((ICollection<TypeDef>) manifestModule.Types).Add(typeDef2);
      manifestModule.TablesHeaderVersion = new ushort?((ushort) 257);
    }
  }
}
