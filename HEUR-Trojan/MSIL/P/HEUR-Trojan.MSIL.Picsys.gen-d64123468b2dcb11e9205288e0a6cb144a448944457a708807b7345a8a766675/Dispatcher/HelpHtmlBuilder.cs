// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.HelpHtmlBuilder
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.ServiceModel.Web.Configuration;
using System.Text;
using System.Web;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;

namespace System.ServiceModel.Dispatcher
{
  internal class HelpHtmlBuilder
  {
    private const string HelpOperationPageUrl = "help/operations/{0}";
    private const string HtmlHtmlElementName = "{http://www.w3.org/1999/xhtml}html";
    private const string HtmlHeadElementName = "{http://www.w3.org/1999/xhtml}head";
    private const string HtmlTitleElementName = "{http://www.w3.org/1999/xhtml}title";
    private const string HtmlBodyElementName = "{http://www.w3.org/1999/xhtml}body";
    private const string HtmlBrElementName = "{http://www.w3.org/1999/xhtml}br";
    private const string HtmlPElementName = "{http://www.w3.org/1999/xhtml}p";
    private const string HtmlTableElementName = "{http://www.w3.org/1999/xhtml}table";
    private const string HtmlTrElementName = "{http://www.w3.org/1999/xhtml}tr";
    private const string HtmlThElementName = "{http://www.w3.org/1999/xhtml}th";
    private const string HtmlTdElementName = "{http://www.w3.org/1999/xhtml}td";
    private const string HtmlDivElementName = "{http://www.w3.org/1999/xhtml}div";
    private const string HtmlAElementName = "{http://www.w3.org/1999/xhtml}a";
    private const string HtmlPreElementName = "{http://www.w3.org/1999/xhtml}pre";
    private const string HtmlClassAttributeName = "class";
    private const string HtmlTitleAttributeName = "title";
    private const string HtmlHrefAttributeName = "href";
    private const string HtmlRelAttributeName = "rel";
    private const string HtmlIdAttributeName = "id";
    private const string HtmlNameAttributeName = "name";
    private const string HtmlRowspanAttributeName = "rowspan";
    private const string HtmlHeading1Class = "heading1";
    private const string HtmlContentClass = "content";
    private const string HtmlRequestXmlId = "request-xml";
    private const string HtmlRequestJsonId = "request-json";
    private const string HtmlRequestSchemaId = "request-schema";
    private const string HtmlResponseXmlId = "response-xml";
    private const string HtmlResponseJsonId = "response-json";
    private const string HtmlResponseSchemaId = "response-schema";
    private const string HtmlOperationClass = "operation";

    public static XDocument CreateHelpPage(
      Uri baseUri,
      IEnumerable<OperationHelpInformation> operations)
    {
      // ISSUE: reference to a compiler-generated method
      XDocument baseDocument = HelpHtmlBuilder.CreateBaseDocument(SR2.GetString(SR2.HelpPageOperationsAt, (object) baseUri));
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      XElement xelement1 = new XElement((XName) "{http://www.w3.org/1999/xhtml}table", (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}tr", new object[3]
      {
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}th", (object) SR2.GetString(SR2.HelpPageUri)),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}th", (object) SR2.GetString(SR2.HelpPageMethod)),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}th", (object) SR2.GetString(SR2.HelpPageDescription))
      }));
      string str1 = (string) null;
      XElement xelement2 = (XElement) null;
      int num = 0;
      foreach (OperationHelpInformation operationHelpInformation in (IEnumerable<OperationHelpInformation>) operations.OrderBy<OperationHelpInformation, string>((Func<OperationHelpInformation, string>) (o => HelpHtmlBuilder.FilterQueryVariables(o.UriTemplate))))
      {
        string str2 = HelpHtmlBuilder.FilterQueryVariables(operationHelpInformation.UriTemplate);
        string description = operationHelpInformation.Description;
        if (string.IsNullOrEmpty(description))
        {
          // ISSUE: reference to a compiler-generated method
          description = SR2.GetString(SR2.HelpPageDefaultDescription, (object) HelpHtmlBuilder.BuildFullUriTemplate(baseUri, operationHelpInformation.UriTemplate));
        }
        XElement content1 = new XElement((XName) "{http://www.w3.org/1999/xhtml}tr", new object[2]
        {
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", new object[2]
          {
            (object) new XAttribute((XName) "title", (object) HelpHtmlBuilder.BuildFullUriTemplate(baseUri, operationHelpInformation.UriTemplate)),
            (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}a", new object[3]
            {
              (object) new XAttribute((XName) "rel", (object) "operation"),
              (object) new XAttribute((XName) "href", (object) string.Format((IFormatProvider) CultureInfo.InvariantCulture, "help/operations/{0}", new object[1]
              {
                (object) operationHelpInformation.Name
              })),
              (object) operationHelpInformation.Method
            })
          }),
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) description)
        });
        xelement1.Add((object) content1);
        if (str2 != str1)
        {
          XElement content2 = new XElement((XName) "{http://www.w3.org/1999/xhtml}td", str2 == str1 ? (object) string.Empty : (object) str2);
          content1.AddFirst((object) content2);
          if (xelement2 != null && num > 1)
            xelement2.Descendants((XName) "{http://www.w3.org/1999/xhtml}td").First<XElement>().Add((object) new XAttribute((XName) "rowspan", (object) num));
          xelement2 = content1;
          num = 0;
          str1 = str2;
        }
        ++num;
      }
      if (xelement2 != null && num > 1)
        xelement2.Descendants((XName) "{http://www.w3.org/1999/xhtml}td").First<XElement>().Add((object) new XAttribute((XName) "rowspan", (object) num));
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      baseDocument.Descendants((XName) "{http://www.w3.org/1999/xhtml}body").First<XElement>().Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}div", new object[4]
      {
        (object) new XAttribute((XName) "id", (object) "content"),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", new object[2]
        {
          (object) new XAttribute((XName) "class", (object) "heading1"),
          (object) SR2.GetString(SR2.HelpPageOperationsAt, (object) baseUri)
        }),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) SR2.GetString(SR2.HelpPageStaticText)),
        (object) xelement1
      }));
      return baseDocument;
    }

    public static XDocument CreateOperationHelpPage(
      Uri baseUri,
      OperationHelpInformation operationInfo)
    {
      // ISSUE: reference to a compiler-generated method
      XDocument baseDocument = HelpHtmlBuilder.CreateBaseDocument(SR2.GetString(SR2.HelpPageReferenceFor, (object) HelpHtmlBuilder.BuildFullUriTemplate(baseUri, operationInfo.UriTemplate)));
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      XElement xelement = new XElement((XName) "{http://www.w3.org/1999/xhtml}table", (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}tr", new object[3]
      {
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}th", (object) SR2.GetString(SR2.HelpPageMessageDirection)),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}th", (object) SR2.GetString(SR2.HelpPageFormat)),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}th", (object) SR2.GetString(SR2.HelpPageBody))
      }));
      HelpHtmlBuilder.RenderMessageInformation(xelement, operationInfo, true);
      HelpHtmlBuilder.RenderMessageInformation(xelement, operationInfo, false);
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      XElement content = new XElement((XName) "{http://www.w3.org/1999/xhtml}div", new object[5]
      {
        (object) new XAttribute((XName) "id", (object) "content"),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", new object[2]
        {
          (object) new XAttribute((XName) "class", (object) "heading1"),
          (object) SR2.GetString(SR2.HelpPageReferenceFor, (object) HelpHtmlBuilder.BuildFullUriTemplate(baseUri, operationInfo.UriTemplate))
        }),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) operationInfo.Description),
        (object) XElement.Parse(SR2.GetString(SR2.HelpPageOperationUri, (object) HttpUtility.HtmlEncode(HelpHtmlBuilder.BuildFullUriTemplate(baseUri, operationInfo.UriTemplate)))),
        (object) XElement.Parse(SR2.GetString(SR2.HelpPageOperationMethod, (object) HttpUtility.HtmlEncode(operationInfo.Method)))
      });
      if (!string.IsNullOrEmpty(operationInfo.JavascriptCallbackParameterName))
      {
        // ISSUE: reference to a compiler-generated method
        content.Add((object) XElement.Parse(SR2.GetString(SR2.HelpPageCallbackText, (object) HttpUtility.HtmlEncode(operationInfo.JavascriptCallbackParameterName))), (object) xelement);
      }
      else
        content.Add((object) xelement);
      baseDocument.Descendants((XName) "{http://www.w3.org/1999/xhtml}body").First<XElement>().Add((object) content);
      HelpHtmlBuilder.CreateOperationSamples(baseDocument.Descendants((XName) "{http://www.w3.org/1999/xhtml}div").First<XElement>(), operationInfo);
      return baseDocument;
    }

    public static XDocument CreateMethodNotAllowedPage(Uri helpUri)
    {
      // ISSUE: reference to a compiler-generated method
      XDocument baseDocument = HelpHtmlBuilder.CreateBaseDocument(SR2.GetString(SR2.HelpPageTitleText));
      // ISSUE: reference to a compiler-generated method
      XElement content = new XElement((XName) "{http://www.w3.org/1999/xhtml}div", new object[2]
      {
        (object) new XAttribute((XName) "id", (object) "content"),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", new object[2]
        {
          (object) new XAttribute((XName) "class", (object) "heading1"),
          (object) SR2.GetString(SR2.HelpPageTitleText)
        })
      });
      if (helpUri == (Uri) null)
      {
        // ISSUE: reference to a compiler-generated method
        content.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) SR2.GetString(SR2.HelpPageMethodNotAllowed)));
      }
      else
      {
        // ISSUE: reference to a compiler-generated method
        content.Add((object) XElement.Parse(SR2.GetString(SR2.HelpPageMethodNotAllowedWithLink, (object) HttpUtility.HtmlEncode(helpUri.AbsoluteUri))));
      }
      baseDocument.Descendants((XName) "{http://www.w3.org/1999/xhtml}body").First<XElement>().Add((object) content);
      return baseDocument;
    }

    public static XDocument CreateServerErrorPage(Uri helpUri, Exception error)
    {
      // ISSUE: reference to a compiler-generated method
      XDocument baseDocument = HelpHtmlBuilder.CreateBaseDocument(SR2.GetString(SR2.HelpPageRequestErrorTitle));
      // ISSUE: reference to a compiler-generated method
      XElement content = new XElement((XName) "{http://www.w3.org/1999/xhtml}div", new object[2]
      {
        (object) new XAttribute((XName) "id", (object) "content"),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", new object[2]
        {
          (object) new XAttribute((XName) "class", (object) "heading1"),
          (object) SR2.GetString(SR2.HelpPageRequestErrorTitle)
        })
      });
      if (helpUri == (Uri) null)
      {
        if (error != null)
        {
          // ISSUE: reference to a compiler-generated method
          content.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) SR2.GetString(SR2.HelpServerErrorProcessingRequestWithDetails, (object) error.Message)));
          content.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) (error.StackTrace ?? string.Empty)));
        }
        else
        {
          // ISSUE: reference to a compiler-generated method
          content.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) SR2.GetString(SR2.HelpServerErrorProcessingRequest)));
        }
      }
      else
      {
        string str1 = HttpUtility.HtmlEncode(helpUri.AbsoluteUri);
        if (error != null)
        {
          string str2 = AppSettings.DisableHtmlErrorPageExceptionHtmlEncoding ? error.Message : HttpUtility.HtmlEncode(error.Message);
          // ISSUE: reference to a compiler-generated method
          content.Add((object) XElement.Parse(SR2.GetString(SR2.HelpServerErrorProcessingRequestWithDetailsAndLink, (object) str1, (object) str2)));
          content.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) (error.StackTrace ?? string.Empty)));
        }
        else
        {
          // ISSUE: reference to a compiler-generated method
          content.Add((object) XElement.Parse(SR2.GetString(SR2.HelpServerErrorProcessingRequestWithLink, (object) str1)));
        }
      }
      baseDocument.Descendants((XName) "{http://www.w3.org/1999/xhtml}body").First<XElement>().Add((object) content);
      return baseDocument;
    }

    public static XDocument CreateEndpointNotFound(Uri helpUri)
    {
      // ISSUE: reference to a compiler-generated method
      XDocument baseDocument = HelpHtmlBuilder.CreateBaseDocument(SR2.GetString(SR2.HelpPageTitleText));
      // ISSUE: reference to a compiler-generated method
      XElement content = new XElement((XName) "{http://www.w3.org/1999/xhtml}div", new object[2]
      {
        (object) new XAttribute((XName) "id", (object) "content"),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", new object[2]
        {
          (object) new XAttribute((XName) "class", (object) "heading1"),
          (object) SR2.GetString(SR2.HelpPageTitleText)
        })
      });
      if (helpUri == (Uri) null)
      {
        // ISSUE: reference to a compiler-generated method
        content.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) SR2.GetString(SR2.HelpPageEndpointNotFound)));
      }
      else
      {
        // ISSUE: reference to a compiler-generated method
        content.Add((object) XElement.Parse(SR2.GetString(SR2.HelpPageEndpointNotFoundWithLink, (object) HttpUtility.HtmlEncode(helpUri.AbsoluteUri))));
      }
      baseDocument.Descendants((XName) "{http://www.w3.org/1999/xhtml}body").First<XElement>().Add((object) content);
      return baseDocument;
    }

    public static XDocument CreateTransferRedirectPage(
      string originalTo,
      string newLocation)
    {
      // ISSUE: reference to a compiler-generated method
      XDocument baseDocument = HelpHtmlBuilder.CreateBaseDocument(SR2.GetString(SR2.HelpPageTitleText));
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      XElement content = new XElement((XName) "{http://www.w3.org/1999/xhtml}div", new object[3]
      {
        (object) new XAttribute((XName) "id", (object) "content"),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}p", new object[2]
        {
          (object) new XAttribute((XName) "class", (object) "heading1"),
          (object) SR2.GetString(SR2.HelpPageTitleText)
        }),
        (object) XElement.Parse(SR2.GetString(SR2.HelpPageRedirect, (object) HttpUtility.HtmlEncode(originalTo), (object) HttpUtility.HtmlEncode(newLocation)))
      });
      baseDocument.Descendants((XName) "{http://www.w3.org/1999/xhtml}body").First<XElement>().Add((object) content);
      return baseDocument;
    }

    private static XDocument CreateBaseDocument(string title) => new XDocument(new object[2]
    {
      (object) new XDocumentType("html", "-//W3C//DTD XHTML 1.0 Transitional//EN", "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd", (string) null),
      (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}html", new object[2]
      {
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}head", new object[2]
        {
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}title", (object) title),
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}style", (object) SR2.GetString(SR2.HelpPageHtml))
        }),
        (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}body")
      })
    });

    private static string FilterQueryVariables(string uriTemplate)
    {
      int length = uriTemplate.IndexOf('?');
      return length > 0 ? uriTemplate.Substring(0, length) : uriTemplate;
    }

    private static void RenderMessageInformation(
      XElement table,
      OperationHelpInformation operationInfo,
      bool isRequest)
    {
      MessageHelpInformation messageHelpInformation = isRequest ? operationInfo.Request : operationInfo.Response;
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      string content = isRequest ? SR2.GetString(SR2.HelpPageRequest) : SR2.GetString(SR2.HelpPageResponse);
      string str = isRequest ? "request-xml" : "response-xml";
      if (messageHelpInformation.BodyDescription != null)
      {
        table.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}tr", new object[3]
        {
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) content),
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) messageHelpInformation.FormatString),
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) messageHelpInformation.BodyDescription)
        }));
      }
      else
      {
        if (messageHelpInformation.XmlExample != null || messageHelpInformation.Schema != null)
        {
          XElement xelement;
          table.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}tr", new object[3]
          {
            (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) content),
            (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) "Xml"),
            (object) (xelement = new XElement((XName) "{http://www.w3.org/1999/xhtml}td"))
          }));
          if (messageHelpInformation.XmlExample != null)
          {
            // ISSUE: reference to a compiler-generated method
            xelement.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}a", new object[2]
            {
              (object) new XAttribute((XName) "href", (object) ("#" + (isRequest ? "request-xml" : "response-xml"))),
              (object) SR2.GetString(SR2.HelpPageExample)
            }));
            if (messageHelpInformation.Schema != null)
              xelement.Add((object) ",");
          }
          if (messageHelpInformation.Schema != null)
          {
            // ISSUE: reference to a compiler-generated method
            xelement.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}a", new object[2]
            {
              (object) new XAttribute((XName) "href", (object) ("#" + (isRequest ? "request-schema" : "response-schema"))),
              (object) SR2.GetString(SR2.HelpPageSchema)
            }));
          }
        }
        if (messageHelpInformation.JsonExample == null)
          return;
        // ISSUE: reference to a compiler-generated method
        table.Add((object) new XElement((XName) "{http://www.w3.org/1999/xhtml}tr", new object[3]
        {
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) content),
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) "Json"),
          (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}td", (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}a", new object[2]
          {
            (object) new XAttribute((XName) "href", (object) ("#" + (isRequest ? "request-json" : "response-json"))),
            (object) SR2.GetString(SR2.HelpPageExample)
          }))
        }));
      }
    }

    private static void CreateOperationSamples(
      XElement element,
      OperationHelpInformation operationInfo)
    {
      if (operationInfo.Request.XmlExample != null)
      {
        // ISSUE: reference to a compiler-generated method
        element.Add((object) HelpHtmlBuilder.GenerateSampleXml(operationInfo.Request.XmlExample, SR2.GetString(SR2.HelpPageXmlRequest), "request-xml"));
      }
      if (operationInfo.Request.JsonExample != null)
      {
        // ISSUE: reference to a compiler-generated method
        element.Add((object) HelpHtmlBuilder.AddSampleJson(operationInfo.Request.JsonExample, SR2.GetString(SR2.HelpPageJsonRequest), "request-json"));
      }
      if (operationInfo.Response.XmlExample != null)
      {
        // ISSUE: reference to a compiler-generated method
        element.Add((object) HelpHtmlBuilder.GenerateSampleXml(operationInfo.Response.XmlExample, SR2.GetString(SR2.HelpPageXmlResponse), "response-xml"));
      }
      if (operationInfo.Response.JsonExample != null)
      {
        // ISSUE: reference to a compiler-generated method
        element.Add((object) HelpHtmlBuilder.AddSampleJson(operationInfo.Response.JsonExample, SR2.GetString(SR2.HelpPageJsonResponse), "response-json"));
      }
      if (operationInfo.Request.Schema != null)
      {
        // ISSUE: reference to a compiler-generated method
        element.Add((object) HelpHtmlBuilder.GenerateSampleXml(HelpHtmlBuilder.XmlSchemaToXElement(operationInfo.Request.Schema), SR2.GetString(SR2.HelpPageRequestSchema), "request-schema"));
        int num = 0;
        foreach (XmlSchema schema in (IEnumerable) operationInfo.Request.SchemaSet.Schemas())
        {
          if (schema.TargetNamespace != operationInfo.Request.Schema.TargetNamespace)
          {
            // ISSUE: reference to a compiler-generated method
            element.Add((object) HelpHtmlBuilder.GenerateSampleXml(HelpHtmlBuilder.XmlSchemaToXElement(schema), ++num == 1 ? SR2.GetString(SR2.HelpPageAdditionalRequestSchema) : (string) null, "request-schema"));
          }
        }
      }
      if (operationInfo.Response.Schema == null)
        return;
      // ISSUE: reference to a compiler-generated method
      element.Add((object) HelpHtmlBuilder.GenerateSampleXml(HelpHtmlBuilder.XmlSchemaToXElement(operationInfo.Response.Schema), SR2.GetString(SR2.HelpPageResponseSchema), "response-schema"));
      int num1 = 0;
      foreach (XmlSchema schema in (IEnumerable) operationInfo.Response.SchemaSet.Schemas())
      {
        if (schema.TargetNamespace != operationInfo.Response.Schema.TargetNamespace)
        {
          // ISSUE: reference to a compiler-generated method
          element.Add((object) HelpHtmlBuilder.GenerateSampleXml(HelpHtmlBuilder.XmlSchemaToXElement(schema), ++num1 == 1 ? SR2.GetString(SR2.HelpPageAdditionalResponseSchema) : (string) null, "response-schema"));
        }
      }
    }

    private static XElement XmlSchemaToXElement(XmlSchema schema)
    {
      XmlWriterSettings settings = new XmlWriterSettings()
      {
        CloseOutput = false,
        Indent = true
      };
      XDocument xdocument = new XDocument();
      using (XmlWriter writer = XmlWriter.Create(xdocument.CreateWriter(), settings))
        schema.Write(writer);
      return xdocument.Root;
    }

    private static XElement AddSample(object content, string title, string label) => string.IsNullOrEmpty(title) ? new XElement((XName) "{http://www.w3.org/1999/xhtml}p", (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}pre", new object[2]
    {
      (object) new XAttribute((XName) "class", (object) label),
      content
    })) : new XElement((XName) "{http://www.w3.org/1999/xhtml}p", new object[2]
    {
      (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}a", new object[2]
      {
        (object) new XAttribute((XName) "name", (object) label),
        (object) title
      }),
      (object) new XElement((XName) "{http://www.w3.org/1999/xhtml}pre", new object[2]
      {
        (object) new XAttribute((XName) "class", (object) label),
        content
      })
    });

    private static XElement GenerateSampleXml(XElement content, string title, string label)
    {
      StringBuilder stringBuilder = new StringBuilder();
      StringBuilder output = stringBuilder;
      using (XmlWriter writer = XmlWriter.Create(output, new XmlWriterSettings()
      {
        Indent = true,
        OmitXmlDeclaration = true
      }))
        content.WriteTo(writer);
      return HelpHtmlBuilder.AddSample((object) stringBuilder.ToString(), title, label);
    }

    private static XElement AddSampleJson(XElement content, string title, string label)
    {
      StringBuilder stringBuilder = new StringBuilder();
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (XmlJsonWriter writer = new XmlJsonWriter())
        {
          writer.SetOutput((Stream) memoryStream, Encoding.Unicode, false);
          content.WriteTo((XmlWriter) writer);
        }
        memoryStream.Position = 0L;
        stringBuilder.Append(new StreamReader((Stream) memoryStream, Encoding.Unicode).ReadToEnd());
      }
      int count = 0;
      bool flag = false;
      for (int index = 0; index < stringBuilder.Length; ++index)
      {
        if (stringBuilder[index] == '"')
          flag = !flag;
        else if (stringBuilder[index] == '{')
        {
          stringBuilder.Insert(index + 1, "\n" + new string('\t', ++count));
          index += count + 1;
        }
        else if (stringBuilder[index] == ',' && !flag)
          stringBuilder.Insert(index + 1, "\n" + new string('\t', count));
        else if (stringBuilder[index] == '}' && count > 0)
        {
          stringBuilder.Insert(index, "\n" + new string('\t', --count));
          index += count + 1;
        }
      }
      return HelpHtmlBuilder.AddSample((object) stringBuilder.ToString(), title, label);
    }

    private static string BuildFullUriTemplate(Uri baseUri, string uriTemplate)
    {
      UriTemplate uriTemplate1 = new UriTemplate(uriTemplate);
      return uriTemplate1.BindByPosition(baseUri, uriTemplate1.PathSegmentVariableNames.Concat<string>((IEnumerable<string>) uriTemplate1.QueryValueVariableNames).Select<string, string>((Func<string, string>) (name => "{" + name + "}")).ToArray<string>()).ToString();
    }
  }
}
