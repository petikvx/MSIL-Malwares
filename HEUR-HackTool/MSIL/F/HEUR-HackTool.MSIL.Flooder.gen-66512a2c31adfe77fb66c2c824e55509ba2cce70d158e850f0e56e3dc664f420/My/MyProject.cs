// Decompiled with JetBrains decompiler
// Type: Dark_RAT.My.MyProject
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Dark_RAT.My
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [HideModuleName]
  [StandardModule]
  internal sealed class MyProject
  {
    private static readonly MyProject.ThreadSafeObjectProvider<MyComputer> m_ComputerObjectProvider = new MyProject.ThreadSafeObjectProvider<MyComputer>();
    private static readonly MyProject.ThreadSafeObjectProvider<MyApplication> m_AppObjectProvider = new MyProject.ThreadSafeObjectProvider<MyApplication>();
    private static readonly MyProject.ThreadSafeObjectProvider<User> m_UserObjectProvider = new MyProject.ThreadSafeObjectProvider<User>();
    private static MyProject.ThreadSafeObjectProvider<MyProject.MyForms> m_MyFormsObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyForms>();
    private static readonly MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices> m_MyWebServicesObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices>();

    [DebuggerNonUserCode]
    static MyProject()
    {
    }

    [HelpKeyword("My.Computer")]
    internal static MyComputer Computer
    {
      [DebuggerHidden] get => MyProject.m_ComputerObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Application")]
    internal static MyApplication Application
    {
      [DebuggerHidden] get => MyProject.m_AppObjectProvider.GetInstance;
    }

    [HelpKeyword("My.User")]
    internal static User User
    {
      [DebuggerHidden] get => MyProject.m_UserObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Forms")]
    internal static MyProject.MyForms Forms
    {
      [DebuggerHidden] get => MyProject.m_MyFormsObjectProvider.GetInstance;
    }

    [HelpKeyword("My.WebServices")]
    internal static MyProject.MyWebServices WebServices
    {
      [DebuggerHidden] get => MyProject.m_MyWebServicesObjectProvider.GetInstance;
    }

    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class MyForms
    {
      public background m_background;
      public blocksite m_blocksite;
      public builder m_builder;
      public chat m_chat;
      public clickad m_clickad;
      public closeproces m_closeproces;
      public corupt m_corupt;
      public deletefile m_deletefile;
      public desktop m_desktop;
      public downloadfile m_downloadfile;
      public draw m_draw;
      public editprocess m_editprocess;
      public fakemessage m_fakemessage;
      public filem m_filem;
      public flag m_flag;
      public flood m_flood;
      public iehomepage m_iehomepage;
      public info m_info;
      public keylogger m_keylogger;
      public LoginForm m_LoginForm;
      public o m_o;
      public openprogram m_openprogram;
      public print m_print;
      public proces m_proces;
      public program m_program;
      public Register m_Register;
      public rename m_rename;
      public resolutionchange m_resolutionchange;
      public response m_response;
      public runit m_runit;
      public saytext m_saytext;
      public SerialCheck m_SerialCheck;
      public setclipboard m_setclipboard;
      public settings m_settings;
      public soft m_soft;
      public startbutton m_startbutton;
      public time m_time;
      public UpdateF m_UpdateF;
      public uploads m_uploads;
      public webcam m_webcam;
      public website m_website;
      [ThreadStatic]
      private static Hashtable m_FormBeingCreated;

      public background background
      {
        [DebuggerNonUserCode] get
        {
          this.m_background = MyProject.MyForms.Create__Instance__<background>(this.m_background);
          return this.m_background;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_background)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<background>(ref this.m_background);
        }
      }

      public blocksite blocksite
      {
        [DebuggerNonUserCode] get
        {
          this.m_blocksite = MyProject.MyForms.Create__Instance__<blocksite>(this.m_blocksite);
          return this.m_blocksite;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_blocksite)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<blocksite>(ref this.m_blocksite);
        }
      }

      public builder builder
      {
        [DebuggerNonUserCode] get
        {
          this.m_builder = MyProject.MyForms.Create__Instance__<builder>(this.m_builder);
          return this.m_builder;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_builder)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<builder>(ref this.m_builder);
        }
      }

      public chat chat
      {
        [DebuggerNonUserCode] get
        {
          this.m_chat = MyProject.MyForms.Create__Instance__<chat>(this.m_chat);
          return this.m_chat;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_chat)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<chat>(ref this.m_chat);
        }
      }

      public clickad clickad
      {
        [DebuggerNonUserCode] get
        {
          this.m_clickad = MyProject.MyForms.Create__Instance__<clickad>(this.m_clickad);
          return this.m_clickad;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_clickad)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<clickad>(ref this.m_clickad);
        }
      }

      public closeproces closeproces
      {
        [DebuggerNonUserCode] get
        {
          this.m_closeproces = MyProject.MyForms.Create__Instance__<closeproces>(this.m_closeproces);
          return this.m_closeproces;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_closeproces)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<closeproces>(ref this.m_closeproces);
        }
      }

      public corupt corupt
      {
        [DebuggerNonUserCode] get
        {
          this.m_corupt = MyProject.MyForms.Create__Instance__<corupt>(this.m_corupt);
          return this.m_corupt;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_corupt)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<corupt>(ref this.m_corupt);
        }
      }

      public deletefile deletefile
      {
        [DebuggerNonUserCode] get
        {
          this.m_deletefile = MyProject.MyForms.Create__Instance__<deletefile>(this.m_deletefile);
          return this.m_deletefile;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_deletefile)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<deletefile>(ref this.m_deletefile);
        }
      }

      public desktop desktop
      {
        [DebuggerNonUserCode] get
        {
          this.m_desktop = MyProject.MyForms.Create__Instance__<desktop>(this.m_desktop);
          return this.m_desktop;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_desktop)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<desktop>(ref this.m_desktop);
        }
      }

      public downloadfile downloadfile
      {
        [DebuggerNonUserCode] get
        {
          this.m_downloadfile = MyProject.MyForms.Create__Instance__<downloadfile>(this.m_downloadfile);
          return this.m_downloadfile;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_downloadfile)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<downloadfile>(ref this.m_downloadfile);
        }
      }

      public draw draw
      {
        [DebuggerNonUserCode] get
        {
          this.m_draw = MyProject.MyForms.Create__Instance__<draw>(this.m_draw);
          return this.m_draw;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_draw)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<draw>(ref this.m_draw);
        }
      }

      public editprocess editprocess
      {
        [DebuggerNonUserCode] get
        {
          this.m_editprocess = MyProject.MyForms.Create__Instance__<editprocess>(this.m_editprocess);
          return this.m_editprocess;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_editprocess)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<editprocess>(ref this.m_editprocess);
        }
      }

      public fakemessage fakemessage
      {
        [DebuggerNonUserCode] get
        {
          this.m_fakemessage = MyProject.MyForms.Create__Instance__<fakemessage>(this.m_fakemessage);
          return this.m_fakemessage;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_fakemessage)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<fakemessage>(ref this.m_fakemessage);
        }
      }

      public filem filem
      {
        [DebuggerNonUserCode] get
        {
          this.m_filem = MyProject.MyForms.Create__Instance__<filem>(this.m_filem);
          return this.m_filem;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_filem)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<filem>(ref this.m_filem);
        }
      }

      public flag flag
      {
        [DebuggerNonUserCode] get
        {
          this.m_flag = MyProject.MyForms.Create__Instance__<flag>(this.m_flag);
          return this.m_flag;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_flag)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<flag>(ref this.m_flag);
        }
      }

      public flood flood
      {
        [DebuggerNonUserCode] get
        {
          this.m_flood = MyProject.MyForms.Create__Instance__<flood>(this.m_flood);
          return this.m_flood;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_flood)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<flood>(ref this.m_flood);
        }
      }

      public iehomepage iehomepage
      {
        [DebuggerNonUserCode] get
        {
          this.m_iehomepage = MyProject.MyForms.Create__Instance__<iehomepage>(this.m_iehomepage);
          return this.m_iehomepage;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_iehomepage)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<iehomepage>(ref this.m_iehomepage);
        }
      }

      public info info
      {
        [DebuggerNonUserCode] get
        {
          this.m_info = MyProject.MyForms.Create__Instance__<info>(this.m_info);
          return this.m_info;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_info)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<info>(ref this.m_info);
        }
      }

      public keylogger keylogger
      {
        [DebuggerNonUserCode] get
        {
          this.m_keylogger = MyProject.MyForms.Create__Instance__<keylogger>(this.m_keylogger);
          return this.m_keylogger;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_keylogger)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<keylogger>(ref this.m_keylogger);
        }
      }

      public LoginForm LoginForm
      {
        [DebuggerNonUserCode] get
        {
          this.m_LoginForm = MyProject.MyForms.Create__Instance__<LoginForm>(this.m_LoginForm);
          return this.m_LoginForm;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_LoginForm)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<LoginForm>(ref this.m_LoginForm);
        }
      }

      public o o
      {
        [DebuggerNonUserCode] get
        {
          this.m_o = MyProject.MyForms.Create__Instance__<o>(this.m_o);
          return this.m_o;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_o)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<o>(ref this.m_o);
        }
      }

      public openprogram openprogram
      {
        [DebuggerNonUserCode] get
        {
          this.m_openprogram = MyProject.MyForms.Create__Instance__<openprogram>(this.m_openprogram);
          return this.m_openprogram;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_openprogram)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<openprogram>(ref this.m_openprogram);
        }
      }

      public print print
      {
        [DebuggerNonUserCode] get
        {
          this.m_print = MyProject.MyForms.Create__Instance__<print>(this.m_print);
          return this.m_print;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_print)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<print>(ref this.m_print);
        }
      }

      public proces proces
      {
        [DebuggerNonUserCode] get
        {
          this.m_proces = MyProject.MyForms.Create__Instance__<proces>(this.m_proces);
          return this.m_proces;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_proces)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<proces>(ref this.m_proces);
        }
      }

      public program program
      {
        [DebuggerNonUserCode] get
        {
          this.m_program = MyProject.MyForms.Create__Instance__<program>(this.m_program);
          return this.m_program;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_program)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<program>(ref this.m_program);
        }
      }

      public Register Register
      {
        [DebuggerNonUserCode] get
        {
          this.m_Register = MyProject.MyForms.Create__Instance__<Register>(this.m_Register);
          return this.m_Register;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_Register)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<Register>(ref this.m_Register);
        }
      }

      public rename rename
      {
        [DebuggerNonUserCode] get
        {
          this.m_rename = MyProject.MyForms.Create__Instance__<rename>(this.m_rename);
          return this.m_rename;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_rename)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<rename>(ref this.m_rename);
        }
      }

      public resolutionchange resolutionchange
      {
        [DebuggerNonUserCode] get
        {
          this.m_resolutionchange = MyProject.MyForms.Create__Instance__<resolutionchange>(this.m_resolutionchange);
          return this.m_resolutionchange;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_resolutionchange)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<resolutionchange>(ref this.m_resolutionchange);
        }
      }

      public response response
      {
        [DebuggerNonUserCode] get
        {
          this.m_response = MyProject.MyForms.Create__Instance__<response>(this.m_response);
          return this.m_response;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_response)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<response>(ref this.m_response);
        }
      }

      public runit runit
      {
        [DebuggerNonUserCode] get
        {
          this.m_runit = MyProject.MyForms.Create__Instance__<runit>(this.m_runit);
          return this.m_runit;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_runit)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<runit>(ref this.m_runit);
        }
      }

      public saytext saytext
      {
        [DebuggerNonUserCode] get
        {
          this.m_saytext = MyProject.MyForms.Create__Instance__<saytext>(this.m_saytext);
          return this.m_saytext;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_saytext)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<saytext>(ref this.m_saytext);
        }
      }

      public SerialCheck SerialCheck
      {
        [DebuggerNonUserCode] get
        {
          this.m_SerialCheck = MyProject.MyForms.Create__Instance__<SerialCheck>(this.m_SerialCheck);
          return this.m_SerialCheck;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_SerialCheck)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<SerialCheck>(ref this.m_SerialCheck);
        }
      }

      public setclipboard setclipboard
      {
        [DebuggerNonUserCode] get
        {
          this.m_setclipboard = MyProject.MyForms.Create__Instance__<setclipboard>(this.m_setclipboard);
          return this.m_setclipboard;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_setclipboard)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<setclipboard>(ref this.m_setclipboard);
        }
      }

      public settings settings
      {
        [DebuggerNonUserCode] get
        {
          this.m_settings = MyProject.MyForms.Create__Instance__<settings>(this.m_settings);
          return this.m_settings;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_settings)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<settings>(ref this.m_settings);
        }
      }

      public soft soft
      {
        [DebuggerNonUserCode] get
        {
          this.m_soft = MyProject.MyForms.Create__Instance__<soft>(this.m_soft);
          return this.m_soft;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_soft)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<soft>(ref this.m_soft);
        }
      }

      public startbutton startbutton
      {
        [DebuggerNonUserCode] get
        {
          this.m_startbutton = MyProject.MyForms.Create__Instance__<startbutton>(this.m_startbutton);
          return this.m_startbutton;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_startbutton)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<startbutton>(ref this.m_startbutton);
        }
      }

      public time time
      {
        [DebuggerNonUserCode] get
        {
          this.m_time = MyProject.MyForms.Create__Instance__<time>(this.m_time);
          return this.m_time;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_time)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<time>(ref this.m_time);
        }
      }

      public UpdateF UpdateF
      {
        [DebuggerNonUserCode] get
        {
          this.m_UpdateF = MyProject.MyForms.Create__Instance__<UpdateF>(this.m_UpdateF);
          return this.m_UpdateF;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_UpdateF)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<UpdateF>(ref this.m_UpdateF);
        }
      }

      public uploads uploads
      {
        [DebuggerNonUserCode] get
        {
          this.m_uploads = MyProject.MyForms.Create__Instance__<uploads>(this.m_uploads);
          return this.m_uploads;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_uploads)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<uploads>(ref this.m_uploads);
        }
      }

      public webcam webcam
      {
        [DebuggerNonUserCode] get
        {
          this.m_webcam = MyProject.MyForms.Create__Instance__<webcam>(this.m_webcam);
          return this.m_webcam;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_webcam)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<webcam>(ref this.m_webcam);
        }
      }

      public website website
      {
        [DebuggerNonUserCode] get
        {
          this.m_website = MyProject.MyForms.Create__Instance__<website>(this.m_website);
          return this.m_website;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.m_website)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<website>(ref this.m_website);
        }
      }

      [DebuggerHidden]
      private static T Create__Instance__<T>(T Instance) where T : Form, new()
      {
        if ((object) Instance != null && !Instance.IsDisposed)
          return Instance;
        if (MyProject.MyForms.m_FormBeingCreated != null)
        {
          if (MyProject.MyForms.m_FormBeingCreated.ContainsKey((object) typeof (T)))
            throw new InvalidOperationException(Utils.GetResourceString("WinForms_RecursiveFormCreate"));
        }
        else
          MyProject.MyForms.m_FormBeingCreated = new Hashtable();
        MyProject.MyForms.m_FormBeingCreated.Add((object) typeof (T), (object) null);
        try
        {
          return new T();
        }
        catch (TargetInvocationException ex) when (
        {
          // ISSUE: unable to correctly present filter
          ProjectData.SetProjectError((Exception) ex);
          if (ex.InnerException != null)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          throw new InvalidOperationException(Utils.GetResourceString("WinForms_SeeInnerException", ex.InnerException.Message), ex.InnerException);
        }
        finally
        {
          MyProject.MyForms.m_FormBeingCreated.Remove((object) typeof (T));
        }
      }

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) where T : Form
      {
        instance.Dispose();
        instance = default (T);
      }

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public MyForms()
      {
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal new System.Type GetType() => typeof (MyProject.MyForms);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();
    }

    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class MyWebServices
    {
      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      internal new System.Type GetType() => typeof (MyProject.MyWebServices);

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override string ToString() => base.ToString();

      [DebuggerHidden]
      private static T Create__Instance__<T>(T instance) where T : new() => (object) instance == null ? new T() : instance;

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) => instance = default (T);

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public MyWebServices()
      {
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [ComVisible(false)]
    internal sealed class ThreadSafeObjectProvider<T> where T : new()
    {
      internal T GetInstance
      {
        [DebuggerHidden] get
        {
          if ((object) MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue == null)
            MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue = new T();
          return MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue;
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public ThreadSafeObjectProvider()
      {
      }
    }
  }
}
