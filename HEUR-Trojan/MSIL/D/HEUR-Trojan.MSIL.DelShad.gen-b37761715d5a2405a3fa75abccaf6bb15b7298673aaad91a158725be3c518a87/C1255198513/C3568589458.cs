// Decompiled with JetBrains decompiler
// Type: C1255198513.C3568589458
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace C1255198513
{
  public sealed class C3568589458 : C3904355907.C2852464175
  {
    private static readonly C3554254475.C3865851505 C3554254475 = new C3554254475.C3865851505(new byte[16]
    {
      (byte) 201,
      (byte) 217,
      (byte) 243,
      (byte) 154,
      (byte) 98,
      (byte) 138,
      (byte) 68,
      (byte) 96,
      (byte) 191,
      (byte) 116,
      (byte) 13,
      (byte) 8,
      (byte) 193,
      (byte) 138,
      (byte) 79,
      (byte) 234
    });
    public static readonly string C3554254475 = DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KE();
    public static readonly string C3904355907 = DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Ke();
    private const ulong C3554254475 = 3001;

    [SpecialName]
    public override C3554254475.C3865851505 C3554254475() => C3568589458.C3554254475;

    [SpecialName]
    public override string C3904355907() => DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KB();

    public override C1304234792 C1255198513()
    {
      C1304234792 c1304234792 = base.C1255198513();
      c1304234792.C3904355907(C3568589458.C3554254475, C3554254475.C3904355907.C3904355907);
      return c1304234792;
    }

    public override void C3554254475([In] C1304234792 obj0)
    {
      if (obj0 == null)
      {
        Debug.Assert(false);
      }
      else
      {
        Debug.Assert(C3568589458.C3554254475.Equals(obj0.C3554254475()));
        byte[] numArray = C3904355907.C2746444292.C3554254475().C3554254475(32U);
        obj0.C3554254475(C3568589458.C3904355907, numArray);
      }
    }

    public override byte[] C3554254475([In] byte[] obj0, [In] C1304234792 obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Kb());
      Type type = obj1 != null ? obj1.C3904355907(C3568589458.C3554254475) : throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.JC());
      if (type == (Type) null)
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KC());
      if (type != typeof (ulong))
        throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KC());
      ulong num = obj1.C3554254475(C3568589458.C3554254475, 0UL);
      byte[] numArray = obj1.C1908338681(C3568589458.C3904355907);
      if (numArray == null)
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Kc());
      if (obj0.Length != 32)
      {
        Debug.Assert(false);
        obj0 = C3904355907.C1304234792.C3554254475(obj0);
      }
      if (numArray.Length != 32)
      {
        Debug.Assert(false);
        numArray = C3904355907.C1304234792.C3554254475(numArray);
      }
      return C3568589458.C3554254475(obj0, numArray, num);
    }

    private static byte[] C3554254475([In] byte[] obj0, [In] byte[] obj1, [In] ulong obj2)
    {
      Debug.Assert(obj0 != null && obj0.Length == 32);
      if (obj0 == null)
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.KD());
      if (obj0.Length != 32)
        throw new ArgumentException();
      Debug.Assert(obj1 != null && obj1.Length == 32);
      if (obj1 == null)
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.Kd());
      if (obj1.Length != 32)
        throw new ArgumentException();
      byte[] destinationArray = new byte[32];
      Array.Copy((Array) obj0, (Array) destinationArray, destinationArray.Length);
      try
      {
        if (C3554254475.C1812594589.C3554254475(destinationArray, obj1, obj2) || C3568589458.C1255198513(destinationArray, obj1, obj2))
          return C3904355907.C1304234792.C3554254475(destinationArray);
        if (C3568589458.C3904355907(destinationArray, obj1, obj2))
          return C3904355907.C1304234792.C3554254475(destinationArray);
      }
      finally
      {
        C3554254475.C2137352139.C3904355907(destinationArray);
      }
      return (byte[]) null;
    }

    internal static bool C3904355907([In] byte[] obj0, [In] byte[] obj1, [In] ulong obj2)
    {
      byte[] rgbIV = new byte[16];
      using (SymmetricAlgorithm symmetricAlgorithm = C3904355907.C1304234792.C3904355907())
      {
        if (symmetricAlgorithm.BlockSize != 128)
        {
          Debug.Assert(false);
          symmetricAlgorithm.BlockSize = 128;
        }
        symmetricAlgorithm.KeySize = 256;
        symmetricAlgorithm.Mode = CipherMode.ECB;
        using (ICryptoTransform encryptor = symmetricAlgorithm.CreateEncryptor(obj1, rgbIV))
        {
          if (encryptor == null || encryptor.InputBlockSize != 16 || encryptor.OutputBlockSize != 16)
          {
            Debug.Assert(false);
            return false;
          }
          for (ulong index = 0; index < obj2; ++index)
          {
            encryptor.TransformBlock(obj0, 0, 16, obj0, 0);
            encryptor.TransformBlock(obj0, 16, 16, obj0, 16);
          }
        }
      }
      return true;
    }

    public override C1304234792 C3554254475([In] uint obj0)
    {
      C1304234792 c1304234792 = this.C1255198513();
      ulong num1;
      if (C3554254475.C1812594589.C3554254475(obj0, out num1))
      {
        c1304234792.C3904355907(C3568589458.C3554254475, num1);
        return c1304234792;
      }
      if (C3568589458.C3554254475(obj0, out num1))
      {
        c1304234792.C3904355907(C3568589458.C3554254475, num1);
        return c1304234792;
      }
      byte[] rgbKey = new byte[32];
      byte[] numArray = new byte[32];
      for (int index = 0; index < rgbKey.Length; ++index)
      {
        rgbKey[index] = (byte) index;
        numArray[index] = (byte) index;
      }
      byte[] rgbIV = new byte[16];
      using (SymmetricAlgorithm symmetricAlgorithm = C3904355907.C1304234792.C3904355907())
      {
        if (symmetricAlgorithm.BlockSize != 128)
        {
          Debug.Assert(false);
          symmetricAlgorithm.BlockSize = 128;
        }
        symmetricAlgorithm.KeySize = 256;
        symmetricAlgorithm.Mode = CipherMode.ECB;
        using (ICryptoTransform encryptor = symmetricAlgorithm.CreateEncryptor(rgbKey, rgbIV))
        {
          if (encryptor == null || encryptor.InputBlockSize != 16 || encryptor.OutputBlockSize != 16)
          {
            Debug.Assert(false);
            c1304234792.C3904355907(C3568589458.C3554254475, C3554254475.C3904355907.C3904355907);
            return c1304234792;
          }
          ulong num2 = 0;
          int tickCount = Environment.TickCount;
          do
          {
            for (ulong index = 0; index < 3001UL; ++index)
            {
              encryptor.TransformBlock(numArray, 0, 16, numArray, 0);
              encryptor.TransformBlock(numArray, 16, 16, numArray, 16);
            }
            num2 += 3001UL;
            if (num2 < 3001UL)
              goto label_17;
          }
          while ((uint) (Environment.TickCount - tickCount) <= obj0);
          goto label_20;
label_17:
          num2 = ulong.MaxValue;
label_20:
          c1304234792.C3904355907(C3568589458.C3554254475, num2);
        }
      }
      return c1304234792;
    }

    private static bool C1255198513([In] byte[] obj0, [In] byte[] obj1, [In] ulong obj2)
    {
      byte[] numArray = (byte[]) null;
      try
      {
        if (C3568589458.C1908338681())
        {
          numArray = new byte[32];
          Array.Copy((Array) obj0, (Array) numArray, 32);
          if (C3568589458.C1908338681(numArray, obj1, obj2))
          {
            Array.Copy((Array) numArray, (Array) obj0, 32);
            return true;
          }
        }
      }
      catch (Exception ex)
      {
      }
      finally
      {
        if (numArray != null)
          C3554254475.C2137352139.C3904355907(numArray);
      }
      return false;
    }

    private static bool C3554254475([In] uint obj0, out ulong _param1)
    {
      _param1 = 0UL;
      try
      {
        if (C3568589458.C1908338681())
          return C3568589458.C3904355907(obj0, ref _param1);
      }
      catch (Exception ex)
      {
      }
      return false;
    }

    private static bool C1908338681()
    {
      if (!C3554254475.C1812594589.C1908338681())
        return false;
      C3554254475.C543223747.C1255198513(IntPtr.Zero);
      return true;
    }

    private static bool C3554254475([In] ref IntPtr obj0, [In] IntPtr obj1)
    {
      int num1 = (int) C3554254475.C543223747.C3554254475(ref obj0, 9, 1, 0U);
      if (obj0 == IntPtr.Zero)
      {
        Debug.Assert(false);
        return false;
      }
      IntPtr num2 = new IntPtr(32);
      if (C3554254475.C543223747.C3904355907(obj0, obj1, num2) <= 0U)
        return true;
      Debug.Assert(false);
      return false;
    }

    private static bool C3554254475(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] ref IntPtr obj2,
      [In] ref IntPtr obj3,
      [In] ref IntPtr obj4)
    {
      obj3 = Marshal.AllocCoTaskMem(32);
      obj4 = Marshal.AllocCoTaskMem(32);
      Marshal.Copy(obj0, 0, obj3, 32);
      Marshal.Copy(obj1, 0, obj4, 32);
      return C3568589458.C3554254475(ref obj2, obj4);
    }

    private static void C3554254475([In] IntPtr obj0, [In] IntPtr obj1, [In] IntPtr obj2)
    {
      C3554254475.C543223747.C1908338681(obj0);
      Marshal.WriteInt64(obj1, 0L);
      Marshal.WriteInt64(obj1, 8, 0L);
      Marshal.WriteInt64(obj1, 16, 0L);
      Marshal.WriteInt64(obj1, 24, 0L);
      Marshal.FreeCoTaskMem(obj1);
      Marshal.FreeCoTaskMem(obj2);
    }

    private static bool C1908338681([In] byte[] obj0, [In] byte[] obj1, [In] ulong obj2)
    {
      IntPtr zero1 = IntPtr.Zero;
      IntPtr zero2 = IntPtr.Zero;
      IntPtr zero3 = IntPtr.Zero;
      if (!C3568589458.C3554254475(obj0, obj1, ref zero1, ref zero2, ref zero3))
        return false;
      try
      {
        IntPtr num = new IntPtr(32);
        for (ulong index = 0; index < obj2; ++index)
        {
          if (C3554254475.C543223747.C3554254475(zero1, zero2, num, IntPtr.Zero, IntPtr.Zero) > 0U)
          {
            Debug.Assert(false);
            return false;
          }
        }
        Marshal.Copy(zero2, obj0, 0, 32);
        return true;
      }
      catch (Exception ex)
      {
        Debug.Assert(false);
      }
      finally
      {
        C3568589458.C3554254475(zero1, zero2, zero3);
      }
      return false;
    }

    private static bool C3904355907([In] uint obj0, [In] ref ulong obj1)
    {
      byte[] numArray1 = new byte[32];
      byte[] numArray2 = new byte[32];
      IntPtr zero1 = IntPtr.Zero;
      IntPtr zero2 = IntPtr.Zero;
      IntPtr zero3 = IntPtr.Zero;
      if (!C3568589458.C3554254475(numArray1, numArray2, ref zero1, ref zero2, ref zero3))
        return false;
      uint num1 = obj0;
      ulong num2 = 1;
      if (num1 <= (uint) int.MaxValue)
      {
        num1 *= 2U;
        num2 = 2UL;
      }
      try
      {
        ulong num3 = 0;
        IntPtr num4 = new IntPtr(32);
        int tickCount = Environment.TickCount;
        do
        {
          for (ulong index = 0; index < 3001UL; ++index)
          {
            if (C3554254475.C543223747.C3554254475(zero1, zero2, num4, IntPtr.Zero, IntPtr.Zero) > 0U)
            {
              Debug.Assert(false);
              return false;
            }
          }
          num3 += 3001UL;
          if (num3 < 3001UL)
            goto label_11;
        }
        while ((uint) (Environment.TickCount - tickCount) <= num1);
        goto label_14;
label_11:
        num3 = ulong.MaxValue;
label_14:
        obj1 = num3 / num2;
        return true;
      }
      catch (Exception ex)
      {
        Debug.Assert(false);
      }
      finally
      {
        C3568589458.C3554254475(zero1, zero2, zero3);
      }
      return false;
    }
  }
}
