// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.Common.BrowserProfile
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf;
using System.Collections.Generic;
using System.ComponentModel;

namespace NoiseMe.Drags.App.Models.Common
{
  [ProtoContract(Name = "BrowserProfile")]
  public class BrowserProfile : INotifyPropertyChanged, IEqualityComparer<BrowserProfile>
  {
    private string _name;
    private string _profile;
    private List<BrowserCredendtial> _browserCredendtials;
    private List<BrowserCookie> _browserCookies;
    private List<BrowserAutofill> _browserAutofills;
    private List<BrowserCreditCard> _browserCreditCards;

    [ProtoMember(1, Name = "Name")]
    public string Name
    {
      get => this._name;
      set
      {
        this._name = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Name)));
      }
    }

    [ProtoMember(2, Name = "Profile")]
    public string Profile
    {
      get => this._profile;
      set
      {
        this._profile = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Profile)));
      }
    }

    [ProtoMember(3, Name = "BrowserCredendtials")]
    public List<BrowserCredendtial> BrowserCredendtials
    {
      get => this._browserCredendtials ?? (this._browserCredendtials = new List<BrowserCredendtial>());
      set
      {
        this._browserCredendtials = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (BrowserCredendtials)));
      }
    }

    [ProtoMember(4, Name = "BrowserCookies")]
    public List<BrowserCookie> BrowserCookies
    {
      get => this._browserCookies ?? (this._browserCookies = new List<BrowserCookie>());
      set
      {
        this._browserCookies = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (BrowserCookies)));
      }
    }

    [ProtoMember(5, Name = "BrowserAutofill")]
    public List<BrowserAutofill> BrowserAutofills
    {
      get => this._browserAutofills ?? (this._browserAutofills = new List<BrowserAutofill>());
      set
      {
        this._browserAutofills = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (BrowserAutofills)));
      }
    }

    [ProtoMember(6, Name = "BrowserCreditCard")]
    public List<BrowserCreditCard> BrowserCreditCards
    {
      get => this._browserCreditCards ?? (this._browserCreditCards = new List<BrowserCreditCard>());
      set
      {
        this._browserCreditCards = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (BrowserCreditCards)));
      }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    public bool Equals(BrowserProfile x, BrowserProfile y) => x.Name == y.Name && x.Profile == y.Profile;

    public int GetHashCode(BrowserProfile obj)
    {
      int hashCode = 37 * 397;
      if (!string.IsNullOrEmpty(obj.Name))
        hashCode += obj.Name.GetHashCode();
      if (!string.IsNullOrEmpty(obj.Profile))
        hashCode += obj.Profile.GetHashCode();
      return hashCode;
    }
  }
}
