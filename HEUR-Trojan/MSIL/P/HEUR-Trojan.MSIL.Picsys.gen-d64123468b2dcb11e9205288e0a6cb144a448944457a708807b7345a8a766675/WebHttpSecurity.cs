// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.WebHttpSecurity
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.ComponentModel;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;

namespace System.ServiceModel
{
  [ComVisible(false)]
  public sealed class WebHttpSecurity
  {
    internal const WebHttpSecurityMode DefaultMode = WebHttpSecurityMode.None;
    private WebHttpSecurityMode mode;
    private HttpTransportSecurity transportSecurity;
    private bool isModeSet;

    public WebHttpSecurity() => this.transportSecurity = new HttpTransportSecurity();

    public WebHttpSecurityMode Mode
    {
      get => this.mode;
      set
      {
        this.mode = WebHttpSecurityModeHelper.IsDefined(value) ? value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value)));
        this.isModeSet = true;
      }
    }

    internal bool IsModeSet => this.isModeSet;

    public HttpTransportSecurity Transport
    {
      get => this.transportSecurity;
      set => this.transportSecurity = value == null ? new HttpTransportSecurity() : value;
    }

    internal void DisableTransportAuthentication(HttpTransportBindingElement http) => this.transportSecurity.DisableTransportAuthentication(http);

    internal void EnableTransportAuthentication(HttpTransportBindingElement http) => this.transportSecurity.ConfigureTransportAuthentication(http);

    internal void EnableTransportSecurity(HttpsTransportBindingElement https) => this.transportSecurity.ConfigureTransportProtectionAndAuthentication(https);

    internal bool InternalShouldSerialize() => this.ShouldSerializeMode() || this.ShouldSerializeTransport();

    [EditorBrowsable(EditorBrowsableState.Never)]
    public bool ShouldSerializeMode() => this.Mode != 0;

    [EditorBrowsable(EditorBrowsableState.Never)]
    public bool ShouldSerializeTransport() => this.Transport.InternalShouldSerialize();
  }
}
