// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.WebFaultException`1
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Net;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Security;
using System.Security.Permissions;

namespace System.ServiceModel.Web
{
  [ComVisible(false)]
  [Serializable]
  public class WebFaultException<T> : FaultException<T>, IWebFaultException
  {
    private Type[] knownTypes;

    public WebFaultException(T detail, HttpStatusCode statusCode)
      : base(detail, WebFaultException.GetDefaultReason(statusCode), WebFaultException.GetFaultCode(statusCode))
    {
      this.StatusCode = statusCode;
    }

    public WebFaultException(T detail, HttpStatusCode statusCode, IEnumerable<Type> knownTypes)
      : base(detail, WebFaultException.GetDefaultReason(statusCode), WebFaultException.GetFaultCode(statusCode))
    {
      this.StatusCode = statusCode;
      this.knownTypes = knownTypes == null ? (Type[]) null : new List<Type>(knownTypes).ToArray();
    }

    protected WebFaultException(SerializationInfo info, StreamingContext context)
      : base(info, context)
    {
      this.StatusCode = (HttpStatusCode) info.GetValue("statusCode", typeof (HttpStatusCode));
      this.knownTypes = (Type[]) info.GetValue(nameof (knownTypes), typeof (Type[]));
    }

    public HttpStatusCode StatusCode { get; private set; }

    Type IWebFaultException.DetailType => typeof (T);

    object IWebFaultException.DetailObject => (object) this.Detail;

    Type[] IWebFaultException.KnownTypes => this.knownTypes;

    [SecurityCritical]
    [SecurityPermission(SecurityAction.LinkDemand, SerializationFormatter = true)]
    public override void GetObjectData(SerializationInfo info, StreamingContext context)
    {
      base.GetObjectData(info, context);
      info.AddValue("statusCode", (object) this.StatusCode);
      info.AddValue("knownTypes", (object) this.knownTypes);
    }
  }
}
