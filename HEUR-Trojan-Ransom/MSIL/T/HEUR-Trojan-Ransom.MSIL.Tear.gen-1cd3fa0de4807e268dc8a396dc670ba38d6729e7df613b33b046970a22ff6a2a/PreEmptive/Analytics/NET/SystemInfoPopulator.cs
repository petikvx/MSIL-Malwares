// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.NET.SystemInfoPopulator
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Messages;
using PreEmptive.Analytics.Common.SystemProfileInfo;
using PreEmptive.Analytics.Common.Utilities;
using PreEmptive.Analytics.NET.Common;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;

namespace PreEmptive.Analytics.NET
{
  public static class SystemInfoPopulator
  {
    public static SystemInfo GetNewSystemInfo(bool fullData)
    {
      int num1 = 20986;
      int num2 = num1;
      num1 = 20986;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          // ISSUE: object of a compiler-generated type is created
          // ISSUE: variable of a compiler-generated type
          SystemInfoPopulator.a a = new SystemInfoPopulator.a();
          // ISSUE: reference to a compiler-generated field
          a.b = fullData;
          // ISSUE: reference to a compiler-generated field
          a.a = new SystemInfo();
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.c));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.d));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.e));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.f));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.g));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.h));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.i));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.j));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.k));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.l));
          // ISSUE: reference to a compiler-generated method
          Utils.Attempt(new Action(a.m));
          // ISSUE: reference to a compiler-generated field
          return a.a;
        default:
          goto case 1;
      }
    }

    private static void j(SystemInfo A_0)
    {
      int A_1 = 16;
      int num1 = -26533;
      int num2 = num1;
      num1 = -26533;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
          break;
        case 2:
          break;
        default:
          if (false)
            ;
          if (true)
            ;
          switch (0)
          {
            default:
              IEnumerator<ManagementBaseObject> enumerator = Utils.a("韃ꏅ\uA4C7꿉꿋뫍\uF0CF雑뇓ꃕ뇗맙맛韝蓟컡쓣꣥觧蟩觫십탯뿱闳飵跷鳹鷻鷽瓿省瘃挅稇☉Ⰻ伍琏瘑易猕欗椙䬛眝䐟嘡䰣ਥࠧ椩夫尭䈯圱娳䈵笷嘹医崽⬿ᅁ㑃⍅ⵇ\u2E49恋湍ᵏ㍑ⱓᕕ㑗㕙㽛㕝㍟ቡţͥ౧䩩⩫㱭㽯㽱味ⅵᅷᑹ佻䱽\uDF7F튁\uF683\uE985\uEB87\uEF89ﾋﶍﾏ\uE091", A_1).a().GetEnumerator();
              try
              {
                int num4 = 2;
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                      goto label_13;
                    case 2:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 3:
                      num4 = 0;
                      continue;
                    case 4:
                      if (enumerator.MoveNext())
                      {
                        ManagementBaseObject current = enumerator.Current;
                        CpuInfo cpuInfo = new CpuInfo()
                        {
                          Name = current.b(Utils.a("胃ꏅ뻇ꏉ꿋ꯍ駏뛑", A_1)).a(string.Format(Utils.a("\uA7C3뛅뷇뇉ﳋ돍", A_1), (object) (A_0.Cpus.Count + 1))),
                          Model = current.b(Utils.a("諃\uA7C5ꗇ꿉", A_1)),
                          Manufacturer = current.b(Utils.a("觃\uA7C5ꛇ뿉\uAACB꿍돏ꛑꇓꓕ뷗꣙", A_1)).b(Utils.a("菃ꏅꛇ뿉ꗋꃍ뗏", A_1)),
                          AddressWidth = new int?((int) current.a<ushort>(Utils.a("藃ꋅ곇룉꧋뷍ꏏ藑뷓닕곗닙", A_1))),
                          Speed = new int?((int) current.a<uint>(Utils.a("蟃독뫇룉꧋ꃍ\uA4CF金룓맕믗뇙进껝藟蟡胣", A_1))),
                          MaxSpeed = new int?((int) current.a<uint>(Utils.a("觃\uA7C5냇觉ꃋꇍ돏맑蟓ꛕ뷗뿙룛", A_1)))
                        };
                        A_0.Cpus.Add(cpuInfo);
                        num4 = 1;
                        continue;
                      }
                      num4 = 3;
                      continue;
                  }
                  num4 = 4;
                }
label_13:
                return;
              }
              finally
              {
                int num5 = 0;
                while (true)
                {
                  int num6;
                  switch (num5)
                  {
                    case 0:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 1:
                      goto label_22;
                    case 2:
                      enumerator.Dispose();
                      num6 = 1;
                      num5 = num6;
                      continue;
                  }
                  if (enumerator != null)
                  {
                    num6 = 2;
                    num5 = num6;
                  }
                  else
                    break;
                }
label_22:;
              }
          }
      }
    }

    private static void i(SystemInfo A_0)
    {
      int A_1 = 4;
      int num1 = 1032;
      int num2 = num1;
      num1 = 1032;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
          break;
        case 2:
          break;
        default:
          if (true)
            ;
          switch (0)
          {
            default:
              if (false)
                ;
              IEnumerator<ManagementBaseObject> enumerator = Utils.a("\uEBB7ﾹ\uF0BB﮽莿雁\uE4C3胅ꇇꛉ꧋鷍ꧏꇑꃓ돕뗗\uF6D9ﳛ飝鋟蟡臣뗥飧诩迫语\uDCEF틱\uA7F3\u9FF5苷\u9FF9탻\uDEFD囿洁栃猅攇漉弋欍戏笑甓稕嘗漙焛簝䔟倡ࠣإ昧䬩䄫䬭ု琱昳礵男ᨹ欻圽⸿煁癃᥅ч╉⭋❍㍏㍑㡓ቕㅗ⥙㝛", A_1).a().GetEnumerator();
              try
              {
                int num4 = 2;
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                      goto label_13;
                    case 2:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 3:
                      num4 = 0;
                      continue;
                    case 4:
                      if (enumerator.MoveNext())
                      {
                        ManagementBaseObject current = enumerator.Current;
                        DiskInfo diskInfo = new DiskInfo()
                        {
                          Filesystem = current.b(Utils.a("ﺷ펹킻\uDBBD鎿믁럃닅귇\uA7C9", A_1)),
                          Free = new int?((int) (current.a<ulong>(Utils.a("ﺷ좹\uD9BB\uDBBD鎿닁ꗃꗅ귇", A_1)) >> 20)),
                          Size = new int?((int) (current.a<ulong>(Utils.a("\uEBB7펹욻\uDBBD", A_1)) >> 20)),
                          Serial = current.b(Utils.a("\uEEB7햹킻쮽궿\uA7C1韃ꏅ뫇ꏉ귋ꋍ黏\uA7D1맓듕뷗꣙", A_1)),
                          Name = current.b(Utils.a("\uF6B7\uDBB9톻\uDBBD", A_1))
                        };
                        A_0.Disks.Add(diskInfo);
                        num4 = 1;
                        continue;
                      }
                      num4 = 3;
                      continue;
                  }
                  num4 = 4;
                }
label_13:
                return;
              }
              finally
              {
                int num5 = 0;
                while (true)
                {
                  int num6;
                  switch (num5)
                  {
                    case 0:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 1:
                      goto label_22;
                    case 2:
                      enumerator.Dispose();
                      num6 = 1;
                      num5 = num6;
                      continue;
                  }
                  if (enumerator != null)
                  {
                    num6 = 2;
                    num5 = num6;
                  }
                  else
                    break;
                }
label_22:;
              }
          }
      }
    }

    private static void h(SystemInfo A_0)
    {
      int A_1 = 4;
      switch (0)
      {
        default:
          MemoryInfo memoryInfo = new MemoryInfo()
          {
            Capacity = new int?(0),
            Speed = new int?(int.MaxValue),
            Total = new int?(0)
          };
          IEnumerator<ManagementBaseObject> enumerator1 = Utils.a("\uEBB7ﾹ\uF0BB﮽莿雁\uE4C3藅꧇뫉귋귍맏ꛑ귓𥉉\uF8D7觙곛믝藟蛡쓣ꃥ뫧ꗩꇫ컭\uA7EF鯱髳엵쫷ꗹ곻雽秿焁洃攅椇昉䄋欍紏紑易漕", A_1).a().GetEnumerator();
          int num1;
          try
          {
            int num2 = 2;
            while (true)
            {
              ManagementBaseObject current;
              int num3;
              switch (num2)
              {
                case 1:
                  goto label_17;
                case 2:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 3:
                  ref MemoryInfo local = ref memoryInfo;
                  int? speed = memoryInfo.Speed;
                  int num4 = num3;
                  int? nullable = (speed.GetValueOrDefault() <= num4 ? 0 : (speed.HasValue ? 1 : 0)) != 0 ? new int?(num3) : memoryInfo.Speed;
                  local.Speed = nullable;
                  num1 = 0;
                  num2 = num1;
                  continue;
                case 4:
                  memoryInfo.Capacity = new int?((memoryInfo.Capacity ?? 0) + (int) (current.a<ulong>(Utils.a("﮷\uDBB9첻\uDFBDꎿꯁ냃뿅", A_1)) >> 20));
                  num3 = (int) current.a<uint>(Utils.a("\uEBB7쪹\uD9BB\uDBBD꒿", A_1));
                  num1 = 3;
                  num2 = num1;
                  continue;
                case 5:
                  num1 = 1;
                  num2 = num1;
                  continue;
                case 6:
                  if (enumerator1.MoveNext())
                  {
                    current = enumerator1.Current;
                    num1 = 4;
                    num2 = num1;
                    continue;
                  }
                  num1 = 5;
                  num2 = num1;
                  continue;
              }
              num1 = 6;
              num2 = num1;
            }
          }
          finally
          {
            int num5 = 0;
            while (true)
            {
              int num6;
              switch (num5)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  goto label_37;
                case 2:
                  enumerator1.Dispose();
                  num6 = 1;
                  num5 = num6;
                  continue;
              }
              if (enumerator1 != null)
              {
                num6 = -14539;
                int num7 = num6;
                num6 = -14539;
                int num8 = num6;
                switch (num7 == num8 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    goto label_37;
                  default:
                    num6 = 0;
                    if (num6 == 0)
                      ;
                    num6 = 2;
                    num5 = num6;
                    continue;
                }
              }
              else
                break;
            }
label_37:;
          }
label_17:
          num1 = 1;
          if (num1 == 0)
            ;
          IEnumerator<ManagementBaseObject> enumerator2 = Utils.a("\uEBB7ﾹ\uF0BB﮽莿雁\uE4C3鋅\uA7C7뻉귋ꋍ胏뫑귓ꗕ뇗맙뷛닝귟蟡解觥髧鏩쳫꣭ꋯ뷱맳훵꿷鏹鋻췽\u32FF崁䜃椅攇稉礋稍甏怑䜓漕欗渙礛猝", A_1).a().GetEnumerator();
          try
          {
            num1 = 2;
            int num9 = num1;
            while (true)
            {
              switch (num9)
              {
                case 0:
                  goto label_38;
                case 1:
                  if (!enumerator2.MoveNext())
                  {
                    num1 = 4;
                    num9 = num1;
                    continue;
                  }
                  ManagementBaseObject current = enumerator2.Current;
                  memoryInfo.Total = new int?((int) (current.a<ulong>(Utils.a("\uECB7햹좻\uDFBD겿鋁곃뿅믇ꏉ꿋꿍볏鿑뇓믕럗꣙ꗛ", A_1)) >> 20));
                  num1 = 3;
                  num9 = num1;
                  continue;
                case 2:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 4:
                  num1 = 0;
                  num9 = num1;
                  continue;
              }
              num1 = 1;
              num9 = num1;
            }
          }
          finally
          {
            int num10 = 0;
            while (true)
            {
              switch (num10)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  goto label_16;
                case 2:
                  enumerator2.Dispose();
                  num10 = 1;
                  continue;
              }
              if (enumerator2 != null)
                num10 = 2;
              else
                break;
            }
label_16:;
          }
label_38:
          A_0.Memory = memoryInfo;
          break;
      }
    }

    private static void a(SystemInfo A_0_1, bool A_1)
    {
      int A_1_1 = 1;
      int num1 = 0;
      switch (num1)
      {
        default:
          // ISSUE: variable of a compiler-generated type
          SystemInfoPopulator.b b;
          NetworkInterface[] networkInterfaces;
          int index;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              // ISSUE: object of a compiler-generated type is created
              b = new SystemInfoPopulator.b()
              {
                a = new PerformanceCounterCategory(Utils.a("﮴튶춸첺튼춾ꫀ\uE3C2賄꧆뷈껊뿌\uA9CE냐냒냔", A_1_1))
              };
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              b.b = b.a.GetInstanceNames();
              networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
              index = 0;
              num2 = 10;
              num1 = num2;
              goto default;
            default:
              // ISSUE: variable of a compiler-generated type
              SystemInfoPopulator.c c;
              List<UnicastIPAddressInformation> list1;
              IPInterfaceProperties ipProperties;
              List<UnicastIPAddressInformation> list2;
              Action action;
              NetworkInterface networkInterface;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    // ISSUE: reference to a compiler-generated method
                    action = new Action(c.c);
                    num2 = 14;
                    num1 = num2;
                    continue;
                  case 1:
                  case 3:
                  case 19:
label_33:
                    // ISSUE: reference to a compiler-generated field
                    c.b.MaxSpeed = new ulong?((ulong) Math.Max(0L, networkInterface.Speed / 1000000L));
                    // ISSUE: reference to a compiler-generated field
                    c.b.Name = networkInterface.Name;
                    num2 = 9;
                    num1 = num2;
                    continue;
                  case 2:
                    if (networkInterface.Supports(NetworkInterfaceComponent.IPv4))
                    {
                      num2 = 8;
                      num1 = num2;
                      continue;
                    }
                    goto case 17;
                  case 4:
                    if (index >= networkInterfaces.Length)
                    {
                      num2 = 5;
                      num1 = num2;
                      continue;
                    }
                    networkInterface = networkInterfaces[index];
                    action = (Action) null;
                    // ISSUE: object of a compiler-generated type is created
                    c = new SystemInfoPopulator.c();
                    // ISSUE: reference to a compiler-generated field
                    c.a = b;
                    // ISSUE: reference to a compiler-generated field
                    c.b = new NetworkInfo()
                    {
                      MacAddress = BitConverter.ToString(networkInterface.GetPhysicalAddress().GetAddressBytes()).Replace('-', ':')
                    };
                    ipProperties = networkInterface.GetIPProperties();
                    num2 = 2;
                    num1 = num2;
                    continue;
                  case 5:
                    goto label_37;
                  case 6:
                    list1 = ipProperties.UnicastAddresses.Where<UnicastIPAddressInformation>((Func<UnicastIPAddressInformation, bool>) (A_0_2 =>
                    {
                      int num3 = 25660;
                      int num4 = num3;
                      num3 = 25660;
                      int num5 = num3;
                      switch (num4 == num5)
                      {
                        case true:
                          int num6 = 1;
                          if (num6 == 0)
                            ;
                          num6 = 0;
                          if (num6 == 0)
                            ;
                          return A_0_2.Address.AddressFamily == AddressFamily.InterNetwork;
                        default:
                          goto case 1;
                      }
                    })).ToList<UnicastIPAddressInformation>();
                    num2 = 20;
                    num1 = num2;
                    continue;
                  case 7:
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    // ISSUE: reference to a compiler-generated field
                    A_0_1.Networks.Add(c.b);
                    ++index;
                    num2 = 12;
                    num1 = num2;
                    continue;
                  case 8:
                    num2 = 16;
                    num1 = num2;
                    continue;
                  case 9:
                    if (A_1)
                    {
                      num2 = 18;
                      num1 = num2;
                      continue;
                    }
                    goto case 7;
                  case 10:
                  case 12:
                    num2 = 4;
                    num1 = num2;
                    continue;
                  case 11:
                    // ISSUE: reference to a compiler-generated field
                    c.b.IpAddress = list2.Last<UnicastIPAddressInformation>().Address.ToString();
                    num2 = 19;
                    num1 = num2;
                    continue;
                  case 13:
                    if (!list2.Any<UnicastIPAddressInformation>())
                    {
                      // ISSUE: reference to a compiler-generated field
                      c.b.IpAddress = new IPAddress(0L).ToString();
                      num2 = 3;
                      num1 = num2;
                      continue;
                    }
                    num2 = 11;
                    num1 = num2;
                    continue;
                  case 14:
                    Utils.Attempt(action);
                    num2 = 7;
                    num1 = num2;
                    continue;
                  case 15:
                    // ISSUE: reference to a compiler-generated field
                    c.b.IpAddress = list1.Last<UnicastIPAddressInformation>().Address.ToString();
                    num2 = 1;
                    num1 = num2;
                    continue;
                  case 16:
                    if (ipProperties.GetIPv4Properties() != null)
                    {
                      num2 = 22;
                      num1 = num2;
                      continue;
                    }
                    goto case 17;
                  case 17:
                    num2 = 6;
                    num1 = num2;
                    continue;
                  case 18:
                    num2 = -333;
                    int num7 = num2;
                    num2 = -333;
                    int num8 = num2;
                    switch (num7 == num8 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_33;
                      default:
                        num2 = 0;
                        if (num2 == 0)
                          ;
                        num2 = 21;
                        num1 = num2;
                        continue;
                    }
                  case 20:
                    list2 = ipProperties.UnicastAddresses.Where<UnicastIPAddressInformation>((Func<UnicastIPAddressInformation, bool>) (A_0_3 =>
                    {
                      int num9 = -26883;
                      int num10 = num9;
                      num9 = -26883;
                      int num11 = num9;
                      switch (num10 == num11)
                      {
                        case true:
                          int num12 = 0;
                          if (num12 == 0)
                            ;
                          num12 = 1;
                          if (num12 == 0)
                            ;
                          return A_0_3.Address.AddressFamily == AddressFamily.InterNetworkV6;
                        default:
                          goto case 1;
                      }
                    })).ToList<UnicastIPAddressInformation>();
                    num2 = 23;
                    num1 = num2;
                    continue;
                  case 21:
                    if (action == null)
                    {
                      num2 = 0;
                      num1 = num2;
                      continue;
                    }
                    goto case 14;
                  case 22:
                    // ISSUE: reference to a compiler-generated field
                    c.b.UsesDhcp = new bool?(ipProperties.GetIPv4Properties().IsDhcpEnabled);
                    num2 = 17;
                    num1 = num2;
                    continue;
                  case 23:
                    if (list1.Any<UnicastIPAddressInformation>())
                    {
                      num2 = 15;
                      num1 = num2;
                      continue;
                    }
                    num2 = 13;
                    num1 = num2;
                    continue;
                  default:
                    goto label_3;
                }
              }
label_37:
              return;
          }
      }
    }

    private static void g(SystemInfo A_0)
    {
      int A_1 = 1;
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 0;
      int num2 = num1;
      switch (num2)
      {
        default:
          ManagementBaseObject A_0_1;
          switch (0)
          {
            case 0:
label_6:
              A_0_1 = Utils.a("\uE6B4\uF2B6\uF5B8ﺺﺼ\uEBBE\uE1C0胂냄뗆믈껊ꏌ믎藐뫒룔닖菘듚돜뫞췠쏢ꇤ蛦部蟪蓬裮駰蟲보駶본鷺鯼髾戀眂⤄✆䐈樊挌税眐爒瘔挖氘椚砜洞ഠ̢栤䠦䴨个䄬̮ᄰ挲吴䔶䴸琺嬼笾⹀⹂⑄\u2E46❈杊浌\u0B4E㹐㹒㑔㹖㝘睚絜᭞\u0E60\u0E62Ѥ\u0E66ݨ㥪ɬͮᑰ彲啴\u2776ᙸ\u0C7A\u187Cൾ튀\uF782\uE484\uF386\uEC88ꮊ쮌\uDD8E\uDE90\uDE92떔삖\uF098\uF59A꺜궞ﺠ\uE0A2쪤쪦\uD9A8\uDEAA\uD9AC쪮쎰\uE0B2체쒶춸\uDEBA킼", A_1).a().LastOrDefault<ManagementBaseObject>();
              break;
            default:
label_3:
              while (true)
              {
                num1 = -3443;
                int num3 = num1;
                num1 = -3443;
                int num4 = num1;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    goto label_7;
                  default:
                    num1 = 0;
                    if (num1 == 0)
                      ;
                    DomainInfo domainInfo;
                    switch (num2)
                    {
                      case 0:
                        if (A_0_1 != null)
                        {
                          num1 = 4;
                          num2 = num1;
                          continue;
                        }
                        goto label_16;
                      case 1:
                        if (domainInfo.MemberOf)
                        {
                          num1 = 2;
                          num2 = num1;
                          continue;
                        }
                        goto case 3;
                      case 2:
                        domainInfo.Name = A_0_1.b(Utils.a("\uF1B4\uD8B6풸\uDABA풼톾", A_1));
                        domainInfo.Role = SystemInfoPopulator.a((int) A_0_1.a<ushort>(Utils.a("\uF1B4\uD8B6풸\uDABA풼톾鏀곂꧄ꋆ", A_1)));
                        num1 = 3;
                        num2 = num1;
                        continue;
                      case 3:
                        A_0.Domain = new DomainInfo?(domainInfo);
                        A_0.PowerState = SystemInfoPopulator.b((int) A_0_1.a<ushort>(Utils.a("\uE5B4\uD8B6캸\uDEBA쾼\uECBE뗀ꋂ뇄ꋆ", A_1)));
                        A_0.TimeZone = new TimeInfo()
                        {
                          DaylightSavingsInEffect = new bool?(A_0_1.a<bool>(Utils.a("\uF1B4횶삸ힺ풼\uD8BE꧀럂賄꧆賈귊ꯌ\uAACE닐\uA7D2", A_1))),
                          Zone = new int?((int) A_0_1.a<short>(Utils.a("\uF6B4슶쮸즺\uD8BC톾뗀韂계\uAAC6곈释ꋌꇎ듐", A_1)))
                        };
                        num1 = 5;
                        num2 = num1;
                        continue;
                      case 4:
                        A_0.Manufacturer = A_0_1.b(Utils.a("\uF8B4횶ힸ캺\uDBBC\uDEBEꋀ럂냄뗆곈맊", A_1));
                        A_0.Model = A_0_1.b(Utils.a("\uF8B4\uD8B6\uDDB8\uDEBA톼", A_1));
                        domainInfo = new DomainInfo()
                        {
                          MemberOf = A_0_1.a<bool>(Utils.a("\uE5B4횶쮸쾺\uF2BC\uD9BE藀곂꣄ꛆꃈꗊ", A_1))
                        };
                        num1 = 1;
                        num2 = num1;
                        continue;
                      case 5:
                        goto label_12;
                      default:
                        goto label_6;
                    }
                }
              }
label_12:
              return;
label_16:
              return;
          }
label_7:
          num1 = 0;
          num2 = num1;
          goto label_3;
      }
    }

    private static void f(SystemInfo A_0)
    {
      int A_1_1 = 19;
      int num1 = 0;
      switch (num1)
      {
        default:
          int num2;
          ICollection<ManagementBaseObject> source;
          string A_1_2;
          string A_1_3;
          string A_1_4;
          switch (0)
          {
            case 0:
label_4:
              source = Utils.a("铆賈蟊裌賎藐\uF3D2鳔맖냘꿚드뻞跠냢賤鷦賨쟪췬ꋮ郰诲鳴髶賸雺껼雾笀昂⤄✆䜈樊怌樎ㄐ唒䜔堖吘㬚䨜瘞传ဢᜤ砦礨䨪䨬䨮眰娲头制樸帺䤼䬾⡀ⵂ≄", A_1_1).a();
              A_1_2 = Utils.a("軆\uA7C8ꋊ만ꛎ냐뿒蛔뻖ꏘ뻚", A_1_1);
              A_1_3 = Utils.a("諆\uA8C8돊\uA4CCꋎꓐ뻒蛔뻖ꏘ뻚", A_1_1);
              A_1_4 = Utils.a("视\uA8C8ꛊ\uA8CC", A_1_1);
              num2 = 0;
              num1 = num2;
              goto default;
            default:
              IEnumerator<ManagementBaseObject> enumerator;
              while (true)
              {
                num2 = 1;
                if (num2 == 0)
                  ;
                switch (num1)
                {
                  case 0:
                    if (!source.Any<ManagementBaseObject>())
                    {
                      num2 = 5;
                      num1 = num2;
                      continue;
                    }
                    goto case 4;
                  case 1:
                    source = Utils.a("铆賈蟊裌賎藐\uF3D2铔믖뗘듚뻜뻞闠蛢臤ꗦ裨飪裬볮飰觲郴\uDBF6\uD9F8\uABFA飼黾樀嘂瘄昆済渊ℌ⼎弐爒研爖㤘崚伜倞氠̢爤並䜨ᠪἬ瀮愰刲刴制缸刺儼娾ᑀあ⑄⁆ⱈ", A_1_1).a();
                    A_1_2 = Utils.a("蛆ꗈ\uA7CAꋌ곎냐\uA7D2냔돖鯘뫚껜뫞닠諢\u9FE4苦", A_1_1);
                    A_1_3 = Utils.a("韆곈\uAACAꛌ髎ꋐ닒닔닖", A_1_1);
                    A_1_4 = Utils.a("视\uA8C8ꛊ\uA8CC", A_1_1);
                    num2 = 6;
                    num1 = num2;
                    continue;
                  case 2:
                    if (!source.Any<ManagementBaseObject>())
                    {
                      num2 = 1;
                      num1 = num2;
                      continue;
                    }
                    goto case 6;
                  case 3:
                    goto label_7;
                  case 4:
                    num2 = 2;
                    num1 = num2;
                    continue;
                  case 5:
                    source = Utils.a("铆賈蟊裌賎藐\uF3D2鳔맖냘꿚드뻞跠냢賤鷦賨쟪췬ꋮ郰诲鳴髶賸雺껼雾笀昂⤄✆䜈樊怌樎ㄐ唒䜔堖吘㬚䨜瘞传ဢᜤ砦礨䨪䨬䨮眰娲头制", A_1_1).a();
                    num2 = 4;
                    num1 = num2;
                    continue;
                  case 6:
                    enumerator = source.GetEnumerator();
                    num2 = 3;
                    num1 = num2;
                    continue;
                  default:
                    goto label_4;
                }
              }
label_7:
              try
              {
                num2 = 0;
                num1 = num2;
                while (true)
                {
                  switch (num1)
                  {
                    case 0:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 2:
                      goto label_30;
                    case 3:
                      if (!enumerator.MoveNext())
                      {
                        num2 = 4;
                        num1 = num2;
                        continue;
                      }
                      ManagementBaseObject current = enumerator.Current;
                      PageFileInfo pageFileInfo = new PageFileInfo()
                      {
                        InitialSize = new int?((int) current.a<uint>(A_1_2)),
                        MaxSize = new int?((int) current.a<uint>(A_1_3)),
                        Name = current.b(A_1_4)
                      };
                      A_0.PageFiles.Add(pageFileInfo);
                      num2 = 1;
                      num1 = num2;
                      continue;
                    case 4:
                      num2 = 2;
                      num1 = num2;
                      continue;
                  }
                  num2 = 3;
                  num1 = num2;
                }
label_30:
                return;
              }
              finally
              {
                int num3 = -1030;
                switch (-1030 == num3 ? 1 : 0)
                {
                  case 0:
                  case 2:
label_18:
                    switch (0)
                    {
                      case 0:
                        goto label_20;
                    }
                    break;
                  default:
                    num3 = 0;
                    if (num3 == 0)
                      ;
                    num3 = 1;
                    num1 = num3;
                    break;
                }
label_19:
                while (true)
                {
                  switch (num1)
                  {
                    case 0:
                      goto label_23;
                    case 1:
                      goto label_18;
                    case 2:
                      enumerator.Dispose();
                      num3 = 0;
                      num1 = num3;
                      continue;
                    default:
                      goto label_20;
                  }
                }
label_20:
                if (enumerator != null)
                {
                  num3 = 2;
                  num1 = num3;
                  goto label_19;
                }
label_23:;
              }
          }
      }
    }

    private static void e(SystemInfo A_0)
    {
      int A_1 = 19;
      int num1 = 0;
      switch (num1)
      {
        default:
          ICollection<ManagementBaseObject> managementBaseObjects = Utils.a("铆賈蟊裌賎藐\uF3D2雔ꋖꯘ\uA9DA룜뇞闠ꯢ諤闦胨釪苬臮藰鋲駴ꗶ鳸裺鋼鏾琀眂氄栆月✊ⴌ䰎搐愒朔爖眘漚䬜稞匠圢䰤䐦䠨䜪缬䨮䈰尲头䈶䴸刺刼儾浀捂ل㉆㭈㥊⡌ⅎ═Œごㅖ⭘㹚\u2E5C㝞㍠ɢᅤɦ䕨䭪⍬\u0E6Eᱰᙲ啴ㅶ⭸㑺ぼ彾횀\uEA82\uEB84뒆뮈풊\uDB8C\uE68E\uF590\uF692杖풖\uF698\uF59A\uE99C\uED9E캠쾢즤슦\uDBA8", A_1).a();
          ScreenInfo screenInfo = new ScreenInfo();
          IEnumerator<ManagementBaseObject> enumerator = managementBaseObjects.GetEnumerator();
          try
          {
            num1 = 0;
            while (true)
            {
              ManagementBaseObject current;
              int num2;
              switch (num1)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  num2 = 3;
                  num1 = num2;
                  continue;
                case 2:
                  if (enumerator.MoveNext())
                  {
                    current = enumerator.Current;
                    num2 = 5;
                    num1 = num2;
                    continue;
                  }
                  num2 = 1;
                  if (num2 == 0)
                    ;
                  num2 = 1;
                  num1 = num2;
                  continue;
                case 3:
                  goto label_22;
                case 5:
                  screenInfo.Height = new int?((screenInfo.Height ?? 0) + (int) current.a<uint>(Utils.a("蓆볈맊뿌\uAACE뿐\uA7D2菔닖ꯘ꿚드볞胠迢럤苦髨蓪臬髮藰髲髴駶", A_1)));
                  num2 = 6;
                  num1 = num2;
                  continue;
                case 6:
                  screenInfo.Width = new int?((screenInfo.Width ?? 0) + (int) current.a<uint>(Utils.a("蓆볈맊뿌\uAACE뿐\uA7D2鷔룖ꯘ닚\uA7DC냞迠韢蓤详믨軪黬胮鷰蛲致黶雸闺", A_1)));
                  screenInfo.RefreshRate = new int?((int) current.a<uint>(Utils.a("蓆볈맊뿌\uAACE뿐\uA7D2蟔닖뿘\uA9DA룜곞觠뇢蓤鏦賨", A_1)));
                  screenInfo.Name = current.b(Utils.a("视\uA8C8ꛊ\uA8CC", A_1));
                  num2 = 4;
                  num1 = num2;
                  continue;
              }
              num2 = 2;
              num1 = num2;
            }
          }
          finally
          {
            int num3 = 31993;
            switch (31993 == num3 ? 1 : 0)
            {
              case 0:
              case 2:
label_16:
                switch (0)
                {
                  case 0:
                    goto label_18;
                }
                break;
              default:
                num3 = 0;
                if (num3 == 0)
                  ;
                num3 = 1;
                num1 = num3;
                break;
            }
label_17:
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_21;
                case 1:
                  goto label_16;
                case 2:
                  enumerator.Dispose();
                  num3 = 0;
                  num1 = num3;
                  continue;
                default:
                  goto label_18;
              }
            }
label_18:
            if (enumerator != null)
            {
              num3 = 2;
              num1 = num3;
              goto label_17;
            }
label_21:;
          }
label_22:
          A_0.Screen = screenInfo;
          break;
      }
    }

    private static void d(SystemInfo A_0)
    {
      int A_1 = 10;
label_1:
      int num1;
      int num2;
      ManagementBaseObject A_0_1;
      VideoInfo videoInfo;
      switch (0)
      {
        case 0:
label_5:
          A_0_1 = Utils.a("\uEDBD薿軁臃藅鳇\uEAC9迋믍ꋏꃑ뇓룕곗铙\uA9DB돝苟蟡難ꧥ軧ꧩ菫苭\u9FEF胱蟳\uDAF5\uD8F7뻹軻韽盿朁瘃倅洇砉缋服缏簑㠓㘕夗縙紛渝吟䜡嘣琥椧朩+อ縯匱夳匵ᠷ簹渻焽ി扁ፃ⽅♇祉繋ᅍُ㭑こ㍕㝗ᥙ㍛そᑟၡୣ\u0A65ѧཀྵṫ", A_1).a().LastOrDefault<ManagementBaseObject>();
          videoInfo = new VideoInfo();
          num1 = 1;
          num2 = num1;
          goto default;
        default:
          while (true)
          {
            num1 = -26426;
            int num3 = num1;
            num1 = -26426;
            int num4 = num1;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                num1 = 0;
                if (num1 == 0)
                  ;
                switch (num2)
                {
                  case 0:
                    goto label_9;
                  case 1:
                    if (A_0_1 != null)
                    {
                      num1 = 2;
                      num2 = num1;
                      continue;
                    }
                    goto label_10;
                  case 2:
                    videoInfo.Colors = new long?((long) A_0_1.a<ulong>(Utils.a("ﶽ떿냁뛃ꏅꛇ뻉苋믍뷏냑뇓ꓕ韗볙\u9FDB뇝賟跡難闥", A_1)));
                    videoInfo.Driver = A_0_1.b(Utils.a("諾늿ꯁ닃ꏅ뫇鳉꧋볍ꏏ믑믓룕", A_1));
                    videoInfo.Memory = new int?((int) (A_0_1.a<uint>(Utils.a("ﾽ꒿ꏁ듃닅귇룉黋迍鷏", A_1)) / 1048576U));
                    videoInfo.Name = A_0_1.b(Utils.a("\uF0BDꆿ꿁ꇃ", A_1));
                    num1 = 0;
                    num2 = num1;
                    continue;
                  default:
                    goto label_5;
                }
            }
          }
label_9:
          num1 = 1;
          if (num1 == 0)
            ;
label_10:
          A_0.Video = videoInfo;
          break;
      }
    }

    private static void c(SystemInfo A_0)
    {
      int A_1 = 8;
      int num1 = 0;
      switch (num1)
      {
        default:
          string A_0_1;
          ManagementBaseObject A_0_2;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              A_0_1 = Utils.a("\uEFBB﮽貿蟁蟃鋅\uE8C7诉ꃋꋍ뿏ꗑ胓藕鯗뗙닛냝藟臡郣迥蟧蓩\u9FEB십탯뻱鷳闵鷷铹迻韽滿攁䨃朅攇漉\u200B⸍䐏眑易笕焗琙紛爝猟䜡嘣倥䴧堩愫䄭启圱ᐳ瀵樷甹焻ḽ\u173F⭁⩃畅穇ᕉᡋ⭍≏㽑㵓㡕㥗㙙ཛ㭝\u125Fᑡൣե൧㥩५ᩭѯ᭱ᩳᅵ", A_1);
              A_0_2 = A_0_1.a().LastOrDefault<ManagementBaseObject>();
              num2 = 0;
              num1 = num2;
              goto default;
            default:
              TerminalServicesInfo terminalServicesInfo;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    if (A_0_2 == null)
                    {
                      num2 = 5;
                      num1 = num2;
                      continue;
                    }
                    goto case 6;
                  case 1:
                    ref TerminalServicesInfo local = ref terminalServicesInfo;
                    uint? nullable1 = A_0_2.a<uint?>(Utils.a("\uE8BB\uDBBD늿꿁귃\uA8C5꧇ꛉ鿋ꯍꋏꓑ뇓ꓕ闗뗙룛믝", A_1));
                    TerminalServicesMode? nullable2 = nullable1.HasValue ? new TerminalServicesMode?((TerminalServicesMode) nullable1.GetValueOrDefault()) : new TerminalServicesMode?();
                    local.Mode = nullable2;
                    num2 = 19197;
                    int num3 = num2;
                    num2 = 19197;
                    int num4 = num2;
                    switch (num3 == num4 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        break;
                      default:
                        num2 = 0;
                        if (num2 == 0)
                          ;
                        num2 = 3;
                        num1 = num2;
                        continue;
                    }
                    break;
                  case 2:
                    terminalServicesInfo.ConnectionsAllowed = new bool?(A_0_2.a<uint>(Utils.a("ﶻ튽겿귁돃鋅鯇觉ꏋꃍ뻏럑럓ꋕ뇗뗙닛귝", A_1)) == 1U);
                    terminalServicesInfo.Licensing = A_0_2.b(Utils.a("\uF0BBힽꎿ\uA7C1\uAAC3뗅ꇇ\uA4C9ꯋ胍뇏뿑뇓", A_1));
                    num2 = 1;
                    num1 = num2;
                    continue;
                  case 3:
                    goto label_16;
                  case 4:
                    if (A_0_2 != null)
                    {
                      num2 = 1;
                      if (num2 == 0)
                        ;
                      num2 = 2;
                      num1 = num2;
                      continue;
                    }
                    goto label_16;
                  case 5:
                    A_0_2 = A_0_1.a(Utils.a("캻톽꾿뛁飃藅臇蟉髋ﳍ賏蛑뇓ꓕ뗗동닛뿝賟뇡臣铥黧菩迫语華", A_1)).LastOrDefault<ManagementBaseObject>();
                    num2 = 6;
                    num1 = num2;
                    continue;
                  case 6:
                    terminalServicesInfo = new TerminalServicesInfo();
                    break;
                  default:
                    goto label_3;
                }
                num2 = 4;
                num1 = num2;
              }
label_16:
              A_0.TerminalServices = terminalServicesInfo;
              return;
          }
      }
    }

    private static void b(SystemInfo A_0)
    {
      int A_1 = 0;
label_1:
      int num1 = 1;
      if (num1 == 0)
        ;
      int num2;
      ManagementBaseObject A_0_1;
      SoundInfo soundInfo;
      switch (0)
      {
        case 0:
label_6:
          A_0_1 = Utils.a("\uE7B3\uF3B5\uF4B7ﾹﾻ\uEABD\uE0BF迁ꗃ\uA8C5뷇곉귋귍\uA4CF\uA7D1ꛓ돕\uAAD7\uF6D9ﳛ軝鋟跡胣鏥诧黩ꋫ迭鷯韱퓳냵\uAAF7뗹뇻\uDEFD埿欁樃㔅㨇唉弋愍攏簑瀓刕紗氙甛紝䔟", A_1).a().LastOrDefault<ManagementBaseObject>();
          soundInfo = new SoundInfo();
          num1 = 1;
          num2 = num1;
          goto default;
        default:
          while (true)
          {
            num1 = 12213;
            int num3 = num1;
            num1 = 12213;
            int num4 = num1;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                num1 = 0;
                if (num1 == 0)
                  ;
                switch (num2)
                {
                  case 0:
                    goto label_10;
                  case 1:
                    if (A_0_1 != null)
                    {
                      num1 = 2;
                      num2 = num1;
                      continue;
                    }
                    goto label_10;
                  case 2:
                    soundInfo.Manufacturer = A_0_1.b(Utils.a("靈ힵ횷쾹\uDABB\uDFBDꎿ뛁뇃듅귇룉", A_1));
                    soundInfo.Model = A_0_1.b(Utils.a("\uE4B3쒵ힷ\uDEB9즻\uDDBD뒿賁ꗃꯅ귇", A_1));
                    num1 = 0;
                    num2 = num1;
                    continue;
                  default:
                    goto label_6;
                }
            }
          }
label_10:
          A_0.Sound = soundInfo;
          break;
      }
    }

    private static void a(SystemInfo A_0)
    {
      int A_1 = 8;
label_1:
      int num1;
      int num2;
      ManagementBaseObject A_0_1;
      ModemInfo modemInfo;
      switch (0)
      {
        case 0:
label_5:
          A_0_1 = Utils.a("\uEFBB﮽貿蟁蟃鋅\uE8C7蟉ꏋ\uAACD뗏뻑\uF8D3\uF6D5鳗뿙ꫛ럝菟蟡냣\u9FE5飧迩쳫꣭ꋯ뷱맳훵꿷鏹鋻췽\u32FF崁吃䤅將変䄋愍琏眑礓", A_1).a().LastOrDefault<ManagementBaseObject>();
          modemInfo = new ModemInfo();
          num1 = 1;
          num2 = num1;
          goto default;
        default:
          while (true)
          {
            num1 = -2472;
            int num3 = num1;
            num1 = -2472;
            int num4 = num1;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                num1 = 0;
                if (num1 == 0)
                  ;
                switch (num2)
                {
                  case 0:
                    goto label_10;
                  case 1:
                    num1 = 1;
                    if (num1 == 0)
                      ;
                    if (A_0_1 != null)
                    {
                      num1 = 2;
                      num2 = num1;
                      continue;
                    }
                    goto label_10;
                  case 2:
                    modemInfo.Model = A_0_1.b(Utils.a("\uF1BB톽꒿\uA7C1ꣃ", A_1));
                    modemInfo.Type = A_0_1.b(Utils.a("\uF8BB\uDBBD뚿ꯁ\uA7C3ꏅ鳇돉볋ꯍ", A_1));
                    num1 = 0;
                    num2 = num1;
                    continue;
                  default:
                    goto label_5;
                }
            }
          }
label_10:
          A_0.Modem = modemInfo;
          break;
      }
    }

    private static string b(int A_0)
    {
      int A_1 = 0;
label_1:
      int num1;
      string str;
      int num2;
      switch (0)
      {
        case 0:
label_3:
          str = Utils.a("\uE1B3\uD8B5펷풹펻즽꺿", A_1);
          num2 = A_0;
          num1 = 1;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 3:
              case 4:
              case 5:
              case 6:
              case 9:
              case 10:
              case 11:
                goto label_19;
              case 1:
                switch (num2)
                {
                  case 0:
                    str = Utils.a("\uE1B3\uD8B5펷풹펻즽꺿", A_1);
                    num1 = 6;
                    continue;
                  case 1:
                    str = Utils.a("\uF2B3쎵풷횹鲻\uEEBD꾿뗁ꇃ듅", A_1);
                    num1 = 5;
                    continue;
                  case 2:
                    str = Utils.a("\uE4B3\uD9B5쾷\uDFB9캻麽鎿ꏁ닃ꏅ\uE8C7\uE7C9\uECCB苍뿏ꗑ\uF4D3蛕럗귙맛곝샟꿡诣若跧", A_1);
                    num1 = 7;
                    continue;
                  case 3:
                    str = Utils.a("\uE4B3\uD9B5쾷\uDFB9캻麽鎿ꏁ닃ꏅ\uE8C7\uE7C9\uECCB鷍\uA4CF돑뫓닕뫗ꏙ", A_1);
                    num1 = 4;
                    continue;
                  case 4:
                    str = Utils.a("\uE4B3\uD9B5쾷\uDFB9캻麽鎿ꏁ닃ꏅ\uE8C7\uE7C9\uECCB鯍뻏맑뫓맕꿗듙", A_1);
                    num1 = 10;
                    continue;
                  case 5:
                    str = Utils.a("\uE4B3\uD9B5쾷\uDFB9캻麽莿믁\uA7C3\uAAC5귇", A_1);
                    num1 = 9;
                    continue;
                  case 6:
                    str = Utils.a("\uE4B3\uD9B5쾷\uDFB9캻麽辿꓁ꋃ", A_1);
                    num1 = 0;
                    continue;
                  case 7:
                    if (false)
                      ;
                    str = Utils.a("\uE4B3\uD9B5쾷\uDFB9캻麽鎿ꏁ닃ꏅ\uE8C7\uE7C9\uECCB駍뇏ꃑ뫓뿕뛗뷙", A_1);
                    num1 = 11;
                    continue;
                  default:
                    num1 = 2;
                    continue;
                }
              case 2:
                num1 = 8;
                continue;
              case 7:
                goto label_15;
              case 8:
                str = Utils.a("\uE1B3\uD8B5펷풹펻즽꺿", A_1);
                num1 = 3;
                continue;
              default:
                goto label_3;
            }
          }
label_15:
          switch (true ? 1 : 0)
          {
            case 0:
            case 2:
              goto label_1;
            default:
              if (true)
                break;
              break;
          }
label_19:
          return str;
      }
    }

    private static string a(int A_0)
    {
      int A_1 = 10;
      int num1 = 5754;
      int num2 = num1;
      num1 = 5754;
      int num3 = num1;
      int num4;
      string str;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_13:
          str = Utils.a("\uEEBD늿ꯁ꧃\uA7C5뫇돉\uECCB諍뿏뿑뗓뿕뛗龎\u9FDB뇝軟雡難觥蓧蛩觫鳭", A_1);
          num4 = 2;
          break;
        default:
          if (true)
            ;
          switch (0)
          {
            case 0:
              goto label_4;
          }
          break;
      }
label_3:
      int num5;
      while (true)
      {
        switch (num4)
        {
          case 0:
            if (false)
              ;
            switch (num5)
            {
              case 0:
                str = Utils.a("\uEDBD뒿ꏁ\uAAC3ꋅ꧇ꛉꏋꃍ뗏\uF2D1菓맕\uAAD7뇙꿛ꫝ臟雡跣觥蛧", A_1);
                num4 = 9;
                continue;
              case 1:
                str = Utils.a("\uF3BDꖿ꿁ꛃꏅ뫇\uEAC9鯋ꇍꋏ맑\uA7D3ꋕ맗껙뗛뇝軟", A_1);
                num4 = 6;
                continue;
              case 2:
                str = Utils.a("\uEDBD뒿ꏁ\uAAC3ꋅ꧇ꛉꏋꃍ뗏\uF2D1蟓돕\uAAD7곙맛곝", A_1);
                num4 = 3;
                continue;
              case 3:
                str = Utils.a("\uF3BDꖿ꿁ꛃꏅ뫇\uEAC9鿋ꯍꋏꓑ뇓ꓕ", A_1);
                num4 = 4;
                continue;
              case 4:
                str = Utils.a("ﲽꆿꇁ꿃독룇\uEAC9裋ꇍ뷏돑뷓룕\uF8D7駙돛냝铟郡诣諥蓧迩黫", A_1);
                num4 = 8;
                continue;
              case 5:
                goto label_13;
              default:
                num4 = 1;
                continue;
            }
          case 1:
            num4 = 7;
            continue;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 8:
          case 9:
            goto label_16;
          case 7:
            str = Utils.a("\uEBBD꺿꧁\uAAC3꧅뿇\uA4C9", A_1);
            num4 = 5;
            continue;
          default:
            goto label_4;
        }
      }
label_16:
      return str;
label_4:
      str = Utils.a("\uEBBD꺿꧁\uAAC3꧅뿇\uA4C9", A_1);
      num5 = A_0;
      num4 = 0;
      goto label_3;
    }
  }
}
