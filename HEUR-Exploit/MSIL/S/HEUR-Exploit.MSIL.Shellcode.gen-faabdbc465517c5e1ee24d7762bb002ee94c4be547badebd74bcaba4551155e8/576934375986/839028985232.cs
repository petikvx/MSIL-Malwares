// Decompiled with JetBrains decompiler
// Type: 576934375986.839028985232
// Assembly: 044201292638, Version=5.6.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 5F642552-7ED7-4776-987B-53B72981CCE1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-faabdbc465517c5e1ee24d7762bb002ee94c4be547badebd74bcaba4551155e8.exe

using \u003366499639653;
using \u003576934375986;
using System;
using System.Collections.Generic;
using System.Linq;

namespace \u003576934375986
{
  public class \u003839028985232
  {
    public static readonly \u003963119542679 \u003547243903312 = \u003963119542679.Build | \u003963119542679.ContentFiles | \u003963119542679.Analyzers;
    public static readonly \u003963119542679 \u003099325299534 = \u003963119542679.Runtime | \u003963119542679.Compile | \u003963119542679.Build | \u003963119542679.Native | \u003963119542679.Analyzers | \u003963119542679.BuildTransitive;

    public static \u003963119542679 \u003127510572972(IEnumerable<string> _param0)
    {
      if (_param0 == null)
        throw new ArgumentNullException("flags");
      \u003963119542679 obj = \u003963119542679.None;
      foreach (string str in _param0)
      {
        string lowerInvariant = str.ToLowerInvariant();
        if (lowerInvariant != null)
        {
          // ISSUE: reference to a compiler-generated method
          switch (\u003549607878747.\u003206075270279(lowerInvariant))
          {
            case 321211332:
              if (lowerInvariant == "all")
              {
                obj |= \u003963119542679.All;
                continue;
              }
              continue;
            case 608588554:
              if (lowerInvariant == "native")
              {
                obj |= \u003963119542679.Native;
                continue;
              }
              continue;
            case 1000265118:
              if (lowerInvariant == "compile")
              {
                obj |= \u003963119542679.Compile;
                continue;
              }
              continue;
            case 1065913045:
              if (lowerInvariant == "contentfiles")
              {
                obj |= \u003963119542679.ContentFiles;
                continue;
              }
              continue;
            case 1153448235:
              if (lowerInvariant == "runtime")
              {
                obj |= \u003963119542679.Runtime;
                continue;
              }
              continue;
            case 3281777315:
              if (lowerInvariant == "build")
              {
                obj |= \u003963119542679.Build;
                continue;
              }
              continue;
            case 3314174448:
              if (lowerInvariant == "buildtransitive")
              {
                obj |= \u003963119542679.Build | \u003963119542679.BuildTransitive;
                continue;
              }
              continue;
            case 3907471104:
              if (lowerInvariant == "analyzers")
              {
                obj |= \u003963119542679.Analyzers;
                continue;
              }
              continue;
            default:
              continue;
          }
        }
      }
      return obj;
    }

    public static string \u003574292535751(\u003963119542679 _param0)
    {
      if (_param0 == \u003963119542679.None)
        return "none";
      if (_param0 == \u003963119542679.All)
        return "all";
      List<string> values = new List<string>();
      foreach (\u003963119542679 flag in Enum.GetValues(typeof (\u003963119542679)))
      {
        if (flag != \u003963119542679.None && _param0.HasFlag((Enum) flag))
          values.Add(flag.ToString().ToLowerInvariant());
      }
      return string.Join(", ", (IEnumerable<string>) values);
    }

    public static \u003963119542679 \u003441563827334(
      string _param0,
      \u003963119542679 _param1_1)
    {
      \u003963119542679 obj = _param1_1;
      if (!string.IsNullOrEmpty(_param0))
      {
        string[] array = ((IEnumerable<string>) _param0.Split(new char[1]
        {
          ','
        }, StringSplitOptions.RemoveEmptyEntries)).Select<string, string>((Func<string, string>) (_param1_2 => _param1_2.Trim())).Where<string>((Func<string, bool>) (_param1_3 => !string.IsNullOrEmpty(_param1_3))).ToArray<string>();
        if (array.Length != 0)
          obj = \u003839028985232.\u003127510572972((IEnumerable<string>) array);
      }
      return obj;
    }
  }
}
