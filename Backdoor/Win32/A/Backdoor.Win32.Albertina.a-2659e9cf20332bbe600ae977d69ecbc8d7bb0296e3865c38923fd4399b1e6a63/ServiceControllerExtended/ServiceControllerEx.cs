// Decompiled with JetBrains decompiler
// Type: ServiceControllerExtended.ServiceControllerEx
// Assembly: system64, Version=1.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3A793DDC-251A-4171-9485-CC449337E9FB
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.Albertina.a-2659e9cf20332bbe600ae977d69ecbc8d7bb0296e3865c38923fd4399b1e6a63.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Management;
using System.Runtime.CompilerServices;
using System.ServiceProcess;

namespace ServiceControllerExtended
{
  public class ServiceControllerEx : ServiceController
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();

    [DebuggerNonUserCode]
    static ServiceControllerEx()
    {
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (ServiceControllerEx.__ENCList)
      {
        if (ServiceControllerEx.__ENCList.Count == ServiceControllerEx.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (ServiceControllerEx.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (ServiceControllerEx.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                ServiceControllerEx.__ENCList[index1] = ServiceControllerEx.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          ServiceControllerEx.__ENCList.RemoveRange(index1, checked (ServiceControllerEx.__ENCList.Count - index1));
          ServiceControllerEx.__ENCList.Capacity = ServiceControllerEx.__ENCList.Count;
        }
        ServiceControllerEx.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    public ServiceControllerEx() => ServiceControllerEx.__ENCAddToList((object) this);

    public ServiceControllerEx(string name)
      : base(name)
    {
      ServiceControllerEx.__ENCAddToList((object) this);
    }

    public ServiceControllerEx(string name, string machineName)
      : base(name, machineName)
    {
      ServiceControllerEx.__ENCAddToList((object) this);
    }

    public string Description
    {
      get
      {
        ManagementObject managementObject = new ManagementObject(new ManagementPath("Win32_Service.Name='" + this.ServiceName + "'"));
        return managementObject[nameof (Description)] != null ? managementObject[nameof (Description)].ToString() : (string) null;
      }
    }

    public string StartupType
    {
      get => this.ServiceName != null ? new ManagementObject(new ManagementPath("Win32_Service.Name='" + this.ServiceName + "'"))["StartMode"].ToString() : (string) null;
      set
      {
        if (Operators.CompareString(value, "Automatic", false) == 0 || Operators.CompareString(value, "Manual", false) == 0 || Operators.CompareString(value, "Disabled", false) == 0)
          ;
        if (this.ServiceName == null)
          return;
        new ManagementObject(new ManagementPath("Win32_Service.Name='" + this.ServiceName + "'")).InvokeMethod("ChangeStartMode", new object[1]
        {
          (object) value
        });
      }
    }
  }
}
