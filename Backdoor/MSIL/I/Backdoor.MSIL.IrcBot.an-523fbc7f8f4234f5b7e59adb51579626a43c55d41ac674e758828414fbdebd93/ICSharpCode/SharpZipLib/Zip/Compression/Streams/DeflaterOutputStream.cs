// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Encryption;
using System;
using System.IO;
using System.Security.Cryptography;

namespace ICSharpCode.SharpZipLib.Zip.Compression.Streams
{
  public class DeflaterOutputStream : Stream
  {
    private string \uE004;
    private ICryptoTransform \uE003;
    private byte[] \uE002;
    protected Deflater deflater_;
    protected Stream baseOutputStream_;
    private bool \uE001;
    private bool \uE000 = true;

    public DeflaterOutputStream(Stream baseOutputStream)
      : this(baseOutputStream, new Deflater(), 512)
    {
    }

    public DeflaterOutputStream(Stream baseOutputStream, Deflater deflater)
      : this(baseOutputStream, deflater, 512)
    {
    }

    public DeflaterOutputStream(Stream baseOutputStream, Deflater deflater, int bufferSize)
    {
      if (baseOutputStream == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uE56B\uE568\uE57A\uE56C\uE546\uE57C\uE57D\uE579\uE57C\uE57D\uE55A\uE57D\uE57B\uE56C\uE568\uE564", 58633));
      if (!baseOutputStream.CanWrite)
        throw new ArgumentException(\uE01B.\uE000("\uE189\uE1B1\uE1B7\uE1B0\uE1E4\uE1B7\uE1B1\uE1B4\uE1B4\uE1AB\uE1B6\uE1B0\uE1E4\uE1B3\uE1B6\uE1AD\uE1B0\uE1AD\uE1AA\uE1A3", 57796), \uE01B.\uE000("\uE56B\uE568\uE57A\uE56C\uE546\uE57C\uE57D\uE579\uE57C\uE57D\uE55A\uE57D\uE57B\uE56C\uE568\uE564", 58633));
      if (deflater == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uE88A\uE88B\uE888\uE882\uE88F\uE89A\uE88B\uE89C", 59630));
      if (bufferSize <= 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEDCB\uEDDC\uEDCF\uEDCF\uEDCC\uEDDB\uEDFA\uEDC0\uEDD3\uEDCC", 60841));
      this.baseOutputStream_ = baseOutputStream;
      this.\uE002 = new byte[bufferSize];
      this.deflater_ = deflater;
    }

    public virtual void Finish()
    {
      this.deflater_.Finish();
      while (!this.deflater_.IsFinished)
      {
        int num = this.deflater_.Deflate(this.\uE002, 0, this.\uE002.Length);
        if (num > 0)
        {
          if (this.\uE003 != null)
            this.EncryptBlock(this.\uE002, 0, num);
          this.baseOutputStream_.Write(this.\uE002, 0, num);
        }
        else
          break;
      }
      if (!this.deflater_.IsFinished)
        throw new SharpZipBaseException(\uE01B.\uE000("\uF2ED\uF2CF\uF2C0\uF289\uF2DA\uF28E\uF2CA\uF2CB\uF2C8\uF2C2\uF2CF\uF2DA\uF2CB\uF28E\uF2CF\uF2C2\uF2C2\uF28E\uF2C7\uF2C0\uF2DE\uF2DB\uF2DA\uF291", 62126));
      this.baseOutputStream_.Flush();
      if (this.\uE003 == null)
        return;
      this.\uE003.Dispose();
      this.\uE003 = (ICryptoTransform) null;
    }

    public bool IsStreamOwner
    {
      get => this.\uE000;
      set => this.\uE000 = value;
    }

    public bool CanPatchEntries => this.baseOutputStream_.CanSeek;

    public string Password
    {
      get => this.\uE004;
      set
      {
        switch (value)
        {
          case null:
            this.\uE004 = value;
            break;
          default:
            if (value.Length == 0)
            {
              this.\uE004 = (string) null;
              break;
            }
            goto case null;
        }
      }
    }

    protected void EncryptBlock(byte[] buffer, int offset, int length) => this.\uE003.TransformBlock(buffer, 0, length, buffer, 0);

    protected void InitializePassword(string password) => this.\uE003 = new PkzipClassicManaged().CreateEncryptor(PkzipClassic.GenerateKeys(ZipConstants.ConvertToArray(password)), (byte[]) null);

    protected void Deflate()
    {
      while (!this.deflater_.IsNeedingInput)
      {
        int num = this.deflater_.Deflate(this.\uE002, 0, this.\uE002.Length);
        if (num > 0)
        {
          if (this.\uE003 != null)
            this.EncryptBlock(this.\uE002, 0, num);
          this.baseOutputStream_.Write(this.\uE002, 0, num);
        }
        else
          break;
      }
      if (!this.deflater_.IsNeedingInput)
        throw new SharpZipBaseException(\uE01B.\uE000("\uECAB\uEC8A\uEC89\uEC83\uEC8E\uEC9B\uEC8A\uEC9D\uECA0\uEC9A\uEC9B\uEC9F\uEC9A\uEC9B\uECBC\uEC9B\uEC9D\uEC8A\uEC8E\uEC82\uECCF\uEC8C\uEC8E\uEC81\uECC8\uEC9B\uECCF\uEC8B\uEC8A\uEC89\uEC83\uEC8E\uEC9B\uEC8A\uECCF\uEC8E\uEC83\uEC83\uECCF\uEC86\uEC81\uEC9F\uEC9A\uEC9B\uECD0", 60655));
    }

    public override bool CanRead => false;

    public override bool CanSeek => false;

    public override bool CanWrite => this.baseOutputStream_.CanWrite;

    public override long Length => this.baseOutputStream_.Length;

    public override long Position
    {
      get => this.baseOutputStream_.Position;
      set => throw new NotSupportedException(\uE01B.\uE000("\uF806\uF839\uF825\uF83F\uF822\uF83F\uF839\uF838\uF876\uF826\uF824\uF839\uF826\uF833\uF824\uF822\uF82F\uF876\uF838\uF839\uF822\uF876\uF825\uF823\uF826\uF826\uF839\uF824\uF822\uF833\uF832", 63574));
    }

    public override long Seek(long offset, SeekOrigin origin) => throw new NotSupportedException(\uE01B.\uE000("\uF88E\uF8AF\uF8AC\uF8A6\uF8AB\uF8BE\uF8AF\uF8B8\uF885\uF8BF\uF8BE\uF8BA\uF8BF\uF8BE\uF899\uF8BE\uF8B8\uF8AF\uF8AB\uF8A7\uF8EA\uF899\uF8AF\uF8AF\uF8A1\uF8EA\uF8A4\uF8A5\uF8BE\uF8EA\uF8B9\uF8BF\uF8BA\uF8BA\uF8A5\uF8B8\uF8BE\uF8AF\uF8AE", 63690));

    public override void SetLength(long value) => throw new NotSupportedException(\uE01B.\uE000("\uE916\uE937\uE934\uE93E\uE933\uE926\uE937\uE920\uE91D\uE927\uE926\uE922\uE927\uE926\uE901\uE926\uE920\uE937\uE933\uE93F\uE972\uE901\uE937\uE926\uE91E\uE937\uE93C\uE935\uE926\uE93A\uE972\uE93C\uE93D\uE926\uE972\uE921\uE927\uE922\uE922\uE93D\uE920\uE926\uE937\uE936", 59730));

    public override int ReadByte() => throw new NotSupportedException(\uE01B.\uE000("\uE32F\uE30E\uE30D\uE307\uE30A\uE31F\uE30E\uE319\uE324\uE31E\uE31F\uE31B\uE31E\uE31F\uE338\uE31F\uE319\uE30E\uE30A\uE306\uE34B\uE339\uE30E\uE30A\uE30F\uE329\uE312\uE31F\uE30E\uE34B\uE305\uE304\uE31F\uE34B\uE318\uE31E\uE31B\uE31B\uE304\uE319\uE31F\uE30E\uE30F", 58219));

    public override int Read(byte[] buffer, int offset, int count) => throw new NotSupportedException(\uE01B.\uE000("\uE433\uE412\uE411\uE41B\uE416\uE403\uE412\uE405\uE438\uE402\uE403\uE407\uE402\uE403\uE424\uE403\uE405\uE412\uE416\uE41A\uE457\uE425\uE412\uE416\uE413\uE457\uE419\uE418\uE403\uE457\uE404\uE402\uE407\uE407\uE418\uE405\uE403\uE412\uE413", 58487));

    public override IAsyncResult BeginRead(
      byte[] buffer,
      int offset,
      int count,
      AsyncCallback callback,
      object state)
    {
      throw new NotSupportedException(\uE01B.\uE000("\uEE20\uEE01\uEE02\uEE08\uEE05\uEE10\uEE01\uEE16\uEE2B\uEE11\uEE10\uEE14\uEE11\uEE10\uEE37\uEE10\uEE16\uEE01\uEE05\uEE09\uEE44\uEE26\uEE01\uEE03\uEE0D\uEE0A\uEE36\uEE01\uEE05\uEE00\uEE44\uEE0A\uEE0B\uEE10\uEE44\uEE07\uEE11\uEE16\uEE16\uEE01\uEE0A\uEE10\uEE08\uEE1D\uEE44\uEE17\uEE11\uEE14\uEE14\uEE0B\uEE16\uEE10\uEE01\uEE00", 61028));
    }

    public override IAsyncResult BeginWrite(
      byte[] buffer,
      int offset,
      int count,
      AsyncCallback callback,
      object state)
    {
      throw new NotSupportedException(\uE01B.\uE000("\uF786\uF7A1\uF7A3\uF7AD\uF7AA\uF793\uF7B6\uF7AD\uF7B0\uF7A1\uF7E4\uF7AD\uF7B7\uF7E4\uF7AA\uF7AB\uF7B0\uF7E4\uF7B7\uF7B1\uF7B4\uF7B4\uF7AB\uF7B6\uF7B0\uF7A1\uF7A0", 63428));
    }

    public override void Flush()
    {
      this.deflater_.Flush();
      this.Deflate();
      this.baseOutputStream_.Flush();
    }

    public override void Close()
    {
      if (this.\uE001)
        return;
      this.\uE001 = true;
      try
      {
        this.Finish();
        if (this.\uE003 == null)
          return;
        this.\uE003.Dispose();
        this.\uE003 = (ICryptoTransform) null;
      }
      finally
      {
        if (this.\uE000)
          this.baseOutputStream_.Close();
      }
    }

    public override void WriteByte(byte value) => this.Write(new byte[1]
    {
      value
    }, 0, 1);

    public override void Write(byte[] buffer, int offset, int count)
    {
      this.deflater_.SetInput(buffer, offset, count);
      this.Deflate();
    }
  }
}
