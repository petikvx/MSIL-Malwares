// Decompiled with JetBrains decompiler
// Type: ?1?.?52?
// Assembly: Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCE56BF6-1478-4F80-8758-2108CD9D4C80
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jtre-eb5e0b099fc84d1d2c2bf7760be02cd5b14c59a9a1650c18de62d6fa9084bb85.exe

using \u003F1\u003F;
using \u003F15\u003F;
using System;

namespace \u003F1\u003F
{
  internal class \u003F52\u003F
  {
    private static int \u003F1\u003F = 16384;
    private static int \u003F15\u003F = 286;
    private static int \u003F16\u003F = 30;
    private static int \u003F17\u003F = 19;
    private static int \u003F18\u003F = 16;
    private static int \u003F19\u003F = 17;
    private static int \u003F20\u003F = 18;
    private static int \u003F21\u003F = 256;
    private static int[] \u003F1\u003F = new int[19]
    {
      16,
      17,
      18,
      0,
      8,
      7,
      9,
      6,
      10,
      5,
      11,
      4,
      12,
      3,
      13,
      2,
      14,
      1,
      15
    };
    private static byte[] \u003F1\u003F = new byte[16]
    {
      (byte) 0,
      (byte) 8,
      (byte) 4,
      (byte) 12,
      (byte) 2,
      (byte) 10,
      (byte) 6,
      (byte) 14,
      (byte) 1,
      (byte) 9,
      (byte) 5,
      (byte) 13,
      (byte) 3,
      (byte) 11,
      (byte) 7,
      (byte) 15
    };
    public \u003F54\u003F \u003F1\u003F;
    private \u003F52\u003F.\u003F53\u003F \u003F1\u003F;
    private \u003F52\u003F.\u003F53\u003F \u003F15\u003F;
    private \u003F52\u003F.\u003F53\u003F \u003F16\u003F;
    private short[] \u003F1\u003F;
    private byte[] \u003F15\u003F;
    private int \u003F22\u003F;
    private int \u003F23\u003F;
    private static short[] \u003F15\u003F = new short[\u003F52\u003F.\u003F15\u003F];
    private static byte[] \u003F16\u003F = new byte[\u003F52\u003F.\u003F15\u003F];
    private static short[] \u003F16\u003F;
    private static byte[] \u003F17\u003F;

    static \u003F52\u003F()
    {
      int index1;
      for (index1 = 0; index1 < 144; \u003F52\u003F.\u003F16\u003F[index1++] = (byte) 8)
        \u003F52\u003F.\u003F15\u003F[index1] = \u003F52\u003F.\u003F1\u003F(48 + index1 << 8);
      for (; index1 < 256; \u003F52\u003F.\u003F16\u003F[index1++] = (byte) 9)
        \u003F52\u003F.\u003F15\u003F[index1] = \u003F52\u003F.\u003F1\u003F(256 + index1 << 7);
      for (; index1 < 280; \u003F52\u003F.\u003F16\u003F[index1++] = (byte) 7)
        \u003F52\u003F.\u003F15\u003F[index1] = \u003F52\u003F.\u003F1\u003F(index1 - 256 << 9);
      for (; index1 < \u003F52\u003F.\u003F15\u003F; \u003F52\u003F.\u003F16\u003F[index1++] = (byte) 8)
        \u003F52\u003F.\u003F15\u003F[index1] = \u003F52\u003F.\u003F1\u003F(index1 - 88 << 8);
      \u003F52\u003F.\u003F16\u003F = new short[\u003F52\u003F.\u003F16\u003F];
      \u003F52\u003F.\u003F17\u003F = new byte[\u003F52\u003F.\u003F16\u003F];
      for (int index2 = 0; index2 < \u003F52\u003F.\u003F16\u003F; ++index2)
      {
        \u003F52\u003F.\u003F16\u003F[index2] = \u003F52\u003F.\u003F1\u003F(index2 << 11);
        \u003F52\u003F.\u003F17\u003F[index2] = (byte) 5;
      }
    }

    public \u003F52\u003F(\u003F54\u003F _param1)
    {
      this.\u003F1\u003F = _param1;
      this.\u003F1\u003F = new \u003F52\u003F.\u003F53\u003F(this, \u003F52\u003F.\u003F15\u003F, 257, 15);
      this.\u003F15\u003F = new \u003F52\u003F.\u003F53\u003F(this, \u003F52\u003F.\u003F16\u003F, 1, 15);
      this.\u003F16\u003F = new \u003F52\u003F.\u003F53\u003F(this, \u003F52\u003F.\u003F17\u003F, 4, 7);
      this.\u003F1\u003F = new short[\u003F52\u003F.\u003F1\u003F];
      this.\u003F15\u003F = new byte[\u003F52\u003F.\u003F1\u003F];
    }

    public static short \u003F1\u003F(int _param0) => (short) ((int) \u003F52\u003F.\u003F1\u003F[_param0 & 15] << 12 | (int) \u003F52\u003F.\u003F1\u003F[_param0 >> 4 & 15] << 8 | (int) \u003F52\u003F.\u003F1\u003F[_param0 >> 8 & 15] << 4 | (int) \u003F52\u003F.\u003F1\u003F[_param0 >> 12]);

    public void \u003F1\u003F()
    {
      this.\u003F22\u003F = 0;
      this.\u003F23\u003F = 0;
      this.\u003F1\u003F.\u003F1\u003F();
      this.\u003F15\u003F.\u003F1\u003F();
      this.\u003F16\u003F.\u003F1\u003F();
    }

    private int \u003F15\u003F(int _param1)
    {
      if (_param1 == (int) byte.MaxValue)
        return 285;
      int num = 257;
      for (; _param1 >= 8; _param1 >>= 1)
        num += 4;
      return num + _param1;
    }

    private int \u003F16\u003F(int _param1)
    {
      int num = 0;
      for (; _param1 >= 4; _param1 >>= 1)
        num += 2;
      return num + _param1;
    }

    public void \u003F17\u003F(int _param1)
    {
      this.\u003F16\u003F.\u003F16\u003F();
      this.\u003F1\u003F.\u003F16\u003F();
      this.\u003F15\u003F.\u003F16\u003F();
      this.\u003F1\u003F.\u003F1\u003F(this.\u003F1\u003F.\u003F15\u003F - 257, 5);
      this.\u003F1\u003F.\u003F1\u003F(this.\u003F15\u003F.\u003F15\u003F - 1, 5);
      this.\u003F1\u003F.\u003F1\u003F(_param1 - 4, 4);
      for (int index = 0; index < _param1; ++index)
        this.\u003F1\u003F.\u003F1\u003F((int) this.\u003F16\u003F.\u003F1\u003F[\u003F52\u003F.\u003F1\u003F[index]], 3);
      this.\u003F1\u003F.\u003F15\u003F(this.\u003F16\u003F);
      this.\u003F15\u003F.\u003F15\u003F(this.\u003F16\u003F);
    }

    public void \u003F15\u003F()
    {
      for (int index = 0; index < this.\u003F22\u003F; ++index)
      {
        int num1 = (int) this.\u003F15\u003F[index] & (int) byte.MaxValue;
        int num2 = (int) this.\u003F1\u003F[index];
        int num3 = num2 - 1;
        if (num2 == 0)
        {
          this.\u003F1\u003F.\u003F1\u003F(num1);
          continue;
        }
        int num4 = this.\u003F15\u003F(num1);
        this.\u003F1\u003F.\u003F1\u003F(num4);
        int num5 = (num4 - 261) / 4;
        if (num5 > 0 && num5 <= 5)
          goto label_7;
label_2:
        int num6 = this.\u003F16\u003F(num3);
        this.\u003F15\u003F.\u003F1\u003F(num6);
        int num7 = num6 / 2 - 1;
        if (num7 > 0)
        {
          this.\u003F1\u003F.\u003F1\u003F(num3 & (1 << num7) - 1, num7);
          continue;
        }
        continue;
label_7:
        this.\u003F1\u003F.\u003F1\u003F(num1 & (1 << num5) - 1, num5);
        goto label_2;
      }
      this.\u003F1\u003F.\u003F1\u003F(\u003F52\u003F.\u003F21\u003F);
    }

    public void \u003F1\u003F(byte[] _param1, int _param2, int _param3, bool _param4)
    {
      this.\u003F1\u003F.\u003F1\u003F(_param4 ? 1 : 0, 3);
      this.\u003F1\u003F.\u003F16\u003F();
      this.\u003F1\u003F.\u003F15\u003F(_param3);
      this.\u003F1\u003F.\u003F15\u003F(~_param3);
      this.\u003F1\u003F.\u003F1\u003F(_param1, _param2, _param3);
      this.\u003F1\u003F();
    }

    public void \u003F15\u003F(byte[] _param1, int _param2, int _param3, bool _param4)
    {
      ++this.\u003F1\u003F.\u003F1\u003F[\u003F52\u003F.\u003F21\u003F];
      this.\u003F1\u003F.\u003F17\u003F();
      this.\u003F15\u003F.\u003F17\u003F();
      this.\u003F1\u003F.\u003F1\u003F(this.\u003F16\u003F);
      this.\u003F15\u003F.\u003F1\u003F(this.\u003F16\u003F);
      this.\u003F16\u003F.\u003F17\u003F();
      int num1 = 4;
      for (int index = 18; index > num1; --index)
      {
        if (this.\u003F16\u003F.\u003F1\u003F[\u003F52\u003F.\u003F1\u003F[index]] <= (byte) 0)
          continue;
        num1 = index + 1;
      }
      int num2 = 14 + num1 * 3 + this.\u003F16\u003F.\u003F18\u003F() + this.\u003F1\u003F.\u003F18\u003F() + this.\u003F15\u003F.\u003F18\u003F() + this.\u003F23\u003F;
      int num3 = this.\u003F23\u003F;
      for (int index = 0; index < \u003F52\u003F.\u003F15\u003F; ++index)
        num3 += (int) this.\u003F1\u003F.\u003F1\u003F[index] * (int) \u003F52\u003F.\u003F16\u003F[index];
      for (int index = 0; index < \u003F52\u003F.\u003F16\u003F; ++index)
        num3 += (int) this.\u003F15\u003F.\u003F1\u003F[index] * (int) \u003F52\u003F.\u003F17\u003F[index];
      if (num2 >= num3)
        goto label_15;
label_8:
      if (_param2 < 0 || _param3 + 4 >= num2 >> 3)
      {
        if (num2 != num3)
        {
          this.\u003F1\u003F.\u003F1\u003F(4 + (_param4 ? 1 : 0), 3);
          this.\u003F17\u003F(num1);
          this.\u003F15\u003F();
          this.\u003F1\u003F();
          return;
        }
        this.\u003F1\u003F.\u003F1\u003F(2 + (_param4 ? 1 : 0), 3);
        this.\u003F1\u003F.\u003F1\u003F(\u003F52\u003F.\u003F15\u003F, \u003F52\u003F.\u003F16\u003F);
        this.\u003F15\u003F.\u003F1\u003F(\u003F52\u003F.\u003F16\u003F, \u003F52\u003F.\u003F17\u003F);
        this.\u003F15\u003F();
        this.\u003F1\u003F();
        return;
      }
      this.\u003F1\u003F(_param1, _param2, _param3, _param4);
      return;
label_15:
      num2 = num3;
      goto label_8;
    }

    public bool \u003F16\u003F() => this.\u003F22\u003F + 16 >= \u003F52\u003F.\u003F1\u003F;

    public bool \u003F18\u003F(int _param1)
    {
      this.\u003F1\u003F[this.\u003F22\u003F] = (short) 0;
      this.\u003F15\u003F[this.\u003F22\u003F++] = (byte) _param1;
      ++this.\u003F1\u003F.\u003F1\u003F[_param1];
      return this.\u003F16\u003F();
    }

    public bool \u003F1\u003F(int _param1, int _param2)
    {
      this.\u003F1\u003F[this.\u003F22\u003F] = (short) _param1;
      this.\u003F15\u003F[this.\u003F22\u003F++] = (byte) (_param2 - 3);
      int index1 = this.\u003F15\u003F(_param2 - 3);
      ++this.\u003F1\u003F.\u003F1\u003F[index1];
      if (index1 >= 265 && index1 < 285)
        goto label_3;
label_1:
      int index2 = this.\u003F16\u003F(_param1 - 1);
      ++this.\u003F15\u003F.\u003F1\u003F[index2];
      if (index2 >= 4)
        goto label_4;
label_2:
      return this.\u003F16\u003F();
label_4:
      this.\u003F23\u003F += index2 / 2 - 1;
      goto label_2;
label_3:
      this.\u003F23\u003F += (index1 - 261) / 4;
      goto label_1;
    }

    internal class \u003F53\u003F
    {
      public short[] \u003F1\u003F;
      public short[] \u003F15\u003F;
      public byte[] \u003F1\u003F;
      public int[] \u003F1\u003F;
      public int \u003F1\u003F;
      public int \u003F15\u003F;
      public int \u003F16\u003F;
      private \u003F52\u003F \u003F1\u003F;

      public \u003F53\u003F(\u003F52\u003F _param1, int _param2, int _param3, int _param4)
      {
        this.\u003F1\u003F = _param1;
        this.\u003F1\u003F = _param3;
        this.\u003F16\u003F = _param4;
        this.\u003F1\u003F = new short[_param2];
        this.\u003F1\u003F = new int[_param4];
      }

      public void \u003F1\u003F()
      {
        for (int index = 0; index < this.\u003F1\u003F.Length; ++index)
          this.\u003F1\u003F[index] = (short) 0;
        this.\u003F15\u003F = (short[]) null;
        this.\u003F1\u003F = (byte[]) null;
      }

      public void \u003F1\u003F(int _param1) => this.\u003F1\u003F.\u003F1\u003F.\u003F1\u003F((int) this.\u003F15\u003F[_param1] & (int) ushort.MaxValue, (int) this.\u003F1\u003F[_param1]);

      public void \u003F15\u003F()
      {
        bool flag = true;
        for (int index = 0; index < this.\u003F1\u003F.Length; ++index)
        {
          if (this.\u003F1\u003F[index] == (short) 0)
            continue;
          flag = false;
        }
        if (!flag)
          throw new Exception();
      }

      public void \u003F1\u003F(short[] _param1, byte[] _param2)
      {
        this.\u003F15\u003F = _param1;
        this.\u003F1\u003F = _param2;
      }

      public void \u003F16\u003F()
      {
        int length = this.\u003F1\u003F.Length;
        int[] numArray = new int[this.\u003F16\u003F];
        int num1 = 0;
        this.\u003F15\u003F = new short[this.\u003F1\u003F.Length];
        for (int index = 0; index < this.\u003F16\u003F; ++index)
        {
          numArray[index] = num1;
          num1 += this.\u003F1\u003F[index] << 15 - index;
        }
        for (int index = 0; index < this.\u003F15\u003F; ++index)
        {
          int num2 = (int) this.\u003F1\u003F[index];
          if (num2 <= 0)
            continue;
          this.\u003F15\u003F[index] = \u003F52\u003F.\u003F1\u003F(numArray[num2 - 1]);
          numArray[num2 - 1] += 1 << 16 - num2;
        }
      }

      private void \u003F1\u003F(int[] _param1)
      {
        this.\u003F1\u003F = new byte[this.\u003F1\u003F.Length];
        int length = _param1.Length / 2;
        int num1 = (length + 1) / 2;
        int num2 = 0;
        for (int index = 0; index < this.\u003F16\u003F; ++index)
          this.\u003F1\u003F[index] = 0;
        int[] numArray = new int[length];
        numArray[length - 1] = 0;
        for (int index = length - 1; index >= 0; --index)
        {
          if (_param1[2 * index + 1] == -1)
          {
            ++this.\u003F1\u003F[numArray[index] - 1];
            this.\u003F1\u003F[_param1[2 * index]] = (byte) numArray[index];
            continue;
          }
          int num3 = numArray[index] + 1;
          if (num3 > this.\u003F16\u003F)
            goto label_18;
label_4:
          numArray[_param1[2 * index]] = numArray[_param1[2 * index + 1]] = num3;
          continue;
label_18:
          num3 = this.\u003F16\u003F;
          num2++;
          goto label_4;
        }
        if (num2 == 0)
          return;
        int index1 = this.\u003F16\u003F - 1;
        do
        {
          do
            ;
          while (this.\u003F1\u003F[--index1] == 0);
          do
          {
            --this.\u003F1\u003F[index1];
            ++this.\u003F1\u003F[++index1];
            num2 -= 1 << this.\u003F16\u003F - 1 - index1;
          }
          while (num2 > 0 && index1 < this.\u003F16\u003F - 1);
        }
        while (num2 > 0);
        this.\u003F1\u003F[this.\u003F16\u003F - 1] += num2;
        this.\u003F1\u003F[this.\u003F16\u003F - 2] -= num2;
        int num4 = 2 * num1;
        for (int index2 = this.\u003F16\u003F; index2 != 0; --index2)
        {
          int num5 = this.\u003F1\u003F[index2 - 1];
          while (num5 > 0)
          {
            int index3 = 2 * _param1[num4++];
            if (_param1[index3 + 1] == -1)
            {
              this.\u003F1\u003F[_param1[index3]] = (byte) index2;
              --num5;
            }
          }
        }
      }

      public void \u003F17\u003F()
      {
        int length = this.\u003F1\u003F.Length;
        int[] numArray1 = new int[length];
        int num1 = 0;
        int num2 = 0;
        for (int index1 = 0; index1 < length; ++index1)
        {
          int num3 = (int) this.\u003F1\u003F[index1];
          if (num3 == 0)
            continue;
          int index2;
          int index3;
          for (index2 = num1++; index2 > 0 && (int) this.\u003F1\u003F[numArray1[index3 = (index2 - 1) / 2]] > num3; index2 = index3)
            numArray1[index2] = numArray1[index3];
          numArray1[index2] = index1;
          num2 = index1;
        }
        int num4;
        for (; num1 < 2; numArray1[num1++] = num4)
        {
          int num5;
          if (num2 < 2)
            num2 = num5 = num2 + 1;
          else
            goto label_28;
label_9:
          num4 = num5;
          continue;
label_28:
          num5 = 0;
          goto label_9;
        }
        this.\u003F15\u003F = Math.Max(num2 + 1, this.\u003F1\u003F);
        int num6 = num1;
        int[] numArray2 = new int[4 * num1 - 2];
        int[] numArray3 = new int[2 * num1 - 1];
        int num7 = num6;
        for (int index4 = 0; index4 < num1; ++index4)
        {
          int index5 = numArray1[index4];
          numArray2[2 * index4] = index5;
          numArray2[2 * index4 + 1] = -1;
          numArray3[index4] = (int) this.\u003F1\u003F[index5] << 8;
          numArray1[index4] = index4;
        }
        do
        {
          int index6 = numArray1[0];
          int index7 = numArray1[--num1];
          int index8 = 0;
          for (int index9 = 1; index9 < num1; index9 = index9 * 2 + 1)
          {
            if (index9 + 1 < num1 && numArray3[numArray1[index9]] > numArray3[numArray1[index9 + 1]])
              goto label_30;
label_15:
            numArray1[index8] = numArray1[index9];
            index8 = index9;
            continue;
label_30:
            ++index9;
            goto label_15;
          }
          int num8 = numArray3[index7];
          int index10;
          while ((index10 = index8) > 0)
          {
            int[] numArray4 = numArray3;
            int[] numArray5 = numArray1;
            int num9 = index10 - 1;
            int index11;
            index8 = index11 = num9 / 2;
            int index12 = numArray5[index11];
            if (numArray4[index12] > num8)
              numArray1[index10] = numArray1[index8];
            else
              break;
          }
          numArray1[index10] = index7;
          int index13 = numArray1[0];
          int index14 = num7++;
          numArray2[2 * index14] = index6;
          numArray2[2 * index14 + 1] = index13;
          int num10 = Math.Min(numArray3[index6] & (int) byte.MaxValue, numArray3[index13] & (int) byte.MaxValue);
          int num11;
          numArray3[index14] = num11 = numArray3[index6] + numArray3[index13] - num10 + 1;
          int index15 = 0;
          for (int index16 = 1; index16 < num1; index16 = index15 * 2 + 1)
          {
            if (index16 + 1 < num1 && numArray3[numArray1[index16]] > numArray3[numArray1[index16 + 1]])
              goto label_33;
label_21:
            numArray1[index15] = numArray1[index16];
            index15 = index16;
            continue;
label_33:
            ++index16;
            goto label_21;
          }
          int index17;
          while ((index17 = index15) > 0)
          {
            int[] numArray6 = numArray3;
            int[] numArray7 = numArray1;
            int num12 = index17;
            int index18;
            index15 = index18 = (num12 - 1) / 2;
            int index19 = numArray7[index18];
            if (numArray6[index19] > num11)
              numArray1[index17] = numArray1[index15];
            else
              break;
          }
          numArray1[index17] = index14;
        }
        while (num1 > 1);
        if (numArray1[0] != numArray2.Length / 2 - 1)
          throw new Exception(\u003F16\u003F.\u003F1\u003F(352749312, 750787628, 323346360));
        this.\u003F1\u003F(numArray2);
      }

      public int \u003F18\u003F()
      {
        int num = 0;
        for (int index = 0; index < this.\u003F1\u003F.Length; ++index)
          num += (int) this.\u003F1\u003F[index] * (int) this.\u003F1\u003F[index];
        return num;
      }

      public void \u003F1\u003F(\u003F52\u003F.\u003F53\u003F _param1)
      {
        int index1 = -1;
        int index2 = 0;
        while (index2 < this.\u003F15\u003F)
        {
          int num1 = 1;
          int index3 = (int) this.\u003F1\u003F[index2];
          int num2;
          int num3;
          if (index3 != 0)
          {
            num2 = 6;
            num3 = 3;
            if (index1 != index3)
            {
              ++_param1.\u003F1\u003F[index3];
              num1 = 0;
            }
          }
          else
            goto label_11;
label_3:
          index1 = index3;
          ++index2;
          while (index2 < this.\u003F15\u003F && index1 == (int) this.\u003F1\u003F[index2])
          {
            ++index2;
            if (++num1 >= num2)
              break;
          }
          if (num1 >= num3)
          {
            if (index1 == 0)
            {
              if (num1 > 10)
              {
                ++_param1.\u003F1\u003F[\u003F52\u003F.\u003F20\u003F];
                continue;
              }
              _param1.\u003F1\u003F[\u003F52\u003F.\u003F19\u003F]++;
              continue;
            }
            _param1.\u003F1\u003F[\u003F52\u003F.\u003F18\u003F]++;
            continue;
          }
          _param1.\u003F1\u003F[index1] += (short) num1;
          continue;
label_11:
          num2 = 138;
          num3 = 3;
          goto label_3;
        }
      }

      public void \u003F15\u003F(\u003F52\u003F.\u003F53\u003F _param1)
      {
        int num1 = -1;
        int index = 0;
        while (index < this.\u003F15\u003F)
        {
          int num2 = 1;
          int num3 = (int) this.\u003F1\u003F[index];
          int num4;
          int num5;
          if (num3 != 0)
          {
            num4 = 6;
            num5 = 3;
            if (num1 != num3)
            {
              _param1.\u003F1\u003F(num3);
              num2 = 0;
            }
          }
          else
            goto label_13;
label_3:
          num1 = num3;
          ++index;
          while (index < this.\u003F15\u003F && num1 == (int) this.\u003F1\u003F[index])
          {
            ++index;
            if (++num2 >= num4)
              break;
          }
          if (num2 < num5)
          {
            while (num2-- > 0)
              _param1.\u003F1\u003F(num1);
            continue;
          }
          if (num1 == 0)
          {
            if (num2 > 10)
            {
              _param1.\u003F1\u003F(\u003F52\u003F.\u003F20\u003F);
              this.\u003F1\u003F.\u003F1\u003F.\u003F1\u003F(num2 - 11, 7);
              continue;
            }
            _param1.\u003F1\u003F(\u003F52\u003F.\u003F19\u003F);
            this.\u003F1\u003F.\u003F1\u003F.\u003F1\u003F(num2 - 3, 3);
            continue;
          }
          _param1.\u003F1\u003F(\u003F52\u003F.\u003F18\u003F);
          this.\u003F1\u003F.\u003F1\u003F.\u003F1\u003F(num2 - 3, 2);
          continue;
label_13:
          num4 = 138;
          num5 = 3;
          goto label_3;
        }
      }
    }
  }
}
