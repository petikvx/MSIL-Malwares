// Decompiled with JetBrains decompiler
// Type: Catfood.Shapefile.EndianBitConverter
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System;

namespace Catfood.Shapefile
{
  public static class EndianBitConverter
  {
    public static int ToInt32(byte[] value, int startIndex, ProvidedOrder order)
    {
      if (value == null)
        throw new ArgumentNullException(nameof (value));
      if (startIndex + 4 > value.Length)
        throw new ArgumentException("startIndex invalid (not enough space in value to extract an integer", nameof (startIndex));
      if (!BitConverter.IsLittleEndian || order != ProvidedOrder.Big)
        return BitConverter.ToInt32(value, startIndex);
      byte[] destinationArray = new byte[4];
      Array.Copy((Array) value, startIndex, (Array) destinationArray, 0, 4);
      Array.Reverse((Array) destinationArray);
      return BitConverter.ToInt32(destinationArray, 0);
    }

    public static double ToDouble(byte[] value, int startIndex, ProvidedOrder order)
    {
      if (value == null)
        throw new ArgumentNullException(nameof (value));
      if (startIndex + 8 > value.Length)
        throw new ArgumentException("startIndex invalid (not enough space in value to extract a double", nameof (startIndex));
      if (!BitConverter.IsLittleEndian || order != ProvidedOrder.Big)
        return BitConverter.ToDouble(value, startIndex);
      byte[] destinationArray = new byte[8];
      Array.Copy((Array) value, startIndex, (Array) destinationArray, 0, 8);
      Array.Reverse((Array) destinationArray);
      return BitConverter.ToDouble(destinationArray, 0);
    }
  }
}
