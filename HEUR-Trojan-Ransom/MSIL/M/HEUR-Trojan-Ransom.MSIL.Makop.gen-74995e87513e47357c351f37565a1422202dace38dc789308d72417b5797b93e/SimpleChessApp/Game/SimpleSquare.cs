// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: هx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 374CAC08-464B-4E84-B463-5CFD524FF26C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-74995e87513e47357c351f37565a1422202dace38dc789308d72417b5797b93e.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = -296691928;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -159243307)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              comparand = eventHandler;
              num1 = -1406886234;
              continue;
            case 2:
              goto label_3;
            case 3:
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u206B​‪‫‬‍​‍⁭​⁫⁮​​​‍⁪⁪‭‍⁭​‌‫‏⁯⁯‫‏‫⁯⁬‬‪⁫‌‏‪⁯⁫‮((Delegate) comparand, (Delegate) value), comparand);
              int num3 = eventHandler == comparand ? 483090014 : (num3 = 96916277);
              num1 = num3 ^ (int) num2 * -1609378769;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = -98234377;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2009771767)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u206D⁮⁯‏‌‬‬‌⁯‎⁪​⁭‎‏‫‬‮‬‭‭‏⁭‪⁪‫‎‌‍⁬​‎⁮⁯⁮‭‭‬‏⁫‮((Delegate) comparand, (Delegate) value), comparand);
              int num3 = eventHandler == comparand ? 1432279049 : (num3 = 1737779955);
              num1 = num3 ^ (int) num2 * -1938988860;
              continue;
            case 2:
              comparand = eventHandler;
              num1 = -20672744;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public ChessPiece Piece
    {
      get => this.piece;
      set
      {
        this.piece = value;
label_1:
        int num1 = 1119482224;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 266974214)) % 9U)
          {
            case 0:
              SimpleSquare.\u200C‬‏⁮‪‍‪‫‎‌⁬‌‫⁮‮‪‫⁭⁭⁮⁬⁪⁯‎⁬⁭​‫⁬⁯‌‫⁬⁫‏‪⁮​‫‭‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = 1069575470;
              continue;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * -1730808996 ^ -1584461361;
              continue;
            case 3:
              SimpleSquare.\u200C‬‏⁮‪‍‪‫‎‌⁬‌‫⁮‮‪‫⁭⁭⁮⁬⁪⁯‎⁬⁭​‫⁬⁯‌‫⁬⁫‏‪⁮​‫‭‮((Control) this, (Image) null);
              num1 = (int) num2 * -1434348632 ^ -1821374981;
              continue;
            case 4:
              this.piece = (ChessPiece) null;
              num1 = (int) num2 * -2056089153 ^ -425359157;
              continue;
            case 5:
              flag = this.piece == null;
              num1 = (int) num2 * -185717756 ^ 499187416;
              continue;
            case 6:
              num1 = (int) num2 * -1059366926 ^ 102036324;
              continue;
            case 7:
              goto label_1;
            case 8:
              int num3 = flag ? 1471838461 : (num3 = 379742619);
              num1 = num3 ^ (int) num2 * 2101072273;
              continue;
            default:
              goto label_11;
          }
        }
label_3:
        return;
label_11:;
      }
    }

    public void colorSquare()
    {
      this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
label_1:
      int num1 = -1675563658;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -907463360)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u200B⁭⁭‭‪⁪‎‪‫‌‪‎⁬‎‏‎⁪⁪⁯‭⁪⁯‪⁬‍‮​⁭⁮‭‫⁫⁮⁮‏⁯⁭⁫‪‌‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * 49250016 ^ 634993978;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = -1725261316;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -857079514)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Piece = this.Piece;
              num1 = (int) num2 * 422572262 ^ -937351404;
              continue;
            case 2:
              this.Piece.Kind = value;
              num1 = (int) num2 * 1584610907 ^ 1351289245;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public bool IsBlackSquare
    {
      get => this.isBlackSquare;
      set
      {
label_1:
        int num1 = 1994856666;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2020954918)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.isBlackSquare = value;
              this.colorSquare();
              num1 = (int) num2 * 109157290 ^ 9403284;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public Repository repo
    {
      get
      {
label_1:
        int num1 = 2023364476;
        Repository repo;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1380145337)) % 4U)
          {
            case 1:
              repo = ChessContext.repo;
              num1 = (int) num2 * 1791422366 ^ -595657779;
              continue;
            case 2:
              num1 = (int) num2 * 753495460 ^ -281101163;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return repo;
      }
    }

    public SimpleSquare()
    {
      this.InitializeComponent();
      SimpleSquare.\u200B‎‍‍‍‮⁮‫⁯‬⁭⁬‌‪‪⁭‪‏⁯‭‎⁬‍​⁬‫‫‫⁬‌⁭⁫​​​‫‫‎‭‪‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
      SimpleSquare.\u202A‏⁮‬‌‪‬‫‌⁫⁮‏⁭‮‮‫‮‍‎‬‮⁫⁫‭⁫​‌⁭⁯‏⁭‎⁪⁪‮⁪​‪‍‎‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = -338312100;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1742950530)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            EventHandler<MouseEventArgs> click = this.Click;
            if (click != null)
            {
              click((object) this, e);
              num1 = (int) num2 * 1435428070 ^ -1645408958;
              continue;
            }
            goto label_5;
          case 2:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:
      return;
label_5:;
    }

    public void HighLight()
    {
label_1:
      int num1 = -1160812641;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -614086801)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u200B⁭⁭‭‪⁪‎‪‫‌‪‎⁬‎‏‎⁪⁪⁯‭⁪⁯‪⁬‍‮​⁭⁮‭‫⁫⁮⁮‏⁯⁭⁫‪‌‮((Control) this, Color.ForestGreen);
            num1 = (int) num2 * 2034971101 ^ 1586971277;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void ClearHighLight()
    {
label_1:
      int num1 = 422575158;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1860911395)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            SimpleSquare.\u200B⁭⁭‭‪⁪‎‪‫‌‪‎⁬‎‏‎⁪⁪⁯‭⁪⁯‪⁬‍‮​⁭⁮‭‫⁫⁮⁮‏⁯⁭⁫‪‌‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * 772594397 ^ -1118066876;
            continue;
          case 2:
            num1 = (int) num2 * -1034871081 ^ 1874505037;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public bool IsEmpty => this.Piece == null;

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_5;
label_1:
      int num1 = 1609576797;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1529835639)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 1059620968 ^ -1468714615;
            continue;
          case 1:
            int num3 = flag ? 1193646009 : (num3 = 1562900878);
            num1 = num3 ^ (int) num2 * 1667085006;
            continue;
          case 2:
            goto label_4;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -531715706 ^ -1941226024;
            continue;
          case 5:
            goto label_3;
          case 6:
            SimpleSquare.\u200D‬‭⁪⁭‍‍‍‌‪‏‮‮‭‏​‫‎‮‌‫​‍⁮⁮‬⁮⁪⁬⁫​⁪⁫⁮⁬⁪​⁪⁫⁯‮((IDisposable) this.components);
            num1 = (int) num2 * 2079873347 ^ 1496079729;
            continue;
          case 7:
            base.Dispose(disposing);
            num1 = 1135841714;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:
      return;
label_4:
      int num4 = this.components != null ? 1 : 0;
      goto label_6;
label_5:
      num4 = 0;
label_6:
      flag = num4 != 0;
      num1 = 1466260414;
      goto label_2;
    }

    private void InitializeComponent()
    {
      this.panel1 = SimpleSquare.\u200F‪⁬‏‫⁭​‍‏‎​‫⁬⁫‭⁯⁯⁮‪⁪‎‎⁭‬​‫⁭‮⁫‫‭‭⁯⁭‏‌‬‫‌‪‮();
label_1:
      int num1 = 801455192;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1802176695)) % 16U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            SimpleSquare.\u206F⁬‏‭⁭‫‬‍‬‎‌‏⁭‎⁮​⁫‮⁪‮‮⁫‭⁭‮​‏‪⁪⁮‏⁭‫⁮⁯⁯‮‪⁫⁬‮((Control) this.panel1, \u003CModule\u003E.\u202C‬‎‬‍‪⁮‪‏⁬​‍⁫​‬‏⁫‭⁭⁪‬‫‬⁫‭‍‭‪⁮⁮⁪⁮⁭‎‭⁮⁭‬⁫⁯‮<string>(2656917279U));
            SimpleSquare.\u206F⁪‌⁬⁭‍‭‬‪‏‮‍‍‮​​‫‭‫‪‮‎⁭⁮‬‎‪‪‭​⁭‮‬‬⁯​⁯‫‮‌‮((Control) this.panel1, new Size(137, 132));
            num1 = (int) num2 * -1098671850 ^ -522805160;
            continue;
          case 3:
            num1 = (int) num2 * -1052819945 ^ 1109382266;
            continue;
          case 4:
            SimpleSquare.\u200D‮‏‫⁫‏‌⁫⁯‪‍‬⁮‌⁪⁯‬⁭‏‭​‬‫‬⁮​‫​​​⁯⁮⁫‫‍‎⁪⁬‮‭‮((ContainerControl) this, AutoScaleMode.Font);
            SimpleSquare.\u200B‌‮​‏‪⁪⁪⁯⁯​‪‫​⁫‪‎‎‌⁭​‪⁭‌⁫‏⁭‮⁫‎‫‭⁯‪‍‍⁬‭⁭⁯‮((Control) this, ImageLayout.Center);
            SimpleSquare.\u206C‭‌‍‭‎‬‭⁬⁭‫⁭⁬⁬‫⁫‮⁭‏⁫‬‏⁭⁫​‍‌⁫‮⁪‮‎⁯‎⁭‫‍⁮‌⁫‮(SimpleSquare.\u206F⁮​⁪⁫‫‫⁮‭⁯⁭⁮‏‭‪‍‬‪⁭‎‌⁫‫⁯‏⁬‌‫‮‭‭⁯‎‬⁯⁮​⁬‪‬‮((Control) this), (Control) this.panel1);
            SimpleSquare.\u202D⁪⁪‭‫‎‮‭​‎⁭‏‍⁫‌⁪‪‭‍‮‪‭​‪‎⁫⁯‬⁭‬‬⁮⁬⁭‍⁪‫⁬‬‪‮((Control) this, new Padding(0));
            num1 = (int) num2 * -842846580 ^ 1464764845;
            continue;
          case 5:
            SimpleSquare.\u202C⁬‬‪⁫‮‍‪‎⁪⁯‬‫‬‪⁮‌⁫‭‬‏‫‍‮‭⁪‌⁯⁮‮‫​⁪⁬‬​‎‍‭‭‮((Control) this, \u003CModule\u003E.\u200B‌‭⁯‪⁫⁯‮⁬⁭⁭⁫‏‍⁮⁬⁮‮⁫⁯‎‮‫⁭​⁮‪‫​‌⁬⁫‮​⁮⁪‍‪⁪‭‮<string>(1990924104U));
            num1 = (int) num2 * -48869899 ^ -1002405208;
            continue;
          case 6:
            SimpleSquare.\u206D‌‎‬‍‎⁭‏⁫‬‍‏⁭⁭‭‎‬‬‭​​‬‫⁫⁯‫⁭⁮⁪‪‍⁭‭⁪⁪‏‫‌⁫‪‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -582543260 ^ 592867841;
            continue;
          case 7:
            SimpleSquare.\u206C⁯⁫‮‎‫‭‮‍‌‌‫‎⁬⁪‏⁬‫⁭⁮‫‌⁬‌⁯‭‫⁫‬‫‫⁪‌​⁭‏‫⁮‬‏‮((Control) this.panel1, DockStyle.Fill);
            num1 = (int) num2 * -1495618473 ^ 329995711;
            continue;
          case 8:
            SimpleSquare.\u202E⁯‌⁪​‏⁮‌‫⁬‏‮‍‮‭‍‬⁯⁭‪‫‪‬‬‪‍⁯‮‬‭⁬⁯‎⁮‫‬‫‎​‎‮((Control) this.panel1, 0);
            num1 = (int) num2 * -1158768388 ^ 930839482;
            continue;
          case 9:
            SimpleSquare.\u200E⁬‮⁫‮​‮⁭⁬⁬‮⁬⁭⁯‌‫⁬⁮​‏⁮⁯⁫⁬‏⁫‬‭‭‎‭‬‮⁪‪‫⁫‍‎⁮‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * 379408522 ^ -955504785;
            continue;
          case 10:
            num1 = (int) num2 * -1096729937 ^ 1051087092;
            continue;
          case 11:
            SimpleSquare.\u200B⁭⁭‭‪⁪‎‪‫‌‪‎⁬‎‏‎⁪⁪⁯‭⁪⁯‪⁬‍‮​⁭⁮‭‫⁫⁮⁮‏⁯⁭⁫‪‌‮((Control) this.panel1, Color.Transparent);
            SimpleSquare.\u200B‌‮​‏‪⁪⁪⁯⁯​‪‫​⁫‪‎‎‌⁭​‪⁭‌⁫‏⁭‮⁫‎‫‭⁯‪‍‍⁬‭⁭⁯‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * -837095783 ^ -837662685;
            continue;
          case 12:
            num1 = (int) num2 * -1858820125 ^ 1638542194;
            continue;
          case 13:
            SimpleSquare.\u206D‎‍‬⁮​⁪⁫​⁬‌⁭‬‬‮⁬⁫‍‪‭⁮‪​⁮‭⁪‫⁪⁮⁪‎‭‪‎‏‮‍‫⁮‬‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -2123575036 ^ 1343422407;
            continue;
          case 14:
            SimpleSquare.\u206E‫‭‪⁮‏‍‍‌⁪‍‌‍⁮⁬⁫‎⁫⁫⁮‏​‮‫⁭⁪​‬‮⁮⁮‬‭⁮​⁬‪‏⁫‫‮((Control) this, false);
            num1 = (int) num2 * 1465265218 ^ 727934983;
            continue;
          case 15:
            SimpleSquare.\u206E⁮‮⁬‭⁯‬‮‎‍‬‮⁭‍⁪⁪‪‎‭⁭⁪⁮⁬⁮⁭‬​‫‪⁮​‎⁯‬⁫⁭‎‫‍‬‮((Control) this);
            num1 = (int) num2 * -1212787374 ^ 1952796658;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    static Delegate \u206B​‪‫‬‍​‍⁭​⁫⁮​​​‍⁪⁪‭‍⁭​‌‫‏⁯⁯‫‏‫⁯⁬‬‪⁫‌‏‪⁯⁫‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206D⁮⁯‏‌‬‬‌⁯‎⁪​⁭‎‏‫‬‮‬‭‭‏⁭‪⁪‫‎‌‍⁬​‎⁮⁯⁮‭‭‬‏⁫‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u200C‬‏⁮‪‍‪‫‎‌⁬‌‫⁮‮‪‫⁭⁭⁮⁬⁪⁯‎⁬⁭​‫⁬⁯‌‫⁬⁫‏‪⁮​‫‭‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200B⁭⁭‭‪⁪‎‪‫‌‪‎⁬‎‏‎⁪⁪⁯‭⁪⁯‪⁬‍‮​⁭⁮‭‫⁫⁮⁮‏⁯⁭⁫‪‌‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u200B‎‍‍‍‮⁮‫⁯‬⁭⁬‌‪‪⁭‪‏⁯‭‎⁬‍​⁬‫‫‫⁬‌⁭⁫​​​‫‫‎‭‪‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202A‏⁮‬‌‪‬‫‌⁫⁮‏⁭‮‮‫‮‍‎‬‮⁫⁫‭⁫​‌⁭⁯‏⁭‎⁪⁪‮⁪​‪‍‎‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u200D‬‭⁪⁭‍‍‍‌‪‏‮‮‭‏​‫‎‮‌‫​‍⁮⁮‬⁮⁪⁬⁫​⁪⁫⁮⁬⁪​⁪⁫⁯‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u200F‪⁬‏‫⁭​‍‏‎​‫⁬⁫‭⁯⁯⁮‪⁪‎‎⁭‬​‫⁭‮⁫‫‭‭⁯⁭‏‌‬‫‌‪‮() => new Panel();

    static void \u206E⁮‮⁬‭⁯‬‮‎‍‬‮⁭‍⁪⁪‪‎‭⁭⁪⁮⁬⁮⁭‬​‫‪⁮​‎⁯‬⁫⁭‎‫‍‬‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u200B‌‮​‏‪⁪⁪⁯⁯​‪‫​⁫‪‎‎‌⁭​‪⁭‌⁫‏⁭‮⁫‎‫‭⁯‪‍‍⁬‭⁭⁯‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206C⁯⁫‮‎‫‭‮‍‌‌‫‎⁬⁪‏⁬‫⁭⁮‫‌⁬‌⁯‭‫⁫‬‫‫⁪‌​⁭‏‫⁮‬‏‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u200E⁬‮⁫‮​‮⁭⁬⁬‮⁬⁭⁯‌‫⁬⁮​‏⁮⁯⁫⁬‏⁫‬‭‭‎‭‬‮⁪‪‫⁫‍‎⁮‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u206F⁬‏‭⁭‫‬‍‬‎‌‏⁭‎⁮​⁫‮⁪‮‮⁫‭⁭‮​‏‪⁪⁮‏⁭‫⁮⁯⁯‮‪⁫⁬‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u206F⁪‌⁬⁭‍‭‬‪‏‮‍‍‮​​‫‭‫‪‮‎⁭⁮‬‎‪‪‭​⁭‮‬‬⁯​⁯‫‮‌‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u202E⁯‌⁪​‏⁮‌‫⁬‏‮‍‮‭‍‬⁯⁭‪‫‪‬‬‪‍⁯‮‬‭⁬⁯‎⁮‫‬‫‎​‎‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u206D‎‍‬⁮​⁪⁫​⁬‌⁭‬‬‮⁬⁫‍‪‭⁮‪​⁮‭⁪‫⁪⁮⁪‎‭‪‎‏‮‍‫⁮‬‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200D‮‏‫⁫‏‌⁫⁯‪‍‬⁮‌⁪⁯‬⁭‏‭​‬‫‬⁮​‫​​​⁯⁮⁫‫‍‎⁪⁬‮‭‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u206F⁮​⁪⁫‫‫⁮‭⁯⁭⁮‏‭‪‍‬‪⁭‎‌⁫‫⁯‏⁬‌‫‮‭‭⁯‎‬⁯⁮​⁬‪‬‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u206C‭‌‍‭‎‬‭⁬⁭‫⁭⁬⁬‫⁫‮⁭‏⁫‬‏⁭⁫​‍‌⁫‮⁪‮‎⁯‎⁭‫‍⁮‌⁫‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u202D⁪⁪‭‫‎‮‭​‎⁭‏‍⁫‌⁪‪‭‍‮‪‭​‪‎⁫⁯‬⁭‬‬⁮⁬⁭‍⁪‫⁬‬‪‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202C⁬‬‪⁫‮‍‪‎⁪⁯‬‫‬‪⁮‌⁫‭‬‏‫‍‮‭⁪‌⁯⁮‮‫​⁪⁬‬​‎‍‭‭‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u206D‌‎‬‍‎⁭‏⁫‬‍‏⁭⁭‭‎‬‬‭​​‬‫⁫⁯‫⁭⁮⁪‪‍⁭‭⁪⁪‏‫‌⁫‪‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206E‫‭‪⁮‏‍‍‌⁪‍‌‍⁮⁬⁫‎⁫⁫⁮‏​‮‫⁭⁪​‬‮⁮⁮‬‭⁮​⁬‪‏⁫‫‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
