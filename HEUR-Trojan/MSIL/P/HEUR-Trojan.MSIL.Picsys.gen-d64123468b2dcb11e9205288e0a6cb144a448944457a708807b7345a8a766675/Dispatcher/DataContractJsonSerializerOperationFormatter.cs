// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.DataContractJsonSerializerOperationFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.Xml;

namespace System.ServiceModel.Dispatcher
{
  internal class DataContractJsonSerializerOperationFormatter : 
    DataContractSerializerOperationFormatter
  {
    private bool isBareMessageContractReply;
    private bool isBareMessageContractRequest;
    private bool isWrapped;
    private bool useAspNetAjaxJson;
    private string callbackParameterName;

    public DataContractJsonSerializerOperationFormatter(
      OperationDescription description,
      int maxItemsInObjectGraph,
      bool ignoreExtensionDataObject,
      IDataContractSurrogate dataContractSurrogate,
      bool isWrapped,
      bool useAspNetAjaxJson,
      string callbackParameterName)
      : base(description, TypeLoader.DefaultDataContractFormatAttribute, (DataContractSerializerOperationBehavior) new DataContractJsonSerializerOperationBehavior(description, maxItemsInObjectGraph, ignoreExtensionDataObject, dataContractSurrogate, useAspNetAjaxJson))
    {
      if (this.requestMessageInfo != null)
      {
        if (this.requestMessageInfo.WrapperName == null)
        {
          this.isBareMessageContractRequest = true;
        }
        else
        {
          this.requestMessageInfo.WrapperName = JsonGlobals.rootDictionaryString;
          this.requestMessageInfo.WrapperNamespace = XmlDictionaryString.Empty;
        }
      }
      if (this.replyMessageInfo != null)
      {
        if (this.replyMessageInfo.WrapperName == null)
        {
          this.isBareMessageContractReply = true;
        }
        else
        {
          if (useAspNetAjaxJson)
            this.replyMessageInfo.WrapperName = JsonGlobals.dDictionaryString;
          else
            this.replyMessageInfo.WrapperName = JsonGlobals.rootDictionaryString;
          this.replyMessageInfo.WrapperNamespace = XmlDictionaryString.Empty;
        }
      }
      if (this.requestStreamFormatter != null && this.requestStreamFormatter.WrapperName != null)
      {
        this.requestStreamFormatter.WrapperName = "root";
        this.requestStreamFormatter.WrapperNamespace = string.Empty;
      }
      if (this.replyStreamFormatter != null && this.replyStreamFormatter.WrapperName != null)
      {
        this.replyStreamFormatter.WrapperName = "root";
        this.replyStreamFormatter.WrapperNamespace = string.Empty;
      }
      this.isWrapped = isWrapped;
      this.useAspNetAjaxJson = useAspNetAjaxJson;
      this.callbackParameterName = callbackParameterName;
    }

    internal static bool IsJsonLocalName(XmlDictionaryReader reader, string elementName) => reader.IsStartElement(JsonGlobals.itemDictionaryString, JsonGlobals.itemDictionaryString) && reader.MoveToAttribute("item") && reader.Value == elementName;

    internal static bool IsStartElement(XmlDictionaryReader reader, string elementName) => reader.IsStartElement(elementName) || DataContractJsonSerializerOperationFormatter.IsJsonLocalName(reader, elementName);

    internal static bool IsStartElement(
      XmlDictionaryReader reader,
      XmlDictionaryString elementName,
      XmlDictionaryString elementNamespace)
    {
      return reader.IsStartElement(elementName, elementNamespace) || DataContractJsonSerializerOperationFormatter.IsJsonLocalName(reader, elementName == null ? (string) null : elementName.Value);
    }

    protected override void AddHeadersToMessage(
      Message message,
      MessageDescription messageDescription,
      object[] parameters,
      bool isRequest)
    {
      message?.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.JsonProperty);
      base.AddHeadersToMessage(message, messageDescription, parameters, isRequest);
    }

    protected override object DeserializeBody(
      XmlDictionaryReader reader,
      MessageVersion version,
      string action,
      MessageDescription messageDescription,
      object[] parameters,
      bool isRequest)
    {
      if (reader == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (reader)));
      if (parameters == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (parameters)));
      if (reader.EOF)
        return (object) null;
      if (isRequest && this.isBareMessageContractRequest || !isRequest && this.isBareMessageContractReply)
        return this.DeserializeBareMessageContract(reader, parameters, isRequest);
      object obj = (object) null;
      if (isRequest || this.isWrapped && !this.useAspNetAjaxJson)
      {
        this.ValidateTypeObjectAttribute(reader, isRequest);
        obj = this.DeserializeBodyCore(reader, parameters, isRequest);
      }
      else
      {
        if (this.useAspNetAjaxJson)
          this.ReadRootElement(reader);
        if (this.useAspNetAjaxJson && messageDescription.IsVoid)
          this.ReadVoidReturn(reader);
        else if (this.replyMessageInfo.ReturnPart != null)
        {
          DataContractSerializerOperationFormatter.PartInfo returnPart = this.replyMessageInfo.ReturnPart;
          DataContractJsonSerializer serializer1 = returnPart.Serializer as DataContractJsonSerializer;
          DataContractJsonSerializer serializer2;
          if (this.useAspNetAjaxJson)
          {
            serializer2 = DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer1, "d");
            this.VerifyIsStartElement(reader, "d");
          }
          else
          {
            serializer2 = DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer1, "root");
            this.VerifyIsStartElement(reader, "root");
          }
          if (serializer2.IsStartObject(reader))
          {
            try
            {
              obj = returnPart.ReadObject(reader, (XmlObjectSerializer) serializer2);
            }
            catch (InvalidOperationException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", (object) returnPart.Description.Namespace, (object) returnPart.Description.Name), (Exception) ex));
            }
            catch (InvalidDataContractException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidDataContractException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", (object) returnPart.Description.Namespace, (object) returnPart.Description.Name), (Exception) ex));
            }
            catch (FormatException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) OperationFormatter.CreateDeserializationFailedFault(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", (object) returnPart.Description.Namespace, (object) returnPart.Description.Name, (object) ex.Message), (Exception) ex));
            }
            catch (SerializationException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) OperationFormatter.CreateDeserializationFailedFault(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", (object) returnPart.Description.Namespace, (object) returnPart.Description.Name, (object) ex.Message), (Exception) ex));
            }
          }
        }
        else if (this.replyMessageInfo.BodyParts != null)
        {
          this.ValidateTypeObjectAttribute(reader, isRequest);
          obj = this.DeserializeBodyCore(reader, parameters, isRequest);
        }
        while (reader.IsStartElement())
          OperationFormatter.TraceAndSkipElement((XmlReader) reader);
        if (this.useAspNetAjaxJson)
          reader.ReadEndElement();
      }
      return obj;
    }

    protected override void GetHeadersFromMessage(
      Message message,
      MessageDescription messageDescription,
      object[] parameters,
      bool isRequest)
    {
      if (message != null)
      {
        object obj;
        message.Properties.TryGetValue("WebBodyFormatMessageProperty", out obj);
        if (!(obj is WebBodyFormatMessageProperty formatMessageProperty))
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.MessageFormatPropertyNotFound2, (object) this.OperationName)));
        }
        if (formatMessageProperty.Format != WebContentFormat.Json)
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.InvalidHttpMessageFormat3, (object) this.OperationName, (object) formatMessageProperty.Format, (object) WebContentFormat.Json)));
        }
      }
      base.GetHeadersFromMessage(message, messageDescription, parameters, isRequest);
    }

    protected override void SerializeBody(
      XmlDictionaryWriter writer,
      MessageVersion version,
      string action,
      MessageDescription messageDescription,
      object returnValue,
      object[] parameters,
      bool isRequest)
    {
      if (isRequest && this.isBareMessageContractRequest || !isRequest && this.isBareMessageContractReply)
      {
        this.SerializeBareMessageContract(writer, parameters, isRequest);
      }
      else
      {
        bool flag1 = WebHttpBehavior.TrySetupJavascriptCallback(this.callbackParameterName) != null;
        bool flag2 = !flag1 && this.useAspNetAjaxJson;
        if (isRequest || this.isWrapped && !flag2)
        {
          this.SerializeBody(writer, returnValue, parameters, isRequest);
        }
        else
        {
          if (flag2)
          {
            writer.WriteStartElement("root");
            writer.WriteAttributeString("type", "object");
          }
          if (flag2 && messageDescription.IsVoid)
            this.WriteVoidReturn(writer);
          else if (flag1 && messageDescription.IsVoid)
          {
            writer.WriteStartElement("root");
            writer.WriteAttributeString("type", "null");
            writer.WriteEndElement();
          }
          else if (this.replyMessageInfo.ReturnPart != null)
          {
            DataContractJsonSerializer serializer = this.replyMessageInfo.ReturnPart.Serializer as DataContractJsonSerializer;
            DataContractJsonSerializer contractJsonSerializer = !flag2 ? DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer, "root") : DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer, "d");
            try
            {
              contractJsonSerializer.WriteObject(writer, returnValue);
            }
            catch (SerializationException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new CommunicationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorSerializingParameter", (object) this.replyMessageInfo.ReturnPart.Description.Namespace, (object) this.replyMessageInfo.ReturnPart.Description.Name, (object) ex.Message), (Exception) ex));
            }
          }
          else if (this.replyMessageInfo.BodyParts != null)
            this.SerializeBody(writer, returnValue, parameters, isRequest);
          if (!flag2)
            return;
          writer.WriteEndElement();
        }
      }
    }

    private static DataContractJsonSerializer RecreateDataContractJsonSerializer(
      DataContractJsonSerializer serializer,
      string newRootName)
    {
      DataContractJsonSerializerSettings settings = new DataContractJsonSerializerSettings()
      {
        RootName = newRootName,
        KnownTypes = (IEnumerable<System.Type>) serializer.KnownTypes,
        MaxItemsInObjectGraph = serializer.MaxItemsInObjectGraph,
        IgnoreExtensionDataObject = serializer.IgnoreExtensionDataObject,
        DataContractSurrogate = serializer.DataContractSurrogate,
        EmitTypeInformation = serializer.EmitTypeInformation,
        DateTimeFormat = serializer.DateTimeFormat,
        UseSimpleDictionaryFormat = serializer.UseSimpleDictionaryFormat
      };
      return new DataContractJsonSerializer(serializer.GetDeserializeType(), settings);
    }

    private object DeserializeBareMessageContract(
      XmlDictionaryReader reader,
      object[] parameters,
      bool isRequest)
    {
      DataContractSerializerOperationFormatter.MessageInfo messageInfo = !isRequest ? this.replyMessageInfo : this.requestMessageInfo;
      if (this.useAspNetAjaxJson && !isRequest)
      {
        this.ReadRootElement(reader);
        if (messageInfo.BodyParts.Length == 0)
          this.ReadVoidReturn(reader);
      }
      if (messageInfo.BodyParts.Length != 0)
      {
        DataContractSerializerOperationFormatter.PartInfo bodyPart = messageInfo.BodyParts[0];
        DataContractJsonSerializer serializer1 = bodyPart.Serializer as DataContractJsonSerializer;
        DataContractJsonSerializer serializer2 = !this.useAspNetAjaxJson || isRequest ? DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer1, "root") : DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer1, "d");
        while (reader.IsStartElement())
        {
          if (serializer2.IsStartObject(reader))
          {
            try
            {
              parameters[bodyPart.Description.Index] = bodyPart.ReadObject(reader, (XmlObjectSerializer) serializer2);
              break;
            }
            catch (InvalidOperationException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", (object) bodyPart.Description.Namespace, (object) bodyPart.Description.Name), (Exception) ex));
            }
            catch (InvalidDataContractException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidDataContractException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", (object) bodyPart.Description.Namespace, (object) bodyPart.Description.Name), (Exception) ex));
            }
            catch (FormatException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) OperationFormatter.CreateDeserializationFailedFault(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", (object) bodyPart.Description.Namespace, (object) bodyPart.Description.Name, (object) ex.Message), (Exception) ex));
            }
            catch (SerializationException ex)
            {
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) OperationFormatter.CreateDeserializationFailedFault(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", (object) bodyPart.Description.Namespace, (object) bodyPart.Description.Name, (object) ex.Message), (Exception) ex));
            }
          }
          else
            OperationFormatter.TraceAndSkipElement((XmlReader) reader);
        }
        while (reader.IsStartElement())
          OperationFormatter.TraceAndSkipElement((XmlReader) reader);
      }
      if (this.useAspNetAjaxJson && !isRequest)
        reader.ReadEndElement();
      return (object) null;
    }

    private object DeserializeBodyCore(
      XmlDictionaryReader reader,
      object[] parameters,
      bool isRequest)
    {
      DataContractSerializerOperationFormatter.MessageInfo messageInfo = !isRequest ? this.replyMessageInfo : this.requestMessageInfo;
      if (messageInfo.WrapperName != null)
      {
        this.VerifyIsStartElement(reader, messageInfo.WrapperName, messageInfo.WrapperNamespace);
        bool isEmptyElement = reader.IsEmptyElement;
        reader.Read();
        if (isEmptyElement)
          return (object) null;
      }
      object returnValue = (object) null;
      this.DeserializeParameters(reader, messageInfo.BodyParts, parameters, messageInfo.ReturnPart, ref returnValue);
      if (messageInfo.WrapperName != null)
        reader.ReadEndElement();
      return returnValue;
    }

    private object DeserializeParameter(
      XmlDictionaryReader reader,
      DataContractSerializerOperationFormatter.PartInfo part)
    {
      if (!part.Description.Multiple)
        return this.DeserializeParameterPart(reader, part);
      ArrayList arrayList = new ArrayList();
      while (part.Serializer.IsStartObject(reader))
        arrayList.Add(this.DeserializeParameterPart(reader, part));
      return (object) arrayList.ToArray(part.Description.Type);
    }

    private object DeserializeParameterPart(
      XmlDictionaryReader reader,
      DataContractSerializerOperationFormatter.PartInfo part)
    {
      try
      {
        return part.ReadObject(reader);
      }
      catch (InvalidOperationException ex)
      {
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", (object) part.Description.Namespace, (object) part.Description.Name), (Exception) ex));
      }
      catch (InvalidDataContractException ex)
      {
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidDataContractException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameter", (object) part.Description.Namespace, (object) part.Description.Name), (Exception) ex));
      }
      catch (FormatException ex)
      {
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) OperationFormatter.CreateDeserializationFailedFault(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", (object) part.Description.Namespace, (object) part.Description.Name, (object) ex.Message), (Exception) ex));
      }
      catch (SerializationException ex)
      {
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) OperationFormatter.CreateDeserializationFailedFault(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorDeserializingParameterMore", (object) part.Description.Namespace, (object) part.Description.Name, (object) ex.Message), (Exception) ex));
      }
    }

    private void DeserializeParameters(
      XmlDictionaryReader reader,
      DataContractSerializerOperationFormatter.PartInfo[] parts,
      object[] parameters,
      DataContractSerializerOperationFormatter.PartInfo returnInfo,
      ref object returnValue)
    {
      bool[] flagArray = new bool[parameters.Length];
      bool flag1 = false;
      int num1 = 0;
      while (reader.IsStartElement())
      {
        bool flag2 = false;
        int num2 = 0;
        int index = num1;
        while (num2 < parts.Length)
        {
          DataContractSerializerOperationFormatter.PartInfo part = parts[index];
          if (part.Serializer.IsStartObject(reader))
          {
            num1 = num2;
            parameters[part.Description.Index] = this.DeserializeParameter(reader, part);
            flagArray[part.Description.Index] = true;
            flag2 = true;
          }
          ++num2;
          index = (index + 1) % parts.Length;
        }
        if (!flag2)
        {
          if (returnInfo != null && !flag1 && returnInfo.Serializer.IsStartObject(reader))
          {
            returnValue = this.DeserializeParameter(reader, returnInfo);
            flag1 = true;
          }
          else
            OperationFormatter.TraceAndSkipElement((XmlReader) reader);
        }
      }
      for (int index = 0; index < parameters.Length; ++index)
      {
        if (!flagArray[index])
          parameters[index] = (object) null;
      }
    }

    private void ReadRootElement(XmlDictionaryReader reader)
    {
      string str = DataContractJsonSerializerOperationFormatter.IsStartElement(reader, "root") ? reader.GetAttribute("type") : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new SerializationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBody", (object) "root", (object) string.Empty, (object) reader.NodeType, (object) reader.Name, (object) reader.NamespaceURI)));
      if (!str.Equals("object", StringComparison.Ordinal))
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) XmlObjectSerializer.CreateSerializationException(SR2.GetString(SR2.JsonFormatterExpectedAttributeObject, (object) str)));
      }
      bool isEmptyElement = reader.IsEmptyElement;
      reader.Read();
      int num = isEmptyElement ? 1 : 0;
    }

    private void ReadVoidReturn(XmlDictionaryReader reader)
    {
      this.VerifyIsStartElement(reader, "d");
      string attribute = reader.GetAttribute("type");
      if (!attribute.Equals("null", StringComparison.Ordinal))
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) XmlObjectSerializer.CreateSerializationException(SR2.GetString(SR2.JsonFormatterExpectedAttributeNull, (object) attribute)));
      }
      OperationFormatter.TraceAndSkipElement((XmlReader) reader);
    }

    private void SerializeBareMessageContract(
      XmlDictionaryWriter writer,
      object[] parameters,
      bool isRequest)
    {
      bool flag = WebHttpBehavior.TrySetupJavascriptCallback(this.callbackParameterName) == null && this.useAspNetAjaxJson;
      if (writer == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (writer)));
      if (parameters == null)
        throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (parameters)));
      DataContractSerializerOperationFormatter.MessageInfo messageInfo = !isRequest ? this.replyMessageInfo : this.requestMessageInfo;
      if (flag && !isRequest)
      {
        writer.WriteStartElement("root");
        writer.WriteAttributeString("type", "object");
        if (messageInfo.BodyParts.Length == 0)
          this.WriteVoidReturn(writer);
      }
      if (messageInfo.BodyParts.Length != 0)
      {
        DataContractSerializerOperationFormatter.PartInfo bodyPart = messageInfo.BodyParts[0];
        DataContractJsonSerializer serializer = bodyPart.Serializer as DataContractJsonSerializer;
        DataContractJsonSerializer contractJsonSerializer = !flag || isRequest ? DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer, "root") : DataContractJsonSerializerOperationFormatter.RecreateDataContractJsonSerializer(serializer, "d");
        object parameter = parameters[bodyPart.Description.Index];
        try
        {
          contractJsonSerializer.WriteObject(writer, parameter);
        }
        catch (SerializationException ex)
        {
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new CommunicationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorSerializingParameter", (object) bodyPart.Description.Namespace, (object) bodyPart.Description.Name, (object) ex.Message), (Exception) ex));
        }
      }
      if (!flag || isRequest)
        return;
      writer.WriteEndElement();
    }

    private void SerializeBody(
      XmlDictionaryWriter writer,
      object returnValue,
      object[] parameters,
      bool isRequest)
    {
      if (writer == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (writer)));
      if (parameters == null)
        throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (parameters)));
      DataContractSerializerOperationFormatter.MessageInfo messageInfo = !isRequest ? this.replyMessageInfo : this.requestMessageInfo;
      if (messageInfo.WrapperName != null)
      {
        if (WebHttpBehavior.TrySetupJavascriptCallback(this.callbackParameterName) != null)
          writer.WriteStartElement("root");
        else
          writer.WriteStartElement(messageInfo.WrapperName, messageInfo.WrapperNamespace);
        writer.WriteAttributeString("type", "object");
      }
      if (messageInfo.ReturnPart != null)
        this.SerializeParameter(writer, messageInfo.ReturnPart, returnValue);
      this.SerializeParameters(writer, messageInfo.BodyParts, parameters);
      if (messageInfo.WrapperName == null)
        return;
      writer.WriteEndElement();
    }

    private void SerializeParameter(
      XmlDictionaryWriter writer,
      DataContractSerializerOperationFormatter.PartInfo part,
      object graph)
    {
      if (part.Description.Multiple)
      {
        if (graph == null)
          return;
        foreach (object graph1 in (IEnumerable) graph)
          this.SerializeParameterPart(writer, part, graph1);
      }
      else
        this.SerializeParameterPart(writer, part, graph);
    }

    private void SerializeParameterPart(
      XmlDictionaryWriter writer,
      DataContractSerializerOperationFormatter.PartInfo part,
      object graph)
    {
      try
      {
        part.Serializer.WriteObject(writer, graph);
      }
      catch (SerializationException ex)
      {
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new CommunicationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBodyErrorSerializingParameter", (object) part.Description.Namespace, (object) part.Description.Name, (object) ex.Message), (Exception) ex));
      }
    }

    private void SerializeParameters(
      XmlDictionaryWriter writer,
      DataContractSerializerOperationFormatter.PartInfo[] parts,
      object[] parameters)
    {
      for (int index = 0; index < parts.Length; ++index)
      {
        DataContractSerializerOperationFormatter.PartInfo part = parts[index];
        object parameter = parameters[part.Description.Index];
        this.SerializeParameter(writer, part, parameter);
      }
    }

    private void ValidateTypeObjectAttribute(XmlDictionaryReader reader, bool isRequest)
    {
      DataContractSerializerOperationFormatter.MessageInfo messageInfo = isRequest ? this.requestMessageInfo : this.replyMessageInfo;
      if (messageInfo.WrapperName == null)
        return;
      if (!DataContractJsonSerializerOperationFormatter.IsStartElement(reader, messageInfo.WrapperName, messageInfo.WrapperNamespace))
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new SerializationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBody", (object) messageInfo.WrapperName, (object) messageInfo.WrapperNamespace, (object) reader.NodeType, (object) reader.Name, (object) reader.NamespaceURI)));
      string attribute = reader.GetAttribute("type");
      if (!attribute.Equals("object", StringComparison.Ordinal))
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) XmlObjectSerializer.CreateSerializationException(SR2.GetString(SR2.JsonFormatterExpectedAttributeObject, (object) attribute)));
      }
    }

    private void VerifyIsStartElement(XmlDictionaryReader reader, string elementName)
    {
      bool flag = false;
      while (reader.IsStartElement())
      {
        if (DataContractJsonSerializerOperationFormatter.IsStartElement(reader, elementName))
        {
          flag = true;
          break;
        }
        OperationFormatter.TraceAndSkipElement((XmlReader) reader);
      }
      if (!flag)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new SerializationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBody", (object) elementName, (object) string.Empty, (object) reader.NodeType, (object) reader.Name, (object) reader.NamespaceURI)));
    }

    private void VerifyIsStartElement(
      XmlDictionaryReader reader,
      XmlDictionaryString elementName,
      XmlDictionaryString elementNamespace)
    {
      bool flag = false;
      while (reader.IsStartElement())
      {
        if (DataContractJsonSerializerOperationFormatter.IsStartElement(reader, elementName, elementNamespace))
        {
          flag = true;
          break;
        }
        OperationFormatter.TraceAndSkipElement((XmlReader) reader);
      }
      if (!flag)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new SerializationException(System.ServiceModel.SR.GetString("SFxInvalidMessageBody", (object) elementName, (object) elementNamespace, (object) reader.NodeType, (object) reader.Name, (object) reader.NamespaceURI)));
    }

    private void WriteVoidReturn(XmlDictionaryWriter writer)
    {
      writer.WriteStartElement("d");
      writer.WriteAttributeString("type", "null");
      writer.WriteEndElement();
    }
  }
}
