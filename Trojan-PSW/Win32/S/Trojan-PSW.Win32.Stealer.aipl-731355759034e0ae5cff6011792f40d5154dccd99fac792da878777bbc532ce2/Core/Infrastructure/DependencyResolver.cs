// Decompiled with JetBrains decompiler
// Type: Core.Infrastructure.DependencyResolver
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using StructureMap;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;

namespace Core.Infrastructure
{
  public class DependencyResolver : IDependencyResolver
  {
    [DebuggerStepThrough]
    public TType GetInstance<TType>() => (TType) this.GetInstance(typeof (TType));

    [DebuggerStepThrough]
    public object GetInstance(Type type)
    {
      try
      {
        return ObjectFactory.GetInstance(type);
      }
      catch (Exception ex)
      {
        return (object) null;
      }
    }

    [DebuggerStepThrough]
    public void BuildUp(object target)
    {
      try
      {
        ObjectFactory.BuildUp(target);
      }
      catch (Exception ex)
      {
        throw;
      }
    }

    [DebuggerStepThrough]
    public IEnumerable<object> GetAllInstances(Type type)
    {
      foreach (object allInstance in (IEnumerable) ObjectFactory.GetAllInstances(type))
        yield return allInstance;
    }

    [DebuggerStepThrough]
    public IEnumerable<TType> GetAllInstances<TType>()
    {
      foreach (TType allInstance in this.GetAllInstances(typeof (TType)))
        yield return allInstance;
    }

    [DebuggerStepThrough]
    public void DisposeInstance(object instance)
    {
    }

    [DebuggerStepThrough]
    public TType GetNamedInstance<TType>(string key) => (TType) this.GetNamedInstance(typeof (TType), key);

    [DebuggerStepThrough]
    public object GetNamedInstance(Type type, string key) => ObjectFactory.GetNamedInstance(type, key);
  }
}
