// Decompiled with JetBrains decompiler
// Type: Path_Finder.FileManager
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using Path_Finder.DataTypes;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows;

namespace Path_Finder
{
  public static class FileManager
  {
    public static CitiesLocations ReadLocations(string filePath)
    {
      if (File.Exists(filePath))
      {
        char[] charArray = " ".ToCharArray();
        StreamReader streamReader = (StreamReader) null;
        try
        {
          streamReader = new StreamReader(filePath);
          CitiesLocations citiesLocations = new CitiesLocations();
          string str;
          while ((str = streamReader.ReadLine()) != null)
          {
            if (str.Equals("END"))
              return citiesLocations;
            string[] strArray = str.Split(charArray, 3);
            string newCityName = strArray[0];
            int newXCoord = int.Parse(strArray[1]);
            int newYCoord = int.Parse(strArray[2]);
            citiesLocations.locations.Add(new City(newCityName), new Coordinates(newXCoord, newYCoord));
          }
          int num = (int) MessageBox.Show("ERROR! File is corrupted.", "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
          return (CitiesLocations) null;
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(ex.ToString(), "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
          return (CitiesLocations) null;
        }
        finally
        {
          streamReader?.Close();
        }
      }
      else
      {
        int num = (int) MessageBox.Show("ERROR! File not found.", "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
        return (CitiesLocations) null;
      }
    }

    public static bool VerifyLocationsFile(string filePath)
    {
      if (!File.Exists(filePath))
        return false;
      char[] charArray = " ".ToCharArray();
      StreamReader streamReader = (StreamReader) null;
      try
      {
        streamReader = new StreamReader(filePath);
        string str;
        while ((str = streamReader.ReadLine()) != null)
        {
          if (str.Equals("END"))
            return true;
          string[] strArray = str.Split(charArray);
          if (strArray.Length != 3 || !int.TryParse(strArray[1], out int _) || !int.TryParse(strArray[2], out int _))
            return false;
        }
        return false;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString(), "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
        return false;
      }
      finally
      {
        streamReader?.Close();
      }
    }

    public static CitiesConnections ReadConnections(string filePath)
    {
      if (File.Exists(filePath))
      {
        StreamReader streamReader = (StreamReader) null;
        char[] charArray = " ".ToCharArray();
        try
        {
          streamReader = new StreamReader(filePath);
          CitiesConnections citiesConnections = new CitiesConnections();
          string str;
          while ((str = streamReader.ReadLine()) != null)
          {
            if (str.Equals("END"))
              return citiesConnections;
            string[] strArray = str.Split(charArray);
            int num = int.Parse(strArray[1]);
            List<City> cityList = new List<City>();
            for (int index = 0; index < num; ++index)
              cityList.Add(new City(strArray[index + 2]));
            citiesConnections.connections.Add(new City(strArray[0]), cityList);
          }
          int num1 = (int) MessageBox.Show("ERROR! File is corrupted.", "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
          return (CitiesConnections) null;
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(ex.ToString(), "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
          return (CitiesConnections) null;
        }
        finally
        {
          streamReader?.Close();
        }
      }
      else
      {
        int num = (int) MessageBox.Show("ERROR! File not found.", "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
        return (CitiesConnections) null;
      }
    }

    public static bool VerifyConnectionsFile(string filePath)
    {
      if (!File.Exists(filePath))
        return false;
      StreamReader streamReader = (StreamReader) null;
      char[] charArray = " ".ToCharArray();
      try
      {
        streamReader = new StreamReader(filePath);
        string str;
        while ((str = streamReader.ReadLine()) != null)
        {
          if (str.Equals("END"))
            return true;
          string[] strArray = str.Split(charArray);
          if (strArray.Length < 2)
            return false;
          int result = int.Parse(strArray[1]);
          if (!int.TryParse(strArray[1], out result) || strArray.Length < result + 2)
            return false;
        }
        return false;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString(), "Path Finder", MessageBoxButton.OK, MessageBoxImage.Hand);
        return false;
      }
      finally
      {
        streamReader?.Close();
      }
    }
  }
}
