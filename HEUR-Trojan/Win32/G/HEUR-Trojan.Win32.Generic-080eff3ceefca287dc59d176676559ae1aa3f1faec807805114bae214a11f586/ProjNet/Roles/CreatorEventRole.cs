// Decompiled with JetBrains decompiler
// Type: ProjNet.Roles.CreatorEventRole
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using ProjNet.Consumers;
using ProjNet.Definitions;
using ProjNet.Objects;
using ProjNet.Pools;
using ProjNet.Rules;
using ProjNet.Shared;
using ProjNet.Structs;
using ProjNet.Visitors;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;
using TYPELIBA.Pages;

namespace ProjNet.Roles
{
  public class CreatorEventRole
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Worker ViewObject(string var1)
    {
      int num1 = 12;
      string str;
      Worker worker1;
      while (true)
      {
        int num2 = num1;
        StringReader var1_1;
        Worker worker2;
        Item obj;
        string s;
        while (true)
        {
          uint stringHash;
          switch (num2)
          {
            case 0:
            case 12:
              worker2 = (Worker) null;
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 7;
            case 1:
              if (stringHash != 3797054307U || !(s == "LOCAL_CS"))
                goto label_10;
              else
                break;
            case 2:
              goto label_10;
            case 3:
            case 5:
              str = obj.CalculateObject();
              s = str;
              // ISSUE: reference to a compiler-generated method
              stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(s);
              if (stringHash <= 2247730021U)
              {
                if (stringHash > 638013191U)
                {
                  if (stringHash != 1404502957U)
                  {
                    if (CreatorEventRole.StartDispatcher())
                    {
                      num2 = 11;
                      continue;
                    }
                    goto case 7;
                  }
                  else
                  {
                    if (s == "VERT_CS")
                      break;
                    goto label_10;
                  }
                }
                else if (stringHash == 11355852U)
                {
                  if (s == "DATUM")
                  {
                    worker2 = (Worker) CreatorEventRole.AwakeObject(obj);
                    int num3 = 10;
                    num2 = CreatorEventRole.InitDispatcher() ? num3 : num3;
                    continue;
                  }
                  goto label_10;
                }
                else if (stringHash == 638013191U)
                {
                  if (s == "UNIT")
                  {
                    worker2 = (Worker) CreatorEventRole.SetObject(obj);
                    if (true)
                    {
                      num2 = 9;
                      continue;
                    }
                    goto case 7;
                  }
                  else
                    goto label_10;
                }
                else
                {
                  num2 = 2;
                  continue;
                }
              }
              else if (stringHash > 3797054307U)
              {
                if (stringHash != 3835272864U)
                {
                  if (stringHash != 4015832123U)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_19;
                }
                else
                {
                  if (s == "FITTED_CS")
                    break;
                  goto label_10;
                }
              }
              else if (stringHash == 2342259385U)
              {
                if (s == "GEOCCS")
                  break;
                goto label_10;
              }
              else if (stringHash == 3517975221U)
              {
                if (s == "COMPD_CS")
                  break;
                goto label_10;
              }
              else
                goto case 1;
            case 4:
              obj = new Item((TextReader) var1_1);
              int num4 = (int) obj.ReadObject();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 6;
            case 6:
              if (stringHash == 4100628567U && s == "PRIMEM")
              {
                worker2 = (Worker) CreatorEventRole.ReflectObject(obj);
                goto case 7;
              }
              else
                goto label_10;
            case 7:
            case 9:
            case 10:
label_11:
              var1_1.Close();
              worker1 = worker2;
              num2 = 13;
              continue;
            case 8:
              goto label_6;
            case 11:
              if (stringHash == 1878324148U)
              {
                if (s == "PROJCS")
                  break;
                goto label_10;
              }
              else if (stringHash != 2247730021U || !(s == "GEOGCS"))
                goto label_10;
              else
                break;
            case 13:
              goto label_43;
            default:
              goto label_41;
          }
          worker2 = (Worker) CreatorEventRole.ManageObject(var1, obj);
          goto label_11;
        }
label_6:
        var1_1 = new StringReader(var1);
        num1 = 4;
        continue;
label_19:
        if (s == "SPHEROID")
        {
          worker2 = (Worker) CreatorEventRole.PopObject(obj);
          num1 = 7;
          continue;
        }
        break;
label_41:
        num1 = 1;
      }
label_10:
      throw new ArgumentException(string.Format("'{0}' is not recognized.", (object) str));
label_43:
      return worker1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static ProccesorAccountCollection SetObject(Item spec)
    {
      int num1 = 1;
      ProccesorAccountCollection accountCollection;
      while (true)
      {
        int num2 = num1;
        string empty;
        long vis;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              empty = string.Empty;
              vis = -1L;
              goto case 6;
            case 1:
              spec.RemoveObject("[");
              num2 = 3;
              continue;
            case 3:
              goto label_1;
            case 4:
            case 5:
              goto label_9;
            case 6:
              int num3 = (int) spec.ReadObject();
              if (spec.CalculateObject() == ",")
              {
                num2 = 5;
                continue;
              }
              goto label_10;
            case 7:
              goto label_11;
            default:
              num2 = 6;
              continue;
          }
        }
label_1:
        string cont = spec.UpdateObject();
        spec.RemoveObject(",");
        int num4 = (int) spec.ReadObject();
        double key = spec.WriteObject();
        num1 = 0;
        continue;
label_9:
        spec.CalcObject(ref empty, ref vis);
        spec.RemoveObject("]");
label_10:
        accountCollection = (ProccesorAccountCollection) new ConsumerErrorObject(key, cont, empty, vis, string.Empty, string.Empty, string.Empty);
        num1 = 7;
      }
label_11:
      return accountCollection;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static ExceptionRule ComputeObject(Item def)
    {
      int num1 = 6;
      ExceptionRule exceptionRule;
      while (true)
      {
        int num2 = num1;
        long vis;
        string empty;
        double key;
        string reg;
        while (true)
        {
          switch (num2)
          {
            case 0:
              int num3 = (int) def.ReadObject();
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
            case 1:
            case 3:
              reg = def.UpdateObject();
              def.RemoveObject(",");
              int num4 = (int) def.ReadObject();
              key = def.WriteObject();
              empty = string.Empty;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_12;
            case 2:
            case 5:
              vis = -1L;
              goto case 0;
            case 4:
              goto label_7;
            case 6:
              goto label_5;
            case 7:
              goto label_12;
            default:
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_5;
          }
        }
label_5:
        def.RemoveObject("[");
        num1 = 3;
        continue;
label_7:
        if (def.CalculateObject() == ",")
        {
          def.CalcObject(ref empty, ref vis);
          def.RemoveObject("]");
        }
        exceptionRule = (ExceptionRule) new InterpreterRule(key, reg, empty, vis, string.Empty, string.Empty, string.Empty);
        num1 = 7;
      }
label_12:
      return exceptionRule;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static FieldConsumerAdapter AddObject(Item setup)
    {
      int num1 = 3;
      if (true)
        goto label_5;
label_1:
      string empty;
      long vis;
      if (setup.CalculateObject() == ",")
      {
        setup.CalcObject(ref empty, ref vis);
        setup.RemoveObject("]");
        num1 = 5;
        goto label_5;
      }
      else
        goto label_9;
label_4:
      int num2;
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_3;
          case 1:
            goto label_1;
          case 3:
            goto label_7;
          case 4:
          case 5:
            goto label_8;
          case 6:
            goto label_10;
          case 7:
            goto label_11;
          default:
            if (CreatorEventRole.StartDispatcher())
            {
              num1 = 1;
              continue;
            }
            goto label_7;
        }
      }
label_3:
      empty = string.Empty;
      vis = -1L;
      int num3 = (int) setup.ReadObject();
      goto label_1;
label_7:
      setup.RemoveObject("[");
      num2 = 6;
      goto label_4;
label_8:
      goto label_9;
label_10:
      string pred = setup.UpdateObject();
      setup.RemoveObject(",");
      int num4 = (int) setup.ReadObject();
      double info = setup.WriteObject();
      num2 = 0;
      goto label_4;
label_11:
      FieldConsumerAdapter fieldConsumerAdapter;
      return fieldConsumerAdapter;
label_9:
      fieldConsumerAdapter = (FieldConsumerAdapter) new ProducerEventRole(info, pred, empty, vis, string.Empty, string.Empty, string.Empty);
      num2 = 7;
      goto label_4;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static AdapterErrorPool StartObject(Item ident)
    {
      int num1 = 1;
      string info;
      uint stringHash;
      string upper;
      AdapterErrorPool adapterErrorPool;
      string str;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              do
              {
                int num3 = (int) ident.ReadObject();
                str = ident.CalculateObject();
                ident.RemoveObject("]");
                upper = str.ToUpper(CultureInfo.InvariantCulture);
                // ISSUE: reference to a compiler-generated method
                stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(upper);
                if (stringHash > 1699709860U)
                {
                  if (stringHash > 2842644412U)
                  {
                    if (stringHash == 2918165742U)
                      goto label_8;
                  }
                  else
                    goto label_30;
                }
                else
                  goto label_24;
              }
              while (false);
              goto label_31;
label_8:
              if (upper == "WEST")
              {
                adapterErrorPool = new AdapterErrorPool(info, LinkTransactionType.West);
                num2 = 12;
                continue;
              }
              goto label_34;
label_31:
              num2 = 9;
              continue;
label_30:
              num2 = 7;
              continue;
            case 1:
              goto label_3;
            case 2:
            case 11:
              goto label_1;
            case 3:
              goto label_16;
            case 4:
              goto label_17;
            case 5:
            case 6:
              goto label_32;
            case 7:
              goto label_19;
            case 8:
              goto label_28;
            case 9:
              goto label_4;
            case 10:
              goto label_2;
            case 12:
              goto label_35;
            default:
              goto label_27;
          }
        }
label_1:
        ident.RemoveObject("AXIS");
        num1 = 10;
        continue;
label_2:
        ident.RemoveObject("[");
        info = ident.UpdateObject();
        num1 = 3;
        continue;
label_3:
        bool flag = ident.CalculateObject() != "AXIS";
        num1 = 4;
        continue;
label_16:
        ident.RemoveObject(",");
        num1 = 0;
        continue;
label_17:
        if (flag)
        {
          num1 = 11;
          continue;
        }
        goto label_2;
label_24:
        if (stringHash == 651557717U)
          goto label_5;
        else
          goto label_32;
label_27:
        num1 = 5;
        continue;
label_32:
        if (stringHash != 1660128160U)
          num1 = 8;
        else
          goto label_7;
      }
label_4:
      if (stringHash == 3062943450U && upper == "SOUTH")
      {
        adapterErrorPool = new AdapterErrorPool(info, LinkTransactionType.South);
        goto label_35;
      }
      else
        goto label_34;
label_5:
      if (upper == "DOWN")
      {
        adapterErrorPool = new AdapterErrorPool(info, LinkTransactionType.Down);
        goto label_35;
      }
      else
        goto label_34;
label_7:
      if (upper == "UP")
      {
        adapterErrorPool = new AdapterErrorPool(info, LinkTransactionType.Up);
        goto label_35;
      }
      else
        goto label_34;
label_19:
      if (stringHash == 1894199125U)
      {
        if (upper == "OTHER")
        {
          adapterErrorPool = new AdapterErrorPool(info, LinkTransactionType.Other);
          goto label_35;
        }
        else
          goto label_34;
      }
      else if (stringHash == 2842644412U && upper == "EAST")
      {
        adapterErrorPool = new AdapterErrorPool(info, LinkTransactionType.East);
        goto label_35;
      }
      else
        goto label_34;
label_28:
      if (stringHash == 1699709860U && upper == "NORTH")
      {
        adapterErrorPool = new AdapterErrorPool(info, LinkTransactionType.North);
        goto label_35;
      }
label_34:
      throw new ArgumentException("Invalid axis name '" + str + "' in WKT");
label_35:
      return adapterErrorPool;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Listener ManageObject(string last, Item cont)
    {
      int num1 = 3;
      string s;
      uint stringHash;
      Listener listener;
      while (true)
      {
        int num2 = num1;
        string str;
        while (true)
        {
          switch (num2)
          {
            case 0:
              s = str;
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto label_18;
            case 1:
            case 4:
            case 5:
              goto label_26;
            case 2:
            case 8:
              goto label_6;
            case 3:
              goto label_1;
            case 6:
              goto label_8;
            case 7:
              goto label_18;
            case 9:
              goto label_27;
            default:
              goto label_13;
          }
        }
label_1:
        str = cont.CalculateObject();
        num1 = 0;
        continue;
label_6:
        // ISSUE: reference to a compiler-generated method
        stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(s);
        if (stringHash <= 2247730021U)
        {
          num1 = 6;
          continue;
        }
        if (stringHash > 3517975221U)
        {
          if (stringHash != 3797054307U)
          {
            if (stringHash == 3835272864U)
            {
              if (!(s == "FITTED_CS"))
              {
                num1 = 1;
                continue;
              }
              goto label_25;
            }
            else
              goto label_26;
          }
          else
            goto label_14;
        }
        else
          goto label_10;
label_8:
        switch (stringHash)
        {
          case 1404502957:
            goto label_2;
          case 1878324148:
            if (s == "PROJCS")
            {
              listener = (Listener) CreatorEventRole.CancelObject(cont);
              num1 = 9;
              continue;
            }
            num1 = 4;
            continue;
          case 2247730021:
            goto label_21;
          default:
            goto label_26;
        }
label_13:
        num1 = 7;
      }
label_2:
      if (s == "VERT_CS")
        goto label_25;
      else
        goto label_26;
label_10:
      if (stringHash == 2342259385U)
      {
        if (s == "GEOCCS")
          goto label_25;
        else
          goto label_26;
      }
      else
        goto label_18;
label_14:
      if (s == "LOCAL_CS")
        goto label_25;
      else
        goto label_26;
label_18:
      if (stringHash != 3517975221U || !(s == "COMPD_CS"))
        goto label_26;
      else
        goto label_25;
label_21:
      if (s == "GEOGCS")
      {
        listener = (Listener) CreatorEventRole.DeleteObject(cont);
        goto label_27;
      }
      else
        goto label_26;
label_25:
      throw new NotSupportedException(string.Format("{0} coordinate system is not supported.", (object) last));
label_26:
      throw new InvalidOperationException(string.Format("{0} coordinate system is not recognized.", (object) last));
label_27:
      return listener;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static AccountTokenStructBuilder ListObject(Item spec)
    {
      int num1 = 1;
      AccountTokenStructBuilder tokenStructBuilder1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        AccountTokenStructBuilder tokenStructBuilder2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_6;
            case 1:
              spec.RemoveObject("[");
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto label_6;
            case 2:
              spec.RemoveObject(",");
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_2;
            case 3:
              goto label_10;
            case 5:
            case 8:
              goto label_11;
            case 6:
              tokenStructBuilder2.m_Page = spec.WriteObject();
              spec.RemoveObject(",");
              int num3 = (int) spec.ReadObject();
              tokenStructBuilder2.product = spec.WriteObject();
              int num4 = 2;
              num2 = CreatorEventRole.InitDispatcher() ? num4 : num4;
              continue;
            case 7:
              goto label_2;
            case 9:
              tokenStructBuilder2 = new AccountTokenStructBuilder();
              int num5 = (int) spec.ReadObject();
              if (CreatorEventRole.StartDispatcher())
              {
                num2 = 6;
                continue;
              }
              goto case 6;
            case 10:
              flag = spec.CalculateObject() == ",";
              num2 = 5;
              continue;
            case 11:
              goto label_19;
            default:
              goto label_9;
          }
        }
label_2:
        int num6 = (int) spec.ReadObject();
        if (spec.CalculateObject() == ",")
        {
          int num7 = (int) spec.ReadObject();
          num1 = 3;
          continue;
        }
        goto label_14;
label_6:
        int num8 = (int) spec.ReadObject();
        tokenStructBuilder2._Service = spec.WriteObject();
        goto label_2;
label_9:
        num1 = 7;
        continue;
label_10:
        tokenStructBuilder2.thread = spec.WriteObject();
        spec.RemoveObject(",");
        int num9 = (int) spec.ReadObject();
        tokenStructBuilder2.m_Parameter = spec.WriteObject();
        spec.RemoveObject(",");
        int num10 = (int) spec.ReadObject();
        tokenStructBuilder2.m_Base = spec.WriteObject();
        int num11 = (int) spec.ReadObject();
        num1 = 10;
        continue;
label_11:
        if (flag)
        {
          int num12 = (int) spec.ReadObject();
          tokenStructBuilder2.m_Val = spec.WriteObject();
        }
label_14:
        if (spec.CalculateObject() != "]")
          spec.RemoveObject("]");
        tokenStructBuilder1 = tokenStructBuilder2;
        num1 = 11;
      }
label_19:
      return tokenStructBuilder1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Stub PopObject(Item task)
    {
      int num1 = 3;
      if (CreatorEventRole.StartDispatcher())
        goto label_8;
label_1:
      string empty;
      long vis;
      if (task.CalculateObject() == ",")
      {
        task.CalcObject(ref empty, ref vis);
        task.RemoveObject("]");
      }
      double ident;
      double template;
      string key4;
      Stub stub = (Stub) new PoolPolicyList(ident, 0.0, template, true, InterpreterRule.ManageProcess(), key4, empty, vis, string.Empty, string.Empty, string.Empty);
      int num2 = 8;
label_7:
      num1 = num2;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
            task.RemoveObject(",");
            int num3 = (int) task.ReadObject();
            goto case 7;
          case 1:
          case 6:
            goto label_5;
          case 2:
          case 4:
            task.RemoveObject(",");
            int num4 = (int) task.ReadObject();
            ident = task.WriteObject();
            if (!CreatorEventRole.InitDispatcher())
            {
              num1 = 0;
              continue;
            }
            goto case 7;
          case 3:
            task.RemoveObject("[");
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto label_5;
          case 5:
            goto label_1;
          case 7:
            template = task.WriteObject();
            int num5 = (int) task.ReadObject();
            empty = string.Empty;
            vis = -1L;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_13;
          case 8:
            goto label_13;
          default:
            goto label_9;
        }
      }
label_5:
      key4 = task.UpdateObject();
      num2 = 4;
      goto label_7;
label_9:
      num2 = 7;
      goto label_7;
label_13:
      return stub;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Factory CheckObject(Item def)
    {
      int num1 = 7;
      Factory factory;
      while (true)
      {
        int num2 = num1;
        string str;
        List<Interceptor> ivk1;
        string task;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              def.RemoveObject("PROJECTION");
              num2 = 8;
              continue;
            case 1:
              goto label_5;
            case 2:
            case 5:
              int num3 = (int) def.ReadObject();
              break;
            case 3:
              goto label_10;
            case 4:
              goto label_11;
            case 6:
              def.RemoveObject("PARAMETER");
              ivk1 = new List<Interceptor>();
              break;
            case 8:
              def.RemoveObject("[");
              str = def.UpdateObject();
              def.RemoveObject("]");
              def.RemoveObject(",");
              num2 = 6;
              continue;
            case 9:
              goto label_14;
            default:
              num2 = 4;
              continue;
          }
          if (def.CalculateObject() == "PARAMETER")
          {
            def.RemoveObject("[");
            task = def.UpdateObject();
            num2 = 1;
          }
          else
            break;
        }
        string empty = string.Empty;
        num1 = 3;
        continue;
label_5:
        def.RemoveObject(",");
        goto label_11;
label_10:
        long key3 = -1;
        factory = (Factory) new Tokenizer(str, ivk1, str, empty, key3, string.Empty, string.Empty, string.Empty);
        num1 = 9;
        continue;
label_11:
        int num4 = (int) def.ReadObject();
        double ivk2 = def.WriteObject();
        def.RemoveObject("]");
        def.RemoveObject(",");
        ivk1.Add(new Interceptor(task, ivk2));
        num1 = 2;
      }
label_14:
      return factory;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Utils CancelObject(Item reference)
    {
      int num1 = 1;
      Utils utils1;
      while (true)
      {
        string ivk4;
        RulesAccountCollection result;
        int num2;
        Utils utils2;
        string empty;
        long vis;
        List<AdapterErrorPool> x3;
        Factory ident2;
        ProccesorAccountCollection proc;
        switch (num1)
        {
          case 0:
          case 3:
            empty = string.Empty;
            vis = -1L;
            int num3 = (int) reference.ReadObject();
            num1 = 2;
            continue;
          case 1:
            reference.RemoveObject("[");
            num2 = 8;
            goto label_21;
          case 2:
          case 4:
            x3 = new List<AdapterErrorPool>(2);
            num2 = 5;
            goto label_21;
          case 5:
            if (reference.CalculateObject() == ",")
            {
              int num4 = (int) reference.ReadObject();
              break;
            }
            goto label_14;
          case 6:
            if (reference.CalculateObject() == ",")
            {
              int num5 = (int) reference.ReadObject();
            }
            if (reference.CalculateObject() == "AUTHORITY")
            {
              reference.CalcObject(ref empty, ref vis);
              reference.RemoveObject("]");
            }
            goto label_14;
          case 7:
label_1:
            if (reference.CalculateObject() == ",")
            {
              int num6 = (int) reference.ReadObject();
            }
            break;
          case 8:
label_6:
            ivk4 = reference.UpdateObject();
            reference.RemoveObject(",");
            reference.RemoveObject("GEOGCS");
            result = CreatorEventRole.DeleteObject(reference);
            num2 = 10;
            goto label_21;
          case 9:
            x3.Add(new AdapterErrorPool("Y", LinkTransactionType.North));
            goto label_26;
          case 10:
label_16:
            reference.RemoveObject(",");
            ident2 = CreatorEventRole.CheckObject(reference);
            proc = (ProccesorAccountCollection) CreatorEventRole.ComputeObject(reference);
            num2 = 0;
            goto label_21;
          case 11:
            utils1 = utils2;
            num2 = 12;
            goto label_21;
          case 12:
            goto label_27;
          default:
            num2 = 7;
            goto label_21;
        }
        if (!(reference.CalculateObject() == "AXIS"))
        {
          if (CreatorEventRole.StartDispatcher())
          {
            num1 = 6;
            continue;
          }
          goto label_6;
        }
        else
        {
          x3.Add(CreatorEventRole.StartObject(reference));
          int num7 = (int) reference.ReadObject();
          goto label_1;
        }
label_14:
        if (x3.Count == 0)
        {
          x3.Add(new AdapterErrorPool("X", LinkTransactionType.East));
          if (CreatorEventRole.StartDispatcher())
          {
            num1 = 9;
            continue;
          }
          goto label_16;
        }
        else
          goto label_26;
label_21:
        num1 = num2;
        continue;
label_26:
        utils2 = (Utils) new Merchant(result.RemoveState(), result, (ExceptionRule) (proc as InterpreterRule), ident2, x3, ivk4, empty, vis, string.Empty, string.Empty, string.Empty);
        num2 = 11;
        goto label_21;
      }
label_27:
      return utils1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static RulesAccountCollection DeleteObject(Item first)
    {
      int num1 = 1;
      if (CreatorEventRole.StartDispatcher())
        goto label_6;
label_1:
      bool flag;
      List<AdapterErrorPool> config2;
      if (flag)
      {
        config2.Add(new AdapterErrorPool("Lon", LinkTransactionType.East));
        config2.Add(new AdapterErrorPool("Lat", LinkTransactionType.North));
      }
      FieldConsumerAdapter info;
      RegistryPolicyList result;
      PrototypeEventRole dic;
      string info3;
      string empty;
      long vis;
      RulesAccountCollection accountCollection = (RulesAccountCollection) new ListErrorPool(info, result, dic, config2, info3, empty, vis, string.Empty, string.Empty, string.Empty);
      int num2 = 13;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 10:
            goto label_1;
          case 1:
            first.RemoveObject("[");
            num1 = 12;
            continue;
          case 2:
            if (first.CalculateObject() == ",")
            {
              int num3 = (int) first.ReadObject();
            }
            if (first.CalculateObject() == "AUTHORITY")
            {
              first.CalcObject(ref empty, ref vis);
              first.RemoveObject("]");
            }
            break;
          case 3:
            goto label_10;
          case 4:
          case 5:
            dic = CreatorEventRole.ReflectObject(first);
            first.RemoveObject(",");
            first.RemoveObject("UNIT");
            info = CreatorEventRole.AddObject(first);
            empty = string.Empty;
            vis = -1L;
            goto case 6;
          case 6:
            int num4 = (int) first.ReadObject();
            config2 = new List<AdapterErrorPool>(2);
            if (!(first.CalculateObject() == ","))
              break;
            goto label_26;
          case 7:
            goto label_11;
          case 8:
            goto label_8;
          case 9:
            goto label_14;
          case 11:
            goto label_24;
          case 12:
            goto label_9;
          case 13:
            goto label_28;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto label_8;
        }
        flag = config2.Count == 0;
        num1 = 0;
      }
label_8:
      first.RemoveObject("DATUM");
      num2 = 3;
      goto label_5;
label_9:
      info3 = first.UpdateObject();
      first.RemoveObject(",");
      num2 = 8;
      goto label_5;
label_10:
      result = CreatorEventRole.AwakeObject(first);
      first.RemoveObject(",");
      num2 = 11;
      goto label_5;
label_11:
      int num5 = (int) first.ReadObject();
      if (first.CalculateObject() == ",")
      {
        num2 = 9;
        goto label_5;
      }
      else
        goto label_15;
label_14:
      int num6 = (int) first.ReadObject();
label_15:
label_16:
      if (!(first.CalculateObject() == "AXIS"))
      {
        num2 = 2;
        goto label_5;
      }
      else
      {
        config2.Add(CreatorEventRole.StartObject(first));
        num2 = 7;
        goto label_5;
      }
label_24:
      first.RemoveObject("PRIMEM");
      num2 = 4;
      goto label_5;
label_26:
      int num7 = (int) first.ReadObject();
      goto label_16;
label_28:
      return accountCollection;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static RegistryPolicyList AwakeObject(Item first)
    {
      int num1 = 1;
      RegistryPolicyList registryPolicyList;
      while (true)
      {
        string empty;
        long vis;
        string key2;
        int num2;
        Stub res;
        bool flag1;
        AccountTokenStructBuilder attr;
        bool flag2;
        switch (num1)
        {
          case 0:
            if (!flag1)
            {
              registryPolicyList = (RegistryPolicyList) new TYPELIBA.Messages.Attribute(res, attr, (AuthorTaskCommentPriority) 1002, key2, empty, vis, string.Empty, string.Empty, string.Empty);
              num2 = 9;
              break;
            }
            int num3 = (int) first.ReadObject();
            if (first.CalculateObject() == "TOWGS84")
            {
              attr = CreatorEventRole.ListObject(first);
              int num4 = (int) first.ReadObject();
              goto label_15;
            }
            else
            {
              flag2 = first.CalculateObject() == "AUTHORITY";
              num2 = 7;
              break;
            }
          case 1:
            attr = (AccountTokenStructBuilder) null;
            num2 = 6;
            break;
          case 2:
            first.RemoveObject(",");
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 7;
          case 3:
          case 8:
            first.RemoveObject("SPHEROID");
            res = CreatorEventRole.PopObject(first);
            goto case 4;
          case 4:
          case 5:
            int num5 = (int) first.ReadObject();
            goto label_16;
          case 6:
            empty = string.Empty;
            vis = -1L;
            first.RemoveObject("[");
            key2 = first.UpdateObject();
            num2 = 2;
            break;
          case 7:
            if (flag2)
            {
              first.CalcObject(ref empty, ref vis);
              first.RemoveObject("]");
              goto label_15;
            }
            else
              goto label_15;
          case 9:
            goto label_18;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 0;
        }
label_3:
        num1 = num2;
        continue;
label_15:
label_16:
        flag1 = first.CalculateObject() == ",";
        num2 = 0;
        goto label_3;
      }
label_18:
      return registryPolicyList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static PrototypeEventRole ReflectObject(Item last)
    {
      int num1 = 5;
      PrototypeEventRole prototypeEventRole;
      while (true)
      {
        string empty;
        long vis;
        bool flag;
        int num2;
        string template;
        double num3;
        switch (num1)
        {
          case 0:
            num3 = last.WriteObject();
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 2;
          case 1:
          case 6:
            template = last.UpdateObject();
            last.RemoveObject(",");
            int num4 = (int) last.ReadObject();
            num2 = 0;
            break;
          case 2:
            if (flag)
            {
              last.CalcObject(ref empty, ref vis);
              last.RemoveObject("]");
            }
            prototypeEventRole = (PrototypeEventRole) new PageProcessVisitor(num3, (FieldConsumerAdapter) ProducerEventRole.VerifyObject(), template, empty, vis, string.Empty, string.Empty, string.Empty);
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto label_13;
          case 3:
          case 4:
            int num5 = (int) last.ReadObject();
            goto case 7;
          case 5:
            last.RemoveObject("[");
            num2 = 6;
            break;
          case 7:
            empty = string.Empty;
            vis = -1L;
            flag = last.CalculateObject() == ",";
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto case 5;
          case 8:
            goto label_13;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
      }
label_13:
      return prototypeEventRole;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CreatorEventRole()
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool StartDispatcher() => true;

    internal static bool InitDispatcher() => false;
  }
}
