// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.OfflineStorageThread
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common
{
  public class OfflineStorageThread : MessageQueueProcessor, IQueuePersister, IQueueProcessor
  {
    private IQueueTransmitter a;
    private IOfflineDataStore b;
    private IAttributeLimiter c;

    public OfflineStorageThread(
      IOfflineDataStore offlineDataStore,
      IFlowController flowController,
      IQueueTransmitter transmitterThread,
      IAttributeLimiter attributeLimiter,
      ILogger logger,
      IAsyncProvider asyncprovider)
      : base(flowController, logger, asyncprovider)
    {
      this.b = offlineDataStore;
      this.a = transmitterThread;
      this.c = attributeLimiter;
    }

    public override void ProcessBatch(MessageBatch batch)
    {
      int A_1 = 10;
      int num1 = 0;
      switch (num1)
      {
        default:
          // ISSUE: variable of a compiler-generated type
          OfflineStorageThread.a a;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              // ISSUE: object of a compiler-generated type is created
              a = new OfflineStorageThread.a();
              // ISSUE: reference to a compiler-generated field
              a.a = batch;
              num2 = 1;
              num1 = num2;
              goto default;
            default:
              List<MessageBatch>.Enumerator enumerator;
              List<MessageBatch> source;
              bool sendSucceeded;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    goto label_29;
                  case 1:
                    if (this.flowController.OkToTransmit())
                    {
                      num2 = 2;
                      num1 = num2;
                      continue;
                    }
                    this.logger.LogInfo(Utils.a("ﶽ꾿곁ꋃ꿅꿇뿉뻋꿍\uA4CF믑믓룕\uF8D7뻙돛믝鏟싡諣觥鳧쫩鳫语苯\u9FF1鷳苵\uD8F7軹铻鯽\u20FF焁愃栅氇按戋植』紑爓㘕甗缙漛洝䄟䔡䄣唥ا\u0A29洫娭䐯圱夳䘵䰷匹刻夽怿㙁⭃晅⭇⭉⽋♍㕏牑㥓㍕⭗⥙㵛㥝՟ᅡ䩣", A_1));
                    // ISSUE: reference to a compiler-generated field
                    this.SaveDataOffline(a.a);
                    num2 = 7;
                    num1 = num2;
                    continue;
                  case 2:
                    // ISSUE: reference to a compiler-generated field
                    sendSucceeded = this.a.Transmit(a.a);
                    this.flowController.OnSend(sendSucceeded);
                    num2 = 11;
                    num1 = num2;
                    continue;
                  case 3:
                    num2 = 6;
                    num1 = num2;
                    continue;
                  case 4:
                    num2 = -17748;
                    int num3 = num2;
                    num2 = -17748;
                    int num4 = num2;
                    switch (num3 == num4 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_25;
                      default:
                        goto label_27;
                    }
                  case 5:
label_25:
                    enumerator = source.GetEnumerator();
                    num2 = 12;
                    num1 = num2;
                    continue;
                  case 6:
                    // ISSUE: reference to a compiler-generated field
                    if (this.flowController.BatchHasExpired(a.a))
                    {
                      num2 = 4;
                      num1 = num2;
                      continue;
                    }
                    // ISSUE: reference to a compiler-generated field
                    source = this.a(a.a);
                    num2 = 10;
                    num1 = num2;
                    continue;
                  case 7:
                    goto label_35;
                  case 8:
                    if (this.flowController.SupportOfflineStorage)
                    {
                      num2 = 3;
                      num1 = num2;
                      continue;
                    }
                    goto label_12;
                  case 9:
                    // ISSUE: reference to a compiler-generated field
                    this.b.ClearBatch(a.a);
                    num2 = 5;
                    num1 = num2;
                    continue;
                  case 10:
                    // ISSUE: reference to a compiler-generated method
                    if (source.All<MessageBatch>(new Func<MessageBatch, bool>(a.b)))
                    {
                      num2 = 9;
                      num1 = num2;
                      continue;
                    }
                    goto case 5;
                  case 11:
                    if (!sendSucceeded)
                    {
                      // ISSUE: reference to a compiler-generated field
                      ++a.a.FailureCount;
                      num2 = 8;
                      num1 = num2;
                      continue;
                    }
                    num2 = 0;
                    num1 = num2;
                    continue;
                  case 12:
                    goto label_14;
                  default:
                    goto label_3;
                }
              }
label_35:
              return;
label_12:
              num2 = 1;
              if (num2 == 0)
                ;
              this.Running = false;
              return;
label_14:
              try
              {
                num2 = 0;
                int num5 = num2;
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 1:
                      goto label_37;
                    case 3:
                      num2 = 1;
                      num5 = num2;
                      continue;
                    case 4:
                      if (enumerator.MoveNext())
                      {
                        this.SaveDataOffline(enumerator.Current);
                        num2 = 2;
                        num5 = num2;
                        continue;
                      }
                      num2 = 3;
                      num5 = num2;
                      continue;
                  }
                  num2 = 4;
                  num5 = num2;
                }
label_37:
                return;
              }
              finally
              {
                enumerator.Dispose();
              }
label_27:
              num2 = 0;
              if (num2 == 0)
                ;
              // ISSUE: reference to a compiler-generated field
              this.logger.LogWarning(Utils.a("\uEABD늿ꏁ\uAAC3뗅ꗇꏉ뿋뷍맏뷑뫓\uF6D5럗볙ﳛꫝ裟蟡쓣蓥觧黩迫蛭탯髱闳藵\uD8F7鳹鷻韽泿朁怃★", A_1) + (object) a.a.FailureCount + Utils.a("麽뒿ꯁ꧃ꏅ믇\uEAC9귋ꃍ듏\uF2D1맓돕뷗껙꿛ﻝ铟諡臣웥诧飩藫髭闯胱鷳韵\uD8F7鳹鏻賽\u20FF昁愃樅洇縉攋愍縏㰑㐓䈕瀗缙㰛猝䔟儡圣䜥伧伩ఫ夭夯帱堳ᘵ娷弹᰻娽┿⹁⅃㉅ⵇ\u2E49手", A_1));
              // ISSUE: reference to a compiler-generated field
              this.b.ClearBatch(a.a);
              return;
label_29:
              // ISSUE: reference to a compiler-generated field
              this.b.ClearBatch(a.a);
              return;
          }
      }
    }

    private List<MessageBatch> a(MessageBatch A_0, [Optional] List<MessageBatch> A_1)
    {
      int A_1_1 = 7;
      switch (0)
      {
        default:
          int num1 = 1;
          while (true)
          {
            bool flag;
            int num2;
            List<MessageBatch> messageBatchList;
            switch (num1)
            {
              case 0:
                this.logger.LogInfo(Utils.a("\uE8BA즼킾돀ꛂꇄ\uE7C6\uA4C8껊뻌볎냐듒냔\uF7D6믘뫚\uA9DC볞觠쏢鋤軦鷨菪췬", A_1_1) + (object) A_0.Messages.Count + Utils.a("鮺킼\uDABE닀냂꓄ꃆ곈\uE3CA뻌\uE6CE\uF1D0뫒ꛔ\uF7D6귘듚닜\uFFDE跠苢韤胦賨엪췬껮藰蟲郴髶觸迺铼釾昀⌂焄栆⤈砊紌挎砐朒㔔挖焘縚㴜爞䐠倢嘤䘦丨个ബ䴮倰䜲嘴弶\u1738", A_1_1));
                num2 = 1;
                if (num2 == 0)
                  ;
                num2 = -3951;
                int num3 = num2;
                num2 = -3951;
                int num4 = num2;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    continue;
                  default:
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    num2 = 7;
                    num1 = num2;
                    continue;
                }
              case 1:
                switch (0)
                {
                  case 0:
                    goto label_4;
                  default:
                    continue;
                }
              case 2:
                goto label_5;
              case 3:
              case 5:
                goto label_22;
              case 4:
                if (flag)
                {
                  num2 = 0;
                  num1 = num2;
                  continue;
                }
                A_1.Add(A_0);
                num2 = 5;
                num1 = num2;
                continue;
              case 6:
                try
                {
                  flag = A_0.ToString(this.c).Length > this.flowController.MaximumBatchSize;
                }
                catch (OutOfMemoryException ex)
                {
                  flag = true;
                }
                num1 = 4;
                continue;
              case 7:
                if (A_0.Messages.Count > 1)
                {
                  int count = A_0.Messages.Count / 2;
                  List<Message> list1 = A_0.Messages.Take<Message>(count).ToList<Message>();
                  List<Message> list2 = A_0.Messages.Skip<Message>(count).ToList<Message>();
                  this.a(new MessageBatch(A_0.AgentInfo, A_0.Configuration, (IList<Message>) list1), A_1);
                  this.a(new MessageBatch(A_0.AgentInfo, A_0.Configuration, (IList<Message>) list2), A_1);
                  num2 = 3;
                  num1 = num2;
                  continue;
                }
                num2 = 2;
                num1 = num2;
                continue;
              case 8:
                messageBatchList = new List<MessageBatch>();
                break;
              default:
label_4:
                messageBatchList = A_1;
                if (messageBatchList == null)
                {
                  num2 = 8;
                  num1 = num2;
                  continue;
                }
                break;
            }
            A_1 = messageBatchList;
            flag = false;
            num2 = 6;
            num1 = num2;
          }
label_5:
          this.logger.LogWarning(Utils.a("\uE8BA풼톾ꛀ꿂ꃄ\uE7C6\uA4C8껊뻌볎냐듒냔\uF7D6냘\uA8DA\uFDDCꯞ軠賢엤详裨駪諬諮퇰蟲髴ퟶ鯸黺\uDDFC賾搀洂焄⤆⤈䘊栌簎成爒爔爖㤘氚琜猞䴠̢䜤䈦न伪䠬䌮吰䜲倴匶\u1738", A_1_1));
          return A_1;
label_22:
          return A_1;
      }
    }

    public override MessageBatch GetMessageBatch()
    {
      int A_1 = 11;
      int num1 = -3608;
      int num2 = num1;
      num1 = -3608;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (true)
            ;
          if (false)
            ;
          this.logger.LogInfo(Utils.a("\uEDBE꓀럂럄껆곈뷊\uA4CCꇎ뛐\uF3D2뛔뛖뫘돚룜믞쇠転胤铦髨諪諬諮퇰釲铴菶髸鏺폼", A_1));
          MessageBatch savedBatch = this.b.GetSavedBatch();
          savedBatch.AgentInfo.AdditionalInfo += Utils.a("龾껀ꗂꏄꯆꃈꗊ\uA8CC", A_1);
          return savedBatch;
        default:
          goto case 1;
      }
    }

    public void SaveDataOffline(MessageBatch batch)
    {
      int A_1 = 0;
      int num1;
      try
      {
        this.logger.LogInfo(Utils.a("\uE7B3ힵ캷펹튻\uD9BD\uE0BF꿁ꇃ뗅믇ꯉꯋꯍ\uF0CF냑뗓ꋕ믗닙ﳛ\uA9DD觟雡賣웥", A_1) + (object) batch.Messages.Count + Utils.a("钳\uDBB5\uDDB7즹쾻\uDFBD\uA7BF\uA7C1\uECC3뗅\uE1C7\uEAC9룋ꇍ\uF0CF뷑닓냕듗동닛믝샟釡郣觥髧诩诫语\uDEEF", A_1));
        this.b.SaveBatch(batch);
      }
      catch (OutOfMemoryException ex)
      {
        this.logger.LogWarning(Utils.a("\uE6B3ힵ횷骹펻쮽뒿\uE2C1ꯃꃅ\uE8C7\uA7C9꧋ꏍ뿏ꃑ귓\uF6D5ꯗ믙ꫛ럝軟藡쓣该跧駩\u9FEB迭韯韱퓳铵駷軹\u9FFB雽\u20FF甁洃爅怇⨉", A_1) + (object) batch.Messages.Count + Utils.a("钳\uDBB5\uDDB7즹쾻\uDFBD\uA7BF\uA7C1\uECC3뗅\uE1C7\uEBC9\uECCB迍\uA4CFꛑ뇓믕꣗껙뗛냝蟟싡郣觥죧駩鳫苭駯蛱퓳铵駷軹\u9FFB雽\u20FF态愃怅朇砉椋⸍挏猑戓缕瘗紙", A_1));
        MessageBatch[] source = batch.Split();
        if (((IEnumerable<MessageBatch>) source).Count<MessageBatch>() == 1)
        {
          num1 = -27124;
          int num2 = num1;
          num1 = -27124;
          int num3 = num1;
          switch (num2 == num3 ? 1 : 0)
          {
            case 0:
            case 2:
              break;
            default:
              num1 = 0;
              if (num1 == 0)
                ;
              this.logger.LogError(Utils.a("\uF6B3ힵ첷\uD9B9풻麽ꎿ귁\uAAC3닅꧇ꏉꋋꯍ듏\uF2D1뗓\uF6D5뗗뿙꿛귝臟藡臣웥鳧藩菫컭鳯鏱蛳釵鷷\uDAF9裻釽\u20FF焁愃琅愇欉怋服樏眑㨓㘕尗栙猛渝借䬡䨣䄥ࠧ䜩䤫崭䌯匱匳匵", A_1));
              goto label_9;
          }
        }
        this.SaveDataOffline(source[0]);
        this.SaveDataOffline(source[1]);
      }
      catch (Exception ex)
      {
        this.logger.LogError(Utils.a("﮳킵\uDEB7횹햻킽ꖿ\uE2C1럃닅\uA7C7룉귋꧍뗏\uF2D1ꃓ뻕\uAAD7뿙ꯛﻝ臟賡쓣鏥蛧迩铫黭闯釱胳鏵鳷\uDAF9駻賽狿洁瘃★簇砉甋服縏甑㐓戕眗㨙漛缝嘟䜡У䜥ࠧ䜩䤫崭䌯匱匳匵ᠷ堹崻䨽⌿⩁繃晅潇", A_1) + ex.Message + Utils.a("鎳", A_1));
      }
label_9:
      num1 = 1;
      if (num1 == 0)
        ;
    }
  }
}
