// Decompiled with JetBrains decompiler
// Type: Cradiator.Model.ScreenUpdater
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Audio;
using Cradiator.Config;
using Cradiator.ViewModels;
using Cradiator.Views;
using log4net;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;

namespace Cradiator.Model
{
  public class ScreenUpdater : IScreenUpdater, IConfigObserver
  {
    private static readonly ILog _log = LogManager.GetLogger(typeof (ScreenUpdater).Name);
    private readonly ICradiatorView _view;
    private readonly DiscJockey _discJockey;
    private readonly ICountdownTimer _countdownTimer;
    private readonly IPollTimer _pollTimer;
    private readonly IConfigSettings _configSettings;
    private readonly BuildDataFetcher _fetcher;
    private readonly BuildDataTransformer _transformer;
    private readonly FetchExceptionHandler _fetchExceptionHandler;
    private readonly BackgroundWorker _worker;
    private IViewSettings _viewSettings;

    public ScreenUpdater(
      ICradiatorView view,
      DiscJockey discJockey,
      ICountdownTimer countdownTimer,
      IPollTimer pollTimer,
      IConfigSettings configSettings,
      BuildDataFetcher buildDataFetcher,
      BuildDataTransformer transformer,
      FetchExceptionHandler fetchExceptionHandler,
      BackgroundWorker worker)
    {
      this._view = view;
      this._discJockey = discJockey;
      this._countdownTimer = countdownTimer;
      this._pollTimer = pollTimer;
      this._configSettings = configSettings;
      this._pollTimer.Tick = (EventHandler) ((sender, e) => this.PollTimeup());
      this._fetcher = buildDataFetcher;
      this._fetchExceptionHandler = fetchExceptionHandler;
      this._transformer = transformer;
      this.SetLocalValuesFromConfig(configSettings);
      this._configSettings.AddObserver((IConfigObserver) this);
      this._worker = worker;
      worker.DoWork += new DoWorkEventHandler(this.FetchData);
      worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.DataFetched);
    }

    private void PollTimeup()
    {
      this._configSettings.RotateView();
      this.Update();
    }

    public void Update()
    {
      this._countdownTimer.Stop();
      this._pollTimer.Stop();
      this._view.ShowProgress = true;
      this._worker.RunWorkerAsync();
    }

    private void FetchData(object sender, DoWorkEventArgs e)
    {
      try
      {
        IEnumerable<string> strings = this._fetcher.Fetch();
        e.Result = (object) strings;
      }
      catch (Exception ex)
      {
        this._fetchExceptionHandler.Handle(ex);
      }
    }

    private void DataFetched(object sender, RunWorkerCompletedEventArgs e)
    {
      try
      {
        IEnumerable<string> result = e.Result as IEnumerable<string>;
        IEnumerable<ProjectStatus> projectStatuses = (IEnumerable<ProjectStatus>) new List<ProjectStatus>();
        if (result != null)
          projectStatuses = result.SelectMany<string, ProjectStatus>((Func<string, IEnumerable<ProjectStatus>>) (xml =>
          {
            try
            {
              return this._transformer.Transform(xml);
            }
            catch (Exception ex)
            {
              ScreenUpdater._log.Error((object) ex);
              return (IEnumerable<ProjectStatus>) new List<ProjectStatus>();
            }
          }));
        this._view.DataContext = (object) new ViewDataViewModel(this._viewSettings, projectStatuses);
        this._discJockey.PlaySounds(projectStatuses);
      }
      finally
      {
        this._view.ShowProgress = false;
        this._pollTimer.Start();
        this._countdownTimer.Reset();
        this._countdownTimer.Start();
      }
    }

    public void ConfigUpdated(ConfigSettings newSettings) => this.SetLocalValuesFromConfig((IConfigSettings) newSettings);

    private void SetLocalValuesFromConfig(IConfigSettings newSettings) => this._viewSettings = (IViewSettings) newSettings;
  }
}
