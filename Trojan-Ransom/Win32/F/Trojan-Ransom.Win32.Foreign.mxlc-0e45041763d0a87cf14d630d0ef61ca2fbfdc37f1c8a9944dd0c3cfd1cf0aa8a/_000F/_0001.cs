// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 1, Version=8.93.47.49, Culture=neutral, PublicKeyToken=null
// MVID: DFA8ED2E-5616-44FF-892B-A77949B35FF3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Foreign.mxlc-0e45041763d0a87cf14d630d0ef61ca2fbfdc37f1c8a9944dd0c3cfd1cf0aa8a.exe

using \u0006;
using \u000F;
using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u000F
{
  internal sealed class \u0001
  {
    private static readonly \u0001.\u0002<\u0002> \u0001;
    private static readonly \u0001.\u0002<\u0001> \u0001;
    private static readonly \u0001.\u0002<User> \u0001;
    private static readonly \u0001.\u0002<\u0001.\u0001> \u0001;

    static \u0001()
    {
label_0:
      try
      {
        if (true)
          goto label_4;
label_1:
        if (true)
        {
          \u0001.\u0001 = new \u0001.\u0002<User>();
          \u0001.\u0001 = new \u0001.\u0002<\u0001.\u0001>();
          if (true)
          {
            if (true)
              return;
            goto label_5;
          }
          else
            goto label_0;
        }
        else
          goto label_0;
label_4:
        \u0001.\u0001 = new \u0001.\u0002<\u0002>();
label_5:
        \u0001.\u0001 = new \u0001.\u0002<\u0001>();
        goto label_1;
      }
      catch (Exception ex)
      {
        \u0007.\u0001(ex);
        throw;
      }
    }

    [SpecialName]
    internal static \u0002 \u0001()
    {
      \u0002 obj1;
      \u0002 obj2;
      try
      {
        do
        {
          if (true)
            obj1 = \u0001.\u0001.\u0001();
        }
        while (false);
        obj2 = obj1;
      }
      catch (Exception ex)
      {
        \u0002 obj3 = obj1;
        \u0007.\u0001(ex, (object) obj3);
        throw;
      }
      return obj2;
    }

    internal sealed class \u0001
    {
      unsafe bool object.\u0001([In] object obj0)
      {
        int num1 = 2;
        int num2;
        while (true)
        {
          // ISSUE: untyped stack allocation
          IntPtr num3 = __untypedstackalloc(num1);
          if (true)
            goto label_10;
label_2:
          void* voidPtr;
          try
          {
            // ISSUE: explicit non-virtual call
            *(sbyte*) voidPtr = (sbyte) __nonvirtual (((object) this).Equals(RuntimeHelpers.GetObjectValue(obj0)));
            do
            {
              if (false)
                ;
            }
            while (false);
            if (true)
              *(sbyte*) ((IntPtr) voidPtr + 1) = *(sbyte*) voidPtr;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<bool> local = (ValueType) (bool) *(sbyte*) voidPtr;
            object obj = obj0;
            \u0007.\u0001(ex, (object) local, (object) this, obj);
            throw;
          }
          num2 = (int) *(sbyte*) ((IntPtr) voidPtr + 1);
          if (false)
          {
            num1 = num2;
            continue;
          }
          break;
label_10:
          voidPtr = (void*) num3;
          goto label_2;
        }
        return num2 != 0;
      }

      unsafe int object.\u0001()
      {
        void* voidPtr;
        do
        {
          // ISSUE: untyped stack allocation
          voidPtr = (void*) __untypedstackalloc(8);
          try
          {
            if (true)
            {
              // ISSUE: explicit non-virtual call
              *(int*) voidPtr = __nonvirtual (((object) this).GetHashCode());
            }
            *(int*) ((IntPtr) voidPtr + 4) = *(int*) voidPtr;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> local = (ValueType) *(int*) voidPtr;
            \u0007.\u0001(ex, (object) local, (object) this);
            throw;
          }
        }
        while (false);
        return *(int*) ((IntPtr) voidPtr + 4);
      }

      string object.\u0001()
      {
label_0:
        string str1;
        string str2;
        try
        {
          if (false)
            goto label_2;
          else
            goto label_3;
label_1:
          if (true)
            str2 = str1;
          else
            goto label_0;
label_2:
          if (false)
            goto label_1;
          else
            goto label_7;
label_3:
          // ISSUE: explicit non-virtual call
          string str3 = __nonvirtual (((object) this).ToString());
          if (true)
          {
            str1 = str3;
            goto label_1;
          }
          else
            goto label_1;
        }
        catch (Exception ex)
        {
          string str4 = str1;
          \u0007.\u0001(ex, (object) str4, (object) this);
          throw;
        }
label_7:
        return str2;
      }
    }

    internal sealed class \u0002<\u0001> where \u0001 : new()
    {
      [ThreadStatic]
      private static \u0001 \u0001;

      [SpecialName]
      internal \u0001 \u0001()
      {
        \u0001 obj1;
        \u0001 obj2;
        try
        {
          while (true)
          {
            if ((object) \u0001.\u0002<\u0001>.\u0001 == null)
              goto label_5;
label_2:
            obj1 = \u0001.\u0002<\u0001>.\u0001;
            if (true)
            {
              if (true)
              {
                if (true)
                {
                  obj2 = obj1;
                  break;
                }
              }
              else
                continue;
            }
label_5:
            \u0001.\u0002<\u0001>.\u0001 = new \u0001();
            goto label_2;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<\u0001> local = (object) obj1;
          \u0007.\u0001(ex, (object) local, (object) this);
          throw;
        }
        return obj2;
      }
    }
  }
}
