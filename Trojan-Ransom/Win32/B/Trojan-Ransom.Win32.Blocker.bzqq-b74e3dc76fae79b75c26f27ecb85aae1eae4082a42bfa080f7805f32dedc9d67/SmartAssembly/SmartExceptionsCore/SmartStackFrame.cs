// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.SmartStackFrame
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using My;
using SmartAssembly.SmartExceptionsCore.UI;
using SmartAssembly.Zip;
using System;
using System.Runtime.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [Serializable]
  public class SmartStackFrame : ISerializable
  {
    public readonly int MethodID;
    public readonly object[] Objects;
    public readonly int ILOffset;
    public readonly int ExceptionStackDepth;

    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
    {
      int num1;
      int num2;
      int index;
      string name;
      int num3;
      int num4;
      try
      {
        num1 = 3;
        while (true)
        {
          int num5;
          switch (num1)
          {
            case 0:
              // ISSUE: type reference
              FeedbackControl.Ⴓ(info, MyComputer.Ⴗ(834542902, 0), (object) this.ExceptionStackDepth, SendingReportFeedbackEventArgs1.Ⴍ(__typeref (int), 370, 265), 609, 556);
              num1 = 7;
              continue;
            case 1:
              goto label_11;
            case 2:
            case 5:
              // ISSUE: type reference
              FeedbackControl.Ⴓ(info, SimpleZip.Ⴓ(661402809, 1), (object) this.ILOffset, SendingReportFeedbackEventArgs1.Ⴍ(__typeref (int), 851, 808), 438, 507);
              num1 = 0;
              continue;
            case 4:
              num5 = 0;
              break;
            case 6:
              num1 = 2;
              continue;
            case 7:
              num1 = this.Objects == null ? 4 : 10;
              continue;
            case 8:
            case 9:
              goto label_10;
            case 10:
              num5 = this.Objects.Length;
              break;
            default:
              // ISSUE: type reference
              FeedbackControl.Ⴓ(info, Ⴈ.ႷႭ.ႥႳ(1491049321, 2), (object) this.MethodID, SendingReportFeedbackEventArgs1.Ⴍ(__typeref (int), 958, 965), 594, 543);
              goto case 6;
          }
          num2 = num5;
          // ISSUE: type reference
          FeedbackControl.Ⴓ(info, SimpleZip.Ⴓ(661402777, 3), (object) num2, SendingReportFeedbackEventArgs1.Ⴍ(__typeref (int), 870, 797), 328, 261);
          num1 = 9;
        }
label_10:
        index = 0;
        goto label_23;
label_11:
        name = DoNotPruneAttribute.Ⴃ(SimpleZip.Ⴓ(661402850, 4), (object) index, 701, 751);
        try
        {
          num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
                // ISSUE: type reference
                FeedbackControl.Ⴓ(info, name, (object) null, SendingReportFeedbackEventArgs1.Ⴍ(__typeref (object), 344, 291), 623, 546);
                goto case 1;
              case 1:
                num3 = 3;
                continue;
              case 3:
                goto label_20;
              case 6:
                goto label_17;
              default:
                num3 = this.Objects[index] != null ? 6 : 0;
                continue;
            }
          }
label_17:
          info.AddValue(name, (object) (this.Objects[index].GetType().ToString() + MyComputer.Ⴗ(834543079, 8) + this.Objects[index]), typeof (string));
        }
        catch (Exception ex)
        {
        }
label_20:
        num4 = 5;
label_21:
        while (true)
        {
          switch (num4)
          {
            case 1:
              goto label_25;
            case 2:
            case 6:
              goto label_23;
            case 3:
              goto label_18;
            case 4:
              goto label_27;
            default:
              ++index;
              num4 = 2;
              continue;
          }
        }
label_25:
        return;
label_18:
        return;
label_27:
        return;
label_23:
        if (index >= num2)
        {
          num4 = 1;
          goto label_21;
        }
        else
          goto label_11;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) index;
        string o3 = name;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num4;
        SerializationInfo o8 = info;
        // ISSUE: variable of a boxed type
        __Boxed<StreamingContext> o9 = (ValueType) context;
        StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8, (object) o9);
        throw;
      }
    }

    internal SmartStackFrame(int Ⴓ, object[] Ⴃ, int Ⴐ, int Ⴄ)
    {
      try
      {
        this.MethodID = Ⴓ;
        this.ExceptionStackDepth = Ⴄ;
        this.ILOffset = Ⴐ;
        this.Objects = Ⴃ;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) Ⴓ;
        object[] o3 = Ⴃ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) Ⴐ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) Ⴄ;
        StackFrameHelper.CreateException5(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    static SmartStackFrame()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }
  }
}
