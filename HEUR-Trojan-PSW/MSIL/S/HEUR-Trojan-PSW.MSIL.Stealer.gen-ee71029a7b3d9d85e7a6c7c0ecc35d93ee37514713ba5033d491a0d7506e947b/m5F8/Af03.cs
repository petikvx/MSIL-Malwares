// Decompiled with JetBrains decompiler
// Type: m5F8.Af03
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using Dx4;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq.Mapping;
using System.Runtime.InteropServices;
using System.Threading;

namespace m5F8
{
  [Table(Name = "dbo.People")]
  public class Af03 : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs Ⴈ = new PropertyChangingEventArgs(string.Empty);
    private string _people_id;
    private int _people_index;
    private string _people_password;
    private string _people_name;
    private string _people_ic;
    private string _people_DOB;
    private string _people_gender;
    private string _people_phone;
    private string _people_email;
    private string _people_address;
    private string _people_role;
    private string _department_name;
    private int _leave_num;
    private int _extra_leave;
    private Decimal _hourly_rates;
    private DateTime _joined_year;
    private PropertyChangedEventHandler Ⴗ;
    private Tf6.Qo9 Ⴓ = new Tf6.Qo9();

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", IsPrimaryKey = true, Storage = "_people_id")]
    public string Ⴐ
    {
      get => (IEnumerable<char>) this._people_id as string;
      [param: In] set
      {
        if (string.Equals(this._people_id, value))
          return;
        this.x4T5();
        this._people_id = value;
        this.Pr3n("people_id");
      }
    }

    [Column(DbType = "Int NOT NULL", Storage = "_people_index")]
    public int Ⴗ
    {
      get => this._people_index;
      [param: In] set
      {
        if (this._people_index == value)
          return;
        this.x4T5();
        this._people_index = value;
        this.Pr3n("people_index");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_password")]
    public string Ⴀ
    {
      get => (IComparable) this._people_password as string;
      [param: In] set
      {
        if (string.Equals(this._people_password, value))
          return;
        this.x4T5();
        this._people_password = value;
        this.Pr3n("people_password");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(20) NOT NULL", Storage = "_people_name")]
    public string Ⴃ
    {
      get => (IEnumerable<char>) this._people_name as string;
      [param: In] set
      {
        if (string.Equals(this._people_name, value))
          return;
        this.x4T5();
        this._people_name = value;
        this.Pr3n("people_name");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_ic")]
    public string Ⴗ
    {
      get => (IConvertible) this._people_ic as string;
      [param: In] set
      {
        if (string.Equals(this._people_ic, value))
          return;
        this.x4T5();
        this._people_ic = value;
        this.Pr3n("people_ic");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_DOB")]
    public string Ⴈ
    {
      get => (IConvertible) this._people_DOB as string;
      [param: In] set
      {
        if (string.Equals(this._people_DOB, value))
          return;
        this.x4T5();
        this._people_DOB = value;
        this.Pr3n("people_DOB");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_gender")]
    public string Ⴅ
    {
      get => (IEquatable<string>) this._people_gender as string;
      [param: In] set
      {
        if (string.Equals(this._people_gender, value))
          return;
        this.x4T5();
        this._people_gender = value;
        this.Pr3n("people_gender");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_phone")]
    public string Ⴍ
    {
      get => this._people_phone;
      [param: In] set
      {
        if (string.Equals(this._people_phone, value))
          return;
        this.x4T5();
        this._people_phone = value;
        this.Pr3n("people_phone");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(30) NOT NULL", Storage = "_people_email")]
    public string Ⴓ
    {
      get => this._people_email;
      [param: In] set
      {
        if (string.Equals(this._people_email, value))
          return;
        this.x4T5();
        this._people_email = value;
        this.Pr3n("people_email");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(100) NOT NULL", Storage = "_people_address")]
    public string Ⴄ
    {
      get => (IEnumerable<char>) this._people_address as string;
      [param: In] set
      {
        if (string.Equals(this._people_address, value))
          return;
        this.x4T5();
        this._people_address = value;
        this.Pr3n("people_address");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_role")]
    public string Ⴜ
    {
      get => (IEnumerable<char>) this._people_role as string;
      [param: In] set
      {
        if (string.Equals(this._people_role, value))
          return;
        this.x4T5();
        this._people_role = value;
        this.Pr3n("people_role");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(30) NOT NULL", Storage = "_department_name")]
    public string ႠႰ
    {
      get => (IEnumerable<char>) this._department_name as string;
      [param: In] set
      {
        if (string.Equals(this._department_name, value))
          return;
        this.x4T5();
        this._department_name = value;
        this.Pr3n("department_name");
      }
    }

    [Column(DbType = "Int NOT NULL", Storage = "_leave_num")]
    public int Ⴀ
    {
      get => this._leave_num;
      [param: In] set
      {
        if (this._leave_num == value)
          return;
        this.x4T5();
        this._leave_num = value;
        this.Pr3n("leave_num");
      }
    }

    [Column(DbType = "Int NOT NULL", Storage = "_extra_leave")]
    public int Ⴃ
    {
      get => this._extra_leave;
      [param: In] set
      {
        if (this._extra_leave == value)
          return;
        this.x4T5();
        this._extra_leave = value;
        this.Pr3n("extra_leave");
      }
    }

    [Column(DbType = "Decimal(18,0) NOT NULL", Storage = "_hourly_rates")]
    public Decimal Ⴃ
    {
      get => this._hourly_rates;
      [param: In] set
      {
        if (Decimal.Compare(this._hourly_rates, value) == 0)
          return;
        this.x4T5();
        this._hourly_rates = value;
        this.Pr3n("hourly_rates");
      }
    }

    [Column(DbType = "Date NOT NULL", Storage = "_joined_year")]
    public DateTime Ⴈ
    {
      get => this._joined_year;
      [param: In] set
      {
        if (DateTime.Compare(this._joined_year, value) == 0)
          return;
        this.x4T5();
        this._joined_year = value;
        this.Pr3n("joined_year");
      }
    }

    public event PropertyChangingEventHandler Ⴐ
    {
      add
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴓ.Ⴅ;
        object obj;
        do
        {
          obj = (object) (PropertyChangingEventHandler) multicastDelegate;
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴓ.Ⴅ, (PropertyChangingEventHandler) Delegate.Combine((Delegate) obj, (Delegate) value), obj as PropertyChangingEventHandler);
        }
        while ((PropertyChangingEventHandler) multicastDelegate != obj as PropertyChangingEventHandler);
      }
      remove
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴓ.Ⴅ;
        MulticastDelegate comparand;
        do
        {
          comparand = multicastDelegate;
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴓ.Ⴅ, (comparand as PropertyChangingEventHandler) - value, (PropertyChangingEventHandler) comparand);
        }
        while ((PropertyChangingEventHandler) multicastDelegate != (PropertyChangingEventHandler) comparand);
      }
    }

    public event PropertyChangedEventHandler Ⴓ
    {
      add
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴗ;
        object obj;
        do
        {
          obj = (object) (multicastDelegate as PropertyChangedEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴗ, (MulticastDelegate) Delegate.Combine((Delegate) obj, (Delegate) value) as PropertyChangedEventHandler, obj as PropertyChangedEventHandler);
        }
        while ((PropertyChangedEventHandler) multicastDelegate != obj as PropertyChangedEventHandler);
      }
      remove
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴗ;
        MulticastDelegate comparand;
        do
        {
          comparand = multicastDelegate;
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴗ, (comparand as PropertyChangedEventHandler) - value, comparand as PropertyChangedEventHandler);
        }
        while (multicastDelegate as PropertyChangedEventHandler != (PropertyChangedEventHandler) comparand);
      }
    }

    protected virtual void x4T5()
    {
      if (this.Ⴓ.Ⴅ == null)
        return;
      object ⴅ = (object) this.Ⴓ.Ⴅ;
      if (!(ⴅ is PropertyChangingEventHandler))
        return;
      (ⴅ as PropertyChangingEventHandler)((object) this, Af03.Ⴈ);
    }

    protected virtual void Pr3n([In] string obj0)
    {
      if (this.Ⴗ == null)
        return;
      object ⴗ = (object) this.Ⴗ;
      if ((PropertyChangedEventHandler) ⴗ == null)
        return;
      ((PropertyChangedEventHandler) ⴗ)((object) this, new PropertyChangedEventArgs(obj0));
    }
  }
}
