// Decompiled with JetBrains decompiler
// Type: 
// Assembly: moris, Version=7.3.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 4FA206C1-5DF8-4028-65D0-C8A6781C83C3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aixd-1adbcbe596643451133f94a5976e52a5e8f608682124477f47141996eb5a98d7.exe

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

internal sealed class \u0002 : IDisposable
{
  private string \u0002;
  private BlockingCollection<\u0008> \u0003;

  internal \u0002(int _param1, string[] _param2)
  {
    if (true)
      goto label_4;
label_1:
    BlockingCollection<\u0008> blockingCollection = new BlockingCollection<\u0008>();
    if (true)
      goto label_5;
label_2:
    // ISSUE: explicit constructor call
    base.\u002Ector();
    int index;
    if (true)
      index = 0;
    for (; index < _param1; ++index)
      Task.Factory.StartNew(new Action<object>(this.\u0002), (object) _param2[index], TaskCreationOptions.LongRunning);
    return;
label_5:
    this.\u0003 = blockingCollection;
    goto label_2;
label_4:
    this.\u0002 = "http://social.msdn.microsoft.com/Forums/en-US/{0}/threads?outputas=xml";
    goto label_1;
  }

  internal void \u0002()
  {
    if (true)
      ;
    this.\u0003.CompleteAdding();
  }

  internal Task \u0002(object _param1)
  {
    Task task1 = this.\u0002(new CancellationToken?(), _param1);
    if (true)
      goto label_2;
label_1:
    Task task2;
    return task2;
label_2:
    task2 = task1;
    goto label_1;
  }

  internal Task \u0002(CancellationToken? _param1, object _param2)
  {
    TaskCompletionSource<object> completionSource1 = new TaskCompletionSource<object>();
    if (true)
      goto label_3;
label_1:
    TaskCompletionSource<object> completionSource2;
    this.\u0003.Add(new \u0008(completionSource2, _param1, _param2));
    Task<object> task1 = completionSource2.Task;
    if (true)
      goto label_4;
label_2:
    Task task2;
    return task2;
label_4:
    task2 = (Task) task1;
    goto label_2;
label_3:
    completionSource2 = completionSource1;
    goto label_1;
  }

  private void \u0002(object _param1)
  {
    IEnumerator<\u0008> enumerator1 = this.\u0003.GetConsumingEnumerable().GetEnumerator();
    IEnumerator<\u0008> enumerator2;
    if (true)
      enumerator2 = enumerator1;
    try
    {
      while (enumerator2.MoveNext())
      {
        \u0008 current = enumerator2.Current;
        if (true)
          goto label_5;
label_4:
        \u0008 obj;
        int num;
        if (obj.\u0003.HasValue)
        {
          CancellationToken cancellationToken1 = obj.\u0003.Value;
          if (true)
            goto label_8;
label_7:
          CancellationToken cancellationToken2;
          num = cancellationToken2.IsCancellationRequested ? 1 : 0;
          goto label_10;
label_8:
          cancellationToken2 = cancellationToken1;
          goto label_7;
        }
        else
          num = 0;
label_10:
        if (num != 0)
        {
          obj.\u0002.SetCanceled();
          continue;
        }
        try
        {
          this.\u0003(obj.\u0005);
          obj.\u0002.SetResult(obj.\u0005);
          continue;
        }
        catch (Exception ex)
        {
          obj.\u0002.SetException(ex);
          continue;
        }
label_5:
        obj = current;
        goto label_4;
      }
    }
    finally
    {
      enumerator2?.Dispose();
    }
  }

  void IDisposable.\u0002\u2000\u2005\u0003()
  {
    if (true)
      ;
    this.\u0003.Dispose();
  }

  private void \u0003(object _param1)
  {
    string str1 = (string) _param1;
    if (true)
      goto label_3;
label_1:
    string str2;
    string.Format(this.\u0002, (object) str2);
    string str3 = str2;
    if (false)
      return;
    Console.WriteLine(str3);
    return;
label_3:
    str2 = str1;
    goto label_1;
  }
}
