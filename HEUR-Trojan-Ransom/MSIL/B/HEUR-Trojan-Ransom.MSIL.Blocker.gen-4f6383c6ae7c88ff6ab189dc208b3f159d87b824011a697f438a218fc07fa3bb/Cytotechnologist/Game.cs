// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: DESCUNI, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF116ADB-6018-4560-80A5-0C66813DC3F1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-4f6383c6ae7c88ff6ab189dc208b3f159d87b824011a697f438a218fc07fa3bb.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 219353896;
      int aIndex;
      int count;
      bool flag1;
      bool flag2;
      JSONNode jsonNode;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1826293814)) % 18U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Players = new Player[count];
            num1 = (int) num2 * -1919603078 ^ -1124525416;
            continue;
          case 2:
            count = jsonNode.Count;
            num1 = (int) num2 * -1007734494 ^ 1885401685;
            continue;
          case 3:
            int num3 = !flag1 ? 1467752765 : (num3 = 782202733);
            num1 = num3 ^ (int) num2 * -741016126;
            continue;
          case 4:
            this._buffer = buffer;
            num1 = (int) num2 * 1908215045 ^ 850824995;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 1179201454 ^ 9211109;
            continue;
          case 7:
            this._random = Game.\u202B‭⁪⁯‪‭​​⁬⁪‏⁫⁪‭⁮‎⁫‪⁪⁯‮‭⁫‏‌‮‎‪‏⁬⁮⁫‎‍‎‫‍‪‫⁪‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -408193275 ^ -389593032;
            continue;
          case 8:
            flag2 = index < count;
            num1 = 2106057316;
            continue;
          case 9:
            jsonNode = json["players"];
            num1 = (int) num2 * -2105304893 ^ 169992981;
            continue;
          case 10:
            aIndex = 0;
            num1 = (int) num2 * 1988849499 ^ 1567031406;
            continue;
          case 11:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * -1164615397 ^ -275320235;
            continue;
          case 12:
            flag1 = aIndex < count;
            num1 = 1471794793;
            continue;
          case 13:
            num1 = (int) num2 * 2133403021 ^ -1456660687;
            continue;
          case 14:
            int num4 = !flag2 ? -37066236 : (num4 = -1246472748);
            num1 = num4 ^ (int) num2 * 1975976250;
            continue;
          case 15:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = 1818597862;
            continue;
          case 16:
            this._playerStates[index] = new PlayerState();
            ++index;
            num1 = 1524220290;
            continue;
          case 17:
            this._dice = new Dice();
            num1 = (int) num2 * -2017993650 ^ -1835563617;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 1743514984;
        PlayerState playerState;
        bool finished2;
        PlayerState[] playerStates;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1686446162)) % 14U)
          {
            case 0:
              int num3;
              num1 = num3 = index >= playerStates.Length ? 1721169076 : (num3 = 2000924512);
              continue;
            case 1:
              int num4 = playerState.State == State.Playing ? 796078407 : (num4 = 1599309987);
              num1 = num4 ^ (int) num2 * 1306287718;
              continue;
            case 2:
              int num5 = !finished1 ? 120431290 : (num5 = 1476687525);
              num1 = num5 ^ (int) num2 * 111120397;
              continue;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * 391316280 ^ 529283439;
              continue;
            case 5:
              ++index;
              num1 = 1915529548;
              continue;
            case 6:
              num1 = (int) num2 * -775207646 ^ -976884397;
              continue;
            case 7:
              num1 = (int) num2 * 1214431651 ^ -138483286;
              continue;
            case 8:
              playerState = playerStates[index];
              num1 = 146661259;
              continue;
            case 9:
              finished2 = false;
              num1 = (int) num2 * -752252884 ^ 1483003466;
              continue;
            case 10:
              playerStates = this._playerStates;
              index = 0;
              num1 = 1915529548;
              continue;
            case 11:
              finished2 = true;
              num1 = (int) num2 * 1334326430 ^ 1039121555;
              continue;
            case 12:
              finished2 = true;
              num1 = (int) num2 * 481648947 ^ -1202607442;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -1503990424;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2135840043)) % 7U)
        {
          case 0:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 1146592519 ^ -1009943407;
            continue;
          case 1:
            this.Winners.Clear();
            num1 = (int) num2 * -407469806 ^ 1275819805;
            continue;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * 341931750 ^ -325923038;
            continue;
          case 3:
            goto label_3;
          case 4:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -2111915555 ^ -1057785991;
            continue;
          case 5:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * -741780346 ^ 1529804701;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = -839735222;
      PlayerState playerState;
      int num2;
      Player player;
      int planningCardsCount;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -601947197)) % 24U)
        {
          case 0:
            int num4;
            num1 = num4 = index < this.Players.Length ? -1567992236 : (num4 = -232488996);
            continue;
          case 1:
            num1 = (int) num3 * -1718854286 ^ -1036377967;
            continue;
          case 2:
            playerState.State = State.Playing;
            num1 = (int) num3 * -1514546829 ^ -436474970;
            continue;
          case 3:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -1739313264 ^ -1629957461;
            continue;
          case 4:
            playerState.Sprint = -1;
            num1 = (int) num3 * -626136877 ^ -2053397908;
            continue;
          case 5:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1187195141 ^ -1687048822;
            continue;
          case 6:
            num2 = 0;
            num1 = -1114696065;
            continue;
          case 7:
            num1 = -1755487526;
            continue;
          case 8:
            num1 = (int) num3 * -1304599635 ^ -1517421177;
            continue;
          case 9:
            num1 = (int) num3 * 387659232 ^ -1601598793;
            continue;
          case 10:
            playerState.Sprint = 0;
            num1 = (int) num3 * 546159061 ^ 760563420;
            continue;
          case 11:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -1836876154 ^ -8217881;
            continue;
          case 12:
            num1 = -213629180;
            continue;
          case 13:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -19532737 ^ 2141258570;
            continue;
          case 14:
            num1 = (int) num3 * 165189771 ^ -318902386;
            continue;
          case 15:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = -1054275437;
            continue;
          case 16:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -42972952 ^ 1505278383;
            continue;
          case 17:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * 98374510 ^ 1565614551;
            continue;
          case 18:
            goto label_1;
          case 19:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num5;
            num1 = num5 = player.UseOneMorePlanningSprint ? -271302862 : (num5 = -2015713330);
            continue;
          case 20:
            num1 = (int) num3 * -1690823121 ^ -452375509;
            continue;
          case 21:
            int num6;
            num1 = num6 = num2 <= 0 ? -818458587 : (num6 = -1921700109);
            continue;
          case 22:
            num2 = 0;
            int num7 = planningCardsCount != 0 ? 2134570888 : (num7 = 1123106118);
            num1 = num7 ^ (int) num3 * -1579936872;
            continue;
          case 23:
            goto label_3;
          default:
            goto label_26;
        }
      }
label_3:
      return;
label_26:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = -521570869;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -743020842)) % 16U)
        {
          case 0:
            this._currentPlayer = 0;
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * 983896377 ^ 1097984414;
            continue;
          case 1:
            num1 = (int) num2 * 1956152313 ^ 774911461;
            continue;
          case 2:
            int num3 = !flag2 ? 942973292 : (num3 = 591975007);
            num1 = num3 ^ (int) num2 * -2089523314;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.Print((object) Game.\u200F‍‮⁬⁮‏⁮‭‫‬⁪‫‮⁯‬⁮‫⁯‎⁬‏‌⁭⁮⁭‭‫​⁯⁪⁭‪‍‭⁯‎‮⁮‪‍‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1342735143;
            continue;
          case 5:
            num1 = (int) num2 * -1413953295 ^ 1590182691;
            continue;
          case 6:
            this.PlayerTurn(this._currentPlayer);
            num1 = -1388933497;
            continue;
          case 7:
            num1 = (int) num2 * -800211961 ^ -408856687;
            continue;
          case 8:
            int num4 = flag1 ? -2123115310 : (num4 = -1890103942);
            num1 = num4 ^ (int) num2 * 1548536677;
            continue;
          case 9:
            this.Print((object) Game.\u202D‫‏‌⁪‏​⁫⁮‪‭​⁮⁬​‮⁫‍⁫‬⁯‌‎⁬⁫‎‏‮⁫‭⁭⁮⁯‎⁫‏‬‭‫‏‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -459442381 ^ 1416882534;
            continue;
          case 10:
            goto label_3;
          case 11:
            num1 = (int) num2 * -31446566 ^ -1247338081;
            continue;
          case 12:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1778257862 ^ 1051707120;
            continue;
          case 13:
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 1264848382 ^ 1039580530;
            continue;
          case 14:
            num1 = (int) num2 * 2031694591 ^ 1130109584;
            continue;
          case 15:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -1937708093 ^ 454904162;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -2132720000;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        bool flag3;
        Card card;
        int num3;
        bool flag4;
        int index;
        int num4;
        bool flag5;
        PlayerState playerState2;
        bool flag6;
        bool onlyOneWinner;
        int num5;
        bool flag7;
        Player player;
        bool flag8;
        bool flag9;
        int num6;
        switch ((num2 = (uint) (num1 ^ -2021683280)) % 83U)
        {
          case 0:
            int num7 = !this.Losers.Contains(index) ? -925242550 : (num7 = -693974696);
            num1 = num7 ^ (int) num2 * 1928097659;
            continue;
          case 1:
            num1 = -1568305073;
            continue;
          case 2:
            num1 = (int) num2 * 1901843364 ^ 210111363;
            continue;
          case 3:
            num1 = -1593652669;
            continue;
          case 4:
            num1 = (int) num2 * -296231710 ^ -959029311;
            continue;
          case 5:
            this.Losers.Add(num4);
            num1 = (int) num2 * 1422502034 ^ -729843731;
            continue;
          case 6:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1712000886 ^ 830882364;
            continue;
          case 7:
            flag3 = true;
            num1 = (int) num2 * 1918525657 ^ -825556318;
            continue;
          case 8:
            num1 = (int) num2 * -62213383 ^ -1350972883;
            continue;
          case 9:
            int num8 = flag8 ? -136298421 : (num8 = -850598233);
            num1 = num8 ^ (int) num2 * 1621117959;
            continue;
          case 10:
            flag7 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -32755404;
            continue;
          case 11:
            flag1 = !flag6;
            num1 = (int) num2 * 1962199887 ^ 1160596852;
            continue;
          case 12:
            num1 = -521561880;
            continue;
          case 13:
            num1 = (int) num2 * 630713878 ^ -1158130958;
            continue;
          case 14:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * -1617355038 ^ -405249080;
            continue;
          case 15:
            index = 0;
            num1 = (int) num2 * 1291047008 ^ 1555996642;
            continue;
          case 16:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1317972774 ^ 317542184;
            continue;
          case 17:
            ++num4;
            num1 = -439715370;
            continue;
          case 18:
            num1 = (int) num2 * -1149586708 ^ -1426415836;
            continue;
          case 19:
            int num9;
            num1 = num9 = index >= this._playerStates.Length ? -1566791981 : (num9 = -1204360001);
            continue;
          case 20:
            goto label_3;
          case 21:
            playerState2.State = State.Lose;
            num1 = -752010592;
            continue;
          case 22:
            flag3 = true;
            num3 = card.Impact;
            num1 = (int) num2 * -653042787 ^ -1973106398;
            continue;
          case 23:
            flag2 = !flag9;
            num1 = (int) num2 * 464008758 ^ 906565056;
            continue;
          case 24:
            int num10 = playerState1.Resources >= 0 ? 338935231 : (num10 = 1430634009);
            num1 = num10 ^ (int) num2 * -1469778892;
            continue;
          case 25:
            int num11 = !flag1 ? 2010341339 : (num11 = 1336900084);
            num1 = num11 ^ (int) num2 * -747198882;
            continue;
          case 26:
            num1 = (int) num2 * -860143755 ^ -438225569;
            continue;
          case 27:
            num1 = (int) num2 * -719170774 ^ -996942812;
            continue;
          case 28:
            int num12 = flag5 ? 1593448969 : (num12 = 967691394);
            num1 = num12 ^ (int) num2 * 1866568252;
            continue;
          case 29:
            playerState1.Resources -= num3;
            num1 = (int) num2 * -1297868677 ^ -1900495316;
            continue;
          case 30:
            num1 = -768864845;
            continue;
          case 31:
            num1 = (int) num2 * 794586037 ^ -1926326633;
            continue;
          case 32:
            this.Losers.Add(index);
            num1 = (int) num2 * 270159248 ^ -222942136;
            continue;
          case 33:
            ++index;
            num1 = -1633873455;
            continue;
          case 34:
            int num13 = playerState1.State != 0 ? -257619838 : (num13 = -136570727);
            num1 = num13 ^ (int) num2 * -1209204955;
            continue;
          case 35:
            num1 = (int) num2 * -1516825675 ^ 1288958600;
            continue;
          case 36:
            num1 = (int) num2 * 130433200 ^ -1232380016;
            continue;
          case 37:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -1040190040 ^ -1157539009;
            continue;
          case 38:
            num1 = (int) num2 * -1787497381 ^ -2081687431;
            continue;
          case 39:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202D‫‏‌⁪‏​⁫⁮‪‭​⁮⁬​‮⁫‍⁫‬⁯‌‎⁬⁫‎‏‮⁫‭⁭⁮⁯‎⁫‏‬‭‫‏‮("\t", playerState3 != null ? Game.\u200C‫‭‬⁮‮⁯‏‏‍‫‎⁭‍‎‍​‪‏‍‮‭‏‎⁪‮⁯‫⁫‌⁭‏‏⁬‎‫‍⁪⁬‌‮((object) playerState3) : (string) null));
            num1 = -1374577674;
            continue;
          case 40:
            num1 = (int) num2 * -1574246142 ^ 702108574;
            continue;
          case 41:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -1297020691 ^ -738982940;
            continue;
          case 42:
            ++playerState1.Sprint;
            num1 = (int) num2 * 766142211 ^ 2003017339;
            continue;
          case 43:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -193364771 ^ -1845107511;
            continue;
          case 44:
            num1 = -202553487;
            continue;
          case 45:
            int num14 = flag7 ? -1614765211 : (num14 = -774453888);
            num1 = num14 ^ (int) num2 * -183730068;
            continue;
          case 46:
            num3 = Game.\u206E⁪​⁯‮‎⁪‌⁯​⁮⁬⁭‫‮⁭‭‏⁭⁯‍⁮‏‭⁯‮⁪⁫​⁭‌​⁪‏⁪‪⁬⁮‫⁪‮(0, num5);
            num1 = (int) num2 * -1144187 ^ 2031440233;
            continue;
          case 47:
            num1 = (int) num2 * -1832699685 ^ -450475840;
            continue;
          case 48:
            card = this.DrawCard();
            flag9 = card.Impact < 0;
            num1 = (int) num2 * -1549706066 ^ 1164003239;
            continue;
          case 49:
            int num15 = this.Losers.Contains(playerIndex) ? -1257464348 : (num15 = -41940312);
            num1 = num15 ^ (int) num2 * -1391963453;
            continue;
          case 50:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag6 ? (object) "ALL " : (object) "", flag9 ? (object) "receives" : (object) "pays", (object) Game.\u206E‪‎‎⁪⁯‭⁫⁬⁬⁫‌‎‫‮⁮‮‍‭‪⁭⁫‫‮⁯⁪⁫‏‬⁭⁫⁭⁮‪⁯⁯‌‎‎⁫‮(num3), flag3 ? (object) "advance" : (object) "stay");
            num1 = -827731552;
            continue;
          case 51:
            num1 = (int) num2 * 484831341 ^ 1397424488;
            continue;
          case 52:
            int num16;
            num1 = num16 = playerState1.Sprint < 0 ? -1179716035 : (num16 = -1262499335);
            continue;
          case 53:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 200147934 ^ -1610643663;
            continue;
          case 54:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -1007052542 ^ -366558571;
            continue;
          case 55:
            flag3 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 2029217839 ^ 1210198486;
            continue;
          case 56:
            num1 = (int) num2 * -836375294 ^ 2012481974;
            continue;
          case 57:
            int num17 = flag2 ? 2020985867 : (num17 = 341500983);
            num1 = num17 ^ (int) num2 * 1225437069;
            continue;
          case 58:
            num1 = (int) num2 * -1368923743 ^ 937830720;
            continue;
          case 59:
            num1 = -1632233412;
            continue;
          case 60:
            num1 = (int) num2 * 1410621405 ^ 1458704443;
            continue;
          case 61:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u202D‫‏‌⁪‏​⁫⁮‪‭​⁮⁬​‮⁫‍⁫‬⁯‌‎⁬⁫‎‏‮⁫‭⁭⁮⁯‎⁫‏‬‭‫‏‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 921579887 ^ 1404086841;
            continue;
          case 62:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1584836845 ^ 1468708306;
            continue;
          case 63:
            num1 = -836322365;
            continue;
          case 64:
            flag3 = false;
            num1 = -1564000157;
            continue;
          case 65:
            flag5 = !this.Losers.Contains(num4);
            num1 = -1087151852;
            continue;
          case 66:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * 987272841 ^ -1166392603;
            continue;
          case 67:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 68:
            int num18;
            num1 = num18 = num4 >= this._playerStates.Length ? -274295083 : (num18 = -1540384538);
            continue;
          case 69:
            num1 = (int) num2 * -1680157225 ^ -1510249211;
            continue;
          case 70:
            int num19;
            num1 = num19 = num4 == playerIndex ? -2040465837 : (num19 = -138058037);
            continue;
          case 71:
            ++playerState1.Sprint;
            num1 = (int) num2 * 1456772253 ^ -1155764408;
            continue;
          case 72:
            num1 = -1886348752;
            continue;
          case 73:
            this._finished = true;
            num4 = 0;
            num1 = (int) num2 * 64486933 ^ -1843571387;
            continue;
          case 74:
            flag4 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -537657621;
            continue;
          case 75:
            num1 = (int) num2 * -1596457646 ^ 315228448;
            continue;
          case 76:
            goto label_1;
          case 77:
            num1 = (int) num2 * 597686525 ^ -1371647370;
            continue;
          case 78:
            int num20 = !flag4 ? -405437211 : (num20 = -2059389476);
            num1 = num20 ^ (int) num2 * -2084360262;
            continue;
          case 79:
            playerState2.Resources -= Game.\u206E⁪​⁯‮‎⁪‌⁯​⁮⁬⁭‫‮⁭‭‏⁭⁯‍⁮‏‭⁯‮⁪⁫​⁭‌​⁪‏⁪‪⁬⁮‫⁪‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            int num21 = playerState2.Resources < 0 ? 1370426194 : (num21 = 617369617);
            num1 = num21 ^ (int) num2 * -606120113;
            continue;
          case 80:
            int num22 = onlyOneWinner ? 2064799901 : (num22 = 1633108898);
            num1 = num22 ^ (int) num2 * -143365391;
            continue;
          case 81:
            num1 = -1131441656;
            continue;
          case 82:
            flag8 = flag3;
            num1 = -495974800;
            continue;
          default:
            goto label_88;
        }
        flag6 = num6 != 0;
        num1 = -1374480211;
      }
label_3:
      return;
label_88:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1329979269;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 272279369)) % 8U)
        {
          case 0:
            card2 = card1;
            num1 = (int) num2 * -1821983343 ^ 782285852;
            continue;
          case 1:
            int num3 = !flag ? -1769118837 : (num3 = -1921810702);
            num1 = num3 ^ (int) num2 * 2024355841;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * -1842215330 ^ 2062814262;
            continue;
          case 3:
            card1 = this._deck[0];
            num1 = 1968419630;
            continue;
          case 4:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1896765859 ^ -1425470724;
            continue;
          case 6:
            goto label_1;
          case 7:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -905820150 ^ -1488046825;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
      int index = 0;
label_1:
      int num1 = 601459456;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 70540753)) % 8U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * -788019023 ^ -270638475;
            continue;
          case 1:
            num1 = (int) num2 * -1023317458 ^ -1513834477;
            continue;
          case 3:
            str2 = str1;
            num1 = (int) num2 * 1316139255 ^ -1047467141;
            continue;
          case 4:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? 1894975495 : (num3 = 1492957722);
            continue;
          case 5:
            goto label_1;
          case 6:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200C‫‭‬⁮‮⁯‏‏‍‫‎⁭‍‎‍​‪‏‍‮‭‏‎⁪‮⁯‫⁫‌⁭‏‏⁬‎‫‍⁪⁬‌‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200C⁬‮⁭‎⁫⁯‬⁭​‌‏⁪⁭⁪⁯⁯‌⁪‎⁭⁪‭⁪‌⁬⁮‮⁮⁬‫⁫‭‭‬‍‎⁮⁬‫‮(strArray);
            num1 = 1523666873;
            continue;
          case 7:
            num1 = (int) num2 * 829646462 ^ 1822869617;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more) => Game.\u202B‬⁫​⁯‪⁫‮⁬⁬⁯​⁪‬⁯⁭‬‫‮⁬‏⁭‫‬⁪⁮‌‪⁬⁯​⁮‭⁬⁬‏‏‎‫⁫‮(this._buffer, Game.\u202A‎⁭​⁬‏‍⁮‬‍⁫⁭‎‎‫‪‏⁮‏⁯‭‮‮⁫⁪‏‭‍‏​‬⁯⁮‬​⁯⁪‮⁭‌‮(Game.\u200C‫‭‬⁮‮⁯‏‏‍‫‎⁭‍‎‍​‪‏‍‮‭‏‎⁪‮⁯‫⁫‌⁭‏‏⁬‎‫‍⁪⁬‌‮(text), more));

    static Random \u202B‭⁪⁯‪‭​​⁬⁪‏⁫⁪‭⁮‎⁫‪⁪⁯‮‭⁫‏‌‮‎‪‏⁬⁮⁫‎‍‎‫‍‪‫⁪‮([In] int obj0) => new Random(obj0);

    static string \u200F‍‮⁬⁮‏⁮‭‫‬⁪‫‮⁯‬⁮‫⁯‎⁬‏‌⁭⁮⁭‭‫​⁯⁪⁭‪‍‭⁯‎‮⁮‪‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202D‫‏‌⁪‏​⁫⁮‪‭​⁮⁬​‮⁫‍⁫‬⁯‌‎⁬⁫‎‏‮⁫‭⁭⁮⁯‎⁫‏‬‭‫‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206E⁪​⁯‮‎⁪‌⁯​⁮⁬⁭‫‮⁭‭‏⁭⁯‍⁮‏‭⁯‮⁪⁫​⁭‌​⁪‏⁪‪⁬⁮‫⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206E‪‎‎⁪⁯‭⁫⁬⁬⁫‌‎‫‮⁮‮‍‭‪⁭⁫‫‮⁯⁪⁫‏‬⁭⁫⁭⁮‪⁯⁯‌‎‎⁫‮([In] int obj0) => Math.Abs(obj0);

    static string \u200C‫‭‬⁮‮⁯‏‏‍‫‎⁭‍‎‍​‪‏‍‮‭‏‎⁪‮⁯‫⁫‌⁭‏‏⁬‎‫‍⁪⁬‌‮([In] object obj0) => obj0.ToString();

    static string \u200C⁬‮⁭‎⁫⁯‬⁭​‌‏⁪⁭⁪⁯⁯‌⁪‎⁭⁪‭⁪‌⁬⁮‮⁮⁬‫⁫‭‭‬‍‎⁮⁬‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A‎⁭​⁬‏‍⁮‬‍⁫⁭‎‎‫‪‏⁮‏⁯‭‮‮⁫⁪‏‭‍‏​‬⁯⁮‬​⁯⁪‮⁭‌‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202B‬⁫​⁯‪⁫‮⁬⁬⁯​⁪‬⁯⁭‬‫‮⁬‏⁭‫‬⁪⁮‌‪⁬⁯​⁮‭⁬⁬‏‏‎‫⁫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
