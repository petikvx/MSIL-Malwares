// Decompiled with JetBrains decompiler
// Type: c.Services.SchemaThreadService
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Configurations;
using GLuaR.Importers;
using GLuaR.Properties;
using GLuaR.Stubs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace c.Services
{
  public class SchemaThreadService : Form
  {
    private IContainer _PageWrapper;
    private Label regWrapper;
    private ListView m_WorkerWrapper;
    private ImageList connectionWrapper;
    private Button _InitializerWrapper;
    private Button m_IteratorWrapper;
    private GroupBox m_ExpressionWrapper;
    private Label _BaseWrapper;
    private TextBox m_AccountWrapper;
    private TextBox stubWrapper;
    private Label m_MockWrapper;
    private TextBox m_CallbackWrapper;
    private Button m_CustomerWrapper;
    private Label m_ClientWrapper;
    private TextBox _ReponseWrapper;
    private Label rulesWrapper;
    private ComboBox annotationWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public SchemaThreadService()
    {
      int num1 = 5;
      while (true)
      {
        ListViewItem listViewItem;
        int num2;
        ConnectionFieldStub connectionFieldStub;
        ConnectionFieldStub[] infoField;
        int index;
        switch (num1)
        {
          case 0:
label_9:
            ++index;
            goto label_10;
          case 1:
          case 6:
            this._PageWrapper = (IContainer) null;
            num1 = 4;
            continue;
          case 2:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.FillRule();
            this.annotationWrapper.SelectedIndex = 0;
            this.connectionWrapper.Images.Add("empty_project", (Image) Resources.empty_project);
            infoField = FacadeThreadService.m_InfoField;
            index = 0;
            goto label_10;
          case 3:
            listViewItem = new ListViewItem()
            {
              ImageKey = "empty_project",
              StateImageIndex = 0,
              Text = connectionFieldStub.m_RuleField,
              Tag = (object) connectionFieldStub,
              Group = this.m_WorkerWrapper.Groups[0]
            };
            goto case 7;
          case 5:
            ImporterMapper.InitAccount();
            num2 = 6;
            break;
          case 7:
            this.m_WorkerWrapper.Items.Add(listViewItem);
            num2 = 0;
            break;
          case 8:
            goto label_14;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
        continue;
label_10:
        if (index < infoField.Length)
        {
          connectionFieldStub = infoField[index];
          if (true)
            num1 = 3;
          else
            goto label_9;
        }
        else
        {
          this.m_WorkerWrapper.Items[0].Selected = true;
          this.m_CallbackWrapper.Text = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\GLuaR Projects\\";
          num1 = 8;
        }
      }
label_14:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string PublishRule() => this.m_AccountWrapper.Text;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string NewRule() => this._ReponseWrapper.Text;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public LsBrkCond RevertRule()
    {
      int num1 = 4;
      LsBrkCond mapperField;
      while (true)
      {
        int num2 = num1;
        ConnectionFieldStub tag;
        bool proc;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              tag = (ConnectionFieldStub) this.m_WorkerWrapper.SelectedItems[0].Tag;
              num2 = 1;
              continue;
            case 1:
              goto label_1;
            case 2:
            case 5:
              if (!proc)
              {
                mapperField = tag._MapperField;
                num2 = 6;
                continue;
              }
              goto label_2;
            case 3:
              goto label_2;
            case 6:
              goto label_9;
            default:
              num2 = 3;
              continue;
          }
        }
label_1:
        proc = tag.proc;
        num1 = 5;
      }
label_2:
      mapperField = (LsBrkCond) Enum.Parse(typeof (LsBrkCond), this.annotationWrapper.Text);
label_9:
      return mapperField;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string MoveDefinition() => this.m_CallbackWrapper.Text;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetupRule(object config, EventArgs attr)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        FolderBrowserDialog folderBrowserDialog;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_7;
            case 1:
            case 3:
              if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
              {
                this.m_CallbackWrapper.Text = folderBrowserDialog.SelectedPath;
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_7;
              }
              else
                goto label_10;
            case 2:
              goto label_2;
            case 4:
              goto label_9;
            case 5:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_7:
        folderBrowserDialog = new FolderBrowserDialog()
        {
          Description = "Please choose the directory to save the project at.",
          ShowNewFolderButton = true
        };
        num1 = 3;
      }
label_10:
      return;
label_2:
      return;
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CancelRule(object asset, EventArgs attr)
    {
      int num1 = 5;
      if (true)
        goto label_5;
label_1:
      bool flag = this.m_WorkerWrapper.SelectedItems.Count <= 0;
      int num2 = 4;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_3;
          case 1:
          case 3:
            goto label_1;
          case 2:
          case 4:
            goto label_2;
          case 5:
            this.FlushRule();
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto label_8;
          case 6:
            goto label_10;
          default:
            goto label_6;
        }
      }
label_2:
      if (flag)
        return;
      this.m_AccountWrapper.Text = ((ConnectionFieldStub) this.m_WorkerWrapper.SelectedItems[0].Tag)._FieldField;
      this.m_CallbackWrapper.Text = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\GLuaR Projects\\" + this.m_AccountWrapper.Text;
      num2 = 6;
      goto label_4;
label_3:
      return;
label_6:
      num2 = 0;
      goto label_4;
label_8:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CreateRule(object value, EventArgs token)
    {
      this.FlushRule();
      this.m_CallbackWrapper.Text = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\GLuaR Projects\\" + this.m_AccountWrapper.Text;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CheckRule(object last, EventArgs second) => this.FlushRule();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FlushRule()
    {
      int num1 = 3;
      ConnectionFieldStub tag;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.m_CallbackWrapper.Enabled = true;
              this._ReponseWrapper.Enabled = true;
              goto case 4;
            case 1:
              if (!flag)
              {
                this.m_AccountWrapper.Enabled = false;
                this.m_CallbackWrapper.Enabled = false;
                if (SchemaThreadService.DisableRegistry())
                {
                  num2 = 6;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_2;
            case 2:
            case 5:
              goto label_6;
            case 3:
              flag = this.m_WorkerWrapper.SelectedItems.Count > 0;
              if (SchemaThreadService.DisableRegistry())
              {
                num2 = 1;
                continue;
              }
              goto label_17;
            case 4:
            case 7:
              this.m_CustomerWrapper.Enabled = true;
              if (SchemaThreadService.DisableRegistry())
              {
                num2 = 2;
                continue;
              }
              goto label_6;
            case 6:
              goto label_3;
            case 8:
              this.stubWrapper.Text = tag._WrapperField;
              this.m_AccountWrapper.Enabled = true;
              num2 = 0;
              continue;
            case 9:
              goto label_17;
            default:
              if (!SchemaThreadService.InterruptRegistry())
              {
                num2 = 7;
                continue;
              }
              goto case 3;
          }
        }
label_2:
        tag = (ConnectionFieldStub) this.m_WorkerWrapper.SelectedItems[0].Tag;
        num1 = 8;
        continue;
label_3:
        this._ReponseWrapper.Enabled = false;
        this.m_IteratorWrapper.Enabled = false;
        this.m_CustomerWrapper.Enabled = false;
        num1 = 9;
      }
label_6:
      if (tag.proc)
        this.annotationWrapper.Enabled = true;
      if (this.m_AccountWrapper.Text.Length > 0 && this.m_CallbackWrapper.Text.Length > 0)
      {
        this.m_IteratorWrapper.Enabled = true;
        return;
      }
      this.m_IteratorWrapper.Enabled = false;
      return;
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool validatefirst)
    {
      int num1 = 4;
      if (true)
        goto label_4;
label_1:
      int num2 = this._PageWrapper != null ? 1 : 0;
label_3:
      if (num2 == 0)
        goto label_7;
      else
        goto label_6;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            if (validatefirst)
            {
              num1 = 3;
              continue;
            }
            goto label_2;
          case 1:
          case 3:
            goto label_1;
          case 2:
            goto label_6;
          case 5:
            goto label_8;
          default:
            num1 = 2;
            continue;
        }
      }
label_2:
      num2 = 0;
      goto label_3;
label_8:
      return;
label_6:
      this._PageWrapper.Dispose();
label_7:
      base.Dispose(validatefirst);
      int num3 = 5;
      num1 = SchemaThreadService.InterruptRegistry() ? num3 : num3;
      goto label_4;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FillRule()
    {
      int num1 = 30;
      while (true)
      {
        int num2 = num1;
        ListViewGroup listViewGroup1;
        ListViewGroup listViewGroup2;
        ComponentResourceManager componentResourceManager;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 30:
              this._PageWrapper = (IContainer) new Container();
              num2 = 14;
              continue;
            case 1:
              goto label_6;
            case 2:
              goto label_23;
            case 3:
              this.m_WorkerWrapper.Location = new Point(12, 25);
              this.m_WorkerWrapper.MultiSelect = false;
              this.m_WorkerWrapper.Name = "listView1";
              this.m_WorkerWrapper.Size = new Size(564, 207);
              this.m_WorkerWrapper.TabIndex = 1;
              this.m_WorkerWrapper.UseCompatibleStateImageBehavior = false;
              this.m_WorkerWrapper.SelectedIndexChanged += new EventHandler(this.CancelRule);
              this.connectionWrapper.ColorDepth = ColorDepth.Depth8Bit;
              this.connectionWrapper.ImageSize = new Size(32, 32);
              if (true)
              {
                num2 = 26;
                continue;
              }
              goto label_15;
            case 4:
              this.m_IteratorWrapper.Location = new Point(420, 381);
              this.m_IteratorWrapper.Name = "button1";
              this.m_IteratorWrapper.Size = new Size(75, 23);
              this.m_IteratorWrapper.TabIndex = 7;
              this.m_IteratorWrapper.Text = "OK";
              this.m_IteratorWrapper.UseVisualStyleBackColor = true;
              this.m_ExpressionWrapper.Location = new Point(12, 373);
              if (true)
              {
                num2 = 25;
                continue;
              }
              goto case 22;
            case 5:
              this.m_CallbackWrapper = new TextBox();
              if (true)
              {
                num2 = 33;
                continue;
              }
              goto case 0;
            case 6:
              goto label_21;
            case 7:
              goto label_17;
            case 8:
              this.Name = "ProjectDialog";
              this.StartPosition = FormStartPosition.CenterParent;
              this.Text = "New Project";
              if (SchemaThreadService.DisableRegistry())
              {
                num2 = 20;
                continue;
              }
              goto label_41;
            case 9:
              this.FormBorderStyle = FormBorderStyle.FixedSingle;
              this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
              this.MaximizeBox = false;
              num2 = 22;
              continue;
            case 10:
              this.Controls.Add((Control) this.m_WorkerWrapper);
              int num3 = 1;
              num2 = SchemaThreadService.InterruptRegistry() ? num3 : num3;
              continue;
            case 11:
              this._InitializerWrapper.Name = "button2";
              this._InitializerWrapper.Size = new Size(75, 23);
              this._InitializerWrapper.TabIndex = 8;
              this._InitializerWrapper.Text = "Cancel";
              this._InitializerWrapper.UseVisualStyleBackColor = true;
              if (true)
              {
                num2 = 34;
                continue;
              }
              goto case 26;
            case 12:
              goto label_13;
            case 13:
              goto label_38;
            case 14:
              goto label_37;
            case 15:
              this.m_ClientWrapper = new Label();
              this._ReponseWrapper = new TextBox();
              this.rulesWrapper = new Label();
              this.annotationWrapper = new ComboBox();
              this.SuspendLayout();
              this.regWrapper.AutoSize = true;
              this.regWrapper.Location = new Point(12, 9);
              this.regWrapper.Name = "label1";
              this.regWrapper.Size = new Size(59, 13);
              num2 = 37;
              continue;
            case 16:
              this.annotationWrapper.Name = "comboBox1";
              this.annotationWrapper.Size = new Size(199, 21);
              this.annotationWrapper.TabIndex = 6;
              this.AcceptButton = (IButtonControl) this.m_IteratorWrapper;
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              this.AutoScaleMode = AutoScaleMode.Font;
              this.CancelButton = (IButtonControl) this._InitializerWrapper;
              this.ClientSize = new Size(588, 416);
              this.Controls.Add((Control) this.annotationWrapper);
              this.Controls.Add((Control) this.rulesWrapper);
              this.Controls.Add((Control) this._ReponseWrapper);
              this.Controls.Add((Control) this.m_ClientWrapper);
              num2 = 36;
              continue;
            case 17:
            case 18:
              goto label_33;
            case 19:
              goto label_2;
            case 20:
              this.ResumeLayout(false);
              this.PerformLayout();
              if (SchemaThreadService.DisableRegistry())
              {
                num2 = 38;
                continue;
              }
              goto label_17;
            case 21:
              goto label_4;
            case 22:
              this.MinimizeBox = false;
              if (!SchemaThreadService.InterruptRegistry())
              {
                num2 = 8;
                continue;
              }
              goto label_20;
            case 23:
              goto label_39;
            case 24:
              goto label_31;
            case 25:
              goto label_10;
            case 26:
              this.connectionWrapper.TransparentColor = Color.Magenta;
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_27;
            case 27:
              goto label_5;
            case 28:
              goto label_20;
            case 29:
              goto label_11;
            case 31:
              goto label_15;
            case 32:
              goto label_7;
            case 33:
              this.m_CustomerWrapper = new Button();
              int num4 = 15;
              num2 = SchemaThreadService.InterruptRegistry() ? num4 : num4;
              continue;
            case 34:
              goto label_27;
            case 35:
              goto label_28;
            case 36:
              goto label_12;
            case 37:
              this.regWrapper.TabIndex = 4;
              this.regWrapper.Text = "Templates:";
              listViewGroup1.Header = "Installed Templates";
              listViewGroup1.Name = "Installed Templates";
              listViewGroup2.Header = "Custom Templates";
              listViewGroup2.Name = "Custom Templates";
              this.m_WorkerWrapper.Groups.AddRange(new ListViewGroup[2]
              {
                listViewGroup1,
                listViewGroup2
              });
              num2 = 35;
              continue;
            case 38:
              goto label_30;
            default:
              goto label_36;
          }
        }
label_2:
        this.m_CustomerWrapper.Click += new EventHandler(this.SetupRule);
        this.m_ClientWrapper.AutoSize = true;
        this.m_ClientWrapper.Location = new Point(13, 323);
        num1 = 28;
        continue;
label_4:
        this.m_ClientWrapper.TabIndex = 17;
        this.m_ClientWrapper.Text = "Description:";
        num1 = 2;
        continue;
label_5:
        this.m_MockWrapper.Location = new Point(13, 297);
        this.m_MockWrapper.Name = "label3";
        this.m_MockWrapper.Size = new Size(51, 13);
        this.m_MockWrapper.TabIndex = 15;
        num1 = 17;
        continue;
label_6:
        this.Controls.Add((Control) this.regWrapper);
        num1 = 9;
        continue;
label_7:
        this.rulesWrapper.Size = new Size(34, 13);
        this.rulesWrapper.TabIndex = 20;
        this.rulesWrapper.Text = "Type:";
        this.annotationWrapper.DropDownStyle = ComboBoxStyle.DropDownList;
        this.annotationWrapper.FormattingEnabled = true;
        num1 = 24;
        continue;
label_10:
        this.m_ExpressionWrapper.Name = "groupBox1";
        num1 = 6;
        continue;
label_11:
        this.m_CustomerWrapper.Location = new Point(501, 292);
        this.m_CustomerWrapper.Name = "button3";
        this.m_CustomerWrapper.Size = new Size(75, 23);
        this.m_CustomerWrapper.TabIndex = 4;
        this.m_CustomerWrapper.Text = "Browse";
        num1 = 23;
        continue;
label_12:
        this.Controls.Add((Control) this.m_CustomerWrapper);
        this.Controls.Add((Control) this.m_MockWrapper);
        this.Controls.Add((Control) this.m_CallbackWrapper);
        this.Controls.Add((Control) this._InitializerWrapper);
        this.Controls.Add((Control) this.m_IteratorWrapper);
        this.Controls.Add((Control) this.m_ExpressionWrapper);
        this.Controls.Add((Control) this._BaseWrapper);
        num1 = 31;
        continue;
label_13:
        this.m_ExpressionWrapper.TabIndex = 11;
        this.m_ExpressionWrapper.TabStop = false;
        this.m_ExpressionWrapper.Text = "groupBox1";
        this._BaseWrapper.AutoSize = true;
        this._BaseWrapper.Location = new Point(13, 271);
        this._BaseWrapper.Name = "label2";
        this._BaseWrapper.Size = new Size(38, 13);
        this._BaseWrapper.TabIndex = 10;
        this._BaseWrapper.Text = "Name:";
        this.m_AccountWrapper.Location = new Point(97, 268);
        this.m_AccountWrapper.Name = "textBox2";
        this.m_AccountWrapper.Size = new Size(398, 20);
        this.m_AccountWrapper.TabIndex = 2;
        this.m_AccountWrapper.TextChanged += new EventHandler(this.CreateRule);
        this.stubWrapper.Location = new Point(12, 238);
        num1 = 13;
        continue;
label_15:
        this.Controls.Add((Control) this.m_AccountWrapper);
        this.Controls.Add((Control) this.stubWrapper);
        num1 = 10;
        continue;
label_17:
        this._InitializerWrapper.DialogResult = DialogResult.Cancel;
        this._InitializerWrapper.Location = new Point(501, 381);
        num1 = 11;
        continue;
label_20:
        this.m_ClientWrapper.Name = "label4";
        this.m_ClientWrapper.Size = new Size(63, 13);
        num1 = 21;
        continue;
label_21:
        this.m_ExpressionWrapper.Size = new Size(564, 2);
        num1 = 12;
        continue;
label_23:
        this._ReponseWrapper.Location = new Point(97, 320);
        this._ReponseWrapper.Name = "textBox4";
        this._ReponseWrapper.Size = new Size(398, 20);
        this._ReponseWrapper.TabIndex = 5;
        this.rulesWrapper.AutoSize = true;
        this.rulesWrapper.Location = new Point(94, 349);
        this.rulesWrapper.Name = "label5";
        num1 = 32;
        continue;
label_27:
        this.m_IteratorWrapper.DialogResult = DialogResult.OK;
        this.m_IteratorWrapper.Enabled = false;
        num1 = 4;
        continue;
label_28:
        this.m_WorkerWrapper.HideSelection = false;
        this.m_WorkerWrapper.LargeImageList = this.connectionWrapper;
        num1 = 3;
        continue;
label_31:
        this.annotationWrapper.Items.AddRange(new object[2]
        {
          (object) "Addon",
          (object) "Gamemode"
        });
        this.annotationWrapper.Location = new Point(296, 346);
        num1 = 16;
        continue;
label_33:
        this.m_MockWrapper.Text = "Location:";
        this.m_CallbackWrapper.Location = new Point(97, 294);
        this.m_CallbackWrapper.Name = "textBox3";
        this.m_CallbackWrapper.Size = new Size(398, 20);
        this.m_CallbackWrapper.TabIndex = 3;
        this.m_CallbackWrapper.TextChanged += new EventHandler(this.CheckRule);
        goto label_11;
label_36:
        num1 = 29;
        continue;
label_37:
        listViewGroup1 = new ListViewGroup("Installed Templates", HorizontalAlignment.Left);
        listViewGroup2 = new ListViewGroup("Custom Templates", HorizontalAlignment.Left);
        componentResourceManager = new ComponentResourceManager(typeof (SchemaThreadService));
        this.regWrapper = new Label();
        this.m_WorkerWrapper = new ListView();
        this.connectionWrapper = new ImageList(this._PageWrapper);
        this._InitializerWrapper = new Button();
        this.m_IteratorWrapper = new Button();
        this.m_ExpressionWrapper = new GroupBox();
        this._BaseWrapper = new Label();
        this.m_AccountWrapper = new TextBox();
        this.stubWrapper = new TextBox();
        this.m_MockWrapper = new Label();
        num1 = 5;
        continue;
label_38:
        this.stubWrapper.Name = "textBox1";
        this.stubWrapper.ReadOnly = true;
        this.stubWrapper.Size = new Size(564, 20);
        this.stubWrapper.TabIndex = 8;
        this.m_MockWrapper.AutoSize = true;
        num1 = 27;
        continue;
label_39:
        this.m_CustomerWrapper.UseVisualStyleBackColor = true;
        num1 = 19;
      }
label_30:
      return;
label_41:;
    }

    internal static bool DisableRegistry() => true;

    internal static bool InterruptRegistry() => false;
  }
}
