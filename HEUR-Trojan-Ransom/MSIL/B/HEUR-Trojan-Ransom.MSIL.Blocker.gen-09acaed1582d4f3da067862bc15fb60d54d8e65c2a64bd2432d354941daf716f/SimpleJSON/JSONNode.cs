// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONNode
// Assembly: PEFileEvidenceFacto, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 33D8CF26-6BC9-4426-B954-9C7650E72B0A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-09acaed1582d4f3da067862bc15fb60d54d8e65c2a64bd2432d354941daf716f.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONNode
  {
    public virtual void Add(string aKey, JSONNode aItem)
    {
    }

    public virtual JSONNode this[int aIndex]
    {
      get => (JSONNode) null;
      set
      {
      }
    }

    public virtual JSONNode this[string aKey]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) null;
label_1:
        int num1 = -1360215554;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -266527166)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 798612622 ^ 1476316554;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
      }
    }

    public virtual string Value
    {
      get
      {
        string str = "";
label_1:
        int num1 = 779128460;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1433565316)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -689409592 ^ 1589657785;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return str;
      }
      set
      {
      }
    }

    public virtual int Count
    {
      get
      {
        int count = 0;
label_1:
        int num1 = -1101220802;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1850368041)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 1591789825 ^ -333043560;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public virtual void Add(JSONNode aItem) => this.Add("", aItem);

    public virtual JSONNode Remove(string aKey)
    {
label_1:
      int num1 = 1675402352;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 300596237)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1346779907 ^ -1034983694;
            continue;
          case 1:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * 1124329586 ^ 1094701891;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return jsonNode;
    }

    public virtual JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -2024150742;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1306270624)) % 3U)
        {
          case 1:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * 693570787 ^ 1211223442;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return jsonNode;
    }

    public virtual JSONNode Remove(JSONNode aNode)
    {
label_1:
      int num1 = 1785505202;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1529368451)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -56466198 ^ 520100057;
            continue;
          case 1:
            jsonNode = aNode;
            num1 = (int) num2 * -378076966 ^ 1423231881;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return jsonNode;
    }

    public virtual IEnumerable<JSONNode> Childs
    {
      get
      {
        JSONNode.\u003Cget_Childs\u003Ed__17 childs = new JSONNode.\u003Cget_Childs\u003Ed__17(-2);
label_1:
        int num1 = 1477693214;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 380432406)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              childs.\u003C\u003E4__this = this;
              num1 = (int) num2 * 1007479592 ^ -1071680961;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return (IEnumerable<JSONNode>) childs;
      }
    }

    public IEnumerable<JSONNode> DeepChilds => (IEnumerable<JSONNode>) new JSONNode.\u003Cget_DeepChilds\u003Ed__19(-2)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
      string str = nameof (JSONNode);
label_1:
      int num1 = 866072741;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 738479187)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 89223043 ^ 1563444686;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public virtual string ToString(string aPrefix)
    {
label_1:
      int num1 = -785184930;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1571405788)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            str = nameof (JSONNode);
            num1 = (int) num2 * 1995027568 ^ 73615315;
            continue;
          case 3:
            num1 = (int) num2 * 1943703533 ^ -896063134;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public virtual int AsInt
    {
      get
      {
        int result = 0;
        bool flag = int.TryParse(this.Value, out result);
label_1:
        int num1 = -1319322283;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -444663498)) % 6U)
          {
            case 0:
              asInt = 0;
              num1 = -1949624084;
              continue;
            case 1:
              asInt = result;
              num1 = (int) num2 * -368849325 ^ 813314484;
              continue;
            case 3:
              int num3 = flag ? 1043145046 : (num3 = 149437081);
              num1 = num3 ^ (int) num2 * -772450335;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -126359440 ^ 2083128124;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asInt;
      }
      set
      {
        this.Value = value.ToString();
label_1:
        int num1 = -1784254780;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -405382945)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * 974031543 ^ -1235749754;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public virtual float AsFloat
    {
      get
      {
        float result = 0.0f;
        bool flag = float.TryParse(this.Value, NumberStyles.Float, (IFormatProvider) JSONNode.\u206A‍‏⁪​⁪⁬‌‌‌⁪⁮⁮‌‫‮​‏‪⁫‌‪‍‬​⁮‪‏⁪‫‬⁬‮‎‍‪‫‎‏‭‮(), out result);
label_1:
        int num1 = 480450747;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 303698862)) % 5U)
          {
            case 0:
              asFloat = result;
              num1 = (int) num2 * -844921184 ^ 1110557012;
              continue;
            case 1:
              int num3 = flag ? 1478212244 : (num3 = 15748862);
              num1 = num3 ^ (int) num2 * -834974288;
              continue;
            case 2:
              goto label_1;
            case 3:
              asFloat = 0.0f;
              num1 = 325413652;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = -1879224430;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1475811804)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Value = value.ToString();
              num1 = (int) num2 * -942236664 ^ -1177309960;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public virtual double AsDouble
    {
      get
      {
        double result = 0.0;
label_1:
        int num1 = -668933239;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -345613139)) % 5U)
          {
            case 1:
              asDouble = 0.0;
              num1 = -842765719;
              continue;
            case 2:
              asDouble = result;
              num1 = (int) num2 * 1337925117 ^ 1373595791;
              continue;
            case 3:
              int num3 = !double.TryParse(this.Value, out result) ? 1973696848 : (num3 = 1061358739);
              num1 = num3 ^ (int) num2 * 947564376;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_6:
        return asDouble;
      }
      set => this.Value = value.ToString();
    }

    public virtual bool AsBool
    {
      get
      {
        bool result = false;
label_1:
        int num1 = -520124428;
        bool flag;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -982193344)) % 8U)
          {
            case 0:
              int num3 = flag ? -118900193 : (num3 = -900772387);
              num1 = num3 ^ (int) num2 * 467469899;
              continue;
            case 1:
              num1 = (int) num2 * 203339643 ^ 1995698056;
              continue;
            case 2:
              goto label_1;
            case 4:
              flag = bool.TryParse(this.Value, out result);
              num1 = (int) num2 * -480585315 ^ -665432940;
              continue;
            case 5:
              asBool = !JSONNode.\u200B⁮​⁭‭‏‌‍‮‌‍⁫‌‎‏⁯⁯‌⁯‌‪⁯‎⁬⁭​‮‌‌‭‏‍‭⁫‮⁯‎⁮‬‭‮(this.Value);
              num1 = -1629563055;
              continue;
            case 6:
              num1 = (int) num2 * 28336361 ^ 2082156149;
              continue;
            case 7:
              asBool = result;
              num1 = (int) num2 * -64226323 ^ -26803579;
              continue;
            default:
              goto label_9;
          }
        }
label_9:
        return asBool;
      }
      set
      {
label_1:
        int num1 = 404155561;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1995768447)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1648060229 ^ -148448597;
              continue;
            case 2:
              this.Value = value ? "true" : "false";
              num1 = 188584606;
              continue;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public virtual JSONArray AsArray
    {
      get
      {
label_1:
        int num1 = -1651150218;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -610202120)) % 3U)
          {
            case 1:
              asArray = this as JSONArray;
              num1 = (int) num2 * -180281666 ^ 1711288874;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return asArray;
      }
    }

    public virtual JSONClass AsObject => this as JSONClass;

    public static implicit operator JSONNode(string s)
    {
label_1:
      int num1 = -2120142944;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2112119450)) % 3U)
        {
          case 1:
            jsonNode = (JSONNode) new JSONData(s);
            num1 = (int) num2 * 958115625 ^ -869683155;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return jsonNode;
    }

    public static implicit operator string(JSONNode d)
    {
label_1:
      int num1 = -811435007;
      string str1;
      while (true)
      {
        uint num2;
        string str2;
        switch ((num2 = (uint) (num1 ^ -104671486)) % 5U)
        {
          case 0:
            str2 = d.Value;
            break;
          case 1:
            num1 = (int) num2 * 807349381 ^ 610703011;
            continue;
          case 2:
            goto label_1;
          case 4:
            if (d == (object) null)
            {
              str2 = (string) null;
              break;
            }
            num1 = (int) num2 * 1294983410 ^ -1326219590;
            continue;
          default:
            goto label_9;
        }
        str1 = str2;
        num1 = -642487669;
      }
label_9:
      return str1;
    }

    public static bool operator ==(JSONNode a, object b)
    {
      if (b != null)
        goto label_6;
label_1:
      int num1 = -138325509;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1683934961)) % 7U)
        {
          case 1:
            num1 = (int) num2 * -1595243720 ^ -1994552116;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag = (object) a == b;
            num1 = -1246450553;
            continue;
          case 4:
            goto label_5;
          case 5:
            num1 = (int) num2 * 1361341054 ^ 33357724;
            continue;
          case 6:
            flag = true;
            num1 = (int) num2 * 672462341 ^ 1995330543;
            continue;
          default:
            goto label_10;
        }
      }
label_5:
      int num3 = a is JSONLazyCreator ? 1 : 0;
      goto label_7;
label_10:
      return flag;
label_6:
      num3 = 0;
label_7:
      num1 = num3 != 0 ? -1725842157 : (num1 = -1880239443);
      goto label_2;
    }

    public static bool operator !=(JSONNode a, object b) => !(a == b);

    public override bool Equals(object obj) => (object) this == obj;

    public override int GetHashCode()
    {
label_1:
      int num1 = -1358639720;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -922819923)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1965222615 ^ -401586617;
            continue;
          case 1:
            hashCode = this.\u200D​‪⁮⁮⁭⁫‮⁮‬⁬‬‌‭‍​​⁪‫⁮⁮‬‮‮‮‪⁭​‬⁯⁭⁫‍⁪‏⁮⁯⁮‏⁭‮();
            num1 = (int) num2 * 1661948135 ^ -1906193994;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return hashCode;
    }

    internal static string Escape(string aText)
    {
label_1:
      int num1 = -2016002740;
      char ch1;
      string str1;
      string str2;
      char ch2;
      int num2;
      char ch3;
      string str3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1253115383)) % 30U)
        {
          case 0:
            num1 = (int) num3 * 785747403 ^ 1073045105;
            continue;
          case 1:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, "\\\\");
            num1 = -1257566985;
            continue;
          case 2:
            ch2 = ch3;
            num1 = (int) num3 * -510640489 ^ -135991046;
            continue;
          case 3:
            num1 = (int) num3 * -680259716 ^ 102065611;
            continue;
          case 4:
            num1 = (int) num3 * 1120426102 ^ -1448695301;
            continue;
          case 5:
            str2 = "";
            num1 = (int) num3 * 1579261871 ^ 1181859418;
            continue;
          case 6:
label_23:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, "\\n");
            num1 = -1193128552;
            continue;
          case 7:
            num2 = 0;
            num1 = (int) num3 * -2086539930 ^ 766482743;
            continue;
          case 8:
            goto label_1;
          case 9:
label_12:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, "\\r");
            num1 = -176666838;
            continue;
          case 10:
            num1 = (int) num3 * -938989732 ^ -572463105;
            continue;
          case 11:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, "\\\"");
            num1 = -174969189;
            continue;
          case 12:
            num1 = (int) num3 * 498712510 ^ -1156858197;
            continue;
          case 13:
label_16:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, ch3.ToString());
            num1 = -1257566985;
            continue;
          case 14:
            ++num2;
            num1 = -1517856891;
            continue;
          case 15:
            str3 = str2;
            num1 = (int) num3 * 2019366831 ^ 428185309;
            continue;
          case 16:
            int num4;
            num1 = num4 = ch1 == '"' ? -1090607352 : (num4 = -696377022);
            continue;
          case 17:
label_21:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, "\\b");
            num1 = -1257566985;
            continue;
          case 18:
            ch3 = JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(str1, num2);
            num1 = -240186927;
            continue;
          case 20:
            int num5;
            num1 = num5 = num2 >= JSONNode.\u206C‎⁬⁮‪‎⁬‭‍‌⁯⁬‭​‌‪‏​‌⁭⁯⁫‎‪‪⁯⁪‮⁫⁯‌⁯⁮‎​‫⁯‎⁬‎‮(str1) ? -518672042 : (num5 = -1579831909);
            continue;
          case 21:
            num1 = (int) num3 * 1113612871 ^ 1321839330;
            continue;
          case 22:
label_17:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, "\\f");
            num1 = -1257566985;
            continue;
          case 23:
            ch1 = ch2;
            num1 = (int) num3 * -1369790995 ^ -387023109;
            continue;
          case 24:
            num1 = (int) num3 * -88526732 ^ 931060236;
            continue;
          case 25:
            switch (ch1)
            {
              case '\b':
                goto label_21;
              case '\t':
                goto label_22;
              case '\n':
                goto label_23;
              case '\v':
                goto label_16;
              case '\f':
                goto label_17;
              case '\r':
                goto label_12;
              default:
                num1 = (int) num3 * -808963343 ^ 1737361608;
                continue;
            }
          case 26:
            str1 = aText;
            num1 = (int) num3 * -2077823451 ^ -381055398;
            continue;
          case 27:
            num1 = (int) num3 * -1658672866 ^ -1947776531;
            continue;
          case 28:
            int num6;
            num1 = num6 = ch1 == '\\' ? -359072966 : (num6 = -723741671);
            continue;
          case 29:
label_22:
            str2 = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(str2, "\\t");
            num1 = -1892807417;
            continue;
          default:
            goto label_32;
        }
      }
label_32:
      return str3;
    }

    public static JSONNode Parse(string aJSON)
    {
label_1:
      int num1 = -1058405960;
      bool flag1;
      bool flag2;
      JSONNode jsonNode1;
      bool flag3;
      int num2;
      bool flag4;
      JSONNode jsonNode2;
      bool flag5;
      string aItem;
      bool flag6;
      bool flag7;
      string aKey;
      bool flag8;
      bool flag9;
      Stack<JSONNode> jsonNodeStack;
      char ch1;
      bool flag10;
      bool flag11;
      bool flag12;
      bool flag13;
      bool flag14;
      char ch2;
      bool flag15;
      char ch3;
      char ch4;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -841793377)) % 150U)
        {
          case 0:
            num1 = (int) num3 * 1943234841 ^ 409171682;
            continue;
          case 1:
            aKey = aItem;
            aItem = "";
            num1 = -1264189691;
            continue;
          case 2:
            num1 = (int) num3 * 1329346056 ^ -404634462;
            continue;
          case 3:
            ch1 = ch4;
            int num4 = ch1 > ',' ? -1256853642 : (num4 = -1023912315);
            num1 = num4 ^ (int) num3 * 400973974;
            continue;
          case 4:
            num1 = (int) num3 * -1459241041 ^ -134533760;
            continue;
          case 5:
            num1 = (int) num3 * -2071158624 ^ 1449058258;
            continue;
          case 6:
            aKey = "";
            aItem = "";
            num1 = -1221989360;
            continue;
          case 7:
            jsonNode2 = jsonNode1;
            num1 = -1688202903;
            continue;
          case 8:
            num1 = (int) num3 * 1299621176 ^ 1060048314;
            continue;
          case 9:
            jsonNodeStack.Push((JSONNode) new JSONArray());
            num1 = -1211279797;
            continue;
          case 10:
            int num5 = !flag5 ? -24964044 : (num5 = -155613064);
            num1 = num5 ^ (int) num3 * -1193251663;
            continue;
          case 11:
            jsonNode1 = jsonNodeStack.Peek();
            num1 = (int) num3 * 1166671657 ^ 834861037;
            continue;
          case 12:
label_52:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, "\r");
            num1 = -1692539932;
            continue;
          case 13:
            flag12 = num2 < JSONNode.\u206C‎⁬⁮‪‎⁬‭‍‌⁯⁬‭​‌‪‏​‌⁭⁯⁫‎‪‪⁯⁪‮⁫⁯‌⁯⁮‎​‫⁯‎⁬‎‮(aJSON);
            num1 = -2052404042;
            continue;
          case 14:
            int num6 = !flag9 ? 1158103346 : (num6 = 497227195);
            num1 = num6 ^ (int) num3 * 1128171541;
            continue;
          case 15:
            num1 = (int) num3 * 1560973786 ^ -424943060;
            continue;
          case 16:
            aKey = JSONNode.\u200D⁭​​‎⁮‪⁬‮‭‭⁭‍‪‮‮‫‭‍⁭⁯​⁮‍‭⁪⁮​‌⁯⁮‪‍⁪‬‏‍⁬‮⁫‮(aKey);
            flag14 = jsonNode1 is JSONArray;
            num1 = (int) num3 * 653539451 ^ 378670044;
            continue;
          case 17:
            jsonNodeStack.Push((JSONNode) new JSONClass());
            num1 = -960974215;
            continue;
          case 18:
            num1 = (int) num3 * -1821448573 ^ -450441194;
            continue;
          case 19:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2).ToString());
            num1 = (int) num3 * -1235043350 ^ -1057381669;
            continue;
          case 20:
            num1 = (int) num3 * 414399830 ^ -101407421;
            continue;
          case 21:
            goto label_114;
          case 22:
            num1 = (int) num3 * 576323470 ^ -698692427;
            continue;
          case 23:
            jsonNode1.Add(aKey, jsonNodeStack.Peek());
            num1 = (int) num3 * 1238711796 ^ -1210664313;
            continue;
          case 24:
            int num7 = flag13 ? -793583937 : (num7 = -2141518158);
            num1 = num7 ^ (int) num3 * -403985199;
            continue;
          case 25:
            num2 += 4;
            num1 = (int) num3 * -1281227753 ^ 1913468507;
            continue;
          case 26:
            flag6 = jsonNode1 != (object) null;
            num1 = (int) num3 * -692613983 ^ 911888284;
            continue;
          case 27:
            int num8 = jsonNodeStack.Count <= 0 ? -696352822 : (num8 = -1374768486);
            num1 = num8 ^ (int) num3 * 1869621705;
            continue;
          case 28:
            num1 = (int) num3 * -1182887784 ^ -2014738056;
            continue;
          case 29:
            int num9 = flag6 ? -309109915 : (num9 = -811580596);
            num1 = num9 ^ (int) num3 * 778025500;
            continue;
          case 30:
            int num10 = !flag10 ? 1899050335 : (num10 = 163757348);
            num1 = num10 ^ (int) num3 * 2055759140;
            continue;
          case 31:
            num1 = (int) num3 * 865446258 ^ 1951928784;
            continue;
          case 32:
            jsonNode1.Add(aKey, (JSONNode) aItem);
            num1 = (int) num3 * -283798675 ^ 89114186;
            continue;
          case 33:
            num1 = (int) num3 * 1994262032 ^ -1982527500;
            continue;
          case 34:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, "\f");
            num1 = -1776169144;
            continue;
          case 35:
            jsonNode1.Add(aKey, (JSONNode) aItem);
            num1 = (int) num3 * -928430750 ^ -1982133605;
            continue;
          case 36:
            switch (ch3)
            {
              case 'r':
                goto label_52;
              case 's':
                goto label_62;
              case 't':
                goto label_143;
              case 'u':
                goto label_73;
              default:
                num1 = -948617070;
                continue;
            }
          case 37:
            int num11;
            num1 = num11 = ch1 == '{' ? -1152482818 : (num11 = -1011566953);
            continue;
          case 38:
            jsonNodeStack.Pop();
            flag10 = JSONNode.\u206E⁮⁬‍⁭‍⁪‍‍​‍‬⁫​‬​⁫‪⁮⁫⁫⁫‍⁬‫⁮‮​⁮‪‏⁮‬‍‬‬⁮‬‮‍‮(aItem, "");
            num1 = -1099932163;
            continue;
          case 39:
            jsonNodeStack = new Stack<JSONNode>();
            jsonNode1 = (JSONNode) null;
            num2 = 0;
            num1 = (int) num3 * -1208100426 ^ -914082393;
            continue;
          case 40:
            aKey = JSONNode.\u200D⁭​​‎⁮‪⁬‮‭‭⁭‍‪‮‮‫‭‍⁭⁯​⁮‍‭⁪⁮​‌⁯⁮‪‍⁪‬‏‍⁬‮⁫‮(aKey);
            num1 = (int) num3 * -1870630633 ^ -504771637;
            continue;
          case 41:
            jsonNode1.Add(jsonNodeStack.Peek());
            num1 = (int) num3 * -180298673 ^ 533669147;
            continue;
          case 42:
            aItem = "";
            aKey = "";
            flag1 = false;
            num1 = (int) num3 * 1509033888 ^ -1997262043;
            continue;
          case 43:
            num1 = (int) num3 * 1186818481 ^ 423886387;
            continue;
          case 44:
            num1 = (int) num3 * -2041960064 ^ -297765365;
            continue;
          case 45:
label_73:
            num1 = -1839955035;
            continue;
          case 46:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2).ToString());
            num1 = (int) num3 * -2047964040 ^ -107661038;
            continue;
          case 47:
            num1 = (int) num3 * 1089552666 ^ -1219974443;
            continue;
          case 48:
            num1 = (int) num3 * 1636256910 ^ -1332244848;
            continue;
          case 49:
            int num12 = !flag15 ? -2075960458 : (num12 = -1490209618);
            num1 = num12 ^ (int) num3 * -315076983;
            continue;
          case 50:
            ch2 = JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2);
            num1 = (int) num3 * -91650169 ^ 981264758;
            continue;
          case 51:
            int num13 = jsonNode1 is JSONArray ? -1468452023 : (num13 = -81166693);
            num1 = num13 ^ (int) num3 * 1428837216;
            continue;
          case 52:
            num1 = (int) num3 * -1416031557 ^ -1350745115;
            continue;
          case 53:
            int num14;
            num1 = num14 = ch3 == 'n' ? -1890623576 : (num14 = -954016871);
            continue;
          case 54:
            aItem = "";
            jsonNode1 = jsonNodeStack.Peek();
            num1 = (int) num3 * 1659931737 ^ -555500666;
            continue;
          case 55:
          case 56:
          case 96:
          case 101:
          case 109:
label_112:
            ++num2;
            num1 = -1959081901;
            continue;
          case 57:
            flag13 = JSONNode.\u206E⁮⁬‍⁭‍⁪‍‍​‍‬⁫​‬​⁫‪⁮⁫⁫⁫‍⁬‫⁮‮​⁮‪‏⁮‬‍‬‬⁮‬‮‍‮(aKey, "");
            num1 = -242538431;
            continue;
          case 58:
            goto label_1;
          case 59:
            num1 = (int) num3 * 608685644 ^ 1960856453;
            continue;
          case 60:
label_62:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, ch2.ToString());
            num1 = -676178621;
            continue;
          case 61:
            int num15 = ch3 == 'b' ? -1304890935 : (num15 = -1193223760);
            num1 = num15 ^ (int) num3 * 1374391621;
            continue;
          case 63:
            int num16 = flag7 ? -522792659 : (num16 = -1787406254);
            num1 = num16 ^ (int) num3 * -2134724550;
            continue;
          case 64:
            num1 = (int) num3 * 262056975 ^ 1197283411;
            continue;
          case 65:
            int num17 = !flag4 ? 1803468127 : (num17 = 110989725);
            num1 = num17 ^ (int) num3 * 159962472;
            continue;
          case 66:
            int num18 = flag8 ? -984864896 : (num18 = -386080933);
            num1 = num18 ^ (int) num3 * -115139386;
            continue;
          case 67:
            int num19 = flag3 ? -756998020 : (num19 = -970263249);
            num1 = num19 ^ (int) num3 * -1851829223;
            continue;
          case 68:
            jsonNode1.Add(jsonNodeStack.Peek());
            num1 = (int) num3 * 687188609 ^ -616112631;
            continue;
          case 69:
            num1 = (int) num3 * -293005479 ^ -550095369;
            continue;
          case 70:
            int num20 = flag11 ? 339785786 : (num20 = 746680637);
            num1 = num20 ^ (int) num3 * -889622103;
            continue;
          case 71:
            num1 = (int) num3 * 424666645 ^ 574627559;
            continue;
          case 72:
            jsonNode1.Add((JSONNode) aItem);
            num1 = (int) num3 * 918675290 ^ -80647644;
            continue;
          case 73:
            int num21;
            num1 = num21 = JSONNode.\u206E⁮⁬‍⁭‍⁪‍‍​‍‬⁫​‬​⁫‪⁮⁫⁫⁫‍⁬‫⁮‮​⁮‪‏⁮‬‍‬‬⁮‬‮‍‮(aKey, "") ? -14889642 : (num21 = -603300798);
            continue;
          case 74:
            num1 = (int) num3 * -1273290021 ^ 874656786;
            continue;
          case 75:
label_143:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, "\t");
            num1 = -687720220;
            continue;
          case 76:
            flag3 = jsonNode1 is JSONArray;
            num1 = (int) num3 * 34221384 ^ 540209716;
            continue;
          case 77:
            goto label_104;
          case 78:
label_74:
            flag15 = flag1;
            num1 = -1733878170;
            continue;
          case 79:
            ch3 = ch2;
            int num22 = ch3 > 'f' ? 512911259 : (num22 = 176829725);
            num1 = num22 ^ (int) num3 * -840278561;
            continue;
          case 80:
            num1 = -2015603525;
            continue;
          case 81:
            int num23 = !(jsonNode1 != (object) null) ? 1168570338 : (num23 = 1484332386);
            num1 = num23 ^ (int) num3 * -238751195;
            continue;
          case 82:
            int num24;
            num1 = num24 = ch3 != 'f' ? -1581300731 : (num24 = -171002673);
            continue;
          case 83:
            flag11 = JSONNode.\u206E⁮⁬‍⁭‍⁪‍‍​‍‬⁫​‬​⁫‪⁮⁫⁫⁫‍⁬‫⁮‮​⁮‪‏⁮‬‍‬‬⁮‬‮‍‮(aItem, "");
            num1 = -827082359;
            continue;
          case 84:
            num1 = -287655005;
            continue;
          case 85:
label_8:
            flag4 = flag1;
            num1 = -90177544;
            continue;
          case 86:
            int num25;
            num1 = num25 = ch1 == '}' ? -1290991679 : (num25 = -554477237);
            continue;
          case 87:
            int num26;
            num1 = num26 = ch1 == '"' ? -259482491 : (num26 = -1010546584);
            continue;
          case 88:
            int num27 = ch1 > ' ' ? -1081689904 : (num27 = -361059719);
            num1 = num27 ^ (int) num3 * 1118488268;
            continue;
          case 89:
            int num28 = flag12 ? 1927913563 : (num28 = 1488433347);
            num1 = num28 ^ (int) num3 * -642836142;
            continue;
          case 90:
            num1 = -1797343636;
            continue;
          case 91:
            num1 = (int) num3 * 1178827549 ^ -1277583169;
            continue;
          case 92:
            switch (ch1)
            {
              case '\t':
                goto label_8;
              case '\n':
              case '\r':
                goto label_112;
              case '\v':
              case '\f':
                goto label_39;
              default:
                num1 = (int) num3 * -1302083864 ^ 466678480;
                continue;
            }
          case 93:
            int num29;
            num1 = num29 = ch1 != ' ' ? -1638833402 : (num29 = -476669012);
            continue;
          case 94:
            int num30 = flag2 ? -1940951824 : (num30 = -209529846);
            num1 = num30 ^ (int) num3 * -1222973807;
            continue;
          case 95:
            int num31 = !flag14 ? -2140814295 : (num31 = -305799768);
            num1 = num31 ^ (int) num3 * 1270681439;
            continue;
          case 97:
            num1 = (int) num3 * -1523078890 ^ 2141969975;
            continue;
          case 98:
            flag1 = !flag1;
            num1 = -121566098;
            continue;
          case 99:
            num1 = (int) num3 * 1236918298 ^ -1907433383;
            continue;
          case 100:
            aKey = "";
            num1 = -1759336922;
            continue;
          case 102:
            flag5 = flag1;
            num1 = -1958189803;
            continue;
          case 103:
            num1 = (int) num3 * -1213375017 ^ -2110683291;
            continue;
          case 104:
            num1 = (int) num3 * -94079400 ^ 2130409477;
            continue;
          case 105:
            int num32;
            num1 = num32 = ch1 > ']' ? -1730287360 : (num32 = -134799219);
            continue;
          case 106:
            num1 = (int) num3 * -442153761 ^ -1337255480;
            continue;
          case 107:
            num1 = (int) num3 * -2135060123 ^ -159487219;
            continue;
          case 108:
            string s = JSONNode.\u206E‬‏‮‬‏⁮​⁮⁯‮​‌‎⁮‭‬⁮‮⁫⁯⁭‬​⁯⁯‍‍‬⁪⁫⁯​‭‌‮‬‏⁯⁯‮(aJSON, num2 + 1, 4);
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, ((char) int.Parse(s, NumberStyles.AllowHexSpecifier)).ToString());
            num1 = (int) num3 * 1725872165 ^ 913796532;
            continue;
          case 110:
            num1 = (int) num3 * -1169742858 ^ -1907082378;
            continue;
          case 111:
            ch4 = JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2);
            num1 = (int) num3 * -1638726398 ^ -607494480;
            continue;
          case 112:
            flag8 = JSONNode.\u206E⁮⁬‍⁭‍⁪‍‍​‍‬⁫​‬​⁫‪⁮⁫⁫⁫‍⁬‫⁮‮​⁮‪‏⁮‬‍‬‬⁮‬‮‍‮(aKey, "");
            num1 = -870867833;
            continue;
          case 113:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, "\n");
            num1 = -687720220;
            continue;
          case 114:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2).ToString());
            num1 = (int) num3 * -1961971451 ^ 687488709;
            continue;
          case 115:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2).ToString());
            num1 = (int) num3 * 1671157949 ^ -1460990315;
            continue;
          case 116:
            num1 = (int) num3 * -459641455 ^ 2077533695;
            continue;
          case 117:
            num1 = (int) num3 * -2030549816 ^ 1800949698;
            continue;
          case 118:
            int num33 = ch1 != ':' ? 866268145 : (num33 = 1963426263);
            num1 = num33 ^ (int) num3 * -239839030;
            continue;
          case 119:
            num1 = (int) num3 * -1673510485 ^ 873238404;
            continue;
          case 120:
            int num34;
            num1 = num34 = jsonNodeStack.Count == 0 ? -1219145278 : (num34 = -1022287251);
            continue;
          case 121:
            num1 = -1666777449;
            continue;
          case 122:
            flag7 = flag1;
            num1 = (int) num3 * -64807907 ^ -915856498;
            continue;
          case 123:
            num1 = -1543246648;
            continue;
          case 124:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2).ToString());
            num1 = (int) num3 * 622990849 ^ 1886736244;
            continue;
          case 125:
            int num35 = !(jsonNode1 is JSONArray) ? -390941885 : (num35 = -809719370);
            num1 = num35 ^ (int) num3 * 1330242840;
            continue;
          case 126:
            flag2 = flag1;
            num1 = -1436806037;
            continue;
          case (uint) sbyte.MaxValue:
label_120:
            int num36;
            num1 = num36 = flag1 ? -817787014 : (num36 = -1464181668);
            continue;
          case 128:
            num1 = (int) num3 * 831734400 ^ -1113694523;
            continue;
          case 129:
            switch (ch1)
            {
              case '[':
                goto label_120;
              case '\\':
                goto label_92;
              case ']':
                goto label_74;
              default:
                num1 = -2013279678;
                continue;
            }
          case 130:
            aKey = "";
            aItem = "";
            num1 = -816837916;
            continue;
          case 131:
            aItem = "";
            num1 = (int) num3 * -779761457 ^ -547704801;
            continue;
          case 132:
            jsonNode1.Add((JSONNode) aItem);
            num1 = (int) num3 * 1955868408 ^ 1407240983;
            continue;
          case 133:
            num1 = -198151610;
            continue;
          case 134:
            num1 = (int) num3 * -567645170 ^ 1190627326;
            continue;
          case 135:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, "\b");
            num1 = -1733214962;
            continue;
          case 136:
            aKey = JSONNode.\u200D⁭​​‎⁮‪⁬‮‭‭⁭‍‪‮‮‫‭‍⁭⁯​⁮‍‭⁪⁮​‌⁯⁮‪‍⁪‬‏‍⁬‮⁫‮(aKey);
            num1 = (int) num3 * 1329927837 ^ 1365028860;
            continue;
          case 137:
            aKey = "";
            num1 = -2082838609;
            continue;
          case 138:
            int num37;
            num1 = num37 = JSONNode.\u206E⁮⁬‍⁭‍⁪‍‍​‍‬⁫​‬​⁫‪⁮⁫⁫⁫‍⁬‫⁮‮​⁮‪‏⁮‬‍‬‬⁮‬‮‍‮(aKey, "") ? -1775041816 : (num37 = -1038103995);
            continue;
          case 139:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2).ToString());
            num1 = (int) num3 * -538476107 ^ 1555738563;
            continue;
          case 140:
            jsonNode1 = jsonNodeStack.Peek();
            num1 = (int) num3 * 456848934 ^ 414115649;
            continue;
          case 141:
            num1 = (int) num3 * 1037462547 ^ -447556107;
            continue;
          case 142:
            num1 = (int) num3 * -1014938630 ^ -1336832814;
            continue;
          case 143:
            num1 = (int) num3 * 888949186 ^ 1229704914;
            continue;
          case 144:
            num1 = (int) num3 * -365685095 ^ -931934926;
            continue;
          case 145:
            int num38;
            num1 = num38 = flag1 ? -1380743118 : (num38 = -1036266296);
            continue;
          case 146:
label_92:
            ++num2;
            flag9 = flag1;
            num1 = -178246085;
            continue;
          case 147:
label_39:
            aItem = JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮(aItem, JSONNode.\u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮(aJSON, num2).ToString());
            num1 = -1505813393;
            continue;
          case 148:
            int num39;
            num1 = num39 = ch1 != ',' ? -525223799 : (num39 = -50878519);
            continue;
          case 149:
            jsonNode1.Add(aKey, jsonNodeStack.Peek());
            num1 = (int) num3 * -2133909244 ^ 184271179;
            continue;
          default:
            goto label_150;
        }
      }
label_104:
      throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("JSON Parse: Quotation marks seems to be messed up.");
label_114:
      throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("JSON Parse: Too many closing brackets");
label_150:
      return jsonNode2;
    }

    public virtual void Serialize(BinaryWriter aWriter)
    {
    }

    public void SaveToStream(Stream aData) => this.Serialize(JSONNode.\u202E⁮⁭⁬⁭⁪‌‎⁬‏‬‭‫⁯⁯​‪‫⁬⁯⁯⁮‎​⁫‭‪‍⁭‪‍⁯⁪‫‫⁯‫‎‭⁪‮(aData));

    public void SaveToCompressedStream(Stream aData) => throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public void SaveToCompressedFile(string aFileName) => throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public string SaveToCompressedBase64() => throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public void SaveToFile(string aFileName)
    {
      JSONNode.\u202D‭‬⁮‍‎​‬‮​⁪⁫‪⁫⁬‍‭‍⁯‫‭⁯‏⁮‮‍‌‎‪‌‎‫⁮⁬‎​⁮​‎⁯‮(JSONNode.\u202C⁯⁯‭⁪⁭‌‌‮⁭⁯‮‍⁫⁮‎⁪‬‍‫⁮‭‫‭​‍‌​⁪⁪‌⁮⁯⁪‮‎‎‪⁪⁪‮((FileSystemInfo) JSONNode.\u202B⁭‭‬‎​‮⁭‎‏‮⁯‎⁭‫⁬‍⁮‪‬‮‏⁮⁬⁮‎‬‏‌‬​‫​⁫⁯⁬‮‌⁫⁮‮(JSONNode.\u200C‌‮⁭⁭⁪‏‪⁫‮⁫⁭⁬⁯‭⁪‪⁯‫⁬⁬‪‬‬⁯‏‪‍‪‮⁪⁪‪⁭⁪⁯‪⁯‮‬‮(aFileName))));
      FileStream aData = JSONNode.\u202E⁮‎‏‫‌‮‎‫⁭⁪‌⁫‫‌⁬⁯⁯⁬​‭⁮‎⁮‬‎⁫​⁯⁪‍⁫‬​‌⁯⁭⁪‍⁪‮(aFileName);
      try
      {
label_2:
        int num1 = 1999269142;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 316013915)) % 4U)
          {
            case 0:
              goto label_10;
            case 1:
              this.SaveToStream((Stream) aData);
              num1 = (int) num2 * 1772151633 ^ -1652185064;
              continue;
            case 2:
              num1 = (int) num2 * -778753021 ^ -287684779;
              continue;
            case 3:
              goto label_2;
            default:
              goto label_6;
          }
        }
label_10:
        return;
label_6:;
      }
      finally
      {
        if (aData != null)
        {
label_8:
          int num3 = 1764540564;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ 316013915)) % 3U)
            {
              case 0:
                goto label_8;
              case 1:
                JSONNode.\u206D⁪‪⁫‫⁫​‮‫‌⁪‬⁪⁫‮‪⁫‭‬⁪‌⁭‫‮‎⁪‬⁭⁮⁪​‏⁬‮​‮‌‏⁫‍‮((IDisposable) aData);
                num3 = (int) num4 * -1374121665 ^ 1632751680;
                continue;
              default:
                goto label_12;
            }
          }
        }
label_12:;
      }
    }

    public string SaveToBase64()
    {
      MemoryStream aData = JSONNode.\u206F‭‎​⁭⁮‌‍‭‮‌⁪‭‌‎⁯​⁬‍‬⁮⁭⁬‮⁯⁪⁫⁮⁮⁫⁯⁭‏‪⁫‬‍⁯‌⁪‮();
      string base64;
      try
      {
        this.SaveToStream((Stream) aData);
label_2:
        int num1 = 1397835423;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1007342860)) % 5U)
          {
            case 0:
              goto label_2;
            case 1:
              num1 = (int) num2 * 1362209199 ^ 2080719584;
              continue;
            case 2:
              base64 = JSONNode.\u200D⁯⁭‪‎⁭‌⁯‎‍⁭⁭⁫‬‫‌​​​⁭⁫⁮‪​​​⁯⁯‮⁫⁯‌‬‫‫‮‬‫‮‍‮(JSONNode.\u202C‪‭‫‫⁪‫⁪‫‮⁬‌‫⁭‎‏‭⁪‬‏⁬⁯‮⁯‪⁬​‎‭‬‭⁫⁫⁬‭‎‬​‏‬‮(aData));
              num1 = (int) num2 * 1351629429 ^ -2092434496;
              continue;
            case 4:
              JSONNode.\u202B⁯‏‍⁭⁯‬​⁬‮⁭⁬‌⁭‫⁭⁮‫‍‎‍‎⁬‮‎⁫‬​‏⁫‌‫‌‮‮‌‭‌⁬‎‮((Stream) aData, 0L);
              num1 = (int) num2 * -1739749079 ^ -596289048;
              continue;
            default:
              goto label_13;
          }
        }
      }
      finally
      {
        if (aData != null)
        {
label_8:
          int num3 = 1690692566;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ 1007342860)) % 4U)
            {
              case 0:
                goto label_8;
              case 1:
                num3 = (int) num4 * -1678317181 ^ 150024628;
                continue;
              case 2:
                JSONNode.\u206D⁪‪⁫‫⁫​‮‫‌⁪‬⁪⁫‮‪⁫‭‬⁪‌⁭‫‮‎⁪‬⁭⁮⁪​‏⁬‮​‮‌‏⁫‍‮((IDisposable) aData);
                num3 = (int) num4 * -813077950 ^ -429832799;
                continue;
              default:
                goto label_12;
            }
          }
        }
label_12:;
      }
label_13:
      return base64;
    }

    public static JSONNode Deserialize(BinaryReader aReader)
    {
label_1:
      int num1 = -1268589262;
      int num2;
      int num3;
      JSONNode jsonNode;
      int num4;
      JSONBinaryTag jsonBinaryTag1;
      int num5;
      JSONArray jsonArray;
      JSONNode aItem;
      JSONBinaryTag jsonBinaryTag2;
      JSONBinaryTag jsonBinaryTag3;
      bool flag;
      JSONClass jsonClass;
      string aKey;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1761721089)) % 38U)
        {
          case 0:
            ++num2;
            num1 = (int) num6 * 338086079 ^ -1533151343;
            continue;
          case 1:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u202B‍‬​‫⁯⁫‏​‎⁯‬‭⁫​⁬⁬⁪⁫‭⁯‌⁮⁮⁭​⁫‏‫⁪‪⁫‪⁪⁪⁮‌‫⁭⁫‮(aReader));
            num1 = (int) num6 * 797024044 ^ 832863588;
            continue;
          case 2:
            num2 = 0;
            num1 = (int) num6 * -1394338373 ^ -955066588;
            continue;
          case 3:
            num1 = (int) num6 * -2044036414 ^ 1447987964;
            continue;
          case 4:
            jsonBinaryTag3 = jsonBinaryTag2;
            num1 = (int) num6 * 43360544 ^ 1944987887;
            continue;
          case 5:
            aKey = JSONNode.\u206E⁭‎⁭‭‬‪‍⁪‌⁯‮‍‏⁮‏⁬⁯⁯‍​‪‭‍‎‬⁫​⁫‫‭‪⁫⁬⁬‬‮⁪⁯‍‮(aReader);
            num1 = -235667943;
            continue;
          case 6:
            int num7;
            num1 = num7 = num2 < num3 ? -1183031054 : (num7 = -454119104);
            continue;
          case 7:
            num1 = (int) num6 * -219952190 ^ 1537771147;
            continue;
          case 8:
            jsonArray.Add(JSONNode.Deserialize(aReader));
            num1 = -197881070;
            continue;
          case 10:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u200C⁯‏‮⁫‬‬‪⁬⁮‎​‏‭‌⁯‮⁭‫‫​‫‬⁯‬​‎⁪‏‫‌⁬⁮⁬⁭⁬⁯‮‪⁯‮(aReader));
            num1 = (int) num6 * -1498813692 ^ 744308518;
            continue;
          case 11:
            num1 = (int) num6 * 2120804182 ^ 1117838985;
            continue;
          case 12:
            jsonBinaryTag2 = jsonBinaryTag1;
            num1 = (int) num6 * 1706531828 ^ 175662165;
            continue;
          case 13:
label_33:
            num3 = JSONNode.\u202B‍‬​‫⁯⁫‏​‎⁯‬‭⁫​⁬⁬⁪⁫‭⁯‌⁮⁮⁭​⁫‏‫⁪‪⁫‪⁪⁪⁮‌‫⁭⁫‮(aReader);
            jsonClass = new JSONClass();
            num1 = -1897549543;
            continue;
          case 14:
            switch (jsonBinaryTag3)
            {
              case JSONBinaryTag.Array:
                goto label_9;
              case JSONBinaryTag.Class:
                goto label_33;
              case JSONBinaryTag.Value:
                goto label_27;
              case JSONBinaryTag.IntValue:
                goto label_19;
              case JSONBinaryTag.DoubleValue:
                goto label_12;
              case JSONBinaryTag.BoolValue:
                goto label_4;
              case JSONBinaryTag.FloatValue:
                goto label_38;
              default:
                num1 = (int) num6 * -37637701 ^ -485606413;
                continue;
            }
          case 15:
            num1 = (int) num6 * 1027960007 ^ 1450510876;
            continue;
          case 16:
            ++num4;
            num1 = (int) num6 * -379278544 ^ -1079747150;
            continue;
          case 17:
            jsonClass.Add(aKey, aItem);
            num1 = (int) num6 * 1209920776 ^ -1316661268;
            continue;
          case 18:
            int num8 = flag ? 421841333 : (num8 = 1181964917);
            num1 = num8 ^ (int) num6 * 710666402;
            continue;
          case 19:
label_9:
            num5 = JSONNode.\u202B‍‬​‫⁯⁫‏​‎⁯‬‭⁫​⁬⁬⁪⁫‭⁯‌⁮⁮⁭​⁫‏‫⁪‪⁫‪⁪⁪⁮‌‫⁭⁫‮(aReader);
            jsonArray = new JSONArray();
            num1 = -710354017;
            continue;
          case 20:
label_12:
            num1 = -1973862285;
            continue;
          case 21:
label_19:
            num1 = -68531798;
            continue;
          case 22:
            goto label_1;
          case 23:
label_27:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u206E⁭‎⁭‭‬‪‍⁪‌⁯‮‍‏⁮‏⁬⁯⁯‍​‪‭‍‎‬⁫​⁫‫‭‪⁫⁬⁬‬‮⁪⁯‍‮(aReader));
            num1 = -1173553270;
            continue;
          case 24:
            goto label_7;
          case 25:
            jsonNode = (JSONNode) jsonClass;
            num1 = (int) num6 * -1236748555 ^ -1302648923;
            continue;
          case 26:
            jsonNode = (JSONNode) jsonArray;
            num1 = (int) num6 * 183432224 ^ 1710905646;
            continue;
          case 27:
            num1 = (int) num6 * 1179600849 ^ -1399571239;
            continue;
          case 28:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u200F‎⁭‮⁬⁭‫⁫⁯‭⁫⁫⁮‍‪‎⁪‭‪‬‪​⁬⁯‏⁯‮⁭‮⁯‮⁭⁬⁮‪‫​⁪‬⁪‮(aReader));
            num1 = (int) num6 * -1271881570 ^ 1232839046;
            continue;
          case 29:
            num1 = (int) num6 * 1478212565 ^ 783338901;
            continue;
          case 30:
            aItem = JSONNode.Deserialize(aReader);
            num1 = (int) num6 * -1795260223 ^ 280357918;
            continue;
          case 31:
            num1 = (int) num6 * -1802507112 ^ 1572468502;
            continue;
          case 32:
            num4 = 0;
            num1 = (int) num6 * 1990991519 ^ -1411734894;
            continue;
          case 33:
            flag = num4 < num5;
            num1 = -1400858937;
            continue;
          case 34:
label_4:
            jsonNode = (JSONNode) new JSONData(JSONNode.\u206A⁯⁮‬‎⁭‮⁭‏‪‎⁬‏⁭‫​‌⁭‬‍‌⁭‫⁯⁬‪‌‌‬‭‫‌‌‌‏​​‫​‭‮(aReader));
            num1 = -1829511570;
            continue;
          case 35:
            jsonBinaryTag1 = (JSONBinaryTag) JSONNode.\u200F‎⁮⁪⁬⁬‭⁭‌⁫⁮‌‮‎⁪⁪​⁫‬‫‍‎⁭‎⁪​‏‬‭‍‏⁬⁪⁫‏‬‮‮⁫‮(aReader);
            num1 = (int) num6 * 2141684938 ^ -1600915187;
            continue;
          case 36:
            num1 = (int) num6 * 1234303509 ^ -1026014139;
            continue;
          case 37:
label_38:
            num1 = -1641010381;
            continue;
          default:
            goto label_40;
        }
      }
label_7:
      throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮(JSONNode.\u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮("Error deserializing JSON. Unknown tag: ", jsonBinaryTag1.ToString()));
label_40:
      return jsonNode;
    }

    public static JSONNode LoadFromCompressedFile(string aFileName) => throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public static JSONNode LoadFromCompressedStream(Stream aData) => throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public static JSONNode LoadFromCompressedBase64(string aBase64) => throw JSONNode.\u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮("Can't use compressed functions. You need include the SharpZipLib and uncomment the define at the top of SimpleJSON");

    public static JSONNode LoadFromStream(Stream aData)
    {
      BinaryReader aReader = JSONNode.\u206D⁬⁫‌‌⁪⁮‬‮‮‭‌‎‭‍‫‮⁬‪‏⁭‪‏‬‫⁯⁪⁯‬‏‏‭⁫‌⁬⁭⁫‏⁫⁪‮(aData);
      try
      {
        return JSONNode.Deserialize(aReader);
      }
      finally
      {
        if (aReader != null)
        {
label_3:
          int num1 = -1255574229;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1725334457)) % 3U)
            {
              case 0:
                goto label_3;
              case 2:
                JSONNode.\u206D⁪‪⁫‫⁫​‮‫‌⁪‬⁪⁫‮‪⁫‭‬⁪‌⁭‫‮‎⁪‬⁭⁮⁪​‏⁬‮​‮‌‏⁫‍‮((IDisposable) aReader);
                num1 = (int) num2 * 1812380877 ^ -1278397675;
                continue;
              default:
                goto label_6;
            }
          }
        }
label_6:;
      }
    }

    public static JSONNode LoadFromFile(string aFileName)
    {
      FileStream aData = JSONNode.\u206F‍‮‌‪‭​‫‬‍‍⁪​‍‪⁯⁯‏⁪‮‮‭‪‬​⁫⁫‍‏⁬‬‭‍​⁮‎​‏‭⁮‮(aFileName);
      JSONNode jsonNode;
      try
      {
label_2:
        int num1 = 734532713;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1800901294)) % 3U)
          {
            case 0:
              goto label_2;
            case 1:
              jsonNode = JSONNode.LoadFromStream((Stream) aData);
              num1 = (int) num2 * 971135844 ^ 13031464;
              continue;
            default:
              goto label_11;
          }
        }
      }
      finally
      {
        if (aData != null)
        {
label_6:
          int num3 = 378336159;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ 1800901294)) % 4U)
            {
              case 1:
                JSONNode.\u206D⁪‪⁫‫⁫​‮‫‌⁪‬⁪⁫‮‪⁫‭‬⁪‌⁭‫‮‎⁪‬⁭⁮⁪​‏⁬‮​‮‌‏⁫‍‮((IDisposable) aData);
                num3 = (int) num4 * 740888061 ^ -495626776;
                continue;
              case 2:
                goto label_6;
              case 3:
                num3 = (int) num4 * 847859137 ^ 1544985741;
                continue;
              default:
                goto label_10;
            }
          }
        }
label_10:;
      }
label_11:
      return jsonNode;
    }

    public static JSONNode LoadFromBase64(string aBase64)
    {
label_1:
      int num1 = 1555941622;
      MemoryStream aData;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 334105847)) % 6U)
        {
          case 0:
            JSONNode.\u202B⁯‏‍⁭⁯‬​⁬‮⁭⁬‌⁭‫⁭⁮‫‍‎‍‎⁬‮‎⁫‬​‏⁫‌‫‌‮‮‌‭‌⁬‎‮((Stream) aData, 0L);
            num1 = (int) num2 * 631058924 ^ -1243856510;
            continue;
          case 2:
            jsonNode = JSONNode.LoadFromStream((Stream) aData);
            num1 = (int) num2 * 2020879039 ^ 1740532760;
            continue;
          case 3:
            aData = JSONNode.\u200E‍‏‌‎‍​‏‭‏‫​​⁫⁪‫⁪‌⁬‪⁪⁫‭‍⁪⁬‎‮‭⁯⁯‮‮‭‭⁬​‏⁪‎‮(JSONNode.\u206E‍⁬⁯⁫‌‍⁫‫‬‌‎​​‎⁬‮⁮‍‬⁭​⁮‪⁬‍⁭⁭‍​⁫‎‍⁯‌⁮‌⁯‫⁮‮(aBase64));
            num1 = (int) num2 * 896507260 ^ 1194264631;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -203037798 ^ -599471423;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return jsonNode;
    }

    public JSONNode()
    {
label_1:
      int num1 = 33728498;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1297530290)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 603386416 ^ 715346745;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static CultureInfo \u206A‍‏⁪​⁪⁬‌‌‌⁪⁮⁮‌‫‮​‏‪⁫‌‪‍‬​⁮‪‏⁪‫‬⁬‮‎‍‪‫‎‏‭‮() => CultureInfo.InvariantCulture;

    static bool \u200B⁮​⁭‭‏‌‍‮‌‍⁫‌‎‏⁯⁯‌⁯‌‪⁯‎⁬⁭​‮‌‌‭‏‍‭⁫‮⁯‎⁮‬‭‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    int \u200D​‪⁮⁮⁭⁫‮⁮‬⁬‬‌‭‍​​⁪‫⁮⁮‬‮‮‮‪⁭​‬⁯⁭⁫‍⁪‏⁮⁯⁮‏⁭‮() => base.GetHashCode();

    static char \u200D‮⁫‬‮‎‌‮‎‮‍‍‍⁪‎‌⁯⁮‎‭‪‮‪‪‍​⁬‮‏‬⁬⁯⁮⁮‍‪‫‍⁪‭‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206B‪​⁬‬​⁯‭‏‏⁭‬⁯⁪⁯⁫‍‎​⁪​​⁭‌‏⁫⁫⁭​‌‮‮‭​⁬‌⁬‭⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206C‎⁬⁮‪‎⁬‭‍‌⁯⁬‭​‌‪‏​‌⁭⁯⁫‎‪‪⁯⁪‮⁫⁯‌⁯⁮‎​‫⁯‎⁬‎‮([In] string obj0) => obj0.Length;

    static string \u200D⁭​​‎⁮‪⁬‮‭‭⁭‍‪‮‮‫‭‍⁭⁯​⁮‍‭⁪⁮​‌⁯⁮‪‍⁪‬‏‍⁬‮⁫‮([In] string obj0) => obj0.Trim();

    static bool \u206E⁮⁬‍⁭‍⁪‍‍​‍‬⁫​‬​⁫‪⁮⁫⁫⁫‍⁬‫⁮‮​⁮‪‏⁮‬‍‬‬⁮‬‮‍‮([In] string obj0, [In] string obj1) => obj0 != obj1;

    static Exception \u200F​‮‫⁭⁬‮‍⁪⁪⁪‬‏‌‪‬⁬‪⁬‎⁯‌‌⁪⁫​⁪⁬⁫‮⁬‌⁫‌⁭⁪⁭‌‭‫‮([In] string obj0) => new Exception(obj0);

    static string \u206E‬‏‮‬‏⁮​⁮⁯‮​‌‎⁮‭‬⁮‮⁫⁯⁭‬​⁯⁯‍‍‬⁪⁫⁯​‭‌‮‬‏⁯⁯‮([In] string obj0, [In] int obj1, [In] int obj2) => obj0.Substring(obj1, obj2);

    static BinaryWriter \u202E⁮⁭⁬⁭⁪‌‎⁬‏‬‭‫⁯⁯​‪‫⁬⁯⁯⁮‎​⁫‭‪‍⁭‪‍⁯⁪‫‫⁯‫‎‭⁪‮([In] Stream obj0) => new BinaryWriter(obj0);

    static FileInfo \u200C‌‮⁭⁭⁪‏‪⁫‮⁫⁭⁬⁯‭⁪‪⁯‫⁬⁬‪‬‬⁯‏‪‍‪‮⁪⁪‪⁭⁪⁯‪⁯‮‬‮([In] string obj0) => new FileInfo(obj0);

    static DirectoryInfo \u202B⁭‭‬‎​‮⁭‎‏‮⁯‎⁭‫⁬‍⁮‪‬‮‏⁮⁬⁮‎‬‏‌‬​‫​⁫⁯⁬‮‌⁫⁮‮([In] FileInfo obj0) => obj0.Directory;

    static string \u202C⁯⁯‭⁪⁭‌‌‮⁭⁯‮‍⁫⁮‎⁪‬‍‫⁮‭‫‭​‍‌​⁪⁪‌⁮⁯⁪‮‎‎‪⁪⁪‮([In] FileSystemInfo obj0) => obj0.FullName;

    static DirectoryInfo \u202D‭‬⁮‍‎​‬‮​⁪⁫‪⁫⁬‍‭‍⁯‫‭⁯‏⁮‮‍‌‎‪‌‎‫⁮⁬‎​⁮​‎⁯‮([In] string obj0) => Directory.CreateDirectory(obj0);

    static FileStream \u202E⁮‎‏‫‌‮‎‫⁭⁪‌⁫‫‌⁬⁯⁯⁬​‭⁮‎⁮‬‎⁫​⁯⁪‍⁫‬​‌⁯⁭⁪‍⁪‮([In] string obj0) => File.OpenWrite(obj0);

    static void \u206D⁪‪⁫‫⁫​‮‫‌⁪‬⁪⁫‮‪⁫‭‬⁪‌⁭‫‮‎⁪‬⁭⁮⁪​‏⁬‮​‮‌‏⁫‍‮([In] IDisposable obj0) => obj0.Dispose();

    static MemoryStream \u206F‭‎​⁭⁮‌‍‭‮‌⁪‭‌‎⁯​⁬‍‬⁮⁭⁬‮⁯⁪⁫⁮⁮⁫⁯⁭‏‪⁫‬‍⁯‌⁪‮() => new MemoryStream();

    static void \u202B⁯‏‍⁭⁯‬​⁬‮⁭⁬‌⁭‫⁭⁮‫‍‎‍‎⁬‮‎⁫‬​‏⁫‌‫‌‮‮‌‭‌⁬‎‮([In] Stream obj0, [In] long obj1) => obj0.Position = obj1;

    static byte[] \u202C‪‭‫‫⁪‫⁪‫‮⁬‌‫⁭‎‏‭⁪‬‏⁬⁯‮⁯‪⁬​‎‭‬‭⁫⁫⁬‭‎‬​‏‬‮([In] MemoryStream obj0) => obj0.ToArray();

    static string \u200D⁯⁭‪‎⁭‌⁯‎‍⁭⁭⁫‬‫‌​​​⁭⁫⁮‪​​​⁯⁯‮⁫⁯‌‬‫‫‮‬‫‮‍‮([In] byte[] obj0) => Convert.ToBase64String(obj0);

    static byte \u200F‎⁮⁪⁬⁬‭⁭‌⁫⁮‌‮‎⁪⁪​⁫‬‫‍‎⁭‎⁪​‏‬‭‍‏⁬⁪⁫‏‬‮‮⁫‮([In] BinaryReader obj0) => obj0.ReadByte();

    static int \u202B‍‬​‫⁯⁫‏​‎⁯‬‭⁫​⁬⁬⁪⁫‭⁯‌⁮⁮⁭​⁫‏‫⁪‪⁫‪⁪⁪⁮‌‫⁭⁫‮([In] BinaryReader obj0) => obj0.ReadInt32();

    static string \u206E⁭‎⁭‭‬‪‍⁪‌⁯‮‍‏⁮‏⁬⁯⁯‍​‪‭‍‎‬⁫​⁫‫‭‪⁫⁬⁬‬‮⁪⁯‍‮([In] BinaryReader obj0) => obj0.ReadString();

    static double \u200C⁯‏‮⁫‬‬‪⁬⁮‎​‏‭‌⁯‮⁭‫‫​‫‬⁯‬​‎⁪‏‫‌⁬⁮⁬⁭⁬⁯‮‪⁯‮([In] BinaryReader obj0) => obj0.ReadDouble();

    static bool \u206A⁯⁮‬‎⁭‮⁭‏‪‎⁬‏⁭‫​‌⁭‬‍‌⁭‫⁯⁬‪‌‌‬‭‫‌‌‌‏​​‫​‭‮([In] BinaryReader obj0) => obj0.ReadBoolean();

    static float \u200F‎⁭‮⁬⁭‫⁫⁯‭⁫⁫⁮‍‪‎⁪‭‪‬‪​⁬⁯‏⁯‮⁭‮⁯‮⁭⁬⁮‪‫​⁪‬⁪‮([In] BinaryReader obj0) => obj0.ReadSingle();

    static BinaryReader \u206D⁬⁫‌‌⁪⁮‬‮‮‭‌‎‭‍‫‮⁬‪‏⁭‪‏‬‫⁯⁪⁯‬‏‏‭⁫‌⁬⁭⁫‏⁫⁪‮([In] Stream obj0) => new BinaryReader(obj0);

    static FileStream \u206F‍‮‌‪‭​‫‬‍‍⁪​‍‪⁯⁯‏⁪‮‮‭‪‬​⁫⁫‍‏⁬‬‭‍​⁮‎​‏‭⁮‮([In] string obj0) => File.OpenRead(obj0);

    static byte[] \u206E‍⁬⁯⁫‌‍⁫‫‬‌‎​​‎⁬‮⁮‍‬⁭​⁮‪⁬‍⁭⁭‍​⁫‎‍⁯‌⁮‌⁯‫⁮‮([In] string obj0) => Convert.FromBase64String(obj0);

    static MemoryStream \u200E‍‏‌‎‍​‏‭‏‫​​⁫⁪‫⁪‌⁬‪⁪⁫‭‍⁪⁬‎‮‭⁯⁯‮‮‭‭⁬​‏⁪‎‮([In] byte[] obj0) => new MemoryStream(obj0);
  }
}
