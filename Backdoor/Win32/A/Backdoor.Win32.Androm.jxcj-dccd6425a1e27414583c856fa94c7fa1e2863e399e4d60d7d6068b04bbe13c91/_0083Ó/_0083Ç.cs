// Decompiled with JetBrains decompiler
// Type: Ó.Ç
// Assembly: WindowsApplication1, Version=8.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: ED46BCEB-CED4-40B1-868F-E45B7BFC7B90
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.Androm.jxcj-dccd6425a1e27414583c856fa94c7fa1e2863e399e4d60d7d6068b04bbe13c91.exe

using \u0083Ó;
using System;
using System.Runtime.Serialization;
using System.Security;

namespace \u0083Ó
{
  [Serializable]
  internal class \u0083Ç : \u0083Ì
  {
    private const string \u008F = null;
    private Exception \u0082ó;

    protected \u0083Ç(SerializationInfo info, StreamingContext context)
      : base(info, context)
    {
      this.\u0086 = (Exception) info.GetValue("NestedException", typeof (Exception));
    }

    public \u0083Ç(string message, Exception innerException, Exception nestedException)
      : base(message, innerException)
    {
      this.\u0086 = nestedException;
    }

    public Exception \u0086
    {
      get => this.\u0082ó;
      set => this.\u0082ó = value;
    }

    public override string ToString()
    {
      string str1 = this.InnerException == null ? string.Empty : this.InnerException.ToString();
      string str2 = this.\u0086 == null ? string.Empty : this.\u0086.ToString();
      object[] objArray = new object[4]
      {
        (object) this.GetType(),
        null,
        null,
        null
      };
      string str3 = this.Message == null ? string.Empty : this.Message;
      objArray[1] = (object) str3;
      string str4 = str1 == null ? string.Empty : str1;
      objArray[2] = (object) str4;
      string str5 = str2 == null ? string.Empty : str2;
      objArray[3] = (object) str5;
      return string.Format("\n{0}: {1}\n--- Start of primary exception ---\n{2}\n--- End of primary exception ---\n\n--- Start of nested exception ---\n{3}\n--- End of nested exception ---\n", objArray);
    }

    [SecurityCritical]
    public override void GetObjectData(SerializationInfo info, StreamingContext context)
    {
      base.GetObjectData(info, context);
      info.AddValue("NestedException", (object) this.\u0086, typeof (Exception));
    }
  }
}
