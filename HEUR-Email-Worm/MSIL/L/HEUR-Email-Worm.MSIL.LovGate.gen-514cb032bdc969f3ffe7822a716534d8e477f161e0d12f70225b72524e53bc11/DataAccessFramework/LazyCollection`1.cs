// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.LazyCollection`1
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System;
using System.Collections;
using System.Collections.Generic;

namespace DataAccessFramework
{
  [Serializable]
  public class LazyCollection<T> : ICollection<T>, IEnumerable<T>, IEnumerable
  {
    [NonSerialized]
    private IEnumerable<T> _enumerable;
    private System.Collections.Generic.List<T> _list;

    public LazyCollection(IEnumerable<T> enumerable)
    {
label_1:
      int num1 = -1726770777;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -183845532)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -1843490312 ^ -1217864067;
            continue;
          case 3:
            num1 = (int) num2 * 1186321666 ^ 1990362528;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this._enumerable = enumerable;
    }

    private System.Collections.Generic.List<T> List
    {
      get
      {
label_1:
        int num1 = -803029584;
        System.Collections.Generic.List<T> list;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -193965678)) % 4U)
          {
            case 1:
              num1 = (int) num2 * -664186121 ^ -452076447;
              continue;
            case 2:
              list = this._list ?? (this._list = new System.Collections.Generic.List<T>(this._enumerable));
              num1 = -214183549;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return list;
      }
    }

    public IEnumerator<T> GetEnumerator()
    {
label_1:
      int num1 = -1840069609;
      IEnumerator<T> enumerator;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -14992468)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1829385939 ^ -1484398937;
            continue;
          case 3:
            enumerator = (IEnumerator<T>) this.List.GetEnumerator();
            num1 = (int) num2 * 1533868802 ^ 1667532747;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return enumerator;
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      IEnumerator enumerator = (IEnumerator) this.GetEnumerator();
label_1:
      int num1 = -1486119034;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1102771496)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -1286777535 ^ 1771110410;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return enumerator;
    }

    public void Add(T item)
    {
label_1:
      int num1 = -989515124;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -834856193)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1696268830 ^ -814918142;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            this.List.Add(item);
            num1 = (int) num2 * -981881487 ^ 1881220276;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void Clear()
    {
label_1:
      int num1 = 229704491;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 890861906)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1130655005 ^ 1172880249;
            continue;
          case 1:
            this.List.Clear();
            num1 = (int) num2 * -634430000 ^ -1322175794;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public bool Contains(T item)
    {
      bool flag = this.List.Contains(item);
label_1:
      int num1 = 236351286;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1499773043)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -673993838 ^ -666723117;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public void CopyTo(T[] array, int arrayIndex)
    {
      this.List.CopyTo(array, arrayIndex);
label_1:
      int num1 = 727129075;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 999926293)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1118811380 ^ 1184275028;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public bool Remove(T item)
    {
      bool flag = this.List.Remove(item);
label_1:
      int num1 = -1162794261;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -824946297)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -888240012 ^ -858011842;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public int Count
    {
      get
      {
label_1:
        int num1 = -1646156453;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1081680970)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              count = this.List.Count;
              num1 = (int) num2 * -146446138 ^ 927418696;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public bool IsReadOnly
    {
      get
      {
label_1:
        int num1 = 1118746768;
        bool isReadOnly;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 185746717)) % 4U)
          {
            case 1:
              isReadOnly = false;
              num1 = (int) num2 * 1602561043 ^ 188137433;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 1264611749 ^ -439206606;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return isReadOnly;
      }
    }
  }
}
