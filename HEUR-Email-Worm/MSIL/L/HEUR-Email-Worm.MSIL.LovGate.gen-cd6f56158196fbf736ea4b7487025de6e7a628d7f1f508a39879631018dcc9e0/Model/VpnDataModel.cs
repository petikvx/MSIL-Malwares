// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.Model.VpnDataModel
// Assembly: CompilerMarshalOverr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 887C44A2-E14E-47D6-B77E-29DEF9E8CB8C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-cd6f56158196fbf736ea4b7487025de6e7a628d7f1f508a39879631018dcc9e0.exe

using System;
using System.ComponentModel;

namespace CiscoAnyconnectControl.Model
{
  [Serializable]
  public class VpnDataModel : INotifyPropertyChanged
  {
    private string _username = "username";
    private string _address = "vpn.example.com";
    private string _password = "";
    private string _group = (string) null;
    private int _groupId = 0;

    public string Address
    {
      get => this._address;
      set
      {
        if (this._address == value)
          return;
        this._address = value;
        this.OnPropertyChanged();
      }
    }

    public string Username
    {
      get => this._username;
      set
      {
        if (this._username == value)
          return;
        this._username = value;
        this.OnPropertyChanged();
      }
    }

    public string Password
    {
      get => this._password;
      set
      {
        if (this._password == value)
          return;
        this._password = value;
        this.OnPropertyChanged();
      }
    }

    public string Group
    {
      get => this._group;
      set
      {
        if (this._group == value)
          return;
        this._group = value;
        this.OnPropertyChanged();
      }
    }

    public int GroupId
    {
      get => this._groupId;
      set
      {
        if (this._groupId == value)
          return;
        this._groupId = value;
        this.OnPropertyChanged();
      }
    }

    [field: NonSerialized]
    public event PropertyChangedEventHandler PropertyChanged;

    [NotifyPropertyChangedInvocator]
    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
      if (propertyChanged == null)
        return;
      propertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }
  }
}
