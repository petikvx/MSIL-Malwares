// Decompiled with JetBrains decompiler
// Type: LTSvcMon.LTSvcMon
// Assembly: LTSvcMon, Version=40.101.4107.19874, Culture=neutral, PublicKeyToken=null
// MVID: 816B70F7-DB44-4BCA-BD08-988C39A8AB45
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Patched.mf-f4d248fac8113c5e0ed835350bfdc060077775705ca69e00ce08a4a7e4643090.exe

using LTSvcMon.LTWinAPI;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Web;

namespace LTSvcMon
{
  public class LTSvcMon : ServiceBase
  {
    private IContainer components;
    public int FailCount;
    public int VersionCount;
    public ServiceController LTSvc;
    public DateTime VersionCheck;
    internal Thread ProcThread;
    internal bool NormalExit;

    public LTSvcMon()
    {
      this.FailCount = 0;
      this.VersionCount = 0;
      this.VersionCheck = DateAndTime.Now.AddHours(-11.0);
      this.NormalExit = false;
      this.InitializeComponent();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    [MTAThread]
    public static void Main()
    {
      if (Debugger.IsAttached)
        new LTSvcMon.LTSvcMon().OnStart(new string[1]
        {
          ""
        });
      ServiceBase.Run(new ServiceBase[1]
      {
        (ServiceBase) new LTSvcMon.LTSvcMon()
      });
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.AutoLog = false;
      this.ServiceName = nameof (LTSvcMon);
    }

    public void UnhandledExceptionEventHandler(object sender, UnhandledExceptionEventArgs e) => LogError.LogEvent("Observed unhandled exception: " + ((Exception) e.ExceptionObject).ToString());

    protected override void OnStart(string[] args)
    {
      if (!Settings.LoadSettings())
        return;
      LogError.LogEvent("Loaded Settings ");
      this.LTSvc = new ServiceController("LTService");
      if (this.LTSvc != null)
      {
        this.ProcThread = new Thread(new ThreadStart(this.MonitorCheckLoop));
        this.ProcThread.Priority = ThreadPriority.Lowest;
        this.ProcThread.Start();
      }
      this.SetWorkingSet((IntPtr) 750000, (IntPtr) 300000);
    }

    protected override void OnStop()
    {
      this.NormalExit = true;
      Thread.Sleep(1000);
      try
      {
        this.ProcThread.Abort();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(1000);
      this.LTSvc.Close();
      this.LTSvc.Dispose();
      LogError.LogEvent("ShutDown Complete");
    }

    public void SetWorkingSet(IntPtr lnMaxSize, IntPtr lnMinSize)
    {
      try
      {
        Process currentProcess = Process.GetCurrentProcess();
        currentProcess.MaxWorkingSet = lnMaxSize;
        currentProcess.MinWorkingSet = lnMinSize;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void MonitorCheckLoop()
    {
      try
      {
        AppDomain.CurrentDomain.UnhandledException += new System.UnhandledExceptionEventHandler(this.UnhandledExceptionEventHandler);
        try
        {
          ServicePointManager.CertificatePolicy = (ICertificatePolicy) new Settings.MyPolicy();
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
          ServicePointManager.DefaultConnectionLimit = 10;
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.UseNagleAlgorithm = false;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        string str = "";
        int num1 = 1;
        int num2 = 1;
        do
        {
          Thread.Sleep(1000);
          ++num2;
        }
        while (num2 <= 1200);
        while (!this.NormalExit)
        {
          int num3 = 1;
          do
          {
            Thread.Sleep(60);
            ++num3;
          }
          while (num3 <= 1000);
          try
          {
            if (num1 % 5 == 0)
            {
              Process[] processesByName = Process.GetProcessesByName("explorer");
              if (processesByName.Length < 4)
              {
                foreach (Process process1 in processesByName)
                {
                  bool flag = false;
                  string processUserName = ProcessAsUser.GetProcessUserName(process1.Id);
                  if (Operators.CompareString(processUserName, "", false) != 0)
                  {
                    foreach (Process process2 in Process.GetProcessesByName("lttray"))
                    {
                      if (Operators.CompareString(processUserName, ProcessAsUser.GetProcessUserName(process2.Id), false) == 0)
                      {
                        flag = true;
                        break;
                      }
                    }
                    if (!flag)
                      ProcessAsUser.Launch(Environment.ExpandEnvironmentVariables("%WINDIR%\\LTSVC\\LTTray.exe"), process1.Id);
                  }
                }
              }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            this.LTSvc.Refresh();
            if (this.LTSvc.Status != ServiceControllerStatus.Running)
            {
              this.LTSvc.Start();
              LogError.LogEvent("Starting Agent Service");
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          if (num1 > 45)
          {
            try
            {
              try
              {
                foreach (Process process3 in Process.GetProcessesByName("explorer"))
                {
                  bool flag = false;
                  string processUserName = ProcessAsUser.GetProcessUserName(process3.Id);
                  if (Operators.CompareString(processUserName, "", false) != 0)
                  {
                    foreach (Process process4 in Process.GetProcessesByName("lttray"))
                    {
                      if (Operators.CompareString(processUserName, ProcessAsUser.GetProcessUserName(process4.Id), false) == 0)
                      {
                        flag = true;
                        break;
                      }
                    }
                    if (!flag)
                      ProcessAsUser.Launch(Environment.ExpandEnvironmentVariables("%WINDIR%\\LTSVC\\LTTray.exe"), process3.Id);
                  }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              this.LTSvc.Refresh();
              this.LTSvc.Refresh();
              if (this.LTSvc.Status == ServiceControllerStatus.Running)
              {
                try
                {
                  if (System.IO.File.Exists(Environment.ExpandEnvironmentVariables("%Windir%\\LTSvc\\LTErrors.txt")))
                  {
                    str = Conversions.ToString(System.IO.File.GetLastWriteTime(Environment.ExpandEnvironmentVariables("%Windir%\\LTSvc\\LTErrors.txt")));
                    DateTime date1 = Conversions.ToDate(str);
                    DateTime now = DateAndTime.Now;
                    DateTime t2_1 = now.AddDays(-90.0);
                    if (DateTime.Compare(date1, t2_1) < 0)
                    {
                      this.FailCount = 4;
                    }
                    else
                    {
                      DateTime date2 = Conversions.ToDate(str);
                      now = DateAndTime.Now;
                      DateTime t2_2 = now.AddMinutes(-60.0);
                      if (DateTime.Compare(date2, t2_2) > 0)
                        this.FailCount = 0;
                      else
                        ++this.FailCount;
                    }
                  }
                  else
                    this.FailCount = 0;
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  this.FailCount = 0;
                  ProjectData.ClearProjectError();
                }
              }
              else if (this.LTSvc.Status == ServiceControllerStatus.StartPending)
                this.FailCount = 0;
              else
                ++this.FailCount;
              try
              {
                if (DateTime.Compare(this.VersionCheck, DateAndTime.Now.AddHours(-12.0)) < 0)
                {
                  try
                  {
                    if (System.IO.File.Exists(Environment.ExpandEnvironmentVariables("%windir%\\LTSvc\\ltsvc.exe")))
                    {
                      FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(Environment.ExpandEnvironmentVariables("%windir%\\LTSvc\\ltsvc.exe"));
                      int fileMinorPart = versionInfo.FileMinorPart;
                      Version version = this.CurrentVersion();
                      if (version.Major > versionInfo.FileMajorPart || version.Minor > versionInfo.FileMinorPart)
                      {
                        if (this.VersionCount > 1)
                        {
                          try
                          {
                            this.UpdateLabTech(Conversions.ToString(version.Major) + "." + Conversions.ToString(version.Minor));
                          }
                          catch (Exception ex)
                          {
                            ProjectData.SetProjectError(ex);
                            ProjectData.ClearProjectError();
                          }
                          this.VersionCheck = DateAndTime.Now;
                          this.VersionCount = 1;
                          this.FailCount = 0;
                        }
                        else
                        {
                          this.FailCount = 0;
                          this.VersionCount = 2;
                        }
                      }
                      else
                        this.VersionCheck = DateAndTime.Now;
                    }
                    else
                      this.FailCount = 4;
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    LogError.LogEvent(ex.Message);
                    ProjectData.ClearProjectError();
                  }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                this.FailCount = 0;
                ProjectData.ClearProjectError();
              }
              switch (this.FailCount)
              {
                case 1:
                  LogError.LogEvent("Restarting Service " + str.ToString());
                  try
                  {
                    this.LTSvc.Stop();
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                  while (this.LTSvc.Status != ServiceControllerStatus.Stopped)
                  {
                    Thread.Sleep(1000);
                    this.LTSvc.Refresh();
                  }
                  try
                  {
                    this.KillProcess("lttray");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                  try
                  {
                    this.LTSvc.Start();
                    break;
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                    break;
                  }
                case 2:
                  LogError.LogEvent("Restarting Service and changing login name " + str);
                  try
                  {
                    RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\LTService", true);
                    if (registryKey == null)
                      return;
                    registryKey.SetValue("ObjectName", (object) "LocalSystem");
                    registryKey.SetValue("Start", (object) 2);
                    registryKey.Flush();
                    registryKey.Close();
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                  System.IO.File.Delete(Environment.ExpandEnvironmentVariables("%WINDIR%\\LTsvc\\LTSVC.exe.config"));
                  try
                  {
                    this.LTSvc.Start();
                    break;
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                    break;
                  }
                case 3:
                  LogError.LogEvent("Restarting Service and deleteing files " + str);
                  try
                  {
                    this.LTSvc.Stop();
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                  this.KillProcess("labvnc");
                  this.KillProcess("ltsvc");
                  this.KillProcess("lttray");
                  Settings.ExtractFile("LTSVC.exe.config", "%WINDIR%\\LTsvc\\");
                  Settings.ExtractFile("LTSvcMon.exe.config", "%WINDIR%\\LTsvc\\");
                  foreach (string file in Directory.GetFiles(Environment.ExpandEnvironmentVariables("%windir%\\LTSvc\\")))
                  {
                    if (file.ToLower().IndexOf("ltsvcmon.exe") == -1 & file.ToLower().IndexOf("ltsvc.exe") == -1 & file.ToLower().IndexOf("ltsvcmon.exe") == -1)
                    {
                      try
                      {
                        System.IO.File.Delete(file);
                      }
                      catch (Exception ex)
                      {
                        ProjectData.SetProjectError(ex);
                        ProjectData.ClearProjectError();
                      }
                    }
                  }
                  try
                  {
                    this.LTSvc.Start();
                    break;
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                    break;
                  }
                case 4:
                  LogError.LogEvent("Restarting Service and Downloading new copy " + str);
                  Version version1 = this.CurrentVersion();
                  this.UpdateLabTech(Conversions.ToString(version1.Major) + "." + Conversions.ToString(version1.Minor));
                  break;
                case 5:
                  LogError.LogEvent("Giving Up, service hopeless, sending support ticket.  " + str);
                  AgentCommunications.SendReport("10," + HttpUtility.UrlEncode("Service Monitor") + "," + HttpUtility.UrlEncode("Service Monitor Not Functioning on ID: " + Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.ID])) + "," + HttpUtility.UrlEncode("The labtech service monitor will not start and needs your attention, The system will automatically update to newer versions that might fix this in the future."));
                  this.VersionCount = 2;
                  break;
                case 20000:
                  this.FailCount = 3;
                  break;
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              Exception exception = ex;
              this.FailCount = 0;
              LogError.LogEvent(exception.Message);
              ProjectData.ClearProjectError();
            }
            this.SetWorkingSet((IntPtr) 750000, (IntPtr) 300000);
            num1 = 1;
          }
          ++num1;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        LogError.LogEvent("Main " + ex.Message);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void UpdateLabTech(string Version)
    {
      LogError.LogEvent("Agent Service older version, updating");
      try
      {
        FileSystem.Kill(Path.GetTempPath() + "_LTUPDATE\\*.*");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Directory.CreateDirectory(Path.GetTempPath() + "_LTUPDATE");
        if (Operators.CompareString(AgentCommunications.GetFile("/Updates/LabtechUpdate_" + Version + ".zip", Path.GetTempPath() + "_LTUPDATE\\LabtechUpdate.exe"), "OK", false) != 0)
          return;
        FileSystem.ChDir(Path.GetTempPath() + "_LTUPDATE");
        Interaction.Shell(Path.GetTempPath() + "_LTUPDATE\\LabtechUpdate.exe /o\"" + Path.GetTempPath() + "_LTUPDATE\" /y", AppWinStyle.Hide, true);
        this.KillProcess("update");
        Interaction.Shell(Path.GetTempPath() + "_LTUPDATE\\Update.exe \"" + Path.GetTempPath() + "_LTUPDATE\\Update.ini\"", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    internal Version CurrentVersion()
    {
      Version version;
      try
      {
        NameValueCollection values = new NameValueCollection();
        string[] strArray = Strings.Split(Strings.Split(AgentCommunications.SendInfo(1, ref values), "|||")[2], ".");
        version = new Version(Conversions.ToInteger(strArray[0]), Conversions.ToInteger(strArray[1]), 0);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        version = new Version(0, 0, 0);
        ProjectData.ClearProjectError();
      }
      return version;
    }

    internal bool KillProcess(string ProcessName)
    {
      try
      {
        foreach (Process process in Process.GetProcessesByName(ProcessName.ToLower()))
        {
          if (!process.CloseMainWindow())
            process.Kill();
        }
        foreach (Process process in Process.GetProcessesByName(ProcessName))
          process.Kill();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      bool flag;
      return flag;
    }

    internal void SendMail(IPAddress IP, int port, string message, ref int ErrorLevel = 0)
    {
      int num1 = 1;
      try
      {
        UdpClient udpClient = new UdpClient();
        udpClient.Connect(IP, port);
        int num2 = num1 + 1;
        cSecurity cSecurity = new cSecurity("Thank you for using LabTech.");
        byte[] bytes = Encoding.GetEncoding(1252).GetBytes("0420" + cSecurity.PSEncrypt(message + "444444444422222222220000000000"));
        int num3 = num2 + 1;
        udpClient.Send(bytes, bytes.Length);
        int num4 = num3 + 1;
        udpClient.Close();
        ErrorLevel = 0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    protected override void OnShutdown() => this.ProcThread.Abort();
  }
}
