// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.Options
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using Microsoft.Tools.ServiceModel.SvcUtil;
using System;
using System.Collections.Generic;
using System.ServiceModel.Description;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class Options
  {
    private bool allComponents;
    private string application;
    private bool help;
    private Hosting hosting;
    private IList<ComponentDefinition<string>> components;
    private Mode mode;
    private bool noLogo;
    private bool verbose;
    private string webDirectory;
    private string webServer;
    private bool showGuids;
    private bool allowReferences;
    private bool mex;
    private string mexOnlyComponent = string.Empty;
    private static CommandSwitch[] switches = new CommandSwitch[15]
    {
      new CommandSwitch(nameof (application), "a", SwitchType.SingletonValue),
      new CommandSwitch(nameof (help), "?", SwitchType.Flag),
      new CommandSwitch(nameof (hosting), "h", SwitchType.SingletonValue),
      new CommandSwitch("contract", "c", SwitchType.SingletonValue),
      new CommandSwitch(nameof (mode), "m", SwitchType.SingletonValue),
      new CommandSwitch("nologo", "n", SwitchType.Flag),
      new CommandSwitch(nameof (verbose), "v", SwitchType.Flag),
      new CommandSwitch(nameof (webDirectory), "d", SwitchType.SingletonValue),
      new CommandSwitch("webSite", "w", SwitchType.SingletonValue),
      new CommandSwitch("id", "k", SwitchType.Flag),
      new CommandSwitch(nameof (mex), "x", SwitchType.Flag),
      new CommandSwitch("install", "i", SwitchType.Flag),
      new CommandSwitch("uninstall", "u", SwitchType.Flag),
      new CommandSwitch("list", "l", SwitchType.Flag),
      new CommandSwitch("allowreferences", "r", SwitchType.Flag)
    };

    internal bool AllComponents => this.allComponents;

    internal string Application => this.application;

    internal IList<ComponentDefinition<string>> Components => this.components;

    internal bool Help => this.help;

    internal Hosting Hosting => this.hosting;

    internal Mode Mode => this.mode;

    internal bool NoLogo => this.noLogo;

    internal bool Verbose => this.verbose;

    internal string WebDirectory => this.webDirectory;

    internal string WebServer => this.webServer;

    internal bool ShowGuids => this.showGuids;

    internal bool AllowReferences => this.allowReferences;

    internal bool Mex => this.mex;

    internal string MexOnlyComponent => this.mexOnlyComponent;

    private Options(Mode mode, ArgumentDictionary arguments)
    {
      if (arguments == null)
      {
        this.help = true;
      }
      else
      {
        this.mode = mode;
        if (arguments.ContainsArgument(nameof (application)))
          this.application = arguments.GetArgument(nameof (application));
        this.help = arguments.ContainsArgument(nameof (help));
        this.hosting = Hosting.NotSpecified;
        if (arguments.ContainsArgument(nameof (hosting)))
        {
          string a = arguments.GetArgument(nameof (hosting));
          if (string.Equals(a, Enum.GetName(typeof (Hosting), (object) Hosting.Complus), StringComparison.OrdinalIgnoreCase))
            this.hosting = Hosting.Complus;
          else if (string.Equals(a, Enum.GetName(typeof (Hosting), (object) Hosting.Was), StringComparison.OrdinalIgnoreCase))
          {
            if (WasAdminWrapper.IsIISInstalled())
              this.hosting = Hosting.Was;
            else
              throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("IISNotInstalled", (object) a), (Exception) null);
          }
          else
            throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("UnknownHostingSpecified", (object) a), (Exception) null);
        }
        this.mex = arguments.ContainsArgument(nameof (mex));
        this.components = (IList<ComponentDefinition<string>>) null;
        this.allComponents = false;
        if (arguments.ContainsArgument("contract"))
          this.ParseInterfaces(arguments.GetArguments("contract"));
        this.noLogo = arguments.ContainsArgument("nologo");
        if (this.noLogo && arguments.Count == 1)
          this.help = true;
        this.verbose = arguments.ContainsArgument(nameof (verbose));
        if (arguments.ContainsArgument(nameof (webDirectory)))
          this.webDirectory = arguments.GetArgument(nameof (webDirectory));
        if (arguments.ContainsArgument("webSite"))
          this.webServer = arguments.GetArgument("webSite");
        this.showGuids = arguments.ContainsArgument("id");
        this.allowReferences = arguments.ContainsArgument("allowreferences");
      }
    }

    internal static Options ParseArguments(string[] args)
    {
      Mode mode = Mode.NotSpecified;
      if (args.Length <= 0)
        return new Options(mode, (ArgumentDictionary) null);
      ArgumentDictionary command = CommandParser.ParseCommand(args, Options.switches);
      if (command.ContainsArgument("install"))
        mode = Mode.Install;
      if (command.ContainsArgument("uninstall"))
        mode = mode == Mode.NotSpecified ? Mode.Uninstall : throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("MultipleModeArguments"), (Exception) null);
      if (command.ContainsArgument("list"))
        mode = mode == Mode.NotSpecified ? Mode.List : throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("MultipleModeArguments"), (Exception) null);
      Options arguments = new Options(mode, command);
      if (!arguments.Help && mode == Mode.NotSpecified)
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("ModeArgumentMissing"), (Exception) null);
      return arguments;
    }

    private void ParseInterfaces(IList<string> argValues)
    {
      this.components = (IList<ComponentDefinition<string>>) null;
      this.allComponents = false;
      if (argValues.Count == 1 && argValues[0] == "*")
      {
        this.allComponents = true;
      }
      else
      {
        Dictionary<string, ComponentDefinition<string>> dictionary = new Dictionary<string, ComponentDefinition<string>>();
        foreach (string argValue in (IEnumerable<string>) argValues)
        {
          string str1 = (string) null;
          string itf1 = (string) null;
          ComponentDefinition<string> componentDefinition = (ComponentDefinition<string>) null;
          if (argValue.Contains(","))
          {
            string[] strArray = argValue.Split(new char[1]
            {
              ','
            }, 2);
            str1 = strArray[0];
            itf1 = strArray[1];
          }
          else
          {
            if (!this.mex)
              throw Tool.CreateArgumentException("contract", argValue, Microsoft.Tools.ServiceModel.SR.GetString("MalformedInterfaceString"), (Exception) null);
            if (this.mex)
            {
              str1 = argValue;
              itf1 = typeof (IMetadataExchange).GUID.ToString("B");
              if (string.Empty == this.mexOnlyComponent)
                this.mexOnlyComponent = argValue;
            }
          }
          if (str1.Equals("*"))
            throw Tool.CreateArgumentException("contract", argValue, Microsoft.Tools.ServiceModel.SR.GetString("CannotSpecifyInterfaceForAllComponents"), (Exception) null);
          if (!dictionary.TryGetValue(str1, out componentDefinition))
          {
            componentDefinition = new ComponentDefinition<string>(str1);
            dictionary.Add(str1, componentDefinition);
          }
          if (itf1.Equals("*"))
          {
            componentDefinition.SetAllInterfaces();
          }
          else
          {
            string[] strArray1 = itf1.Split(new char[1]
            {
              '.'
            }, 2);
            if (strArray1.Length == 1)
            {
              componentDefinition.AddInterface(itf1, (List<string>) null);
            }
            else
            {
              string itf2 = strArray1[0];
              string str2 = strArray1[1];
              if (str2 == "*")
              {
                componentDefinition.AddInterface(itf2, (List<string>) null);
              }
              else
              {
                string[] strArray2 = str2[0] == '{' || str2[str2.Length - 1] == '}' ? str2.Substring(1, str2.Length - 2).Split(',') : throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("BadMethodParameter", (object) argValue), (Exception) null);
                if (strArray2.Length == 0)
                  throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("NoMethodsSpecifiedInArgument", (object) argValue), (Exception) null);
                List<string> methods = new List<string>();
                foreach (string str3 in strArray2)
                  methods.Add(str3);
                componentDefinition.AddInterface(itf2, methods);
              }
            }
          }
        }
        this.components = (IList<ComponentDefinition<string>>) new List<ComponentDefinition<string>>(dictionary.Count);
        foreach (ComponentDefinition<string> componentDefinition in dictionary.Values)
          this.components.Add(componentDefinition);
      }
    }
  }
}
