// Decompiled with JetBrains decompiler
// Type: ProjNet.Templates.ExporterTemplate
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Collections;
using IRefl.Producers;
using ProjNet.Common;
using ProjNet.Maps;
using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.Templates
{
  public class ExporterTemplate : Rule, Page, CodeObjectProducer
  {
    private double m_Predicate;
    private double m_Property;
    private double m_Parser;
    private TagStatusService _Interpreter;
    private bool configuration;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal ExporterTemplate(
      double v,
      double counter,
      double pool,
      bool acceptt2,
      TagStatusService item3,
      string result4,
      string t5,
      long previous_visitor6,
      string v7,
      string cont8,
      string key9)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
label_16:
              this.m_Property = (1.0 - 1.0 / this.m_Parser) * v;
              num2 = 7;
              continue;
            case 1:
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector(result4, t5, previous_visitor6, v7, cont8, key9);
              num2 = 2;
              continue;
            case 2:
              this.m_Predicate = v;
              this.m_Parser = pool;
              this._Interpreter = item3;
              this.configuration = acceptt2;
              if (!acceptt2)
              {
                num3 = 0;
                break;
              }
              if (pool == 0.0)
              {
                num3 = 1;
                break;
              }
              goto label_15;
            case 3:
            case 5:
              num3 = double.IsInfinity(pool) ? 1 : 0;
              break;
            case 6:
              goto label_18;
            case 7:
              goto label_11;
            case 8:
              goto label_7;
            default:
              goto label_10;
          }
          if (num3 == 0)
          {
            if (!acceptt2)
            {
              this.m_Property = counter;
              int num4 = 8;
              num2 = ExporterTemplate.InsertList() ? num4 : num4;
            }
            else
              goto label_16;
          }
          else
            goto label_5;
        }
label_10:
        num1 = 0;
        continue;
label_15:
        num1 = 5;
        continue;
label_18:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 4;
      }
label_5:
      this.m_Property = v;
      return;
label_7:
      return;
label_11:;
    }

    public static ExporterTemplate WGS84
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new ExporterTemplate(6378137.0, 0.0, 298.257223563, true, AdvisorStatusMap.ViewRegistry(), "WGS 84", "EPSG", 7030L, nameof (WGS84), "", "Inverse flattening derived from four defining parameters (semi-major axis; C20 = -484.16685*10e-6; earth's angular velocity w = 7292115e11 rad/sec; gravitational constant GM = 3986005e8 m*m*m/s/s).");
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExporterTemplate TestProcess() => new ExporterTemplate(6378135.0, 0.0, 298.26, true, AdvisorStatusMap.ViewRegistry(), "WGS 72", "EPSG", 7043L, "WGS 72", string.Empty, string.Empty);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExporterTemplate InterruptProcess() => new ExporterTemplate(6378137.0, 0.0, 298.257222101, true, AdvisorStatusMap.ViewRegistry(), "GRS 1980", "EPSG", 7019L, "International 1979", "", "Adopted by IUGG 1979 Canberra.  Inverse flattening is derived from geocentric gravitational constant GM = 3986005e8 m*m*m/s/s; dynamic form factor J2 = 108263e8 and Earth's angular velocity = 7292115e-11 rad/s.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExporterTemplate AssetRegistry() => new ExporterTemplate(6378388.0, 0.0, 297.0, true, AdvisorStatusMap.ViewRegistry(), "International 1924", "EPSG", 7022L, "Hayford 1909", string.Empty, "Described as a=6378388 m. and b=6356909 m. from which 1/f derived to be 296.95926. The figure was adopted as the International ellipsoid in 1924 but with 1/f taken as 297 exactly from which b is derived as 6356911.946m.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExporterTemplate InsertRegistry() => new ExporterTemplate(20926202.0, 0.0, 297.0, true, AdvisorStatusMap.ValidateRegistry(), "Clarke 1880", "EPSG", 7034L, "Clarke 1880", string.Empty, "Clarke gave a and b and also 1/f=293.465 (to 3 decimal places).  1/f derived from a and b = 293.4663077…");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExporterTemplate ChangeRegistry() => new ExporterTemplate(6378206.4, 6356583.8, double.PositiveInfinity, false, AdvisorStatusMap.ViewRegistry(), "Clarke 1866", "EPSG", 7008L, "Clarke 1866", string.Empty, "Original definition a=20926062 and b=20855121 (British) feet. Uses Clarke's 1865 inch-metre ratio of 39.370432 to obtain metres. (Metric value then converted to US survey feet for use in the United States using 39.37 exactly giving a=20925832.16 ft US).");

    public static ExporterTemplate Sphere
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => new ExporterTemplate(6370997.0, 6370997.0, double.PositiveInfinity, false, AdvisorStatusMap.ViewRegistry(), "GRS 1980 Authalic Sphere", "EPSG", 7048L, nameof (Sphere), "", "Authalic sphere derived from GRS 1980 ellipsoid (code 7019).  (An authalic sphere is one with a surface area equal to the surface area of the ellipsoid). 1/f is infinite.");
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double ListItem() => this.m_Predicate;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void VerifyItem(double info) => this.m_Predicate = info;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double ViewItem() => this.m_Property;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RegisterItem(double asset) => this.m_Property = asset;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double PopItem() => this.m_Parser;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SetItem(double def) => this.m_Parser = def;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public TagStatusService PrepareItem() => this._Interpreter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CancelItem(TagStatusService spec) => this._Interpreter = spec;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool FillItem() => this.configuration;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SetupItem(bool isinstance) => this.configuration = isinstance;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus()
    {
      int num1 = 1;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_9;
            case 2:
            case 4:
              goto label_1;
            case 3:
              stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "SPHEROID[\"{0}\", {1}, {2}", new object[3]
              {
                (object) this.Name,
                (object) this.ListItem(),
                (object) this.PopItem()
              });
              num2 = 4;
              continue;
            case 5:
              goto label_8;
            case 6:
              goto label_10;
            default:
              goto label_6;
          }
        }
label_1:
        if (!string.IsNullOrEmpty(this.CountItem()) && this.SelectItem() > 0L)
          stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.CountItem(), (object) this.SelectItem());
        stringBuilder.Append("]");
        goto label_8;
label_6:
        num1 = 5;
        continue;
label_8:
        str = stringBuilder.ToString();
        num1 = 6;
        continue;
label_9:
        stringBuilder = new StringBuilder();
        num1 = 3;
      }
label_10:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_Ellipsoid SemiMajorAxis=\"{0}\" SemiMinorAxis=\"{1}\" InverseFlattening=\"{2}\" IvfDefinitive=\"{3}\">{4}{5}</CS_Ellipsoid>", (object) this.ListItem(), (object) this.ViewItem(), (object) this.PopItem(), (object) (this.FillItem() ? 1 : 0), (object) this.ListRegistry(), (object) this.PrepareItem().AssetItem());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object instance)
    {
      int num1 = 2;
      ExporterTemplate exporterTemplate;
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            flag = !(instance is ExporterTemplate);
            int num2 = 5;
            num1 = ExporterTemplate.InsertList() ? num2 : num2;
            continue;
          case 1:
          case 5:
            if (!flag)
            {
              exporterTemplate = instance as ExporterTemplate;
              goto case 4;
            }
            else
            {
              if (!ExporterTemplate.InsertList())
              {
                num1 = 3;
                continue;
              }
              goto case 4;
            }
          case 3:
            goto label_1;
          case 4:
            if (exporterTemplate.PopItem() == this.PopItem() && exporterTemplate.FillItem() == this.FillItem() && exporterTemplate.ListItem() == this.ListItem() && exporterTemplate.ViewItem() == this.ViewItem())
            {
              if (true)
              {
                num1 = 6;
                continue;
              }
              goto label_10;
            }
            else
              goto label_11;
          case 6:
            goto label_10;
          default:
            num1 = 4;
            continue;
        }
      }
label_1:
      return false;
label_10:
      int num3 = exporterTemplate.PrepareItem().InvokeItem((object) this.PrepareItem()) ? 1 : 0;
      goto label_12;
label_11:
      num3 = 0;
label_12:
      return num3 != 0;
    }

    internal static bool CompareList() => true;

    internal static bool InsertList() => false;
  }
}
