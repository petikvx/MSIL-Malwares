// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Configuration.WebHttpSecurityElement
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.ComponentModel;
using System.Configuration;
using System.Runtime.InteropServices;

namespace System.ServiceModel.Configuration
{
  [ComVisible(false)]
  public sealed class WebHttpSecurityElement : ServiceModelConfigurationElement
  {
    private ConfigurationPropertyCollection properties;

    [ConfigurationProperty("mode", DefaultValue = WebHttpSecurityMode.None)]
    [InternalEnumValidator(typeof (WebHttpSecurityModeHelper))]
    public WebHttpSecurityMode Mode
    {
      get => (WebHttpSecurityMode) this["mode"];
      set => this["mode"] = (object) value;
    }

    [ConfigurationProperty("transport")]
    public HttpTransportSecurityElement Transport => (HttpTransportSecurityElement) this["transport"];

    protected override ConfigurationPropertyCollection Properties
    {
      get
      {
        if (this.properties == null)
          this.properties = new ConfigurationPropertyCollection()
          {
            new ConfigurationProperty("mode", typeof (WebHttpSecurityMode), (object) WebHttpSecurityMode.None, (TypeConverter) null, (ConfigurationValidatorBase) new InternalEnumValidator(typeof (WebHttpSecurityModeHelper)), ConfigurationPropertyOptions.None),
            new ConfigurationProperty("transport", typeof (HttpTransportSecurityElement), (object) null, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None)
          };
        return this.properties;
      }
    }

    internal void ApplyConfiguration(WebHttpSecurity security)
    {
      if (security == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (security));
      if (!this.ElementInformation.Properties["mode"].IsModified)
        return;
      security.Mode = this.Mode;
      this.Transport.ApplyConfiguration(security.Transport);
    }

    internal void InitializeFrom(WebHttpSecurity security)
    {
      if (security == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (security));
      this.SetPropertyValueIfNotDefaultValue<WebHttpSecurityMode>("mode", security.Mode);
      this.InitializeTransportSecurity(security.Transport);
    }

    private void ApplyConfiguration(HttpTransportSecurity security)
    {
      if (security == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (security));
      security.ClientCredentialType = this.Transport.ClientCredentialType;
      security.ProxyCredentialType = this.Transport.ProxyCredentialType;
      security.Realm = this.Transport.Realm;
    }

    private void InitializeTransportSecurity(HttpTransportSecurity security)
    {
      if (security == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (security));
      if (WebHttpSecurityElement.IsNonDefaultValue<HttpClientCredentialType>((ServiceModelConfigurationElement) this.Transport, "clientCredentialType", security.ClientCredentialType))
        this.Transport.ClientCredentialType = security.ClientCredentialType;
      if (WebHttpSecurityElement.IsNonDefaultValue<HttpProxyCredentialType>((ServiceModelConfigurationElement) this.Transport, "proxyCredentialType", security.ProxyCredentialType))
        this.Transport.ProxyCredentialType = security.ProxyCredentialType;
      if (!WebHttpSecurityElement.IsNonDefaultValue<string>((ServiceModelConfigurationElement) this.Transport, "realm", security.Realm))
        return;
      this.Transport.Realm = security.Realm;
    }

    private static bool IsNonDefaultValue<T>(
      ServiceModelConfigurationElement element,
      string propertyName,
      T value)
    {
      PropertyInformation property = element.ElementInformation.Properties[propertyName];
      return property != null && !object.Equals(property.DefaultValue, (object) value);
    }
  }
}
