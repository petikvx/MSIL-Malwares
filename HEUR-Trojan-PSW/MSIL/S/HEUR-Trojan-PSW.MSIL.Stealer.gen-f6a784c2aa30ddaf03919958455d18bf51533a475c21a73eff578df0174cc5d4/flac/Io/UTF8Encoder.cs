// Decompiled with JetBrains decompiler
// Type: flac.Io.UTF8Encoder
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using System.Collections.Generic;

namespace flac.Io
{
  public class UTF8Encoder
  {
    public static byte[] GetUtf8UInt(int val)
    {
      List<byte> byteList = new List<byte>();
      if (val < 128)
        byteList.Add((byte) val);
      else if (val < 2048)
      {
        byteList.Add((byte) (192 | val >> 6));
        byteList.Add((byte) (128 | val & 63));
      }
      else if (val < 65536)
      {
        byteList.Add((byte) (224 | val >> 12));
        byteList.Add((byte) (128 | val >> 6 & 63));
        byteList.Add((byte) (128 | val & 63));
      }
      else if (val < 2097152)
      {
        byteList.Add((byte) (240 | val >> 18));
        byteList.Add((byte) (128 | val >> 12 & 63));
        byteList.Add((byte) (128 | val >> 6 & 63));
        byteList.Add((byte) (128 | val & 63));
      }
      else if (val < 67108864)
      {
        byteList.Add((byte) (248 | val >> 24));
        byteList.Add((byte) (128 | val >> 18 & 63));
        byteList.Add((byte) (128 | val >> 12 & 63));
        byteList.Add((byte) (128 | val >> 6 & 63));
        byteList.Add((byte) (128 | val & 63));
      }
      else
      {
        byteList.Add((byte) (252 | val >> 30));
        byteList.Add((byte) (128 | val >> 24 & 63));
        byteList.Add((byte) (128 | val >> 18 & 63));
        byteList.Add((byte) (128 | val >> 12 & 63));
        byteList.Add((byte) (128 | val >> 6 & 63));
        byteList.Add((byte) (128 | val & 63));
      }
      return byteList.ToArray();
    }

    public static byte[] GetUtf8ULong(long val)
    {
      List<byte> byteList = new List<byte>();
      if (val < 128L)
        byteList.Add((byte) val);
      else if (val < 2048L)
      {
        byteList.Add((byte) (192UL | (ulong) (val >> 6)));
        byteList.Add((byte) (128UL | (ulong) (val & 63L)));
      }
      else if (val < 65536L)
      {
        byteList.Add((byte) (224UL | (ulong) (val >> 12)));
        byteList.Add((byte) (128UL | (ulong) (val >> 6 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val & 63L)));
      }
      else if (val < 2097152L)
      {
        byteList.Add((byte) (240UL | (ulong) (val >> 18)));
        byteList.Add((byte) (128UL | (ulong) (val >> 12 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 6 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val & 63L)));
      }
      else if (val < 67108864L)
      {
        byteList.Add((byte) (248UL | (ulong) (val >> 24)));
        byteList.Add((byte) (128UL | (ulong) (val >> 18 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 12 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 6 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val & 63L)));
      }
      else if (val < 2147483648L)
      {
        byteList.Add((byte) (252UL | (ulong) (val >> 30)));
        byteList.Add((byte) (128UL | (ulong) (val >> 24 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 18 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 12 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 6 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val & 63L)));
      }
      else
      {
        byteList.Add((byte) 254);
        byteList.Add((byte) (128UL | (ulong) (val >> 30 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 24 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 18 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 12 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val >> 6 & 63L)));
        byteList.Add((byte) (128UL | (ulong) (val & 63L)));
      }
      return byteList.ToArray();
    }
  }
}
