// Decompiled with JetBrains decompiler
// Type: 828747996420.703489006816
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003208825527781;
using \u003545704640419;
using \u003566559159672;
using \u003771916509144;
using \u003795172862394;
using \u003828747996420;
using \u003830680403346;
using \u003949304136191;
using System;
using System.Globalization;
using System.Reflection;
using System.Reflection.Emit;

namespace \u003828747996420
{
  internal class \u003703489006816 : \u003547957345893
  {
    private static readonly \u003703489006816 \u003519201452192 = new \u003703489006816();

    internal static \u003703489006816 \u003409477715111 => \u003703489006816.\u003519201452192;

    private static DynamicMethod \u003324462998352(
      string _param0,
      Type _param1,
      Type[] _param2,
      Type _param3)
    {
      return _param3.\u003777956360344() ? new DynamicMethod(_param0, _param1, _param2, _param3.Module, true) : new DynamicMethod(_param0, _param1, _param2, _param3, true);
    }

    public virtual \u003381561884367<object> \u003699938527901(MethodBase _param1)
    {
      DynamicMethod dynamicMethod = \u003703489006816.\u003324462998352(_param1.ToString(), typeof (object), new Type[1]
      {
        typeof (object[])
      }, _param1.DeclaringType);
      ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
      this.\u003963567424127(_param1, ilGenerator, 0);
      return (\u003381561884367<object>) dynamicMethod.CreateDelegate(typeof (\u003381561884367<object>));
    }

    public virtual \u003481804917678<T, object> \u003230370688985<T>(
      MethodBase _param1)
    {
      DynamicMethod dynamicMethod = \u003703489006816.\u003324462998352(_param1.ToString(), typeof (object), new Type[2]
      {
        typeof (object),
        typeof (object[])
      }, _param1.DeclaringType);
      ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
      this.\u003963567424127(_param1, ilGenerator, 1);
      return (\u003481804917678<T, object>) dynamicMethod.CreateDelegate(typeof (\u003481804917678<T, object>));
    }

    private void \u003963567424127(MethodBase _param1, ILGenerator _param2, int _param3)
    {
      ParameterInfo[] parameters = _param1.GetParameters();
      Label label1 = _param2.DefineLabel();
      _param2.Emit(OpCodes.Ldarg, _param3);
      _param2.Emit(OpCodes.Ldlen);
      _param2.Emit(OpCodes.Ldc_I4, parameters.Length);
      _param2.Emit(OpCodes.Beq, label1);
      _param2.Emit(OpCodes.Newobj, typeof (TargetParameterCountException).GetConstructor(\u003560732527318.\u003883915469891));
      _param2.Emit(OpCodes.Throw);
      _param2.MarkLabel(label1);
      if (!_param1.IsConstructor && !_param1.IsStatic)
        _param2.\u003344206885334(_param1.DeclaringType);
      LocalBuilder local1 = _param2.DeclareLocal(typeof (IConvertible));
      LocalBuilder local2 = _param2.DeclareLocal(typeof (object));
      for (int index = 0; index < parameters.Length; ++index)
      {
        ParameterInfo parameterInfo = parameters[index];
        Type parameterType = parameterInfo.ParameterType;
        if (parameterType.IsByRef)
        {
          Type elementType = parameterType.GetElementType();
          LocalBuilder local3 = _param2.DeclareLocal(elementType);
          if (!parameterInfo.IsOut)
          {
            _param2.\u003238552395024(_param3, index);
            if (elementType.\u003465247563459())
            {
              Label label2 = _param2.DefineLabel();
              Label label3 = _param2.DefineLabel();
              _param2.Emit(OpCodes.Brtrue_S, label2);
              _param2.Emit(OpCodes.Ldloca_S, local3);
              _param2.Emit(OpCodes.Initobj, elementType);
              _param2.Emit(OpCodes.Br_S, label3);
              _param2.MarkLabel(label2);
              _param2.\u003238552395024(_param3, index);
              _param2.\u003451501126759(elementType);
              _param2.Emit(OpCodes.Stloc_S, local3);
              _param2.MarkLabel(label3);
            }
            else
            {
              _param2.\u003451501126759(elementType);
              _param2.Emit(OpCodes.Stloc_S, local3);
            }
          }
          _param2.Emit(OpCodes.Ldloca_S, local3);
        }
        else if (parameterType.\u003465247563459())
        {
          _param2.\u003238552395024(_param3, index);
          _param2.Emit(OpCodes.Stloc_S, local2);
          Label label4 = _param2.DefineLabel();
          Label label5 = _param2.DefineLabel();
          _param2.Emit(OpCodes.Ldloc_S, local2);
          _param2.Emit(OpCodes.Brtrue_S, label4);
          LocalBuilder local4 = _param2.DeclareLocal(parameterType);
          _param2.Emit(OpCodes.Ldloca_S, local4);
          _param2.Emit(OpCodes.Initobj, parameterType);
          _param2.Emit(OpCodes.Ldloc_S, local4);
          _param2.Emit(OpCodes.Br_S, label5);
          _param2.MarkLabel(label4);
          if (parameterType.\u003493414655437())
          {
            MethodInfo method = typeof (IConvertible).GetMethod("To" + parameterType.Name, new Type[1]
            {
              typeof (IFormatProvider)
            });
            if (method != (MethodInfo) null)
            {
              Label label6 = _param2.DefineLabel();
              _param2.Emit(OpCodes.Ldloc_S, local2);
              _param2.Emit(OpCodes.Isinst, parameterType);
              _param2.Emit(OpCodes.Brtrue_S, label6);
              _param2.Emit(OpCodes.Ldloc_S, local2);
              _param2.Emit(OpCodes.Isinst, typeof (IConvertible));
              _param2.Emit(OpCodes.Stloc_S, local1);
              _param2.Emit(OpCodes.Ldloc_S, local1);
              _param2.Emit(OpCodes.Brfalse_S, label6);
              _param2.Emit(OpCodes.Ldloc_S, local1);
              _param2.Emit(OpCodes.Ldnull);
              _param2.Emit(OpCodes.Callvirt, method);
              _param2.Emit(OpCodes.Br_S, label5);
              _param2.MarkLabel(label6);
            }
          }
          _param2.Emit(OpCodes.Ldloc_S, local2);
          _param2.\u003451501126759(parameterType);
          _param2.MarkLabel(label5);
        }
        else
        {
          _param2.\u003238552395024(_param3, index);
          _param2.\u003451501126759(parameterType);
        }
      }
      if (_param1.IsConstructor)
        _param2.Emit(OpCodes.Newobj, (ConstructorInfo) _param1);
      else
        _param2.\u003150769028230((MethodInfo) _param1);
      Type type = _param1.IsConstructor ? _param1.DeclaringType : ((MethodInfo) _param1).ReturnType;
      if (type != typeof (void))
        _param2.\u003548059826301(type);
      else
        _param2.Emit(OpCodes.Ldnull);
      _param2.\u003372780880309();
    }

    public virtual Func<T> \u003065714412818<T>(Type _param1)
    {
      DynamicMethod dynamicMethod = \u003703489006816.\u003324462998352("Create" + _param1.FullName, typeof (T), \u003560732527318.\u003883915469891, _param1);
      dynamicMethod.InitLocals = true;
      ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
      this.\u003268900859215(_param1, ilGenerator, typeof (T));
      return (Func<T>) dynamicMethod.CreateDelegate(typeof (Func<T>));
    }

    private void \u003268900859215(Type _param1, ILGenerator _param2, Type _param3)
    {
      if (_param1.\u003465247563459())
      {
        _param2.DeclareLocal(_param1);
        _param2.Emit(OpCodes.Ldloc_0);
        if (_param1 != _param3)
          _param2.Emit(OpCodes.Box, _param1);
      }
      else
      {
        ConstructorInfo constructor = _param1.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, (Binder) null, \u003560732527318.\u003883915469891, (ParameterModifier[]) null);
        if (constructor == (ConstructorInfo) null)
          throw new ArgumentException("Could not get constructor for {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1));
        _param2.Emit(OpCodes.Newobj, constructor);
      }
      _param2.\u003372780880309();
    }

    public virtual Func<T, object> \u003002218064686<T>(PropertyInfo _param1)
    {
      DynamicMethod dynamicMethod = \u003703489006816.\u003324462998352("Get" + _param1.Name, typeof (object), new Type[1]
      {
        typeof (T)
      }, _param1.DeclaringType);
      ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
      this.\u003169022375319(_param1, ilGenerator);
      return (Func<T, object>) dynamicMethod.CreateDelegate(typeof (Func<T, object>));
    }

    private void \u003169022375319(PropertyInfo _param1, ILGenerator _param2)
    {
      MethodInfo getMethod = _param1.GetGetMethod(true);
      if (getMethod == (MethodInfo) null)
        throw new ArgumentException("Property '{0}' does not have a getter.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.Name));
      if (!getMethod.IsStatic)
        _param2.\u003344206885334(_param1.DeclaringType);
      _param2.\u003150769028230(getMethod);
      _param2.\u003548059826301(_param1.PropertyType);
      _param2.\u003372780880309();
    }

    public virtual Func<T, object> \u003956439036899<T>(FieldInfo _param1)
    {
      if (_param1.IsLiteral)
      {
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: reference to a compiler-generated method
        return new Func<T, object>(new \u003703489006816.\u003745251860370<T>()
        {
          constantValue = _param1.GetValue((object) null)
        }.\u003CCreateGet\u003Eb__0);
      }
      DynamicMethod dynamicMethod = \u003703489006816.\u003324462998352("Get" + _param1.Name, typeof (T), new Type[1]
      {
        typeof (object)
      }, _param1.DeclaringType);
      ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
      this.\u003533693097256(_param1, ilGenerator);
      return (Func<T, object>) dynamicMethod.CreateDelegate(typeof (Func<T, object>));
    }

    private void \u003533693097256(FieldInfo _param1, ILGenerator _param2)
    {
      if (!_param1.IsStatic)
      {
        _param2.\u003344206885334(_param1.DeclaringType);
        _param2.Emit(OpCodes.Ldfld, _param1);
      }
      else
        _param2.Emit(OpCodes.Ldsfld, _param1);
      _param2.\u003548059826301(_param1.FieldType);
      _param2.\u003372780880309();
    }

    public virtual Action<T, object> \u003811682110272<T>(FieldInfo _param1)
    {
      DynamicMethod dynamicMethod = \u003703489006816.\u003324462998352("Set" + _param1.Name, (Type) null, new Type[2]
      {
        typeof (T),
        typeof (object)
      }, _param1.DeclaringType);
      ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
      \u003703489006816.\u003115854185593(_param1, ilGenerator);
      return (Action<T, object>) dynamicMethod.CreateDelegate(typeof (Action<T, object>));
    }

    internal static void \u003115854185593(FieldInfo _param0, ILGenerator _param1)
    {
      if (!_param0.IsStatic)
        _param1.\u003344206885334(_param0.DeclaringType);
      _param1.Emit(OpCodes.Ldarg_1);
      _param1.\u003451501126759(_param0.FieldType);
      if (!_param0.IsStatic)
        _param1.Emit(OpCodes.Stfld, _param0);
      else
        _param1.Emit(OpCodes.Stsfld, _param0);
      _param1.\u003372780880309();
    }

    public virtual Action<T, object> \u003077100179408<T>(PropertyInfo _param1)
    {
      DynamicMethod dynamicMethod = \u003703489006816.\u003324462998352("Set" + _param1.Name, (Type) null, new Type[2]
      {
        typeof (T),
        typeof (object)
      }, _param1.DeclaringType);
      ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
      \u003703489006816.\u003558640256260(_param1, ilGenerator);
      return (Action<T, object>) dynamicMethod.CreateDelegate(typeof (Action<T, object>));
    }

    internal static void \u003558640256260(PropertyInfo _param0, ILGenerator _param1)
    {
      MethodInfo setMethod = _param0.GetSetMethod(true);
      if (!setMethod.IsStatic)
        _param1.\u003344206885334(_param0.DeclaringType);
      _param1.Emit(OpCodes.Ldarg_1);
      _param1.\u003451501126759(_param0.PropertyType);
      _param1.\u003150769028230(setMethod);
      _param1.\u003372780880309();
    }
  }
}
