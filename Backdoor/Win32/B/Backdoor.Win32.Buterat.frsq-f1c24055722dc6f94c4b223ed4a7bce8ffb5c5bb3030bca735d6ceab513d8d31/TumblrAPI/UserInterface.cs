// Decompiled with JetBrains decompiler
// Type: TumblrAPI.UserInterface
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.Collections.Generic;
using System.Linq;

namespace TumblrAPI
{
  internal class UserInterface
  {
    private DroidCollector collector;
    private string[] availableModels = new string[4]
    {
      "PROTOCOL",
      "UTILITY",
      "JANITOR",
      "ASTROMECH"
    };
    private string[] availableMaterials = new string[3]
    {
      "ALUMINIUM",
      "TITANIUM",
      "AGRINIUM"
    };
    private string[] availableColors = new string[4]
    {
      "RED",
      "GREEN",
      "PURPLE",
      "GRAY"
    };

    public UserInterface(DroidCollector DroidCollector) => this.collector = DroidCollector;

    public int ShowMenu()
    {
      Console.WriteLine("Welcome to the Droid Management System, v. 0.1" + Environment.NewLine + "Please choose a command:" + Environment.NewLine + "1: Print Droid List" + Environment.NewLine + "2: Add New Droid" + Environment.NewLine + "3: Exit Program");
      return int.Parse(Console.ReadLine());
    }

    public void PrintDroidList() => Console.WriteLine(this.collector.GetDroidList());

    private string printStringArray(string[] array)
    {
      string str1 = "";
      foreach (string str2 in array)
        str1 += string.Format("{0} ", (object) str2);
      return str1;
    }

    public void AddDroid()
    {
      Console.WriteLine("Enter model of new droid:" + Environment.NewLine + "Available models: " + this.printStringArray(this.availableModels));
      string upper1;
      for (upper1 = Console.ReadLine().Trim().ToUpper(); !((IEnumerable<string>) this.availableModels).Contains<string>(upper1); upper1 = Console.ReadLine().Trim().ToUpper())
        Console.WriteLine("Model not available, please choose another.");
      Console.WriteLine("Enter Material: " + Environment.NewLine + "Available materials: " + this.printStringArray(this.availableMaterials));
      string upper2;
      for (upper2 = Console.ReadLine().Trim().ToUpper(); !((IEnumerable<string>) this.availableMaterials).Contains<string>(upper2); upper2 = Console.ReadLine().Trim().ToUpper())
        Console.WriteLine("Material not available, please enter different matieral.");
      Console.WriteLine("Enter Color: " + Environment.NewLine + "Available colors: " + this.printStringArray(this.availableColors));
      string upper3;
      for (upper3 = Console.ReadLine().Trim().ToUpper(); !((IEnumerable<string>) this.availableColors).Contains<string>(upper3); upper3 = Console.ReadLine().Trim().ToUpper())
        Console.WriteLine("Material not available, please enter different matieral.");
      if (upper1 == this.availableModels[0])
      {
        Console.WriteLine("Enter number of languages: ");
        int NumberLanguages = int.Parse(Console.ReadLine().Trim());
        this.collector.addDroid(upper1, upper2, upper3, NumberLanguages);
      }
      else
      {
        Console.WriteLine("Toolbox? Y or N: ");
        bool Toolbox = this.sortBool(Console.ReadLine().Trim().ToUpper());
        Console.WriteLine("Computer Connection? Y or N: ");
        bool ComputerConnection = this.sortBool(Console.ReadLine().Trim().ToUpper());
        Console.WriteLine("Arm? Y or N: ");
        bool Arm = this.sortBool(Console.ReadLine().Trim().ToUpper());
        if (upper1 == this.availableModels[1])
          this.collector.addDroid(upper1, upper2, upper3, Toolbox, ComputerConnection, Arm);
        if (upper1 == this.availableModels[2])
        {
          Console.WriteLine("Trash Compactor? Y or N: ");
          bool TrashCompactor = this.sortBool(Console.ReadLine().Trim().ToUpper());
          Console.WriteLine("Vacuum? Y or N: ");
          bool Vacuum = this.sortBool(Console.ReadLine().Trim().ToUpper());
          this.collector.addDroid(upper1, upper2, upper3, Toolbox, ComputerConnection, Arm, TrashCompactor, Vacuum);
        }
        if (upper1.ToUpper() == this.availableModels[3])
        {
          Console.WriteLine("Fire Extringuisher? Y or N: ");
          bool FireExtinguisher = this.sortBool(Console.ReadLine().Trim().ToUpper());
          Console.WriteLine("Enter number of ships: ");
          int NumberShips = int.Parse(Console.ReadLine().Trim());
          this.collector.addDroid(upper1, upper2, upper3, Toolbox, ComputerConnection, Arm, FireExtinguisher, NumberShips);
        }
      }
    }

    private bool sortBool(string userInput)
    {
      string[] strArray = new string[2]{ "Y", "N" };
      for (string[] source = strArray; !((IEnumerable<string>) source).Contains<string>(userInput); userInput = Console.ReadLine().Trim().ToUpper())
        Console.WriteLine("Please enter Y or N");
      return userInput == "Y";
    }
  }
}
