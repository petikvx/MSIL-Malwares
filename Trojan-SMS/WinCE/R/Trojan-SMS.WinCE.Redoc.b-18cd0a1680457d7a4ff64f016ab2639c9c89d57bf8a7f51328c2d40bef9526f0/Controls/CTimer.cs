// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CTimer
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using System;
using System.Collections;

namespace Dbasic.Controls
{
  public class CTimer : CControls
  {
    public CTimer(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedTimer control = (CEnhancedTimer) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "enabled":
          if (!assign)
            return new MethodReturn(place, control.Enabled.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          control.Enabled = bool.Parse(runReturn1.vString);
          return new MethodReturn(place);
        case "interval":
          if (!assign)
            return new MethodReturn(place, control.Interval.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          control.Interval = (int) runReturn2.vDouble;
          return new MethodReturn(place);
        default:
          return new MethodReturn(place);
      }
    }

    public MethodReturn addTimer(Place place, ref Locals locals)
    {
      ++place.WordI;
      RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn.place;
      string lower = runReturn.vString.ToLower(CRunner.cul);
      ++place.WordI;
      CEnhancedTimer cenhancedTimer = new CEnhancedTimer();
      this.CRunner.htControls.Add((object) lower, (object) new WrapControl((object) cenhancedTimer, (CControls) this));
      cenhancedTimer.name = lower;
      cenhancedTimer.Enabled = false;
      this.AddEvents(cenhancedTimer);
      return new MethodReturn(place);
    }

    private void AddEvents(CEnhancedTimer tmr)
    {
      if (!this.CRunner.htSubs.Contains((object) (tmr.name + "_tick")))
        return;
      tmr.Tick += new EventHandler(this.Tick);
    }

    private void Tick(object sender, EventArgs e)
    {
      CEnhancedTimer cenhancedTimer = (CEnhancedTimer) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedTimer.name + "_tick")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedTimer.name
        }
      });
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedTimer cenhancedTimer = (CEnhancedTimer) sender;
      switch (eventName)
      {
        case "tick":
          cenhancedTimer.Tick += new EventHandler(this.Tick);
          break;
      }
    }

    public void ShortAdd(string s)
    {
      CEnhancedTimer cenhancedTimer = new CEnhancedTimer();
      string Name;
      string Interval;
      CBuildDesigner.TimerGetProperties(s, out string _, out Name, out int _, out int _, out Interval);
      cenhancedTimer.name = Name.ToLower(CRunner.cul);
      cenhancedTimer.Enabled = false;
      cenhancedTimer.Interval = int.Parse(Interval, (IFormatProvider) CRunner.cul);
      this.CRunner.htControls.Add((object) cenhancedTimer.name, (object) new WrapControl((object) cenhancedTimer, (CControls) this));
      this.AddEvents(cenhancedTimer);
    }
  }
}
