// Decompiled with JetBrains decompiler
// Type: ProjNet.Mocks.Proc
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Rules;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Importers;

namespace ProjNet.Mocks
{
  public class Proc : StateProcess
  {
    private RulesAccountCollection m_ObjectProcess;
    private RulesAccountCollection m_ProcessProcess;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Proc(RulesAccountCollection asset, RulesAccountCollection vis)
    {
      int num1 = 3;
      if (Proc.RateDescriptor())
        ;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            ManagerParamsID.NewExpression();
            num2 = 4;
            break;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.m_ObjectProcess = asset;
            goto case 2;
          case 2:
            this.m_ProcessProcess = vis;
            num2 = 5;
            break;
          case 5:
            goto label_1;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_1:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public RulesAccountCollection SetConsumer() => this.m_ObjectProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ComputeConsumer(RulesAccountCollection value) => this.m_ObjectProcess = value;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public RulesAccountCollection StartConsumer() => this.m_ProcessProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ManageConsumer(RulesAccountCollection first) => this.m_ProcessProcess = first;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override RepositoryProcess CreateState() => throw new NotImplementedException();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] DisableConfiguration(double[] asset)
    {
      int num1 = 1;
      double[] numArray1;
      while (true)
      {
        int num2 = num1;
        double[] numArray2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
              goto label_5;
            case 3:
            case 5:
              goto label_6;
            case 4:
              numArray2[0] /= this.SetConsumer().InvokeState().PrepareError();
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_8;
            case 6:
              goto label_8;
            default:
              goto label_4;
          }
        }
label_1:
        numArray2[0] -= this.SetConsumer().CalculateState().StopState() / this.SetConsumer().CalculateState().InvokeState().PrepareError();
        numArray2[0] += this.StartConsumer().CalculateState().StopState() / this.StartConsumer().CalculateState().InvokeState().PrepareError();
        goto label_6;
label_4:
        num1 = 5;
        continue;
label_5:
        numArray2 = (double[]) asset.Clone();
        num1 = 4;
        continue;
label_6:
        numArray2[0] *= this.SetConsumer().InvokeState().PrepareError();
        numArray1 = numArray2;
        num1 = 6;
      }
label_8:
      return numArray1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> SearchConfiguration(List<double[]> task)
    {
      List<double[]> numArrayList = new List<double[]>(task.Count);
      foreach (double[] v in task)
        numArrayList.Add(this.DisableConfiguration(v));
      return numArrayList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void ValidateConfiguration() => throw new NotImplementedException();

    internal static bool RemoveDescriptor() => true;

    internal static bool RateDescriptor() => false;
  }
}
