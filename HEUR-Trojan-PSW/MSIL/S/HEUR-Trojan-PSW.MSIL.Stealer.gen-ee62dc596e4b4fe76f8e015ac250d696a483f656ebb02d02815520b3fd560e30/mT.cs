// Decompiled with JetBrains decompiler
// Type: wG.mT
// Assembly: Type, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 716CE3A9-BAD1-470D-912F-B421D403F66E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee62dc596e4b4fe76f8e015ac250d696a483f656ebb02d02815520b3fd560e30.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace wG
{
  public class mT
  {
    private BinaryReader Au;
    private ASCIIEncoding MW;
    private UTF7Encoding PK;
    private UTF32Encoding BP;
    private static wG.mT ji;

    [SpecialName]
    public long wN() => this.Y4();

    [SpecialName]
    public void Mg(long _param1) => this.X2(_param1, SeekOrigin.Begin);

    [SpecialName]
    public long kx() => this.Au.BaseStream.Length;

    [SpecialName]
    public Stream DY() => this.Au.BaseStream;

    public mT(BinaryReader _param1, wG.mT.zGO _param2)
    {
      wG.mT.L4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Au = _param1;
      this.j1(_param2);
      this.MW = new ASCIIEncoding();
      int num1 = 0;
      if (false)
        goto label_2;
label_1:
      switch (num1)
      {
        default:
          this.PK = new UTF7Encoding();
          this.BP = new UTF32Encoding();
          return;
      }
label_2:
      int num2;
      num1 = num2;
      goto label_1;
    }

    [CompilerGenerated]
    [SpecialName]
    public wG.mT.zGO mI() => this.PJ;

    [CompilerGenerated]
    [SpecialName]
    public void j1(wG.mT.zGO _param1) => this.PJ = _param1;

    public void wG() => Console.WriteLine("Can seek: " + new GZipStream(this.Au.BaseStream, CompressionMode.Decompress).CanSeek.ToString());

    public void mT(int _param1) => ((Stream) wG.mT.hr((object) this.Au)).Seek((long) _param1, SeekOrigin.Current);

    public byte[] Mk(int _param1) => (byte[]) wG.mT.nZ((object) this.Au, _param1);

    public bool ja() => this.Au.ReadBoolean();

    public byte ed() => this.Au.ReadByte();

    public byte mH() => (byte) this.Au.ReadSByte();

    public short tA()
    {
      if (this.mI() != (wG.mT.zGO) 1)
        return this.Au.ReadInt16();
      int num = 0;
      if (wG.mT.DN() != null)
        goto label_3;
label_1:
      switch (num)
      {
        default:
          return IPAddress.HostToNetworkOrder(this.Au.ReadInt16());
      }
label_3:
      num = 0;
      goto label_1;
    }

    public short Je() => this.mI() == (wG.mT.zGO) 1 ? wG.mT.iG(this.Au.ReadInt16()) : (short) wG.mT.R3((object) this.Au);

    public int jf()
    {
      int num = 1;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 1:
            flag = this.mI() == (wG.mT.zGO) 1;
            num = wG.mT.wH() ? 0 : 0;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag ? IPAddress.HostToNetworkOrder(this.Au.ReadInt32()) : this.Au.ReadInt32();
    }

    public int uF() => this.mI() == (wG.mT.zGO) 1 ? wG.mT.lJ(this.Au.ReadInt32()) : (int) this.Au.ReadUInt32();

    public long ay() => this.mI() == (wG.mT.zGO) 1 ? (long) wG.mT.lJ(wG.mT.J1((object) this.Au)) : (long) this.Au.ReadInt32();

    public long cm() => this.mI() == (wG.mT.zGO) 1 ? wG.mT.i8(this.Au.ReadInt64()) : (long) this.Au.ReadUInt64();

    public string ej(string _param1)
    {
      string str1 = this.MW.GetString(this.Au.ReadBytes(_param1.Length));
      string str2 = !(str1 != _param1) ? str1 : throw new FormatException("Error reading ASCII string! Expected: " + _param1 + ", got: " + str1);
      int num = 0;
      if (wG.mT.DN() != null)
        goto label_4;
label_1:
      switch (num)
      {
        default:
          return str2;
      }
label_4:
      num = 0;
      goto label_1;
    }

    public string C9(string _param1)
    {
      string str1 = this.PK.GetString(this.Au.ReadBytes(wG.mT.Ql((object) _param1)));
      string str2 = !(str1 != _param1) ? str1 : throw new FormatException("Error reading UTF7 string! Expected: " + _param1 + ", got: " + str1);
      int num1 = 0;
      if (wG.mT.DN() != null)
        goto label_4;
label_1:
      switch (num1)
      {
        default:
          return str2;
      }
label_4:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public string WR(string _param1)
    {
      string str = this.BP.GetString(this.Au.ReadBytes(wG.mT.Ql((object) _param1) * 4));
      return !(str != _param1) ? str : throw new FormatException("Error reading UTF32 string! Expected: " + _param1 + ", got: " + str);
    }

    public long Y4() => this.Au.BaseStream.Position;

    public long X2(long _param1, SeekOrigin _param2) => this.Au.BaseStream.Seek(_param1, _param2);

    internal static bool wH() => wG.mT.ji == null;

    internal static wG.mT DN() => wG.mT.ji;

    internal static void L4() => XTG.fvQjdC();

    internal static object hr([In] object obj0) => (object) ((BinaryReader) obj0).BaseStream;

    internal static object nZ([In] object obj0, [In] int obj1) => (object) ((BinaryReader) obj0).ReadBytes(obj1);

    internal static short iG([In] short obj0) => IPAddress.HostToNetworkOrder(obj0);

    internal static ushort R3([In] object obj0) => ((BinaryReader) obj0).ReadUInt16();

    internal static int lJ([In] int obj0) => IPAddress.HostToNetworkOrder(obj0);

    internal static int J1([In] object obj0) => ((BinaryReader) obj0).ReadInt32();

    internal static long i8([In] long obj0) => IPAddress.HostToNetworkOrder(obj0);

    internal static int Ql([In] object obj0) => ((string) obj0).Length;

    public enum zGO
    {
    }
  }
}
