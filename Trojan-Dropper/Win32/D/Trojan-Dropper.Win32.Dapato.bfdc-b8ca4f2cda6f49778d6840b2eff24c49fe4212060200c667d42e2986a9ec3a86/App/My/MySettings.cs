// Decompiled with JetBrains decompiler
// Type: App.My.MySettings
// Assembly: App, Version=6.11.5.1, Culture=neutral, PublicKeyToken=null
// MVID: 843578DF-6576-45E1-B6A2-485233E8A253
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Dropper.Win32.Dapato.bfdc-b8ca4f2cda6f49778d6840b2eff24c49fe4212060200c667d42e2986a9ec3a86.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace App.My
{
  [CompilerGenerated]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \uE000 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool \uE001;
    private static object \uE002 = RuntimeHelpers.GetObjectValue(new object());

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void \uE000(object _param0, EventArgs _param1)
    {
      if (!\uE003.\uE001.SaveMySettingsOnExit)
        return;
      \uE006.\uE000.Save();
    }

    public static MySettings \uE000
    {
      get
      {
        if (!MySettings.\uE001)
        {
          object Expression = MySettings.\uE002;
          ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
          Monitor.Enter(Expression);
          try
          {
            if (!MySettings.\uE001)
            {
              \uE003.\uE001.Shutdown += (ShutdownEventHandler) ((_param0, _param1) =>
              {
                if (!\uE003.\uE001.SaveMySettingsOnExit)
                  return;
                \uE006.\uE000.Save();
              });
              MySettings.\uE001 = true;
            }
          }
          finally
          {
            Monitor.Exit(Expression);
          }
        }
        return MySettings.\uE000;
      }
    }
  }
}
