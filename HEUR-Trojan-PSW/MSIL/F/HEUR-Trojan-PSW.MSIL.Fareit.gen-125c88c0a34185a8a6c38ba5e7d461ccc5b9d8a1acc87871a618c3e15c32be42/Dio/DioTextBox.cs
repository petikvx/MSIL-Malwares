// Decompiled with JetBrains decompiler
// Type: Dio.DioTextBox
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace Dio
{
  public class DioTextBox : Control
  {
    private Color _overlapColor = Color.FromArgb(0, 0, 0, 0);

    public DioTextBox()
    {
      this.Size = new Size(150, 22);
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.DoubleBuffer | ControlStyles.OptimizedDoubleBuffer, true);
      this.BackColor = Color.White;
      this.ForeColor = DioDefaults.DefaultDarkForeColor;
      this.BorderColor = DioDefaults.DefaultBackColor;
      this.Font = DioDefaults.DefaultFont;
      this.InitialBorderColor = DioDefaults.DefaultBorderColor;
      this._overlapColor = this.InitialBorderColor;
      if (this.InlineTextBox == null)
        this.InlineTextBox = new TextBox();
      this.InlineTextBox.BorderStyle = BorderStyle.None;
      this.InlineTextBox.Location = new Point(3, 4);
      this.InlineTextBox.GotFocus += (EventHandler) ((sender, args) => this.OnGotFocus(args));
      this.InlineTextBox.LostFocus += (EventHandler) ((sender, args) => this.OnLostFocus(args));
      this.InlineTextBox.MouseDown += (MouseEventHandler) ((sender, args) => this.OnMouseDown(args));
      this.InlineTextBox.MouseLeave += (EventHandler) ((sender, args) => this.OnMouseLeave(args));
      this.InlineTextBox.MouseEnter += (EventHandler) ((sender, args) => this.OnMouseEnter(args));
      this.InlineTextBox.Multiline = this.Multiline;
      this.InlineTextBox.MultilineChanged += (EventHandler) ((sender, args) =>
      {
        this.OnSizeChanged(args);
        this.Multiline = this.InlineTextBox.Multiline;
      });
      this.InlineTextBox.TextChanged += (EventHandler) ((sender, args) => this.Text = this.InlineTextBox.Text);
      this.InlineTextBox.BackColor = this.BackColor;
      this.InlineTextBox.ForeColor = this.ForeColor;
      this.HandleCreated += (EventHandler) ((sender, args) => this.DoubleBuffered = true);
      this.Controls.Add((Control) this.InlineTextBox);
      this.BackColorChanged += (EventHandler) ((sender, args) => this.InlineTextBox.BackColor = this.BackColor);
      this.ForeColorChanged += (EventHandler) ((sender, args) => this.InlineTextBox.ForeColor = this.ForeColor);
    }

    public TextBox InlineTextBox { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public Color BorderColor { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public Color InitialBorderColor { get; set; }

    public bool Multiline { get; set; }

    public new Size Size
    {
      get => base.Size;
      set
      {
        base.Size = value;
        if (this.InlineTextBox == null)
          return;
        this.InlineTextBox.Size = new Size(base.Size.Width - 6, base.Size.Height - 6);
      }
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      Graphics graphics = pevent.Graphics;
      graphics.Clear(this.Parent.BackColor);
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
      using (SolidBrush solidBrush = new SolidBrush(this.BackColor))
      {
        using (Pen pen = new Pen(this._overlapColor))
        {
          graphics.FillRectangle((Brush) solidBrush, -1, -1, this.Width + 1, this.Height + 1);
          graphics.DrawRectangle(pen, 0, 0, this.Width - 1, this.Height - 1);
        }
      }
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      if (this.InlineTextBox.Focused)
        return;
      this._overlapColor = Color.FromArgb(175, this.BorderColor);
      this.Invalidate();
      base.OnMouseEnter(e);
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      if (this.InlineTextBox.Focused)
        return;
      this._overlapColor = this.InitialBorderColor;
      this.Invalidate();
      base.OnMouseLeave(e);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this._overlapColor = this.BorderColor;
      this.Invalidate();
      if (!this.InlineTextBox.Focused)
        this.InlineTextBox.Focus();
      base.OnMouseDown(e);
    }

    protected override void OnHandleCreated(EventArgs e)
    {
      if (this.InlineTextBox.Multiline)
      {
        TextBox inlineTextBox = this.InlineTextBox;
        Size size1 = this.Size;
        int width = size1.Width - 6;
        size1 = this.Size;
        int height = size1.Height - 6;
        Size size2 = new Size(width, height);
        inlineTextBox.Size = size2;
        this.InlineTextBox.Text = this.Text;
      }
      base.OnHandleCreated(e);
    }

    protected override void OnGotFocus(EventArgs e)
    {
      this._overlapColor = this.BorderColor;
      this.Invalidate();
      if (!this.InlineTextBox.Focused)
        this.InlineTextBox.Focus();
      base.OnGotFocus(e);
    }

    protected override void OnLostFocus(EventArgs e)
    {
      this._overlapColor = this.InitialBorderColor;
      this.Invalidate();
      base.OnLostFocus(e);
    }

    protected override void SetBoundsCore(
      int x,
      int y,
      int width,
      int height,
      BoundsSpecified specified)
    {
      if (this.Multiline)
        base.SetBoundsCore(x, y, width, height, specified);
      else
        base.SetBoundsCore(x, y, width, 22, specified);
    }

    protected override void OnSizeChanged(EventArgs e)
    {
      if (this.InlineTextBox != null)
      {
        if (this.InlineTextBox.Multiline)
        {
          TextBox inlineTextBox = this.InlineTextBox;
          Size size1 = this.Size;
          int width = size1.Width - 6;
          size1 = this.Size;
          int height = size1.Height - 6;
          Size size2 = new Size(width, height);
          inlineTextBox.Size = size2;
        }
        else
          this.InlineTextBox.Size = new Size(this.Size.Width - 6, this.InlineTextBox.Height);
      }
      base.OnSizeChanged(e);
    }

    protected override void OnTextChanged(EventArgs e)
    {
      this.InlineTextBox.Text = this.Text;
      this.Invalidate();
      base.OnTextChanged(e);
    }
  }
}
