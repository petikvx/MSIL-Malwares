// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Program, Version=1.0.0.0, Culture=neutral, PublicKeyToken=fad59cbbeaedaaa1
// MVID: 2B038658-8CEB-4874-AE4E-D5E8C7A3049F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Gen.gen-274011aaa97fd19ad6d993a5555c9306090da6a9b16c991739033ebb7673a244.exe

using \u0001;
using \u0004;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0004
{
  internal static class \u0005
  {
    internal sealed class \u0001
    {
      internal static readonly int[] \u0001;
      internal static readonly int[] \u0002;
      internal static readonly int[] \u0003;
      internal static readonly int[] \u0004;
      internal int \u0001;
      internal int \u0002;
      internal int \u0003;
      internal int \u0004;
      internal int \u0005;
      internal bool \u0001;
      internal \u0005.\u0002 \u0001;
      internal \u0005.\u0003 \u0001;
      internal \u0005.\u0005 \u0001;
      internal \u0005.\u0004 \u0001;
      internal \u0005.\u0004 \u0002;

      public \u0001([In] byte[] obj0)
      {
        this.\u0001 = new \u0005.\u0002();
        this.\u0001 = new \u0005.\u0003();
        this.\u0001 = 2;
        \u0003.\u0001(0, obj0.Length, this.\u0001, obj0);
      }

      static \u0001()
      {
label_0:
        int length1 = 29;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0002.\u0002.\u0002));
          \u0005.\u0001.\u0001 = numArray1;
          while (true)
          {
            \u0005.\u0001.\u0002 = new int[29]
            {
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              5,
              0
            };
            if (true)
            {
              \u0005.\u0001.\u0003 = new int[30]
              {
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                13,
                17,
                25,
                33,
                49,
                65,
                97,
                129,
                193,
                257,
                385,
                513,
                769,
                1025,
                1537,
                2049,
                3073,
                4097,
                6145,
                8193,
                12289,
                16385,
                24577
              };
              goto label_5;
            }
          }
          goto label_7;
label_5:
          int length2 = 30;
          if (length2 == 0)
          {
            length1 = length2;
            continue;
          }
          int[] numArray2 = new int[length2];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u0002.\u0002.\u0001));
          \u0005.\u0001.\u0004 = numArray2;
label_7:
          if (true)
          {
            if (false)
              goto label_5;
            else
              break;
          }
          else
            goto label_0;
        }
      }
    }

    internal sealed class \u0002
    {
      internal byte[] \u0001;
      internal int \u0001;
      internal int \u0002;
      internal uint \u0001;
      internal int \u0003;
    }

    internal sealed class \u0003
    {
      internal byte[] \u0001 = new byte[32768];
      internal int \u0001;
      internal int \u0002;
    }

    internal sealed class \u0004
    {
      internal short[] \u0001;
      public static readonly \u0005.\u0004 \u0001;
      public static readonly \u0005.\u0004 \u0002;

      static \u0004()
      {
        byte[] numArray = new byte[288];
label_1:
        int num1;
        while (true)
        {
          if (true)
            goto label_18;
label_3:
          if (true)
          {
            while (num1 < 144)
              numArray[num1++] = (byte) 8;
            if (true)
            {
              for (; num1 < 256; numArray[num1++] = (byte) 9)
              {
                if (false)
                  goto label_1;
              }
              goto label_7;
            }
            else
              break;
          }
          else
            goto label_10;
label_18:
          num1 = 0;
          goto label_3;
        }
        goto label_12;
label_7:
        int num2;
        int num3;
        while (true)
        {
          num2 = num1;
          num3 = 280;
          if (num3 != 0)
          {
            if (num2 < num3)
              numArray[num1++] = (byte) 7;
            else
              goto label_10;
          }
          else
            break;
        }
        int num4 = num3;
        int num5 = num2;
        goto label_15;
label_10:
        while (num1 < 288)
          numArray[num1++] = (byte) 8;
        \u0005.\u0004.\u0001 = new \u0005.\u0004(numArray);
        numArray = new byte[32];
label_12:
        num1 = 0;
label_14:
        num5 = num1;
        num4 = 32;
label_15:
        if (num5 < num4)
        {
          numArray[num1++] = (byte) 5;
          goto label_14;
        }
        else if (true)
          \u0005.\u0004.\u0002 = new \u0005.\u0004(numArray);
        else
          goto label_7;
      }

      public \u0004([In] byte[] obj0) => \u0003.\u0001(this, obj0);
    }

    internal sealed class \u0005
    {
      internal static readonly int[] \u0001;
      internal static readonly int[] \u0002;
      internal byte[] \u0001;
      internal byte[] \u0002;
      internal \u0005.\u0004 \u0001;
      internal int \u0001;
      internal int \u0002;
      internal int \u0003;
      internal int \u0004;
      internal int \u0005;
      internal int \u0006;
      internal byte \u0001;
      internal int \u0007;
      internal static readonly int[] \u0003;

      static \u0005()
      {
label_0:
        int length1 = 3;
        int length2;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0002.\u0002.\u0002));
          \u0005.\u0005.\u0001 = numArray1;
          do
          {
            if (true)
            {
              length2 = 3;
              if (length2 != 0)
              {
                int[] numArray2 = new int[length2];
                // ISSUE: field reference
                RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u0002.\u0002.\u0001));
                \u0005.\u0005.\u0002 = numArray2;
              }
              else
                goto label_6;
            }
            else
              goto label_0;
          }
          while (false);
          length2 = 19;
label_6:
          if (length2 == 0)
            length1 = length2;
          else
            break;
        }
        int[] numArray = new int[length2];
        // ISSUE: field reference
        RuntimeHelpers.InitializeArray((Array) numArray, __fieldref (\u0002.\u0002.\u0001));
        \u0005.\u0005.\u0003 = numArray;
      }
    }

    internal sealed class \u0006
    {
      private static readonly int[] \u0001;
      internal static readonly byte[] \u0001;
      private static readonly short[] \u0001;
      private static readonly byte[] \u0002;
      private static readonly short[] \u0002;
      private static readonly byte[] \u0003;

      static \u0006()
      {
label_0:
        \u0005.\u0006.\u0001 = new int[19]
        {
          16,
          17,
          18,
          0,
          8,
          7,
          9,
          6,
          10,
          5,
          11,
          4,
          12,
          3,
          13,
          2,
          14,
          1,
          15
        };
label_1:
        \u0005.\u0006.\u0001 = new byte[16]
        {
          (byte) 0,
          (byte) 8,
          (byte) 4,
          (byte) 12,
          (byte) 2,
          (byte) 10,
          (byte) 6,
          (byte) 14,
          (byte) 1,
          (byte) 9,
          (byte) 5,
          (byte) 13,
          (byte) 3,
          (byte) 11,
          (byte) 7,
          (byte) 15
        };
        \u0005.\u0006.\u0001 = new short[286];
        \u0005.\u0006.\u0002 = new byte[286];
        int index;
        if (true)
        {
          index = 0;
          goto label_23;
        }
        else
          goto label_7;
label_4:
        if (true)
        {
          \u0005.\u0006.\u0002[index++] = (byte) 8;
          goto label_23;
        }
        else
          goto label_8;
label_7:
        \u0005.\u0006.\u0002[index++] = (byte) 9;
label_8:
        if (index < 256)
        {
          \u0005.\u0006.\u0001[index] = \u0003.\u0001(256 + index << 7);
          goto label_7;
        }
        else
        {
          if (true)
          {
            while (true)
            {
              int num1 = index;
label_13:
              if (num1 < 280)
              {
                \u0005.\u0006.\u0001[index] = \u0003.\u0001(index - 256 << 9);
                if (true)
                  \u0005.\u0006.\u0002[index++] = (byte) 7;
                else
                  goto label_0;
              }
              else
              {
                for (; index < 286; \u0005.\u0006.\u0002[index++] = (byte) 8)
                  \u0005.\u0006.\u0001[index] = \u0003.\u0001(index - 88 << 8);
                \u0005.\u0006.\u0002 = new short[30];
                \u0005.\u0006.\u0003 = new byte[30];
                if (true)
                {
                  int num2;
                  for (index = 0; index < 30; index = num2 + 1)
                  {
                    \u0005.\u0006.\u0002[index] = \u0003.\u0001(index << 11);
                    if (true)
                    {
                      \u0005.\u0006.\u0003[index] = (byte) 5;
                      num2 = index;
                      if (false)
                      {
                        num1 = num2;
                        goto label_13;
                      }
                    }
                    else
                      goto label_1;
                  }
                  break;
                }
                goto label_4;
              }
            }
            return;
          }
          goto label_0;
        }
label_23:
        if (index < 144)
        {
          \u0005.\u0006.\u0001[index] = \u0003.\u0001(48 + index << 8);
          goto label_4;
        }
        else
          goto label_8;
      }
    }

    internal sealed class \u0007 : MemoryStream
    {
      public \u0007([In] byte[] obj0)
        : base(obj0, false)
      {
      }
    }
  }
}
