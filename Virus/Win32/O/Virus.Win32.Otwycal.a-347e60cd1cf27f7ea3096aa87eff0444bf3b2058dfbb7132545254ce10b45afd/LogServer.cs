// Decompiled with JetBrains decompiler
// Type: ATI.ACE.LOG.EXE.LogServer
// Assembly: LOG, Version=2.0.4330.39118, Culture=neutral, PublicKeyToken=90ba9c70f846762e
// MVID: D948BFF4-3013-456D-9998-1C1F0C6DA164
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Otwycal.a-347e60cd1cf27f7ea3096aa87eff0444bf3b2058dfbb7132545254ce10b45afd.exe

using ATI.ACE.LOG.Foundation;
using ATI.ACE.LOG.Foundation.Implementation.Private;
using System.Threading;

namespace ATI.ACE.LOG.EXE
{
  public class LogServer : MBRO, ILog
  {
    public event LogServer.LogUpdateEventHandler LogUpdate;

    public event LogServer.AppDomainRegisterHandler AppDomainRegister;

    public event LogServer.AppDomainUnregisterHandler AppDomainUnregister;

    public event LogServer.CccComponentsHandler CccComponents;

    public void SendLogMessage(SLog message)
    {
      Thread thread = new Thread(new ParameterizedThreadStart(this.SendLogMessageByThread));
      thread.SetApartmentState(ApartmentState.STA);
      thread.IsBackground = true;
      thread.Name = nameof (SendLogMessage);
      thread.Start((object) new LogEventArgs(message));
    }

    private void SendLogMessageByThread(object o) => this.LogUpdate(o as LogEventArgs);

    public void Client_Register(IServices s)
    {
      Thread thread = new Thread(new ParameterizedThreadStart(this.Client_RegisterByThread));
      thread.SetApartmentState(ApartmentState.STA);
      thread.IsBackground = true;
      thread.Name = nameof (Client_Register);
      thread.Start((object) s);
    }

    private void Client_RegisterByThread(object o) => this.AppDomainRegister(o as IServices);

    public void Client_Unregister(string s)
    {
      Thread thread = new Thread(new ParameterizedThreadStart(this.Client_UnregisterByThread));
      thread.SetApartmentState(ApartmentState.STA);
      thread.IsBackground = true;
      thread.Name = nameof (Client_Unregister);
      thread.Start((object) s);
    }

    private void Client_UnregisterByThread(object o) => this.AppDomainUnregister(o as string);

    public void SendComponents(CCC myCCC)
    {
      Thread thread = new Thread(new ParameterizedThreadStart(this.SendComponentsByThread));
      thread.SetApartmentState(ApartmentState.STA);
      thread.IsBackground = true;
      thread.Name = nameof (SendComponents);
      thread.Start((object) myCCC);
    }

    private void SendComponentsByThread(object o) => this.CccComponents((CCC) o);

    public delegate void AppDomainRegisterHandler(IServices s);

    public delegate void AppDomainUnregisterHandler(string s);

    public delegate void LogUpdateEventHandler(LogEventArgs e);

    public delegate void CccComponentsHandler(CCC myCCC);
  }
}
