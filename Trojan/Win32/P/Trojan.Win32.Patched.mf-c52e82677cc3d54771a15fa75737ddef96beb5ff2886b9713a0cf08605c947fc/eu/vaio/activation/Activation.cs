// Decompiled with JetBrains decompiler
// Type: activation.eu.vaio.activation.Activation
// Assembly: Activation, Version=1.0.0.10170, Culture=neutral, PublicKeyToken=null
// MVID: 2DB4F8B3-8DF5-4A65-8363-C3E1D25DD750
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Patched.mf-c52e82677cc3d54771a15fa75737ddef96beb5ff2886b9713a0cf08605c947fc.exe

using activation.Properties;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace activation.eu.vaio.activation
{
  [GeneratedCode("System.Web.Services", "2.0.50727.312")]
  [DesignerCategory("code")]
  [WebServiceBinding(Name = "ActivationSOAP11Binding", Namespace = "http://registration.ws.ideal.com")]
  [DebuggerStepThrough]
  public class Activation : SoapHttpClientProtocol
  {
    private SendOrPostCallback registerUnitOperationCompleted;
    private bool useDefaultCredentialsSetExplicitly;

    public Activation()
    {
      this.Url = Settings.Default.activation_eu_vaio_activation_Activation;
      if (this.IsLocalFileSystemWebService(this.Url))
      {
        this.UseDefaultCredentials = true;
        this.useDefaultCredentialsSetExplicitly = false;
      }
      else
        this.useDefaultCredentialsSetExplicitly = true;
    }

    public new string Url
    {
      get => base.Url;
      set
      {
        if (this.IsLocalFileSystemWebService(base.Url) && !this.useDefaultCredentialsSetExplicitly && !this.IsLocalFileSystemWebService(value))
          base.UseDefaultCredentials = false;
        base.Url = value;
      }
    }

    public new bool UseDefaultCredentials
    {
      get => base.UseDefaultCredentials;
      set
      {
        base.UseDefaultCredentials = value;
        this.useDefaultCredentialsSetExplicitly = true;
      }
    }

    public event registerUnitCompletedEventHandler registerUnitCompleted;

    [SoapDocumentMethod("urn:registerUnit", OneWay = true, ParameterStyle = SoapParameterStyle.Wrapped, RequestNamespace = "http://registration.ws.ideal.com", Use = SoapBindingUse.Literal)]
    public void registerUnit([XmlElement(IsNullable = true)] string serialNumber) => this.Invoke(nameof (registerUnit), new object[1]
    {
      (object) serialNumber
    });

    public void registerUnitAsync(string serialNumber) => this.registerUnitAsync(serialNumber, (object) null);

    public void registerUnitAsync(string serialNumber, object userState)
    {
      if (this.registerUnitOperationCompleted == null)
        this.registerUnitOperationCompleted = new SendOrPostCallback(this.OnregisterUnitOperationCompleted);
      this.InvokeAsync("registerUnit", new object[1]
      {
        (object) serialNumber
      }, this.registerUnitOperationCompleted, userState);
    }

    private void OnregisterUnitOperationCompleted(object arg)
    {
      if (this.registerUnitCompleted == null)
        return;
      InvokeCompletedEventArgs completedEventArgs = (InvokeCompletedEventArgs) arg;
      this.registerUnitCompleted((object) this, new AsyncCompletedEventArgs(completedEventArgs.Error, completedEventArgs.Cancelled, completedEventArgs.UserState));
    }

    public new void CancelAsync(object userState) => base.CancelAsync(userState);

    private bool IsLocalFileSystemWebService(string url)
    {
      if (url == null || url == string.Empty)
        return false;
      Uri uri = new Uri(url);
      return uri.Port >= 1024 && string.Compare(uri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0;
    }
  }
}
