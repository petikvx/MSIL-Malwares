// Decompiled with JetBrains decompiler
// Type: ?1?.?7?
// Assembly: 1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 569994DA-E70A-49A4-8B1F-3DD27F439F3F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.alpb-5a19a88bd483cf3cb3f4e5b11404298316ab024cfd953cd362ffa4babf1af117.exe

using \u003F1\u003F;
using System;
using System.Reflection;
using System.Reflection.Emit;

namespace \u003F1\u003F
{
  internal class \u003F7\u003F
  {
    private static readonly int \u003F1\u003F;
    private static readonly ModuleHandle \u003F5\u003F;

    static \u003F7\u003F()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
      \u003F7\u003F.\u003F5\u003F = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
    }

    private int C => 1;

    public static void \u003F3\u003F(int _param0, int _param1, int _param2)
    {
      Type typeFromHandle;
      MethodInfo methodInfo;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(\u003F7\u003F.\u003F5\u003F.ResolveTypeHandle(_param0));
        object methodFromHandle;
        if (_param2 == 16777215)
        {
label_1:
          switch (1)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F7\u003F.\u003F3\u003F);
              }
              methodFromHandle = (object) MethodBase.GetMethodFromHandle(\u003F7\u003F.\u003F5\u003F.ResolveMethodHandle(_param1));
              break;
          }
        }
        else
          methodFromHandle = (object) MethodBase.GetMethodFromHandle(\u003F7\u003F.\u003F5\u003F.ResolveMethodHandle(_param1), \u003F7\u003F.\u003F5\u003F.ResolveTypeHandle(_param2));
        methodInfo = (MethodInfo) methodFromHandle;
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          Delegate @delegate;
          if (methodInfo.IsStatic)
          {
label_11:
            switch (5)
            {
              case 0:
                goto label_11;
              default:
                @delegate = Delegate.CreateDelegate(field.FieldType, methodInfo);
                break;
            }
          }
          else
          {
            ParameterInfo[] parameters = methodInfo.GetParameters();
            int length = parameters.Length + 1;
            Type[] parameterTypes = new Type[length];
            if (methodInfo.DeclaringType.IsValueType)
            {
label_14:
              switch (2)
              {
                case 0:
                  goto label_14;
                default:
                  parameterTypes[0] = methodInfo.DeclaringType.MakeByRefType();
                  break;
              }
            }
            else
              parameterTypes[0] = typeof (object);
            for (int index = 1; index < length; ++index)
              parameterTypes[index] = parameters[index - 1].ParameterType;
label_20:
            switch (2)
            {
              case 0:
                goto label_20;
              default:
                DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, methodInfo.ReturnType, parameterTypes, typeFromHandle, true);
                ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
                ilGenerator.Emit(OpCodes.Ldarg_0);
                if (length > 1)
                {
label_22:
                  switch (7)
                  {
                    case 0:
                      goto label_22;
                    default:
                      ilGenerator.Emit(OpCodes.Ldarg_1);
                      break;
                  }
                }
                if (length > 2)
                {
label_25:
                  switch (7)
                  {
                    case 0:
                      goto label_25;
                    default:
                      ilGenerator.Emit(OpCodes.Ldarg_2);
                      break;
                  }
                }
                if (length > 3)
                {
label_28:
                  switch (6)
                  {
                    case 0:
                      goto label_28;
                    default:
                      ilGenerator.Emit(OpCodes.Ldarg_3);
                      break;
                  }
                }
                if (length > 4)
                {
label_31:
                  switch (4)
                  {
                    case 0:
                      goto label_31;
                    default:
                      for (int index = 4; index < length; ++index)
                        ilGenerator.Emit(OpCodes.Ldarg_S, index);
label_35:
                      switch (2)
                      {
                        case 0:
                          goto label_35;
                      }
                      break;
                  }
                }
                ilGenerator.Emit(field.IsFamilyOrAssembly ? OpCodes.Callvirt : OpCodes.Call, methodInfo);
                ilGenerator.Emit(OpCodes.Ret);
                @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
                break;
            }
          }
          field.SetValue((object) null, (object) @delegate);
        }
        catch (Exception ex)
        {
        }
      }
label_42:
      switch (6)
      {
        case 0:
          goto label_42;
      }
    }
  }
}
