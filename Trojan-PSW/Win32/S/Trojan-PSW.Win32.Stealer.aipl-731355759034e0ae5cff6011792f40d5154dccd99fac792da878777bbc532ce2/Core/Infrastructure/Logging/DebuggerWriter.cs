// Decompiled with JetBrains decompiler
// Type: Core.Infrastructure.Logging.DebuggerWriter
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;

namespace Core.Infrastructure.Logging
{
  [DebuggerStepThrough]
  public class DebuggerWriter : TextWriter, ILogWriter
  {
    private bool isOpen;
    private static UnicodeEncoding encoding;
    private readonly int level;
    private readonly string category;

    public DebuggerWriter()
      : this(0, Debugger.DefaultCategory)
    {
    }

    public DebuggerWriter(int level, string category)
      : this(level, category, (IFormatProvider) CultureInfo.CurrentCulture)
    {
    }

    public DebuggerWriter(int level, string category, IFormatProvider formatProvider)
      : base(formatProvider)
    {
      this.level = level;
      this.category = category;
      this.isOpen = true;
    }

    protected override void Dispose(bool disposing)
    {
      this.isOpen = false;
      base.Dispose(disposing);
    }

    public override void Write(char value)
    {
      if (!this.isOpen)
        throw new ObjectDisposedException((string) null);
      Debugger.Log(this.level, this.category, value.ToString());
    }

    public override void Write(string value)
    {
      if (!this.isOpen)
        throw new ObjectDisposedException((string) null);
      if (value == null)
        return;
      Debugger.Log(this.level, this.category, value);
    }

    public override void Write(char[] buffer, int index, int count)
    {
      if (!this.isOpen)
        throw new ObjectDisposedException((string) null);
      if (buffer == null || index < 0 || count < 0 || buffer.Length - index < count)
        base.Write(buffer, index, count);
      Debugger.Log(this.level, this.category, new string(buffer, index, count));
    }

    public override Encoding Encoding
    {
      get
      {
        if (DebuggerWriter.encoding == null)
          DebuggerWriter.encoding = new UnicodeEncoding(false, false);
        return (Encoding) DebuggerWriter.encoding;
      }
    }

    public int Level => this.level;

    public string Category => this.category;

    public TextWriter Get() => (TextWriter) this;
  }
}
