// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: Yx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 400FF0AC-C9F5-4D3D-92AD-97AFF85F6668
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-3ae1c8125ddc0d024ac1f14b9ba78e44f10bfc281ca7e9c68cec7db8af6ee9b3.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -957229919;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -912519497)) % 12U)
        {
          case 0:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -820885208 ^ 81516959;
            continue;
          case 1:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * -177578963 ^ 415854069;
            continue;
          case 2:
            num1 = (int) num2 * 1355029709 ^ -73200519;
            continue;
          case 4:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1956223007 ^ 1967322929;
            continue;
          case 5:
            num1 = (int) num2 * 1790085367 ^ -1751294813;
            continue;
          case 6:
            num1 = (int) num2 * -2073783269 ^ 2140986601;
            continue;
          case 7:
            flag = x == Pieces.King;
            num1 = (int) num2 * 995019051 ^ 1749103491;
            continue;
          case 8:
            this.b.DisableTurns = true;
            num1 = -20510590;
            continue;
          case 9:
            int num3 = !flag ? 790553099 : (num3 = 293252973);
            num1 = num3 ^ (int) num2 * -2012052760;
            continue;
          case 10:
            this.b.ClearBoard();
            num1 = (int) num2 * 490755333 ^ 427771948;
            continue;
          case 11:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_13:
      this.b.lights.FindAllMoves();
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 496642569;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 915152436)) % 11U)
        {
          case 0:
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * -1065785780 ^ -247403056;
            continue;
          case 1:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -50897473 ^ -250962307;
            continue;
          case 2:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 1927622478 ^ -778800007;
            continue;
          case 3:
            this.b.ClearBoard();
            num1 = (int) num2 * -14448878 ^ -1851042106;
            continue;
          case 4:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 76400195 ^ -1397672043;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 1725410273 ^ 1242525236;
            continue;
          case 7:
            num1 = (int) num2 * -1755378904 ^ -160273805;
            continue;
          case 8:
            goto label_3;
          case 9:
            this.b.addBlack(4, 6, Pieces.Pawn);
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 1404457768 ^ 1608558835;
            continue;
          case 10:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * -1990943179 ^ 1303679031;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPromotion()
    {
      this.b.ClearBoard();
      this.b.addBlack(4, 1, Pieces.Pawn);
label_1:
      int num1 = -1728481532;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1907785549)) % 7U)
        {
          case 0:
            this.b.addWhite(4, 6, Pieces.Pawn);
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * 7952679 ^ -695222458;
            continue;
          case 1:
            num1 = (int) num2 * 1657635252 ^ -1094235049;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 545536888 ^ -1546243766;
            continue;
          case 5:
            num1 = (int) num2 * -1973505596 ^ -555062599;
            continue;
          case 6:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 104431017 ^ 1823994107;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this.b.lights.FindAllMoves();
    }

    internal void TestCastling()
    {
label_1:
      int num1 = 1030577579;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1987235506)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * -617849147 ^ 1971560986;
            continue;
          case 2:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1035425924 ^ 1846653945;
            continue;
          case 3:
            this.b.addBlack(7, 7, Pieces.Rook);
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 12112744 ^ -515479858;
            continue;
          case 4:
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(7, 0, Pieces.Rook);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1801369509 ^ -162945423;
            continue;
          case 5:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1625950814 ^ -1934697778;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 1797387126 ^ 1671305032;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestDiscoverCheck()
    {
      this.b.ClearBoard();
      this.b.addWhite(4, 0, Pieces.King);
      this.b.addWhite(3, 1, Pieces.Pawn);
      this.b.addBlack(0, 4, Pieces.Bishop);
label_1:
      int num1 = 1892868369;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 388697870)) % 4U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1434785709 ^ -614278781;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1359063993 ^ -757034367;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -437818731;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -37570776)) % 8U)
        {
          case 0:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * 412477053 ^ -2128604734;
            continue;
          case 1:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1212528162 ^ 234338029;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -2072488460 ^ 1671108679;
            continue;
          case 3:
            num1 = (int) num2 * 1958702650 ^ 1391378094;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 22457164 ^ 506896237;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * -2131055946 ^ 1311905572;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 643571103;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 842486952)) % 14U)
        {
          case 0:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 614977730 ^ 783162819;
            continue;
          case 1:
            num1 = (int) num2 * -1889192074 ^ 32326837;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * -342936048 ^ 548263472;
            continue;
          case 4:
            this.b.addBlack(7, 7, Pieces.Rook);
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -709413625 ^ 1000197234;
            continue;
          case 5:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -2104388268 ^ 419027393;
            continue;
          case 6:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1762563645 ^ -231482828;
            continue;
          case 7:
            this.b.ClearBoard();
            num1 = (int) num2 * -2135296885 ^ -634207110;
            continue;
          case 8:
            num1 = (int) num2 * 772917161 ^ -2112545914;
            continue;
          case 10:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1406175983 ^ 1902348170;
            continue;
          case 11:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -201619809 ^ 249046413;
            continue;
          case 12:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 104644485 ^ 504916947;
            continue;
          case 13:
            num1 = (int) num2 * 137749613 ^ 1148223980;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      this.b.lights.FindAllMoves();
    }
  }
}
