// Decompiled with JetBrains decompiler
// Type: c0T.Ap0
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using Dx4;
using System;
using System.ComponentModel;
using System.Data.Linq.Mapping;
using System.Runtime.InteropServices;
using System.Threading;

namespace c0T
{
  [Table(Name = "dbo.attend")]
  public class Ap0 : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs Ⴈ = new PropertyChangingEventArgs(string.Empty);
    private string _attendance_id;
    private string _people_id;
    private DateTime _current_date;
    private TimeSpan? _time_in;
    private TimeSpan? _time_out;
    private TimeSpan? _lunch_in;
    private TimeSpan? _lunch_out;
    private PropertyChangedEventHandler Ⴐ;
    private Tf6.Qo9 Ⴃ = new Tf6.Qo9();

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", IsPrimaryKey = true, Storage = "_attendance_id")]
    public string Ⴃ
    {
      get => (object) this._attendance_id as string;
      [param: In] set
      {
        if (string.Equals(this._attendance_id, value))
          return;
        this.s0T();
        this._attendance_id = value;
        this.Dr8("attendance_id");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_id")]
    public string Ⴀ
    {
      get => (IConvertible) this._people_id as string;
      [param: In] set
      {
        if (string.Equals(this._people_id, value))
          return;
        this.s0T();
        this._people_id = value;
        this.Dr8("people_id");
      }
    }

    [Column(DbType = "Date NOT NULL", Name = "[current_date]", Storage = "_current_date")]
    public DateTime Ⴀ
    {
      get => this._current_date;
      [param: In] set
      {
        if (DateTime.Compare(this._current_date, value) == 0)
          return;
        this.s0T();
        this._current_date = value;
        this.Dr8("current_date");
      }
    }

    [Column(DbType = "Time", Storage = "_time_in")]
    public TimeSpan? Ⴀ
    {
      get => this._time_in;
      [param: In] set
      {
        if (this._time_in.Equals((object) value))
          return;
        this.s0T();
        this._time_in = value;
        this.Dr8("time_in");
      }
    }

    [Column(DbType = "Time", Storage = "_time_out")]
    public TimeSpan? Ⴓ
    {
      get => this._time_out;
      [param: In] set
      {
        if (this._time_out.Equals((object) value))
          return;
        this.s0T();
        this._time_out = value;
        this.Dr8("time_out");
      }
    }

    [Column(DbType = "Time", Storage = "_lunch_in")]
    public TimeSpan? Ⴈ
    {
      get => this._lunch_in;
      [param: In] set
      {
        if (this._lunch_in.Equals((object) value))
          return;
        this.s0T();
        this._lunch_in = value;
        this.Dr8("lunch_in");
      }
    }

    [Column(DbType = "Time", Storage = "_lunch_out")]
    public TimeSpan? Ⴗ
    {
      get => this._lunch_out;
      [param: In] set
      {
        if (this._lunch_out.Equals((object) value))
          return;
        this.s0T();
        this._lunch_out = value;
        this.Dr8("lunch_out");
      }
    }

    public event PropertyChangingEventHandler Ⴐ
    {
      add
      {
        object obj = (object) this.Ⴃ.Ⴅ;
        object comparand;
        do
        {
          comparand = (object) (obj as PropertyChangingEventHandler);
          obj = (object) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴃ.Ⴅ, (MulticastDelegate) ((comparand as PropertyChangingEventHandler) + value) as PropertyChangingEventHandler, comparand as PropertyChangingEventHandler);
        }
        while ((PropertyChangingEventHandler) obj != comparand as PropertyChangingEventHandler);
      }
      remove
      {
        MulticastDelegate multicastDelegate1 = (MulticastDelegate) this.Ⴃ.Ⴅ;
        MulticastDelegate multicastDelegate2;
        do
        {
          multicastDelegate2 = (MulticastDelegate) (multicastDelegate1 as PropertyChangingEventHandler);
          multicastDelegate1 = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴃ.Ⴅ, (object) (PropertyChangingEventHandler) Delegate.Remove((Delegate) multicastDelegate2, (Delegate) value) as PropertyChangingEventHandler, multicastDelegate2 as PropertyChangingEventHandler);
        }
        while ((PropertyChangingEventHandler) multicastDelegate1 != multicastDelegate2 as PropertyChangingEventHandler);
      }
    }

    public event PropertyChangedEventHandler Ⴓ
    {
      add
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴐ;
        MulticastDelegate comparand;
        do
        {
          comparand = (MulticastDelegate) (multicastDelegate as PropertyChangedEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴐ, (object) ((comparand as PropertyChangedEventHandler) + value) as PropertyChangedEventHandler, comparand as PropertyChangedEventHandler);
        }
        while (multicastDelegate as PropertyChangedEventHandler != (PropertyChangedEventHandler) comparand);
      }
      remove
      {
        object obj = (object) this.Ⴐ;
        MulticastDelegate comparand;
        do
        {
          comparand = (MulticastDelegate) obj;
          obj = (object) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴐ, (comparand as PropertyChangedEventHandler) - value, comparand as PropertyChangedEventHandler);
        }
        while ((PropertyChangedEventHandler) obj != (PropertyChangedEventHandler) comparand);
      }
    }

    protected virtual void s0T()
    {
      if (this.Ⴃ.Ⴅ == null)
        return;
      MulticastDelegate ⴅ = (MulticastDelegate) this.Ⴃ.Ⴅ;
      if ((PropertyChangingEventHandler) ⴅ == null)
        return;
      ((PropertyChangingEventHandler) ⴅ)((object) this, Ap0.Ⴈ);
    }

    protected virtual void Dr8([In] string obj0)
    {
      if (this.Ⴐ == null)
        return;
      object ⴐ = (object) this.Ⴐ;
      if ((PropertyChangedEventHandler) ⴐ == null)
        return;
      (ⴐ as PropertyChangedEventHandler)((object) this, new PropertyChangedEventArgs(obj0));
    }
  }
}
