// Decompiled with JetBrains decompiler
// Type: jd.xg
// Assembly: RuntimeFieldI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3177D6BF-0678-437F-AD25-445C5521A270
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4e662e06b02d9a2d6b61135dedc905b8bc0ad6107d655cb2448b7eedfbf9c5b6.exe

using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace jd
{
  [DefaultMember("Item")]
  public class xg : UM
  {
    private double[] yv5;
    internal static xg oNu;

    public xg(int _param1)
    {
      gs.JD3Ei4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num = 0;
      if (false)
        num = 0;
      switch (num)
      {
        default:
          this.yv5 = new double[_param1];
          break;
      }
    }

    public xg(double[] _param1)
    {
      xg.ONv();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.yv5 = new double[_param1.Length];
      int index = 0;
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            ++index;
            goto case 2;
          case 2:
            if (index < _param1.Length)
              break;
            goto label_4;
        }
        this.yv5[index] = _param1[index];
        int num2;
        num1 = true ? 1 : num2;
      }
label_4:;
    }

    public xg(UM _param1)
    {
      xg.ONv();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num1 = 0;
      if (true)
        num1 = 0;
      while (true)
      {
        int index;
        switch (num1)
        {
          case 1:
            index = 0;
            break;
          case 2:
            ++index;
            break;
          default:
            this.yv5 = new double[_param1.afb()];
            int num2;
            num1 = true ? 1 : num2;
            continue;
        }
        if (index < _param1.afb())
        {
          this.yv5[index] = xg.ON9((object) _param1, index);
          num1 = 2;
        }
        else
          break;
      }
    }

    public xg(xg _param1)
    {
      gs.JD3Ei4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.yv5 = new double[_param1.Wve()];
      int index = 0;
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 1:
            goto label_4;
          default:
            if (index >= _param1.Wve())
            {
              num = true ? 1 : 1;
              continue;
            }
            this.yv5[index] = _param1.Qvc(index);
            ++index;
            num = false ? 0 : 0;
            continue;
        }
      }
label_4:;
    }

    void UM.DfQ()
    {
      try
      {
        int index = 0;
        int num1 = 1;
        if (xg.eNs())
          goto label_4;
label_3:
        int num2;
        num1 = num2;
label_4:
        while (true)
        {
          bool flag;
          switch (num1)
          {
            case 1:
            case 2:
              flag = index < this.yv5.Length;
              num1 = (object) xg.MNZ() == null ? 3 : 3;
              continue;
            case 3:
              if (flag)
              {
                if (index == 0)
                  goto label_10;
label_6:
                if (index != this.yv5.Length - 1)
                {
                  Console.Write("{0}, ", (object) this.yv5[index]);
                  num1 = (object) xg.MNZ() != null ? 0 : 0;
                  continue;
                }
                xg.mNJ((object) "{0}]", (object) this.yv5[index]);
                break;
label_10:
                Console.Write("[");
                goto label_6;
              }
              else
                goto label_14;
          }
          ++index;
          if (xg.eNs())
            num1 = 2;
          else
            goto label_3;
        }
label_14:;
      }
      catch (NullReferenceException ex)
      {
        xg.VNB((object) "Empty Vect massive!");
      }
    }

    int UM.Diploma\u002Eentity\u002EIVector\u002Elength => this.yv5.Length;

    double UM.this[int _param1]
    {
      get => this.yv5[_param1];
      set => this.yv5[_param1] = value;
    }

    double UM.JfU()
    {
      double num1 = 0.0;
      try
      {
        int index = 0;
        while (true)
        {
          if (index < this.yv5.Length)
            goto label_11;
          else
            goto label_12;
label_6:
          int num2;
          switch (num2)
          {
            case 1:
              break;
            default:
              goto label_2;
          }
label_10:
          ++index;
          continue;
label_11:
          if (Math.Abs(this.yv5[index]) > num1)
          {
            num1 = Math.Abs(this.yv5[index]);
            num2 = 1;
            if ((object) xg.MNZ() == null)
            {
              num2 = 1;
              goto label_6;
            }
            else
              goto label_6;
          }
          else
            goto label_10;
label_12:
          int num3;
          num2 = xg.eNs() ? 0 : num3;
          goto label_6;
        }
      }
      catch (NullReferenceException ex)
      {
        Console.WriteLine("Empty Vect massive!");
      }
label_2:
      double num4 = num1;
      int num5 = 0;
      if (!xg.eNs())
        goto label_3;
label_1:
      switch (num5)
      {
        default:
          return num4;
      }
label_3:
      num5 = 0;
      goto label_1;
    }

    [SpecialName]
    public int Wve() => this.yv5.Length;

    public void Gvu()
    {
      try
      {
        int index = 0;
        while (true)
        {
          if (index < this.yv5.Length)
            goto label_5;
          else
            goto label_7;
label_2:
          int num1;
          switch (num1)
          {
            case 1:
              goto label_5;
            case 2:
              goto label_14;
            case 3:
              Console.Write("{0}, ", (object) this.yv5[index]);
              goto label_8;
            default:
              xg.gN5((object) "[");
              break;
          }
label_3:
          if (index != this.yv5.Length - 1)
          {
            num1 = 3;
            goto label_2;
          }
          else
          {
            Console.WriteLine("{0}]", (object) this.yv5[index]);
            goto label_8;
          }
label_5:
          if (index == 0)
          {
            int num2;
            num1 = (object) xg.MNZ() == null ? 0 : num2;
            goto label_2;
          }
          else
            goto label_3;
label_7:
          num1 = 2;
          goto label_2;
label_8:
          ++index;
        }
label_14:;
      }
      catch (NullReferenceException ex)
      {
        xg.VNB((object) "Empty Vect massive!");
      }
    }

    public override string ToString()
    {
      string str = "[";
      int index = 0;
      while (true)
      {
        bool flag1 = index < this.yv5.Length;
        int num1 = 0;
        if (xg.eNs())
          goto label_2;
label_1:
        int num2;
        num1 = num2;
label_2:
        bool flag2;
        while (true)
        {
          switch (num1)
          {
            case 1:
              goto label_6;
            case 2:
              goto label_3;
            case 3:
              flag2 = index != this.yv5.Length - 1;
              if (xg.eNs())
              {
                num1 = 2;
                continue;
              }
              goto label_1;
            default:
              if (!flag1)
              {
                str += "]";
                if (xg.eNs())
                {
                  num1 = 1;
                  continue;
                }
                goto label_1;
              }
              else
              {
                str += this.yv5[index].ToString();
                num1 = !xg.eNs() ? 2 : 3;
                continue;
              }
          }
        }
label_3:
        if (flag2)
          str += ", ";
        ++index;
      }
label_6:
      return str;
    }

    [SpecialName]
    public double Qvc(int _param1) => this.yv5[_param1];

    [SpecialName]
    public void evT(int _param1, double _param2) => this.yv5[_param1] = _param2;

    public double IvH()
    {
      double num1 = 0.0;
      try
      {
        int index = 0;
label_7:
        if (index < this.yv5.Length)
          goto label_6;
        else
          goto label_5;
label_3:
        int num2;
        int num3 = num2;
label_4:
        switch (num3)
        {
          case 1:
            goto label_7;
          default:
            goto label_9;
        }
label_5:
        if (xg.eNs())
        {
          num3 = 0;
          goto label_4;
        }
        else
          goto label_3;
label_6:
        num1 += Math.Abs(this.yv5[index]);
        ++index;
        num3 = 1;
        if (xg.eNs())
          goto label_4;
        else
          goto label_3;
      }
      catch (NullReferenceException ex)
      {
        Console.WriteLine("Empty Vect massive!");
      }
label_9:
      return num1;
    }

    public static xg operator +(xg _param0, xg _param1)
    {
      if (_param0.yv5.Length == _param1.yv5.Length)
        goto label_3;
      else
        goto label_6;
label_1:
      double[] numArray;
      int num1;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_2;
          case 2:
            goto label_8;
          default:
            for (int index = 0; index < _param0.yv5.Length; ++index)
              numArray[index] = _param0.yv5[index] + _param1.yv5[index];
            int num2;
            num1 = xg.eNs() ? 2 : num2;
            continue;
        }
      }
label_2:
      throw new ArgumentException("not similar dim");
label_8:
      return new xg(numArray);
label_3:
      numArray = new double[_param0.yv5.Length];
      num1 = 0;
      if (xg.eNs())
      {
        num1 = 0;
        goto label_1;
      }
      else
        goto label_1;
label_6:
      num1 = !xg.eNs() ? 0 : 1;
      goto label_1;
    }

    public static xg operator -(xg _param0, xg _param1)
    {
      if (_param0.yv5.Length != _param1.yv5.Length)
        throw new ArgumentException("not similar dim");
      double[] numArray = new double[_param0.yv5.Length];
      int index = 0;
label_11:
      bool flag = index < _param0.yv5.Length;
      int num1 = 1;
      if ((object) xg.MNZ() == null)
        goto label_2;
label_1:
      int num2;
      num1 = num2;
label_2:
      while (true)
      {
        switch (num1)
        {
          case 1:
            if (flag)
            {
              numArray[index] = _param0.yv5[index] - _param1.yv5[index];
              if ((object) xg.MNZ() == null)
              {
                num1 = 2;
                continue;
              }
              goto label_1;
            }
            else
              goto label_8;
          case 2:
            ++index;
            if ((object) xg.MNZ() == null)
            {
              num1 = 3;
              continue;
            }
            goto label_1;
          case 3:
            goto label_11;
          default:
            goto label_10;
        }
      }
label_8:
      xg xg = new xg(numArray);
label_10:
      return xg;
    }

    public static xg operator *(double _param0, xg _param1)
    {
      double[] numArray = new double[_param1.yv5.Length];
      int index = 0;
label_4:
      if (index < _param1.yv5.Length)
        goto label_8;
      else
        goto label_6;
label_1:
      int num1;
      int num2 = num1;
label_2:
      xg xg;
      while (true)
      {
        switch (num2)
        {
          case 1:
            xg = new xg(numArray);
            if ((object) xg.MNZ() == null)
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          case 2:
            goto label_4;
          default:
            goto label_3;
        }
      }
label_3:
      return xg;
label_6:
      num2 = (object) xg.MNZ() == null ? 1 : 1;
      goto label_2;
label_8:
      numArray[index] = _param0 * _param1.yv5[index];
      ++index;
      num1 = 2;
      goto label_1;
    }

    public static xg operator *(int _param0, xg _param1)
    {
      int num1 = 3;
label_1:
      int num2 = num1;
      double[] numArray;
      while (true)
      {
        int index;
        switch (num2)
        {
          case 1:
            ++index;
            num2 = (object) xg.MNZ() == null ? 0 : 0;
            continue;
          case 2:
            index = 0;
            break;
          case 3:
            numArray = new double[_param1.yv5.Length];
            num2 = 2;
            continue;
        }
        if (index < _param1.yv5.Length)
        {
          numArray[index] = (double) _param0 * _param1.yv5[index];
          if ((object) xg.MNZ() == null)
            num2 = 1;
          else
            goto label_1;
        }
        else
          break;
      }
      return new xg(numArray);
    }

    public static double operator *(xg _param0, xg _param1)
    {
      int num1 = 1;
      bool flag;
      int index;
      double num2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            flag = _param0.yv5.Length != _param1.yv5.Length;
            num1 = !xg.eNs() ? 0 : 0;
            continue;
          case 2:
            if (index >= _param0.yv5.Length)
              goto label_6;
            else
              goto case 4;
          case 3:
            index = 0;
            goto case 2;
          case 4:
            num2 += _param0.yv5[index] * _param1.yv5[index];
            ++index;
            num1 = (object) xg.MNZ() != null ? 1 : 2;
            continue;
          default:
            if (!flag)
            {
              num2 = 0.0;
              num1 = 3;
              continue;
            }
            goto label_8;
        }
      }
label_6:
      return num2;
label_8:
      throw new ArgumentException("not similar dim");
    }

    public static bool operator ==(xg _param0, xg _param1)
    {
      int num1 = 3;
label_1:
      int num2 = num1;
      int index;
      bool flag;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_9;
          case 2:
            if (!flag)
            {
              num2 = 4;
              continue;
            }
            goto label_11;
          case 3:
            flag = (object) _param0 == (object) _param1;
            if (xg.eNs())
            {
              num2 = 2;
              continue;
            }
            goto label_1;
          case 4:
            if ((object) _param0 == null || (object) _param1 == null)
            {
              if (xg.eNs())
              {
                num2 = 1;
                continue;
              }
              goto label_1;
            }
            else
              goto case 7;
          case 5:
            goto label_3;
          case 6:
            if (index < _param0.yv5.Length)
            {
              if (_param0.yv5[index] != _param1.yv5[index])
              {
                num2 = 5;
                continue;
              }
              goto default;
            }
            else
              goto label_10;
          case 7:
            index = 0;
            num2 = (object) xg.MNZ() != null ? 5 : 6;
            continue;
          default:
            ++index;
            goto case 6;
        }
      }
label_3:
      return false;
label_9:
      return false;
label_10:
      return true;
label_11:
      return true;
    }

    public static bool operator !=(xg _param0, xg _param1) => !xg.SNd((object) _param0, (object) _param1);

    public bool tvr(xg _param1)
    {
      int index = 0;
      bool flag;
      while (index < _param1.yv5.Length)
      {
label_7:
        if (_param1.yv5[index] == this.yv5[index])
          goto label_9;
        else
          goto label_6;
label_1:
        int num1;
        int num2 = num1;
label_2:
        switch (num2)
        {
          case 1:
            goto label_7;
          case 2:
            continue;
          default:
            goto label_3;
        }
label_6:
        flag = false;
        if (xg.eNs())
        {
          num2 = 0;
          goto label_2;
        }
        else
          goto label_1;
label_9:
        ++index;
        num2 = 2;
        if ((object) xg.MNZ() == null)
          goto label_2;
        else
          goto label_1;
      }
      goto label_4;
label_3:
      return flag;
label_4:
      flag = true;
      goto label_3;
    }

    public override int GetHashCode()
    {
      int num1 = 0;
      int index = 0;
      int num2 = 0;
      if (!xg.eNs())
        goto label_5;
label_1:
      int hashCode;
      switch (num2)
      {
        case 1:
          num1 = 31 * num1 + this.yv5[index].GetHashCode();
          ++index;
          goto default;
        case 2:
          return hashCode;
        default:
          if (index >= this.yv5.Length)
          {
            hashCode = num1;
            goto case 2;
          }
          else
            goto case 1;
      }
label_5:
      int num3;
      num2 = num3;
      goto label_1;
    }

    internal static bool eNs() => (object) xg.oNu == null;

    internal static xg MNZ() => xg.oNu;

    internal static void ONv() => gs.JD3Ei4();

    internal static double ON9([In] object obj0, int _param1) => ((UM) obj0).zfZ(_param1);

    internal static void mNJ([In] object obj0, [In] object obj1) => Console.WriteLine((string) obj0, obj1);

    internal static void VNB([In] object obj0) => Console.WriteLine((string) obj0);

    internal static void gN5([In] object obj0) => Console.Write((string) obj0);

    internal static bool SNd([In] object obj0, [In] object obj1) => (xg) obj0 == (xg) obj1;
  }
}
