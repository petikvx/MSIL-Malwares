// Decompiled with JetBrains decompiler
// Type: Microsoft.Exchange.OMA.Unsupported.OmaBrowseInstall.ServerStrings
// Assembly: OmaBrowseInstall, Version=6.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 1551535E-661F-42F0-81A3-B6A9484A2B9D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Virus.Win32.Small.l-663b3b2e6b8cbb3371ba997be0422b59723f4a920b855a82c21bc407dd6b0ec4.exe

using System;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Threading;

namespace Microsoft.Exchange.OMA.Unsupported.OmaBrowseInstall
{
  public class ServerStrings
  {
    private static CultureInfo m_Culture = (CultureInfo) null;
    private static bool loading = false;
    private static ServerStrings loader = (ServerStrings) null;
    private ResourceManager resources;

    public static CultureInfo Culture
    {
      get => ServerStrings.m_Culture == null ? Thread.CurrentThread.CurrentUICulture : ServerStrings.m_Culture;
      set => ServerStrings.m_Culture = value;
    }

    public static string Perf_CategoryName => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CategoryName));

    public static string Perf_CategoryHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CategoryHelp));

    public static string Perf_BrowseCount => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_BrowseCount));

    public static string Perf_BrowseCountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_BrowseCountHelp));

    public static string Perf_BrowsesRate => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_BrowsesRate));

    public static string Perf_BrowsesRateHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_BrowsesRateHelp));

    public static string Perf_ResponseTime => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ResponseTime));

    public static string Perf_ResponseTimeHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ResponseTimeHelp));

    public static string Perf_ResponseTimeAverage => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ResponseTimeAverage));

    public static string Perf_ResponseTimeAverageHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ResponseTimeAverageHelp));

    public static string Perf_InternalResponseTimeAverage => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_InternalResponseTimeAverage));

    public static string Perf_InternalResponseTimeAverageHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_InternalResponseTimeAverageHelp));

    public static string Perf_CalendarCount => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CalendarCount));

    public static string Perf_CalendarCountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CalendarCountHelp));

    public static string Perf_CalendarRate => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CalendarRate));

    public static string Perf_CalendarRateHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CalendarRateHelp));

    public static string Perf_InboxCount => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_InboxCount));

    public static string Perf_InboxCountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_InboxCountHelp));

    public static string Perf_InboxRate => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_InboxRate));

    public static string Perf_InboxRateHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_InboxRateHelp));

    public static string Perf_ContactCount => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ContactCount));

    public static string Perf_ContactCountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ContactCountHelp));

    public static string Perf_ContactRate => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ContactRate));

    public static string Perf_ContactRateHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_ContactRateHelp));

    public static string Perf_TaskCount => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_TaskCount));

    public static string Perf_TaskCountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_TaskCountHelp));

    public static string Perf_TaskRate => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_TaskRate));

    public static string Perf_TaskRateHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_TaskRateHelp));

    public static string Perf_CurrentBrowses => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CurrentBrowses));

    public static string Perf_CurrentBrowsesHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_CurrentBrowsesHelp));

    public static string Perf_MaximumBrowses => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_MaximumBrowses));

    public static string Perf_MaximumBrowsesHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_MaximumBrowsesHelp));

    public static string Perf_Status100Count => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status100Count));

    public static string Perf_Status100CountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status100CountHelp));

    public static string Perf_Status200Count => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status200Count));

    public static string Perf_Status200CountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status200CountHelp));

    public static string Perf_Status300Count => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status300Count));

    public static string Perf_Status300CountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status300CountHelp));

    public static string Perf_Status400Count => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status400Count));

    public static string Perf_Status400CountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status400CountHelp));

    public static string Perf_Status500Count => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status500Count));

    public static string Perf_Status500CountHelp => ServerStrings.GetString(ServerStrings.Culture, nameof (Perf_Status500CountHelp));

    public static string Log_EventFWLinkMessage(object arg) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_EventFWLinkMessage), arg);

    public static string Log_EventSource => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_EventSource));

    public static string Log_EventCategory => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_EventCategory));

    public static string Log_EventCategoryId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_EventCategoryId));

    public static string Log_OmaStart => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaStart));

    public static string Log_OmaStartId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaStartId));

    public static string Log_OmaEnd => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaEnd));

    public static string Log_OmaEndId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaEndId));

    public static string Log_OmaNoPerfCounters(object arg) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoPerfCounters), arg);

    public static string Log_OmaNoPerfCountersId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoPerfCountersId));

    public static string Log_OmaBadUserForSession(object arg, object arg1) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaBadUserForSession), arg, arg1);

    public static string Log_OmaBadUserForSessionId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaBadUserForSessionId));

    public static string Log_OmaNoCredentials => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoCredentials));

    public static string Log_OmaNoCredentialsId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoCredentialsId));

    public static string Log_OmaInvalidCredentials => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaInvalidCredentials));

    public static string Log_OmaInvalidCredentialsId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaInvalidCredentialsId));

    public static string Log_OmaUnknownError(object arg, object arg1) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUnknownError), arg, arg1);

    public static string Log_OmaUnknownErrorId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUnknownErrorId));

    public static string Log_OmaBadCredentials(object arg) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaBadCredentials), arg);

    public static string Log_OmaBadCredentialsId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaBadCredentialsId));

    public static string Log_OmaNoShortDomain(object arg, object arg1) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoShortDomain), arg, arg1);

    public static string Log_OmaNoShortDomainId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoShortDomainId));

    public static string Log_OmaUnknownErrorOneInner(
      object arg,
      object arg1,
      object arg2,
      object arg3)
    {
      return ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUnknownErrorOneInner), arg, arg1, arg2, arg3);
    }

    public static string Log_OmaUnknownErrorOneInnerId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUnknownErrorOneInnerId));

    public static string Log_OmaUnknownErrorTwoInner(
      object arg,
      object arg1,
      object arg2,
      object arg3,
      object arg4,
      object arg5)
    {
      return ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUnknownErrorTwoInner), arg, arg1, arg2, arg3, arg4, arg5);
    }

    public static string Log_OmaUnknownErrorTwoInnerId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUnknownErrorTwoInnerId));

    public static string Log_OmaUserNotEnabled(object arg) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUserNotEnabled), arg);

    public static string Log_OmaUserNotEnabledId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaUserNotEnabledId));

    public static string Log_OmaErrorNoInfo => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaErrorNoInfo));

    public static string Log_OmaErrorNoInfoId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaErrorNoInfoId));

    public static string Log_OmaNoDefaultDomain(object arg, object arg1, object arg2) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoDefaultDomain), arg, arg1, arg2);

    public static string Log_OmaNoDefaultDomainId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaNoDefaultDomainId));

    public static string Log_OmaMetabaseRead(object arg, object arg1) => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaMetabaseRead), arg, arg1);

    public static string Log_OmaMetabaseReadId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_OmaMetabaseReadId));

    public static string Log_InvalidAuthorizationHeader => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_InvalidAuthorizationHeader));

    public static string Log_InvalidAuthorizationHeaderId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_InvalidAuthorizationHeaderId));

    public static string Log_ExceptionDecodeAuthorizationHeader => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_ExceptionDecodeAuthorizationHeader));

    public static string Log_ExceptionDecodeAuthorizationHeaderId => ServerStrings.GetString(ServerStrings.Culture, nameof (Log_ExceptionDecodeAuthorizationHeaderId));

    public static string ErrorPage_DefaultIdForServerErrors => ServerStrings.GetString(ServerStrings.Culture, nameof (ErrorPage_DefaultIdForServerErrors));

    public static string ErrorPage_SystemErrorTitle => ServerStrings.GetString(ServerStrings.Culture, nameof (ErrorPage_SystemErrorTitle));

    public static string ErrorPage_SystemErrorMessage => ServerStrings.GetString(ServerStrings.Culture, nameof (ErrorPage_SystemErrorMessage));

    public static string ErrorPage_NotEnabledTitle => ServerStrings.GetString(ServerStrings.Culture, nameof (ErrorPage_NotEnabledTitle));

    public static string ErrorPage_NotEnabledMessage => ServerStrings.GetString(ServerStrings.Culture, nameof (ErrorPage_NotEnabledMessage));

    protected ServerStrings() => this.resources = new ResourceManager(nameof (ServerStrings), Assembly.Load("Microsoft.Exchange.OMA.UISvr"));

    private static ServerStrings GetLoader()
    {
      if (ServerStrings.loader == null && !ServerStrings.loading)
      {
        lock (typeof (ServerStrings))
        {
          if (ServerStrings.loader == null)
          {
            if (!ServerStrings.loading)
            {
              ServerStrings.loading = true;
              try
              {
                ServerStrings.loader = new ServerStrings();
              }
              finally
              {
                ServerStrings.loading = false;
              }
            }
          }
        }
      }
      return ServerStrings.loader;
    }

    public static string GetString(string name, params object[] args) => ServerStrings.GetString(ServerStrings.Culture, name, args);

    public static string GetString(CultureInfo culture, string name, params object[] args)
    {
      ServerStrings loader = ServerStrings.GetLoader();
      if (loader == null)
        return (string) null;
      string format = loader.resources.GetString(name, culture);
      return args != null && args.Length > 0 ? string.Format((IFormatProvider) culture, format, args) : format;
    }

    public static string GetString(string name) => ServerStrings.GetString(ServerStrings.Culture, name);

    public static string GetString(CultureInfo culture, string name) => ServerStrings.GetLoader()?.resources.GetString(name, culture);
  }
}
