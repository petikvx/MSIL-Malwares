// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 1, Version=8.93.47.49, Culture=neutral, PublicKeyToken=null
// MVID: DFA8ED2E-5616-44FF-892B-A77949B35FF3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Foreign.mxlc-0e45041763d0a87cf14d630d0ef61ca2fbfdc37f1c8a9944dd0c3cfd1cf0aa8a.exe

using \u0004;
using \u0006;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Xml;

namespace \u0002
{
  internal class \u0003 : \u000E.\u0004
  {
    private readonly Exception \u0001;
    private readonly Guid \u0001;
    internal readonly char[] \u0001 = new char[0];
    private readonly Dictionary<string, object> \u0001 = new Dictionary<string, object>();
    private readonly Dictionary<string, \u0002.\u0003.\u0001> \u0001 = new Dictionary<string, \u0002.\u0003.\u0001>();
    internal readonly XmlWriter \u0001;
    private readonly List<\u000E.\u0005> \u0001 = new List<\u000E.\u0005>();
    private readonly List<string> \u0001 = new List<string>();
    private readonly Dictionary<string, int> \u0001 = new Dictionary<string, int>();
    internal readonly List<\u0002.\u0003.\u0002> \u0001 = new List<\u0002.\u0003.\u0002>();
    internal readonly Dictionary<string, int> \u0002 = new Dictionary<string, int>();
    private readonly MemoryStream \u0001;
    private byte[] \u0001;
    internal \u0001 \u0001;
    internal EventHandler \u0001;

    public \u0003([In] Guid obj0, [In] Exception obj1, [In] IWebProxy obj2)
    {
      this.\u0001 = obj0;
      this.\u0001 = obj1;
      this.\u0001 = new MemoryStream();
      this.\u0001 = (XmlWriter) new XmlTextWriter((Stream) this.\u0001, (Encoding) new UTF8Encoding(false));
      base.\u0001 = obj2;
      string upper;
      if ((upper = \u000E.\u0003.\u0001(7444).ToUpper()) == null)
        return;
      if (!(upper == \u000E.\u0003.\u0001(7457)))
      {
        if (!(upper == \u000E.\u0003.\u0001(7444)))
          return;
        this.\u0001 = new char[58]
        {
          '\u0001',
          '\u0002',
          '\u0003',
          '\u0004',
          '\u0005',
          '\u0006',
          '\a',
          '\b',
          '\u000E',
          '\u000F',
          '\u0010',
          '\u0011',
          '\u0012',
          '\u0013',
          '\u0014',
          '\u0015',
          '\u0016',
          '\u0017',
          '\u0018',
          '\u0019',
          '\u001A',
          '\u001B',
          '\u001C',
          '\u001D',
          '\u001E',
          '\u001F',
          '\u007F',
          '\u0080',
          '\u0081',
          '\u0082',
          '\u0083',
          '\u0084',
          '\u0086',
          '\u0087',
          '\u0088',
          '\u0089',
          '\u008A',
          '\u008B',
          '\u008C',
          '\u008D',
          '\u008E',
          '\u008F',
          '\u0090',
          '\u0091',
          '\u0092',
          '\u0093',
          '\u0094',
          '\u0095',
          '\u0096',
          '\u0097',
          '\u0098',
          '\u0099',
          '\u009A',
          '\u009B',
          '\u009C',
          '\u009D',
          '\u009E',
          '\u009F'
        };
      }
      else
        this.\u0001 = new char[62]
        {
          'a',
          'b',
          'c',
          'd',
          'e',
          'f',
          'g',
          'h',
          'i',
          'j',
          'k',
          'l',
          'm',
          'n',
          'o',
          'p',
          'q',
          'r',
          's',
          't',
          'u',
          'v',
          'w',
          'x',
          'y',
          'z',
          'A',
          'B',
          'C',
          'D',
          'E',
          'F',
          'G',
          'H',
          'I',
          'J',
          'K',
          'L',
          'M',
          'N',
          'O',
          'P',
          'Q',
          'R',
          'S',
          'T',
          'U',
          'V',
          'W',
          'X',
          'Y',
          'Z',
          '0',
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9'
        };
    }

    private unsafe void \u0001([In] \u000E.\u0005 obj0, [In] FieldInfo obj1)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      string str1 = (object) obj1 == null ? (string) null : obj1.Name;
      string str2 = (object) obj1 == null ? \u000E.\u0003.\u0001(7475) : \u000E.\u0003.\u0001(7466);
      object obj = obj0.\u0001;
      if (obj == null)
      {
        using (new \u0003.\u0005(this.\u0001, str2))
        {
          if ((object) obj1 != null)
          {
            if (obj1.IsStatic)
              this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7484), \u000E.\u0003.\u0001(6758));
            Type fieldType = obj1.FieldType;
            if ((object) fieldType != null && fieldType.HasElementType)
            {
              this.\u0001(fieldType.GetElementType());
              if (fieldType.IsByRef)
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7493), \u000E.\u0003.\u0001(6758));
              if (fieldType.IsPointer)
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7502), \u000E.\u0003.\u0001(6758));
              if (fieldType.IsArray)
              {
                XmlWriter xmlWriter = this.\u0001;
                string localName = \u000E.\u0003.\u0001(7515);
                *(int*) ((IntPtr) voidPtr + 4) = fieldType.GetArrayRank();
                string str3 = ((int*) ((IntPtr) voidPtr + 4))->ToString();
                xmlWriter.WriteAttributeString(localName, str3);
              }
            }
            else
              this.\u0001(fieldType);
          }
          if (str1 != null)
            this.\u0001(str1);
          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7524), \u000E.\u0003.\u0001(6758));
        }
      }
      else
      {
        Type type = obj0.\u0001.GetType();
        string str4 = (string) null;
        string str5 = (string) null;
        if (obj is string)
          str4 = \u000E.\u0003.\u0001(7533);
        if (str4 == null)
        {
          if (type.IsPrimitive || obj is IntPtr || obj is UIntPtr)
          {
            str4 = type.FullName;
            if (obj is char ch)
            {
              *(int*) voidPtr = (int) ch;
              StringBuilder stringBuilder = new StringBuilder();
              if (*(int*) voidPtr >= 32)
              {
                stringBuilder.Append('\'');
                stringBuilder.Append((char) obj);
                stringBuilder.Append(\u000E.\u0003.\u0001(7554));
              }
              stringBuilder.Append(\u000E.\u0003.\u0001(7559));
              stringBuilder.Append(((int*) voidPtr)->ToString(\u000E.\u0003.\u0001(6959)));
              stringBuilder.Append(')');
              str5 = stringBuilder.ToString();
            }
            if (obj is bool)
              str5 = obj.ToString().ToLower();
            if (str5 == null)
            {
              string str6 = \u0007.\u0001(obj);
              if (str6.Length > 0)
              {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.Append(obj.ToString());
                stringBuilder.Append(\u000E.\u0003.\u0001(7564));
                stringBuilder.Append(str6);
                stringBuilder.Append(')');
                str5 = stringBuilder.ToString();
              }
              else
                str5 = obj.ToString();
            }
          }
          else if (type.IsValueType && (object) type.Module != (object) this.GetType().Module)
            str4 = type.FullName;
        }
        using (new \u0003.\u0005(this.\u0001, str2))
        {
          if ((object) obj1 != null && obj1.IsStatic)
            this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7484), \u000E.\u0003.\u0001(6758));
          if (str4 != null)
          {
            this.\u0001(type);
            if (str1 != null)
              this.\u0001(str1);
            if (type.IsEnum)
              str5 = obj.ToString();
            if (obj is Guid)
              str5 = \u000E.\u0003.\u0001(7053) + obj + \u000E.\u0003.\u0001(7573);
            if (str5 == null)
              str5 = \u000E.\u0003.\u0001(7578) + obj + \u000E.\u0003.\u0001(7578);
            this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7583), \u0007.\u0001(str5));
          }
          else
          {
            if ((object) obj1 != null)
              this.\u0001(obj1.FieldType);
            this.\u0001(obj0);
            if (str1 == null)
              return;
            this.\u0001(str1);
          }
        }
      }
    }

    internal unsafe void \u0001([In] \u000E.\u0005 obj0)
    {
      void* voidPtr;
      do
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(8);
      }
      while (false);
      object objB = obj0.\u0001;
      do
      {
        *(int*) voidPtr = -1;
      }
      while (false);
      *(int*) ((IntPtr) voidPtr + 4) = 0;
      while (*(int*) ((IntPtr) voidPtr + 4) < this.\u0001.Count)
      {
        if (object.ReferenceEquals(this.\u0001[*(int*) ((IntPtr) voidPtr + 4)].\u0001, objB))
        {
          *(int*) voidPtr = *(int*) ((IntPtr) voidPtr + 4);
          if (false)
            goto label_6;
          else
            break;
        }
        else
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
      }
      if (*(int*) voidPtr == -1)
        *(int*) voidPtr = this.\u0001.Count;
      else
        goto label_7;
label_6:
      this.\u0001.Add(obj0);
label_7:
      this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7592), ((int*) voidPtr)->ToString());
    }

    private void \u0001([In] string obj0)
    {
      int num1 = \u0007.\u0001(obj0, this);
      if (false)
        goto label_2;
      else
        goto label_5;
label_1:
      int num2;
      if (true)
        num1 = num2;
      else
        goto label_7;
label_2:
      if (num1 == -1)
      {
        if (true)
        {
          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7606), obj0);
          return;
        }
        goto label_1;
      }
      else
        goto label_7;
label_5:
      num2 = num1;
      goto label_1;
label_7:
      this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7597), num2.ToString());
    }

    private static \u0002.\u0003.\u0003 \u0001([In] Type obj0)
    {
label_0:
      \u0002.\u0003.\u0003 obj;
      while (true)
      {
        obj = \u0002.\u0003.\u0003.\u0001();
        if ((object) obj0 != null)
        {
          while ((object) obj0.Assembly.GetType(\u000E.\u0003.\u0001(7615)) != null)
          {
            if (true)
            {
              if (true)
              {
                obj.\u0001 = ((obj0.MetadataToken & 16777215) - 1).ToString();
                Assembly assembly = obj0.Assembly;
                if (true)
                {
                  obj.\u0001 = new \u0002.\u0003.\u0002(assembly.ManifestModule.ModuleVersionId.ToString(\u000E.\u0003.\u0001(7676)), assembly.FullName);
                  break;
                }
              }
            }
            else
              goto label_0;
          }
          break;
        }
        break;
      }
      return obj;
    }

    internal unsafe void \u0001([In] Type obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      if ((object) obj0 == null)
        return;
      try
      {
        \u0002.\u0003.\u0003 obj = \u0002.\u0003.\u0001(obj0);
        if (obj.\u0001())
        {
          string fullName = obj0.FullName;
          if (this.\u0001.ContainsKey(fullName))
          {
            *(int*) ((IntPtr) voidPtr + 4) = this.\u0001[fullName];
          }
          else
          {
            StringBuilder stringBuilder = new StringBuilder();
            string name = obj0.Assembly.GetName().Name;
            if (name.Length > 0 && name != \u000E.\u0003.\u0001(7707))
            {
              stringBuilder.Append('[');
              stringBuilder.Append(name);
              stringBuilder.Append(']');
            }
            string str1 = obj0.Namespace;
            if (str1.Length > 0)
            {
              stringBuilder.Append(str1);
              stringBuilder.Append('.');
            }
            if (obj0.HasElementType)
              obj0 = obj0.GetElementType();
            *(int*) ((IntPtr) voidPtr + 8) = fullName.LastIndexOf(\u000E.\u0003.\u0001(7720));
            if (*(int*) ((IntPtr) voidPtr + 8) > 0)
            {
              string str2 = fullName.Substring(str1.Length + 1, *(int*) ((IntPtr) voidPtr + 8) - str1.Length).Replace(\u000E.\u0003.\u0001(7720), \u000E.\u0003.\u0001(7725));
              stringBuilder.Append(str2);
            }
            stringBuilder.Append(obj0.Name);
            *(int*) ((IntPtr) voidPtr + 4) = this.\u0001.Count;
            this.\u0001.Add(stringBuilder.ToString());
            this.\u0001.Add(fullName, *(int*) ((IntPtr) voidPtr + 4));
          }
          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7730), ((int*) ((IntPtr) voidPtr + 4))->ToString());
        }
        else
        {
          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7681), obj.\u0001);
          *(int*) voidPtr = \u0007.\u0001(this, obj);
          if (*(int*) voidPtr <= 0)
            return;
          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7694), ((int*) voidPtr)->ToString());
        }
      }
      catch
      {
      }
    }

    private unsafe byte[] \u0001()
    {
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(52);
      void* voidPtr;
      if (true)
        voidPtr = (void*) num;
      if (this.\u0001 != null)
        return this.\u0001;
      this.\u0001.WriteStartDocument();
      using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7743)))
      {
        this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7776), \u000E.\u0003.\u0001(7391).ToUpper());
        this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7793), DateTime.Now.ToString(\u000E.\u0003.\u0001(7806)));
        this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(5083), \u0007.\u0001());
        if (this.\u0001 != Guid.Empty)
          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7811), this.\u0001.ToString(\u000E.\u0003.\u0001(7676)));
        this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7820), Guid.NewGuid().ToString(\u000E.\u0003.\u0001(7676)));
        if (this.\u0001.Count > 0)
          this.\u0001.Clear();
        this.\u0001.Add(new \u0002.\u0003.\u0002(\u000E.\u0003.\u0001(7391), string.Empty));
        if (this.\u0002.Count > 0)
          this.\u0002.Clear();
        this.\u0002.Add(\u000E.\u0003.\u0001(7391), 0);
        using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7833)))
        {
          Assembly assembly1 = \u0007.\u0001();
          Assembly[] assemblyArray = \u0007.\u0001(this);
          *(int*) ((IntPtr) voidPtr + 32) = 0;
          while (*(int*) ((IntPtr) voidPtr + 32) < assemblyArray.Length)
          {
            Assembly assembly2 = assemblyArray[*(int*) ((IntPtr) voidPtr + 32)];
            if ((object) assembly2 != null)
            {
              using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7694)))
              {
                try
                {
                  this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7606), assembly2.FullName);
                  this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7850), assembly2.CodeBase);
                  if ((object) assembly2 == (object) assembly1)
                    this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7863), \u000E.\u0003.\u0001(6758));
                }
                catch
                {
                }
              }
            }
            *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) + 1;
          }
        }
        using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7872)))
        {
          if (this.\u0001 != null)
          {
            if (this.\u0001.Count > 0)
            {
              foreach (string key in this.\u0001.Keys)
              {
                using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7897)))
                {
                  this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7606), key);
                  string str = (string) this.\u0001[key];
                  if (str == null)
                    this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7524), \u000E.\u0003.\u0001(6758));
                  else
                    this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7583), \u000E.\u0003.\u0001(7578) + str + \u000E.\u0003.\u0001(7578));
                }
              }
            }
          }
        }
        if (this.\u0001 != null && this.\u0001.Count > 0)
        {
          using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7918)))
          {
            foreach (string key in this.\u0001.Keys)
            {
              using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7939)))
              {
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7956), key);
                \u0002.\u0003.\u0001 obj = this.\u0001[key];
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7961), obj.\u0001);
                XmlWriter xmlWriter = this.\u0001;
                string localName = \u000E.\u0003.\u0001(7974);
                *(int*) ((IntPtr) voidPtr + 36) = obj.\u0001;
                string str = ((int*) ((IntPtr) voidPtr + 36))->ToString();
                xmlWriter.WriteAttributeString(localName, str);
                if (obj.\u0003.Length > 0)
                  this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7983), obj.\u0003);
                else
                  this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7992), obj.\u0002);
              }
            }
          }
        }
        using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8001)))
        {
          try
          {
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8026), Environment.Version.ToString());
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8043), Environment.OSVersion.Version.ToString());
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8056), Environment.OSVersion.Platform.ToString());
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8073), \u0007.\u0001());
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8090), \u0007.\u0001() ? \u000E.\u0003.\u0001(6758) : \u000E.\u0003.\u0001(8103));
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8108), \u0007.\u0001() ? \u000E.\u0003.\u0001(6758) : \u000E.\u0003.\u0001(8103));
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8113), \u0007.\u0001() ? \u000E.\u0003.\u0001(6758) : \u000E.\u0003.\u0001(8103));
          }
          catch
          {
          }
        }
        List<Exception> exceptionList = new List<Exception>();
        for (Exception innerException = this.\u0001; innerException != null; innerException = innerException.InnerException)
          exceptionList.Add(innerException);
        exceptionList.Reverse();
        using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8130)))
        {
          foreach (Exception exception in exceptionList)
          {
            try
            {
              \u0007.\u0001(exception, this);
              if (exception.Data.Contains((object) \u000E.\u0003.\u0001(2578)))
              {
                ICollection collection = (ICollection) exception.Data[(object) \u000E.\u0003.\u0001(2578)];
                *(int*) voidPtr = collection.Count;
                *(int*) ((IntPtr) voidPtr + 4) = 0;
                foreach (object obj1 in (IEnumerable) collection)
                {
                  try
                  {
                    Type type = obj1.GetType();
                    *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
                    if (*(int*) ((IntPtr) voidPtr + 4) > 100 && *(int*) ((IntPtr) voidPtr + 4) == *(int*) voidPtr - 100)
                    {
                      using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8147)))
                        this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(8168), ((int*) voidPtr)->ToString());
                    }
                    else
                    {
                      if (*(int*) ((IntPtr) voidPtr + 4) > 100)
                      {
                        if (*(int*) ((IntPtr) voidPtr + 4) <= *(int*) voidPtr - 100)
                          continue;
                      }
                      *(int*) ((IntPtr) voidPtr + 8) = (int) type.GetField(\u000E.\u0003.\u0001(8193)).GetValue(obj1);
                      *(int*) ((IntPtr) voidPtr + 12) = (int) type.GetField(\u000E.\u0003.\u0001(8206)).GetValue(obj1);
                      *(int*) ((IntPtr) voidPtr + 16) = (int) type.GetField(\u000E.\u0003.\u0001(8219)).GetValue(obj1);
                      object[] objArray1 = (object[]) type.GetField(\u000E.\u0003.\u0001(8248)).GetValue(obj1);
                      \u0002.\u0003.\u0003 obj2 = \u0002.\u0003.\u0001(type);
                      if (!obj2.\u0001())
                      {
                        using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8261)))
                        {
                          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(8193), ((int*) ((IntPtr) voidPtr + 8))->ToString());
                          this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(8219), ((int*) ((IntPtr) voidPtr + 16))->ToString());
                          *(int*) ((IntPtr) voidPtr + 20) = \u0007.\u0001(this, obj2);
                          if (*(int*) ((IntPtr) voidPtr + 20) > 0)
                            this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7694), ((int*) ((IntPtr) voidPtr + 20))->ToString());
                          if (*(int*) ((IntPtr) voidPtr + 12) != -1)
                            this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(8206), ((int*) ((IntPtr) voidPtr + 12))->ToString());
                          object[] objArray2 = objArray1;
                          *(int*) ((IntPtr) voidPtr + 40) = 0;
                          while (*(int*) ((IntPtr) voidPtr + 40) < objArray2.Length)
                          {
                            object obj3 = objArray2[*(int*) ((IntPtr) voidPtr + 40)];
                            try
                            {
                              this.\u0001(new \u000E.\u0005(obj3, true), (FieldInfo) null);
                            }
                            catch
                            {
                            }
                            *(int*) ((IntPtr) voidPtr + 40) = *(int*) ((IntPtr) voidPtr + 40) + 1;
                          }
                        }
                      }
                    }
                  }
                  catch
                  {
                  }
                }
              }
            }
            catch
            {
            }
          }
        }
        this.\u0001();
        using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8278)))
        {
          XmlWriter xmlWriter = this.\u0001;
          string localName = \u000E.\u0003.\u0001(8291);
          *(int*) ((IntPtr) voidPtr + 44) = this.\u0001.Count;
          string str1 = ((int*) ((IntPtr) voidPtr + 44))->ToString();
          xmlWriter.WriteAttributeString(localName, str1);
          *(int*) ((IntPtr) voidPtr + 24) = 0;
          while (*(int*) ((IntPtr) voidPtr + 24) < this.\u0001.Count)
          {
            string str2;
            try
            {
              str2 = this.\u0001[*(int*) ((IntPtr) voidPtr + 24)].ToString();
            }
            catch (Exception ex)
            {
              str2 = '"'.ToString() + ex.Message + (object) '"';
            }
            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(7730), str2);
            *(int*) ((IntPtr) voidPtr + 24) = *(int*) ((IntPtr) voidPtr + 24) + 1;
          }
        }
        using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8300)))
        {
          XmlWriter xmlWriter = this.\u0001;
          string localName = \u000E.\u0003.\u0001(8291);
          *(int*) ((IntPtr) voidPtr + 48) = this.\u0001.Count;
          string str = ((int*) ((IntPtr) voidPtr + 48))->ToString();
          xmlWriter.WriteAttributeString(localName, str);
          *(int*) ((IntPtr) voidPtr + 28) = 0;
          while (*(int*) ((IntPtr) voidPtr + 28) < this.\u0001.Count)
          {
            using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7776)))
            {
              \u0002.\u0003.\u0002 obj = this.\u0001[*(int*) ((IntPtr) voidPtr + 28)];
              this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7592), obj.\u0001);
              if (obj.\u0002.Length > 0)
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(8317), obj.\u0002);
            }
            *(int*) ((IntPtr) voidPtr + 28) = *(int*) ((IntPtr) voidPtr + 28) + 1;
          }
        }
      }
      this.\u0001.WriteEndDocument();
      this.\u0001.Flush();
      this.\u0001.Flush();
      this.\u0001 = this.\u0001.ToArray();
      return this.\u0001;
    }

    private unsafe void \u0001()
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(33);
      using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8248)))
      {
        *(int*) voidPtr = 0;
        while (*(int*) voidPtr < this.\u0001.Count)
        {
          \u000E.\u0005 obj1 = this.\u0001[*(int*) voidPtr];
          object obj2 = obj1.\u0001;
          Type enumType = obj1.\u0001;
          using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8330)))
          {
            this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7592), ((int*) voidPtr)->ToString());
            string str1 = (string) null;
            *(sbyte*) ((IntPtr) voidPtr + 32) = (sbyte) 1;
            string[] strArray = \u000E.\u0003.\u0001(13).Split(',');
            *(int*) ((IntPtr) voidPtr + 20) = 0;
            while (*(int*) ((IntPtr) voidPtr + 20) < strArray.Length)
            {
              string str2 = strArray[*(int*) ((IntPtr) voidPtr + 20)];
              if (str2 != \u000E.\u0003.\u0001(13) && enumType.FullName.StartsWith(str2))
              {
                *(sbyte*) ((IntPtr) voidPtr + 32) = (sbyte) 0;
                break;
              }
              *(int*) ((IntPtr) voidPtr + 20) = *(int*) ((IntPtr) voidPtr + 20) + 1;
            }
            object[] customAttributes = enumType.GetCustomAttributes(true);
            *(int*) ((IntPtr) voidPtr + 24) = 0;
            while (*(int*) ((IntPtr) voidPtr + 24) < customAttributes.Length)
            {
              string name = ((Attribute) customAttributes[*(int*) ((IntPtr) voidPtr + 24)]).GetType().Name;
              if (!(name != \u000E.\u0003.\u0001(8343)) || !(name != \u000E.\u0003.\u0001(8380)))
              {
                *(sbyte*) ((IntPtr) voidPtr + 32) = (sbyte) 0;
                break;
              }
              *(int*) ((IntPtr) voidPtr + 24) = *(int*) ((IntPtr) voidPtr + 24) + 1;
            }
            if (*(sbyte*) ((IntPtr) voidPtr + 32) != (sbyte) 0)
            {
              try
              {
                str1 = obj2.ToString();
                str1 = !(str1 == enumType.FullName) ? (!enumType.IsEnum ? (!(obj2 is Guid) ? \u000E.\u0003.\u0001(7578) + str1 + \u000E.\u0003.\u0001(7578) : \u000E.\u0003.\u0001(7053) + str1 + \u000E.\u0003.\u0001(7573)) : System.Enum.Format(enumType, obj2, \u000E.\u0003.\u0001(8409))) : (string) null;
              }
              catch
              {
              }
              if (str1 != null)
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7583), \u0007.\u0001(str1));
            }
            if (enumType.HasElementType)
            {
              this.\u0001(enumType.GetElementType());
              if (enumType.IsByRef)
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7493), \u000E.\u0003.\u0001(6758));
              if (enumType.IsPointer)
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7502), \u000E.\u0003.\u0001(6758));
              if (enumType.IsArray)
              {
                Array array = (Array) obj2;
                XmlWriter xmlWriter = this.\u0001;
                string localName = \u000E.\u0003.\u0001(7515);
                *(int*) ((IntPtr) voidPtr + 28) = array.Rank;
                string str3 = ((int*) ((IntPtr) voidPtr + 28))->ToString();
                xmlWriter.WriteAttributeString(localName, str3);
                StringBuilder stringBuilder = new StringBuilder();
                *(int*) ((IntPtr) voidPtr + 4) = 0;
                while (*(int*) ((IntPtr) voidPtr + 4) < array.Rank)
                {
                  if (*(int*) ((IntPtr) voidPtr + 4) > 0)
                    stringBuilder.Append(',');
                  stringBuilder.Append(array.GetLength(*(int*) ((IntPtr) voidPtr + 4)));
                  *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
                }
                this.\u0001.WriteAttributeString(\u000E.\u0003.\u0001(7974), stringBuilder.ToString());
                if (array.Rank == 1)
                {
                  *(int*) ((IntPtr) voidPtr + 8) = array.Length;
                  *(int*) ((IntPtr) voidPtr + 12) = 0;
                  while (*(int*) ((IntPtr) voidPtr + 12) < *(int*) ((IntPtr) voidPtr + 8))
                  {
                    if (*(int*) ((IntPtr) voidPtr + 12) == 10)
                    {
                      if (*(int*) ((IntPtr) voidPtr + 8) > 16)
                        *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 8) - 5;
                    }
                    try
                    {
                      this.\u0001(new \u000E.\u0005(array.GetValue(*(int*) ((IntPtr) voidPtr + 12)), false), (FieldInfo) null);
                    }
                    catch
                    {
                    }
                    *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + 1;
                  }
                }
              }
            }
            else
            {
              this.\u0001(enumType);
              if (obj1.\u0001)
              {
                if (*(sbyte*) ((IntPtr) voidPtr + 32) != (sbyte) 0)
                {
                  try
                  {
                    if (obj2 is IEnumerable)
                    {
                      using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(8414)))
                      {
                        *(int*) ((IntPtr) voidPtr + 16) = 0;
                        foreach (object obj3 in (IEnumerable) obj2)
                        {
                          if (*(int*) ((IntPtr) voidPtr + 16) > 20)
                          {
                            this.\u0001.WriteElementString(\u000E.\u0003.\u0001(8431), string.Empty);
                            break;
                          }
                          this.\u0001(new \u000E.\u0005(obj3, false), (FieldInfo) null);
                          *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
                        }
                      }
                    }
                  }
                  catch
                  {
                  }
                  this.\u0002(obj1);
                }
              }
            }
          }
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
      }
    }

    private unsafe void \u0002([In] \u000E.\u0005 obj0)
    {
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(13);
      void* voidPtr;
      if (true)
        voidPtr = (void*) num;
      FieldInfo[] fields = obj0.\u0001.GetFields(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
      *(int*) voidPtr = 0;
      while (*(int*) voidPtr < fields.Length)
      {
        FieldInfo fieldInfo = fields[*(int*) voidPtr];
        try
        {
          if (!fieldInfo.IsLiteral)
          {
            if (fieldInfo.IsStatic)
            {
              if (fieldInfo.IsInitOnly)
                goto label_14;
            }
            *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 1;
            object[] customAttributes;
            if (true)
            {
              customAttributes = fieldInfo.GetCustomAttributes(true);
              *(int*) ((IntPtr) voidPtr + 4) = 0;
            }
            while (*(int*) ((IntPtr) voidPtr + 4) < customAttributes.Length)
            {
              if (((Attribute) customAttributes[*(int*) ((IntPtr) voidPtr + 4)]).GetType().Name == \u000E.\u0003.\u0001(8380))
              {
                *(sbyte*) ((IntPtr) voidPtr + 12) = (sbyte) 0;
                break;
              }
              *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
            }
            if (*(sbyte*) ((IntPtr) voidPtr + 12) != (sbyte) 0)
              this.\u0001(new \u000E.\u0005(fieldInfo.GetValue(obj0.\u0001), false), fieldInfo);
          }
        }
        catch
        {
        }
label_14:
        *(int*) voidPtr = *(int*) voidPtr + 1;
      }
      obj0 = new \u000E.\u0005(obj0.\u0001, obj0.\u0001.BaseType, obj0.\u0001);
      while ((object) obj0.\u0001 != null)
      {
        if (true)
        {
          using (new \u0003.\u0005(this.\u0001, \u000E.\u0003.\u0001(7466)))
          {
            this.\u0001(\u000E.\u0003.\u0001(8440));
            XmlWriter xmlWriter = this.\u0001;
            string localName = \u000E.\u0003.\u0001(7592);
            *(int*) ((IntPtr) voidPtr + 8) = this.\u0001.Count;
            string str = ((int*) ((IntPtr) voidPtr + 8))->ToString();
            xmlWriter.WriteAttributeString(localName, str);
          }
          this.\u0001.Add(obj0);
          break;
        }
      }
    }

    internal unsafe bool \u0001()
    {
      void* voidPtr;
      do
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(5);
        try
        {
          byte[] numArray;
          do
          {
            \u0007.\u0001((\u000E.\u0004) this, \u0006.\u0006.\u0001);
            try
            {
              numArray = this.\u0001();
            }
            catch (Exception ex)
            {
              *(int*) voidPtr = -1;
              try
              {
                StackTrace stackTrace = new StackTrace(ex);
                if (stackTrace.FrameCount > 0)
                {
                  StackFrame frame = stackTrace.GetFrame(stackTrace.FrameCount - 1);
                  *(int*) voidPtr = frame.GetILOffset();
                }
              }
              catch
              {
              }
              \u0007.\u0001((\u000E.\u0004) this, \u0006.\u0006.\u0001, string.Format(\u000E.\u0003.\u0001(8449), (object) ex.Message, (object) *(int*) voidPtr));
              do
              {
                *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 0;
              }
              while (false);
              goto label_17;
            }
          }
          while (false);
          \u000E.\u0004.\u0003 obj = new \u000E.\u0004.\u0003(\u000E.\u0003.\u0001(8482), \u000E.\u0003.\u0001(8499), \u000E.\u0003.\u0001(8520));
          if (true)
            *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) \u0007.\u0001(numArray, obj, (\u000E.\u0004) this);
        }
        catch (ThreadAbortException ex)
        {
          if (true)
            *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 0;
        }
        catch (Exception ex)
        {
          do
          {
            \u0007.\u0001(new \u0005.\u0003(ex), this);
          }
          while (false);
          *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 0;
        }
label_17:;
      }
      while (false);
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 4);
    }

    private new struct \u0001
    {
      public readonly string \u0001;
      public readonly string \u0002;
      public readonly string \u0003;
      public readonly int \u0001;
    }

    internal new struct \u0002
    {
      public readonly string \u0001;
      public readonly string \u0002;

      public \u0002([In] string obj0, [In] string obj1)
      {
        this.\u0001 = obj0;
        this.\u0002 = obj1;
      }
    }

    internal new struct \u0003
    {
      public string \u0001;
      public \u0002.\u0003.\u0002 \u0001;

      [SpecialName]
      public bool \u0001() => this.\u0001.Length == 0;

      [SpecialName]
      public static \u0002.\u0003.\u0003 \u0001() => new \u0002.\u0003.\u0003(string.Empty, string.Empty, string.Empty);

      private \u0003([In] string obj0, [In] string obj1, [In] string obj2)
      {
        this.\u0001 = obj0;
        this.\u0001 = new \u0002.\u0003.\u0002(obj1, obj2);
      }
    }
  }
}
