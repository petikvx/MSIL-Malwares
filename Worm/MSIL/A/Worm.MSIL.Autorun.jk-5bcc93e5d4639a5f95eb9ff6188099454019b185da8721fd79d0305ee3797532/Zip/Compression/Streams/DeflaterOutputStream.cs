// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream
// Assembly: Done, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EBE6DCED-6866-44D2-B309-A0C25849858B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Worm.MSIL.Autorun.jk-5bcc93e5d4639a5f95eb9ff6188099454019b185da8721fd79d0305ee3797532.exe

using System;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip.Compression.Streams
{
  public class DeflaterOutputStream : Stream
  {
    protected byte[] buf;
    protected Deflater def;
    protected Stream baseOutputStream;

    public override bool CanRead => this.baseOutputStream.CanRead;

    public override bool CanSeek => this.baseOutputStream.CanSeek;

    public override bool CanWrite => this.baseOutputStream.CanWrite;

    public override long Length => this.baseOutputStream.Length;

    public override long Position
    {
      get => this.baseOutputStream.Position;
      set => this.baseOutputStream.Position = value;
    }

    public override long Seek(long offset, SeekOrigin origin) => this.baseOutputStream.Seek(offset, origin);

    public override void SetLength(long val) => this.baseOutputStream.SetLength(val);

    public override int ReadByte() => this.baseOutputStream.ReadByte();

    public override int Read(byte[] b, int off, int len) => this.baseOutputStream.Read(b, off, len);

    protected void deflate()
    {
      while (!this.def.IsNeedingInput)
      {
        int count = this.def.Deflate(this.buf, 0, this.buf.Length);
        if (count > 0)
          this.baseOutputStream.Write(this.buf, 0, count);
        else
          break;
      }
      if (!this.def.IsNeedingInput)
        throw new ApplicationException("Can't deflate all input?");
    }

    public DeflaterOutputStream(Stream baseOutputStream)
      : this(baseOutputStream, new Deflater(), 512)
    {
    }

    public DeflaterOutputStream(Stream baseOutputStream, Deflater defl)
      : this(baseOutputStream, defl, 512)
    {
    }

    public DeflaterOutputStream(Stream baseOutputStream, Deflater defl, int bufsize)
    {
      this.baseOutputStream = baseOutputStream;
      this.buf = bufsize > 0 ? new byte[(int) checked ((uint) bufsize)] : throw new InvalidOperationException("bufsize <= 0");
      this.def = defl;
    }

    public override void Flush()
    {
      this.def.Flush();
      this.deflate();
      this.baseOutputStream.Flush();
    }

    public virtual void Finish()
    {
      this.def.Finish();
      while (!this.def.IsFinished)
      {
        int count = this.def.Deflate(this.buf, 0, this.buf.Length);
        if (count > 0)
          this.baseOutputStream.Write(this.buf, 0, count);
        else
          break;
      }
      if (!this.def.IsFinished)
        throw new ApplicationException("Can't deflate all input?");
      this.baseOutputStream.Flush();
    }

    public override void Close()
    {
      this.Finish();
      this.baseOutputStream.Close();
    }

    public override void WriteByte(byte bval) => this.Write(new byte[1]
    {
      bval
    }, 0, 1);

    public override void Write(byte[] buf, int off, int len)
    {
      this.def.SetInput(buf, off, len);
      this.deflate();
    }
  }
}
