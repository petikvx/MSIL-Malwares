// Decompiled with JetBrains decompiler
// Type: JsonOptions
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.Collections.Generic;
using System.Globalization;

public class JsonOptions
{
  private readonly List<Exception> _exceptions = new List<Exception>();
  internal static DateTimeStyles _defaultDateTimeStyles = DateTimeStyles.AllowWhiteSpaces | DateTimeStyles.AssumeUniversal;

  public virtual bool ThrowExceptions { get; set; }

  public virtual int MaximumExceptionsCount { get; set; }

  public virtual string JsonPCallback { get; set; }

  public virtual string GuidFormat { get; set; }

  public virtual string DateTimeFormat { get; set; }

  public virtual string DateTimeOffsetFormat { get; set; }

  public virtual DateTimeStyles DateTimeStyles { get; set; }

  public virtual int StreamingBufferChunkSize { get; set; }

  public virtual string FormattingTab { get; set; }

  public virtual Exception[] Exceptions => this._exceptions.ToArray();

  public virtual JsonSerializationOptions SerializationOptions { get; set; }

  public virtual JsonCallback WriteValueCallback { get; set; }

  public virtual JsonCallback BeforeWriteObjectCallback { get; set; }

  public virtual JsonCallback AfterWriteObjectCallback { get; set; }

  public virtual JsonCallback WriteNamedValueObjectCallback { get; set; }

  public virtual JsonCallback CreateInstanceCallback { get; set; }

  public virtual JsonCallback MapEntryCallback { get; set; }

  public virtual JsonCallback ApplyEntryCallback { get; set; }

  public virtual JsonCallback GetListObjectCallback { get; set; }

  internal int FinalStreamingBufferChunkSize => Math.Max(512, this.StreamingBufferChunkSize);

  public JsonOptions()
  {
    this.SerializationOptions = JsonSerializationOptions.Default;
    this.ThrowExceptions = true;
    this.DateTimeStyles = JsonOptions._defaultDateTimeStyles;
    this.FormattingTab = " ";
    this.StreamingBufferChunkSize = (int) ushort.MaxValue;
    this.MaximumExceptionsCount = 100;
  }

  public virtual IEnumerable<Json.MemberDefinition> FinalizeSerializationMembers(
    Type type,
    IEnumerable<Json.MemberDefinition> members)
  {
    return members;
  }

  public virtual IEnumerable<Json.MemberDefinition> FinalizeDeserializationMembers(
    Type type,
    IEnumerable<Json.MemberDefinition> members)
  {
    return members;
  }

  public virtual void AddException(Exception error)
  {
    if (error == null)
      throw new ArgumentNullException(nameof (error));
    if (this._exceptions.Count >= this.MaximumExceptionsCount)
      throw new JsonException("JSO0015: Two many JSON errors detected (" + this._exceptions.Count.ToString() + ").", error);
    this._exceptions.Add(error);
  }

  public virtual JsonOptions Clone()
  {
    JsonOptions jsonOptions = new JsonOptions();
    jsonOptions.AfterWriteObjectCallback = this.AfterWriteObjectCallback;
    jsonOptions.ApplyEntryCallback = this.ApplyEntryCallback;
    jsonOptions.BeforeWriteObjectCallback = this.BeforeWriteObjectCallback;
    jsonOptions.CreateInstanceCallback = this.CreateInstanceCallback;
    jsonOptions.DateTimeFormat = this.DateTimeFormat;
    jsonOptions.DateTimeOffsetFormat = this.DateTimeOffsetFormat;
    jsonOptions.DateTimeStyles = this.DateTimeStyles;
    jsonOptions._exceptions.AddRange((IEnumerable<Exception>) this._exceptions);
    jsonOptions.FormattingTab = this.FormattingTab;
    jsonOptions.GetListObjectCallback = this.GetListObjectCallback;
    jsonOptions.GuidFormat = this.GuidFormat;
    jsonOptions.MapEntryCallback = this.MapEntryCallback;
    jsonOptions.MaximumExceptionsCount = this.MaximumExceptionsCount;
    jsonOptions.SerializationOptions = this.SerializationOptions;
    jsonOptions.StreamingBufferChunkSize = this.StreamingBufferChunkSize;
    jsonOptions.ThrowExceptions = this.ThrowExceptions;
    jsonOptions.WriteNamedValueObjectCallback = this.WriteNamedValueObjectCallback;
    jsonOptions.WriteValueCallback = this.WriteValueCallback;
    return jsonOptions;
  }

  public virtual string GetCacheKey() => ((int) this.SerializationOptions).ToString();
}
