// Decompiled with JetBrains decompiler
// Type: Appointments.Management
// Assembly: Appointments, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 296A15D6-EEB9-4ED6-B937-9857DD43439A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Sality.sil-945d5753743a3047bb1a01ad46cdb8207c84735e9ce10c7dfb9156bab7ca7d05.exe

using Microsoft.Win32;
using Microsoft.Windows.Controls;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;

namespace Appointments
{
  [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
  public partial class Management : Window, IComponentConnector
  {
    private myAppointmentsDataContext DC = new myAppointmentsDataContext();
    private RegistryKey rkApp = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
    internal Management myManagementWindow;
    internal GroupBox groupBox_controlDoctors;
    internal Label label1;
    internal TextBox textBox_addDoctor;
    internal Button button_addDoctor;
    internal Label label2;
    internal Button button_deleteDoctor;
    internal ComboBox comboBox_deleteDoctor;
    internal Separator separator1;
    internal GroupBox groupBox_controls;
    internal CheckBox checkBox_autoStart;
    internal CheckBox checkBox_activeVoice;
    internal Label label3;
    internal TextBox textBox_minutes;
    internal Label label4;
    internal CheckBox checkBox1;
    internal TextBox textBox_separateMinutes;
    internal Label label5;
    internal CheckBox checkBox2;
    internal TextBox textBox_oldMinutes;
    internal Label label6;
    internal Button button_back;
    private bool _contentLoaded;

    public Management() => this.InitializeComponent();

    private bool is_Numeric(string text)
    {
      bool flag = true;
      foreach (char c in text.ToCharArray())
      {
        if (!char.IsNumber(c))
          return false;
      }
      return flag;
    }

    private void button_back_Click(object sender, RoutedEventArgs e)
    {
      this.Close();
      this.myManagementWindow.Window_Loaded(sender, e);
    }

    private void button_deleteDoctor_Click(object sender, RoutedEventArgs e)
    {
      if (this.comboBox_deleteDoctor.SelectedIndex == -1)
      {
        if (MessageBox.Show("لم يتم اختيار أي طبيب , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand) != MessageBoxResult.OK)
          return;
        this.comboBox_deleteDoctor.Focus();
      }
      else
      {
        switch (MessageBox.Show("هل تريد بالتأكيد حذف الطبيب الذي قمت باختياره\nإن حذف الطبيب سيؤدي إلى حذف جميع مواعيده التي تم تحديدها مسبقا", "انتبه", MessageBoxButton.YesNo, MessageBoxImage.Exclamation))
        {
          case MessageBoxResult.Yes:
            this.comboBox_deleteDoctor.SelectedItem.ToString();
            Table<Appointment> appointments = this.DC.Appointments;
            System.Linq.Expressions.Expression<Func<Appointment, bool>> predicate = (System.Linq.Expressions.Expression<Func<Appointment, bool>>) (myApp => myApp.Doctor.Name == this.comboBox_deleteDoctor.SelectedItem.ToString());
            foreach (Appointment entity in (IEnumerable<Appointment>) appointments.Where<Appointment>(predicate))
              this.DC.Appointments.DeleteOnSubmit(entity);
            this.DC.SubmitChanges();
            this.DC.Doctors.DeleteOnSubmit(this.DC.Doctors.Single<Doctor>((System.Linq.Expressions.Expression<Func<Doctor, bool>>) (doc => doc.Name == this.comboBox_deleteDoctor.SelectedItem.ToString())));
            this.DC.SubmitChanges();
            if (MessageBox.Show("لقد تمت عملية الحذف بنجاح", "تأكيد", MessageBoxButton.OK, MessageBoxImage.Asterisk) == MessageBoxResult.OK)
            {
              this.comboBox_deleteDoctor.SelectedIndex = -1;
              this.comboBox_deleteDoctor.Focus();
              break;
            }
            break;
          case MessageBoxResult.No:
            this.comboBox_deleteDoctor.SelectedIndex = -1;
            this.comboBox_deleteDoctor.Focus();
            break;
        }
      }
    }

    private void button_addDoctor_Click(object sender, RoutedEventArgs e)
    {
      IQueryable<string> source = this.DC.Doctors.Where<Doctor>((System.Linq.Expressions.Expression<Func<Doctor, bool>>) (doc => doc.Name == this.textBox_addDoctor.Text)).Select<Doctor, string>((System.Linq.Expressions.Expression<Func<Doctor, string>>) (doc => doc.Name));
      if (string.IsNullOrWhiteSpace(this.textBox_addDoctor.Text))
      {
        this.textBox_addDoctor.Text = "";
        this.textBox_addDoctor.Focus();
      }
      else if (this.textBox_addDoctor.Text != "تمت إضافة الاسم بنجاح")
      {
        if (source.Count<string>() == 0)
        {
          this.DC.Doctors.InsertOnSubmit(new Doctor()
          {
            ID = Guid.NewGuid(),
            Name = this.textBox_addDoctor.Text.Trim()
          });
          this.DC.SubmitChanges();
          this.textBox_addDoctor.Text = "تمت إضافة الاسم بنجاح";
        }
        else
        {
          if (source.Count<string>() == 0 || MessageBox.Show("هذا الاسم مسجل مسبقا , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand) != MessageBoxResult.OK)
            return;
          this.textBox_addDoctor.Text = "";
          this.textBox_addDoctor.Focus();
        }
      }
      else
      {
        if (!(this.textBox_addDoctor.Text == "تمت إضافة الاسم بنجاح") || MessageBox.Show("لم يتم إدخال اسم محدد , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand) != MessageBoxResult.OK)
          return;
        this.textBox_addDoctor.Text = "";
        this.textBox_addDoctor.Focus();
      }
    }

    private void textBox_addDoctor_GotFocus(object sender, RoutedEventArgs e)
    {
      if (!(this.textBox_addDoctor.Text == "تمت إضافة الاسم بنجاح"))
        return;
      this.textBox_addDoctor.Text = "";
    }

    private void checkBox_autoStart_Checked(object sender, RoutedEventArgs e) => this.rkApp.SetValue("Appointment_Organizer", (object) Assembly.GetExecutingAssembly().Location);

    private void checkBox_autoStart_Unchecked(object sender, RoutedEventArgs e) => this.rkApp.DeleteValue("Appointment_Organizer", false);

    private void checkBox_activeVoice_Checked(object sender, RoutedEventArgs e)
    {
      this.label3.IsEnabled = true;
      this.label4.IsEnabled = true;
      this.textBox_minutes.IsEnabled = true;
    }

    private void comboBox_deleteDoctor_DropDownOpened(object sender, EventArgs e) => this.comboBox_deleteDoctor.ItemsSource = (IEnumerable) this.DC.Doctors.Select<Doctor, string>((System.Linq.Expressions.Expression<Func<Doctor, string>>) (doc => doc.Name));

    private void Window_Loaded(object sender, RoutedEventArgs e) => InputLanguageManager.SetInputLanguage((DependencyObject) this.textBox_addDoctor, CultureInfo.CreateSpecificCulture("ar"));

    private void textBox_minutes_TextChanged(object sender, TextChangedEventArgs e)
    {
      if (this.is_Numeric(this.textBox_minutes.Text))
        return;
      int num = (int) MessageBox.Show("يرجى استخدام الأرقام فقط , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
      this.textBox_minutes.Text = "";
      this.textBox_minutes.Focus();
    }

    private void checkBox_activeVoice_Unchecked(object sender, RoutedEventArgs e)
    {
      this.label3.IsEnabled = false;
      this.label4.IsEnabled = false;
      this.textBox_minutes.IsEnabled = false;
    }

    private void textBox_separateMinutes_TextChanged(object sender, TextChangedEventArgs e)
    {
      if (this.is_Numeric(this.textBox_separateMinutes.Text))
        return;
      int num = (int) MessageBox.Show("يرجى استخدام الأرقام فقط , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
      this.textBox_separateMinutes.Text = "";
      this.textBox_separateMinutes.Focus();
    }

    private void textBox1_TextChanged(object sender, TextChangedEventArgs e)
    {
      if (this.is_Numeric(this.textBox_oldMinutes.Text))
        return;
      int num = (int) MessageBox.Show("يرجى استخدام الأرقام فقط , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
      this.textBox_oldMinutes.Text = "";
      this.textBox_oldMinutes.Focus();
    }

    [DebuggerNonUserCode]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/Appointments;component/management.xaml", UriKind.Relative));
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.myManagementWindow = (Management) target;
          this.myManagementWindow.Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          this.groupBox_controlDoctors = (GroupBox) target;
          break;
        case 3:
          this.label1 = (Label) target;
          break;
        case 4:
          this.textBox_addDoctor = (TextBox) target;
          this.textBox_addDoctor.GotFocus += new RoutedEventHandler(this.textBox_addDoctor_GotFocus);
          break;
        case 5:
          this.button_addDoctor = (Button) target;
          this.button_addDoctor.Click += new RoutedEventHandler(this.button_addDoctor_Click);
          break;
        case 6:
          this.label2 = (Label) target;
          break;
        case 7:
          this.button_deleteDoctor = (Button) target;
          this.button_deleteDoctor.Click += new RoutedEventHandler(this.button_deleteDoctor_Click);
          break;
        case 8:
          this.comboBox_deleteDoctor = (ComboBox) target;
          this.comboBox_deleteDoctor.DropDownOpened += new EventHandler(this.comboBox_deleteDoctor_DropDownOpened);
          break;
        case 9:
          this.separator1 = (Separator) target;
          break;
        case 10:
          this.groupBox_controls = (GroupBox) target;
          break;
        case 11:
          this.checkBox_autoStart = (CheckBox) target;
          this.checkBox_autoStart.Checked += new RoutedEventHandler(this.checkBox_autoStart_Checked);
          this.checkBox_autoStart.Unchecked += new RoutedEventHandler(this.checkBox_autoStart_Unchecked);
          break;
        case 12:
          this.checkBox_activeVoice = (CheckBox) target;
          this.checkBox_activeVoice.Checked += new RoutedEventHandler(this.checkBox_activeVoice_Checked);
          this.checkBox_activeVoice.Unchecked += new RoutedEventHandler(this.checkBox_activeVoice_Unchecked);
          break;
        case 13:
          this.label3 = (Label) target;
          break;
        case 14:
          this.textBox_minutes = (TextBox) target;
          this.textBox_minutes.TextChanged += new TextChangedEventHandler(this.textBox_minutes_TextChanged);
          break;
        case 15:
          this.label4 = (Label) target;
          break;
        case 16:
          this.checkBox1 = (CheckBox) target;
          break;
        case 17:
          this.textBox_separateMinutes = (TextBox) target;
          this.textBox_separateMinutes.TextChanged += new TextChangedEventHandler(this.textBox_separateMinutes_TextChanged);
          break;
        case 18:
          this.label5 = (Label) target;
          break;
        case 19:
          this.checkBox2 = (CheckBox) target;
          break;
        case 20:
          this.textBox_oldMinutes = (TextBox) target;
          this.textBox_oldMinutes.TextChanged += new TextChangedEventHandler(this.textBox1_TextChanged);
          break;
        case 21:
          this.label6 = (Label) target;
          break;
        case 22:
          this.button_back = (Button) target;
          this.button_back.Click += new RoutedEventHandler(this.button_back_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
