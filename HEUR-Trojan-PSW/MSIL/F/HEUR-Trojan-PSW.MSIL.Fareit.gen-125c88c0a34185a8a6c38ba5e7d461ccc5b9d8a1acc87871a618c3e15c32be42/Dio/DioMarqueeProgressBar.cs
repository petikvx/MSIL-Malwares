// Decompiled with JetBrains decompiler
// Type: Dio.DioMarqueeProgressBar
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Timers;
using System.Windows.Forms;

namespace Dio
{
  public class DioMarqueeProgressBar : Control
  {
    private readonly int _increment = 1;
    private readonly System.Timers.Timer timer;
    private int _marqueePos;
    private int _marqueeWidth;
    private int _marqueeWidthConst;
    private Color _overlapColor = Color.FromArgb(0, 0, 0, 0);

    public DioMarqueeProgressBar()
    {
      this.timer = new System.Timers.Timer();
      this.timer.Interval = 12.0;
      this.timer.Elapsed += (ElapsedEventHandler) ((sender, args) => this.Callback());
      this.Size = new Size(150, 14);
      this.BorderColor = DioDefaults.DefaultBorderColor;
      this.Font = DioDefaults.DefaultFont;
      this.HandleCreated += (EventHandler) ((sender, args) => this.DoubleBuffered = true);
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.DoubleBuffer | ControlStyles.OptimizedDoubleBuffer, true);
      this.BackColor = Color.White;
      this.ForeColor = DioDefaults.DefaultBackColor;
      this.MarqueeWidth = 50;
      this.MarqueeXPos = 20;
      this.MarqueeVisible = true;
      this._marqueeWidth = this.MarqueeWidth;
      this._marqueePos = this.MarqueeXPos;
    }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public Color BorderColor { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public bool MarqueeVisible { get; set; }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public int MarqueeWidth
    {
      get => this._marqueeWidthConst;
      set
      {
        this._marqueeWidthConst = value;
        this._marqueeWidth = value;
      }
    }

    [Category("Appearance")]
    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    public int MarqueeXPos { get; set; }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      Graphics graphics = pevent.Graphics;
      graphics.Clear(this.Parent.BackColor);
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
      using (Pen pen = new Pen(this.BorderColor))
      {
        using (SolidBrush solidBrush1 = new SolidBrush(this.BackColor))
        {
          using (SolidBrush solidBrush2 = new SolidBrush(this.ForeColor))
          {
            graphics.FillRectangle((Brush) solidBrush1, 0, 0, this.Width - 1, this.Height - 1);
            if (this.MarqueeVisible)
              graphics.FillRectangle((Brush) solidBrush2, this.MarqueeXPos, 0, this._marqueeWidth, this.Height - 1);
            graphics.DrawRectangle(pen, 0, 0, this.Width - 1, this.Height - 1);
          }
        }
      }
    }

    public void Start()
    {
      this.MarqueeVisible = true;
      this.timer.Start();
    }

    public void Stop() => this.timer.Stop();

    private void Callback()
    {
      if (this.MarqueeXPos + this.MarqueeWidth >= this.Width)
        this._marqueeWidth = this.Width - this.MarqueeXPos - 2;
      if (this._marqueePos < 0)
      {
        this.MarqueeXPos = 0;
        this._marqueeWidth += this._increment;
        this._marqueePos += this._increment;
      }
      else if (this.MarqueeXPos >= this.Width)
        this._marqueePos = -this.MarqueeWidth;
      else
        this.MarqueeXPos += this._increment;
      this.Invalidate();
    }
  }
}
