// Decompiled with JetBrains decompiler
// Type: DomainObjects.Set
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace DomainObjects
{
  [Table(Name = "dbo.[Set]")]
  public class Set : INotifyPropertyChanging, INotifyPropertyChanged, ISet, IEntity
  {
    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);
    private Guid _SetId;
    private short? _SetNumber;
    private bool _Encore;
    private string _Notes;
    private DateTime _CreatedDate;
    private DateTime? _UpdatedDate;
    private DateTime? _DeletedDate;
    private bool _Deleted;
    private Guid? _ShowId;
    private EntitySet<SetSong> _SetSongs;
    private EntityRef<Show> _Show;

    public Set()
    {
      this._SetSongs = new EntitySet<SetSong>(new Action<SetSong>(this.attach_SetSongs), new Action<SetSong>(this.detach_SetSongs));
      this._Show = new EntityRef<Show>();
    }

    [Column(DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true, Storage = "_SetId")]
    public Guid SetId
    {
      get => this._SetId;
      set
      {
        if (!(this._SetId != value))
          return;
        this.SendPropertyChanging();
        this._SetId = value;
        this.SendPropertyChanged(nameof (SetId));
      }
    }

    [Column(DbType = "SmallInt", Storage = "_SetNumber")]
    public short? SetNumber
    {
      get => this._SetNumber;
      set
      {
        short? setNumber = this._SetNumber;
        int? nullable1 = setNumber.HasValue ? new int?((int) setNumber.GetValueOrDefault()) : new int?();
        short? nullable2 = value;
        int? nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        if (nullable1.GetValueOrDefault() == nullable3.GetValueOrDefault() & nullable1.HasValue == nullable3.HasValue)
          return;
        this.SendPropertyChanging();
        this._SetNumber = value;
        this.SendPropertyChanged(nameof (SetNumber));
      }
    }

    [Column(DbType = "Bit NOT NULL", Storage = "_Encore")]
    public bool Encore
    {
      get => this._Encore;
      set
      {
        if (this._Encore == value)
          return;
        this.SendPropertyChanging();
        this._Encore = value;
        this.SendPropertyChanged(nameof (Encore));
      }
    }

    [Column(DbType = "NVarChar(MAX)", Storage = "_Notes")]
    public string Notes
    {
      get => this._Notes;
      set
      {
        if (!(this._Notes != value))
          return;
        this.SendPropertyChanging();
        this._Notes = value;
        this.SendPropertyChanged(nameof (Notes));
      }
    }

    [Column(DbType = "DateTime NOT NULL", Storage = "_CreatedDate")]
    public DateTime CreatedDate
    {
      get => this._CreatedDate;
      set
      {
        if (!(this._CreatedDate != value))
          return;
        this.SendPropertyChanging();
        this._CreatedDate = value;
        this.SendPropertyChanged(nameof (CreatedDate));
      }
    }

    [Column(DbType = "DateTime", Storage = "_UpdatedDate")]
    public DateTime? UpdatedDate
    {
      get => this._UpdatedDate;
      set
      {
        DateTime? updatedDate = this._UpdatedDate;
        DateTime? nullable = value;
        if ((updatedDate.HasValue == nullable.HasValue ? (updatedDate.HasValue ? (updatedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        this.SendPropertyChanging();
        this._UpdatedDate = value;
        this.SendPropertyChanged(nameof (UpdatedDate));
      }
    }

    [Column(DbType = "DateTime", Storage = "_DeletedDate")]
    public DateTime? DeletedDate
    {
      get => this._DeletedDate;
      set
      {
        DateTime? deletedDate = this._DeletedDate;
        DateTime? nullable = value;
        if ((deletedDate.HasValue == nullable.HasValue ? (deletedDate.HasValue ? (deletedDate.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        this.SendPropertyChanging();
        this._DeletedDate = value;
        this.SendPropertyChanged(nameof (DeletedDate));
      }
    }

    [Column(DbType = "Bit NOT NULL", Storage = "_Deleted")]
    public bool Deleted
    {
      get => this._Deleted;
      set
      {
        if (this._Deleted == value)
          return;
        this.SendPropertyChanging();
        this._Deleted = value;
        this.SendPropertyChanged(nameof (Deleted));
      }
    }

    [Column(DbType = "UniqueIdentifier", Storage = "_ShowId")]
    public Guid? ShowId
    {
      get => this._ShowId;
      set
      {
        Guid? showId = this._ShowId;
        Guid? nullable = value;
        if ((showId.HasValue == nullable.HasValue ? (showId.HasValue ? (showId.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0) : 0) : 1) == 0)
          return;
        if (this._Show.HasLoadedOrAssignedValue)
          throw new ForeignKeyReferenceAlreadyHasValueException();
        this.SendPropertyChanging();
        this._ShowId = value;
        this.SendPropertyChanged(nameof (ShowId));
      }
    }

    [Association(Name = "Set_SetSong", OtherKey = "SetId", Storage = "_SetSongs", ThisKey = "SetId")]
    public EntitySet<SetSong> SetSongs
    {
      get => this._SetSongs;
      set => this._SetSongs.Assign((IEnumerable<SetSong>) value);
    }

    [Association(IsForeignKey = true, Name = "Show_Set", OtherKey = "ShowId", Storage = "_Show", ThisKey = "ShowId")]
    public Show Show
    {
      get => this._Show.Entity;
      set
      {
        Show entity = this._Show.Entity;
        if (entity == value && this._Show.HasLoadedOrAssignedValue)
          return;
        this.SendPropertyChanging();
        if (entity != null)
        {
          this._Show.Entity = (Show) null;
          entity.Sets.Remove(this);
        }
        this._Show.Entity = value;
        if (value != null)
        {
          value.Sets.Add(this);
          this._ShowId = new Guid?(value.ShowId);
        }
        else
          this._ShowId = new Guid?();
        this.SendPropertyChanged(nameof (Show));
      }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      if (this.PropertyChanging == null)
        return;
      this.PropertyChanging((object) this, Set.emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanged(string propertyName)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    private void attach_SetSongs(SetSong entity)
    {
      this.SendPropertyChanging();
      entity.Set = this;
    }

    private void detach_SetSongs(SetSong entity)
    {
      this.SendPropertyChanging();
      entity.Set = (Set) null;
    }
  }
}
