// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.My.MySettings
// Assembly: yDseEhTG5bnen4G, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C5C9DF7-D67E-851A-F932-4F9F562A97E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-a9fcf50b626f7a735761798ddff08a65e037fbde2ef6e57f066150543ebcb249.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Vändtia_Live_Server.My
{
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.7.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void \uF68B\uF347\uEC67\uEB04\uF338\uF769\uF6E9\uF5D7\uF1DC\uED8F\uF30E\uE4F4(
      object _param0,
      EventArgs _param1)
    {
      if ((!\uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uEB7F\uF247\uE858\uF5C7\uEC2A\uECFA\uEDD9\uE261\uF6B8\uF56C\uEBA5\uF444.SaveMySettingsOnExit ? 1 : 0) != 0)
        return;
label_5:
      int num1 = 1;
      int num2 = -1;
      while (true)
      {
        switch ((num2 ^ 29) + 33)
        {
          case 0:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (MySettings.\u002Ecctor);
            num2 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(33);
            continue;
          case 1:
            goto label_5;
          case 2:
            switch (num1)
            {
              case 32:
                num1 = 3;
                goto label_1;
              case 33:
                \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED80.\uE3C9\uF7B4\uF0CF\uE4AA\uEB90\uF646\uE141\uEE0E\uE3B3\uF409\uEBC5\uE426.Save();
                num1 = 0;
                goto label_1;
              case 34:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (MySettings.\u002Ecctor);
                num1 = 2;
                goto label_1;
              case 35:
                goto label_12;
              default:
                num2 = -3;
                continue;
            }
          case 3:
label_1:
            num1 ^= 32;
            break;
        }
        num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(10);
      }
label_12:;
    }

    public static MySettings \uF396\uF8E2\uECAF\uF8D8\uF807\uEAC7\uF122\uE62C\uF6EC\uF1AE\uF6B5\uEEF9
    {
      get
      {
        if ((MySettings.addedHandler ? 1 : 0) == 0)
        {
label_2:
          int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(31);
          object handlerLockObject;
          while (true)
          {
            switch ((num1 ^ 25) + 24)
            {
              case 0:
                ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
                num1 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(25);
                continue;
              case 1:
                handlerLockObject = MySettings.addedHandlerLockObject;
                num1 = -15;
                continue;
              case 2:
                Monitor.Enter(handlerLockObject);
                num1 = -12;
                continue;
              case 3:
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (MySettings.\uF68B\uF347\uEC67\uEB04\uF338\uF769\uF6E9\uF5D7\uF1DC\uED8F\uF30E\uE4F4);
                num1 = -14;
                continue;
              case 4:
                num1 = -13;
                continue;
              case 5:
                goto label_8;
              default:
                goto label_2;
            }
          }
label_8:
          try
          {
            if ((MySettings.addedHandler ? 1 : 0) == 0)
            {
              \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uEB7F\uF247\uE858\uF5C7\uEC2A\uECFA\uEDD9\uE261\uF6B8\uF56C\uEBA5\uF444.Shutdown += (ShutdownEventHandler) ((_param0, _param1) =>
              {
                if ((!\uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uEB7F\uF247\uE858\uF5C7\uEC2A\uECFA\uEDD9\uE261\uF6B8\uF56C\uEBA5\uF444.SaveMySettingsOnExit ? 1 : 0) != 0)
                  return;
label_5:
                int num2 = 1;
                int num3 = -1;
                while (true)
                {
                  switch ((num3 ^ 29) + 33)
                  {
                    case 0:
                      RuntimeMethodHandle runtimeMethodHandle2 = __methodref (MySettings.\u002Ecctor);
                      num3 = VoteMenuForm.\uF1A2\uF27A\uE0B6\uF1B5\uF540\uE7E6\uE54C\uE056\uF550\uF103\uEC30\uE3AF(33);
                      continue;
                    case 1:
                      goto label_5;
                    case 2:
                      switch (num2)
                      {
                        case 32:
                          num2 = 3;
                          goto label_1;
                        case 33:
                          \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED80.\uE3C9\uF7B4\uF0CF\uE4AA\uEB90\uF646\uE141\uEE0E\uE3B3\uF409\uEBC5\uE426.Save();
                          num2 = 0;
                          goto label_1;
                        case 34:
                          RuntimeMethodHandle runtimeMethodHandle3 = __methodref (MySettings.\u002Ecctor);
                          num2 = 2;
                          goto label_1;
                        case 35:
                          goto label_12;
                        default:
                          num3 = -3;
                          continue;
                      }
                    case 3:
label_1:
                      num2 ^= 32;
                      break;
                  }
                  num3 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(10);
                }
label_12:;
              });
label_11:
              int num4 = 59;
              while (true)
              {
                switch (num4 ^ 26)
                {
                  case 32:
                    MySettings.addedHandler = true;
                    num4 = 57;
                    continue;
                  case 33:
                    num4 = 58;
                    continue;
                  case 34:
                    RuntimeMethodHandle runtimeMethodHandle4 = __methodref (MySettings.\uF68B\uF347\uEC67\uEB04\uF338\uF769\uF6E9\uF5D7\uF1DC\uED8F\uF30E\uE4F4);
                    num4 = 56;
                    continue;
                  case 35:
                    goto label_16;
                  default:
                    goto label_11;
                }
              }
            }
          }
          finally
          {
            Monitor.Exit(handlerLockObject);
          }
        }
label_16:
        MySettings defaultInstance = MySettings.defaultInstance;
        return defaultInstance;
      }
    }
  }
}
