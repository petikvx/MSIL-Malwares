// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.HashCryptoSession
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 516D8B44-4448-4D2C-8B8E-FFBB3FFE472B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Virus.Win32.Expiro.w-69bb73081eac86b8cf86f45e33515d0095855636967076e2b593d7a30cd80a07.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using System.Security.Principal;

namespace Microsoft.InfoCards
{
  internal class HashCryptoSession : CryptoSession
  {
    private KeyedHashAlgorithm m_hash;

    public HashCryptoSession(
      Process process,
      DateTime expiration,
      WindowsIdentity identity,
      KeyedHashAlgorithm hash)
      : base(process, expiration, identity, (object) hash, CryptoSession.SessionType.Hash)
    {
      this.m_hash = hash;
    }

    protected override void OnDispose()
    {
      this.m_hash.Clear();
      this.m_hash.Dispose();
      this.m_hash = (KeyedHashAlgorithm) null;
    }

    protected override void OnWrite(BinaryWriter bwriter)
    {
      bwriter.Write(this.m_hash.HashSize);
      bwriter.Write(this.m_hash.InputBlockSize);
      bwriter.Write(this.m_hash.OutputBlockSize);
      bwriter.Write(this.m_hash.CanTransformMultipleBlocks);
      bwriter.Write(this.m_hash.CanReuseTransform);
    }

    public void HashCore(byte[] inData) => this.m_hash.TransformBlock(inData, 0, inData.Length, (byte[]) null, 0);

    public byte[] HashFinal(byte[] inData)
    {
      try
      {
        this.m_hash.TransformFinalBlock(inData, 0, inData.Length);
      }
      finally
      {
        this.m_hash.Initialize();
      }
      return this.m_hash.Hash;
    }
  }
}
