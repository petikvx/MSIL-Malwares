// Decompiled with JetBrains decompiler
// Type: GenericMath.Operators.Byte
// Assembly: Yu77, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CEBE5E3D-11C5-45E0-97BE-FD3217A3B672
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-a4c7baacf7ed45683e981b74160b24c21be4e1d86185106da9f5028724f8e21d.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace GenericMath.Operators
{
  [StandardModule]
  [HideModuleName]
  internal sealed class Byte
  {
    private static byte UnaryMinus(byte V)
    {
      if (V == (byte) 0)
        return 0;
      throw new OverflowException("Arithmetic operation resulted in an overflow.");
    }

    internal static void Initialize()
    {
      Func<byte, byte> func1;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func1 = Byte._Closure\u0024__.\u0024I1\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D0 = func1 = (Func<byte, byte>) (V => V);
      }
      Arithmetic<byte>.UnaryPlus = func1;
      Arithmetic<byte>.UnaryMinus = new Func<byte, byte>(Byte.UnaryMinus);
      Func<byte, byte, byte> func2;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D1 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func2 = Byte._Closure\u0024__.\u0024I1\u002D1;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D1 = func2 = (Func<byte, byte, byte>) ((L, R) => {checked {(byte) unchecked ((int) L + (int) R);}});
      }
      Arithmetic<byte>.Add = func2;
      Func<byte, byte, byte> func3;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D2 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func3 = Byte._Closure\u0024__.\u0024I1\u002D2;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D2 = func3 = (Func<byte, byte, byte>) ((L, R) => {checked {(byte) unchecked ((int) L - (int) R);}});
      }
      Arithmetic<byte>.Subtract = func3;
      Func<byte, byte, byte> func4;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D3 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func4 = Byte._Closure\u0024__.\u0024I1\u002D3;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D3 = func4 = (Func<byte, byte, byte>) ((L, R) => {checked {(byte) unchecked ((int) L * (int) R);}});
      }
      Arithmetic<byte>.Multiply = func4;
      Func<byte, byte, byte> func5;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D4 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func5 = Byte._Closure\u0024__.\u0024I1\u002D4;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D4 = func5 = (Func<byte, byte, byte>) ((L, R) => {checked {(byte) unchecked ((uint) L / (uint) R);}});
      }
      Arithmetic<byte>.Divide = func5;
      Func<byte, byte, byte> func6;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D5 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func6 = Byte._Closure\u0024__.\u0024I1\u002D5;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D5 = func6 = (Func<byte, byte, byte>) ((L, R) => {checked {(byte) Math.Round(Math.Pow(unchecked ((double) L), unchecked ((double) R)));}});
      }
      Arithmetic<byte>.Power = func6;
      Func<byte, byte, byte> func7;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D6 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func7 = Byte._Closure\u0024__.\u0024I1\u002D6;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D6 = func7 = (Func<byte, byte, byte>) ((L, R) => {checked {(byte) unchecked ((uint) L / (uint) R);}});
      }
      Arithmetic<byte>.IntegerDivide = func7;
      Func<byte, byte, byte> func8;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D7 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func8 = Byte._Closure\u0024__.\u0024I1\u002D7;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D7 = func8 = (Func<byte, byte, byte>) ((L, R) => {checked {(byte) unchecked ((uint) L % (uint) R);}});
      }
      Arithmetic<byte>.Modulus = func8;
      Func<byte, byte, bool> func9;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D8 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func9 = Byte._Closure\u0024__.\u0024I1\u002D8;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D8 = func9 = (Func<byte, byte, bool>) ((L, R) => (int) L == (int) R);
      }
      Arithmetic<byte>.Equal = func9;
      Func<byte, byte, bool> func10;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D9 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func10 = Byte._Closure\u0024__.\u0024I1\u002D9;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D9 = func10 = (Func<byte, byte, bool>) ((L, R) => (int) L != (int) R);
      }
      Arithmetic<byte>.NotEqual = func10;
      Func<byte, byte, bool> func11;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D10 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func11 = Byte._Closure\u0024__.\u0024I1\u002D10;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D10 = func11 = (Func<byte, byte, bool>) ((L, R) => (uint) L < (uint) R);
      }
      Arithmetic<byte>.LessThan = func11;
      Func<byte, byte, bool> func12;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D11 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func12 = Byte._Closure\u0024__.\u0024I1\u002D11;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D11 = func12 = (Func<byte, byte, bool>) ((L, R) => (uint) L <= (uint) R);
      }
      Arithmetic<byte>.LessThanEqual = func12;
      Func<byte, byte, bool> func13;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D12 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func13 = Byte._Closure\u0024__.\u0024I1\u002D12;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D12 = func13 = (Func<byte, byte, bool>) ((L, R) => (uint) L > (uint) R);
      }
      Arithmetic<byte>.MoreThan = func13;
      Func<byte, byte, bool> func14;
      // ISSUE: reference to a compiler-generated field
      if (Byte._Closure\u0024__.\u0024I1\u002D13 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func14 = Byte._Closure\u0024__.\u0024I1\u002D13;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Byte._Closure\u0024__.\u0024I1\u002D13 = func14 = (Func<byte, byte, bool>) ((L, R) => (uint) L >= (uint) R);
      }
      Arithmetic<byte>.MoreThanEqual = func14;
    }
  }
}
