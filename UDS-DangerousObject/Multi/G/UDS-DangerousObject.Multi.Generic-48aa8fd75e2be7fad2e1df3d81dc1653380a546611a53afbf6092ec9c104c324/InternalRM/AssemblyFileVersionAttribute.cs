// Decompiled with JetBrains decompiler
// Type: InternalRM.AssemblyFileVersionAttribute
// Assembly: RegistrySecurity, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CE443B41-988D-4319-9971-B451F2F12365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-48aa8fd75e2be7fad2e1df3d81dc1653380a546611a53afbf6092ec9c104c324.exe

using ADAsyncWorkItem;
using BinaryObjectWithMap;
using c;
using CodeConnectAccess;
using ErrorCode;
using ExceptionHandlingClauseOptions;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace InternalRM
{
  [GeneratedCode("MyTemplate", "11.0.0.0")]
  [StandardModule]
  [HideModuleName]
  internal sealed class AssemblyFileVersionAttribute
  {
    private static readonly AssemblyFileVersionAttribute.ThreadSafeObjectProvider<MutexCleanupInfo> m_ComputerObjectProvider = new AssemblyFileVersionAttribute.ThreadSafeObjectProvider<MutexCleanupInfo>();
    private static readonly AssemblyFileVersionAttribute.ThreadSafeObjectProvider<GetEnumeratord37> m_AppObjectProvider = new AssemblyFileVersionAttribute.ThreadSafeObjectProvider<GetEnumeratord37>();
    private static readonly AssemblyFileVersionAttribute.ThreadSafeObjectProvider<User> m_UserObjectProvider = new AssemblyFileVersionAttribute.ThreadSafeObjectProvider<User>();
    private static AssemblyFileVersionAttribute.ThreadSafeObjectProvider<AssemblyFileVersionAttribute.MyForms> m_MyFormsObjectProvider = new AssemblyFileVersionAttribute.ThreadSafeObjectProvider<AssemblyFileVersionAttribute.MyForms>();
    private static readonly AssemblyFileVersionAttribute.ThreadSafeObjectProvider<AssemblyFileVersionAttribute.MyWebServices> m_MyWebServicesObjectProvider = new AssemblyFileVersionAttribute.ThreadSafeObjectProvider<AssemblyFileVersionAttribute.MyWebServices>();

    [HelpKeyword("My.Computer")]
    internal static MutexCleanupInfo Computer
    {
      [DebuggerHidden] get => AssemblyFileVersionAttribute.m_ComputerObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Application")]
    internal static GetEnumeratord37 Application
    {
      [DebuggerHidden] get => AssemblyFileVersionAttribute.m_AppObjectProvider.GetInstance;
    }

    [HelpKeyword("My.User")]
    internal static User User
    {
      [DebuggerHidden] get => AssemblyFileVersionAttribute.m_UserObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Forms")]
    internal static AssemblyFileVersionAttribute.MyForms Forms
    {
      [DebuggerHidden] get => AssemblyFileVersionAttribute.m_MyFormsObjectProvider.GetInstance;
    }

    [HelpKeyword("My.WebServices")]
    internal static AssemblyFileVersionAttribute.MyWebServices WebServices
    {
      [DebuggerHidden] get => AssemblyFileVersionAttribute.m_MyWebServicesObjectProvider.GetInstance;
    }

    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class MyForms
    {
      [ThreadStatic]
      private static Hashtable m_FormBeingCreated;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public Encoding m_Dialog1;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public DisablePrivateReflectionAttribute.SynchronizedQueue m_Dialog2;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public ServerContextTerminatorSink.c m_Dialog3;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public EventProviderWriter.EndChildrenCallback m_DialogResize;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public EventCacheKey m_DialogResizeHD;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public RawAcl m_DialogRestore;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public AssemblyRequestEntry m_Form1;

      [DebuggerHidden]
      private static T Create__Instance__<T>(T Instance) where T : Form, new()
      {
        if ((object) Instance != null && !Instance.IsDisposed)
          return Instance;
        if (AssemblyFileVersionAttribute.MyForms.m_FormBeingCreated != null)
        {
          if (AssemblyFileVersionAttribute.MyForms.m_FormBeingCreated.ContainsKey((object) typeof (T)))
            throw new InvalidOperationException(Utils.GetResourceString("WinForms_RecursiveFormCreate"));
        }
        else
          AssemblyFileVersionAttribute.MyForms.m_FormBeingCreated = new Hashtable();
        AssemblyFileVersionAttribute.MyForms.m_FormBeingCreated.Add((object) typeof (T), (object) null);
        TargetInvocationException invocationException;
        try
        {
          return new T();
        }
        catch (TargetInvocationException ex) when (
        {
          // ISSUE: unable to correctly present filter
          ProjectData.SetProjectError((Exception) ex);
          invocationException = ex;
          if (invocationException.InnerException != null)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          throw new InvalidOperationException(Utils.GetResourceString("WinForms_SeeInnerException", invocationException.InnerException.Message), invocationException.InnerException);
        }
        finally
        {
          AssemblyFileVersionAttribute.MyForms.m_FormBeingCreated.Remove((object) typeof (T));
        }
      }

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) where T : Form
      {
        instance.Dispose();
        instance = default (T);
      }

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public MyForms()
      {
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal new System.Type GetType() => typeof (AssemblyFileVersionAttribute.MyForms);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();

      public Encoding Dialog1
      {
        [DebuggerHidden] get
        {
          this.m_Dialog1 = AssemblyFileVersionAttribute.MyForms.Create__Instance__<Encoding>(this.m_Dialog1);
          return this.m_Dialog1;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_Dialog1)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<Encoding>(ref this.m_Dialog1);
        }
      }

      public DisablePrivateReflectionAttribute.SynchronizedQueue Dialog2
      {
        [DebuggerHidden] get
        {
          this.m_Dialog2 = AssemblyFileVersionAttribute.MyForms.Create__Instance__<DisablePrivateReflectionAttribute.SynchronizedQueue>(this.m_Dialog2);
          return this.m_Dialog2;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_Dialog2)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<DisablePrivateReflectionAttribute.SynchronizedQueue>(ref this.m_Dialog2);
        }
      }

      public ServerContextTerminatorSink.c Dialog3
      {
        [DebuggerHidden] get
        {
          this.m_Dialog3 = AssemblyFileVersionAttribute.MyForms.Create__Instance__<ServerContextTerminatorSink.c>(this.m_Dialog3);
          return this.m_Dialog3;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_Dialog3)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<ServerContextTerminatorSink.c>(ref this.m_Dialog3);
        }
      }

      public EventProviderWriter.EndChildrenCallback DialogResize
      {
        [DebuggerHidden] get
        {
          this.m_DialogResize = AssemblyFileVersionAttribute.MyForms.Create__Instance__<EventProviderWriter.EndChildrenCallback>(this.m_DialogResize);
          return this.m_DialogResize;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_DialogResize)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<EventProviderWriter.EndChildrenCallback>(ref this.m_DialogResize);
        }
      }

      public EventCacheKey DialogResizeHD
      {
        [DebuggerHidden] get
        {
          this.m_DialogResizeHD = AssemblyFileVersionAttribute.MyForms.Create__Instance__<EventCacheKey>(this.m_DialogResizeHD);
          return this.m_DialogResizeHD;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_DialogResizeHD)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<EventCacheKey>(ref this.m_DialogResizeHD);
        }
      }

      public RawAcl DialogRestore
      {
        [DebuggerHidden] get
        {
          this.m_DialogRestore = AssemblyFileVersionAttribute.MyForms.Create__Instance__<RawAcl>(this.m_DialogRestore);
          return this.m_DialogRestore;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_DialogRestore)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<RawAcl>(ref this.m_DialogRestore);
        }
      }

      public AssemblyRequestEntry Form1
      {
        [DebuggerHidden] get
        {
          this.m_Form1 = AssemblyFileVersionAttribute.MyForms.Create__Instance__<AssemblyRequestEntry>(this.m_Form1);
          return this.m_Form1;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_Form1)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<AssemblyRequestEntry>(ref this.m_Form1);
        }
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    internal sealed class MyWebServices
    {
      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      internal new System.Type GetType() => typeof (AssemblyFileVersionAttribute.MyWebServices);

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override string ToString() => base.ToString();

      [DebuggerHidden]
      private static T Create__Instance__<T>(T instance) where T : new() => (object) instance == null ? new T() : instance;

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) => instance = default (T);

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public MyWebServices()
      {
      }
    }

    [ComVisible(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class ThreadSafeObjectProvider<T> where T : new()
    {
      internal T GetInstance
      {
        [DebuggerHidden] get
        {
          if ((object) AssemblyFileVersionAttribute.ThreadSafeObjectProvider<T>.m_ThreadStaticValue == null)
            AssemblyFileVersionAttribute.ThreadSafeObjectProvider<T>.m_ThreadStaticValue = new T();
          return AssemblyFileVersionAttribute.ThreadSafeObjectProvider<T>.m_ThreadStaticValue;
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public ThreadSafeObjectProvider()
      {
      }
    }
  }
}
