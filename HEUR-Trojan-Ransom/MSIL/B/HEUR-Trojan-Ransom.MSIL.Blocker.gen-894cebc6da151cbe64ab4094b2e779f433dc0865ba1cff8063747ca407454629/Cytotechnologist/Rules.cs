// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: CriticalHand, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 8F3AACC8-AAA3-4E3C-B88D-04522F6F341D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-894cebc6da151cbe64ab4094b2e779f433dc0865ba1cff8063747ca407454629.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -217333697;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1388496412)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 960256032 ^ 1916606674;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
      int aIndex = 0;
label_6:
      int num1 = aIndex >= numArray.Length ? -1100850642 : (num1 = -599338252);
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -314087830)) % 6U)
        {
          case 1:
            goto label_6;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * 707227388 ^ -596804442;
            continue;
          case 3:
            ++aIndex;
            num1 = (int) num2 * -493245769 ^ -2060824114;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -1719024229;
            continue;
          case 5:
            num1 = -599338252;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -202858345;
      List<Card> cardList;
      Card[] array;
      int aIndex1;
      bool flag1;
      bool flag2;
      int aIndex2;
      int num2;
      JSONNode jsonNode;
      int count;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -2065649246)) % 23U)
        {
          case 0:
            aIndex1 = 0;
            num1 = (int) num3 * -1772746734 ^ 1256197823;
            continue;
          case 1:
            num1 = (int) num3 * -1509728203 ^ -791296626;
            continue;
          case 2:
            ++aIndex1;
            num1 = (int) num3 * 1533171583 ^ -486461097;
            continue;
          case 3:
            ++aIndex2;
            num1 = (int) num3 * -289662455 ^ 1191789942;
            continue;
          case 4:
            array = cardList.ToArray();
            num1 = (int) num3 * -1943045600 ^ 922243317;
            continue;
          case 5:
            int num4;
            num1 = num4 = aIndex2 < count ? -2112970058 : (num4 = -1621768698);
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num3 * 121611318 ^ -199119257;
            continue;
          case 8:
            count = json.Count;
            num1 = (int) num3 * -424511939 ^ 2120446487;
            continue;
          case 9:
            num1 = -267516578;
            continue;
          case 10:
            int num5;
            num1 = num5 = num2 >= jsonNode[aIndex1].AsInt ? -1843364716 : (num5 = -364362735);
            continue;
          case 11:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            ++num2;
            num1 = -219506487;
            continue;
          case 12:
            num1 = -231362932;
            continue;
          case 13:
            num1 = (int) num3 * -1437785717 ^ -1593296198;
            continue;
          case 14:
            num1 = -56367782;
            continue;
          case 15:
            int num6 = !flag1 ? -973989183 : (num6 = -1052484698);
            num1 = num6 ^ (int) num3 * 1115474360;
            continue;
          case 16:
            cardList = new List<Card>();
            num1 = (int) num3 * 1211816715 ^ 1114240534;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * -351215464 ^ 702958455;
            continue;
          case 19:
            flag2 = aIndex1 < maxImpact;
            num1 = (int) num3 * -826527589 ^ -1878820849;
            continue;
          case 20:
            aIndex2 = 0;
            num1 = (int) num3 * -1945233026 ^ 1736933357;
            continue;
          case 21:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * -550305718 ^ 2139701852;
            continue;
          case 22:
            flag1 = aIndex1 < maxImpact * 2;
            num1 = -2046700672;
            continue;
          default:
            goto label_24;
        }
      }
label_24:
      return array;
    }

    public override string ToString() => Rules.\u200B‍‫‌‪‪‏⁭​‎⁪⁯‎⁪‍⁮‪‬​‬‏‭⁭‎⁫‏‪‌⁬‬‫⁮‪‪‍‏‪⁯‎‎‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
    {
      (object) this.SprintCount,
      (object) this.MaxImpact,
      (object) this.CardsToString(),
      (object) this.InitialResources,
      (object) this.NormalPlanningCount,
      (object) this.NormalPlanningCost,
      (object) this.OverPlanningCost,
      (object) this.SprintsWonWithoutPlanning,
      (object) this.RiskChancesToString(),
      (object) this.EconomicsAffectsAll,
      (object) this.StayOnSprintMinDiff,
      (object) this.OnlyOneWinner
    });

    private string CardsToString()
    {
label_1:
      int num1 = 475800780;
      string str1;
      Card card1;
      int index;
      Card[] cards;
      int num2;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 738931044)) % 15U)
        {
          case 0:
            str2 = Rules.\u202B​‬​⁬⁬⁮​⁪‬⁫‏‬⁬‎‍⁬‭‮‬‏‪‍⁬‌‌⁯⁬‭‍‌⁬​‬‪⁫​⁬‮⁭‮(str1, "\n]");
            num1 = (int) num3 * 172562406 ^ 1456901875;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * 1821149541 ^ 136991433;
            continue;
          case 2:
            int num4 = flag ? -56185668 : (num4 = -2057786583);
            num1 = num4 ^ (int) num3 * -1804636326;
            continue;
          case 3:
            index = 0;
            num1 = (int) num3 * -25779339 ^ 612416869;
            continue;
          case 5:
            cards = this.Cards;
            num1 = (int) num3 * -170362677 ^ 1440421860;
            continue;
          case 6:
            num2 = card1.Type;
            num1 = (int) num3 * 1081420059 ^ 750410449;
            continue;
          case 7:
            int num5;
            num1 = num5 = index < cards.Length ? 470970788 : (num5 = 2106579345);
            continue;
          case 8:
            goto label_1;
          case 9:
            str1 = "[\n\t";
            num1 = (int) num3 * -179003560 ^ -1113622449;
            continue;
          case 10:
            str1 = Rules.\u202B​‬​⁬⁬⁮​⁪‬⁫‏‬⁬‎‍⁬‭‮‬‏‪‍⁬‌‌⁯⁬‭‍‌⁬​‬‪⁫​⁬‮⁭‮(str1, "\n\t");
            num1 = (int) num3 * -749120668 ^ 908096880;
            continue;
          case 11:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200C⁫‏‬⁬‪‍‭‎‎‎⁯‌‬‌⁪‏‭‭​⁪⁮‮⁯​‪⁭‫‬‪⁪⁯‏​‏‏⁪⁫⁮‬‮((object) card2) : (string) null;
            str1 = Rules.\u202D‭‭‏‬⁬‎⁬⁯‎‍‮⁮‌​⁪‬‏‪​⁬‮‮‮⁯⁬‮‫‭​⁪​‌‭‮‭‍⁪‪⁬‮(str3, str4, " ");
            ++index;
            num1 = 274120915;
            continue;
          case 12:
            num1 = (int) num3 * 1484706329 ^ -555560546;
            continue;
          case 13:
            num1 = (int) num3 * -905272431 ^ -1040615676;
            continue;
          case 14:
            card1 = cards[index];
            flag = num2 != card1.Type;
            num1 = 1935266074;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u202B​‬​⁬⁬⁮​⁪‬⁫‏‬⁬‎‍⁬‭‮‬‏‪‍⁬‌‌⁯⁬‭‍‌⁬​‬‪⁫​⁬‮⁭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200D‬⁬​⁯‬‬⁭‬‬‌‫‮‏‫⁫‭⁯⁭‍⁭⁪‫⁮​⁭‭⁪‌‭‬⁭⁯‍‍‬⁬‮‍‮‮()));
label_1:
      int num1 = 1508808418;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2146988123)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 94248626 ^ 1322969628;
            continue;
          case 1:
            index = 1;
            num1 = (int) num2 * 1592918410 ^ -762818337;
            continue;
          case 2:
            ++index;
            num1 = (int) num2 * 1608236443 ^ -1036884162;
            continue;
          case 3:
            flag = index < this.RiskChances.Length;
            num1 = 1028540436;
            continue;
          case 5:
            int num3 = flag ? 446792209 : (num3 = 1074533702);
            num1 = num3 ^ (int) num2 * -1895284211;
            continue;
          case 6:
            goto label_1;
          case 7:
            str1 = Rules.\u202D‭‭‏‬⁬‎⁬⁯‎‍‮⁮‌​⁪‬‏‪​⁬‮‮‮⁯⁬‮‫‭​⁪​‌‭‮‭‍⁪‪⁬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200D‬⁬​⁯‬‬⁭‬‬‌‫‮‏‫⁫‭⁯⁭‍⁭⁪‫⁮​⁭‭⁪‌‭‬⁭⁯‍‍‬⁬‮‍‮‮()));
            num1 = 426647834;
            continue;
          case 8:
            str2 = Rules.\u202B​‬​⁬⁬⁮​⁪‬⁫‏‬⁬‎‍⁬‭‮‬‏‪‍⁬‌‌⁯⁬‭‍‌⁬​‬‪⁫​⁬‮⁭‮(str1, " ]");
            num1 = (int) num2 * 1637151109 ^ -1364054839;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200B‍‫‌‪‪‏⁭​‎⁪⁯‎⁪‍⁮‪‬​‬‏‭⁭‎⁫‏‪‌⁬‬‫⁮‪‪‍‏‪⁯‎‎‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202B​‬​⁬⁬⁮​⁪‬⁫‏‬⁬‎‍⁬‭‮‬‏‪‍⁬‌‌⁯⁬‭‍‌⁬​‬‪⁫​⁬‮⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200C⁫‏‬⁬‪‍‭‎‎‎⁯‌‬‌⁪‏‭‭​⁪⁮‮⁯​‪⁭‫‬‪⁪⁯‏​‏‏⁪⁫⁮‬‮([In] object obj0) => obj0.ToString();

    static string \u202D‭‭‏‬⁬‎⁬⁯‎‍‮⁮‌​⁪‬‏‪​⁬‮‮‮⁯⁬‮‫‭​⁪​‌‭‮‭‍⁪‪⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200D‬⁬​⁯‬‬⁭‬‬‌‫‮‏‫⁫‭⁯⁭‍⁭⁪‫⁮​⁭‭⁪‌‭‬⁭⁯‍‍‬⁬‮‍‮‮() => CultureInfo.InvariantCulture;
  }
}
