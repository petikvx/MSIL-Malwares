// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: VersioningHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A8C08E3E-24A1-4DAA-9E0F-F1F4BE4809FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1861855b22d693257e4e3463667e53ae08711a684747fdd32f49c3e7b9c7f04f.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202C‭‏‭⁯‬⁪⁬‫‫​⁫‪​⁪⁭⁫‎⁪‎⁯‫⁯‪‭⁫⁫⁭⁬​‏‬‭‎‏⁮⁯⁭‍‏‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 1340824488;
        bool finished2;
        int index;
        PlayerState[] playerStates;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1856139598)) % 16U)
          {
            case 0:
              num1 = (int) num2 * 1301103077 ^ -1154009978;
              continue;
            case 1:
              finished2 = true;
              num1 = (int) num2 * 1221770790 ^ -1603624992;
              continue;
            case 2:
              playerStates = this._playerStates;
              num1 = (int) num2 * -624027362 ^ -859678423;
              continue;
            case 3:
              finished2 = true;
              num1 = (int) num2 * -662482395 ^ 1112866049;
              continue;
            case 4:
              num1 = 1653666332;
              continue;
            case 5:
              flag = playerStates[index].State == State.Playing;
              num1 = 1130494103;
              continue;
            case 6:
              int num3 = !finished1 ? -1025038924 : (num3 = -683463517);
              num1 = num3 ^ (int) num2 * 1646207949;
              continue;
            case 7:
              finished2 = false;
              num1 = (int) num2 * -1928950085 ^ -201361715;
              continue;
            case 9:
              int num4 = !flag ? 823817478 : (num4 = 1165031276);
              num1 = num4 ^ (int) num2 * 238568813;
              continue;
            case 10:
              int num5;
              num1 = num5 = index < playerStates.Length ? 1818235147 : (num5 = 207679455);
              continue;
            case 11:
              index = 0;
              num1 = (int) num2 * -1089418217 ^ -511065620;
              continue;
            case 12:
              goto label_1;
            case 13:
              ++index;
              num1 = 1943870148;
              continue;
            case 14:
              num1 = (int) num2 * -212791953 ^ 489340068;
              continue;
            case 15:
              num1 = (int) num2 * 1059523338 ^ -643825134;
              continue;
            default:
              goto label_17;
          }
        }
label_17:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -1552611648;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1276736652)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -380288533 ^ -1034539097;
            continue;
          case 2:
            this.Winners.Clear();
            num1 = (int) num2 * 1630114918 ^ 1364227379;
            continue;
          case 3:
            this.Losers.Clear();
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1283939694 ^ 1406407423;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -1481296100 ^ -1228076598;
            continue;
          case 5:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 1017159603 ^ -807029870;
            continue;
          case 6:
            num1 = (int) num2 * -979909022 ^ -1006177966;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = -246560045;
      bool flag1;
      PlayerState playerState;
      int index;
      Player player;
      int num2;
      int planningCardsCount;
      bool flag2;
      bool morePlanningSprint;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1609053509)) % 29U)
        {
          case 0:
            int num4 = morePlanningSprint ? -205941269 : (num4 = -1082816966);
            num1 = num4 ^ (int) num3 * -1682775788;
            continue;
          case 1:
            index = 0;
            num1 = (int) num3 * -141960617 ^ 1229259096;
            continue;
          case 2:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1891769918 ^ -1097529862;
            continue;
          case 3:
            num1 = -1080005324;
            continue;
          case 4:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -1444538158 ^ -234810151;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = -841030630;
            continue;
          case 7:
            num2 = 0;
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 1257679174 ^ 1049410675;
            continue;
          case 8:
            player = this.Players[index];
            num1 = (int) num3 * -401071746 ^ 1133241094;
            continue;
          case 9:
            num1 = (int) num3 * -152682339 ^ -666973440;
            continue;
          case 10:
            int num5 = flag3 ? 452486085 : (num5 = 1982320244);
            num1 = num5 ^ (int) num3 * -1433155835;
            continue;
          case 11:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -503414481;
            continue;
          case 12:
            int num6 = flag2 ? 1314683257 : (num6 = 183293232);
            num1 = num6 ^ (int) num3 * 1884922485;
            continue;
          case 13:
            ++index;
            num1 = (int) num3 * -2037101136 ^ -1718891120;
            continue;
          case 14:
            num1 = (int) num3 * 1660070416 ^ 383208771;
            continue;
          case 15:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -820263378 ^ 498868069;
            continue;
          case 16:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 745880867 ^ -1895068727;
            continue;
          case 17:
            num1 = (int) num3 * 1166961303 ^ 1717605997;
            continue;
          case 18:
            flag1 = num2 > 0;
            num1 = -488202190;
            continue;
          case 19:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1040081644 ^ 1320892277;
            continue;
          case 20:
            playerState.State = State.Playing;
            num1 = (int) num3 * 380234994 ^ -182766036;
            continue;
          case 21:
            int num7 = flag1 ? -243662218 : (num7 = -267052809);
            num1 = num7 ^ (int) num3 * 1248221082;
            continue;
          case 22:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1111702624 ^ 2013481557;
            continue;
          case 23:
            num1 = -446990099;
            continue;
          case 24:
            flag3 = index < this.Players.Length;
            num1 = -1891458535;
            continue;
          case 25:
            num1 = (int) num3 * -1105169613 ^ -2088946564;
            continue;
          case 26:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 2031249699 ^ -26640169;
            continue;
          case 27:
            num2 = 0;
            num1 = -1710360779;
            continue;
          case 28:
            goto label_1;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 68191961;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1239890097)) % 13U)
        {
          case 0:
            num1 = (int) num2 * 1542433433 ^ -1879036238;
            continue;
          case 1:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1874712459;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.Print((object) Game.\u202E⁪‭⁫‌‮‬⁯⁬⁮⁫‮‌‬‎⁫‬‌‪⁬​‮⁬‫⁬‫‍‪⁯‬‭‍‭‭‏⁮⁪‌⁭‍‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 2088182544 ^ -586313176;
            continue;
          case 4:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -901393373 ^ -1038574224;
            continue;
          case 5:
            this.Print((object) Game.\u200C‪‎⁬‌⁯‪⁬‮‪‏​‏⁬‭‫⁯⁪⁬⁪⁭‪‌⁬‫⁮⁯‮‭‪⁭⁭‫​‏⁪‏⁮‭‍‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 81866071;
            continue;
          case 6:
            ++this._currentPlayer;
            num1 = (int) num2 * 95181768 ^ -670957656;
            continue;
          case 7:
            num1 = (int) num2 * -903748827 ^ -1361268808;
            continue;
          case 8:
            goto label_3;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -1648691256 ^ 573467449;
            continue;
          case 10:
            this._currentPlayer = 0;
            int num3 = this._currentTurn <= 0 ? 1753256167 : (num3 = 234692767);
            num1 = num3 ^ (int) num2 * -1075133426;
            continue;
          case 11:
            num1 = (int) num2 * 1440578580 ^ 157430237;
            continue;
          case 12:
            int num4 = this._currentPlayer >= this.Players.Length ? 727629641 : (num4 = 1097533770);
            num1 = num4 ^ (int) num2 * 68616881;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -1715949496;
      while (true)
      {
        uint num2;
        bool flag1;
        int index;
        PlayerState playerState1;
        bool flag2;
        int num3;
        bool flag3;
        int num4;
        Card card;
        bool flag4;
        bool flag5;
        Player player;
        bool flag6;
        int num5;
        bool flag7;
        PlayerState playerState2;
        bool onlyOneWinner;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1199633855)) % 83U)
        {
          case 0:
            ++index;
            num1 = -1449542063;
            continue;
          case 1:
            num1 = -169989489;
            continue;
          case 2:
            flag3 = false;
            num1 = -286298998;
            continue;
          case 3:
            flag3 = true;
            num1 = (int) num2 * 2121212249 ^ -1428698999;
            continue;
          case 4:
            int num7 = !flag9 ? -511493477 : (num7 = -1023974339);
            num1 = num7 ^ (int) num2 * -19738603;
            continue;
          case 5:
            this.Losers.Add(index);
            num1 = (int) num2 * -187304664 ^ -411757800;
            continue;
          case 6:
            playerState2 = this._playerStates[index];
            num1 = -1279891245;
            continue;
          case 7:
            flag9 = flag3;
            num1 = -668338600;
            continue;
          case 8:
            int num8 = !flag6 ? -1445444120 : (num8 = -2007654181);
            num1 = num8 ^ (int) num2 * 988579938;
            continue;
          case 9:
            card = this.DrawCard();
            num1 = -195097541;
            continue;
          case 10:
            int num9 = onlyOneWinner ? 365809716 : (num9 = 790282738);
            num1 = num9 ^ (int) num2 * -1747742420;
            continue;
          case 11:
            flag8 = playerState1.Sprint < 0;
            num1 = -418027471;
            continue;
          case 12:
            playerState2.Resources -= Game.\u202A‪‫‫​‌‬‬‪‬‎‮‭⁬⁮⁬​⁮⁭⁫⁫‭‮⁯⁭‫⁪‎‎‎‏‮⁪‏⁯‏⁫⁯​‬‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            int num10 = playerState2.Resources >= 0 ? -1766305110 : (num10 = -1272055800);
            num1 = num10 ^ (int) num2 * 546453263;
            continue;
          case 13:
            num1 = (int) num2 * -275484779 ^ 2104780845;
            continue;
          case 14:
            num1 = -500204387;
            continue;
          case 15:
            num3 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 423485440 ^ -449457475;
            continue;
          case 16:
            num1 = (int) num2 * -34162351 ^ 1880508272;
            continue;
          case 17:
            num1 = (int) num2 * -436736608 ^ 1862601981;
            continue;
          case 18:
            this.Losers.Add(num5);
            num1 = (int) num2 * -825340946 ^ -2142593232;
            continue;
          case 19:
            int num11 = !flag1 ? -865677961 : (num11 = -340146078);
            num1 = num11 ^ (int) num2 * -1191042090;
            continue;
          case 20:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag4 ? (object) "ALL " : (object) "", flag5 ? (object) "receives" : (object) "pays", (object) Game.\u206B⁫‏⁭⁬‏‭⁮‎⁮‍‫​⁭‌⁯‪‌‭‎‌⁯⁮‍‬⁮‮‪‮⁬⁬‪‪‪‬‌‫‬‬‮(num4), flag3 ? (object) "advance" : (object) "stay");
            num1 = -2096503028;
            continue;
          case 21:
            num1 = (int) num2 * -1985133519 ^ 1839016464;
            continue;
          case 22:
            num1 = (int) num2 * -1534325644 ^ 1661041735;
            continue;
          case 23:
            goto label_1;
          case 24:
            num1 = -1044399932;
            continue;
          case 25:
            flag12 = num5 < this._playerStates.Length;
            num1 = -1631826205;
            continue;
          case 26:
            num1 = (int) num2 * -953258389 ^ -91806653;
            continue;
          case 27:
            ++playerState1.Sprint;
            num1 = (int) num2 * 890136535 ^ -1532034703;
            continue;
          case 28:
            int num12 = flag7 ? 1783596174 : (num12 = 1640053822);
            num1 = num12 ^ (int) num2 * 14075560;
            continue;
          case 29:
            flag3 = true;
            num1 = -1389625071;
            continue;
          case 30:
            this._finished = true;
            num5 = 0;
            num1 = (int) num2 * 1498222691 ^ -1280351847;
            continue;
          case 31:
            flag7 = num5 == playerIndex;
            num1 = (int) num2 * 1114695539 ^ -804283569;
            continue;
          case 32:
            num1 = (int) num2 * 8900226 ^ -1633804271;
            continue;
          case 33:
            flag1 = !flag4;
            num1 = (int) num2 * -2044181858 ^ 59844766;
            continue;
          case 34:
            flag10 = index < this._playerStates.Length;
            num1 = -1225487263;
            continue;
          case 35:
            num1 = (int) num2 * -752042666 ^ -1866603990;
            continue;
          case 36:
            ++num5;
            num1 = -1370363659;
            continue;
          case 37:
            num1 = (int) num2 * -1737493923 ^ -72781846;
            continue;
          case 38:
            num1 = -408436945;
            continue;
          case 39:
            flag11 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 898568459 ^ -36897046;
            continue;
          case 40:
            num1 = (int) num2 * 876486025 ^ -244350974;
            continue;
          case 41:
            int num13 = flag2 ? -613753641 : (num13 = -1496591369);
            num1 = num13 ^ (int) num2 * -2058137083;
            continue;
          case 42:
            num1 = (int) num2 * 2064071761 ^ -1872220651;
            continue;
          case 43:
            flag2 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1935584740;
            continue;
          case 44:
            num1 = -436312998;
            continue;
          case 45:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1764620107 ^ 1907022234;
            continue;
          case 46:
            num1 = (int) num2 * -1367311678 ^ -722419546;
            continue;
          case 47:
            flag3 = num3 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u202A‪‫‫​‌‬‬‪‬‎‮‭⁬⁮⁬​⁮⁭⁫⁫‭‮⁯⁭‫⁪‎‎‎‏‮⁪‏⁯‏⁫⁯​‬‮(0, num3);
            num1 = (int) num2 * 1313871446 ^ -1233827355;
            continue;
          case 48:
            flag6 = !flag5;
            num1 = (int) num2 * 1646953630 ^ -59799679;
            continue;
          case 49:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -1707130610 ^ 32364385;
              continue;
            }
            num6 = 0;
            break;
          case 50:
            int num14 = !flag10 ? -215994427 : (num14 = -1600640405);
            num1 = num14 ^ (int) num2 * -1905784311;
            continue;
          case 51:
            num1 = (int) num2 * 1571388046 ^ 119160697;
            continue;
          case 52:
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u202E⁪‭⁫‌‮‬⁯⁬⁮⁫‮‌‬‎⁫‬‌‪⁬​‮⁬‫⁬‫‍‪⁯‬‭‍‭‭‏⁮⁪‌⁭‍‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -1184029277 ^ -199481250;
            continue;
          case 53:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -629063283 ^ 328634135;
            continue;
          case 54:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -908484724 ^ -253439362;
            continue;
          case 55:
            int num15;
            num1 = num15 = playerState1.Sprint <= this.Rules.SprintCount ? -500204387 : (num15 = -1685369721);
            continue;
          case 56:
            num4 = card.Impact;
            num1 = (int) num2 * -1542602844 ^ -1432836858;
            continue;
          case 57:
            num1 = (int) num2 * 1646380263 ^ -1821197036;
            continue;
          case 58:
            num1 = (int) num2 * 1615871430 ^ 127139689;
            continue;
          case 59:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -247735144 ^ 66451152;
            continue;
          case 60:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * -1209609571 ^ 1921252420;
            continue;
          case 61:
            int num16 = playerState1.Resources < 0 ? 12294076 : (num16 = 1208159026);
            num1 = num16 ^ (int) num2 * 1325089014;
            continue;
          case 62:
            num1 = (int) num2 * -1766756937 ^ -489377730;
            continue;
          case 63:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202E⁪‭⁫‌‮‬⁯⁬⁮⁫‮‌‬‎⁫‬‌‪⁬​‮⁬‫⁬‫‍‪⁯‬‭‍‭‭‏⁮⁪‌⁭‍‮("\t", playerState3 != null ? Game.\u200E⁫⁯‫‎⁫⁮‫⁬‎‫‭⁫⁭‮‌⁫⁭⁪⁪⁯‫⁬‌⁬‬​⁬‫‍‌‏⁮⁭⁪‌⁮⁬‍‏‮((object) playerState3) : (string) null));
            num1 = -70148196;
            continue;
          case 64:
            int num17 = playerState1.State != 0 ? 1898144162 : (num17 = 80097256);
            num1 = num17 ^ (int) num2 * 1135932538;
            continue;
          case 65:
            int num18 = flag8 ? 1766927977 : (num18 = 352469966);
            num1 = num18 ^ (int) num2 * 1121017050;
            continue;
          case 66:
            index = 0;
            num1 = -958532755;
            continue;
          case 67:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1113637218 ^ -1919310456;
            continue;
          case 68:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 1502880052 ^ -1406625410;
            continue;
          case 69:
            goto label_3;
          case 70:
            int num19 = flag12 ? -898212270 : (num19 = -461956373);
            num1 = num19 ^ (int) num2 * -917205501;
            continue;
          case 71:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 1863279982 ^ -911956941;
            continue;
          case 72:
            num1 = (int) num2 * 1470371477 ^ -470978355;
            continue;
          case 73:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -7165272 ^ -1086168421;
            continue;
          case 74:
            int num20 = this.Losers.Contains(index) ? -1062247421 : (num20 = -1594558377);
            num1 = num20 ^ (int) num2 * 1398791839;
            continue;
          case 75:
            int num21 = !flag11 ? -1177553799 : (num21 = -573778270);
            num1 = num21 ^ (int) num2 * -565347613;
            continue;
          case 76:
            num1 = (int) num2 * -1151652103 ^ -952397745;
            continue;
          case 77:
            playerState2.State = State.Lose;
            num1 = -393928948;
            continue;
          case 78:
            flag5 = card.Impact < 0;
            num1 = (int) num2 * -1496760047 ^ -684439638;
            continue;
          case 79:
            num1 = -950208869;
            continue;
          case 80:
            int num22;
            num1 = num22 = this.Losers.Contains(num5) ? -1260468770 : (num22 = -985506112);
            continue;
          case 81:
            num1 = (int) num2 * 27650676 ^ 1989801532;
            continue;
          case 82:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          default:
            goto label_88;
        }
        flag4 = num6 != 0;
        num1 = -1347885113;
      }
label_3:
      return;
label_88:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -24365545;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1309005143)) % 8U)
        {
          case 0:
            card2 = card1;
            num1 = (int) num2 * 1748137985 ^ -168858083;
            continue;
          case 1:
            card1 = this._deck[0];
            num1 = -586886918;
            continue;
          case 3:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 276737149 ^ 1283359102;
            continue;
          case 4:
            num1 = (int) num2 * 769830319 ^ 1374805847;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3 = this._deck.Count > 0 ? -1517205680 : (num3 = -1824521026);
            num1 = num3 ^ (int) num2 * 515170096;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * 2030563563 ^ 1172058637;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = -1621745804;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -418809874)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -174432247 ^ -2021792934;
            continue;
          case 2:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? -440948504 : (num3 = -683279828);
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * -920340480 ^ 866623653;
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * 30843348 ^ 1514304417;
            continue;
          case 6:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200E⁫⁯‫‎⁫⁮‫⁬‎‫‭⁫⁭‮‌⁫⁭⁪⁪⁯‫⁬‌⁬‬​⁬‫‍‌‏⁮⁭⁪‌⁮⁬‍‏‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202A‌‭​‮‏‌⁬⁬⁭​⁮​⁪‮‪‪⁭‭‌‌‫‏⁭​‎‫‍‎⁪‭‍‎‪‏​‮⁮⁬⁭‮(strArray);
            num1 = -387791343;
            continue;
          case 7:
            str2 = str1;
            num1 = (int) num2 * -322270958 ^ 1910275346;
            continue;
          case 8:
            num1 = (int) num2 * 193955822 ^ 982939492;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -2098393874;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1469225149)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            str = Game.\u206F​⁮‮‭⁭‪⁪​⁭​⁮‬⁪⁯‪‍⁯‍⁭⁮⁫⁭⁪⁬‫⁬‏‪‍⁮⁫⁫‮‬‌‫‮‮‏‮(Game.\u200E⁫⁯‫‎⁫⁮‫⁬‎‫‭⁫⁭‮‌⁫⁭⁪⁪⁯‫⁬‌⁬‬​⁬‫‍‌‏⁮⁭⁪‌⁮⁬‍‏‮(text), more);
            num1 = (int) num2 * 981836162 ^ -1427030193;
            continue;
          case 2:
            Game.\u200C‭⁭‫‌⁬‫‫‎‭‭‮⁬‏⁫‮‮‎‎‪‫‭‎‏⁬‭⁫⁫‪⁯​‪‎⁫‬‮​‫‎‮‮(this._buffer, str);
            num1 = (int) num2 * 441925866 ^ -1120058485;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u202C‭‏‭⁯‬⁪⁬‫‫​⁫‪​⁪⁭⁫‎⁪‎⁯‫⁯‪‭⁫⁫⁭⁬​‏‬‭‎‏⁮⁯⁭‍‏‮([In] int obj0) => new Random(obj0);

    static string \u200C‪‎⁬‌⁯‪⁬‮‪‏​‏⁬‭‫⁯⁪⁬⁪⁭‪‌⁬‫⁮⁯‮‭‪⁭⁭‫​‏⁪‏⁮‭‍‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202E⁪‭⁫‌‮‬⁯⁬⁮⁫‮‌‬‎⁫‬‌‪⁬​‮⁬‫⁬‫‍‪⁯‬‭‍‭‭‏⁮⁪‌⁭‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202A‪‫‫​‌‬‬‪‬‎‮‭⁬⁮⁬​⁮⁭⁫⁫‭‮⁯⁭‫⁪‎‎‎‏‮⁪‏⁯‏⁫⁯​‬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206B⁫‏⁭⁬‏‭⁮‎⁮‍‫​⁭‌⁯‪‌‭‎‌⁯⁮‍‬⁮‮‪‮⁬⁬‪‪‪‬‌‫‬‬‮([In] int obj0) => Math.Abs(obj0);

    static string \u200E⁫⁯‫‎⁫⁮‫⁬‎‫‭⁫⁭‮‌⁫⁭⁪⁪⁯‫⁬‌⁬‬​⁬‫‍‌‏⁮⁭⁪‌⁮⁬‍‏‮([In] object obj0) => obj0.ToString();

    static string \u202A‌‭​‮‏‌⁬⁬⁭​⁮​⁪‮‪‪⁭‭‌‌‫‏⁭​‎‫‍‎⁪‭‍‎‪‏​‮⁮⁬⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F​⁮‮‭⁭‪⁪​⁭​⁮‬⁪⁯‪‍⁯‍⁭⁮⁫⁭⁪⁬‫⁬‏‪‍⁮⁫⁫‮‬‌‫‮‮‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200C‭⁭‫‌⁬‫‫‎‭‭‮⁬‏⁫‮‮‎‎‪‫‭‎‏⁬‭⁫⁫‪⁯​‪‎⁫‬‮​‫‎‮‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
