// Decompiled with JetBrains decompiler
// Type: AstroMath.Transform
// Assembly: IUnionSemanticCodeGr, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 54936E77-57E9-4A01-8A40-CDD9C21A9B24
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4a11f3ee9b7abe32546655a9f702013b42b9f162a262dca3052e2761c20ed447.exe

using System;

namespace AstroMath
{
  public class Transform
  {
    public static double SinD(double x) => Math.Sin(x * (2.0 * Math.PI) / 360.0);

    public static double CosD(double x) => Math.Cos(x * (2.0 * Math.PI) / 360.0);

    public static double RadiansToDegrees(double rad) => rad * (180.0 / Math.PI);

    public static double DegreesToRadians(double deg) => deg % 360.0 * (Math.PI / 180.0);

    public static double HoursToRadians(double hours) => hours % 24.0 / 24.0 * (2.0 * Math.PI);

    public static double RadiansToHours(double radians) => radians / (2.0 * Math.PI) * 24.0 % 24.0;

    public static double HoursToDegrees(double hours) => hours % 24.0 / 24.0 * 360.0;

    public static double DegreesToHours(double degrees) => degrees / 360.0 * 24.0 % 24.0;

    public static double HourAngleToPolarAngle(double haH) => Transform.NormalizeRadianRange(-(Transform.HoursToRadians(haH) - Transform.HoursToRadians(6.0)));

    public static double NormalizeDegreeRange(double angleD) => (angleD % 360.0 + 360.0) % 360.0;

    public static double NormalizeRadianRange(double angleR) => (angleR % (2.0 * Math.PI) + 2.0 * Math.PI) % (2.0 * Math.PI);

    public static double NormalizeHours(TimeSpan hours) => (hours.TotalHours % 24.0 + 24.0) % 24.0;

    public static double NormalizeHours(double hours) => (hours % 24.0 + 24.0) % 24.0;
  }
}
