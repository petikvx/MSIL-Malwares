// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79B654F2-A9B8-4BE3-9734-859D467B8C8A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00032-msil\Trojan-Ransom.Win32.Blocker.alkh-77164545a196556797cfbc35a71289019e69cc53b20c45eb74f3d877c3c1e0d3.exe.exe

using \u0001;
using \u0006;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Text;

namespace \u0006
{
  internal class \u0003
  {
    private static readonly string \u0001 = "0";
    private static readonly string \u0002 = "74";
    private static readonly byte[] \u0003 = (byte[]) null;
    private static readonly Hashtable \u0004 = (Hashtable) null;
    private static readonly bool \u0005 = false;
    private static readonly int \u0006 = 0;

    public static string \u0001(int _param0)
    {
      _param0 -= \u0003.\u0006;
      if (\u0003.\u0005)
      {
        string str = (string) \u0003.\u0004[(object) _param0];
        if (str != null)
          return str;
      }
      int num1 = _param0;
      byte[] numArray1 = \u0003.\u0003;
      int index1 = num1;
      int index2 = index1 + 1;
      int num2 = (int) numArray1[index1];
      int count;
      if ((num2 & 128) == 0)
      {
        count = num2;
        if (count == 0)
          return string.Empty;
      }
      else if ((num2 & 64) == 0)
      {
        count = ((num2 & 63) << 8) + (int) \u0003.\u0003[index2++];
      }
      else
      {
        int num3 = (num2 & 31) << 24;
        byte[] numArray2 = \u0003.\u0003;
        int index3 = index2;
        int num4 = index3 + 1;
        int num5 = (int) numArray2[index3] << 16;
        int num6 = num3 + num5;
        byte[] numArray3 = \u0003.\u0003;
        int index4 = num4;
        int num7 = index4 + 1;
        int num8 = (int) numArray3[index4] << 8;
        int num9 = num6 + num8;
        byte[] numArray4 = \u0003.\u0003;
        int index5 = num7;
        index2 = index5 + 1;
        int num10 = (int) numArray4[index5];
        count = num9 + num10;
      }
      try
      {
        byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0003.\u0003, index2, count));
        string str = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
        if (\u0003.\u0005)
        {
          try
          {
            \u0003.\u0004.Add((object) _param0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0003()
    {
      if (\u0003.\u0001 == "1")
      {
        \u0003.\u0005 = true;
        \u0003.\u0004 = new Hashtable();
      }
      \u0003.\u0006 = Convert.ToInt32(\u0003.\u0002);
      using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("{90ccb715-6faa-4887-ba71-98fef96b6ce4}"))
      {
        int int32 = Convert.ToInt32(manifestResourceStream.Length);
        byte[] buffer = new byte[int32];
        manifestResourceStream.Read(buffer, 0, int32);
        \u0003.\u0003 = \u0005.\u0001(buffer);
        manifestResourceStream.Close();
      }
    }
  }
}
