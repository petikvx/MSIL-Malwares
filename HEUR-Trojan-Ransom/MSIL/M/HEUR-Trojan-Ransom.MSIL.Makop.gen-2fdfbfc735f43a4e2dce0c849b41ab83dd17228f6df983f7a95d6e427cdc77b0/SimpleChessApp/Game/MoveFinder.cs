// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = 1098009015;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1819762246)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.board = b;
            num1 = (int) num2 * -197374760 ^ -1082785247;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void FindAllMoves()
    {
      this.Clear();
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_5:
        int num1 = !enumerator.MoveNext() ? -1108885903 : (num1 = -1792993626);
        ChessPiece current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2097001367)) % 6U)
          {
            case 0:
              num1 = -1792993626;
              continue;
            case 1:
              goto label_5;
            case 3:
              current = enumerator.Current;
              num1 = -1984812587;
              continue;
            case 4:
              this.FindMoveFrom(current.Current);
              num1 = (int) num2 * -1603691283 ^ 898321586;
              continue;
            case 5:
              num1 = (int) num2 * -703647450 ^ 1872869124;
              continue;
            default:
              goto label_9;
          }
        }
      }
label_9:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.BlackPieces.Values.GetEnumerator())
      {
label_14:
        int num3 = enumerator.MoveNext() ? -1587127001 : (num3 = -2104300459);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -2097001367)) % 4U)
          {
            case 1:
              goto label_14;
            case 2:
              this.FindMoveFrom(enumerator.Current.Current);
              num3 = -974522508;
              continue;
            case 3:
              num3 = -1587127001;
              continue;
            default:
              goto label_17;
          }
        }
      }
label_17:
      bool showAllMoves = this.board.ShowAllMoves;
label_18:
      int num5 = -1353669968;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num5 ^ -2097001367)) % 5U)
        {
          case 0:
            goto label_20;
          case 1:
            int num7 = !showAllMoves ? -283113677 : (num7 = -483262291);
            num5 = num7 ^ (int) num6 * 1435273358;
            continue;
          case 2:
            goto label_18;
          case 3:
            num5 = (int) num6 * 461427711 ^ -794326720;
            continue;
          case 4:
            this.HighLightMoveStyle();
            num5 = (int) num6 * 219462784 ^ 614815930;
            continue;
          default:
            goto label_15;
        }
      }
label_20:
      return;
label_15:;
    }

    public void FindMoveFrom(Square x)
    {
      Pieces kind = x.Piece.Kind;
label_1:
      int num1 = -872037656;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -330452988)) % 16U)
        {
          case 0:
            num1 = (int) num2 * -1319652505 ^ -1193483258;
            continue;
          case 1:
            num1 = (int) num2 * 227616406 ^ 479535586;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 2073044464 ^ -1957724090;
            continue;
          case 4:
            num1 = (int) num2 * -2051182503 ^ 302868418;
            continue;
          case 5:
label_17:
            this.handleBishop(x);
            num1 = -533351274;
            continue;
          case 6:
label_8:
            this.handleKnight(x);
            num1 = -226229801;
            continue;
          case 7:
label_10:
            this.handleRook(x);
            num1 = -1674262242;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 2124290936 ^ 1165106478;
            continue;
          case 10:
            num1 = (int) num2 * -418656983 ^ 330924988;
            continue;
          case 11:
            num1 = (int) num2 * -848520900 ^ -1367028478;
            continue;
          case 12:
            switch (kind)
            {
              case Pieces.Pawn:
                goto label_14;
              case Pieces.Knight:
                goto label_8;
              case Pieces.Bishop:
                goto label_17;
              case Pieces.Rook:
                goto label_10;
              case Pieces.King:
                goto label_13;
              case Pieces.Queen:
                goto label_9;
              default:
                num1 = (int) num2 * 616914296 ^ -1556493283;
                continue;
            }
          case 13:
label_9:
            this.handleQueen(x);
            num1 = -1005430843;
            continue;
          case 14:
label_14:
            this.handlePawn(x);
            num1 = -147434640;
            continue;
          case 15:
label_13:
            this.handleKing(x);
            num1 = -347027697;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
label_1:
      int num1 = 1318654417;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        int num5;
        int b;
        Square square;
        bool flag1;
        bool flag2;
        bool flag3;
        int num6;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        int num8;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num2 = (uint) (num1 ^ 2134324786)) % 66U)
        {
          case 0:
            num9 = num5 < 8 ? 1 : 0;
            goto label_73;
          case 1:
            num1 = (int) num2 * -1367013770 ^ -507180166;
            continue;
          case 2:
            int num19 = !flag12 ? -341637101 : (num19 = -1855639771);
            num1 = num19 ^ (int) num2 * 1823038215;
            continue;
          case 3:
            flag8 = this.board[num7, x.Rank].Piece != null;
            num1 = (int) num2 * 2071299211 ^ -1724245991;
            continue;
          case 4:
            num5 = 0;
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * -1756710484 ^ -364893463;
              continue;
            }
            num10 = 1;
            goto label_98;
          case 5:
            int num20 = num6 >= 0 ? -1888116195 : (num20 = -996400532);
            num1 = num20 ^ (int) num2 * -445658160;
            continue;
          case 6:
            int num21 = flag7 ? -1912252173 : (num21 = -1667362578);
            num1 = num21 ^ (int) num2 * -711182194;
            continue;
          case 7:
            this.addMove(num3, num5, x);
            num1 = (int) num2 * -1177254147 ^ 1285708988;
            continue;
          case 8:
            square = this.board[num3, num5];
            flag1 = !square.IsEmpty;
            num1 = (int) num2 * -1376835128 ^ 1016012037;
            continue;
          case 9:
            num5 = x.Rank + num4;
            if (num3 < 8)
            {
              num1 = (int) num2 * 1364864419 ^ 216878627;
              continue;
            }
            goto label_39;
          case 10:
            this.addMove(num3, num5, x);
            num1 = (int) num2 * -421906218 ^ 196613495;
            continue;
          case 11:
            int num22 = flag1 ? -1376142680 : (num22 = -1010173665);
            num1 = num22 ^ (int) num2 * 457317012;
            continue;
          case 12:
            num5 = x.Rank + num4;
            if (num5 >= 0)
            {
              num1 = (int) num2 * -1088902844 ^ 2040327603;
              continue;
            }
            num13 = 0;
            goto label_58;
          case 13:
            num14 = 2;
            break;
          case 14:
            num1 = (int) num2 * 521831781 ^ -717822182;
            continue;
          case 15:
            num15 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_84;
          case 16:
            if (num5 >= 0)
            {
              num1 = (int) num2 * -367459688 ^ -1989446334;
              continue;
            }
            goto label_39;
          case 17:
            int num23 = !flag6 ? -987794735 : (num23 = -871969327);
            num1 = num23 ^ (int) num2 * 1974975511;
            continue;
          case 18:
            num16 = this.board[num6, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_16;
          case 19:
            flag5 = this.board.lastPassantPawn == this.board[num6, x.Rank].Piece;
            num1 = (int) num2 * -1812919980 ^ -1096603950;
            continue;
          case 20:
            num1 = (int) num2 * -1356472601 ^ -1725197077;
            continue;
          case 21:
            num3 = 0;
            num1 = (int) num2 * -707136545 ^ 1520013805;
            continue;
          case 22:
            num1 = 1285052599;
            continue;
          case 23:
            int num24 = flag10 ? -848020362 : (num24 = -622284453);
            num1 = num24 ^ (int) num2 * 1759742808;
            continue;
          case 24:
            num3 = x.File - 1;
            num1 = 1272711628;
            continue;
          case 25:
            square = this.board[num3, num5];
            num1 = (int) num2 * -408179364 ^ -681093757;
            continue;
          case 26:
            if (this.board[num7, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num17 = 0;
              goto label_54;
            }
            else
            {
              num1 = (int) num2 * 1073909664 ^ 1820582937;
              continue;
            }
          case 27:
            this.addCapture(num7, b, x, this.board[num7, x.Rank].Piece);
            num1 = (int) num2 * -1033184212 ^ 971149303;
            continue;
          case 28:
            if (this.board[num6, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num16 = 0;
              goto label_16;
            }
            else
            {
              num1 = (int) num2 * 1887008840 ^ -610630168;
              continue;
            }
          case 29:
            num1 = (int) num2 * 1812162530 ^ -741333771;
            continue;
          case 30:
            num12 = num5 < 8 ? 1 : 0;
            goto label_40;
          case 31:
            num11 = -1;
            goto label_28;
          case 32:
            flag13 = x.Rank == num8;
            num1 = 779942964;
            continue;
          case 33:
            if (num5 >= 0)
            {
              num1 = (int) num2 * 1839871023 ^ -563846341;
              continue;
            }
            goto label_72;
          case 34:
            int num25;
            num1 = num25 = num7 >= 8 ? 1260440003 : (num25 = 1925898787);
            continue;
          case 35:
            num17 = this.board[num7, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_54;
          case 36:
            goto label_1;
          case 37:
            num10 = 6;
            goto label_98;
          case 38:
            int num26 = !flag5 ? -729228792 : (num26 = -1025741814);
            num1 = num26 ^ (int) num2 * 1781419531;
            continue;
          case 39:
            int num27 = !(flag2 | flag3) ? 48461238 : (num27 = 88018754);
            num1 = num27 ^ (int) num2 * 1797244388;
            continue;
          case 40:
            num5 = x.Rank + 2 * num4;
            num1 = (int) num2 * -1007139727 ^ -1725302081;
            continue;
          case 41:
            int num28 = !square.IsEmpty ? -2126184178 : (num28 = -1855435061);
            num1 = num28 ^ (int) num2 * -325584248;
            continue;
          case 42:
            goto label_3;
          case 43:
            num1 = 2000854082;
            continue;
          case 44:
            num1 = 1572537877;
            continue;
          case 45:
            int num29 = !flag9 ? -1734239613 : (num29 = -810575042);
            num1 = num29 ^ (int) num2 * -653082465;
            continue;
          case 46:
            num5 = x.Rank + num4;
            if (num3 >= 0)
            {
              num1 = (int) num2 * -1369608678 ^ 1568902775;
              continue;
            }
            goto label_72;
          case 47:
            num13 = num5 < 8 ? 1 : 0;
            goto label_58;
          case 48:
            if (x.Rank != 3)
            {
              num18 = 0;
              goto label_31;
            }
            else
            {
              num1 = (int) num2 * -1252931174 ^ -260233197;
              continue;
            }
          case 49:
            if (x.Rank == 4)
            {
              num1 = 1586318795;
              continue;
            }
            num15 = 0;
            goto label_84;
          case 50:
            int num30 = flag11 ? -472770416 : (num30 = -419560893);
            num1 = num30 ^ (int) num2 * 691634707;
            continue;
          case 51:
            num3 = x.File + 1;
            num1 = 979555797;
            continue;
          case 52:
            flag12 = this.board.lastPassantPawn == this.board[num7, x.Rank].Piece;
            num1 = (int) num2 * -790999445 ^ -1635117962;
            continue;
          case 53:
            this.addMove(num3, num5, x);
            num1 = (int) num2 * -231881311 ^ -955195817;
            continue;
          case 54:
            int num31 = flag4 ? 1921911083 : (num31 = 1866993158);
            num1 = num31 ^ (int) num2 * 22692317;
            continue;
          case 55:
            num1 = 1165153998;
            continue;
          case 56:
            this.addCapture(num6, b, x, this.board[num6, x.Rank].Piece);
            num1 = (int) num2 * 187082421 ^ 1957538368;
            continue;
          case 57:
            flag6 = this.board[num6, x.Rank].Piece != null;
            num1 = (int) num2 * -114157349 ^ 1936827916;
            continue;
          case 58:
            int num32 = flag8 ? -53974522 : (num32 = -1781692925);
            num1 = num32 ^ (int) num2 * -1200991556;
            continue;
          case 59:
            this.addMove(num3, num5, x);
            num1 = (int) num2 * 1035177375 ^ 473354705;
            continue;
          case 60:
            square = this.board[num3, num5];
            num1 = (int) num2 * -378511796 ^ -1653150922;
            continue;
          case 61:
            num18 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_31;
          case 62:
            flag9 = !square.IsEmpty;
            num1 = (int) num2 * -1032813769 ^ -773908987;
            continue;
          case 63:
            num1 = (int) num2 * 906345979 ^ -64420687;
            continue;
          case 64:
            int num33 = !flag13 ? 294978094 : (num33 = 1072811360);
            num1 = num33 ^ (int) num2 * 787363036;
            continue;
          case 65:
            num6 = x.File - 1;
            num7 = x.File + 1;
            num1 = (int) num2 * 181792349 ^ 2061103506;
            continue;
          default:
            goto label_100;
        }
label_9:
        b = num14;
        num1 = 177275415;
        continue;
label_16:
        flag4 = num16 != 0;
        num1 = 1697317168;
        continue;
label_28:
        num4 = num11;
        num3 = x.File;
        num1 = 778322156;
        continue;
label_31:
        flag3 = num18 != 0;
        if (flag2)
        {
          num14 = 5;
          goto label_9;
        }
        else
        {
          num1 = 335206917;
          continue;
        }
label_39:
        num12 = 0;
label_40:
        flag7 = num12 != 0;
        num1 = 1311566402;
        continue;
label_54:
        flag10 = num17 != 0;
        num1 = 1526893771;
        continue;
label_58:
        int num34;
        num1 = num34 = num13 == 0 ? 1285052599 : (num34 = 1527529541);
        continue;
label_72:
        num9 = 0;
label_73:
        flag11 = num9 != 0;
        num1 = 582333216;
        continue;
label_84:
        flag2 = num15 != 0;
        num1 = 1360683050;
        continue;
label_98:
        num8 = num10;
        if (x.Piece.Color == PieceColor.White)
        {
          num11 = 1;
          goto label_28;
        }
        else
          num1 = 517898427;
      }
label_3:
      return;
label_100:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = 734720955;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1397934126)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1539472919 ^ 651185876;
            continue;
          case 1:
            this.handleRook(x);
            this.handleBishop(x);
            num1 = (int) num2 * 1963208263 ^ -1701006455;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
      this.addMove(x.File + 1, x.Rank - 1, x);
      this.addMove(x.File - 1, x.Rank + 1, x);
label_1:
      int num1 = 1516043984;
      bool canCastleKingSide;
      bool flag1;
      bool flag2;
      bool canCastleQueenSide;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 47287047)) % 25U)
        {
          case 0:
            int num3 = flag2 ? 2042461514 : (num3 = 2131700182);
            num1 = num3 ^ (int) num2 * -75284803;
            continue;
          case 1:
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * -1628486207 ^ -1603674522;
            continue;
          case 2:
            num1 = 225863465;
            continue;
          case 3:
            canCastleKingSide = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * 1374001116 ^ -2108723716;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.handleBigCastling(x);
            num1 = (int) num2 * 280572936 ^ 1670568397;
            continue;
          case 6:
            canCastleQueenSide = this.board.BlackCanCastleQueenSide;
            num1 = 1826735469;
            continue;
          case 7:
            int num4 = !canCastleKingSide ? -2139949990 : (num4 = -795267543);
            num1 = num4 ^ (int) num2 * -1227521786;
            continue;
          case 8:
            this.handleBigCastling(x);
            num1 = (int) num2 * -649329261 ^ -1633743354;
            continue;
          case 9:
            num1 = (int) num2 * 1932918711 ^ 15492321;
            continue;
          case 10:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 168707124 ^ 1477586018;
            continue;
          case 11:
            num1 = (int) num2 * 1062966463 ^ -886091438;
            continue;
          case 12:
            int num5 = !canCastleQueenSide ? -1745993004 : (num5 = -1497152091);
            num1 = num5 ^ (int) num2 * 1389636261;
            continue;
          case 13:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -202324997 ^ -961233127;
            continue;
          case 14:
            flag2 = x.Piece.Color == PieceColor.Black;
            num1 = 500766377;
            continue;
          case 15:
            num1 = 916038816;
            continue;
          case 16:
            flag1 = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -525683468 ^ 1928215000;
            continue;
          case 17:
            int num6 = !flag1 ? 1707936749 : (num6 = 1919082641);
            num1 = num6 ^ (int) num2 * -1913696692;
            continue;
          case 18:
            num1 = (int) num2 * 1952877090 ^ -1374876860;
            continue;
          case 19:
            int num7;
            num1 = num7 = this.board.WhiteCanCastleQueenSide ? 656039409 : (num7 = 859234218);
            continue;
          case 20:
            num1 = (int) num2 * 1969644466 ^ -1754614914;
            continue;
          case 21:
            num1 = (int) num2 * -1481048072 ^ 834185956;
            continue;
          case 22:
            int num8 = this.board.BlackCanCastleKingSide ? 1114011552 : (num8 = 1668570491);
            num1 = num8 ^ (int) num2 * 1943801586;
            continue;
          case 23:
            goto label_3;
          case 24:
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 450209827 ^ -606196028;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
      Square square2 = this.board[x.File - 2, x.Rank];
label_1:
      int num1 = -299891944;
      while (true)
      {
        uint num2;
        bool flag;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -973399649)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            int num4 = flag ? -99757635 : (num4 = -1946015962);
            num1 = num4 ^ (int) num2 * -118154756;
            continue;
          case 2:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 731251941 ^ -851601114;
              continue;
            }
            break;
          case 3:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_10;
          case 4:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 109592465 ^ -640274679;
              continue;
            }
            break;
          case 5:
            goto label_3;
          case 6:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -964437327 ^ 1820934052;
            continue;
          case 7:
            square3 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * -1650140879 ^ 23390780;
            continue;
          default:
            goto label_14;
        }
        num3 = 0;
label_10:
        flag = num3 != 0;
        num1 = -678291538;
      }
label_3:
      return;
label_14:;
    }

    private void handleSmallCastling(Square x)
    {
      Square square1 = this.board[x.File + 1, x.Rank];
label_1:
      int num1 = -208560846;
      while (true)
      {
        uint num2;
        bool flag;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -741301958)) % 7U)
        {
          case 0:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -1640776597 ^ 994370288;
              continue;
            }
            num3 = 0;
            break;
          case 1:
            int num4 = flag ? -1661493574 : (num4 = -1617429479);
            num1 = num4 ^ (int) num2 * -345825758;
            continue;
          case 2:
            goto label_1;
          case 3:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          case 4:
            square2 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * -381144768 ^ 1412142856;
            continue;
          case 5:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * 1457645740 ^ 2016269503;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = -90370355;
      }
label_3:
      return;
label_12:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = 668571241;
      int num2;
      bool flag1;
      int num3;
      int b1;
      int num4;
      bool flag2;
      bool flag3;
      int num5;
      bool flag4;
      bool flag5;
      bool flag6;
      bool flag7;
      bool flag8;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 13368691)) % 37U)
        {
          case 0:
            num1 = (int) num6 * -807479842 ^ -422771032;
            continue;
          case 1:
            num2 = 1;
            num1 = 364019147;
            continue;
          case 2:
            b1 = x.Rank - num2;
            num1 = 1944974119;
            continue;
          case 3:
            flag3 = num3 < 8;
            num1 = 1010576119;
            continue;
          case 4:
            num1 = 1926668360;
            continue;
          case 5:
            num1 = (int) num6 * -1218587123 ^ 2007096516;
            continue;
          case 6:
            ++num3;
            num1 = 1554866755;
            continue;
          case 7:
            num1 = (int) num6 * 1014717533 ^ -2122983345;
            continue;
          case 8:
            flag1 = this.addMove(x.File + num5, x.Rank, x);
            num1 = 80808635;
            continue;
          case 9:
            num1 = (int) num6 * -508655364 ^ -852246937;
            continue;
          case 10:
            flag4 = num5 < 8;
            num1 = 1182492707;
            continue;
          case 11:
            int b2 = x.Rank + num4;
            flag5 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * -1502495054 ^ -314066220;
            continue;
          case 12:
            int num7 = flag5 ? -563693626 : (num7 = -916638768);
            num1 = num7 ^ (int) num6 * 1547049952;
            continue;
          case 13:
            num1 = (int) num6 * -1288452395 ^ 1897645852;
            continue;
          case 14:
            int num8 = flag7 ? 2058811632 : (num8 = 1084427896);
            num1 = num8 ^ (int) num6 * -804784017;
            continue;
          case 15:
            int num9 = !flag2 ? 798125059 : (num9 = 107578717);
            num1 = num9 ^ (int) num6 * -1215737019;
            continue;
          case 16:
            int num10 = !flag3 ? 1431338256 : (num10 = 100832597);
            num1 = num10 ^ (int) num6 * 1414262644;
            continue;
          case 17:
            flag2 = this.addMove(x.File, b1, x);
            num1 = (int) num6 * -936739888 ^ -939359538;
            continue;
          case 18:
            ++num5;
            num1 = (int) num6 * -1618491862 ^ -918591916;
            continue;
          case 19:
            flag7 = num4 < 8;
            num1 = 1334452745;
            continue;
          case 20:
            goto label_3;
          case 21:
            num3 = 1;
            num1 = 1554866755;
            continue;
          case 22:
            num1 = 648677289;
            continue;
          case 23:
            num1 = (int) num6 * -189663139 ^ -342796138;
            continue;
          case 24:
            ++num2;
            num1 = 360967014;
            continue;
          case 25:
            int num11 = !flag8 ? -631126304 : (num11 = -56227015);
            num1 = num11 ^ (int) num6 * 1627597117;
            continue;
          case 26:
            num1 = (int) num6 * -2089288654 ^ -595875690;
            continue;
          case 27:
            int num12 = !flag6 ? -521943813 : (num12 = -648347985);
            num1 = num12 ^ (int) num6 * 1498079407;
            continue;
          case 28:
            num5 = 1;
            num1 = 1240563927;
            continue;
          case 29:
            int num13 = !flag1 ? -1902975573 : (num13 = -146858151);
            num1 = num13 ^ (int) num6 * -1924779662;
            continue;
          case 30:
            int num14 = flag4 ? 252860492 : (num14 = 750389325);
            num1 = num14 ^ (int) num6 * -973188387;
            continue;
          case 31:
            num1 = 1429420457;
            continue;
          case 32:
            goto label_1;
          case 33:
            ++num4;
            num1 = 1659412823;
            continue;
          case 34:
            flag8 = this.addMove(x.File - num3, x.Rank, x);
            num1 = (int) num6 * 1508284590 ^ 874583671;
            continue;
          case 35:
            num4 = 1;
            num1 = (int) num6 * 2049678447 ^ -1443964927;
            continue;
          case 36:
            flag6 = num2 < 8;
            num1 = 17690689;
            continue;
          default:
            goto label_39;
        }
      }
label_3:
      return;
label_39:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = -826462565;
      int num2;
      int a1;
      int num3;
      int a2;
      bool flag1;
      int num4;
      bool flag2;
      int num5;
      int b1;
      bool flag3;
      int a3;
      int a4;
      bool flag4;
      bool flag5;
      bool flag6;
      int b2;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1608651691)) % 39U)
        {
          case 0:
            flag2 = this.addMove(a1, b2, x);
            num1 = (int) num6 * -1143126153 ^ 1567807589;
            continue;
          case 1:
            num1 = (int) num6 * 1999522751 ^ 194084992;
            continue;
          case 2:
            int num7 = flag1 ? -1828323944 : (num7 = -1362682168);
            num1 = num7 ^ (int) num6 * 1425140908;
            continue;
          case 3:
            num1 = (int) num6 * 323209059 ^ -2045777200;
            continue;
          case 4:
            goto label_3;
          case 5:
            int num8 = !flag6 ? -1567914262 : (num8 = -242745271);
            num1 = num8 ^ (int) num6 * -845265310;
            continue;
          case 6:
            int num9 = flag3 ? 1998553311 : (num9 = 1051874286);
            num1 = num9 ^ (int) num6 * -1306656920;
            continue;
          case 7:
            num2 = 1;
            num1 = (int) num6 * 1783185370 ^ 1425858546;
            continue;
          case 8:
            int num10 = flag2 ? 442022611 : (num10 = 554285354);
            num1 = num10 ^ (int) num6 * -104522994;
            continue;
          case 9:
            num1 = (int) num6 * 1588755291 ^ 673591378;
            continue;
          case 10:
            num1 = (int) num6 * -1748537043 ^ -113095329;
            continue;
          case 11:
            b1 = x.Rank - num4;
            num1 = (int) num6 * 1160632674 ^ -440896899;
            continue;
          case 12:
            num1 = (int) num6 * -88163902 ^ -1961640079;
            continue;
          case 13:
            int num11 = !flag5 ? 170230078 : (num11 = 303953);
            num1 = num11 ^ (int) num6 * -1565281098;
            continue;
          case 14:
            a1 = x.File + num2;
            num1 = (int) num6 * 1459784165 ^ -1544678323;
            continue;
          case 15:
            int num12 = flag4 ? 1903226468 : (num12 = 1243739965);
            num1 = num12 ^ (int) num6 * 1423520189;
            continue;
          case 16:
            int num13;
            num1 = num13 = num3 < 8 ? -1442500728 : (num13 = -965347794);
            continue;
          case 17:
            b2 = x.Rank + num2;
            num1 = (int) num6 * -887130911 ^ 233417446;
            continue;
          case 18:
            ++num4;
            num1 = -811597888;
            continue;
          case 19:
            a3 = x.File + num5;
            num1 = -457797455;
            continue;
          case 20:
            num1 = -852316658;
            continue;
          case 21:
            flag6 = num2 < 8;
            num1 = -783961959;
            continue;
          case 22:
            ++num3;
            num1 = -39428219;
            continue;
          case 23:
            num5 = 1;
            num1 = -1587526416;
            continue;
          case 24:
            num3 = 1;
            num1 = -837517728;
            continue;
          case 25:
            ++num5;
            num1 = (int) num6 * -1200397660 ^ -149754569;
            continue;
          case 26:
            int b3 = x.Rank + num3;
            flag1 = this.addMove(a2, b3, x);
            num1 = (int) num6 * 1456786195 ^ 1097099491;
            continue;
          case 27:
            int b4 = x.Rank - num5;
            flag4 = this.addMove(a3, b4, x);
            num1 = (int) num6 * -1687870761 ^ 575994808;
            continue;
          case 28:
            flag3 = num4 < 8;
            num1 = -1882074961;
            continue;
          case 29:
            num1 = (int) num6 * -1113858331 ^ -21684908;
            continue;
          case 30:
            a2 = x.File - num3;
            num1 = -1701509863;
            continue;
          case 31:
            flag5 = this.addMove(a4, b1, x);
            num1 = (int) num6 * -1251165301 ^ -69829038;
            continue;
          case 32:
            ++num2;
            num1 = -915912034;
            continue;
          case 33:
            num4 = 1;
            num1 = -2106735818;
            continue;
          case 34:
            num1 = (int) num6 * 1345681006 ^ -1911226038;
            continue;
          case 35:
            int num14;
            num1 = num14 = num5 >= 8 ? -1206304008 : (num14 = -1787545000);
            continue;
          case 36:
            goto label_1;
          case 37:
            a4 = x.File - num4;
            num1 = -2135023506;
            continue;
          case 38:
            num1 = -1188686266;
            continue;
          default:
            goto label_41;
        }
      }
label_3:
      return;
label_41:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = -937972943;
      while (true)
      {
        uint num2;
        int index;
        int Rank;
        int File;
        int[] numArray1;
        ChessPiece piece;
        Square sq;
        int[] numArray2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -812832299)) % 23U)
        {
          case 0:
            num1 = (int) num2 * -624241352 ^ 1083622399;
            continue;
          case 1:
            num1 = -1690453585;
            continue;
          case 2:
            if (File <= 7)
            {
              num1 = (int) num2 * 1750831145 ^ 1938316436;
              continue;
            }
            break;
          case 3:
            goto label_3;
          case 4:
            int num4;
            num1 = num4 = sq.Piece.Color != x.Piece.Color ? -606664460 : (num4 = -674168162);
            continue;
          case 5:
            File = x.File + numArray2[index];
            num1 = -1322694887;
            continue;
          case 6:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 1868854685 ^ -1497008180;
              continue;
            }
            break;
          case 7:
            Rank = x.Rank + numArray1[index];
            num1 = (int) num2 * -576373224 ^ -1216079935;
            continue;
          case 8:
            piece = x.Piece;
            num1 = (int) num2 * 287430073 ^ -1259924901;
            continue;
          case 9:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u200D⁮‬⁪​‫⁪‬‭‫‍‏‫‮⁪‍‍⁪⁯‬‪⁯‌‮‮‪⁪‬‫‮‌‬​‫‬‌⁮‪‍‮‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray2 = numArray3;
            num1 = (int) num2 * -440024071 ^ 1242636078;
            continue;
          case 10:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 2037144406 ^ -828233593;
            continue;
          case 11:
            num1 = (int) num2 * 194380936 ^ 961599342;
            continue;
          case 12:
            num1 = (int) num2 * -549576049 ^ -953048478;
            continue;
          case 13:
            ++index;
            num1 = -1798717394;
            continue;
          case 14:
            if (File >= 0)
            {
              num1 = (int) num2 * 518138942 ^ 1468765408;
              continue;
            }
            break;
          case 15:
            goto label_1;
          case 16:
            num1 = (int) num2 * 1356466782 ^ 2103508936;
            continue;
          case 17:
            int num5;
            num1 = num5 = index >= 8 ? -1055256471 : (num5 = -671683204);
            continue;
          case 18:
            sq = this.board[File, Rank];
            int num6;
            num1 = num6 = !sq.IsEmpty ? -830402015 : (num6 = -246582199);
            continue;
          case 19:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -1245002369 ^ -268932917;
            continue;
          case 20:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u200D⁮‬⁪​‫⁪‬‭‫‍‏‫‮⁪‍‍⁪⁯‬‪⁯‌‮‮‪⁪‬‫‮‌‬​‫‬‌⁮‪‍‮‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray1 = numArray4;
            index = 0;
            num1 = (int) num2 * 571920685 ^ -140023664;
            continue;
          case 21:
            num1 = (int) num2 * 1875814806 ^ 649204204;
            continue;
          case 22:
            num3 = Rank > 7 ? 1 : 0;
            goto label_8;
          default:
            goto label_30;
        }
        num3 = 1;
label_8:
        int num7;
        num1 = num7 = num3 == 0 ? -1936807955 : (num7 = -531945357);
      }
label_3:
      return;
label_30:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = -1719324031;
      ChessPiece piece;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1989720472)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            piece = x.Piece;
            num1 = (int) num2 * -1629348964 ^ -1778030464;
            continue;
          case 2:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * 1045508480 ^ -1931296442;
            continue;
          case 4:
            sq = this.board[a, b];
            num1 = (int) num2 * -960059970 ^ -294298438;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_19;
label_1:
      int num1 = -2045798967;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        Square sq;
        bool isEmpty;
        bool flag3;
        UserAction kind;
        bool flag4;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1879500208)) % 29U)
        {
          case 0:
            goto label_18;
          case 1:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 2:
            num1 = (int) num2 * 803627214 ^ -149085568;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num4 = !flag3 ? -2115633689 : (num4 = -1064712872);
            num1 = num4 ^ (int) num2 * -1471452359;
            continue;
          case 5:
            piece = x.Piece;
            num1 = -1741745416;
            continue;
          case 6:
            kind = UserAction.Capture;
            flag4 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * 1542850716 ^ -232258928;
            continue;
          case 7:
            int num5 = !flag2 ? 274267510 : (num5 = 1055242753);
            num1 = num5 ^ (int) num2 * -10066921;
            continue;
          case 8:
            num1 = (int) num2 * -1131448857 ^ -433254920;
            continue;
          case 10:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 511892034 ^ -606747505;
            continue;
          case 11:
            num1 = (int) num2 * -834384114 ^ -1894022366;
            continue;
          case 12:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * 1317661763 ^ -1606166479;
            continue;
          case 13:
            int num6 = !isEmpty ? 1150723535 : (num6 = 807567083);
            num1 = num6 ^ (int) num2 * -1160364929;
            continue;
          case 14:
            flag1 = false;
            num1 = -34381164;
            continue;
          case 15:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = -1002814158;
            continue;
          case 16:
            int num7;
            num1 = num7 = sq.Piece.Color != x.Piece.Color ? -1738998583 : (num7 = -1571218020);
            continue;
          case 17:
            if (b >= 0)
            {
              num1 = (int) num2 * 321920570 ^ -1381176516;
              continue;
            }
            goto label_19;
          case 18:
            num1 = -1516619433;
            continue;
          case 19:
            num1 = (int) num2 * 1931323174 ^ 1719602164;
            continue;
          case 20:
            flag1 = true;
            num1 = (int) num2 * 1188639876 ^ 423951844;
            continue;
          case 21:
            num1 = (int) num2 * 1130324559 ^ -2053504232;
            continue;
          case 22:
            sq = this.board[a, b];
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * 77055416 ^ 1844741866;
            continue;
          case 23:
            flag1 = true;
            num1 = -959554368;
            continue;
          case 24:
            flag1 = true;
            num1 = (int) num2 * -1139000709 ^ -1389952224;
            continue;
          case 25:
            num1 = (int) num2 * -329245934 ^ 424073704;
            continue;
          case 26:
            if (a <= 7)
            {
              num1 = (int) num2 * 646046246 ^ -1113019123;
              continue;
            }
            goto label_19;
          case 27:
            if (x.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -1643056018 ^ 332314068;
              continue;
            }
            num3 = 0;
            break;
          case 28:
            int num8 = !flag4 ? 2051060495 : (num8 = 304531427);
            num1 = num8 ^ (int) num2 * -726514922;
            continue;
          default:
            goto label_37;
        }
        flag3 = num3 != 0;
        num1 = -615067459;
      }
label_18:
      int num9 = b > 7 ? 1 : 0;
      goto label_20;
label_37:
      return flag1;
label_19:
      num9 = 1;
label_20:
      flag2 = num9 != 0;
      num1 = -742722261;
      goto label_2;
    }

    static void \u200D⁮‬⁪​‫⁪‬‭‫‍‏‫‮⁪‍‍⁪⁯‬‪⁯‌‮‮‪⁪‬‫‮‌‬​‫‬‌⁮‪‍‮‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
