// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.HttpStreamFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.IO;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;

namespace System.ServiceModel.Dispatcher
{
  internal class HttpStreamFormatter : IDispatchMessageFormatter, IClientMessageFormatter
  {
    private string contractName;
    private string contractNs;
    private string operationName;

    public HttpStreamFormatter(OperationDescription operation)
    {
      this.operationName = operation != null ? operation.Name : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (operation));
      this.contractName = operation.DeclaringContract.Name;
      this.contractNs = operation.DeclaringContract.Namespace;
    }

    public object DeserializeReply(Message message, object[] parameters) => (object) this.GetStreamFromMessage(message, false);

    public void DeserializeRequest(Message message, object[] parameters) => parameters[0] = (object) this.GetStreamFromMessage(message, true);

    public Message SerializeReply(
      MessageVersion messageVersion,
      object[] parameters,
      object result)
    {
      Message messageFromStream = this.CreateMessageFromStream(result);
      if (result == null)
        SingleBodyParameterMessageFormatter.SuppressReplyEntityBody(messageFromStream);
      return messageFromStream;
    }

    public Message SerializeRequest(MessageVersion messageVersion, object[] parameters)
    {
      Message messageFromStream = this.CreateMessageFromStream(parameters[0]);
      if (parameters[0] == null)
        SingleBodyParameterMessageFormatter.SuppressRequestEntityBody(messageFromStream);
      return messageFromStream;
    }

    internal static bool IsEmptyMessage(Message message) => message.IsEmpty;

    private Message CreateMessageFromStream(object data)
    {
      Message messageFromStream;
      if (data == null)
      {
        messageFromStream = Message.CreateMessage(MessageVersion.None, (string) null);
      }
      else
      {
        // ISSUE: reference to a compiler-generated method
        messageFromStream = data is Stream stream ? ByteStreamMessage.CreateMessage(stream) : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentException(SR2.GetString(SR2.ParameterIsNotStreamType, (object) data.GetType(), (object) this.operationName, (object) this.contractName, (object) this.contractNs)));
        messageFromStream.Properties["WebBodyFormatMessageProperty"] = (object) WebBodyFormatMessageProperty.RawProperty;
      }
      return messageFromStream;
    }

    private Stream GetStreamFromMessage(Message message, bool isRequest)
    {
      object obj;
      message.Properties.TryGetValue("WebBodyFormatMessageProperty", out obj);
      if (!(obj is WebBodyFormatMessageProperty formatMessageProperty))
      {
        if (HttpStreamFormatter.IsEmptyMessage(message))
          return (Stream) new MemoryStream();
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.MessageFormatPropertyNotFound, (object) this.operationName, (object) this.contractName, (object) this.contractNs)));
      }
      if (formatMessageProperty.Format != WebContentFormat.Raw)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.InvalidHttpMessageFormat, (object) this.operationName, (object) this.contractName, (object) this.contractNs, (object) formatMessageProperty.Format, (object) WebContentFormat.Raw)));
      }
      return (Stream) new StreamFormatter.MessageBodyStream(message, (string) null, (string) null, "Binary", string.Empty, isRequest);
    }
  }
}
