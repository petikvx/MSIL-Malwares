// Decompiled with JetBrains decompiler
// Type:   
// Assembly: Vqblspvdqljhpsgi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE8081E8-66FB-4850-FD50-A5695502DCE6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-9fc4a8a3b82ca7cc67d3b4eed5450d9c6ff148924beec86be1b3178754f4b645.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

internal static class \u000E\u2008\u2000
{
  private static \u000E\u2008\u2000.\u0002 \u0002;

  static \u000E\u2008\u2000()
  {
    \u000E\u2008\u2000.\u0002 obj = new \u000E\u2008\u2000.\u0002();
    if (false)
      return;
    \u000E\u2008\u2000.\u0002 = obj;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static long \u0002()
  {
    if ((object) Assembly.GetCallingAssembly() != (object) typeof (\u000E\u2008\u2000).Assembly || !\u000E\u2008\u2000.\u0002())
      return 0;
    \u000E\u2008\u2000.\u0002 obj1 = \u000E\u2008\u2000.\u0002;
    if (true)
      goto label_4;
label_3:
    if (true)
      Monitor.Enter((object) obj1);
    \u000E\u2008\u2000.\u0002 obj2;
    try
    {
      long num1 = \u000E\u2008\u2000.\u0002.\u0002();
      if (true)
        goto label_8;
label_7:
      long num2;
      if (num2 == 0L)
      {
        Assembly executingAssembly = Assembly.GetExecutingAssembly();
        if (true)
          goto label_11;
label_10:
        List<byte> byteList1 = new List<byte>();
        List<byte> byteList2;
        if (true)
          byteList2 = byteList1;
        Assembly assembly;
        AssemblyName assemblyName;
        try
        {
          assemblyName = assembly.GetName();
        }
        catch
        {
          assemblyName = new AssemblyName(assembly.FullName);
        }
        byte[] collection = assemblyName.GetPublicKeyToken();
        if (collection != null && collection.Length == 0)
          collection = (byte[]) null;
        if (collection != null)
          byteList2.AddRange((IEnumerable<byte>) collection);
        byteList2.AddRange((IEnumerable<byte>) Encoding.Unicode.GetBytes(assemblyName.Name));
        int num3 = \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000));
        int num4 = \u000E\u2008\u2000.\u0005.\u0002();
        byteList2.Add((byte) (num3 >> 8));
        byteList2.Add((byte) (num4 >> 24));
        byteList2.Add((byte) (num3 >> 16));
        byteList2.Add((byte) (num4 >> 8));
        byteList2.Add((byte) (num3 >> 24));
        byteList2.Add((byte) (num4 >> 16));
        byteList2.Add((byte) num3);
        byteList2.Add((byte) num4);
        int count = byteList2.Count;
        ulong num5 = 0;
        for (int index = 0; index != count; ++index)
        {
          ulong num6 = num5 + (ulong) byteList2[index];
          ulong num7 = num6 + (num6 << 20);
          num5 = num7 ^ num7 >> 12;
          byteList2[index] = (byte) 0;
        }
        ulong num8 = num5 + (num5 << 6);
        ulong num9 = num8 ^ num8 >> 22;
        num2 = (long) (num9 + (num9 << 30)) ^ -8741280183885603921L;
        \u000E\u2008\u2000.\u0002.\u0002(num2);
        goto label_23;
label_11:
        assembly = executingAssembly;
        goto label_10;
      }
label_23:
      return num2;
label_8:
      num2 = num1;
      goto label_7;
    }
    finally
    {
      Monitor.Exit((object) obj2);
    }
label_4:
    obj2 = obj1;
    goto label_3;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0002() => \u000E\u2008\u2000.\u0003();

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0003()
  {
    StackTrace stackTrace1 = new StackTrace();
    if (true)
      goto label_3;
label_1:
    StackTrace stackTrace2;
    StackFrame frame = stackTrace2.GetFrame(3);
    if (true)
      goto label_4;
label_2:
    StackFrame stackFrame;
    MethodBase methodBase1 = stackFrame == null ? (MethodBase) null : stackFrame.GetMethod();
    if (true)
      goto label_6;
label_5:
    MethodBase methodBase2;
    Type type = (object) methodBase2 == null ? (Type) null : methodBase2.DeclaringType;
    return (object) type != (object) typeof (RuntimeMethodHandle) && (object) type != null && (object) type.Assembly == (object) typeof (\u000E\u2008\u2000).Assembly;
label_6:
    methodBase2 = methodBase1;
    goto label_5;
label_4:
    stackFrame = frame;
    goto label_2;
label_3:
    stackTrace2 = stackTrace1;
    goto label_1;
  }

  private static int \u0002(Type _param0)
  {
    Type type = _param0;
    if (true)
      ;
    return type.MetadataToken;
  }

  private sealed class \u0002
  {
    private int \u0002;
    private int \u0003;

    internal \u0002()
    {
      if (false)
        return;
      this.\u0002(0L);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal long \u0002()
    {
      if ((object) Assembly.GetCallingAssembly() != (object) typeof (\u000E\u2008\u2000.\u0002).Assembly || !\u000E\u2008\u2000.\u0002())
        return 2918384;
      int[] numArray1 = new int[4];
      if (true)
        goto label_8;
label_3:
      int[] numArray2;
      numArray2[3] = -~-~~--~~-1541242705;
      numArray2[1] = -~-~~-~-~-~69721775;
      numArray2[2] = ~--~~-~-~-~63018737;
      numArray2[0] = ~-~--~~-~-426854992;
      int num1 = this.\u0002;
      if (true)
        goto label_9;
label_4:
      int num2 = this.\u0003;
      if (true)
        goto label_10;
label_5:
      int num3 = ~-~--~~-~1640531524;
      if (true)
        goto label_11;
label_6:
      int num4 = ~-~--~~-~-~957401308;
      if (true)
        goto label_12;
label_7:
      int num5;
      int num6;
      int num7;
      int num8;
      for (int index = 0; index != 32; ++index)
      {
        num6 -= (num5 << 4 ^ num5 >> 5) + num5 ^ num8 + numArray2[num8 >> 11 & 3];
        num8 -= num7;
        num5 -= (num6 << 4 ^ num6 >> 5) + num6 ^ num8 + numArray2[num8 & 3];
      }
      for (int index = 0; index != 4; ++index)
        numArray2[index] = 0;
      return (long) ((ulong) num6 << 32 | (ulong) (uint) num5);
label_12:
      num8 = num4;
      goto label_7;
label_11:
      num7 = num3;
      goto label_6;
label_10:
      num6 = num2;
      goto label_5;
label_9:
      num5 = num1;
      goto label_4;
label_8:
      numArray2 = numArray1;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0002(long _param1)
    {
      if ((object) Assembly.GetCallingAssembly() != (object) typeof (\u000E\u2008\u2000.\u0002).Assembly || !\u000E\u2008\u2000.\u0002())
        return;
      int[] numArray1 = new int[4];
      if (true)
        goto label_7;
label_2:
      int[] numArray2;
      numArray2[1] = ~--~~-~-~-~69721773;
      numArray2[0] = ~-~--~~-~-426854992;
      numArray2[2] = -~-~-~-~~-~63018743;
      numArray2[3] = -~~-~-~-~-1541242709;
      int num1 = -~~-~-~-~1640531524;
      if (true)
        goto label_8;
label_3:
      int num2 = (int) _param1;
      if (true)
        goto label_9;
label_4:
      int num3 = (int) (_param1 >> 32);
      if (true)
        goto label_10;
label_5:
      if (true)
        goto label_11;
label_6:
      int num4;
      int num5;
      int num6;
      int num7;
      for (int index = 0; index != 32; ++index)
      {
        num5 += (num6 << 4 ^ num6 >> 5) + num6 ^ num7 + numArray2[num7 & 3];
        num7 += num4;
        num6 += (num5 << 4 ^ num5 >> 5) + num5 ^ num7 + numArray2[num7 >> 11 & 3];
      }
      for (int index = 0; index != 4; ++index)
        numArray2[index] = 0;
      this.\u0002 = num5;
      this.\u0003 = num6;
      return;
label_11:
      num7 = 0;
      goto label_6;
label_10:
      num6 = num3;
      goto label_5;
label_9:
      num5 = num2;
      goto label_4;
label_8:
      num4 = num1;
      goto label_3;
label_7:
      numArray2 = numArray1;
      goto label_2;
    }
  }

  private sealed class \u0002\u2000
  {
    public \u0002\u2000()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0002() => \u000E\u2008\u2000.\u0003.\u0002(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0002\u2000)), \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0003.\u0003(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u000F)), \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0005))), \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0008)) ^ -~-~~--~~-1144451508, \u000E\u2008\u2000.\u000F.\u0002())));
  }

  private static class \u0003
  {
    internal static int \u0002(int _param0, int _param1)
    {
      int num1 = _param0;
      if (true)
        ;
      int num2 = _param1;
      if (true)
        ;
      int num3 = -~-~~--~-~~-800873152;
      int num4 = num2 - num3;
      return num1 ^ num4;
    }

    internal static int \u0003(int _param0, int _param1)
    {
      int num1 = _param0;
      if (true)
        ;
      int num2 = -~~--~-~~-854385044;
      int num3 = num1 - num2;
      int num4 = _param1;
      if (true)
        ;
      int num5 = -~-~-~~-~707967050;
      int num6 = num4 + num5;
      return num3 ^ num6;
    }

    internal static int \u0005(int _param0, int _param1)
    {
      int num1 = _param0;
      if (true)
        ;
      int num2 = _param1;
      if (true)
        ;
      int num3 = -~~-~-~--~~1658708987;
      int num4 = num2 - num3;
      int num5 = _param0;
      if (true)
        ;
      int num6 = _param1;
      int num7 = num5 - num6;
      int num8 = num4 ^ num7;
      return num1 ^ num8;
    }
  }

  private sealed class \u0005
  {
    public \u0005()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0002() => \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0003.\u0003(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0006)), \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0005)), \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u000F)))), \u000E\u2008\u2000.\u0002\u2000.\u0002());
  }

  private sealed class \u0006
  {
    public \u0006()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0002() => \u000E\u2008\u2000.\u0003.\u0002(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0008)), \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u000E)) ^ \u000E\u2008\u2000.\u0003.\u0003(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0006)), \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0002\u2000)), \u000E\u2008\u2000.\u000E.\u0002())));
  }

  private sealed class \u0008
  {
    public \u0008()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0002() => \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0003.\u0002(\u000E\u2008\u2000.\u0006.\u0002() ^ -~~-~-~-~-527758449, \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u000E))), \u000E\u2008\u2000.\u0003.\u0003(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0005)) ^ \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0002\u2000)), ~-~--~~-~893227788));
  }

  private sealed class \u000E
  {
    public \u000E()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0002() => \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u000E)), \u000E\u2008\u2000.\u0003.\u0002(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0005)), \u000E\u2008\u2000.\u0003.\u0003(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0006)), \u000E\u2008\u2000.\u0003.\u0005(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0008)), \u000E\u2008\u2000.\u0003.\u0002(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u000F)), \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0002\u2000)))))));
  }

  private sealed class \u000F
  {
    public \u000F()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0002() => \u000E\u2008\u2000.\u0003.\u0003(\u000E\u2008\u2000.\u0003.\u0003(\u000E\u2008\u2000.\u0008.\u0002(), \u000E\u2008\u2000.\u0003.\u0002(\u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u000F)), \u000E\u2008\u2000.\u0006.\u0002())), \u000E\u2008\u2000.\u0002(typeof (\u000E\u2008\u2000.\u0002\u2000)));
  }
}
