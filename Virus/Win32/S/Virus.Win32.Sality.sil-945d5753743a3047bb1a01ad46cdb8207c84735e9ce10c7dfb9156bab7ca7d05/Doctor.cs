// Decompiled with JetBrains decompiler
// Type: Appointments.Doctor
// Assembly: Appointments, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 296A15D6-EEB9-4ED6-B937-9857DD43439A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Sality.sil-945d5753743a3047bb1a01ad46cdb8207c84735e9ce10c7dfb9156bab7ca7d05.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace Appointments
{
  [Table(Name = "dbo.Doctors")]
  public class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);
    private Guid _ID;
    private string _Name;
    private EntitySet<Appointment> _Appointments;

    public Doctor() => this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));

    [Column(DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true, Storage = "_ID")]
    public Guid ID
    {
      get => this._ID;
      set
      {
        if (!(this._ID != value))
          return;
        this.SendPropertyChanging();
        this._ID = value;
        this.SendPropertyChanged(nameof (ID));
      }
    }

    [Column(CanBeNull = false, DbType = "NVarChar(50) NOT NULL", Storage = "_Name")]
    public string Name
    {
      get => this._Name;
      set
      {
        if (!(this._Name != value))
          return;
        this.SendPropertyChanging();
        this._Name = value;
        this.SendPropertyChanged(nameof (Name));
      }
    }

    [Association(Name = "Doctor_Appointment", OtherKey = "Doctor_ID", Storage = "_Appointments", ThisKey = "ID")]
    public EntitySet<Appointment> Appointments
    {
      get => this._Appointments;
      set => this._Appointments.Assign((IEnumerable<Appointment>) value);
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      if (this.PropertyChanging == null)
        return;
      this.PropertyChanging((object) this, Doctor.emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanged(string propertyName)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    private void attach_Appointments(Appointment entity)
    {
      this.SendPropertyChanging();
      entity.Doctor = this;
    }

    private void detach_Appointments(Appointment entity)
    {
      this.SendPropertyChanging();
      entity.Doctor = (Doctor) null;
    }
  }
}
