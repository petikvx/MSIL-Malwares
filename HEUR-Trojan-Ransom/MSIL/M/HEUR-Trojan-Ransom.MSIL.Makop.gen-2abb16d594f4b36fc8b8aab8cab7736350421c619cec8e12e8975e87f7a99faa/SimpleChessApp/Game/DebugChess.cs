// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: طv, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8DDF840D-AD0E-4D2F-A03C-7E334C2C97A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2abb16d594f4b36fc8b8aab8cab7736350421c619cec8e12e8975e87f7a99faa.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = 1213075183;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 501024501)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -1929320676 ^ 1225358877;
            continue;
          case 2:
            num1 = (int) num2 * -1685587068 ^ 79428868;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.b = board;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -1919329784;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1299052976)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1622095583 ^ 827170577;
            continue;
          case 2:
            num1 = (int) num2 * 25957508 ^ 1684758478;
            continue;
          case 3:
            num1 = (int) num2 * -316075548 ^ 1952852106;
            continue;
          case 4:
            this.b.DisableTurns = true;
            this.b.addWhite(4, 4, x);
            this.b.lights.FindAllMoves();
            num1 = -1999787926;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 677102494 ^ 2020818034;
            continue;
          case 7:
            int num3 = x != Pieces.King ? -1765410406 : (num3 = -935759677);
            num1 = num3 ^ (int) num2 * 741180496;
            continue;
          case 8:
            this.b.ClearBoard();
            num1 = (int) num2 * -143230344 ^ -692891213;
            continue;
          case 9:
            num1 = (int) num2 * 1509387661 ^ -1107916450;
            continue;
          case 10:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -132571918 ^ -1086436943;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = -368152034;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1945772234)) % 14U)
        {
          case 0:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 1185345475 ^ -1620086087;
            continue;
          case 1:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 2023317592 ^ -760211473;
            continue;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * 1809982492 ^ -1711819502;
            continue;
          case 3:
            num1 = (int) num2 * 2142810700 ^ 258532565;
            continue;
          case 4:
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * -1247850277 ^ 36612808;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 570301613 ^ -1762979031;
            continue;
          case 7:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 161862873 ^ 1232086792;
            continue;
          case 8:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 1116067653 ^ -886751434;
            continue;
          case 9:
            num1 = (int) num2 * 1028406837 ^ 287135107;
            continue;
          case 10:
            goto label_1;
          case 11:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -2034878253 ^ -1345195915;
            continue;
          case 12:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1023311182 ^ 1779729583;
            continue;
          case 13:
            num1 = (int) num2 * -189707947 ^ 453604518;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    internal void TestPromotion()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -467689708;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -14884400)) % 8U)
        {
          case 0:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * -1949252176 ^ 405324237;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -2057417555 ^ -108094890;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -1371411227 ^ 1815137348;
            continue;
          case 5:
            num1 = (int) num2 * -1938260463 ^ -1120736358;
            continue;
          case 6:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 1726697230 ^ -474321203;
            continue;
          case 7:
            this.b.addWhite(4, 6, Pieces.Pawn);
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * 1672748751 ^ 270315175;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -2072730344;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1042075988)) % 12U)
        {
          case 0:
            goto label_3;
          case 1:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 918267442 ^ 1370729867;
            continue;
          case 2:
            num1 = (int) num2 * -1977994013 ^ -689778275;
            continue;
          case 3:
            this.b.addBlack(4, 7, Pieces.King);
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1790658852 ^ -320187926;
            continue;
          case 4:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 45027532 ^ 1951326114;
            continue;
          case 5:
            num1 = (int) num2 * 1877004701 ^ -2131800462;
            continue;
          case 6:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -391426939 ^ 1579039093;
            continue;
          case 7:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 1801086107 ^ 179734781;
            continue;
          case 8:
            num1 = (int) num2 * -1173854587 ^ 1221499861;
            continue;
          case 9:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1528195163 ^ 173819874;
            continue;
          case 10:
            goto label_1;
          case 11:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 303173815 ^ 2078882217;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 2099608407;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 94462397)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 908014037 ^ 1632933174;
            continue;
          case 2:
            this.b.addWhite(3, 1, Pieces.Pawn);
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * 215387095 ^ 2002809633;
            continue;
          case 3:
            num1 = (int) num2 * 387643754 ^ -1010921776;
            continue;
          case 4:
            num1 = (int) num2 * 1191144438 ^ 735714084;
            continue;
          case 5:
            this.b.ClearBoard();
            num1 = (int) num2 * 1613174611 ^ -1065148075;
            continue;
          case 6:
            goto label_3;
          case 7:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1195642473 ^ -1076728191;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 213139767 ^ 1710425305;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 2859700;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 861317847)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1782547414 ^ -310003685;
            continue;
          case 2:
            this.b.addWhite(3, 0, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -27347701 ^ 1890193454;
            continue;
          case 3:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -877882783 ^ -1093603603;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.b.ClearBoard();
            num1 = (int) num2 * -18416202 ^ -847131996;
            continue;
          case 6:
            num1 = (int) num2 * -1351624338 ^ 2108438181;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
      this.b.DisableTurns = true;
label_1:
      int num1 = 1978617219;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 131105289)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 585493937 ^ -1603949141;
            continue;
          case 1:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -153991623 ^ -74463588;
            continue;
          case 2:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -362159294 ^ -190917644;
            continue;
          case 3:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 2037940538 ^ 1557729163;
            continue;
          case 4:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -112981091 ^ -1522308928;
            continue;
          case 5:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1648690299 ^ 1666444439;
            continue;
          case 6:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -2053213995 ^ -1519145774;
            continue;
          case 7:
            num1 = (int) num2 * 1802116709 ^ 635011316;
            continue;
          case 8:
            num1 = (int) num2 * 1386251674 ^ 500856746;
            continue;
          case 9:
            this.b.addWhite(7, 0, Pieces.Rook);
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * 125365309 ^ 322661872;
            continue;
          case 11:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_13:
      this.b.lights.FindAllMoves();
    }
  }
}
