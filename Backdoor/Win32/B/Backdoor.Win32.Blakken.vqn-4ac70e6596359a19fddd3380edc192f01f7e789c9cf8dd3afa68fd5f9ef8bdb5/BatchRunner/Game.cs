// Decompiled with JetBrains decompiler
// Type: BatchRunner.Game
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace BatchRunner
{
  public class Game
  {
    private DoubleMapper Double = new DoubleMapper();
    private IntegerMapper Integer = new IntegerMapper();
    private Map<string, Fleet> deDupe = new Map<string, Fleet>();
    private string mapFilename;
    private string mapData;
    private int initMode;
    private StringBuilder gamePlayback;
    private int maxGameLength;
    private int numTurns;
    private string logFilename;

    public Game(string mapName, int maxGameLength, int mode, string logFilename)
    {
      this.logFilename = logFilename;
      this.Planets = new List<Planet>();
      this.Fleets = new List<Fleet>();
      this.gamePlayback = Game.\u200E‭⁬⁪‭⁮‮‪‍⁬⁭⁮⁬⁬⁪⁫⁯​‭​‬‏‪​‌‬‮‫‌‫‫⁫‍⁯⁪‮⁮‪⁮‮‮();
      this.initMode = mode;
      switch (this.initMode)
      {
        case 0:
          this.mapFilename = mapName;
          break;
        case 1:
          this.mapData = mapName;
          break;
      }
      this.maxGameLength = maxGameLength;
      this.numTurns = 0;
    }

    public int Init()
    {
      if (this.logFilename != null)
      {
        try
        {
label_2:
          int num1 = 1041758505;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1961676689)) % 3U)
            {
              case 0:
                goto label_2;
              case 2:
                Game.\u206D⁭‪‌⁬‮‭⁭‮‭‍​‏‍⁬‬‫‍⁫‍‪‏‏‏‬‌⁯‮⁮⁯⁯⁫⁭‍⁭⁭‮‭‌‍‮(this.logFilename, "initializing");
                num1 = (int) num2 * 1849648883 ^ -1741224346;
                continue;
              default:
                goto label_9;
            }
          }
        }
        catch
        {
label_6:
          int num3 = 676191132;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ 1961676689)) % 3U)
            {
              case 0:
                goto label_6;
              case 1:
                num3 = (int) num4 * 212051141 ^ -180187882;
                continue;
              default:
                goto label_9;
            }
          }
        }
label_9:;
      }
      else
        goto label_12;
label_10:
      int num5 = 782894202;
label_11:
      int initMode;
      int num6;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num5 ^ 1961676689)) % 11U)
        {
          case 0:
            num6 = this.LoadMapFromFile(this.mapFilename);
            num5 = 53109669;
            continue;
          case 1:
            num6 = 0;
            num5 = 865330105;
            continue;
          case 2:
            int num8;
            num5 = num8 = initMode == 1 ? 1899682043 : (num8 = 335041376);
            continue;
          case 3:
            num6 = this.ParseGameState(this.mapData);
            num5 = 447752631;
            continue;
          case 4:
            goto label_10;
          case 5:
            num5 = (int) num7 * -328446173 ^ -766324085;
            continue;
          case 6:
            num5 = (int) num7 * -1665275634 ^ -169488321;
            continue;
          case 7:
            num5 = (int) num7 * 357603936 ^ -555590355;
            continue;
          case 8:
            num5 = (int) num7 * -269724737 ^ 560772469;
            continue;
          case 10:
            goto label_12;
          default:
            goto label_21;
        }
      }
label_21:
      return num6;
label_12:
      initMode = this.initMode;
      num5 = initMode == 0 ? 868198667 : (num5 = 1481548614);
      goto label_11;
    }

    public void WriteLogMessage(string message)
    {
      bool flag = this.logFilename == null;
label_1:
      int num1 = 320049932;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2113601957)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            int num3 = !flag ? -215511724 : (num3 = -976046577);
            num1 = num3 ^ (int) num2 * -2104650459;
            continue;
          case 3:
            goto label_20;
          case 4:
            num1 = (int) num2 * -1331421269 ^ -1089697619;
            continue;
          default:
            goto label_6;
        }
      }
label_20:
      return;
label_6:
      try
      {
label_8:
        int num4 = 1809312342;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ 2113601957)) % 5U)
          {
            case 0:
              num4 = (int) num5 * -625692278 ^ -1465917274;
              continue;
            case 1:
              goto label_18;
            case 2:
              num4 = (int) num5 * 533760142 ^ -1978821273;
              continue;
            case 3:
              goto label_8;
            case 4:
              Game.\u200E‪‍⁫⁯‎⁬⁬​‮⁬‍⁪‮‭​‪‭‫⁮​‏‍‪‏‮⁮‮⁭⁯‮⁪‪​‎‍‍⁬⁬‎‮(this.logFilename, Game.\u200E‮‫‬‎⁯‫‫⁬⁫‪‮‭‫⁪‫​⁪‌⁮‍‮‫‎‌‎‍‌​⁪⁭⁯​⁯​⁫⁪⁮‭⁭‮(message, Game.\u200C⁬‭‍‫‏⁪‏⁪‬‏‫‍‬⁮‏⁬⁮⁭‏‏‍⁬‌⁯‫⁫‪​‪⁮⁬‌⁭‪​​⁫‭‍‮()));
              num4 = (int) num5 * 2034971357 ^ -617156532;
              continue;
            default:
              goto label_14;
          }
        }
label_18:
        return;
label_14:;
      }
      catch (Exception ex)
      {
label_16:
        int num6 = 903516101;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ 2113601957)) % 3U)
          {
            case 0:
              goto label_16;
            case 1:
              num6 = (int) num7 * 753705596 ^ -1515490206;
              continue;
            case 2:
              goto label_10;
            default:
              goto label_5;
          }
        }
label_10:
        return;
label_5:;
      }
    }

    public int NumPlanets()
    {
label_1:
      int num1 = 269407170;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1363049457)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1900564819 ^ -371426238;
            continue;
          case 3:
            count = this.Planets.Count;
            num1 = (int) num2 * 166884316 ^ -726936485;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return count;
    }

    public Planet GetPlanet(int planetID)
    {
label_1:
      int num1 = -1691711219;
      Planet planet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1196148546)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 210897893 ^ 1459670451;
            continue;
          case 2:
            goto label_1;
          case 3:
            planet = this.Planets[planetID];
            num1 = (int) num2 * -1460837355 ^ 912347853;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return planet;
    }

    public int NumFleets()
    {
      int count = this.Fleets.Count;
label_1:
      int num1 = -1410580314;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -849438504)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -539872410 ^ 534721643;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return count;
    }

    public Fleet GetFleet(int fleetID)
    {
      Fleet fleet = this.Fleets[fleetID];
label_1:
      int num1 = 1006372424;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 734040574)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1471305380 ^ 355237587;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return fleet;
    }

    public string toString()
    {
label_1:
      int num1 = 644744126;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1713164127)) % 3U)
        {
          case 1:
            str = this.PovRepresentation(-1);
            num1 = (int) num2 * -426612323 ^ -1169989890;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public string PovRepresentation(int pov)
    {
label_1:
      int num1 = 1621547777;
      StringBuilder stringBuilder;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1202225324)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            stringBuilder = Game.\u200E‭⁬⁪‭⁮‮‪‍⁬⁭⁮⁬⁬⁪⁫⁯​‭​‬‏‪​‌‬‮‫‌‫‫⁫‍⁯⁪‮⁮‪⁮‮‮();
            num1 = (int) num2 * 607345403 ^ -1580127871;
            continue;
          case 2:
            num1 = (int) num2 * 624676963 ^ -1125936799;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      using (List<Planet>.Enumerator enumerator = this.Planets.GetEnumerator())
      {
label_10:
        int num3 = enumerator.MoveNext() ? 1048243378 : (num3 = 1356562049);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1202225324)) % 4U)
          {
            case 0:
              num3 = 1048243378;
              continue;
            case 2:
              Planet current = enumerator.Current;
              Game.\u202D‌‌⁯⁬⁫​‭‬​‪‫‍‏⁮‌‬‌‎⁮‪⁫‪‍‍​‏⁬⁮⁬‪‍⁭​⁭⁭⁫⁭⁯‭‮(stringBuilder, "P {0} {1} {2} {3} {4}\n", new object[5]
              {
                (object) current.X,
                (object) current.Y,
                (object) Game.PovSwitch(pov, current.Owner),
                (object) current.NumShips,
                (object) current.GrowthRate
              });
              num3 = 1637482631;
              continue;
            case 3:
              goto label_10;
            default:
              goto label_12;
          }
        }
      }
label_12:
      using (List<Fleet>.Enumerator enumerator = this.Fleets.GetEnumerator())
      {
label_17:
        int num5 = !enumerator.MoveNext() ? 608095843 : (num5 = 856539338);
        Fleet current;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1202225324)) % 7U)
          {
            case 0:
              num5 = 856539338;
              continue;
            case 2:
              Game.\u202D‌‌⁯⁬⁫​‭‬​‪‫‍‏⁮‌‬‌‎⁮‪⁫‪‍‍​‏⁬⁮⁬‪‍⁭​⁭⁭⁫⁭⁯‭‮(stringBuilder, "F {0} {1} {2} {3} {4} {5}\n", new object[6]
              {
                (object) Game.PovSwitch(pov, current.Owner),
                (object) current.NumShips,
                (object) current.SourcePlanet,
                (object) current.DestinationPlanet,
                (object) current.TotalTripLength,
                (object) current.TurnsRemaining
              });
              num5 = (int) num6 * 1339229111 ^ 524423771;
              continue;
            case 3:
              num5 = (int) num6 * -971384532 ^ -1049271075;
              continue;
            case 4:
              num5 = (int) num6 * -2115204974 ^ 516660711;
              continue;
            case 5:
              goto label_17;
            case 6:
              current = enumerator.Current;
              num5 = 384724475;
              continue;
            default:
              goto label_22;
          }
        }
      }
label_22:
      return Game.\u202C​‍‍⁪⁪⁯‍‫​⁫‫‍​​⁪⁭‌‍⁫‬‬‎‪‭⁮‏‌‮⁪‪‍⁮‬‏‪‫‌‍⁫‮((object) stringBuilder);
    }

    public static int PovSwitch(int pov, int playerID)
    {
      bool flag1 = pov < 0;
label_1:
      int num1 = -1524892993;
      int num2;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1008288139)) % 14U)
        {
          case 1:
            num2 = 1;
            num1 = (int) num3 * 1969872657 ^ -848737107;
            continue;
          case 2:
            int num4 = !flag2 ? -1421625939 : (num4 = -1827046466);
            num1 = num4 ^ (int) num3 * -93485403;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num5 = !flag1 ? -1696503665 : (num5 = -123730617);
            num1 = num5 ^ (int) num3 * -721484901;
            continue;
          case 5:
            int num6 = flag3 ? -460772352 : (num6 = -1819365894);
            num1 = num6 ^ (int) num3 * 2091464964;
            continue;
          case 6:
            num2 = playerID;
            num1 = -1030636551;
            continue;
          case 7:
            flag2 = playerID == 1;
            num1 = -867898273;
            continue;
          case 8:
            num1 = (int) num3 * 419138397 ^ -21160623;
            continue;
          case 9:
            num2 = pov;
            num1 = (int) num3 * -1769294384 ^ 1354642536;
            continue;
          case 10:
            num2 = playerID;
            num1 = (int) num3 * 1022708896 ^ -1335182019;
            continue;
          case 11:
            num1 = (int) num3 * -993534016 ^ 2014918457;
            continue;
          case 12:
            flag3 = playerID == pov;
            num1 = -1848296544;
            continue;
          case 13:
            num1 = (int) num3 * -736451272 ^ 1495649281;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return num2;
    }

    public int Distance(int sourcePlanet, int destinationPlanet)
    {
      Planet planet1 = this.Planets[sourcePlanet];
      Planet planet2 = this.Planets[destinationPlanet];
label_1:
      int num1 = -1762032399;
      double num2;
      int num3;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ -429399807)) % 5U)
        {
          case 1:
            double num5 = planet1.X - planet2.X;
            double num6 = planet1.Y - planet2.Y;
            num2 = Game.\u200F⁫⁫⁬⁫‍‫‎⁬‏‮‮⁯⁫‎⁪‌‍‎⁫‬‌‎‌‪‍⁪‌‫⁫‍‫⁯⁭‎⁮‮‏‬‮‮(num5 * num5 + num6 * num6);
            num1 = (int) num4 * 92575132 ^ -2026313698;
            continue;
          case 2:
            num1 = (int) num4 * -868073119 ^ 2017987133;
            continue;
          case 3:
            num3 = (int) Game.\u206F​‎‮⁬‪⁪‏‏‫‍⁪​‮⁬​⁬​‍‌​‫​‭⁯‬⁮​‎⁮‌‎⁫⁬‎‏⁮‮‭⁬‮(num2);
            num1 = (int) num4 * -938645901 ^ 709802760;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return num3;
    }

    private void FightBattle(Planet p)
    {
      Map<int, int> map = (Map<int, int>) new TreeMap<int, int>();
label_1:
      int num1 = 1167781493;
      Fleet fleet1;
      Fleet fleet2;
      while (true)
      {
        uint num2;
        Fleet fleet3;
        int num3;
        int index;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1006464785)) % 30U)
        {
          case 0:
            if (flag4)
            {
              num1 = (int) num2 * -410938696 ^ -286427880;
              continue;
            }
            goto label_60;
          case 1:
            this.Fleets.Remove(fleet3);
            num1 = 2130801701;
            continue;
          case 2:
            num1 = 102284735;
            continue;
          case 3:
            map.Add(fleet3.Owner, fleet3.NumShips);
            num1 = (int) num2 * 2008062771 ^ 1149529139;
            continue;
          case 4:
            num1 = (int) num2 * -835293180 ^ -1890443811;
            continue;
          case 5:
            ++index;
            num1 = (int) num2 * 971416990 ^ -41867421;
            continue;
          case 6:
            int num5 = flag1 ? 544110242 : (num5 = 394634148);
            num1 = num5 ^ (int) num2 * 1234842002;
            continue;
          case 7:
            flag2 = index < this.Fleets.Count;
            num1 = 1839074528;
            continue;
          case 8:
            map.put(p.Owner, p.NumShips);
            num1 = (int) num2 * 814433170 ^ 1551118920;
            continue;
          case 9:
            num1 = (int) num2 * 475181320 ^ -64061150;
            continue;
          case 10:
            num1 = (int) num2 * -413957193 ^ -153107651;
            continue;
          case 11:
            num1 = 716501138;
            continue;
          case 13:
            flag3 = false;
            index = 0;
            num1 = (int) num2 * 248086765 ^ 1666622461;
            continue;
          case 14:
            fleet3 = this.Fleets[index];
            num1 = (int) num2 * 2103952210 ^ -1253760776;
            continue;
          case 15:
            int num6 = !flag2 ? -684889442 : (num6 = -538949615);
            num1 = num6 ^ (int) num2 * -1863474848;
            continue;
          case 16:
            fleet1 = new Fleet(0, 0);
            fleet2 = new Fleet(0, 0);
            num1 = (int) num2 * 499792690 ^ -1543321349;
            continue;
          case 17:
            goto label_1;
          case 18:
            num1 = 670187690;
            continue;
          case 19:
            num1 = (int) num2 * -1398345813 ^ 1736387406;
            continue;
          case 20:
            num4 = fleet3.DestinationPlanet == p.PlanetID ? 1 : 0;
            break;
          case 21:
            num1 = (int) num2 * 107427904 ^ -321579845;
            continue;
          case 22:
            map[fleet3.Owner] = num3 + fleet3.NumShips;
            num1 = (int) num2 * -1378955082 ^ -1749049281;
            continue;
          case 23:
            int num7 = !map.TryGetValue(fleet3.Owner, out num3) ? -577632638 : (num7 = -1149265273);
            num1 = num7 ^ (int) num2 * -2054191492;
            continue;
          case 24:
            num1 = (int) num2 * 1910161899 ^ -431494651;
            continue;
          case 25:
            if (fleet3.TurnsRemaining > 0)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * 1610747043 ^ -1460509498;
            continue;
          case 26:
            flag3 = true;
            num1 = (int) num2 * -492668233 ^ -2124860442;
            continue;
          case 27:
            flag4 = flag3;
            num1 = (int) num2 * -711862479 ^ -647019732;
            continue;
          case 28:
            num1 = (int) num2 * 1037523133 ^ -1029561858;
            continue;
          case 29:
            num1 = 327987504;
            continue;
          default:
            goto label_35;
        }
        flag1 = num4 != 0;
        num1 = 867076701;
      }
label_60:
      return;
label_35:
      Dictionary<int, int>.Enumerator enumerator = map.GetEnumerator();
      try
      {
label_49:
        int num8 = !enumerator.MoveNext() ? 378429509 : (num8 = 1236751520);
        KeyValuePair<int, int> current;
        while (true)
        {
          uint num9;
          switch ((num9 = (uint) (num8 ^ 1006464785)) % 13U)
          {
            case 0:
              goto label_49;
            case 1:
              fleet2 = new Fleet(current.Key, current.Value);
              num8 = (int) num9 * -1383140390 ^ -1137025962;
              continue;
            case 2:
              int num10 = current.Value > fleet1.NumShips ? 726671959 : (num10 = 1083618243);
              num8 = num10 ^ (int) num9 * 225144868;
              continue;
            case 3:
              num8 = 216509718;
              continue;
            case 4:
              current = enumerator.Current;
              int num11;
              num8 = num11 = current.Value > fleet2.NumShips ? 800615504 : (num11 = 766878455);
              continue;
            case 5:
              fleet2 = fleet1;
              num8 = (int) num9 * 1278882482 ^ 1352507323;
              continue;
            case 6:
              fleet1 = new Fleet(current.Key, current.Value);
              num8 = (int) num9 * -1802350568 ^ 2133562704;
              continue;
            case 7:
              num8 = (int) num9 * -698871571 ^ -1574228150;
              continue;
            case 8:
              num8 = 766878455;
              continue;
            case 9:
              num8 = (int) num9 * 181126253 ^ -1123016937;
              continue;
            case 10:
              num8 = 1236751520;
              continue;
            case 12:
              num8 = 1276554736;
              continue;
            default:
              goto label_57;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_52:
        int num12 = 1293183552;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ 1006464785)) % 3U)
          {
            case 0:
              goto label_52;
            case 2:
              num12 = (int) num13 * -899393663 ^ 1761107968;
              continue;
            default:
              goto label_56;
          }
        }
label_56:;
      }
label_57:
      bool flag = fleet1.NumShips > fleet2.NumShips;
label_58:
      int num14 = 2051827303;
      while (true)
      {
        uint num15;
        switch ((num15 = (uint) (num14 ^ 1006464785)) % 12U)
        {
          case 0:
            goto label_58;
          case 1:
            num14 = (int) num15 * -1265131186 ^ -1158527945;
            continue;
          case 2:
            goto label_54;
          case 3:
            num14 = (int) num15 * 1825490021 ^ 290131865;
            continue;
          case 4:
            num14 = 28834275;
            continue;
          case 5:
            num14 = (int) num15 * -1140290410 ^ 2114674906;
            continue;
          case 6:
            int num16 = !flag ? -1038696914 : (num16 = -1727791110);
            num14 = num16 ^ (int) num15 * -651821328;
            continue;
          case 7:
            p.SetNumShips(0);
            num14 = 1780825311;
            continue;
          case 8:
            num14 = (int) num15 * -10859959 ^ 2077484977;
            continue;
          case 9:
            p.SetOwner(fleet1.Owner);
            num14 = (int) num15 * -477375612 ^ -1652965120;
            continue;
          case 10:
            num14 = (int) num15 * -1258871167 ^ 572725215;
            continue;
          case 11:
            p.SetNumShips(fleet1.NumShips - fleet2.NumShips);
            num14 = (int) num15 * -465791858 ^ -867346798;
            continue;
          default:
            goto label_50;
        }
      }
label_54:
      return;
label_50:;
    }

    public void DoTimeStep()
    {
label_1:
      int num1 = 1734100378;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 113395133)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -2098353572 ^ -57874076;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.ClearDupeCache();
            num1 = (int) num2 * -1468030552 ^ 1905510861;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      using (List<Planet>.Enumerator enumerator = this.Planets.GetEnumerator())
      {
label_13:
        int num3 = !enumerator.MoveNext() ? 2135150809 : (num3 = 1751991899);
        Planet current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 113395133)) % 10U)
          {
            case 0:
              num3 = 1751991899;
              continue;
            case 1:
              num3 = (int) num4 * -74549788 ^ 465543544;
              continue;
            case 2:
              flag = current.Owner > 0;
              num3 = (int) num4 * 1333229038 ^ -189065714;
              continue;
            case 3:
              int num5 = flag ? 583844060 : (num5 = 1239775792);
              num3 = num5 ^ (int) num4 * 383560860;
              continue;
            case 5:
              num3 = 250590612;
              continue;
            case 6:
              num3 = (int) num4 * 1326790462 ^ 875511602;
              continue;
            case 7:
              current.AddShips(current.GrowthRate);
              num3 = (int) num4 * 707101987 ^ 1042932680;
              continue;
            case 8:
              current = enumerator.Current;
              num3 = 1163136391;
              continue;
            case 9:
              goto label_13;
            default:
              goto label_18;
          }
        }
      }
label_18:
      using (List<Fleet>.Enumerator enumerator = this.Fleets.GetEnumerator())
      {
label_22:
        int num6 = !enumerator.MoveNext() ? 416065519 : (num6 = 1662374030);
        Fleet current;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ 113395133)) % 8U)
          {
            case 0:
              num6 = (int) num7 * 1912956567 ^ 563731804;
              continue;
            case 1:
              goto label_22;
            case 3:
              current = enumerator.Current;
              num6 = 1946637257;
              continue;
            case 4:
              num6 = (int) num7 * 1539474434 ^ -876461589;
              continue;
            case 5:
              num6 = (int) num7 * 612573986 ^ -619333825;
              continue;
            case 6:
              current.TimeStep();
              num6 = (int) num7 * -1094272173 ^ 1978435994;
              continue;
            case 7:
              num6 = 1662374030;
              continue;
            default:
              goto label_29;
          }
        }
      }
label_29:
      using (List<Planet>.Enumerator enumerator = this.Planets.GetEnumerator())
      {
label_34:
        int num8 = enumerator.MoveNext() ? 1192829620 : (num8 = 1442451757);
        while (true)
        {
          uint num9;
          switch ((num9 = (uint) (num8 ^ 113395133)) % 6U)
          {
            case 0:
              num8 = 1192829620;
              continue;
            case 1:
              goto label_34;
            case 2:
              num8 = (int) num9 * 323085620 ^ -1478249892;
              continue;
            case 3:
              this.FightBattle(enumerator.Current);
              num8 = 260779501;
              continue;
            case 5:
              num8 = (int) num9 * 1466801858 ^ 938720644;
              continue;
            default:
              goto label_38;
          }
        }
      }
label_38:
      bool flag1 = false;
      using (List<Planet>.Enumerator enumerator = this.Planets.GetEnumerator())
      {
label_48:
        int num10 = !enumerator.MoveNext() ? 2069448247 : (num10 = 1511927381);
        Planet current;
        while (true)
        {
          uint num11;
          switch ((num11 = (uint) (num10 ^ 113395133)) % 9U)
          {
            case 0:
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.Owner);
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ".");
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.NumShips);
              num10 = 902032737;
              continue;
            case 2:
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ",");
              num10 = (int) num11 * 674326117 ^ 891550927;
              continue;
            case 3:
              num10 = 1511927381;
              continue;
            case 4:
              int num12 = !flag1 ? 1171323818 : (num12 = 2055564348);
              num10 = num12 ^ (int) num11 * -198665912;
              continue;
            case 5:
              flag1 = true;
              num10 = (int) num11 * 1530319986 ^ -3149708;
              continue;
            case 6:
              current = enumerator.Current;
              num10 = 1801985525;
              continue;
            case 7:
              goto label_48;
            case 8:
              num10 = (int) num11 * 567103902 ^ 548784199;
              continue;
            default:
              goto label_50;
          }
        }
      }
label_50:
      List<Fleet>.Enumerator enumerator1 = this.Fleets.GetEnumerator();
      try
      {
label_62:
        int num13 = enumerator1.MoveNext() ? 1651773586 : (num13 = 1251296951);
        Fleet current;
        bool flag2;
        while (true)
        {
          uint num14;
          switch ((num14 = (uint) (num13 ^ 113395133)) % 16U)
          {
            case 0:
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ",");
              num13 = (int) num14 * 310069707 ^ -1575442327;
              continue;
            case 1:
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ".");
              num13 = (int) num14 * -1107144129 ^ 825846446;
              continue;
            case 2:
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.DestinationPlanet);
              num13 = (int) num14 * 1646533007 ^ 604692685;
              continue;
            case 3:
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ".");
              num13 = (int) num14 * -324092242 ^ 2078857637;
              continue;
            case 4:
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.Owner);
              num13 = 138746389;
              continue;
            case 5:
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ".");
              num13 = (int) num14 * 913958420 ^ 1601358100;
              continue;
            case 6:
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.NumShips);
              num13 = (int) num14 * 1934734197 ^ -165462490;
              continue;
            case 7:
              int num15 = flag2 ? -263371715 : (num15 = -1349795383);
              num13 = num15 ^ (int) num14 * 950083888;
              continue;
            case 8:
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ".");
              num13 = (int) num14 * 909841167 ^ 1306410867;
              continue;
            case 9:
              goto label_62;
            case 11:
              num13 = 1651773586;
              continue;
            case 12:
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.TurnsRemaining);
              num13 = (int) num14 * -168526635 ^ -1534126216;
              continue;
            case 13:
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.SourcePlanet);
              num13 = (int) num14 * -851161139 ^ 1968150631;
              continue;
            case 14:
              Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ".");
              Game.\u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(this.gamePlayback, current.TotalTripLength);
              num13 = (int) num14 * 941492994 ^ 915173520;
              continue;
            case 15:
              current = enumerator1.Current;
              flag2 = flag1;
              num13 = 1046322346;
              continue;
            default:
              goto label_73;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_69:
        int num16 = 1212996665;
        while (true)
        {
          uint num17;
          switch ((num17 = (uint) (num16 ^ 113395133)) % 3U)
          {
            case 0:
              goto label_69;
            case 1:
              num16 = (int) num17 * -1139558460 ^ 1325737266;
              continue;
            default:
              goto label_72;
          }
        }
label_72:;
      }
label_73:
      Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ":");
      ++this.numTurns;
    }

    public void ClearDupeCache() => this.deDupe.Clear();

    public int IssueOrder(int playerID, int sourcePlanet, int destinationPlanet, int numShips)
    {
label_1:
      int num1 = 557931211;
      int num2;
      while (true)
      {
        uint num3;
        Fleet fleet1;
        Planet planet;
        string message;
        string key;
        Fleet fleet2;
        int num4;
        switch ((num3 = (uint) (num1 ^ 98078055)) % 27U)
        {
          case 0:
            this.DropPlayer(playerID);
            num1 = (int) num3 * -417012984 ^ 744198946;
            continue;
          case 1:
            num1 = (int) num3 * -450911507 ^ 428263245;
            continue;
          case 2:
            message = Game.\u202B‮‫⁫‏​⁮‍‎‪‌‌⁭‍‫‮⁫⁭‫‌‌​⁫​​‏⁪⁪‮⁮‪‎‬⁬‍‭‎‬‪⁭‮("Illegal move player: {0}. From planet {1} owned by {2} with {3} ships, wants to send {4} ships", new object[5]
            {
              (object) playerID,
              (object) sourcePlanet,
              (object) planet.Owner,
              (object) numShips,
              (object) planet.NumShips
            });
            num1 = (int) num3 * -246322701 ^ 1710545688;
            continue;
          case 3:
            num1 = (int) num3 * 14496089 ^ -1912659180;
            continue;
          case 4:
            fleet2.RemoveShips(-numShips);
            num1 = (int) num3 * -32482584 ^ -707175598;
            continue;
          case 5:
            num1 = (int) num3 * -1442127983 ^ -298033875;
            continue;
          case 6:
            num1 = (int) num3 * -2063473244 ^ -800073402;
            continue;
          case 7:
            num2 = -1;
            num1 = (int) num3 * 240847317 ^ 1770236959;
            continue;
          case 8:
            num2 = 0;
            num1 = 1386608204;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num3 * 1548770474 ^ 1678919117;
            continue;
          case 11:
            num4 = numShips < 0 ? 1 : 0;
            goto label_28;
          case 13:
            int num5 = this.deDupe.TryGetValue(key, out fleet2) ? -725564675 : (num5 = -1435604057);
            num1 = num5 ^ (int) num3 * 431054772;
            continue;
          case 14:
            int num6 = this.Distance(sourcePlanet, destinationPlanet);
            fleet1 = new Fleet(planet.Owner, numShips, sourcePlanet, destinationPlanet, num6, num6);
            num1 = 1883509933;
            continue;
          case 15:
            this.WriteLogMessage(message);
            num1 = (int) num3 * -1657412691 ^ -1730373339;
            continue;
          case 16:
            if (planet.Owner == playerID)
            {
              num1 = (int) num3 * 926737907 ^ -890633597;
              continue;
            }
            break;
          case 17:
            num1 = (int) num3 * 542719991 ^ -1956246628;
            continue;
          case 18:
            this.Fleets.Add(fleet1);
            num1 = (int) num3 * 801935912 ^ -300226145;
            continue;
          case 19:
            num1 = (int) num3 * -1536069863 ^ 1617133255;
            continue;
          case 20:
            num1 = (int) num3 * -1227150012 ^ -884210765;
            continue;
          case 21:
            key = Game.\u206A‬⁯⁮⁮‍‍⁮⁮‎⁪‪‮‎⁯‪‬⁬‪⁯​⁬⁭⁫⁭‫‪⁮⁪‍⁯⁮‮⁭‎⁭‬⁪‮‫‮(new string[5]
            {
              playerID.ToString(),
              ";",
              sourcePlanet.ToString(),
              ";",
              destinationPlanet.ToString()
            });
            num1 = (int) num3 * 1372090380 ^ 1749191339;
            continue;
          case 22:
            num1 = (int) num3 * 1290034686 ^ -2143238382;
            continue;
          case 23:
            if (numShips <= planet.NumShips)
            {
              num1 = (int) num3 * -458323737 ^ 379881039;
              continue;
            }
            break;
          case 24:
            planet = this.Planets[sourcePlanet];
            num1 = (int) num3 * -304134318 ^ 650422000;
            continue;
          case 25:
            this.deDupe.Add(key, fleet1);
            num1 = (int) num3 * 2106285436 ^ -679854723;
            continue;
          case 26:
            planet.RemoveShips(numShips);
            num1 = 1010935458;
            continue;
          default:
            goto label_32;
        }
        num4 = 1;
label_28:
        int num7;
        num1 = num7 = num4 != 0 ? 539634062 : (num7 = 593929675);
      }
label_32:
      return num2;
    }

    public void AddFleet(Fleet f)
    {
label_1:
      int num1 = 678879844;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1110280379)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Fleets.Add(f);
            num1 = (int) num2 * -1903396255 ^ 1223811953;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public int IssueOrder(int playerID, string order)
    {
label_1:
      int num1 = -1773436685;
      string[] strArray;
      int sourcePlanet;
      int destinationPlanet;
      int numShips;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -299204306)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = this.IssueOrder(playerID, sourcePlanet, destinationPlanet, numShips);
            num1 = (int) num3 * 2025638846 ^ 387852904;
            continue;
          case 2:
            sourcePlanet = this.Integer.parseInt(strArray[0]);
            num1 = -324148951;
            continue;
          case 4:
            numShips = this.Integer.parseInt(strArray[2]);
            num1 = (int) num3 * -1839864044 ^ 1714728525;
            continue;
          case 5:
            destinationPlanet = this.Integer.parseInt(strArray[1]);
            num1 = (int) num3 * -855316121 ^ -1230368311;
            continue;
          case 6:
            num2 = -1;
            num1 = (int) num3 * -1855283193 ^ 443152367;
            continue;
          case 7:
            num1 = (int) num3 * 1757031855 ^ -579831641;
            continue;
          case 8:
            num1 = (int) num3 * -672836207 ^ 2132882815;
            continue;
          case 9:
            strArray = Game.\u202E⁫‪⁮⁬​‫⁬⁪⁭‮‪‌‏‍⁯⁫⁯‫⁪⁬‍‏⁭​‪‌⁫‬⁮‌‭⁯⁫⁫​‎‭⁫‮(order, new char[1]
            {
              ' '
            });
            int num4 = strArray.Length != 3 ? -2024215099 : (num4 = -1535309346);
            num1 = num4 ^ (int) num3 * -846131064;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return num2;
    }

    public void DropPlayer(int playerID)
    {
      using (List<Planet>.Enumerator enumerator = this.Planets.GetEnumerator())
      {
label_10:
        int num1 = enumerator.MoveNext() ? -430678096 : (num1 = -1091125011);
        Planet current;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -512216527)) % 10U)
          {
            case 0:
              num1 = -2108282781;
              continue;
            case 1:
              int num3 = flag ? 145920258 : (num3 = 586877345);
              num1 = num3 ^ (int) num2 * -836594846;
              continue;
            case 2:
              num1 = (int) num2 * 604158436 ^ -995044724;
              continue;
            case 3:
              num1 = (int) num2 * -1049081808 ^ -1444004883;
              continue;
            case 5:
              flag = current.Owner == playerID;
              num1 = (int) num2 * 1263190149 ^ 1474374709;
              continue;
            case 6:
              current.SetOwner(0);
              num1 = (int) num2 * -1052827103 ^ 2119722711;
              continue;
            case 7:
              num1 = -430678096;
              continue;
            case 8:
              goto label_10;
            case 9:
              current = enumerator.Current;
              num1 = -1200565505;
              continue;
            default:
              goto label_13;
          }
        }
      }
label_13:
      using (List<Fleet>.Enumerator enumerator = this.Fleets.GetEnumerator())
      {
label_20:
        int num4 = enumerator.MoveNext() ? -288515162 : (num4 = -701127450);
        bool flag;
        Fleet current;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ -512216527)) % 11U)
          {
            case 0:
              num4 = -288515162;
              continue;
            case 1:
              current.Kill();
              num4 = (int) num5 * 2081730964 ^ -1703745717;
              continue;
            case 2:
              num4 = (int) num5 * -679907493 ^ -1806142477;
              continue;
            case 3:
              int num6 = flag ? 437740653 : (num6 = 597391455);
              num4 = num6 ^ (int) num5 * 1626305189;
              continue;
            case 4:
              num4 = (int) num5 * -351784358 ^ 654559965;
              continue;
            case 5:
              goto label_27;
            case 6:
              num4 = -646027741;
              continue;
            case 7:
              num4 = (int) num5 * 399012199 ^ 509463260;
              continue;
            case 8:
              current = enumerator.Current;
              num4 = -1343015812;
              continue;
            case 9:
              flag = current.Owner == playerID;
              num4 = (int) num5 * -1743935917 ^ 719920981;
              continue;
            case 10:
              goto label_20;
            default:
              goto label_17;
          }
        }
label_27:
        return;
label_17:;
      }
    }

    public bool IsAlive(int playerID)
    {
      bool flag1;
      using (List<Planet>.Enumerator enumerator = this.Planets.GetEnumerator())
      {
label_8:
        int num1 = enumerator.MoveNext() ? -1923961426 : (num1 = -359358256);
        bool flag2;
        Planet current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1512201012)) % 8U)
          {
            case 0:
              num1 = -973970142;
              continue;
            case 1:
              goto label_9;
            case 2:
              current = enumerator.Current;
              num1 = -1634174213;
              continue;
            case 3:
              num1 = -1923961426;
              continue;
            case 5:
              int num3 = flag2 ? -541553723 : (num3 = -1140155412);
              num1 = num3 ^ (int) num2 * 285472224;
              continue;
            case 6:
              goto label_8;
            case 7:
              flag2 = current.Owner == playerID;
              num1 = (int) num2 * -1034198025 ^ 1338592208;
              continue;
            default:
              goto label_11;
          }
        }
label_9:
        flag1 = true;
        goto label_30;
      }
label_11:
      List<Fleet>.Enumerator enumerator1 = this.Fleets.GetEnumerator();
      try
      {
label_17:
        int num4 = enumerator1.MoveNext() ? -1942440383 : (num4 = -1484425313);
        Fleet current;
        bool flag3;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ -1512201012)) % 8U)
          {
            case 0:
              goto label_15;
            case 1:
              num4 = -687523856;
              continue;
            case 2:
              int num6 = !flag3 ? -1880170297 : (num6 = -1409992666);
              num4 = num6 ^ (int) num5 * 500421541;
              continue;
            case 4:
              goto label_17;
            case 5:
              current = enumerator1.Current;
              num4 = -94868197;
              continue;
            case 6:
              num4 = -1942440383;
              continue;
            case 7:
              flag3 = current.Owner == playerID;
              num4 = (int) num5 * -1087724354 ^ -277303124;
              continue;
            default:
              goto label_26;
          }
        }
label_15:
        flag1 = true;
        goto label_30;
      }
      finally
      {
        enumerator1.Dispose();
label_22:
        int num7 = -2094118858;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ -1512201012)) % 3U)
          {
            case 0:
              goto label_22;
            case 2:
              num7 = (int) num8 * -637854524 ^ 174081135;
              continue;
            default:
              goto label_25;
          }
        }
label_25:;
      }
label_26:
      flag1 = false;
label_27:
      int num9 = -1925025947;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ -1512201012)) % 3U)
        {
          case 1:
            num9 = (int) num10 * 1534852783 ^ -841252518;
            continue;
          case 2:
            goto label_27;
          default:
            goto label_30;
        }
      }
label_30:
      return flag1;
    }

    public int Winner()
    {
label_1:
      int num1 = 461128723;
      List<int> intList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1191870070)) % 4U)
        {
          case 1:
            intList = new List<int>();
            num1 = (int) num2 * 833423388 ^ -232618752;
            continue;
          case 2:
            num1 = (int) num2 * -292012511 ^ -2044441952;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      using (List<Planet>.Enumerator enumerator = this.Planets.GetEnumerator())
      {
label_10:
        int num3 = !enumerator.MoveNext() ? 452071199 : (num3 = 985293274);
        Planet current;
        bool flag1;
        bool flag2;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1191870070)) % 15U)
          {
            case 0:
              num3 = 1170203438;
              continue;
            case 1:
              intList.Add(current.Owner);
              num3 = (int) num4 * 95771104 ^ -850253898;
              continue;
            case 2:
              num3 = (int) num4 * 1101519813 ^ -1738925689;
              continue;
            case 3:
              num3 = (int) num4 * 1025483452 ^ -28251544;
              continue;
            case 5:
              num3 = 985293274;
              continue;
            case 6:
              int num5 = flag2 ? 1375819175 : (num5 = 1659892182);
              num3 = num5 ^ (int) num4 * 2009538634;
              continue;
            case 7:
              num3 = (int) num4 * -675234496 ^ 1014278855;
              continue;
            case 8:
              num3 = 11933745;
              continue;
            case 9:
              current = enumerator.Current;
              num3 = 6144634;
              continue;
            case 10:
              num3 = (int) num4 * 597353058 ^ 260781512;
              continue;
            case 11:
              flag2 = !intList.Contains(current.Owner);
              num3 = (int) num4 * 1021231714 ^ 1148319188;
              continue;
            case 12:
              goto label_10;
            case 13:
              flag1 = current.Owner > 0;
              num3 = (int) num4 * 1973258008 ^ -1931270976;
              continue;
            case 14:
              int num6 = flag1 ? 1965357065 : (num6 = 655310606);
              num3 = num6 ^ (int) num4 * 536406064;
              continue;
            default:
              goto label_23;
          }
        }
      }
label_23:
      using (List<Fleet>.Enumerator enumerator = this.Fleets.GetEnumerator())
      {
label_34:
        int num7 = !enumerator.MoveNext() ? 1245971404 : (num7 = 1695172040);
        bool flag3;
        Fleet current;
        bool flag4;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ 1191870070)) % 13U)
          {
            case 0:
              flag3 = !intList.Contains(current.Owner);
              num7 = (int) num8 * -1483545156 ^ 388933823;
              continue;
            case 1:
              current = enumerator.Current;
              flag4 = current.Owner > 0;
              num7 = 1732374059;
              continue;
            case 2:
              goto label_34;
            case 3:
              num7 = 1458089215;
              continue;
            case 4:
              intList.Add(current.Owner);
              num7 = (int) num8 * 1103487949 ^ 1086792420;
              continue;
            case 5:
              num7 = 1072879052;
              continue;
            case 6:
              num7 = (int) num8 * -790127354 ^ -1001304547;
              continue;
            case 7:
              num7 = 1695172040;
              continue;
            case 8:
              int num9 = !flag4 ? -480456442 : (num9 = -352300543);
              num7 = num9 ^ (int) num8 * 822688333;
              continue;
            case 9:
              num7 = (int) num8 * 648488004 ^ -55282315;
              continue;
            case 10:
              num7 = (int) num8 * 778071415 ^ 1100764667;
              continue;
            case 12:
              int num10 = flag3 ? 102086456 : (num10 = 1858251258);
              num7 = num10 ^ (int) num8 * 1243772887;
              continue;
            default:
              goto label_39;
          }
        }
      }
label_39:
      int count = intList.Count;
label_40:
      int num11 = 101007370;
      int num12;
      int num13;
      while (true)
      {
        uint num14;
        switch ((num14 = (uint) (num11 ^ 1191870070)) % 10U)
        {
          case 0:
            num11 = (int) num14 * -1714351929 ^ 2002715385;
            continue;
          case 1:
            int num15;
            num11 = num15 = num12 == 1 ? 1419192830 : (num15 = 1089319696);
            continue;
          case 2:
            num11 = (int) num14 * 1655844864 ^ 203064390;
            continue;
          case 3:
            num11 = (int) num14 * 1280224941 ^ -1055878304;
            continue;
          case 4:
            num13 = intList[0];
            num11 = 717497414;
            continue;
          case 5:
            num13 = 0;
            num11 = 1575991416;
            continue;
          case 6:
            num12 = count;
            int num16 = num12 == 0 ? 77260935 : (num16 = 1191185719);
            num11 = num16 ^ (int) num14 * 213017399;
            continue;
          case 7:
            goto label_40;
          case 9:
            num13 = -1;
            num11 = 717497414;
            continue;
          default:
            goto label_50;
        }
      }
label_50:
      return num13;
    }

    public string GamePlaybackString()
    {
label_1:
      int num1 = 1543481733;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 787420424)) % 4U)
        {
          case 1:
            str = Game.\u202C​‍‍⁪⁪⁯‍‫​⁫‫‍​​⁪⁭‌‍⁫‬‬‎‪‭⁮‏‌‮⁪‪‍⁮‬‏‪‫‌‍⁫‮((object) this.gamePlayback);
            num1 = (int) num2 * -2016675643 ^ 914793398;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1846577506 ^ 52722462;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public string FlushGamePlaybackString()
    {
label_1:
      int num1 = -1602996499;
      StringBuilder gamePlayback;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -838206832)) % 5U)
        {
          case 0:
            this.gamePlayback = Game.\u200E‭⁬⁪‭⁮‮‪‍⁬⁭⁮⁬⁬⁪⁫⁯​‭​‬‏‪​‌‬‮‫‌‫‫⁫‍⁯⁪‮⁮‪⁮‮‮();
            str = Game.\u202C​‍‍⁪⁪⁯‍‫​⁫‫‍​​⁪⁭‌‍⁫‬‬‎‪‭⁮‏‌‮⁪‪‍⁮‬‏‪‫‌‍⁫‮((object) gamePlayback);
            num1 = (int) num2 * 1097392253 ^ -462771747;
            continue;
          case 1:
            num1 = (int) num2 * 1779233014 ^ 1695011707;
            continue;
          case 2:
            goto label_1;
          case 4:
            gamePlayback = this.gamePlayback;
            num1 = (int) num2 * -936914189 ^ 528337384;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return str;
    }

    public int NumShips(int playerID)
    {
label_1:
      int num1 = 1253989894;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 118297301)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * 1300688514 ^ -1592465275;
            continue;
          case 3:
            num2 = 0;
            num1 = (int) num3 * -299755366 ^ -1311821674;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      List<Planet>.Enumerator enumerator1 = this.Planets.GetEnumerator();
      try
      {
label_15:
        int num4 = enumerator1.MoveNext() ? 882541047 : (num4 = 1216045135);
        Planet current;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ 118297301)) % 9U)
          {
            case 0:
              num4 = 882541047;
              continue;
            case 1:
              num4 = (int) num5 * -1659649616 ^ 1165281526;
              continue;
            case 2:
              current = enumerator1.Current;
              num4 = 2102812619;
              continue;
            case 4:
              goto label_15;
            case 5:
              num4 = (int) num5 * -943833310 ^ 298842043;
              continue;
            case 6:
              num4 = 752200520;
              continue;
            case 7:
              num2 += current.NumShips;
              num4 = (int) num5 * -668204249 ^ 1322778958;
              continue;
            case 8:
              int num6 = current.Owner == playerID ? -187087690 : (num6 = -295212608);
              num4 = num6 ^ (int) num5 * -710592803;
              continue;
            default:
              goto label_21;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_17:
        int num7 = 1156074278;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ 118297301)) % 3U)
          {
            case 0:
              goto label_17;
            case 1:
              num7 = (int) num8 * -1940023782 ^ -776135896;
              continue;
            default:
              goto label_20;
          }
        }
label_20:;
      }
label_21:
      List<Fleet>.Enumerator enumerator2 = this.Fleets.GetEnumerator();
      try
      {
label_26:
        int num9 = enumerator2.MoveNext() ? 888113686 : (num9 = 1707119936);
        Fleet current;
        while (true)
        {
          uint num10;
          switch ((num10 = (uint) (num9 ^ 118297301)) % 8U)
          {
            case 0:
              num9 = 1763011457;
              continue;
            case 1:
              num2 += current.NumShips;
              num9 = (int) num10 * -78275093 ^ 574066358;
              continue;
            case 2:
              int num11 = current.Owner != playerID ? -120561091 : (num11 = -686008469);
              num9 = num11 ^ (int) num10 * -1793329612;
              continue;
            case 3:
              current = enumerator2.Current;
              num9 = 1052812775;
              continue;
            case 4:
              goto label_26;
            case 6:
              num9 = (int) num10 * 186432822 ^ -1496159912;
              continue;
            case 7:
              num9 = 888113686;
              continue;
            default:
              goto label_36;
          }
        }
      }
      finally
      {
        enumerator2.Dispose();
label_32:
        int num12 = 768108631;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ 118297301)) % 3U)
          {
            case 0:
              goto label_32;
            case 2:
              num12 = (int) num13 * -486105523 ^ -1655896421;
              continue;
            default:
              goto label_35;
          }
        }
label_35:;
      }
label_36:
      return num2;
    }

    private int ParseGameState(string s)
    {
label_1:
      int num1 = 1270128490;
      string[] strArray1;
      double x;
      int owner1;
      bool flag1;
      int gameState;
      Planet planet;
      bool flag2;
      bool flag3;
      double y;
      int numShips1;
      int growthRate;
      string str;
      int num2;
      bool flag4;
      int owner2;
      int numShips2;
      int num3;
      Fleet fleet;
      bool flag5;
      int index;
      string[] strArray2;
      int sourcePlanet;
      int destinationPlanet;
      bool flag6;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ 122377318)) % 66U)
        {
          case 0:
            num1 = (int) num4 * 967950466 ^ -126898056;
            continue;
          case 1:
            num1 = (int) num4 * 1785763595 ^ -1272750423;
            continue;
          case 2:
            ++index;
            num1 = 373744323;
            continue;
          case 3:
            num1 = (int) num4 * -2173341 ^ 1418846767;
            continue;
          case 4:
            Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, ":");
            num1 = (int) num4 * 650961779 ^ -176569547;
            continue;
          case 5:
            this.Fleets.Clear();
            num1 = (int) num4 * 1916041490 ^ -1523626225;
            continue;
          case 6:
            int num5 = Game.\u202E⁮‫‫⁪⁪‪‏⁮‌⁫‬⁯‎‬⁪‪⁮‎‬‮⁯‍‮‬⁭‎⁭‬‬‏​‭‮‬⁬‍‌⁪‭‮(this.gamePlayback) <= 0 ? 442885447 : (num5 = 1463811515);
            num1 = num5 ^ (int) num4 * -2082866160;
            continue;
          case 7:
            numShips1 = this.Integer.parseInt(strArray1[4]);
            growthRate = this.Integer.parseInt(strArray1[5]);
            num1 = (int) num4 * 257430834 ^ 588156534;
            continue;
          case 8:
            num1 = (int) num4 * -1430809706 ^ -976273973;
            continue;
          case 9:
            Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, Game.\u206A‬⁯⁮⁮‍‍⁮⁮‎⁪‪‮‎⁯‪‬⁬‪⁯​⁬⁭⁫⁭‫‪⁮⁪‍⁯⁮‮⁭‎⁭‬⁪‮‫‮(new string[9]
            {
              x.ToString(),
              ",",
              y.ToString(),
              ",",
              owner1.ToString(),
              ",",
              numShips1.ToString(),
              ",",
              growthRate.ToString()
            }));
            num1 = 560968165;
            continue;
          case 10:
            num1 = (int) num4 * 273054833 ^ -1876896275;
            continue;
          case 11:
            flag4 = index < strArray2.Length;
            num1 = 1522370494;
            continue;
          case 12:
            num3 = Game.\u200D⁮​‬‌‬‌‏‫‭⁭⁯⁭⁫⁮​⁮‌‏‮‏​‍⁬⁪‫​‏‌⁮‏‫‬‬‬‪‌⁭‌⁬‮(str, '#');
            flag5 = num3 >= 0;
            num1 = (int) num4 * -291505245 ^ -1371478136;
            continue;
          case 13:
            num1 = (int) num4 * -751574066 ^ 809169491;
            continue;
          case 14:
            gameState = 0;
            num1 = (int) num4 * -409033210 ^ -1957424405;
            continue;
          case 16:
            num1 = (int) num4 * 163528914 ^ 636216922;
            continue;
          case 17:
            num1 = 2139057664;
            continue;
          case 18:
            this.Planets.Clear();
            num1 = (int) num4 * 1569683636 ^ -91876986;
            continue;
          case 19:
            y = this.Double.parseDouble(strArray1[2]);
            num1 = (int) num4 * 1966754600 ^ -1230750499;
            continue;
          case 20:
            str = strArray2[index];
            num1 = (int) num4 * 1056535925 ^ -751792442;
            continue;
          case 21:
            int totalTripLength = this.Integer.parseInt(strArray1[5]);
            int turnsRemaining = this.Integer.parseInt(strArray1[6]);
            fleet = new Fleet(owner2, numShips2, sourcePlanet, destinationPlanet, totalTripLength, turnsRemaining);
            num1 = (int) num4 * 1942039716 ^ -824182745;
            continue;
          case 22:
            strArray2 = Game.\u202E⁫‪⁮⁬​‫⁬⁪⁭‮‪‌‏‍⁯⁫⁯‫⁪⁬‍‏⁭​‪‌⁫‬⁮‌‭⁯⁫⁫​‎‭⁫‮(Game.\u202A‎⁫​‏‏⁮‮‍‭‫‫‭​⁮‫‮‫‪‪‫‬‭‌⁪⁮⁬⁭‌⁮‏⁪⁬⁫⁭⁯⁯⁪‏‬‮(s, "\r\n", "\n"), new char[1]
            {
              '\n'
            });
            num1 = (int) num4 * 1575898308 ^ -76485680;
            continue;
          case 23:
            num1 = (int) num4 * 1004431878 ^ 1270271534;
            continue;
          case 24:
            num1 = (int) num4 * -1517507982 ^ -1204628577;
            continue;
          case 25:
            gameState = 0;
            num1 = (int) num4 * 956645700 ^ -1411964401;
            continue;
          case 26:
            num1 = (int) num4 * -1197591381 ^ 804481676;
            continue;
          case 27:
            int num6 = !flag3 ? 579044757 : (num6 = 278646870);
            num1 = num6 ^ (int) num4 * 102945148;
            continue;
          case 28:
            int num7 = !flag5 ? -1151518178 : (num7 = -415828936);
            num1 = num7 ^ (int) num4 * 1510881562;
            continue;
          case 29:
            num1 = (int) num4 * 2144315315 ^ -1697850457;
            continue;
          case 30:
            gameState = 1;
            num1 = (int) num4 * 251227359 ^ -391341011;
            continue;
          case 31:
            owner2 = this.Integer.parseInt(strArray1[1]);
            num1 = 1712663556;
            continue;
          case 32:
            flag2 = strArray1.Length == 0;
            num1 = (int) num4 * -1735866457 ^ 449716960;
            continue;
          case 33:
            strArray1 = Game.\u202E⁫‪⁮⁬​‫⁬⁪⁭‮‪‌‏‍⁯⁫⁯‫⁪⁬‍‏⁭​‪‌⁫‬⁮‌‭⁯⁫⁫​‎‭⁫‮(str, new char[1]
            {
              ' '
            });
            num1 = 203245332;
            continue;
          case 34:
            num1 = (int) num4 * 774760869 ^ -2022194851;
            continue;
          case 35:
            num1 = 887728057;
            continue;
          case 36:
            planet = new Planet(num2++, owner1, numShips1, growthRate, x, y);
            num1 = (int) num4 * 1983427848 ^ 854813879;
            continue;
          case 37:
            this.Planets.Add(planet);
            num1 = (int) num4 * 722097421 ^ -698325861;
            continue;
          case 38:
            num2 = 0;
            num1 = (int) num4 * 186075275 ^ 406868668;
            continue;
          case 39:
            owner1 = this.Integer.parseInt(strArray1[3]);
            num1 = (int) num4 * 1966736818 ^ -710710213;
            continue;
          case 40:
            numShips2 = this.Integer.parseInt(strArray1[2]);
            num1 = (int) num4 * 818901863 ^ 836750754;
            continue;
          case 41:
            num1 = 1402269302;
            continue;
          case 42:
            Game.\u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(this.gamePlayback, "|");
            num1 = (int) num4 * -1884308422 ^ -2065388836;
            continue;
          case 43:
            this.ClearDupeCache();
            num1 = (int) num4 * 2128433384 ^ 2126297550;
            continue;
          case 44:
            num1 = (int) num4 * 1630898762 ^ -2070407737;
            continue;
          case 45:
            num1 = (int) num4 * -442192681 ^ 483875224;
            continue;
          case 46:
            int num8 = !flag1 ? 1549548259 : (num8 = 872424943);
            num1 = num8 ^ (int) num4 * 946457905;
            continue;
          case 47:
            x = this.Double.parseDouble(strArray1[1]);
            num1 = 519682153;
            continue;
          case 48:
            int num9 = !flag6 ? -1520143021 : (num9 = -153618238);
            num1 = num9 ^ (int) num4 * -1134497119;
            continue;
          case 49:
            num1 = (int) num4 * -1612377540 ^ 1674711621;
            continue;
          case 50:
            flag3 = Game.\u202B‭‫‬‭‭‍⁭‎‬⁫‫⁮‪‬​‮‮‏‎‬⁮⁪‌⁮‏‪‪‪‎‬⁬​‭‮‏‏‬‎‎‮(Game.\u202D‭⁭⁫‫⁪‪‪‏‬⁯⁬​⁯‌‭⁫⁭​‍‬‪⁬‌‏⁬⁫‌⁭⁬‫⁮⁪⁮‭⁮‬‍⁯‫‮(str)) == 0;
            num1 = 1475930555;
            continue;
          case 51:
            num1 = (int) num4 * -1065066758 ^ -2097563824;
            continue;
          case 52:
            int num10 = !flag4 ? -836449514 : (num10 = -22262407);
            num1 = num10 ^ (int) num4 * 59016725;
            continue;
          case 53:
            flag1 = Game.\u200C‍‪⁪⁬⁫‫‎⁬⁯‏⁫‫⁪‬‌‌⁫⁪⁭‬‮‏‏‌‫‬‫⁬‌‌⁫‬‬⁭⁫‮⁫⁫‮‮(strArray1[0], "F");
            num1 = 188616368;
            continue;
          case 54:
            int num11 = flag2 ? 491672439 : (num11 = 1346085253);
            num1 = num11 ^ (int) num4 * -994755408;
            continue;
          case 55:
            num1 = (int) num4 * -593299702 ^ -547942963;
            continue;
          case 56:
            index = 0;
            num1 = (int) num4 * -1959015727 ^ -874516880;
            continue;
          case 57:
            int num12 = strArray1.Length == 7 ? -1329193333 : (num12 = -1036101453);
            num1 = num12 ^ (int) num4 * -1131218454;
            continue;
          case 58:
            gameState = 0;
            num1 = (int) num4 * 1441509273 ^ 519059214;
            continue;
          case 59:
            int num13;
            num1 = num13 = !Game.\u200C‍‪⁪⁬⁫‫‎⁬⁯‏⁫‫⁪‬‌‌⁫⁪⁭‬‮‏‏‌‫‬‫⁬‌‌⁫‬‬⁭⁫‮⁫⁫‮‮(strArray1[0], "P") ? 1912037887 : (num13 = 693811347);
            continue;
          case 60:
            sourcePlanet = this.Integer.parseInt(strArray1[3]);
            num1 = (int) num4 * -1409779589 ^ -1075500479;
            continue;
          case 61:
            this.Fleets.Add(fleet);
            num1 = (int) num4 * 515793307 ^ 1269523214;
            continue;
          case 62:
            goto label_1;
          case 63:
            flag6 = strArray1.Length != 6;
            num1 = (int) num4 * -934753156 ^ 336706726;
            continue;
          case 64:
            str = Game.\u202E‭​⁯​‎⁭⁮​​‍⁪⁭⁭⁬⁪‌‫‭‮‪‍‬⁯‏⁫‬⁭‮‌⁭⁪⁭⁫⁭‎‌⁯⁮⁫‮(str, 0, num3);
            num1 = (int) num4 * 1131950496 ^ 2112000642;
            continue;
          case 65:
            destinationPlanet = this.Integer.parseInt(strArray1[4]);
            num1 = (int) num4 * 999563227 ^ -1046026214;
            continue;
          default:
            goto label_67;
        }
      }
label_67:
      return gameState;
    }

    private int LoadMapFromFile(string mapFilename)
    {
      try
      {
        return this.ParseGameState(Game.\u206B⁪⁬⁫​‫‮‫⁯⁮⁫‎‪‎‭⁮‪⁬‌⁫‬‍‬⁭⁮⁭⁬‬⁬⁮‭⁪‭​⁪​⁬‮⁮‭‮(mapFilename));
      }
      catch (Exception ex)
      {
label_3:
        int num1 = 356235432;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 971437213)) % 5U)
          {
            case 0:
              this.WriteLogMessage(Game.\u202C​‍‍⁪⁪⁯‍‫​⁫‫‍​​⁪⁭‌‍⁫‬‬‎‪‭⁮‏‌‮⁪‪‍⁮‬‏‪‫‌‍⁫‮((object) ex));
              num1 = (int) num2 * 1431823051 ^ 481755144;
              continue;
            case 1:
              num1 = (int) num2 * -1431244454 ^ -1035523099;
              continue;
            case 2:
              goto label_3;
            case 4:
              num1 = (int) num2 * 1393624214 ^ -1957677723;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return 0;
      }
    }

    public List<Planet> Planets { get; private set; }

    public List<Fleet> Fleets { get; private set; }

    private Game(Game _g)
    {
label_1:
      int num1 = 1752797100;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 858999710)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 568673871 ^ -317916177;
            continue;
          case 3:
            this.Planets = new List<Planet>();
            num1 = (int) num2 * -582944003 ^ -2095928132;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      foreach (Planet planet in _g.Planets)
        this.Planets.Add(planet.clone());
      this.Fleets = new List<Fleet>();
      foreach (Fleet fleet in _g.Fleets)
        this.Fleets.Add(fleet.clone());
      if (_g.mapFilename != null)
        this.mapFilename = _g.mapFilename;
      if (_g.mapData != null)
        this.mapData = _g.mapData;
      this.initMode = _g.initMode;
      if (_g.gamePlayback != null)
        this.gamePlayback = Game.\u202D‎⁯‎‭⁯‎‬‎⁭⁫⁭⁭⁭‬‮‮‪​‍‪‪⁫⁬⁪⁭⁯‪​⁬‌⁪‬‬⁭⁭⁯⁭⁭⁫‮(Game.\u202C​‍‍⁪⁪⁯‍‫​⁫‫‍​​⁪⁭‌‍⁫‬‬‎‪‭⁮‏‌‮⁪‪‍⁮‬‏‪‫‌‍⁫‮((object) _g.gamePlayback));
      this.maxGameLength = _g.maxGameLength;
      this.numTurns = _g.numTurns;
    }

    public object clone() => (object) new Game(this);

    static StringBuilder \u200E‭⁬⁪‭⁮‮‪‍⁬⁭⁮⁬⁬⁪⁫⁯​‭​‬‏‪​‌‬‮‫‌‫‫⁫‍⁯⁪‮⁮‪⁮‮‮() => new StringBuilder();

    static void \u206D⁭‪‌⁬‮‭⁭‮‭‍​‏‍⁬‬‫‍⁫‍‪‏‏‏‬‌⁯‮⁮⁯⁯⁫⁭‍⁭⁭‮‭‌‍‮([In] string obj0, [In] string obj1) => File.WriteAllText(obj0, obj1);

    static string \u200C⁬‭‍‫‏⁪‏⁪‬‏‫‍‬⁮‏⁬⁮⁭‏‏‍⁬‌⁯‫⁫‪​‪⁮⁬‌⁭‪​​⁫‭‍‮() => Environment.NewLine;

    static string \u200E‮‫‬‎⁯‫‫⁬⁫‪‮‭‫⁪‫​⁪‌⁮‍‮‫‎‌‎‍‌​⁪⁭⁯​⁯​⁫⁪⁮‭⁭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static void \u200E‪‍⁫⁯‎⁬⁬​‮⁬‍⁪‮‭​‪‭‫⁮​‏‍‪‏‮⁮‮⁭⁯‮⁪‪​‎‍‍⁬⁬‎‮([In] string obj0, [In] string obj1) => File.AppendAllText(obj0, obj1);

    static StringBuilder \u202D‌‌⁯⁬⁫​‭‬​‪‫‍‏⁮‌‬‌‎⁮‪⁫‪‍‍​‏⁬⁮⁬‪‍⁭​⁭⁭⁫⁭⁯‭‮(
      [In] StringBuilder obj0,
      [In] string obj1,
      [In] object[] obj2)
    {
      return obj0.AppendFormat(obj1, obj2);
    }

    static string \u202C​‍‍⁪⁪⁯‍‫​⁫‫‍​​⁪⁭‌‍⁫‬‬‎‪‭⁮‏‌‮⁪‪‍⁮‬‏‪‫‌‍⁫‮([In] object obj0) => obj0.ToString();

    static double \u200F⁫⁫⁬⁫‍‫‎⁬‏‮‮⁯⁫‎⁪‌‍‎⁫‬‌‎‌‪‍⁪‌‫⁫‍‫⁯⁭‎⁮‮‏‬‮‮([In] double obj0) => Math.Sqrt(obj0);

    static double \u206F​‎‮⁬‪⁪‏‏‫‍⁪​‮⁬​⁬​‍‌​‫​‭⁯‬⁮​‎⁮‌‎⁫⁬‎‏⁮‮‭⁬‮([In] double obj0) => Math.Ceiling(obj0);

    static StringBuilder \u206A⁪‍‍‬‎‬‭‭‏​​⁪‏⁮⁯‮‌⁭‪⁫‍⁫⁮‌‏⁮‫⁫‏⁪⁫‌​​​​⁭⁯‮‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.Append(obj1);
    }

    static StringBuilder \u206E‮​‮‫​⁫‮⁪‏⁪⁮⁮⁮‌⁭⁫​⁬⁪‎‪‬⁭‬⁪‫​⁬‪⁭⁫‪‍‪‭‌⁯‮‮(
      [In] StringBuilder obj0,
      [In] int obj1)
    {
      return obj0.Append(obj1);
    }

    static string \u202B‮‫⁫‏​⁮‍‎‪‌‌⁭‍‫‮⁫⁭‫‌‌​⁫​​‏⁪⁪‮⁮‪‎‬⁬‍‭‎‬‪⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206A‬⁯⁮⁮‍‍⁮⁮‎⁪‪‮‎⁯‪‬⁬‪⁯​⁬⁭⁫⁭‫‪⁮⁪‍⁯⁮‮⁭‎⁭‬⁪‮‫‮([In] string[] obj0) => string.Concat(obj0);

    static string[] \u202E⁫‪⁮⁬​‫⁬⁪⁭‮‪‌‏‍⁯⁫⁯‫⁪⁬‍‏⁭​‪‌⁫‬⁮‌‭⁯⁫⁫​‎‭⁫‮([In] string obj0, [In] char[] obj1) => obj0.Split(obj1);

    static string \u202A‎⁫​‏‏⁮‮‍‭‫‫‭​⁮‫‮‫‪‪‫‬‭‌⁪⁮⁬⁭‌⁮‏⁪⁬⁫⁭⁯⁯⁪‏‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0.Replace(obj1, obj2);
    }

    static int \u200D⁮​‬‌‬‌‏‫‭⁭⁯⁭⁫⁮​⁮‌‏‮‏​‍⁬⁪‫​‏‌⁮‏‫‬‬‬‪‌⁭‌⁬‮([In] string obj0, [In] char obj1) => obj0.IndexOf(obj1);

    static string \u202E‭​⁯​‎⁭⁮​​‍⁪⁭⁭⁬⁪‌‫‭‮‪‍‬⁯‏⁫‬⁭‮‌⁭⁪⁭⁫⁭‎‌⁯⁮⁫‮([In] string obj0, [In] int obj1, [In] int obj2) => obj0.Substring(obj1, obj2);

    static string \u202D‭⁭⁫‫⁪‪‪‏‬⁯⁬​⁯‌‭⁫⁭​‍‬‪⁬‌‏⁬⁫‌⁭⁬‫⁮⁪⁮‭⁮‬‍⁯‫‮([In] string obj0) => obj0.Trim();

    static int \u202B‭‫‬‭‭‍⁭‎‬⁫‫⁮‪‬​‮‮‏‎‬⁮⁪‌⁮‏‪‪‪‎‬⁬​‭‮‏‏‬‎‎‮([In] string obj0) => obj0.Length;

    static bool \u200C‍‪⁪⁬⁫‫‎⁬⁯‏⁫‫⁪‬‌‌⁫⁪⁭‬‮‏‏‌‫‬‫⁬‌‌⁫‬‬⁭⁫‮⁫⁫‮‮([In] string obj0, [In] string obj1) => obj0.Equals(obj1);

    static int \u202E⁮‫‫⁪⁪‪‏⁮‌⁫‬⁯‎‬⁪‪⁮‎‬‮⁯‍‮‬⁭‎⁭‬‬‏​‭‮‬⁬‍‌⁪‭‮([In] StringBuilder obj0) => obj0.Length;

    static string \u206B⁪⁬⁫​‫‮‫⁯⁮⁫‎‪‎‭⁮‪⁬‌⁫‬‍‬⁭⁮⁭⁬‬⁬⁮‭⁪‭​⁪​⁬‮⁮‭‮([In] string obj0) => File.ReadAllText(obj0);

    static StringBuilder \u202D‎⁯‎‭⁯‎‬‎⁭⁫⁭⁭⁭‬‮‮‪​‍‪‪⁫⁬⁪⁭⁯‪​⁬‌⁪‬‬⁭⁭⁯⁭⁭⁫‮([In] string obj0) => new StringBuilder(obj0);
  }
}
