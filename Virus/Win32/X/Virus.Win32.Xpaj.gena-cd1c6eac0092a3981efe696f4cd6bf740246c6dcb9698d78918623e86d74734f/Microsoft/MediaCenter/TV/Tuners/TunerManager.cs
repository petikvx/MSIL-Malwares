// Decompiled with JetBrains decompiler
// Type: Microsoft.MediaCenter.TV.Tuners.TunerManager
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using ATL;
using Microsoft.MediaCenter.TV.Tuning;
using msclr;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Microsoft.MediaCenter.TV.Tuners
{
  public class TunerManager : MTASafeComWrapper
  {
    private string m_ClientID;
    private SafeRecorderMgrEventHandler m_pEventHandler;
    private uint m_dwMgrConnPtCookie = 0;
    private static object m_CacheLock = new object();
    private static bool m_SuppressConfigEvents;
    private static RecorderMgrFlags m_CacheFlags = RecorderMgrFlags.rmf_WaitNone;
    private static Dictionary<IntPtr, Tuner> m_RecorderDictionary;
    private static Dictionary<Guid, Tuner> m_RecorderIDDictionary;
    private static Dictionary<IntPtr, KeyValuePair<MTAIUnknownType, Tuner>> m_RecorderInfoDictionary;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private string FullClientID
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string fullClientId;
        try
        {
          lock2 = lock1;
          Process currentProcess = Process.GetCurrentProcess();
          int id = currentProcess.Id;
          fullClientId = this.m_ClientID + "&" + currentProcess.MainModule.ModuleName + "&" + id.ToString();
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return fullClientId;
      }
    }

    private unsafe CComPtr\u003CINetworkRecorderMgr\u003E* TPGetRecMgr(
      [In] CComPtr\u003CINetworkRecorderMgr\u003E* obj0)
    {
      uint num1 = 0;
      SafeComWrapper.GetNativePtr\u003CINetworkRecorderMgr\u003E(obj0, (SafeComWrapper) this);
      // ISSUE: fault handler
      try
      {
        num1 = 1U;
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    private unsafe void TPCtor()
    {
      CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref inetworkRecorderMgr = 0;
      // ISSUE: fault handler
      try
      {
        MarshalHelper.ComException(\u003CModule\u003E.CoCreateInstance(&\u003CModule\u003E.CLSID_RecorderManager, (IUnknown*) 0, 4U, (_GUID*) &\u003CModule\u003E._GUID_a43cf053_d95a_4720_aa5d_6277aacff043, (void**) &inetworkRecorderMgr));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.SetObject((_GUID*) &\u003CModule\u003E._GUID_a43cf053_d95a_4720_aa5d_6277aacff043, (IUnknown*) ^(int&) ref inetworkRecorderMgr);
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        // ISSUE: fault handler
        try
        {
          lock2 = lock1;
          CComPtr\u003CIRecorderMgrEvents\u003E irecorderMgrEvents;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref irecorderMgrEvents = 0;
          // ISSUE: fault handler
          try
          {
            RecorderMgrEventHandler* recorderMgrEventHandlerPtr1 = (RecorderMgrEventHandler*) \u003CModule\u003E.@new(32U);
            RecorderMgrEventHandler* recorderMgrEventHandlerPtr2;
            // ISSUE: fault handler
            try
            {
              recorderMgrEventHandlerPtr2 = (IntPtr) recorderMgrEventHandlerPtr1 == IntPtr.Zero ? (RecorderMgrEventHandler*) 0 : \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002E\u007Bctor\u007D(recorderMgrEventHandlerPtr1, this);
            }
            __fault
            {
              \u003CModule\u003E.delete((void*) recorderMgrEventHandlerPtr1);
            }
            RecorderMgrEventHandler* lp = (IntPtr) recorderMgrEventHandlerPtr2 == IntPtr.Zero ? (RecorderMgrEventHandler*) 0 : (RecorderMgrEventHandler*) ((IntPtr) recorderMgrEventHandlerPtr2 + 12);
            \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderMgrEvents\u003E\u002E\u003D(&irecorderMgrEvents, (IRecorderMgrEvents*) lp);
            uint num;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            MarshalHelper.ComException(\u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020INetworkRecorderMgr\u002Cstruct\u0020IRecorderMgrEvents\u002Cstruct\u0020IRecorderMgrEvents\u003E((INetworkRecorderMgr*) ^(int&) ref inetworkRecorderMgr, (IRecorderMgrEvents*) ^(int&) ref irecorderMgrEvents, &num));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.m_pEventHandler = new SafeRecorderMgrEventHandler((IRecorderMgrEvents*) ^(int&) ref irecorderMgrEvents);
            this.m_dwMgrConnPtCookie = num;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderMgrEvents\u003E\u002E\u007Bdtor\u007D), (void*) &irecorderMgrEvents);
          }
          \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderMgrEvents\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderMgrEvents\u003E*) &irecorderMgrEvents);
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
    }

    private unsafe void TPDtor(IntPtr hMgr, uint cookie, SafeRecorderMgrEventHandler eventhandler)
    {
      try
      {
        INetworkRecorderMgr* pointer = (INetworkRecorderMgr*) hMgr.ToPointer();
        uint dwMgrConnPtCookie = this.m_dwMgrConnPtCookie;
        if ((IntPtr) pointer != IntPtr.Zero)
        {
          if (dwMgrConnPtCookie != 0U)
          {
            this.m_dwMgrConnPtCookie = 0U;
            \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPUnadviseHelper\u003Cstruct\u0020INetworkRecorderMgr\u002Cstruct\u0020IRecorderMgrEvents\u003E(pointer, &dwMgrConnPtCookie);
          }
          INetworkRecorderMgr* inetworkRecorderMgrPtr = pointer;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) inetworkRecorderMgrPtr + 8))((IntPtr) inetworkRecorderMgrPtr);
        }
        eventhandler?.Dispose();
      }
      catch (COMException ex)
      {
      }
    }

    private void \u0021TunerManager()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      IntPtr handle;
      uint dwMgrConnPtCookie;
      SafeRecorderMgrEventHandler pEventHandler;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        handle = this.handle;
        this.handle = IntPtr.Zero;
        dwMgrConnPtCookie = this.m_dwMgrConnPtCookie;
        this.m_dwMgrConnPtCookie = 0U;
        pEventHandler = this.m_pEventHandler;
        this.m_pEventHandler = (SafeRecorderMgrEventHandler) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      if (!(handle != IntPtr.Zero))
        return;
      this.TPDtor(handle, dwMgrConnPtCookie, pEventHandler);
    }

    private unsafe Tuner TPSelectRecorder(
      TuneRequest tuneRequest,
      RecorderUse recorderUse,
      RecorderMgrFlags flags)
    {
      CComPtr\u003CITuneRequest\u003E ccomPtrItuneRequest;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrItuneRequest = 0;
      Tuner tunerForIrecorder;
      // ISSUE: fault handler
      try
      {
        if (tuneRequest != null)
          MarshalHelper.ComException(MTASafeComWrapper.GetNativePtrFromSafeHandle((SafeHandle) tuneRequest, (_GUID*) &\u003CModule\u003E._GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980, (void**) &ccomPtrItuneRequest));
        CComPtr\u003CIRecorder\u003E ccomPtrIrecorder;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomPtrIrecorder = 0;
        // ISSUE: fault handler
        try
        {
          CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E obj;
          \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bctor\u007D(&obj);
          // ISSUE: fault handler
          try
          {
            CComBSTR ccomBstr;
            \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u007Bctor\u007D(&ccomBstr, MarshalHelper.StringToBSTR(this.FullClientID));
            // ISSUE: fault handler
            try
            {
              CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
              CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
              // ISSUE: fault handler
              try
              {
                int num1 = *(int*) recMgr;
                int num2 = num1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num3 = ^(int&) ref ccomPtrItuneRequest;
                int num4 = (int) recorderUse;
                int num5 = (int) flags;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num6 = ^(int&) ref ccomBstr;
                ref CComPtr\u003CIRecorder\u003E local = ref ccomPtrIrecorder;
                // ISSUE: cast to a function pointer type
                // ISSUE: function pointer call
                MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest*, global::RecorderUse, global::RecorderMgrFlags, ushort*, IRecorder**)>) *(int*) (*(int*) num1 + 12))((IRecorder**) num2, (ushort*) num3, (global::RecorderMgrFlags) num4, (global::RecorderUse) num5, (ITuneRequest*) num6, (IntPtr) ref local));
              }
              __fault
              {
                // ISSUE: method pointer
                // ISSUE: cast to a function pointer type
                \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
              }
              \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u003D(&obj, (IUnknown*) ^(int&) ref ccomPtrIrecorder);
              @lock lock1 = new @lock(TunerManager.m_CacheLock);
              @lock lock2;
              // ISSUE: fault handler
              try
              {
                lock2 = lock1;
                tunerForIrecorder = this.TPNLGetTunerForIRecorder((CComPtr\u003CIRecorderEx2\u003E*) &obj, recorderUse);
              }
              __fault
              {
                lock2.Dispose();
              }
              lock2.Dispose();
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
          }
          \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D(&obj);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorder\u003E*) &ccomPtrIrecorder);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrItuneRequest);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) &ccomPtrItuneRequest);
      return tunerForIrecorder;
    }

    private unsafe Tuner TPAcquireRecorder(
      RecorderUse recorderUse,
      Tuner acquisitionTarget,
      string clientName)
    {
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ptrIrecorderInfo = 0;
      Tuner tunerForIrecorder;
      // ISSUE: fault handler
      try
      {
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper((SafeComWrapper) acquisitionTarget, (_GUID*) &\u003CModule\u003E._GUID_379848e6_2751_42c0_8de6_9457cdc61d60, (void**) &ptrIrecorderInfo));
        CComPtr\u003CIRecorder\u003E ccomPtrIrecorder;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomPtrIrecorder = 0;
        // ISSUE: fault handler
        try
        {
          CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E obj;
          \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bctor\u007D(&obj);
          // ISSUE: fault handler
          try
          {
            CComBSTR ccomBstr;
            \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u007Bctor\u007D(&ccomBstr, MarshalHelper.StringToBSTR(clientName));
            // ISSUE: fault handler
            try
            {
              CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
              CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
              // ISSUE: fault handler
              try
              {
                int num1 = *(int*) recMgr;
                int num2 = num1;
                int num3 = (int) recorderUse;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num4 = ^(int&) ref ccomBstr;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num5 = ^(int&) ref ptrIrecorderInfo;
                ref CComPtr\u003CIRecorder\u003E local = ref ccomPtrIrecorder;
                // ISSUE: cast to a function pointer type
                // ISSUE: function pointer call
                MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::RecorderUse, ushort*, IRecorderInfo*, IRecorder**)>) *(int*) (*(int*) num1 + 16))((IRecorder**) num2, (IRecorderInfo*) num3, (ushort*) num4, (global::RecorderUse) num5, (IntPtr) ref local));
              }
              __fault
              {
                // ISSUE: method pointer
                // ISSUE: cast to a function pointer type
                \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
              }
              \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u003D(&obj, (IUnknown*) ^(int&) ref ccomPtrIrecorder);
              @lock lock1 = new @lock(TunerManager.m_CacheLock);
              @lock lock2;
              // ISSUE: fault handler
              try
              {
                lock2 = lock1;
                tunerForIrecorder = this.TPNLGetTunerForIRecorder((CComPtr\u003CIRecorderEx2\u003E*) &obj, recorderUse);
              }
              __fault
              {
                lock2.Dispose();
              }
              lock2.Dispose();
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
          }
          \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D(&obj);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorder\u003E*) &ccomPtrIrecorder);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return tunerForIrecorder;
    }

    private unsafe Tuner TPAcquireRecorder(RecorderUse recorderUse, Tuner acquisitionTarget)
    {
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ptrIrecorderInfo = 0;
      Tuner tunerForIrecorder;
      // ISSUE: fault handler
      try
      {
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper((SafeComWrapper) acquisitionTarget, (_GUID*) &\u003CModule\u003E._GUID_379848e6_2751_42c0_8de6_9457cdc61d60, (void**) &ptrIrecorderInfo));
        CComPtr\u003CIRecorder\u003E ccomPtrIrecorder;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomPtrIrecorder = 0;
        // ISSUE: fault handler
        try
        {
          CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E obj;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref obj = 0;
          // ISSUE: fault handler
          try
          {
            CComBSTR ccomBstr;
            \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u007Bctor\u007D(&ccomBstr, MarshalHelper.StringToBSTR(this.FullClientID));
            // ISSUE: fault handler
            try
            {
              CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
              CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
              // ISSUE: fault handler
              try
              {
                int num1 = *(int*) recMgr;
                int num2 = num1;
                int num3 = (int) recorderUse;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num4 = ^(int&) ref ccomBstr;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num5 = ^(int&) ref ptrIrecorderInfo;
                ref CComPtr\u003CIRecorder\u003E local = ref ccomPtrIrecorder;
                // ISSUE: cast to a function pointer type
                // ISSUE: function pointer call
                MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::RecorderUse, ushort*, IRecorderInfo*, IRecorder**)>) *(int*) (*(int*) num1 + 16))((IRecorder**) num2, (IRecorderInfo*) num3, (ushort*) num4, (global::RecorderUse) num5, (IntPtr) ref local));
              }
              __fault
              {
                // ISSUE: method pointer
                // ISSUE: cast to a function pointer type
                \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
              }
              \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u003D(&obj, (IUnknown*) ^(int&) ref ccomPtrIrecorder);
              @lock lock1 = new @lock(TunerManager.m_CacheLock);
              @lock lock2;
              // ISSUE: fault handler
              try
              {
                lock2 = lock1;
                tunerForIrecorder = this.TPNLGetTunerForIRecorder((CComPtr\u003CIRecorderEx2\u003E*) &obj, recorderUse);
              }
              __fault
              {
                lock2.Dispose();
              }
              lock2.Dispose();
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
          }
          \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D(&obj);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorder\u003E*) &ccomPtrIrecorder);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return tunerForIrecorder;
    }

    private unsafe Tuner TPReleaseTuner(Tuner acquisitionTarget)
    {
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ptrIrecorderInfo = 0;
      Tuner tunerForIrecorder;
      // ISSUE: fault handler
      try
      {
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper((SafeComWrapper) acquisitionTarget, (_GUID*) &\u003CModule\u003E._GUID_379848e6_2751_42c0_8de6_9457cdc61d60, (void**) &ptrIrecorderInfo));
        CComPtr\u003CIRecorder\u003E ccomPtrIrecorder;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomPtrIrecorder = 0;
        // ISSUE: fault handler
        try
        {
          CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E obj;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref obj = 0;
          // ISSUE: fault handler
          try
          {
            CComBSTR ccomBstr;
            \u003CModule\u003E.ATL\u002ECComBSTR\u002E\u007Bctor\u007D(&ccomBstr, MarshalHelper.StringToBSTR(this.FullClientID));
            // ISSUE: fault handler
            try
            {
              CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
              CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
              // ISSUE: fault handler
              try
              {
                int num1 = *(int*) recMgr;
                int num2 = num1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num3 = ^(int&) ref ccomBstr;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num4 = ^(int&) ref ptrIrecorderInfo;
                ref CComPtr\u003CIRecorder\u003E local = ref ccomPtrIrecorder;
                // ISSUE: cast to a function pointer type
                // ISSUE: function pointer call
                MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, global::RecorderUse, ushort*, IRecorderInfo*, IRecorder**)>) *(int*) (*(int*) num1 + 16))((IRecorder**) num2, (IRecorderInfo*) 6, (ushort*) num3, (global::RecorderUse) num4, (IntPtr) ref local));
              }
              __fault
              {
                // ISSUE: method pointer
                // ISSUE: cast to a function pointer type
                \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
              }
              \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
              @lock lock1 = new @lock(TunerManager.m_CacheLock);
              @lock lock2;
              // ISSUE: fault handler
              try
              {
                lock2 = lock1;
                SafeRecorder recorder = acquisitionTarget.Recorder;
                this.TPNLRemoveIRecorder(recorder);
                recorder?.Dispose();
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u003D(&obj, (IUnknown*) ^(int&) ref ccomPtrIrecorder);
                tunerForIrecorder = this.TPNLGetTunerForIRecorder((CComPtr\u003CIRecorderEx2\u003E*) &obj, RecorderUse.ru_AdviseOnly);
              }
              __fault
              {
                lock2.Dispose();
              }
              lock2.Dispose();
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComBSTR\u002E\u007Bdtor\u007D), (void*) &ccomBstr);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            \u003CModule\u003E.SysFreeString((ushort*) ^(int&) ref ccomBstr);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
          }
          \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D(&obj);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorder\u003E*) &ccomPtrIrecorder);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return tunerForIrecorder;
    }

    private unsafe Tuner TPFindRecorderByID(Guid g)
    {
      @lock lock1 = (@lock) null;
      Tuner tuner = (Tuner) null;
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ptrIrecorderInfo = 0;
      Tuner recorderById;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
        CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
        // ISSUE: fault handler
        try
        {
          int num1 = *(int*) recMgr;
          int num2 = num1;
          _GUID guid = *(_GUID*) (int) &g;
          ref CComPtr\u003CIRecorderInfo\u003E local = ref ptrIrecorderInfo;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, _GUID, IRecorderInfo**)>) *(int*) (*(int*) num1 + 20))((IRecorderInfo**) num2, guid, (IntPtr) ref local));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
        @lock lock2 = new @lock(TunerManager.m_CacheLock);
        // ISSUE: fault handler
        try
        {
          lock1 = lock2;
          if (TunerManager.m_RecorderIDDictionary != null)
          {
            if (TunerManager.m_RecorderIDDictionary.TryGetValue(g, out tuner))
              recorderById = tuner;
            else
              goto label_12;
          }
          else
            goto label_12;
        }
        __fault
        {
          lock1.Dispose();
        }
        lock1.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return recorderById;
label_12:
      Tuner forIrecorderInfo;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          forIrecorderInfo = this.TPNLGetTunerForIRecorderInfo(&ptrIrecorderInfo);
        }
        __fault
        {
          lock1.Dispose();
        }
        lock1.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return forIrecorderInfo;
    }

    private unsafe RemoteTunerCollection TPEnumRecorders(
      TuneRequest tuneRequest,
      RecorderUse recorderUse,
      RecorderMgrFlags flags)
    {
      CComPtr\u003CITuneRequest\u003E ccomPtrItuneRequest;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrItuneRequest = 0;
      RemoteTunerCollection remoteTunerCollection;
      // ISSUE: fault handler
      try
      {
        if (tuneRequest != null)
          MarshalHelper.ComException(MTASafeComWrapper.GetNativePtrFromSafeHandle((SafeHandle) tuneRequest, (_GUID*) &\u003CModule\u003E._GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980, (void**) &ccomPtrItuneRequest));
        CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ptrIenumRecorder = 0;
        // ISSUE: fault handler
        try
        {
          CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
          CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
          // ISSUE: fault handler
          try
          {
            int num1 = *(int*) recMgr;
            int num2 = num1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num3 = ^(int&) ref ccomPtrItuneRequest;
            int num4 = (int) recorderUse;
            int num5 = (int) flags;
            ref CComPtr\u003CIEnumRecorder\u003E local = ref ptrIenumRecorder;
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest*, global::RecorderUse, global::RecorderMgrFlags, IEnumRecorder**)>) *(int*) (*(int*) num1 + 24))((IEnumRecorder**) num2, (global::RecorderMgrFlags) num3, (global::RecorderUse) num4, (ITuneRequest*) num5, (IntPtr) ref local));
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
          }
          \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          remoteTunerCollection = new RemoteTunerCollection((IEnumRecorder*) ^(int&) ref ptrIenumRecorder, (TunerManager) this.ReferenceClone());
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrItuneRequest);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) &ccomPtrItuneRequest);
      return remoteTunerCollection;
    }

    private unsafe RemoteTunerCollection TPEnumConfiguredRecorders(
      TuneRequest tuneRequest,
      RecorderUse recorderUse,
      RecorderMgrFlags flags)
    {
      CComPtr\u003CITuneRequest\u003E ccomPtrItuneRequest;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrItuneRequest = 0;
      RemoteTunerCollection remoteTunerCollection;
      // ISSUE: fault handler
      try
      {
        if (tuneRequest != null)
          MarshalHelper.ComException(MTASafeComWrapper.GetNativePtrFromSafeHandle((SafeHandle) tuneRequest, (_GUID*) &\u003CModule\u003E._GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980, (void**) &ccomPtrItuneRequest));
        CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ptrIenumRecorder = 0;
        // ISSUE: fault handler
        try
        {
          CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
          CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
          // ISSUE: fault handler
          try
          {
            int num1 = *(int*) recMgr;
            int num2 = num1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num3 = ^(int&) ref ccomPtrItuneRequest;
            int num4 = (int) recorderUse;
            int num5 = (int) flags;
            ref CComPtr\u003CIEnumRecorder\u003E local = ref ptrIenumRecorder;
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, ITuneRequest*, global::RecorderUse, global::RecorderMgrFlags, IEnumRecorder**)>) *(int*) (*(int*) num1 + 28))((IEnumRecorder**) num2, (global::RecorderMgrFlags) num3, (global::RecorderUse) num4, (ITuneRequest*) num5, (IntPtr) ref local));
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
          }
          \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          remoteTunerCollection = new RemoteTunerCollection((IEnumRecorder*) ^(int&) ref ptrIenumRecorder, (TunerManager) this.ReferenceClone());
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrItuneRequest);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) &ccomPtrItuneRequest);
      return remoteTunerCollection;
    }

    private unsafe void TPResetAllTunerSettings()
    {
      CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
      CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
      // ISSUE: fault handler
      try
      {
        int num = *(int*) recMgr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 36))((IntPtr) num));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
    }

    private unsafe void TPResetAllRecorders(RecorderMgrFlags flags)
    {
      CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
      CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recMgr;
        int num2 = num1;
        int num3 = (int) flags;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) num1 + 48))((uint) num2, (IntPtr) num3));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
    }

    private void TPNLClearCache()
    {
      TunerManager.m_CacheFlags = RecorderMgrFlags.rmf_WaitNone;
      if (TunerManager.m_RecorderDictionary != null)
      {
        Dictionary<IntPtr, Tuner>.Enumerator enumerator = TunerManager.m_RecorderDictionary.GetEnumerator();
        while (enumerator.MoveNext())
        {
          KeyValuePair<IntPtr, Tuner> current = enumerator.Current;
          try
          {
            if (current.Value != null)
            {
              dv1<Tuner> dv1 = new dv1<Tuner>(Tuner.Delete);
              dv1.BeginInvoke(current.Value, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv1);
            }
          }
          catch (NullReferenceException ex)
          {
          }
        }
        TunerManager.m_RecorderDictionary.Clear();
        if (TunerManager.m_RecorderDictionary is IDisposable recorderDictionary)
          recorderDictionary.Dispose();
        TunerManager.m_RecorderDictionary = (Dictionary<IntPtr, Tuner>) null;
      }
      if (TunerManager.m_RecorderIDDictionary != null)
      {
        Dictionary<Guid, Tuner>.Enumerator enumerator = TunerManager.m_RecorderIDDictionary.GetEnumerator();
        while (enumerator.MoveNext())
        {
          KeyValuePair<Guid, Tuner> current = enumerator.Current;
          try
          {
            if (current.Value != null)
            {
              dv1<Tuner> dv1 = new dv1<Tuner>(Tuner.Delete);
              dv1.BeginInvoke(current.Value, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv1);
            }
          }
          catch (NullReferenceException ex)
          {
          }
        }
        TunerManager.m_RecorderIDDictionary.Clear();
        if (TunerManager.m_RecorderIDDictionary is IDisposable recorderIdDictionary)
          recorderIdDictionary.Dispose();
        TunerManager.m_RecorderIDDictionary = (Dictionary<Guid, Tuner>) null;
      }
      if (TunerManager.m_RecorderInfoDictionary == null)
        return;
      Dictionary<IntPtr, KeyValuePair<MTAIUnknownType, Tuner>>.Enumerator enumerator1 = TunerManager.m_RecorderInfoDictionary.GetEnumerator();
      while (enumerator1.MoveNext())
      {
        KeyValuePair<IntPtr, KeyValuePair<MTAIUnknownType, Tuner>> current = enumerator1.Current;
        try
        {
          if (current.Value.Value != null)
          {
            dv1<MTAIUnknownType> dv1_1 = new dv1<MTAIUnknownType>(MTAIUnknownType.Delete);
            KeyValuePair<MTAIUnknownType, Tuner> keyValuePair1 = current.Value;
            dv1_1.BeginInvoke(keyValuePair1.Key, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003AMTAIUnknownType\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv1_1);
            dv1<Tuner> dv1_2 = new dv1<Tuner>(Tuner.Delete);
            KeyValuePair<MTAIUnknownType, Tuner> keyValuePair2 = current.Value;
            dv1_2.BeginInvoke(keyValuePair2.Value, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv1_2);
          }
        }
        catch (NullReferenceException ex)
        {
        }
      }
      TunerManager.m_RecorderInfoDictionary.Clear();
      if (TunerManager.m_RecorderInfoDictionary is IDisposable recorderInfoDictionary)
        recorderInfoDictionary.Dispose();
      TunerManager.m_RecorderInfoDictionary = (Dictionary<IntPtr, KeyValuePair<MTAIUnknownType, Tuner>>) null;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPNetworkRecordersEnabled()
    {
      CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
      CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
      short num1;
      // ISSUE: fault handler
      try
      {
        int num2 = *(int*) recMgr;
        int num3 = num2;
        ref short local = ref num1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short*)>) *(int*) (*(int*) num2 + 52))((short*) num3, (IntPtr) ref local));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
      return num1 == (short) -1;
    }

    private unsafe void TPStartSearch([MarshalAs(UnmanagedType.U1)] bool block, uint dwTimeout)
    {
      int num1 = -1;
      if (!block)
        num1 = ~num1;
      short num2 = (short) num1;
      CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
      CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
      // ISSUE: fault handler
      try
      {
        int num3 = *(int*) recMgr;
        int num4 = num3;
        int num5 = (int) num2;
        int num6 = (int) dwTimeout;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, short, uint)>) *(int*) (*(int*) num3 + 56))((uint) num4, (short) num5, (IntPtr) num6));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
    }

    private unsafe void TPCancelSearch()
    {
      CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
      CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
      // ISSUE: fault handler
      try
      {
        int num = *(int*) recMgr;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 60))((IntPtr) num));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
    }

    private unsafe void TPWaitForSearchComplete(uint dwTimeout)
    {
      CComPtr\u003CINetworkRecorderMgr\u003E inetworkRecorderMgr;
      CComPtr\u003CINetworkRecorderMgr\u003E* recMgr = this.TPGetRecMgr(&inetworkRecorderMgr);
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) recMgr;
        int num2 = num1;
        int num3 = (int) dwTimeout;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) num1 + 64))((uint) num2, (IntPtr) num3));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D), (void*) &inetworkRecorderMgr);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) &inetworkRecorderMgr);
    }

    private uint FillCache(RecorderMgrFlags flags)
    {
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      bool flag1 = false;
      bool flag2 = false;
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      RecorderMgrFlags cacheFlags;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        cacheFlags = TunerManager.m_CacheFlags;
        if (TunerManager.m_RecorderInfoDictionary != null)
        {
          flag2 = true;
          num1 = TunerManager.m_RecorderInfoDictionary.Count;
        }
        if (TunerManager.m_RecorderIDDictionary != null)
        {
          flag1 = true;
          num2 = TunerManager.m_RecorderIDDictionary.Count;
        }
        if (TunerManager.m_RecorderDictionary != null)
          num3 = TunerManager.m_RecorderDictionary.Count;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      if ((uint) flags <= (uint) cacheFlags && flag1 && flag2)
      {
        if (num1 != 0)
        {
          if (num1 >= num2)
            return (uint) TunerManager.m_RecorderIDDictionary.Count;
        }
        else
          goto label_13;
      }
      if (num1 != 0)
        goto label_14;
label_13:
      if (num2 == 0 && num3 == 0)
        goto label_15;
label_14:
      this.ClearCache();
label_15:
      flags |= RecorderMgrFlags.rmf_EnumMissingConfiguredRecorders;
      RemoteTunerCollection remoteTunerCollection = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad3\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerCollection\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderMgrFlags\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerCollection\u0020\u005E\u003E(new d3<RemoteTunerCollection, TuneRequest, RecorderUse, RecorderMgrFlags>(this.TPEnumRecorders).BeginInvoke((TuneRequest) null, RecorderUse.ru_Any, flags, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::FillCache", 60000);
      uint num4 = 0;
      foreach (IDisposable disposable in (IEnumerable<Tuner>) remoteTunerCollection)
      {
        disposable?.Dispose();
        ++num4;
      }
      remoteTunerCollection?.Dispose();
      @lock lock3 = new @lock(TunerManager.m_CacheLock);
      @lock lock4;
      // ISSUE: fault handler
      try
      {
        lock4 = lock3;
        if ((uint) flags > (uint) TunerManager.m_CacheFlags)
          TunerManager.m_CacheFlags = flags;
      }
      __fault
      {
        lock4.Dispose();
      }
      lock4.Dispose();
      return num4;
    }

    private unsafe Tuner TPNLRegisterNewIRecorder(
      CComPtr\u003CIRecorderEx2\u003E* pRecorder,
      IntPtr u,
      RecorderUse ru)
    {
      if (*(int*) pRecorder == 0)
        throw new InvalidOperationException("can't add NULL Recorder to Tuner^");
      if (u == IntPtr.Zero)
        throw new InvalidOperationException("can't add empty wrapper");
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ptrIrecorderInfo = 0;
      Tuner forIrecorderInfo;
      // ISSUE: fault handler
      try
      {
        uint num1 = (uint) *(int*) pRecorder;
        int num2 = (int) num1;
        ref CComPtr\u003CIRecorderInfo\u003E local = ref ptrIrecorderInfo;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, IRecorderInfo**)>) *(int*) (*(int*) num1 + 12))((IRecorderInfo**) num2, (IntPtr) ref local));
        forIrecorderInfo = this.TPNLGetTunerForIRecorderInfo(&ptrIrecorderInfo);
        if (TunerManager.m_RecorderDictionary == null)
          TunerManager.m_RecorderDictionary = new Dictionary<IntPtr, Tuner>();
        if (!TunerManager.m_RecorderDictionary.ContainsKey(u))
          TunerManager.m_RecorderDictionary.Add(u, forIrecorderInfo);
        else
          goto label_11;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return forIrecorderInfo;
label_11:
      // ISSUE: fault handler
      try
      {
        throw new ApplicationException("cache inconsistency");
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
    }

    private unsafe Tuner TPNLRegisterNewIRecorderInfo(
      CComPtr\u003CIRecorderInfo\u003E* pRecorderInfo,
      IntPtr RIUnk)
    {
      uint num1 = (uint) *(int*) pRecorderInfo;
      int num2 = num1 != 0U ? (int) num1 : throw new InvalidOperationException("can't make NULL RecInfo into Tuner^");
      _GUID guid;
      ref _GUID local = ref guid;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, _GUID*)>) *(int*) (*(int*) num1 + 16))((_GUID*) num2, (IntPtr) ref local));
      Tuner objA = (Tuner) null;
      if (TunerManager.m_RecorderIDDictionary == null)
        TunerManager.m_RecorderIDDictionary = new Dictionary<Guid, Tuner>();
      bool flag = TunerManager.m_RecorderIDDictionary.TryGetValue(*(Guid*) (int) &guid, out objA);
      if (flag && (objA == null || objA.IsInvalid))
        throw new ApplicationException("unexpected bad tuner in RecorderIDDictionary");
      if (TunerManager.m_RecorderInfoDictionary == null)
        TunerManager.m_RecorderInfoDictionary = new Dictionary<IntPtr, KeyValuePair<MTAIUnknownType, Tuner>>();
      KeyValuePair<MTAIUnknownType, Tuner> keyValuePair = new KeyValuePair<MTAIUnknownType, Tuner>((MTAIUnknownType) null, (Tuner) null);
      if (!TunerManager.m_RecorderInfoDictionary.TryGetValue(RIUnk, out keyValuePair))
      {
        if (objA == null)
          objA = new Tuner((IRecorderInfo*) *(int*) pRecorderInfo, *(Guid*) (int) &guid);
        keyValuePair = new KeyValuePair<MTAIUnknownType, Tuner>(new MTAIUnknownType((IUnknown*) RIUnk.ToPointer()), objA);
        TunerManager.m_RecorderInfoDictionary.Add(RIUnk, keyValuePair);
      }
      if (objA == null || objA.IsInvalid || keyValuePair.Key == null || keyValuePair.Value == null || !object.ReferenceEquals((object) objA, (object) keyValuePair.Value))
        throw new ApplicationException("tuner cache inconsistent");
      if (!flag)
        TunerManager.m_RecorderIDDictionary.Add(*(Guid*) (int) &guid, objA);
      if (TunerManager.m_RecorderInfoDictionary.Count < TunerManager.m_RecorderIDDictionary.Count)
        throw new ApplicationException("unexpected count mismatch between recorderinfo dictionaries in tuner manager cache");
      return objA;
    }

    private unsafe void TPNLRemoveIRecorder(SafeRecorder r)
    {
      if (TunerManager.m_RecorderDictionary == null)
        return;
      CComPtr\u003CIUnknown\u003E ccomPtrIunknown;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrIunknown = 0;
      // ISSUE: fault handler
      try
      {
        MarshalHelper.ComException(SafeComWrapper.GetNativePtrFromWrapper((SafeComWrapper) r, (_GUID*) &\u003CModule\u003E._GUID_00000000_0000_0000_c000_000000000046, (void**) &ccomPtrIunknown));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        IntPtr key = (IntPtr) (void*) ^(int&) ref ccomPtrIunknown;
        Tuner tuner = (Tuner) null;
        if (TunerManager.m_RecorderDictionary.TryGetValue(key, out tuner))
          TunerManager.m_RecorderDictionary.Remove(key);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIunknown);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) &ccomPtrIunknown);
    }

    private Tuner CompareViewingPriority(Tuner t1, Tuner t2)
    {
      Tuner tuner;
      if (t1 != null)
      {
        if (t2 != null)
          return !t1.PrefView && !t2.PrefView ? (t1.RecordOrder > t2.RecordOrder ? t1 : t2) : (t1.PrefView && t2.PrefView ? (t1.ViewOrder < t2.ViewOrder ? t1 : t2) : (t1.PrefView ? t1 : t2));
        tuner = t1;
      }
      else
        tuner = t2;
      return tuner;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool ConfiguredPredicate(Tuner t) => t.IsConfigured;

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool AllPredicate(Tuner t) => true;

    internal Tuner[] GetCachedCollection(__FnPtr<byte (Tuner)> pred, RecorderMgrFlags flags)
    {
      int num = (int) this.FillCache(flags);
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      Tuner[] cachedCollection1;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (TunerManager.m_RecorderIDDictionary == null)
          cachedCollection1 = new Tuner[0];
        else
          goto label_5;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return cachedCollection1;
label_5:
      Tuner[] cachedCollection2;
      // ISSUE: fault handler
      try
      {
        int length = 0;
        Dictionary<Guid, Tuner>.Enumerator enumerator1 = TunerManager.m_RecorderIDDictionary.GetEnumerator();
        if (enumerator1.MoveNext())
        {
          do
          {
            KeyValuePair<Guid, Tuner> current = enumerator1.Current;
            if (!current.Value.IsInvalid)
            {
              Tuner tuner = current.Value;
              // ISSUE: function pointer call
              if (__calli(pred)(tuner) != (byte) 0)
                ++length;
            }
            else
              goto label_10;
          }
          while (enumerator1.MoveNext());
          goto label_11;
label_10:
          throw new ApplicationException("RecorderIDDictionary is corrupt");
        }
label_11:
        cachedCollection2 = new Tuner[length];
        int index = 0;
        Dictionary<Guid, Tuner>.Enumerator enumerator2 = TunerManager.m_RecorderIDDictionary.GetEnumerator();
        if (enumerator2.MoveNext())
        {
          do
          {
            KeyValuePair<Guid, Tuner> current = enumerator2.Current;
            if (!current.Value.IsInvalid)
            {
              Tuner tuner1 = current.Value;
              // ISSUE: function pointer call
              if (__calli(pred)(tuner1) != (byte) 0)
              {
                Tuner tuner2 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(current.Value);
                if (tuner2 != null && !tuner2.IsInvalid)
                {
                  cachedCollection2.SetValue((object) tuner2, index);
                  ++index;
                }
                else
                  goto label_18;
              }
            }
            else
              goto label_17;
          }
          while (enumerator2.MoveNext());
          goto label_20;
label_17:
          throw new ApplicationException("RecorderIDDictionary is corrupt");
label_18:
          throw new ApplicationException("unexpected failure cloning tuner");
        }
      }
      __fault
      {
        lock2.Dispose();
      }
label_20:
      lock2.Dispose();
      return cachedCollection2;
    }

    internal Tuner[] GetCachedCollection(RecorderMgrFlags flags) => this.GetCachedCollection((__FnPtr<byte (Tuner)>) __methodptr(AllPredicate), flags);

    internal unsafe Tuner TPNLGetTunerForIRecorderPtr(uint cookie, RecorderUse ru)
    {
      CComGITPtr\u003CIRecorderEx2\u003E gitPtrIrecorderEx2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref gitPtrIrecorderEx2 = (int) cookie;
      Tuner tunerForIrecorder;
      // ISSUE: fault handler
      try
      {
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomPtrIrecorderEx2 = 0;
        // ISSUE: fault handler
        try
        {
          \u003CModule\u003E.ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002ECopyTo(&gitPtrIrecorderEx2, (IRecorderEx2**) &ccomPtrIrecorderEx2);
          tunerForIrecorder = this.TPNLGetTunerForIRecorder(&ccomPtrIrecorderEx2, ru);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &gitPtrIrecorderEx2);
      }
      \u003CModule\u003E.ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002ERevoke(&gitPtrIrecorderEx2);
      return tunerForIrecorder;
    }

    internal unsafe Tuner TPNLGetTunerForIRecorder(
      CComPtr\u003CIRecorderEx2\u003E* pRecorder,
      RecorderUse ru)
    {
      CComPtr\u003CIUnknown\u003E ccomPtrIunknown;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrIunknown = 0;
      Tuner tunerForIrecorder;
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) pRecorder;
        int num2 = num1;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_00000000_0000_0000_c000_000000000046;
        ref CComPtr\u003CIUnknown\u003E local2 = ref ccomPtrIunknown;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) num1)((void**) num2, (_GUID*) ref local1, (IntPtr) ref local2));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ref ccomPtrIunknown == 0)
          throw new ApplicationException("unexpected failure to QI for IUnknown");
        SafeRecorder pRecorder1 = new SafeRecorder((IRecorderEx2*) *(int*) pRecorder);
        Tuner tuner = (Tuner) null;
        if (TunerManager.m_RecorderDictionary != null)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          IntPtr key = (IntPtr) (void*) ^(int&) ref ccomPtrIunknown;
          if (TunerManager.m_RecorderDictionary.TryGetValue(key, out tuner))
            goto label_6;
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        IntPtr u = (IntPtr) (void*) ^(int&) ref ccomPtrIunknown;
        tuner = this.TPNLRegisterNewIRecorder(pRecorder, u, ru);
label_6:
        switch (ru)
        {
          case RecorderUse.ru_Exclusive:
            tunerForIrecorder = (Tuner) tuner.ReferenceClone();
            tunerForIrecorder.SetCurrentUse(RecorderUse.ru_Exclusive);
            tunerForIrecorder.TPSetRecorder(pRecorder1);
            break;
          case RecorderUse.ru_AdviseOnly:
            tuner.TPSetRecorder(pRecorder1);
            tuner.SetCurrentUse(RecorderUse.ru_AdviseOnly);
            tunerForIrecorder = (Tuner) tuner.ReferenceClone();
            break;
          default:
            tunerForIrecorder = (Tuner) tuner.ReferenceClone();
            tunerForIrecorder.ClearCurrentUse();
            tunerForIrecorder.TPSetRecorder(pRecorder1);
            break;
        }
        pRecorder1?.Dispose();
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIunknown);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) &ccomPtrIunknown);
      return tunerForIrecorder;
    }

    internal unsafe Tuner TPNLGetTunerForIRecorderInfo(
      CComPtr\u003CIRecorderInfo\u003E* pRecorderInfo)
    {
      CComPtr\u003CIUnknown\u003E ccomPtrIunknown;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ccomPtrIunknown = 0;
      Tuner forIrecorderInfo;
      // ISSUE: fault handler
      try
      {
        int num1 = *(int*) pRecorderInfo;
        int num2 = num1;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_00000000_0000_0000_c000_000000000046;
        ref CComPtr\u003CIUnknown\u003E local2 = ref ccomPtrIunknown;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) num1)((void**) num2, (_GUID*) ref local1, (IntPtr) ref local2));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ref ccomPtrIunknown == 0)
          throw new ApplicationException("unexpected failure to QI for IUnknown");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        IntPtr num3 = (IntPtr) (void*) ^(int&) ref ccomPtrIunknown;
        KeyValuePair<MTAIUnknownType, Tuner> keyValuePair = new KeyValuePair<MTAIUnknownType, Tuner>();
        if (TunerManager.m_RecorderInfoDictionary == null || !TunerManager.m_RecorderInfoDictionary.TryGetValue(num3, out keyValuePair))
          keyValuePair = new KeyValuePair<MTAIUnknownType, Tuner>((MTAIUnknownType) null, this.TPNLRegisterNewIRecorderInfo(pRecorderInfo, num3));
        forIrecorderInfo = keyValuePair.Value;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIunknown);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) &ccomPtrIunknown);
      return forIrecorderInfo;
    }

    internal unsafe Tuner TPGetTunerForIRecorderInfo(CComPtr\u003CIRecorderInfo\u003E* pRecInfo)
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      Tuner forIrecorderInfo;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        forIrecorderInfo = this.TPNLGetTunerForIRecorderInfo(pRecInfo);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return forIrecorderInfo;
    }

    static TunerManager() => TunerManager.m_SuppressConfigEvents = false;

    public TunerManager(string client)
    {
      this.m_ClientID = client;
      this.m_dwMgrConnPtCookie = 0U;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      // ISSUE: fault handler
      try
      {
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPCtor).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::TunerManager", 60000);
      }
      __fault
      {
        base.Dispose(true);
      }
    }

    public TunerManager()
    {
      // ISSUE: fault handler
      try
      {
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPCtor).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::TunerManager", 60000);
      }
      __fault
      {
        base.Dispose(true);
      }
    }

    public unsafe TunerManager(IntPtr ptr)
      : base((_GUID*) &\u003CModule\u003E._GUID_a43cf053_d95a_4720_aa5d_6277aacff043, (IUnknown*) ptr.ToPointer())
    {
    }

    private void \u007ETunerManager()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      IntPtr handle;
      uint dwMgrConnPtCookie;
      SafeRecorderMgrEventHandler pEventHandler;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        handle = this.handle;
        this.handle = IntPtr.Zero;
        dwMgrConnPtCookie = this.m_dwMgrConnPtCookie;
        this.m_dwMgrConnPtCookie = 0U;
        pEventHandler = this.m_pEventHandler;
        this.m_pEventHandler = (SafeRecorderMgrEventHandler) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      if (!(handle != IntPtr.Zero))
        return;
      dv3<IntPtr, uint, SafeRecorderMgrEventHandler> dv3 = new dv3<IntPtr, uint, SafeRecorderMgrEventHandler>(this.TPDtor);
      dv3.BeginInvoke(handle, dwMgrConnPtCookie, pEventHandler, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv3\u003CSystem\u003A\u003AIntPtr\u002Cunsigned\u0020int\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASafeRecorderMgrEventHandler\u0020\u005E\u003E\u0020\u005E\u003E), (object) dv3);
    }

    public override unsafe Guid PrimaryIID => *(Guid*) (int) &\u003CModule\u003E._GUID_a43cf053_d95a_4720_aa5d_6277aacff043;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public uint Count => this.FillCache(RecorderMgrFlags.rmf_WaitAll);

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public string ClientID
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        string clientId;
        try
        {
          lock2 = lock1;
          clientId = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(this.m_ClientID);
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return clientId;
      }
      set
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        try
        {
          lock2 = lock1;
          this.m_ClientID = value;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
      }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public ITunerCollection AllTuners => (ITunerCollection) new TunerCollection(this);

    public Tuner Connect(Tuner t) => t.IsConnected ? \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(t) : InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d2<Tuner, RecorderUse, Tuner>(this.TPAcquireRecorder).BeginInvoke(RecorderUse.ru_AdviseOnly, t, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::Connect");

    public Tuner Disconnect(Tuner t)
    {
      try
      {
        if (t.IsConnected)
          t.Disconnect();
      }
      catch (COMException ex)
      {
      }
      return \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(t);
    }

    public Tuner AcquireTunerExclusive(Tuner acquisitionTarget)
    {
      if (acquisitionTarget == null)
        throw new ArgumentException("can't be null", nameof (acquisitionTarget));
      return acquisitionTarget.IsExclusive ? \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(acquisitionTarget) : InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d2<Tuner, RecorderUse, Tuner>(this.TPAcquireRecorder).BeginInvoke(RecorderUse.ru_Exclusive, acquisitionTarget, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::AcquireTunerExclusive");
    }

    public Tuner AcquireTunerActive(Tuner acquisitionTarget)
    {
      if (acquisitionTarget == null)
        throw new ArgumentException("can't be null", nameof (acquisitionTarget));
      return !acquisitionTarget.IsExclusive && !acquisitionTarget.IsActive ? InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d2<Tuner, RecorderUse, Tuner>(this.TPAcquireRecorder).BeginInvoke(RecorderUse.ru_Active, acquisitionTarget, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::AcquireTunerActive") : \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(acquisitionTarget);
    }

    public Tuner AcquireTunerPassive(Tuner acquisitionTarget)
    {
      if (acquisitionTarget == null)
        throw new ArgumentException("can't be null", nameof (acquisitionTarget));
      return !acquisitionTarget.IsExclusive && !acquisitionTarget.IsActive && !acquisitionTarget.IsPassive ? InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d2<Tuner, RecorderUse, Tuner>(this.TPAcquireRecorder).BeginInvoke(RecorderUse.ru_Passive, acquisitionTarget, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::AcquireTunerPassive") : \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(acquisitionTarget);
    }

    public Tuner AcquireTunerScanning(Tuner acquisitionTarget)
    {
      if (acquisitionTarget == null)
        throw new ArgumentException("can't be null", nameof (acquisitionTarget));
      return acquisitionTarget.IsScanning ? \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(acquisitionTarget) : InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d2<Tuner, RecorderUse, Tuner>(this.TPAcquireRecorder).BeginInvoke(RecorderUse.ru_Scanning, acquisitionTarget, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::AcquireTunerScanning");
    }

    public Tuner AcquireTuner(Tuner acquisitionTarget, RecorderUse mode, string clientName)
    {
      if (acquisitionTarget == null)
        throw new ArgumentException("can't be null", nameof (acquisitionTarget));
      try
      {
        return InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad3\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CSystem\u003A\u003AString\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d3<Tuner, RecorderUse, Tuner, string>(this.TPAcquireRecorder).BeginInvoke(mode, acquisitionTarget, clientName, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::AcquireTuner");
      }
      catch (COMException ex)
      {
        if (ex.ErrorCode != Errors.HR_DEVICE_IN_USE)
          throw;
      }
      return (Tuner) null;
    }

    public Tuner AcquireTuner(Tuner acquisitionTarget, RecorderUse mode)
    {
      if (acquisitionTarget == null)
        throw new ArgumentException("can't be null", nameof (acquisitionTarget));
      try
      {
        return InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d2<Tuner, RecorderUse, Tuner>(this.TPAcquireRecorder).BeginInvoke(mode, acquisitionTarget, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::AcquireTuner");
      }
      catch (COMException ex)
      {
        if (ex.ErrorCode != Errors.HR_DEVICE_IN_USE)
          throw;
      }
      return (Tuner) null;
    }

    public unsafe Tuner GetTunerFromIRecorderPtr(IntPtr rawRecorder, RecorderUse mode)
    {
      if (rawRecorder == IntPtr.Zero)
        throw new ArgumentException("can't be null", nameof (rawRecorder));
      try
      {
        CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref ccomPtrIrecorderEx2 = 0;
        Tuner fromIrecorderPtr;
        // ISSUE: fault handler
        try
        {
          if (rawRecorder != IntPtr.Zero)
            MarshalHelper.ComException(MTASafeComWrapper.GetNativePtrFromIntPtr(rawRecorder, (_GUID*) &\u003CModule\u003E._GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339, (void**) &ccomPtrIrecorderEx2));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          IRecorderEx2* irecorderEx2Ptr = (IRecorderEx2*) ^(int&) ref ccomPtrIrecorderEx2;
          CComGITPtr\u003CIRecorderEx2\u003E gitPtrIrecorderEx2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D(&gitPtrIrecorderEx2, (IRecorderEx2*) ^(int&) ref ccomPtrIrecorderEx2);
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            uint a1 = (uint) ^(int&) ref gitPtrIrecorderEx2;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref gitPtrIrecorderEx2 = 0;
            fromIrecorderPtr = InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad2\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002Cunsigned\u0020long\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d2<Tuner, uint, RecorderUse>(this.TPNLGetTunerForIRecorderPtr).BeginInvoke(a1, mode, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::GetTunerFromIRecorderPtr");
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &gitPtrIrecorderEx2);
          }
          \u003CModule\u003E.ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002ERevoke(&gitPtrIrecorderEx2);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
        }
        \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D(&ccomPtrIrecorderEx2);
        return fromIrecorderPtr;
      }
      catch (COMException ex)
      {
        if (ex.ErrorCode != Errors.HR_DEVICE_IN_USE)
          throw;
      }
      return (Tuner) null;
    }

    public Tuner ReleaseTuner(Tuner acquisitionTarget)
    {
      if (acquisitionTarget == null)
        throw new ArgumentException("can't be null", nameof (acquisitionTarget));
      return !acquisitionTarget.IsConnected ? (Tuner) acquisitionTarget.ReferenceClone() : InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d1<Tuner, Tuner>(this.TPReleaseTuner).BeginInvoke(acquisitionTarget, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::ReleaseTuner");
    }

    public Tuner get_SystemTuners(Guid g)
    {
      Tuner tuner = (Tuner) null;
      int num = (int) this.FillCache(RecorderMgrFlags.rmf_WaitAll);
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      Tuner systemTuners;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (TunerManager.m_RecorderIDDictionary != null)
        {
          if (TunerManager.m_RecorderIDDictionary.TryGetValue(g, out tuner))
            systemTuners = (Tuner) tuner.ReferenceClone();
          else
            goto label_6;
        }
        else
          goto label_6;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return systemTuners;
label_6:
      lock2.Dispose();
      try
      {
        return (Tuner) InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u002CSystem\u003A\u003AGuid\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(new d1<Tuner, Guid>(this.TPFindRecorderByID).BeginInvoke(g, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::SystemTuners::get", 60000).ReferenceClone();
      }
      catch (COMException ex)
      {
      }
      return (Tuner) null;
    }

    public Tuner FindTunerByPbdaTunerId(string pbdaTunerId)
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      Tuner tunerByPbdaTunerId1;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (TunerManager.m_RecorderIDDictionary != null)
        {
          Dictionary<Guid, Tuner>.Enumerator enumerator = TunerManager.m_RecorderIDDictionary.GetEnumerator();
          if (enumerator.MoveNext())
          {
            Tuner tuner;
            do
            {
              tuner = enumerator.Current.Value;
              if (tuner.PbdaTunerId == pbdaTunerId)
                goto label_5;
            }
            while (enumerator.MoveNext());
            goto label_8;
label_5:
            tunerByPbdaTunerId1 = (Tuner) tuner.ReferenceClone();
          }
          else
            goto label_8;
        }
        else
          goto label_8;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return tunerByPbdaTunerId1;
label_8:
      Tuner tunerByPbdaTunerId2;
      // ISSUE: fault handler
      try
      {
        tunerByPbdaTunerId2 = (Tuner) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return tunerByPbdaTunerId2;
    }

    public Tuner FindTunerByDeviceID(Guid deviceId)
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      Tuner tunerByDeviceId1;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (TunerManager.m_RecorderIDDictionary != null)
        {
          Dictionary<Guid, Tuner>.Enumerator enumerator = TunerManager.m_RecorderIDDictionary.GetEnumerator();
          if (enumerator.MoveNext())
          {
            Tuner tuner;
            do
            {
              tuner = enumerator.Current.Value;
              if (tuner.DeviceId == deviceId)
                goto label_5;
            }
            while (enumerator.MoveNext());
            goto label_8;
label_5:
            tunerByDeviceId1 = (Tuner) tuner.ReferenceClone();
          }
          else
            goto label_8;
        }
        else
          goto label_8;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return tunerByDeviceId1;
label_8:
      Tuner tunerByDeviceId2;
      // ISSUE: fault handler
      try
      {
        tunerByDeviceId2 = (Tuner) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return tunerByDeviceId2;
    }

    public ITunerCollection EnumTuners(
      TuneRequest tuneRequest,
      RecorderUse recorderUse,
      RecorderMgrFlags flags)
    {
      if (tuneRequest != null || recorderUse != RecorderUse.ru_Any)
        return (ITunerCollection) InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad3\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerCollection\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderMgrFlags\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerCollection\u0020\u005E\u003E(new d3<RemoteTunerCollection, TuneRequest, RecorderUse, RecorderMgrFlags>(this.TPEnumRecorders).BeginInvoke(tuneRequest, recorderUse, flags, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::EnumTuners", 60000);
      int num = (int) this.FillCache(flags);
      return (ITunerCollection) new TunerCollection(this);
    }

    public ITunerCollection EnumConfiguredTuners(
      TuneRequest tuneRequest,
      RecorderUse recorderUse,
      RecorderMgrFlags flags)
    {
      if (tuneRequest != null || recorderUse != RecorderUse.ru_Any)
        return (ITunerCollection) InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad3\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerCollection\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderUse\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderMgrFlags\u003E\u0020\u005E\u002CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARemoteTunerCollection\u0020\u005E\u003E(new d3<RemoteTunerCollection, TuneRequest, RecorderUse, RecorderMgrFlags>(this.TPEnumConfiguredRecorders).BeginInvoke(tuneRequest, recorderUse, flags, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::EnumConfiguredTuners", 60000);
      int num = (int) this.FillCache(flags);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      return (ITunerCollection) new TunerCollection(this, (__FnPtr<byte (Tuner)>) __methodptr(ConfiguredPredicate));
    }

    public void ResetAllTunerSettings() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPResetAllTunerSettings).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::ResetAllTunerSettings");

    public void ResetAllTuners(RecorderMgrFlags flags)
    {
      InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ARecorderMgrFlags\u003E\u0020\u005E\u003E(new dv1<RecorderMgrFlags>(this.TPResetAllRecorders).BeginInvoke(flags, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::ResetAllTuners");
      this.ClearCache();
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public bool NetworkRecordersEnabled
    {
      [return: MarshalAs(UnmanagedType.U1)] get => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cbool\u003E\u0020\u005E\u002Cbool\u003E(new d0<bool>(this.TPNetworkRecordersEnabled).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::NetworkRecordersEnabled::get");
    }

    public void StartSearch([MarshalAs(UnmanagedType.U1)] bool block, uint timeOut) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv2\u003Cbool\u002Cunsigned\u0020int\u003E\u0020\u005E\u003E(new dv2<bool, uint>(this.TPStartSearch).BeginInvoke(block, timeOut, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::StartSearch");

    public void CancelSearch() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPCancelSearch).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::CancelSearch");

    public void WaitForSearchComplete(uint timeOut) => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003Cunsigned\u0020int\u003E\u0020\u005E\u003E(new dv1<uint>(this.TPWaitForSearchComplete).BeginInvoke(timeOut, (AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::WaitForSearchComplete");

    public void ResetAllTunerCaches()
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (TunerManager.m_RecorderIDDictionary != null)
        {
          Dictionary<Guid, Tuner>.Enumerator enumerator = TunerManager.m_RecorderIDDictionary.GetEnumerator();
          if (enumerator.MoveNext())
          {
            do
            {
              enumerator.Current.Value.ClearCache();
            }
            while (enumerator.MoveNext());
          }
        }
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public uint NumConfiguredTuners(TuneRequest tr)
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      uint num1;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        num1 = 0U;
        int num2 = (int) this.FillCache(RecorderMgrFlags.rmf_WaitAll);
        if (TunerManager.m_RecorderIDDictionary != null)
        {
          Dictionary<Guid, Tuner>.Enumerator enumerator = TunerManager.m_RecorderIDDictionary.GetEnumerator();
          if (enumerator.MoveNext())
          {
            do
            {
              Tuner tuner = enumerator.Current.Value;
              bool flag = tr == null || tuner.IsConfiguredTuningSpace(tr.TuningSpace.UniqueName);
              if (tuner.IsConfigured && tuner.Ready && flag)
                ++num1;
            }
            while (enumerator.MoveNext());
          }
        }
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return num1;
    }

    public static void DisableConfigChangeNotification()
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        TunerManager.m_SuppressConfigEvents = true;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public static void EnableConfigChangeNotification()
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        int num = TunerManager.m_SuppressConfigEvents ? 1 : 0;
        TunerManager.m_SuppressConfigEvents = false;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    public void ClearCache()
    {
      this.ResetAllTunerCaches();
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPNLClearCache).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::TunerManager::ClearCache");
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public event EventHandler<TunerManager.TunerNotificationEventArgs> TunerArrivedEvent;

    [SpecialName]
    protected void raise_TunerArrivedEvent(
      object value0,
      TunerManager.TunerNotificationEventArgs value1)
    {
      EventHandler<TunerManager.TunerNotificationEventArgs> tunerArrivedEvent = this.\u003Cbacking_store\u003ETunerArrivedEvent;
      if (tunerArrivedEvent == null)
        return;
      tunerArrivedEvent(value0, value1);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public event EventHandler<TunerManager.TunerNotificationEventArgs> TunerDepartedEvent;

    [SpecialName]
    protected void raise_TunerDepartedEvent(
      object value0,
      TunerManager.TunerNotificationEventArgs value1)
    {
      EventHandler<TunerManager.TunerNotificationEventArgs> tunerDepartedEvent = this.\u003Cbacking_store\u003ETunerDepartedEvent;
      if (tunerDepartedEvent == null)
        return;
      tunerDepartedEvent(value0, value1);
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public event EventHandler<TunerManager.TunerNotificationEventArgs> TunerConfigChangedEvent;

    [SpecialName]
    protected void raise_TunerConfigChangedEvent(
      object value0,
      TunerManager.TunerNotificationEventArgs value1)
    {
      EventHandler<TunerManager.TunerNotificationEventArgs> configChangedEvent = this.\u003Cbacking_store\u003ETunerConfigChangedEvent;
      if (configChangedEvent == null)
        return;
      configChangedEvent(value0, value1);
    }

    internal void OnRecorderArrived(Guid guid)
    {
      this.ResetTunerCache(guid);
      TunerManager.TunerNotificationEventArgs notificationEventArgs = new TunerManager.TunerNotificationEventArgs(guid);
      TunerManager tunerManager = this;
      tunerManager.raise_TunerArrivedEvent((object) tunerManager, notificationEventArgs);
    }

    internal void OnRecorderDeparted(Guid guid)
    {
      this.ResetTunerCache(guid);
      TunerManager.TunerNotificationEventArgs notificationEventArgs = new TunerManager.TunerNotificationEventArgs(guid);
      TunerManager tunerManager = this;
      tunerManager.raise_TunerDepartedEvent((object) tunerManager, notificationEventArgs);
    }

    internal void OnRecorderConfigChanged(Guid guid)
    {
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (!TunerManager.m_SuppressConfigEvents)
          goto label_4;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return;
label_4:
      lock2.Dispose();
      this.ResetTunerCache(guid);
      TunerManager.TunerNotificationEventArgs notificationEventArgs = new TunerManager.TunerNotificationEventArgs(guid);
      TunerManager tunerManager = this;
      tunerManager.raise_TunerConfigChangedEvent((object) tunerManager, notificationEventArgs);
    }

    internal void ResetTunerCache(Guid Id)
    {
      bool flag = false;
      Tuner tuner = (Tuner) null;
      @lock lock1 = new @lock(TunerManager.m_CacheLock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        if (TunerManager.m_RecorderIDDictionary != null)
          flag = TunerManager.m_RecorderIDDictionary.TryGetValue(Id, out tuner);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      if (!flag)
        return;
      tuner.ClearCache();
    }

    internal unsafe int NativeRecorderArrived(_GUID guid)
    {
      dv1<Guid> dv1 = new dv1<Guid>(this.OnRecorderArrived);
      Guid a1 = new Guid();
      // ISSUE: cpblk instruction
      __memcpy((int) &a1, ref guid, 16);
      dv1.BeginInvoke(a1, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CSystem\u003A\u003AGuid\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal unsafe int NativeRecorderDeparted(_GUID guid)
    {
      dv1<Guid> dv1 = new dv1<Guid>(this.OnRecorderDeparted);
      Guid a1 = new Guid();
      // ISSUE: cpblk instruction
      __memcpy((int) &a1, ref guid, 16);
      dv1.BeginInvoke(a1, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CSystem\u003A\u003AGuid\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    internal unsafe int NativeRecorderConfigChanged(_GUID guid)
    {
      dv1<Guid> dv1 = new dv1<Guid>(this.OnRecorderConfigChanged);
      Guid a1 = new Guid();
      // ISSUE: cpblk instruction
      __memcpy((int) &a1, ref guid, 16);
      dv1.BeginInvoke(a1, new AsyncCallback(InteropHelper.FireAndForget\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv1\u003CSystem\u003A\u003AGuid\u003E\u0020\u005E\u003E), (object) dv1);
      return 0;
    }

    protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool _param1)
    {
      if (_param1)
      {
        try
        {
          this.\u007ETunerManager();
        }
        finally
        {
          base.Dispose(true);
        }
      }
      else
      {
        try
        {
          this.\u0021TunerManager();
        }
        finally
        {
          base.Dispose(false);
        }
      }
    }

    ~TunerManager() => this.Dispose(false);

    public class TunerNotificationEventArgs : EventArgs
    {
      public Guid TunerId = Guid.Empty;

      public TunerNotificationEventArgs()
      {
      }

      public TunerNotificationEventArgs(Guid g)
      {
        this.TunerId = g;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }
    }
  }
}
