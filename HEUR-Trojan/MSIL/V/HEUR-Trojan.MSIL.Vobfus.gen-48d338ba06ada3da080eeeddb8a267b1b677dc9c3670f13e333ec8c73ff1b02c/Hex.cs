// Decompiled with JetBrains decompiler
// Type: WindowsFormsApp1.Hex
// Assembly: INormalizeForIsolatedStor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 95549A8D-1BBA-42BD-89B9-AB899771C6E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Vobfus.gen-48d338ba06ada3da080eeeddb8a267b1b677dc9c3670f13e333ec8c73ff1b02c.exe

using System;
using System.Drawing;

namespace WindowsFormsApp1
{
  internal class Hex
  {
    public string color;
    public int id;
    public Point coords;
    public PointF center;
    public Point[] points = new Point[6];
    public Point[] points2 = new Point[6];

    public Hex(int i, int ring, int number, int width, int height)
    {
      this.id = i;
      int num1 = width / 11;
      this.color = "White";
      this.coords.X = ring;
      this.coords.Y = number;
      switch (ring)
      {
        case 0:
          this.center.X = (float) width / 2f;
          this.center.Y = (float) height / 2f;
          break;
        case 1:
          double num2 = (double) this.coords.Y / 6.0 * 2.0 * Math.PI;
          this.center.X = (float) width / 2f + (float) ((double) num1 * Math.Sqrt(3.0) * Math.Sin(num2));
          this.center.Y = (float) height / 2f + (float) ((double) num1 * Math.Sqrt(3.0) * Math.Cos(num2));
          break;
        case 2:
          double num3 = (double) this.coords.Y / 12.0 * 2.0 * Math.PI;
          double num4 = this.coords.Y % 2 != 0 ? (double) (num1 * 3) : (double) (2 * num1) * Math.Sqrt(3.0);
          this.center.X = (float) (width / 2) + (float) (num4 * Math.Sin(num3));
          this.center.Y = (float) (height / 2) + (float) (num4 * Math.Cos(num3));
          break;
        case 3:
          double num5 = (double) this.coords.Y / 18.0 * 2.0 * Math.PI;
          double num6 = (double) (3 * num1) * Math.Sqrt(3.0);
          if (this.coords.Y % 3 == 0)
          {
            this.center.X = (float) (width / 2) + (float) (num6 * Math.Sin(num5));
            this.center.Y = (float) (height / 2) + (float) (num6 * Math.Cos(num5));
          }
          else
          {
            PointF pointF1 = new PointF();
            PointF pointF2 = new PointF();
            double num7 = (double) (this.coords.Y - this.coords.Y % 3) / 18.0 * 2.0 * Math.PI;
            pointF1.X = (float) (width / 2) + (float) (num6 * Math.Sin(num7));
            pointF1.Y = (float) (height / 2) + (float) (num6 * Math.Cos(num7));
            double num8 = (double) (this.coords.Y + 3 - this.coords.Y % 3) / 18.0 * 2.0 * Math.PI;
            pointF2.X = (float) (width / 2) + (float) (num6 * Math.Sin(num8));
            pointF2.Y = (float) (height / 2) + (float) (num6 * Math.Cos(num8));
            this.center.X = (float) (((double) (3 - this.coords.Y % 3) * (double) pointF1.X + (double) (this.coords.Y % 3) * (double) pointF2.X) / 3.0);
            this.center.Y = (float) (((double) (3 - this.coords.Y % 3) * (double) pointF1.Y + (double) (this.coords.Y % 3) * (double) pointF2.Y) / 3.0);
          }
          break;
      }
      Point point = new Point();
      point.X = (int) ((double) this.center.X - (double) num1 / 2.0);
      point.Y = (int) ((double) this.center.Y - (double) num1 * Math.Sqrt(3.0) / 2.0);
      this.points[0] = point;
      this.points2[0].X = (int) ((double) (4 * this.points[0].X) + (double) this.center.X) / 5;
      this.points2[0].Y = (int) ((double) (4 * this.points[0].Y) + (double) this.center.Y) / 5;
      point.X = (int) ((double) this.center.X + (double) num1 / 2.0);
      point.Y = (int) ((double) this.center.Y - (double) num1 * Math.Sqrt(3.0) / 2.0);
      this.points[1] = point;
      this.points2[1].X = (int) ((double) (4 * this.points[1].X) + (double) this.center.X) / 5;
      this.points2[1].Y = (int) ((double) (4 * this.points[1].Y) + (double) this.center.Y) / 5;
      point.X = (int) ((double) this.center.X + (double) num1);
      point.Y = (int) this.center.Y;
      this.points[2] = point;
      this.points2[2].X = (int) ((double) (4 * this.points[2].X) + (double) this.center.X) / 5;
      this.points2[2].Y = (int) ((double) (4 * this.points[2].Y) + (double) this.center.Y) / 5;
      point.X = (int) ((double) this.center.X + (double) num1 / 2.0);
      point.Y = (int) ((double) this.center.Y + (double) num1 * Math.Sqrt(3.0) / 2.0);
      this.points[3] = point;
      this.points2[3].X = (int) ((double) (4 * this.points[3].X) + (double) this.center.X) / 5;
      this.points2[3].Y = (int) ((double) (4 * this.points[3].Y) + (double) this.center.Y) / 5;
      point.X = (int) ((double) this.center.X - (double) num1 / 2.0);
      point.Y = (int) ((double) this.center.Y + (double) num1 * Math.Sqrt(3.0) / 2.0);
      this.points[4] = point;
      this.points2[4].X = (int) ((double) (4 * this.points[4].X) + (double) this.center.X) / 5;
      this.points2[4].Y = (int) ((double) (4 * this.points[4].Y) + (double) this.center.Y) / 5;
      point.X = (int) ((double) this.center.X - (double) num1);
      point.Y = (int) this.center.Y;
      this.points[5] = point;
      this.points2[5].X = (int) ((double) (4 * this.points[5].X) + (double) this.center.X) / 5;
      this.points2[5].Y = (int) ((double) (4 * this.points[5].Y) + (double) this.center.Y) / 5;
    }
  }
}
