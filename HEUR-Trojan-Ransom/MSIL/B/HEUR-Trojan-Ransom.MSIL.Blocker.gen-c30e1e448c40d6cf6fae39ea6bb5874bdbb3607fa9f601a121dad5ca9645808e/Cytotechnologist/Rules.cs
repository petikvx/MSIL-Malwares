// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: SingleArrayTypeIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 96646636-5181-465D-A45F-CFFED007E535
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c30e1e448c40d6cf6fae39ea6bb5874bdbb3607fa9f601a121dad5ca9645808e.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 440823968;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1326659167)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -890172440 ^ 1905888013;
            continue;
          case 3:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -178330786 ^ 768329080;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -779172905;
      float[] numArray;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1596160799)) % 8U)
        {
          case 0:
            aIndex = 0;
            num1 = (int) num2 * -1253499100 ^ -592623182;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -59886443;
            continue;
          case 2:
            goto label_1;
          case 3:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -611206576 : (num3 = -1694283620);
            continue;
          case 4:
            ++aIndex;
            num1 = (int) num2 * 1741612883 ^ 1814261742;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 1728252201 ^ -1315088157;
            continue;
          case 6:
            numArray = new float[json.Count];
            num1 = (int) num2 * 769308655 ^ 512044027;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 1124724477;
      bool flag1;
      int num2;
      int aIndex1;
      JSONNode jsonNode;
      int aIndex2;
      int count;
      bool flag2;
      bool flag3;
      List<Card> cardList;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1473791366)) % 24U)
        {
          case 0:
            array = cardList.ToArray();
            num1 = (int) num3 * 783643746 ^ 988345534;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * -1911190206 ^ -474811619;
            continue;
          case 2:
            num1 = (int) num3 * 204193076 ^ -618143791;
            continue;
          case 3:
            num1 = (int) num3 * 1276466588 ^ -1279124684;
            continue;
          case 4:
            int num4 = flag2 ? 1907661602 : (num4 = 1912708906);
            num1 = num4 ^ (int) num3 * 2081598501;
            continue;
          case 5:
            flag3 = aIndex1 < maxImpact;
            num1 = 503412505;
            continue;
          case 6:
            ++num2;
            num1 = (int) num3 * -1662532376 ^ 100754271;
            continue;
          case 7:
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 3580165;
            continue;
          case 8:
            num1 = 2002317538;
            continue;
          case 9:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = 11368199;
            continue;
          case 10:
            int num5;
            num1 = num5 = aIndex1 < maxImpact * 2 ? 1394976410 : (num5 = 1194264571);
            continue;
          case 11:
            aIndex1 = 0;
            num1 = (int) num3 * -1636554388 ^ -1113428256;
            continue;
          case 12:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * -246486626 ^ -1714617659;
            continue;
          case 13:
            num1 = (int) num3 * 1420607677 ^ -1718794054;
            continue;
          case 14:
            num1 = (int) num3 * -1249800078 ^ -472823052;
            continue;
          case 15:
            num1 = (int) num3 * 492118486 ^ -1764178610;
            continue;
          case 17:
            int num6 = flag1 ? -545924222 : (num6 = -1446685440);
            num1 = num6 ^ (int) num3 * 1455832201;
            continue;
          case 18:
            ++aIndex1;
            num1 = (int) num3 * 407960595 ^ -678992158;
            continue;
          case 19:
            count = json.Count;
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * 761053189 ^ -2114290973;
            continue;
          case 20:
            num1 = 1188925855;
            continue;
          case 21:
            ++aIndex2;
            num1 = (int) num3 * 326904973 ^ -983296312;
            continue;
          case 22:
            goto label_1;
          case 23:
            flag2 = aIndex2 < count;
            num1 = 1494949418;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 630011062;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1980102826)) % 3U)
        {
          case 1:
            str = Rules.\u206F‎⁭‍‬‌⁪⁮‭‮⁬‮‏‭‭‭‎‌‌⁫‬⁯⁪‬‏‫‍‬⁬​⁭‭‭‬‮‏‫​⁪‪‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -377320084 ^ -671832956;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = 1543505002;
      Card card1;
      string str2;
      int index;
      int num2;
      Card[] cards;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 892371583)) % 17U)
        {
          case 0:
            str2 = Rules.\u200B‮‮‮⁬‌‫⁪‏‍‬‬​‭​⁫‮‍‬‎⁬‬‏‍⁬​‌‬⁬‏‭⁮‭‬‮‎‎‍‭⁬‮(str1, "\n]");
            num1 = (int) num3 * -758132723 ^ 1550400483;
            continue;
          case 1:
            num1 = (int) num3 * -1701138481 ^ 999809739;
            continue;
          case 2:
            num2 = 0;
            num1 = (int) num3 * -13182888 ^ 739813423;
            continue;
          case 3:
            ++index;
            num1 = (int) num3 * -111762011 ^ 1720392067;
            continue;
          case 4:
            num1 = (int) num3 * 1642505432 ^ -2052286893;
            continue;
          case 5:
            num1 = (int) num3 * -984923624 ^ -1802798880;
            continue;
          case 6:
            num2 = card1.Type;
            num1 = (int) num3 * -1961515034 ^ -132047269;
            continue;
          case 7:
            int num4 = flag ? 1631476088 : (num4 = 574016584);
            num1 = num4 ^ (int) num3 * 747030466;
            continue;
          case 8:
            num1 = (int) num3 * -350916476 ^ -346860064;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num3 * 291589751 ^ -175069319;
            continue;
          case 11:
            card1 = cards[index];
            flag = num2 != card1.Type;
            num1 = 1826852243;
            continue;
          case 12:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206C⁪‏⁮‪‪⁭‫‫‮⁯⁪⁬⁬⁪⁪‭​‮‫‫‌⁭‌‍‬​‍‏‮‌‎‏‪⁪‭‍‮‫⁭‮((object) card2) : (string) null;
            str1 = Rules.\u200E‫⁭⁯⁬‪⁬‪⁬⁯‬‫‫‭‎⁫‮​‏‫‭‮⁯‫‏⁬⁭‌‎‫⁬‪‬‪⁬⁮⁮⁮⁮⁬‮(str3, str4, " ");
            num1 = 1160332786;
            continue;
          case 13:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * 1722840669 ^ -710501229;
            continue;
          case 14:
            str1 = Rules.\u200B‮‮‮⁬‌‫⁪‏‍‬‬​‭​⁫‮‍‬‎⁬‬‏‍⁬​‌‬⁬‏‭⁮‭‬‮‎‎‍‭⁬‮(str1, "\n\t");
            num1 = (int) num3 * 1430774690 ^ -2059308284;
            continue;
          case 16:
            int num5;
            num1 = num5 = index < cards.Length ? 852169652 : (num5 = 1162659115);
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u200B‮‮‮⁬‌‫⁪‏‍‬‬​‭​⁫‮‍‬‎⁬‬‏‍⁬​‌‬⁬‏‭⁮‭‬‮‎‎‍‭⁬‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202B‬⁮‍⁭‪⁯​⁭‮⁯‫⁭​‬⁯⁪⁫​​‎‫⁯‌⁫‎⁭‬⁯‍‬‬‮⁪‮‬⁬⁬‫‮()));
      int index = 1;
label_4:
      int num1 = index >= this.RiskChances.Length ? 418101340 : (num1 = 98481376);
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 146047999)) % 6U)
        {
          case 0:
            num1 = 98481376;
            continue;
          case 1:
            str1 = Rules.\u200E‫⁭⁯⁬‪⁬‪⁬⁯‬‫‫‭‎⁫‮​‏‫‭‮⁯‫‏⁬⁭‌‎‫⁬‪‬‪⁬⁮⁮⁮⁮⁬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202B‬⁮‍⁭‪⁯​⁭‮⁯‫⁭​‬⁯⁪⁫​​‎‫⁯‌⁫‎⁭‬⁯‍‬‬‮⁪‮‬⁬⁬‫‮()));
            num1 = 753292431;
            continue;
          case 3:
            str2 = Rules.\u200B‮‮‮⁬‌‫⁪‏‍‬‬​‭​⁫‮‍‬‎⁬‬‏‍⁬​‌‬⁬‏‭⁮‭‬‮‎‎‍‭⁬‮(str1, " ]");
            num1 = (int) num2 * 1496433886 ^ 1839277025;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * 1322709925 ^ 1344786986;
            continue;
          case 5:
            goto label_4;
          default:
            goto label_7;
        }
      }
label_7:
      return str2;
    }

    static string \u206F‎⁭‍‬‌⁪⁮‭‮⁬‮‏‭‭‭‎‌‌⁫‬⁯⁪‬‏‫‍‬⁬​⁭‭‭‬‮‏‫​⁪‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200B‮‮‮⁬‌‫⁪‏‍‬‬​‭​⁫‮‍‬‎⁬‬‏‍⁬​‌‬⁬‏‭⁮‭‬‮‎‎‍‭⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206C⁪‏⁮‪‪⁭‫‫‮⁯⁪⁬⁬⁪⁪‭​‮‫‫‌⁭‌‍‬​‍‏‮‌‎‏‪⁪‭‍‮‫⁭‮([In] object obj0) => obj0.ToString();

    static string \u200E‫⁭⁯⁬‪⁬‪⁬⁯‬‫‫‭‎⁫‮​‏‫‭‮⁯‫‏⁬⁭‌‎‫⁬‪‬‪⁬⁮⁮⁮⁮⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202B‬⁮‍⁭‪⁯​⁭‮⁯‫⁭​‬⁯⁪⁫​​‎‫⁯‌⁫‎⁭‬⁯‍‬‬‮⁪‮‬⁬⁬‫‮() => CultureInfo.InvariantCulture;
  }
}
