// Decompiled with JetBrains decompiler
// Type: SC_aio.masstell
// Assembly: SCaio, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4039BEB0-723F-44D4-B6A2-6115173D2A3D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.asho-8d599606a9e08d397b994f3c1f6ab611585cb198.exe

using Microsoft.VisualBasic.CompilerServices;
using SC_aio.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace SC_aio
{
  [DesignerGenerated]
  public class masstell : Form
  {
    private IContainer components;
    [AccessedThroughProperty("emailbox")]
    private TextBox _emailbox;
    [AccessedThroughProperty("ProgressBar1")]
    private ProgressBar _ProgressBar1;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("status")]
    private Label _status;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    private List<string> emails;
    private int current;
    private bool finish;
    private int threads;
    private CookieContainer logincookie2;
    private string domain2;

    public masstell()
    {
      this.Load += new EventHandler(this.masstell_Load);
      this.emails = new List<string>();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.emailbox = new TextBox();
      this.ProgressBar1 = new ProgressBar();
      this.Button1 = new Button();
      this.status = new Label();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      TextBox emailbox1 = this.emailbox;
      Point point1 = new Point(12, 12);
      Point point2 = point1;
      emailbox1.Location = point2;
      this.emailbox.MaxLength = 999999999;
      this.emailbox.Multiline = true;
      this.emailbox.Name = "emailbox";
      TextBox emailbox2 = this.emailbox;
      Size size1 = new Size(260, 202);
      Size size2 = size1;
      emailbox2.Size = size2;
      this.emailbox.TabIndex = 0;
      ProgressBar progressBar1_1 = this.ProgressBar1;
      point1 = new Point(12, 218);
      Point point3 = point1;
      progressBar1_1.Location = point3;
      this.ProgressBar1.Name = "ProgressBar1";
      ProgressBar progressBar1_2 = this.ProgressBar1;
      size1 = new Size(260, 21);
      Size size3 = size1;
      progressBar1_2.Size = size3;
      this.ProgressBar1.TabIndex = 1;
      Button button1_1 = this.Button1;
      point1 = new Point(12, 263);
      Point point4 = point1;
      button1_1.Location = point4;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(260, 29);
      Size size4 = size1;
      button1_2.Size = size4;
      this.Button1.TabIndex = 2;
      this.Button1.Text = "Begin";
      this.Button1.UseVisualStyleBackColor = true;
      Label status1 = this.status;
      point1 = new Point(9, 239);
      Point point5 = point1;
      status1.Location = point5;
      this.status.Name = "status";
      Label status2 = this.status;
      size1 = new Size(260, 23);
      Size size5 = size1;
      status2.Size = size5;
      this.status.TabIndex = 3;
      this.status.Text = "Enter emails into top box one per line, then begin!";
      this.status.TextAlign = ContentAlignment.MiddleCenter;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(284, 299);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.status);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.ProgressBar1);
      this.Controls.Add((Control) this.emailbox);
      this.DoubleBuffered = true;
      this.MaximizeBox = false;
      this.Name = nameof (masstell);
      this.Text = "ShiftCode - Mass Tell";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TextBox emailbox
    {
      get => this._emailbox;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._emailbox = value;
    }

    internal virtual ProgressBar ProgressBar1
    {
      get => this._ProgressBar1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ProgressBar1 = value;
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual Label status
    {
      get => this._status;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._status = value;
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    public object sendPost2(string url, string postData)
    {
      try
      {
        CookieContainer cookieContainer = new CookieContainer();
        byte[] bytes = new UTF8Encoding().GetBytes(postData);
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(url);
        httpWebRequest.Method = "POST";
        httpWebRequest.KeepAlive = true;
        httpWebRequest.Timeout = 30000;
        httpWebRequest.CookieContainer = this.logincookie2;
        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
        httpWebRequest.Referer = "";
        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows; U; Windows NT 7.1; ru; rv:1.9.2.3) Gecko/20100801 Firefox/12.0 (.NET CLR 3.5.30729)";
        httpWebRequest.ContentLength = (long) bytes.Length;
        httpWebRequest.CookieContainer = this.logincookie2;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
        HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
        cookieContainer.Add(response.Cookies);
        return (object) new StreamReader(response.GetResponseStream()).ReadToEnd();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (object) "";
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      string[] strArray = this.emailbox.Text.Split('\r');
      int index = 0;
      while (index < strArray.Length)
      {
        this.emails.Add(strArray[index]);
        checked { ++index; }
      }
      this.ProgressBar1.Maximum = this.emails.Count;
      this.createThread(new Thread((ThreadStart) (() => this.startthreads(this.domain2))));
      this.Timer1.Start();
    }

    public void createThread(Thread thread) => thread.Start();

    private void sendemailbulk(string ur, string postdata)
    {
      try
      {
        this.sendPost2("http://" + this.domain2 + "/members/tell.php?send", postdata);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      checked { --this.threads; }
      Thread.EndThreadAffinity();
    }

    private void startthreads(string doma)
    {
      // ISSUE: variable of a compiler-generated type
      masstell._Closure\u0024__1 other;
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      masstell._Closure\u0024__1 closure1 = new masstell._Closure\u0024__1(other);
      // ISSUE: reference to a compiler-generated field
      closure1.\u0024VB\u0024Local_doma = doma;
      // ISSUE: reference to a compiler-generated field
      closure1.\u0024VB\u0024Me = this;
      do
      {
        int num1 = 1;
        if (this.threads >= 5)
        {
          Thread.Sleep(100);
        }
        else
        {
          int num2 = 0;
          // ISSUE: reference to a compiler-generated field
          closure1.\u0024VB\u0024Local_postdata = "name=" + MyProject.Forms.aio.randSelect(MyProject.Forms.aio.firstnames) + " " + MyProject.Forms.aio.randSelect(MyProject.Forms.aio.lastnames) + "&email=" + MyProject.Forms.aio.randSelect(MyProject.Forms.aio.firstnames) + MyProject.Forms.aio.rand.Next(0, 99999).ToString() + "@gmail.com";
          while (num2 != 5)
          {
            checked { ++num2; }
            string Left;
            try
            {
              Left = this.emails[this.current];
            }
            catch (Exception ex)
            {
              int lErl = num1;
              ProjectData.SetProjectError(ex, lErl);
              Left = "emaildone";
              ProjectData.ClearProjectError();
            }
            if (Operators.CompareString(Left, "emaildone", false) != 0)
            {
              checked { ++this.current; }
              string str = Left.Split('@')[0];
              // ISSUE: reference to a compiler-generated field
              // ISSUE: reference to a compiler-generated field
              closure1.\u0024VB\u0024Local_postdata = closure1.\u0024VB\u0024Local_postdata + "&name" + num2.ToString() + "=" + str + "&email" + num2.ToString() + "=" + Left;
            }
          }
          // ISSUE: reference to a compiler-generated method
          this.createThread(new Thread(new ThreadStart(closure1._Lambda\u0024__2)));
          checked { ++this.threads; }
          if (this.current > checked (this.emails.Count - 1))
            return;
        }
      }
      while (!this.finish);
      Thread.EndThreadAffinity();
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        if (this.current < checked (this.emails.Count - 1))
          goto label_6;
label_2:
        num3 = 3;
        this.finish = true;
label_3:
        num3 = 4;
        this.Timer1.Stop();
label_4:
        num3 = 5;
        this.status.Text = "Sent all emails " + this.emails.Count.ToString() + "/" + this.emails.Count.ToString();
label_5:
        num3 = 6;
        this.ProgressBar1.Value = 100;
label_6:
        num3 = 8;
        this.status.Text = "Done " + this.current.ToString() + "/" + this.emails.Count.ToString();
label_7:
        num3 = 9;
        this.ProgressBar1.Value = this.current;
        goto label_14;
label_9:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 8:
                goto label_6;
              case 9:
                goto label_7;
              case 10:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void masstell_Load(object sender, EventArgs e)
    {
      this.logincookie2 = MyProject.Forms.aio.logincookie;
      this.domain2 = MyProject.Forms.aio.domain;
    }
  }
}
