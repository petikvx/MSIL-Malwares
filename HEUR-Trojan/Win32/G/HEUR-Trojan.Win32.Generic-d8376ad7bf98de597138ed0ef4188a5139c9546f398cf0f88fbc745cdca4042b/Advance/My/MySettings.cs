// Decompiled with JetBrains decompiler
// Type: Advance.My.MySettings
// Assembly: Advance, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 40A7B1DF-A4F3-4A92-8BF1-725EF49C72AB
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-d8376ad7bf98de597138ed0ef4188a5139c9546f398cf0f88fbc745cdca4042b.exe

using \u0002;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Advance.My
{
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \u0001 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool \u0001;
    private static object \u0001 = RuntimeHelpers.GetObjectValue(new object());

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void \u0001(object sender, EventArgs e)
    {
      if (!\u0001.\u0001().SaveMySettingsOnExit)
        return;
      // ISSUE: reference to a compiler-generated method
      \u0003.\u0001().Save();
    }

    public static MySettings Default
    {
      get
      {
        while (!MySettings.\u0001)
        {
          object obj = MySettings.\u0001;
          object Expression = obj;
          if (true)
            goto label_11;
label_2:
          if (true)
          {
            Monitor.Enter(obj);
            try
            {
              do
              {
                if (MySettings.\u0001)
                  goto label_6;
label_4:
                if (true)
                {
                  \u0001.\u0001().Shutdown += (ShutdownEventHandler) ((sender, e) =>
                  {
                    if (!\u0001.\u0001().SaveMySettingsOnExit)
                      return;
                    \u0003.\u0001().Save();
                  });
                  if (true)
                    MySettings.\u0001 = true;
                  else
                    continue;
                }
                else
                  continue;
label_6:
                if (false)
                  goto label_4;
              }
              while (false);
              break;
            }
            finally
            {
              Monitor.Exit(obj);
            }
          }
          else
            continue;
label_11:
          ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
          goto label_2;
        }
        return MySettings.\u0001;
      }
    }
  }
}
