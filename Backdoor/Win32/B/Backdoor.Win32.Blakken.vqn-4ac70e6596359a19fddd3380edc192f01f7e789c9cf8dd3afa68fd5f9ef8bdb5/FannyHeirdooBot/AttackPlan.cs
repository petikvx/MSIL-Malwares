// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.AttackPlan
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System.Collections.Generic;

namespace FannyHeirdooBot
{
  public class AttackPlan
  {
    public string Strategy;
    public string Reason;
    public Planet Target;
    public double Sweetness;
    public bool Enabled;
    public bool DominationMove;

    public AttackPlan() => this.Participants = new List<AttackPlanParticipant>();

    public List<AttackPlanParticipant> Participants { get; private set; }

    public void AddParticipant(Planet participant, PlanetTurn turn, int scheduledTurn)
    {
      AttackPlanParticipant attackPlanParticipant = new AttackPlanParticipant();
label_1:
      int num1 = 1450651425;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 535069915)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            attackPlanParticipant.Source = participant;
            num1 = (int) num2 * 619322652 ^ 1726800148;
            continue;
          case 2:
            attackPlanParticipant.ScheduledTurn = scheduledTurn;
            this.Participants.Add(attackPlanParticipant);
            num1 = (int) num2 * 2144531789 ^ -346652115;
            continue;
          case 3:
            attackPlanParticipant.AttackersTurn = turn;
            num1 = (int) num2 * -648746626 ^ 1448897223;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public void AddParticipant(Planet participant, PlanetTurn turn, PlanetTurn defendersTurn)
    {
      AttackPlanParticipant attackPlanParticipant = new AttackPlanParticipant();
label_1:
      int num1 = 1257740847;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1315853548)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 9067491 ^ 263148443;
            continue;
          case 1:
            num1 = (int) num2 * 344154243 ^ -1366578959;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Participants.Add(attackPlanParticipant);
            num1 = (int) num2 * -522184604 ^ 268437965;
            continue;
          case 4:
            goto label_1;
          case 5:
            attackPlanParticipant.ScheduledTurn = turn.TurnsFromNow;
            attackPlanParticipant.DefendersTurn = defendersTurn;
            num1 = (int) num2 * 1148093654 ^ 1259241279;
            continue;
          case 6:
            attackPlanParticipant.Source = participant;
            attackPlanParticipant.AttackersTurn = turn;
            num1 = (int) num2 * -1712244198 ^ -976692309;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }
  }
}
