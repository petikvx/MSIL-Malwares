<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Prev" type="System.Byte[], mscorlib">
    <value>
        TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        gAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0K
        JAAAAAAAAABQRQAATAEEADzGjE4AAAAAAAAAAOAAAgELAQgAABIAAAAMAAAAAAAA7jAAAAAgAAAAQAAA
        AABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAABAAAAAAAAAIAQIUAABAAABAAAAAAEAAAEAAA
        AAAAABAAAAAAAAAAAAAAAJwwAABPAAAAAGAAAEoGAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAwAAAAAQAAA
        HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAA
        CCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA9BAAAAAgAAAAEgAAAAQAAAAAAAAAAAAAAAAAACAAAGAuc2Rh
        dGEAAJAAAAAAQAAAAAIAAAAWAAAAAAAAAAAAAAAAAABAAADALnJzcmMAAABKBgAAAGAAAAAIAAAAGAAA
        AAAAAAAAAAAAAAAAQAAAQC5yZWxvYwAADAAAAACAAAAAAgAAACAAAAAAAAAAAAAAAAAAAEAAAEIAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        FgDBABMAAwAAAAEAWwAAAAEAWwARAOEAIwARAPYAKAAZABgBLAAZACEBMQAZACoBNwAhAE0BRgApAJMB
        TQApAKMBEwA5AM0BUwAhAN8BWABBAOsBXABBAPYBYwBBAAQCaABJABECbABJABgCcwBBAE0BhQBRADkC
        aAAMADkCaABhAHwCmwBpAJMCoQBhAKECKAAMALECqABxANoCrgAMABgCtwBxAOECFwBJABECvQBxAPUC
        wwAMAPsCaACRADkC3AA5ADkC4gA5AA0DaACZADkCaAChADkC7QCxADkC8wC5ADkCaADBADkC+ADJADkC
        +ADRADkC/QDZADkC+ADhADkC+ADpADkC+ADxADkC+AD5ADkC+AABATkC+AAuACsBQAEuAGMBagEuAAsB
        AgEuABMBCwEuABsBFAEuACMBMwEuADMBagEuADsBagEuAEMBcAEuAEsBpAEuAFMBpAEuAFsBpAFDAIsA
        kABjAIsAkAAAAQMBkAA9AHgAiwA9ABwAHADMAOgAlQAEgAAAAAAAAAAAAAAAAAAAAAAxAAAAAgAAAAAA
        AAAAAAAAAQAKAAAAAAAIAAAAAAAAAAAAAAAKABMAAAAAAAIAAAAAAAAAAAAAAAEAPgAAAAAAAAAAPE1v
        ZHVsZT4AbXNjb3JsaWIATWljcm9zb2Z0LlZpc3VhbEJhc2ljAE1vZHVsZTEAUHJldgBNb2R1bGUyAFN5
        c3RlbQBPYmplY3QALmNjdG9yAERlY3J5cHQAZW5jcnlwdGVkdGV4dABuMm42YVEwUk1pZABaSGxSNjZU
        ZW9DAFR4bkZOSlhaSFUAem9qVnM4UlNQSwBYM0pQWXl1NzkyAGhnZGZnaGRmdDQ0NTQ2NTY3NTY3AFVH
        S1VYamtycFEATWFpbgBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseQBHZXRFeGVjdXRpbmdBc3NlbWJs
        eQBnZXRfTG9jYXRpb24AU3lzdGVtLlRleHQARW5jb2RpbmcAZ2V0X1VURjgAR2V0Qnl0ZXMAR2V0U3Ry
        aW5nAE1pY3Jvc29mdC5XaW4zMgBSZWdpc3RyeQBTZXRWYWx1ZQBNaWNyb3NvZnQuVmlzdWFsQmFzaWMu
        Q29tcGlsZXJTZXJ2aWNlcwBQcm9qZWN0RGF0YQBFeGNlcHRpb24AU2V0UHJvamVjdEVycm9yAENsZWFy
        UHJvamVjdEVycm9yAFN5c3RlbS5UaHJlYWRpbmcAVGhyZWFkAFNsZWVwAFJlZ2lzdHJ5S2V5AEN1cnJl
        bnRVc2VyAE9wZW5TdWJLZXkAR2V0VmFsdWVOYW1lcwBDbG9zZQBTdHJpbmcAQ29uY2F0AENvbnRhaW5z
        AFN0YW5kYXJkTW9kdWxlQXR0cmlidXRlAC5jdG9yAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAExp
        c3RgMQBTeXN0ZW0uRGlhZ25vc3RpY3MAUHJvY2VzcwBHZXRQcm9jZXNzZXMAT3BlcmF0b3JzAENvbXBh
        cmVTdHJpbmcAZ2V0X1Byb2Nlc3NOYW1lAEFkZABJbnRlcmFjdGlvbgBNc2dCb3hSZXN1bHQATXNnQm94
        U3R5bGUATXNnQm94AEVudmlyb24AQXBwV2luU3R5bGUAU2hlbGwAQ2xlYXIAVGhyZWFkU3RhcnQAU3Rh
        cnQAU1RBVGhyZWFkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARGVidWdnaW5nTW9kZXMAU3lz
        dGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRl
        AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25BdHRyaWJ1dGUA
        U3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAEd1aWRBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJp
        YnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBB
        c3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5RGVz
        Y3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBQcmV2LmV4ZQAAAABJTwBsAGcA
        dwB1AHoAdwBvAH4ArgAtAGUAeAB+AHUAIgArACgArgA3AGcAKgAgAC4AfQAyACgALgAoACIAVgB9AHgA
        egBsAHUAAYCjSgBOAEkAXgBlAEoAXQBbAFwAUABaAGEAbQBkAGMAVgBkAG8AZwAlAHwALAAwAHoALQAh
        AHgAagAoACMAMwBxAHYAcwBrAHoAYwBfAHIAeABvAHsAJQAiAGsAUwAnACUAJgB5ACQAKwBtAH0ALAAu
        ACUALAAsAHoAbwAwAG4AbABnAG4AawB6AGQATgAjAHsAeAB8ACEAdAAjAG0AZAApACMAAVtVAHIAagB5
        AH0AaAB6AG4AZgBYAHUAcAAhAH4AJAAhAHgAKABwAGwAIAAmAHwAKQAyAC8AeABgADQAMgAzAGcAcQB4
        AFsAawB5AHsAcgB5AHkAaABfACQAfQAAA3wAAAMxAAAtMAA4ADkAOQA4AG0AOAAgADgAIAAtADgANwAt
        ACAAeQA2ADUAZwBqAG4AIAABMzIAMQAwADkAOAA0ADEANwA0ADUANAA5ADEANQA9ADMANQA4ADIAMwA1
        ADgAMgAzAD0AAA0wADEAMAAxADAAMQAAT2QAawB3AGgAMAAzADIANwA0ADgAMwA1ADgAOABkAGcADQAK
        ACwAZABuAGsAZABuAGQAaQBoADAAOQA3ADgADQAKAHMAYQBkAGEAcwBkAAARVwBtAGkAcAByAHcAcwBk
        AAAJVgBoAHEAdQAAKV4AVgB9AHgAegBsAHUAZQBhAHgAdQB9ACEAJwAkAHUAQAB4AC0AegABAABjTAPM
        uR6sRruVlaHiOUhHAAi3elxWGTTgiQiwP19/EdUKOgMAAAEEAAEODgIGDgMAAAIEAAASCQMgAA4EAAAS
        DQUgAR0FDgUgAQ4dBQgHBQ4dBQgICAYAAwEODhwFAAEBEhkEAAEBCAMGEiEGIAISIQ4CBCAAHQ4DIAAB
        BgADDg4ODgQgAQIODAcHAg4SIR0ODggdDgUgAgEOHAQHARIhBAEAAAAFFRItAQ4FAAAdEjEGAAMIDg4C
        BSABARMACAADET0cEUEcBSABAhMABQACDg4OCAAECA4RRQIIDwcGFRItAQ4OEjEOCB0SMQUgAgEcGAUg
        AQESSQQHARIdBSABARFVBCABAQgEIAEBDgQgAQECCAEAAwAAAAAACAEACAAAAAAAHgEAAQBUAhZXcmFw
        Tm9uRXhjZXB0aW9uVGhyb3dzAQwBAAcxLjAuMC4wAAApAQAkYTJiNTFmYTctM2Q1Zi00ZDI1LTlhMjct
        YzNmYzBlYTg4ZDk5AAAFAQAAAAAzAQAuwqkgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRz
        IHJlc2VydmVkLgAAKQEAJFdpbmRvd3MgQXVkaW8gRGV2aWNlIEdyYXBoIElzb2xhdGlvbgAAAADEMAAA
        AAAAAAAAAADeMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0DAAAAAAAAAAAAAAAABfQ29yRXhlTWFp
        bgBtc2NvcmVlLmRsbAAAAAAA/yUAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8xoxO
        AAAAAAIAAAB0AAAAHEAAABwWAABSU0RT5RCals0mAkirJ9Cna6Vg4QEAAABDOlxVc2Vyc1xBZG1pbmlz
        dHJhdG9yXERvY3VtZW50c1xWaXN1YWwgU3R1ZGlvIDIwMDhcUHJvamVjdHNcUHJldlxQcmV2XG9ialxS
        ZWxlYXNlXFByZXYucGRiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACABAAAAAgAACAGAAAADgAAIAAAAAA
        AAAAAAAAAAAAAAEAAQAAAFAAAIAAAAAAAAAAAAAAAAAAAAEAAQAAAGgAAIAAAAAAAAAAAAAAAAAAAAEA
        CQQAAIAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAJAAAACgYAAAwAMAAAAAAAAAAAAAYGQAAOoBAAAAAAAA
        AAAAAMADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAANAC9BO/+AAABAAEABgBqRLEd
        AQAGAGpEsR0/AAAAAAAAAAQABAABAAAAAAAAAAAAAAAAAAAAIAMAAAAAUwB0AHIAaQBuAGcARgBpAGwA
        ZQBJAG4AZgBvAAAA/AIAAAAAMAA0ADAAOQAwADQAQgAwAAAATAAsAAEAQwBvAG0AcABhAG4AeQBOAGEA
        bQBlAAAAAABNAGkAYwByAG8AcwBvAGYAdAAgAEMAbwByAHAAbwByAGEAdABpAG8AbgAAAHQATAABAEYA
        aQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABXAGkAbgBkAG8AdwBzACAAQQB1AGQAaQBvACAA
        RABlAHYAaQBjAGUAIABHAHIAYQBwAGgAIABJAHMAbwBsAGEAdABpAG8AbgAgAAAAdABSAAEARgBpAGwA
        ZQBWAGUAcgBzAGkAbwBuAAAAAAA2AC4AMQAuADcANgAwADEALgAxADcANQAxADQAIAAoAHcAaQBuADcA
        cwBwADEAXwByAHQAbQAuADEAMAAxADEAMQA5AC0AMQA4ADUAMAApAAAAAAA8ABoAAQBJAG4AdABlAHIA
        bgBhAGwATgBhAG0AZQAAAGEAdQBkAGkAbwBhAGQAZwAuAGUAeABlAAAAAACAAFwAAQBMAGUAZwBhAGwA
        QwBvAHAAeQByAGkAZwBoAHQAAACpACAATQBpAGMAcgBvAHMAbwBmAHQAIABDAG8AcgBwAG8AcgBhAHQA
        aQBvAG4ALgAgAEEAbABsACAAcgBpAGcAaAB0AHMAIAByAGUAcwBlAHIAdgBlAGQALgAAAEQAGgABAE8A
        cgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABhAHUAZABpAG8AYQBkAGcALgBlAHgAZQAAAAAA
        bABKAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABNAGkAYwByAG8AcwBvAGYAdACuACAAVwBpAG4A
        ZABvAHcAcwCuACAATwBwAGUAcgBhAHQAaQBuAGcAIABTAHkAcwB0AGUAbQAAAAAARAAeAAEAUAByAG8A
        ZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAANgAuADEALgA3ADYAMAAxAC4AMQA3ADUAMQA0AAAAAABEAAAA
        AABWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
        CQSwBO+7vzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04IiBzdGFuZGFsb25lPSJ5ZXMi
        Pz4NCjxhc3NlbWJseSB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjEiIG1hbmlm
        ZXN0VmVyc2lvbj0iMS4wIj4NCiAgPGFzc2VtYmx5SWRlbnRpdHkgdmVyc2lvbj0iMS4wLjAuMCIgbmFt
        ZT0iTXlBcHBsaWNhdGlvbi5hcHAiLz4NCiAgPHRydXN0SW5mbyB4bWxucz0idXJuOnNjaGVtYXMtbWlj
        cm9zb2Z0LWNvbTphc20udjIiPg0KICAgIDxzZWN1cml0eT4NCiAgICAgIDxyZXF1ZXN0ZWRQcml2aWxl
        Z2VzIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MyI+DQogICAgICAgIDxyZXF1
        ZXN0ZWRFeGVjdXRpb25MZXZlbCBsZXZlbD0iYXNJbnZva2VyIiB1aUFjY2Vzcz0iZmFsc2UiLz4NCiAg
        ICAgIDwvcmVxdWVzdGVkUHJpdmlsZWdlcz4NCiAgICA8L3NlY3VyaXR5Pg0KICA8L3RydXN0SW5mbz4N
        CjwvYXNzZW1ibHk+DQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAPAwAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAA==
</value>
  </data>
</root>