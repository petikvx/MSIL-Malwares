// Decompiled with JetBrains decompiler
// Type: c.Specifications.TokenComparatorSpec
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Candidates;
using c.Configurations;
using GLuaR.Importers;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace c.Specifications
{
  internal static class TokenComparatorSpec
  {
    [STAThread]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void CustomizeFactory(string[] def)
    {
      int num1 = 6;
      IntPtr config;
      while (true)
      {
        int num2 = num1;
label_27:
        string extension;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_30;
            case 1:
              goto label_29;
            case 2:
              goto label_7;
            case 3:
            case 4:
              FileInfo fileInfo;
              try
              {
                fileInfo = new FileInfo(def[0]);
                int num3 = 3;
                if (TokenComparatorSpec.CollectManager())
                  goto label_21;
label_18:
                bool flag;
                if (flag)
                  num3 = 4;
                else
                  goto label_25;
label_21:
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 3:
                      goto label_20;
                    case 1:
                    case 2:
                      goto label_18;
                    case 4:
                      goto label_1;
                    default:
                      if (true)
                      {
                        num3 = 2;
                        continue;
                      }
                      goto label_23;
                  }
                }
label_20:
                flag = !fileInfo.Exists;
                goto label_18;
label_1:
                return;
label_23:
                return;
              }
              catch
              {
                return;
              }
label_25:
              extension = fileInfo.Extension;
              if (extension == ".lua")
                goto label_8;
              else
                goto case 5;
            case 5:
              if (extension == ".glu")
              {
                Application.Run((Form) new PageIdentifierCandidate(def[0]));
                num2 = 2;
                continue;
              }
              goto label_2;
            case 6:
              goto label_15;
            case 7:
            case 8:
              goto label_13;
            case 9:
              while (!(config != IntPtr.Zero))
              {
                Application.Run((Form) new PageIdentifierCandidate(def[0]));
                if (TokenComparatorSpec.CollectManager())
                {
                  num2 = 8;
                  goto label_27;
                }
              }
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 5;
            case 10:
              goto label_32;
            default:
              if (TokenComparatorSpec.CollectManager())
              {
                num2 = 5;
                continue;
              }
              goto label_29;
          }
        }
label_15:
        Application.EnableVisualStyles();
        num1 = 0;
        continue;
label_29:
        config = ConsumerConfigConfig.CloneFactory("WindowsForms10.Window.8.app.0.378734a", "GLua");
        num1 = 9;
        continue;
label_30:
        Application.SetCompatibleTextRenderingDefault(false);
        ImporterMapper.InitAccount();
        if (def.Length == 0)
        {
          Application.Run((Form) new PageIdentifierCandidate());
          num1 = 10;
        }
        else
          num1 = 1;
      }
label_2:
      return;
label_8:
      ConsumerConfigConfig.SortFactory(config, 1027U, 0U, 0U);
      foreach (uint nextstate in def[0].ToCharArray())
        ConsumerConfigConfig.SortFactory(config, 1025U, nextstate, 0U);
      ConsumerConfigConfig.SortFactory(config, 1026U, 0U, 0U);
      return;
label_13:
      return;
label_7:
      return;
label_32:;
    }

    internal static bool CollectManager() => true;

    internal static bool MoveManager() => false;
  }
}
