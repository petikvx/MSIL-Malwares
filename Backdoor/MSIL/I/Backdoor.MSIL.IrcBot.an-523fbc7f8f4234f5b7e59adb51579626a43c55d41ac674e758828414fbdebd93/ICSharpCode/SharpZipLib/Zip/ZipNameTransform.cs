// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.ZipNameTransform
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Core;
using System;
using System.IO;
using System.Text;

namespace ICSharpCode.SharpZipLib.Zip
{
  public class ZipNameTransform : INameTransform
  {
    private string \uE002;
    private static readonly char[] \uE001;
    private static readonly char[] \uE000;

    public ZipNameTransform()
    {
    }

    public ZipNameTransform(string trimPrefix) => this.TrimPrefix = trimPrefix;

    static ZipNameTransform()
    {
      char[] invalidPathChars = Path.GetInvalidPathChars();
      int length1 = invalidPathChars.Length + 2;
      ZipNameTransform.\uE000 = new char[length1];
      Array.Copy((Array) invalidPathChars, 0, (Array) ZipNameTransform.\uE000, 0, invalidPathChars.Length);
      ZipNameTransform.\uE000[length1 - 1] = '*';
      ZipNameTransform.\uE000[length1 - 2] = '?';
      int length2 = invalidPathChars.Length + 4;
      ZipNameTransform.\uE001 = new char[length2];
      Array.Copy((Array) invalidPathChars, 0, (Array) ZipNameTransform.\uE001, 0, invalidPathChars.Length);
      ZipNameTransform.\uE001[length2 - 1] = ':';
      ZipNameTransform.\uE001[length2 - 2] = '\\';
      ZipNameTransform.\uE001[length2 - 3] = '*';
      ZipNameTransform.\uE001[length2 - 4] = '?';
    }

    public string TransformDirectory(string name)
    {
      name = this.TransformFile(name);
      if (name.Length <= 0)
        throw new ZipException(\uE01B.\uE000("\uF1AE\uF18C\uF183\uF183\uF182\uF199\uF1CD\uF185\uF18C\uF19B\uF188\uF1CD\uF18C\uF183\uF1CD\uF188\uF180\uF19D\uF199\uF194\uF1CD\uF189\uF184\uF19F\uF188\uF18E\uF199\uF182\uF19F\uF194\uF1CD\uF183\uF18C\uF180\uF188", 61933));
      if (!name.EndsWith(\uE01B.\uE000("\uEDB0", 60831)))
        name += \uE01B.\uE000("\uEDB0", 60831);
      return name;
    }

    public string TransformFile(string name)
    {
      switch (name)
      {
        case null:
          name = string.Empty;
          break;
        default:
          string lower = name.ToLower();
          if (this.\uE002 != null && lower.IndexOf(this.\uE002) == 0)
            name = name.Substring(this.\uE002.Length);
          name = name.Replace(\uE01B.\uE000("\uE22F", 57971), \uE01B.\uE000("\uEDB0", 60831));
          name = WindowsPathUtils.DropPathRoot(name);
          while (name.Length > 0 && name[0] == '/')
            name = name.Remove(0, 1);
          while (name.Length > 0 && name[name.Length - 1] == '/')
            name = name.Remove(name.Length - 1, 1);
          for (int startIndex = name.IndexOf(\uE01B.\uE000("\uE1E4\uE1E4", 57803)); startIndex >= 0; startIndex = name.IndexOf(\uE01B.\uE000("\uE1E4\uE1E4", 57803)))
            name = name.Remove(startIndex, 1);
          name = ZipNameTransform.\uE000(name, '_');
          break;
      }
      return name;
    }

    public string TrimPrefix
    {
      get => this.\uE002;
      set
      {
        this.\uE002 = value;
        if (this.\uE002 == null)
          return;
        this.\uE002 = this.\uE002.ToLower();
      }
    }

    private static string \uE000(string _param0, char _param1)
    {
      int index = _param0.IndexOfAny(ZipNameTransform.\uE001);
      if (index >= 0)
      {
        StringBuilder stringBuilder = new StringBuilder(_param0);
        for (; index >= 0; index = index < _param0.Length ? _param0.IndexOfAny(ZipNameTransform.\uE001, index + 1) : -1)
          stringBuilder[index] = _param1;
        _param0 = stringBuilder.ToString();
      }
      return _param0.Length <= (int) ushort.MaxValue ? _param0 : throw new PathTooLongException();
    }

    public static bool IsValidName(string name, bool relaxed)
    {
      bool flag = name != null;
      if (flag)
        flag = !relaxed ? name.IndexOfAny(ZipNameTransform.\uE001) < 0 && name.IndexOf('/') != 0 : name.IndexOfAny(ZipNameTransform.\uE000) < 0;
      return flag;
    }

    public static bool IsValidName(string name)
    {
      int num;
      switch (name)
      {
        case null:
          num = 0;
          break;
        default:
          if (name.IndexOfAny(ZipNameTransform.\uE001) < 0)
          {
            num = name.IndexOf('/') != 0 ? 1 : 0;
            break;
          }
          goto case null;
      }
      return num != 0;
    }
  }
}
