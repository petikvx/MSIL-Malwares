// Decompiled with JetBrains decompiler
// Type: Holo.My.MySettings
// Assembly: Holo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1692AE67-149A-45D4-AB0A-0CA3F19B28FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.btzw-fb43784740363420f3fd853f239a17b4f68de89292e77257010518f48115d3b3.exe

using \u0004;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Holo.My
{
  [CompilerGenerated]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \u0001 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool \u0001;
    private static object \u0001 = RuntimeHelpers.GetObjectValue(new object());

    [DebuggerNonUserCode]
    public MySettings()
    {
    }

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    private static void \u0001(object _param0, EventArgs _param1)
    {
label_0:
      bool mySettingsOnExit;
      if (true)
        mySettingsOnExit = \u0001.Application.SaveMySettingsOnExit;
      do
      {
        if (mySettingsOnExit)
          goto label_7;
label_4:
        continue;
label_7:
        // ISSUE: variable of a compiler-generated type
        MySettings settings = \u0003.\u0003.Settings;
        if (true)
          goto label_8;
label_2:
        if (true)
        {
          if (false)
            continue;
          goto label_4;
        }
        else
          goto label_0;
label_8:
        settings.Save();
        goto label_2;
      }
      while (false);
    }

    public static MySettings Default
    {
      get
      {
        object Expression;
        while (!MySettings.\u0001)
        {
          Expression = MySettings.\u0001;
          if (true)
          {
            ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
            goto label_11;
          }
        }
label_6:
        if (true)
        {
          MySettings mySettings;
          if (true)
            mySettings = MySettings.\u0001;
          return mySettings;
        }
label_11:
        Monitor.Enter(Expression);
        try
        {
          if (!MySettings.\u0001)
          {
            \u0001.Application.Shutdown += (ShutdownEventHandler) ((_param0, _param1) =>
            {
label_0:
              bool mySettingsOnExit;
              if (true)
                mySettingsOnExit = \u0001.Application.SaveMySettingsOnExit;
              do
              {
                if (mySettingsOnExit)
                  goto label_7;
label_4:
                continue;
label_7:
                MySettings settings = \u0003.\u0003.Settings;
                if (true)
                  goto label_8;
label_2:
                if (true)
                {
                  if (false)
                    continue;
                  goto label_4;
                }
                else
                  goto label_0;
label_8:
                settings.Save();
                goto label_2;
              }
              while (false);
            });
            MySettings.\u0001 = true;
          }
          goto label_6;
        }
        finally
        {
          Monitor.Exit(Expression);
        }
      }
    }
  }
}
