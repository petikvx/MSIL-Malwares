// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSTrackBar
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("Scroll")]
  internal class NSTrackBar : Control
  {
    private int _Minimum;
    private int _Maximum;
    private int _Value;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private GraphicsPath GP3;
    private GraphicsPath GP4;
    private Rectangle R1;
    private Rectangle R2;
    private Rectangle R3;
    private int I1;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private Pen P4;
    private LinearGradientBrush GB1;
    private LinearGradientBrush GB2;
    private LinearGradientBrush GB3;
    private bool TrackDown;

    public event NSTrackBar.ScrollEventHandler Scroll;

    public int Minimum
    {
      get => this._Minimum;
      set
      {
        this._Minimum = value >= 0 ? value : throw new Exception("Property value is not valid.");
        if (value > this._Value)
          this._Value = value;
        if (value > this._Maximum)
          this._Maximum = value;
        this.Invalidate();
      }
    }

    public int Maximum
    {
      get => this._Maximum;
      set
      {
        this._Maximum = value >= 0 ? value : throw new Exception("Property value is not valid.");
        if (value < this._Value)
          this._Value = value;
        if (value < this._Minimum)
          this._Minimum = value;
        this.Invalidate();
      }
    }

    public int Value
    {
      get => this._Value;
      set
      {
        if (value == this._Value)
          return;
        if (value > this._Maximum || value < this._Minimum)
          throw new Exception("Property value is not valid.");
        this._Value = value;
        this.Invalidate();
        NSTrackBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
        if (scrollEvent == null)
          return;
        scrollEvent((object) this);
      }
    }

    public NSTrackBar()
    {
      this._Maximum = 10;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.Height = 17;
      this.P1 = new Pen(Color.FromArgb(0, 153, 204), 2f);
      this.P2 = new Pen(Color.FromArgb(55, 55, 55));
      this.P3 = new Pen(Color.FromArgb(24, 24, 24));
      this.P4 = new Pen(Color.FromArgb(65, 65, 65));
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = ThemeModule.CreateRound(0, 5, checked (this.Width - 1), 10, 5);
      this.GP2 = ThemeModule.CreateRound(1, 6, checked (this.Width - 3), 8, 5);
      this.R1 = new Rectangle(0, 7, checked (this.Width - 1), 5);
      this.GB1 = new LinearGradientBrush(this.R1, Color.FromArgb(45, 45, 45), Color.FromArgb(50, 50, 50), 90f);
      this.I1 = checked ((int) Math.Round(unchecked ((double) checked (this._Value - this._Minimum) / (double) checked (this._Maximum - this._Minimum) * (double) checked (this.Width - 11))));
      this.R2 = new Rectangle(this.I1, 0, 10, 20);
      ThemeModule.G.SetClip(this.GP2);
      ThemeModule.G.FillRectangle((Brush) this.GB1, this.R1);
      this.R3 = new Rectangle(1, 7, checked (this.R2.X + this.R2.Width - 2), 8);
      this.GB2 = new LinearGradientBrush(this.R3, Color.FromArgb(51, 181, 229), Color.FromArgb(0, 153, 204), 90f);
      ThemeModule.G.SmoothingMode = SmoothingMode.None;
      ThemeModule.G.FillRectangle((Brush) this.GB2, this.R3);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      int num = checked (this.R3.Width - 15);
      int x1 = 0;
      while (x1 <= num)
      {
        ThemeModule.G.DrawLine(this.P1, x1, 0, checked (x1 + 15), this.Height);
        checked { x1 += 5; }
      }
      ThemeModule.G.ResetClip();
      ThemeModule.G.DrawPath(this.P2, this.GP1);
      ThemeModule.G.DrawPath(this.P3, this.GP2);
      this.GP3 = ThemeModule.CreateRound(this.R2, 5);
      this.GP4 = ThemeModule.CreateRound(checked (this.R2.X + 1), checked (this.R2.Y + 1), checked (this.R2.Width - 2), checked (this.R2.Height - 2), 5);
      this.GB3 = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(60, 60, 60), Color.FromArgb(55, 55, 55), 90f);
      ThemeModule.G.FillPath((Brush) this.GB3, this.GP3);
      ThemeModule.G.DrawPath(this.P3, this.GP3);
      ThemeModule.G.DrawPath(this.P4, this.GP4);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        this.I1 = checked ((int) Math.Round(unchecked ((double) checked (this._Value - this._Minimum) / (double) checked (this._Maximum - this._Minimum) * (double) checked (this.Width - 11))));
        this.R2 = new Rectangle(this.I1, 0, 10, 20);
        this.TrackDown = this.R2.Contains(e.Location);
      }
      base.OnMouseDown(e);
    }

    protected override void OnMouseMove(MouseEventArgs e)
    {
      if (this.TrackDown && e.X > -1 && e.X < checked (this.Width + 1))
        this.Value = checked (this._Minimum + (int) Math.Round(unchecked ((double) checked (this._Maximum - this._Minimum) * (double) e.X / (double) this.Width)));
      base.OnMouseMove(e);
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this.TrackDown = false;
      base.OnMouseUp(e);
    }

    public delegate void ScrollEventHandler(object sender);
  }
}
