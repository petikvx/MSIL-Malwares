// Decompiled with JetBrains decompiler
// Type:  
// Assembly: SafeHeapHandleCa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 86070057-00F7-426E-5B63-54B8EF531843
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-3c09acc9b330846c99b3bdafa1697137c48b9a002919b6c1d671e9224bae9576.exe

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

public class \u0008\u2000 : \u0005\u2000
{
  private \u000F\u2001 \u0002;
  private System.Windows.Forms.Timer \u0003;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private EventHandler<MouseEventArgs> \u0005;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private \u0003\u2000 \u0008;
  private IContainer \u0006;
  protected PictureBox \u000E;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0008\u2000()
  {
    int num1 = 6;
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
        case 5:
          this.\u0003.Interval = 33;
          this.\u0003.Tick += new EventHandler(this.\u0002);
          num1 = 8;
          continue;
        case 1:
          // ISSUE: explicit constructor call
          base.\u002Ector();
          num1 = 4;
          continue;
        case 2:
        case 4:
          this.\u0002();
          this.\u0002 = new \u000F\u2001();
          num1 = 3;
          continue;
        case 3:
          this.RegisterState(new \u0003\u2000());
          goto case 7;
        case 6:
          this.\u0006 = (IContainer) null;
          num2 = 1;
          break;
        case 7:
          this.\u0003 = new System.Windows.Forms.Timer();
          int num3 = 0;
          num1 = \u0008\u2000.\u0003() ? num3 : num3;
          continue;
        case 8:
          this.\u0003.Start();
          num2 = 9;
          break;
        case 9:
          goto label_5;
        default:
          num2 = 7;
          break;
      }
      num1 = num2;
    }
label_5:;
  }

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void CalcState(EventHandler<MouseEventArgs> _param1)
  {
    EventHandler<MouseEventArgs> eventHandler = this.\u0005;
    EventHandler<MouseEventArgs> comparand;
    do
    {
      comparand = eventHandler;
      eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.\u0005, comparand + _param1, comparand);
    }
    while (eventHandler != comparand);
  }

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void GetState(EventHandler<MouseEventArgs> _param1)
  {
    EventHandler<MouseEventArgs> eventHandler = this.\u0005;
    EventHandler<MouseEventArgs> comparand;
    do
    {
      comparand = eventHandler;
      eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.\u0005, comparand - _param1, comparand);
    }
    while (eventHandler != comparand);
  }

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected \u0003\u2000 ReflectState() => this.\u0008;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  protected void RegisterState(\u0003\u2000 _param1) => this.\u0008 = _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002(object _param1, MouseEventArgs _param2)
  {
    int num = 2;
    bool flag;
    while (true)
    {
      switch (num)
      {
        case 0:
        case 2:
          flag = this.\u0005 != null;
          num = 4;
          continue;
        case 1:
        case 4:
          if (!flag)
            goto label_4;
          else
            goto case 3;
        case 3:
          this.\u0005(_param1, _param2);
          num = 5;
          continue;
        case 5:
          goto label_8;
        default:
          if (\u0008\u2000.\u0002())
          {
            num = 3;
            continue;
          }
          goto label_7;
      }
    }
label_4:
    return;
label_8:
    return;
label_7:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002(object _param1, KeyEventArgs _param2) => this.ReflectState().\u0002(_param2.KeyData);

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected Image \u0002(string _param1)
  {
    try
    {
      return Image.FromFile(_param1);
    }
    catch
    {
      int num = (int) MessageBox.Show(\u0002\u2003.\u0002(-1094102366) + _param1);
      return (Image) null;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected virtual void \u0008\u2000\u200A\u2001\u0002(\u000F\u2001 _param1)
  {
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public virtual void \u0008\u2000\u200A\u2001\u0002(\u000E\u2002 _param1)
  {
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void Dispose(bool _param1)
  {
    int num1 = 2;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        int num3;
        switch (num2)
        {
          case 0:
          case 2:
            if (!_param1)
            {
              num3 = 0;
              break;
            }
            goto label_11;
          case 1:
            this.\u0006.Dispose();
            goto case 3;
          case 3:
          case 5:
label_5:
            base.Dispose(_param1);
            num2 = 6;
            continue;
          case 4:
            num3 = this.\u0006 != null ? 1 : 0;
            break;
          case 6:
            goto label_12;
          default:
            goto label_4;
        }
        if (num3 == 0)
          goto label_5;
        else
          goto label_9;
      }
label_4:
      num1 = 5;
      continue;
label_9:
      num1 = 1;
      continue;
label_11:
      num1 = 4;
    }
label_12:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private new void \u0002()
  {
    int num1 = 5;
    while (true)
    {
      int num2;
      ComponentResourceManager componentResourceManager;
      switch (num1)
      {
        case 0:
          this.\u000E.MouseUp += new MouseEventHandler(this.\u0002);
          this.AutoScaleDimensions = new SizeF(8f, 16f);
          goto case 6;
        case 1:
        case 4:
          this.\u000E.TabIndex = 1;
          if (\u0008\u2000.\u0002())
          {
            num1 = 3;
            continue;
          }
          goto case 9;
        case 2:
          ((ISupportInitialize) this.\u000E).EndInit();
          this.ResumeLayout(false);
          num2 = 15;
          break;
        case 3:
          this.\u000E.TabStop = false;
          int num3 = 0;
          num1 = \u0008\u2000.\u0003() ? num3 : num3;
          continue;
        case 5:
          componentResourceManager = new ComponentResourceManager(typeof (\u0008\u2000));
          num2 = 13;
          break;
        case 6:
          this.AutoScaleMode = AutoScaleMode.Font;
          this.ClientSize = new Size(1067, 554);
          this.Controls.Add((Control) this.\u000E);
          this.Icon = (Icon) componentResourceManager.GetObject(\u0002\u2003.\u0002(-1094102284));
          if (\u0008\u2000.\u0002())
          {
            num1 = 8;
            continue;
          }
          goto case 8;
        case 7:
          this.Margin = new Padding(5, 5, 5, 5);
          num1 = 14;
          continue;
        case 8:
          this.KeyPreview = true;
          num2 = 7;
          break;
        case 9:
          ((ISupportInitialize) this.\u000E).BeginInit();
          num2 = 10;
          break;
        case 10:
          this.SuspendLayout();
          this.\u000E.BackColor = Color.White;
          this.\u000E.Location = new Point(16, 15);
          this.\u000E.Margin = new Padding(4, 4, 4, 4);
          this.\u000E.Name = \u0002\u2003.\u0002(-1094102299);
          this.\u000E.Size = new Size(1035, 524);
          num1 = 1;
          continue;
        case 11:
        case 12:
          this.KeyDown += new KeyEventHandler(this.\u0002);
          if (\u0008\u2000.\u0002())
          {
            num1 = 2;
            continue;
          }
          goto case 10;
        case 13:
          this.\u000E = new PictureBox();
          num2 = 9;
          break;
        case 14:
          this.Name = \u0002\u2003.\u0002(-1094102371);
          this.Text = \u0002\u2003.\u0002(-1094102400);
          if (\u0008\u2000.\u0002())
          {
            num1 = 12;
            continue;
          }
          goto case 6;
        case 15:
          goto label_3;
        default:
          if (\u0008\u2000.\u0002())
          {
            num1 = 6;
            continue;
          }
          goto case 1;
      }
      num1 = num2;
    }
label_3:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002(object _param1, EventArgs _param2)
  {
    int num1 = 3;
    \u000E\u2002 obj;
    while (true)
    {
      DateTime now;
      int num2;
      switch (num1)
      {
        case 0:
        case 3:
          now = DateTime.Now;
          int num3 = 7;
          num1 = \u0008\u2000.\u0003() ? num3 : num3;
          continue;
        case 1:
        case 7:
          this.\u0002.LoginState((int) (now - this.\u0002.CalculateState()).TotalMilliseconds);
          num1 = 4;
          continue;
        case 2:
          Application.DoEvents();
          this.\u0008\u2000\u200A\u2001\u0002(this.\u0002);
          goto case 6;
        case 4:
          this.\u0002.CloneState(now);
          num1 = 2;
          continue;
        case 5:
          obj = new \u000E\u2002(this.\u000E.Width, this.\u000E.Height);
          num2 = 8;
          break;
        case 6:
          this.ReflectState().\u0002();
          num1 = 5;
          continue;
        case 8:
          goto label_11;
        default:
          num2 = 6;
          break;
      }
      num1 = num2;
    }
label_11:
    try
    {
      this.\u0008\u2000\u200A\u2001\u0002(obj);
      int num4 = 2;
      while (true)
      {
        switch (num4)
        {
          case 0:
          case 2:
            goto label_12;
          case 1:
            goto label_3;
          case 3:
            goto label_18;
          default:
            num4 = 3;
            continue;
        }
      }
label_12:
      this.\u000E.Image = obj.AssetState();
      return;
label_3:
      return;
label_18:;
    }
    finally
    {
      obj?.Dispose();
    }
  }

  internal new static bool \u0002() => true;

  internal new static bool \u0003() => false;
}
