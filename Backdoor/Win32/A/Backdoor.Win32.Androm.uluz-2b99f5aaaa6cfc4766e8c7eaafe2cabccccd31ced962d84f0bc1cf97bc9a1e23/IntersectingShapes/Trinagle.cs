// Decompiled with JetBrains decompiler
// Type: IntersectingShapes.Trinagle
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

namespace IntersectingShapes
{
  public class Trinagle : Shape
  {
    public Trinagle(int dimension = 2)
      : base()
    {
      this.NoOfSides = 3;
      this.Dimension = dimension;
      this.ShapeName = "Triangle";
      this.Coordinates = new Point[3];
      this.Edges = new Vector[3];
      this.Segments = new Point[3][];
    }

    public override bool IsShapeValid()
    {
      if (this.Coordinates[0].x * (this.Coordinates[1].y - this.Coordinates[2].y) + this.Coordinates[1].x * (this.Coordinates[2].y - this.Coordinates[0].y) + this.Coordinates[2].x * (this.Coordinates[0].y - this.Coordinates[1].y) == 0.0)
        return false;
      this.Edges[0] = new Vector(this.Coordinates[0], this.Coordinates[1]);
      this.Edges[1] = new Vector(this.Coordinates[1], this.Coordinates[2]);
      this.Edges[2] = new Vector(this.Coordinates[2], this.Coordinates[0]);
      this.Segments[0] = new Point[2]
      {
        this.Coordinates[0],
        this.Coordinates[1]
      };
      this.Segments[1] = new Point[2]
      {
        this.Coordinates[1],
        this.Coordinates[2]
      };
      this.Segments[2] = new Point[2]
      {
        this.Coordinates[2],
        this.Coordinates[0]
      };
      return true;
    }
  }
}
