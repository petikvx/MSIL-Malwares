// Decompiled with JetBrains decompiler
// Type: TagMp3Saito.MusicLoader
// Assembly: ManualResetEv, Version=0.7.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 555BB952-8DEA-4CDE-87A4-0E642B4B65E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-1e9b14262f935e7f822b39afe45842ceac9c584e70a3b520d8f391d975d600ee.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace TagMp3Saito
{
  public class MusicLoader
  {
    private readonly MusicList musics = new MusicList();
    private List<string> _paths;

    public event MusicLoader.LoadingMusicNumber_Delegate LoadingMusicNumber;

    public List<string> Sources { get; set; }

    public MusicLoader() => this.Sources = new List<string>();

    public string[] LoadPaths()
    {
      this._paths = new List<string>();
      foreach (string source in this.Sources)
      {
        if (File.Exists(source))
        {
          string extension = new FileInfo(source).Extension;
          if (!(extension == ".mp3"))
          {
            if (extension == ".m3u")
              this._paths.AddRange((IEnumerable<string>) M3uPathExtractor.ExtractPaths(source));
          }
          else
            this._paths.Add(source);
        }
        else if (Directory.Exists(source))
        {
          foreach (string str in MusicLoader.SearchRecursive(source, "*.mp3"))
            this._paths.Add(str);
        }
      }
      return this._paths.ToArray();
    }

    public void Clear()
    {
      this.musics.Clear();
      this.Sources.Clear();
    }

    private static IEnumerable<string> SearchRecursive(string root, string searchPattern)
    {
      Queue<string> dirs = new Queue<string>();
      dirs.Enqueue(root);
      while (dirs.Count > 0)
      {
        string dir = dirs.Dequeue();
        string[] paths = (string[]) null;
        try
        {
          paths = Directory.GetFiles(dir, searchPattern);
        }
        catch
        {
        }
        if (paths != null && paths.Length != 0)
        {
          string[] strArray = paths;
          for (int index = 0; index < strArray.Length; ++index)
          {
            string file = strArray[index];
            yield return file;
            file = (string) null;
          }
          strArray = (string[]) null;
        }
        paths = (string[]) null;
        try
        {
          paths = Directory.GetDirectories(dir);
        }
        catch
        {
        }
        if (paths != null && paths.Length != 0)
        {
          string[] strArray = paths;
          for (int index = 0; index < strArray.Length; ++index)
          {
            string subDir = strArray[index];
            dirs.Enqueue(subDir);
            subDir = (string) null;
          }
          strArray = (string[]) null;
        }
        dir = (string) null;
        paths = (string[]) null;
      }
    }

    public MusicList GetMusicList()
    {
      int num = 0;
      foreach (string path1 in this._paths)
      {
        string path = path1;
        if (this.LoadingMusicNumber != null)
          this.LoadingMusicNumber(num++);
        if (!this.musics.Exists((Predicate<MusicFile>) (m => m.FullPath == path)))
          this.musics.Add(new MusicFile(path, MusicCsv.GetSelectedMp3FieldsFromJSON()));
      }
      return this.musics;
    }

    public delegate void LoadingMusicNumber_Delegate(int actual);
  }
}
