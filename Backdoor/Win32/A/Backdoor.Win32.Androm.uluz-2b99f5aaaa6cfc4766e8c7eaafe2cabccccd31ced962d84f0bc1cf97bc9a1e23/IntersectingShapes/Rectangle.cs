// Decompiled with JetBrains decompiler
// Type: IntersectingShapes.Rectangle
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System.Collections.Generic;

namespace IntersectingShapes
{
  public class Rectangle : Shape
  {
    public Rectangle(int dimension = 2)
      : base()
    {
      this.NoOfSides = 4;
      this.Dimension = dimension;
      this.ShapeName = nameof (Rectangle);
      this.Coordinates = new Point[4];
      this.Edges = new Vector[4];
      this.Segments = new Point[4][];
    }

    public override bool IsShapeValid()
    {
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          if (index1 != index2 && this.Coordinates[index1].x == this.Coordinates[index2].x && this.Coordinates[index1].y == this.Coordinates[index2].y)
            return false;
        }
      }
      Dictionary<double, bool> dictionary = new Dictionary<double, bool>();
      for (int index3 = 0; index3 < this.Coordinates.Length; ++index3)
      {
        for (int index4 = 0; index4 < this.Coordinates.Length; ++index4)
        {
          if (index3 != index4)
            dictionary[this.Coordinates[index3].GetDistanceSquare(this.Coordinates[index4])] = true;
        }
      }
      if (dictionary.Keys.Count > 3 || dictionary.Keys.Count < 2)
        return false;
      if (this.IsOrderedRectangle(this.Coordinates[0], this.Coordinates[1], this.Coordinates[2], this.Coordinates[3]))
      {
        this.Edges[0] = new Vector(this.Coordinates[0], this.Coordinates[1]);
        this.Edges[1] = new Vector(this.Coordinates[1], this.Coordinates[2]);
        this.Edges[2] = new Vector(this.Coordinates[2], this.Coordinates[3]);
        this.Edges[3] = new Vector(this.Coordinates[3], this.Coordinates[0]);
        this.Segments[0] = new Point[2]
        {
          this.Coordinates[0],
          this.Coordinates[1]
        };
        this.Segments[1] = new Point[2]
        {
          this.Coordinates[1],
          this.Coordinates[2]
        };
        this.Segments[2] = new Point[2]
        {
          this.Coordinates[2],
          this.Coordinates[3]
        };
        this.Segments[3] = new Point[2]
        {
          this.Coordinates[3],
          this.Coordinates[0]
        };
        return true;
      }
      if (this.IsOrderedRectangle(this.Coordinates[2], this.Coordinates[1], this.Coordinates[3], this.Coordinates[0]))
      {
        this.Edges[0] = new Vector(this.Coordinates[2], this.Coordinates[1]);
        this.Edges[1] = new Vector(this.Coordinates[1], this.Coordinates[3]);
        this.Edges[2] = new Vector(this.Coordinates[3], this.Coordinates[0]);
        this.Edges[3] = new Vector(this.Coordinates[0], this.Coordinates[2]);
        this.Segments[0] = new Point[2]
        {
          this.Coordinates[2],
          this.Coordinates[1]
        };
        this.Segments[1] = new Point[2]
        {
          this.Coordinates[1],
          this.Coordinates[3]
        };
        this.Segments[2] = new Point[2]
        {
          this.Coordinates[3],
          this.Coordinates[0]
        };
        this.Segments[3] = new Point[2]
        {
          this.Coordinates[0],
          this.Coordinates[2]
        };
        return true;
      }
      if (!this.IsOrderedRectangle(this.Coordinates[0], this.Coordinates[1], this.Coordinates[3], this.Coordinates[2]))
        return false;
      this.Edges[0] = new Vector(this.Coordinates[0], this.Coordinates[1]);
      this.Edges[1] = new Vector(this.Coordinates[1], this.Coordinates[3]);
      this.Edges[2] = new Vector(this.Coordinates[3], this.Coordinates[2]);
      this.Edges[3] = new Vector(this.Coordinates[2], this.Coordinates[0]);
      this.Segments[0] = new Point[2]
      {
        this.Coordinates[0],
        this.Coordinates[1]
      };
      this.Segments[1] = new Point[2]
      {
        this.Coordinates[1],
        this.Coordinates[3]
      };
      this.Segments[2] = new Point[2]
      {
        this.Coordinates[3],
        this.Coordinates[2]
      };
      this.Segments[3] = new Point[2]
      {
        this.Coordinates[2],
        this.Coordinates[0]
      };
      return true;
    }

    private bool IsOrderedRectangle(Point a, Point b, Point c, Point d)
    {
      List<Point> pointList = new List<Point>()
      {
        a,
        b,
        c,
        d
      };
      double distanceSquare1 = pointList[0].GetDistanceSquare(pointList[1]);
      double distanceSquare2 = pointList[1].GetDistanceSquare(pointList[2]);
      return pointList[0].GetDistanceSquare(pointList[2]) == distanceSquare1 + distanceSquare2;
    }
  }
}
