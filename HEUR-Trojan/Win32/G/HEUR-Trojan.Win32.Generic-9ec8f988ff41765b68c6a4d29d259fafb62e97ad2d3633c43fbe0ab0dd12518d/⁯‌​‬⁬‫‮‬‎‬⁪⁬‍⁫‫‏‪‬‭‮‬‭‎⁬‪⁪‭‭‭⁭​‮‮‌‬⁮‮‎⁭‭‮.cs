// Decompiled with JetBrains decompiler
// Type: ⁯‌​‬⁬‫‮‬‎‬⁪⁬‍⁫‫‏‪‬‭‮‬‭‎⁬‪⁪‭‭‭⁭​‮‮‌‬⁮‮‎⁭‭‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections;
using System.Text;

public abstract class \u206F‌​‬⁬‫‮‬‎‬⁪⁬‍⁫‫‏‪‬‭‮‬‭‎⁬‪⁪‭‭‭⁭​‮‮‌‬⁮‮‎⁭‭‮
{
  public static void \u202E‫‍⁯‍‍‌‎⁪⁪‫⁫⁭‬‫⁭⁭⁯⁯⁪⁫⁭‌⁪​‏‮⁯‫‌⁯⁮⁫⁬⁯​‏‍⁪⁯‮(
    IList _param0,
    IEnumerable _param1)
  {
    foreach (object obj in _param1)
      _param0.Add(obj);
  }

  public static bool \u206E⁭⁪⁮⁫⁪‍‫‬⁯⁯‎⁪‮⁭‍‫‌⁮⁪⁭‏‮⁫‪⁬‏⁫‪⁪‭‏⁫‌⁯⁯⁫‪⁬‪‮(
    IEnumerable _param0,
    Type _param1)
  {
    foreach (object o in _param0)
    {
      if (!_param1.IsInstanceOfType(o))
        return false;
    }
    return true;
  }

  public static IDictionary \u202A​‍⁭‫‮‭⁬⁪​‭‭⁯⁯​‭⁫‬‏‍⁯‎‎‌‍‏‫⁫⁮⁫‎‍⁪‮⁯‭⁪⁫‏‍‮(
    IDictionary _param0)
  {
    return (IDictionary) new \u202D⁮⁬‮‬‌‪‮‎‮‮‌‮⁮‌⁯‮‫​‬⁫‏‍‌‭‎⁭‌⁪‌⁫‍‭⁪⁯‍⁭‌⁭‭‮(_param0);
  }

  public static IList \u202A​‍⁭‫‮‭⁬⁪​‭‭⁯⁯​‭⁫‬‏‍⁯‎‎‌‍‏‫⁫⁮⁫‎‍⁪‮⁯‭⁪⁫‏‍‮(IList _param0) => (IList) new \u202B​⁮​⁯⁪⁮⁭‭⁪‌⁪⁬⁭‮‎‮‮⁬‍‫‏​‭‎‏⁫⁭⁭‌⁭‭‍‌⁯⁮⁭‌⁭⁫‮(_param0);

  public static \u206D‬⁯‮‏‌⁪‬⁪⁫⁫‪⁯‫‎​⁮‍⁯⁪⁪‪‬‫⁬‭⁯‫‎⁭‫‪⁯⁪⁯‍‬‬⁮‭‮ \u202A​‍⁭‫‮‭⁬⁪​‭‭⁯⁯​‭⁫‬‏‍⁯‎‎‌‍‏‫⁫⁮⁫‎‍⁪‮⁯‭⁪⁫‏‍‮(
    \u206D‬⁯‮‏‌⁪‬⁪⁫⁫‪⁯‫‎​⁮‍⁯⁪⁪‪‬‫⁬‭⁯‫‎⁭‫‪⁯⁪⁯‍‬‬⁮‭‮ _param0)
  {
    return (\u206D‬⁯‮‏‌⁪‬⁪⁫⁫‪⁯‫‎​⁮‍⁯⁪⁪‪‬‫⁬‭⁯‫‎⁭‫‪⁯⁪⁯‍‬‬⁮‭‮) new \u206B⁮‫‏⁬‬⁫​‍⁪‭⁯‌‮‮⁫⁪​‮⁪⁫⁭⁪⁪‎‭​‍‪‬⁪⁫‬‎‬⁬⁭‏⁪⁭‮(_param0);
  }

  public static object \u206A‮⁪‏‮‏⁭‌‎‭​‎​⁬‍‏‪⁯⁮⁯‍‌‮⁯‮‮‬‎‌‍‫‏‬​‫‫‎‫‌‬‮(IEnumerator _param0) => _param0.MoveNext() ? _param0.Current : throw new InvalidOperationException();

  public static string \u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮(IEnumerable _param0)
  {
    IEnumerator enumerator = _param0.GetEnumerator();
    if (!enumerator.MoveNext())
      return "[]";
    StringBuilder stringBuilder = new StringBuilder("[");
    stringBuilder.Append(enumerator.Current.ToString());
    while (enumerator.MoveNext())
    {
      stringBuilder.Append(", ");
      stringBuilder.Append(enumerator.Current.ToString());
    }
    stringBuilder.Append(']');
    return stringBuilder.ToString();
  }
}
