// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportingService2
// Assembly: SEX2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=a5787988e1da7ee4
// MVID: 027F678B-7D46-4866-9354-BA5F76CF2B30
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.asdg-51ed8d1a92fbb8f059c9595d28994dd3b17eb92e.exe

using \u0001;
using System;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [WebServiceBinding(Name = "ReportingServiceSoap", Namespace = "http://www.smartassembly.com/webservices/Reporting/")]
  internal sealed class ReportingService2 : SoapHttpClientProtocol
  {
    [NonSerialized]
    internal static \u0002 \u0001;

    static ReportingService2() => \u0004.\u0002(typeof (ReportingService2));

    public ReportingService2(string serverURL)
    {
      try
      {
        \u0084\u0005.\u009D\u000F((object) this, \u008B\u0003.\u009F(serverURL, ReportingService2.\u0001(1469)));
        \u009B\u0005.\u009E\u000F((object) this, 180000);
      }
      catch (Exception ex)
      {
        string str = serverURL;
        \u0008.\u0008.\u0002(ex, (object) this, (object) str);
        throw;
      }
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/Reporting/UploadReport2")]
    public string UploadReport2(
      string licenseID,
      [XmlElement(DataType = "base64Binary")] byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber)
    {
      object[] objArray1;
      try
      {
        string methodName = ReportingService2.\u0001(1490);
        object[] objArray2 = new object[5];
        if (true)
          objArray1 = objArray2;
        objArray1[0] = (object) licenseID;
        objArray1[1] = (object) data;
        objArray1[2] = (object) email;
        objArray1[3] = (object) appFriendlyName;
        objArray1[4] = (object) buildFriendlyNumber;
        object[] parameters = objArray1;
        return (string) this.Invoke(methodName, parameters)[0];
      }
      catch (Exception ex)
      {
        object[] objArray3 = objArray1;
        string str1 = licenseID;
        byte[] numArray = data;
        string str2 = email;
        string str3 = appFriendlyName;
        string str4 = buildFriendlyNumber;
        \u0008.\u0008.\u0002(ex, (object) objArray3, (object) this, (object) str1, (object) numArray, (object) str2, (object) str3, (object) str4);
        throw;
      }
    }
  }
}
