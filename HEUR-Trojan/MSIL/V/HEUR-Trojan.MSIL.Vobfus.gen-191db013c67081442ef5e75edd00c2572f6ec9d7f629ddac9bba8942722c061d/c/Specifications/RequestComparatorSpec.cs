// Decompiled with JetBrains decompiler
// Type: c.Specifications.RequestComparatorSpec
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Filter;
using Fireball.Docking;
using GLuaR.Importers;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace c.Specifications
{
  public class RequestComparatorSpec : DockableWindow
  {
    private InterceptorThreadFilter m_GetterWrapper;
    private IContainer m_PredicateWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public RequestComparatorSpec(InterceptorThreadFilter ident)
    {
      int num1 = 5;
      if (true)
        goto label_6;
label_1:
      ImporterMapper.InitAccount();
      int num2 = 3;
      num1 = RequestComparatorSpec.PrintRegistry() ? num2 : num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            goto label_1;
          case 1:
          case 3:
            this.m_PredicateWrapper = (IContainer) null;
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num1 = 4;
            continue;
          case 2:
            this.m_GetterWrapper = ident;
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 1;
          case 4:
            this.ValidateRule();
            goto case 2;
          case 6:
            goto label_2;
          default:
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto label_8;
        }
      }
label_2:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitRule(object info, EventArgs token)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void Dispose(bool requiressetup)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (requiressetup)
              {
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_12;
              }
              else
                goto label_4;
            case 1:
            case 3:
              goto label_3;
            case 2:
            case 4:
              goto label_1;
            case 5:
              goto label_13;
            default:
              goto label_9;
          }
        }
label_1:
label_2:
        // ISSUE: explicit non-virtual call
        __nonvirtual (((Form) this).Dispose(requiressetup));
        num1 = 5;
        continue;
label_3:
        int num3 = this.m_PredicateWrapper != null ? 1 : 0;
        goto label_5;
label_4:
        num3 = 0;
label_5:
        if (num3 != 0)
        {
          this.m_PredicateWrapper.Dispose();
          goto label_1;
        }
        else
          goto label_2;
label_9:
        num1 = 4;
      }
label_13:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ValidateRule()
    {
      int num1 = 2;
      if (true)
        goto label_6;
label_1:
      ((Control) this).SuspendLayout();
      num1 = 6;
label_6:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            ((ContainerControl) this).AutoScaleMode = AutoScaleMode.Font;
            goto case 1;
          case 1:
          case 3:
            ((Form) this).ClientSize = new Size(570, 180);
            ((Form) this).FormBorderStyle = FormBorderStyle.FixedToolWindow;
            ((Form) this).HelpButton = true;
            num2 = 5;
            break;
          case 2:
            goto label_1;
          case 4:
          case 5:
            this.HideOnClose = true;
            ((Control) this).Name = "OutputWindow";
            this.TabText = "Output";
            ((Control) this).Text = "Output";
            ((Form) this).Load += new EventHandler(this.InitRule);
            ((Control) this).ResumeLayout(false);
            num2 = 7;
            break;
          case 6:
            ((ContainerControl) this).AutoScaleDimensions = new SizeF(6f, 13f);
            num1 = 0;
            continue;
          case 7:
            goto label_9;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_9:;
    }

    internal static bool InvokeRegistry() => true;

    internal static bool PrintRegistry() => false;
  }
}
