// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Channels.StreamBodyWriter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.IO;
using System.Runtime.InteropServices;
using System.Xml;

namespace System.ServiceModel.Channels
{
  [ComVisible(false)]
  public abstract class StreamBodyWriter : BodyWriter
  {
    private readonly bool isQuirkedTo40Behavior;

    protected StreamBodyWriter(bool isBuffered)
      : this(isBuffered, !OSEnvironmentHelper.IsApplicationTargeting45)
    {
    }

    internal StreamBodyWriter(bool isBuffered, bool isQuirkedTo40Behavior)
      : base(isBuffered)
    {
      this.isQuirkedTo40Behavior = isQuirkedTo40Behavior;
    }

    internal static StreamBodyWriter CreateStreamBodyWriter(
      Action<Stream> streamAction)
    {
      return streamAction != null ? (StreamBodyWriter) new StreamBodyWriter.ActionOfStreamBodyWriter(streamAction) : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("actionOfStream");
    }

    protected abstract void OnWriteBodyContents(Stream stream);

    protected override BodyWriter OnCreateBufferedCopy(int maxBufferSize)
    {
      using (BufferManagerOutputStream managerOutputStream = new BufferManagerOutputStream(SR2.MaxReceivedMessageSizeExceeded, maxBufferSize))
      {
        this.OnWriteBodyContents((Stream) managerOutputStream);
        int bufferSize;
        return (BodyWriter) new StreamBodyWriter.BufferedBytesStreamBodyWriter(managerOutputStream.ToArray(out bufferSize), bufferSize);
      }
    }

    protected override void OnWriteBodyContents(XmlDictionaryWriter writer)
    {
      using (StreamBodyWriter.XmlWriterBackedStream writerBackedStream = new StreamBodyWriter.XmlWriterBackedStream((XmlWriter) writer, this.isQuirkedTo40Behavior))
        this.OnWriteBodyContents((Stream) writerBackedStream);
    }

    private class XmlWriterBackedStream : Stream
    {
      private const string StreamElementName = "Binary";
      private readonly bool isQuirkedTo40Behavior;
      private XmlWriter writer;

      public XmlWriterBackedStream(XmlWriter writer, bool isQuirkedTo40Behavior)
      {
        this.writer = writer != null ? writer : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (writer));
        this.isQuirkedTo40Behavior = isQuirkedTo40Behavior;
      }

      public override bool CanRead => false;

      public override bool CanSeek => false;

      public override bool CanWrite => true;

      public override void Flush() => this.writer.Flush();

      public override long Length => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamPropertyGetNotSupported, (object) nameof (Length))));

      public override long Position
      {
        get => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamPropertyGetNotSupported, (object) nameof (Position))));
        set => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamPropertySetNotSupported, (object) nameof (Position))));
      }

      public override int Read(byte[] buffer, int offset, int count) => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamMethodNotSupported, (object) nameof (Read))));

      public override IAsyncResult BeginRead(
        byte[] buffer,
        int offset,
        int count,
        AsyncCallback callback,
        object state)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamMethodNotSupported, (object) nameof (BeginRead))));
      }

      public override int EndRead(IAsyncResult asyncResult) => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamMethodNotSupported, (object) nameof (EndRead))));

      public override int ReadByte() => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamMethodNotSupported, (object) nameof (ReadByte))));

      public override long Seek(long offset, SeekOrigin origin) => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamMethodNotSupported, (object) nameof (Seek))));

      public override void SetLength(long value) => throw DiagnosticUtility.ExceptionUtility.ThrowHelperWarning((Exception) new InvalidOperationException(SR2.GetString(SR2.XmlWriterBackedStreamMethodNotSupported, (object) nameof (SetLength))));

      public override void Write(byte[] buffer, int offset, int count)
      {
        if (this.writer.WriteState == WriteState.Content || this.isQuirkedTo40Behavior)
        {
          this.writer.WriteBase64(buffer, offset, count);
        }
        else
        {
          if (this.writer.WriteState != WriteState.Start)
            return;
          this.writer.WriteStartElement("Binary", string.Empty);
          this.writer.WriteBase64(buffer, offset, count);
        }
      }
    }

    private class BufferedBytesStreamBodyWriter : StreamBodyWriter
    {
      private byte[] array;
      private int size;

      public BufferedBytesStreamBodyWriter(byte[] array, int size)
        : base(true, false)
      {
        this.array = array;
        this.size = size;
      }

      protected override void OnWriteBodyContents(Stream stream) => stream.Write(this.array, 0, this.size);
    }

    private class ActionOfStreamBodyWriter : StreamBodyWriter
    {
      private Action<Stream> actionOfStream;

      public ActionOfStreamBodyWriter(Action<Stream> actionOfStream)
        : base(false, false)
      {
        this.actionOfStream = actionOfStream;
      }

      protected override void OnWriteBodyContents(Stream stream) => this.actionOfStream(stream);
    }
  }
}
