// Decompiled with JetBrains decompiler
// Type: ProjNet.Definitions.Item
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using System;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;

namespace ProjNet.Definitions
{
  internal class Item : RequestConsumerAdapter
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Item(TextReader var1)
    {
      int num1 = 1;
      if (true)
        goto label_3;
label_1:
      // ISSUE: explicit constructor call
      base.\u002Ector(var1, true);
      goto label_6;
label_3:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            ManagerParamsID.NewExpression();
            num2 = 3;
            break;
          case 2:
          case 4:
            goto label_6;
          case 3:
            goto label_1;
          case 5:
            goto label_8;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_6:
      if (var1 != null)
        return;
      if (Item.SortDispatcher())
      {
        num1 = 5;
        goto label_3;
      }
label_8:
      throw new ArgumentNullException("reader");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void RemoveObject(string config)
    {
      int num1 = 4;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            int num3 = (int) this.ReadObject();
            num2 = 3;
            break;
          case 1:
          case 3:
            flag = this.CalculateObject() != config;
            goto case 2;
          case 2:
            if (flag)
            {
              num2 = 5;
              break;
            }
            goto label_9;
          case 5:
            goto label_8;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_9:
      return;
label_8:
      throw new ArgumentException(string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "Expecting ('{3}') but got a '{0}' at line {1} column {2}.", (object) this.CalculateObject(), (object) this.MoveObject(), (object) this.ConcatObject(), (object) config));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string UpdateObject()
    {
      int num1 = 5;
      string str1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_9;
            case 1:
            case 2:
              this.RemoveObject("\"");
              if (Item.SortDispatcher())
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 4:
              goto label_3;
            case 5:
              goto label_2;
            case 6:
              goto label_11;
            default:
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_9;
          }
        }
label_2:
        string str2 = "";
        num1 = 2;
        continue;
label_3:
        int num3 = (int) this.InvokeObject(false);
label_5:
        bool flag = this.CalculateObject() != "\"";
label_9:
        if (flag)
        {
          str2 += this.CalculateObject();
          int num4 = (int) this.InvokeObject(false);
          goto label_5;
        }
        else
        {
          str1 = str2;
          num1 = 6;
        }
      }
label_11:
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalcObject(ref string instance, ref long vis)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_9;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_2;
            case 5:
              if (flag)
                this.RemoveObject("AUTHORITY");
              this.RemoveObject("[");
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_9;
            case 6:
              goto label_10;
            default:
              num2 = 1;
              continue;
          }
        }
label_1:
        this.RemoveObject("]");
        num1 = 6;
        continue;
label_2:
        instance = this.UpdateObject();
        this.RemoveObject(",");
        long.TryParse(this.UpdateObject(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out vis);
        goto label_1;
label_9:
        flag = this.CalculateObject() != "AUTHORITY";
        num1 = 5;
      }
label_10:;
    }

    internal static bool SortDispatcher() => true;

    internal static bool ExcludeDispatcher() => false;
  }
}
