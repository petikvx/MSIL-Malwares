// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 1, Version=8.93.47.49, Culture=neutral, PublicKeyToken=null
// MVID: DFA8ED2E-5616-44FF-892B-A77949B35FF3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Foreign.mxlc-0e45041763d0a87cf14d630d0ef61ca2fbfdc37f1c8a9944dd0c3cfd1cf0aa8a.exe

using \u0006;
using \u000E;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u000E
{
  internal class \u0003
  {
    private static readonly string \u0001;
    private static readonly string \u0002;
    private static readonly byte[] \u0001;
    private static readonly Hashtable \u0001;
    private static readonly bool \u0001;
    private static readonly int \u0001;

    public static string \u0001([In] int obj0)
    {
      int index;
      int num1;
      int count;
      string str1;
      byte[] bytes;
      string str2;
      string str3;
      string str4;
      try
      {
        obj0 -= \u0003.\u0001;
        if (\u0003.\u0001)
          str4 = (string) \u0003.\u0001[(object) obj0];
        else
          goto label_3;
label_2:
        if (true)
        {
          switch (str4)
          {
            case null:
              break;
            default:
              str1 = str4;
              goto label_25;
          }
        }
        else
          goto label_6;
label_3:
        if (true)
        {
          if (true)
          {
            count = 0;
            index = obj0;
            num1 = (int) \u0003.\u0001[index++];
          }
          else
            goto label_25;
        }
        else
          goto label_7;
label_6:
        if ((num1 & 128) != 0)
        {
          if ((num1 & 64) == 0)
          {
            count = ((num1 & 63) << 8) + (int) \u0003.\u0001[index++];
            goto label_15;
          }
          else
          {
            int num2 = num1 & 31;
            int num3;
            while (true)
            {
              num3 = (num2 << 24) + ((int) \u0003.\u0001[index++] << 16) + ((int) \u0003.\u0001[index++] << 8);
              if (false)
                num2 = num3;
              else
                break;
            }
            int num4 = (int) \u0003.\u0001[index++];
            count = num3 + num4;
            goto label_15;
          }
        }
label_7:
        count = num1;
        if (count == 0)
        {
          str1 = string.Empty;
          goto label_25;
        }
label_15:
        try
        {
          bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0003.\u0001, index, count));
          str2 = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
          if (\u0003.\u0001)
          {
            try
            {
              \u0003.\u0001.Add((object) obj0, (object) str2);
            }
            catch
            {
            }
          }
          str3 = str2;
        }
        catch
        {
          str3 = (string) null;
        }
        if (true)
          str1 = str3;
        else
          goto label_2;
      }
      catch (Exception ex)
      {
        string str5 = str4;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) count;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) index;
        // ISSUE: variable of a boxed type
        __Boxed<int> local3 = (ValueType) num1;
        byte[] numArray = bytes;
        string str6 = str2;
        string str7 = str3;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) obj0;
        \u0007.\u0001(ex, (object) str5, (object) local1, (object) local2, (object) local3, (object) numArray, (object) str6, (object) str7, (object) local4);
        throw;
      }
label_25:
      return str1;
    }

    static \u0003()
    {
      int int32;
      byte[] buffer;
      Stream manifestResourceStream;
      Assembly executingAssembly;
      try
      {
        \u0003.\u0001 = "0";
        \u0003.\u0002 = "13";
        \u0003.\u0001 = (byte[]) null;
        if (true)
        {
          if (true)
            \u0003.\u0001 = (Hashtable) null;
          \u0003.\u0001 = false;
        }
        else
          goto label_6;
label_4:
        if (true)
          \u0003.\u0001 = 0;
        else
          goto label_16;
label_6:
        if (\u0003.\u0001 == "1")
        {
          \u0003.\u0001 = true;
          goto label_16;
        }
label_8:
        \u0003.\u0001 = Convert.ToInt32(\u0003.\u0002);
        executingAssembly = Assembly.GetExecutingAssembly();
        if (true)
          goto label_17;
label_14:
        if (true)
          return;
        goto label_4;
label_17:
        manifestResourceStream = executingAssembly.GetManifestResourceStream("{2035b807-a1b1-4d4e-beb3-cce61bd76ee2}");
        try
        {
          int32 = Convert.ToInt32(manifestResourceStream.Length);
          buffer = new byte[int32];
          manifestResourceStream.Read(buffer, 0, int32);
          \u0003.\u0001 = \u0007.\u0001(buffer);
          do
          {
            buffer = (byte[]) null;
            manifestResourceStream.Close();
          }
          while (false);
          goto label_14;
        }
        finally
        {
          manifestResourceStream?.Dispose();
        }
label_16:
        \u0003.\u0001 = new Hashtable();
        goto label_8;
      }
      catch (Exception ex)
      {
        Assembly assembly = executingAssembly;
        Stream stream = manifestResourceStream;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) int32;
        byte[] numArray = buffer;
        \u0007.\u0001(ex, (object) assembly, (object) stream, (object) local, (object) numArray);
        throw;
      }
    }
  }
}
