// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Configuration.WebHttpBindingElement
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.ComponentModel;
using System.Configuration;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Configuration
{
  [ComVisible(false)]
  public class WebHttpBindingElement : StandardBindingElement
  {
    private static readonly System.Type WebContentTypeMapperType = typeof (WebContentTypeMapper);
    private ConfigurationPropertyCollection properties;

    public WebHttpBindingElement(string name)
      : base(name)
    {
    }

    public WebHttpBindingElement()
      : this((string) null)
    {
    }

    [ConfigurationProperty("allowCookies", DefaultValue = false)]
    public bool AllowCookies
    {
      get => (bool) this["allowCookies"];
      set => this["allowCookies"] = (object) value;
    }

    [ConfigurationProperty("bypassProxyOnLocal", DefaultValue = false)]
    public bool BypassProxyOnLocal
    {
      get => (bool) this["bypassProxyOnLocal"];
      set => this["bypassProxyOnLocal"] = (object) value;
    }

    [ConfigurationProperty("hostNameComparisonMode", DefaultValue = HostNameComparisonMode.StrongWildcard)]
    [ServiceModelEnumValidator(typeof (HostNameComparisonModeHelper))]
    public HostNameComparisonMode HostNameComparisonMode
    {
      get => (HostNameComparisonMode) this["hostNameComparisonMode"];
      set => this["hostNameComparisonMode"] = (object) value;
    }

    [ConfigurationProperty("maxBufferPoolSize", DefaultValue = 524288)]
    [LongValidator(MinValue = 0)]
    public long MaxBufferPoolSize
    {
      get => (long) this["maxBufferPoolSize"];
      set => this["maxBufferPoolSize"] = (object) value;
    }

    [ConfigurationProperty("maxBufferSize", DefaultValue = 65536)]
    [IntegerValidator(MinValue = 1)]
    public int MaxBufferSize
    {
      get => (int) this["maxBufferSize"];
      set => this["maxBufferSize"] = (object) value;
    }

    [ConfigurationProperty("maxReceivedMessageSize", DefaultValue = 65536)]
    [LongValidator(MinValue = 1)]
    public long MaxReceivedMessageSize
    {
      get => (long) this["maxReceivedMessageSize"];
      set => this["maxReceivedMessageSize"] = (object) value;
    }

    [ConfigurationProperty("proxyAddress", DefaultValue = null)]
    public Uri ProxyAddress
    {
      get => (Uri) this["proxyAddress"];
      set => this["proxyAddress"] = (object) value;
    }

    [ConfigurationProperty("readerQuotas")]
    public XmlDictionaryReaderQuotasElement ReaderQuotas => (XmlDictionaryReaderQuotasElement) this["readerQuotas"];

    [ConfigurationProperty("security")]
    public WebHttpSecurityElement Security => (WebHttpSecurityElement) this["security"];

    [ConfigurationProperty("transferMode", DefaultValue = TransferMode.Buffered)]
    [ServiceModelEnumValidator(typeof (TransferModeHelper))]
    public TransferMode TransferMode
    {
      get => (TransferMode) this["transferMode"];
      set => this["transferMode"] = (object) value;
    }

    [ConfigurationProperty("useDefaultWebProxy", DefaultValue = true)]
    public bool UseDefaultWebProxy
    {
      get => (bool) this["useDefaultWebProxy"];
      set => this["useDefaultWebProxy"] = (object) value;
    }

    [ConfigurationProperty("writeEncoding", DefaultValue = "utf-8")]
    [TypeConverter(typeof (EncodingConverter))]
    [WebEncodingValidator]
    public Encoding WriteEncoding
    {
      get => (Encoding) this["writeEncoding"];
      set => this["writeEncoding"] = (object) value;
    }

    [ConfigurationProperty("contentTypeMapper", DefaultValue = "")]
    [StringValidator(MinLength = 0)]
    public string ContentTypeMapper
    {
      get => (string) this["contentTypeMapper"];
      set
      {
        if (string.IsNullOrEmpty(value))
          value = string.Empty;
        this["contentTypeMapper"] = (object) value;
      }
    }

    [ConfigurationProperty("crossDomainScriptAccessEnabled", DefaultValue = false)]
    public bool CrossDomainScriptAccessEnabled
    {
      get => (bool) this["crossDomainScriptAccessEnabled"];
      set => this["crossDomainScriptAccessEnabled"] = (object) value;
    }

    protected override System.Type BindingElementType => typeof (WebHttpBinding);

    protected override ConfigurationPropertyCollection Properties
    {
      get
      {
        if (this.properties == null)
        {
          lock (this.lockObj)
          {
            if (this.properties == null)
            {
              ConfigurationPropertyCollection properties = base.Properties;
              properties.Add(new ConfigurationProperty("allowCookies", typeof (bool), (object) false, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("bypassProxyOnLocal", typeof (bool), (object) false, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("hostNameComparisonMode", typeof (HostNameComparisonMode), (object) HostNameComparisonMode.StrongWildcard, (TypeConverter) null, (ConfigurationValidatorBase) new ServiceModelEnumValidator(typeof (HostNameComparisonModeHelper)), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("maxBufferSize", typeof (int), (object) 65536, (TypeConverter) null, (ConfigurationValidatorBase) new IntegerValidator(1, int.MaxValue, false), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("maxBufferPoolSize", typeof (long), (object) 524288L, (TypeConverter) null, (ConfigurationValidatorBase) new LongValidator(0L, long.MaxValue, false), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("maxReceivedMessageSize", typeof (long), (object) 65536L, (TypeConverter) null, (ConfigurationValidatorBase) new LongValidator(1L, long.MaxValue, false), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("proxyAddress", typeof (Uri), (object) null, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("readerQuotas", typeof (XmlDictionaryReaderQuotasElement), (object) null, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("security", typeof (WebHttpSecurityElement), (object) null, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("writeEncoding", typeof (Encoding), (object) "utf-8", (TypeConverter) new EncodingConverter(), (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("transferMode", typeof (TransferMode), (object) TransferMode.Buffered, (TypeConverter) null, (ConfigurationValidatorBase) new ServiceModelEnumValidator(typeof (TransferModeHelper)), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("useDefaultWebProxy", typeof (bool), (object) true, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("contentTypeMapper", typeof (string), (object) string.Empty, (TypeConverter) null, (ConfigurationValidatorBase) new StringValidator(0), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("crossDomainScriptAccessEnabled", typeof (bool), (object) false, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              this.properties = properties;
            }
          }
        }
        return this.properties;
      }
    }

    protected internal override void InitializeFrom(Binding binding)
    {
      base.InitializeFrom(binding);
      WebHttpBinding webHttpBinding = (WebHttpBinding) binding;
      this.SetPropertyValueIfNotDefaultValue<bool>("bypassProxyOnLocal", webHttpBinding.BypassProxyOnLocal);
      this.SetPropertyValueIfNotDefaultValue<HostNameComparisonMode>("hostNameComparisonMode", webHttpBinding.HostNameComparisonMode);
      this.SetPropertyValueIfNotDefaultValue<int>("maxBufferSize", webHttpBinding.MaxBufferSize);
      this.SetPropertyValueIfNotDefaultValue<long>("maxBufferPoolSize", webHttpBinding.MaxBufferPoolSize);
      this.SetPropertyValueIfNotDefaultValue<long>("maxReceivedMessageSize", webHttpBinding.MaxReceivedMessageSize);
      if (webHttpBinding.ProxyAddress != (Uri) null)
        this.SetPropertyValueIfNotDefaultValue<Uri>("proxyAddress", webHttpBinding.ProxyAddress);
      this.SetPropertyValueIfNotDefaultValue<Encoding>("writeEncoding", webHttpBinding.WriteEncoding);
      this.SetPropertyValueIfNotDefaultValue<TransferMode>("transferMode", webHttpBinding.TransferMode);
      this.SetPropertyValueIfNotDefaultValue<bool>("useDefaultWebProxy", webHttpBinding.UseDefaultWebProxy);
      this.SetPropertyValueIfNotDefaultValue<bool>("allowCookies", webHttpBinding.AllowCookies);
      this.Security.InitializeFrom(webHttpBinding.Security);
      this.InitializeReaderQuotas(webHttpBinding.ReaderQuotas);
      this.SetPropertyValueIfNotDefaultValue<bool>("crossDomainScriptAccessEnabled", webHttpBinding.CrossDomainScriptAccessEnabled);
    }

    internal void InitializeReaderQuotas(XmlDictionaryReaderQuotas readerQuotas)
    {
      if (readerQuotas == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (readerQuotas));
      XmlDictionaryReaderQuotasElement readerQuotas1 = this.ReaderQuotas;
      if (readerQuotas.MaxDepth != 32 && readerQuotas.MaxDepth != 0)
        readerQuotas1.MaxDepth = readerQuotas.MaxDepth;
      if (readerQuotas.MaxStringContentLength != 8192 && readerQuotas.MaxStringContentLength != 0)
        readerQuotas1.MaxStringContentLength = readerQuotas.MaxStringContentLength;
      if (readerQuotas.MaxArrayLength != 16384 && readerQuotas.MaxArrayLength != 0)
        readerQuotas1.MaxArrayLength = readerQuotas.MaxArrayLength;
      if (readerQuotas.MaxBytesPerRead != 4096 && readerQuotas.MaxBytesPerRead != 0)
        readerQuotas1.MaxBytesPerRead = readerQuotas.MaxBytesPerRead;
      if (readerQuotas.MaxNameTableCharCount == 16384 || readerQuotas.MaxNameTableCharCount == 0)
        return;
      readerQuotas1.MaxNameTableCharCount = readerQuotas.MaxNameTableCharCount;
    }

    protected override void OnApplyConfiguration(Binding binding)
    {
      WebHttpBinding webHttpBinding = (WebHttpBinding) binding;
      webHttpBinding.BypassProxyOnLocal = this.BypassProxyOnLocal;
      webHttpBinding.HostNameComparisonMode = this.HostNameComparisonMode;
      webHttpBinding.MaxBufferPoolSize = this.MaxBufferPoolSize;
      webHttpBinding.MaxReceivedMessageSize = this.MaxReceivedMessageSize;
      webHttpBinding.WriteEncoding = this.WriteEncoding;
      webHttpBinding.TransferMode = this.TransferMode;
      webHttpBinding.UseDefaultWebProxy = this.UseDefaultWebProxy;
      webHttpBinding.AllowCookies = this.AllowCookies;
      if (this.ProxyAddress != (Uri) null)
        webHttpBinding.ProxyAddress = this.ProxyAddress;
      if (this.ElementInformation.Properties["maxBufferSize"].ValueOrigin != PropertyValueOrigin.Default)
        webHttpBinding.MaxBufferSize = this.MaxBufferSize;
      webHttpBinding.ContentTypeMapper = WebHttpBindingElement.GetContentTypeMapper(this.ContentTypeMapper);
      webHttpBinding.CrossDomainScriptAccessEnabled = this.CrossDomainScriptAccessEnabled;
      this.Security.ApplyConfiguration(webHttpBinding.Security);
      WebHttpBindingElement.ApplyReaderQuotasConfiguration(webHttpBinding.ReaderQuotas, this.ReaderQuotas);
    }

    internal static WebContentTypeMapper GetContentTypeMapper(
      string contentTypeMapperType)
    {
      WebContentTypeMapper contentTypeMapper = (WebContentTypeMapper) null;
      if (!string.IsNullOrEmpty(contentTypeMapperType))
      {
        System.Type type = System.Type.GetType(contentTypeMapperType, true);
        // ISSUE: reference to a compiler-generated method
        contentTypeMapper = WebHttpBindingElement.WebContentTypeMapperType.IsAssignableFrom(type) ? (WebContentTypeMapper) Activator.CreateInstance(type) : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ConfigurationErrorsException(SR2.GetString(SR2.ConfigInvalidWebContentTypeMapperType, (object) contentTypeMapperType, (object) WebHttpBindingElement.WebContentTypeMapperType.ToString())));
      }
      return contentTypeMapper;
    }

    internal static void ApplyReaderQuotasConfiguration(
      XmlDictionaryReaderQuotas webBindingReaderQuotas,
      XmlDictionaryReaderQuotasElement elementReaderQuotas)
    {
      if (webBindingReaderQuotas == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (webBindingReaderQuotas));
      if (elementReaderQuotas.MaxDepth != 0)
        webBindingReaderQuotas.MaxDepth = elementReaderQuotas.MaxDepth;
      if (elementReaderQuotas.MaxStringContentLength != 0)
        webBindingReaderQuotas.MaxStringContentLength = elementReaderQuotas.MaxStringContentLength;
      if (elementReaderQuotas.MaxArrayLength != 0)
        webBindingReaderQuotas.MaxArrayLength = elementReaderQuotas.MaxArrayLength;
      if (elementReaderQuotas.MaxBytesPerRead != 0)
        webBindingReaderQuotas.MaxBytesPerRead = elementReaderQuotas.MaxBytesPerRead;
      if (elementReaderQuotas.MaxNameTableCharCount == 0)
        return;
      webBindingReaderQuotas.MaxNameTableCharCount = elementReaderQuotas.MaxNameTableCharCount;
    }
  }
}
