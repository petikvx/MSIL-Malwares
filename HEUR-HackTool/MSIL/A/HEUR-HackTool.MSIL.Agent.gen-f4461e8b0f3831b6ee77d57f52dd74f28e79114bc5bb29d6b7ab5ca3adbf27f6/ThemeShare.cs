// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.ThemeShare
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;

namespace BlackNET_Builder
{
  [StandardModule]
  internal sealed class ThemeShare
  {
    private static int Frames;
    private static bool Invalidate;
    public static PrecisionTimer ThemeTimer = new PrecisionTimer();
    private const int FPS = 50;
    private const int Rate = 10;
    private static List<ThemeShare.AnimationDelegate> Callbacks = new List<ThemeShare.AnimationDelegate>();

    private static void HandleCallbacks(IntPtr state, bool reserve)
    {
      ThemeShare.Invalidate = ThemeShare.Frames >= 50;
      if (ThemeShare.Invalidate)
        ThemeShare.Frames = 0;
      lock (ThemeShare.Callbacks)
      {
        int num = checked (ThemeShare.Callbacks.Count - 1);
        int index = 0;
        while (index <= num)
        {
          ThemeShare.Callbacks[index](ThemeShare.Invalidate);
          checked { ++index; }
        }
      }
      checked { ThemeShare.Frames += 10; }
    }

    private static void InvalidateThemeTimer()
    {
      if (ThemeShare.Callbacks.Count == 0)
        ThemeShare.ThemeTimer.Delete();
      else
        ThemeShare.ThemeTimer.Create(0U, 10U, new PrecisionTimer.TimerDelegate(ThemeShare.HandleCallbacks));
    }

    public static void AddAnimationCallback(ThemeShare.AnimationDelegate callback)
    {
      lock (ThemeShare.Callbacks)
      {
        if (ThemeShare.Callbacks.Contains(callback))
          return;
        ThemeShare.Callbacks.Add(callback);
        ThemeShare.InvalidateThemeTimer();
      }
    }

    public static void RemoveAnimationCallback(ThemeShare.AnimationDelegate callback)
    {
      lock (ThemeShare.Callbacks)
      {
        if (!ThemeShare.Callbacks.Contains(callback))
          return;
        ThemeShare.Callbacks.Remove(callback);
        ThemeShare.InvalidateThemeTimer();
      }
    }

    public delegate void AnimationDelegate(bool invalidate);
  }
}
