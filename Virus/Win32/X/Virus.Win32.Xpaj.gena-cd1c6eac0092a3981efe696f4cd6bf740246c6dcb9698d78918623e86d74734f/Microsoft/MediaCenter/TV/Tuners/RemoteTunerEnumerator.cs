// Decompiled with JetBrains decompiler
// Type: Microsoft.MediaCenter.TV.Tuners.RemoteTunerEnumerator
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using ATL;
using msclr;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Microsoft.MediaCenter.TV.Tuners
{
  public class RemoteTunerEnumerator : MTASafeComWrapper, ITunerEnumerator
  {
    private Tuner m_Current;
    private TunerManager m_Manager;

    private unsafe void TPReset()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        this.m_Current = (Tuner) null;
        CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder;
        CComPtr\u003CIEnumRecorder\u003E* enumPtr = this.TPGetEnumPtr(&ptrIenumRecorder);
        // ISSUE: fault handler
        try
        {
          int num = *(int*) enumPtr;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr)>) *(int*) (*(int*) num + 20))((IntPtr) num));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder);
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
    }

    [return: MarshalAs(UnmanagedType.U1)]
    private unsafe bool TPMoveNext()
    {
      @lock lock1 = (@lock) null;
      CComPtr\u003CIRecorderInfo\u003E ptrIrecorderInfo;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref ptrIrecorderInfo = 0;
      // ISSUE: fault handler
      try
      {
        uint num1 = 0;
        CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder;
        CComPtr\u003CIEnumRecorder\u003E* enumPtr = this.TPGetEnumPtr(&ptrIenumRecorder);
        // ISSUE: fault handler
        try
        {
          int num2 = *(int*) enumPtr;
          int num3 = num2;
          ref CComPtr\u003CIRecorderInfo\u003E local1 = ref ptrIrecorderInfo;
          ref uint local2 = ref num1;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          MarshalHelper.ComException(__calli((__FnPtr<int (IntPtr, uint, IRecorderInfo**, uint*)>) *(int*) (*(int*) num2 + 12))((uint*) num3, (IRecorderInfo**) 1, (uint) ref local1, (IntPtr) ref local2));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder);
        if (0U != num1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (0 != ^(int&) ref ptrIrecorderInfo)
          {
            @lock lock2 = new @lock(this.m_Lock);
            // ISSUE: fault handler
            try
            {
              lock1 = lock2;
              Tuner forIrecorderInfo = this.m_Manager.TPGetTunerForIRecorderInfo(&ptrIrecorderInfo);
              this.m_Current = forIrecorderInfo;
              if (forIrecorderInfo != null)
              {
                if (forIrecorderInfo.IsInvalid)
                  goto label_13;
              }
              else
                goto label_13;
            }
            __fault
            {
              lock1.Dispose();
            }
            lock1.Dispose();
          }
          else
            goto label_17;
        }
        else
          goto label_17;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return true;
label_13:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          throw new ApplicationException("unexpected failure to map enumerated IRecorderInfo to Tuner^");
        }
        __fault
        {
          lock1.Dispose();
        }
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
label_17:
      // ISSUE: fault handler
      try
      {
        this.m_Current = (Tuner) null;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIrecorderInfo);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) &ptrIrecorderInfo);
      return false;
    }

    internal unsafe RemoteTunerEnumerator(IntPtr ptr)
      : base((_GUID*) &\u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa, (IUnknown*) ptr.ToPointer())
    {
    }

    [CLSCompliant(false)]
    internal unsafe RemoteTunerEnumerator(IEnumRecorder* pEnum, TunerManager manager)
    {
      this.m_Manager = manager;
      // ISSUE: explicit constructor call
      base.\u002Ector((_GUID*) &\u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa, (IUnknown*) pEnum);
    }

    private void \u007ERemoteTunerEnumerator()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      Tuner current;
      TunerManager manager;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        current = this.m_Current;
        this.m_Current = (Tuner) null;
        manager = this.m_Manager;
        this.m_Manager = (TunerManager) null;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      current?.Dispose();
      manager?.Dispose();
    }

    public override unsafe Guid PrimaryIID => *(Guid*) (int) &\u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public virtual Tuner Current
    {
      get
      {
        @lock lock1 = new @lock(this.m_Lock);
        @lock lock2;
        Tuner current;
        try
        {
          lock2 = lock1;
          current = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(this.m_Current);
          if (current != null)
          {
            if (current.IsInvalid)
              goto label_5;
          }
          else
            goto label_5;
        }
        __fault
        {
          lock2.Dispose();
        }
        lock2.Dispose();
        return current;
label_5:
        try
        {
          throw new ApplicationException("unexpected failure to clone tuner collection member");
        }
        __fault
        {
          lock2.Dispose();
        }
      }
    }

    object IEnumerator.IEnumerator_get_Current()
    {
      @lock lock1 = new @lock(this.m_Lock);
      @lock lock2;
      SafeComWrapper current;
      // ISSUE: fault handler
      try
      {
        lock2 = lock1;
        current = (SafeComWrapper) \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(this.m_Current);
        if (current != null)
        {
          if (current.IsInvalid)
            goto label_5;
        }
        else
          goto label_5;
      }
      __fault
      {
        lock2.Dispose();
      }
      lock2.Dispose();
      return (object) current;
label_5:
      // ISSUE: fault handler
      try
      {
        throw new ApplicationException("unexpected failure to clone tuner collection member");
      }
      __fault
      {
        lock2.Dispose();
      }
    }

    public virtual void Reset() => InteropHelper.EndInvokeV\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Adv0\u0020\u005E\u003E(new dv0(this.TPReset).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::RemoteTunerEnumerator::Reset");

    [return: MarshalAs(UnmanagedType.U1)]
    public virtual bool MoveNext() => InteropHelper.EndInvoke\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Ad0\u003Cbool\u003E\u0020\u005E\u002Cbool\u003E(new d0<bool>(this.TPMoveNext).BeginInvoke((AsyncCallback) null, (object) null), "Microsoft::MediaCenter::TV::Tuners::RemoteTunerEnumerator::MoveNext", 60000);

    protected unsafe CComPtr\u003CIEnumRecorder\u003E* TPGetEnumPtr(
      [In] CComPtr\u003CIEnumRecorder\u003E* obj0)
    {
      uint num1 = 0;
      CComPtr\u003CIEnumRecorder\u003E ptrIenumRecorder1;
      CComPtr\u003CIEnumRecorder\u003E* ptrIenumRecorder2 = SafeComWrapper.GetNativePtr\u003CIEnumRecorder\u003E(&ptrIenumRecorder1, (SafeComWrapper) this);
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          \u003CModule\u003E.ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bctor\u007D(obj0, ptrIenumRecorder2);
          num1 = 1U;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) &ptrIenumRecorder1);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) &ptrIenumRecorder1);
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool _param1)
    {
      if (_param1)
      {
        try
        {
          this.\u007ERemoteTunerEnumerator();
        }
        finally
        {
          base.Dispose(true);
        }
      }
      else
        base.Dispose(false);
    }
  }
}
