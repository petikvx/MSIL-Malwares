// Decompiled with JetBrains decompiler
// Type: Loki.U
// Assembly: svchost, Version=2.1.0.0, Culture=neutral, PublicKeyToken=1033239b79792944
// MVID: AC1C84B8-A285-45A1-BF48-BDF83760C093
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.12-msil\HEUR-Trojan-Ransom.Win32.Generic-f2da3d1410c5058720a4307acf5fec7fc2b54285be9dd89eae108cce368dcde7.exe

using Microsoft.Win32;
using System;
using System.Drawing;
using System.IO;
using System.Management;
using System.Net;
using ZZZZZZZZK;
using ZZZZZZZZZI;
using ZZZZZZZZZY;
using ZZZZZZZZZZD;
using ZZZZZZZZZZZh;
using ZZZZZZZZZZZK;
using ZZZZZZZZZZZZL;
using ZZZZZZZZZZZZN;
using ZZZZZZZZZZZZP;
using ZZZZZZZZZZZZS;
using ZZZZZZZZZZZZU;
using ZZZZZZZZZZZZW;
using ZZZZZZZZZZZZZ;
using ZZZZZZZZZZZZZb;
using ZZZZZZZZZZZZZd;
using ZZZZZZZZZZZZZf;
using ZZZZZZZZZZZZZh;
using ZZZZZZZZZZZZZk;
using ZZZZZZZZZZZZZn;
using ZZZZZZZZZZZZZp;
using ZZZZZZZZZZZZZr;

namespace Loki
{
  internal class U
  {
    [ZZZZZZZZZZf(-707394579)]
    internal static ZZZZZZZZZJ \u003E\u0021R\u001F\u008F;
    [ZZZZZZZZP(1187353152)]
    internal static ZZZZZZZZZZZZM XUY\u00807;
    [ZZZZZZZZZZb(998858153)]
    internal static ZZZZZZZZZZZZO \u0001Mö\u0020b;
    [ZZZZZZZZZr(-1199118659)]
    internal static ZZZZZZZZL wmoï\u0091;
    [ZZZZZZZZZv(-1389901625)]
    internal static ZZZZZZZZL \u0088As\u000B\u00B7;
    [ZZZZZZZZZZZm(-167855288)]
    internal static ZZZZZZZZZZZZQ àÄÕq\u003A;
    [ZZZZZZZZZr(-750069477)]
    internal static ZZZZZZZZZZ \u002Cé\u009E\u002BF;
    [ZZZZZZZZZL(-99095953)]
    internal static ZZZZZZZZZZZL \u0091Õ\u0026\u00AFÄ;
    [ZZZZZZZZZZf(-1070753409)]
    internal static ZZZZZZZZZZZZT Ozj\u0085I;
    [ZZZZZZZZZZw(293710173)]
    internal static ZZZZZZZZZZZZV \u00BC\u002Aª\u0023\u00BC;
    [ZZZZZZZZZV(-700271717)]
    internal static ZZZZZZZZZZZZX \u0013\u0083\u00B4\u0094\u0010;
    [ZZZZZZZZZZl(-1927296208)]
    internal static ZZZZZZZZZZZi É\u00BDCý\u0040;
    [ZZZZZZZZZZZm(-1171134856)]
    internal static ZZZZZZZZZZZZO \u0084\u00BFo\u00A4ÿ;
    [ZZZZZZZZW(-1250303597)]
    internal static ZZZZZZZZZZZZZa lþ\u00AECþ;
    [ZZZZZZZZZZb(689004265)]
    internal static ZZZZZZZZZZ h_K\u0095û;
    [ZZZZZZZZZZZm(-845251692)]
    internal static ZZZZZZZZZZZZZc \u009E\u00221\u000E8;
    [ZZZZZZZZZr(-2004365567)]
    internal static ZZZZZZZZL ë\u0009\u0040\u003Fø;
    [ZZZZZZZZZZb(1325451781)]
    internal static ZZZZZZZZZZZZZe È\u00B6B\u0024\u0029;
    [ZZZZZZZZZZf(-1457939049)]
    internal static ZZZZZZZZZZZZZg \u0012I\u00D7\u0082ê;
    [ZZZZZZZZZn(497924239)]
    internal static ZZZZZZZZZZZZZi \u0026o\u0015\u0095\u00A0;
    [ZZZZZZZZH(-1726533772)]
    internal static ZZZZZZZZZZ \u0085T\u0080ù\u00A6;
    [ZZZZZZZZZZf(-548654417)]
    internal static ZZZZZZZZZZZZZl Ç\u0092\u003E\u00BFé;
    [ZZZZZZZZZZl(1120204918)]
    internal static ZZZZZZZZZZZZZo \u0007\u00A4N\u008F\u007F;
    [ZZZZZZZZZZb(-2070350493)]
    internal static ZZZZZZZZZZZZZq ÂLÓBs;
    [ZZZZZZZZZV(-1190158151)]
    internal static ZZZZZZZZZZZZZs \u001DS\u008Bê\u0023;
    [ZZZZZZZZZZw(-880384607)]
    internal static ZZZZZZZZZZE û\u00B6\u007E\u0093\u0027;
    [ZZZZZZZZZd(660442367)]
    internal static ZZZZZZZZL \u00AB\u000A\u00B8I\u0014;

    public static void ZA()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZB()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZC()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZD()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZE()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZF(bool _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZG()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZH()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZI(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public U()
    {
      // ISSUE: unable to decompile the method.
    }

    static U()
    {
      // ISSUE: unable to decompile the method.
    }

    static U()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZu()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZv(Exception _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZw(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZx(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZy()
    {
      // ISSUE: unable to decompile the method.
    }

    public U()
    {
      // ISSUE: unable to decompile the method.
    }

    [STAThread]
    private static void ZZE(string[] _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public U()
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZG(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZH(string _param0, bool _param1, string _param2 = null)
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZI(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static ManagementObjectCollection ZZJ()
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool ZZK(out int _param0, out int _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool ZZL(
      string _param0,
      string _param1,
      int _param2,
      int _param3,
      out Bitmap _param4)
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool[] ZZM(
      RegistryKey _param0,
      string _param1,
      string[] _param2,
      object[] _param3,
      RegistryValueKind[] _param4,
      bool[] _param5)
    {
      // ISSUE: unable to decompile the method.
    }

    public static object ZZN(RegistryKey _param0, string _param1, string _param2, bool _param3)
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool ZZO(Bitmap _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZP(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZQ(long _param0, int _param1 = 1)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZR(DriveInfo _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZS(DriveInfo _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool ZZT()
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZU()
    {
      // ISSUE: unable to decompile the method.
    }

    public static void ZZV(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZW()
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZX()
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZY()
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool ZZZ()
    {
      // ISSUE: unable to decompile the method.
    }

    public static bool ZZZa(IPAddress _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string ZZZb()
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
