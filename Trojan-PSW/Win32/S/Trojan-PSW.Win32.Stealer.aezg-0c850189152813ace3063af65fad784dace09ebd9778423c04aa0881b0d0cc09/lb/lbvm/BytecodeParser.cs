// Decompiled with JetBrains decompiler
// Type: org.lb.lbvm.BytecodeParser
// Assembly: GCCollectionMo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3A5CAC9E-800C-431E-83D8-5129C6781923
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan-PSW.Win32.Stealer.aezg-0c850189152813ace3063af65fad784dace09ebd9778423c04aa0881b0d0cc09.exe

using org.lb.lbvm.exceptions;
using org.lb.lbvm.runtime;
using System;
using System.Collections.Generic;

namespace org.lb.lbvm
{
  internal sealed class BytecodeParser
  {
    private readonly Symbol[] symbolTable;
    private readonly byte[] bytecode;
    private readonly OutputPort printer;
    private int offset;
    private readonly List<Statement> statements = new List<Statement>();

    private BytecodeParser(byte[] bytecode, IEnumerable<string> symbolTable, OutputPort printer)
    {
      this.bytecode = bytecode;
      this.printer = printer;
      this.offset = 0;
    }

    internal static Statement[] Parse(
      byte[] bytecode,
      IEnumerable<string> symbolTable,
      OutputPort printer)
    {
      return new BytecodeParser(bytecode, symbolTable, printer).ParseStatements();
    }

    private Statement[] ParseStatements()
    {
      this.offset = 0;
      this.statements.Clear();
      ErrorStatement errorStatement = new ErrorStatement();
      while (this.offset < this.bytecode.Length)
      {
        this.ParseStatement();
        while (this.statements.Count < this.offset)
          this.statements.Add((Statement) errorStatement);
      }
      return this.statements.ToArray();
    }

    private void ParseStatement()
    {
      byte num = this.bytecode[this.offset++];
      switch (num)
      {
        case 0:
          this.statements.Add((Statement) new EndStatement());
          break;
        case 1:
          this.statements.Add((Statement) new PopStatement());
          break;
        case 2:
          this.statements.Add((Statement) new PushintStatement(this.ReadInt()));
          break;
        case 3:
          this.statements.Add((Statement) new DefineStatement(this.GetSymbolTableEntry(this.ReadInt())));
          break;
        case 4:
          this.statements.Add((Statement) new PushvarStatement(this.GetSymbolTableEntry(this.ReadInt())));
          break;
        case 5:
          this.statements.Add((Statement) new NumeqStatement());
          break;
        case 6:
          this.statements.Add((Statement) new AddStatement());
          break;
        case 7:
          this.statements.Add((Statement) new SubStatement());
          break;
        case 8:
          this.statements.Add((Statement) new MulStatement());
          break;
        case 9:
          this.statements.Add((Statement) new DivStatement());
          break;
        case 10:
          this.statements.Add((Statement) new IdivStatement());
          break;
        case 11:
          this.statements.Add((Statement) new BfalseStatement(this.ReadInt()));
          break;
        case 12:
          this.statements.Add((Statement) new EnterStatement(this.ReadInt(), this.GetSymbolTableEntry(this.ReadInt())));
          break;
        case 13:
          this.statements.Add((Statement) new RetStatement());
          break;
        case 14:
          this.statements.Add((Statement) new CallStatement(this.ReadInt()));
          break;
        case 15:
          this.statements.Add((Statement) new TailcallStatement(this.ReadInt()));
          break;
        case 16:
          this.statements.Add((Statement) new JmpStatement(this.ReadInt()));
          break;
        case 17:
          this.statements.Add((Statement) new PushlabelStatement(this.ReadInt()));
          break;
        case 18:
          this.statements.Add((Statement) new ImodStatement());
          break;
        case 19:
          this.statements.Add((Statement) new SetStatement(this.GetSymbolTableEntry(this.ReadInt())));
          break;
        case 20:
          this.statements.Add((Statement) new PushsymStatement(this.GetSymbolTableEntry(this.ReadInt())));
          break;
        case 21:
          this.statements.Add((Statement) new PushboolStatement(true));
          break;
        case 22:
          this.statements.Add((Statement) new PushboolStatement(false));
          break;
        case 23:
          this.statements.Add((Statement) new MakeClosureStatement(this.ReadInt()));
          break;
        case 24:
          this.statements.Add((Statement) new NumltStatement());
          break;
        case 25:
          this.statements.Add((Statement) new NumleStatement());
          break;
        case 26:
          this.statements.Add((Statement) new NumgtStatement());
          break;
        case 27:
          this.statements.Add((Statement) new NumgeStatement());
          break;
        case 28:
          this.statements.Add((Statement) new PushdblStatement(this.ReadDouble()));
          break;
        case 29:
          this.statements.Add((Statement) new MakevarStatement(this.GetSymbolTableEntry(this.ReadInt())));
          break;
        case 30:
          this.statements.Add((Statement) new MakepairStatement());
          break;
        case 31:
          this.statements.Add((Statement) new IspairStatement());
          break;
        case 32:
          this.statements.Add((Statement) new Pair1Statement());
          break;
        case 33:
          this.statements.Add((Statement) new Pair2Statement());
          break;
        case 34:
          this.statements.Add((Statement) new PushnilStatement());
          break;
        case 35:
          this.statements.Add((Statement) new EnterRestStatement(this.ReadInt(), this.ReadInt(), this.GetSymbolTableEntry(this.ReadInt())));
          break;
        case 36:
          this.statements.Add((Statement) new RandomStatement());
          break;
        case 37:
          this.statements.Add((Statement) new ObjequalStatement());
          break;
        case 38:
          this.statements.Add((Statement) new IsnullStatement());
          break;
        case 39:
          this.statements.Add((Statement) new PrintStatement(this.printer));
          break;
        case 40:
          this.statements.Add((Statement) new PushstrStatement(this.ReadString()));
          break;
        case 41:
          this.statements.Add((Statement) new IsnumberStatement());
          break;
        case 42:
          this.statements.Add((Statement) new IsstringStatement());
          break;
        case 43:
          this.statements.Add((Statement) new StreqStatement(false));
          break;
        case 44:
          this.statements.Add((Statement) new StreqStatement(true));
          break;
        case 45:
          this.statements.Add((Statement) new StrltStatement(false));
          break;
        case 46:
          this.statements.Add((Statement) new StrltStatement(true));
          break;
        case 47:
          this.statements.Add((Statement) new StrgtStatement(false));
          break;
        case 48:
          this.statements.Add((Statement) new StrgtStatement(true));
          break;
        case 49:
          this.statements.Add((Statement) new StrlengthStatement());
          break;
        case 50:
          this.statements.Add((Statement) new SubstrStatement());
          break;
        case 51:
          this.statements.Add((Statement) new StrappendStatement());
          break;
        case 52:
          this.statements.Add((Statement) new PushcharStatement(this.ReadInt()));
          break;
        case 53:
          this.statements.Add((Statement) new IscharStatement());
          break;
        case 54:
          this.statements.Add((Statement) new ChreqStatement(false));
          break;
        case 55:
          this.statements.Add((Statement) new ChreqStatement(true));
          break;
        case 56:
          this.statements.Add((Statement) new ChrltStatement(false));
          break;
        case 57:
          this.statements.Add((Statement) new ChrltStatement(true));
          break;
        case 58:
          this.statements.Add((Statement) new ChrgtStatement(false));
          break;
        case 59:
          this.statements.Add((Statement) new ChrgtStatement(true));
          break;
        case 60:
          this.statements.Add((Statement) new ChrtointStatement());
          break;
        case 61:
          this.statements.Add((Statement) new InttochrStatement());
          break;
        case 62:
          this.statements.Add((Statement) new StrrefStatement());
          break;
        case 63:
          this.statements.Add((Statement) new SetstrrefStatement());
          break;
        case 64:
          this.statements.Add((Statement) new MakestrStatement());
          break;
        case 65:
          this.statements.Add((Statement) new StrtonumStatement());
          break;
        case 66:
          this.statements.Add((Statement) new NumtostrStatement());
          break;
        case 67:
          this.statements.Add((Statement) new StrtosymStatement());
          break;
        case 68:
          this.statements.Add((Statement) new SymtostrStatement());
          break;
        case 69:
          this.statements.Add((Statement) new ThrowStatement());
          break;
        case 70:
          this.statements.Add((Statement) new IsBoolStatement());
          break;
        case 71:
          this.statements.Add((Statement) new IsSymbolStatement());
          break;
        case 72:
          this.statements.Add((Statement) new IsIntStatement());
          break;
        case 73:
          this.statements.Add((Statement) new IsFloatStatement());
          break;
        default:
          throw new InvalidOpcodeException("Invalid opcode: 0x" + num.ToString("x2"));
      }
    }

    private int ReadInt()
    {
      int int32 = BitConverter.ToInt32(this.bytecode, this.offset);
      this.offset += 4;
      return int32;
    }

    private Symbol GetSymbolTableEntry(int no)
    {
      if (no >= 0 && no < this.symbolTable.Length)
        return this.symbolTable[no];
      throw new SymbolTableEntryNotFoundException("Symbol table entry not found");
    }

    private double ReadDouble()
    {
      double num = BitConverter.ToDouble(this.bytecode, this.offset);
      this.offset += 8;
      return num;
    }

    private string ReadString()
    {
      int length = this.ReadInt();
      char[] destinationArray = new char[length];
      Array.Copy((Array) this.bytecode, this.offset, (Array) destinationArray, 0, length);
      this.offset += length;
      return new string(destinationArray);
    }
  }
}
