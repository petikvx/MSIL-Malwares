// Decompiled with JetBrains decompiler
// Type: mainPorject.UserControl_Forces
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace mainPorject
{
  public class UserControl_Forces : UserControl
  {
    private forceType type_DONOTUSE;
    private const int space = 10;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public forceType Type
    {
      set
      {
        switch (value)
        {
          case forceType.point:
            this.panel1.Paint -= new PaintEventHandler(this.distriputedForce_paint);
            this.panel1.Paint += new PaintEventHandler(this.PointForce_Paint);
            break;
          case forceType.distributed:
            this.panel1.Paint -= new PaintEventHandler(this.PointForce_Paint);
            this.panel1.Paint += new PaintEventHandler(this.distriputedForce_paint);
            break;
        }
        this.type_DONOTUSE = value;
      }
      get => this.type_DONOTUSE;
    }

    public UserControl_Forces() => this.InitializeComponent();

    private void PointForce_Paint(object sender, PaintEventArgs e)
    {
      this.Width = 20;
      this.force_paint(sender, e, this.panel1.Width / 2, 9, Color.Red);
    }

    private void distriputedForce_paint(object sender, PaintEventArgs e)
    {
      for (int index = 0; index < (this.panel1.Width + 10 - this.panel1.Width % 10) / 10; ++index)
        this.force_paint(sender, e, 5 + index * 10, 3, Color.Red);
    }

    private void force_paint(object sender, PaintEventArgs e, int x, int width, Color color) => e.Graphics.DrawLine(new Pen(color)
    {
      Width = (float) width,
      StartCap = LineCap.ArrowAnchor
    }, new Point(x, this.panel1.Height), new Point(x, 0));

    private void panel1_MouseClick(object sender, MouseEventArgs e) => this.OnMouseClick(e);

    private void panel1_MouseDown(object sender, MouseEventArgs e) => this.OnMouseDown(e);

    private void panel1_MouseMove(object sender, MouseEventArgs e) => this.OnMouseMove(e);

    private void panel1_MouseUp(object sender, MouseEventArgs e) => this.OnMouseUp(e);

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.panel1 = new Panel();
      this.SuspendLayout();
      this.panel1.Dock = DockStyle.Fill;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(57, 182);
      this.panel1.TabIndex = 0;
      this.panel1.Paint += new PaintEventHandler(this.PointForce_Paint);
      this.panel1.MouseClick += new MouseEventHandler(this.panel1_MouseClick);
      this.panel1.MouseDown += new MouseEventHandler(this.panel1_MouseDown);
      this.panel1.MouseMove += new MouseEventHandler(this.panel1_MouseMove);
      this.panel1.MouseUp += new MouseEventHandler(this.panel1_MouseUp);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Controls.Add((Control) this.panel1);
      this.Name = nameof (UserControl_Forces);
      this.Size = new Size(57, 182);
      this.ResumeLayout(false);
    }
  }
}
