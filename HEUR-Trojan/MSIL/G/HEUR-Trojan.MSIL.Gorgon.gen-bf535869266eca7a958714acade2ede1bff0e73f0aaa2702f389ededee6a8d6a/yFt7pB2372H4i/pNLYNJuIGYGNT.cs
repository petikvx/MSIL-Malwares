// Decompiled with JetBrains decompiler
// Type: yFt7pB2372H4i.pNLYNJuIGYGNT
// Assembly: Udby4Jt48oXkJ, Version=3.17.2.31, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 37899E89-D673-4F5B-A193-2E4DF6A54096
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-bf535869266eca7a958714acade2ede1bff0e73f0aaa2702f389ededee6a8d6a.exe

using HqLTLdqt37SZu;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Tasks;

namespace yFt7pB2372H4i
{
  internal static class pNLYNJuIGYGNT
  {
    public static bool YM0DoC0ZctKof => true;

    public static Task<string> VgFJmEUuEf0lV(IDictionary<string, string> Dk5gRv0cMvtCr)
    {
      // ISSUE: variable of a compiler-generated type
      pNLYNJuIGYGNT.EvsTjy2GacNRi stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u00374ZwNkgJUzhcn = Dk5gRv0cMvtCr;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0036h6i19RIdQedH = AsyncTaskMethodBuilder<string>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(pNLYNJuIGYGNT.BIqCOEr26KLBd&) ref stateMachine).u1DjsCCufzikE = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0036h6i19RIdQedH.Start<pNLYNJuIGYGNT.EvsTjy2GacNRi>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u0036h6i19RIdQedH.Task;
    }

    private static X509Certificate2 KzxMUjZFleNzT(
      IDictionary<string, string> _param0)
    {
      X509Store x509Store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
      try
      {
        x509Store.Open(OpenFlags.ReadOnly);
        X509Certificate2Collection certificates = x509Store.Certificates;
        if (_param0.ContainsKey("CertAuthorities"))
          return pNLYNJuIGYGNT.ykYiFsvU9jMZe(_param0, certificates);
        X509Certificate2Collection certificate2Collection = certificates.Find(X509FindType.FindByThumbprint, (object) _param0["CertThumbprint"], false);
        return certificate2Collection.Count != 0 ? certificate2Collection[0] : throw new LlM9VbgWu20VY("device_certificate_not_found", string.Format((IFormatProvider) CultureInfo.CurrentCulture, "Device Certificate was not found for {0}", new object[1]
        {
          (object) ("Cert thumbprint:" + _param0["CertThumbprint"])
        }));
      }
      finally
      {
        x509Store.Close();
      }
    }

    private static X509Certificate2 ykYiFsvU9jMZe(
      IDictionary<string, string> p3fWmzvJOXFTa,
      X509Certificate2Collection _param1)
    {
      X509Certificate2Collection certificate2Collection = (X509Certificate2Collection) null;
      string str1 = p3fWmzvJOXFTa["CertAuthorities"];
      string[] separator1 = new string[1]{ ";" };
      foreach (string str2 in str1.Split(separator1, StringSplitOptions.None))
      {
        string[] separator2 = new string[1]{ "," };
        string[] strArray = str2.Split(separator2, StringSplitOptions.None);
        string findValue = strArray[strArray.Length - 1];
        for (int index = strArray.Length - 2; index >= 0; --index)
          findValue = findValue + " + " + strArray[index].Trim();
        certificate2Collection = _param1.Find(X509FindType.FindByIssuerDistinguishedName, (object) findValue, false);
        if (certificate2Collection.Count > 0)
          break;
      }
      return certificate2Collection != null && certificate2Collection.Count != 0 ? certificate2Collection[0] : throw new LlM9VbgWu20VY("device_certificate_not_found", string.Format((IFormatProvider) CultureInfo.CurrentCulture, "Device Certificate was not found for {0}", new object[1]
      {
        (object) ("Cert Authorities:" + p3fWmzvJOXFTa["CertAuthorities"])
      }));
    }
  }
}
