// Decompiled with JetBrains decompiler
// Type: org.lb.lbvm.runtime.EnvironmentStack
// Assembly: GCCollectionMo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3A5CAC9E-800C-431E-83D8-5129C6781923
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan-PSW.Win32.Stealer.aezg-0c850189152813ace3063af65fad784dace09ebd9778423c04aa0881b0d0cc09.exe

using org.lb.lbvm.exceptions;
using System.Collections.Specialized;

namespace org.lb.lbvm.runtime
{
  internal sealed class EnvironmentStack
  {
    private readonly HybridDictionary[] stack = new HybridDictionary[1024];
    private int count;
    private HybridDictionary TOS;

    public void PushNew()
    {
      if (this.count == this.stack.Length - 1)
        throw new RuntimeException("Environment stack overflow");
      if (this.stack[this.count] == null)
        this.stack[this.count] = new HybridDictionary();
      else
        this.stack[this.count].Clear();
      ++this.count;
      this.TOS = this.stack[this.count - 1];
    }

    public void Pop()
    {
      if (this.count == 0)
        throw new RuntimeException("Environment stack underflow");
      --this.count;
      this.TOS = this.stack[this.count - 1];
    }

    public int Count() => this.count;

    public bool HasVariable(Symbol symbol) => this.TOS.Contains((object) symbol);

    public void Set(Symbol symbol, Variable value) => this.TOS[(object) symbol] = (object) value;

    public Variable Get(Symbol symbol) => this.HasVariable(symbol) ? (Variable) this.TOS[(object) symbol] : throw new RuntimeException("Unknown variable '" + symbol?.ToString() + "'");
  }
}
