// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: 0的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D533F7C-4FE9-47C1-AE3D-12E223DC01C7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7b4b43d22be88ed3b2054ef7090ebb7b44ecc03dffa6c32e578002c9a12cbea8.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = 563694481;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1423019151)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1110431076 ^ 185718224;
            continue;
          case 3:
            this.board = b;
            num1 = (int) num2 * 2037017165 ^ -1448700707;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void FindAllMoves()
    {
label_1:
      int num1 = -24816060;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -731361901)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1322364253 ^ -1934543038;
            continue;
          case 3:
            this.Clear();
            num1 = (int) num2 * -844581744 ^ -1303063258;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.WhitePieces.Values.GetEnumerator();
      try
      {
label_10:
        int num3 = enumerator1.MoveNext() ? -1603201530 : (num3 = -2050859691);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -731361901)) % 5U)
          {
            case 1:
              this.FindMoveFrom(enumerator1.Current.Current);
              num3 = -659754910;
              continue;
            case 2:
              num3 = -1603201530;
              continue;
            case 3:
              num3 = (int) num4 * -401346714 ^ -1655484755;
              continue;
            case 4:
              goto label_10;
            default:
              goto label_17;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_13:
        int num5 = -1865965344;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -731361901)) % 3U)
          {
            case 0:
              goto label_13;
            case 1:
              num5 = (int) num6 * 1721519546 ^ -1044801403;
              continue;
            default:
              goto label_16;
          }
        }
label_16:;
      }
label_17:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator2 = this.board.BlackPieces.Values.GetEnumerator())
      {
label_23:
        int num7 = enumerator2.MoveNext() ? -572690802 : (num7 = -1889218817);
        ChessPiece current;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ -731361901)) % 5U)
          {
            case 0:
              num7 = -572690802;
              continue;
            case 1:
              this.FindMoveFrom(current.Current);
              num7 = (int) num8 * -1742238617 ^ -1139633261;
              continue;
            case 3:
              goto label_23;
            case 4:
              current = enumerator2.Current;
              num7 = -1818435605;
              continue;
            default:
              goto label_27;
          }
        }
      }
label_27:
      if (!this.board.ShowAllMoves)
        return;
label_28:
      int num9 = -628386725;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ -731361901)) % 3U)
        {
          case 0:
            goto label_25;
          case 1:
            this.HighLightMoveStyle();
            num9 = (int) num10 * 1542601134 ^ 1141084861;
            continue;
          case 2:
            goto label_28;
          default:
            goto label_21;
        }
      }
label_25:
      return;
label_21:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = 1389961752;
      Pieces kind;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 305571747)) % 19U)
        {
          case 0:
label_21:
            this.handleRook(x);
            num1 = 1879679121;
            continue;
          case 1:
            switch (kind)
            {
              case Pieces.Pawn:
                goto label_17;
              case Pieces.Knight:
                goto label_20;
              case Pieces.Bishop:
                goto label_15;
              case Pieces.Rook:
                goto label_21;
              case Pieces.King:
                goto label_13;
              case Pieces.Queen:
                goto label_16;
              default:
                num1 = (int) num2 * -559115348 ^ 1261255435;
                continue;
            }
          case 2:
            num1 = (int) num2 * -1781146849 ^ -1659991218;
            continue;
          case 3:
            num1 = (int) num2 * -610479275 ^ -401018708;
            continue;
          case 4:
label_13:
            this.handleKing(x);
            num1 = 2116966885;
            continue;
          case 5:
label_17:
            this.handlePawn(x);
            num1 = 897904241;
            continue;
          case 6:
            kind = x.Piece.Kind;
            num1 = (int) num2 * 781046370 ^ -1041177215;
            continue;
          case 7:
            num1 = (int) num2 * 447126566 ^ 468554753;
            continue;
          case 8:
            num1 = (int) num2 * -1527185474 ^ -1796876875;
            continue;
          case 9:
            num1 = (int) num2 * -2075552458 ^ -1396194017;
            continue;
          case 10:
label_15:
            this.handleBishop(x);
            num1 = 1026885920;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num2 * 397976759 ^ 1527249713;
            continue;
          case 13:
label_20:
            this.handleKnight(x);
            num1 = 1917083574;
            continue;
          case 14:
            num1 = (int) num2 * -1052781971 ^ -1147143460;
            continue;
          case 15:
            goto label_3;
          case 16:
            num1 = (int) num2 * -445464672 ^ -1869084977;
            continue;
          case 17:
label_16:
            this.handleQueen(x);
            num1 = 1639395561;
            continue;
          case 18:
            num1 = (int) num2 * 223361653 ^ -1496452074;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
      int num2 = 0;
label_1:
      int num3 = -1848354070;
      while (true)
      {
        uint num4;
        int num5;
        Square square;
        bool flag1;
        int num6;
        bool flag2;
        int num7;
        bool isEmpty;
        bool flag3;
        int b;
        bool flag4;
        bool flag5;
        bool flag6;
        int num8;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num4 = (uint) (num3 ^ -1611278927)) % 67U)
        {
          case 0:
            num1 = x.File + 1;
            num3 = -1909130999;
            continue;
          case 1:
            int num19;
            num3 = num19 = num7 < 8 ? -370748935 : (num19 = -773159480);
            continue;
          case 2:
            num9 = 2;
            break;
          case 3:
            if (num2 >= 0)
            {
              num3 = (int) num4 * -764055658 ^ 1560174434;
              continue;
            }
            goto label_34;
          case 4:
            square = this.board[num1, num2];
            flag1 = !square.IsEmpty;
            num3 = (int) num4 * 57615644 ^ 1692286781;
            continue;
          case 5:
            num11 = this.board[num7, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_40;
          case 6:
            num12 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_79;
          case 7:
            if (num1 >= 0)
            {
              num3 = (int) num4 * 191510004 ^ 686880056;
              continue;
            }
            goto label_67;
          case 8:
            int num20 = flag12 ? -434806651 : (num20 = -429307446);
            num3 = num20 ^ (int) num4 * -1015774733;
            continue;
          case 9:
            num3 = (int) num4 * 458890273 ^ -271575;
            continue;
          case 10:
            square = this.board[num1, num2];
            num3 = (int) num4 * -229008149 ^ 1592036221;
            continue;
          case 11:
            goto label_1;
          case 12:
            if (this.board[num7, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num3 = (int) num4 * -341718250 ^ -288453829;
              continue;
            }
            num11 = 0;
            goto label_40;
          case 13:
            num15 = 6;
            goto label_46;
          case 14:
            goto label_3;
          case 15:
            num2 = x.Rank + num8;
            num3 = (int) num4 * 1445604099 ^ 2000328921;
            continue;
          case 16:
            int num21 = flag9 ? 1811190233 : (num21 = 1833120148);
            num3 = num21 ^ (int) num4 * -905085768;
            continue;
          case 17:
            num10 = num2 < 8 ? 1 : 0;
            goto label_35;
          case 18:
            square = this.board[num1, num2];
            num3 = (int) num4 * -406955716 ^ 178349775;
            continue;
          case 19:
            flag2 = x.Rank == num6;
            num3 = -2050699438;
            continue;
          case 20:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * -121380596 ^ 594095600;
            continue;
          case 21:
            flag3 = this.board.lastPassantPawn == this.board[num5, x.Rank].Piece;
            num3 = (int) num4 * -649251790 ^ -1258702291;
            continue;
          case 22:
            num3 = (int) num4 * -1159012579 ^ -898501585;
            continue;
          case 23:
            if (num2 >= 0)
            {
              num3 = (int) num4 * 2028073407 ^ 864290982;
              continue;
            }
            goto label_67;
          case 24:
            num17 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_20;
          case 25:
            num2 = x.Rank + 2 * num8;
            num3 = (int) num4 * 355457636 ^ 1514699946;
            continue;
          case 26:
            num18 = num2 < 8 ? 1 : 0;
            goto label_61;
          case 27:
            num3 = -35338750;
            continue;
          case 28:
            int num22 = !square.IsEmpty ? -1856396859 : (num22 = -910496531);
            num3 = num22 ^ (int) num4 * -1818233798;
            continue;
          case 29:
            num13 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_32;
          case 30:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * -1540598548 ^ 1647273465;
            continue;
          case 31:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * -932954416 ^ 1708192408;
            continue;
          case 32:
            int num23 = flag2 ? -987007327 : (num23 = -1930572536);
            num3 = num23 ^ (int) num4 * 326300754;
            continue;
          case 33:
            int num24 = !flag6 ? -742654073 : (num24 = -1737179460);
            num3 = num24 ^ (int) num4 * 1941945601;
            continue;
          case 34:
            int num25 = flag1 ? 2048650518 : (num25 = 1829955068);
            num3 = num25 ^ (int) num4 * 484838279;
            continue;
          case 35:
            int num26 = this.board[num5, x.Rank].Piece != null ? 1418282576 : (num26 = 255141861);
            num3 = num26 ^ (int) num4 * -1514907402;
            continue;
          case 36:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num3 = (int) num4 * -701154802 ^ 2102578487;
            continue;
          case 37:
            int num27 = flag7 ? -1931501813 : (num27 = -1431509028);
            num3 = num27 ^ (int) num4 * 956894505;
            continue;
          case 38:
            if (this.board[num5, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num3 = (int) num4 * -1455616365 ^ 1154937044;
              continue;
            }
            num17 = 0;
            goto label_20;
          case 39:
            num3 = (int) num4 * -616059402 ^ -960939829;
            continue;
          case 40:
            if (x.Piece.Color == PieceColor.White)
            {
              num15 = 1;
              goto label_46;
            }
            else
            {
              num3 = (int) num4 * -634436322 ^ 1869004716;
              continue;
            }
          case 41:
            int num28 = flag11 ? 1943417055 : (num28 = 842093998);
            num3 = num28 ^ (int) num4 * 853291541;
            continue;
          case 42:
            num7 = x.File + 1;
            num3 = (int) num4 * 705186424 ^ -1518034192;
            continue;
          case 43:
            num3 = -955846556;
            continue;
          case 44:
            flag12 = num5 >= 0;
            num3 = (int) num4 * 264459550 ^ 1695176388;
            continue;
          case 45:
            if (flag4)
            {
              num9 = 5;
              break;
            }
            num3 = (int) num4 * -1487847155 ^ 878929280;
            continue;
          case 46:
            num16 = -1;
            goto label_91;
          case 47:
            int num29 = this.board.lastPassantPawn == this.board[num7, x.Rank].Piece ? -1546028027 : (num29 = -31348954);
            num3 = num29 ^ (int) num4 * -287666395;
            continue;
          case 48:
            int num30 = flag3 ? 354164923 : (num30 = 1621477811);
            num3 = num30 ^ (int) num4 * 587562308;
            continue;
          case 49:
            num14 = num2 < 8 ? 1 : 0;
            goto label_68;
          case 50:
            num3 = (int) num4 * 1647316775 ^ 1338875483;
            continue;
          case 51:
            int num31 = !isEmpty ? 1487574871 : (num31 = 1815474416);
            num3 = num31 ^ (int) num4 * 2129008375;
            continue;
          case 52:
            num3 = -402443803;
            continue;
          case 53:
            isEmpty = square.IsEmpty;
            num3 = (int) num4 * 1237762840 ^ -98076518;
            continue;
          case 54:
            num3 = (int) num4 * -1807233875 ^ 532884539;
            continue;
          case 55:
            int num32 = flag5 ? 1324913938 : (num32 = 471028248);
            num3 = num32 ^ (int) num4 * 1691109674;
            continue;
          case 56:
            if (x.Rank == 4)
            {
              num3 = -1093598553;
              continue;
            }
            num12 = 0;
            goto label_79;
          case 57:
            flag10 = this.board[num7, x.Rank].Piece != null;
            num3 = (int) num4 * 514083050 ^ -1309524357;
            continue;
          case 58:
            int num33 = !flag10 ? -1082159652 : (num33 = -2073899363);
            num3 = num33 ^ (int) num4 * 679079346;
            continue;
          case 59:
            num5 = x.File - 1;
            num3 = (int) num4 * 1064657955 ^ 1015821005;
            continue;
          case 60:
            this.addCapture(num7, b, x, this.board[num7, x.Rank].Piece);
            num3 = (int) num4 * 848503416 ^ 2085864440;
            continue;
          case 61:
            num2 = x.Rank + num8;
            if (num2 >= 0)
            {
              num3 = (int) num4 * -2022276167 ^ 491400599;
              continue;
            }
            num18 = 0;
            goto label_61;
          case 62:
            if (num1 < 8)
            {
              num3 = (int) num4 * 242637675 ^ 602547693;
              continue;
            }
            goto label_34;
          case 63:
            num3 = -2093534428;
            continue;
          case 64:
            int num34 = flag8 ? 800451249 : (num34 = 1284491294);
            num3 = num34 ^ (int) num4 * 1640300073;
            continue;
          case 65:
            num1 = x.File - 1;
            num2 = x.Rank + num8;
            num3 = -903811277;
            continue;
          case 66:
            this.addMove(num1, num2, x);
            num3 = (int) num4 * -1432681436 ^ 781591786;
            continue;
          default:
            goto label_101;
        }
        b = num9;
        bool flag13;
        flag5 = flag4 | flag13;
        num3 = -489018328;
        continue;
label_20:
        flag6 = num17 != 0;
        num3 = -1079846979;
        continue;
label_32:
        flag13 = num13 != 0;
        num3 = -1061955013;
        continue;
label_34:
        num10 = 0;
label_35:
        flag7 = num10 != 0;
        num3 = -839365303;
        continue;
label_40:
        flag8 = num11 != 0;
        num3 = -937412521;
        continue;
label_46:
        num6 = num15;
        if (x.Piece.Color != PieceColor.White)
        {
          num3 = -369493038;
          continue;
        }
        num16 = 1;
        goto label_91;
label_61:
        flag9 = num18 != 0;
        num3 = -1770137429;
        continue;
label_67:
        num14 = 0;
label_68:
        flag11 = num14 != 0;
        num3 = -997629586;
        continue;
label_79:
        flag4 = num12 != 0;
        if (x.Rank != 3)
        {
          num13 = 0;
          goto label_32;
        }
        else
        {
          num3 = -1934008709;
          continue;
        }
label_91:
        num8 = num16;
        num1 = x.File;
        num3 = -324413882;
      }
label_3:
      return;
label_101:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = -91725758;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2064405770)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.handleRook(x);
            num1 = (int) num2 * -1253150687 ^ -553449741;
            continue;
          case 2:
            num1 = (int) num2 * 1183533588 ^ -1296538347;
            continue;
          case 3:
            this.handleBishop(x);
            num1 = (int) num2 * -180534477 ^ -34475353;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void handleKing(Square x)
    {
label_1:
      int num1 = 442968420;
      bool canCastleQueenSide1;
      bool canCastleQueenSide2;
      bool flag1;
      bool flag2;
      bool canCastleKingSide;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 550641600)) % 28U)
        {
          case 0:
            this.handleBigCastling(x);
            num1 = (int) num2 * 2133534057 ^ -1702779026;
            continue;
          case 1:
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * -2069860263 ^ 189830905;
            continue;
          case 2:
            flag1 = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -2052226681 ^ -682542469;
            continue;
          case 3:
            canCastleQueenSide2 = this.board.BlackCanCastleQueenSide;
            num1 = 2018392453;
            continue;
          case 4:
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 1101946419 ^ 985679250;
            continue;
          case 5:
            int num3 = !canCastleQueenSide2 ? 971258696 : (num3 = 734024441);
            num1 = num3 ^ (int) num2 * 1504880086;
            continue;
          case 6:
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * -357182673 ^ 87920254;
            continue;
          case 7:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1095513554 ^ 1426101956;
            continue;
          case 8:
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * 635348146 ^ -266087422;
            continue;
          case 9:
            flag2 = x.Piece.Color == PieceColor.Black;
            num1 = 1040352645;
            continue;
          case 10:
            canCastleKingSide = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * -1138769393 ^ -897289515;
            continue;
          case 11:
            num1 = 1551140289;
            continue;
          case 12:
            int num4 = !this.board.BlackCanCastleKingSide ? 129430667 : (num4 = 670649546);
            num1 = num4 ^ (int) num2 * 1976326333;
            continue;
          case 13:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -2026881321 ^ 580246392;
            continue;
          case 14:
            goto label_1;
          case 15:
            canCastleQueenSide1 = this.board.WhiteCanCastleQueenSide;
            num1 = 945142237;
            continue;
          case 16:
            this.addMove(x.File + 1, x.Rank + 1, x);
            num1 = (int) num2 * 1006419762 ^ 882106667;
            continue;
          case 17:
            int num5 = !flag1 ? 2070655029 : (num5 = 467020002);
            num1 = num5 ^ (int) num2 * -1141866668;
            continue;
          case 18:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -107040868 ^ 789700975;
            continue;
          case 19:
            this.addMove(x.File + 1, x.Rank - 1, x);
            num1 = (int) num2 * -163886076 ^ -970733571;
            continue;
          case 20:
            this.addMove(x.File - 1, x.Rank, x);
            this.addMove(x.File, x.Rank + 1, x);
            num1 = (int) num2 * -528340243 ^ 1429676324;
            continue;
          case 21:
            int num6 = !canCastleQueenSide1 ? -1936959126 : (num6 = -424530651);
            num1 = num6 ^ (int) num2 * 1128478981;
            continue;
          case 22:
            num1 = 2048148367;
            continue;
          case 23:
            goto label_3;
          case 24:
            num1 = (int) num2 * 624085503 ^ 513964732;
            continue;
          case 25:
            int num7 = !flag2 ? -1417460133 : (num7 = -458210860);
            num1 = num7 ^ (int) num2 * 445142468;
            continue;
          case 26:
            num1 = (int) num2 * -668131717 ^ 472455461;
            continue;
          case 27:
            int num8 = canCastleKingSide ? 1544709749 : (num8 = 1494950347);
            num1 = num8 ^ (int) num2 * 1693432708;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = 567099718;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ 727982410)) % 8U)
        {
          case 0:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_11;
          case 1:
            square1 = this.board[x.File - 2, x.Rank];
            num1 = (int) num2 * -1154597179 ^ 1663630333;
            continue;
          case 2:
            square3 = this.board[x.File - 3, x.Rank];
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * -1909945901 ^ -941321633;
              continue;
            }
            break;
          case 3:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 17889716 ^ -1968568434;
              continue;
            }
            break;
          case 4:
            square2 = this.board[x.File - 1, x.Rank];
            num1 = (int) num2 * 1756089634 ^ 1399626043;
            continue;
          case 5:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * -1747231813 ^ -1948996006;
            continue;
          case 6:
            goto label_1;
          case 7:
            goto label_3;
          default:
            goto label_14;
        }
        num3 = 0;
label_11:
        int num4;
        num1 = num4 = num3 != 0 ? 255079503 : (num4 = 1743491069);
      }
label_3:
      return;
label_14:;
    }

    private void handleSmallCastling(Square x)
    {
      Square square1 = this.board[x.File + 1, x.Rank];
label_1:
      int num1 = -2117317474;
      while (true)
      {
        uint num2;
        Square square2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1940671125)) % 7U)
        {
          case 0:
            num3 = square2.IsEmpty ? 1 : 0;
            break;
          case 1:
            goto label_3;
          case 2:
            if (!square1.IsEmpty)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 877705131 ^ -521455410;
            continue;
          case 3:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -177493045 ^ 1545135897;
            continue;
          case 4:
            square2 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * -77759911 ^ 1920364278;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num4 = !flag ? 965649485 : (num4 = 1540979021);
            num1 = num4 ^ (int) num2 * -1391066501;
            continue;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = -198894158;
      }
label_3:
      return;
label_12:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = -795807087;
      int num2;
      bool flag1;
      int num3;
      int num4;
      bool flag2;
      int num5;
      int b1;
      int b2;
      bool flag3;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1158589440)) % 35U)
        {
          case 0:
            num1 = (int) num6 * 48292471 ^ 1620932831;
            continue;
          case 1:
            int num7 = this.addMove(x.File - num4, x.Rank, x) ? -2138053273 : (num7 = -1083688677);
            num1 = num7 ^ (int) num6 * -1517880911;
            continue;
          case 2:
            flag1 = this.addMove(x.File, b1, x);
            num1 = (int) num6 * 171542572 ^ -579110993;
            continue;
          case 3:
            flag3 = num4 < 8;
            num1 = -1052777324;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = -688894548;
            continue;
          case 6:
            int num8 = this.addMove(x.File, b2, x) ? 1939644780 : (num8 = 1234003853);
            num1 = num8 ^ (int) num6 * -1995395327;
            continue;
          case 7:
            ++num2;
            num1 = -1634695754;
            continue;
          case 8:
            int num9 = !flag3 ? 1544044572 : (num9 = 1608465610);
            num1 = num9 ^ (int) num6 * 1540967174;
            continue;
          case 9:
            int num10;
            num1 = num10 = num2 < 8 ? -1967536418 : (num10 = -649894978);
            continue;
          case 10:
            num3 = 1;
            num1 = -1265544106;
            continue;
          case 11:
            int num11 = !this.addMove(x.File + num3, x.Rank, x) ? -1676374894 : (num11 = -1665816101);
            num1 = num11 ^ (int) num6 * -1673901852;
            continue;
          case 12:
            flag2 = num5 < 8;
            num1 = -2051198261;
            continue;
          case 13:
            b2 = x.Rank + num2;
            num1 = (int) num6 * 646008575 ^ -1260111568;
            continue;
          case 14:
            int num12 = flag2 ? 55846312 : (num12 = 353566748);
            num1 = num12 ^ (int) num6 * -1236308623;
            continue;
          case 15:
            ++num5;
            num1 = (int) num6 * -1443855142 ^ -314550459;
            continue;
          case 16:
            num1 = (int) num6 * -1610064612 ^ 1741370415;
            continue;
          case 17:
            num1 = (int) num6 * 163243769 ^ -2032941885;
            continue;
          case 18:
            num1 = -268530681;
            continue;
          case 19:
            b1 = x.Rank - num5;
            num1 = (int) num6 * -166554603 ^ -423750756;
            continue;
          case 20:
            ++num4;
            num1 = (int) num6 * 458119022 ^ 351187963;
            continue;
          case 21:
            num1 = -40574323;
            continue;
          case 22:
            num1 = (int) num6 * -1536348924 ^ -1316286056;
            continue;
          case 23:
            num1 = -1777517800;
            continue;
          case 24:
            num2 = 1;
            num1 = (int) num6 * 2123492502 ^ -1617658682;
            continue;
          case 25:
            num1 = (int) num6 * 1164478340 ^ 1472306550;
            continue;
          case 26:
            int num13;
            num1 = num13 = num3 >= 8 ? -1602266142 : (num13 = -1177643545);
            continue;
          case 27:
            int num14 = flag1 ? 1357028441 : (num14 = 764959311);
            num1 = num14 ^ (int) num6 * -1419433447;
            continue;
          case 28:
            num1 = -462876970;
            continue;
          case 29:
            num4 = 1;
            num1 = -1083739633;
            continue;
          case 30:
            num1 = -913629898;
            continue;
          case 31:
            goto label_1;
          case 32:
            num5 = 1;
            num1 = -140752402;
            continue;
          case 33:
            num1 = (int) num6 * 443556987 ^ 1433183757;
            continue;
          case 34:
            ++num3;
            num1 = -1265544106;
            continue;
          default:
            goto label_37;
        }
      }
label_3:
      return;
label_37:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = 497929795;
      int num2;
      int num3;
      bool flag1;
      int a1;
      bool flag2;
      bool flag3;
      int num4;
      int a2;
      int a3;
      int b1;
      int b2;
      int num5;
      bool flag4;
      bool flag5;
      int b3;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 40712534)) % 40U)
        {
          case 0:
            b1 = x.Rank + num4;
            num1 = (int) num6 * -974190957 ^ 421510308;
            continue;
          case 1:
            flag5 = this.addMove(a1, b2, x);
            num1 = (int) num6 * -816558987 ^ -872399107;
            continue;
          case 2:
            a3 = x.File + num2;
            num1 = (int) num6 * -259574279 ^ -784731065;
            continue;
          case 3:
            b3 = x.Rank - num2;
            num1 = (int) num6 * 1767622677 ^ -876587215;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num6 * -1334239969 ^ -1772388291;
            continue;
          case 6:
            num1 = (int) num6 * 1750855974 ^ -1302450367;
            continue;
          case 7:
            num1 = (int) num6 * 2069662941 ^ 935668808;
            continue;
          case 8:
            num1 = (int) num6 * -635795569 ^ 1323833206;
            continue;
          case 9:
            int num7 = !flag4 ? -1857414227 : (num7 = -1421634937);
            num1 = num7 ^ (int) num6 * 725848616;
            continue;
          case 10:
            num1 = 86342904;
            continue;
          case 11:
            ++num5;
            num1 = (int) num6 * -1661230856 ^ -128105630;
            continue;
          case 12:
            int num8 = flag2 ? -249433285 : (num8 = -159425223);
            num1 = num8 ^ (int) num6 * 1352971024;
            continue;
          case 13:
            num1 = (int) num6 * -998204726 ^ 661422688;
            continue;
          case 14:
            num1 = 251135801;
            continue;
          case 15:
            flag2 = this.addMove(x.File - num5, x.Rank - num5, x);
            num1 = 1486752970;
            continue;
          case 16:
            int num9 = !this.addMove(a3, b3, x) ? -2036340972 : (num9 = -2002195232);
            num1 = num9 ^ (int) num6 * 1864632188;
            continue;
          case 17:
            b2 = x.Rank + num3;
            num1 = (int) num6 * 1893550624 ^ 424335607;
            continue;
          case 18:
            goto label_1;
          case 19:
            num5 = 1;
            num1 = 1328587764;
            continue;
          case 20:
            a1 = x.File + num3;
            num1 = 2113804351;
            continue;
          case 21:
            num3 = 1;
            num1 = (int) num6 * -332021392 ^ -1036358528;
            continue;
          case 22:
            ++num2;
            num1 = (int) num6 * -1636775358 ^ -1506473041;
            continue;
          case 23:
            num1 = 1233185157;
            continue;
          case 24:
            num2 = 1;
            num1 = 1559008673;
            continue;
          case 25:
            num1 = 1159316604;
            continue;
          case 26:
            num1 = (int) num6 * -1801519914 ^ -1813457818;
            continue;
          case 27:
            num4 = 1;
            num1 = 1604903446;
            continue;
          case 28:
            int num10 = !flag1 ? 348815938 : (num10 = 1743867486);
            num1 = num10 ^ (int) num6 * -2024167037;
            continue;
          case 29:
            num1 = (int) num6 * -909208396 ^ 1911196929;
            continue;
          case 30:
            int num11 = !flag5 ? -1954932254 : (num11 = -585915759);
            num1 = num11 ^ (int) num6 * -874437821;
            continue;
          case 31:
            int num12 = !flag3 ? -302987166 : (num12 = -836125762);
            num1 = num12 ^ (int) num6 * -1775691029;
            continue;
          case 32:
            int num13;
            num1 = num13 = num4 >= 8 ? 2019398482 : (num13 = 856329629);
            continue;
          case 33:
            ++num4;
            num1 = 843853750;
            continue;
          case 34:
            flag3 = this.addMove(a2, b1, x);
            num1 = (int) num6 * 203080576 ^ -756446095;
            continue;
          case 35:
            a2 = x.File - num4;
            num1 = 876035126;
            continue;
          case 36:
            int num14;
            num1 = num14 = num5 >= 8 ? 438133925 : (num14 = 1385254265);
            continue;
          case 37:
            flag4 = num2 < 8;
            num1 = 1668339535;
            continue;
          case 38:
            flag1 = num3 < 8;
            num1 = 1366978882;
            continue;
          case 39:
            ++num3;
            num1 = (int) num6 * 130153122 ^ -265721202;
            continue;
          default:
            goto label_42;
        }
      }
label_3:
      return;
label_42:;
    }

    private void handleKnight(Square x)
    {
      ChessPiece piece = x.Piece;
      int[] numArray1 = new int[8];
      // ISSUE: field reference
      MoveFinder.\u206C​​​‌⁪​‬⁯⁭⁭‮⁮‭⁯‭⁯⁮‌‫‮‍⁫⁪‪‌‪​⁪‬​‌‪‌‬‪‪‮‍‪‮((Array) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
      int[] numArray2 = numArray1;
label_1:
      int num1 = -2078593584;
      while (true)
      {
        uint num2;
        Square sq;
        bool flag1;
        int[] numArray3;
        int index;
        int File;
        int Rank;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -676528010)) % 23U)
        {
          case 0:
            num1 = (int) num2 * 948608099 ^ -970535602;
            continue;
          case 1:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 397580968 ^ -628082498;
            continue;
          case 2:
            int num4 = flag1 ? 555341325 : (num4 = 8261975);
            num1 = num4 ^ (int) num2 * -39320656;
            continue;
          case 3:
            num1 = (int) num2 * -823428605 ^ 1244836631;
            continue;
          case 4:
            if (File <= 7)
            {
              num1 = (int) num2 * -1117877588 ^ -930354546;
              continue;
            }
            break;
          case 5:
            num1 = (int) num2 * 221416092 ^ -592347757;
            continue;
          case 6:
            int num5 = flag2 ? -1981783989 : (num5 = -796478049);
            num1 = num5 ^ (int) num2 * -1913101572;
            continue;
          case 7:
            int num6 = sq.IsEmpty ? -154978974 : (num6 = -1783567866);
            num1 = num6 ^ (int) num2 * 857240558;
            continue;
          case 8:
            num1 = -1057096639;
            continue;
          case 9:
            ++index;
            num1 = -1737266741;
            continue;
          case 10:
            if (File >= 0)
            {
              num1 = (int) num2 * -1585797570 ^ 462391490;
              continue;
            }
            break;
          case 11:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -1881108317 ^ 381410459;
            continue;
          case 12:
            flag2 = index < 8;
            num1 = -1279175559;
            continue;
          case 13:
            File = x.File + numArray2[index];
            num1 = (int) num2 * -1906024536 ^ -1555902171;
            continue;
          case 14:
            num1 = -2126182772;
            continue;
          case 15:
            Rank = x.Rank + numArray3[index];
            num1 = (int) num2 * 47928354 ^ -2049974945;
            continue;
          case 16:
            goto label_3;
          case 17:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206C​​​‌⁪​‬⁯⁭⁭‮⁮‭⁯‭⁯⁮‌‫‮‍⁫⁪‪‌‪​⁪‬​‌‪‌‬‪‪‮‍‪‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray3 = numArray4;
            index = 0;
            num1 = (int) num2 * -1711003194 ^ -423785041;
            continue;
          case 18:
            num3 = Rank > 7 ? 1 : 0;
            goto label_19;
          case 19:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 579319125 ^ -1237510897;
              continue;
            }
            break;
          case 20:
            flag1 = sq.Piece.Color != x.Piece.Color;
            num1 = -48278019;
            continue;
          case 21:
            goto label_1;
          case 22:
            sq = this.board[File, Rank];
            num1 = -985110713;
            continue;
          default:
            goto label_30;
        }
        num3 = 1;
label_19:
        int num7;
        num1 = num7 = num3 == 0 ? -1328216252 : (num7 = -440534112);
      }
label_3:
      return;
label_30:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
      ChessPiece piece = x.Piece;
label_1:
      int num1 = -847005227;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1527928709)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            sq = this.board[a, b];
            num1 = (int) num2 * 1542488620 ^ -1597555300;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -30975588 ^ -573594408;
            continue;
          case 4:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * 2095838054 ^ 659560252;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
      if (a < 0)
        goto label_16;
label_1:
      int num1 = -739895079;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        UserAction kind;
        ChessPiece piece;
        Square sq;
        bool isEmpty;
        bool flag3;
        bool flag4;
        int num3;
        switch ((num2 = (uint) (num1 ^ -440350110)) % 30U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1600388077 ^ 219827485;
            continue;
          case 2:
            num1 = (int) num2 * 1586580395 ^ 2109293757;
            continue;
          case 3:
            if (x.Piece.Kind == Pieces.King)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 54897980 ^ 1544953864;
            continue;
          case 4:
            int num4 = flag2 ? 1510512847 : (num4 = 1413224602);
            num1 = num4 ^ (int) num2 * -1941969388;
            continue;
          case 5:
            flag3 = sq.Piece.Color != x.Piece.Color;
            num1 = -803084935;
            continue;
          case 6:
            num1 = (int) num2 * -1035913349 ^ 318966385;
            continue;
          case 7:
            int num5 = flag3 ? -995788369 : (num5 = -321077489);
            num1 = num5 ^ (int) num2 * 300456835;
            continue;
          case 8:
            flag1 = true;
            num1 = -735935648;
            continue;
          case 9:
            if (a <= 7)
            {
              num1 = (int) num2 * 1348236804 ^ 1479185045;
              continue;
            }
            goto label_16;
          case 10:
            num1 = (int) num2 * -2052840642 ^ -1177174064;
            continue;
          case 11:
            num1 = -1791943216;
            continue;
          case 12:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 13:
            int num6 = sq.Piece.Kind != Pieces.King ? -1291690734 : (num6 = -1386394700);
            num1 = num6 ^ (int) num2 * -1848578426;
            continue;
          case 14:
            sq = this.board[a, b];
            num1 = (int) num2 * 1027011049 ^ 1556145267;
            continue;
          case 15:
            int num7 = isEmpty ? -272962845 : (num7 = -1000500878);
            num1 = num7 ^ (int) num2 * -19697923;
            continue;
          case 16:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -2133177193 ^ -1030182405;
            continue;
          case 17:
            flag1 = false;
            num1 = -128491699;
            continue;
          case 18:
            num1 = (int) num2 * 259890014 ^ -436070844;
            continue;
          case 19:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * -446710782 ^ 123239433;
            continue;
          case 21:
            goto label_15;
          case 22:
            num1 = (int) num2 * -1611293266 ^ -489396776;
            continue;
          case 23:
            int num8 = !flag4 ? 293124907 : (num8 = 833040166);
            num1 = num8 ^ (int) num2 * 458184182;
            continue;
          case 24:
            piece = x.Piece;
            num1 = -410897712;
            continue;
          case 25:
            if (b >= 0)
            {
              num1 = (int) num2 * -1164496784 ^ -71419753;
              continue;
            }
            goto label_16;
          case 26:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            flag1 = true;
            num1 = -440253850;
            continue;
          case 27:
            kind = UserAction.Capture;
            num1 = (int) num2 * 1627887140 ^ 1465856917;
            continue;
          case 28:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * 1733695542 ^ -950009487;
            continue;
          case 29:
            flag1 = true;
            num1 = (int) num2 * -184647340 ^ 382664;
            continue;
          default:
            goto label_38;
        }
        flag4 = num3 != 0;
        num1 = -811867449;
      }
label_15:
      int num9 = b > 7 ? 1 : 0;
      goto label_17;
label_38:
      return flag1;
label_16:
      num9 = 1;
label_17:
      flag2 = num9 != 0;
      num1 = -1462710288;
      goto label_2;
    }

    static void \u206C​​​‌⁪​‬⁯⁭⁭‮⁮‭⁯‭⁯⁮‌‫‮‍⁫⁪‪‌‪​⁪‬​‌‪‌‬‪‪‮‍‪‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
