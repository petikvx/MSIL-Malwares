// Decompiled with JetBrains decompiler
// Type: 똄ᐥ꓿䵉펀ᆛ砪
// Assembly: Mains, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 87A24014-4235-4CFD-B5E9-8BC1446D37FE
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Llac.cngn-840708e58ff5f353e7ccf1a3e18dd92ffbd88eddd34568dc7ad3dc323ccd1679.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

internal static class 똄ᐥ\uF1DE\uA4FF䵉펀ᆛ砪
{
  [DllImport("ntdll.dll", EntryPoint = "NtQueryInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  private static extern int 鹜檎뾦슝ᧀﳁ㣗ꄀ(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength,
    out int ReturnLength);

  [DllImport("ntdll.dll", EntryPoint = "NtSetInformationProcess", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  private static extern uint 鱘嬝챖\uE6DC阁ﺮ譀봊(
    IntPtr ProcessHandle,
    int ProcessInformationClass,
    byte[] ProcessInformation,
    uint ProcessInformationLength);

  [DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
  private static extern bool 㢬䖔\uE780\u215E\u09FE뭭늈栅(IntPtr hObject);

  [DllImport("kernel32.dll", EntryPoint = "IsDebuggerPresent")]
  private static extern bool 纭\uEC26嵮珯\u242D틁舉\uE1A7();

  [DllImport("kernel32.dll", EntryPoint = "OutputDebugString")]
  private static extern int 腮遙笞㶩ょ\u9FD9闥貏(string str);

  public static void \u2383륫䨚俼쟑긓䟗牍()
  {
    int num1 = 6 - (~5 - (-2 - (4 - 3 - -7)));
    while (true)
    {
      Thread thread;
      int num2;
      string environmentVariable;
      do
      {
        switch (num1)
        {
          case 1:
            thread.Start((object) null);
            num1 = -2 - ~(3 + 4);
            continue;
          case 2:
            environmentVariable = Environment.GetEnvironmentVariable("COR_ENABLE_PROFILING");
            num1 = ~-13 - (3 + 4);
            continue;
          case 3:
            goto label_6;
          case 4:
            goto label_7;
          case 5:
            goto label_10;
          case 6:
            goto label_12;
          default:
            num2 = Environment.GetEnvironmentVariable("COR_PROFILER") == null ? 1 : 0;
            goto label_11;
        }
      }
      while (environmentVariable != null);
      num1 = -(~-10 + ~8);
      continue;
label_6:
      num1 = ~(8 + -(7 + 7)) - 4;
      continue;
label_7:
      bool flag;
      if (!flag)
        Environment.FailFast("Profiler detected");
      thread = new Thread(new ParameterizedThreadStart(똄ᐥ\uF1DE\uA4FF䵉펀ᆛ砪.窌ﵣ\uF057Ⱗꑇﳝ\uFFFD㩶));
      thread.IsBackground = true;
      num1 = ~(-2 - (-5 - ~8)) - 2;
      continue;
label_10:
      num2 = 0;
label_11:
      flag = num2 != 0;
      num1 = ~-8 - 3;
    }
label_12:;
  }

  private static void 窌ﵣ\uF057Ⱗꑇﳝ\uFFFD㩶(object thread)
  {
    int num1 = -~-8 + 9;
    while (true)
    {
      bool flag;
      Thread thread1;
      int num2;
      do
      {
        int num3;
        switch (num1)
        {
          case 1:
            thread1 = new Thread(new ParameterizedThreadStart(똄ᐥ\uF1DE\uA4FF䵉펀ᆛ砪.窌ﵣ\uF057Ⱗꑇﳝ\uFFFD㩶));
            num1 = -7 - (~(8 - 6) - 15);
            continue;
          case 2:
            thread1 = thread as Thread;
            num1 = 24 - (6 + 5 + (3 + 2)) - (4 - 8) + 6;
            continue;
          case 3:
            num1 = ~~~-17;
            continue;
          case 4:
            if (!flag)
            {
              num1 = ~(-7 - -5);
              continue;
            }
            goto label_21;
          case 5:
            Thread.Sleep(1000);
            num1 = -~(6 - ~9 - 14);
            continue;
          case 6:
          case 16:
            goto label_21;
          case 7:
            goto label_12;
          case 8:
            goto label_13;
          case 9:
            if (flag)
              goto case 5;
            else
              goto label_15;
          case 10:
            goto label_16;
          case 11:
            goto label_17;
          case 12:
            num3 = !Debugger.IsLogging() ? 1 : 0;
            break;
          case 13:
            goto label_19;
          case 14:
            goto label_20;
          case 15:
            num2 = Debugger.IsAttached ? 1 : 0;
            num1 = -(~2 - -8 - -5 - (6 + 4));
            continue;
          case 17:
            goto label_22;
          case 18:
            goto label_24;
          default:
            num3 = 0;
            break;
        }
        flag = num3 != 0;
        num1 = 19 + (-6 - ~3);
      }
      while (num2 != 0);
      num1 = 5 - 7 - (~(2 + 7) - 10) - 6;
      continue;
label_12:
      flag = thread1.IsAlive;
      num1 = 22 + (-7 - (6 + 6)) - ~5;
      continue;
label_13:
      num1 = ~~(15 - --9);
      continue;
label_15:
      num1 = 9 - ~~-4;
      continue;
label_16:
      thread1.Start((object) Thread.CurrentThread);
      num1 = 31 - -(3 - 9) - (3 + 8);
      continue;
label_17:
      thread1.IsBackground = true;
      num1 = --(5 - -5);
      continue;
label_19:
      Environment.FailFast("Loop broken");
      num1 = -~(7 - ~(2 - 6));
      continue;
label_20:
      Thread.Sleep(500);
      num1 = ~-~-10;
      continue;
label_21:
      flag = true;
      num1 = -(~8 - (3 + 3));
      continue;
label_22:
      if (!flag)
      {
        Environment.FailFast("Debugger detected (Managed)");
        num1 = -~(-4 - ~(7 + 2));
        continue;
      }
      goto label_12;
label_24:
      flag = thread1 != null;
      num1 = ~(6 - 9) - -2;
    }
  }
}
