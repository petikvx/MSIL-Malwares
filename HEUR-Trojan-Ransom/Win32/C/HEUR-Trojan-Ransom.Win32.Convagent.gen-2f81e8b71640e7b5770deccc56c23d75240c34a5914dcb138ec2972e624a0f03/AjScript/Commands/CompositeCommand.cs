// Decompiled with JetBrains decompiler
// Type: AjScript.Commands.CompositeCommand
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using System.Collections.Generic;

namespace AjScript.Commands
{
  public class CompositeCommand : ICommand
  {
    private ICollection<ICommand> hoistedCommands;
    private ICollection<ICommand> commands;

    public CompositeCommand(ICollection<ICommand> commands)
      : this((ICollection<ICommand>) null, commands)
    {
    }

    public CompositeCommand(ICollection<ICommand> hoistedCommands, ICollection<ICommand> commands)
    {
      this.hoistedCommands = hoistedCommands;
      this.commands = commands;
    }

    public int CommandCount => this.commands == null ? 0 : this.commands.Count;

    public ICollection<ICommand> Commands => this.commands;

    public int HoistedCommandCount => this.hoistedCommands == null ? 0 : this.hoistedCommands.Count;

    public ICollection<ICommand> HoistedCommands => this.hoistedCommands;

    public virtual void Execute(IContext context)
    {
      if (this.hoistedCommands != null)
      {
        foreach (ICommand hoistedCommand in (IEnumerable<ICommand>) this.hoistedCommands)
          hoistedCommand.Execute(context);
      }
      foreach (ICommand command in (IEnumerable<ICommand>) this.commands)
      {
        command.Execute(context);
        if (context.ReturnValue != null)
          break;
      }
    }
  }
}
