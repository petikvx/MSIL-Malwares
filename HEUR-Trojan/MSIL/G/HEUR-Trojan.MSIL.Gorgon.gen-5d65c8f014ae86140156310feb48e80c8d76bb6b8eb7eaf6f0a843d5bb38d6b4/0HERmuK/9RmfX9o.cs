// Decompiled with JetBrains decompiler
// Type: 0HERmuK.9RmfX9o
// Assembly: rIHK739, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: DCC06416-0005-44FB-A994-2D27682899C4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-5d65c8f014ae86140156310feb48e80c8d76bb6b8eb7eaf6f0a843d5bb38d6b4.exe

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;

namespace \u0030HERmuK
{
  public class \u0039RmfX9o : IsoDateTimeConverter
  {
    public \u0039RmfX9o() => this.DateTimeFormat = "R";

    public virtual object a0ZifB6(
      JsonReader PbgQBOy,
      Type AZqmiGB,
      object _param3,
      JsonSerializer SurMC7N)
    {
      try
      {
        DateTime? nullable = this.ReadJson(PbgQBOy, AZqmiGB, _param3, SurMC7N) as DateTime?;
        if (nullable.HasValue && nullable.Value.Kind == DateTimeKind.Unspecified)
          nullable = new DateTime?(DateTime.SpecifyKind(nullable.Value, DateTimeKind.Utc));
        return (object) nullable;
      }
      catch (FormatException ex)
      {
        throw new JsonException("Unable to deserialize a Date.", (Exception) ex);
      }
    }

    public virtual void \u0037XKJtvm(JsonWriter KEDSctO, object MQrdd6d, JsonSerializer wnXMRJd)
    {
      try
      {
        this.WriteJson(KEDSctO, MQrdd6d, wnXMRJd);
      }
      catch (FormatException ex)
      {
        throw new JsonException("Unable to serialize a Date.", (Exception) ex);
      }
    }
  }
}
