// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.Player
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace FannyHeirdooBot
{
  public class Player
  {
    public readonly ReadOnlyCollection<Planet> Planets;
    public readonly ReadOnlyCollection<Fleet> Fleets;
    public int ShipGrowth;
    public int ShipCountInBase;
    public int ShipCountInTransit;

    public Player(IList<Fleet> fleets, IList<Planet> planets, IList<int> targets)
    {
label_1:
      int num1 = -446825691;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -67463100)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 952846072 ^ -1467265209;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.Fleets = new ReadOnlyCollection<Fleet>(fleets);
            this.Planets = new ReadOnlyCollection<Planet>(planets);
            num1 = (int) num2 * -289564798 ^ -677845514;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public int TotalShipCount
    {
      get
      {
label_1:
        int num1 = 2109508839;
        int totalShipCount;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 862412948)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 368642201 ^ -2077800033;
              continue;
            case 3:
              totalShipCount = this.ShipCountInBase + this.ShipCountInTransit;
              num1 = (int) num2 * 625574408 ^ 2041619810;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return totalShipCount;
      }
    }

    public Quadrant ShipOnPlanetFocus { get; set; }

    public Quadrant AbsolutePlanetFocus { get; set; }

    public Quadrant ShipInTransitFocus { get; set; }

    public IEnumerable<Planet> PlanetsUnderattack()
    {
      IEnumerable<Planet> planets = this.Planets.Where<Planet>((Func<Planet, bool>) (planet => planet.IsUnderAttack));
label_1:
      int num1 = -503068110;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -46559028)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -993342250 ^ 1263806870;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return planets;
    }
  }
}
