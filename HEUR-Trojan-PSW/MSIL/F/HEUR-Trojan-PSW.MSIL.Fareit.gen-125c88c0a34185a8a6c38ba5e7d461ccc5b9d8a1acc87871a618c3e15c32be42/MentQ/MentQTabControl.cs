// Decompiled with JetBrains decompiler
// Type: MentQ.MentQTabControl
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MentQ
{
  [Category("MentQ")]
  public class MentQTabControl : TabControl
  {
    private Color _backColor;

    public MentQTabControl()
    {
      this.Alignment = TabAlignment.Left;
      this.SizeMode = TabSizeMode.Fixed;
      this.ItemSize = new Size(35, 175);
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.OptimizedDoubleBuffer, true);
      this.BackColor = Color.FromArgb(55, 55, 55);
      this.ForeColor = Color.FromArgb(240, 240, 240, 240);
      this.Font = new Font("Segoe UI", 9f);
      this.DrawMode = TabDrawMode.OwnerDrawFixed;
      this.SelectedColor = Color.FromArgb(200, 80, 20);
    }

    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    [Category("Appearance")]
    public new Color ForeColor
    {
      get => base.ForeColor;
      set
      {
        base.ForeColor = value;
        this.Invalidate();
      }
    }

    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    [Category("Appearance")]
    public new Color BackColor
    {
      get => this._backColor;
      set
      {
        this._backColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public Color SelectedColor { get; set; }

    [Category("Appearance")]
    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        this.Invalidate();
      }
    }

    protected override void OnControlAdded(ControlEventArgs e)
    {
      if (e.Control.GetType() == typeof (TabPage))
        e.Control.BackColor = SystemColors.Control;
      base.OnControlAdded(e);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics1 = e.Graphics;
      graphics1.InterpolationMode = InterpolationMode.HighQualityBicubic;
      graphics1.Clear(this.BackColor);
      int num1 = 0;
      using (SolidBrush solidBrush1 = new SolidBrush(Color.FromArgb(100, this.ForeColor)))
      {
        using (SolidBrush solidBrush2 = new SolidBrush(this.ForeColor))
        {
          using (SolidBrush solidBrush3 = new SolidBrush(Color.FromArgb(40, 20, 20, 20)))
          {
            foreach (TabPage tabPage in this.TabPages)
            {
              Size size;
              SizeF sizeF;
              if (num1 == this.SelectedIndex)
              {
                Graphics graphics2 = graphics1;
                SolidBrush solidBrush4 = solidBrush3;
                int num2 = num1;
                size = this.ItemSize;
                int width1 = size.Width;
                int y1 = num2 * width1;
                size = this.ItemSize;
                int width2 = size.Height + 4;
                size = this.ItemSize;
                int width3 = size.Width;
                graphics2.FillRectangle((Brush) solidBrush4, 0, y1, width2, width3);
                Graphics graphics3 = graphics1;
                string text = tabPage.Text;
                Font font = this.Font;
                SolidBrush solidBrush5 = solidBrush2;
                int num3 = num1;
                size = this.ItemSize;
                int width4 = size.Width;
                double num4 = (double) (num3 * width4);
                size = this.ItemSize;
                double width5 = (double) size.Width;
                sizeF = graphics1.MeasureString(tabPage.Text, this.Font);
                double height = (double) sizeF.Height;
                double num5 = (width5 - height) / 2.0;
                double y2 = num4 + num5;
                graphics3.DrawString(text, font, (Brush) solidBrush5, 34f, (float) y2);
                using (SolidBrush solidBrush6 = new SolidBrush(this.SelectedColor))
                {
                  Graphics graphics4 = graphics1;
                  SolidBrush solidBrush7 = solidBrush6;
                  size = this.ItemSize;
                  int y3 = size.Width * num1;
                  size = this.ItemSize;
                  int width6 = size.Width;
                  graphics4.FillRectangle((Brush) solidBrush7, 0, y3, 3, width6);
                }
              }
              Graphics graphics5 = graphics1;
              string text1 = tabPage.Text;
              Font font1 = this.Font;
              SolidBrush solidBrush8 = solidBrush1;
              int num6 = num1;
              size = this.ItemSize;
              int width7 = size.Width;
              double num7 = (double) (num6 * width7);
              size = this.ItemSize;
              double width8 = (double) size.Width;
              sizeF = graphics1.MeasureString(tabPage.Text, this.Font);
              double height1 = (double) sizeF.Height;
              double num8 = (width8 - height1) / 2.0;
              double y4 = num7 + num8;
              graphics5.DrawString(text1, font1, (Brush) solidBrush8, 34f, (float) y4);
              if (this.ImageList != null)
              {
                int num9 = tabPage.ImageIndex;
                if (!string.IsNullOrEmpty(tabPage.ImageKey))
                  num9 = this.ImageList.Images.IndexOfKey(tabPage.ImageKey);
                if (num9 > -1)
                {
                  ImageList imageList = this.ImageList;
                  Graphics g = graphics1;
                  int num10 = num1;
                  size = this.ItemSize;
                  int width9 = size.Width;
                  int num11 = num10 * width9;
                  size = this.ItemSize;
                  int width10 = size.Width;
                  size = this.ImageList.ImageSize;
                  int height2 = size.Height;
                  int num12 = (width10 - height2) / 2;
                  int y5 = num11 + num12;
                  int index = num9;
                  imageList.Draw(g, 12, y5, index);
                }
              }
              ++num1;
            }
          }
        }
      }
    }
  }
}
