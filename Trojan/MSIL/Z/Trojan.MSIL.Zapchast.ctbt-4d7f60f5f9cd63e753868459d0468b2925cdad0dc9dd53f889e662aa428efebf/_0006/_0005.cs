// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Crypter, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B731B599-442F-4A0A-B652-36FDF3199CF1
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Zapchast.ctbt-4d7f60f5f9cd63e753868459d0468b2925cdad0dc9dd53f889e662aa428efebf.exe

using \u0006;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0006
{
  internal sealed class \u0005
  {
    private static bool \u0001;
    private static \u0005.\u0001 \u0001;

    [DllImport("kernel32.Dll", EntryPoint = "GetVersionEx")]
    private static extern short \u0001([In] ref \u0005.\u0001 obj0);

    [DllImport("user32.dll", EntryPoint = "GetSystemMetrics")]
    private static extern int \u0001([In] int obj0);

    [DllImport("kernel32.dll", EntryPoint = "GetSystemInfo")]
    private static extern void \u0001([In] ref \u0005.\u0002 obj0);

    [SpecialName]
    private static \u0005.\u0001 \u0001()
    {
      if (!\u0005.\u0001)
      {
        \u0005.\u0001 = new \u0005.\u0001();
        try
        {
          do
          {
            // ISSUE: type reference
            \u0005.\u0001.\u0001 = \u0098\u0002.\u0012\u0004(\u0082\u0002.\u0096\u0003(__typeref (\u0005.\u0001)));
            int num = (int) \u0005.\u0001(ref \u0005.\u0001);
            if (true)
            {
              if (false)
                goto label_7;
            }
            else
              goto label_7;
          }
          while (false);
          \u0005.\u0001 = true;
        }
        catch
        {
        }
      }
label_7:
      return \u0005.\u0001;
    }

    [SpecialName]
    internal static bool \u0001()
    {
      bool flag;
      try
      {
        \u0005.\u0002 obj;
        do
        {
          obj = new \u0005.\u0002();
        }
        while (false);
        \u0005.\u0001(ref obj);
        int num1 = (int) obj.\u0001;
        int num2;
        while (true)
        {
          num2 = num1 == 9 ? 1 : 0;
          if (false)
            num1 = num2;
          else if (false)
            num1 = num2;
          else
            break;
        }
        flag = num2 != 0;
      }
      catch
      {
        flag = false;
      }
      return flag;
    }

    [SpecialName]
    internal static bool \u0002()
    {
      bool flag;
      try
      {
        do
        {
          if (true)
          {
            int num1 = \u0005.\u0001(89);
            int num2 = 0;
            if (num2 == 0)
            {
              int num3 = num1 == num2 ? 1 : 0;
              num2 = 0;
              num1 = num3;
            }
            flag = num1 == num2;
          }
        }
        while (false);
      }
      catch
      {
        if (true)
          flag = false;
      }
      return flag;
    }

    [SpecialName]
    internal static bool \u0003() => \u0005.\u0001().\u0001 == (byte) 1;

    [SpecialName]
    internal static string \u0001() => \u0005.\u0001().\u0001;

    private struct \u0001
    {
      public int \u0001;
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
      public string \u0001;
      public ushort \u0001;
      public ushort \u0002;
      public ushort \u0003;
      public byte \u0001;
      private byte \u0002;
    }

    public struct \u0002
    {
      public ushort \u0001;
      private ushort \u0002;
      public uint \u0001;
      public IntPtr \u0001;
      public IntPtr \u0002;
      public IntPtr \u0003;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public ushort \u0003;
      public ushort \u0004;
    }
  }
}
