// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.ComplusEndpointConfigContainer
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Runtime.InteropServices;
using System.ServiceModel.Configuration;
using System.ServiceModel.Description;
using System.Transactions;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class ComplusEndpointConfigContainer : EndpointConfigContainer
  {
    private const string defaultBindingType = "netNamedPipeBinding";
    private const string defaultTransactionBindingType = "netNamedPipeBinding";
    private const string defaultMexBindingType = "mexNamedPipeBinding";
    private const string defaultBindingName = "comNonTransactionalBinding";
    private const string defaultTransactionalBindingName = "comTransactionalBinding";
    private ComAdminAppInfo appInfo;
    private bool closed;
    private string appDir;
    private bool mustGenerateAppDir;
    private AtomicFile manifestFile;
    private AtomicFile configFile;
    private bool listenerComponentExists;
    private bool hasServices;
    private TransactionScope scope;
    private bool modified;

    private ComplusEndpointConfigContainer(ComAdminAppInfo appInfo)
    {
      this.appInfo = appInfo;
      this.scope = (TransactionScope) null;
      if (appInfo.ApplicationDirectory != null && appInfo.ApplicationDirectory.Length > 0)
      {
        this.appDir = appInfo.ApplicationDirectory;
        this.mustGenerateAppDir = false;
        if (!Directory.Exists(this.appDir))
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("ApplicationDirectoryDoesNotExist", (object) this.appDir), (Exception) null);
      }
      else
      {
        this.appDir = this.GeneratedAppDirectoryName();
        if (!Directory.Exists(this.appDir))
          this.mustGenerateAppDir = true;
      }
      this.configFile = new AtomicFile(Path.Combine(this.appDir, "application.config"));
      this.manifestFile = new AtomicFile(Path.Combine(this.appDir, "application.manifest"));
      this.listenerComponentExists = appInfo.ListenerExists;
      this.hasServices = this.listenerComponentExists;
    }

    public override bool WasModified
    {
      get => this.modified;
      set => this.modified = value;
    }

    internal AtomicFile ConfigFile => this.configFile;

    internal bool ListenerComponentExists => this.listenerComponentExists;

    public override void AbortChanges()
    {
      this.closed = true;
      this.manifestFile.Abort();
      this.configFile.Abort();
      if (this.mustGenerateAppDir && Directory.Exists(this.appDir))
        Directory.Delete(this.appDir);
      if (this.scope == null)
        return;
      try
      {
        Transaction.Current.Rollback();
        this.scope.Complete();
        this.scope.Dispose();
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw;
          default:
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("FailedToAbortTransactionWithError", (object) ex.Message));
            break;
        }
      }
    }

    public override void Add(IList<EndpointConfig> endpointConfigs)
    {
      this.ThrowIfClosed();
      System.Configuration.Configuration configuration = this.GetConfiguration(false);
      bool flag = false;
      foreach (EndpointConfig endpointConfig in (IEnumerable<EndpointConfig>) endpointConfigs)
      {
        if (this.BaseAddEndpointConfig(configuration, endpointConfig))
        {
          flag = true;
          if (endpointConfig.Iid == typeof (IMetadataExchange).GUID)
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointAdded"));
          else if (!Tool.Options.ShowGuids)
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAdded", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
          else
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAdded", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
        }
        else if (endpointConfig.Iid == typeof (IMetadataExchange).GUID)
        {
          if (!Tool.Options.ShowGuids)
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointAlreadyExposed", (object) endpointConfig.ComponentProgID));
          else
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointAlreadyExposed", (object) endpointConfig.Clsid));
        }
        else if (!Tool.Options.ShowGuids)
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAlreadyExposed", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
        else
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAlreadyExposed", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
      }
      if (flag)
      {
        this.WasModified = true;
        configuration.Save();
      }
      this.hasServices = true;
    }

    public override string DefaultBindingType => "netNamedPipeBinding";

    public override string DefaultBindingName => "comNonTransactionalBinding";

    public override string DefaultTransactionalBindingType => "netNamedPipeBinding";

    public override string DefaultTransactionalBindingName => "comTransactionalBinding";

    public override string DefaultMexBindingType => "mexNamedPipeBinding";

    public override string DefaultMexBindingName => (string) null;

    private void EnsureNetProfileNamedPipeBindingElementBinding(System.Configuration.Configuration config)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      if (!sectionGroup.Bindings.NetNamedPipeBinding.Bindings.ContainsKey((object) this.DefaultBindingName))
      {
        NetNamedPipeBindingElement element = new NetNamedPipeBindingElement(this.DefaultBindingName);
        sectionGroup.Bindings.NetNamedPipeBinding.Bindings.Add(element);
      }
      if (sectionGroup.Bindings.NetNamedPipeBinding.Bindings.ContainsKey((object) this.DefaultTransactionalBindingName))
        return;
      sectionGroup.Bindings.NetNamedPipeBinding.Bindings.Add(new NetNamedPipeBindingElement(this.DefaultTransactionalBindingName)
      {
        TransactionFlow = true
      });
    }

    protected override void AddBinding(System.Configuration.Configuration config) => this.EnsureNetProfileNamedPipeBindingElementBinding(config);

    private void EnsureBindingRemoved(System.Configuration.Configuration config)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      if (sectionGroup.Bindings.NetNamedPipeBinding.Bindings.ContainsKey((object) this.DefaultBindingName))
      {
        NetNamedPipeBindingElement binding = sectionGroup.Bindings.NetNamedPipeBinding.Bindings[(object) this.DefaultBindingName];
        sectionGroup.Bindings.NetNamedPipeBinding.Bindings.Remove(binding);
      }
      if (!sectionGroup.Bindings.NetNamedPipeBinding.Bindings.ContainsKey((object) this.DefaultTransactionalBindingName))
        return;
      NetNamedPipeBindingElement binding1 = sectionGroup.Bindings.NetNamedPipeBinding.Bindings[(object) this.DefaultTransactionalBindingName];
      sectionGroup.Bindings.NetNamedPipeBinding.Bindings.Remove(binding1);
    }

    protected override void RemoveBinding(System.Configuration.Configuration config) => this.EnsureBindingRemoved(config);

    public override void CommitChanges()
    {
      this.manifestFile.Commit();
      this.configFile.Commit();
      if (this.scope == null)
        return;
      try
      {
        this.scope.Complete();
        this.scope.Dispose();
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw;
          default:
            Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("FailedToCommitChangesToCatalog"), ex);
            break;
        }
      }
    }

    public override void PrepareChanges()
    {
      this.closed = true;
      bool flag = this.configFile.HasBeenModified() && this.WasModified;
      this.scope = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions()
      {
        Timeout = TimeSpan.FromMinutes(5.0),
        IsolationLevel = IsolationLevel.Serializable
      }, EnterpriseServicesInteropOption.Full);
      if (flag)
      {
        if (this.mustGenerateAppDir)
        {
          Directory.CreateDirectory(this.appDir);
          ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("DirectoryCreated", (object) this.appDir));
        }
        ComAdminWrapper.SetAppDir(this.appInfo.ID.ToString("B"), this.appDir);
      }
      this.configFile.Prepare();
      if (flag)
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString(this.configFile.OriginalFileExists ? "FileUpdated" : "FileCreated", (object) this.configFile.OriginalFileName));
      if (flag && !this.manifestFile.CurrentExists() && this.hasServices)
      {
        this.manifestFile.GetCurrentFileName(false);
        this.CreateManifestFile(this.manifestFile.GetCurrentFileName(false));
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("FileCreated", (object) this.manifestFile.OriginalFileName));
      }
      this.manifestFile.Prepare();
      if (!flag)
        return;
      if (this.hasServices && !this.listenerComponentExists)
        ComAdminWrapper.InstallListener(this.appInfo.ID, this.appDir, this.appInfo.RuntimeVersion);
      else if (!this.hasServices && this.listenerComponentExists)
        ComAdminWrapper.RemoveListener(this.appInfo.ID);
      if (!this.appInfo.IsServerActivated)
        return;
      ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("ShouldRestartApp", (object) this.appInfo.Name));
    }

    private void CreateManifestFile(string fileName)
    {
      using (StreamWriter text = File.CreateText(fileName))
        text.WriteLine("<assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\"><assemblyIdentity name=\"" + this.appInfo.ID.ToString("B") + "\" version=\"1.0.0.0\" type=\"win32\"/></assembly>");
    }

    private string GetPartitionId(Guid appId)
    {
      string idForApplication = ComAdminWrapper.GetPartitionIdForApplication(appId);
      return string.IsNullOrEmpty(idForApplication) || !(idForApplication != ComAdminWrapper.GetGlobalPartitionID()) ? "" : new Guid(idForApplication).ToString() + "/";
    }

    public override string DefaultEndpointAddress(Guid appId, Guid clsid, Guid iid)
    {
      string uriString = Uri.EscapeUriString((((ComAdminWrapper.GetAppInfo(appId.ToString("B")) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindAppInfo", (object) appId.ToString("B")), (Exception) null)).FindClass(clsid.ToString("B")) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindClassInfo", (object) clsid.ToString("B")), (Exception) null)).FindInterface(iid.ToString("B")) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindInterfaceInfo", (object) iid.ToString("B")), (Exception) null)).Name);
      return Uri.IsWellFormedUriString(uriString, UriKind.RelativeOrAbsolute) ? uriString : iid.ToString().ToUpperInvariant();
    }

    public override string DefaultMexAddress(Guid appId, Guid clsid) => EndpointConfig.MexEndpointSuffix;

    public override string BaseServiceAddress(Guid appId, Guid clsid, Guid iid)
    {
      ComAdminAppInfo appInfo = ComAdminWrapper.GetAppInfo(appId.ToString("B"));
      string uriString = Uri.EscapeUriString("net.pipe://localhost/" + appInfo.Name + "/" + this.GetPartitionId(appId) + ((appInfo != null ? appInfo.FindClass(clsid.ToString("B")) : throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindAppInfo", (object) appId.ToString("B")), (Exception) null)) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindClassInfo", (object) clsid.ToString("B")), (Exception) null)).Name);
      return Uri.IsWellFormedUriString(uriString, UriKind.Absolute) ? uriString : "net.pipe://localhost/" + appId.ToString() + "/" + clsid.ToString();
    }

    private string GeneratedAppDirectoryName() => (!ComAdminWrapper.IsApplicationWow(this.appInfo.ID) ? Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) : Environment.GetEnvironmentVariable("ProgramFiles(x86)")) + "\\ComPlus Applications\\" + this.appInfo.ID.ToString("B") + "\\";

    public static List<ComplusEndpointConfigContainer> Get()
    {
      List<ComplusEndpointConfigContainer> endpointConfigContainerList = new List<ComplusEndpointConfigContainer>();
      foreach (Guid applicationId in ComAdminWrapper.GetApplicationIds())
      {
        ComplusEndpointConfigContainer endpointConfigContainer = ComplusEndpointConfigContainer.Get(applicationId.ToString("B"));
        if (endpointConfigContainer != null)
          endpointConfigContainerList.Add(endpointConfigContainer);
      }
      return endpointConfigContainerList;
    }

    public static ComplusEndpointConfigContainer Get(
      string appIdOrName)
    {
      return ComplusEndpointConfigContainer.Get(appIdOrName, false);
    }

    public static ComplusEndpointConfigContainer Get(
      string appIdOrName,
      bool rethrow)
    {
      ComAdminAppInfo appInfo = ComAdminWrapper.GetAppInfo(appIdOrName);
      if (appInfo == null)
        return (ComplusEndpointConfigContainer) null;
      try
      {
        return new ComplusEndpointConfigContainer(appInfo);
      }
      catch (Exception ex)
      {
        if (ex is NullReferenceException || ex is SEHException)
          throw;
        else if (rethrow)
          throw;
        else
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("FailedToLoadConfigForApplicationIgnoring", (object) appInfo.Name, (object) ex.Message));
      }
      return (ComplusEndpointConfigContainer) null;
    }

    public override System.Configuration.Configuration GetConfiguration(bool readOnly)
    {
      string currentFileName = this.configFile.GetCurrentFileName(readOnly);
      return string.IsNullOrEmpty(currentFileName) ? (System.Configuration.Configuration) null : this.GetConfigurationFromFile(currentFileName);
    }

    public override List<string> GetBaseAddresses(EndpointConfig config)
    {
      List<string> baseAddresses = new List<string>();
      ServiceElementCollection services = ServiceModelSectionGroup.GetSectionGroup(this.GetConfiguration(true)).Services.Services;
      ServiceElement serviceElement1 = (ServiceElement) null;
      foreach (ServiceElement serviceElement2 in (ConfigurationElementCollection) services)
      {
        if (config.MatchServiceType(serviceElement2.Name))
        {
          serviceElement1 = serviceElement2;
          break;
        }
      }
      if (serviceElement1 == null)
        return baseAddresses;
      foreach (BaseAddressElement baseAddress in (ConfigurationElementCollection) serviceElement1.Host.BaseAddresses)
        baseAddresses.Add(baseAddress.BaseAddress);
      return baseAddresses;
    }

    public override List<EndpointConfig> GetEndpointConfigs()
    {
      this.ThrowIfClosed();
      System.Configuration.Configuration configuration = this.GetConfiguration(true);
      if (configuration == null)
        return new List<EndpointConfig>();
      Dictionary<string, List<EndpointConfig>> fromConfiguration = this.BaseGetEndpointsFromConfiguration(configuration);
      List<EndpointConfig> endpointConfigs = new List<EndpointConfig>();
      foreach (List<EndpointConfig> endpointConfigList in fromConfiguration.Values)
      {
        foreach (EndpointConfig endpointConfig in endpointConfigList)
        {
          endpointConfig.Appid = this.appInfo.ID;
          endpointConfig.Container = (EndpointConfigContainer) this;
          endpointConfigs.Add(endpointConfig);
        }
      }
      return endpointConfigs;
    }

    public override List<EndpointConfig> GetEndpointConfigs(Guid appid)
    {
      this.ThrowIfClosed();
      return appid == this.appInfo.ID ? this.GetEndpointConfigs() : new List<EndpointConfig>();
    }

    public override void Remove(IList<EndpointConfig> endpointConfigs)
    {
      this.ThrowIfClosed();
      System.Configuration.Configuration configuration = this.GetConfiguration(false);
      bool flag = false;
      foreach (EndpointConfig endpointConfig in (IEnumerable<EndpointConfig>) endpointConfigs)
      {
        if (this.BaseRemoveEndpointConfig(configuration, endpointConfig))
        {
          flag = true;
          if (!Tool.Options.ShowGuids)
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceRemoved", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
          else
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceRemoved", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
        }
        else if (!endpointConfig.IsMexEndpoint)
        {
          if (!Tool.Options.ShowGuids)
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceNotExposed", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
          else
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceNotExposed", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
        }
      }
      this.hasServices = ServiceModelSectionGroup.GetSectionGroup(configuration).Services.Services.Count > 0;
      if (!flag)
        return;
      this.WasModified = true;
      configuration.Save();
    }

    private void ThrowIfClosed()
    {
      if (this.closed)
        throw new InvalidOperationException();
    }
  }
}
