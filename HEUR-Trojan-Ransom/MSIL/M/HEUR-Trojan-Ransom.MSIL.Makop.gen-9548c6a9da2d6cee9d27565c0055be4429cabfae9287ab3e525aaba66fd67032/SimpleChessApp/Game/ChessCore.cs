// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: p的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E9517A17-41D2-4860-BC69-C7D574C89AF9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9548c6a9da2d6cee9d27565c0055be4429cabfae9287ab3e525aaba66fd67032.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = -1768451466;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -626229055)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1152420373 ^ 502141312;
            continue;
          case 2:
            num1 = (int) num2 * -1549042153 ^ -1341869919;
            continue;
          case 3:
            num1 = (int) num2 * 1922018095 ^ -1169541763;
            continue;
          case 4:
            this.ChessBoard = b;
            this.resetFlags();
            num1 = (int) num2 * 1115828195 ^ -1111917959;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
      this.resetFlags();
label_1:
      int num1 = 1021208236;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 493523079)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1146460041 ^ -161004694;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            this.ChessBoard.Restart();
            num1 = (int) num2 * -550654739 ^ -577947980;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = 613167256;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 47310691)) % 4U)
        {
          case 0:
            this.lastCheckPiece = (Square) null;
            this.Turns.Clear();
            num1 = (int) num2 * 1785219349 ^ 444243078;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            this.DisableTurn = turn;
            this.WhosPlaying = PieceColor.White;
            this.TurnId = 1;
            num1 = (int) num2 * 422663983 ^ -1007357666;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPassant()
    {
      new DebugChess(this.ChessBoard).TestPassant();
      this.resetFlags(true);
label_1:
      int num1 = 684732146;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 115737959)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 770767104 ^ -638612335;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 169714052;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 654723309)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            num1 = (int) num2 * 350493136 ^ 2117446547;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 816109609 ^ -645931485;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = -2089328979;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1246981717)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).TestCastling();
            num1 = (int) num2 * 1756664817 ^ 656763409;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 112326341 ^ 59735281;
            continue;
          case 4:
            num1 = (int) num2 * -2064451019 ^ 2002565857;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCheck()
    {
      new DebugChess(this.ChessBoard).TestCheck();
      this.resetFlags(true);
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 1386400613;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 331156534)) % 5U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * 829319655 ^ -447244154;
            continue;
          case 1:
            num1 = (int) num2 * 189180977 ^ 1495116838;
            continue;
          case 2:
            goto label_3;
          case 3:
            new DebugChess(this.ChessBoard).TestDiscoverCheck();
            num1 = (int) num2 * -1958010762 ^ 1251934219;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 807391350;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 598178571)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * -282748579 ^ 256444717;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -586376602 ^ 2031443510;
            continue;
          case 4:
            num1 = (int) num2 * -15472931 ^ -705919781;
            continue;
          case 5:
            this.resetFlags(true);
            num1 = (int) num2 * 1866355740 ^ -221173153;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -1743917622;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -720696065)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -107185366 ^ -1283183077;
            continue;
          case 1:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * -2104192517 ^ 653393721;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 2014077258 ^ -740958330;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }
  }
}
