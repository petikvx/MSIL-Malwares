// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: ObjRefSurroga, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D36518F-5F0C-4DDD-80AA-3BF17FC6E8B1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-87b4a205c27d8ffaecb7e687ace76ed76394ae98d22a2a8be17f532d917c236e.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -261957757;
        JSONNode jsonNode;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1149862650)) % 7U)
          {
            case 1:
              num1 = (int) num2 * 1427984211 ^ -1365476759;
              continue;
            case 2:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * -333119596 ^ -1312455638;
              continue;
            case 3:
              int num3 = !flag ? 1059471289 : (num3 = 1010113232);
              num1 = num3 ^ (int) num2 * 1398342117;
              continue;
            case 4:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -252549098 ^ 1685482784;
              continue;
            case 5:
              goto label_1;
            case 6:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = -1585186955;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return jsonNode;
      }
      set
      {
        bool flag = this.m_Dict.ContainsKey(aKey);
label_1:
        int num1 = 1329740641;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 969780827)) % 7U)
          {
            case 0:
              this.m_Dict.Add(aKey, value);
              num1 = 1724721378;
              continue;
            case 1:
              int num3 = flag ? -1139738503 : (num3 = -677196321);
              num1 = num3 ^ (int) num2 * -258407742;
              continue;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 261843886 ^ -606036865;
              continue;
            case 3:
              goto label_3;
            case 4:
              num1 = (int) num2 * 512509542 ^ 23299035;
              continue;
            case 5:
              goto label_1;
            case 6:
              num1 = (int) num2 * -25547899 ^ 1830657277;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        if (aIndex < 0)
          goto label_7;
label_1:
        int num1 = 1865471035;
label_2:
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1129894236)) % 6U)
          {
            case 0:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 946714133 ^ -1955753479;
              continue;
            case 1:
              goto label_6;
            case 2:
              goto label_1;
            case 4:
              jsonNode = (JSONNode) null;
              num1 = 1116629801;
              continue;
            case 5:
              num1 = (int) num2 * 401035622 ^ 1601944695;
              continue;
            default:
              goto label_9;
          }
        }
label_6:
        int num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_8;
label_9:
        return jsonNode;
label_7:
        num3 = 1;
label_8:
        num1 = num3 != 0 ? 1424309388 : (num1 = 160421886);
        goto label_2;
      }
      set
      {
label_1:
        int num1 = 2119954149;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 1227632570)) % 6U)
          {
            case 0:
              num1 = (int) num2 * -2079744715 ^ 2115062373;
              continue;
            case 1:
              goto label_3;
            case 2:
              int num4 = !flag ? 1745623215 : (num4 = 39236304);
              num1 = num4 ^ (int) num2 * 989841347;
              continue;
            case 3:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * -1683767132 ^ -2039290119;
              continue;
            case 4:
              goto label_1;
            case 5:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            default:
              goto label_11;
          }
          flag = num3 != 0;
          num1 = 271806652;
        }
label_3:
        return;
label_11:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = -1317423342;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1679184272)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              count = this.m_Dict.Count;
              num1 = (int) num2 * 12943713 ^ -1009208791;
              continue;
            case 3:
              num1 = (int) num2 * 412517348 ^ -320648439;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      bool flag = !JSONClass.\u206D‮‮⁮⁪‫‫⁭‍‪‌‮‌⁪‮‫‫‬⁪‎⁯‫⁮⁪‭⁬‫‎‭‫⁫‬‮⁫⁯‫⁫⁪⁬⁭‮(aKey);
label_1:
      int num1 = -469297889;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1692364575)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 1500866120 ^ -968927476;
            continue;
          case 1:
            this.m_Dict.Add(aKey, aItem);
            num1 = -858542824;
            continue;
          case 2:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 165532327 ^ -128869054;
            continue;
          case 3:
            int num3 = !this.m_Dict.ContainsKey(aKey) ? 973975557 : (num3 = 2038082806);
            num1 = num3 ^ (int) num2 * 1682705909;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = -1637747833;
            continue;
          case 6:
            goto label_3;
          case 7:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = -1637747833;
            continue;
          case 8:
            int num4 = !flag ? 1084813140 : (num4 = 299518951);
            num1 = num4 ^ (int) num2 * -767561584;
            continue;
          case 9:
            num1 = (int) num2 * -567323388 ^ -48898564;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public override JSONNode Remove(string aKey)
    {
      bool flag = !this.m_Dict.ContainsKey(aKey);
label_1:
      int num1 = -567458211;
      JSONNode jsonNode1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1292719191)) % 7U)
        {
          case 1:
            JSONNode jsonNode2 = this.m_Dict[aKey];
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = -1984880667;
            continue;
          case 2:
            num1 = (int) num2 * 2099070565 ^ -438921880;
            continue;
          case 3:
            int num3 = flag ? 1996184122 : (num3 = 1742404394);
            num1 = num3 ^ (int) num2 * -827389221;
            continue;
          case 4:
            num1 = (int) num2 * -1742326510 ^ -857978662;
            continue;
          case 5:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * -158532947 ^ -1273005243;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return jsonNode1;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -764821466;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -712531764)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 97697144 ^ -863324625;
            continue;
          case 1:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 2:
            if (aIndex >= 0)
            {
              num1 = (int) num2 * -1376279717 ^ -1261865725;
              continue;
            }
            num3 = 1;
            break;
          case 4:
            goto label_1;
          case 5:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -543381006 ^ -1574709095;
            continue;
          case 6:
            jsonNode = (JSONNode) null;
            num1 = -126632212;
            continue;
          case 7:
            num1 = (int) num2 * -97475575 ^ 1681685784;
            continue;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 != 0 ? -93141039 : (num4 = -384729942);
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs => (IEnumerable<JSONNode>) new JSONClass.\u003Cget_Childs\u003Ed__14(-2)
    {
      \u003C\u003E4__this = this
    };

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
      string str1 = "{";
label_1:
      int num1 = -1131011290;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -93821138)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 1436006619 ^ -888128873;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_8:
        int num3 = enumerator.MoveNext() ? -1042347843 : (num3 = -1291080524);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -93821138)) % 10U)
          {
            case 0:
              num3 = (int) num4 * -1446448541 ^ -1288910215;
              continue;
            case 1:
              str1 = JSONClass.\u206E‌‍‪⁭‭‌‫‭⁭‮‏‍‪​⁫⁯‭‌⁬​⁪⁫​⁪⁭⁯⁯​‬⁫⁯⁯‏‪‬⁯​‭⁫‮(str1, ", ");
              num3 = (int) num4 * -1360698929 ^ 100484155;
              continue;
            case 2:
              str1 = JSONClass.\u202C‪⁭‫⁮⁬‎⁪‏‏‭‍‮‭​⁪⁬⁯⁬‭‎‪‬‫‎⁭‫‫‬⁪⁮‌⁭⁬‭‎‎⁬⁪⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u200C‎⁬⁫‮‫⁭⁮‮‭‏⁭‌‎⁯⁬‎⁭‍⁬‍⁮⁪‮‮⁪⁫⁫⁯‍‎‏‎‮‬‬​‭‮‍‮((object) current.Value)
              });
              num3 = -1922324196;
              continue;
            case 3:
              flag = JSONClass.\u206C‍⁯‎⁪⁪‍⁬‫‌‪‪⁪‍⁭‫⁪​‭‪‮‍‌‬⁫‎⁯‪‬‮‭‌⁮⁫‪⁪⁫⁯‎⁭‮(str1) > 2;
              num3 = (int) num4 * -905373702 ^ -562104336;
              continue;
            case 5:
              current = enumerator.Current;
              num3 = -1357829508;
              continue;
            case 6:
              int num5 = flag ? 509680673 : (num5 = 46610330);
              num3 = num5 ^ (int) num4 * 1117408402;
              continue;
            case 7:
              goto label_8;
            case 8:
              num3 = (int) num4 * -104401557 ^ -2001062195;
              continue;
            case 9:
              num3 = -1042347843;
              continue;
            default:
              goto label_17;
          }
        }
      }
label_17:
      string str2 = JSONClass.\u206E‌‍‪⁭‭‌‫‭⁭‮‏‍‪​⁫⁯‭‌⁬​⁪⁫​⁪⁭⁯⁯​‬⁫⁯⁯‏‪‬⁯​‭⁫‮(str1, "}");
label_18:
      int num6 = -2015761433;
      string str3;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -93821138)) % 4U)
        {
          case 0:
            goto label_18;
          case 1:
            str3 = str2;
            num6 = (int) num7 * -402218778 ^ -1438771933;
            continue;
          case 3:
            num6 = (int) num7 * 1981625179 ^ 2038514377;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_6:
        int num1 = !enumerator.MoveNext() ? 1202836673 : (num1 = 753687689);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1667975555)) % 7U)
          {
            case 0:
              num1 = 753687689;
              continue;
            case 1:
              str1 = JSONClass.\u206E‌‍‪⁭‭‌‫‭⁭‮‏‍‪​⁫⁯‭‌⁬​⁪⁫​⁪⁭⁯⁯​‬⁫⁯⁯‏‪‬⁯​‭⁫‮(str1, ", ");
              num1 = (int) num2 * 1116725691 ^ 1335132336;
              continue;
            case 2:
              current = enumerator.Current;
              int num3;
              num1 = num3 = JSONClass.\u206C‍⁯‎⁪⁪‍⁬‫‌‪‪⁪‍⁭‫⁪​‭‪‮‍‌‬⁫‎⁯‪‬‮‭‌⁮⁫‪⁪⁫⁯‎⁭‮(str1) > 3 ? 626657296 : (num3 = 1479449041);
              continue;
            case 3:
              num1 = (int) num2 * -1035498088 ^ 1674023293;
              continue;
            case 5:
              str1 = JSONClass.\u202A⁮‎⁪‭⁪​⁮⁭‮⁪‌⁫⁪‪⁮‭‍‏⁬⁯‬‍‮‭⁬‪‪‪‌‮⁪⁪‬‍⁫⁪​‭⁭‮(str1, "\n", aPrefix, "   ");
              str1 = JSONClass.\u202C‪⁭‫⁮⁬‎⁪‏‏‭‍‮‭​⁪⁬⁯⁬‭‎‪‬‫‎⁭‫‫‬⁪⁮‌⁭⁬‭‎‎⁬⁪⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u206E‌‍‪⁭‭‌‫‭⁭‮‏‍‪​⁫⁯‭‌⁬​⁪⁫​⁪⁭⁯⁯​‬⁫⁯⁯‏‪‬⁯​‭⁫‮(aPrefix, "   "))
              });
              num1 = 1410551634;
              continue;
            case 6:
              goto label_6;
            default:
              goto label_10;
          }
        }
      }
label_10:
      string str2 = JSONClass.\u202A⁮‎⁪‭⁪​⁮⁭‮⁪‌⁫⁪‪⁮‭‍‏⁬⁯‬‍‮‭⁬‪‪‪‌‮⁪⁪‬‍⁫⁪​‭⁭‮(str1, "\n", aPrefix, "}");
label_11:
      int num4 = 1325420582;
      string str3;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ 1667975555)) % 4U)
        {
          case 0:
            num4 = (int) num5 * -1700017970 ^ -907591864;
            continue;
          case 1:
            str3 = str2;
            num4 = (int) num5 * 526654919 ^ -70508844;
            continue;
          case 2:
            goto label_11;
          default:
            goto label_15;
        }
      }
label_15:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = 2036578608;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 791679076)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1133045875 ^ -473425828;
            continue;
          case 2:
            JSONClass.\u200F‍⁬⁮‍⁫‭‫⁯‬⁮‮‬‍⁯⁯‭‬‏⁫‏⁮⁭‮​‏⁮‬‏⁭‪‏‬‮⁭⁪‪⁪⁫‎‮(aWriter, (byte) 2);
            num1 = (int) num2 * 891969081 ^ 138007879;
            continue;
          case 3:
            JSONClass.\u200E‬‪‭⁮‌⁯‏⁭‌‏‫⁬⁫‭‭‬⁮‫⁯‪‎⁯‪⁪‮‌⁮​⁭​‪⁮⁬‍‏⁮‫‏‍‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -1291122440 ^ -1697589730;
            continue;
          case 4:
            num1 = (int) num2 * 1689370140 ^ 618543421;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_12:
        int num3 = !enumerator.MoveNext() ? 1264735486 : (num3 = 818706481);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 791679076)) % 6U)
          {
            case 0:
              num3 = (int) num4 * -142468645 ^ -1816136497;
              continue;
            case 1:
              current = enumerator.Current;
              JSONClass.\u200E‌‪​​⁭‏​⁪​​⁯‌‭‪⁬‌⁭‪⁪‮‪‮‪​‭‍‫‏‏‭‎‮‭‌‎‎⁭⁮‍‮(aWriter, current);
              num3 = 1256987828;
              continue;
            case 2:
              goto label_16;
            case 3:
              num3 = 818706481;
              continue;
            case 4:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * 1450033082 ^ -2021215590;
              continue;
            case 5:
              goto label_12;
            default:
              goto label_11;
          }
        }
label_16:
        return;
label_11:;
      }
    }

    static bool \u206D‮‮⁮⁪‫‫⁭‍‪‌‮‌⁪‮‫‫‬⁪‎⁯‫⁮⁪‭⁬‫‎‭‫⁫‬‮⁫⁯‫⁫⁪⁬⁭‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206C‍⁯‎⁪⁪‍⁬‫‌‪‪⁪‍⁭‫⁪​‭‪‮‍‌‬⁫‎⁯‪‬‮‭‌⁮⁫‪⁪⁫⁯‎⁭‮([In] string obj0) => obj0.Length;

    static string \u206E‌‍‪⁭‭‌‫‭⁭‮‏‍‪​⁫⁯‭‌⁬​⁪⁫​⁪⁭⁯⁯​‬⁫⁯⁯‏‪‬⁯​‭⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200C‎⁬⁫‮‫⁭⁮‮‭‏⁭‌‎⁯⁬‎⁭‍⁬‍⁮⁪‮‮⁪⁫⁫⁯‍‎‏‎‮‬‬​‭‮‍‮([In] object obj0) => obj0.ToString();

    static string \u202C‪⁭‫⁮⁬‎⁪‏‏‭‍‮‭​⁪⁬⁯⁬‭‎‪‬‫‎⁭‫‫‬⁪⁮‌⁭⁬‭‎‎⁬⁪⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A⁮‎⁪‭⁪​⁮⁭‮⁪‌⁫⁪‪⁮‭‍‏⁬⁯‬‍‮‭⁬‪‪‪‌‮⁪⁪‬‍⁫⁪​‭⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u200F‍⁬⁮‍⁫‭‫⁯‬⁮‮‬‍⁯⁯‭‬‏⁫‏⁮⁭‮​‏⁮‬‏⁭‪‏‬‮⁭⁪‪⁪⁫‎‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200E‬‪‭⁮‌⁯‏⁭‌‏‫⁬⁫‭‭‬⁮‫⁯‪‎⁯‪⁪‮‌⁮​⁭​‪⁮⁬‍‏⁮‫‏‍‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u200E‌‪​​⁭‏​⁪​​⁯‌‭‪⁬‌⁭‪⁪‮‪‮‪​‭‍‫‏‏‭‎‮‭‌‎‎⁭⁮‍‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
