// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.PlatformClient
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common
{
  public abstract class PlatformClient : IPlatformClient
  {
    private CoreClient a;

    protected abstract IPlatform GetNewPlatform();

    public Configuration StartupConfiguration
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 21815;
        int num2 = num1;
        num1 = 21815;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -18368;
        int num2 = num1;
        num1 = -18368;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Guid GetActiveDefaultSession()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = -31352;
      int num2 = num1;
      num1 = -31352;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          return this.Core.GetActiveDefaultSession();
        default:
          goto case 1;
      }
    }

    public ILogger Logger
    {
      get
      {
        int num1 = 698;
        int num2 = num1;
        num1 = 698;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -31469;
        int num2 = num1;
        num1 = -31469;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public virtual CoreClient Core
    {
      get
      {
        int num1 = -11440;
        int num2 = num1;
        num1 = -11440;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a ?? (this.a = new CoreClient(this.GetNewPlatform(), this.Logger));
          default:
            goto case 1;
        }
      }
    }

    public PlatformClient(string companyID, string applicationID, ILogger logger)
    {
      int A_1 = 7;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      Guid result1;
      Guid result2;
      if (!Guid.TryParse(companyID, out result1) || !Guid.TryParse(applicationID, out result2))
      {
        result1 = Guid.Empty;
        result2 = Guid.Empty;
        logger?.LogError(Utils.a("\uF8BA튼튾뇀ꋂꯄ뻆\uE9C8\uA4CA뿌\uEFCE냐ꏒꗔ믖냘룚볜ꯞ裠賢诤쟦ꃨ꿪췬鳮藰臲鳴駶黸\uDBFA跼黾爀瀂怄挆⤈缊戌⼎攐笒瀔㜖椘眚簜欞䜠䰢圤䨦न䠪䄬䘮吰崲䄴᜶娸吺匼䰾㕀ㅂい⑆㵈⑊㽌潎㡐⁒畔㹖㝘ⵚ㱜㍞\u0860ݢ䭤䝦ⱨ٪ᵬ᭮\u0870卲㉴ɶၸὺ\u0E7C彾\uE980\uE282\uF384\uE286ꦈ\uE98A\uE88C\uEA8Eﾐ뎒\uE094\uE496ﲘﾚ붜\uF69E쾠킢톤슦좨쾪莬", A_1));
      }
      this.a(new Configuration(result1, result2), logger);
    }

    public PlatformClient(Guid companyID, Guid applicationID, ILogger logger) => this.a(new Configuration(companyID, applicationID), logger);

    public PlatformClient(Configuration config, ILogger logger) => this.a(config, logger);

    private void a(Configuration A_0, ILogger A_1)
    {
      int num1 = 9764;
      int num2 = num1;
      num1 = 9764;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.StartupConfiguration = A_0;
          this.Logger = A_1 ?? (ILogger) new BlankLogger();
          break;
        default:
          goto case 1;
      }
    }

    public virtual bool ApplicationStart(
      [Optional] ExtendedKeys keys,
      [Optional] BinaryInfo binary,
      [Optional] IFlowController flowController)
    {
      int num1 = -29880;
      int num2 = num1;
      num1 = -29880;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          return this.Core.ApplicationStart(this.StartupConfiguration, keys, binary, flowController);
        default:
          goto case 1;
      }
    }

    public virtual void ApplicationStop([Optional] ExtendedKeys keys, [Optional] BinaryInfo binary, [Optional] bool immediate)
    {
      int A_1 = 19;
      int num1 = 4;
      while (true)
      {
        int num2 = -21968;
        int num3 = num2;
        num2 = -21968;
        int num4 = num2;
        switch (num3 == num4 ? 1 : 0)
        {
          case 0:
          case 2:
label_17:
            num2 = 5;
            num1 = num2;
            continue;
          default:
            num2 = 1;
            if (num2 == 0)
              ;
            num2 = 0;
            if (num2 == 0)
              ;
            bool? toSynchronousStop;
            int num5;
            switch (num1)
            {
              case 0:
                num5 = 1;
                break;
              case 1:
                if (!toSynchronousStop.HasValue)
                {
                  num2 = 3;
                  num1 = num2;
                  continue;
                }
                goto label_17;
              case 2:
                goto label_13;
              case 3:
                num2 = 0;
                num1 = num2;
                continue;
              case 4:
                switch (0)
                {
                  case 0:
                    goto label_6;
                  default:
                    continue;
                }
              case 5:
                num5 = toSynchronousStop.GetValueOrDefault() ? 1 : 0;
                break;
              case 6:
                goto label_22;
              case 7:
                num2 = 8;
                num1 = num2;
                continue;
              case 8:
                if (immediate)
                {
                  num2 = 2;
                  num1 = num2;
                  continue;
                }
                goto label_23;
              case 9:
                this.Logger.LogError(Utils.a("蛆마믊ꇌꛎ닐닒ꇔ뻖뛘뗚軜ꯞ軠鏢엤蓦裨蟪臬諮闰폲苴黶跸鏺鋼諾甀⌂昄昆攈朊搌愎瘐㌒吔朖椘眚琜簞䀠圢䰤䠦䜨砪夬丮䌰䜲ᔴ堶䬸ᬺ縼倾⽀╂ⱄ⁆㱈㥊ⱌ㭎㡐㱒㭔睖じ⡚絜ㅞᑠར।", A_1));
                num2 = 6;
                num1 = num2;
                continue;
              default:
label_6:
                if (this.StartupConfiguration == null)
                {
                  num2 = 9;
                  num1 = num2;
                  continue;
                }
                toSynchronousStop = this.StartupConfiguration.StopBehavior.DefaultsToSynchronousStop;
                num2 = 1;
                num1 = num2;
                continue;
            }
            if (num5 == 0)
            {
              num2 = 7;
              num1 = num2;
              continue;
            }
            goto label_13;
        }
      }
label_22:
      return;
label_13:
      this.ApplicationStopSync(keys, binary, immediate);
      return;
label_23:
      this.ApplicationStopAsync(keys, binary, immediate);
    }

    public virtual void ApplicationStopSync([Optional] ExtendedKeys keys, [Optional] BinaryInfo binary, [Optional] bool immediate)
    {
      int num1 = 21196;
      int num2 = num1;
      num1 = 21196;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.Core.ApplicationStop(keys, binary, true, immediate);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void ApplicationStopAsync([Optional] ExtendedKeys keys, [Optional] BinaryInfo binary, [Optional] bool immediate)
    {
      int num1 = 18146;
      int num2 = num1;
      num1 = 18146;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.Core.ApplicationStop(keys, binary, immediate: immediate);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void FeatureTick(
      string name,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = -27066;
      int num2 = num1;
      num1 = -27066;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          this.Core.FeatureTick(name, keys, session, binary);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void FeatureStart(
      string name,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary,
      [Optional] Guid? group)
    {
      int num1 = -10537;
      int num2 = num1;
      num1 = -10537;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.Core.FeatureStart(name, keys, session, binary, group);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void FeatureStartWithGroup(
      string name,
      Guid group,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int num1 = -21135;
      int num2 = num1;
      num1 = -21135;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.Core.FeatureStart(name, keys, session, binary, new Guid?(group));
          break;
        default:
          goto case 1;
      }
    }

    public virtual void FeatureStopWithGroup(
      string name,
      Guid group,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int num1 = 5067;
      int num2 = num1;
      num1 = 5067;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.Core.FeatureStop(name, keys, session, binary, new Guid?(group));
          break;
        default:
          goto case 1;
      }
    }

    public virtual void FeatureStop(
      string name,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary,
      [Optional] Guid? group)
    {
      int num1 = -28051;
      int num2 = num1;
      num1 = -28051;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.Core.FeatureStop(name, keys, session, binary, group);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void ReportTamper([Optional] ExtendedKeys keys, [Optional] Guid? session, [Optional] BinaryInfo binary)
    {
      if (this.Core.Configuration == null)
      {
        int num = -32588;
        switch (-32588 == num ? 1 : 0)
        {
          case 0:
          case 2:
            break;
          default:
            num = 1;
            if (num == 0)
              ;
            num = 0;
            if (num == 0)
              ;
            this.Core.ReportTamper(keys, session, binary, this.StartupConfiguration);
            return;
        }
      }
      this.Core.ReportTamper(keys, session, binary);
    }

    public virtual void ReportDebugging(
      [Optional] bool optinOverride,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      if (this.Core.Configuration == null)
      {
        int num = -30781;
        switch (-30781 == num ? 1 : 0)
        {
          case 0:
          case 2:
            break;
          default:
            num = 0;
            if (num == 0)
              ;
            num = 1;
            if (num == 0)
              ;
            this.Core.ReportDebugging(optinOverride, keys, session, binary, this.StartupConfiguration);
            return;
        }
      }
      this.Core.ReportDebugging(optinOverride, keys, session, binary);
    }

    public virtual void ReportExpiration(
      Guid slid,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 28871;
      int num2 = num1;
      num1 = 28871;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          this.Core.ReportExpiration(slid, keys, session, binary);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void ReportExpirationWarning(
      Guid slid,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int num1 = -20113;
      int num2 = num1;
      num1 = -20113;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.Core.ReportExpirationWarning(slid, keys, session, binary);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void ReportException(ExceptionInfo exceptionInfo)
    {
      int num1 = 10917;
      int num2 = num1;
      num1 = 10917;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.ReportException(exceptionInfo, false, (ExtendedKeys) null, new Guid?(), (BinaryInfo) null);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void ReportException(
      ExceptionInfo exceptionInfo,
      ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int num1 = 30157;
      int num2 = num1;
      num1 = 30157;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.ReportException(exceptionInfo, false, keys, session, binary);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void ReportException(
      ExceptionInfo exceptionInfo,
      bool optInOverride,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo binary)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 2966;
      int num2 = num1;
      num1 = 2966;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          this.Core.ReportException(exceptionInfo, optInOverride, keys, session, binary);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void SystemProfile([Optional] ExtendedKeys keys, [Optional] Guid? session, [Optional] BinaryInfo binary)
    {
      int num1 = 32467;
      int num2 = num1;
      num1 = 32467;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.Core.SystemProfile(keys, session, binary);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void PerformanceProbe(
      string name,
      [Optional] ExtendedKeys keys,
      [Optional] Guid? session,
      [Optional] BinaryInfo info)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 17260;
      int num2 = num1;
      num1 = 17260;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          this.Core.PerformanceProbe(name, keys, session, info);
          break;
        default:
          goto case 1;
      }
    }

    public virtual Guid NewFeatureGroup()
    {
      int num1 = 627;
      int num2 = num1;
      num1 = 627;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return Guid.NewGuid();
        default:
          goto case 1;
      }
    }

    public virtual void SetSendDisabled(bool value)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 1784;
      int num2 = num1;
      num1 = 1784;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          this.Core.SetSendDisabled(value);
          break;
        default:
          goto case 1;
      }
    }

    public virtual void SendMessages()
    {
      int num1 = 20973;
      int num2 = num1;
      num1 = 20973;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.Core.SendMessages();
          break;
        default:
          goto case 1;
      }
    }

    public virtual void SetSessionOptIn(bool value)
    {
      int A_1 = 17;
      if (this.StartupConfiguration == null)
      {
        switch (true ? 1 : 0)
        {
          case 0:
          case 2:
            break;
          default:
            if (false)
              ;
            if (true)
              ;
            this.Logger.LogError(Utils.a("蛄\uA8C6\uA7C8귊\uA4CC꣎ꓐꇒ듔ꏖ냘듚돜\uFFDE裠郢엤触鳨蟪臬쇮퇰냲铴駶\uD9F8闺鋼课℀瀂怄猆⤈堊栌簎成稒稔礖㤘吚洜欞栠䴢Ԥ儦䠨䜪堬䨮", A_1));
            return;
        }
      }
      this.StartupConfiguration.OptIn = value;
      this.Core.SetSessionOptIn(value, this.StartupConfiguration);
    }

    public static Configuration.ApplicationStopBehavior CoreDefaultStopBehavior()
    {
      int num1 = 25139;
      int num2 = num1;
      num1 = 25139;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return new Configuration.ApplicationStopBehavior()
          {
            DefaultsToSynchronousStop = new bool?(true),
            NeededTimeForSavingAtStop = new int?(1500),
            SessionExtensionWindow = new int?(0),
            StopTimeout = new int?(2000)
          };
        default:
          goto case 1;
      }
    }
  }
}
