// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: WhenAllPromi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: EC39505B-F84A-4834-9FA9-F8C42A2FB5BC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-fabdc6de70c953d03389a8cd60eaa852c968c6328b070b4049f01954433e9324.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 235922485;
        bool flag;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1615599699)) % 8U)
          {
            case 0:
              int num3 = !flag ? 1853691817 : (num3 = 1674567738);
              num1 = num3 ^ (int) num2 * 663256970;
              continue;
            case 1:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * -283683143 ^ 1315665558;
              continue;
            case 2:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = 517565172;
              continue;
            case 4:
              num1 = (int) num2 * 622014893 ^ 100982948;
              continue;
            case 5:
              goto label_1;
            case 6:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -885359872 ^ -1295163333;
              continue;
            case 7:
              num1 = (int) num2 * 1127753684 ^ 2015234892;
              continue;
            default:
              goto label_9;
          }
        }
label_9:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1979789759;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 459508763)) % 8U)
          {
            case 0:
              int num3 = !flag ? -1068081427 : (num3 = -306209518);
              num1 = num3 ^ (int) num2 * -872979662;
              continue;
            case 1:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 1098094983 ^ 1276477467;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            case 4:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -438478699 ^ 107267447;
              continue;
            case 5:
              num1 = (int) num2 * 664966468 ^ -1038074516;
              continue;
            case 6:
              this.m_Dict.Add(aKey, value);
              num1 = 1790325518;
              continue;
            case 7:
              num1 = (int) num2 * -896733393 ^ -1406770247;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = -648183660;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1529913093)) % 8U)
          {
            case 0:
              jsonNode = (JSONNode) null;
              num1 = -422109527;
              continue;
            case 1:
              num1 = (int) num2 * -1727404618 ^ 1617178703;
              continue;
            case 3:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 4:
              goto label_1;
            case 5:
              int num4 = !flag ? 1083980007 : (num4 = 494559465);
              num1 = num4 ^ (int) num2 * -941227860;
              continue;
            case 6:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -637195661 ^ -676793192;
              continue;
            case 7:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * 489913869 ^ 144908267;
                continue;
              }
              num3 = 1;
              break;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = -880640202;
        }
label_12:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -87688505;
        while (true)
        {
          uint num2;
          int num3;
          switch ((num2 = (uint) (num1 ^ -210373143)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -1839978878 ^ -674145614;
              continue;
            case 1:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -316431438 ^ -171716281;
                continue;
              }
              num3 = 1;
              break;
            case 2:
              goto label_3;
            case 3:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 4:
              goto label_1;
            default:
              goto label_10;
          }
          int num4;
          num1 = num4 = num3 != 0 ? -1755092926 : (num4 = -1490147228);
        }
label_3:
        return;
label_10:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = -1156116858;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -775144708)) % 3U)
          {
            case 1:
              count = this.m_Dict.Count;
              num1 = (int) num2 * -1887937622 ^ 1991406135;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 308779721;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 507052915)) % 12U)
        {
          case 0:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 750668840 ^ 109510155;
            continue;
          case 1:
            this.m_Dict.Add(aKey, aItem);
            num1 = 2103181485;
            continue;
          case 2:
            num1 = 2113357019;
            continue;
          case 3:
            flag = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -2115421103 ^ 1582624195;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * 276828664 ^ -13412812;
            continue;
          case 6:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 2113357019;
            continue;
          case 7:
            int num3 = !flag ? 884126723 : (num3 = 2140357890);
            num1 = num3 ^ (int) num2 * -1582213485;
            continue;
          case 8:
            num1 = (int) num2 * 251631634 ^ -487208616;
            continue;
          case 9:
            goto label_1;
          case 10:
            int num4 = !JSONClass.\u206A‭⁫⁬⁫⁪‮‎⁭‬​​​‮⁪⁬‎⁯⁭‮⁮⁪⁭‫‪⁯‪⁯⁪⁬‪​‏‭‍⁫‎⁬‍⁪‮(aKey) ? 1301423348 : (num4 = 1780505079);
            num1 = num4 ^ (int) num2 * -397384963;
            continue;
          case 11:
            num1 = (int) num2 * -463069841 ^ -266059368;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    public override JSONNode Remove(string aKey)
    {
      bool flag = !this.m_Dict.ContainsKey(aKey);
label_1:
      int num1 = 1264058536;
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1362649514)) % 7U)
        {
          case 0:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * 24688748 ^ 529444204;
            continue;
          case 2:
            num1 = (int) num2 * -1764055834 ^ -1790725133;
            continue;
          case 3:
            goto label_1;
          case 4:
            jsonNode2 = this.m_Dict[aKey];
            num1 = 516992005;
            continue;
          case 5:
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = (int) num2 * -988084924 ^ 1177463299;
            continue;
          case 6:
            int num3 = !flag ? 796563164 : (num3 = 491601223);
            num1 = num3 ^ (int) num2 * 1155741323;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return jsonNode1;
    }

    public override JSONNode Remove(int aIndex)
    {
      if (aIndex < 0)
        goto label_8;
label_1:
      int num1 = -1770794701;
label_2:
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -770288766)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_7;
          case 3:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -2093768857 ^ 1197715848;
            continue;
          case 4:
            jsonNode = (JSONNode) null;
            num1 = -1699263202;
            continue;
          case 5:
            num1 = (int) num2 * 615556170 ^ -484854254;
            continue;
          case 6:
            num1 = (int) num2 * 1550983765 ^ -954503201;
            continue;
          default:
            goto label_10;
        }
      }
label_7:
      int num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
      goto label_9;
label_10:
      return jsonNode;
label_8:
      num3 = 1;
label_9:
      num1 = num3 == 0 ? -1855838236 : (num1 = -943341889);
      goto label_2;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = 1461341876;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ 1244329935)) % 22U)
            {
              case 0:
                num2 = (int) num3 * 1745175145 ^ -974637931;
                continue;
              case 1:
                int num4 = num1 == 0 ? 1740363723 : (num4 = 1342222774);
                num2 = num4 ^ (int) num3 * -1362398205;
                continue;
              case 3:
                int num5;
                num2 = num5 = !enumerator.MoveNext() ? 1230845674 : (num5 = 892838529);
                continue;
              case 4:
              case 16:
                this.\u003C\u003E1__state = -3;
                num2 = 410555579;
                continue;
              case 5:
                childs = true;
                num2 = (int) num3 * 1862912841 ^ 1647201260;
                continue;
              case 6:
                goto label_1;
              case 7:
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * -489776887 ^ 593872719;
                continue;
              case 8:
                N = enumerator.Current;
                this.\u003C\u003E2__current = N.Value;
                num2 = 1744999956;
                continue;
              case 9:
                enumerator = this.m_Dict.GetEnumerator();
                num2 = (int) num3 * -366696267 ^ -294949559;
                continue;
              case 10:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * -1296158677 ^ -1399256554;
                continue;
              case 11:
                num2 = (int) num3 * 1116154191 ^ 1666806944;
                continue;
              case 12:
                goto label_19;
              case 13:
                num2 = (int) num3 * 1803651586 ^ -108954400;
                continue;
              case 14:
                int num6;
                num2 = num6 = num1 != 1 ? 1003988854 : (num6 = 1536277719);
                continue;
              case 15:
              case 21:
                this.\u003C\u003E1__state = -1;
                num2 = 991566592;
                continue;
              case 17:
                this.\u003C\u003E1__state = 1;
                num2 = (int) num3 * 899712410 ^ 1267489426;
                continue;
              case 18:
                enumerator = new Dictionary<string, JSONNode>.Enumerator();
                childs = false;
                num2 = (int) num3 * 926890779 ^ 2104857773;
                continue;
              case 19:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * 608078388 ^ 1771574009;
                continue;
              default:
                goto label_21;
            }
          }
label_19:
          childs = false;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_21:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
      string str1 = "{";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_7:
        int num1 = enumerator.MoveNext() ? -193988547 : (num1 = -1747106256);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -875267492)) % 7U)
          {
            case 0:
              goto label_7;
            case 1:
              str1 = JSONClass.\u206B‭‬⁯‭​⁫⁯⁪⁯⁯‏‎‫‪⁯‫⁪⁮⁬‮⁭‏‎‌‮⁮⁪‎‬‬‎⁯‮‎‭‮‫⁪⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u206F‪‪‮‭‎‎‪‫⁪‭⁪‬‪‍⁬‌⁯​‬‮⁮‭⁭‫‬‍‫​‍‭⁯‫‮​⁯‫⁭‬⁭‮((object) current.Value)
              });
              num1 = -944191785;
              continue;
            case 2:
              str1 = JSONClass.\u206E​⁫‮‎​⁫‬‎⁫⁮⁭⁭‎⁭⁬‭⁪‫‎‎‬‏‏⁪⁯⁭⁬‮⁪‌⁮‎​⁬‌​⁫⁭⁫‮(str1, ", ");
              num1 = (int) num2 * -71154955 ^ -1687070127;
              continue;
            case 4:
              current = enumerator.Current;
              int num3;
              num1 = num3 = JSONClass.\u206E‪‫‎⁮⁬​‭‎⁬‏⁯‍‍‫‪‫​‏⁮⁮‭⁭‎‮‌‎⁭‬​⁮⁮‬‬‎⁬⁫‍⁭⁯‮(str1) > 2 ? -1209142646 : (num3 = -1477281121);
              continue;
            case 5:
              num1 = -193988547;
              continue;
            case 6:
              num1 = (int) num2 * -1253739380 ^ -1425689164;
              continue;
            default:
              goto label_10;
          }
        }
      }
label_10:
      string str2 = JSONClass.\u206E​⁫‮‎​⁫‬‎⁫⁮⁭⁭‎⁭⁬‭⁪‫‎‎‬‏‏⁪⁯⁭⁬‮⁪‌⁮‎​⁬‌​⁫⁭⁫‮(str1, "}");
label_11:
      int num4 = -1777020043;
      string str3;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ -875267492)) % 4U)
        {
          case 1:
            str3 = str2;
            num4 = (int) num5 * 248869935 ^ 476846549;
            continue;
          case 2:
            num4 = (int) num5 * 108299040 ^ 595249156;
            continue;
          case 3:
            goto label_11;
          default:
            goto label_15;
        }
      }
label_15:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
label_1:
      int num1 = -590853101;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -784066118)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 165666398 ^ -1752539295;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_9:
        int num3 = enumerator.MoveNext() ? -1979662015 : (num3 = -922870208);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -784066118)) % 10U)
          {
            case 0:
              str1 = JSONClass.\u206E​⁫‮‎​⁫‬‎⁫⁮⁭⁭‎⁭⁬‭⁪‫‎‎‬‏‏⁪⁯⁭⁬‮⁪‌⁮‎​⁬‌​⁫⁭⁫‮(str1, ", ");
              num3 = (int) num4 * -1211605877 ^ -2058634443;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -1545032794;
              continue;
            case 2:
              num3 = (int) num4 * -678784836 ^ 1391616505;
              continue;
            case 3:
              num3 = (int) num4 * -1418478448 ^ 1527041547;
              continue;
            case 4:
              num3 = -1979662015;
              continue;
            case 5:
              str1 = JSONClass.\u202A‪‏⁭‫‪‪‭⁭‎‏‌⁮⁬⁯⁯‪‏‌​⁬⁫‍‭‭‎‍‌‬‮⁭⁭‭‏‍⁫‭⁭‪‪‮(str1, "\n", aPrefix, "   ");
              str1 = JSONClass.\u206B‭‬⁯‭​⁫⁯⁪⁯⁯‏‎‫‪⁯‫⁪⁮⁬‮⁭‏‎‌‮⁮⁪‎‬‬‎⁯‮‎‭‮‫⁪⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u206E​⁫‮‎​⁫‬‎⁫⁮⁭⁭‎⁭⁬‭⁪‫‎‎‬‏‏⁪⁯⁭⁬‮⁪‌⁮‎​⁬‌​⁫⁭⁫‮(aPrefix, "   "))
              });
              num3 = -2138420779;
              continue;
            case 6:
              int num5 = !flag ? 1942050779 : (num5 = 1628624512);
              num3 = num5 ^ (int) num4 * -332444050;
              continue;
            case 7:
              goto label_9;
            case 9:
              flag = JSONClass.\u206E‪‫‎⁮⁬​‭‎⁬‏⁯‍‍‫‪‫​‏⁮⁮‭⁭‎‮‌‎⁭‬​⁮⁮‬‬‎⁬⁫‍⁭⁯‮(str1) > 3;
              num3 = (int) num4 * 846953558 ^ -1717521900;
              continue;
            default:
              goto label_17;
          }
        }
      }
label_17:
      string str2 = JSONClass.\u202A‪‏⁭‫‪‪‭⁭‎‏‌⁮⁬⁯⁯‪‏‌​⁬⁫‍‭‭‎‍‌‬‮⁭⁭‭‏‍⁫‭⁭‪‪‮(str1, "\n", aPrefix, "}");
label_18:
      int num6 = -407698337;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -784066118)) % 3U)
        {
          case 0:
            goto label_18;
          case 1:
            num6 = (int) num7 * -530693506 ^ -1594407200;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return str2;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = 1445934238;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 931523502)) % 6U)
        {
          case 1:
            num1 = (int) num2 * -668620567 ^ 1310603035;
            continue;
          case 2:
            JSONClass.\u206C‫⁮‪‫​⁭‌⁬‫‫‎‏‮‬‌⁯‫⁬‬‌⁪⁯‮⁭‍‮‮‍‏‭⁪⁬⁮‎‫⁫⁬‪⁮‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -1740835401 ^ -1115985025;
            continue;
          case 3:
            num1 = (int) num2 * 1546673490 ^ 67729162;
            continue;
          case 4:
            JSONClass.\u202C⁪⁭‎‌‌⁭​⁪‍⁯‭⁭‍⁭⁪⁫⁮‎‫‪‎‬⁫⁪⁭‪⁬⁪⁪‪‍‌‏⁭‪‭‮‍‌‮(aWriter, (byte) 2);
            num1 = (int) num2 * 1921641214 ^ -817380963;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator();
      try
      {
label_11:
        int num3 = enumerator.MoveNext() ? 1342170746 : (num3 = 1168871831);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 931523502)) % 6U)
          {
            case 0:
              num3 = 1342170746;
              continue;
            case 1:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -1476295285 ^ -664327939;
              continue;
            case 2:
              current = enumerator.Current;
              JSONClass.\u202A⁬‮⁯​‏⁬‮⁫‮‬‬⁫‮‌‌‎⁫‪⁫⁬‫⁪‏‭⁭‮‭‬​‏⁮⁭‍‌‎‎‬⁪‮(aWriter, current);
              num3 = 775044387;
              continue;
            case 3:
              goto label_19;
            case 4:
              goto label_11;
            case 5:
              num3 = (int) num4 * -733864279 ^ -459993926;
              continue;
            default:
              goto label_15;
          }
        }
label_19:
        return;
label_15:;
      }
      finally
      {
        enumerator.Dispose();
label_17:
        int num5 = 1810548466;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 931523502)) % 3U)
          {
            case 0:
              goto label_17;
            case 1:
              num5 = (int) num6 * -340063774 ^ 329177446;
              continue;
            default:
              goto label_21;
          }
        }
label_21:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = -1069139959;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -82056758)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -472316566 ^ -1198456320;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u206A‭⁫⁬⁫⁪‮‎⁭‬​​​‮⁪⁬‎⁯⁭‮⁮⁪⁭‫‪⁯‪⁯⁪⁬‪​‏‭‍⁫‎⁬‍⁪‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206E‪‫‎⁮⁬​‭‎⁬‏⁯‍‍‫‪‫​‏⁮⁮‭⁭‎‮‌‎⁭‬​⁮⁮‬‬‎⁬⁫‍⁭⁯‮([In] string obj0) => obj0.Length;

    static string \u206E​⁫‮‎​⁫‬‎⁫⁮⁭⁭‎⁭⁬‭⁪‫‎‎‬‏‏⁪⁯⁭⁬‮⁪‌⁮‎​⁬‌​⁫⁭⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206F‪‪‮‭‎‎‪‫⁪‭⁪‬‪‍⁬‌⁯​‬‮⁮‭⁭‫‬‍‫​‍‭⁯‫‮​⁯‫⁭‬⁭‮([In] object obj0) => obj0.ToString();

    static string \u206B‭‬⁯‭​⁫⁯⁪⁯⁯‏‎‫‪⁯‫⁪⁮⁬‮⁭‏‎‌‮⁮⁪‎‬‬‎⁯‮‎‭‮‫⁪⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A‪‏⁭‫‪‪‭⁭‎‏‌⁮⁬⁯⁯‪‏‌​⁬⁫‍‭‭‎‍‌‬‮⁭⁭‭‏‍⁫‭⁭‪‪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u202C⁪⁭‎‌‌⁭​⁪‍⁯‭⁭‍⁭⁪⁫⁮‎‫‪‎‬⁫⁪⁭‪⁬⁪⁪‪‍‌‏⁭‪‭‮‍‌‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206C‫⁮‪‫​⁭‌⁬‫‫‎‏‮‬‌⁯‫⁬‬‌⁪⁯‮⁭‍‮‮‍‏‭⁪⁬⁮‎‫⁫⁬‪⁮‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202A⁬‮⁯​‏⁬‮⁫‮‬‬⁫‮‌‌‎⁫‪⁫⁬‫⁪‏‭⁭‮‭‬​‏⁮⁭‍‌‎‎‬⁪‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
