// Decompiled with JetBrains decompiler
// Type: Cradiator.Model.ProjectStatus
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Extensions;
using System;

namespace Cradiator.Model
{
  public class ProjectStatus
  {
    public const string BUILDING = "building";
    public const string SUCCESS = "success";
    public const string NORMAL = "normal";
    public const string FAILURE = "failure";
    public const string EXCEPTION = "exception";
    public const string ERROR = "error";
    public const string UNKNOWN = "unknown";

    public string Name { get; private set; }

    public string CurrentMessage { get; set; }

    public ProjectActivity ProjectActivity { get; set; }

    public string LastBuildStatus { get; set; }

    public string ServerName { get; set; }

    public DateTime LastBuildTime { get; set; }

    [Obsolete("Constructor for XAML")]
    public ProjectStatus() => this.Name = "designer name";

    public ProjectStatus(string name) => this.Name = name;

    public string CurrentState => this.ProjectActivity == ProjectActivity.Building ? "building" : this.LastBuildStatus;

    public bool IsBroken => this.LastBuildStatus.EqualsIgnoreCase("failure") || this.LastBuildStatus.EqualsIgnoreCase("exception") || this.LastBuildStatus.EqualsIgnoreCase("error");

    public bool IsSuccessful => this.LastBuildStatus.EqualsIgnoreCase("success") || this.LastBuildStatus.EqualsIgnoreCase("normal") || this.LastBuildStatus.EqualsIgnoreCase("unknown");

    public override bool Equals(object obj) => ((ProjectStatus) obj).Name == this.Name;

    public override int GetHashCode() => this.Name.GetHashCode();
  }
}
