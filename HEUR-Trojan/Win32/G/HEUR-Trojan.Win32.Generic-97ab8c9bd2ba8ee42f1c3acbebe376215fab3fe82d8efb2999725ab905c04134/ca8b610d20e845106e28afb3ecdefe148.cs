// Decompiled with JetBrains decompiler
// Type: A.ca8b610d20e845106e28afb3ecdefe148
// Assembly: HLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C828FA1-EFB7-4355-AAE8-0E5D4BCC5CDE
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-97ab8c9bd2ba8ee42f1c3acbebe376215fab3fe82d8efb2999725ab905c04134.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace A
{
  internal sealed class ca8b610d20e845106e28afb3ecdefe148
  {
    private static ModuleHandle c1bb68b14441232b1fc9eec2b3931fdfe;

    static ca8b610d20e845106e28afb3ecdefe148()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
      ca8b610d20e845106e28afb3ecdefe148.c1bb68b14441232b1fc9eec2b3931fdfe = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
    }

    public static void c9031f01336a7fa49e6b6f09504e8467f(int _param0, int _param1, int _param2)
    {
      Type typeFromHandle;
      ConstructorInfo con;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(ca8b610d20e845106e28afb3ecdefe148.c1bb68b14441232b1fc9eec2b3931fdfe.ResolveTypeHandle(_param0));
        con = _param2 != 16777215 ? (ConstructorInfo) (object) MethodBase.GetMethodFromHandle(ca8b610d20e845106e28afb3ecdefe148.c1bb68b14441232b1fc9eec2b3931fdfe.ResolveMethodHandle(_param1), ca8b610d20e845106e28afb3ecdefe148.c1bb68b14441232b1fc9eec2b3931fdfe.ResolveTypeHandle(_param2)) : (ConstructorInfo) (object) MethodBase.GetMethodFromHandle(ca8b610d20e845106e28afb3ecdefe148.c1bb68b14441232b1fc9eec2b3931fdfe.ResolveMethodHandle(_param1));
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          ParameterInfo[] parameters = con.GetParameters();
          int length = parameters.Length + 1;
          Type[] parameterTypes = new Type[length];
          parameterTypes[0] = con.DeclaringType.MakeByRefType();
          for (int index = 1; index < length; ++index)
            parameterTypes[index] = parameters[index - 1].ParameterType;
          DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, (Type) null, parameterTypes, typeFromHandle, true);
          ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
          if (length > 0)
            ilGenerator.Emit(OpCodes.Ldarg_0);
          if (length > 1)
            ilGenerator.Emit(OpCodes.Ldarg_1);
          if (length > 2)
            ilGenerator.Emit(OpCodes.Ldarg_2);
          if (length > 3)
            ilGenerator.Emit(OpCodes.Ldarg_3);
          if (length > 4)
          {
            for (int index = 4; index < length; ++index)
              ilGenerator.Emit(OpCodes.Ldarg_S, index);
          }
          ilGenerator.Emit(OpCodes.Call, con);
          ilGenerator.Emit(OpCodes.Ret);
          Delegate @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
          field.SetValue((object) null, (object) @delegate);
        }
        catch (Exception ex)
        {
        }
      }
    }
  }
}
