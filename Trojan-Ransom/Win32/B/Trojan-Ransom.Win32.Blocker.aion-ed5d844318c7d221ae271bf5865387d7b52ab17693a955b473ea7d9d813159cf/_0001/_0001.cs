// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A7A0AD43-B2CB-4D31-A0CF-BC928B9B157F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.aion-ed5d844318c7d221ae271bf5865387d7b52ab17693a955b473ea7d9d813159cf.exe

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal class \u0001
  {
    private static Assembly \u0001 = (Assembly) null;
    private static string[] \u0001 = new string[0];

    internal static void \u0001()
    {
      try
      {
        AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0001.\u0001.\u0001);
      }
      catch (Exception ex)
      {
      }
    }

    private static Assembly \u0001([In] object obj0, [In] ResolveEventArgs obj1)
    {
label_0:
      if ((object) \u0001.\u0001.\u0001 == null)
      {
        lock (\u0001.\u0001.\u0001)
        {
          \u0001.\u0001.\u0001 = Assembly.Load("{a3999816-f3bd-4f5e-91a4-50e0a755b889}, PublicKeyToken=3e56350693f7355e");
          if ((object) \u0001.\u0001.\u0001 != null)
            \u0001.\u0001.\u0001 = \u0001.\u0001.\u0001.GetManifestResourceNames();
        }
      }
      string name = obj1.Name;
      int index = 0;
      while (true)
      {
        int num1 = index;
        if (true)
          goto label_18;
label_9:
        if (true)
        {
          if (num1 == 0)
            num1 = index;
          else
            break;
        }
        int num2 = 1;
label_16:
        index = num1 + num2;
        continue;
label_18:
        int num3 = \u0001.\u0001.\u0001.Length;
        while (true)
        {
          if (false)
          {
            num2 = num3;
            goto label_16;
          }
          else
          {
            int num4 = num3;
            if (false)
              num3 = num4;
            else if (num1 < num4)
            {
              num1 = \u0001.\u0001.\u0001[index] == name ? 1 : 0;
              goto label_9;
            }
            else
            {
              if (true)
                return (Assembly) null;
              goto label_0;
            }
          }
        }
        num2 = num3;
        goto label_16;
      }
      return !\u0001.\u0001.\u0001() ? (Assembly) null : \u0001.\u0001.\u0001;
    }

    private static unsafe bool \u0001()
    {
      int num1 = 5;
      if (num1 == 0)
        return num1 != 0;
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(num1);
      try
      {
        StackFrame[] frames = new StackTrace().GetFrames();
        *(int*) voidPtr = 2;
        while (true)
        {
          do
          {
            int num2 = *(int*) voidPtr;
            int num3 = frames.Length;
            if (true)
              num3 = num3;
            if (num2 < num3)
            {
              if ((object) frames[*(int*) voidPtr].GetMethod().Module.Assembly != (object) Assembly.GetExecutingAssembly())
                goto label_6;
            }
            else
              goto label_10;
          }
          while (false);
          break;
label_6:
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
        *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 1;
        goto label_13;
label_10:
        *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 0;
      }
      catch
      {
        *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 1;
      }
label_13:
      return (bool) *(sbyte*) ((IntPtr) voidPtr + 4);
    }
  }
}
