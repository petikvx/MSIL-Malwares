// Decompiled with JetBrains decompiler
// Type: Newtonsoft.Json.Utilities.DictionaryWrapper`2
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0010;
using \u0012;
using \u0014;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Newtonsoft.Json.Utilities
{
  internal sealed class DictionaryWrapper<TKey, TValue> : 
    IEnumerable,
    IDictionary<TKey, TValue>,
    ICollection<KeyValuePair<TKey, TValue>>,
    IEnumerable<KeyValuePair<TKey, TValue>>,
    ICollection,
    IDictionary,
    \u0003
  {
    private readonly IDictionary \u0001;
    private readonly IDictionary<TKey, TValue> \u0001;
    private object \u0001;

    public void \u0001([In] TKey obj0, [In] TValue obj1)
    {
      if (this.\u0001 != null)
      {
        if (true)
          goto label_8;
label_2:
        if (false)
          ;
        return;
label_8:
        this.\u0001.Add((object) obj0, (object) obj1);
        goto label_2;
      }
      else
      {
        if (this.\u0001 == null)
          throw new NotSupportedException();
        if (false)
          return;
        ((IDictionary<TKey, TValue>) this.\u0001).Add(obj0, obj1);
      }
    }

    public bool \u0001([In] TKey obj0) => this.\u0001 != null ? this.\u0001.Contains((object) obj0) : ((IDictionary<TKey, TValue>) this.\u0001).ContainsKey(obj0);

    [SpecialName]
    public ICollection<TKey> \u0001() => this.\u0001 != null ? (ICollection<TKey>) this.\u0001.Keys.Cast<TKey>().ToList<TKey>() : ((IDictionary<TKey, TValue>) this.\u0001).Keys;

    public bool \u0002([In] TKey obj0)
    {
      if (this.\u0001 == null)
        goto label_12;
      else
        goto label_10;
label_1:
      int num;
      if (num != 0)
      {
        if (true)
          goto label_11;
label_3:
        num = 1;
        goto label_4;
label_11:
        this.\u0001.Remove((object) obj0);
        goto label_3;
      }
      else
      {
        num = 0;
        goto label_7;
      }
label_4:
      if (num != 0)
        return num != 0;
      goto label_1;
label_7:
      if (num == 0)
        return num != 0;
      goto label_4;
label_10:
      num = this.\u0001.Contains((object) obj0) ? 1 : 0;
      goto label_1;
label_12:
      num = ((IDictionary<TKey, TValue>) this.\u0001).Remove(obj0) ? 1 : 0;
      if (true)
        return num != 0;
      goto label_7;
    }

    public bool \u0001(TKey _param1, out TValue _param2)
    {
      while (this.\u0001 != null)
      {
        if (!this.\u0001.Contains((object) _param1))
        {
          if (true)
          {
            _param2 = default (TValue);
            return false;
          }
        }
        else
        {
          _param2 = (TValue) this.\u0001[(object) _param1];
          return true;
        }
      }
      int num = ((IDictionary<TKey, TValue>) this.\u0001).TryGetValue(_param1, out _param2) ? 1 : 0;
      if (false)
        return num != 0;
      return false ? num != 0 : num != 0;
    }

    [SpecialName]
    public ICollection<TValue> \u0001() => this.\u0001 != null ? (ICollection<TValue>) this.\u0001.Values.Cast<TValue>().ToList<TValue>() : ((IDictionary<TKey, TValue>) this.\u0001).Values;

    public TValue this[[In] TKey obj0]
    {
      get
      {
        while (this.\u0001 != null)
        {
          if (true)
            return (TValue) this.\u0001[(object) obj0];
        }
        return ((IDictionary<TKey, TValue>) this.\u0001)[obj0];
      }
      [param: In] set
      {
        do
        {
          if (this.\u0001 == null)
            goto label_5;
          else
            goto label_4;
label_3:
          continue;
label_4:
          this.\u0001[(object) obj0] = (object) value;
          if (true)
            break;
          goto label_3;
label_5:
          IDictionary dictionary = this.\u0001;
          TKey key = obj0;
          TValue obj = value;
          if (true)
          {
            ((IDictionary<TKey, TValue>) dictionary)[key] = obj;
            goto label_3;
          }
          else
            goto label_3;
        }
        while (false);
      }
    }

    public void Add([In] KeyValuePair<TKey, TValue> obj0)
    {
      if (false)
        goto label_6;
      else
        goto label_3;
label_2:
      if (true)
        return;
      goto label_4;
label_3:
      if (this.\u0001 == null)
      {
        if (this.\u0001 == null)
          goto label_2;
        else
          goto label_6;
      }
label_4:
      ((IList) this.\u0001).Add((object) obj0);
      return;
label_6:
      ((ICollection<KeyValuePair<TKey, TValue>>) this.\u0001).Add(obj0);
      goto label_2;
    }

    public void \u0001()
    {
      do
      {
        if (this.\u0001 == null)
          goto label_3;
label_1:
        \u0011.\u007E\u0012\u0002((object) this.\u0001);
        continue;
label_3:
        if (true)
        {
          if (true)
          {
            IDictionary dictionary = this.\u0001;
            if (true)
              goto label_8;
label_6:
            if (false)
              goto label_1;
            else
              goto label_2;
label_8:
            ((ICollection<KeyValuePair<TKey, TValue>>) dictionary).Clear();
            goto label_6;
          }
          else
            goto label_1;
        }
      }
      while (false);
      return;
label_2:;
    }

    public bool \u0001([In] KeyValuePair<TKey, TValue> obj0)
    {
      while (this.\u0001 != null)
      {
        if (true)
          return ((IList) this.\u0001).Contains((object) obj0);
      }
      int num = ((ICollection<KeyValuePair<TKey, TValue>>) this.\u0001).Contains(obj0) ? 1 : 0;
      return false ? num != 0 : num != 0;
    }

    public void \u0001([In] KeyValuePair<TKey, TValue>[] obj0, [In] int obj1)
    {
      if (this.\u0001 != null)
      {
        IDictionaryEnumerator dictionaryEnumerator = \u0083\u0002.\u007E\u0094\u0005((object) this.\u0001);
        try
        {
          while (\u0015\u0002.\u007E\u009E\u0004((object) dictionaryEnumerator))
          {
            DictionaryEntry dictionaryEntry = (DictionaryEntry) \u0084\u0002.\u007E\u0095\u0005((object) dictionaryEnumerator);
            obj0[obj1++] = new KeyValuePair<TKey, TValue>((TKey) dictionaryEntry.Key, (TValue) dictionaryEntry.Value);
          }
        }
        finally
        {
          if (dictionaryEnumerator is IDisposable disposable)
            \u0011.\u007E\u0007\u0002((object) disposable);
        }
      }
      else
        ((ICollection<KeyValuePair<TKey, TValue>>) this.\u0001).CopyTo(obj0, obj1);
    }

    [SpecialName]
    public int \u0001()
    {
      int num;
      while (this.\u0001 == null)
      {
        if (true)
        {
          num = ((ICollection<KeyValuePair<TKey, TValue>>) this.\u0001).Count;
          goto label_6;
        }
      }
      num = \u001F.\u007E\u0013\u0003((object) this.\u0001);
label_2:
      if (true)
        return num;
label_6:
      if (true)
        return num;
      goto label_2;
    }

    [SpecialName]
    public bool \u0001()
    {
      int num;
      while (this.\u0001 == null)
      {
        if (true)
        {
          num = ((ICollection<KeyValuePair<TKey, TValue>>) this.\u0001).IsReadOnly ? 1 : 0;
          goto label_6;
        }
      }
      num = \u0015\u0002.\u007E\u009F\u0004((object) this.\u0001) ? 1 : 0;
label_2:
      if (true)
        return num != 0;
label_6:
      if (true)
        return num != 0;
      goto label_2;
    }

    public bool \u0002([In] KeyValuePair<TKey, TValue> obj0)
    {
      if (this.\u0001 != null)
        goto label_11;
label_10:
      return ((ICollection<KeyValuePair<TKey, TValue>>) this.\u0001).Remove(obj0);
label_11:
      int num = this.\u0001.Contains((object) obj0.Key) ? 1 : 0;
      if (false)
        return num != 0;
      if (num == 0)
        return true;
      if (object.Equals(this.\u0001[(object) obj0.Key], (object) obj0.Value))
      {
        if (true)
        {
          if (true)
          {
            this.\u0001.Remove((object) obj0.Key);
            return true;
          }
        }
        else
          goto label_10;
      }
      if (true)
        return false;
      goto label_10;
    }

    public IEnumerator<KeyValuePair<TKey, TValue>> \u0001()
    {
      while (this.\u0001 != null)
      {
        if (true)
          return this.\u0001.Cast<DictionaryEntry>().Select<DictionaryEntry, KeyValuePair<TKey, TValue>>((Func<DictionaryEntry, KeyValuePair<TKey, TValue>>) (obj0 => new KeyValuePair<TKey, TValue>((TKey) obj0.Key, (TValue) obj0.Value))).GetEnumerator();
      }
      return ((IEnumerable<KeyValuePair<TKey, TValue>>) this.\u0001).GetEnumerator();
    }

    IEnumerator IEnumerable.\u0001() => (IEnumerator) this.\u0001();

    void IDictionary.\u0001([In] object obj0, [In] object obj1)
    {
      if (this.\u0001 != null)
        \u0086\u0002.\u007E\u0098\u0005((object) this.\u0001, obj0, obj1);
      else
        ((IDictionary<TKey, TValue>) this.\u0001).Add((TKey) obj0, (TValue) obj1);
    }

    [SpecialName]
    object IDictionary.\u0001([In] object obj0) => this.\u0001 != null ? \u0087\u0002.\u007E\u009B\u0005((object) this.\u0001, obj0) : (object) ((IDictionary<TKey, TValue>) this.\u0001)[(TKey) obj0];

    [SpecialName]
    void IDictionary.\u0002([In] object obj0, [In] object obj1)
    {
      if (this.\u0001 != null)
        \u0086\u0002.\u007E\u0099\u0005((object) this.\u0001, obj0, obj1);
      else
        ((IDictionary<TKey, TValue>) this.\u0001)[(TKey) obj0] = (TValue) obj1;
    }

    IDictionaryEnumerator IDictionary.\u0001() => this.\u0001 != null ? \u0083\u0002.\u007E\u0094\u0005((object) this.\u0001) : (IDictionaryEnumerator) new DictionaryWrapper<TKey, TValue>.\u0001<TKey, TValue>(((IEnumerable<KeyValuePair<TKey, TValue>>) this.\u0001).GetEnumerator());

    bool IDictionary.\u0001([In] object obj0)
    {
      if (this.\u0001 == null)
        goto label_3;
      else
        goto label_6;
label_1:
      int num;
      if (true)
        return num != 0;
      goto label_5;
label_3:
      num = \u0006\u0002.\u007E\u008A\u0004((object) this.\u0001, obj0) ? 1 : 0;
label_5:
      if (true)
        return num != 0;
      goto label_1;
label_6:
      num = ((IDictionary<TKey, TValue>) this.\u0001).ContainsKey((TKey) obj0) ? 1 : 0;
      goto label_1;
    }

    [SpecialName]
    bool IDictionary.\u0002() => this.\u0001 == null && \u0015\u0002.\u007E\u0001\u0005((object) this.\u0001);

    [SpecialName]
    ICollection IDictionary.\u0001() => this.\u0001 == null ? \u0088\u0002.\u007E\u009D\u0005((object) this.\u0001) : (ICollection) ((IDictionary<TKey, TValue>) this.\u0001).Keys.ToList<TKey>();

    public void \u0001([In] object obj0)
    {
      do
      {
        if (this.\u0001 != null)
          \u0092.\u007E\u0099\u0003((object) this.\u0001, obj0);
        else
          goto label_7;
label_2:
        if (true)
          continue;
label_6:
        if (false)
          goto label_2;
        else
          goto label_4;
label_7:
        ((IDictionary<TKey, TValue>) this.\u0001).Remove((TKey) obj0);
        goto label_6;
      }
      while (false);
      return;
label_4:;
    }

    [SpecialName]
    ICollection IDictionary.\u0002() => this.\u0001 == null ? \u0088\u0002.\u007E\u009E\u0005((object) this.\u0001) : (ICollection) ((IDictionary<TKey, TValue>) this.\u0001).Values.ToList<TValue>();

    void ICollection.\u0001([In] Array obj0, [In] int obj1)
    {
      while (this.\u0001 == null)
      {
        if (true)
          goto label_5;
label_4:
        if (true)
          return;
        continue;
label_5:
        IDictionary dictionary = this.\u0001;
        KeyValuePair<TKey, TValue>[] array = (KeyValuePair<TKey, TValue>[]) obj0;
        int arrayIndex = obj1;
        if (true)
        {
          ((ICollection<KeyValuePair<TKey, TValue>>) dictionary).CopyTo(array, arrayIndex);
          goto label_4;
        }
        else
          goto label_4;
      }
      \u001C\u0002.\u007E\u0089\u0005((object) this.\u0001, obj0, obj1);
    }

    [SpecialName]
    bool ICollection.\u0003() => this.\u0001 != null && \u0015\u0002.\u007E\u0002\u0005((object) this.\u0001);

    [SpecialName]
    object ICollection.\u0002()
    {
      if (this.\u0001 == null)
      {
        // ISSUE: cast to a reference type
        object obj = \u0080\u0002.\u0091\u0005((object&) ref this.\u0001, new object(), (object) null);
      }
      return (object) this.\u0001;
    }

    [SpecialName]
    public object \u0001() => this.\u0001 != null ? (object) this.\u0001 : (object) this.\u0001;

    private struct \u0001<\u0003, \u0004> : IEnumerator, IDictionaryEnumerator
    {
      private readonly IEnumerator<KeyValuePair<\u0003, \u0004>> \u0001;

      public \u0001([In] IEnumerator<KeyValuePair<\u0003, \u0004>> obj0)
      {
        \u0006.\u0001((object) obj0, \u001C.\u0001(27959));
        this.\u0001 = obj0;
      }

      [SpecialName]
      public DictionaryEntry \u0001() => (DictionaryEntry) this.\u0003();

      [SpecialName]
      public object \u0001() => this.\u0001().Key;

      [SpecialName]
      public object \u0002() => this.\u0001().Value;

      [SpecialName]
      public object \u0003()
      {
        KeyValuePair<\u0003, \u0004> current = this.\u0001.Current;
        // ISSUE: variable of a boxed type
        __Boxed<\u0003> key = (object) current.Key;
        current = this.\u0001.Current;
        // ISSUE: variable of a boxed type
        __Boxed<\u0004> local = (object) current.Value;
        return (object) new DictionaryEntry((object) key, (object) local);
      }

      public bool \u0001() => \u0015\u0002.\u007E\u009E\u0004((object) this.\u0001);

      public void \u0001() => \u0011.\u007E\u001C\u0002((object) this.\u0001);
    }
  }
}
