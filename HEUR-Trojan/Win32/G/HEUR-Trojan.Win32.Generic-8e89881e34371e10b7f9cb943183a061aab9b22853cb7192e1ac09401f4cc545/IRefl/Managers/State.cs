// Decompiled with JetBrains decompiler
// Type: IRefl.Managers.State
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Structs;
using System.Runtime.CompilerServices;

namespace IRefl.Managers
{
  public class State
  {
    private string filter;
    private double map;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public State(string def, double counter)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              PageAdvisorStructBuilder.PrepareCreator();
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_7;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_2;
            case 5:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_1:
        this.filter = def;
        this.map = counter;
        num1 = 5;
        continue;
label_2:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        goto label_1;
label_5:
        num1 = 4;
      }
label_9:
      return;
label_7:;
    }

    public string Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.filter;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.filter = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double MoveRegistry() => this.map;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CustomizeRegistry(double info) => this.map = info;

    internal static bool CloneWrapper() => true;

    internal static bool EnableWrapper() => false;
  }
}
