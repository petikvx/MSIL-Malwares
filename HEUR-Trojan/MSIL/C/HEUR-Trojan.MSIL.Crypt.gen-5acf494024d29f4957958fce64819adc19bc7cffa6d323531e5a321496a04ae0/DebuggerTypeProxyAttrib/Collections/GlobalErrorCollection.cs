// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.Collections.GlobalErrorCollection
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Mappers;
using DebuggerTypeProxyAttrib.Maps;
using DebuggerTypeProxyAttrib.Pages;
using DebuggerTypeProxyAttrib.Resolver;
using DebuggerTypeProxyAttrib.Templates;
using DebuggerTypeProxyAttrib.Wrappers;
using System;
using System.Collections.Generic;
using System.Media;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Threading;
using Tourield.Adapter;
using Tourield.Authentication;
using Tourield.Shared;
using Tourield.Specifications;
using Tourield.Structs;

namespace DebuggerTypeProxyAttrib.Collections
{
  public class GlobalErrorCollection
  {
    private List<Initializer> _Watcher;
    public Viewport3D proccesor;
    private Model3DGroup _Configuration;
    public Model3DGroup _Client;
    public Model3DGroup pool;
    public Model3DGroup m_Manager;
    private GeometryModel3D m_Thread;
    private ModelVisual3D customer;
    private PerspectiveCamera filter;
    public bool account;
    public Dictionary<uint, Process> _Rule;
    public Dictionary<uint, ListResolverResolver> token;
    public Dictionary<uint, Info> m_Singleton;
    public Dictionary<uint, Collection> _Struct;
    public Dictionary<uint, PrinterPrototypeSpec> m_Code;
    public Dictionary<uint, DescriptorAttributeMapping> _Service;
    public Dictionary<string, List<PrinterPrototypeSpec>> m_Broadcaster;
    private PrinterPrototypeSpec m_Ref;
    private PrinterPrototypeSpec dic;
    private PrinterPrototypeSpec m_Connection;
    private PrinterPrototypeSpec _Facade;
    private DescriptorAttributeMapping _Proc;
    public uint _OrderWrapper;
    private Bridge _WrapperWrapper;
    public ErrorWrapper prototypeWrapper;
    public GeometryModel3D m_AdapterWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public GlobalErrorCollection()
    {
      int num1 = 10;
      while (true)
      {
        int num2;
        DispatcherTimer dispatcherTimer;
        switch (num1)
        {
          case 0:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.TestOrder();
            num2 = 12;
            break;
          case 1:
          case 9:
            this.AddOrder();
            this.PrepareOrder();
            dispatcherTimer = new DispatcherTimer();
            num2 = 11;
            break;
          case 2:
            this._Watcher = CodeRulesTemplate.SetOrder();
            this.VerifyOrder();
            this.SelectOrder();
            goto case 7;
          case 3:
            this._Service = new Dictionary<uint, DescriptorAttributeMapping>();
            this.m_Broadcaster = new Dictionary<string, List<PrinterPrototypeSpec>>();
            this._OrderWrapper = 1U;
            this._WrapperWrapper = new Bridge();
            num2 = 0;
            break;
          case 4:
            this.pool.Children.Add((Model3D) this._Client);
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 10;
          case 5:
            this.proccesor = new Viewport3D();
            this._Configuration = new Model3DGroup();
            this._Client = new Model3DGroup();
            this.pool = new Model3DGroup();
            this.m_Manager = new Model3DGroup();
            this.m_Thread = new GeometryModel3D();
            this.customer = new ModelVisual3D();
            this.filter = new PerspectiveCamera();
            this.account = true;
            this._Rule = new Dictionary<uint, Process>();
            this.token = new Dictionary<uint, ListResolverResolver>();
            this.m_Singleton = new Dictionary<uint, Info>();
            this._Struct = new Dictionary<uint, Collection>();
            this.m_Code = new Dictionary<uint, PrinterPrototypeSpec>();
            num1 = 3;
            continue;
          case 6:
          case 8:
            this.pool.Children.Add((Model3D) this.m_Manager);
            this.proccesor.Children.Add((Visual3D) this.customer);
            this.m_Broadcaster.Add("SpaceRocks", new List<PrinterPrototypeSpec>());
            this.prototypeWrapper = new ErrorWrapper(this._WrapperWrapper);
            num2 = 1;
            break;
          case 7:
            this.customer.Content = (Model3D) this.pool;
            this.pool.Children.Add((Model3D) this._Configuration);
            if (GlobalErrorCollection.PrepareAttribute())
            {
              num1 = 4;
              continue;
            }
            goto case 2;
          case 10:
            RegistryPagePage.ListMethod();
            if (GlobalErrorCollection.PrepareAttribute())
            {
              num1 = 5;
              continue;
            }
            goto case 12;
          case 11:
            dispatcherTimer.Interval = TimeSpan.FromSeconds(0.5);
            dispatcherTimer.Tick += new EventHandler(this.CloneOrder);
            dispatcherTimer.Start();
            num2 = 13;
            break;
          case 12:
            this.ComputeOrder();
            if (GlobalErrorCollection.PrepareAttribute())
            {
              num1 = 2;
              continue;
            }
            goto case 5;
          case 13:
            goto label_15;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
      }
label_15:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CloneOrder(object var1, EventArgs result)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        PrinterPrototypeSpec dic;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              dic._Reg._Candidate.X = 0.0;
              num2 = 5;
              continue;
            case 2:
              goto label_2;
            case 3:
            case 4:
              goto label_1;
            case 5:
              goto label_3;
            case 6:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 0;
          }
        }
label_1:
        TagAttributeMapping.RegisterOrder(ref dic._Reg, ref dic.message, this);
        num1 = 6;
        continue;
label_2:
        dic = this.dic;
        num1 = 0;
        continue;
label_3:
        dic._Reg._Candidate.Y = 1.0;
        dic._Reg._Candidate.Z = 0.0;
        goto label_1;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CollectOrder(GlobalErrorCollection param)
    {
      int num1 = 5;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        Vector3D vector3D1;
        Rect3D bounds;
        Vector3D vector3D2;
        Vector3D vector3D3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_6;
            case 1:
            case 3:
              vector3D2 = vector3D1 - vector3D3;
              foreach (PrinterPrototypeSpec printerPrototypeSpec in this.m_Code.Values)
              {
                int num3 = 5;
                if (true)
                  goto label_13;
label_10:
                Vector3D direction;
                RayHitTestParameters info = new RayHitTestParameters(bounds.Location, direction);
                List<Point3D> res = new List<Point3D>();
                bool flag2;
                if (PrototypeWriterAdapter.RevertOrder(info, printerPrototypeSpec._Reg._Tag.Bounds))
                {
                  flag2 = PrototypeWriterAdapter.CustomizeWrapper(info, printerPrototypeSpec._Reg._Tag.Bounds, ref res, param);
                  goto label_18;
                }
                else
                  goto label_20;
label_12:
                int num4;
                num3 = num4;
label_13:
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                      goto label_18;
                    case 1:
                    case 4:
                      goto label_10;
                    case 2:
                    case 3:
                      flag1 = false;
                      if (true)
                      {
                        num3 = 6;
                        continue;
                      }
                      goto label_18;
                    case 5:
                      goto label_15;
                    case 6:
                      goto label_25;
                    default:
                      if (true)
                      {
                        num3 = 0;
                        continue;
                      }
                      goto label_15;
                  }
                }
label_15:
                if ((int) printerPrototypeSpec.indexer != (int) this.dic.indexer && (int) printerPrototypeSpec.indexer != (int) this._Facade.indexer)
                {
                  direction = vector3D1 - vector3D3;
                  direction.Normalize();
                  bounds = this.dic._Reg._Tag.Bounds;
                  num4 = 4;
                  goto label_12;
                }
                else
                  goto label_21;
label_18:
                if (flag2)
                {
                  num4 = 2;
                  goto label_12;
                }
label_20:
label_21:;
              }
              flag1 = true;
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_25;
            case 2:
              vector3D2 = new Vector3D();
              goto case 1;
            case 4:
              goto label_1;
            case 6:
              goto label_25;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_6;
          }
        }
label_1:
        ref Vector3D local1 = ref vector3D1;
        double x1 = this._Facade._Reg._Tag.Bounds.Location.X;
        double y1 = this._Facade._Reg._Tag.Bounds.Location.Y;
        bounds = this._Facade._Reg._Tag.Bounds;
        double z1 = bounds.Location.Z;
        local1 = new Vector3D(x1, y1, z1);
        num1 = 2;
        continue;
label_6:
        ref Vector3D local2 = ref vector3D3;
        double x2 = this.dic._Reg._Tag.Bounds.Location.X;
        double y2 = this.dic._Reg._Tag.Bounds.Location.Y;
        bounds = this.dic._Reg._Tag.Bounds;
        double z2 = bounds.Location.Z;
        local2 = new Vector3D(x2, y2, z2);
        num1 = 4;
      }
label_25:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DeleteOrder(object reference, MouseButtonEventArgs visitor)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        PointHitTestParameters hitTestParameters1;
        Point position;
        Point3D origin;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              VisualTreeHelper.HitTest((Visual) this.proccesor, (HitTestFilterCallback) null, new HitTestResultCallback(this.CheckOrder), (HitTestParameters) hitTestParameters1);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 5;
            case 1:
            case 2:
              origin = new Point3D(position.X, position.Y, 0.0);
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_7;
            case 4:
              goto label_7;
            case 5:
              Vector3D direction = new Vector3D(position.X, position.Y, 10.0);
              hitTestParameters1 = new PointHitTestParameters(position);
              RayHitTestParameters hitTestParameters2 = new RayHitTestParameters(origin, direction);
              goto case 0;
            case 6:
              goto label_9;
            default:
              num2 = 0;
              continue;
          }
        }
label_7:
        position = visitor.GetPosition((IInputElement) this.proccesor);
        num1 = 2;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void AssetOrder()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        int x;
        int y;
        Point point;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              point = new Point(this.m_Ref._Reg.m_Descriptor.X, this.m_Ref._Reg.m_Descriptor.Y);
              if (GlobalErrorCollection.PrepareAttribute())
              {
                num2 = 6;
                continue;
              }
              goto label_5;
            case 1:
              ++x;
              num2 = 7;
              continue;
            case 2:
              x = -1;
              goto case 7;
            case 3:
            case 8:
              goto label_5;
            case 5:
              goto label_3;
            case 6:
              goto label_17;
            case 7:
              if (x <= 1)
              {
                y = -1;
                num2 = 8;
                continue;
              }
              goto label_16;
            case 9:
              goto label_10;
            default:
              if (!GlobalErrorCollection.CancelAttribute())
              {
                num2 = 5;
                continue;
              }
              goto case 7;
          }
        }
label_3:
        Point3D descriptor;
        int z;
        PointHitTestParameters hitTestParameters1;
        for (; z <= 1; ++z)
        {
          RayHitTestParameters hitTestParameters2 = new RayHitTestParameters(descriptor, new Vector3D((double) x, (double) y, (double) z));
          VisualTreeHelper.HitTest((Visual) this.proccesor, (HitTestFilterCallback) null, new HitTestResultCallback(this.CheckOrder), (HitTestParameters) hitTestParameters1);
        }
        ++y;
label_5:
        if (y > 1)
        {
          num1 = 1;
          continue;
        }
        z = -1;
        goto label_3;
label_16:
        VisualTreeHelper.HitTest((Visual) this.proccesor, (HitTestFilterCallback) null, new HitTestResultCallback(this.CheckOrder), (HitTestParameters) hitTestParameters1);
        num1 = 9;
        continue;
label_17:
        descriptor = this.m_Ref._Reg.m_Descriptor;
        Vector3D direction = new Vector3D(this._Facade._Reg.m_Descriptor.X - this.m_Ref._Reg.m_Descriptor.X, this._Facade._Reg.m_Descriptor.Y - this.m_Ref._Reg.m_Descriptor.Y, this._Facade._Reg.m_Descriptor.Z - this.m_Ref._Reg.m_Descriptor.Z);
        hitTestParameters1 = new PointHitTestParameters(point);
        RayHitTestParameters hitTestParameters3 = new RayHitTestParameters(descriptor, direction);
        num1 = 2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public HitTestResultBehavior CheckOrder(HitTestResult item)
    {
      int num1 = 4;
      if (true)
        goto label_13;
label_1:
      RayHitTestResult rayHitTestResult;
      GeometryModel3D modelHit;
      ImageBrush map;
      Rect3D bounds;
      int num2;
      if (rayHitTestResult is RayMeshGeometry3DHitTestResult geometry3DhitTestResult)
      {
        modelHit = geometry3DhitTestResult.ModelHit as GeometryModel3D;
        map = new ImageBrush();
        map.ImageSource = (ImageSource) new BitmapImage(new Uri("..\\..\\Game\\Images\\Items\\SpaceRockTri.jpg", UriKind.Relative));
        bounds = modelHit.Bounds;
        num2 = 8;
        goto label_12;
      }
label_8:
label_9:
      HitTestResultBehavior testResultBehavior = HitTestResultBehavior.Continue;
      num2 = 9;
label_12:
      num1 = num2;
label_13:
      PrinterPrototypeSpec printerPrototypeSpec;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            rayHitTestResult = item as RayHitTestResult;
            if (GlobalErrorCollection.PrepareAttribute())
            {
              num1 = 1;
              continue;
            }
            goto label_35;
          case 1:
            if (rayHitTestResult != null)
            {
              if (GlobalErrorCollection.PrepareAttribute())
              {
                num1 = 7;
                continue;
              }
              goto label_17;
            }
            else
              goto label_9;
          case 2:
            goto label_17;
          case 3:
          case 5:
            double x = bounds.X;
            double y = modelHit.Bounds.Y;
            bounds = modelHit.Bounds;
            double z = bounds.Z + 0.1;
            printerPrototypeSpec = new PrinterPrototypeSpec(new Point3D(x, y, z), (Brush) map, new Vector3D(0.0, 0.0, 0.0), ref this._OrderWrapper, this, "YellowMan1");
            this._Client.Children.Add((Model3D) printerPrototypeSpec._Reg._Tag);
            num1 = 6;
            continue;
          case 6:
            goto label_4;
          case 7:
            goto label_1;
          case 8:
            goto label_10;
          case 9:
            goto label_35;
          default:
            goto label_14;
        }
      }
label_4:
      if (this.m_Broadcaster["SpaceRocks"] != null)
        this.m_Broadcaster["SpaceRocks"].Add(printerPrototypeSpec);
label_7:
      goto label_8;
label_10:
      Dictionary<uint, Process>.Enumerator enumerator;
      if (bounds.Z <= 0.0)
      {
        enumerator = this._Rule.GetEnumerator();
        goto label_17;
      }
      else
        goto label_7;
label_14:
      num2 = 2;
      goto label_12;
label_17:
      try
      {
label_30:
        while (enumerator.MoveNext())
        {
          KeyValuePair<uint, Process> current = enumerator.Current;
          int num3 = 2;
          while (true)
          {
            int num4 = num3;
            Process process;
            while (true)
            {
              int num5;
              switch (num4)
              {
                case 0:
                case 2:
                  goto label_19;
                case 1:
                case 4:
label_25:
                  if (process.m_Descriptor.X != modelHit.Bounds.X)
                    break;
                  goto case 3;
                case 3:
                  if (process.m_Descriptor.Y == modelHit.Bounds.Y)
                  {
                    num5 = process.m_Descriptor.Z == modelHit.Bounds.Z + 0.1 ? 1 : 0;
                    goto label_23;
                  }
                  else
                    break;
                case 5:
                  goto label_35;
                default:
                  num4 = 3;
                  continue;
              }
              num5 = 0;
label_23:
              if (num5 != 0)
              {
                testResultBehavior = HitTestResultBehavior.Continue;
                if (GlobalErrorCollection.PrepareAttribute())
                  num4 = 5;
                else
                  goto label_25;
              }
              else
                goto label_30;
            }
label_19:
            process = current.Value;
            num3 = 4;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      bounds = modelHit.Bounds;
      num2 = 3;
      goto label_12;
label_35:
      return testResultBehavior;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PrepareOrder()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        Point3D point3D;
        Vector3D vector3D1;
        Vector3D vector3D2;
        Vector3D vector3D3;
        Vector3D vector3D4;
        while (true)
        {
          switch (num2)
          {
            case 0:
              ErrorWrapper prototypeWrapper1 = this.prototypeWrapper;
              string stateWrapper1 = this.prototypeWrapper.m_StateWrapper;
              point3D = this.dic._Reg.m_Descriptor;
              string str1 = point3D.ToString();
              string newLine = Environment.NewLine;
              string str2 = stateWrapper1 + "YellowMan2 Location: " + str1 + newLine;
              prototypeWrapper1.m_StateWrapper = str2;
              ref Vector3D local1 = ref vector3D3;
              point3D = this.dic._Reg._Tag.Bounds.Location;
              double x1 = point3D.X;
              Rect3D bounds = this.dic._Reg._Tag.Bounds;
              point3D = bounds.Location;
              double y1 = point3D.Y;
              bounds = this.dic._Reg._Tag.Bounds;
              point3D = bounds.Location;
              double z1 = point3D.Z;
              local1 = new Vector3D(x1, y1, z1);
              ref Vector3D local2 = ref vector3D2;
              point3D = this._Facade._Reg._Tag.Bounds.Location;
              double x2 = point3D.X;
              point3D = this._Facade._Reg._Tag.Bounds.Location;
              double y2 = point3D.Y;
              point3D = this._Facade._Reg._Tag.Bounds.Location;
              double z2 = point3D.Z;
              local2 = new Vector3D(x2, y2, z2);
              vector3D4 = new Vector3D();
              if (!GlobalErrorCollection.CancelAttribute())
              {
                num2 = 2;
                continue;
              }
              goto label_10;
            case 1:
              ErrorWrapper prototypeWrapper2 = this.prototypeWrapper;
              point3D = this._Facade._Reg.m_Descriptor;
              string str3 = point3D.ToString() ?? "";
              prototypeWrapper2.resolverWrapper = str3;
              this.prototypeWrapper.databaseWrapper = this._Facade._Reg._Tag.Bounds.ToString() ?? "";
              this.prototypeWrapper.attributeWrapper = this._Watcher.Count.ToString() ?? "";
              this.prototypeWrapper.m_StateWrapper = "Append String (Not used yet)";
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_4;
            case 2:
              goto label_4;
            case 3:
              goto label_1;
            case 4:
            case 6:
              goto label_8;
            case 5:
            case 7:
              this.prototypeWrapper.m_StateWrapper = this.prototypeWrapper.m_StateWrapper + "Vector Yellowman2 - Vector RedMan(Manual): " + vector3D1.ToString() + Environment.NewLine;
              this.prototypeWrapper.PopOrder();
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 1;
            case 8:
              goto label_12;
            default:
              goto label_7;
          }
        }
label_1:
        this.prototypeWrapper.m_StateWrapper = "RedMan(Blue) Bounds: " + this._Facade._Reg._Tag.Bounds.ToString() + Environment.NewLine;
        ErrorWrapper prototypeWrapper3 = this.prototypeWrapper;
        string stateWrapper2 = this.prototypeWrapper.m_StateWrapper;
        point3D = this._Facade._Reg.m_Descriptor;
        string str4 = point3D.ToString();
        string str5 = stateWrapper2 + "RedMan Location: " + str4;
        prototypeWrapper3.m_StateWrapper = str5;
        this.prototypeWrapper.m_StateWrapper = this.prototypeWrapper.m_StateWrapper + "YellowMan2 Bounds: " + this.dic._Reg._Tag.Bounds.ToString() + Environment.NewLine;
        num1 = 0;
        continue;
label_4:
        vector3D4 = vector3D2 - vector3D3;
        vector3D1 = new Vector3D(vector3D3.X - vector3D2.X, vector3D3.Y - vector3D2.Y, vector3D3.Z - vector3D2.Z);
        goto label_8;
label_7:
        num1 = 6;
        continue;
label_8:
        vector3D1.Negate();
        this.prototypeWrapper.m_StateWrapper = this.prototypeWrapper.m_StateWrapper + "Vector Yellowman2 - Vector RedMan: " + vector3D4.ToString() + Environment.NewLine;
        num1 = 7;
      }
label_12:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AddOrder()
    {
      int num1 = 3;
      if (!GlobalErrorCollection.CancelAttribute())
        goto label_6;
label_1:
      this._WrapperWrapper.Left = 30.0;
      int num2 = 4;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_3;
          case 1:
            goto label_1;
          case 2:
          case 4:
            this._WrapperWrapper.Height = 930.0;
            this._WrapperWrapper.Width = 330.0;
            goto case 5;
          case 5:
            this._WrapperWrapper.Show();
            this._WrapperWrapper.txt1.Height = 900.0;
            this._WrapperWrapper.txt1.Width = 300.0;
            num1 = 6;
            continue;
          case 6:
            goto label_9;
          default:
            if (GlobalErrorCollection.PrepareAttribute())
            {
              num1 = 5;
              continue;
            }
            goto label_8;
        }
      }
label_3:
      this._WrapperWrapper.Top = 30.0;
      num2 = 1;
      goto label_5;
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VerifyOrder()
    {
      int num1 = 7;
      if (GlobalErrorCollection.CancelAttribute())
        ;
      while (true)
      {
        ImageBrush map1;
        int num2;
        ImageBrush map2;
        ImageBrush map3;
        ImageBrush visitor;
        switch (num1)
        {
          case 0:
          case 4:
            this.m_Ref = new PrinterPrototypeSpec(new Point3D(6.0, 3.0, 0.1), (Brush) map1, new Vector3D(0.0, 0.0, 0.0), ref this._OrderWrapper, this, "YellowMan1");
            this._Client.Children.Add((Model3D) this.m_Ref._Reg._Tag);
            map3 = new ImageBrush();
            goto case 6;
          case 1:
            this._Client.Children.Add((Model3D) this.dic._Reg._Tag);
            this.m_Connection = new PrinterPrototypeSpec(new Point3D(2.0, 3.0, 0.1), (Brush) Brushes.Yellow, new Vector3D(0.0, 0.0, 0.0), ref this._OrderWrapper, this, "YellowMan3");
            this._Client.Children.Add((Model3D) this.m_Connection._Reg._Tag);
            visitor = new ImageBrush();
            if (!GlobalErrorCollection.CancelAttribute())
            {
              num1 = 9;
              continue;
            }
            goto label_14;
          case 2:
            map2.ImageSource = (ImageSource) new BitmapImage(new Uri("..\\..\\Game\\MarioHead.jpg", UriKind.Relative));
            int num3 = 5;
            num1 = GlobalErrorCollection.CancelAttribute() ? num3 : num3;
            continue;
          case 3:
          case 8:
            map1.ImageSource = (ImageSource) new BitmapImage(new Uri("..\\..\\Game\\BlueToadHead.jpg", UriKind.Relative));
            num2 = 0;
            break;
          case 5:
            this._Facade = new PrinterPrototypeSpec(new Point3D(1.0, 1.0, 0.1), (Brush) map2, new Vector3D(0.0, 0.0, 0.0), ref this._OrderWrapper, this, "RedMan");
            this._Client.Children.Add((Model3D) this._Facade._Reg._Tag);
            this._Facade._Annotation.system.param = 1.0;
            this._Facade._Annotation.system.m_Producer = 1.0;
            map1 = new ImageBrush();
            int num4 = 8;
            num1 = GlobalErrorCollection.CancelAttribute() ? num4 : num4;
            continue;
          case 6:
            map3.ImageSource = (ImageSource) new BitmapImage(new Uri("..\\..\\Game\\FunnyRedMushroom.jpg", UriKind.Relative));
            this.dic = new PrinterPrototypeSpec(new Point3D(3.0, 8.0, 0.1), (Brush) map3, new Vector3D(0.0, 0.0, 0.0), ref this._OrderWrapper, this, "YellowMan2");
            num2 = 1;
            break;
          case 7:
            map2 = new ImageBrush();
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto case 9;
          case 9:
            visitor.ImageSource = (ImageSource) new BitmapImage(new Uri("..\\..\\Game\\Images\\Items\\IronShield.png", UriKind.Relative));
            this._Proc = new DescriptorAttributeMapping(new Point3D(5.0, 5.0, 0.1), (Brush) visitor, new Vector3D(0.0, 0.0, 0.0), ref this._OrderWrapper, this, "Block1");
            this._Proc.creator.m_Getter = true;
            this._Client.Children.Add((Model3D) this._Proc.registry._Tag);
            this._Proc = new DescriptorAttributeMapping(new Point3D(7.0, 5.0, 0.1), (Brush) new ImageBrush()
            {
              ImageSource = (ImageSource) new BitmapImage(new Uri("..\\..\\Game\\Images\\Items\\ShieldPeach.jpg", UriKind.Relative))
            }, new Vector3D(0.0, 0.0, 0.0), ref this._OrderWrapper, this, "Block2");
            this._Client.Children.Add((Model3D) this._Proc.registry._Tag);
            num2 = 10;
            break;
          case 10:
            goto label_5;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 7;
        }
        num1 = num2;
      }
label_5:
      return;
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void TestOrder()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              this.filter.Position = new Point3D(10.0, -6.0, 30.0);
              num2 = 3;
              continue;
            case 1:
            case 3:
              goto label_2;
            case 2:
              goto label_1;
            case 5:
              goto label_7;
            default:
              num2 = 2;
              continue;
          }
        }
label_1:
        this.proccesor.Camera = (Camera) this.filter;
        num1 = 5;
        continue;
label_2:
        this.filter.LookDirection = new Vector3D(0.0, 0.5, -1.0);
        this.filter.FieldOfView = 60.0;
        goto label_1;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ComputeOrder()
    {
      int num1 = 2;
      if (true)
        goto label_6;
label_1:
      DirectionalLight directionalLight;
      directionalLight.Color = Colors.White;
      if (true)
      {
        num1 = 5;
        goto label_6;
      }
label_2:
      directionalLight = new DirectionalLight();
      if (GlobalErrorCollection.PrepareAttribute())
      {
        num1 = 4;
        goto label_6;
      }
label_3:
      this._Configuration.Children.Add((Model3D) directionalLight);
      directionalLight = new DirectionalLight();
      directionalLight.Color = Colors.Honeydew;
      directionalLight.Direction = new Vector3D(-0.61, -0.5, -0.61);
      this._Configuration.Children.Add((Model3D) directionalLight);
      int num2 = 6;
label_5:
      num1 = num2;
label_6:
      switch (num1)
      {
        case 0:
        case 3:
          goto label_3;
        case 1:
        case 4:
          goto label_1;
        case 2:
          goto label_2;
        case 5:
          directionalLight.Direction = new Vector3D(-0.61, -0.5, -0.61);
          goto label_3;
        case 6:
          break;
        default:
          num2 = 0;
          goto label_5;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SelectOrder()
    {
      foreach (Initializer initializer in this._Watcher)
      {
        int num = 2;
        if (true)
          goto label_4;
label_3:
        this._Configuration.Children.Add((Model3D) initializer._Item);
        goto label_6;
label_4:
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_3;
            case 1:
            case 3:
              goto label_6;
            default:
              num = 3;
              continue;
          }
        }
label_6:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Initializer StopOrder(Point3D i)
    {
      int num1 = 2;
      List<Initializer>.Enumerator enumerator;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_20;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        enumerator = this._Watcher.GetEnumerator();
        num1 = 3;
      }
label_2:
      Initializer initializer;
      try
      {
        while (enumerator.MoveNext())
        {
          Initializer current = enumerator.Current;
          int num3 = 2;
          bool flag;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                if (current._Instance.X == i.X)
                {
                  num3 = 3;
                  continue;
                }
                goto label_13;
              case 1:
              case 3:
                if (current._Instance.Y == i.Y)
                {
                  flag = current._Instance.Z == i.Z;
                  goto case 4;
                }
                else
                  goto label_12;
              case 4:
                if (flag)
                {
                  initializer = current;
                  num3 = 5;
                  continue;
                }
                goto label_12;
              case 5:
                goto label_20;
              default:
                num3 = 4;
                continue;
            }
          }
label_12:
label_13:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      initializer = (Initializer) null;
label_20:
      return initializer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DefineOrder(object key, KeyEventArgs vis)
    {
      int num1 = 19;
      if (GlobalErrorCollection.PrepareAttribute())
        goto label_19;
      else
        goto label_24;
label_18:
      int num2;
      num1 = num2;
label_19:
      SoundPlayer soundPlayer1;
      bool flag1;
      bool account;
      SoundPlayer soundPlayer2;
      bool flag2;
      Initializer initializer1;
      bool flag3;
      while (true)
      {
        bool flag4;
        bool flag5;
        Initializer initializer2;
        switch (num1)
        {
          case 0:
            flag2 = initializer2 != null;
            if (GlobalErrorCollection.PrepareAttribute())
            {
              num1 = 4;
              continue;
            }
            goto label_24;
          case 1:
          case 21:
            goto label_24;
          case 2:
          case 16:
            goto label_30;
          case 3:
          case 14:
            goto label_27;
          case 4:
            goto label_22;
          case 5:
            if (!this.CollectOrder(this))
            {
              int num3 = (int) MessageBox.Show("YellowMan2 can't see Redman.");
            }
            break;
          case 6:
            if (!flag4)
            {
              if (vis.Key != Key.D)
              {
                flag5 = vis.Key == Key.W;
                num1 = 18;
                continue;
              }
              goto label_11;
            }
            else
              goto label_9;
          case 7:
            goto label_25;
          case 8:
          case 13:
            if (vis.Key != Key.Down)
            {
              if (vis.Key != Key.Left)
              {
                if (vis.Key == Key.Right)
                {
                  this._Facade._Reg._Candidate.X = 1.0;
                  this._Facade._Reg._Candidate.Y = 0.0;
                  this._Facade._Reg._Candidate.Z = 0.0;
                  TagAttributeMapping.RegisterOrder(ref this._Facade._Reg, ref this._Facade.message, this);
                  soundPlayer1 = new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\TappingAlong.wav");
                  if (true)
                  {
                    num1 = 3;
                    continue;
                  }
                  goto label_5;
                }
                else
                  goto label_37;
              }
              else
                goto label_2;
            }
            else
              goto label_17;
          case 9:
            if (flag3)
            {
              this._Facade._Reg._Candidate.X = 0.0;
              this._Facade._Reg._Candidate.Y = 1.0;
              if (true)
              {
                num1 = 22;
                continue;
              }
              goto label_30;
            }
            else
              goto label_34;
          case 10:
            goto label_21;
          case 11:
            if (flag1)
            {
              account = this.account;
              num1 = 16;
              continue;
            }
            break;
          case 12:
            initializer2 = this.StopOrder(initializer1._Instance);
            if (GlobalErrorCollection.PrepareAttribute())
            {
              num1 = 0;
              continue;
            }
            goto case 5;
          case 15:
            soundPlayer2.Play();
            goto case 8;
          case 17:
            goto label_12;
          case 18:
            if (!flag5)
              goto case 8;
            else
              goto label_32;
          case 19:
            goto label_5;
          case 20:
            this.m_Ref._Reg._Candidate.Z = 0.0;
            TagAttributeMapping.RegisterOrder(ref this.m_Ref._Reg, ref this.m_Ref.message, this);
            new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\smb_jump-small.wav").Play();
            goto case 8;
          case 22:
            goto label_33;
          case 23:
            goto label_46;
          case 24:
            goto label_47;
          default:
            if (!GlobalErrorCollection.CancelAttribute())
            {
              num1 = 23;
              continue;
            }
            goto label_21;
        }
        if (vis.Key != Key.S)
        {
          flag4 = vis.Key == Key.A;
          num1 = 6;
        }
        else
          goto label_44;
      }
label_2:
      this._Facade._Reg._Candidate.X = -1.0;
      this._Facade._Reg._Candidate.Y = 0.0;
      this._Facade._Reg._Candidate.Z = 0.0;
      TagAttributeMapping.RegisterOrder(ref this._Facade._Reg, ref this._Facade.message, this);
      new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\TappingAlong.wav").Play();
      goto label_24;
label_5:
      flag1 = vis.Key == Key.P;
      num2 = 11;
      goto label_18;
label_9:
      this.m_Ref._Reg._Candidate.X = -1.0;
      this.m_Ref._Reg._Candidate.Y = 0.0;
      this.m_Ref._Reg._Candidate.Z = 0.0;
      TagAttributeMapping.RegisterOrder(ref this.m_Ref._Reg, ref this.m_Ref.message, this);
      new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\smb_jump-small.wav").Play();
      num2 = 13;
      goto label_18;
label_11:
      this.m_Ref._Reg._Candidate.X = 1.0;
      this.m_Ref._Reg._Candidate.Y = 0.0;
      this.m_Ref._Reg._Candidate.Z = 0.0;
      TagAttributeMapping.RegisterOrder(ref this.m_Ref._Reg, ref this.m_Ref.message, this);
      new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\smb_jump-small.wav").Play();
      num2 = 8;
      goto label_18;
label_12:
      TagAttributeMapping.RegisterOrder(ref this.m_Ref._Reg, ref this.m_Ref.message, this);
      soundPlayer2 = new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\smb_jump-small.wav");
      num2 = 15;
      goto label_18;
label_17:
      this._Facade._Reg._Candidate.X = 0.0;
      this._Facade._Reg._Candidate.Y = -1.0;
      this._Facade._Reg._Candidate.Z = 0.0;
      TagAttributeMapping.RegisterOrder(ref this._Facade._Reg, ref this._Facade.message, this);
      SoundPlayer soundPlayer3 = new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\TappingAlong.wav");
      goto label_46;
label_21:
      this.m_Ref._Reg._Candidate.Y = 1.0;
      num2 = 20;
      goto label_18;
label_22:
      if (flag2)
        return;
      this._Watcher.Add(initializer1);
      this._Configuration.Children.Add((Model3D) initializer1._Item);
      goto label_24;
label_27:
      soundPlayer1.Play();
      num2 = 21;
      goto label_18;
label_30:
      this.account = !account;
      this.PrepareOrder();
      num2 = 5;
      goto label_18;
label_32:
      this.m_Ref._Reg._Candidate.X = 0.0;
      num2 = 10;
      goto label_18;
label_33:
      this._Facade._Reg._Candidate.Z = 0.0;
      TagAttributeMapping.RegisterOrder(ref this._Facade._Reg, ref this._Facade.message, this);
      new SoundPlayer(Environment.CurrentDirectory + "\\..\\..\\Game\\GameSounds\\TappingAlong.wav").Play();
      goto label_24;
label_34:
      bool flag6 = vis.Key == Key.Space;
      num2 = 7;
      goto label_18;
label_37:
      flag3 = vis.Key == Key.Up;
      num2 = 9;
      goto label_18;
label_44:
      this.m_Ref._Reg._Candidate = ServiceRulesTemplate.RunOrder();
      num2 = 17;
      goto label_18;
label_46:
      soundPlayer3.Play();
      num2 = 1;
      goto label_18;
label_47:
      return;
label_24:
      this.PrepareOrder();
      if (GlobalErrorCollection.PrepareAttribute())
      {
        num1 = 24;
        goto label_19;
      }
label_25:
      if (flag6)
      {
        initializer1 = new Initializer(ErrorParserStructBuilder.FindOrder(new Point3D(this._Facade._Reg.m_Descriptor.X, this._Facade._Reg.m_Descriptor.Y, this._Facade._Reg.m_Descriptor.Z - 0.1), (Brush) Brushes.DarkGreen));
        initializer1._Instance.X = this._Facade._Reg.m_Descriptor.X;
        initializer1._Instance.Y = this._Facade._Reg.m_Descriptor.Y;
        initializer1._Instance.Z = this._Facade._Reg.m_Descriptor.Z - 0.1;
        initializer1.authentication = (Brush) Brushes.DarkGray;
        num2 = 12;
        goto label_18;
      }
      else
        goto label_24;
    }

    internal static bool PrepareAttribute() => true;

    internal static bool CancelAttribute() => false;
  }
}
