// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.UsageCounts1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.Collections.Generic;

namespace SmartAssembly.SmartUsageCore
{
  public class UsageCounts1
  {
    private readonly ulong[] m_StaticFeatureCounts;
    private readonly Dictionary<string, ulong> m_DynamicFeatureCounts;

    public UsageCounts1(ulong[] staticFeatureCounts, Dictionary<string, ulong> dynamicFeatureCounts)
    {
      try
      {
        this.m_StaticFeatureCounts = staticFeatureCounts;
        this.m_DynamicFeatureCounts = dynamicFeatureCounts;
      }
      catch (Exception ex)
      {
        ulong[] o2 = staticFeatureCounts;
        Dictionary<string, ulong> o3 = dynamicFeatureCounts;
        StackFrameHelper.CreateException3(ex, (object) this, (object) o2, (object) o3);
        throw;
      }
    }

    public Dictionary<string, ulong> DynamicFeatureCounts
    {
      get
      {
        try
        {
          return this.m_DynamicFeatureCounts;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }

    public ulong[] StaticFeatureCounts
    {
      get
      {
        try
        {
          return this.m_StaticFeatureCounts;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }

    public bool IsEmpty
    {
      get
      {
        try
        {
          return this.m_StaticFeatureCounts.Length == 0 && this.m_DynamicFeatureCounts.Count == 0;
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }
    }
  }
}
