// Decompiled with JetBrains decompiler
// Type: 321063983049.198191743587
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003213435668470;
using \u003312159205690;
using \u003321063983049;
using \u003364073242711;
using \u003410944228285;
using \u003441916305726;
using \u003548736522694;
using \u003785947670411;
using \u003871896905930;
using \u003966871253857;
using Microsoft.PythonTools;
using Microsoft.PythonTools.Infrastructure;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Xml.XPath;

namespace \u003321063983049
{
  internal class \u003198191743587 : IDisposable
  {
    private readonly IFrameworkHandle \u003507251369132;
    private static readonly string \u003938450116341 = PythonToolsInstallPath.GetFile("testlauncher.py", (Assembly) null);
    private static readonly Guid \u003437556084363 = new Guid("{FEB76325-D127-4E02-B59D-B16D93D46CF5}");
    private static readonly Guid \u003745236471667 = new Guid("EC1375B7-E2CE-43E8-BF75-DC638DE1F1F9");
    private static readonly Guid \u003653672298350 = new Guid("3B476D35-A401-11D2-AAD4-00C04F990171");
    private readonly \u003803592471815 \u003291171699927;
    private readonly \u003064588995134 \u003220951548158;
    private readonly \u003454440989623 \u003270550487331;
    private readonly string \u003592127407752;
    private readonly int \u003137080356885;
    private readonly IRunContext \u003970551966841;
    private readonly ITestConfiguration \u003126610770986;

    internal \u003198191743587(
      ITestConfiguration config,
      \u003064588995134 projectSettings,
      IFrameworkHandle frameworkHandle,
      IRunContext runContext)
    {
      this.\u003126610770986 = config ?? throw new ArgumentNullException(nameof (config));
      this.\u003220951548158 = projectSettings ?? throw new ArgumentNullException(nameof (projectSettings));
      this.\u003507251369132 = frameworkHandle ?? throw new ArgumentNullException(nameof (frameworkHandle));
      this.\u003970551966841 = runContext ?? throw new ArgumentNullException(nameof (runContext));
      this.\u003291171699927 = \u003803592471815.\u003269632878397("_PTVS_PID");
      \u003198191743587.\u003166858609717(this.\u003291171699927, this.\u003970551966841, this.\u003220951548158, out this.\u003270550487331, out this.\u003592127407752, out this.\u003137080356885);
    }

    public void \u003394133499761()
    {
    }

    private string[] \u003133678387787(IEnumerable<TestCase> _param1, string _param2)
    {
      List<string> stringList = new List<string>();
      stringList.Add(\u003198191743587.\u003938450116341);
      stringList.Add(this.\u003220951548158.\u003106365127459);
      stringList.Add(this.\u003126610770986.Command);
      stringList.Add(this.\u003592127407752);
      stringList.Add(this.\u003137080356885.ToString());
      stringList.Add(this.\u003270550487331 == \u003454440989623.PythonAndNative ? "mixed" : string.Empty);
      stringList.Add(_param2 ?? string.Empty);
      stringList.AddRange((IEnumerable<string>) this.\u003126610770986.GetExecutionArguments(_param1, this.\u003220951548158));
      return stringList.ToArray();
    }

    internal static bool \u003093863834818(IRunSettings _param0)
    {
      XPathDocument xpathDocument = \u003036900961292.\u003586885916667(_param0.SettingsXml);
      try
      {
        return xpathDocument.CreateNavigator().SelectSingleNode("/RunSettings/Python/DryRun[@value='true']") != null;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    internal static bool \u003826573426832(IRunSettings _param0)
    {
      XPathDocument xpathDocument = \u003036900961292.\u003586885916667(_param0.SettingsXml);
      try
      {
        return xpathDocument.CreateNavigator().SelectSingleNode("/RunSettings/Python/ShowConsole[@value='false']") == null;
      }
      catch (Exception ex)
      {
        return true;
      }
    }

    internal static void \u003166858609717(
      \u003803592471815 _param0,
      IRunContext _param1,
      \u003064588995134 _param2,
      out \u003454440989623 _param3,
      out string _param4,
      out int _param5)
    {
      _param3 = \u003454440989623.None;
      _param4 = "";
      _param5 = 0;
      if (_param1.IsBeingDebugged && _param0 != null)
        _param3 = _param2.\u003100552030696 ? \u003454440989623.PythonAndNative : \u003454440989623.PythonOnly;
      if (_param3 != \u003454440989623.PythonOnly)
        return;
      if (_param2.\u003713212492592)
      {
        byte[] numArray = new byte[24];
        RandomNumberGenerator.Create().GetNonZeroBytes(numArray);
        _param4 = Convert.ToBase64String(numArray).Replace('+', '-').Replace('/', '_').TrimEnd('=');
      }
      SocketUtils.GetRandomPortListener(IPAddress.Loopback, ref _param5, 49152, 65536, true).Stop();
    }

    private Dictionary<string, string> \u003101719687363(IEnumerable<TestCase> _param1)
    {
      string key = this.\u003220951548158.\u003433255215837;
      string str = this.\u003487925575331(_param1, this.\u003220951548158);
      Dictionary<string, string> dictionary = new Dictionary<string, string>();
      if (!string.IsNullOrWhiteSpace(key))
        dictionary[key] = str;
      foreach (KeyValuePair<string, string> keyValuePair in this.\u003220951548158.\u003615420650558)
        dictionary[keyValuePair.Key] = keyValuePair.Value;
      return dictionary;
    }

    private string \u003487925575331(IEnumerable<TestCase> _param1, \u003064588995134 _param2)
    {
      List<string> source = _param2.\u003579671787876;
      source.Insert(0, _param2.\u003106365127459);
      return string.Join(";", source.Where<string>(new Func<string, bool>(Directory.Exists)).Distinct<string>((IEqualityComparer<string>) StringComparer.OrdinalIgnoreCase));
    }

    public void \u003282770258166(IEnumerable<TestCase> _param1, ManualResetEvent _param2)
    {
      int num = \u003549737716975.\u003328768774063(this.\u003970551966841) ? 1 : 0;
      string str = (string) null;
      if (num != 0)
        str = \u003549737716975.\u003592782547770(_param1);
      this.\u003171902502705(_param1, str, _param2);
      if (num == 0)
        return;
      \u003549737716975.\u003099152921219(this.\u003507251369132, str);
    }

    private void \u003171902502705(
      IEnumerable<TestCase> _param1,
      string _param2,
      ManualResetEvent _param3)
    {
      try
      {
        \u003198191743587.\u003653358623390(this.\u003291171699927, this.\u003270550487331);
        Dictionary<string, string> dictionary = this.\u003101719687363(_param1);
        string[] strArray = this.\u003133678387787(_param1, _param2);
        // ISSUE: object of a compiler-generated type is created
        \u003198191743587.\u003556554867612 obj = (\u003198191743587.\u003556554867612) new \u003615347801101.\u003300542981269((IMessageLogger) this.\u003507251369132);
        using (ProcessOutput processOutput = ProcessOutput.Run(this.\u003220951548158.\u003383078423503, (IEnumerable<string>) strArray, this.\u003220951548158.\u003106365127459, (IEnumerable<KeyValuePair<string, string>>) dictionary, false, (Redirector) obj, true, false, Encoding.UTF8, Encoding.UTF8))
        {
          this.\u003246003775099("cd " + this.\u003220951548158.\u003106365127459);
          this.\u003246003775099("set " + this.\u003220951548158.\u003433255215837 + "=" + dictionary[this.\u003220951548158.\u003433255215837]);
          this.\u003246003775099(processOutput.Arguments);
          if (processOutput.ExitCode.HasValue)
            return;
          try
          {
            if (this.\u003270550487331 != \u003454440989623.None)
              \u003198191743587.\u003372740317946(this.\u003291171699927, processOutput, this.\u003270550487331, this.\u003592127407752, this.\u003137080356885);
            WaitHandle[] waitHandles = new WaitHandle[2]
            {
              (WaitHandle) _param3,
              processOutput.WaitHandle
            };
            if (processOutput.WaitHandle == null)
              return;
            switch (WaitHandle.WaitAny(waitHandles))
            {
              case 0:
                try
                {
                  processOutput.Kill();
                  break;
                }
                catch (InvalidOperationException ex)
                {
                  break;
                }
            }
          }
          catch (COMException ex1)
          {
            this.\u003151046668288(Strings.Test_ErrorConnecting);
            try
            {
              processOutput.Kill();
            }
            catch (InvalidOperationException ex2)
            {
            }
          }
        }
      }
      catch (Exception ex)
      {
        this.\u003151046668288(ex.ToString());
      }
    }

    internal static void \u003372740317946(
      \u003803592471815 _param0,
      ProcessOutput _param1,
      \u003454440989623 _param2,
      string _param3,
      int _param4)
    {
      switch (_param2)
      {
        case \u003454440989623.PythonOnly:
          string str = string.Format("tcp://{0}@localhost:{1}", (object) _param3, (object) _param4);
          do
            ;
          while (!_param0.\u003239671808114(_param1, \u003198191743587.\u003437556084363, str) && !_param1.Wait(TimeSpan.FromMilliseconds(500.0)));
          break;
        case \u003454440989623.PythonAndNative:
          Guid[] guidArray = new Guid[2]
          {
            \u003198191743587.\u003745236471667,
            \u003198191743587.\u003653672298350
          };
          do
            ;
          while (!_param0.\u003216201335603(_param1, guidArray) && !_param1.Wait(TimeSpan.FromMilliseconds(500.0)));
          break;
      }
    }

    [Conditional("DEBUG")]
    private void \u003050662900013(string _param1) => ((IMessageLogger) this.\u003507251369132).SendMessage((TestMessageLevel) 0, _param1);

    [Conditional("DEBUG")]
    private void \u003354122501862(string _param1) => ((IMessageLogger) this.\u003507251369132).SendMessage((TestMessageLevel) 2, _param1);

    private void \u003246003775099(string _param1) => ((IMessageLogger) this.\u003507251369132).SendMessage((TestMessageLevel) 0, _param1);

    private void \u003151046668288(string _param1) => ((IMessageLogger) this.\u003507251369132).SendMessage((TestMessageLevel) 2, _param1);

    internal static void \u003653358623390(\u003803592471815 _param0, \u003454440989623 _param1)
    {
      // ISSUE: variable of a compiler-generated type
      DTE dte = _param0?.\u003217525863766();
      if (dte == null || _param1 == \u003454440989623.None)
        return;
      // ISSUE: reference to a compiler-generated method
      dte.Debugger.DetachAll();
    }

    private sealed class \u003556554867612 : Redirector
    {
      public static readonly \u003017821964017.\u003454972936626 \u003760912921834 = new \u003017821964017.\u003454972936626();

      public virtual void \u003014436237145(string _param1)
      {
        try
        {
          // ISSUE: reference to a compiler-generated field
          ((\u003615347801101.\u003300542981269) this).\u003081785623727.SendMessage((TestMessageLevel) 2, _param1);
        }
        catch (ArgumentException ex)
        {
        }
      }

      public virtual void \u003160343950952(string _param1)
      {
        try
        {
          // ISSUE: reference to a compiler-generated field
          ((\u003615347801101.\u003300542981269) this).\u003081785623727.SendMessage((TestMessageLevel) 0, _param1);
        }
        catch (ArgumentException ex)
        {
        }
      }
    }
  }
}
