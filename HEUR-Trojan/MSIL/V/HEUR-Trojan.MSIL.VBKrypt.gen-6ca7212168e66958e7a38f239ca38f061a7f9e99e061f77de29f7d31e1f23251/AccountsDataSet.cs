// Decompiled with JetBrains decompiler
// Type: ATM_Final.AccountsDataSet
// Assembly: StringMa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FAE20789-B98F-45AF-8006-81C44052C194
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan.MSIL.VBKrypt.gen-6ca7212168e66958e7a38f239ca38f061a7f9e99e061f77de29f7d31e1f23251.exe

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace ATM_Final
{
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [HelpKeyword("vs.data.DataSet")]
  [ToolboxItem(true)]
  [XmlRoot("AccountsDataSet")]
  [DesignerCategory("code")]
  [Serializable]
  public class AccountsDataSet : DataSet
  {
    private AccountsDataSet.TableDataTable tableTable;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public AccountsDataSet()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected AccountsDataSet(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (Table)] != null)
            base.Tables.Add((DataTable) new AccountsDataSet.TableDataTable(dataSet.Tables[nameof (Table)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public AccountsDataSet.TableDataTable Table
    {
      get
      {
label_1:
        int num1 = -1685228705;
        AccountsDataSet.TableDataTable tableTable;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1778286852)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              tableTable = this.tableTable;
              num1 = (int) num2 * -1998768910 ^ 815331159;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return tableTable;
      }
    }

    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get
      {
label_1:
        int num1 = -679226578;
        SchemaSerializationMode serializationMode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1405306568)) % 3U)
          {
            case 1:
              serializationMode = this._schemaSerializationMode;
              num1 = (int) num2 * 1492108214 ^ -1922645218;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return serializationMode;
      }
      set
      {
label_1:
        int num1 = -1322752503;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1408379780)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this._schemaSerializationMode = value;
              num1 = (int) num2 * 568759763 ^ -326657449;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public new DataTableCollection Tables
    {
      get
      {
label_1:
        int num1 = -760199466;
        DataTableCollection tables;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -587816123)) % 3U)
          {
            case 1:
              tables = base.Tables;
              num1 = (int) num2 * -381601592 ^ 1640164860;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return tables;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [DebuggerNonUserCode]
    public new DataRelationCollection Relations
    {
      get
      {
        DataRelationCollection relations = base.Relations;
label_1:
        int num1 = 1437843543;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 954038046)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -858686308 ^ 1912899624;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return relations;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
label_1:
      int num1 = -1927387733;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -405894542)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.EndInit();
            num1 = (int) num2 * 2134030979 ^ 87085957;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public override DataSet Clone()
    {
label_1:
      int num1 = -1279694442;
      AccountsDataSet accountsDataSet;
      DataSet dataSet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1896811729)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 714539061 ^ -2129984328;
            continue;
          case 2:
            goto label_1;
          case 3:
            dataSet = (DataSet) accountsDataSet;
            num1 = (int) num2 * 619395801 ^ 612291494;
            continue;
          case 4:
            accountsDataSet.SchemaSerializationMode = this.SchemaSerializationMode;
            num1 = (int) num2 * 764579795 ^ -1511037762;
            continue;
          case 5:
            accountsDataSet = (AccountsDataSet) base.Clone();
            accountsDataSet.InitVars();
            num1 = (int) num2 * 847936986 ^ 1470987789;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return dataSet;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override bool ShouldSerializeTables()
    {
label_1:
      int num1 = 800960900;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 197861858)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -2071553781 ^ -1575864795;
            continue;
          case 2:
            flag = false;
            num1 = (int) num2 * -1106986620 ^ 1067471311;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override bool ShouldSerializeRelations() => false;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
label_1:
      int num1 = 563019294;
      DataSet dataSet;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1331231401)) % 26U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Merge(dataSet, false, MissingSchemaAction.Add);
            num1 = (int) num2 * -1509080981 ^ -864207812;
            continue;
          case 2:
            num1 = (int) num2 * -1337246369 ^ 187089142;
            continue;
          case 3:
            this.DataSetName = dataSet.DataSetName;
            num1 = 1112997771;
            continue;
          case 4:
            this.Prefix = dataSet.Prefix;
            num1 = (int) num2 * 226109040 ^ -1006787840;
            continue;
          case 5:
            this.InitVars();
            num1 = (int) num2 * 1940086276 ^ 503102369;
            continue;
          case 6:
            int num3 = dataSet.Tables["Table"] != null ? 857455929 : (num3 = 48755664);
            num1 = num3 ^ (int) num2 * 1041783580;
            continue;
          case 7:
            goto label_3;
          case 8:
            base.Tables.Add((DataTable) new AccountsDataSet.TableDataTable(dataSet.Tables["Table"]));
            num1 = (int) num2 * 630556029 ^ -221952733;
            continue;
          case 9:
            flag = this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema;
            num1 = (int) num2 * -1383352578 ^ 31931769;
            continue;
          case 10:
            this.InitVars();
            num1 = (int) num2 * -2087986485 ^ -1127398282;
            continue;
          case 11:
            num1 = (int) num2 * -1579002889 ^ -1534043855;
            continue;
          case 12:
            num1 = (int) num2 * 1652775948 ^ 331386331;
            continue;
          case 13:
            num1 = (int) num2 * 1654417585 ^ -775237043;
            continue;
          case 14:
            this.EnforceConstraints = dataSet.EnforceConstraints;
            num1 = (int) num2 * 1222025486 ^ -1960718926;
            continue;
          case 15:
            num1 = (int) num2 * 905599425 ^ -884674644;
            continue;
          case 16:
            int num4 = !flag ? -1024672531 : (num4 = -687483976);
            num1 = num4 ^ (int) num2 * -1911209155;
            continue;
          case 17:
            int num5 = (int) this.ReadXml(reader);
            num1 = (int) num2 * 1535094401 ^ 41344669;
            continue;
          case 18:
            num1 = (int) num2 * 1584320932 ^ -1048487408;
            continue;
          case 19:
            dataSet = new DataSet();
            int num6 = (int) dataSet.ReadXml(reader);
            num1 = (int) num2 * 818800509 ^ 634796110;
            continue;
          case 20:
            num1 = 1686847894;
            continue;
          case 21:
            this.Namespace = dataSet.Namespace;
            num1 = (int) num2 * -104780174 ^ 196567293;
            continue;
          case 22:
            num1 = (int) num2 * 844270066 ^ 2016905944;
            continue;
          case 23:
            this.Locale = dataSet.Locale;
            this.CaseSensitive = dataSet.CaseSensitive;
            num1 = (int) num2 * 137698024 ^ 1980541938;
            continue;
          case 24:
            num1 = (int) num2 * 579604865 ^ 1316321965;
            continue;
          case 25:
            this.Reset();
            num1 = (int) num2 * -2004541830 ^ 713407150;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    protected override XmlSchema GetSchemaSerializable()
    {
label_1:
      int num1 = 1374316039;
      MemoryStream memoryStream;
      XmlSchema schemaSerializable;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1995466951)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            schemaSerializable = XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
            num1 = (int) num2 * -1996761811 ^ 1391444238;
            continue;
          case 2:
            num1 = (int) num2 * 1902131262 ^ 514614678;
            continue;
          case 4:
            memoryStream = new MemoryStream();
            num1 = (int) num2 * 734652076 ^ -479316982;
            continue;
          case 5:
            this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
            memoryStream.Position = 0L;
            num1 = (int) num2 * 411747966 ^ -1408062020;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return schemaSerializable;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    internal void InitVars()
    {
label_1:
      int num1 = -570716101;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -142951320)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.InitVars(true);
            num1 = (int) num2 * 1951592422 ^ 286247547;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableTable = (AccountsDataSet.TableDataTable) base.Tables["Table"];
label_1:
      int num1 = -366024344;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1044501584)) % 10U)
        {
          case 0:
            int num3 = this.tableTable != null ? 1210759339 : (num3 = 2130460102);
            num1 = num3 ^ (int) num2 * 944358950;
            continue;
          case 1:
            num1 = (int) num2 * 280911704 ^ 694787006;
            continue;
          case 2:
            flag = initTable;
            num1 = (int) num2 * -1584140822 ^ 104135227;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.tableTable.InitVars();
            num1 = (int) num2 * -967213921 ^ 1968875489;
            continue;
          case 5:
            num1 = (int) num2 * -1638399280 ^ -1749977566;
            continue;
          case 6:
            num1 = -1740222119;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * 1193128670 ^ 898140632;
            continue;
          case 9:
            int num4 = !flag ? -18220808 : (num4 = -1193238967);
            num1 = num4 ^ (int) num2 * -1595648749;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (AccountsDataSet);
label_1:
      int num1 = 160471881;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 889186870)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AccountsDataSet.xsd";
            num1 = (int) num2 * 549655541 ^ 1137351677;
            continue;
          case 2:
            this.EnforceConstraints = true;
            num1 = (int) num2 * -975814559 ^ -1412547419;
            continue;
          case 3:
            this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            this.tableTable = new AccountsDataSet.TableDataTable();
            num1 = (int) num2 * 1366356003 ^ 1274377944;
            continue;
          case 4:
            num1 = (int) num2 * 1807767201 ^ -1160811902;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      base.Tables.Add((DataTable) this.tableTable);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    private bool ShouldSerializeTable() => false;

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
label_1:
      int num1 = 1763444457;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1321670033)) % 6U)
        {
          case 0:
            int num3 = flag ? 198869407 : (num3 = 1845621392);
            num1 = num3 ^ (int) num2 * -232076399;
            continue;
          case 1:
            num1 = (int) num2 * -1070736142 ^ -125742524;
            continue;
          case 2:
            this.InitVars();
            num1 = (int) num2 * 1717064312 ^ 1124133568;
            continue;
          case 3:
            goto label_3;
          case 4:
            flag = e.Action == CollectionChangeAction.Remove;
            num1 = (int) num2 * -916665014 ^ 548303687;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    [DebuggerNonUserCode]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
label_1:
      int num1 = -1743219226;
      XmlSchemaComplexType schemaComplexType;
      XmlSchema schemaSerializable;
      bool flag1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1416970756)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            if (flag1)
            {
              num1 = (int) num2 * 1545312655 ^ 431193408;
              continue;
            }
            goto label_56;
          case 2:
            AccountsDataSet accountsDataSet = new AccountsDataSet();
            schemaComplexType = new XmlSchemaComplexType();
            XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
            xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
            {
              Namespace = accountsDataSet.Namespace
            });
            schemaComplexType.Particle = (XmlSchemaParticle) xmlSchemaSequence;
            schemaSerializable = accountsDataSet.GetSchemaSerializable();
            flag1 = xs.Contains(schemaSerializable.TargetNamespace);
            num1 = (int) num2 * 2117830964 ^ 692555641;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      MemoryStream memoryStream1 = new MemoryStream();
      MemoryStream memoryStream2 = new MemoryStream();
      XmlSchemaComplexType typedDataSetSchema;
      try
      {
label_8:
        int num3 = -1162387281;
        while (true)
        {
          uint num4;
          XmlSchema xmlSchema;
          IEnumerator enumerator;
          bool flag2;
          bool flag3;
          int num5;
          switch ((num4 = (uint) (num3 ^ -1416970756)) % 28U)
          {
            case 0:
              num3 = (int) num4 * -320726294 ^ 964820932;
              continue;
            case 1:
              goto label_58;
            case 2:
              num3 = (int) num4 * 1245622768 ^ -1777536278;
              continue;
            case 3:
              memoryStream2.SetLength(0L);
              num3 = (int) num4 * 484955485 ^ 1063067057;
              continue;
            case 5:
              memoryStream2.Position = 0L;
              num3 = (int) num4 * -893000813 ^ -2118668202;
              continue;
            case 6:
              xmlSchema.Write((Stream) memoryStream2);
              num3 = (int) num4 * 512472318 ^ 1113635810;
              continue;
            case 7:
              xmlSchema = (XmlSchema) null;
              num3 = (int) num4 * -994032329 ^ 1696947382;
              continue;
            case 8:
              int num6 = !flag3 ? -1538824591 : (num6 = -158253987);
              num3 = num6 ^ (int) num4 * -83009393;
              continue;
            case 9:
              num3 = -463059173;
              continue;
            case 10:
              flag3 = memoryStream1.Length == memoryStream2.Length;
              num3 = (int) num4 * 116567929 ^ 75994162;
              continue;
            case 11:
              int num7;
              num3 = num7 = !enumerator.MoveNext() ? -764482592 : (num7 = -1547845087);
              continue;
            case 12:
              num3 = (int) num4 * -1045554552 ^ -1182220318;
              continue;
            case 13:
              num3 = -1621823139;
              continue;
            case 14:
              if (memoryStream1.Position != memoryStream1.Length)
              {
                num3 = -1509714858;
                continue;
              }
              num5 = 0;
              break;
            case 15:
              num3 = -509215060;
              continue;
            case 16:
              num3 = (int) num4 * -1185618921 ^ -248735435;
              continue;
            case 17:
              num3 = (int) num4 * -2053837837 ^ -502481771;
              continue;
            case 18:
              num3 = (int) num4 * -1070230781 ^ -388481736;
              continue;
            case 19:
              xmlSchema = (XmlSchema) enumerator.Current;
              num3 = (int) num4 * -987621335 ^ 1190650888;
              continue;
            case 20:
              typedDataSetSchema = schemaComplexType;
              num3 = (int) num4 * 2004255473 ^ -793293915;
              continue;
            case 21:
              num3 = -714127473;
              continue;
            case 22:
              goto label_8;
            case 23:
              int num8 = flag2 ? -293149936 : (num8 = -1229730945);
              num3 = num8 ^ (int) num4 * -2021347183;
              continue;
            case 24:
              int num9 = memoryStream1.Position != memoryStream1.Length ? 324897629 : (num9 = 1830860924);
              num3 = num9 ^ (int) num4 * 2033477582;
              continue;
            case 25:
              memoryStream1.Position = 0L;
              num3 = (int) num4 * 2032087952 ^ -1189762584;
              continue;
            case 26:
              num5 = memoryStream1.ReadByte() == memoryStream2.ReadByte() ? 1 : 0;
              break;
            case 27:
              schemaSerializable.Write((Stream) memoryStream1);
              enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
              num3 = (int) num4 * 742940894 ^ -676949255;
              continue;
            default:
              goto label_53;
          }
          flag2 = num5 != 0;
          num3 = -157097505;
        }
      }
      finally
      {
label_39:
        int num10 = -1079537171;
        bool flag4;
        while (true)
        {
          uint num11;
          switch ((num11 = (uint) (num10 ^ -1416970756)) % 13U)
          {
            case 0:
              goto label_39;
            case 1:
              num10 = (int) num11 * 471976502 ^ -133365268;
              continue;
            case 2:
              int num12 = flag4 ? -1503581603 : (num12 = -1660679355);
              num10 = num12 ^ (int) num11 * -2410481;
              continue;
            case 3:
              num10 = (int) num11 * -1184735446 ^ 1686779564;
              continue;
            case 4:
              num10 = (int) num11 * -197132536 ^ -201411444;
              continue;
            case 6:
              int num13;
              num10 = num13 = memoryStream2 != null ? -1635334740 : (num13 = -1057832984);
              continue;
            case 7:
              num10 = (int) num11 * 2092659250 ^ -17689813;
              continue;
            case 8:
              num10 = (int) num11 * 1269418776 ^ -2118889104;
              continue;
            case 9:
              flag4 = memoryStream1 != null;
              num10 = (int) num11 * -1464142616 ^ 111151879;
              continue;
            case 10:
              memoryStream2.Close();
              num10 = (int) num11 * 1919716783 ^ -55462794;
              continue;
            case 11:
              num10 = -1814029838;
              continue;
            case 12:
              memoryStream1.Close();
              num10 = (int) num11 * 194414295 ^ 826165476;
              continue;
            default:
              goto label_52;
          }
        }
label_52:;
      }
label_53:
label_54:
      int num14 = -2093954415;
label_55:
      while (true)
      {
        uint num15;
        switch ((num15 = (uint) (num14 ^ -1416970756)) % 4U)
        {
          case 0:
            goto label_54;
          case 1:
            goto label_56;
          case 3:
            typedDataSetSchema = schemaComplexType;
            num14 = (int) num15 * -1884760341 ^ 811315603;
            continue;
          default:
            goto label_58;
        }
      }
label_56:
      xs.Add(schemaSerializable);
      num14 = -1106941333;
      goto label_55;
label_58:
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public delegate void TableRowChangeEventHandler(
      object sender,
      AccountsDataSet.TableRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class TableDataTable : TypedTableBase<AccountsDataSet.TableRow>
    {
      private DataColumn columnId;
      private DataColumn columnName;
      private DataColumn columnAccNo;
      private DataColumn columnPIN;
      private DataColumn columnBalance;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public TableDataTable()
      {
label_1:
        int num1 = 327906569;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 265233152)) % 8U)
          {
            case 0:
              num1 = (int) num2 * -343218350 ^ -1083532286;
              continue;
            case 1:
              num1 = (int) num2 * -2073364333 ^ -1732904717;
              continue;
            case 2:
              this.TableName = "Table";
              num1 = (int) num2 * -1591303937 ^ 1755919755;
              continue;
            case 3:
              this.EndInit();
              num1 = (int) num2 * -560410267 ^ -1463904373;
              continue;
            case 4:
              num1 = (int) num2 * -1772845319 ^ -1657839397;
              continue;
            case 5:
              this.BeginInit();
              this.InitClass();
              num1 = (int) num2 * -1638319621 ^ -193334284;
              continue;
            case 6:
              goto label_1;
            case 7:
              goto label_3;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      internal TableDataTable(DataTable table)
      {
label_1:
        int num1 = 1647811180;
        bool flag1;
        bool flag2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1903813554)) % 22U)
          {
            case 0:
              num1 = (int) num2 * 287308532 ^ 740401891;
              continue;
            case 1:
              this.Locale = table.Locale;
              num1 = (int) num2 * 1621656678 ^ -1711600323;
              continue;
            case 2:
              int num3 = !flag2 ? 881375440 : (num3 = 689876016);
              num1 = num3 ^ (int) num2 * -296659166;
              continue;
            case 3:
              flag1 = table.CaseSensitive != table.DataSet.CaseSensitive;
              num1 = (int) num2 * -1935953446 ^ 1832795716;
              continue;
            case 4:
              int num4 = !flag1 ? -1637602562 : (num4 = -754986513);
              num1 = num4 ^ (int) num2 * -1679392480;
              continue;
            case 5:
              goto label_1;
            case 6:
              this.TableName = table.TableName;
              num1 = (int) num2 * -494817421 ^ 1739470837;
              continue;
            case 7:
              num1 = (int) num2 * 523039599 ^ -1082614280;
              continue;
            case 8:
              int num5;
              num1 = num5 = !(table.Locale.ToString() != table.DataSet.Locale.ToString()) ? 1546608507 : (num5 = 1813011292);
              continue;
            case 9:
              num1 = (int) num2 * 11963092 ^ -1155344656;
              continue;
            case 10:
              num1 = (int) num2 * -979995215 ^ 490777709;
              continue;
            case 11:
              num1 = (int) num2 * -928389613 ^ 1492025944;
              continue;
            case 12:
              this.Namespace = table.Namespace;
              num1 = (int) num2 * -1295462834 ^ -2021305886;
              continue;
            case 13:
              this.CaseSensitive = table.CaseSensitive;
              num1 = (int) num2 * 885825138 ^ -513904179;
              continue;
            case 14:
              this.Prefix = table.Prefix;
              num1 = 1350413627;
              continue;
            case 15:
              flag2 = table.Namespace != table.DataSet.Namespace;
              num1 = 24603752;
              continue;
            case 16:
              num1 = (int) num2 * -1054733080 ^ 1224018176;
              continue;
            case 17:
              num1 = (int) num2 * 1046688045 ^ 2012674781;
              continue;
            case 18:
              num1 = (int) num2 * 1424730049 ^ 1336117072;
              continue;
            case 19:
              this.MinimumCapacity = table.MinimumCapacity;
              num1 = (int) num2 * -616952991 ^ -506087966;
              continue;
            case 20:
              goto label_3;
            case 21:
              num1 = (int) num2 * 1661421264 ^ -1451265874;
              continue;
            default:
              goto label_24;
          }
        }
label_3:
        return;
label_24:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected TableDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataColumn IdColumn
      {
        get
        {
label_1:
          int num1 = 526645195;
          DataColumn columnId;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1090736436)) % 4U)
            {
              case 0:
                num1 = (int) num2 * 364756027 ^ 1919572161;
                continue;
              case 2:
                goto label_1;
              case 3:
                columnId = this.columnId;
                num1 = (int) num2 * 736334641 ^ 1585640567;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return columnId;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public DataColumn NameColumn
      {
        get
        {
          DataColumn columnName = this.columnName;
label_1:
          int num1 = -1239640163;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1603091176)) % 3U)
            {
              case 0:
                goto label_1;
              case 2:
                num1 = (int) num2 * 1008324604 ^ 944069637;
                continue;
              default:
                goto label_4;
            }
          }
label_4:
          return columnName;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn AccNoColumn
      {
        get
        {
label_1:
          int num1 = -2135863941;
          DataColumn columnAccNo;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1702241711)) % 3U)
            {
              case 0:
                goto label_1;
              case 2:
                columnAccNo = this.columnAccNo;
                num1 = (int) num2 * -829761047 ^ -638362522;
                continue;
              default:
                goto label_4;
            }
          }
label_4:
          return columnAccNo;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn PINColumn => this.columnPIN;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataColumn BalanceColumn
      {
        get
        {
label_1:
          int num1 = -188660316;
          DataColumn columnBalance;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1681564843)) % 4U)
            {
              case 0:
                goto label_1;
              case 1:
                columnBalance = this.columnBalance;
                num1 = (int) num2 * 1332996751 ^ -872958508;
                continue;
              case 2:
                num1 = (int) num2 * 891456114 ^ -1098343026;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return columnBalance;
        }
      }

      [Browsable(false)]
      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public int Count
      {
        get
        {
label_1:
          int num1 = -1108926086;
          int count;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -314247515)) % 4U)
            {
              case 0:
                goto label_1;
              case 2:
                num1 = (int) num2 * 2089056395 ^ 1704141090;
                continue;
              case 3:
                count = this.Rows.Count;
                num1 = (int) num2 * 853271719 ^ 1528197810;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return count;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public AccountsDataSet.TableRow this[int index]
      {
        get
        {
          AccountsDataSet.TableRow row = (AccountsDataSet.TableRow) this.Rows[index];
label_1:
          int num1 = -1631523210;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1687079453)) % 3U)
            {
              case 1:
                num1 = (int) num2 * -1763219059 ^ 1470699081;
                continue;
              case 2:
                goto label_1;
              default:
                goto label_4;
            }
          }
label_4:
          return row;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowChanging
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowChanging;
label_1:
          int num1 = -1306350418;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -703715096)) % 5U)
            {
              case 0:
                int num3 = changeEventHandler1 == comparand ? 223121696 : (num3 = 696283793);
                num1 = num3 ^ (int) num2 * -1477530985;
                continue;
              case 1:
                comparand = changeEventHandler1;
                changeEventHandler2 = comparand + value;
                num1 = -698296351;
                continue;
              case 2:
                goto label_1;
              case 3:
                goto label_3;
              case 4:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanging, changeEventHandler2, comparand);
                num1 = (int) num2 * -879659787 ^ -1171609108;
                continue;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler = this.TableRowChanging;
label_1:
          int num1 = -1616556016;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1701531547)) % 4U)
            {
              case 0:
                goto label_1;
              case 1:
                comparand = changeEventHandler;
                num1 = -1333936226;
                continue;
              case 2:
                goto label_3;
              case 3:
                changeEventHandler = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanging, comparand - value, comparand);
                int num3 = changeEventHandler != comparand ? -1971556968 : (num3 = -526072897);
                num1 = num3 ^ (int) num2 * 132962840;
                continue;
              default:
                goto label_6;
            }
          }
label_3:
          return;
label_6:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowChanged
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowChanged;
label_1:
          int num1 = 1070251984;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1461158750)) % 5U)
            {
              case 0:
                goto label_1;
              case 1:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanged, changeEventHandler2, comparand);
                int num3 = changeEventHandler1 == comparand ? -2022238754 : (num3 = -850741943);
                num1 = num3 ^ (int) num2 * -1141107109;
                continue;
              case 2:
                comparand = changeEventHandler1;
                num1 = 2041336962;
                continue;
              case 3:
                changeEventHandler2 = comparand + value;
                num1 = (int) num2 * 1187915480 ^ 1143306213;
                continue;
              case 4:
                goto label_3;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler = this.TableRowChanged;
label_1:
          int num1 = -1305004782;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -2030185832)) % 5U)
            {
              case 0:
                goto label_3;
              case 1:
                int num3 = changeEventHandler == comparand ? 172213281 : (num3 = 57079403);
                num1 = num3 ^ (int) num2 * -1437442847;
                continue;
              case 2:
                goto label_1;
              case 3:
                comparand = changeEventHandler;
                num1 = -429891323;
                continue;
              case 4:
                changeEventHandler = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowChanged, comparand - value, comparand);
                num1 = (int) num2 * -1311847205 ^ -547000242;
                continue;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowDeleting
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowDeleting;
label_1:
          int num1 = 290310582;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 719594046)) % 6U)
            {
              case 0:
                int num3 = changeEventHandler1 == comparand ? -243534545 : (num3 = -825546566);
                num1 = num3 ^ (int) num2 * -1951788958;
                continue;
              case 1:
                goto label_3;
              case 2:
                comparand = changeEventHandler1;
                num1 = 1924980435;
                continue;
              case 3:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleting, changeEventHandler2, comparand);
                num1 = (int) num2 * 187216166 ^ -1627068946;
                continue;
              case 4:
                goto label_1;
              case 5:
                changeEventHandler2 = comparand + value;
                num1 = (int) num2 * 374766347 ^ -449121784;
                continue;
              default:
                goto label_8;
            }
          }
label_3:
          return;
label_8:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowDeleting;
label_1:
          int num1 = -119172215;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1100130032)) % 5U)
            {
              case 0:
                goto label_3;
              case 1:
                comparand = changeEventHandler1;
                changeEventHandler2 = comparand - value;
                num1 = -263972827;
                continue;
              case 2:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleting, changeEventHandler2, comparand);
                num1 = (int) num2 * 1291434192 ^ -1953152865;
                continue;
              case 3:
                int num3 = changeEventHandler1 != comparand ? -212913546 : (num3 = -278772974);
                num1 = num3 ^ (int) num2 * 1846774945;
                continue;
              case 4:
                goto label_1;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public event AccountsDataSet.TableRowChangeEventHandler TableRowDeleted
      {
        add
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler = this.TableRowDeleted;
label_1:
          int num1 = 1172777802;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1064651611)) % 5U)
            {
              case 0:
                goto label_3;
              case 1:
                comparand = changeEventHandler;
                num1 = 1329692278;
                continue;
              case 2:
                changeEventHandler = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleted, comparand + value, comparand);
                num1 = (int) num2 * 213902491 ^ 2032741988;
                continue;
              case 3:
                int num3 = changeEventHandler != comparand ? 1686501194 : (num3 = 1627416805);
                num1 = num3 ^ (int) num2 * 1382444404;
                continue;
              case 4:
                goto label_1;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
        remove
        {
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler1 = this.TableRowDeleted;
label_1:
          int num1 = 530489785;
          AccountsDataSet.TableRowChangeEventHandler changeEventHandler2;
          AccountsDataSet.TableRowChangeEventHandler comparand;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1581379914)) % 5U)
            {
              case 0:
                goto label_3;
              case 1:
                comparand = changeEventHandler1;
                num1 = 2092568350;
                continue;
              case 2:
                goto label_1;
              case 3:
                changeEventHandler2 = comparand - value;
                num1 = (int) num2 * 2114767646 ^ 672296617;
                continue;
              case 4:
                changeEventHandler1 = Interlocked.CompareExchange<AccountsDataSet.TableRowChangeEventHandler>(ref this.TableRowDeleted, changeEventHandler2, comparand);
                int num3 = changeEventHandler1 == comparand ? 1977850077 : (num3 = 1701284353);
                num1 = num3 ^ (int) num2 * -709595224;
                continue;
              default:
                goto label_7;
            }
          }
label_3:
          return;
label_7:;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void AddTableRow(AccountsDataSet.TableRow row)
      {
label_1:
        int num1 = 370961006;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1300203426)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Rows.Add((DataRow) row);
              num1 = (int) num2 * -1171152543 ^ 1648198023;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public AccountsDataSet.TableRow AddTableRow(
        string Name,
        Decimal AccNo,
        Decimal PIN,
        Decimal Balance)
      {
label_1:
        int num1 = 1238964821;
        AccountsDataSet.TableRow row;
        AccountsDataSet.TableRow tableRow;
        object[] objArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 568352137)) % 9U)
          {
            case 0:
              num1 = (int) num2 * 904800167 ^ 603887633;
              continue;
            case 1:
              this.Rows.Add((DataRow) row);
              num1 = (int) num2 * -1531423278 ^ -450176430;
              continue;
            case 2:
              tableRow = row;
              num1 = (int) num2 * 1468700820 ^ 910378981;
              continue;
            case 3:
              row.ItemArray = objArray;
              num1 = (int) num2 * -1691254161 ^ -1542042266;
              continue;
            case 4:
              num1 = (int) num2 * -1504007532 ^ -1606031212;
              continue;
            case 6:
              objArray = new object[5]
              {
                null,
                (object) Name,
                (object) AccNo,
                (object) PIN,
                (object) Balance
              };
              num1 = (int) num2 * 2061471009 ^ 2145322149;
              continue;
            case 7:
              goto label_1;
            case 8:
              row = (AccountsDataSet.TableRow) this.NewRow();
              num1 = (int) num2 * 252864070 ^ 1904494091;
              continue;
            default:
              goto label_10;
          }
        }
label_10:
        return tableRow;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public AccountsDataSet.TableRow FindById(int Id)
      {
label_1:
        int num1 = -1526580155;
        AccountsDataSet.TableRow byId;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1969913742)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 239990115 ^ -1729512203;
              continue;
            case 3:
              byId = (AccountsDataSet.TableRow) this.Rows.Find(new object[1]
              {
                (object) Id
              });
              num1 = (int) num2 * -2146486281 ^ -1439655591;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return byId;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public override DataTable Clone()
      {
label_1:
        int num1 = 467688122;
        AccountsDataSet.TableDataTable tableDataTable;
        DataTable dataTable;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1104482936)) % 7U)
          {
            case 0:
              goto label_1;
            case 1:
              tableDataTable.InitVars();
              num1 = (int) num2 * -2013007374 ^ 649004952;
              continue;
            case 2:
              num1 = (int) num2 * -785887431 ^ 1497684701;
              continue;
            case 3:
              num1 = (int) num2 * -1576932883 ^ 1597871172;
              continue;
            case 4:
              dataTable = (DataTable) tableDataTable;
              num1 = (int) num2 * -1541676489 ^ -1471505865;
              continue;
            case 6:
              tableDataTable = (AccountsDataSet.TableDataTable) base.Clone();
              num1 = (int) num2 * -1338238091 ^ 1040886113;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return dataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      protected override DataTable CreateInstance()
      {
        DataTable instance = (DataTable) new AccountsDataSet.TableDataTable();
label_1:
        int num1 = -960449742;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1730150957)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -604498996 ^ -581022854;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return instance;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      internal void InitVars()
      {
        this.columnId = this.Columns["Id"];
label_1:
        int num1 = -1927739443;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1615010643)) % 6U)
          {
            case 0:
              this.columnBalance = this.Columns["Balance"];
              num1 = (int) num2 * 1040518421 ^ -1567814395;
              continue;
            case 1:
              this.columnAccNo = this.Columns["AccNo"];
              num1 = (int) num2 * 723204304 ^ 457806944;
              continue;
            case 2:
              this.columnName = this.Columns["Name"];
              num1 = (int) num2 * -1744385750 ^ 1772358600;
              continue;
            case 3:
              this.columnPIN = this.Columns["PIN"];
              num1 = (int) num2 * -1396062538 ^ -1773455143;
              continue;
            case 4:
              goto label_3;
            case 5:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      private void InitClass()
      {
        this.columnId = new DataColumn("Id", typeof (int), (string) null, MappingType.Element);
label_1:
        int num1 = 1828977722;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 394444508)) % 33U)
          {
            case 0:
              num1 = (int) num2 * 741107201 ^ 393618498;
              continue;
            case 1:
              this.columnBalance = new DataColumn("Balance", typeof (Decimal), (string) null, MappingType.Element);
              num1 = (int) num2 * -1090337053 ^ 260829274;
              continue;
            case 2:
              this.columnId.Unique = true;
              num1 = (int) num2 * 2134811924 ^ -1327981847;
              continue;
            case 3:
              num1 = (int) num2 * 218442641 ^ 584334036;
              continue;
            case 4:
              this.columnId.AllowDBNull = false;
              num1 = (int) num2 * 1077888897 ^ -369815907;
              continue;
            case 5:
              this.Columns.Add(this.columnName);
              num1 = (int) num2 * -1254302565 ^ -575887695;
              continue;
            case 6:
              this.Columns.Add(this.columnBalance);
              num1 = (int) num2 * 690877943 ^ -627480888;
              continue;
            case 7:
              this.Columns.Add(this.columnPIN);
              num1 = (int) num2 * 1680658884 ^ -1724743752;
              continue;
            case 8:
              this.columnAccNo = new DataColumn("AccNo", typeof (Decimal), (string) null, MappingType.Element);
              num1 = (int) num2 * -1586820834 ^ 462889556;
              continue;
            case 9:
              num1 = (int) num2 * 486906216 ^ 350853458;
              continue;
            case 10:
              this.Columns.Add(this.columnId);
              num1 = (int) num2 * 1140179344 ^ -1503118712;
              continue;
            case 11:
              num1 = (int) num2 * -1515298496 ^ 444425435;
              continue;
            case 12:
              goto label_3;
            case 13:
              num1 = (int) num2 * -747037795 ^ 800213176;
              continue;
            case 14:
              this.Columns.Add(this.columnAccNo);
              num1 = (int) num2 * -113534087 ^ -233280878;
              continue;
            case 15:
              num1 = (int) num2 * -2009758869 ^ -421077587;
              continue;
            case 16:
              this.columnId.AutoIncrementSeed = -1L;
              num1 = (int) num2 * -1545643133 ^ 99768683;
              continue;
            case 17:
              this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
              num1 = (int) num2 * 157763718 ^ 1091006505;
              continue;
            case 18:
              this.ExtendedProperties.Add((object) "Generator_RowEvHandlerName", (object) "TableRowChangeEventHandler");
              num1 = (int) num2 * -1653971985 ^ -1131184462;
              continue;
            case 19:
              this.ExtendedProperties.Add((object) "Generator_UserTableName", (object) "Table");
              num1 = (int) num2 * -794004938 ^ 518231434;
              continue;
            case 20:
              this.columnId.AutoIncrementStep = -1L;
              num1 = (int) num2 * -1511852882 ^ -1027122996;
              continue;
            case 21:
              goto label_1;
            case 22:
              this.columnPIN = new DataColumn("PIN", typeof (Decimal), (string) null, MappingType.Element);
              num1 = (int) num2 * -1044335739 ^ -743970675;
              continue;
            case 23:
              this.columnName.MaxLength = 50;
              num1 = (int) num2 * 1113032491 ^ 1227816414;
              continue;
            case 24:
              this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
              {
                this.columnId
              }, true));
              num1 = (int) num2 * -1607362285 ^ -956388600;
              continue;
            case 25:
              num1 = (int) num2 * 1638109380 ^ 1701632511;
              continue;
            case 26:
              num1 = (int) num2 * -1766578883 ^ -117089706;
              continue;
            case 27:
              this.columnId.AutoIncrement = true;
              num1 = (int) num2 * 686516059 ^ 1152240190;
              continue;
            case 28:
              this.ExtendedProperties.Add((object) "Generator_RowEvArgName", (object) "TableRowChangeEvent");
              num1 = (int) num2 * -415850012 ^ 702011502;
              continue;
            case 29:
              this.columnId.ReadOnly = true;
              num1 = (int) num2 * -2026542590 ^ 358360215;
              continue;
            case 30:
              this.ExtendedProperties.Add((object) "Generator_TableVarName", (object) "tableTable");
              num1 = (int) num2 * 2112200798 ^ 1895976310;
              continue;
            case 31:
              this.ExtendedProperties.Add((object) "Generator_RowClassName", (object) "TableRow");
              num1 = (int) num2 * 588636448 ^ 1329478082;
              continue;
            case 32:
              this.ExtendedProperties.Add((object) "Generator_TableClassName", (object) nameof (TableDataTable));
              this.ExtendedProperties.Add((object) "Generator_TablePropName", (object) "Table");
              num1 = (int) num2 * -1246350 ^ -1790898324;
              continue;
            default:
              goto label_35;
          }
        }
label_3:
        return;
label_35:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public AccountsDataSet.TableRow NewTableRow()
      {
label_1:
        int num1 = 1779502500;
        AccountsDataSet.TableRow tableRow;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 326082741)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -1723595117 ^ -236405822;
              continue;
            case 1:
              tableRow = (AccountsDataSet.TableRow) this.NewRow();
              num1 = (int) num2 * 1571594037 ^ 1580443112;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return tableRow;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
label_1:
        int num1 = -1968365394;
        DataRow dataRow;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2104042451)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1628977115 ^ 690592260;
              continue;
            case 3:
              dataRow = (DataRow) new AccountsDataSet.TableRow(builder);
              num1 = (int) num2 * -962764173 ^ 291604889;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return dataRow;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override Type GetRowType() => typeof (AccountsDataSet.TableRow);

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = -1955000462;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -793126121)) % 8U)
          {
            case 0:
              goto label_1;
            case 1:
              this.TableRowChanged((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * -864024373 ^ -478237618;
              continue;
            case 2:
              num1 = (int) num2 * -131211126 ^ 830981567;
              continue;
            case 3:
              int num3 = this.TableRowChanged != null ? 908770156 : (num3 = 53509995);
              num1 = num3 ^ (int) num2 * 858327238;
              continue;
            case 4:
              num1 = (int) num2 * 261931766 ^ 1480681905;
              continue;
            case 5:
              base.OnRowChanged(e);
              num1 = (int) num2 * -614731324 ^ 952928932;
              continue;
            case 6:
              goto label_3;
            case 7:
              num1 = (int) num2 * 978062074 ^ 1136504674;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = -1101641822;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1157651892)) % 9U)
          {
            case 0:
              goto label_3;
            case 1:
              base.OnRowChanging(e);
              num1 = (int) num2 * -616889758 ^ 1274830100;
              continue;
            case 2:
              this.TableRowChanging((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * -1719880109 ^ -1226030016;
              continue;
            case 3:
              flag = this.TableRowChanging != null;
              num1 = (int) num2 * -1459468286 ^ -1312706237;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -877536669 ^ 473156037;
              continue;
            case 6:
              num1 = (int) num2 * -352850208 ^ 816176162;
              continue;
            case 7:
              num1 = (int) num2 * -2060958332 ^ 642528138;
              continue;
            case 8:
              int num3 = !flag ? -958677769 : (num3 = -777754346);
              num1 = num3 ^ (int) num2 * 261601831;
              continue;
            default:
              goto label_11;
          }
        }
label_3:
        return;
label_11:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = 1452452371;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1549261138)) % 9U)
          {
            case 0:
              flag = this.TableRowDeleted != null;
              num1 = (int) num2 * 1817983534 ^ -437446623;
              continue;
            case 1:
              num1 = (int) num2 * -1451915555 ^ -1127429557;
              continue;
            case 2:
              int num3 = flag ? 532124965 : (num3 = 587308555);
              num1 = num3 ^ (int) num2 * -583849781;
              continue;
            case 3:
              goto label_3;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -1920790281 ^ -1723035190;
              continue;
            case 6:
              base.OnRowDeleted(e);
              num1 = (int) num2 * -1779309514 ^ 253415133;
              continue;
            case 7:
              this.TableRowDeleted((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * 1723672493 ^ -1019021575;
              continue;
            case 8:
              num1 = (int) num2 * 1038449089 ^ -516187462;
              continue;
            default:
              goto label_11;
          }
        }
label_3:
        return;
label_11:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
label_1:
        int num1 = 1794783459;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2033376892)) % 10U)
          {
            case 0:
              num1 = (int) num2 * 1270331140 ^ -681463917;
              continue;
            case 1:
              this.TableRowDeleting((object) this, new AccountsDataSet.TableRowChangeEvent((AccountsDataSet.TableRow) e.Row, e.Action));
              num1 = (int) num2 * -1799344012 ^ -1580243989;
              continue;
            case 2:
              num1 = (int) num2 * -1446617718 ^ 902568330;
              continue;
            case 3:
              base.OnRowDeleting(e);
              num1 = (int) num2 * 1630821425 ^ 1269103545;
              continue;
            case 4:
              goto label_1;
            case 5:
              goto label_3;
            case 6:
              flag = this.TableRowDeleting != null;
              num1 = (int) num2 * 1969333251 ^ 527027095;
              continue;
            case 7:
              num1 = (int) num2 * -1392883416 ^ -960166760;
              continue;
            case 8:
              num1 = (int) num2 * -1946778176 ^ -598257037;
              continue;
            case 9:
              int num3 = flag ? -1248715356 : (num3 = -1112102469);
              num1 = num3 ^ (int) num2 * 1297408872;
              continue;
            default:
              goto label_12;
          }
        }
label_3:
        return;
label_12:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void RemoveTableRow(AccountsDataSet.TableRow row)
      {
label_1:
        int num1 = 1282884979;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 296475181)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * -1326394392 ^ -118762687;
              continue;
            case 2:
              this.Rows.Remove((DataRow) row);
              num1 = (int) num2 * -1144487771 ^ -2114409394;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType schemaComplexType = new XmlSchemaComplexType();
label_1:
        int num1 = 51196959;
        XmlSchemaSequence xmlSchemaSequence;
        XmlSchemaAttribute xmlSchemaAttribute1;
        XmlSchemaAttribute xmlSchemaAttribute2;
        XmlSchemaAny xmlSchemaAny1;
        XmlSchemaAny xmlSchemaAny2;
        AccountsDataSet accountsDataSet;
        XmlSchema schemaSerializable;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 275779059)) % 24U)
          {
            case 0:
              if (xs.Contains(schemaSerializable.TargetNamespace))
              {
                num1 = (int) num2 * 1600536080 ^ 1231354778;
                continue;
              }
              goto label_71;
            case 1:
              xmlSchemaAttribute1.Name = "namespace";
              num1 = (int) num2 * -253727351 ^ 485731926;
              continue;
            case 2:
              schemaComplexType.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute1);
              xmlSchemaAttribute2 = new XmlSchemaAttribute();
              xmlSchemaAttribute2.Name = "tableTypeName";
              num1 = (int) num2 * -2081861946 ^ 1593794144;
              continue;
            case 3:
              xmlSchemaAttribute1 = new XmlSchemaAttribute();
              num1 = (int) num2 * 399489455 ^ 1026790479;
              continue;
            case 4:
              xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
              num1 = (int) num2 * 1355993840 ^ 68748398;
              continue;
            case 5:
              xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
              num1 = (int) num2 * 318265924 ^ -695018036;
              continue;
            case 6:
              xmlSchemaAny1.MinOccurs = 0M;
              num1 = (int) num2 * -1731336921 ^ 530713319;
              continue;
            case 7:
              xmlSchemaAttribute2.FixedValue = nameof (TableDataTable);
              schemaComplexType.Attributes.Add((XmlSchemaObject) xmlSchemaAttribute2);
              num1 = (int) num2 * 1148710105 ^ -5093279;
              continue;
            case 8:
              num1 = (int) num2 * -731595003 ^ -1692808699;
              continue;
            case 10:
              accountsDataSet = new AccountsDataSet();
              num1 = (int) num2 * 2073002741 ^ 1792839595;
              continue;
            case 11:
              num1 = (int) num2 * -628064830 ^ -1724732945;
              continue;
            case 12:
              xmlSchemaAttribute1.FixedValue = accountsDataSet.Namespace;
              num1 = (int) num2 * 79629398 ^ 1623993496;
              continue;
            case 13:
              schemaComplexType.Particle = (XmlSchemaParticle) xmlSchemaSequence;
              num1 = (int) num2 * 244814903 ^ -674284769;
              continue;
            case 14:
              xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
              num1 = (int) num2 * 668496410 ^ -839789312;
              continue;
            case 15:
              xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
              num1 = (int) num2 * 1500842198 ^ 482085877;
              continue;
            case 16:
              goto label_1;
            case 17:
              xmlSchemaAny2.MinOccurs = 1M;
              xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
              num1 = (int) num2 * -1597891556 ^ -484193974;
              continue;
            case 18:
              xmlSchemaAny1 = new XmlSchemaAny();
              num1 = (int) num2 * -220472764 ^ -728599147;
              continue;
            case 19:
              num1 = (int) num2 * -299337926 ^ -1397737676;
              continue;
            case 20:
              xmlSchemaSequence = new XmlSchemaSequence();
              num1 = (int) num2 * 1585522627 ^ -2115518515;
              continue;
            case 21:
              xmlSchemaAny2 = new XmlSchemaAny();
              xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
              num1 = (int) num2 * 603738415 ^ 2132103587;
              continue;
            case 22:
              xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
              num1 = (int) num2 * -1573462554 ^ -1889177209;
              continue;
            case 23:
              schemaSerializable = accountsDataSet.GetSchemaSerializable();
              num1 = (int) num2 * 1254442792 ^ -1993081949;
              continue;
            default:
              goto label_26;
          }
        }
label_26:
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        XmlSchemaComplexType typedTableSchema;
        try
        {
label_28:
          int num3 = 916485747;
          while (true)
          {
            uint num4;
            IEnumerator enumerator;
            XmlSchema xmlSchema;
            int num5;
            switch ((num4 = (uint) (num3 ^ 275779059)) % 25U)
            {
              case 0:
                memoryStream1.Position = 0L;
                num3 = (int) num4 * 116421464 ^ 1828151513;
                continue;
              case 1:
                num3 = 1005200948;
                continue;
              case 2:
                if (memoryStream1.Position == memoryStream1.Length)
                {
                  num5 = 0;
                  break;
                }
                num3 = 1580757335;
                continue;
              case 3:
                memoryStream2.Position = 0L;
                num3 = (int) num4 * 1484860877 ^ 1384851576;
                continue;
              case 4:
                xmlSchema.Write((Stream) memoryStream2);
                num3 = (int) num4 * 1780578040 ^ 1009090446;
                continue;
              case 5:
                int num6 = memoryStream1.Position == memoryStream1.Length ? -1466095408 : (num6 = -1469917497);
                num3 = num6 ^ (int) num4 * 1590902243;
                continue;
              case 6:
                goto label_28;
              case 7:
                num3 = (int) num4 * -711895784 ^ 758595215;
                continue;
              case 9:
                num3 = (int) num4 * 37527456 ^ 974343876;
                continue;
              case 10:
                xmlSchema = (XmlSchema) enumerator.Current;
                memoryStream2.SetLength(0L);
                num3 = 955678177;
                continue;
              case 11:
                num3 = (int) num4 * -1739496832 ^ 1758460054;
                continue;
              case 12:
                xmlSchema = (XmlSchema) null;
                num3 = (int) num4 * -774086264 ^ 1277999905;
                continue;
              case 13:
                schemaSerializable.Write((Stream) memoryStream1);
                enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                num3 = (int) num4 * 529797849 ^ -1102678833;
                continue;
              case 14:
                num3 = 1260652036;
                continue;
              case 15:
                num3 = (int) num4 * 223659444 ^ 1466070585;
                continue;
              case 16:
                int num7 = memoryStream1.Length == memoryStream2.Length ? -283552757 : (num7 = -192620150);
                num3 = num7 ^ (int) num4 * -1139905619;
                continue;
              case 17:
                typedTableSchema = schemaComplexType;
                num3 = (int) num4 * 1567219091 ^ 2087707175;
                continue;
              case 18:
                int num8;
                num3 = num8 = enumerator.MoveNext() ? 609058438 : (num8 = 1765903034);
                continue;
              case 19:
                num3 = (int) num4 * -271807500 ^ -90145567;
                continue;
              case 20:
                num3 = (int) num4 * 2053915846 ^ -397708125;
                continue;
              case 21:
                num3 = 1752639852;
                continue;
              case 22:
                num3 = (int) num4 * -1672250044 ^ 960122348;
                continue;
              case 23:
                num5 = memoryStream1.ReadByte() == memoryStream2.ReadByte() ? 1 : 0;
                break;
              case 24:
                goto label_72;
              default:
                goto label_68;
            }
            int num9;
            num3 = num9 = num5 == 0 ? 319357114 : (num9 = 2067271129);
          }
        }
        finally
        {
label_56:
          int num10 = 1810042477;
          bool flag;
          while (true)
          {
            uint num11;
            switch ((num11 = (uint) (num10 ^ 275779059)) % 11U)
            {
              case 0:
                goto label_56;
              case 1:
                int num12 = !flag ? -1836676874 : (num12 = -1391202355);
                num10 = num12 ^ (int) num11 * 1082254995;
                continue;
              case 2:
                num10 = (int) num11 * 1989467994 ^ 1841389903;
                continue;
              case 3:
                num10 = 894373054;
                continue;
              case 4:
                flag = memoryStream1 != null;
                num10 = (int) num11 * 832895258 ^ 856079000;
                continue;
              case 5:
                num10 = (int) num11 * 1827688565 ^ 964600975;
                continue;
              case 6:
                int num13;
                num10 = num13 = memoryStream2 != null ? 297521537 : (num13 = 1612219980);
                continue;
              case 8:
                num10 = (int) num11 * -1547477226 ^ 110475290;
                continue;
              case 9:
                memoryStream1.Close();
                num10 = (int) num11 * -77189679 ^ -1217616738;
                continue;
              case 10:
                memoryStream2.Close();
                num10 = (int) num11 * -2132349048 ^ 931248180;
                continue;
              default:
                goto label_67;
            }
          }
label_67:;
        }
label_68:
label_69:
        int num14 = 1167290793;
label_70:
        uint num15;
        switch ((num15 = (uint) (num14 ^ 275779059)) % 3U)
        {
          case 1:
            break;
          case 2:
            goto label_69;
          default:
            goto label_72;
        }
label_71:
        xs.Add(schemaSerializable);
        typedTableSchema = schemaComplexType;
        num14 = 558101377;
        goto label_70;
label_72:
        return typedTableSchema;
      }
    }

    public class TableRow : DataRow
    {
      private AccountsDataSet.TableDataTable tableTable;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      internal TableRow(DataRowBuilder rb)
        : base(rb)
      {
label_1:
        int num1 = 514145706;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1461390979)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * -1243873496 ^ -1395046583;
              continue;
            case 2:
              this.tableTable = (AccountsDataSet.TableDataTable) this.Table;
              num1 = (int) num2 * 918736294 ^ 1034260903;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public int Id
      {
        get
        {
          int id = (int) this[this.tableTable.IdColumn];
label_1:
          int num1 = 1317738721;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1705288092)) % 3U)
            {
              case 0:
                goto label_1;
              case 1:
                num1 = (int) num2 * -1642877526 ^ -192068228;
                continue;
              default:
                goto label_4;
            }
          }
label_4:
          return id;
        }
        set
        {
label_1:
          int num1 = 950615163;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 923736306)) % 4U)
            {
              case 0:
                goto label_3;
              case 1:
                this[this.tableTable.IdColumn] = (object) value;
                num1 = (int) num2 * 956536035 ^ -66854594;
                continue;
              case 2:
                goto label_1;
              case 3:
                num1 = (int) num2 * -549082314 ^ -1859800160;
                continue;
              default:
                goto label_6;
            }
          }
label_3:
          return;
label_6:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public string Name
      {
        get
        {
          string name;
          try
          {
label_2:
            int num1 = -1983061750;
            while (true)
            {
              uint num2;
              switch ((num2 = (uint) (num1 ^ -705306532)) % 3U)
              {
                case 0:
                  goto label_2;
                case 2:
                  name = (string) this[this.tableTable.NameColumn];
                  num1 = (int) num2 * 1621303409 ^ 1846761573;
                  continue;
                default:
                  goto label_6;
              }
            }
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'Table' is DBNull.", (Exception) ex);
          }
label_6:
          return name;
        }
        set => this[this.tableTable.NameColumn] = (object) value;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public Decimal AccNo
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableTable.AccNoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AccNo' in table 'Table' is DBNull.", (Exception) ex);
          }
        }
        set
        {
label_1:
          int num1 = -1791163594;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1357437265)) % 3U)
            {
              case 0:
                goto label_1;
              case 1:
                goto label_3;
              case 2:
                this[this.tableTable.AccNoColumn] = (object) value;
                num1 = (int) num2 * -1639147071 ^ 1619937015;
                continue;
              default:
                goto label_5;
            }
          }
label_3:
          return;
label_5:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public Decimal PIN
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableTable.PINColumn];
          }
          catch (InvalidCastException ex)
          {
label_3:
            int num1 = -646061859;
            while (true)
            {
              uint num2;
              switch ((num2 = (uint) (num1 ^ -1538514493)) % 3U)
              {
                case 1:
                  num1 = (int) num2 * 925285616 ^ -929007219;
                  continue;
                case 2:
                  goto label_3;
                default:
                  goto label_6;
              }
            }
label_6:
            throw new StrongTypingException("The value for column 'PIN' in table 'Table' is DBNull.", (Exception) ex);
          }
        }
        set
        {
label_1:
          int num1 = 1395052824;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 404673442)) % 3U)
            {
              case 0:
                goto label_3;
              case 1:
                this[this.tableTable.PINColumn] = (object) value;
                num1 = (int) num2 * -1672509071 ^ 1266152593;
                continue;
              case 2:
                goto label_1;
              default:
                goto label_5;
            }
          }
label_3:
          return;
label_5:;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public Decimal Balance
      {
        get
        {
          try
          {
            return (Decimal) this[this.tableTable.BalanceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Balance' in table 'Table' is DBNull.", (Exception) ex);
          }
        }
        set
        {
label_1:
          int num1 = -139471261;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -899639015)) % 3U)
            {
              case 0:
                goto label_1;
              case 1:
                this[this.tableTable.BalanceColumn] = (object) value;
                num1 = (int) num2 * -1469257837 ^ -484384184;
                continue;
              case 2:
                goto label_3;
              default:
                goto label_5;
            }
          }
label_3:
          return;
label_5:;
        }
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public bool IsNameNull()
      {
label_1:
        int num1 = -1290486959;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2106047889)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              flag = this.IsNull(this.tableTable.NameColumn);
              num1 = (int) num2 * 1025377074 ^ 59185676;
              continue;
            case 3:
              num1 = (int) num2 * -90740118 ^ 329802156;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return flag;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public void SetNameNull()
      {
label_1:
        int num1 = 807325777;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 720587299)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 911370502 ^ 686490294;
              continue;
            case 2:
              this[this.tableTable.NameColumn] = Convert.DBNull;
              num1 = (int) num2 * 698706704 ^ -1965872526;
              continue;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public bool IsAccNoNull()
      {
label_1:
        int num1 = -1917487704;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -567228207)) % 4U)
          {
            case 1:
              flag = this.IsNull(this.tableTable.AccNoColumn);
              num1 = (int) num2 * 2007708765 ^ -1268159666;
              continue;
            case 2:
              num1 = (int) num2 * 331287841 ^ 295959895;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return flag;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetAccNoNull()
      {
label_1:
        int num1 = -420376861;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -82884766)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 2074958469 ^ 1381484721;
              continue;
            case 1:
              this[this.tableTable.AccNoColumn] = Convert.DBNull;
              num1 = (int) num2 * -1264491397 ^ -395294595;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public bool IsPINNull()
      {
        bool flag = this.IsNull(this.tableTable.PINColumn);
label_1:
        int num1 = 141548401;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1417556628)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 795142923 ^ -27673484;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return flag;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetPINNull()
      {
label_1:
        int num1 = -166036852;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1186255166)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this[this.tableTable.PINColumn] = Convert.DBNull;
              num1 = (int) num2 * 508691623 ^ -331448738;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      [DebuggerNonUserCode]
      public bool IsBalanceNull()
      {
label_1:
        int num1 = 647618067;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 16582941)) % 3U)
          {
            case 1:
              flag = this.IsNull(this.tableTable.BalanceColumn);
              num1 = (int) num2 * -1597986720 ^ -407920645;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return flag;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public void SetBalanceNull()
      {
label_1:
        int num1 = -1044839024;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1832860579)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -173094149 ^ 263612654;
              continue;
            case 1:
              this[this.tableTable.BalanceColumn] = Convert.DBNull;
              num1 = (int) num2 * 1023859035 ^ -1827678174;
              continue;
            case 2:
              goto label_1;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
    public class TableRowChangeEvent : EventArgs
    {
      private AccountsDataSet.TableRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public TableRowChangeEvent(AccountsDataSet.TableRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public AccountsDataSet.TableRow Row
      {
        get
        {
label_1:
          int num1 = 159431032;
          AccountsDataSet.TableRow eventRow;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 1279953878)) % 4U)
            {
              case 0:
                goto label_1;
              case 1:
                num1 = (int) num2 * -988326536 ^ 1354768409;
                continue;
              case 2:
                eventRow = this.eventRow;
                num1 = (int) num2 * 1164204528 ^ 62785835;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return eventRow;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
      public DataRowAction Action
      {
        get
        {
label_1:
          int num1 = -1294219166;
          DataRowAction eventAction;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ -1832570573)) % 4U)
            {
              case 0:
                goto label_1;
              case 1:
                eventAction = this.eventAction;
                num1 = (int) num2 * 373096731 ^ 1439322247;
                continue;
              case 3:
                num1 = (int) num2 * -327611180 ^ 643806049;
                continue;
              default:
                goto label_5;
            }
          }
label_5:
          return eventAction;
        }
      }
    }
  }
}
