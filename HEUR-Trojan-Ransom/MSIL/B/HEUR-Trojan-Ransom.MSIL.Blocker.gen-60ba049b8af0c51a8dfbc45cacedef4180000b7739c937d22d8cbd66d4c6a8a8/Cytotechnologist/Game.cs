// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: AppConte, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7B8B5733-911E-457B-A55E-DDA2927F5FA5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-60ba049b8af0c51a8dfbc45cacedef4180000b7739c937d22d8cbd66d4c6a8a8.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u200E‫⁯‍‭⁭‎‪‍⁬⁪‪⁫⁬‫‌⁬⁫‏‮‎⁬‬‌⁮‍​‪‮‮‏⁮‌⁫⁮‏‍‏‮⁬‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 784470260;
        PlayerState[] playerStates;
        bool finished;
        PlayerState playerState;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 814018687)) % 14U)
          {
            case 0:
              playerStates = this._playerStates;
              num1 = 276961128;
              continue;
            case 1:
              int num3 = this._finished ? 1985385328 : (num3 = 899161604);
              num1 = num3 ^ (int) num2 * 377189199;
              continue;
            case 2:
              ++index;
              num1 = 426469930;
              continue;
            case 3:
              finished = false;
              num1 = (int) num2 * -1141303697 ^ -1788797396;
              continue;
            case 4:
              num1 = (int) num2 * -1549755050 ^ -1866096152;
              continue;
            case 5:
              goto label_1;
            case 6:
              int num4 = playerState.State == State.Playing ? 1562257558 : (num4 = 1791112543);
              num1 = num4 ^ (int) num2 * 1995050254;
              continue;
            case 8:
              num1 = (int) num2 * 956859040 ^ 987606984;
              continue;
            case 9:
              int num5;
              num1 = num5 = index >= playerStates.Length ? 2065980198 : (num5 = 761869811);
              continue;
            case 10:
              playerState = playerStates[index];
              num1 = 1017472945;
              continue;
            case 11:
              index = 0;
              num1 = (int) num2 * 1914183493 ^ 2037086233;
              continue;
            case 12:
              finished = true;
              num1 = (int) num2 * 1738975643 ^ -744278559;
              continue;
            case 13:
              finished = true;
              num1 = (int) num2 * -638855360 ^ -1965102968;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = 1928814273;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 882262977)) % 9U)
        {
          case 0:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -2095324049 ^ 1896704493;
            continue;
          case 1:
            this.Winners.Clear();
            num1 = (int) num2 * -2018833563 ^ 1413199292;
            continue;
          case 2:
            num1 = (int) num2 * -1290349410 ^ 2126691491;
            continue;
          case 3:
            this._currentTurn = 0;
            num1 = (int) num2 * 842824765 ^ -807791418;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Losers.Clear();
            num1 = (int) num2 * 899493836 ^ -2141938353;
            continue;
          case 6:
            goto label_3;
          case 7:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1861755628 ^ 818058440;
            continue;
          case 8:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1501350543 ^ 1743432104;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1973987610;
      Player player;
      bool morePlanningSprint;
      int num2;
      int planningCardsCount;
      bool flag1;
      PlayerState playerState;
      int index;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1871044813)) % 29U)
        {
          case 0:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 885608175 ^ -1488285894;
            continue;
          case 1:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 53327269 ^ 2042045531;
            continue;
          case 2:
            int num4 = !flag1 ? 1778749377 : (num4 = 751571593);
            num1 = num4 ^ (int) num3 * 258279705;
            continue;
          case 3:
            num1 = (int) num3 * 1449825062 ^ -1580773527;
            continue;
          case 4:
            num1 = (int) num3 * 429902200 ^ 743976995;
            continue;
          case 5:
            num1 = (int) num3 * 853426939 ^ -1436097770;
            continue;
          case 6:
            num1 = 294633013;
            continue;
          case 7:
            goto label_1;
          case 8:
            num2 = 0;
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * -376379874 ^ -1292952888;
            continue;
          case 9:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 972868463 ^ 47607696;
            continue;
          case 10:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * -1072022196 ^ 195428753;
            continue;
          case 11:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -367723408 ^ -1542926962;
            continue;
          case 12:
            goto label_3;
          case 13:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 338186124 ^ -568030883;
            continue;
          case 14:
            int num5 = flag2 ? 2036056691 : (num5 = 1037668536);
            num1 = num5 ^ (int) num3 * -1724933554;
            continue;
          case 15:
            playerState.Sprint = 1;
            num1 = (int) num3 * -2147209703 ^ -314986690;
            continue;
          case 16:
            index = 0;
            num1 = (int) num3 * -926772530 ^ -1880892282;
            continue;
          case 17:
            num1 = (int) num3 * 787297712 ^ -1782853487;
            continue;
          case 18:
            num1 = 630960910;
            continue;
          case 19:
            num2 = 0;
            num1 = 1853218755;
            continue;
          case 20:
            ++index;
            num1 = (int) num3 * 208853477 ^ -225390765;
            continue;
          case 21:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1156094565 ^ -1973303408;
            continue;
          case 22:
            playerState.State = State.Playing;
            num1 = (int) num3 * 2095351768 ^ 1892105166;
            continue;
          case 23:
            int num6 = !morePlanningSprint ? -718323216 : (num6 = -283387899);
            num1 = num6 ^ (int) num3 * 1765144306;
            continue;
          case 24:
            int num7;
            num1 = num7 = num2 <= 0 ? 745888076 : (num7 = 353753576);
            continue;
          case 25:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 92153543;
            continue;
          case 26:
            flag2 = index < this.Players.Length;
            num1 = 709361163;
            continue;
          case 27:
            num1 = 1774852891;
            continue;
          case 28:
            num1 = (int) num3 * -1829053734 ^ -462935127;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 759757347;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1832111872)) % 16U)
        {
          case 0:
            num1 = (int) num2 * 2035429622 ^ 746442898;
            continue;
          case 1:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1069758548;
            continue;
          case 2:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206A⁭⁯‭⁬⁭‍‎​‏​‍⁭⁬‪‍‬⁯‪‫‪‬‭⁮⁪⁫⁭⁬⁪⁯⁪⁯⁬‬‍‎⁯‭⁪‌‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 579368728 ^ -509807892;
            continue;
          case 3:
            ++this._currentPlayer;
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 1532782311 ^ -531368645;
            continue;
          case 4:
            goto label_3;
          case 5:
            int num3 = flag1 ? 644813638 : (num3 = 251527383);
            num1 = num3 ^ (int) num2 * -2068867501;
            continue;
          case 6:
            goto label_1;
          case 7:
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * -167441654 ^ 567637571;
            continue;
          case 8:
            this.Print((object) Game.\u206F⁬‎‎⁮‌⁭‮‮‫‮⁬‪⁫‏‍‎⁬‫‮‪‪⁫‭‪‪‬‫‎‫⁬⁪⁭‎⁪​‭‪‏‫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 1467713568;
            continue;
          case 9:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1925582063 ^ 891688285;
            continue;
          case 10:
            num1 = (int) num2 * 1854531297 ^ -21314238;
            continue;
          case 11:
            num1 = (int) num2 * -1003751588 ^ 818591403;
            continue;
          case 12:
            num1 = (int) num2 * 43973606 ^ -1457101467;
            continue;
          case 13:
            num1 = (int) num2 * 143288674 ^ 113319467;
            continue;
          case 14:
            int num4 = !flag2 ? -899712521 : (num4 = -1664143043);
            num1 = num4 ^ (int) num2 * 63407973;
            continue;
          case 15:
            this._currentPlayer = 0;
            num1 = (int) num2 * 150002520 ^ -870886641;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = 835907253;
      while (true)
      {
        uint num2;
        Card card;
        int num3;
        bool flag1;
        int num4;
        bool flag2;
        PlayerState playerState1;
        bool flag3;
        bool flag4;
        int num5;
        bool flag5;
        int index;
        bool flag6;
        PlayerState playerState2;
        bool flag7;
        bool flag8;
        bool flag9;
        int num6;
        switch ((num2 = (uint) (num1 ^ 845185067)) % 85U)
        {
          case 0:
            this.Losers.Add(num4);
            num1 = (int) num2 * -1300315763 ^ -1119539706;
            continue;
          case 1:
            int num7 = !flag5 ? 963510397 : (num7 = 1389367766);
            num1 = num7 ^ (int) num2 * -63131884;
            continue;
          case 2:
            card = this.DrawCard();
            num1 = (int) num2 * -985309753 ^ -1737849849;
            continue;
          case 3:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206A⁭⁯‭⁬⁭‍‎​‏​‍⁭⁬‪‍‬⁯‪‫‪‬‭⁮⁪⁫⁭⁬⁪⁯⁪⁯⁬‬‍‎⁯‭⁪‌‮("\t", playerState3 != null ? Game.\u202D⁮⁫​‎⁫⁬⁯‌⁬⁯​‍‌‍‎⁭‫‍⁭‬‮⁫⁯⁬⁭‭‫⁭‌⁭​‎‏‌‍‭‬⁮⁭‮((object) playerState3) : (string) null));
            num1 = 1140484696;
            continue;
          case 4:
            int num8 = !flag1 ? -2146130679 : (num8 = -1413981198);
            num1 = num8 ^ (int) num2 * 763753186;
            continue;
          case 5:
            flag1 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1269382784 ^ 1918328909;
            continue;
          case 6:
            num1 = (int) num2 * -1270232354 ^ -367431027;
            continue;
          case 7:
            num1 = 978258282;
            continue;
          case 8:
            flag8 = true;
            num1 = (int) num2 * 1472638941 ^ 2102472124;
            continue;
          case 9:
            num1 = 279276364;
            continue;
          case 10:
            int num9 = flag9 ? -600862367 : (num9 = -1387622813);
            num1 = num9 ^ (int) num2 * 1259902627;
            continue;
          case 11:
            num1 = (int) num2 * -1293259942 ^ -651465829;
            continue;
          case 12:
            num1 = (int) num2 * 1410373883 ^ -390377870;
            continue;
          case 13:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1429337845 ^ -150788245;
            continue;
          case 14:
            num1 = 3144820;
            continue;
          case 15:
            flag3 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * 748755796 ^ 1247393091;
            continue;
          case 16:
            int num10;
            num1 = num10 = playerState1.Sprint >= 0 ? 1837653612 : (num10 = 538374420);
            continue;
          case 17:
            num1 = (int) num2 * 1945928205 ^ -1885069647;
            continue;
          case 18:
            flag8 = true;
            num1 = (int) num2 * 1063248586 ^ -978966328;
            continue;
          case 19:
            int num11 = playerState1.State != 0 ? 1338678769 : (num11 = 223103121);
            num1 = num11 ^ (int) num2 * 1218504788;
            continue;
          case 20:
            num5 = card.Impact;
            num1 = (int) num2 * 1758365201 ^ 560586094;
            continue;
          case 21:
            num1 = (int) num2 * 1033757009 ^ 1445431345;
            continue;
          case 22:
            num1 = (int) num2 * -130454875 ^ 289093596;
            continue;
          case 23:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 263010679 ^ -850229753;
            continue;
          case 24:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1555082213 ^ 46700303;
            continue;
          case 25:
            int num12;
            num1 = num12 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? 1793646169 : (num12 = 1291398776);
            continue;
          case 26:
            num1 = (int) num2 * 2146884790 ^ -509051990;
            continue;
          case 27:
            ++num4;
            num1 = 725282709;
            continue;
          case 28:
            playerState1.State = State.Won;
            num1 = (int) num2 * 1313708521 ^ 1370628446;
            continue;
          case 29:
            this.Losers.Add(index);
            num1 = (int) num2 * -1559081588 ^ 1999711682;
            continue;
          case 30:
            this.Print((object) Game.\u206A⁭⁯‭⁬⁭‍‎​‏​‍⁭⁬‪‍‬⁯‪‫‪‬‭⁮⁪⁫⁭⁬⁪⁯⁪⁯⁬‬‍‎⁯‭⁪‌‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 191411453 ^ 1856465978;
            continue;
          case 31:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u206A⁫‫‬‭⁪⁬‪‫‫⁯‏‍‬⁭⁯⁯‭‬‎⁯⁮‌‏‏‍‪⁪⁮‏‌‮‌‎‍⁮⁯‪⁪⁯‮(0, num5 - this.Players[index].PlannedForCard(card.Type));
            int num13;
            num1 = num13 = playerState2.Resources < 0 ? 280809652 : (num13 = 854946697);
            continue;
          case 32:
            goto label_1;
          case 33:
            flag5 = playerState1.Resources < 0;
            num1 = (int) num2 * -55850433 ^ -670958021;
            continue;
          case 34:
            num1 = (int) num2 * 313792772 ^ 476314746;
            continue;
          case 35:
            goto label_3;
          case 36:
            num1 = (int) num2 * -1555797414 ^ 1960152718;
            continue;
          case 37:
            num1 = 813867225;
            continue;
          case 38:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 39:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -169955336 ^ 215136817;
            continue;
          case 40:
            num1 = (int) num2 * 591539194 ^ 1445779639;
            continue;
          case 41:
            flag9 = !flag7;
            num1 = (int) num2 * -1176620315 ^ 887573128;
            continue;
          case 42:
            num1 = (int) num2 * -1211332875 ^ 434718721;
            continue;
          case 43:
            num1 = (int) num2 * -1562266761 ^ 1767920313;
            continue;
          case 44:
            num1 = (int) num2 * 1970123347 ^ 693881546;
            continue;
          case 45:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1726891501 ^ -722549602;
            continue;
          case 46:
            index = 0;
            num1 = (int) num2 * 1303966535 ^ -883298797;
            continue;
          case 47:
            num1 = (int) num2 * -1009463514 ^ -1724373945;
            continue;
          case 48:
            num1 = (int) num2 * -1720702111 ^ -1932033963;
            continue;
          case 49:
            flag8 = num3 < this.Rules.StayOnSprintMinDiff;
            num5 = Game.\u206A⁫‫‬‭⁪⁬‪‫‫⁯‏‍‬⁭⁯⁯‭‬‎⁯⁮‌‏‏‍‪⁪⁮‏‌‮‌‎‍⁮⁯‪⁪⁯‮(0, num3);
            num1 = (int) num2 * -1039172950 ^ 580353967;
            continue;
          case 50:
            num1 = 1465373772;
            continue;
          case 51:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1074737058 ^ 196965498;
            continue;
          case 52:
            num1 = (int) num2 * 1437762506 ^ -729915969;
            continue;
          case 53:
            ++playerState1.Sprint;
            num1 = (int) num2 * 747475441 ^ 324357555;
            continue;
          case 54:
            num1 = (int) num2 * -250704284 ^ -525025388;
            continue;
          case 55:
            num3 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1200077938 ^ -990013191;
            continue;
          case 56:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag7 ? (object) "ALL " : (object) "", flag3 ? (object) "receives" : (object) "pays", (object) Game.\u202D⁭‪‎‭‏‌‏‎⁪‮⁭⁪‫⁬⁭⁭⁯⁯‏⁭‪‎⁬‏‭⁭‎⁭‭⁭‎‫‬‫⁫‎⁬⁯⁪‮(num5), flag8 ? (object) "advance" : (object) "stay");
            num1 = 163661385;
            continue;
          case 57:
            num1 = (int) num2 * 149504544 ^ -422526795;
            continue;
          case 58:
            num4 = 0;
            num1 = (int) num2 * 164960589 ^ -158221062;
            continue;
          case 59:
            ++index;
            num1 = 151509955;
            continue;
          case 60:
            int num14;
            num1 = num14 = index >= this._playerStates.Length ? 2086569571 : (num14 = 1062762996);
            continue;
          case 61:
            playerState1.Resources -= num5;
            num1 = (int) num2 * 940543925 ^ 1653457042;
            continue;
          case 62:
            int num15;
            num1 = num15 = this.Losers.Contains(num4) ? 860593707 : (num15 = 336852676);
            continue;
          case 63:
            this._finished = true;
            num1 = (int) num2 * 342630166 ^ 1830174830;
            continue;
          case 64:
            int num16 = num4 == playerIndex ? 1574796591 : (num16 = 641075860);
            num1 = num16 ^ (int) num2 * 73499703;
            continue;
          case 65:
            int num17 = flag4 ? -22379655 : (num17 = -1974979857);
            num1 = num17 ^ (int) num2 * 633579120;
            continue;
          case 66:
            num1 = (int) num2 * -1562606695 ^ -2124516619;
            continue;
          case 67:
            num1 = 1781439831;
            continue;
          case 68:
            playerState2.State = State.Lose;
            flag6 = !this.Losers.Contains(index);
            num1 = 550110540;
            continue;
          case 69:
            int num18 = this.Rules.OnlyOneWinner ? 1604403654 : (num18 = 1398440938);
            num1 = num18 ^ (int) num2 * -51459999;
            continue;
          case 70:
            num1 = (int) num2 * 905502776 ^ 446357929;
            continue;
          case 71:
            num1 = (int) num2 * -818764368 ^ 177058669;
            continue;
          case 72:
            int num19;
            num1 = num19 = playerState1.Sprint > this.Rules.SprintCount ? 1537377469 : (num19 = 1465373772);
            continue;
          case 73:
            num1 = 551133289;
            continue;
          case 74:
            num1 = 1836446967;
            continue;
          case 75:
            num1 = (int) num2 * 136638492 ^ 843458970;
            continue;
          case 76:
            flag2 = num4 < this._playerStates.Length;
            num1 = 1407938798;
            continue;
          case 77:
            int num20;
            num1 = num20 = flag8 ? 1235249993 : (num20 = 1371493617);
            continue;
          case 78:
            int num21 = flag2 ? -1534216784 : (num21 = -1028150892);
            num1 = num21 ^ (int) num2 * -933262793;
            continue;
          case 79:
            num1 = (int) num2 * 1056771536 ^ 1281652654;
            continue;
          case 80:
            num1 = 329443470;
            continue;
          case 81:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 237392411 ^ 1290680420;
            continue;
          case 82:
            flag8 = false;
            num1 = 1343966093;
            continue;
          case 83:
            flag4 = !flag3;
            num1 = (int) num2 * 2023518247 ^ -13080149;
            continue;
          case 84:
            int num22 = flag6 ? -345567625 : (num22 = -367740230);
            num1 = num22 ^ (int) num2 * 2127026401;
            continue;
          default:
            goto label_90;
        }
        flag7 = num6 != 0;
        num1 = 1773195777;
      }
label_3:
      return;
label_90:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -287633710;
      Card card1;
      bool flag;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -154277291)) % 9U)
        {
          case 0:
            this.ShuffleCards();
            num1 = (int) num2 * 2008287111 ^ 1435995098;
            continue;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -1126757245 ^ -1898118326;
            continue;
          case 2:
            card2 = card1;
            num1 = (int) num2 * 510839779 ^ 426244489;
            continue;
          case 3:
            card1 = this._deck[0];
            num1 = -838558810;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 1464819244 ^ 1225499749;
            continue;
          case 7:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1160028545 ^ 684411731;
            continue;
          case 8:
            int num3 = !flag ? 2061428778 : (num3 = 880393573);
            num1 = num3 ^ (int) num2 * -433439736;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -1921578158;
      bool flag;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1729571393)) % 11U)
        {
          case 0:
            index = 0;
            num1 = (int) num2 * -1086427830 ^ 1601216039;
            continue;
          case 1:
            int num3 = flag ? 1211330494 : (num3 = 303736192);
            num1 = num3 ^ (int) num2 * 988935450;
            continue;
          case 2:
            num1 = (int) num2 * 360926365 ^ -2083328937;
            continue;
          case 3:
            goto label_1;
          case 4:
            ++index;
            num1 = (int) num2 * -140113388 ^ 1704104350;
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * 254711283 ^ -1467211709;
            continue;
          case 6:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202D⁮⁫​‎⁫⁬⁯‌⁬⁯​‍‌‍‎⁭‫‍⁭‬‮⁫⁯⁬⁭‭‫⁭‌⁭​‎‏‌‍‭‬⁮⁭‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202E‫‎‭⁭​⁮⁮​‌‬​⁫⁫​⁪⁪‏⁫‎‬‍‫‏⁮‍​⁮⁬‮‫‪⁪‮​‭⁬‍⁮⁪‮(strArray);
            num1 = -173987720;
            continue;
          case 8:
            str1 = "";
            num1 = (int) num2 * -1684176681 ^ -566478157;
            continue;
          case 9:
            num1 = (int) num2 * 847276564 ^ -102897590;
            continue;
          case 10:
            flag = index < this._playerStates.Length;
            num1 = -203841867;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more)
    {
      string str = Game.\u206F‎⁯‮⁭⁬‮‪‮‭⁪​‎‪⁮‭‭‪⁭⁭‫⁯‫‍⁪‍‍⁮‎‭​⁪⁯‫‏‭‭​‫⁭‮(Game.\u202D⁮⁫​‎⁫⁬⁯‌⁬⁯​‍‌‍‎⁭‫‍⁭‬‮⁫⁯⁬⁭‭‫⁭‌⁭​‎‏‌‍‭‬⁮⁭‮(text), more);
label_1:
      int num1 = -122657697;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2051368267)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Game.\u200B⁭⁫‏‫⁪‎‪‌⁪‫‪⁯‎‎‫⁪‌⁫‬⁯⁬⁬⁮​‮⁪‬‏‫⁬‍‏‫⁮⁪‎⁯‪‍‮(this._buffer, str);
            num1 = (int) num2 * -1370886738 ^ 527212997;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u200E‫⁯‍‭⁭‎‪‍⁬⁪‪⁫⁬‫‌⁬⁫‏‮‎⁬‬‌⁮‍​‪‮‮‏⁮‌⁫⁮‏‍‏‮⁬‮([In] int obj0) => new Random(obj0);

    static string \u206F⁬‎‎⁮‌⁭‮‮‫‮⁬‪⁫‏‍‎⁬‫‮‪‪⁫‭‪‪‬‫‎‫⁬⁪⁭‎⁪​‭‪‏‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206A⁭⁯‭⁬⁭‍‎​‏​‍⁭⁬‪‍‬⁯‪‫‪‬‭⁮⁪⁫⁭⁬⁪⁯⁪⁯⁬‬‍‎⁯‭⁪‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206A⁫‫‬‭⁪⁬‪‫‫⁯‏‍‬⁭⁯⁯‭‬‎⁯⁮‌‏‏‍‪⁪⁮‏‌‮‌‎‍⁮⁯‪⁪⁯‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202D⁭‪‎‭‏‌‏‎⁪‮⁭⁪‫⁬⁭⁭⁯⁯‏⁭‪‎⁬‏‭⁭‎⁭‭⁭‎‫‬‫⁫‎⁬⁯⁪‮([In] int obj0) => Math.Abs(obj0);

    static string \u202D⁮⁫​‎⁫⁬⁯‌⁬⁯​‍‌‍‎⁭‫‍⁭‬‮⁫⁯⁬⁭‭‫⁭‌⁭​‎‏‌‍‭‬⁮⁭‮([In] object obj0) => obj0.ToString();

    static string \u202E‫‎‭⁭​⁮⁮​‌‬​⁫⁫​⁪⁪‏⁫‎‬‍‫‏⁮‍​⁮⁬‮‫‪⁪‮​‭⁬‍⁮⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F‎⁯‮⁭⁬‮‪‮‭⁪​‎‪⁮‭‭‪⁭⁭‫⁯‫‍⁪‍‍⁮‎‭​⁪⁯‫‏‭‭​‫⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200B⁭⁫‏‫⁪‎‪‌⁪‫‪⁯‎‎‫⁪‌⁫‬⁯⁬⁬⁮​‮⁪‬‏‫⁬‍‏‫⁮⁪‎⁯‪‍‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
