// Decompiled with JetBrains decompiler
// Type:   
// Assembly: Vqblspvdqljhpsgi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE8081E8-66FB-4850-FD50-A5695502DCE6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-9fc4a8a3b82ca7cc67d3b4eed5450d9c6ff148924beec86be1b3178754f4b645.exe

using System;
using System.Collections.Concurrent;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

internal static class \u0008\u2008\u2000
{
  private static short \u0008;
  private static int \u0002\u2000;
  private static byte[] \u000E;
  private static int \u0006;
  private static \u0008\u2008\u2000.\u0003 \u0003;
  private static byte[] \u0005;
  private static \u0008\u2008\u2000.\u0002 \u0003\u2000;
  private static ConcurrentDictionary<int, string> \u0002;
  private static int \u000F;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0008\u2008\u2000()
  {
    if (true)
      goto label_4;
label_1:
    int num1;
    int num2 = num1 ^ -1249641034;
    if (true)
      goto label_5;
label_2:
    ConcurrentDictionary<int, string> concurrentDictionary = new ConcurrentDictionary<int, string>();
    if (true)
      goto label_6;
label_3:
    \u0008\u2008\u2000.\u0003\u2000 = (\u0008\u2008\u2000.\u0002) 16 | \u0008\u2008\u2000.\u0003\u2000;
    int num3;
    \u0008\u2008\u2000.\u0002\u2000 += -~-~~--~-~~(1458598630 - num1 ^ num3);
    return;
label_6:
    \u0008\u2008\u2000.\u0002 = concurrentDictionary;
    goto label_3;
label_5:
    num3 = num2;
    goto label_2;
label_4:
    num1 = -1949351084;
    goto label_1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static string \u0002(int _param0)
  {
    ConcurrentDictionary<int, string> concurrentDictionary = \u0008\u2008\u2000.\u0002;
    int key = _param0;
    if (true)
      ;
    string str1;
    ref string local = ref str1;
    if (concurrentDictionary.TryGetValue(key, out local))
    {
      string str2 = str1;
      return false ? str2 : str2;
    }
    int num = _param0;
    if (true)
      ;
    return \u0008\u2008\u2000.\u0002(num, true);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static string \u0002(int _param0, bool _param1)
  {
    if (true)
      goto label_3;
label_1:
    int num1;
    int num2 = 1964671912 + num1;
    if (true)
      goto label_4;
label_2:
    string str1;
    if (true)
      str1 = (string) null;
    int num3;
    byte[] numArray1;
    int num4;
    int num5;
    int num6;
    int num7;
    int num8;
    byte[] numArray2;
    byte[] numArray3;
    do
    {
      ConcurrentDictionary<int, string> concurrentDictionary1 = \u0008\u2008\u2000.\u0002;
      if (true)
        goto label_10;
label_9:
      bool flag;
      if (true)
        flag = false;
      ConcurrentDictionary<int, string> concurrentDictionary2;
      try
      {
        ConcurrentDictionary<int, string> concurrentDictionary3 = concurrentDictionary2;
        ref bool local = ref flag;
        if (true)
          goto label_14;
label_13:
        int num9;
        if (\u0008\u2008\u2000.\u0003 == null)
        {
          Assembly executingAssembly = Assembly.GetExecutingAssembly();
          if (true)
            goto label_20;
label_16:
          Assembly.GetCallingAssembly();
          if (true)
            goto label_21;
label_17:
          int num10 = \u0008\u2008\u2000.\u0006 | -1963061542 - num1 + num3;
          if (true)
            goto label_22;
label_18:
          Assembly assembly1;
          Assembly assembly2 = assembly1;
          StringBuilder stringBuilder1 = new StringBuilder();
          if (true)
            goto label_23;
label_19:
          int num11 = num1 + 1427923890 ^ num3;
          StringBuilder stringBuilder2;
          stringBuilder2.Append((char) num11).Append((char) (num11 >> 16));
          int num12 = -1962863036 - num1 - num3;
          stringBuilder2.Append((char) num12).Append((char) (num12 >> 16));
          int num13 = -1427724877 ^ num1 ^ num3;
          stringBuilder2.Append((char) (num13 >> 16)).Append((char) num13);
          int num14 = -1427202975 - num1 + num3;
          stringBuilder2.Append((char) (num14 >> 16)).Append((char) num14);
          int num15 = num1 + 1964663723 ^ num3;
          stringBuilder2.Append((char) num15);
          string name = stringBuilder2.ToString();
          \u0008\u2008\u2000.\u0003 = new \u0008\u2008\u2000.\u0003(assembly2.GetManifestResourceStream(name));
          short num16 = (short) ((int) \u0008\u2008\u2000.\u0003.\u0002() ^ (int) (short) -~~--~-~~-~(-1964676735 - num1 + num3));
          if (num16 == (short) 0)
            \u0008\u2008\u2000.\u0008 = (short) ((int) \u0008\u2008\u2000.\u0003.\u0002() ^ (int) (short) -~-~-~~-~(num1 + 1964670954 ^ num3));
          else
            \u0008\u2008\u2000.\u0005 = \u0008\u2008\u2000.\u0003.\u0002((int) num16);
          \u0008\u2008\u2000.\u000E = \u0008\u2008\u2000.\u0002(\u0008\u2008\u2000.\u0002(assembly1));
          int num17 = \u0008\u2008\u2000.\u0002\u2000;
          \u0008\u2008\u2000.\u0002\u2000 = 0;
          int num18 = num17 ^ -403072728 - num1 - num3 ^ (int) (uint) \u000E\u2008\u2000.\u0002() ^ (num1 ^ -226722601) + num3 ^ num1 - 780538279 - num3;
          int num19 = 0;
          int num20 = num18;
          int num21 = num20;
          \u0002\u2002\u2000<int> enumerator = ((\u0006\u2001\u2000<int>) new \u0005\u2001\u2000.\u0002(-1964671914 - num1 | num3)
          {
            \u0006 = num21
          }).GetEnumerator();
          try
          {
            while (enumerator.\u000E\u2001\u2000\u2009​\u0002())
            {
              int num22 = enumerator.\u000E\u2001\u2000\u2009​\u0002();
              num20 ^= num22 - num19;
              num19 += num20 >> 1;
            }
          }
          finally
          {
            enumerator?.\u000F\u2001\u2000\u2009​\u0002();
          }
          int num23 = num20 ^ (2088284516 ^ num1) + num3;
          int num24 = (1964666637 + num1 ^ num3) * num23 % ((-1958595667 ^ num1) - num3);
          num9 = (num18 ^ (1794150162 - num1 ^ num3) + -~-~~-~--~~(num1 - 1794504562 + num3) ^ -~-~~--~~(519138133 - num1 - num3)) + num24;
          \u0008\u2008\u2000.\u0006 = \u0008\u2008\u2000.\u0006 & (num1 - 2062939590 ^ num3) ^ (num1 ^ 1964664028) + num3;
          \u0008\u2008\u2000.\u000F = num9;
          if ((\u0008\u2008\u2000.\u0003\u2000 & (\u0008\u2008\u2000.\u0002) -~-~-~~-~(1964671897 + num1 - num3)) == (\u0008\u2008\u2000.\u0002) 0)
          {
            \u0008\u2008\u2000.\u0006 = 1794527386 - num1 ^ num3;
            goto label_36;
          }
          else
            goto label_36;
label_23:
          stringBuilder2 = stringBuilder1;
          goto label_19;
label_22:
          \u0008\u2008\u2000.\u0006 = num10;
          goto label_18;
label_21:
          goto label_17;
label_20:
          assembly1 = executingAssembly;
          goto label_16;
        }
        else
          num9 = \u0008\u2008\u2000.\u000F;
label_36:
        if (\u0008\u2008\u2000.\u0006 == (num1 ^ -1964682782) - num3)
        {
          str1 = new string(new char[3]
          {
            (char) (num1 - 1794504168 + num3),
            '0',
            (char) ((-1964669952 ^ num1) - num3)
          });
          return str1;
        }
        int num25 = _param0 ^ 135798543 + num1 + num3 ^ num9 ^ 1297797356 - num1 ^ num3;
        \u0008\u2008\u2000.\u0003.\u0002().Position = (long) num25;
        if (\u0008\u2008\u2000.\u0005 != null)
        {
          numArray1 = \u0008\u2008\u2000.\u0005;
        }
        else
        {
          short num26 = \u0008\u2008\u2000.\u0008 != (short) -1 ? \u0008\u2008\u2000.\u0008 : (short) ((int) \u0008\u2008\u2000.\u0003.\u0002() ^ (1964670764 ^ num1) + num3 ^ num25);
          if (num26 == (short) 0)
          {
            numArray1 = (byte[]) null;
          }
          else
          {
            numArray1 = \u0008\u2008\u2000.\u0003.\u0002((int) num26);
            for (int index = 0; index != numArray1.Length; ++index)
              numArray1[index] ^= (byte) (\u0008\u2008\u2000.\u000F >> ((3 & index) << 3));
          }
        }
        num4 = \u0008\u2008\u2000.\u0003.\u0002() ^ num25 ^ -~-~~--~~(-158328729 - num1 - num3) ^ num9;
        if (num4 == (num1 ^ 1964669510 | num3))
        {
          byte[] numArray4 = \u0008\u2008\u2000.\u0003.\u0002(4);
          _param0 = -547630054 - num1 - num3 ^ num9;
          _param0 = ((int) numArray4[2] | (int) numArray4[3] << 16 | (int) numArray4[0] << 8 | (int) numArray4[1] << 24) ^ -_param0;
          goto label_6;
        }
        else
        {
          num5 = \u0008\u2008\u2000.\u0006;
          num6 = num1 - 1792896442 + num3;
          num7 = num4;
          num8 = num5 - 12;
          num4 &= (2061862335 ^ num1) - num3;
          numArray2 = \u0008\u2008\u2000.\u0003.\u0002(num4);
          numArray3 = \u0008\u2008\u2000.\u000E;
          goto label_51;
        }
label_14:
        Monitor.Enter((object) concurrentDictionary3, ref local);
        goto label_13;
      }
      finally
      {
        if (flag)
          Monitor.Exit((object) concurrentDictionary2);
      }
label_6:
      continue;
label_10:
      concurrentDictionary2 = concurrentDictionary1;
      goto label_9;
    }
    while (!\u0008\u2008\u2000.\u0002.TryGetValue(_param0, out str1));
    return str1;
label_51:
    bool flag1 = (num7 & (1257633344 - num1 ^ num3)) != 0;
    bool flag2 = (num7 & num1 - 720762432 + num3) != 0;
    bool flag3 = (num7 & -352979392 - num1 - num3) != 0;
    byte[] numArray5 = numArray1;
    byte[] numArray6 = numArray2;
    byte[] numArray7 = numArray5;
    byte num27 = numArray7[1];
    int length1 = numArray6.Length;
    byte num28 = (byte) (11 + length1 ^ (int) num27 + 7);
    uint num29 = (uint) (((int) numArray7[0] | (int) numArray7[2] << 8) + ((int) num28 << 3));
    int index1 = 0;
    ushort num30 = 0;
    for (; index1 < length1; ++index1)
    {
      if ((index1 & 1) == 0)
      {
        num29 = (uint) ((int) num29 * (num1 ^ -1964587451 ^ num3) + (-1962140901 - num1 + num3));
        num30 = (ushort) (num29 >> 16);
      }
      byte num31 = (byte) num30;
      num30 >>= 8;
      byte num32 = numArray6[index1];
      numArray6[index1] = (byte) ((uint) ((int) num27 ^ (int) num32 ^ 3 + (int) num28) ^ (uint) num31);
      num28 = num32;
    }
    byte[] numArray8 = numArray6;
    if (numArray3 != null != (num5 != num6))
    {
      for (int index2 = 0; index2 < num4; ++index2)
      {
        byte num33 = numArray3[index2 & 7];
        byte num34 = (byte) ((int) num33 << 3 | (int) num33 >> 5);
        numArray8[index2] = (byte) ((uint) numArray8[index2] ^ (uint) num34);
      }
    }
    int length2;
    byte[] bytes;
    if (!flag2)
    {
      length2 = num4;
      bytes = numArray8;
    }
    else
    {
      length2 = (int) numArray8[2] | (int) numArray8[0] << 16 | (int) numArray8[3] << 8 | (int) numArray8[1] << 24;
      bytes = new byte[length2];
      \u0008\u2008\u2000.\u0002(numArray8, 4, bytes);
    }
    string str2;
    if (flag1 && num8 == num6 - 12)
    {
      char[] chArray = new char[length2];
      for (int index3 = 0; index3 < length2; ++index3)
        chArray[index3] = (char) bytes[index3];
      str2 = new string(chArray);
    }
    else
      str2 = Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    int num35 = num8 + ((-1964669497 ^ num1 ^ num3) + (3 & num8) << 5);
    if (num35 != num6 - 12 + (-1964671785 - num1 + num3 + (num6 - 12 & 3) << 5))
    {
      int num36 = num4 + _param0 ^ num1 + 1964555584 ^ num3 ^ num35 & (num1 ^ -1964639411) - num3;
      ref int local = ref num36;
      StringBuilder stringBuilder = new StringBuilder();
      int num37 = -1964671824 - num1 + num3;
      stringBuilder.Append((char) (byte) num37);
      string format = stringBuilder.ToString();
      str2 = local.ToString(format);
    }
    if (!flag3 & _param1)
    {
      str2 = string.Intern(str2);
      \u0008\u2008\u2000.\u0002[_param0] = str2;
      if (\u0008\u2008\u2000.\u0002.Count == (num1 ^ -1964669665 ^ num3))
      {
        lock (\u0008\u2008\u2000.\u0002)
        {
          \u0008\u2008\u2000.\u0003.\u0002();
          \u0008\u2008\u2000.\u0003 = (\u0008\u2008\u2000.\u0003) null;
          \u0008\u2008\u2000.\u0005 = (byte[]) null;
          \u0008\u2008\u2000.\u000E = (byte[]) null;
        }
      }
    }
    return str2;
label_4:
    num3 = num2;
    goto label_2;
label_3:
    num1 = 2062399820;
    goto label_1;
  }

  private static AssemblyName \u0002(Assembly _param0)
  {
    AssemblyName assemblyName1;
    try
    {
      AssemblyName name = _param0.GetName();
      if (true)
        assemblyName1 = name;
    }
    catch
    {
      AssemblyName assemblyName2 = new AssemblyName(_param0.FullName);
      if (true)
        assemblyName1 = assemblyName2;
    }
    return assemblyName1;
  }

  private static byte[] \u0002(AssemblyName _param0)
  {
    byte[] publicKeyToken = _param0.GetPublicKeyToken();
    if (true)
      goto label_2;
label_1:
    byte[] numArray;
    if (numArray != null && numArray.Length == 0)
    {
      if (true)
        numArray = (byte[]) null;
    }
    return numArray;
label_2:
    numArray = publicKeyToken;
    goto label_1;
  }

  private static void \u0002(byte[] _param0, int _param1, byte[] _param2)
  {
    if (true)
      goto label_4;
label_1:
    if (true)
      goto label_5;
label_2:
    if (true)
      goto label_6;
label_3:
    int length = _param2.Length;
label_16:
    int num1;
    int num2;
    int num3;
    while (num1 < length)
    {
      if ((num3 <<= 1) == 256)
      {
        num3 = 1;
        num2 = (int) _param0[_param1++];
      }
      if ((num2 & num3) != 0)
      {
        int num4 = ((int) _param0[_param1] >> 2) + 3;
        int num5 = ((int) _param0[_param1] << 8 | (int) _param0[_param1 + 1]) & 1023;
        _param1 += 2;
        int num6 = num1 - num5;
        if (num6 < 0)
          break;
        while (true)
        {
          if (--num4 >= 0 && num1 < length)
            _param2[num1++] = _param2[num6++];
          else
            goto label_16;
        }
      }
      else
        _param2[num1++] = _param0[_param1++];
    }
    return;
label_6:
    num3 = 128;
    goto label_3;
label_5:
    num2 = 0;
    goto label_2;
label_4:
    num1 = 0;
    goto label_1;
  }

  private enum \u0002
  {
  }

  private sealed class \u0003
  {
    private Stream \u0002;
    private byte[] \u0003;

    public \u0003(Stream _param1)
    {
      Stream stream = _param1;
      if (true)
        goto label_3;
label_1:
      byte[] numArray = new byte[4];
      if (false)
        return;
      this.\u0003 = numArray;
      return;
label_3:
      this.\u0002 = stream;
      goto label_1;
    }

    public Stream \u0002()
    {
      if (true)
        ;
      return this.\u0002;
    }

    public short \u0002()
    {
      if (true)
        goto label_2;
label_1:
      return (short) ((int) this.\u0003[0] | (int) this.\u0003[1] << 8);
label_2:
      this.\u0002(2);
      goto label_1;
    }

    public int \u0002()
    {
      if (true)
        goto label_2;
label_1:
      return (int) this.\u0003[0] | (int) this.\u0003[1] << 8 | (int) this.\u0003[2] << 16 | (int) this.\u0003[3] << 24;
label_2:
      this.\u0002(4);
      goto label_1;
    }

    private static void \u0002() => throw new EndOfStreamException();

    private void \u0002(int _param1)
    {
      if (true)
        goto label_3;
label_1:
      if (true)
        goto label_4;
label_2:
      int offset;
      int num1;
      if (_param1 == 1)
      {
        int num2 = this.\u0002.ReadByte();
        if (true)
          goto label_8;
label_6:
        if (num1 == -1)
          \u0008\u2008\u2000.\u0003.\u0002();
        this.\u0003[0] = (byte) num1;
        return;
label_8:
        num1 = num2;
        goto label_6;
      }
      else
      {
        do
        {
          int num3 = this.\u0002.Read(this.\u0003, offset, _param1 - offset);
          if (num3 == 0)
            \u0008\u2008\u2000.\u0003.\u0002();
          offset += num3;
        }
        while (offset < _param1);
        return;
      }
label_4:
      num1 = 0;
      goto label_2;
label_3:
      offset = 0;
      goto label_1;
    }

    public void \u0002()
    {
      Stream stream1 = this.\u0002;
      if (true)
        goto label_3;
label_1:
      if (true)
        goto label_4;
label_2:
      Stream stream2;
      stream2?.Close();
      if (false)
        return;
      this.\u0003 = (byte[]) null;
      return;
label_4:
      this.\u0002 = (Stream) null;
      goto label_2;
label_3:
      stream2 = stream1;
      goto label_1;
    }

    public byte[] \u0002(int _param1)
    {
      byte[] numArray1 = _param1 >= 0 ? new byte[_param1] : throw new ArgumentOutOfRangeException();
      if (true)
        goto label_4;
label_3:
      int length;
      if (true)
        length = 0;
      byte[] numArray2;
      do
      {
        int num1 = this.\u0002.Read(numArray2, length, _param1);
        if (true)
          goto label_8;
label_7:
        int num2;
        if (num2 != 0)
        {
          length += num2;
          _param1 -= num2;
          continue;
        }
        break;
label_8:
        num2 = num1;
        goto label_7;
      }
      while (_param1 > 0);
      if (length != numArray2.Length)
      {
        byte[] dst = new byte[length];
        Buffer.BlockCopy((Array) numArray2, 0, (Array) dst, 0, length);
        numArray2 = dst;
      }
      return numArray2;
label_4:
      numArray2 = numArray1;
      goto label_3;
    }
  }
}
