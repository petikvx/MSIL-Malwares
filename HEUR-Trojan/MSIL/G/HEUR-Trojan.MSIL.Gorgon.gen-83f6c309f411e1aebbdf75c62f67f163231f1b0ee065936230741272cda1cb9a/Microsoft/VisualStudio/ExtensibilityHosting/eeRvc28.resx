<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MEFStatus_Composing" xml:space="preserve">
    <value>Composing MEF graph...</value>
  </data>
  <data name="MEFStatus_ScanningAssemblies" xml:space="preserve">
    <value>Scanning new and updated MEF components...</value>
  </data>
  <data name="UnableToBuildCatalogCache" xml:space="preserve">
    <value>Unable to build catalog cache.</value>
  </data>
  <data name="ScopeCircularReference" xml:space="preserve">
    <value>The specified scope identifier introduces a circular reference.</value>
  </data>
  <data name="CatalogNameCannotBeEmpty" xml:space="preserve">
    <value>'catalogName' argument cannot be an empty string.</value>
  </data>
  <data name="UnrecognizedPart" xml:space="preserve">
    <value>Unrecognized part detected when attempting to generate scope. Caching scopes with parts not specified in full catalog is not supported.</value>
  </data>
  <data name="AssembliesWithSameFullName" xml:space="preserve">
    <value>Assembly '{0}' and assembly '{1}' have the same full assembly name '{2}'</value>
  </data>
  <data name="CacheFileTooBig" xml:space="preserve">
    <value>The cache file is too big and therefore it is ignored.</value>
  </data>
  <data name="MEFStatus_WritingCache" xml:space="preserve">
    <value>Writing component cache...</value>
  </data>
  <data name="CatalogAlreadyLoaded" xml:space="preserve">
    <value>The catalog has already been loaded.</value>
  </data>
  <data name="InvalidUseOfLoadFromCache" xml:space="preserve">
    <value>InitializeFromCache can only be called on the catalog that was created from the cache.</value>
  </data>
  <data name="IContractNameProviderIsNotImplemented" xml:space="preserve">
    <value>The provided ExportProvider object does not meet requirements.  It must implement the IContractNameProvider interface.</value>
  </data>
  <data name="MEFStatus_ReadingCache" xml:space="preserve">
    <value>Reading component cache...</value>
  </data>
  <data name="CalledByNotMsAssembly" xml:space="preserve">
    <value>Only Microsoft assemblies can call this method.</value>
  </data>
  <data name="CorruptedCatalogCacheFile" xml:space="preserve">
    <value>The catalog cache file is corrupted:</value>
  </data>
  <data name="ErrorOccuredLoadingAssemblyCache" xml:space="preserve">
    <value>An error occured while loading assembly cache from the cache file:</value>
  </data>
  <data name="UnsupportedValueType" xml:space="preserve">
    <value>Unsupported value type {0} is detected while writing out the catalog cache.</value>
  </data>
  <data name="MEFCacheException" xml:space="preserve">
    <value>The Visual Studio component cache is out of date (assembly: {0}). Please restart Visual Studio.</value>
  </data>
  <data name="NullComponentContainerList" xml:space="preserve">
    <value>Component container list is null.</value>
  </data>
  <data name="TurningAssemblyCacheOff" xml:space="preserve">
    <value>Temporary turn off caching for this assembly for the current session of the application</value>
  </data>
  <data name="CatalogCacheFileIsNotUpToDate" xml:space="preserve">
    <value>The catalog cache file is not up-to-date and has to be regenerated:</value>
  </data>
  <data name="CompositionContainerDoesNotExist" xml:space="preserve">
    <value>The specified composition container does not exist.</value>
  </data>
  <data name="FailedToWriteCatalogCacheFile" xml:space="preserve">
    <value>Failure occured while writing MEF catalog cache file.</value>
  </data>
  <data name="ComponentAssemblyDoesntExist" xml:space="preserve">
    <value>The component assembly doesn't exist:</value>
  </data>
  <data name="GetScopeInvalidArgument" xml:space="preserve">
    <value>Invalid catalog passed to GetScopedCachedCatalog. Only catalogs created using VsCatalogProvider are supported.</value>
  </data>
</root>