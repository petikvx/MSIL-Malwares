// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.Fleet
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

namespace FannyHeirdooBot
{
  public class Fleet
  {
    public Fleet(
      int owner,
      int numShips,
      Planet sourcePlanet,
      Planet destinationPlanet,
      int totalTripLength,
      int turnsRemaining)
    {
      this.Owner = owner;
      this.NumShips = numShips;
      this.SourcePlanet = sourcePlanet;
      if (sourcePlanet != null)
        this.SourcePlanetId = sourcePlanet.PlanetID;
      this.DestinationPlanet = destinationPlanet;
      this.TotalTripLength = totalTripLength;
      this.TurnsRemaining = turnsRemaining;
      this.IsMine = owner == 1;
      if (destinationPlanet == null)
        return;
      this.DestinationPlanetId = destinationPlanet.PlanetID;
      destinationPlanet.AddArmada(this);
      if (owner != 1 && destinationPlanet.Owner != this.Owner)
        destinationPlanet.IsUnderAttack = true;
    }

    public void AddShips(int amount)
    {
label_1:
      int num1 = -318752339;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2056772362)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.NumShips += amount;
            num1 = (int) num2 * 1179929988 ^ 898925958;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void RemoveShips(int amount)
    {
label_1:
      int num1 = -1333450147;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -395246702)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.NumShips -= amount;
            num1 = (int) num2 * 1026739613 ^ 65935551;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public int Owner { get; private set; }

    public int NumShips { get; private set; }

    public int TotalTripLength { get; private set; }

    public int TurnsRemaining { get; private set; }

    public bool IsMine { get; private set; }

    public int SourcePlanetId { get; private set; }

    public int DestinationPlanetId { get; private set; }

    public Planet SourcePlanet { get; private set; }

    public Planet DestinationPlanet { get; private set; }

    public void TimeStep()
    {
label_1:
      int num1 = 1804261201;
      int num2;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1114146020)) % 13U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num3 * 1865726379 ^ -92310361;
            continue;
          case 2:
            num1 = (int) num3 * 1344538869 ^ 83161490;
            continue;
          case 3:
            int num4 = flag ? 517580836 : (num4 = 308372579);
            num1 = num4 ^ (int) num3 * 983699292;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = 1399128599;
            continue;
          case 6:
            num1 = (int) num3 * -1577838241 ^ -1697775093;
            continue;
          case 7:
            num1 = (int) num3 * 83660227 ^ -1087211270;
            continue;
          case 8:
            num1 = (int) num3 * -1359037435 ^ -1618233649;
            continue;
          case 9:
            flag = this.TurnsRemaining > 0;
            num1 = (int) num3 * -1972526182 ^ -860562562;
            continue;
          case 10:
            this.TurnsRemaining = 0;
            num1 = (int) num3 * -1131765068 ^ -1074190286;
            continue;
          case 11:
            num2 = this.TurnsRemaining - 1;
            num1 = (int) num3 * -516381057 ^ 4979281;
            continue;
          case 12:
            this.TurnsRemaining = num2;
            num1 = (int) num3 * -2050903010 ^ -643026713;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }
  }
}
