// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.Encryption
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using SmartAssembly.Delegates;
using System;
using System.IO;
using System.Security.Cryptography;

namespace SmartAssembly.SmartExceptionsCore
{
  internal sealed class Encryption
  {
    public static string ExceptionMessage;
    [NonSerialized]
    internal static GetString \u001E;

    public static byte[] Encrypt(byte[] data, string xmlPublicKey)
    {
      if (xmlPublicKey.StartsWith(Encryption.\u001E(401)))
      {
        Encryption.ExceptionMessage = Encryption.\u001E(406);
        return (byte[]) null;
      }
      RijndaelManaged rijndaelManaged = (RijndaelManaged) null;
      RSACryptoServiceProvider cryptoServiceProvider = (RSACryptoServiceProvider) null;
      MemoryStream memoryStream = (MemoryStream) null;
      CryptoStream cryptoStream = (CryptoStream) null;
      try
      {
        rijndaelManaged = new RijndaelManaged();
        cryptoServiceProvider = new RSACryptoServiceProvider();
        cryptoServiceProvider.FromXmlString(xmlPublicKey);
        rijndaelManaged.GenerateKey();
        byte[] numArray1;
        if (true)
        {
          rijndaelManaged.GenerateIV();
          numArray1 = new byte[48];
          Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray1, 0, 32);
        }
        Buffer.BlockCopy((Array) rijndaelManaged.IV, 0, (Array) numArray1, 32, 16);
        do
        {
          memoryStream = new MemoryStream();
          try
          {
            byte[] buffer = cryptoServiceProvider.Encrypt(numArray1, false);
            memoryStream.WriteByte((byte) 1);
            memoryStream.WriteByte(Convert.ToByte(buffer.Length / 8));
            memoryStream.Write(buffer, 0, buffer.Length);
          }
          catch (CryptographicException ex1)
          {
            try
            {
              byte[] numArray2 = new byte[16];
              byte[] numArray3 = new byte[16];
              Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray2, 0, 16);
              Buffer.BlockCopy((Array) rijndaelManaged.Key, 16, (Array) numArray3, 0, 16);
              byte[] buffer1;
              do
              {
                byte[] buffer2 = cryptoServiceProvider.Encrypt(numArray2, false);
                byte[] buffer3;
                if (true)
                {
                  if (true)
                    buffer3 = cryptoServiceProvider.Encrypt(numArray3, false);
                  buffer1 = cryptoServiceProvider.Encrypt(rijndaelManaged.IV, false);
                }
                memoryStream.WriteByte((byte) 2);
                memoryStream.WriteByte(Convert.ToByte(buffer2.Length / 8));
                memoryStream.Write(buffer2, 0, buffer2.Length);
                memoryStream.Write(buffer3, 0, buffer3.Length);
              }
              while (false);
              memoryStream.Write(buffer1, 0, buffer1.Length);
            }
            catch (CryptographicException ex2)
            {
              Encryption.ExceptionMessage = Encryption.\u001E(499);
              return (byte[]) null;
            }
          }
        }
        while (false);
        cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
        cryptoStream.Write(data, 0, data.Length);
        cryptoStream.FlushFinalBlock();
        return memoryStream.ToArray();
      }
      catch (Exception ex)
      {
        Encryption.ExceptionMessage = Encryption.\u001E(705) + ex.Message;
        return (byte[]) null;
      }
      finally
      {
        rijndaelManaged?.Clear();
        cryptoServiceProvider?.Clear();
        memoryStream?.Close();
        cryptoStream?.Close();
      }
    }

    static Encryption() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (Encryption));
  }
}
