// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: fC, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2BFFC2A0-BEF7-47FD-8B55-B5339EE53E65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-a1558391914f4235dfdcdddcdf0de915a800541a4271feb4aff34af82b83a935.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
        string move = Notation.\u200C⁬‌​‬‍⁫⁮​‎‍‫‫‎‮‭‪‬‍‏‫‮⁮⁫⁫‭⁫⁮‬​‭‎‎‪⁮⁬‫⁫⁬‎‮(this.from.CurrentSquare, \u003CModule\u003E.\u200E‍⁭‏‍⁬‌⁪‏‏⁯‎‭‫⁫⁪‏‮⁪‪‪‎​⁯‭‪‪‪‫⁪‫⁭‮‮‌‪⁮‎⁯⁭‮<string>(4031819747U), this.to.CurrentSquare);
label_1:
        int num1 = 904032686;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1581688926)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 1073721856 ^ -983523098;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = 1965361676;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1851689789)) % 8U)
        {
          case 0:
            square1 = new Square(t.File, t.Rank, bo);
            num1 = (int) num2 * 1737334838 ^ -1104770824;
            continue;
          case 1:
            square2 = new Square(f.File, f.Rank, bo);
            num1 = (int) num2 * -880861250 ^ 1100114411;
            continue;
          case 2:
            square1.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * 208893727 ^ -1605176780;
            continue;
          case 4:
            goto label_1;
          case 5:
            square2.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * -1790313120 ^ 1862373327;
            continue;
          case 6:
            this.from = square2;
            num1 = (int) num2 * -817799000 ^ 2060887438;
            continue;
          case 7:
            num1 = (int) num2 * -1632783296 ^ 1520623787;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      this.to = square1;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1236306282;
      string move;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1962230401)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            move = this.Move;
            num1 = (int) num2 * -1303578844 ^ 1502234666;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return move;
    }

    static string \u200C⁬‌​‬‍⁫⁮​‎‍‫‫‎‮‭‪‬‍‏‫‮⁮⁫⁫‭⁫⁮‬​‭‎‎‪⁮⁬‫⁫⁬‎‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
