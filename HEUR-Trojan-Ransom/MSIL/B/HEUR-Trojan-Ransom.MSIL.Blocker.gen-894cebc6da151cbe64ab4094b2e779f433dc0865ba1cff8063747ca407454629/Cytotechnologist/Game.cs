// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: CriticalHand, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 8F3AACC8-AAA3-4E3C-B88D-04522F6F341D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-894cebc6da151cbe64ab4094b2e779f433dc0865ba1cff8063747ca407454629.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 1792201575;
      int aIndex;
      JSONNode jsonNode;
      bool flag;
      int count;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 484720849)) % 17U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            aIndex = 0;
            num1 = (int) num2 * -597094286 ^ 1458295694;
            continue;
          case 3:
            this._dice = new Dice();
            num1 = (int) num2 * 561899105 ^ 239335588;
            continue;
          case 4:
            this._playerStates[index] = new PlayerState();
            num1 = 1572944844;
            continue;
          case 5:
            jsonNode = json["players"];
            count = jsonNode.Count;
            this.Players = new Player[count];
            num1 = (int) num2 * -916962364 ^ 2037242215;
            continue;
          case 6:
            flag = aIndex < count;
            num1 = 1559518347;
            continue;
          case 7:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 1371225029 ^ 580084955;
            continue;
          case 8:
            num1 = (int) num2 * 1469430244 ^ -333535352;
            continue;
          case 9:
            num1 = (int) num2 * 1934897116 ^ 531430269;
            continue;
          case 10:
            this._buffer = buffer;
            this._random = Game.\u200E⁬⁮⁭⁭‭‫⁭‮‬​‮‪​‭‪​‌‏⁪⁫⁭‬‬‮‬‮‪‭‏‪⁭⁬⁪‌‌‎‪‏‏‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * -1620668617 ^ -1587404445;
            continue;
          case 11:
            int num3 = flag ? -1233732260 : (num3 = -2110036794);
            num1 = num3 ^ (int) num2 * 951637912;
            continue;
          case 12:
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -1142879314 ^ 1429247057;
            continue;
          case 13:
            int num4;
            num1 = num4 = index >= count ? 569635904 : (num4 = 671851126);
            continue;
          case 14:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = 1724742089;
            continue;
          case 15:
            num1 = (int) num2 * -2093408450 ^ 1621859585;
            continue;
          case 16:
            ++index;
            num1 = (int) num2 * -1546124323 ^ 231091345;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -1137023675;
        bool finished2;
        int index;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -998200398)) % 15U)
          {
            case 0:
              num1 = -1174761931;
              continue;
            case 1:
              num1 = (int) num2 * 2043476236 ^ 25387916;
              continue;
            case 2:
              index = 0;
              num1 = (int) num2 * 2146085800 ^ -1017954726;
              continue;
            case 3:
              goto label_1;
            case 5:
              finished2 = false;
              num1 = (int) num2 * 10415803 ^ -1925242204;
              continue;
            case 6:
              num1 = (int) num2 * -2024100141 ^ 1083421579;
              continue;
            case 7:
              int num3;
              num1 = num3 = playerStates[index].State == State.Playing ? -1222465674 : (num3 = -1043647240);
              continue;
            case 8:
              finished2 = true;
              num1 = (int) num2 * 994364999 ^ 490234768;
              continue;
            case 9:
              int num4 = finished1 ? 222588609 : (num4 = 1487382731);
              num1 = num4 ^ (int) num2 * -845619691;
              continue;
            case 10:
              int num5;
              num1 = num5 = index >= playerStates.Length ? -1578856549 : (num5 = -716845559);
              continue;
            case 11:
              finished2 = true;
              num1 = (int) num2 * 122524974 ^ 158937492;
              continue;
            case 12:
              num1 = (int) num2 * 1568427800 ^ -1362546292;
              continue;
            case 13:
              ++index;
              num1 = -638627173;
              continue;
            case 14:
              playerStates = this._playerStates;
              num1 = (int) num2 * -2135767960 ^ -2101475083;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -113960023;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1862938613)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -49089134 ^ -43585501;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = -1463055599;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1890033286)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 168404860 ^ 2112684855;
            continue;
          case 1:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1238928621 ^ 1184994024;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * -463842910 ^ 1353848660;
            continue;
          case 4:
            this.Losers.Clear();
            num1 = (int) num2 * -771829877 ^ -615168345;
            continue;
          case 5:
            this.Winners.Clear();
            num1 = (int) num2 * -1188940446 ^ -1735514124;
            continue;
          case 6:
            goto label_1;
          case 7:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * -1509125230 ^ -1405177090;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      this._currentChanceIndex = -1;
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -1201599467;
      bool flag1;
      int num2;
      int planningCardsCount;
      bool flag2;
      PlayerState playerState;
      int index;
      Player player;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1700609941)) % 27U)
        {
          case 0:
            num1 = -862074485;
            continue;
          case 1:
            index = 0;
            num1 = (int) num3 * 2132729990 ^ 370913841;
            continue;
          case 2:
            num1 = -1938222543;
            continue;
          case 3:
            int num4 = !flag2 ? 2055051203 : (num4 = 1568062391);
            num1 = num4 ^ (int) num3 * -584581616;
            continue;
          case 4:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 1835217503 ^ -2060834350;
            continue;
          case 5:
            playerState.Sprint = 1;
            num1 = (int) num3 * -46211734 ^ 727420614;
            continue;
          case 6:
            playerState.Sprint = 0;
            num1 = (int) num3 * 313786134 ^ 1271670351;
            continue;
          case 7:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = -764787844;
            continue;
          case 8:
            int num5 = !morePlanningSprint ? 1515334871 : (num5 = 1343641403);
            num1 = num5 ^ (int) num3 * 1175194298;
            continue;
          case 9:
            num2 = 0;
            num1 = -195105822;
            continue;
          case 10:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * -2035365425 ^ -1150805776;
            continue;
          case 11:
            num1 = (int) num3 * -2023831480 ^ -1125353823;
            continue;
          case 12:
            int num6;
            num1 = num6 = index < this.Players.Length ? -30372015 : (num6 = -1592206886);
            continue;
          case 13:
            playerState.Sprint = -1;
            num1 = (int) num3 * 1750042708 ^ 1745709280;
            continue;
          case 14:
            num1 = (int) num3 * 1373832087 ^ -1531749450;
            continue;
          case 15:
            num2 = 0;
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 1699756088 ^ -562397325;
            continue;
          case 16:
            goto label_1;
          case 17:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * 1837067983 ^ 21148123;
            continue;
          case 18:
            goto label_3;
          case 19:
            num1 = (int) num3 * -1607086952 ^ 1890586274;
            continue;
          case 20:
            flag1 = num2 > 0;
            num1 = -1210773715;
            continue;
          case 21:
            int num7 = !flag1 ? -1426005019 : (num7 = -80782289);
            num1 = num7 ^ (int) num3 * 506959103;
            continue;
          case 22:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1816488530 ^ -1119261051;
            continue;
          case 23:
            num1 = -1129851831;
            continue;
          case 24:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -378931906 ^ 1011531417;
            continue;
          case 25:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1578808421 ^ 733182609;
            continue;
          case 26:
            num1 = (int) num3 * 1658784946 ^ -1648761472;
            continue;
          default:
            goto label_29;
        }
      }
label_3:
      return;
label_29:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      bool flag1 = this._currentPlayer >= this.Players.Length;
label_1:
      int num1 = -1362151737;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1686972604)) % 12U)
        {
          case 0:
            int num3 = !flag2 ? 1304159361 : (num3 = 1813706138);
            num1 = num3 ^ (int) num2 * -683659045;
            continue;
          case 1:
            this.Print((object) Game.\u200C‫‮‬⁪⁯​‍‎​‪‭⁫⁫‫‏‫‪⁭‫⁬‫⁬⁬⁮⁭‎‌‍‌‭‏‌‬‬‬⁮⁬⁪‫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = -893380518;
            continue;
          case 2:
            this._currentPlayer = 0;
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * 1502971360 ^ -1098671548;
            continue;
          case 3:
            num1 = (int) num2 * 1383025804 ^ -933881415;
            continue;
          case 4:
            this.PlayerTurn(this._currentPlayer);
            num1 = -176245645;
            continue;
          case 5:
            num1 = (int) num2 * -1351690103 ^ 1263368155;
            continue;
          case 6:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -2126960669 ^ -980184869;
            continue;
          case 7:
            int num4 = !flag1 ? -1906929417 : (num4 = -1728011766);
            num1 = num4 ^ (int) num2 * -1928540579;
            continue;
          case 8:
            goto label_1;
          case 9:
            goto label_3;
          case 10:
            this.Print((object) Game.\u202D‫⁮⁭‎‭‫‫‍‮⁮⁯⁯‪‮‫‫​‍‮‏‍‬‪‎⁪‌​⁬⁭⁭⁫‪​⁪⁮‮​‎‬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1076319016 ^ 827743067;
            continue;
          case 11:
            num1 = (int) num2 * 235517349 ^ -553014357;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 930787781;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        int index;
        Card card;
        bool flag3;
        int num3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        PlayerState playerState2;
        bool flag8;
        int num4;
        bool flag9;
        bool onlyOneWinner;
        bool flag10;
        bool flag11;
        int num5;
        Player player;
        bool flag12;
        bool flag13;
        int num6;
        switch ((num2 = (uint) (num1 ^ 697435027)) % 87U)
        {
          case 0:
            this.Losers.Add(num4);
            num1 = (int) num2 * -634186894 ^ -1767908369;
            continue;
          case 1:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1496238085 ^ -590793980;
            continue;
          case 2:
            flag7 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 268224679;
            continue;
          case 3:
            flag1 = false;
            num1 = 1605818777;
            continue;
          case 4:
            flag12 = !flag4;
            num1 = (int) num2 * -1097961831 ^ -1180536910;
            continue;
          case 5:
            int num7 = flag5 ? 207309552 : (num7 = 290932068);
            num1 = num7 ^ (int) num2 * -1537951685;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -283069529 ^ -257083267;
            continue;
          case 8:
            int num8 = flag10 ? 1021468495 : (num8 = 233266194);
            num1 = num8 ^ (int) num2 * -1097566895;
            continue;
          case 9:
            flag8 = playerState2.Resources >= 0;
            num1 = (int) num2 * -497868366 ^ 2016174931;
            continue;
          case 10:
            ++index;
            num1 = 1052442393;
            continue;
          case 11:
            flag9 = num4 == playerIndex;
            num1 = 7831806;
            continue;
          case 12:
            num1 = (int) num2 * -218739534 ^ 806150935;
            continue;
          case 13:
            num1 = (int) num2 * 405050726 ^ -1802520861;
            continue;
          case 14:
            num1 = (int) num2 * -323342604 ^ 920051368;
            continue;
          case 15:
            num1 = 2013407736;
            continue;
          case 16:
            num1 = (int) num2 * 1948514239 ^ 64355383;
            continue;
          case 17:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1806297056 ^ -571202376;
            continue;
          case 18:
            flag13 = !this.Losers.Contains(num4);
            num1 = 290554989;
            continue;
          case 19:
            this.Losers.Add(index);
            num1 = (int) num2 * -449818269 ^ 1412293138;
            continue;
          case 20:
            ++num4;
            num1 = 40302909;
            continue;
          case 21:
            flag1 = true;
            num1 = (int) num2 * -574655141 ^ 465967698;
            continue;
          case 22:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag3 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u202C‍‪​⁪⁮‎​‍⁫‍​⁪‬⁯‍‍‫⁯‮‎⁯⁪‬​⁮‍‭‪‏⁯‍​⁯‭⁬⁮​⁬‏‮(num3), flag1 ? (object) "advance" : (object) "stay");
            num1 = 831356295;
            continue;
          case 23:
            num1 = (int) num2 * -628055601 ^ -1901370635;
            continue;
          case 24:
            num1 = (int) num2 * 1595856418 ^ -20258156;
            continue;
          case 25:
            int num9 = flag6 ? 431392648 : (num9 = 789634303);
            num1 = num9 ^ (int) num2 * -1559081957;
            continue;
          case 26:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 27:
            num1 = (int) num2 * -999175710 ^ -750550071;
            continue;
          case 28:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 1388258475 ^ -1376973763;
            continue;
          case 29:
            card = this.DrawCard();
            flag4 = card.Impact < 0;
            num1 = 82507640;
            continue;
          case 30:
            num1 = (int) num2 * 1052362157 ^ 2122515222;
            continue;
          case 31:
            int num10 = flag2 ? -743672825 : (num10 = -372892552);
            num1 = num10 ^ (int) num2 * -1072095608;
            continue;
          case 32:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -536062357 ^ 773324264;
            continue;
          case 33:
            ++playerState1.Sprint;
            num1 = (int) num2 * -157240389 ^ 171570427;
            continue;
          case 34:
            num1 = 3516247;
            continue;
          case 35:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -209144052 ^ -64262736;
            continue;
          case 36:
            flag6 = !flag3;
            num1 = (int) num2 * 1964490213 ^ 586128167;
            continue;
          case 37:
            num1 = (int) num2 * -1083741661 ^ -1714225572;
            continue;
          case 38:
            this._finished = true;
            num1 = (int) num2 * 830034607 ^ 2038822740;
            continue;
          case 39:
            playerState2.State = State.Lose;
            num1 = 1374180062;
            continue;
          case 40:
            flag2 = flag1;
            num1 = 1807153238;
            continue;
          case 41:
            flag11 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 2004039227;
            continue;
          case 42:
            int num11 = flag11 ? -1531977056 : (num11 = -115257016);
            num1 = num11 ^ (int) num2 * 1334055983;
            continue;
          case 43:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * -593614600 ^ -579881968;
            continue;
          case 44:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * 1251866704 ^ -286953855;
            continue;
          case 45:
            goto label_3;
          case 46:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1722225924 ^ -713525264;
            continue;
          case 47:
            num4 = 0;
            num1 = (int) num2 * 1134460970 ^ -1410076804;
            continue;
          case 48:
            int num12;
            num1 = num12 = index < this._playerStates.Length ? 465833129 : (num12 = 1412303661);
            continue;
          case 49:
            int num13 = this.Losers.Contains(playerIndex) ? -184553717 : (num13 = -2005511140);
            num1 = num13 ^ (int) num2 * 1411709729;
            continue;
          case 50:
            num1 = 301729626;
            continue;
          case 51:
            num3 = Game.\u200B‎‭‏‍‭​‬⁪‬⁫⁫⁫⁮‪⁬‍‬‮⁮‏⁪​⁪​‫‫⁭‬‍⁫‫‭‭‌‭‬‪‫⁬‮(0, num5);
            num1 = (int) num2 * -1195670989 ^ -391915134;
            continue;
          case 52:
            num1 = 1278738595;
            continue;
          case 53:
            num1 = (int) num2 * -892883325 ^ -1594649410;
            continue;
          case 54:
            int num14 = flag9 ? 1832380750 : (num14 = 630015527);
            num1 = num14 ^ (int) num2 * -1687489474;
            continue;
          case 55:
            num1 = 2131273872;
            continue;
          case 56:
            num1 = (int) num2 * 248803886 ^ -1424867256;
            continue;
          case 57:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -706068197 ^ 935705643;
            continue;
          case 58:
            this.Print((object) Game.\u202D‫⁮⁭‎‭‫‫‍‮⁮⁯⁯‪‮‫‫​‍‮‏‍‬‪‎⁪‌​⁬⁭⁭⁫‪​⁪⁮‮​‎‬‮("\nPLAYER ", playerIndex.ToString()));
            flag5 = playerState1.State != 0;
            num1 = (int) num2 * -1898794261 ^ -1227451332;
            continue;
          case 59:
            playerState2 = this._playerStates[index];
            num1 = 576110772;
            continue;
          case 60:
            int num15;
            num1 = num15 = playerState1.Sprint >= 0 ? 1963305914 : (num15 = 693932314);
            continue;
          case 61:
            int num16 = flag12 ? 815363291 : (num16 = 65047217);
            num1 = num16 ^ (int) num2 * 1890837420;
            continue;
          case 62:
            num1 = (int) num2 * 1837820387 ^ 826378635;
            continue;
          case 63:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 486098518 ^ 612875050;
            continue;
          case 64:
            int num17 = !flag13 ? 230901337 : (num17 = 47792228);
            num1 = num17 ^ (int) num2 * 1954685012;
            continue;
          case 65:
            int num18 = !onlyOneWinner ? 2064806127 : (num18 = 842045600);
            num1 = num18 ^ (int) num2 * -547095335;
            continue;
          case 66:
            playerState2.Resources -= Game.\u200B‎‭‏‍‭​‬⁪‬⁫⁫⁫⁮‪⁬‍‬‮⁮‏⁪​⁪​‫‫⁭‬‍⁫‫‭‭‌‭‬‪‫⁬‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -242606469 ^ -1089206933;
            continue;
          case 67:
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 261610784 ^ -1638167904;
            continue;
          case 68:
            num1 = (int) num2 * -1857852106 ^ 100561384;
            continue;
          case 69:
            playerState1.Resources -= num3;
            int num19 = playerState1.Resources >= 0 ? -2138298791 : (num19 = -21157780);
            num1 = num19 ^ (int) num2 * 1487113152;
            continue;
          case 70:
            num1 = (int) num2 * 1112755059 ^ 125775197;
            continue;
          case 71:
            index = 0;
            num1 = (int) num2 * -1265202471 ^ -830906966;
            continue;
          case 72:
            num1 = (int) num2 * -1547359037 ^ 799212860;
            continue;
          case 73:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 2106730398 ^ -1398695361;
            continue;
          case 74:
            num1 = (int) num2 * -1719905077 ^ -1759943516;
            continue;
          case 75:
            num1 = (int) num2 * 289687120 ^ 1124194274;
            continue;
          case 76:
            flag10 = !this.Losers.Contains(index);
            num1 = (int) num2 * 142148951 ^ 873273048;
            continue;
          case 77:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -1282155530 ^ -666096085;
            continue;
          case 78:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202D‫⁮⁭‎‭‫‫‍‮⁮⁯⁯‪‮‫‫​‍‮‏‍‬‪‎⁪‌​⁬⁭⁭⁫‪​⁪⁮‮​‎‬‮("\t", playerState3 != null ? Game.\u206A⁯‫‏⁮⁫‌⁪⁬‭⁪⁬⁪‍⁪⁬‏⁯‍‏⁫⁬⁫⁯⁮‏⁭‭‭‫⁪​‪⁮​‎‍‍‬‪‮((object) playerState3) : (string) null));
            num1 = 1651125620;
            continue;
          case 79:
            num1 = 989196946;
            continue;
          case 80:
            flag1 = true;
            num3 = card.Impact;
            num1 = (int) num2 * -318623938 ^ 1826695229;
            continue;
          case 81:
            int num20 = !flag8 ? -1687042626 : (num20 = -521234980);
            num1 = num20 ^ (int) num2 * 154877481;
            continue;
          case 82:
            int num21 = !flag7 ? 378146615 : (num21 = 927402758);
            num1 = num21 ^ (int) num2 * 1979270625;
            continue;
          case 83:
            num1 = (int) num2 * -762438756 ^ 1155036535;
            continue;
          case 84:
            int num22;
            num1 = num22 = num4 < this._playerStates.Length ? 694115916 : (num22 = 1567358728);
            continue;
          case 85:
            num1 = 204525281;
            continue;
          case 86:
            num1 = (int) num2 * -1266133229 ^ 836212037;
            continue;
          default:
            goto label_92;
        }
        flag3 = num6 != 0;
        num1 = 1511799845;
      }
label_3:
      return;
label_92:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1141246413;
      Card card1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -826799915)) % 7U)
        {
          case 1:
            num1 = (int) num2 * 2068067095 ^ -1493205120;
            continue;
          case 2:
            int num3 = this._deck.Count <= 0 ? -1963634904 : (num3 = -2505800);
            num1 = num3 ^ (int) num2 * 1849807433;
            continue;
          case 3:
            num1 = (int) num2 * -1806349021 ^ 497554241;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -1793145344 ^ -787545712;
            continue;
          case 5:
            Card card2 = this._deck[0];
            this._deck.RemoveAt(0);
            card1 = card2;
            num1 = -1062057370;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return card1;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 1347123044;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1291686447)) % 7U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206A⁯‫‏⁮⁫‌⁪⁬‭⁪⁬⁪‍⁪⁬‏⁯‍‏⁫⁬⁫⁯⁮‏⁭‭‭‫⁪​‪⁮​‎‍‍‬‪‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200D⁪‮⁯⁯​⁭‍⁬‪‎‫⁪⁪‍‫‪‏⁮⁯‍⁯⁮‌⁭⁪‌⁭‌‮‏⁭⁪⁪‪‪‫⁮‬‍‮(strArray);
            ++index;
            num1 = 407932761;
            continue;
          case 2:
            num1 = (int) num2 * 783319973 ^ -1230174167;
            continue;
          case 3:
            goto label_1;
          case 4:
            str1 = "";
            index = 0;
            num1 = (int) num2 * 2106045236 ^ 608868515;
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * -201879831 ^ -1399371232;
            continue;
          case 6:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? 1386493225 : (num3 = 161118136);
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = 1029230205;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1891102124)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -963988219 ^ -43550240;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -782905437;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1693299766)) % 3U)
        {
          case 1:
            str = Game.\u202B⁪‌⁫⁮‮⁭‎⁭⁬‏‬​‭‭​⁯‫⁭‮‏⁯‪⁯‮⁮‬⁪​​‪⁮‏‎⁫​‪⁭​⁫‮(Game.\u206A⁯‫‏⁮⁫‌⁪⁬‭⁪⁬⁪‍⁪⁬‏⁯‍‏⁫⁬⁫⁯⁮‏⁭‭‭‫⁪​‪⁮​‎‍‍‬‪‮(text), more);
            num1 = (int) num2 * 1780574417 ^ -1401091220;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      Game.\u200B‬‌⁭⁮‪⁪⁯‌‪⁮‌‌‬‎‫‫​‎‌‏⁮‫⁪⁬‭⁪⁭⁬⁮⁮‍‬‮​‭‫‫‌‍‮(this._buffer, str);
    }

    static Random \u200E⁬⁮⁭⁭‭‫⁭‮‬​‮‪​‭‪​‌‏⁪⁫⁭‬‬‮‬‮‪‭‏‪⁭⁬⁪‌‌‎‪‏‏‮([In] int obj0) => new Random(obj0);

    static string \u200C‫‮‬⁪⁯​‍‎​‪‭⁫⁫‫‏‫‪⁭‫⁬‫⁬⁬⁮⁭‎‌‍‌‭‏‌‬‬‬⁮⁬⁪‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202D‫⁮⁭‎‭‫‫‍‮⁮⁯⁯‪‮‫‫​‍‮‏‍‬‪‎⁪‌​⁬⁭⁭⁫‪​⁪⁮‮​‎‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200B‎‭‏‍‭​‬⁪‬⁫⁫⁫⁮‪⁬‍‬‮⁮‏⁪​⁪​‫‫⁭‬‍⁫‫‭‭‌‭‬‪‫⁬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202C‍‪​⁪⁮‎​‍⁫‍​⁪‬⁯‍‍‫⁯‮‎⁯⁪‬​⁮‍‭‪‏⁯‍​⁯‭⁬⁮​⁬‏‮([In] int obj0) => Math.Abs(obj0);

    static string \u206A⁯‫‏⁮⁫‌⁪⁬‭⁪⁬⁪‍⁪⁬‏⁯‍‏⁫⁬⁫⁯⁮‏⁭‭‭‫⁪​‪⁮​‎‍‍‬‪‮([In] object obj0) => obj0.ToString();

    static string \u200D⁪‮⁯⁯​⁭‍⁬‪‎‫⁪⁪‍‫‪‏⁮⁯‍⁯⁮‌⁭⁪‌⁭‌‮‏⁭⁪⁪‪‪‫⁮‬‍‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202B⁪‌⁫⁮‮⁭‎⁭⁬‏‬​‭‭​⁯‫⁭‮‏⁯‪⁯‮⁮‬⁪​​‪⁮‏‎⁫​‪⁭​⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200B‬‌⁭⁮‪⁪⁯‌‪⁮‌‌‬‎‫‫​‎‌‏⁮‫⁪⁬‭⁪⁭⁬⁮⁮‍‬‮​‭‫‫‌‍‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
