// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.Querying.SelectQuery
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace DataAccessFramework.Querying
{
  public class SelectQuery : Query
  {
    private readonly List<FieldReference> _selectFields = new List<FieldReference>();
    private readonly List<TableBase> _tables = new List<TableBase>();
    private readonly AndClause _whereClause = new AndClause(new WherePart[0]);
    private readonly List<SortExpression> _sortExpressions = new List<SortExpression>();
    private int _tableNo = 1;
    private readonly Dictionary<QueryTable, string> _aliasMap = new Dictionary<QueryTable, string>();

    public void AddTable(TableBase table)
    {
label_1:
      int num1 = 950404081;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 375670390)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.SetAlias(table);
            num1 = (int) num2 * -1369665189 ^ 387226551;
            continue;
          case 2:
            goto label_3;
          case 3:
            this._tables.Add(table);
            num1 = (int) num2 * -617463945 ^ -349036434;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private string GetAlias(QueryTable table)
    {
label_1:
      int num1 = -1283631958;
      string alias;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1849566388)) % 3U)
        {
          case 1:
            alias = this._aliasMap[table];
            num1 = (int) num2 * -2146581707 ^ -1924877799;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return alias;
    }

    public void AddSelectField(FieldReference field)
    {
label_1:
      int num1 = 50698808;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1506134925)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this._selectFields.Add(field);
            num1 = (int) num2 * -1697905359 ^ 322365338;
            continue;
          case 2:
            num1 = (int) num2 * 1790796427 ^ 1527417739;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void SetAlias(TableBase tableBase)
    {
label_1:
      int num1 = -1820856262;
      Join join;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1126617696)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 808991184 ^ 35656665;
            continue;
          case 2:
            int num3 = join == null ? 867668487 : (num3 = 2099295543);
            num1 = num3 ^ (int) num2 * 953641565;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -403530487 ^ -873771433;
            continue;
          case 5:
            this._aliasMap.Add((QueryTable) tableBase, SelectQuery.\u202D‮‫⁬‎‪​‬‪‮‫‪​⁭‪⁮⁪⁫‌‌‭‬‍⁮⁫‌​‌⁮‭⁫‎‬⁪⁮‌⁮⁯‮⁯‮(\u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(2097141221U), this._tableNo++.ToString()));
            num1 = -1516547599;
            continue;
          case 6:
            join = tableBase as Join;
            num1 = (int) num2 * -1060768885 ^ 366681038;
            continue;
          case 7:
            num1 = (int) num2 * -528587757 ^ 865465586;
            continue;
          case 8:
            this.SetAlias((TableBase) join.Right);
            num1 = (int) num2 * -99182755 ^ -97295520;
            continue;
          case 9:
            this.SetAlias(join.Left);
            num1 = (int) num2 * -1613207960 ^ -228625666;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public void AddSortExpression(SortExpression sortExpression)
    {
label_1:
      int num1 = 1114679294;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1875642167)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this._sortExpressions.Add(sortExpression);
            num1 = (int) num2 * 1900408863 ^ 619231595;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 2081727385 ^ 225033034;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public ReadOnlyCollection<TableBase> Tables
    {
      get
      {
label_1:
        int num1 = -1188136309;
        ReadOnlyCollection<TableBase> tables;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -166659818)) % 4U)
          {
            case 1:
              tables = this._tables.AsReadOnly();
              num1 = (int) num2 * -1440585606 ^ 1811805819;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 1636585381 ^ -1862301227;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return tables;
      }
    }

    internal override Query.ParseResult Parse(DataTool dataTool)
    {
label_1:
      int num1 = -2072481985;
      IList<IDataParameter> parameters;
      StringBuilder builder;
      BuildSqlContext sqlContext;
      bool flag1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1114622814)) % 8U)
        {
          case 0:
            this.WriteSelectedColumns(builder);
            SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u206B‏⁮‭⁬⁭‪‌​‮⁪‬‎⁪​​⁭‮⁬‪⁭‭‪‬⁬‮⁫⁫‮‎‮‏‫⁬⁪‌⁬‌‏⁫‮<string>(1810367941U));
            num1 = (int) num2 * -1980820265 ^ -107433467;
            continue;
          case 1:
            sqlContext = new BuildSqlContext(builder, dataTool, parameters, new Func<QueryTable, string>(this.GetAlias));
            num1 = (int) num2 * 1665864309 ^ -2037088607;
            continue;
          case 2:
            builder = SelectQuery.\u202D‎‏⁬⁯⁬⁯⁮​‍‭‏‏⁪‌⁫‍‪‍⁬⁭‪⁪⁯‪‎‌⁭‭‎⁬‍​​​⁬‭‎‫‪‮();
            num1 = (int) num2 * 1201760603 ^ 1772015640;
            continue;
          case 3:
            goto label_1;
          case 4:
            SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u206F‌⁮​‫‫‮‬⁭⁬⁫⁮⁫⁭‌‮‌‏‬​⁭⁫‪​‫‮‬‫‬⁪⁬‍‍‮‬⁯‮‏‌‮‮<string>(4232593604U));
            num1 = (int) num2 * -1608304641 ^ 1957635614;
            continue;
          case 5:
            parameters = (IList<IDataParameter>) new List<IDataParameter>();
            num1 = (int) num2 * 1395629059 ^ 268685527;
            continue;
          case 7:
            flag1 = false;
            num1 = (int) num2 * -2096257344 ^ 703648083;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      using (List<TableBase>.Enumerator enumerator = this._tables.GetEnumerator())
      {
label_18:
        int num3 = !enumerator.MoveNext() ? -1115576171 : (num3 = -2136618133);
        TableBase current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1114622814)) % 8U)
          {
            case 0:
              goto label_18;
            case 1:
              current = enumerator.Current;
              num3 = -1789468916;
              continue;
            case 2:
              current.BuildSql(sqlContext);
              num3 = -1880139274;
              continue;
            case 3:
              num3 = -2136618133;
              continue;
            case 4:
              flag1 = true;
              num3 = (int) num4 * -898803529 ^ 778249678;
              continue;
            case 5:
              SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(1550022541U));
              num3 = (int) num4 * -1142526143 ^ 578911261;
              continue;
            case 6:
              int num5 = flag1 ? 581204563 : (num5 = 1879447340);
              num3 = num5 ^ (int) num4 * -2058191498;
              continue;
            default:
              goto label_20;
          }
        }
      }
label_20:
      bool active = this._whereClause.Active;
label_21:
      int num6 = -1108730947;
      bool flag2;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -1114622814)) % 9U)
        {
          case 0:
            flag2 = this._sortExpressions.Count > 0;
            num6 = -424527286;
            continue;
          case 1:
            this._whereClause.BuildSql(sqlContext);
            num6 = (int) num7 * 793113056 ^ -1792209059;
            continue;
          case 2:
            int num8 = active ? -227854593 : (num8 = -1126571935);
            num6 = num8 ^ (int) num7 * 1419640775;
            continue;
          case 3:
            num6 = (int) num7 * 1926387699 ^ 1176312223;
            continue;
          case 4:
            SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u200B‫‫‫⁯⁫‫‫⁬‪‪​‫⁮⁪⁪⁭‬‮⁬​‪‍‎‏⁫‬⁫‫‬‬⁫‭‍‏⁯‪⁪‫‮‮<string>(1187032186U));
            num6 = (int) num7 * -161714710 ^ 1799975349;
            continue;
          case 5:
            if (flag2)
            {
              num6 = (int) num7 * -2123914927 ^ -2128605718;
              continue;
            }
            goto label_52;
          case 6:
            num6 = (int) num7 * -1516865706 ^ 659312146;
            continue;
          case 8:
            goto label_21;
          default:
            goto label_31;
        }
      }
label_31:
      SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u200B‫‫‫⁯⁫‫‫⁬‪‪​‫⁮⁪⁪⁭‬‮⁬​‪‍‎‏⁫‬⁫‫‬‬⁫‭‍‏⁯‪⁪‫‮‮<string>(2982464925U));
      bool flag3 = true;
      List<SortExpression>.Enumerator enumerator1 = this._sortExpressions.GetEnumerator();
      try
      {
label_37:
        int num9 = enumerator1.MoveNext() ? -15992761 : (num9 = -723301651);
        bool flag4;
        SortExpression current;
        while (true)
        {
          uint num10;
          switch ((num10 = (uint) (num9 ^ -1114622814)) % 11U)
          {
            case 0:
              goto label_37;
            case 1:
              num9 = (int) num10 * -1478075082 ^ 1246358799;
              continue;
            case 2:
              num9 = -15992761;
              continue;
            case 3:
              current = enumerator1.Current;
              num9 = -379607378;
              continue;
            case 5:
              num9 = (int) num10 * -1494297699 ^ 1281350311;
              continue;
            case 6:
              flag4 = !flag3;
              num9 = (int) num10 * 190867400 ^ -769681214;
              continue;
            case 7:
              flag3 = false;
              current.Field.BuildSql(sqlContext);
              num9 = -334422216;
              continue;
            case 8:
              SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(1550022541U));
              num9 = (int) num10 * -1443737256 ^ -158559021;
              continue;
            case 9:
              int num11 = !flag4 ? -229889765 : (num11 = -1647321172);
              num9 = num11 ^ (int) num10 * -1887181305;
              continue;
            case 10:
              num9 = (int) num10 * 877401365 ^ -1151399846;
              continue;
            default:
              goto label_49;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_45:
        int num12 = -1048100366;
        while (true)
        {
          uint num13;
          switch ((num13 = (uint) (num12 ^ -1114622814)) % 3U)
          {
            case 0:
              goto label_45;
            case 2:
              num12 = (int) num13 * 1365466710 ^ 1315046469;
              continue;
            default:
              goto label_48;
          }
        }
label_48:;
      }
label_49:
label_50:
      int num14 = -1527504909;
label_51:
      while (true)
      {
        uint num15;
        switch ((num15 = (uint) (num14 ^ -1114622814)) % 4U)
        {
          case 0:
            num14 = (int) num15 * -404089889 ^ -439149079;
            continue;
          case 1:
            goto label_52;
          case 2:
            goto label_50;
          default:
            goto label_54;
        }
      }
label_54:
      Query.ParseResult parseResult;
      return parseResult;
label_52:
      parseResult = new Query.ParseResult(SelectQuery.\u206E⁫​‬‏‮‏‏‫‌‭‮‮⁯⁭⁭‏‮‪‫⁭‍‫‏‮‮‪‫⁫‬​⁮‌⁬⁬⁪⁯⁭⁯‭‮((object) builder), parameters);
      num14 = -414125802;
      goto label_51;
    }

    private void WriteSelectedColumns(StringBuilder builder)
    {
      if (this._selectFields.Count != 0)
        goto label_3;
label_1:
      int num1 = -39171218;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1251386619)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1760045598 ^ 894972613;
            continue;
          case 2:
            flag = true;
            num1 = (int) num2 * -1445595708 ^ -158317049;
            continue;
          case 3:
            SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(3341964705U));
            num1 = (int) num2 * -438799369 ^ -213314232;
            continue;
          case 5:
            goto label_3;
          case 6:
            goto label_18;
          default:
            goto label_7;
        }
      }
label_18:
      return;
label_7:
      List<FieldReference>.Enumerator enumerator = this._selectFields.GetEnumerator();
      try
      {
label_15:
        int num3 = enumerator.MoveNext() ? -1361333942 : (num3 = -1344037363);
        FieldReference current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1251386619)) % 9U)
          {
            case 0:
              goto label_15;
            case 1:
              num3 = (int) num4 * 1638404314 ^ 587698997;
              continue;
            case 2:
              current = enumerator.Current;
              num3 = -729669915;
              continue;
            case 3:
              int num5 = !flag ? -180617040 : (num5 = -950774710);
              num3 = num5 ^ (int) num4 * 1022586099;
              continue;
            case 4:
              SelectQuery.\u200F⁮⁭‍⁪⁫‭‎⁫‏‮⁭⁭‮⁬‍‌‏‫‬‍​⁮⁮‪‌‌‌‫⁬‭‮⁭‏⁪⁬⁪‭‌‏‮(builder, \u003CModule\u003E.\u206F‌⁮​‫‫‮‬⁭⁬⁫⁮⁫⁭‌‮‌‏‬​⁭⁫‪​‫‮‬‫‬⁪⁬‍‍‮‬⁯‮‏‌‮‮<string>(2596116137U), (object) this.GetAlias(current.Table), (object) current.FieldName, (object) current.Table.TableName);
              flag = false;
              num3 = -949725849;
              continue;
            case 5:
              num3 = -1361333942;
              continue;
            case 7:
              SelectQuery.\u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(builder, \u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(1550022541U));
              num3 = (int) num4 * 1816055613 ^ -1129427829;
              continue;
            case 8:
              num3 = (int) num4 * 623808099 ^ -1343530108;
              continue;
            default:
              goto label_24;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_20:
        int num6 = -1586790442;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -1251386619)) % 3U)
          {
            case 0:
              goto label_20;
            case 2:
              num6 = (int) num7 * 1932345603 ^ -1955773600;
              continue;
            default:
              goto label_23;
          }
        }
label_23:;
      }
label_24:
      return;
label_3:
      num1 = -224608392;
      goto label_2;
    }

    public void AddWhere(WherePart clause)
    {
      this._whereClause.AddPart(clause);
label_1:
      int num1 = 1610018296;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 7441069)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -887135229 ^ -235009038;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public TableBase FindTable(string tableName)
    {
label_1:
      int num1 = -1913403346;
      TableBase table;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1923448293)) % 4U)
        {
          case 1:
            string tableName1 = tableName;
            // ISSUE: reference to a compiler-generated method
            table = this._tables.Find((Predicate<TableBase>) (x => SelectQuery.\u003C\u003Ec__DisplayClass16_0.\u202B‏​⁯‭⁮⁬⁭⁬⁪⁭‫‎‪‍⁮‌⁯⁪‎‎⁭⁭⁯‍‏⁪‬‪‏⁯​⁭​‭⁯⁪‪⁫‏‮(x.TableName, tableName1)));
            num1 = (int) num2 * 95633932 ^ 2109083028;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1153421187 ^ 2126589972;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return table;
    }

    public AndClause WhereClause
    {
      get
      {
label_1:
        int num1 = 746088194;
        AndClause whereClause;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1136756911)) % 4U)
          {
            case 1:
              whereClause = this._whereClause;
              num1 = (int) num2 * 313209481 ^ 1467377645;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * -1220187810 ^ -1048977299;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return whereClause;
      }
    }

    static string \u202D‮‫⁬‎‪​‬‪‮‫‪​⁭‪⁮⁪⁫‌‌‭‬‍⁮⁫‌​‌⁮‭⁫‎‬⁪⁮‌⁮⁯‮⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static StringBuilder \u202D‎‏⁬⁯⁬⁯⁮​‍‭‏‏⁪‌⁫‍‪‍⁬⁭‪⁪⁯‪‎‌⁭‭‎⁬‍​​​⁬‭‎‫‪‮() => new StringBuilder();

    static StringBuilder \u206D⁯​‎⁮‪‬‌⁫⁪⁯‬‎‫‬‍‌‪‏⁮‌⁯‏‌⁯⁭‭⁬‫⁪⁪‏‪⁮⁬‌‫‫‬‭‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.Append(obj1);
    }

    static string \u206E⁫​‬‏‮‏‏‫‌‭‮‮⁯⁭⁭‏‮‪‫⁭‍‫‏‮‮‪‫⁫‬​⁮‌⁬⁬⁪⁯⁭⁯‭‮([In] object obj0) => obj0.ToString();

    static StringBuilder \u200F⁮⁭‍⁪⁫‭‎⁫‏‮⁭⁭‮⁬‍‌‏‫‬‍​⁮⁮‪‌‌‌‫⁬‭‮⁭‏⁪⁬⁪‭‌‏‮(
      [In] StringBuilder obj0,
      [In] string obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4)
    {
      return obj0.AppendFormat(obj1, obj2, obj3, obj4);
    }
  }
}
