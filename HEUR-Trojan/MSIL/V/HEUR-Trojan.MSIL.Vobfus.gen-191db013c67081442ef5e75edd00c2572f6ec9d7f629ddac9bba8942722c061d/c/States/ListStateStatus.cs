// Decompiled with JetBrains decompiler
// Type: c.States.ListStateStatus
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using GLuaR.Database;
using GLuaR.Importers;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace c.States
{
  public class ListStateStatus : UserControl
  {
    private Point customerField;
    private IContainer _ClientField;
    private Label m_ReponseField;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ListStateStatus()
    {
      int num1 = 4;
      if (ListStateStatus.DeleteRegistry())
        goto label_5;
label_1:
      ImporterMapper.InitAccount();
      if (!ListStateStatus.AddRegistry())
      {
        num1 = 2;
        goto label_5;
      }
label_2:
      this.customerField = new Point(0, 0);
      int num2 = 5;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
          case 3:
            goto label_7;
          case 2:
            goto label_2;
          case 5:
            goto label_3;
          case 6:
            goto label_9;
          default:
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto label_7;
        }
      }
label_3:
      this._ClientField = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.ComputeRule();
      goto label_7;
label_9:
      return;
label_7:
      this.BackColor = ServiceWrapper.m_AdapterWrapper;
      num2 = 6;
      goto label_4;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SortRule(object task, MouseEventArgs vis)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              flag = vis.Button == MouseButtons.Left;
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 1;
            case 1:
            case 3:
              if (flag)
              {
                num2 = 6;
                continue;
              }
              goto label_12;
            case 2:
              goto label_5;
            case 5:
              goto label_1;
            case 6:
              goto label_6;
            case 7:
              goto label_10;
            default:
              if (!ListStateStatus.AddRegistry())
              {
                num2 = 5;
                continue;
              }
              goto label_10;
          }
        }
label_1:
        int num3 = vis.X - this.customerField.X;
        int num4 = vis.Y - this.customerField.Y;
        int x = this.Location.X + num3;
        int y = this.Location.Y + num4;
        num1 = 2;
        continue;
label_5:
        this.Location = new Point(x, y);
        num1 = 7;
        continue;
label_6:
        goto label_1;
      }
label_12:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CustomizeRule(object param, MouseEventArgs pol)
    {
      int num1 = 4;
      if (ListStateStatus.AddRegistry())
        ;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            this.customerField = pol.Location;
            num2 = 5;
            break;
          case 1:
          case 3:
            if (!flag)
              goto label_3;
            else
              goto case 0;
          case 4:
            flag = pol.Button == MouseButtons.Left;
            num2 = 3;
            break;
          case 5:
            goto label_8;
          default:
            num1 = 0;
            continue;
        }
        num1 = num2;
      }
label_3:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReadRule(object info, EventArgs pol)
    {
      int num1 = 4;
      if (true)
        goto label_9;
label_1:
      ((ServiceWrapper) this.Parent).CalculateRule(this);
      int num2 = 5;
label_8:
      num1 = num2;
label_9:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            if (this.Parent != null)
            {
              if (!ListStateStatus.AddRegistry())
              {
                num1 = 3;
                continue;
              }
              goto label_4;
            }
            else
              goto label_5;
          case 1:
          case 2:
            goto label_1;
          case 3:
            goto label_4;
          case 5:
            goto label_11;
          default:
            goto label_10;
        }
      }
label_4:
      int num3 = this.Parent.GetType().Name == "Design" ? 1 : 0;
      goto label_6;
label_5:
      num3 = 0;
label_6:
      if (num3 == 0)
        return;
      goto label_1;
label_10:
      num2 = 1;
      goto label_8;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool writeinstance)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 4:
              if (!writeinstance)
              {
                num3 = 0;
                break;
              }
              if (!ListStateStatus.AddRegistry())
              {
                num2 = 3;
                continue;
              }
              goto case 2;
            case 1:
            case 3:
              num3 = this._ClientField != null ? 1 : 0;
              break;
            case 2:
label_10:
              goto label_11;
            case 5:
              goto label_14;
            default:
              goto label_7;
          }
          if (num3 != 0)
          {
            this._ClientField.Dispose();
            goto label_10;
          }
label_11:
          base.Dispose(writeinstance);
          if (true)
            num2 = 5;
          else
            goto label_12;
        }
label_7:
        num1 = 2;
      }
label_14:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ComputeRule()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              this.m_ReponseField = new Label();
              num2 = 2;
              continue;
            case 1:
            case 2:
              this.SuspendLayout();
              if (ListStateStatus.DeleteRegistry())
              {
                num2 = 7;
                continue;
              }
              goto label_9;
            case 3:
              this.BackColor = Color.FromArgb(90, 90, 90);
              this.BorderStyle = BorderStyle.Fixed3D;
              this.Controls.Add((Control) this.m_ReponseField);
              this.Name = "BaseDermaControl";
              this.Size = new Size(130, 33);
              this.Click += new EventHandler(this.ReadRule);
              this.MouseMove += new MouseEventHandler(this.SortRule);
              num2 = 4;
              continue;
            case 4:
              goto label_9;
            case 6:
              this.PerformLayout();
              num2 = 9;
              continue;
            case 7:
              this.m_ReponseField.AutoSize = true;
              this.m_ReponseField.Enabled = false;
              this.m_ReponseField.Location = new Point(19, 12);
              if (!ListStateStatus.AddRegistry())
              {
                num2 = 8;
                continue;
              }
              goto case 8;
            case 8:
              this.m_ReponseField.Name = "label1";
              this.m_ReponseField.Size = new Size(101, 13);
              this.m_ReponseField.TabIndex = 0;
              this.m_ReponseField.Text = "Base Derma Control";
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              this.AutoScaleMode = AutoScaleMode.Font;
              goto case 3;
            case 9:
              goto label_11;
            default:
              if (ListStateStatus.DeleteRegistry())
              {
                num2 = 3;
                continue;
              }
              goto case 3;
          }
        }
label_9:
        this.MouseDown += new MouseEventHandler(this.CustomizeRule);
        this.ResumeLayout(false);
        num1 = 6;
      }
label_11:;
    }

    internal static bool DeleteRegistry() => true;

    internal static bool AddRegistry() => false;
  }
}
