// Decompiled with JetBrains decompiler
// Type: flac.Format.Subframe
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

namespace flac.Format
{
  public abstract class Subframe
  {
    private SubframeHeader header_;
    protected uint[] samples_;

    public uint[] Samples => this.samples_;

    public SubframeHeader Header => this.header_;

    public virtual void Write(FlacStream stream) => this.header_.Write(stream);

    public abstract void Write(FlacStream stream, int count);

    public static Subframe New(
      FlacStream stream,
      FrameHeader frameHeader,
      int bitsPerSampleInFrame)
    {
      SubframeHeader subframeHeader = new SubframeHeader();
      subframeHeader.Read(stream);
      int subframeType = subframeHeader.SubframeType;
      Subframe subframe;
      switch (subframeType)
      {
        case 0:
          SubframeConstant subframeConstant = new SubframeConstant();
          subframeConstant.header_ = subframeHeader;
          subframeConstant.Read(stream, bitsPerSampleInFrame);
          subframe = (Subframe) subframeConstant;
          break;
        case 1:
          SubframeVerbatim subframeVerbatim = new SubframeVerbatim();
          subframeVerbatim.header_ = subframeHeader;
          subframeVerbatim.Read(stream, bitsPerSampleInFrame, frameHeader.BlockSize);
          subframe = (Subframe) subframeVerbatim;
          break;
        default:
          if (subframeType >= 2 && subframeType <= 7)
            throw new FlacFormatReservedException();
          if (subframeType >= 8 && subframeType <= 15)
          {
            int predictorOrder = subframeType & 7;
            Validation.IsReserved(predictorOrder <= 4);
            SubframeFixed subframeFixed = new SubframeFixed();
            subframeFixed.header_ = subframeHeader;
            subframeFixed.Read(stream, frameHeader, predictorOrder, bitsPerSampleInFrame);
            subframe = (Subframe) subframeFixed;
            break;
          }
          if (subframeType == 16)
            throw new FlacFormatReservedException();
          int order = (subframeType & 31) + 1;
          SubframeLpc subframeLpc = new SubframeLpc();
          subframeLpc.header_ = subframeHeader;
          subframeLpc.Read(stream, frameHeader, order, bitsPerSampleInFrame);
          subframe = (Subframe) subframeLpc;
          break;
      }
      return subframe;
    }
  }
}
