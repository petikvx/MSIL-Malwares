// Decompiled with JetBrains decompiler
// Type: .
// Assembly: FUD Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA57510E-1F7B-47BB-998D-F04D6C18C0A3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.Jorik.IRCbot.bsa-c63f7b3292b3493d25c8dac953eb4faaef86b9c05ed9d1077709ee2f61120924.exe

using \u0001;
using \u0005;
using System;
using System.Drawing;
using System.Runtime.InteropServices;

namespace \u0005
{
  internal sealed class \u0001
  {
    [DllImport("shell32", EntryPoint = "ExtractIconEx")]
    private static extern int \u0003([In] string obj0, [In] int obj1, [In] ref int obj2, [In] ref int obj3, [In] int obj4);

    [DllImport("user32", EntryPoint = "DrawText", CharSet = CharSet.Unicode)]
    private static extern int \u0003(
      [In] IntPtr obj0,
      [In] string obj1,
      [In] int obj2,
      [In] ref \u0005.\u0001.\u0001 obj3,
      [In] int obj4);

    [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
    private static extern IntPtr \u0003([In] IntPtr obj0, [In] IntPtr obj1);

    [DllImport("kernel32.Dll", EntryPoint = "GetVersionEx")]
    private static extern short \u0003([In] ref \u0005.\u0001.\u0002 obj0);

    public static Icon \u0003()
    {
      try
      {
        return \u0005.\u0001.\u0004();
      }
      catch (Exception ex)
      {
        return \u0004.\u0003(\u0004.\u0003(3270));
      }
    }

    private static Icon \u0004()
    {
      int num1 = 0;
      int num2 = 0;
      if (\u0005.\u0001.\u0003(\u0083\u0003.\u0092\u0006(), -1, ref num2, ref num2, 1) > 0)
      {
        \u0005.\u0001.\u0003(\u0083\u0003.\u0092\u0006(), 0, ref num1, ref num2, 1);
        if (num1 != 0)
          return \u009E\u0004.\u0014\u000E(new IntPtr(num1));
      }
      return (Icon) null;
    }

    internal static string \u0003()
    {
      try
      {
        return \u0005.\u0001.\u0004();
      }
      catch (Exception ex)
      {
        return string.Empty;
      }
    }

    private static string \u0004()
    {
      \u0005.\u0001.\u0002 obj = new \u0005.\u0001.\u0002();
      // ISSUE: type reference
      obj.\u0001 = \u009B\u0003.\u0099\u0005(\u0080\u0003.\u009C\u0003(__typeref (\u0005.\u0001.\u0002)));
      int num = (int) \u0005.\u0001.\u0003(ref obj);
      return obj.\u0001;
    }

    internal static int \u0003([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      try
      {
        return \u0005.\u0001.\u0005(obj0, obj1, obj2, obj3);
      }
      catch (Exception ex1)
      {
        try
        {
          return \u0099\u0003.\u001E\u0003((double) \u0005.\u0001.\u0004(obj0, obj1, obj2, obj3) * 1.1);
        }
        catch (Exception ex2)
        {
        }
      }
      return 0;
    }

    private static int \u0004([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3) => \u0098\u0004.\u001E\u000E(\u001F\u0002.\u007E\u0008\u000E((object) obj0, obj1, obj2, obj3)).Height;

    private static int \u0005([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      \u0005.\u0001.\u0001 obj = new \u0005.\u0001.\u0001(new Rectangle(0, 0, obj3, 10000));
      int num1 = 3088;
      IntPtr num2 = \u0091\u0005.\u007E\u0005\u000E((object) obj0);
      IntPtr num3 = \u0091\u0005.\u007E\u0083\u000E((object) obj2);
      IntPtr num4 = \u0005.\u0001.\u0003(num2, num3);
      \u0005.\u0001.\u0003(num2, obj1, -1, ref obj, num1);
      \u0005.\u0001.\u0003(num2, num4);
      \u001B\u0005.\u007E\u0006\u000E((object) obj0, num2);
      return obj.\u0004 - obj.\u0002;
    }

    private struct \u0001
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;

      public \u0001([In] Rectangle obj0)
      {
        this.\u0001 = obj0.Left;
        this.\u0002 = obj0.Top;
        this.\u0004 = obj0.Bottom;
        this.\u0003 = obj0.Right;
      }
    }

    private struct \u0002
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;
      public int \u0005;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
      public string \u0001;
    }
  }
}
