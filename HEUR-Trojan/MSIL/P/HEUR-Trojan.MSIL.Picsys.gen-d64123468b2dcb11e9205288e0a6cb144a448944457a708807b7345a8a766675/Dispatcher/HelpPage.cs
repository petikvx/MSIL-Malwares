// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.HelpPage
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Net;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Web;
using System.Web;

namespace System.ServiceModel.Dispatcher
{
  internal class HelpPage
  {
    public const string OperationListHelpPageUriTemplate = "help";
    public const string OperationHelpPageUriTemplate = "help/operations/{operation}";
    private const string HelpMethodName = "GetHelpPage";
    private const string HelpOperationMethodName = "GetOperationHelpPage";
    private DateTime startupTime = DateTime.UtcNow;
    private Dictionary<string, OperationHelpInformation> operationInfoDictionary;
    private NameValueCache<string> operationPageCache;
    private NameValueCache<string> helpPageCache;

    public HelpPage(WebHttpBehavior behavior, ContractDescription description)
    {
      this.operationInfoDictionary = new Dictionary<string, OperationHelpInformation>();
      this.operationPageCache = new NameValueCache<string>();
      this.helpPageCache = new NameValueCache<string>();
      foreach (OperationDescription operation in (Collection<OperationDescription>) description.Operations)
        this.operationInfoDictionary.Add(operation.Name, new OperationHelpInformation(behavior, operation));
    }

    private Message GetHelpPage()
    {
      Uri baseUri = UriTemplate.RewriteUri(OperationContext.Current.Channel.LocalAddress.Uri, WebOperationContext.Current.IncomingRequest.Headers[HttpRequestHeader.Host]);
      string text = this.helpPageCache.Lookup(baseUri.Authority);
      if (string.IsNullOrEmpty(text))
      {
        text = HelpHtmlBuilder.CreateHelpPage(baseUri, (IEnumerable<OperationHelpInformation>) this.operationInfoDictionary.Values).ToString();
        if (HttpContext.Current == null)
          this.helpPageCache.AddOrUpdate(baseUri.Authority, text);
      }
      return WebOperationContext.Current.CreateTextResponse(text, "text/html");
    }

    private Message GetOperationHelpPage(string operation)
    {
      Uri uri = UriTemplate.RewriteUri(WebOperationContext.Current.IncomingRequest.UriTemplateMatch.RequestUri, WebOperationContext.Current.IncomingRequest.Headers[HttpRequestHeader.Host]);
      string text = this.operationPageCache.Lookup(uri.AbsoluteUri);
      if (string.IsNullOrEmpty(text))
      {
        OperationHelpInformation operationInfo;
        if (!this.operationInfoDictionary.TryGetValue(operation, out operationInfo))
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new WebFaultException(HttpStatusCode.NotFound));
        text = HelpHtmlBuilder.CreateOperationHelpPage(UriTemplate.RewriteUri(OperationContext.Current.Channel.LocalAddress.Uri, WebOperationContext.Current.IncomingRequest.Headers[HttpRequestHeader.Host]), operationInfo).ToString();
        if (HttpContext.Current == null)
          this.operationPageCache.AddOrUpdate(uri.AbsoluteUri, text);
      }
      return WebOperationContext.Current.CreateTextResponse(text, "text/html");
    }

    public static IEnumerable<KeyValuePair<UriTemplate, object>> GetOperationTemplatePairs() => (IEnumerable<KeyValuePair<UriTemplate, object>>) new KeyValuePair<UriTemplate, object>[2]
    {
      new KeyValuePair<UriTemplate, object>(new UriTemplate("help"), (object) "GetHelpPage"),
      new KeyValuePair<UriTemplate, object>(new UriTemplate("help/operations/{operation}"), (object) "GetOperationHelpPage")
    };

    public object Invoke(UriTemplateMatch match)
    {
      if (HttpContext.Current != null)
      {
        HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.Public);
        HttpContext.Current.Response.Cache.SetMaxAge(TimeSpan.MaxValue);
        HttpContext.Current.Response.Cache.AddValidationCallback(new HttpCacheValidateHandler(this.CacheValidationCallback), (object) this.startupTime);
        HttpContext.Current.Response.Cache.SetValidUntilExpires(true);
      }
      string data = (string) match.Data;
      if (data == "GetHelpPage")
        return (object) this.GetHelpPage();
      return data == "GetOperationHelpPage" ? (object) this.GetOperationHelpPage(match.BoundVariables["operation"]) : (object) null;
    }

    private void CacheValidationCallback(
      HttpContext context,
      object state,
      ref HttpValidationStatus result)
    {
      if ((DateTime) state == this.startupTime)
        result = HttpValidationStatus.Valid;
      else
        result = HttpValidationStatus.Invalid;
    }
  }
}
