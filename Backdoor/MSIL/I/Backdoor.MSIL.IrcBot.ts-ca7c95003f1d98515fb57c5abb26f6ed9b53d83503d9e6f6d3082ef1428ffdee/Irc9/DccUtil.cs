// Decompiled with JetBrains decompiler
// Type: Irc9.DccUtil
// Assembly: Irc9, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7A76116-F62B-4512-BE9B-418015CDF203
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.MSIL.IrcBot.ts-ca7c95003f1d98515fb57c5abb26f6ed9b53d83503d9e6f6d3082ef1428ffdee.exe

using System;
using System.Diagnostics;
using System.Globalization;
using System.Net;

namespace Irc9
{
  public sealed class DccUtil
  {
    internal static TraceSwitch DccTrace = new TraceSwitch("DccTraceSwitch", "Debug level for DCC classes.");

    private DccUtil()
    {
    }

    public static IPAddress LocalHost() => Dns.Resolve(Dns.GetHostName()).AddressList[0];

    public static byte[] DccBytesReceivedFormat(long bytesReceived)
    {
      byte[] destinationArray = new byte[4];
      Array.Copy((Array) BitConverter.GetBytes(DccUtil.NetworkUnsignedLong(bytesReceived)), 0, (Array) destinationArray, 0, 4);
      return destinationArray;
    }

    public static long DccBytesToLong(byte[] received) => (long) IPAddress.NetworkToHostOrder(BitConverter.ToInt32(received, 0));

    public static string IPAddressToLong(IPAddress ipAddress)
    {
      if (ipAddress == null)
        throw new ArgumentException("Address cannot be null");
      return DccUtil.NetworkUnsignedLong(ipAddress.Address).ToString((IFormatProvider) CultureInfo.InvariantCulture);
    }

    public static IPAddress LongToIPAddress(string networkOrder)
    {
      if (networkOrder == null || networkOrder.Trim() == "")
        throw new ArgumentException("Network order address cannot be null or empty.");
      try
      {
        byte[] bytes = BitConverter.GetBytes(long.Parse(networkOrder, (IFormatProvider) CultureInfo.InvariantCulture));
        return IPAddress.Parse(bytes[3].ToString() + "." + (object) bytes[2] + "." + (object) bytes[1] + "." + (object) bytes[0]);
      }
      catch (FormatException ex)
      {
        throw new ArgumentException(networkOrder + " is not a valid network address.");
      }
    }

    public static string SpacesToUnderscores(string fileName) => fileName.Replace(' ', '_');

    private static long NetworkUnsignedLong(long hostOrderLong) => IPAddress.HostToNetworkOrder(hostOrderLong) >> 32 & (long) uint.MaxValue;
  }
}
