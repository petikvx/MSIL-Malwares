// Decompiled with JetBrains decompiler
// Type: Alero.Querying.SelectQuery
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Text;

namespace Alero.Querying
{
  public class SelectQuery : Query
  {
    private readonly List<FieldReference> _selectFields = new List<FieldReference>();
    private readonly List<TableBase> _tables = new List<TableBase>();
    private readonly AndClause _whereClause = new AndClause(new WherePart[0]);
    private readonly List<SortExpression> _sortExpressions = new List<SortExpression>();
    private int _tableNo = 1;
    private readonly Dictionary<QueryTable, string> _aliasMap = new Dictionary<QueryTable, string>();

    public void AddTable(TableBase table)
    {
      this._tables.Add(table);
      this.SetAlias(table);
    }

    private string GetAlias(QueryTable table) => this._aliasMap[table];

    public void AddSelectField(FieldReference field) => this._selectFields.Add(field);

    public void SetAlias(TableBase tableBase)
    {
      if (tableBase is Join join)
      {
        this.SetAlias(join.Left);
        this.SetAlias((TableBase) join.Right);
      }
      else
        this._aliasMap.Add((QueryTable) tableBase, "t" + this._tableNo++.ToString());
    }

    public void AddSortExpression(SortExpression sortExpression) => this._sortExpressions.Add(sortExpression);

    public ReadOnlyCollection<TableBase> Tables => this._tables.AsReadOnly();

    internal override Query.ParseResult Parse(DataTool dataTool)
    {
      IList<IDataParameter> parameters = (IList<IDataParameter>) new List<IDataParameter>();
      StringBuilder builder = new StringBuilder();
      builder.Append("select ");
      this.WriteSelectedColumns(builder);
      builder.Append(" from ");
      bool flag1 = false;
      BuildSqlContext sqlContext = new BuildSqlContext(builder, dataTool, parameters, new Func<QueryTable, string>(this.GetAlias));
      foreach (TableBase table in this._tables)
      {
        if (flag1)
          builder.Append(", ");
        table.BuildSql(sqlContext);
        flag1 = true;
      }
      if (this._whereClause.Active)
      {
        builder.Append(" where ");
        this._whereClause.BuildSql(sqlContext);
      }
      if (this._sortExpressions.Count > 0)
      {
        builder.Append(" order by ");
        bool flag2 = true;
        foreach (SortExpression sortExpression in this._sortExpressions)
        {
          if (!flag2)
            builder.Append(", ");
          flag2 = false;
          sortExpression.Field.BuildSql(sqlContext);
        }
      }
      return new Query.ParseResult(builder.ToString(), parameters);
    }

    private void WriteSelectedColumns(StringBuilder builder)
    {
      if (this._selectFields.Count == 0)
      {
        builder.Append("*");
      }
      else
      {
        bool flag = true;
        foreach (FieldReference selectField in this._selectFields)
        {
          if (!flag)
            builder.Append(", ");
          builder.AppendFormat("[{0}].[{1}] as {2}_{1}", (object) this.GetAlias(selectField.Table), (object) selectField.FieldName, (object) selectField.Table.TableName);
          flag = false;
        }
      }
    }

    public void AddWhere(WherePart clause) => this._whereClause.AddPart(clause);

    public TableBase FindTable(string tableName) => this._tables.Find((Predicate<TableBase>) (x => x.TableName == tableName));

    public AndClause WhereClause => this._whereClause;
  }
}
