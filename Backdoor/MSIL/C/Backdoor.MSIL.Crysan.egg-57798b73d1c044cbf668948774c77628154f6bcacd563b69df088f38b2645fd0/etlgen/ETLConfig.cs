// Decompiled with JetBrains decompiler
// Type: etlgen.ETLConfig
// Assembly: UCOMIEnumConnecti, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5D827560-3619-4F41-B7F7-70598092DF43
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.egg-57798b73d1c044cbf668948774c77628154f6bcacd563b69df088f38b2645fd0.exe

using System;
using System.Collections;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;

namespace etlgen
{
  public class ETLConfig
  {
    public readonly string MARCA_TEMPORAL = nameof (MARCA_TEMPORAL);
    private Hashtable asociaciones;
    private string valorNulo;
    private double probNulo;
    private ArrayList rutas;
    private bool cabecera;

    public ETLConfig()
    {
      this.asociaciones = new Hashtable();
      this.valorNulo = "NULL";
      this.probNulo = 0.0;
      this.rutas = new ArrayList();
      this.cabecera = false;
    }

    public void Cargar(string archivo)
    {
      StreamReader input = new StreamReader(archivo, Encoding.UTF7);
      XmlTextReader xmlTextReader = new XmlTextReader((TextReader) input);
      while (xmlTextReader.Read())
      {
        if (xmlTextReader.NodeType == XmlNodeType.Element && xmlTextReader.Name == "Generadores")
        {
          string str = (string) null;
          string s = (string) null;
          while (xmlTextReader.MoveToNextAttribute())
          {
            string name = xmlTextReader.Name;
            if (!(name == "valor-nulo"))
            {
              if (!(name == "prob-nulo"))
                throw new XmlException(this.GetType()?.ToString() + ": atributo no reconocido (línea " + xmlTextReader.LineNumber.ToString() + ")");
              s = xmlTextReader.Value;
            }
            else
              str = xmlTextReader.Value;
          }
          if (str != null)
            this.valorNulo = str;
          if (s != null)
          {
            NumberStyles style = NumberStyles.Float;
            this.probNulo = double.Parse(s, style, (IFormatProvider) new NumberFormatInfo()
            {
              NumberDecimalSeparator = "."
            });
          }
        }
        else if (xmlTextReader.NodeType == XmlNodeType.Element && xmlTextReader.Name == "asociar")
        {
          string key = (string) null;
          string typeName = (string) null;
          string path = (string) null;
          while (xmlTextReader.MoveToNextAttribute())
          {
            string name = xmlTextReader.Name;
            if (!(name == "elemento"))
            {
              if (!(name == "generador"))
              {
                if (!(name == "ruta"))
                  throw new XmlException(this.GetType()?.ToString() + ": atributo no reconocido (línea " + xmlTextReader.LineNumber.ToString() + ")");
                path = xmlTextReader.Value;
              }
              else
                typeName = xmlTextReader.Value;
            }
            else
              key = xmlTextReader.Value;
          }
          if (key == null || typeName == null || path == null || key == "")
            throw new XmlException(this.GetType()?.ToString() + ": elemento <asociar> no válido");
          ObjGenerador instance = (ObjGenerador) Assembly.LoadFile(path).CreateInstance(typeName);
          this.asociaciones.Add((object) key, (object) instance);
        }
        else if (xmlTextReader.NodeType == XmlNodeType.Element && xmlTextReader.Name == "ruta")
        {
          xmlTextReader.Read();
          Hashtable hashtable = this.Importar(xmlTextReader.Value);
          foreach (string key in (IEnumerable) hashtable.Keys)
            this.asociaciones.Add((object) key, hashtable[(object) key]);
        }
        else if (xmlTextReader.NodeType == XmlNodeType.Element && xmlTextReader.Name == "cabecera")
          this.cabecera = true;
      }
      xmlTextReader.Close();
      input.Close();
    }

    public Hashtable Importar(string directorio)
    {
      Hashtable hashtable = new Hashtable();
      foreach (string file in Directory.GetFiles(directorio, "*.xml"))
      {
        StreamReader input = new StreamReader(file, Encoding.Default);
        XmlTextReader reader = new XmlTextReader((TextReader) input);
        while (reader.Read() && reader.NodeType != XmlNodeType.EndElement)
        {
          if (this.asociaciones.Contains((object) reader.Name))
          {
            ObjGenerador generador = this.GetGenerador(reader.Name);
            generador.Cargar(reader, this);
            this.asociaciones.Add((object) generador.Id, (object) generador);
          }
        }
        reader.Close();
        input.Close();
      }
      return hashtable;
    }

    public void Descargar()
    {
      this.asociaciones = new Hashtable();
      this.valorNulo = "NULL;";
      this.probNulo = 0.0;
      this.rutas = new ArrayList();
      this.cabecera = false;
    }

    public ObjGenerador GetGenerador(string elemento) => ((ObjGenerador) this.asociaciones[(object) elemento]).Clonar();

    public string GetValorNulo() => this.valorNulo;

    public double GetProbabilidadNulo() => this.probNulo;

    public ArrayList LeerGeneradores(XmlTextReader reader)
    {
      ArrayList arrayList1 = new ArrayList();
      ArrayList arrayList2 = new ArrayList();
      arrayList2.AddRange(this.asociaciones.Keys);
      while (reader.Read() && reader.NodeType != XmlNodeType.EndElement)
      {
        if (arrayList2.Contains((object) reader.Name))
        {
          ObjGenerador generador = this.GetGenerador(reader.Name);
          generador.Cargar(reader, this);
          arrayList1.Add((object) generador);
        }
      }
      return arrayList1;
    }

    public bool Cabecera => this.cabecera;
  }
}
