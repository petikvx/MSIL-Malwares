// Decompiled with JetBrains decompiler
// Type: .
// Assembly: tunnel, Version=5.33.30.2, Culture=neutral, PublicKeyToken=c03e3aaf025faf44
// MVID: A9BB91E8-EB42-44AA-8017-DD55B6CE8F16
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.jgbt-a87f6163078bac287118a5d0a2cfe80d7fab70d3350f37b021a58f15059ef30b.exe

using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0003
{
  internal class \u0001
  {
    [NonSerialized]
    internal static \u0001.\u0001 \u0001;
    private static string \u0001;
    private static string \u0002;
    private static byte[] \u0001;
    private static Hashtable \u0001;
    private static bool \u0001;
    private static int \u0001;

    public static string \u0002([In] int obj0)
    {
      int index1;
      int num1;
      string str1;
      do
      {
        obj0 -= \u0003.\u0001.\u0001;
label_1:
        if (\u0003.\u0001.\u0001)
        {
          str1 = (string) \u0003.\u0001.\u0001[(object) obj0];
          switch (str1)
          {
            case null:
              break;
            default:
              goto label_23;
          }
        }
        if (true)
        {
          if (true)
            ;
          int num2 = obj0;
          byte[] numArray = \u0003.\u0001.\u0001;
          int index2 = num2;
          index1 = index2 + 1;
          num1 = (int) numArray[index2];
          if ((num1 & 128) != 0)
          {
            if ((num1 & 64) != 0)
            {
              if (false)
                goto label_1;
              else
                goto label_13;
            }
            else
              goto label_9;
          }
        }
        else
          goto label_13;
      }
      while (false);
      int count = num1;
      if (count == 0)
        return string.Empty;
      goto label_18;
label_9:
      int num3 = num1 & 63;
      int num4;
      int num5 = num4 = 8;
      int num6 = num3;
label_10:
      if (num4 != 0)
      {
        count = (num6 << num5) + (int) \u0003.\u0001.\u0001[index1++];
        goto label_18;
      }
      else
        goto label_16;
label_13:
      num6 = (num1 & 31) << 24;
      num5 = (int) \u0003.\u0001.\u0001[index1++];
      num4 = 8;
      int num7;
      int num8;
      if (num4 != 0)
      {
        if (num4 != 0)
        {
          num5 <<= 16;
        }
        else
        {
          num8 = num5;
          num7 = num6;
          goto label_17;
        }
      }
      else
        goto label_10;
label_16:
      num7 = num6 + num5;
      num8 = (int) \u0003.\u0001.\u0001[index1++];
label_17:
      int num9 = num8 << 8;
      count = num7 + num9 + (int) \u0003.\u0001.\u0001[index1++];
label_18:
      try
      {
        byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0003.\u0001.\u0001, index1, count));
        string str2 = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
        if (\u0003.\u0001.\u0001)
        {
          try
          {
            \u0003.\u0001.\u0001.Add((object) obj0, (object) str2);
          }
          catch
          {
          }
        }
        return str2;
      }
      catch
      {
        return (string) null;
      }
label_23:
      return str1;
    }

    static \u0001()
    {
      \u0001.\u0002.\u0002(typeof (\u0003.\u0001));
      \u0003.\u0001.\u0001 = "0";
label_1:
      \u0003.\u0001.\u0002 = "131";
      \u0003.\u0001.\u0001 = (byte[]) null;
      \u0003.\u0001.\u0001 = (Hashtable) null;
      \u0003.\u0001.\u0001 = false;
      \u0003.\u0001.\u0001 = 0;
      do
      {
        if (true)
        {
          if (\u0003.\u0001.\u0001 == "1")
          {
            \u0003.\u0001.\u0001 = true;
            \u0003.\u0001.\u0001 = new Hashtable();
          }
          \u0003.\u0001.\u0001 = Convert.ToInt32(\u0003.\u0001.\u0002);
          Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("{a9bb91e8-eb42-44aa-8017-dd55b6ce8f16}");
          try
          {
            if (true)
              goto label_9;
label_8:
            byte[] buffer;
            \u0003.\u0001.\u0001 = \u0002.\u0002.\u0002(buffer);
            buffer = (byte[]) null;
            manifestResourceStream.Close();
            goto label_17;
label_9:
            int int32 = Convert.ToInt32(manifestResourceStream.Length);
            buffer = new byte[int32];
            manifestResourceStream.Read(buffer, 0, int32);
            goto label_8;
          }
          finally
          {
            int num;
            do
            {
              if (manifestResourceStream != null)
                num = 2;
              else
                goto label_14;
label_12:
              if (num != 0)
                manifestResourceStream.Dispose();
              else
                break;
label_14:
              num = 0;
              if (num != 0)
                goto label_12;
            }
            while (num != 0);
          }
label_17:;
        }
        else
          goto label_1;
      }
      while (false);
    }
  }
}
