// Decompiled with JetBrains decompiler
// Type:  
// Assembly: CustomQueryInterfaceResult, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C313905-EBD1-4523-EACC-B48B0BED3910
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Crypt.gen-1b49da172b79de32c6df4e87385e57c0e3768b0b227b84cc38cd746b05200720.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

internal static class \u0006\u2004
{
  private static byte[] \u000E;
  private static short \u0008;
  private static byte[] \u0005;
  private static int \u0002\u2000;
  private static int \u000F;
  private static \u0006\u2004.\u0003​\u2003\u200A\u2002\u2008\u2006\u2008\u2000\u200A\u2002\u2003\u2008\u2004​​\u2005​\u2000\u2002\u2008\u2008\u2003\u2001\u2009\u2006 \u0003;
  private static \u0006\u2004.\u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​ \u0003\u2000;
  private static \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005 \u0002;
  private static int \u0006;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0006\u2004()
  {
    int num1 = 337937577;
    int num2 = 160856612 + num1;
    \u0006\u2004.\u0002 = new \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005(-160856189 - num1 + num2);
    int skipFrames = 2;
    StackTrace stackTrace = new StackTrace(skipFrames, false);
    int index1 = skipFrames - 2;
    StackFrame frame = stackTrace.GetFrame(index1);
    int index2 = index1;
    if (frame == null)
    {
      stackTrace = new StackTrace();
      index2 = 1;
      frame = stackTrace.GetFrame(index2);
    }
    int num3 = -~-~-~~-~(num1 ^ 1290983394 ^ num2) ^ -~-~~-~-~-~(num1 - 153347010 - num2);
    MethodBase method = frame?.GetMethod();
    if (frame != null)
      num3 ^= -~~-~-~-~-~((-609254010 ^ num1) + num2);
    Type declaringType = method?.DeclaringType;
    int num4;
    if ((object) declaringType == (object) typeof (RuntimeMethodHandle))
    {
      num4 = num3 ^ (160856385 + num1 ^ num2) + index1;
      \u0006\u2004.\u0003\u2000 = (\u0006\u2004.\u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​) 4 | \u0006\u2004.\u0003\u2000;
    }
    else if ((object) declaringType == null)
    {
      if (\u0006\u2004.\u0002(stackTrace, index2))
      {
        num4 = num3 ^ -~~-~-~--~~(836707728 - num1 - num2) - index1;
        \u0006\u2004.\u0003\u2000 |= (\u0006\u2004.\u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​) 16;
      }
      else
      {
        num4 = num3 ^ -~~--~~--~~((-161418028 ^ num1) + num2);
        \u0006\u2004.\u0003\u2000 = (\u0006\u2004.\u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​) 1 | \u0006\u2004.\u0003\u2000;
      }
    }
    else
    {
      num4 = num3 ^ ~--~~-~-~(num1 + 160832573 - num2) - index1;
      \u0006\u2004.\u0003\u2000 = (\u0006\u2004.\u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​) 16 | \u0006\u2004.\u0003\u2000;
    }
    \u0006\u2004.\u0002\u2000 += num4;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static string \u0002(int _param0)
  {
    lock (\u0006\u2004.\u0002)
      return \u0006\u2004.\u0002.\u0002(_param0) ?? \u0006\u2004.\u0002(_param0, true);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static string \u0002(int _param0, bool _param1)
  {
    int num1 = -1136869716;
    int num2 = num1 ^ 48573817;
    string str1;
    byte[] numArray1;
    int num3;
    do
    {
      int num4;
      if (\u0006\u2004.\u0003 == null)
      {
        Assembly executingAssembly = Assembly.GetExecutingAssembly();
        Assembly.GetCallingAssembly();
        \u0006\u2004.\u0006 |= num1 + 45442987 - num2;
        Assembly assembly = executingAssembly;
        StringBuilder stringBuilder = new StringBuilder();
        int num5 = 1528394364 - num1 ^ num2;
        stringBuilder.Append((char) (num5 >> 16)).Append((char) num5);
        int num6 = num1 - 1528181377 + num2;
        stringBuilder.Append((char) (num6 >> 16)).Append((char) num6);
        int num7 = -1692634484 - num1 - num2;
        stringBuilder.Append((char) (num7 >> 16)).Append((char) num7);
        int num8 = (-586009954 ^ num1) + num2;
        stringBuilder.Append((char) num8).Append((char) (num8 >> 16));
        int num9 = -1692962172 - num1 - num2;
        stringBuilder.Append((char) (num9 >> 16)).Append((char) num9);
        int num10 = 585502074 ^ num1 ^ num2;
        stringBuilder.Append((char) num10).Append((char) (num10 >> 16));
        int num11 = -43824423 - num1 + num2;
        stringBuilder.Append((char) num11);
        string name = stringBuilder.ToString();
        Stream manifestResourceStream = assembly.GetManifestResourceStream(name);
        int skipFrames = 2;
        StackTrace stackTrace = new StackTrace(skipFrames, false);
        \u0006\u2004.\u0006 ^= 43839087 + num1 - num2 | skipFrames;
        int index1 = skipFrames - 2;
        StackFrame frame = stackTrace.GetFrame(index1);
        int index2 = index1;
        if (frame == null)
        {
          stackTrace = new StackTrace();
          index2 = 1;
          frame = stackTrace.GetFrame(index2);
        }
        MethodBase method = frame?.GetMethod();
        \u0006\u2004.\u0006 ^= index1 + (2065060353 - num1 ^ num2);
        Type declaringType = method?.DeclaringType;
        if (frame == null)
          \u0006\u2004.\u0006 ^= (48255524 ^ num1) - num2;
        bool flag = (object) declaringType == (object) typeof (RuntimeMethodHandle);
        \u0006\u2004.\u0006 ^= num1 + 43832521 ^ num2;
        if (!flag)
        {
          flag = (object) declaringType == null;
          if (flag)
          {
            if (\u0006\u2004.\u0002(stackTrace, index2))
              flag = false;
            else
              \u0006\u2004.\u0006 ^= (48255684 ^ num1) - num2;
          }
        }
        if (flag == (stackTrace != null))
          \u0006\u2004.\u0006 = 32 ^ \u0006\u2004.\u0006;
        \u0006\u2004.\u0006 ^= num1 + 43830279 ^ num2 | 1 + index1;
        \u0006\u2004.\u0003 = new \u0006\u2004.\u0003​\u2003\u200A\u2002\u2008\u2006\u2008\u2000\u200A\u2002\u2003\u2008\u2004​​\u2005​\u2000\u2002\u2008\u2008\u2003\u2001\u2009\u2006(manifestResourceStream);
        short num12 = (short) ((int) \u0006\u2004.\u0003.\u0002() ^ (int) (short) -~-~~--~~((48587087 ^ num1) - num2));
        if (num12 == (short) 0)
          \u0006\u2004.\u0008 = (short) ((int) \u0006\u2004.\u0003.\u0002() ^ (int) (short) ~-~--~~-~-~(num1 - 2065079345 + num2));
        else
          \u0006\u2004.\u0005 = \u0006\u2004.\u0003.\u0002((int) num12);
        \u0006\u2004.\u000E = \u0006\u2004.\u0002(\u0006\u2004.\u0002(executingAssembly));
        int num13 = \u0006\u2004.\u0002\u2000 ^ (num1 ^ -1322872305) - num2;
        \u0006\u2004.\u0002\u2000 = 0;
        long num14 = \u000F\u2004.\u0002();
        int num15 = num13 ^ (int) (uint) num14 ^ 1545453169 - num1 + num2 ^ 306225662 + num1 ^ num2;
        int num16 = num15;
        int num17 = 0;
        int num18 = num16;
        int num19 = num18;
        \u000E<int> obj = ((\u0005<int>) new \u0002.\u0002(2065060479 - num1 - num2)
        {
          \u0006 = num19
        }).\u0003\u2008\u2007\u0002();
        try
        {
          while (obj.\u0008\u2008\u2007\u0002())
          {
            int num20 = obj.\u0008\u2008\u2007\u0002();
            num18 ^= num17 + num20;
            num17 += num18 >> 3;
          }
        }
        finally
        {
          obj?.\u0006\u2008\u2007\u0002();
        }
        int num21 = num18 ^ num1 ^ 2118888518 ^ num2;
        int num22 = num15 ^ -43117559 - num1 + num2 + -~~--~~--~~(-48573513 ^ num1 ^ num2);
        int num23 = num21 * (-43827324 - num1 + num2) % (54665100 + num1 ^ num2);
        num4 = (num22 ^ -~-~-~~-~(483067501 - num1 + num2)) + num23;
        \u0006\u2004.\u000F = num4;
        \u0006\u2004.\u0006 = \u0006\u2004.\u0006 & (num1 - 186012165 ^ num2) ^ 2065067269 - num1 - num2;
        if ((\u0006\u2004.\u0003\u2000 & (\u0006\u2004.\u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​) -~-~~--~~(num1 - 2065060488 ^ num2)) == (\u0006\u2004.\u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​) 0)
          \u0006\u2004.\u0006 = (num1 ^ -48518839) + num2;
      }
      else
        num4 = \u0006\u2004.\u000F;
      if (\u0006\u2004.\u0006 == (2065037083 - num1 ^ num2))
        return new string(new char[3]
        {
          (char) ((48573057 ^ num1) - num2),
          '0',
          (char) (-43832529 - num1 + num2)
        });
      int num24 = _param0 ^ (num1 ^ -2030955808) - num2 ^ num4 ^ 364226590 + num1 ^ num2;
      \u0006\u2004.\u0003.\u0002().Position = (long) num24;
      if (\u0006\u2004.\u0005 != null)
      {
        numArray1 = \u0006\u2004.\u0005;
      }
      else
      {
        short num25 = \u0006\u2004.\u0008 != (short) -1 ? \u0006\u2004.\u0008 : (short) ((int) \u0006\u2004.\u0003.\u0002() ^ (num1 ^ -48589525) + num2 ^ num24);
        if (num25 == (short) 0)
        {
          numArray1 = (byte[]) null;
        }
        else
        {
          numArray1 = \u0006\u2004.\u0003.\u0002((int) num25);
          for (int index = 0; index != numArray1.Length; index = 1 + index)
            numArray1[index] ^= (byte) (\u0006\u2004.\u000F >> ((index & 3) << 3));
        }
      }
      num3 = \u0006\u2004.\u0003.\u0002() ^ num24 ^ -~-~~-~-~-~(702112143 - num1 - num2) ^ num4;
      if (num3 == (num1 ^ -48573819) + num2)
      {
        byte[] numArray2 = \u0006\u2004.\u0003.\u0002(4);
        _param0 = -866958479 - num1 - num2 ^ num4;
        _param0 = ((int) numArray2[2] | (int) numArray2[3] << 16 | (int) numArray2[0] << 8 | (int) numArray2[1] << 24) ^ -_param0;
        str1 = \u0006\u2004.\u0002.\u0002(_param0);
      }
      else
        goto label_38;
    }
    while (str1 == null);
    return str1;
label_38:
    bool flag1 = (num3 & (num1 ^ -585444729) + num2) != 0;
    bool flag2 = (num3 & 1117574441 + num1 - num2) != 0;
    bool flag3 = (num3 & 2103651031 - num1 + num2) != 0;
    int num26 = num3 & (num1 ^ 1927622008) - num2;
    byte[] numArray3 = numArray1;
    byte[] numArray4 = \u0006\u2004.\u0003.\u0002(num26);
    byte[] numArray5 = numArray3;
    byte num27 = numArray5[1];
    int length1 = numArray4.Length;
    byte num28 = (byte) (length1 + 11 ^ 7 + (int) num27);
    uint num29 = (uint) (((int) numArray5[0] | (int) numArray5[2] << 8) + ((int) num28 << 3));
    ushort num30 = 0;
    int index3 = 0;
    while (index3 < length1)
    {
      if ((1 & index3) == 0)
      {
        num29 = (uint) ((int) num29 * (num1 - 2064846468 + num2) + (2067516354 - num1 ^ num2));
        num30 = (ushort) (num29 >> 16);
      }
      byte num31 = (byte) num30;
      num30 >>= 8;
      byte num32 = numArray4[index3];
      numArray4[index3] = (byte) ((uint) ((int) num32 ^ (int) num27 ^ 3 + (int) num28) ^ (uint) num31);
      index3 = 1 + index3;
      num28 = num32;
    }
    byte[] numArray6 = numArray4;
    if (\u0006\u2004.\u000E != null != (\u0006\u2004.\u0006 != (-50181603 ^ num1) + num2))
    {
      for (int index4 = 0; index4 < num26; index4 = 1 + index4)
      {
        byte num33 = \u0006\u2004.\u000E[index4 & 7];
        byte num34 = (byte) ((int) num33 << 3 | (int) num33 >> 5);
        numArray6[index4] = (byte) ((uint) numArray6[index4] ^ (uint) num34);
      }
    }
    int num35 = \u0006\u2004.\u0006 - 12;
    byte[] bytes;
    int length2;
    if (!flag2)
    {
      bytes = numArray6;
      length2 = num26;
    }
    else
    {
      length2 = (int) numArray6[2] | (int) numArray6[0] << 16 | (int) numArray6[3] << 8 | (int) numArray6[1] << 24;
      bytes = new byte[length2];
      \u0006\u2004.\u0002(numArray6, 4, bytes);
    }
    string str2;
    if (flag1 && num35 == (num1 + 42228995 ^ num2))
    {
      char[] chArray = new char[length2];
      for (int index5 = 0; index5 < length2; ++index5)
        chArray[index5] = (char) bytes[index5];
      str2 = new string(chArray);
    }
    else
      str2 = Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    int num36 = num35 + (2065060608 - num1 - num2 + (num35 & 3) << 5);
    if (num36 != (50181603 ^ num1 ^ num2))
    {
      int num37 = num26 + _param0 ^ -42896049 - num1 + num2 ^ num36 & (num1 + 43833388 ^ num2);
      ref int local = ref num37;
      StringBuilder stringBuilder = new StringBuilder();
      int num38 = -43832529 - num1 + num2;
      stringBuilder.Append((char) (byte) num38);
      string format = stringBuilder.ToString();
      str2 = local.ToString(format);
    }
    if (!flag3 & _param1)
    {
      str2 = string.Intern(str2);
      \u0006\u2004.\u0002.\u0002(_param0, str2);
      if (\u0006\u2004.\u0002.\u0002() == 43833040 + num1 - num2)
      {
        \u0006\u2004.\u0003.\u0003();
        \u0006\u2004.\u0003 = (\u0006\u2004.\u0003​\u2003\u200A\u2002\u2008\u2006\u2008\u2000\u200A\u2002\u2003\u2008\u2004​​\u2005​\u2000\u2002\u2008\u2008\u2003\u2001\u2009\u2006) null;
        \u0006\u2004.\u0005 = (byte[]) null;
        \u0006\u2004.\u000E = (byte[]) null;
      }
    }
    return str2;
  }

  private static AssemblyName \u0002(Assembly _param0)
  {
    try
    {
      return _param0.GetName();
    }
    catch
    {
      return new AssemblyName(_param0.FullName);
    }
  }

  private static byte[] \u0002(AssemblyName _param0)
  {
    byte[] numArray = _param0.GetPublicKeyToken();
    if (numArray != null && numArray.Length == 0)
      numArray = (byte[]) null;
    return numArray;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0002(StackTrace _param0, int _param1)
  {
    Assembly assembly = _param0.GetFrame(_param1 + 1)?.GetMethod()?.DeclaringType?.Assembly;
    if ((object) assembly != null)
    {
      byte[] numArray = \u0006\u2004.\u0002(\u0006\u2004.\u0002(assembly));
      if (numArray != null && numArray.Length == 8 && numArray[0] == (byte) 183 && numArray[7] == (byte) 137)
        return true;
    }
    return false;
  }

  private static void \u0002(byte[] _param0, int _param1, byte[] _param2)
  {
    int num1 = 0;
    int num2 = 0;
    int num3 = 128;
    int length = _param2.Length;
label_10:
    while (num1 < length)
    {
      if ((num3 <<= 1) == 256)
      {
        num3 = 1;
        num2 = (int) _param0[_param1++];
      }
      if ((num2 & num3) != 0)
      {
        int num4 = ((int) _param0[_param1] >> 2) + 3;
        int num5 = ((int) _param0[_param1] << 8 | (int) _param0[_param1 + 1]) & 1023;
        _param1 += 2;
        int num6 = num1 - num5;
        if (num6 < 0)
          break;
        while (true)
        {
          if (--num4 >= 0 && num1 < length)
            _param2[num1++] = _param2[num6++];
          else
            goto label_10;
        }
      }
      else
        _param2[num1++] = _param0[_param1++];
    }
  }

  private sealed class \u0003​\u2003\u200A\u2002\u2008\u2006\u2008\u2000\u200A\u2002\u2003\u2008\u2004​​\u2005​\u2000\u2002\u2008\u2008\u2003\u2001\u2009\u2006
  {
    private Stream \u0002;
    private byte[] \u0003;

    public \u0003​\u2003\u200A\u2002\u2008\u2006\u2008\u2000\u200A\u2002\u2003\u2008\u2004​​\u2005​\u2000\u2002\u2008\u2008\u2003\u2001\u2009\u2006(
      Stream _param1)
    {
      this.\u0002 = _param1;
      this.\u0003 = new byte[4];
    }

    public Stream \u0002() => this.\u0002;

    public short \u0002()
    {
      this.\u0002(2);
      return (short) ((int) this.\u0003[0] | (int) this.\u0003[1] << 8);
    }

    public int \u0002()
    {
      this.\u0002(4);
      return (int) this.\u0003[0] | (int) this.\u0003[1] << 8 | (int) this.\u0003[2] << 16 | (int) this.\u0003[3] << 24;
    }

    private void \u0002() => throw new EndOfStreamException();

    private void \u0002(int _param1)
    {
      int offset = 0;
      if (_param1 == 1)
      {
        int num = this.\u0002.ReadByte();
        if (num == -1)
          this.\u0002();
        this.\u0003[0] = (byte) num;
      }
      else
      {
        do
        {
          int num = this.\u0002.Read(this.\u0003, offset, _param1 - offset);
          if (num == 0)
            this.\u0002();
          offset += num;
        }
        while (offset < _param1);
      }
    }

    public void \u0003()
    {
      Stream stream = this.\u0002;
      this.\u0002 = (Stream) null;
      stream?.Close();
      this.\u0003 = (byte[]) null;
    }

    public byte[] \u0002(int _param1)
    {
      byte[] numArray = _param1 >= 0 ? new byte[_param1] : throw new ArgumentOutOfRangeException();
      int length = 0;
      do
      {
        int num = this.\u0002.Read(numArray, length, _param1);
        if (num != 0)
        {
          length += num;
          _param1 -= num;
        }
        else
          break;
      }
      while (_param1 > 0);
      if (length != numArray.Length)
      {
        byte[] dst = new byte[length];
        Buffer.BlockCopy((Array) numArray, 0, (Array) dst, 0, length);
        numArray = dst;
      }
      return numArray;
    }
  }

  private enum \u0005\u2007\u2000\u2002\u200A\u2006\u2002\u2009\u2000\u2009\u2006\u2006\u2000\u2000\u2004​
  {
  }

  internal sealed class \u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005
  {
    private \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[] \u0002;
    private int \u0003;

    public \u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005() => this.\u0002 = new \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[16];

    public \u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005(int _param1)
    {
      int length = 16;
      _param1 <<= 1;
      while (length < _param1 && length > 0)
        length <<= 1;
      if (length < 0)
        length = 16;
      this.\u0002 = new \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[length];
    }

    public int \u0002() => this.\u0003;

    private void \u0002()
    {
      \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[] objArray1 = this.\u0002;
      int length1 = objArray1.Length;
      int length2 = length1 * 2;
      if (length2 <= 0)
        return;
      \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[] objArray2 = new \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[length2];
      int num1 = 0;
      for (int index1 = 0; index1 < length1; ++index1)
      {
        string str = objArray1[index1].\u0003;
        if (str != null)
        {
          int num2 = objArray1[index1].\u0002;
          int index2 = num2 & length2 - 1;
          while (objArray2[index2].\u0003 != null)
          {
            ++index2;
            if (index2 >= length2)
              index2 = 0;
          }
          objArray2[index2].\u0003 = str;
          objArray2[index2].\u0002 = num2;
          ++num1;
        }
      }
      this.\u0002 = objArray2;
      this.\u0003 = num1;
    }

    public string \u0002(int _param1)
    {
      \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[] objArray = this.\u0002;
      int length = objArray.Length;
      int index = _param1 & length - 1;
      string str = (string) null;
      while (objArray[index].\u0002 != _param1)
      {
        if (objArray[index].\u0003 != null)
        {
          ++index;
          if (index >= length)
            index = 0;
        }
        else
          goto label_6;
      }
      str = objArray[index].\u0003;
label_6:
      return str;
    }

    public void \u0002(int _param1, string _param2)
    {
      \u0006\u2004.\u000F​\u2001\u2008\u2003\u2000\u2007\u2002\u2009\u2001\u2004\u2005.\u0002[] objArray = this.\u0002;
      int length = objArray.Length;
      int num1 = length >> 1;
      int index = _param1 & length - 1;
      while (true)
      {
        do
        {
          int num2 = objArray[index].\u0002;
          bool flag = objArray[index].\u0003 == null;
          if (num2 == _param1 | flag)
          {
            objArray[index].\u0003 = _param2;
            if (!flag)
              return;
            objArray[index].\u0002 = _param1;
            ++this.\u0003;
            if (this.\u0003 <= num1)
              return;
            this.\u0002();
            return;
          }
          ++index;
        }
        while (index < length);
        index = 0;
      }
    }

    private struct \u0002
    {
      public int \u0002;
      public string \u0003;
    }
  }
}
