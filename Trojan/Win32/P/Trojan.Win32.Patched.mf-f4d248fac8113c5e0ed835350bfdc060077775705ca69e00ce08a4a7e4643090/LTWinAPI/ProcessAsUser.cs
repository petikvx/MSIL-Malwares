// Decompiled with JetBrains decompiler
// Type: LTSvcMon.LTWinAPI.ProcessAsUser
// Assembly: LTSvcMon, Version=40.101.4107.19874, Culture=neutral, PublicKeyToken=null
// MVID: 816B70F7-DB44-4BCA-BD08-988C39A8AB45
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Patched.mf-f4d248fac8113c5e0ed835350bfdc060077775705ca69e00ce08a4a7e4643090.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace LTSvcMon.LTWinAPI
{
  internal class ProcessAsUser
  {
    private const short SW_SHOW = 5;
    private const short SW_SHOWMAXIMIZED = 7;
    private const int TOKEN_QUERY = 8;
    private const int TOKEN_DUPLICATE = 2;
    private const int TOKEN_ASSIGN_PRIMARY = 1;
    private const int GENERIC_ALL_ACCESS = 268435456;
    private const int STARTF_USESHOWWINDOW = 1;
    private const int STARTF_FORCEONFEEDBACK = 64;
    private const int CREATE_UNICODE_ENVIRONMENT = 1024;
    private const int TOKEN_READ = 131080;
    private const int SECURITY_BUILTIN_DOMAIN_RID = 32;
    private const int SECURITY_NT_AUTHORITY = 5;
    private const int PROCESS_QUERY_INFORMATION = 1024;
    private const int PROCESS_VM_READ = 16;
    private const int DOMAIN_ALIAS_RID_USERS = 545;
    private const int TokenUser = 1;

    [DllImport("advapi32", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool CreateProcessAsUser(
      IntPtr hToken,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string strApplicationName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string strCommandLine,
      ref SECURITY_ATTRIBUTES lpProcessAttributes,
      ref SECURITY_ATTRIBUTES lpThreadAttributes,
      bool bInheritHandles,
      int dwCreationFlags,
      IntPtr lpEnvironment,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCurrentDriectory,
      ref STARTUPINFO lpStartupInfo,
      ref PROCESS_INFORMATION lpProcessInformation);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool DuplicateTokenEx(
      IntPtr hExistingToken,
      uint dwDesiredAccess,
      ref SECURITY_ATTRIBUTES lpThreadAttributes,
      int ImpersonationLevel,
      int dwTokenType,
      ref IntPtr phNewToken);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool OpenProcessToken(
      IntPtr ProcessHandle,
      int DesiredAccess,
      ref IntPtr TokenHandle);

    [DllImport("userenv.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool CreateEnvironmentBlock(
      ref IntPtr lpEnvironment,
      IntPtr hToken,
      bool bInherit);

    [DllImport("userenv.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool DestroyEnvironmentBlock(IntPtr lpEnvironment);

    [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr OpenProcess(
      int dwDesiredAccess,
      bool bInheritHandle,
      int dwProcessId);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool GetTokenInformation(
      IntPtr TokenHandle,
      int TokenInformationClass,
      TOKEN_USER TokenInformation,
      int TokenInformationLength,
      ref int ReturnLength);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool GetTokenInformation(
      IntPtr TokenHandle,
      int TokenInformationClass,
      IntPtr TokenInformation,
      int TokenInformationLength,
      ref int ReturnLength);

    private static bool LaunchProcessAsUser(string cmdLine, IntPtr token, IntPtr envBlock)
    {
      bool flag;
      try
      {
        PROCESS_INFORMATION processInformation = new PROCESS_INFORMATION();
        SECURITY_ATTRIBUTES structure1 = new SECURITY_ATTRIBUTES();
        SECURITY_ATTRIBUTES structure2 = new SECURITY_ATTRIBUTES();
        structure1.nLength = (int) Convert.ToUInt32(Marshal.SizeOf((object) structure1));
        structure2.nLength = (int) Convert.ToUInt32(Marshal.SizeOf((object) structure2));
        STARTUPINFO structure3 = new STARTUPINFO();
        structure3.cb = (int) Convert.ToUInt32(Marshal.SizeOf((object) structure3));
        structure3.lpDesktop = (string) null;
        structure3.dwFlags = (int) Convert.ToUInt32(65);
        structure3.wShowWindow = (short) 5;
        IntPtr hToken = token;
        string str1 = (string) null;
        ref string local1 = ref str1;
        ref string local2 = ref cmdLine;
        SECURITY_ATTRIBUTES securityAttributes1;
        SECURITY_ATTRIBUTES securityAttributes2 = securityAttributes1;
        ref SECURITY_ATTRIBUTES local3 = ref securityAttributes2;
        SECURITY_ATTRIBUTES securityAttributes3 = securityAttributes1;
        ref SECURITY_ATTRIBUTES local4 = ref securityAttributes3;
        IntPtr lpEnvironment = envBlock;
        string str2 = (string) null;
        ref string local5 = ref str2;
        ref STARTUPINFO local6 = ref structure3;
        ref PROCESS_INFORMATION local7 = ref processInformation;
        bool processAsUser = ProcessAsUser.CreateProcessAsUser(hToken, ref local1, ref local2, ref local3, ref local4, false, 1024, lpEnvironment, ref local5, ref local6, ref local7);
        if (!processAsUser)
          LogError.LogEvent(string.Format("CreateProcessAsUser Error: {0}", (object) Marshal.GetLastWin32Error()) + cmdLine);
        flag = processAsUser;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    private static IntPtr GetPrimaryToken(int processId)
    {
      IntPtr primaryToken;
      try
      {
        IntPtr zero1 = IntPtr.Zero;
        IntPtr zero2 = IntPtr.Zero;
        Process processById;
        try
        {
          processById = Process.GetProcessById(processId);
        }
        catch (ArgumentException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          LogError.LogEvent(string.Format("ProcessID {0} Not Available", (object) processId));
          primaryToken = zero2;
          ProjectData.ClearProjectError();
          goto label_9;
        }
        if (ProcessAsUser.OpenProcessToken(processById.Handle, 2, ref zero1))
        {
          SECURITY_ATTRIBUTES lpThreadAttributes = new SECURITY_ATTRIBUTES();
          lpThreadAttributes.nLength = (int) Convert.ToUInt32(Marshal.SizeOf((object) lpThreadAttributes));
          if (!ProcessAsUser.DuplicateTokenEx(zero1, Convert.ToUInt32(11), ref lpThreadAttributes, 1, 1, ref zero2))
            LogError.LogEvent(string.Format("DuplicateTokenEx Error: {0}", (object) Marshal.GetLastWin32Error()));
        }
        else
          LogError.LogEvent(string.Format("OpenProcessToken Error: {0}", (object) Marshal.GetLastWin32Error()));
        primaryToken = zero2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_9:
      return primaryToken;
    }

    private static IntPtr GetEnvironmentBlock(IntPtr token)
    {
      IntPtr environmentBlock;
      try
      {
        IntPtr zero = IntPtr.Zero;
        if (!ProcessAsUser.CreateEnvironmentBlock(ref zero, token, false))
          string.Format("CreateEnvironmentBlock Error: {0}", (object) Marshal.GetLastWin32Error());
        environmentBlock = zero;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return environmentBlock;
    }

    public static bool Launch(string appCmdLine, int processid = -1)
    {
      bool flag = false;
      if (processid == -1)
      {
        Process[] processesByName = Process.GetProcessesByName("explorer");
        if (processesByName.Length > 0)
          processid = processesByName[0].Id;
      }
      if (processid > 1)
      {
        IntPtr primaryToken = ProcessAsUser.GetPrimaryToken(processid);
        if (!primaryToken.Equals((object) IntPtr.Zero))
        {
          IntPtr environmentBlock = ProcessAsUser.GetEnvironmentBlock(primaryToken);
          flag = ProcessAsUser.LaunchProcessAsUser(appCmdLine, primaryToken, environmentBlock);
          LogError.LogEvent("Launched " + Conversions.ToString(flag) + " " + appCmdLine);
          if (!environmentBlock.Equals((object) IntPtr.Zero))
            ProcessAsUser.DestroyEnvironmentBlock(environmentBlock);
        }
        else
          LogError.LogEvent("Could Not get Token");
      }
      return flag;
    }

    public static string GetProcessUserName(int ProcessID)
    {
      string processUserName;
      try
      {
        string str = "";
        TOKEN_USER tokenUser1 = new TOKEN_USER();
        IntPtr zero = IntPtr.Zero;
        IntPtr num1 = ProcessAsUser.OpenProcess(1040, false, ProcessID);
        if (!num1.Equals((object) IntPtr.Zero))
        {
          IntPtr TokenHandle;
          if (ProcessAsUser.OpenProcessToken(num1, 131080, ref TokenHandle))
          {
            int TokenInformationLength1;
            int ReturnLength;
            int num2 = -(ProcessAsUser.GetTokenInformation(TokenHandle, 1, IntPtr.Zero, TokenInformationLength1, ref ReturnLength) ? 1 : 0);
            if (ReturnLength > 0)
            {
              IntPtr num3 = Marshal.AllocHGlobal(Convert.ToInt32(ReturnLength));
              int TokenInformationLength2 = ReturnLength;
              if (ProcessAsUser.GetTokenInformation(TokenHandle, 1, num3, TokenInformationLength2, ref ReturnLength))
              {
                int cbName = 0;
                int cbDomainName = 0;
                object structure = Marshal.PtrToStructure(num3, typeof (TOKEN_USER));
                TOKEN_USER tokenUser2;
                TOKEN_USER tokenUser3 = structure != null ? (TOKEN_USER) structure : tokenUser2;
                string lpSystemName = (string) null;
                int peUse;
                num2 = LibWrap.LookupAccountSid(ref lpSystemName, tokenUser3.User.Sid, (StringBuilder) null, ref cbName, (StringBuilder) null, ref cbDomainName, ref peUse);
                StringBuilder Account = new StringBuilder(cbName);
                StringBuilder DomainName = new StringBuilder(cbDomainName);
                lpSystemName = (string) null;
                num2 = LibWrap.LookupAccountSid(ref lpSystemName, tokenUser3.User.Sid, Account, ref cbName, DomainName, ref cbDomainName, ref peUse);
                str = Strings.Replace(Strings.Trim(Account.ToString()), "\0", "");
              }
            }
          }
          if (!TokenHandle.Equals((object) IntPtr.Zero))
            LibWrap.CloseHandle(TokenHandle);
          LibWrap.CloseHandle(num1);
        }
        processUserName = str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        LogError.LogEvent("GPU " + ex.Message);
        processUserName = "";
        ProjectData.ClearProjectError();
      }
      return processUserName;
    }
  }
}
