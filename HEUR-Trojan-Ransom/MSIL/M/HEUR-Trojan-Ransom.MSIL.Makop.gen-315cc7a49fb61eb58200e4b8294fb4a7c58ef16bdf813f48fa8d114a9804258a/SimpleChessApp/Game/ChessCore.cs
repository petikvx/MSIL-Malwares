// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: Gز, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19F72CF4-8E17-4C69-9694-AAB2F68A841C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-315cc7a49fb61eb58200e4b8294fb4a7c58ef16bdf813f48fa8d114a9804258a.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = -556709528;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -759594170)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 314199526 ^ 719016212;
            continue;
          case 2:
            this.ChessBoard = b;
            this.resetFlags();
            num1 = (int) num2 * 1070190970 ^ 1898732819;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public ChessCore()
    {
label_1:
      int num1 = -211690721;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1153044191)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1207855918 ^ -1495180885;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void RestartGame()
    {
      this.resetFlags();
label_1:
      int num1 = -146828655;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -247811781)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1159619983 ^ 1228133666;
            continue;
          case 2:
            num1 = (int) num2 * 679252050 ^ -840991990;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.ChessBoard.Restart();
            num1 = (int) num2 * -821109837 ^ 72362117;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void resetFlags(bool turn = false)
    {
      this.DisableTurn = turn;
label_1:
      int num1 = -368445371;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -843476309)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.WhosPlaying = PieceColor.White;
            this.TurnId = 1;
            num1 = (int) num2 * -1776335891 ^ -1908967743;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.lastCheckPiece = (Square) null;
      this.Turns.Clear();
    }

    internal void TestPassant()
    {
      new DebugChess(this.ChessBoard).TestPassant();
label_1:
      int num1 = 525523070;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1726950411)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 2107121046 ^ 1350814632;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestSinglePiece(Pieces x)
    {
      new DebugChess(this.ChessBoard).TestSinglePiece(x);
label_1:
      int num1 = 1472996463;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1495094560)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * -537343776 ^ 1248600014;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = 713881432;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 325508207)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -695444146 ^ -1440899932;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -1529580913 ^ -500257802;
            continue;
          case 4:
            new DebugChess(this.ChessBoard).TestCastling();
            num1 = (int) num2 * 1192327808 ^ -359943600;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -788656503;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1775933073)) % 3U)
        {
          case 1:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * -1517821043 ^ 1128134500;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.resetFlags(true);
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
      this.resetFlags(true);
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -2003632760;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -79160783)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * -487236160 ^ 1465026359;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 2004865835 ^ 1637574780;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = 1449241414;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1945119525)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).CheckOnCastling();
            num1 = (int) num2 * 1744123465 ^ 650531975;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.resetFlags(true);
    }
  }
}
