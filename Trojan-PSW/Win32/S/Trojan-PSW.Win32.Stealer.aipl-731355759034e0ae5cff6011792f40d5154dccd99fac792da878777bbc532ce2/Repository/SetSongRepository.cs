// Decompiled with JetBrains decompiler
// Type: Repository.SetSongRepository
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Exceptions;
using Core.Helpers;
using Core.Infrastructure.Logging;
using DomainObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace Repository
{
  public class SetSongRepository : BaseRepository<ISetSong, SetSong>, ISetSongRepository
  {
    private LogWriter writer = new LogWriter();

    public SetSongRepository(IDatabase database)
      : base(database)
    {
    }

    public SetSongRepository(IDatabaseFactory factory)
      : base(factory)
    {
    }

    private IQueryable<ISetSong> GetAll() => this.Database.SetSongDataSource.Where<ISetSong>((Expression<Func<ISetSong, bool>>) (setSong => setSong.Deleted == false));

    public IQueryable<ISetSong> FindAll() => this.GetAll();

    public ISetSong FindBySetSongId(Guid id) => this.GetAll().SingleOrDefault<ISetSong>((Expression<Func<ISetSong, bool>>) (x => x.SetSongId == id));

    public IList<ISetSong> FindBySetId(Guid id) => (IList<ISetSong>) this.GetAll().Where<ISetSong>((Expression<Func<ISetSong, bool>>) (x => x.SetId == (Guid?) id)).OrderBy<ISetSong, short?>((Expression<Func<ISetSong, short?>>) (y => y.Order)).ToList<ISetSong>();

    public override void Add(ISetSong entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      entity.CreatedDate = DateTime.Now;
      if (this.GetAll().Any<ISetSong>((Expression<Func<ISetSong, bool>>) (x => x.SetSongId == entity.SetSongId)))
      {
        this.writer.WriteLine("A SetSong with an id={0}".FormatWith((object) entity.SetSongId));
        throw new AlreadyExistsException("A SetSong with an id={0}".FormatWith((object) entity.SetSongId));
      }
      base.Add(entity);
    }

    public override void Remove(ISetSong entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      base.Remove(entity);
    }
  }
}
