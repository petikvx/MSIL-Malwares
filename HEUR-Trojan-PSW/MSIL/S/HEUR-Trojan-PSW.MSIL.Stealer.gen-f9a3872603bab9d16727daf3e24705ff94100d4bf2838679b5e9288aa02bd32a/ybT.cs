// Decompiled with JetBrains decompiler
// Type: ib.ybT
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace ib
{
  public class ybT : RichTextBox
  {
    private bool tMd;
    private int UMw;
    private int tMi;
    private Point CMQ;
    internal static ybT HKv;

    [SpecialName]
    public bool WMf() => this.tMd;

    [SpecialName]
    public void IMh(bool _param1)
    {
      if (this.tMd || !_param1)
        goto label_3;
      else
        goto label_9;
label_1:
      int num1;
      int num2 = num1;
label_2:
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_6;
          case 2:
            goto label_4;
          default:
            this.FMU(this.CMQ);
            this.Enabled = true;
            num2 = 2;
            continue;
        }
      }
label_4:
      ybT.dKQ((object) this);
      goto label_7;
label_6:
      this.CMQ = this.FMv();
      this.Enabled = false;
      goto label_7;
label_3:
      if (!_param1)
      {
        this.UMw = this.SelectionStart;
        this.tMi = ybT.dK3((object) this);
        num2 = 1;
        if (ybT.oKC() == null)
          goto label_2;
        else
          goto label_1;
      }
label_7:
      this.tMd = _param1;
      return;
label_9:
      this.Select(this.UMw, this.tMi);
      if (ybT.eKZ())
      {
        num2 = 0;
        goto label_2;
      }
      else
        goto label_1;
    }

    protected override void WndProc(ref Message _param1)
    {
      int num1 = 2;
label_1:
      int num2 = num1;
      bool flag;
      while (true)
      {
        switch (num2)
        {
          case 1:
            if (!flag)
            {
              base.WndProc(ref _param1);
              if (ybT.eKZ())
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            }
            else
              goto label_7;
          case 2:
            flag = _param1.Msg == 15;
            if (ybT.oKC() == null)
            {
              num2 = 1;
              continue;
            }
            goto label_1;
          default:
            goto label_8;
        }
      }
label_7:
      if (!this.WMf())
      {
        _param1.Result = IntPtr.Zero;
        return;
      }
      base.WndProc(ref _param1);
      return;
label_8:;
    }

    private unsafe Point FMv()
    {
      ybT.abs abs = new ybT.abs();
      IntPtr lparam = new IntPtr((void*) &abs);
      Message m = Message.Create(this.Handle, 1245, IntPtr.Zero, lparam);
      this.WndProc(ref m);
      Point point = new Point(abs.t1x, abs.U1v);
      int num1 = 0;
      if (!ybT.eKZ())
        goto label_2;
label_1:
      switch (num1)
      {
        default:
          return point;
      }
label_2:
      int num2;
      num1 = num2;
      goto label_1;
    }

    private unsafe void FMU(Point _param1)
    {
      IntPtr num1 = new IntPtr((void*) &new ybT.abs()
      {
        t1x = _param1.X,
        U1v = _param1.Y
      });
      Message m = ybT.bKE(this.Handle, 1246, IntPtr.Zero, num1);
      int num2 = 0;
      if (!ybT.eKZ())
        goto label_3;
label_1:
      switch (num2)
      {
        default:
          this.WndProc(ref m);
          return;
      }
label_3:
      int num3;
      num2 = num3;
      goto label_1;
    }

    public ybT()
    {
      Jnb.vbPcO4();
      this.tMd = true;
      this.UMw = 0;
      this.tMi = 0;
      this.CMQ = new Point();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num = 0;
      if (true)
        num = 0;
      switch (num)
      {
      }
    }

    internal static bool eKZ() => ybT.HKv == null;

    internal static ybT oKC() => ybT.HKv;

    internal static bool dKQ([In] object obj0) => ((Control) obj0).Focus();

    internal static int dK3([In] object obj0) => ((TextBoxBase) obj0).SelectionLength;

    internal static Message bKE([In] IntPtr obj0, [In] int obj1, [In] IntPtr obj2, [In] IntPtr obj3) => Message.Create(obj0, obj1, obj2, obj3);

    private struct abs
    {
      public int t1x;
      public int U1v;
    }
  }
}
