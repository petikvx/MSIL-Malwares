// Decompiled with JetBrains decompiler
// Type: ⁮⁮‫⁫⁯‫‪‍⁪‏‎‍⁬⁭⁮⁮‌‫⁬‪‏⁮‪‭‭‪‬⁬⁪⁯‭‎‮⁭‍‍‭⁭‍‬‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections;

public class \u206E⁮‫⁫⁯‫‪‍⁪‏‎‍⁬⁭⁮⁮‌‫⁬‪‏⁮‪‭‭‪‬⁬⁪⁯‭‎‮⁭‍‍‭⁭‍‬‮ : 
  \u202C‪⁪⁮‬⁯⁯‫​‮‮⁯⁯‮‭‬‏⁮‮‭‏‬​‎⁫‏⁫⁮⁮⁭⁯⁬​‏‬‭​‪⁮⁭‮
{
  private readonly IDictionary \u202B⁫‫⁯‍‍⁭‌‪​‬‮‪‏⁬​‫⁬‭‬⁬‬‬⁮‌⁬‭‎⁮⁯‪​‮⁯‌‮‏‎‎‪‮ = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u206D‬⁫‏‮‎‪‏‫⁪⁬⁭‭⁯⁯‎‫‪⁫‫⁯‌⁯​⁬‍‍⁮‪⁫‮‫‎‬‌⁮‎⁪‎‬‮();
  private readonly IDictionary \u202B⁪⁭‫⁯‎‍⁮‭⁯⁬‍‭‮⁫⁪⁬⁪‫‮⁪‭​⁯‍‎‏‪‮‬⁫⁪‏‮‫‬‎‎‮‍‮ = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u206D‬⁫‏‮‎‪‏‫⁪⁬⁭‭⁯⁯‎‫‪⁫‫⁯‌⁯​⁬‍‍⁮‪⁫‮‫‎‬‌⁮‎⁪‎‬‮();

  public \u206E⁮‫⁫⁯‫‪‍⁪‏‎‍⁬⁭⁮⁮‌‫⁬‪‏⁮‪‭‭‪‬⁬⁪⁯‭‎‮⁭‍‍‭⁭‍‬‮(string _param1)
    : this(_param1.ToCharArray())
  {
  }

  public \u206E⁮‫⁫⁯‫‪‍⁪‏‎‍⁬⁭⁮⁮‌‫⁬‪‏⁮‪‭‭‪‬⁬⁪⁯‭‎‮⁭‍‍‭⁭‍‬‮(char[] _param1)
  {
    for (int key = 0; key != _param1.Length; ++key)
    {
      if (this.\u202B⁫‫⁯‍‍⁭‌‪​‬‮‪‏⁬​‫⁬‭‬⁬‬‬⁮‌⁬‭‎⁮⁯‪​‮⁯‌‮‏‎‎‪‮.Contains((object) _param1[key]))
        throw new ArgumentException("duplicate key detected in alphabet: " + _param1[key].ToString());
      this.\u202B⁫‫⁯‍‍⁭‌‪​‬‮‪‏⁬​‫⁬‭‬⁬‬‬⁮‌⁬‭‎⁮⁯‪​‮⁯‌‮‏‎‎‪‮.Add((object) _param1[key], (object) key);
      this.\u202B⁪⁭‫⁯‎‍⁮‭⁯⁬‍‭‮⁫⁪⁬⁪‫‮⁪‭​⁯‍‎‏‪‮‬⁫⁪‏‮‫‬‎‎‮‍‮.Add((object) key, (object) _param1[key]);
    }
  }

  public int \u206C​‪​⁭⁬⁪⁪⁭⁬‪‏‫⁬‮⁯‌‍⁯​‌⁯⁬‮‍‬‍‪‪⁯‬‫⁪⁬⁮‪⁮⁯‮⁯‮ => this.\u202B⁫‫⁯‍‍⁭‌‪​‬‮‪‏⁬​‫⁬‭‬⁬‬‬⁮‌⁬‭‎⁮⁯‪​‮⁯‌‮‏‎‎‪‮.Count;

  public byte[] \u206B⁬‮⁮‪⁮⁫⁪⁯​⁫⁪‫⁯‪⁪‮‭‭‪⁪‫‪‪⁮⁫⁭‍⁭⁫⁬⁪⁪⁬‍‮​‏⁭‪‮(char[] _param1)
  {
    byte[] numArray;
    if (this.\u202B⁫‫⁯‍‍⁭‌‪​‬‮‪‏⁬​‫⁬‭‬⁬‬‬⁮‌⁬‭‎⁮⁯‪​‮⁯‌‮‏‎‎‪‮.Count <= 256)
    {
      numArray = new byte[_param1.Length];
      for (int index = 0; index != _param1.Length; ++index)
        numArray[index] = (byte) (int) this.\u202B⁫‫⁯‍‍⁭‌‪​‬‮‪‏⁬​‫⁬‭‬⁬‬‬⁮‌⁬‭‎⁮⁯‪​‮⁯‌‮‏‎‎‪‮[(object) _param1[index]];
    }
    else
    {
      numArray = new byte[_param1.Length * 2];
      for (int index = 0; index != _param1.Length; ++index)
      {
        int num = (int) this.\u202B⁫‫⁯‍‍⁭‌‪​‬‮‪‏⁬​‫⁬‭‬⁬‬‬⁮‌⁬‭‎⁮⁯‪​‮⁯‌‮‏‎‎‪‮[(object) _param1[index]];
        numArray[index * 2] = (byte) (num >> 8 & (int) byte.MaxValue);
        numArray[index * 2 + 1] = (byte) (num & (int) byte.MaxValue);
      }
    }
    return numArray;
  }

  public char[] \u200E‎⁫‮⁫⁮‬‪‮⁬‍‭‌⁫‫​⁬⁭‬‬‮‪⁫⁪⁭‌‍⁪‮⁭​⁬⁮‫⁪‫‪‎‮(byte[] _param1)
  {
    char[] chArray;
    if (this.\u202B⁪⁭‫⁯‎‍⁮‭⁯⁬‍‭‮⁫⁪⁬⁪‫‮⁪‭​⁯‍‎‏‪‮‬⁫⁪‏‮‫‬‎‎‮‍‮.Count <= 256)
    {
      chArray = new char[_param1.Length];
      for (int index = 0; index != _param1.Length; ++index)
        chArray[index] = (char) this.\u202B⁪⁭‫⁯‎‍⁮‭⁯⁬‍‭‮⁫⁪⁬⁪‫‮⁪‭​⁯‍‎‏‪‮‬⁫⁪‏‮‫‬‎‎‮‍‮[(object) ((int) _param1[index] & (int) byte.MaxValue)];
    }
    else
    {
      chArray = (_param1.Length & 1) == 0 ? new char[_param1.Length / 2] : throw new ArgumentException("two byte radix and input string odd.Length");
      for (int index = 0; index != _param1.Length; index += 2)
        chArray[index / 2] = (char) this.\u202B⁪⁭‫⁯‎‍⁮‭⁯⁬‍‭‮⁫⁪⁬⁪‫‮⁪‭​⁯‍‎‏‪‮‬⁫⁪‏‮‫‬‎‎‮‍‮[(object) ((int) _param1[index] << 8 & 65280 | (int) _param1[index + 1] & (int) byte.MaxValue)];
    }
    return chArray;
  }
}
