// Decompiled with JetBrains decompiler
// Type: Installer.Files.CResources
// Assembly: Installer, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1758E6E6-4A2C-4F5D-B94B-6A8535362219
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00035-msil\Trojan-Ransom.MSIL.FakeInstaller.a-6c0924068a74669c4665833a5937d0a495840a07afb8b294762a7938eb0f7183.exe.exe

using System;
using System.IO;
using System.Reflection;

namespace Installer.Files
{
  internal static class CResources
  {
    private static Assembly _assembly;
    private static byte[] m_storage;

    private static Assembly m_assembly
    {
      get
      {
        if ((object) CResources._assembly == null)
          CResources._assembly = Assembly.GetExecutingAssembly();
        return CResources._assembly;
      }
    }

    internal static Stream GetManifestResourceStream(string resourceName)
    {
      if (CResources.m_storage == null)
      {
        Stream manifestResourceStream = CResources.m_assembly.GetManifestResourceStream("Installer.Files.storage");
        CResources.m_storage = new BinaryReader(manifestResourceStream).ReadBytes((int) manifestResourceStream.Length);
      }
      if (CResources.m_storage[0] != (byte) 39)
        return (Stream) null;
      int num1 = !(resourceName == "Installer.Files.params.txt") ? (!(resourceName == "Installer.Files.installer.bmp") ? (!(resourceName == "Installer.Files.otherCountries.bmp") ? 3 : 2) : 1) : 0;
      long index1 = 1;
      for (; num1 > 0; --num1)
      {
        long num2 = (long) ((int) CResources.m_storage[index1] + (int) CResources.m_storage[index1 + 1L] * 256 + (int) CResources.m_storage[index1 + 2L] * 256 * 256 + (int) CResources.m_storage[index1 + 3L] * 256 * 256 * 256);
        index1 += num2 + 4L;
      }
      long length = (long) ((int) CResources.m_storage[index1] + (int) CResources.m_storage[index1 + 1L] * 256 + (int) CResources.m_storage[index1 + 2L] * 256 * 256 + (int) CResources.m_storage[index1 + 3L] * 256 * 256 * 256);
      byte[] buffer = new byte[length];
      long num3 = index1 + 4L;
      for (int index2 = 0; (long) index2 < length; ++index2)
        buffer[index2] = CResources.m_storage[(IntPtr) num3++];
      return (Stream) new MemoryStream(buffer);
    }
  }
}
