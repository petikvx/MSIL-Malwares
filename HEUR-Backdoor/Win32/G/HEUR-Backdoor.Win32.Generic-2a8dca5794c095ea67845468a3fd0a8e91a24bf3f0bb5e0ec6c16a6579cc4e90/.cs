// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Protected, Version=6.2.8400.0, Culture=neutral, PublicKeyToken=null
// MVID: 52CBE997-50C3-42B2-A704-C908D57869A5
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-2a8dca5794c095ea67845468a3fd0a8e91a24bf3f0bb5e0ec6c16a6579cc4e90.exe

using System;
using System.IO;

internal sealed class \uE02F
{
  public static void \uE000(Stream _param0, Stream _param1)
  {
    byte[] buffer = new byte[4096];
    \uE02F.\uE000 obj = new \uE02F.\uE000(_param0);
    while (true)
    {
      int count = obj.\uE003(buffer, 0, buffer.Length);
      if (count > 0)
        _param1.Write(buffer, 0, count);
      else
        break;
    }
  }

  internal static int \uE003(int _param0)
  {
    switch (_param0)
    {
      case 19:
        return 6;
      case 22:
        return 0;
      case 24:
        return 3;
      case 25:
        return 2;
      case 28:
        return 4;
      default:
        return -1;
    }
  }

  internal static int \uE004(int _param0)
  {
    switch (_param0)
    {
      case 23:
        return 5;
      case 26:
        return 1;
      default:
        return -1;
    }
  }

  public sealed class \uE000
  {
    private \uE02F.\uE016 \uE000 = new \uE02F.\uE016(32769);
    private \uE02F.\uE015 \uE001;
    private \uE02E \uE002;
    private int \uE003 = -1;
    private int \uE004 = -1;
    private bool \uE005;
    private int \uE006;
    private long \uE007;
    private long \uE008;
    private bool \uE009;
    private int \uE00A;
    private bool \uE00B;

    public \uE000(Stream _param1) => this.\uE001 = new \uE02F.\uE015(_param1);

    public int \uE003(byte[] _param1, int _param2, int _param3)
    {
      if ((_param1 == null ? 0 : 1) == 0)
        throw new ArgumentNullException();
      if ((_param3 == 0 ? 1 : 0) != 0 || (!this.\uE009 ? 1 : 0) == 0)
        return 0;
      int num1 = 0;
      if (num1 == 0)
        goto label_15;
label_5:
      this.\uE009 = !this.\uE000();
label_6:
      if (this.\uE003 >= 0 || (!this.\uE009 ? 1 : 0) == 0)
      {
        if ((!this.\uE009 ? 0 : 1) == 0)
        {
          int num2 = this.\uE004(_param1, _param2 + num1, _param3 - num1);
label_10:
          int num3 = \uE02F.\uE003(22);
          while (true)
          {
            switch (num3)
            {
              case 0:
                if (num2 > 0)
                {
                  num3 = 1;
                  continue;
                }
                goto label_14;
              case 1:
                num1 += num2;
                num3 = 2;
                continue;
              case 2:
                goto label_15;
              default:
                goto label_10;
            }
          }
label_14:
          this.\uE003 = -1;
        }
        else
          goto label_16;
      }
      else
        goto label_5;
label_15:
      if (num1 < _param3)
        goto label_6;
label_16:
      return num1;
    }

    private bool \uE000()
    {
      if ((!this.\uE005 ? 1 : 0) == 0)
        return false;
      this.\uE007 = this.\uE001.\uE004;
label_4:
      int num1 = \uE02F.\uE003(19);
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            if (this.\uE003 == 5)
            {
              num1 = 5;
              continue;
            }
            goto label_14;
          case 1:
            this.\uE00B = true;
            num1 = 8;
            continue;
          case 2:
            this.\uE002 = (\uE02E) null;
            num1 = 1;
            continue;
          case 3:
            num2 = this.\uE001.\uE000(16) ^ 44266;
            num1 = 7;
            continue;
          case 4:
            this.\uE003 = this.\uE001.\uE000(3);
            num1 = 0;
            continue;
          case 5:
            this.\uE001.\uE000();
            num1 = 3;
            continue;
          case 6:
            this.\uE005 = this.\uE001.\uE000(1) > 0;
            num1 = \uE02F.\uE003(28);
            continue;
          case 7:
            this.\uE006 = num2;
            num1 = 2;
            continue;
          case 8:
            goto label_30;
          default:
            goto label_4;
        }
      }
label_14:
      if (this.\uE003 == 1)
      {
        \uE02C[] objArray1 = \uE02B.\uE000;
label_17:
        int num3 = \uE02F.\uE003(25);
        while (true)
        {
          switch (num3)
          {
            case 0:
              this.\uE002 = \uE02B.\uE002;
              num3 = 1;
              continue;
            case 1:
              this.\uE00B = false;
              num3 = 4;
              continue;
            case 2:
              \uE02C[] objArray2 = \uE02B.\uE001;
              num3 = 3;
              continue;
            case 3:
              this.\uE006 = 0;
              num3 = 0;
              continue;
            case 4:
              goto label_30;
            default:
              goto label_17;
          }
        }
      }
      else
      {
        if (this.\uE003 != 3)
          throw new InvalidOperationException();
        \uE02C[] objArray3;
        \uE02C[] objArray4;
        this.\uE000(this.\uE001, out objArray3, out objArray4);
label_25:
        int num4 = \uE02F.\uE003(25);
        while (true)
        {
          switch (num4)
          {
            case 0:
              this.\uE00B = false;
              num4 = 3;
              continue;
            case 1:
              this.\uE002 = \uE02B.\uE000(objArray3, objArray4);
              num4 = \uE02F.\uE003(22);
              continue;
            case 2:
              this.\uE006 = 0;
              num4 = 1;
              continue;
            case 3:
              goto label_30;
            default:
              goto label_25;
          }
        }
      }
label_30:
      this.\uE008 = this.\uE001.\uE004;
      return true;
    }

    private int \uE004(byte[] _param1, int _param2, int _param3)
    {
      int num1 = _param2;
      if (this.\uE003 == 5)
      {
        if (this.\uE006 > 0)
        {
          int num2 = Math.Min(_param3, this.\uE006);
label_4:
          int num3 = \uE02F.\uE003(25);
          while (true)
          {
            switch (num3)
            {
              case 0:
                this.\uE006 -= num2;
                num3 = 1;
                continue;
              case 1:
                _param3 -= num2;
                num3 = 3;
                continue;
              case 2:
                this.\uE001.\uE000(_param1, _param2, num2);
                num3 = 4;
                continue;
              case 3:
                _param2 += num2;
                num3 = 5;
                continue;
              case 4:
                this.\uE000.\uE000(_param1, _param2, num2);
                num3 = \uE02F.\uE003(22);
                continue;
              case 5:
                goto label_31;
              default:
                goto label_4;
            }
          }
        }
      }
      else if ((!this.\uE00B ? 0 : 1) == 0)
      {
        if (this.\uE00A > 0)
          this.\uE000(_param1, ref _param2, ref _param3);
        if (_param3 > 0)
        {
          do
          {
            int num4 = \uE02F.\uE000.\uE009(this.\uE001, this.\uE002.\uE000);
            this.\uE00B = num4 == 256;
            if ((!this.\uE00B ? 0 : 1) == 0)
            {
              if (num4 < 256)
              {
                _param1[_param2++] = (byte) num4;
label_18:
                int num5 = \uE02F.\uE003(22);
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                      this.\uE000.\uE000((byte) num4);
                      num5 = 1;
                      continue;
                    case 1:
                      --_param3;
                      num5 = 2;
                      continue;
                    case 2:
                      goto label_30;
                    default:
                      goto label_18;
                  }
                }
              }
              else if (num4 <= 285)
              {
                int num6 = \uE02F.\uE000.\uE000(this.\uE001, num4);
label_24:
                int num7 = \uE02F.\uE003(22);
                int num8;
                while (true)
                {
                  switch (num7)
                  {
                    case 0:
                      num8 = \uE02F.\uE000.\uE00A(this.\uE001, this.\uE002.\uE001);
                      num7 = 1;
                      continue;
                    case 1:
                      if ((long) num8 > this.\uE000.\uE003)
                      {
                        num7 = 2;
                        continue;
                      }
                      goto label_29;
                    case 2:
                      goto label_28;
                    default:
                      goto label_24;
                  }
                }
label_28:
                throw new InvalidOperationException();
label_29:
                this.\uE004 = num8;
                this.\uE00A = num6;
                this.\uE000(_param1, ref _param2, ref _param3);
              }
label_30:;
            }
            else
              break;
          }
          while (_param3 > 0);
        }
      }
label_31:
      this.\uE008 = this.\uE001.\uE004;
      return _param2 - num1;
    }

    private void \uE000(byte[] _param1, ref int _param2, ref int _param3)
    {
      int num1 = Math.Min(this.\uE00A, _param3);
      byte[] sourceArray = this.\uE000.\uE000(this.\uE004, Math.Min(num1, this.\uE004));
label_2:
      int num2 = \uE02F.\uE003(22);
      while (true)
      {
        switch (num2)
        {
          case 0:
            _param3 -= num1;
            num2 = 1;
            continue;
          case 1:
            this.\uE00A -= num1;
            num2 = 2;
            continue;
          case 2:
            goto label_11;
          default:
            goto label_2;
        }
      }
label_11:
      while (num1 > sourceArray.Length)
      {
        Array.Copy((Array) sourceArray, 0, (Array) _param1, _param2, sourceArray.Length);
label_7:
        int num3 = \uE02F.\uE003(22);
        while (true)
        {
          switch (num3)
          {
            case 0:
              _param2 += sourceArray.Length;
              num3 = 1;
              continue;
            case 1:
              num1 -= sourceArray.Length;
              num3 = 2;
              continue;
            case 2:
              goto label_10;
            default:
              goto label_7;
          }
        }
label_10:
        this.\uE000.\uE000(sourceArray, 0, sourceArray.Length);
      }
      Array.Copy((Array) sourceArray, 0, (Array) _param1, _param2, num1);
      _param2 += num1;
      this.\uE000.\uE000(sourceArray, 0, num1);
    }

    public bool \uE000(int _param1)
    {
      byte[] numArray = new byte[1024];
      int num;
      while (_param1 > 0 && (num = this.\uE003(numArray, 0, Math.Min(1024, _param1))) > 0)
        _param1 -= num;
      return _param1 <= 0;
    }

    public void \uE000()
    {
      byte[] numArray = new byte[1024];
      do
        ;
      while (this.\uE003(numArray, 0, 1024) > 0);
    }

    private static int \uE009(\uE02F.\uE015 _param0, \uE02D _param1)
    {
      while ((_param1 == null ? 1 : 0) == 0 && (!_param1.\uE000 ? 1 : 0) != 0)
        _param1 = _param0.\uE000(1) > 0 ? _param1.\uE003 : _param1.\uE002;
      return (_param1 == null ? 0 : 1) != 0 ? (int) _param1.\uE001 : throw new InvalidOperationException();
    }

    private static int \uE000(\uE02F.\uE015 _param0, int _param1)
    {
      int num1;
      int num2;
      \uE02B.\uE000(_param1, out num1, out num2);
      return num2 > 0 ? num1 + _param0.\uE000(num2) : num1;
    }

    private static int \uE00A(\uE02F.\uE015 _param0, \uE02D _param1)
    {
      int index = \uE02F.\uE000.\uE009(_param0, _param1);
      int num1 = index <= 29 ? \uE02B.\uE006[index] : throw new InvalidOperationException();
label_4:
      int num2 = \uE02F.\uE003(22);
      int num3;
      int num4;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num3 = \uE02B.\uE007[index];
            num2 = 2;
            continue;
          case 1:
            num4 = _param0.\uE000(num3);
            num2 = \uE02F.\uE003(24);
            continue;
          case 2:
            if (num3 > 0)
            {
              num2 = 1;
              continue;
            }
            goto label_15;
          case 3:
            if (index == 284)
            {
              num2 = 4;
              continue;
            }
            goto label_14;
          case 4:
            if (num4 > 30)
            {
              num2 = 5;
              continue;
            }
            goto label_14;
          case 5:
            goto label_13;
          default:
            goto label_4;
        }
      }
label_13:
      throw new InvalidOperationException();
label_14:
      return num1 + num4;
label_15:
      return num1;
    }

    private void \uE000(\uE02F.\uE015 _param1, out \uE02C[] _param2, out \uE02C[] _param3)
    {
      int length1 = _param1.\uE000(5) + 257;
label_2:
      int num1 = \uE02F.\uE003(22);
      int num2;
      int length2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            length2 = _param1.\uE000(5) + 1;
            num1 = 2;
            continue;
          case 1:
            if (length1 > 286)
            {
              num1 = \uE02F.\uE003(24);
              continue;
            }
            goto label_8;
          case 2:
            num2 = _param1.\uE000(4) + 4;
            num1 = 1;
            continue;
          case 3:
            goto label_7;
          default:
            goto label_2;
        }
      }
label_7:
      throw new InvalidOperationException();
label_8:
      int[] numArray1 = \uE02B.\uE003;
      int[] numArray2 = new int[19];
      int index1 = 0;
      if (index1 == 0)
        goto label_10;
label_9:
      numArray2[numArray1[index1]] = _param1.\uE000(3);
      ++index1;
label_10:
      if (index1 >= num2)
      {
        \uE02C[] objArray = \uE02B.\uE000(numArray2);
label_13:
        int num3 = \uE02F.\uE004(23);
        int[] numArray3;
        while (true)
        {
          int index2;
          \uE02D obj;
          switch (num3)
          {
            case 0:
label_14:
              _param2[index2].\uE001 = numArray3[index2];
              num3 = 6;
              continue;
            case 1:
              _param2 = new \uE02C[length1];
              num3 = 3;
              continue;
            case 2:
              numArray3 = \uE02F.\uE000.\uE000(_param1, obj, length1 + length2);
              num3 = 1;
              continue;
            case 3:
              index2 = 0;
              num3 = 4;
              continue;
            case 4:
              if (index2 != 0)
              {
                num3 = 0;
                continue;
              }
              break;
            case 5:
              obj = \uE02B.\uE000(objArray);
              num3 = \uE02F.\uE003(25);
              continue;
            case 6:
              ++index2;
              break;
            default:
              goto label_13;
          }
          if (index2 < length1)
            goto label_14;
          else
            break;
        }
        \uE02B.\uE000(_param2);
label_25:
        int num4 = \uE02F.\uE003(22);
        int index3;
        while (true)
        {
          switch (num4)
          {
            case 0:
              _param3 = new \uE02C[length2];
              num4 = 2;
              continue;
            case 1:
              if (index3 != 0)
              {
                num4 = \uE02F.\uE003(24);
                continue;
              }
              goto case 5;
            case 2:
              index3 = 0;
              num4 = 1;
              continue;
            case 3:
              _param3[index3].\uE001 = numArray3[index3 + length1];
              num4 = 4;
              continue;
            case 4:
              ++index3;
              num4 = 5;
              continue;
            case 5:
              if (index3 < length2)
                goto case 3;
              else
                goto label_33;
            default:
              goto label_25;
          }
        }
label_33:
        \uE02B.\uE000(_param3);
      }
      else
        goto label_9;
    }

    private static int[] \uE000(\uE02F.\uE015 _param0, \uE02D _param1, int _param2)
    {
      int[] numArray = new int[_param2];
label_2:
      int num1 = \uE02F.\uE003(22);
      while (true)
      {
        int index;
        int num2;
        switch (num1)
        {
          case 0:
            index = 0;
            num1 = 2;
            continue;
          case 1:
label_4:
            num2 = \uE02F.\uE000.\uE009(_param0, _param1);
            num1 = 3;
            continue;
          case 2:
            if (index != 0)
            {
              num1 = \uE02F.\uE004(26);
              continue;
            }
            break;
          case 3:
            if (num2 < 16)
            {
              num1 = 4;
              continue;
            }
            switch (num2)
            {
              case 16:
label_12:
                int num3 = \uE02F.\uE003(22);
                int num4;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                      num4 = _param0.\uE000(2) + 3;
                      num3 = 1;
                      continue;
                    case 1:
                      if (num4 + index > numArray.Length)
                      {
                        num3 = 2;
                        continue;
                      }
                      goto label_17;
                    case 2:
                      goto label_16;
                    default:
                      goto label_12;
                  }
                }
label_17:
                int num5 = 0;
label_19:
                int num6 = \uE02F.\uE003(22);
                while (true)
                {
                  switch (num6)
                  {
                    case 0:
                      if (num5 != 0)
                      {
                        num6 = 1;
                        continue;
                      }
                      break;
                    case 1:
label_22:
                      numArray[index + num5] = numArray[index - 1];
                      num6 = 2;
                      continue;
                    case 2:
                      ++num5;
                      break;
                    default:
                      goto label_19;
                  }
                  if (num5 < num4)
                    goto label_22;
                  else
                    break;
                }
                index += num4 - 1;
                goto label_33;
              case 17:
                int num7 = _param0.\uE000(3) + 3;
                if (num7 + index <= numArray.Length)
                {
                  index += num7 - 1;
                  goto label_33;
                }
                else
                  goto label_27;
              case 18:
                int num8 = _param0.\uE000(7) + 11;
                if (num8 + index <= numArray.Length)
                {
                  index += num8 - 1;
                  goto label_33;
                }
                else
                  goto label_30;
              default:
                goto label_32;
            }
          case 4:
            numArray[index] = num2;
            num1 = 5;
            continue;
          case 5:
label_33:
            ++index;
            break;
          default:
            goto label_2;
        }
        if (index < _param2)
          goto label_4;
        else
          goto label_35;
      }
label_16:
      throw new InvalidOperationException();
label_27:
      throw new InvalidOperationException();
label_30:
      throw new InvalidOperationException();
label_32:
      throw new InvalidOperationException();
label_35:
      return numArray;
    }
  }

  private sealed class \uE015
  {
    private uint \uE000;
    private int \uE001;
    private int \uE002;
    private Stream \uE003;
    internal long \uE004;

    internal \uE015(Stream _param1) => this.\uE003 = _param1;

    internal int \uE000(int _param1)
    {
      this.\uE004 += (long) _param1;
      for (int index = _param1 - (this.\uE002 - this.\uE001); index > 0; index -= 8)
      {
        this.\uE000 |= checked ((uint) this.\uE003.ReadByte()) << this.\uE002;
        this.\uE002 += 8;
      }
      int num1 = (int) (this.\uE000 >> this.\uE001) & (1 << _param1) - 1;
label_5:
      int num2 = \uE02F.\uE003(25);
      while (true)
      {
        switch (num2)
        {
          case 0:
            this.\uE000 = 0U;
            num2 = 4;
            continue;
          case 1:
            if (this.\uE002 == this.\uE001)
            {
              num2 = 3;
              continue;
            }
            goto label_11;
          case 2:
            this.\uE001 += _param1;
            num2 = 1;
            continue;
          case 3:
            this.\uE002 = this.\uE001 = 0;
            num2 = 0;
            continue;
          case 4:
            goto label_17;
          default:
            goto label_5;
        }
      }
label_11:
      if (this.\uE001 >= 8)
      {
        this.\uE000 >>= this.\uE001;
label_14:
        int num3 = \uE02F.\uE003(22);
        while (true)
        {
          switch (num3)
          {
            case 0:
              this.\uE002 -= this.\uE001;
              num3 = 1;
              continue;
            case 1:
              this.\uE001 = 0;
              num3 = 2;
              continue;
            case 2:
              goto label_17;
            default:
              goto label_14;
          }
        }
      }
label_17:
      return num1;
    }

    internal void \uE000()
    {
      if (this.\uE002 != this.\uE001)
        this.\uE004 += (long) (this.\uE002 - this.\uE001);
      this.\uE002 = this.\uE001 = 0;
      this.\uE000 = 0U;
    }

    internal void \uE000(byte[] _param1, int _param2, int _param3)
    {
      if (this.\uE002 != this.\uE001)
        throw new InvalidOperationException();
      int num1 = this.\uE003.Read(_param1, _param2, _param3);
label_4:
      int num2 = \uE02F.\uE003(22);
      while (true)
      {
        switch (num2)
        {
          case 0:
            this.\uE004 += (long) (num1 << 3);
            num2 = 1;
            continue;
          case 1:
            if (num1 != _param3)
            {
              num2 = 2;
              continue;
            }
            goto label_7;
          case 2:
            goto label_9;
          default:
            goto label_4;
        }
      }
label_7:
      return;
label_9:
      throw new InvalidOperationException();
    }
  }

  private sealed class \uE016
  {
    private byte[] \uE000;
    private int \uE001;
    internal int \uE002;
    internal long \uE003;

    internal \uE016(int _param1)
    {
      this.\uE002 = _param1;
      this.\uE000 = new byte[_param1];
    }

    internal void \uE000(byte _param1)
    {
      this.\uE000[this.\uE001++] = _param1;
      if (this.\uE001 >= this.\uE002)
        this.\uE001 = 0;
      ++this.\uE003;
    }

    internal void \uE000(byte[] _param1, int _param2, int _param3)
    {
      this.\uE003 += (long) _param3;
      if (_param3 >= this.\uE002)
      {
        Array.Copy((Array) _param1, _param2, (Array) this.\uE000, 0, this.\uE002);
        this.\uE001 = 0;
      }
      else if (this.\uE001 + _param3 > this.\uE002)
      {
        int length1 = this.\uE002 - this.\uE001;
label_5:
        int num = \uE02F.\uE003(25);
        int length2;
        while (true)
        {
          switch (num)
          {
            case 0:
              this.\uE001 = length2;
              num = 4;
              continue;
            case 1:
              Array.Copy((Array) _param1, _param2, (Array) this.\uE000, this.\uE001, length1);
              num = 3;
              continue;
            case 2:
              length2 = this.\uE001 + _param3 - this.\uE002;
              num = \uE02F.\uE004(26);
              continue;
            case 3:
              Array.Copy((Array) _param1, _param2 + length1, (Array) this.\uE000, 0, length2);
              num = 0;
              continue;
            case 4:
              goto label_17;
            default:
              goto label_5;
          }
        }
label_17:;
      }
      else
      {
        Array.Copy((Array) _param1, _param2, (Array) this.\uE000, this.\uE001, _param3);
label_12:
        int num = \uE02F.\uE003(22);
        while (true)
        {
          switch (num)
          {
            case 0:
              this.\uE001 += _param3;
              num = 1;
              continue;
            case 1:
              if (this.\uE001 == this.\uE002)
              {
                num = 2;
                continue;
              }
              goto label_16;
            case 2:
              goto label_18;
            default:
              goto label_12;
          }
        }
label_16:
        return;
label_18:
        this.\uE001 = 0;
      }
    }

    internal byte[] \uE000(int _param1, int _param2)
    {
      byte[] destinationArray = new byte[_param2];
      if (this.\uE001 >= _param1)
      {
        Array.Copy((Array) this.\uE000, this.\uE001 - _param1, (Array) destinationArray, 0, _param2);
      }
      else
      {
        int num1 = _param1 - this.\uE001;
label_4:
        int num2 = \uE02F.\uE003(25);
        while (true)
        {
          switch (num2)
          {
            case 0:
              Array.Copy((Array) this.\uE000, 0, (Array) destinationArray, num1, _param2 - num1);
              num2 = 3;
              continue;
            case 1:
              Array.Copy((Array) this.\uE000, this.\uE002 - num1, (Array) destinationArray, 0, num1);
              num2 = 0;
              continue;
            case 2:
              if (num1 < _param2)
              {
                num2 = \uE02F.\uE004(26);
                continue;
              }
              goto label_9;
            case 3:
              goto label_10;
            default:
              goto label_4;
          }
        }
label_9:
        Array.Copy((Array) this.\uE000, this.\uE002 - num1, (Array) destinationArray, 0, _param2);
      }
label_10:
      return destinationArray;
    }
  }
}
