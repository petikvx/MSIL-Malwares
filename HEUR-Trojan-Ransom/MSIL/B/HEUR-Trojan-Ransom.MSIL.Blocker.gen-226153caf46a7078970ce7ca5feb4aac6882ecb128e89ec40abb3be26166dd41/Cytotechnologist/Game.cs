// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ContractHelp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E915048-53CD-4869-AA6D-7821BA258ED2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-226153caf46a7078970ce7ca5feb4aac6882ecb128e89ec40abb3be26166dd41.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 1371667458;
      bool flag;
      int index;
      int count;
      int aIndex;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 886527535)) % 12U)
        {
          case 0:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 1758657509 ^ -980403742;
            continue;
          case 1:
            flag = aIndex < count;
            num1 = 1037414581;
            continue;
          case 2:
            int num3 = !flag ? 956476095 : (num3 = 1906636621);
            num1 = num3 ^ (int) num2 * -1025329158;
            continue;
          case 3:
            jsonNode = json["players"];
            count = jsonNode.Count;
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * -1365570354 ^ -271229600;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * -1156071106 ^ -1440020902;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num4;
            num1 = num4 = index >= count ? 1603722295 : (num4 = 130840911);
            continue;
          case 8:
            this._playerStates[index] = new PlayerState();
            ++index;
            num1 = 391365956;
            continue;
          case 9:
            num1 = (int) num2 * 1278902482 ^ 123285286;
            continue;
          case 10:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = 1870491730;
            continue;
          case 11:
            this._buffer = buffer;
            this._random = Game.\u206A‫⁭‍⁪​⁬⁬⁪‪⁪‎‍‭⁬‪‮⁯⁫‬‎⁯‪‏⁯‍‬‫‭‫⁯‮⁮⁭⁫‪⁮​‫‮‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            num1 = (int) num2 * 1253981445 ^ -254524401;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -1604502786;
        PlayerState[] playerStates;
        int index;
        bool flag;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1990906954)) % 13U)
          {
            case 0:
              int num3;
              num1 = num3 = index >= playerStates.Length ? -34376922 : (num3 = -1966446022);
              continue;
            case 1:
              finished2 = false;
              num1 = (int) num2 * -623099734 ^ 1265131990;
              continue;
            case 2:
              finished2 = true;
              num1 = (int) num2 * 1770719096 ^ 1832471345;
              continue;
            case 3:
              finished2 = true;
              num1 = (int) num2 * 370377728 ^ 255662516;
              continue;
            case 4:
              int num4 = !finished1 ? 83392572 : (num4 = 1291612290);
              num1 = num4 ^ (int) num2 * 1519947925;
              continue;
            case 5:
              num1 = (int) num2 * -1853359611 ^ 537456808;
              continue;
            case 6:
              int num5 = flag ? 1059097156 : (num5 = 124137333);
              num1 = num5 ^ (int) num2 * -109935464;
              continue;
            case 7:
              playerStates = this._playerStates;
              index = 0;
              num1 = -1690318783;
              continue;
            case 9:
              flag = playerStates[index].State == State.Playing;
              num1 = -1482537670;
              continue;
            case 10:
              ++index;
              num1 = -1690318783;
              continue;
            case 11:
              goto label_1;
            case 12:
              num1 = (int) num2 * -314832455 ^ 1801681933;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = 953018956;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 355037769)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * 1440798138 ^ 1812841227;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = -1492681707;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -775293854)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 2027621922 ^ -211696449;
            continue;
          case 1:
            this._currentTurn = 0;
            num1 = (int) num2 * -263287028 ^ -419408374;
            continue;
          case 2:
            goto label_1;
          case 4:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1239160492 ^ 1098619593;
            continue;
          case 5:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1950248537 ^ 1211029892;
            continue;
          case 6:
            this.Losers.Clear();
            num1 = (int) num2 * -431862227 ^ 1988533454;
            continue;
          case 7:
            num1 = (int) num2 * -147885549 ^ 1307040683;
            continue;
          case 8:
            this._finished = false;
            num1 = (int) num2 * 23440839 ^ -1808394590;
            continue;
          case 9:
            this.ShuffleCards();
            this.Winners.Clear();
            num1 = (int) num2 * 634554112 ^ -1745872091;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -242878266;
      PlayerState playerState;
      bool flag1;
      int planningCardsCount;
      int index;
      int num2;
      bool flag2;
      Player player;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -775108135)) % 25U)
        {
          case 0:
            goto label_1;
          case 1:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -780198790;
            continue;
          case 2:
            num1 = (int) num3 * -1702824027 ^ -739131426;
            continue;
          case 3:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = -96171662;
            continue;
          case 4:
            num1 = -1554192956;
            continue;
          case 5:
            num1 = -154738205;
            continue;
          case 6:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1655278324 ^ 1945677149;
            continue;
          case 7:
            player = this.Players[index];
            num1 = (int) num3 * 1611498541 ^ 443612237;
            continue;
          case 8:
            int num4;
            num1 = num4 = index >= this.Players.Length ? -35731863 : (num4 = -612780950);
            continue;
          case 9:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -284912 ^ -426219802;
            continue;
          case 10:
            ++index;
            num1 = (int) num3 * -488785776 ^ 1351853959;
            continue;
          case 11:
            playerState.Sprint = -1;
            num1 = (int) num3 * -1025901787 ^ -2126115617;
            continue;
          case 12:
            playerState.Sprint = 1;
            num1 = (int) num3 * 455688728 ^ -1325025132;
            continue;
          case 13:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * 1435747666 ^ 1671214060;
            continue;
          case 14:
            int num5 = !player.UseOneMorePlanningSprint ? 1520694707 : (num5 = 1870159093);
            num1 = num5 ^ (int) num3 * -1421539705;
            continue;
          case 15:
            index = 0;
            num1 = (int) num3 * -235525294 ^ -1350302503;
            continue;
          case 16:
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -1281658409 ^ 1660198687;
            continue;
          case 17:
            num2 = 0;
            num1 = -1704823051;
            continue;
          case 18:
            goto label_3;
          case 19:
            flag2 = num2 > 0;
            num1 = -932612069;
            continue;
          case 20:
            flag1 = planningCardsCount == 0;
            num1 = (int) num3 * -1983139817 ^ -162323414;
            continue;
          case 21:
            int num6 = !flag2 ? -89359353 : (num6 = -1443154706);
            num1 = num6 ^ (int) num3 * -850701010;
            continue;
          case 22:
            playerState.State = State.Playing;
            num1 = (int) num3 * 1679408465 ^ -452693963;
            continue;
          case 23:
            int num7 = flag1 ? -750152681 : (num7 = -1557247374);
            num1 = num7 ^ (int) num3 * 1362193140;
            continue;
          case 24:
            num1 = (int) num3 * -1062080573 ^ -1694050435;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = -1133434326;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -622891020)) % 11U)
        {
          case 0:
            this._currentPlayer = 0;
            num1 = (int) num2 * 20516047 ^ 1135701039;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 506263092 ^ -1329218223;
            continue;
          case 3:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1849221318 ^ -1216673261;
            continue;
          case 4:
            this.PlayerTurn(this._currentPlayer);
            num1 = -1929520843;
            continue;
          case 5:
            this.Print((object) Game.\u206C‎⁭⁫⁬‬‪⁪‭⁭‭‭​⁮⁭‪⁬⁭‍‬‮​‭⁮‌‬​‮‌⁮‪‪‍⁫⁪‏⁮‭⁫⁫‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -1687589491 ^ -1165195647;
            continue;
          case 6:
            num1 = (int) num2 * -900323317 ^ -405923450;
            continue;
          case 7:
            goto label_1;
          case 8:
            int num3 = this._currentPlayer >= this.Players.Length ? -466549006 : (num3 = -237699054);
            num1 = num3 ^ (int) num2 * -1996444205;
            continue;
          case 9:
            int num4 = this._currentTurn <= 0 ? -304113827 : (num4 = -559031124);
            num1 = num4 ^ (int) num2 * 1408440484;
            continue;
          case 10:
            this.Print((object) Game.\u200F⁬​⁮‬‬‪​‭⁫⁭‫⁫‍‏‌⁫‍⁫‏‍⁬⁫⁫‏⁭‎⁮‌‎‫⁫​‏​‬⁬‍‫‏‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -625433709;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 768198913;
      while (true)
      {
        uint num2;
        int index;
        bool flag1;
        int num3;
        bool flag2;
        bool flag3;
        PlayerState playerState1;
        Card card;
        bool flag4;
        PlayerState playerState2;
        int num4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        Player player;
        int num5;
        int num6;
        switch ((num2 = (uint) (num1 ^ 1200695597)) % 86U)
        {
          case 0:
            flag1 = false;
            num1 = 934460431;
            continue;
          case 1:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -1235291280 ^ 1495562046;
            continue;
          case 2:
            int num7 = flag8 ? 1187202203 : (num7 = 793383057);
            num1 = num7 ^ (int) num2 * 2120945835;
            continue;
          case 3:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1422447516 ^ 1334763285;
            continue;
          case 4:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -320212678 ^ 1555632900;
            continue;
          case 5:
            int num8 = flag4 ? -1085412804 : (num8 = -1265267026);
            num1 = num8 ^ (int) num2 * -1466649424;
            continue;
          case 6:
            num1 = (int) num2 * -1160435944 ^ 128522618;
            continue;
          case 7:
            num1 = 113816002;
            continue;
          case 8:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag9 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u202D‬‪‏⁮‬⁬‍​⁭‎​‬⁪⁪‌‌​⁭⁬‎⁫‍‫⁯⁫‪‌‫‌⁭‏‌‫‍⁮‌⁪⁫‏‮(num4), flag1 ? (object) "advance" : (object) "stay");
            num1 = 1080296649;
            continue;
          case 9:
            index = 0;
            num1 = 1828199584;
            continue;
          case 10:
            int num9;
            num1 = num9 = playerState1.Sprint >= 0 ? 935183147 : (num9 = 1335195005);
            continue;
          case 11:
            int num10 = flag11 ? -1289127086 : (num10 = -119664869);
            num1 = num10 ^ (int) num2 * -763123689;
            continue;
          case 12:
            num1 = (int) num2 * -378112530 ^ 1503938864;
            continue;
          case 13:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 14:
            flag3 = num3 == playerIndex;
            num1 = 2144617564;
            continue;
          case 15:
            num1 = (int) num2 * -723382461 ^ 2050928506;
            continue;
          case 16:
            flag1 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -730544442 ^ 1229850935;
            continue;
          case 17:
            this.Print((object) Game.\u206C‎⁭⁫⁬‬‪⁪‭⁭‭‭​⁮⁭‪⁬⁭‍‬‮​‭⁮‌‬​‮‌⁮‪‪‍⁫⁪‏⁮‭⁫⁫‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 1985125811 ^ -587164778;
            continue;
          case 18:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * 1881813557 ^ 475018967;
            continue;
          case 19:
            num1 = (int) num2 * -551924040 ^ -2030254332;
            continue;
          case 20:
            num1 = (int) num2 * 982839055 ^ 499180590;
            continue;
          case 21:
            goto label_3;
          case 22:
            int num11;
            num1 = num11 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? 1271264503 : (num11 = 816338491);
            continue;
          case 23:
            int num12 = flag6 ? -597341533 : (num12 = -1972246327);
            num1 = num12 ^ (int) num2 * -750832950;
            continue;
          case 24:
            num1 = (int) num2 * 10189728 ^ -601565913;
            continue;
          case 25:
            num1 = (int) num2 * 1447698235 ^ -1895352863;
            continue;
          case 26:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -2105958837 ^ -1829906806;
            continue;
          case 27:
            int num13 = flag10 ? 1505262972 : (num13 = 1887441925);
            num1 = num13 ^ (int) num2 * 816916863;
            continue;
          case 28:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -98906064 ^ 363318838;
            continue;
          case 29:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206C‎⁭⁫⁬‬‪⁪‭⁭‭‭​⁮⁭‪⁬⁭‍‬‮​‭⁮‌‬​‮‌⁮‪‪‍⁫⁪‏⁮‭⁫⁫‮("\t", playerState3 != null ? Game.\u206A⁭‬‌‌‪⁪‎‫‮⁮⁮‬⁯⁪⁬‬⁬⁪⁬⁫⁭‌‬⁯⁫‍‌​‬‫​‍⁪‭‭​‮‬⁭‮((object) playerState3) : (string) null));
            num1 = 371563958;
            continue;
          case 30:
            num1 = (int) num2 * 499803370 ^ 506934433;
            continue;
          case 31:
            num1 = 52325881;
            continue;
          case 32:
            flag8 = num3 < this._playerStates.Length;
            num1 = 1956046663;
            continue;
          case 33:
            num1 = (int) num2 * -1256649982 ^ 1872897677;
            continue;
          case 34:
            num1 = (int) num2 * 153665024 ^ 1537752291;
            continue;
          case 35:
            num1 = (int) num2 * -1201080525 ^ 1994196203;
            continue;
          case 36:
            num1 = (int) num2 * 817768207 ^ 75239605;
            continue;
          case 37:
            flag5 = index < this._playerStates.Length;
            num1 = 419236692;
            continue;
          case 38:
            num1 = 1973508284;
            continue;
          case 39:
            num1 = (int) num2 * 1299760290 ^ 1849920370;
            continue;
          case 40:
            flag1 = true;
            num4 = card.Impact;
            num1 = (int) num2 * -866585076 ^ -939318099;
            continue;
          case 41:
            int num14 = !flag7 ? 533540671 : (num14 = 1420513600);
            num1 = num14 ^ (int) num2 * -1168313219;
            continue;
          case 42:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1464901836 ^ -235506097;
            continue;
          case 43:
            ++index;
            num1 = 410673054;
            continue;
          case 44:
            playerState2.State = State.Lose;
            flag2 = !this.Losers.Contains(index);
            num1 = 617697450;
            continue;
          case 45:
            int num15 = !flag2 ? 716340083 : (num15 = 216209606);
            num1 = num15 ^ (int) num2 * -510735376;
            continue;
          case 46:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -888837451 ^ 775152224;
            continue;
          case 47:
            num1 = (int) num2 * -799535498 ^ -59919526;
            continue;
          case 48:
            int num16;
            num1 = num16 = this.Losers.Contains(num3) ? 1681377343 : (num16 = 826585889);
            continue;
          case 49:
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u202D‭⁯⁫‏‮⁪‎‏‬‬‏​⁪⁮‌‌‬​‪⁫‪⁮‭⁭‌‬‭⁯⁪‎‫‭‮‌‪‭⁬‏‎‮(0, num5);
            num1 = (int) num2 * 616318125 ^ 754026024;
            continue;
          case 50:
            ++playerState1.Sprint;
            num1 = (int) num2 * -2063112471 ^ -1886719614;
            continue;
          case 51:
            num1 = 18856885;
            continue;
          case 52:
            playerState1.State = State.Won;
            num1 = (int) num2 * -1864496224 ^ -1099433716;
            continue;
          case 53:
            int num17 = !this.Losers.Contains(playerIndex) ? -1786341336 : (num17 = -880660264);
            num1 = num17 ^ (int) num2 * 907702861;
            continue;
          case 54:
            num1 = (int) num2 * 580496611 ^ -1591731647;
            continue;
          case 55:
            ++num3;
            num1 = 1224353575;
            continue;
          case 56:
            playerState2.Resources -= Game.\u202D‭⁯⁫‏‮⁪‎‏‬‬‏​⁪⁮‌‌‬​‪⁫‪⁮‭⁭‌‬‭⁯⁪‎‫‭‮‌‪‭⁬‏‎‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -947217630 ^ -431044903;
            continue;
          case 57:
            num3 = 0;
            num1 = (int) num2 * 399464297 ^ 463221162;
            continue;
          case 58:
            flag6 = playerState1.State != 0;
            num1 = (int) num2 * -1968268163 ^ -1171459372;
            continue;
          case 59:
            num1 = (int) num2 * 798061225 ^ 896117407;
            continue;
          case 60:
            num1 = (int) num2 * -1585907126 ^ -1455198175;
            continue;
          case 61:
            num1 = 1996226220;
            continue;
          case 62:
            num1 = 992980708;
            continue;
          case 63:
            this.Losers.Add(index);
            num1 = (int) num2 * 2022043356 ^ -1808526213;
            continue;
          case 64:
            num1 = (int) num2 * -200713115 ^ -1237565570;
            continue;
          case 65:
            flag4 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 319314695 ^ -467475139;
              continue;
            }
            num6 = 0;
            break;
          case 66:
            num1 = (int) num2 * -129865375 ^ -1367675652;
            continue;
          case 67:
            int num18 = flag3 ? -232607823 : (num18 = -489049882);
            num1 = num18 ^ (int) num2 * -1847438899;
            continue;
          case 68:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -942922004 ^ 1078093543;
            continue;
          case 69:
            int num19 = flag5 ? 221968652 : (num19 = 45283090);
            num1 = num19 ^ (int) num2 * 1665258596;
            continue;
          case 70:
            flag7 = flag1;
            num1 = 949705974;
            continue;
          case 71:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 987607878 ^ 1514210252;
            continue;
          case 72:
            int num20 = this.Rules.OnlyOneWinner ? 745893322 : (num20 = 1014898930);
            num1 = num20 ^ (int) num2 * -380878242;
            continue;
          case 73:
            playerState1.Resources -= num4;
            flag12 = playerState1.Resources < 0;
            num1 = (int) num2 * -2099678829 ^ -1253504120;
            continue;
          case 74:
            int num21 = playerState2.Resources < 0 ? 1349134535 : (num21 = 1560521624);
            num1 = num21 ^ (int) num2 * -198238717;
            continue;
          case 75:
            num1 = 1146824579;
            continue;
          case 76:
            card = this.DrawCard();
            num1 = 509596050;
            continue;
          case 77:
            this._finished = true;
            num1 = (int) num2 * -927713995 ^ 110425731;
            continue;
          case 78:
            flag10 = !flag9;
            num1 = (int) num2 * -1666482698 ^ 330025630;
            continue;
          case 79:
            num1 = (int) num2 * -406878563 ^ 1098357912;
            continue;
          case 80:
            int num22 = !flag12 ? -425956404 : (num22 = -1080168250);
            num1 = num22 ^ (int) num2 * -1431144727;
            continue;
          case 81:
            flag11 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 680533922;
            continue;
          case 82:
            num1 = (int) num2 * -265414608 ^ 2104631221;
            continue;
          case 83:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1262068826 ^ 1969142461;
            continue;
          case 84:
            num1 = (int) num2 * 1676426585 ^ 1271616278;
            continue;
          case 85:
            goto label_1;
          default:
            goto label_91;
        }
        flag9 = num6 != 0;
        num1 = 1387172438;
      }
label_3:
      return;
label_91:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1124379575;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1769393859)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 552195559 ^ 2143496271;
            continue;
          case 1:
            this.ShuffleCards();
            num1 = (int) num2 * -1367837810 ^ 752204352;
            continue;
          case 3:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = 1128409107;
            continue;
          case 4:
            card2 = card1;
            num1 = (int) num2 * -411249324 ^ -1652229877;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3 = this._deck.Count <= 0 ? 878461764 : (num3 = 840423594);
            num1 = num3 ^ (int) num2 * -1491319282;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = 306725376;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 683752932)) % 9U)
        {
          case 0:
            flag = index < this._playerStates.Length;
            num1 = 979005749;
            continue;
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206A⁭‬‌‌‪⁪‎‫‮⁮⁮‬⁯⁪⁬‬⁬⁪⁬⁫⁭‌‬⁯⁫‍‌​‬‫​‍⁪‭‭​‮‬⁭‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202E⁬⁭‫⁭‏⁬⁮‮‏⁯⁮⁪‍‍‌‍⁭‪⁯‬⁯⁪​‪⁭⁯⁪‏⁯⁮⁯‭‏‏‬‍‭⁯⁫‮(strArray);
            num1 = 276232721;
            continue;
          case 2:
            ++index;
            num1 = (int) num2 * 1536393380 ^ 2137904534;
            continue;
          case 3:
            num1 = (int) num2 * 631690061 ^ -1495069827;
            continue;
          case 4:
            goto label_1;
          case 5:
            int num3 = flag ? -111239276 : (num3 = -1420309885);
            num1 = num3 ^ (int) num2 * 32353949;
            continue;
          case 7:
            index = 0;
            num1 = (int) num2 * -2107293975 ^ -1944398874;
            continue;
          case 8:
            str2 = str1;
            num1 = (int) num2 * 1627983379 ^ 474984379;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 447423682;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 703701252)) % 3U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1873147411 ^ -787203278;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u202A‮‏‎⁪⁫‌​‌‬⁫⁫‫‪‏‌⁮​‬‎‏‎‫‬‏‌⁫‪⁭⁬‬⁯‪​‬‎‌‬‏⁬‮(this._buffer, Game.\u200B⁬⁮‍⁭‪⁭​⁪‭‎⁯⁯‫‬‍‌‌​⁫⁯‫‏‏​‎‪⁭⁫⁯‏⁯‪‍‮‭⁪‬⁫‍‮(Game.\u206A⁭‬‌‌‪⁪‎‫‮⁮⁮‬⁯⁪⁬‬⁬⁪⁬⁫⁭‌‬⁯⁫‍‌​‬‫​‍⁪‭‭​‮‬⁭‮(text), more));

    static Random \u206A‫⁭‍⁪​⁬⁬⁪‪⁪‎‍‭⁬‪‮⁯⁫‬‎⁯‪‏⁯‍‬‫‭‫⁯‮⁮⁭⁫‪⁮​‫‮‮([In] int obj0) => new Random(obj0);

    static string \u200F⁬​⁮‬‬‪​‭⁫⁭‫⁫‍‏‌⁫‍⁫‏‍⁬⁫⁫‏⁭‎⁮‌‎‫⁫​‏​‬⁬‍‫‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206C‎⁭⁫⁬‬‪⁪‭⁭‭‭​⁮⁭‪⁬⁭‍‬‮​‭⁮‌‬​‮‌⁮‪‪‍⁫⁪‏⁮‭⁫⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202D‭⁯⁫‏‮⁪‎‏‬‬‏​⁪⁮‌‌‬​‪⁫‪⁮‭⁭‌‬‭⁯⁪‎‫‭‮‌‪‭⁬‏‎‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202D‬‪‏⁮‬⁬‍​⁭‎​‬⁪⁪‌‌​⁭⁬‎⁫‍‫⁯⁫‪‌‫‌⁭‏‌‫‍⁮‌⁪⁫‏‮([In] int obj0) => Math.Abs(obj0);

    static string \u206A⁭‬‌‌‪⁪‎‫‮⁮⁮‬⁯⁪⁬‬⁬⁪⁬⁫⁭‌‬⁯⁫‍‌​‬‫​‍⁪‭‭​‮‬⁭‮([In] object obj0) => obj0.ToString();

    static string \u202E⁬⁭‫⁭‏⁬⁮‮‏⁯⁮⁪‍‍‌‍⁭‪⁯‬⁯⁪​‪⁭⁯⁪‏⁯⁮⁯‭‏‏‬‍‭⁯⁫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200B⁬⁮‍⁭‪⁭​⁪‭‎⁯⁯‫‬‍‌‌​⁫⁯‫‏‏​‎‪⁭⁫⁯‏⁯‪‍‮‭⁪‬⁫‍‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202A‮‏‎⁪⁫‌​‌‬⁫⁫‫‪‏‌⁮​‬‎‏‎‫‬‏‌⁫‪⁭⁬‬⁯‪​‬‎‌‬‏⁬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
