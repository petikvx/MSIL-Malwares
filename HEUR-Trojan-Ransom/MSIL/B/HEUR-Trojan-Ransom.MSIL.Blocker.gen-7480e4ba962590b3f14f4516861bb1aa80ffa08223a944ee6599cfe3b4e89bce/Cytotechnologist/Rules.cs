// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: TimeSpanTok, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: ECAE311E-CE0C-4BF9-8C57-F98A452B360E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7480e4ba962590b3f14f4516861bb1aa80ffa08223a944ee6599cfe3b4e89bce.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1709003038;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1693588876)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 512131656 ^ -2133429045;
            continue;
          case 2:
            int asInt = json["max-impact"].AsInt;
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 582284632 ^ -1746001935;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
      int aIndex = 0;
label_1:
      int num1 = 12196454;
      float[] riskChances;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 97255412)) % 8U)
        {
          case 0:
            flag = aIndex < numArray.Length;
            num1 = 671455816;
            continue;
          case 2:
            num1 = (int) num2 * 1489886081 ^ 1129197390;
            continue;
          case 3:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 253167971;
            continue;
          case 4:
            int num3 = !flag ? 972057973 : (num3 = 529810307);
            num1 = num3 ^ (int) num2 * -906283937;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 1985036942 ^ 978993203;
            continue;
          case 6:
            goto label_1;
          case 7:
            ++aIndex;
            num1 = (int) num2 * -1521078230 ^ 281706266;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -148560;
      bool flag1;
      int aIndex1;
      JSONNode jsonNode;
      int aIndex2;
      bool flag2;
      int count;
      bool flag3;
      List<Card> cardList;
      int num2;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1327271892)) % 24U)
        {
          case 0:
            num2 = 0;
            num1 = (int) num3 * 1974111769 ^ 1131427146;
            continue;
          case 1:
            int num4 = flag1 ? -1961788940 : (num4 = -568764830);
            num1 = num4 ^ (int) num3 * 263551142;
            continue;
          case 2:
            ++aIndex2;
            num1 = (int) num3 * -1381169481 ^ 1562000399;
            continue;
          case 3:
            array = cardList.ToArray();
            num1 = (int) num3 * 1459185265 ^ -50625982;
            continue;
          case 4:
            int num5 = flag3 ? 217455182 : (num5 = 2058256839);
            num1 = num5 ^ (int) num3 * -1955109566;
            continue;
          case 5:
            num1 = (int) num3 * -68163084 ^ -92279777;
            continue;
          case 6:
            flag1 = num2 < jsonNode[aIndex2].AsInt;
            num1 = -2021883539;
            continue;
          case 7:
            aIndex2 = 0;
            num1 = (int) num3 * -967490191 ^ -641510798;
            continue;
          case 8:
            num1 = (int) num3 * -68977374 ^ -2038885618;
            continue;
          case 9:
            num1 = (int) num3 * 759058747 ^ -1046325894;
            continue;
          case 10:
            int num6 = !flag2 ? -1294854746 : (num6 = -1339436619);
            num1 = num6 ^ (int) num3 * 955810565;
            continue;
          case 11:
            num1 = -909874612;
            continue;
          case 12:
            count = json.Count;
            cardList = new List<Card>();
            num1 = (int) num3 * 104840653 ^ 1026273475;
            continue;
          case 13:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = -1064712210;
            continue;
          case 14:
            bool flag4 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag4 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = -1218892827;
            continue;
          case 15:
            goto label_1;
          case 16:
            ++aIndex1;
            num1 = (int) num3 * -217753717 ^ 210704315;
            continue;
          case 17:
            num1 = (int) num3 * -484579915 ^ 783455989;
            continue;
          case 18:
            jsonNode = json[aIndex1];
            num1 = -1365483725;
            continue;
          case 19:
            aIndex1 = 0;
            num1 = (int) num3 * -1877351456 ^ -344973375;
            continue;
          case 20:
            ++num2;
            num1 = (int) num3 * -233608169 ^ 1904451998;
            continue;
          case 22:
            num1 = (int) num3 * -1429053741 ^ -677890320;
            continue;
          case 23:
            flag3 = aIndex1 < count;
            num1 = -1431313568;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString() => Rules.\u200C‎‪‌‌⁫‌​⁬⁯‫‫⁮⁮⁪‬⁫‭⁯⁬‌⁯‭⁮‬‫⁮⁫‫‏⁭⁭‬⁬​⁬⁯‭⁫‫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
    {
      (object) this.SprintCount,
      (object) this.MaxImpact,
      (object) this.CardsToString(),
      (object) this.InitialResources,
      (object) this.NormalPlanningCount,
      (object) this.NormalPlanningCost,
      (object) this.OverPlanningCost,
      (object) this.SprintsWonWithoutPlanning,
      (object) this.RiskChancesToString(),
      (object) this.EconomicsAffectsAll,
      (object) this.StayOnSprintMinDiff,
      (object) this.OnlyOneWinner
    });

    private string CardsToString()
    {
label_1:
      int num1 = 2028863195;
      int num2;
      Card card1;
      bool flag;
      Card[] cards;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1473362420)) % 19U)
        {
          case 0:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -1193292982 ^ 497704860;
            continue;
          case 1:
            str2 = Rules.\u206C⁪‬⁬⁬‏⁬‭‎⁯‍‬‎​⁫‍⁫‍​‬⁯‮​⁪‭‏‎‍⁭‬⁭‌‫‪‪‫⁪‌⁭‎‮(str1, "\n]");
            num1 = (int) num3 * 1144003449 ^ -346773352;
            continue;
          case 2:
            index = 0;
            num1 = (int) num3 * -920524155 ^ -2039308585;
            continue;
          case 3:
            goto label_1;
          case 4:
            str1 = "[\n\t";
            num1 = (int) num3 * -1795104916 ^ -709683088;
            continue;
          case 5:
            num1 = (int) num3 * 438115803 ^ -1994245102;
            continue;
          case 6:
            num2 = 0;
            num1 = (int) num3 * 1824776011 ^ -27786814;
            continue;
          case 7:
            cards = this.Cards;
            num1 = (int) num3 * 134877862 ^ 520593319;
            continue;
          case 8:
            card1 = cards[index];
            num1 = 1247269475;
            continue;
          case 9:
            ++index;
            num1 = (int) num3 * 1776344083 ^ -17881477;
            continue;
          case 10:
            num1 = (int) num3 * -1312318409 ^ -211871793;
            continue;
          case 11:
            num1 = (int) num3 * 245486774 ^ 602389111;
            continue;
          case 12:
            str1 = Rules.\u206C⁪‬⁬⁬‏⁬‭‎⁯‍‬‎​⁫‍⁫‍​‬⁯‮​⁪‭‏‎‍⁭‬⁭‌‫‪‪‫⁪‌⁭‎‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * -1025291936 ^ -1945374624;
            continue;
          case 14:
            num1 = (int) num3 * -120764828 ^ -327748985;
            continue;
          case 15:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200C‏‌⁭⁬⁯⁭⁫⁪‭⁯‎‌‪‭⁫‍‫⁫‎‪​‫⁫⁯‫‭‎‍‌‍‮​‏​‭‮⁪⁪⁭‮((object) card2) : (string) null;
            str1 = Rules.\u200C⁬⁭‮‫⁭‮⁮‬‌‮⁯⁫‬‫‏‪‭‮⁯⁮⁪⁮‫⁪‮⁬‌‭‮‌‫‏⁯⁮‮‬⁯‌‏‮(str3, str4, " ");
            num1 = 813522925;
            continue;
          case 16:
            int num4;
            num1 = num4 = index >= cards.Length ? 1564204540 : (num4 = 1976523009);
            continue;
          case 17:
            num1 = (int) num3 * -676152309 ^ 1072071834;
            continue;
          case 18:
            int num5 = !flag ? -2068108182 : (num5 = -833382213);
            num1 = num5 ^ (int) num3 * -866574090;
            continue;
          default:
            goto label_20;
        }
      }
label_20:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -1939702954;
      bool flag;
      string str1;
      string str2;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1439423007)) % 9U)
        {
          case 0:
            flag = index < this.RiskChances.Length;
            num1 = -1923602966;
            continue;
          case 1:
            num1 = (int) num2 * -1003931975 ^ 1314223042;
            continue;
          case 2:
            str1 = Rules.\u206C⁪‬⁬⁬‏⁬‭‎⁯‍‬‎​⁫‍⁫‍​‬⁯‮​⁪‭‏‎‍⁭‬⁭‌‫‪‪‫⁪‌⁭‎‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202A‬​‌‫‎​⁬‮‏‬⁫‎‌‬⁫‎‫‏⁪⁮​⁫⁭‪⁯⁫⁫⁮‪‎‫‎‍‮⁬​‏‏⁯‮()));
            index = 1;
            num1 = (int) num2 * -2120503131 ^ 1679422453;
            continue;
          case 3:
            str1 = Rules.\u200C⁬⁭‮‫⁭‮⁮‬‌‮⁯⁫‬‫‏‪‭‮⁯⁮⁪⁮‫⁪‮⁬‌‭‮‌‫‏⁯⁮‮‬⁯‌‏‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202A‬​‌‫‎​⁬‮‏‬⁫‎‌‬⁫‎‫‏⁪⁮​⁫⁭‪⁯⁫⁫⁮‪‎‫‎‍‮⁬​‏‏⁯‮()));
            num1 = -1398356239;
            continue;
          case 4:
            str2 = Rules.\u206C⁪‬⁬⁬‏⁬‭‎⁯‍‬‎​⁫‍⁫‍​‬⁯‮​⁪‭‏‎‍⁭‬⁭‌‫‪‪‫⁪‌⁭‎‮(str1, " ]");
            num1 = (int) num2 * 248394615 ^ -1275134990;
            continue;
          case 5:
            int num3 = flag ? -1243444993 : (num3 = -1070301924);
            num1 = num3 ^ (int) num2 * 2098287936;
            continue;
          case 7:
            goto label_1;
          case 8:
            ++index;
            num1 = (int) num2 * -913828877 ^ -1887629795;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200C‎‪‌‌⁫‌​⁬⁯‫‫⁮⁮⁪‬⁫‭⁯⁬‌⁯‭⁮‬‫⁮⁫‫‏⁭⁭‬⁬​⁬⁯‭⁫‫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206C⁪‬⁬⁬‏⁬‭‎⁯‍‬‎​⁫‍⁫‍​‬⁯‮​⁪‭‏‎‍⁭‬⁭‌‫‪‪‫⁪‌⁭‎‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200C‏‌⁭⁬⁯⁭⁫⁪‭⁯‎‌‪‭⁫‍‫⁫‎‪​‫⁫⁯‫‭‎‍‌‍‮​‏​‭‮⁪⁪⁭‮([In] object obj0) => obj0.ToString();

    static string \u200C⁬⁭‮‫⁭‮⁮‬‌‮⁯⁫‬‫‏‪‭‮⁯⁮⁪⁮‫⁪‮⁬‌‭‮‌‫‏⁯⁮‮‬⁯‌‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202A‬​‌‫‎​⁬‮‏‬⁫‎‌‬⁫‎‫‏⁪⁮​⁫⁭‪⁯⁫⁫⁮‪‎‫‎‍‮⁬​‏‏⁯‮() => CultureInfo.InvariantCulture;
  }
}
