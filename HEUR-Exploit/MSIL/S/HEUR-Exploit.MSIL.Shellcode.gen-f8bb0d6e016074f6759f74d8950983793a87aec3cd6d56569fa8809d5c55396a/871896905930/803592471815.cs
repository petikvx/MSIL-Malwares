// Decompiled with JetBrains decompiler
// Type: 871896905930.803592471815
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003119946969824;
using \u003213435668470;
using \u003219025586000;
using \u003280503260781;
using \u003370403208265;
using \u003503721005738;
using \u003677310517421;
using \u003871896905930;
using \u003955100700904;
using Microsoft.PythonTools.Infrastructure;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;

namespace \u003871896905930
{
  internal sealed class \u003803592471815 : IDisposable
  {
    private static readonly Dictionary<int, \u003803592471815> \u003540340290905 = new Dictionary<int, \u003803592471815>();
    private readonly int \u003763510462347;

    public static \u003803592471815 \u003762168472081(int _param0)
    {
      \u003803592471815 obj;
      lock (\u003803592471815.\u003540340290905)
      {
        if (!\u003803592471815.\u003540340290905.TryGetValue(_param0, out obj))
          \u003803592471815.\u003540340290905[_param0] = obj = new \u003803592471815(_param0);
      }
      return obj;
    }

    public static \u003803592471815 \u003269632878397(string _param0)
    {
      string environmentVariable = Environment.GetEnvironmentVariable(_param0);
      if (environmentVariable == null)
        return (\u003803592471815) null;
      int result;
      return !int.TryParse(environmentVariable, out result) ? (\u003803592471815) null : \u003803592471815.\u003762168472081(result);
    }

    public \u003803592471815(int processId) => this.\u003763510462347 = processId;

    public void \u003691720660662()
    {
      lock (\u003803592471815.\u003540340290905)
        \u003803592471815.\u003540340290905.Remove(this.\u003763510462347);
    }

    [DllImport("ole32.dll", EntryPoint = "CreateBindCtx")]
    private static extern int \u003734004624861(uint _param0, out IBindCtx _param1);

    public DTE \u003217525863766() => \u003803592471815.\u003757304630166(this.\u003763510462347) ?? throw new InvalidOperationException("Could not find VS DTE object for process " + this.\u003763510462347.ToString());

    private static DTE \u003757304630166(int _param0)
    {
      \u003857656083699.\u003783210167578();
      string str = Process.GetProcessById(_param0).ProcessName;
      if ("devenv".Equals(str, StringComparison.OrdinalIgnoreCase))
        str = "VisualStudio";
      string b = string.Format("!{0}.DTE.{1}:{2}", (object) str, (object) "16.0", (object) _param0);
      object ppunkObject = (object) null;
      IBindCtx bindCtx = (IBindCtx) null;
      IRunningObjectTable pprot = (IRunningObjectTable) null;
      IEnumMoniker ppenumMoniker = (IEnumMoniker) null;
      try
      {
        Marshal.ThrowExceptionForHR(\u003803592471815.\u003734004624861(0U, out bindCtx));
        bindCtx.GetRunningObjectTable(out pprot);
        pprot.EnumRunning(out ppenumMoniker);
        IMoniker[] rgelt = new IMoniker[1];
        while (ppenumMoniker.Next(1, rgelt, IntPtr.Zero) == 0)
        {
          IMoniker pmkObjectName = rgelt[0];
          string ppszDisplayName = (string) null;
          try
          {
            pmkObjectName?.GetDisplayName(bindCtx, (IMoniker) null, out ppszDisplayName);
          }
          catch (UnauthorizedAccessException ex)
          {
          }
          if (!string.IsNullOrEmpty(ppszDisplayName) && string.Equals(ppszDisplayName, b, StringComparison.Ordinal))
          {
            pprot.GetObject(pmkObjectName, out ppunkObject);
            break;
          }
        }
      }
      finally
      {
        if (ppenumMoniker != null)
          Marshal.ReleaseComObject((object) ppenumMoniker);
        if (pprot != null)
          Marshal.ReleaseComObject((object) pprot);
        if (bindCtx != null)
          Marshal.ReleaseComObject((object) bindCtx);
      }
      return (DTE) ppunkObject;
    }

    public bool \u003239671808114(ProcessOutput _param1, Guid _param2, string _param3)
    {
      // ISSUE: variable of a compiler-generated type
      Debugger3 debugger = (Debugger3) this.\u003217525863766().Debugger;
      // ISSUE: variable of a compiler-generated type
      Transports transports = debugger.Transports;
      // ISSUE: variable of a compiler-generated type
      Transport pTransport = (Transport) null;
      for (int index = 1; index <= transports.Count; ++index)
      {
        // ISSUE: reference to a compiler-generated method
        // ISSUE: variable of a compiler-generated type
        Transport transport = transports.Item((object) index);
        if (Guid.Parse(transport.ID) == _param2)
        {
          pTransport = transport;
          break;
        }
      }
      if (pTransport == null)
        return false;
      // ISSUE: reference to a compiler-generated method
      // ISSUE: variable of a compiler-generated type
      Processes processes = debugger.GetProcesses(pTransport, _param3);
      if (processes.Count < 1)
        return false;
      // ISSUE: reference to a compiler-generated method
      // ISSUE: variable of a compiler-generated type
      Process process = processes.Item((object) 1);
      return this.\u003049085099425(_param1, process);
    }

    public bool \u003216201335603(ProcessOutput _param1, Guid[] _param2)
    {
      // ISSUE: variable of a compiler-generated type
      Processes localProcesses = ((Debugger3) this.\u003217525863766().Debugger).LocalProcesses;
      for (int index = 1; index < localProcesses.Count; ++index)
      {
        // ISSUE: reference to a compiler-generated method
        // ISSUE: variable of a compiler-generated type
        Process process = localProcesses.Item((object) index);
        int processId1 = process.ProcessID;
        int? processId2 = _param1.ProcessId;
        int valueOrDefault = processId2.GetValueOrDefault();
        if (processId1 == valueOrDefault & processId2.HasValue)
          return this.\u003049085099425(_param1, process, _param2);
      }
      return false;
    }

    public bool \u003049085099425(ProcessOutput _param1_1, Process _param2, Guid[] _param3 = null)
    {
      // ISSUE: variable of a compiler-generated type
      DTE dte = this.\u003217525863766();
      dte.SuppressUI = true;
      try
      {
        if (_param3 == null)
        {
          // ISSUE: reference to a compiler-generated method
          _param2.Attach();
        }
        else
        {
          if (!(_param2 is Process3 process3))
            return false;
          string[] array = ((IEnumerable<Guid>) _param3).Select<Guid, string>((Func<Guid, string>) (_param1_2 => _param1_2.ToString("B"))).ToArray<string>();
          // ISSUE: reference to a compiler-generated method
          process3.Attach2((object) array);
        }
        return true;
      }
      catch (COMException ex)
      {
        if (_param1_1.Wait(TimeSpan.FromMilliseconds(500.0)))
          return false;
      }
      finally
      {
        dte.SuppressUI = false;
      }
      // ISSUE: reference to a compiler-generated method
      _param2.Attach();
      return true;
    }
  }
}
