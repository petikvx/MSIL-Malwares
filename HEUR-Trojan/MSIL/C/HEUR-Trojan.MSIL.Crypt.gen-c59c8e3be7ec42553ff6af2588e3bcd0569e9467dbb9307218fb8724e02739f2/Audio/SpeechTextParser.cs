// Decompiled with JetBrains decompiler
// Type: Cradiator.Audio.SpeechTextParser
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Cradiator.Audio
{
  public class SpeechTextParser : ISpeechTextParser
  {
    private readonly IBuildBuster _buildBuster;

    public SpeechTextParser([InjectBuildBusterFullNameDecorator] IBuildBuster buildBuster) => this._buildBuster = buildBuster;

    public string Parse(string sentence, ProjectStatus projectStatus)
    {
      IEnumerable<string> source = ((IEnumerable<string>) sentence.Split(' ', ',', '.')).Where<string>((Func<string, bool>) (word => word.StartsWith("$"))).Where<string>((Func<string, bool>) (word => word.EndsWith("$")));
      if (source.Any<string>())
      {
        foreach (string oldValue in source)
        {
          if (oldValue == "$ProjectName$")
            sentence = sentence.Replace(oldValue, projectStatus.Name);
          if (oldValue == "$Breaker$")
            sentence = sentence.Replace(oldValue, this._buildBuster.FindBreaker(projectStatus.CurrentMessage));
        }
      }
      else
        sentence = string.Format("{0}, {1}", (object) projectStatus.Name, (object) sentence);
      return sentence;
    }
  }
}
