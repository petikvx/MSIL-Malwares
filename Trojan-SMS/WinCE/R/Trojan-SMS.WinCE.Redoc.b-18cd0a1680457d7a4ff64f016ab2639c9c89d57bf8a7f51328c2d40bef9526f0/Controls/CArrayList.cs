// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CArrayList
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.Other;
using System;
using System.Collections;

namespace Dbasic.Controls
{
  public class CArrayList : CControls
  {
    public CArrayList(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      ArrayList control = (ArrayList) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "add":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          ++place.WordI;
          control.Add((object) runReturn1.vString);
          return new MethodReturn(place);
        case "insert":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          ++place.WordI;
          int vDouble1 = (int) runReturn2.vDouble;
          RunReturn runReturn3 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn3.place;
          ++place.WordI;
          control.Insert(vDouble1, (object) runReturn3.vString);
          return new MethodReturn(place);
        case "count":
          return new MethodReturn(place, control.Count.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "removeat":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn4 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn4.place;
          ++place.WordI;
          control.RemoveAt((int) runReturn4.vDouble);
          return new MethodReturn(place);
        case "remove":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn5 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn5.place;
          ++place.WordI;
          control.Remove((object) runReturn5.vString);
          return new MethodReturn(place);
        case "clear":
          control.Clear();
          return new MethodReturn(place);
        case "item":
          if (assign)
          {
            RunReturn runReturn6 = this.CRunner.RunCode(place, false, true, ref locals);
            place = runReturn6.place;
            int vDouble2 = (int) runReturn6.vDouble;
            ++place.WordI;
            ++place.WordI;
            RunReturn runReturn7 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn7.place;
            control[vDouble2] = (object) runReturn7.vString;
            return new MethodReturn(place);
          }
          ++place.WordI;
          RunReturn runReturn8 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn8.place;
          int vDouble3 = (int) runReturn8.vDouble;
          ++place.WordI;
          return new MethodReturn(place, control[vDouble3].ToString(), 0.0);
        case "indexof":
          ++place.WordI;
          RunReturn runReturn9 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn9.place;
          string vString = runReturn9.vString;
          if (!(this.CRunner.nextWord(true, ref place).Value == ","))
            return new MethodReturn(place, control.IndexOf((object) vString).ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn10 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn10.place;
          int vDouble4 = (int) runReturn10.vDouble;
          ++place.WordI;
          RunReturn runReturn11 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn11.place;
          ++place.WordI;
          int vDouble5 = (int) runReturn11.vDouble;
          return new MethodReturn(place, control.IndexOf((object) vString, vDouble4, vDouble5).ToString((IFormatProvider) CRunner.cul), 0.0);
        case "reverse":
          control.Reverse();
          return new MethodReturn(place);
        case "sort":
          RunReturn runReturn12 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn12.place;
          switch ((int) runReturn12.vDouble)
          {
            case 0:
              if (this.CRunner.caseCompare == null)
                this.CRunner.caseCompare = new Comparer(CRunner.cul);
              control.Sort((IComparer) this.CRunner.caseCompare);
              break;
            case 1:
              if (this.CRunner.caseNotCompare == null)
                this.CRunner.caseNotCompare = new CaseInsensitiveComparer(CRunner.cul);
              control.Sort((IComparer) this.CRunner.caseNotCompare);
              break;
            case 2:
              if (this.CRunner.numbersCompare == null)
                this.CRunner.numbersCompare = new CCompareNumbers();
              control.Sort((IComparer) this.CRunner.numbersCompare);
              break;
          }
          ++place.WordI;
          return new MethodReturn(place);
        default:
          return new MethodReturn(place);
      }
    }

    public override void AddRunTimeEvent(object sender, string name)
    {
    }

    public MethodReturn addArrayList(Place place, ref Locals locals)
    {
      ++place.WordI;
      RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn.place;
      string lower = runReturn.vString.ToLower(CRunner.cul);
      ++place.WordI;
      ArrayList control = new ArrayList();
      this.CRunner.htControls.Add((object) lower, (object) new WrapControl((object) control, (CControls) this));
      return new MethodReturn(place);
    }

    public void ShortAdd(string s)
    {
      ArrayList control = new ArrayList();
      string Name;
      CBuildDesigner.ArrayListGetProperties(s, out string _, out Name, out int _, out int _, out int _, out int _);
      this.CRunner.htControls.Add((object) Name.ToLower(CRunner.cul), (object) new WrapControl((object) control, (CControls) this));
    }
  }
}
