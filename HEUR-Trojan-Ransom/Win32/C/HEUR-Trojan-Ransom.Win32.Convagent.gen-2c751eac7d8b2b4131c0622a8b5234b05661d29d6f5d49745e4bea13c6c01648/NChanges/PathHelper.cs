// Decompiled with JetBrains decompiler
// Type: NChanges.PathHelper
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace NChanges
{
  public static class PathHelper
  {
    public static IEnumerable<string> ExpandPaths(IEnumerable<string> paths) => paths.SelectMany<string, string>((Func<string, IEnumerable<string>>) (p => PathHelper.ExpandPath(p)));

    public static IEnumerable<string> ExpandPath(string path)
    {
      string path1 = ".";
      string searchPattern = path;
      if (path.Contains<char>(Path.DirectorySeparatorChar) || path.Contains<char>(Path.AltDirectorySeparatorChar))
      {
        path1 = Path.GetDirectoryName(path);
        searchPattern = Path.GetFileName(path);
      }
      return (IEnumerable<string>) Directory.GetFiles(path1, searchPattern);
    }

    public static string FormatPath(string output, AssemblyInfo assembly) => output.Replace("%name%", assembly.Name).Replace("%version%", assembly.Version);

    public static void EnsureFolderExists(string outputPath)
    {
      string directoryName = Path.GetDirectoryName(outputPath);
      if (string.IsNullOrEmpty(directoryName) || Directory.Exists(directoryName))
        return;
      Directory.CreateDirectory(directoryName);
    }
  }
}
