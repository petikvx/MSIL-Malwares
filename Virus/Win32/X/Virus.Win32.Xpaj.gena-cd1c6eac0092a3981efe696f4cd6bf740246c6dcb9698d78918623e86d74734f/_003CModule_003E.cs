// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using \u003CCppImplementationDetails\u003E;
using \u003CCrtImplementationDetails\u003E;
using ATL;
using Microsoft.MediaCenter.TV.Tuners;
using Microsoft.MediaCenter.TV.Tuning;
using std;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Threading;

internal class \u003CModule\u003E
{
  internal static \u0024ArrayType\u0024\u0024\u0024BY01\u0024\u0024CBG \u003F\u003F_C\u0040_13HADIAKP\u0040\u003F\u0024AAS\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY01\u0024\u0024CBG \u003F\u003F_C\u0040_13LHMFKAAD\u0040\u003F\u0024AAM\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY01\u0024\u0024CBG \u003F\u003F_C\u0040_13MKMNOPIJ\u0040\u003F\u0024AAD\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY01\u0024\u0024CBG \u003F\u003F_C\u0040_13OPKGLAFF\u0040\u003F\u0024AAB\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY03\u0024\u0024CBG \u003F\u003F_C\u0040_17LLMMEOJD\u0040\u003F\u0024AAV\u003F\u0024AAa\u003F\u0024AAl\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0M\u0040\u0024\u0024CBG \u003F\u003F_C\u0040_1BI\u0040JFAIJMHL\u0040\u003F\u0024AAF\u003F\u0024AAo\u003F\u0024AAr\u003F\u0024AAc\u003F\u0024AAe\u003F\u0024AAR\u003F\u0024AAe\u003F\u0024AAm\u003F\u0024AAo\u003F\u0024AAv\u003F\u0024AAe\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY08\u0024\u0024CBG \u003F\u003F_C\u0040_1BC\u0040GCKHIPE\u0040\u003F\u0024AAN\u003F\u0024AAo\u003F\u0024AAR\u003F\u0024AAe\u003F\u0024AAm\u003F\u0024AAo\u003F\u0024AAv\u003F\u0024AAe\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY06\u0024\u0024CBG \u003F\u003F_C\u0040_1O\u0040JDLOHAN\u0040\u003F\u0024AAD\u003F\u0024AAe\u003F\u0024AAl\u003F\u0024AAe\u003F\u0024AAt\u003F\u0024AAe\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static __s_GUID _GUID_00000000_0000_0000_c000_000000000046;
  internal static _GUID CLSID_RecorderManager;
  internal static CAtlReleaseManagedClassFactories ATL\u002E_AtlReleaseManagedClassFactories;
  internal static __FnPtr<void ()> ATL\u002E\u003FA0x2c051daf\u002E_AtlReleaseManagedClassFactories\u0024initializer\u0024;
  internal static int __\u0040\u0040_PchSym_\u004000\u0040UdHignOlyqOcIGuivUnfogrnvwrzUhozolnUkozgulinUoryhUgfmvirmgvilkUlyquivUrDIGUhgwzucOlyq\u0040Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EInterop;
  internal static _GUID CLSID_StdGlobalInterfaceTable;
  internal static unsafe void* _pAtlReleaseManagedClassFactories;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EszBinaryVal;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EszStringVal;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EszForceRemove;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EszValToken;
  internal static unsafe _ATL_OBJMAP_ENTRY30* __pobjMapEntryLast;
  internal static unsafe _ATL_OBJMAP_ENTRY30* __pobjMapEntryFirst;
  internal static bool \u003Fm_bInitFailed\u0040CAtlBaseModule\u0040ATL\u0040\u00402_NA;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EszNoRemove;
  internal static unsafe CAtlModule* ATL\u002E_pAtlModule;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EszDwordVal;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EmultiszStringVal;
  internal static unsafe ushort* ATL\u002E\u003FA0x2c051daf\u002EszDelete;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0P\u0040\u0024\u0024CBD \u003F\u003F_C\u0040_0P\u0040GHFPNOJB\u0040bad\u003F5allocation\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0BB\u0040\u0024\u0024CBD \u003F\u003F_C\u0040_0BB\u0040MOGOBHAF\u0040list\u003F\u0024DMT\u003F\u0024DO\u003F5too\u003F5long\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0BD\u0040\u0024\u0024CBD \u003F\u003F_C\u0040_0BD\u0040OLBABOEK\u0040vector\u003F\u0024DMT\u003F\u0024DO\u003F5too\u003F5long\u003F\u0024AA\u0040;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_32 \u003F\u003F_R2TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_8 \u003F\u003F_R2ComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_12 \u003F\u003F_R2length_error\u0040std\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_8 \u003F\u003F_R2logic_error\u0040std\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_8 \u003F\u003F_R2bad_alloc\u0040std\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_4 \u003F\u003F_R2exception\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_8 \u003F\u003F_R2IESEvents\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_12 \u003F\u003F_R2ITunerEvents2\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_8 \u003F\u003F_R2ITunerEvents\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1BA\u0040\u003F0A\u0040EC\u0040IUnknown\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1BA\u0040\u003F0A\u0040EA\u0040IESEvents\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1M\u0040\u003F0A\u0040EC\u0040IUnknown\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1M\u0040\u003F0A\u0040EA\u0040ITunerEvents\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1M\u0040\u003F0A\u0040EA\u0040ITunerEvents2\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EC\u0040IUnknown\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040ComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040length_error\u0040std\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040logic_error\u0040std\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040bad_alloc\u0040std\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040exception\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040IESEvents\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040ITunerEvents2\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040ITunerEvents\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040IUnknown\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_4 \u003F\u003F_R2IUnknown\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3IUnknown\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_15 \u003F\u003F_R0\u003FAUIUnknown\u0040\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_58 \u003F\u003F_R0\u003FAVTPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3ComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_50 \u003F\u003F_R0\u003FAVComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3length_error\u0040std\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3logic_error\u0040std\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3bad_alloc\u0040std\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3exception\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3IESEvents\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_16 \u003F\u003F_R0\u003FAUIESEvents\u0040\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3ITunerEvents2\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_20 \u003F\u003F_R0\u003FAUITunerEvents2\u0040\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3ITunerEvents\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_19 \u003F\u003F_R0\u003FAUITunerEvents\u0040\u0040\u00408;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIESEvents\u0040\u0040\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BITunerEvents2\u0040\u0040\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4ComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406B\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4length_error\u0040std\u0040\u00406B\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4logic_error\u0040std\u0040\u00406B\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4bad_alloc\u0040std\u0040\u00406B\u0040;
  internal static __s_GUID _GUID_b196b284_bab4_101a_b69c_00aa00341d07;
  internal static \u0024_s__CatchableTypeArray\u0024_extraBytes_8 _CTA2\u003FAVbad_alloc\u0040std\u0040\u0040;
  internal static _s__CatchableType _CT\u003F\u003F_R0\u003FAVbad_alloc\u0040std\u0040\u0040\u00408\u003F\u003F0bad_alloc\u0040std\u0040\u0040\u0024\u0024FQAE\u0040ABV01\u0040\u0040Z12;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_20 \u003F\u003F_R0\u003FAVbad_alloc\u0040std\u0040\u0040\u00408;
  internal static _s__ThrowInfo _TI2\u003FAVbad_alloc\u0040std\u0040\u0040;
  internal static __s_GUID _GUID_1f0e5357_af43_44e6_8547_654c645145d2;
  internal static \u0024_s__CatchableTypeArray\u0024_extraBytes_12 _CTA3\u003FAVlength_error\u0040std\u0040\u0040;
  internal static _s__CatchableType _CT\u003F\u003F_R0\u003FAVexception\u0040\u0040\u00408\u003F\u003F0exception\u0040\u0040\u0024\u0024FQAE\u0040ABV0\u0040\u0040Z12;
  internal static _s__CatchableType _CT\u003F\u003F_R0\u003FAVlogic_error\u0040std\u0040\u0040\u00408\u003F\u003F0logic_error\u0040std\u0040\u0040\u0024\u0024FQAE\u0040ABV01\u0040\u0040Z40;
  internal static _s__CatchableType _CT\u003F\u003F_R0\u003FAVlength_error\u0040std\u0040\u0040\u00408\u003F\u003F0length_error\u0040std\u0040\u0040\u0024\u0024FQAE\u0040ABV01\u0040\u0040Z40;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_22 \u003F\u003F_R0\u003FAVlogic_error\u0040std\u0040\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_23 \u003F\u003F_R0\u003FAVlength_error\u0040std\u0040\u0040\u00408;
  internal static _s__ThrowInfo _TI3\u003FAVlength_error\u0040std\u0040\u0040;
  internal static __s_GUID _GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c;
  internal static __s_GUID _GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_16 \u003F\u003F_R0\u003FAVexception\u0040\u0040\u00408;
  internal static __s_GUID _GUID_abd414bf_cfe5_4e5e_af5b_4b4e49c5bfeb;
  internal static __s_GUID _GUID_7beed4ad_1256_43e4_8dea_0e7a6f9a2a93;
  internal static \u0024ArrayType\u0024\u0024\u0024BY04Q6GXXZ \u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIESEvents\u0040\u0040\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0BK\u0040Q6GXXZ \u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BITunerEvents2\u0040\u0040\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY04Q6GXXZ \u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
  internal static __s_GUID _GUID_00000003_0000_0000_c000_000000000046;
  internal static \u0024ArrayType\u0024\u0024\u0024BY04Q6GXXZ \u003F\u003F_7ComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406B\u0040;
  internal static __s_GUID _GUID_379848e6_2751_42c0_8de6_9457cdc61d60;
  internal static __s_GUID _GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339;
  internal static __s_GUID _GUID_7eab3a3d_0900_43a5_9189_631ac98ed822;
  internal static __s_GUID _GUID_07f3961a_f626_4bbc_a24f_1e72175f84fb;
  internal static \u0024ArrayType\u0024\u0024\u0024BY02Q6GXXZ \u003F\u003F_7length_error\u0040std\u0040\u00406B\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY02Q6GXXZ \u003F\u003F_7logic_error\u0040std\u0040\u00406B\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY02Q6GXXZ \u003F\u003F_7bad_alloc\u0040std\u0040\u00406B\u0040;
  internal static unsafe sbyte* std\u002E\u003FA0x33a3b5da\u002E_bad_alloc_Message;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_20 \u003F\u003F_R2RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_8 \u003F\u003F_R2IRecorderMgrEvents\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1M\u0040\u003F0A\u0040EA\u0040IRecorderMgrEvents\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040IRecorderMgrEvents\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_62 \u003F\u003F_R0\u003FAVRecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u00408;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3IRecorderMgrEvents\u0040\u00408;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_25 \u003F\u003F_R0\u003FAUIRecorderMgrEvents\u0040\u0040\u00408;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIRecorderMgrEvents\u0040\u0040\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
  internal static __s_GUID _GUID_00000146_0000_0000_c000_000000000046;
  internal static \u0024ArrayType\u0024\u0024\u0024BY06Q6GXXZ \u003F\u003F_7RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIRecorderMgrEvents\u0040\u0040\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY04Q6GXXZ \u003F\u003F_7RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
  internal static __s_GUID _GUID_a43cf053_d95a_4720_aa5d_6277aacff043;
  internal static __s_GUID _GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa;
  internal static unsafe sbyte* std\u002E\u003FA0xdfabd960\u002E_bad_alloc_Message;
  internal static \u0024ArrayType\u0024\u0024\u0024BY00Q6MPBXXZ \u003FA0x03dbac58\u002E__xc_mp_z;
  [FixedAddressValueType]
  internal static int \u003FUninitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA;
  internal static __FnPtr<void ()> \u003FA0x03dbac58\u002E\u003FUninitialized\u0024initializer\u0024\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2P6MXXZA;
  internal static \u0024ArrayType\u0024\u0024\u0024BY00Q6MPBXXZ \u003FA0x03dbac58\u002E__xi_vt_a;
  [FixedAddressValueType]
  internal static Progress.State \u003FInitializedPerAppDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A;
  internal static __FnPtr<void ()> \u003FA0x03dbac58\u002E\u003FInitializedPerAppDomain\u0024initializer\u0024\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2P6MXXZA;
  [FixedAddressValueType]
  internal static bool \u003FIsDefaultDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2_NA;
  internal static __FnPtr<void ()> \u003FA0x03dbac58\u002E\u003FIsDefaultDomain\u0024initializer\u0024\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2P6MXXZA;
  internal static \u0024ArrayType\u0024\u0024\u0024BY00Q6MPBXXZ \u003FA0x03dbac58\u002E__xc_ma_a;
  [FixedAddressValueType]
  internal static Progress.State \u003FInitializedNative\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A;
  internal static __FnPtr<void ()> \u003FA0x03dbac58\u002E\u003FInitializedNative\u0024initializer\u0024\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2P6MXXZA;
  [FixedAddressValueType]
  internal static int \u003FInitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA;
  internal static __FnPtr<void ()> \u003FA0x03dbac58\u002E\u003FInitialized\u0024initializer\u0024\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2P6MXXZA;
  internal static \u0024ArrayType\u0024\u0024\u0024BY00Q6MPBXXZ \u003FA0x03dbac58\u002E__xc_ma_z;
  [FixedAddressValueType]
  internal static Progress.State \u003FInitializedVtables\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A;
  internal static __FnPtr<void ()> \u003FA0x03dbac58\u002E\u003FInitializedVtables\u0024initializer\u0024\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2P6MXXZA;
  internal static \u0024ArrayType\u0024\u0024\u0024BY00Q6MPBXXZ \u003FA0x03dbac58\u002E__xi_vt_z;
  [FixedAddressValueType]
  internal static Progress.State \u003FInitializedPerProcess\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A;
  internal static __FnPtr<void ()> \u003FA0x03dbac58\u002E\u003FInitializedPerProcess\u0024initializer\u0024\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2P6MXXZA;
  internal static bool \u003FInitializedPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA;
  internal static bool \u003FEntered\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA;
  internal static bool \u003FInitializedNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA;
  internal static int \u003FCount\u0040AllDomains\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402HA;
  internal static TriBool.State \u003FhasNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A;
  internal static TriBool.State \u003FhasPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A;
  internal static bool \u003FInitializedNativeFromCCTOR\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA;
  internal static \u0024ArrayType\u0024\u0024\u0024BY00Q6MPBXXZ \u003FA0x03dbac58\u002E__xc_mp_a;
  public static unsafe int** __unep\u0040\u003FDoNothing\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024FCGJPAX\u0040Z;
  public static unsafe int** __unep\u0040\u003F_UninitializeDefaultDomain\u0040LanguageSupport\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024FCGJPAX\u0040Z;
  internal static \u0024ArrayType\u0024\u0024\u0024BY02Q6AXXZ \u003F\u003F_7bad_alloc\u0040std\u0040\u00406B\u0040;
  internal static unsafe sbyte* std\u002E\u003FA0x7739d334\u002E_bad_alloc_Message;
  [FixedAddressValueType]
  internal static uint __exit_list_size_app_domain;
  [FixedAddressValueType]
  internal static Handle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E \u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A;
  internal static __FnPtr<void ()> \u003FA0x37a6207f\u002E\u003F_lock\u0024initializer\u0024\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0P6MXXZA;
  [FixedAddressValueType]
  internal static unsafe __FnPtr<void ()>* __onexitbegin_app_domain;
  internal static uint \u003FA0x37a6207f\u002E__exit_list_size;
  internal static unsafe __FnPtr<void ()>* \u003FA0x37a6207f\u002E__onexitend;
  internal static unsafe __FnPtr<void ()>* \u003FA0x37a6207f\u002E__onexitbegin;
  [FixedAddressValueType]
  internal static unsafe __FnPtr<void ()>* __onexitend_app_domain;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0BA\u0040\u0024\u0024CBD \u003F\u003F_C\u0040_0BA\u0040JFNIOLAK\u0040string\u003F5too\u003F5long\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0BI\u0040\u0024\u0024CBD \u003F\u003F_C\u0040_0BI\u0040CFPLBAOH\u0040invalid\u003F5string\u003F5position\u003F\u0024AA\u0040;
  internal static _s__RTTICompleteObjectLocator \u003F\u003F_R4out_of_range\u0040std\u0040\u00406B\u0040;
  internal static \u0024_TypeDescriptor\u0024_extraBytes_23 \u003F\u003F_R0\u003FAVout_of_range\u0040std\u0040\u0040\u00408;
  internal static _s__ThrowInfo _TI3\u003FAVout_of_range\u0040std\u0040\u0040;
  internal static _s__CatchableType _CT\u003F\u003F_R0\u003FAVout_of_range\u0040std\u0040\u0040\u00408\u003F\u003F0out_of_range\u0040std\u0040\u0040\u0024\u0024FQAE\u0040ABV01\u0040\u0040Z40;
  internal static \u0024_s__RTTIBaseClassArray\u0024_extraBytes_12 \u003F\u003F_R2out_of_range\u0040std\u0040\u00408;
  internal static \u0024ArrayType\u0024\u0024\u0024BY02Q6AXXZ \u003F\u003F_7length_error\u0040std\u0040\u00406B\u0040;
  internal static \u0024_s__CatchableTypeArray\u0024_extraBytes_12 _CTA3\u003FAVout_of_range\u0040std\u0040\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY02Q6AXXZ \u003F\u003F_7logic_error\u0040std\u0040\u00406B\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY02Q6AXXZ \u003F\u003F_7out_of_range\u0040std\u0040\u00406B\u0040;
  internal static _s__RTTIClassHierarchyDescriptor \u003F\u003F_R3out_of_range\u0040std\u0040\u00408;
  internal static unsafe sbyte* std\u002E\u003FA0xfbe1d743\u002E_bad_alloc_Message;
  internal static long std\u002E\u003FA0xfbe1d743\u002E__Fpz;
  internal static _s__RTTIBaseClassDescriptor2 \u003F\u003F_R1A\u0040\u003F0A\u0040EA\u0040out_of_range\u0040std\u0040\u00408;
  internal static __s_GUID _GUID_90f1a06e_7712_4762_86b5_7a5eba6bdb02;
  internal static __s_GUID _GUID_cb2f6722_ab3a_11d2_9c40_00c04fa30a3e;
  internal static __s_GUID _GUID_cb2f6723_ab3a_11d2_9c40_00c04fa30a3e;
  internal static __s_GUID _GUID_90f1a06c_7712_4762_86b5_7a5eba6bdb02;
  internal static unsafe void* \u003FA0x8f7aea2c\u002E\u003FBegin\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA;
  internal static unsafe void* \u003FA0x8f7aea2c\u002E\u003FEnd\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA;
  static unsafe int** __unep\u0040\u003F_errno\u0040\u0040\u0024\u0024J0YAPAHXZ;
  internal static _Init_locks std\u002E\u003FA0xbb98010b\u002Einitlocks;
  internal static __FnPtr<void ()> std\u002E\u003FA0xbb98010b\u002Einitlocks\u0024initializer\u0024;
  internal static int std\u002E\u003FA0xbb98010b\u002Einit;
  internal static \u0024ArrayType\u0024\u0024\u0024BY03U_RTL_CRITICAL_SECTION\u0040\u0040 std\u002E\u003FA0xbb98010b\u002Emtx;
  internal static locale.id \u003Fid\u0040\u003F\u0024num_put\u0040DV\u003F\u0024ostreambuf_iterator\u0040DU\u003F\u0024char_traits\u0040D\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024num_get\u0040DV\u003F\u0024istreambuf_iterator\u0040DU\u003F\u0024char_traits\u0040D\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024codecvt\u0040DDH\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024numpunct\u0040D\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static unsafe sbyte* std\u002E\u003FA0xaba860f4\u002E_bad_alloc_Message;
  internal static long std\u002E\u003FA0xaba860f4\u002E__Fpz;
  internal static locale.id \u003Fid\u0040\u003F\u0024codecvt\u0040_WDH\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024ctype\u0040_W\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024ctype\u0040D\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static unsafe locale._Locimp* \u003FA0x4e57e0f1\u002Eglobal_locale;
  internal static locale std\u002E\u003FA0x4e57e0f1\u002Eclassic_locale;
  internal static __FnPtr<void ()> std\u002E\u003FA0x4e57e0f1\u002Eclassic_locale\u0024initializer\u0024;
  internal static locale.id \u003Fid\u0040\u003F\u0024codecvt\u0040GDH\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024ctype\u0040G\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static unsafe locale._Locimp* \u003F_Clocptr\u0040_Locimp\u0040locale\u0040std\u0040\u00400PAV123\u0040A;
  internal static unsafe sbyte* std\u002E\u003FA0x4e57e0f1\u002E_bad_alloc_Message;
  internal static int \u003F_Id_cnt\u0040id\u0040locale\u0040std\u0040\u00400HA;
  internal static long std\u002E\u003FA0x4e57e0f1\u002E__Fpz;
  internal static unsafe _Fac_node* std\u002E\u003FA0x4e57e0f1\u002E_Fac_head;
  internal static locale.id \u003Fid\u0040\u003F\u0024moneypunct\u0040G\u00240A\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024money_get\u0040GV\u003F\u0024istreambuf_iterator\u0040GU\u003F\u0024char_traits\u0040G\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024moneypunct\u0040_W\u002400\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024moneypunct\u0040G\u002400\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024time_put\u0040_WV\u003F\u0024ostreambuf_iterator\u0040_WU\u003F\u0024char_traits\u0040_W\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024time_get\u0040_WV\u003F\u0024istreambuf_iterator\u0040_WU\u003F\u0024char_traits\u0040_W\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024num_get\u0040_WV\u003F\u0024istreambuf_iterator\u0040_WU\u003F\u0024char_traits\u0040_W\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024moneypunct\u0040_W\u00240A\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024numpunct\u0040_W\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024money_put\u0040GV\u003F\u0024ostreambuf_iterator\u0040GU\u003F\u0024char_traits\u0040G\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024collate\u0040_W\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024money_get\u0040_WV\u003F\u0024istreambuf_iterator\u0040_WU\u003F\u0024char_traits\u0040_W\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024numpunct\u0040G\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024num_put\u0040GV\u003F\u0024ostreambuf_iterator\u0040GU\u003F\u0024char_traits\u0040G\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024collate\u0040G\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024num_get\u0040GV\u003F\u0024istreambuf_iterator\u0040GU\u003F\u0024char_traits\u0040G\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024num_put\u0040_WV\u003F\u0024ostreambuf_iterator\u0040_WU\u003F\u0024char_traits\u0040_W\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024time_put\u0040GV\u003F\u0024ostreambuf_iterator\u0040GU\u003F\u0024char_traits\u0040G\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024messages\u0040_W\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024money_put\u0040_WV\u003F\u0024ostreambuf_iterator\u0040_WU\u003F\u0024char_traits\u0040_W\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024time_get\u0040GV\u003F\u0024istreambuf_iterator\u0040GU\u003F\u0024char_traits\u0040G\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024messages\u0040G\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static unsafe sbyte* std\u002E\u003FA0xcc2bce4c\u002E_bad_alloc_Message;
  internal static long std\u002E\u003FA0xcc2bce4c\u002E__Fpz;
  internal static locale.id \u003Fid\u0040\u003F\u0024time_put\u0040DV\u003F\u0024ostreambuf_iterator\u0040DU\u003F\u0024char_traits\u0040D\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024collate\u0040D\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024messages\u0040D\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024moneypunct\u0040D\u002400\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024moneypunct\u0040D\u00240A\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024time_get\u0040DV\u003F\u0024istreambuf_iterator\u0040DU\u003F\u0024char_traits\u0040D\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024money_put\u0040DV\u003F\u0024ostreambuf_iterator\u0040DU\u003F\u0024char_traits\u0040D\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static locale.id \u003Fid\u0040\u003F\u0024money_get\u0040DV\u003F\u0024istreambuf_iterator\u0040DU\u003F\u0024char_traits\u0040D\u0040std\u0040\u0040\u0040std\u0040\u0040\u0040std\u0040\u00402V0locale\u00402\u0040A;
  internal static unsafe sbyte* std\u002E\u003FA0xbebf513d\u002E_bad_alloc_Message;
  internal static long std\u002E\u003FA0xbebf513d\u002E__Fpz;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0CF\u0040\u0024\u0024CBD \u003FA0xf9c9003a\u002Edigits;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0CF\u0040\u0024\u0024CBD \u003FA0xf9c9003a\u002Endigs;
  internal static _Init_atexit \u003FA0xce0ab027\u002Einit_atexit;
  internal static uint \u003FA0xce0ab027\u002Eatcount;
  internal static __FnPtr<void ()> \u003FA0xce0ab027\u002Einit_atexit\u0024initializer\u0024;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0FL\u0040D _PJP_CPP_Copyright;
  internal static \u0024ArrayType\u0024\u0024\u0024BY09P6AXXZ \u003FA0xce0ab027\u002Eatfuns;
  internal static _Init_locks std\u002E\u003FA0xce0ab027\u002Einitlocks;
  internal static __FnPtr<void ()> std\u002E\u003FA0xce0ab027\u002Einitlocks\u0024initializer\u0024;
  internal static unsafe basic_ostream\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E* std\u002E_Ptr_wcout;
  internal static unsafe basic_istream\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E* std\u002E_Ptr_cin;
  internal static unsafe sbyte* std\u002E\u003FA0xce0ab027\u002E_bad_alloc_Message;
  internal static long std\u002E\u003FA0xce0ab027\u002E__Fpz;
  internal static unsafe basic_ostream\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E* std\u002E_Ptr_clog;
  internal static unsafe basic_ostream\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E* std\u002E_Ptr_cerr;
  internal static unsafe basic_ostream\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E* std\u002E_Ptr_wclog;
  internal static unsafe basic_istream\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E* std\u002E_Ptr_wcin;
  internal static unsafe basic_ostream\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E* std\u002E_Ptr_wcerr;
  internal static unsafe basic_ostream\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E* std\u002E_Ptr_cout;
  internal static unsafe sbyte* std\u002E\u003FA0xdbf7f4f3\u002E_bad_alloc_Message;
  internal static long std\u002E\u003FA0xdbf7f4f3\u002E__Fpz;
  internal static float _FZero;
  internal static _Dconst _FDenorm;
  internal static float _FXbig;
  internal static _Dconst _FNan;
  internal static _Dconst _FRteps;
  internal static _Dconst _FEps;
  internal static _Dconst _FInf;
  internal static _Dconst _FSnan;
  internal static \u0024ArrayType\u0024\u0024\u0024BY05\u0024\u0024CBM \u003FA0x6069a87b\u002Epows;
  internal static _Dconst _Snan;
  internal static double _Xbig;
  internal static _Dconst _Denorm;
  internal static double _Zero;
  internal static _Dconst _Inf;
  internal static _Dconst _Nan;
  internal static _Dconst _Eps;
  internal static _Dconst _Hugeval;
  internal static _Dconst _Rteps;
  internal static \u0024ArrayType\u0024\u0024\u0024BY08\u0024\u0024CBN \u003FA0xa8027006\u002Epows;
  internal static _Dconst _LEps;
  internal static _Dconst _LNan;
  internal static _Dconst _LRteps;
  internal static _Dconst _LDenorm;
  internal static _Dconst _LInf;
  internal static double _LXbig;
  internal static _Dconst _LSnan;
  internal static double _LZero;
  internal static \u0024ArrayType\u0024\u0024\u0024BY08\u0024\u0024CBO \u003FA0x8a5e401a\u002Epows;
  internal static \u0024ArrayType\u0024\u0024\u0024BY06\u0024\u0024CBD \u003F\u003F_C\u0040_06OJHGLDPL\u0040\u003F\u0024CInull\u003F\u0024CJ\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY06\u0024\u0024CB_W \u003F\u003F_C\u0040_1O\u0040CEDCILHN\u0040\u003F\u0024AA\u003F\u0024CI\u003F\u0024AAn\u003F\u0024AAu\u003F\u0024AAl\u003F\u0024AAl\u003F\u0024AA\u003F\u0024CJ\u003F\u0024AA\u003F\u0024AA\u0040;
  internal static \u0024ArrayType\u0024\u0024\u0024BY0FJ\u0040\u0024\u0024CBE __lookuptable_s;
  internal static unsafe sbyte* __nullstring;
  internal static unsafe char* __wnullstring;
  public static \u0024ArrayType\u0024\u0024\u0024BY01Q6GXXZ \u003F\u003F_7type_info\u0040\u00406B\u0040;
  public static CAtlComModule ATL\u002E_AtlComModule;
  public static _GUID GUID_NULL;
  public static \u0024ArrayType\u0024\u0024\u0024BY0A\u0040P6AXXZ __xc_z;
  public static volatile uint __native_vcclrit_reason;
  public static \u0024ArrayType\u0024\u0024\u0024BY0A\u0040P6AXXZ __xc_a;
  public static \u0024ArrayType\u0024\u0024\u0024BY0A\u0040P6AHXZ __xi_a;
  public static volatile __enative_startup_state __native_startup_state;
  public static \u0024ArrayType\u0024\u0024\u0024BY0A\u0040P6AHXZ __xi_z;
  public static unsafe void* __native_startup_lock;
  public static volatile uint __native_dllmain_reason;
  public static \u0024ArrayType\u0024\u0024\u0024BY01Q6AXXZ \u003F\u003F_7type_info\u0040\u00406B\u0040;
  public static unsafe \u0024ArrayType\u0024\u0024\u0024BY0A\u0040U_iobuf\u0040\u0040* __imp__iob;
  public static unsafe ioinfo* __imp___badioinfo;
  public static unsafe \u0024ArrayType\u0024\u0024\u0024BY0A\u0040PAUioinfo\u0040\u0040* __imp___pioinfo;

  internal static unsafe void ATL\u002EAtlThrowImpl(int hr) => \u003CModule\u003E.RaiseException(hr != -2147024882 ? 3221225501U : 3221225495U, 1U, 0U, (uint*) 0);

  internal static unsafe void ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIUnknown\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComBSTR\u002E\u007Bdtor\u007D([In] CComBSTR* obj0) => \u003CModule\u003E.SysFreeString((ushort*) *(int*) obj0);

  internal static unsafe void ATL\u002ECAtlComModule\u002ETerm([In] CAtlComModule* obj0)
  {
    if (*(int*) obj0 == 0)
      return;
    _ATL_OBJMAP_ENTRY30** atlObjmapEntrY30Ptr1 = (_ATL_OBJMAP_ENTRY30**) *(int*) ((IntPtr) obj0 + 8);
    if ((UIntPtr) atlObjmapEntrY30Ptr1 < (UIntPtr) *(int*) ((IntPtr) obj0 + 12))
    {
      do
      {
        uint num1 = (uint) *(int*) atlObjmapEntrY30Ptr1;
        if (num1 != 0U)
        {
          _ATL_OBJMAP_ENTRY30* atlObjmapEntrY30Ptr2 = (_ATL_OBJMAP_ENTRY30*) num1;
          uint num2 = (uint) *(int*) ((IntPtr) atlObjmapEntrY30Ptr2 + 16);
          if (num2 != 0U)
          {
            int num3 = (int) num2;
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            int num4 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num3 + 8))((IntPtr) num3);
          }
          *(int*) ((IntPtr) atlObjmapEntrY30Ptr2 + 16) = 0;
        }
        atlObjmapEntrY30Ptr1 += 4;
      }
      while ((UIntPtr) atlObjmapEntrY30Ptr1 < (UIntPtr) *(int*) ((IntPtr) obj0 + 12));
    }
    \u003CModule\u003E.DeleteCriticalSection((_RTL_CRITICAL_SECTION*) ((IntPtr) obj0 + 16));
    *(int*) obj0 = 0;
  }

  internal static void \u003FA0x2c051daf\u002E\u003F\u003F__E_AtlReleaseManagedClassFactories\u0040ATL\u0040\u0040YMXXZ() => \u003CModule\u003E._atexit_m((__FnPtr<void ()>) __methodptr(\u003FA0x2c051daf\u002E\u003F\u003F__F_AtlReleaseManagedClassFactories\u0040ATL\u0040\u0040YMXXZ));

  internal static unsafe void \u003FA0x2c051daf\u002E\u003F\u003F__F_AtlReleaseManagedClassFactories\u0040ATL\u0040\u0040YMXXZ() => \u003CModule\u003E.ATL\u002ECAtlComModule\u002ETerm(&\u003CModule\u003E.ATL\u002E_AtlComModule);

  internal static unsafe CComPtr\u003CIUnknown\u003E* ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bctor\u007D(
    [In] CComPtr\u003CIUnknown\u003E* obj0,
    IUnknown* lp)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bctor\u007D((CComPtrBase\u003CIUnknown\u003E*) obj0, lp);
    return obj0;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIUnknown\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe CComPtrBase\u003CIUnknown\u003E* ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bctor\u007D(
    [In] CComPtrBase\u003CIUnknown\u003E* obj0,
    IUnknown* lp)
  {
    *(int*) obj0 = (int) lp;
    if ((IntPtr) lp != IntPtr.Zero)
    {
      IUnknown* iunknownPtr = lp;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iunknownPtr + 4))((IntPtr) iunknownPtr);
    }
    return obj0;
  }

  internal static unsafe ushort* ATL\u002ECComBSTR\u002E\u002EPAG([In] CComBSTR* obj0) => (ushort*) *(int*) obj0;

  internal static unsafe ushort** ATL\u002ECComBSTR\u002E\u0026([In] CComBSTR* obj0) => (ushort**) obj0;

  internal static unsafe CComBSTR* ATL\u002ECComBSTR\u002E\u007Bctor\u007D([In] CComBSTR* obj0)
  {
    *(int*) obj0 = 0;
    return obj0;
  }

  internal static unsafe uint std\u002Echar_traits\u003Cchar\u003E\u002Elength(sbyte* _First)
  {
    sbyte* numPtr = _First;
    if (*_First != (sbyte) 0)
    {
      do
      {
        ++numPtr;
      }
      while (*numPtr != (sbyte) 0);
    }
    return (uint) ((IntPtr) numPtr - (IntPtr) _First);
  }

  internal static unsafe bad_alloc* std\u002Ebad_alloc\u002E\u007Bctor\u007D(
    [In] bad_alloc* obj0,
    sbyte* _Message)
  {
    \u003CModule\u003E.exception\u002E\u007Bctor\u007D((exception*) obj0, &_Message);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7bad_alloc\u0040std\u0040\u00406B\u0040;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(exception\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void std\u002Ebad_alloc\u002E\u007Bdtor\u007D([In] bad_alloc* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7bad_alloc\u0040std\u0040\u00406B\u0040;
    \u003CModule\u003E.exception\u002E\u007Bdtor\u007D((exception*) obj0);
  }

  internal static unsafe void* std\u002Ebad_alloc\u002E__vecDelDtor([In] bad_alloc* obj0, uint _param1)
  {
    if (((int) _param1 & 2) != 0)
    {
      bad_alloc* p = (bad_alloc*) ((IntPtr) obj0 - 4);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.__ehvec_dtor((void*) obj0, 12U, *(int*) p, (__FnPtr<void (void*)>) __methodptr(std\u002Ebad_alloc\u002E\u007Bdtor\u007D));
      if (((int) _param1 & 1) != 0)
        \u003CModule\u003E.delete\u005B\u005D((void*) p);
      return (void*) p;
    }
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7bad_alloc\u0040std\u0040\u00406B\u0040;
    \u003CModule\u003E.exception\u002E\u007Bdtor\u007D((exception*) obj0);
    if (((int) _param1 & 1) != 0)
      \u003CModule\u003E.delete((void*) obj0);
    return (void*) obj0;
  }

  internal static unsafe void delete(void* _param0, void* _param1)
  {
  }

  internal static unsafe logic_error* std\u002Elogic_error\u002E\u007Bctor\u007D(
    [In] logic_error* obj0,
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* _Message)
  {
    \u003CModule\u003E.exception\u002E\u007Bctor\u007D((exception*) obj0);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7logic_error\u0040std\u0040\u00406B\u0040;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D((basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E*) ((IntPtr) obj0 + 12), _Message);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(exception\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void std\u002Elogic_error\u002E\u007Bdtor\u007D([In] logic_error* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7logic_error\u0040std\u0040\u00406B\u0040;
    // ISSUE: fault handler
    try
    {
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy((basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E*) ((IntPtr) obj0 + 12), true, 0U);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(exception\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    \u003CModule\u003E.exception\u002E\u007Bdtor\u007D((exception*) obj0);
  }

  internal static unsafe sbyte* std\u002Elogic_error\u002Ewhat([In] logic_error* obj0) => \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr((basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E*) ((IntPtr) obj0 + 12));

  internal static unsafe void* std\u002Elogic_error\u002E__vecDelDtor(
    [In] logic_error* obj0,
    uint _param1)
  {
    if (((int) _param1 & 2) != 0)
    {
      logic_error* p = (logic_error*) ((IntPtr) obj0 - 4);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.__ehvec_dtor((void*) obj0, 40U, *(int*) p, (__FnPtr<void (void*)>) __methodptr(std\u002Elogic_error\u002E\u007Bdtor\u007D));
      if (((int) _param1 & 1) != 0)
        \u003CModule\u003E.delete\u005B\u005D((void*) p);
      return (void*) p;
    }
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bdtor\u007D(obj0);
    if (((int) _param1 & 1) != 0)
      \u003CModule\u003E.delete((void*) obj0);
    return (void*) obj0;
  }

  internal static unsafe length_error* std\u002Elength_error\u002E\u007Bctor\u007D(
    [In] length_error* obj0,
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* _Message)
  {
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bctor\u007D((logic_error*) obj0, _Message);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7length_error\u0040std\u0040\u00406B\u0040;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elogic_error\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void std\u002Elength_error\u002E\u007Bdtor\u007D([In] length_error* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7length_error\u0040std\u0040\u00406B\u0040;
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bdtor\u007D((logic_error*) obj0);
  }

  internal static unsafe void* std\u002Elength_error\u002E__vecDelDtor(
    [In] length_error* obj0,
    uint _param1)
  {
    if (((int) _param1 & 2) != 0)
    {
      length_error* p = (length_error*) ((IntPtr) obj0 - 4);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.__ehvec_dtor((void*) obj0, 40U, *(int*) p, (__FnPtr<void (void*)>) __methodptr(std\u002Elength_error\u002E\u007Bdtor\u007D));
      if (((int) _param1 & 1) != 0)
        \u003CModule\u003E.delete\u005B\u005D((void*) p);
      return (void*) p;
    }
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7length_error\u0040std\u0040\u00406B\u0040;
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bdtor\u007D((logic_error*) obj0);
    if (((int) _param1 & 1) != 0)
      \u003CModule\u003E.delete((void*) obj0);
    return (void*) obj0;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPSetBlanket(
    IUnknown* pUnk)
  {
    return \u003CModule\u003E.CoSetProxyBlanket(pUnk, uint.MaxValue, 0U, (ushort*) 0, 4U, 3U, (void*) 0, 32U);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CITunerEvents2\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITunerEvents2\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIRecorderEx2\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIRecorderInfo\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CITuneRequest\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bdtor\u007D(
    [In] CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITuneRequest\u003E*) obj0);
  }

  internal static unsafe ComLiteBase* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bctor\u007D(
    [In] ComLiteBase* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7ComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406B\u0040;
    *(int*) ((IntPtr) obj0 + 4) = 0;
    // ISSUE: fault handler
    try
    {
      *(int*) ((IntPtr) obj0 + 8) = 0;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 4));
    }
    return obj0;
  }

  internal static unsafe void Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D(
    [In] ComLiteBase* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7ComLiteBase\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406B\u0040;
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) ((IntPtr) obj0 + 4));
  }

  internal static unsafe uint Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002EAddRef(
    [In] ComLiteBase* obj0)
  {
    return (uint) \u003CModule\u003E.InterlockedIncrement((int*) ((IntPtr) obj0 + 8));
  }

  internal static unsafe uint Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002ERelease(
    [In] ComLiteBase* obj0)
  {
    int num = \u003CModule\u003E.InterlockedDecrement((int*) ((IntPtr) obj0 + 8));
    if (num <= 0 && (IntPtr) obj0 != IntPtr.Zero)
    {
      ComLiteBase* comLiteBasePtr = obj0;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      void* voidPtr = __calli((__FnPtr<void* (IntPtr, uint)>) *(int*) (*(int*) obj0 + 12))((uint) comLiteBasePtr, new IntPtr(1));
    }
    return (uint) num;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002EQueryInterface(
    [In] ComLiteBase* obj0,
    _GUID* riid,
    void** ppvObject)
  {
    if ((IntPtr) ppvObject == IntPtr.Zero)
      return -2147467261;
    if (\u003CModule\u003E.IsEqualGUID(riid, (_GUID*) &\u003CModule\u003E._GUID_00000000_0000_0000_c000_000000000046) != 0)
    {
      *(int*) ppvObject = (int) obj0;
      ComLiteBase* comLiteBasePtr = obj0;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) comLiteBasePtr + 4))((IntPtr) comLiteBasePtr);
      return 0;
    }
    if (\u003CModule\u003E.IsEqualGUID(riid, (_GUID*) &\u003CModule\u003E._GUID_00000003_0000_0000_c000_000000000046) == 0)
      return -2147467262;
    ComLiteBase* comLiteBasePtr1 = (ComLiteBase*) ((IntPtr) obj0 + 4);
    if (*(int*) comLiteBasePtr1 == 0)
    {
      int threadedMarshaler = \u003CModule\u003E.CoCreateFreeThreadedMarshaler((IUnknown*) obj0, (IUnknown**) comLiteBasePtr1);
      if (threadedMarshaler < 0)
        return threadedMarshaler;
    }
    uint num1 = (uint) *(int*) comLiteBasePtr1;
    int num2 = (int) num1;
    _GUID* guidPtr = riid;
    void** voidPtr = ppvObject;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    return __calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) num1)((void**) num2, guidPtr, (IntPtr) voidPtr);
  }

  internal static unsafe void* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E__vecDelDtor(
    [In] ComLiteBase* obj0,
    uint _param1)
  {
    if (((int) _param1 & 2) != 0)
    {
      ComLiteBase* p = (ComLiteBase*) ((IntPtr) obj0 - 4);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.__ehvec_dtor((void*) obj0, 12U, *(int*) p, (__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D));
      if (((int) _param1 & 1) != 0)
        \u003CModule\u003E.delete\u005B\u005D((void*) p);
      return (void*) p;
    }
    \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D(obj0);
    if (((int) _param1 & 1) != 0)
      \u003CModule\u003E.delete((void*) obj0);
    return (void*) obj0;
  }

  internal static unsafe void Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002E\u007Bdtor\u007D(
    [In] TPTunerEventHandler* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
    *(int*) ((IntPtr) obj0 + 12) = (int) &\u003CModule\u003E.\u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BITunerEvents2\u0040\u0040\u0040;
    *(int*) ((IntPtr) obj0 + 16) = (int) &\u003CModule\u003E.\u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIESEvents\u0040\u0040\u0040;
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        TPTunerEventHandler* tunerEventHandlerPtr;
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              // ISSUE: fault handler
              try
              {
                tunerEventHandlerPtr = (TPTunerEventHandler*) ((IntPtr) obj0 + 36);
                CAutoLock cautoLock;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) ref cautoLock = (int) tunerEventHandlerPtr;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
              }
              __fault
              {
                // ISSUE: method pointer
                // ISSUE: cast to a function pointer type
                \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 88));
              }
              \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u007Bdtor\u007D((CComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E*) ((IntPtr) obj0 + 88));
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 84));
            }
            \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) ((IntPtr) obj0 + 84));
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 68));
          }
          \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Tidy((vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E*) ((IntPtr) obj0 + 68));
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CCritSec\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 36));
        }
        \u003CModule\u003E.DeleteCriticalSection((_RTL_CRITICAL_SECTION*) tunerEventHandlerPtr);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 24));
      }
      \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 24));
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D((ComLiteBase*) obj0);
  }

  internal static unsafe TPTunerEventHandler* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002E\u007Bctor\u007D(
    [In] TPTunerEventHandler* obj0,
    CComPtr\u003CIRecorderEx2\u003E* pRec)
  {
    // ISSUE: fault handler
    try
    {
      \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bctor\u007D((ComLiteBase*) obj0);
      // ISSUE: fault handler
      try
      {
        *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
        *(int*) ((IntPtr) obj0 + 12) = (int) &\u003CModule\u003E.\u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BITunerEvents2\u0040\u0040\u0040;
        *(int*) ((IntPtr) obj0 + 16) = (int) &\u003CModule\u003E.\u003F\u003F_7TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIESEvents\u0040\u0040\u0040;
        *(sbyte*) ((IntPtr) obj0 + 20) = (sbyte) 0;
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 24));
        // ISSUE: fault handler
        try
        {
          \u003CModule\u003E.InitializeCriticalSection((_RTL_CRITICAL_SECTION*) ((IntPtr) obj0 + 36));
          // ISSUE: fault handler
          try
          {
            *(int*) ((IntPtr) obj0 + 60) = 0;
            *(int*) ((IntPtr) obj0 + 64) = 0;
            \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Buy((vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E*) ((IntPtr) obj0 + 68), 0U);
            // ISSUE: fault handler
            try
            {
              \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D((CComPtr\u003CIRecorderEx2\u003E*) ((IntPtr) obj0 + 84), pRec);
              // ISSUE: fault handler
              try
              {
                *(int*) ((IntPtr) obj0 + 88) = 0;
              }
              __fault
              {
                // ISSUE: method pointer
                // ISSUE: cast to a function pointer type
                \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 84));
              }
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 68));
            }
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CCritSec\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 36));
          }
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) ((IntPtr) obj0 + 24));
        }
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D), (void*) obj0);
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) pRec);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) pRec);
    return obj0;
  }

  internal static unsafe uint Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EAddRef(
    [In] TPTunerEventHandler* obj0)
  {
    return (uint) \u003CModule\u003E.InterlockedIncrement((int*) ((IntPtr) obj0 + 8));
  }

  internal static unsafe uint Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ERelease(
    [In] TPTunerEventHandler* obj0)
  {
    return \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002ERelease((ComLiteBase*) obj0);
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EQueryInterface(
    [In] TPTunerEventHandler* obj0,
    _GUID* riid,
    void** ppvObject)
  {
    if ((IntPtr) ppvObject == IntPtr.Zero)
      return -2147467261;
    if (\u003CModule\u003E.IsEqualGUID(riid, (_GUID*) &\u003CModule\u003E._GUID_7beed4ad_1256_43e4_8dea_0e7a6f9a2a93) != 0)
    {
      TPTunerEventHandler* tunerEventHandlerPtr = (IntPtr) obj0 == IntPtr.Zero ? (TPTunerEventHandler*) 0 : (TPTunerEventHandler*) ((IntPtr) obj0 + 12);
      *(int*) ppvObject = (int) tunerEventHandlerPtr;
    }
    else if (\u003CModule\u003E.IsEqualGUID(riid, (_GUID*) &\u003CModule\u003E._GUID_7eab3a3d_0900_43a5_9189_631ac98ed822) != 0)
    {
      TPTunerEventHandler* tunerEventHandlerPtr = (IntPtr) obj0 == IntPtr.Zero ? (TPTunerEventHandler*) 0 : (TPTunerEventHandler*) ((IntPtr) obj0 + 12);
      *(int*) ppvObject = (int) tunerEventHandlerPtr;
    }
    else
    {
      if (\u003CModule\u003E.IsEqualGUID(riid, (_GUID*) &\u003CModule\u003E._GUID_abd414bf_cfe5_4e5e_af5b_4b4e49c5bfeb) == 0)
        return \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002EQueryInterface((ComLiteBase*) obj0, riid, ppvObject);
      TPTunerEventHandler* tunerEventHandlerPtr = (IntPtr) obj0 == IntPtr.Zero ? (TPTunerEventHandler*) 0 : (TPTunerEventHandler*) ((IntPtr) obj0 + 16);
      *(int*) ppvObject = (int) tunerEventHandlerPtr;
    }
    \u003CModule\u003E.InterlockedIncrement((int*) ((IntPtr) obj0 + 8));
    return 0;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EOnESEventReceived(
    [In] TPTunerEventHandler* obj0,
    _GUID gtype,
    IESEvent* pESEvent)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 20);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 8));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeESEventReceived(gtype, pESEvent);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EProfileChanged(
    [In] TPTunerEventHandler* obj0,
    ushort* wzProfile)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeProfileChanged(wzProfile);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EUsageChanged(
    [In] TPTunerEventHandler* obj0,
    short isBusy)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeUsageChanged(isBusy);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EEncoderSettingsChanged(
    [In] TPTunerEventHandler* obj0,
    uint dwVideo,
    uint dwAudio)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
        do
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator1 + 8);
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeEncoderSettingsChanged(dwVideo, dwAudio);
            if (num2 < 0)
              num1 = num2;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
          }
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref iterator1 = *(int*) ^(int&) ref iterator1;
        }
        while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2));
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ETuningChanged(
    [In] TPTunerEventHandler* obj0,
    ITuneRequest* pTuneRequest)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeTuningChanged(pTuneRequest);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ETunerError(
    [In] TPTunerEventHandler* obj0,
    int hrParm)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeTunerError(hrParm);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ETunerStateChanged(
    [In] TPTunerEventHandler* obj0,
    short oldState,
    short newState)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
        do
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator1 + 8);
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeTunerStateChanged(oldState, newState);
            if (num2 < 0)
              num1 = num2;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
          }
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref iterator1 = *(int*) ^(int&) ref iterator1;
        }
        while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2));
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ETunerAvailable(
    [In] TPTunerEventHandler* obj0,
    short bAvailable)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeTunerAvailable(bAvailable);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ECertificate(
    [In] TPTunerEventHandler* obj0,
    short bSuccess)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeCertificate(bSuccess);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EEncryption(
    [In] TPTunerEventHandler* obj0,
    short bOn)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeEncryption(bOn);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EWriteFailure(
    [In] TPTunerEventHandler* obj0)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeWriteFailure();
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EContentSIIDChanged(
    [In] TPTunerEventHandler* obj0,
    int SIID)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeContentSIIDChanged(SIID);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EBitRateChange(
    [In] TPTunerEventHandler* obj0,
    RecorderStreamType st,
    RecorderBitRateChangeType brt,
    ulong rate)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
        do
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator1 + 8);
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeBitRateChanged(st, brt, rate);
            if (num2 < 0)
              num1 = num2;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
          }
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref iterator1 = *(int*) ^(int&) ref iterator1;
        }
        while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2));
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EChannelAvailable(
    [In] TPTunerEventHandler* obj0,
    short bAvailable)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeChannelAvailable(bAvailable);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EStatusChanged(
    [In] TPTunerEventHandler* obj0,
    RecorderUse prevStatus,
    RecorderUse currentStatus)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
        do
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator1 + 8);
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeStatusChanged(prevStatus, currentStatus);
            if (num2 < 0)
              num1 = num2;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
          }
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref iterator1 = *(int*) ^(int&) ref iterator1;
        }
        while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2));
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ERatingChange(
    [In] TPTunerEventHandler* obj0,
    EnTvRat_System PrevRatingSystem,
    EnTvRat_GenericLevel PrevLevel,
    BfEnTvRat_GenericAttributes PrevAttributes,
    EnTvRat_System NewRatingSystem,
    EnTvRat_GenericLevel NewLevel,
    BfEnTvRat_GenericAttributes NewAttributes)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      \u003CModule\u003E.CAutoLock\u002E\u007Bctor\u007D(&cautoLock, (CCritSec*) ((IntPtr) obj0 + 24));
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eend(&centerTvTunersTuner1, &iterator2)))
      {
        do
        {
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eiterator\u002E\u002A(&iterator1));
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeRatingChanged(PrevRatingSystem, PrevLevel, PrevAttributes, NewRatingSystem, NewLevel, NewAttributes);
            if (num2 < 0)
              num1 = num2;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
          }
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
          \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eiterator\u002E\u002B\u002B(&iterator1);
        }
        while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eend(&centerTvTunersTuner1, &iterator2)));
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EProtectionType(
    [In] TPTunerEventHandler* obj0,
    ProtType dwType)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeProtectionType(dwType);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EEASReceived(
    [In] TPTunerEventHandler* obj0,
    uint dwEventId,
    EasPriorityType Priority)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
        do
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator1 + 8);
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeEasReceived(dwEventId, Priority);
            if (num2 < 0)
              num1 = num2;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
          }
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref iterator1 = *(int*) ^(int&) ref iterator1;
        }
        while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2));
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EMMIReceived(
    [In] TPTunerEventHandler* obj0,
    short fOpen,
    uint dwDialogNumber)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator2 = ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
        do
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator1 + 8);
          gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
          // ISSUE: fault handler
          try
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeMMIReceived(fOpen, dwDialogNumber);
            if (num2 < 0)
              num1 = num2;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
          }
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref iterator1 = *(int*) ^(int&) ref iterator1;
        }
        while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator2));
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ECasCardStatusChanged(
    [In] TPTunerEventHandler* obj0,
    CasCardStatusType CardStatus)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeCasCardStatusChanged(CardStatus);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EDrmPairingStatusChanged(
    [In] TPTunerEventHandler* obj0,
    DrmPairingStatus DrmPairingState)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeDrmPairingStatusChanged(DrmPairingState);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EEntitlementChanged(
    [In] TPTunerEventHandler* obj0,
    CasEntitlementType CasEntitlementStatus)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeEntitlementChanged(CasEntitlementStatus);
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EWriteFailureClear(
    [In] TPTunerEventHandler* obj0)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E centerTvTunersTuner1;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner1);
    int num1;
    // ISSUE: fault handler
    try
    {
      CAutoLock cautoLock;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 24);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      // ISSUE: fault handler
      try
      {
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(&centerTvTunersTuner1, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 12));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
      num1 = 0;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator = *(int*) ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      while (^(int&) ref iterator != ^(int&) ((IntPtr) &centerTvTunersTuner1 + 4))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref iterator + 8);
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner2;
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner2, r);
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = ((Tuner) ((GCHandle) new IntPtr((void*) ^(int&) ref centerTvTunersTuner2)).Target).NativeWriteFailureClear();
          if (num2 < 0)
            num1 = num2;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner2);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = *(int*) ^(int&) ref iterator;
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner1);
    }
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(&centerTvTunersTuner1);
    return num1;
  }

  internal static unsafe void* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002E__vecDelDtor(
    [In] TPTunerEventHandler* obj0,
    uint _param1)
  {
    if (((int) _param1 & 2) != 0)
    {
      TPTunerEventHandler* p = (TPTunerEventHandler*) ((IntPtr) obj0 - 4);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.__ehvec_dtor((void*) obj0, 92U, *(int*) p, (__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002E\u007Bdtor\u007D));
      if (((int) _param1 & 1) != 0)
        \u003CModule\u003E.delete\u005B\u005D((void*) p);
      return (void*) p;
    }
    \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002E\u007Bdtor\u007D(obj0);
    if (((int) _param1 & 1) != 0)
      \u003CModule\u003E.delete((void*) obj0);
    return (void*) obj0;
  }

  internal static unsafe void ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u007Bdtor\u007D(
    [In] CComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIESEventService\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIESEventService\u003E*) obj0);
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EAdvise(
    [In] TPTunerEventHandler* obj0,
    Tuner t)
  {
    // ISSUE: untyped stack allocation
    int pStorage = (int) __untypedstackalloc(\u003CModule\u003E.__CxxQueryExceptionSize());
    CComPtr\u003CIRecorderEx2\u003E ccomPtrIrecorderEx2;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref ccomPtrIrecorderEx2 = 0;
    int num1;
    CAutoLock cautoLock1;
    bool flag;
    // ISSUE: fault handler
    try
    {
      num1 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref cautoLock1 = (int) ((IntPtr) obj0 + 36);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock1);
      // ISSUE: fault handler
      try
      {
        flag = (bool) *(byte*) ((IntPtr) obj0 + 20);
        \u003CModule\u003E.ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u003D(&ccomPtrIrecorderEx2, (CComPtr\u003CIRecorderEx2\u003E*) ((IntPtr) obj0 + 84));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ref ccomPtrIrecorderEx2 != 0)
          goto label_7;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock1);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock1);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    return -2147019873;
label_7:
    int num2;
    // ISSUE: fault handler
    try
    {
      exception exception;
      // ISSUE: fault handler
      try
      {
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E centerTvTunersTuner;
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* _Val = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(&centerTvTunersTuner, t);
        // ISSUE: fault handler
        try
        {
          \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Epush_back((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 24), _Val);
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D), (void*) &centerTvTunersTuner);
        }
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&centerTvTunersTuner);
      }
      catch (Exception ex1) when (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) &\u003CModule\u003E.\u003F\u003F_R0\u003FAVexception\u0040\u0040\u00408, 0, (void*) &exception) != 0)
      {
        uint rethrow = 0;
        \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage);
        try
        {
          try
          {
            // ISSUE: fault handler
            try
            {
              num2 = -2147418113;
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(exception\u002E\u007Bdtor\u007D), (void*) &exception);
            }
            \u003CModule\u003E.exception\u002E\u007Bdtor\u007D(&exception);
            goto label_39;
          }
          catch (Exception ex2) when (
          {
            // ISSUE: unable to correctly present filter
            rethrow = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
            if (rethrow != 0U)
            {
              SuccessfulFiltering;
            }
            else
              throw;
          }
          )
          {
          }
          if (rethrow != 0U)
            throw;
        }
        finally
        {
          \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage, (int) rethrow);
        }
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock1);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock1);
      if (!flag)
      {
        uint num3 = 0;
        num1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IRecorderEx2\u002Cstruct\u0020ITunerEvents2\u003E((IRecorderEx2*) *(int*) ((IntPtr) obj0 + 84), (ITunerEvents2*) ((IntPtr) obj0 + 12), &num3);
        if (num1 >= 0)
        {
          uint num4 = 0;
          CComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E obj;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref obj = 0;
          // ISSUE: fault handler
          try
          {
            CComPtr\u003CIUnknown\u003E ccomPtrIunknown;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref ccomPtrIunknown = 0;
            // ISSUE: fault handler
            try
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num5 = ^(int&) ref ccomPtrIrecorderEx2;
              ref CComPtr\u003CIUnknown\u003E local = ref ccomPtrIunknown;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a function pointer type
              // ISSUE: function pointer call
              if (__calli((__FnPtr<int (IntPtr, IUnknown**)>) *(int*) (*(int*) ^(int&) ref ccomPtrIrecorderEx2 + 140))((IUnknown**) num5, (IntPtr) ref local) >= 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u003D(&obj, (IUnknown*) ^(int&) ref ccomPtrIunknown);
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              num1 = !\u003CModule\u003E.ATL\u002ECComPtrBase\u003CIESEventService\u003E\u002E\u0021\u003D((CComPtrBase\u003CIESEventService\u003E*) &obj, (IESEventService*) 0) ? 0 : \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IESEventService\u002Cstruct\u0020IESEvents\u002Cstruct\u0020IESEvent\u003E((IESEventService*) ^(int&) ref obj, (IESEvents*) ((IntPtr) obj0 + 16), &num4);
              if (num1 >= 0)
              {
                CAutoLock cautoLock2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) ref cautoLock2 = (int) ((IntPtr) obj0 + 36);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock2);
                // ISSUE: fault handler
                try
                {
                  \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u003D((CComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E*) ((IntPtr) obj0 + 88), &obj);
                  *(int*) ((IntPtr) obj0 + 60) = (int) num3;
                  *(int*) ((IntPtr) obj0 + 64) = (int) num4;
                  *(sbyte*) ((IntPtr) obj0 + 20) = (sbyte) 1;
                }
                __fault
                {
                  // ISSUE: method pointer
                  // ISSUE: cast to a function pointer type
                  \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock2);
                }
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock2);
              }
            }
            __fault
            {
              // ISSUE: method pointer
              // ISSUE: cast to a function pointer type
              \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIUnknown\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIunknown);
            }
            \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIUnknown\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIUnknown\u003E*) &ccomPtrIunknown);
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u007Bdtor\u007D), (void*) &obj);
          }
          \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u007Bdtor\u007D(&obj);
        }
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    return num1;
label_39:
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock1);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D), (void*) &ccomPtrIrecorderEx2);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) &ccomPtrIrecorderEx2);
    return num2;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EAdvise(
    [In] TPTunerEventHandler* obj0,
    Guid g)
  {
    int num1 = -2147418113;
    CAutoLock cautoLock;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 36);
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
    // ISSUE: fault handler
    try
    {
      TPTunerEventHandler* tunerEventHandlerPtr = (TPTunerEventHandler*) ((IntPtr) obj0 + 88);
      if (\u003CModule\u003E.ATL\u002ECComPtrBase\u003CIESEventService\u003E\u002E\u0021\u003D((CComPtrBase\u003CIESEventService\u003E*) tunerEventHandlerPtr, (IESEventService*) 0))
      {
        if (*(byte*) ((IntPtr) obj0 + 20) != (byte) 0)
        {
          uint num2 = 0;
          num1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IESEventService\u002Cstruct\u0020IESEvents\u003E((IESEventService*) *(int*) tunerEventHandlerPtr, (_GUID*) (int) &g, (IESEvents*) ((IntPtr) obj0 + 16), &num2);
          if (num1 >= 0)
            \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Epush_back((vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E*) ((IntPtr) obj0 + 68), &num2);
        }
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
    }
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EUnadvise(
    [In] TPTunerEventHandler* obj0,
    Tuner t)
  {
    // ISSUE: untyped stack allocation
    int pStorage = (int) __untypedstackalloc(\u003CModule\u003E.__CxxQueryExceptionSize());
    CAutoLock cautoLock;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref cautoLock = (int) ((IntPtr) obj0 + 36);
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
    exception exception;
    int num1;
    // ISSUE: fault handler
    try
    {
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr1 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) *(int*) *(int*) ((IntPtr) obj0 + 28);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref _Where = (int) nodePtr1;
      while (true)
      {
        _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr2 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) *(int*) ((IntPtr) obj0 + 28);
        list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref iterator = (int) nodePtr2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &_Where, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator) && !object.ReferenceEquals((object) \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u002EP\u0024AAVTuner\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040((gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref _Where + 8)), (object) t))
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref _Where = *(int*) ^(int&) ref _Where;
        }
        else
          break;
      }
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr3 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) *(int*) ((IntPtr) obj0 + 28);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator1 = (int) nodePtr3;
      if (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &_Where, (list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator*) &iterator1))
      {
        list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator2;
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eerase((list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E*) ((IntPtr) obj0 + 24), &iterator2, _Where);
      }
      int num2 = *(int*) ((IntPtr) obj0 + 28);
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr4 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) num2;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator3 = (int) nodePtr4;
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr5 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) *(int*) num2;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iterator4 = (int) nodePtr5;
      if (nodePtr5 == nodePtr4)
      {
        *(sbyte*) ((IntPtr) obj0 + 20) = (sbyte) 0;
        TPTunerEventHandler* tunerEventHandlerPtr1 = (TPTunerEventHandler*) ((IntPtr) obj0 + 88);
        int pOwner = *(int*) tunerEventHandlerPtr1;
        if (pOwner != 0)
        {
          \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPUnadviseHelper\u003Cstruct\u0020IESEventService\u002Cstruct\u0020IESEvent\u003E((IESEventService*) pOwner, (uint*) ((IntPtr) obj0 + 64));
          uint* numPtr1 = (uint*) *(int*) ((IntPtr) obj0 + 72);
          _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref allocatorUnsignedLong1 = (int) numPtr1;
          while (true)
          {
            uint* numPtr2 = (uint*) *(int*) ((IntPtr) obj0 + 76);
            _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong2;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref allocatorUnsignedLong2 = (int) numPtr2;
            if (\u003CModule\u003E.std\u002E_Vector_const_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E\u0021\u003D((_Vector_const_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E*) &allocatorUnsignedLong1, (_Vector_const_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E*) &allocatorUnsignedLong2))
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              uint* numPtr3 = (uint*) ^(int&) ref allocatorUnsignedLong1;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPUnadviseHelper\u003Cstruct\u0020IESEventService\u002Cstruct\u0020IESEvent\u003E((IESEventService*) *(int*) tunerEventHandlerPtr1, (uint*) ^(int&) ref allocatorUnsignedLong1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(int&) ref allocatorUnsignedLong1 = ^(int&) ref allocatorUnsignedLong1 + 4;
            }
            else
              break;
          }
          \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Eclear((vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E*) ((IntPtr) obj0 + 68));
          \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIESEventService\u003E\u002ERelease((CComPtrBase\u003CIESEventService\u003E*) tunerEventHandlerPtr1);
        }
        TPTunerEventHandler* tunerEventHandlerPtr2 = (TPTunerEventHandler*) ((IntPtr) obj0 + 84);
        \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPUnadviseHelper\u003Cstruct\u0020IRecorderEx2\u002Cstruct\u0020ITunerEvents2\u003E((IRecorderEx2*) *(int*) tunerEventHandlerPtr2, (uint*) ((IntPtr) obj0 + 60));
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002ERelease((CComPtrBase\u003CIRecorderEx2\u003E*) tunerEventHandlerPtr2);
      }
    }
    catch (Exception ex1) when (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) &\u003CModule\u003E.\u003F\u003F_R0\u003FAVexception\u0040\u0040\u00408, 0, (void*) &exception) != 0)
    {
      uint rethrow = 0;
      \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage);
      try
      {
        try
        {
          // ISSUE: fault handler
          try
          {
            num1 = -2147418113;
          }
          __fault
          {
            // ISSUE: method pointer
            // ISSUE: cast to a function pointer type
            \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(exception\u002E\u007Bdtor\u007D), (void*) &exception);
          }
          \u003CModule\u003E.exception\u002E\u007Bdtor\u007D(&exception);
          goto label_25;
        }
        catch (Exception ex2) when (
        {
          // ISSUE: unable to correctly present filter
          rethrow = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
          if (rethrow != 0U)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
        }
        if (rethrow != 0U)
          throw;
      }
      finally
      {
        \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage, (int) rethrow);
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(CAutoLock\u002E\u007Bdtor\u007D), (void*) &cautoLock);
    }
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
    return 0;
label_25:
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) ^(int&) ref cautoLock);
    return num1;
  }

  [SpecialName]
  internal static unsafe basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* _Right)
  {
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, false, 0U);
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eassign(obj0, _Right, 0U, uint.MaxValue);
    return obj0;
  }

  internal static unsafe void std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bdtor\u007D(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0)
  {
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, 0U);
  }

  internal static unsafe CComPtr\u003CITunerEvents2\u003E* ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bctor\u007D(
    [In] CComPtr\u003CITunerEvents2\u003E* obj0,
    ITunerEvents2* lp)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bctor\u007D((CComPtrBase\u003CITunerEvents2\u003E*) obj0, lp);
    return obj0;
  }

  [SpecialName]
  internal static unsafe CComPtr\u003CITunerEvents2\u003E* ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bctor\u007D(
    [In] CComPtr\u003CITunerEvents2\u003E* obj0,
    CComPtr\u003CITunerEvents2\u003E* lp)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bctor\u007D((CComPtrBase\u003CITunerEvents2\u003E*) obj0, (ITunerEvents2*) *(int*) lp);
    return obj0;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CITunerEvents2\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  [SpecialName]
  internal static unsafe CComPtr\u003CIRecorderEx2\u003E* ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D(
    [In] CComPtr\u003CIRecorderEx2\u003E* obj0,
    CComPtr\u003CIRecorderEx2\u003E* lp)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) obj0, (IRecorderEx2*) *(int*) lp);
    return obj0;
  }

  internal static unsafe IRecorderEx2* ATL\u002ECComPtr\u003CIRecorderEx2\u003E\u002E\u003D(
    [In] CComPtr\u003CIRecorderEx2\u003E* obj0,
    CComPtr\u003CIRecorderEx2\u003E* lp)
  {
    int num1 = *(int*) lp;
    uint num2 = (uint) *(int*) obj0;
    if ((int) num2 == num1)
      return (IRecorderEx2*) num2;
    IRecorderEx2* lp1 = (IRecorderEx2*) num1;
    return (IRecorderEx2*) \u003CModule\u003E.ATL\u002EAtlComPtrAssign((IUnknown**) obj0, (IUnknown*) lp1);
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIRecorderEx2\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe _NoAddRefReleaseOnCComPtr\u003CIRecorderEx2\u003E* ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u002D\u003E(
    [In] CComPtrBase\u003CIRecorderEx2\u003E* obj0)
  {
    return (_NoAddRefReleaseOnCComPtr\u003CIRecorderEx2\u003E*) *(int*) obj0;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002ERelease(
    [In] CComPtrBase\u003CIRecorderEx2\u003E* obj0)
  {
    IRecorderEx2* irecorderEx2Ptr1 = (IRecorderEx2*) *(int*) obj0;
    if ((IntPtr) irecorderEx2Ptr1 == IntPtr.Zero)
      return;
    *(int*) obj0 = 0;
    IRecorderEx2* irecorderEx2Ptr2 = irecorderEx2Ptr1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) irecorderEx2Ptr2 + 8))((IntPtr) irecorderEx2Ptr2);
  }

  [SpecialName]
  internal static unsafe CComPtr\u003CIRecorderInfo\u003E* ATL\u002ECComPtr\u003CIRecorderInfo\u003E\u002E\u007Bctor\u007D(
    [In] CComPtr\u003CIRecorderInfo\u003E* obj0,
    CComPtr\u003CIRecorderInfo\u003E* lp)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bctor\u007D((CComPtrBase\u003CIRecorderInfo\u003E*) obj0, (IRecorderInfo*) *(int*) lp);
    return obj0;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIRecorderInfo\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CITuneRequest\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe ITuneRequest* ATL\u002ECComPtrBase\u003CITuneRequest\u003E\u002E\u002EPAUITuneRequest\u0040\u0040(
    [In] CComPtrBase\u003CITuneRequest\u003E* obj0)
  {
    return (ITuneRequest*) *(int*) obj0;
  }

  internal static unsafe CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E* ATL\u002ECComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E\u002E\u007Bctor\u007D(
    [In] CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E* obj0,
    IUnknown* lp)
  {
    *(int*) obj0 = 0;
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) lp != IntPtr.Zero)
      {
        IUnknown* iunknownPtr = lp;
        ref __s_GUID local = ref \u003CModule\u003E._GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980;
        CComQIPtr\u003CITuneRequest\u002C\u0026_GUID_07ddc146_fc3d_11d2_9d8c_00c04f72d980\u003E* objPtr = obj0;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        int num = __calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) lp)((void**) iunknownPtr, (_GUID*) ref local, (IntPtr) objPtr);
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITuneRequest\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bctor\u007D(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0)
  {
    *(int*) ((IntPtr) obj0 + 4) = (int) \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Buynode(obj0);
    *(int*) ((IntPtr) obj0 + 8) = 0;
    return obj0;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u007Bdtor\u007D(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0)
  {
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(obj0);
  }

  internal static unsafe list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E\u003D(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* _Right)
  {
    if (obj0 != _Right)
    {
      int num = *(int*) ((IntPtr) _Right + 4);
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _Last;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref _Last = num;
      list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _First;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref _First = *(int*) num;
      \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eassign\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(obj0, _First, _Last);
    }
    return obj0;
  }

  internal static unsafe list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eend(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* obj1)
  {
    *(int*) obj1 = *(int*) ((IntPtr) obj0 + 4);
    return obj1;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Epush_back(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* _Val)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref _Where = *(int*) ((IntPtr) obj0 + 4);
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Insert(obj0, _Where, _Val);
  }

  internal static unsafe list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eerase(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* obj1,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator = _Where;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref _Where = *(int*) ^(int&) ref _Where;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    if (^(int&) ref iterator != *(int*) ((IntPtr) obj0 + 4))
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      int num = ^(int&) ref iterator + 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(int*) *(int*) num = *(int*) ^(int&) ref iterator;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(int*) (*(int*) ^(int&) ref iterator + 4) = *(int*) num;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.std\u002E_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Node\u002E\u007Bdtor\u007D((_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) ^(int&) ref iterator);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      \u003CModule\u003E.delete((void*) ^(int&) ref iterator);
      *(int*) ((IntPtr) obj0 + 8) = *(int*) ((IntPtr) obj0 + 8) - 1;
    }
    // ISSUE: cpblk instruction
    __memcpy((IntPtr) obj1, ref _Where, 4);
    return obj1;
  }

  internal static unsafe void std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E\u007Bdtor\u007D(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0)
  {
    \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Tidy(obj0);
  }

  internal static unsafe void std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Epush_back(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    uint* _Val)
  {
    if (\u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(obj0) < \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Ecapacity(obj0))
    {
      uint* numPtr1 = (uint*) *(int*) ((IntPtr) obj0 + 8);
      uint* numPtr2 = numPtr1 + 1;
      *numPtr1 = *_Val;
      *(int*) ((IntPtr) obj0 + 8) = (int) numPtr2;
    }
    else
    {
      _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _Where;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref _Where = *(int*) ((IntPtr) obj0 + 8);
      _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong;
      \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Einsert(obj0, &allocatorUnsignedLong, _Where, _Val);
    }
  }

  internal static unsafe void std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Eclear(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0)
  {
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _Last;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref _Last = *(int*) ((IntPtr) obj0 + 8);
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _First;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref _First = *(int*) ((IntPtr) obj0 + 4);
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong;
    \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Eerase(obj0, &allocatorUnsignedLong, _First, _Last);
  }

  internal static unsafe IESEventService* ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u003D(
    [In] CComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E* obj0,
    CComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E* lp)
  {
    int lp1 = *(int*) lp;
    uint num = (uint) *(int*) obj0;
    return (int) num != lp1 ? (IESEventService*) \u003CModule\u003E.ATL\u002EAtlComPtrAssign((IUnknown**) obj0, (IUnknown*) lp1) : (IESEventService*) num;
  }

  internal static unsafe IESEventService* ATL\u002ECComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E\u002E\u003D(
    [In] CComQIPtr\u003CIESEventService\u002C\u0026_GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c\u003E* obj0,
    IUnknown* lp)
  {
    int num = *(int*) obj0;
    return (IntPtr) num != (IntPtr) lp ? (IESEventService*) \u003CModule\u003E.ATL\u002EAtlComQIPtrAssign((IUnknown**) obj0, lp, (_GUID*) &\u003CModule\u003E._GUID_ed89a619_4c06_4b2f_99eb_c7669b13047c) : (IESEventService*) num;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIESEventService\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIESEventService\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool ATL\u002ECComPtrBase\u003CIESEventService\u003E\u002E\u0021\u003D(
    [In] CComPtrBase\u003CIESEventService\u003E* obj0,
    IESEventService* pT)
  {
    return (IntPtr) *(int*) obj0 != (IntPtr) pT;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIESEventService\u003E\u002ERelease(
    [In] CComPtrBase\u003CIESEventService\u003E* obj0)
  {
    IESEventService* iesEventServicePtr1 = (IESEventService*) *(int*) obj0;
    if ((IntPtr) iesEventServicePtr1 == IntPtr.Zero)
      return;
    *(int*) obj0 = 0;
    IESEventService* iesEventServicePtr2 = iesEventServicePtr1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iesEventServicePtr2 + 8))((IntPtr) iesEventServicePtr2);
  }

  internal static unsafe gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eiterator\u002E\u002A(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* obj0)
  {
    return (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (*(int*) obj0 + 8);
  }

  internal static unsafe list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eiterator\u002E\u002B\u002B(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* obj0)
  {
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator* iteratorPtr = obj0;
    int num = *(int*) *(int*) iteratorPtr;
    *(int*) iteratorPtr = num;
    return obj0;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator* obj0,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator* _Right)
  {
    return *(int*) obj0 != *(int*) _Right;
  }

  internal static unsafe gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(
    [In] gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* obj0,
    Tuner t)
  {
    IntPtr num = (IntPtr) GCHandle.Alloc((object) t);
    *(int*) obj0 = (int) num.ToPointer();
    return obj0;
  }

  [SpecialName]
  internal static unsafe gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(
    [In] gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* obj0,
    gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* r)
  {
    IntPtr num = (IntPtr) GCHandle.Alloc(((GCHandle) new IntPtr((void*) *(int*) r)).Target);
    *(int*) obj0 = (int) num.ToPointer();
    return obj0;
  }

  internal static unsafe void Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D(
    [In] gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* obj0)
  {
    ((GCHandle) new IntPtr((void*) *(int*) obj0)).Free();
    *(int*) obj0 = 0;
  }

  internal static unsafe Tuner Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u002EP\u0024AAVTuner\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040(
    [In] gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* obj0)
  {
    return (Tuner) ((GCHandle) new IntPtr((void*) *(int*) obj0)).Target;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool std\u002E_Vector_const_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E\u0021\u003D(
    [In] _Vector_const_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    _Vector_const_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* _Right)
  {
    return *(int*) obj0 != *(int*) _Right;
  }

  internal static unsafe basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eassign(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* _Right,
    uint _Roff,
    uint _Count)
  {
    if ((uint) *(int*) ((IntPtr) _Right + 20) < _Roff)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xran();
    uint index = (uint) *(int*) ((IntPtr) _Right + 20) - _Roff;
    if (_Count < index)
      index = _Count;
    if (obj0 == _Right)
    {
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eerase(obj0, index + _Roff, uint.MaxValue);
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eerase(obj0, 0U, _Roff);
    }
    else if (\u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Grow(obj0, index, false))
    {
      \u003CModule\u003E.memcpy_s((void*) \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0), (uint) *(int*) ((IntPtr) obj0 + 24), (void*) (\u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(_Right) + (int) _Roff), index);
      *(int*) ((IntPtr) obj0 + 20) = (int) index;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)[(int) index] = (sbyte) 0;
    }
    return obj0;
  }

  internal static unsafe void std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    [MarshalAs(UnmanagedType.U1)] bool _Built,
    uint _Newsize)
  {
    if (_Built && 16U <= (uint) *(int*) ((IntPtr) obj0 + 24))
    {
      basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* dst = (basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E*) ((IntPtr) obj0 + 4);
      sbyte* src = (sbyte*) *(int*) dst;
      if (0U < _Newsize)
        \u003CModule\u003E.memcpy_s((void*) dst, 16U, (void*) src, _Newsize);
      \u003CModule\u003E.delete((void*) src);
    }
    *(int*) ((IntPtr) obj0 + 24) = 15;
    *(int*) ((IntPtr) obj0 + 20) = (int) _Newsize;
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)[(int) _Newsize] = (sbyte) 0;
  }

  internal static unsafe sbyte* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0)
  {
    return 16U <= (uint) *(int*) ((IntPtr) obj0 + 24) ? (sbyte*) *(int*) ((IntPtr) obj0 + 4) : (sbyte*) ((IntPtr) obj0 + 4);
  }

  internal static unsafe CComPtrBase\u003CITunerEvents2\u003E* ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bctor\u007D(
    [In] CComPtrBase\u003CITunerEvents2\u003E* obj0,
    ITunerEvents2* lp)
  {
    *(int*) obj0 = (int) lp;
    if ((IntPtr) lp != IntPtr.Zero)
    {
      ITunerEvents2* itunerEvents2Ptr = lp;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) itunerEvents2Ptr + 4))((IntPtr) itunerEvents2Ptr);
    }
    return obj0;
  }

  internal static unsafe CComPtrBase\u003CIRecorderEx2\u003E* ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D(
    [In] CComPtrBase\u003CIRecorderEx2\u003E* obj0,
    IRecorderEx2* lp)
  {
    *(int*) obj0 = (int) lp;
    if ((IntPtr) lp != IntPtr.Zero)
    {
      IRecorderEx2* irecorderEx2Ptr = lp;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) irecorderEx2Ptr + 4))((IntPtr) irecorderEx2Ptr);
    }
    return obj0;
  }

  internal static unsafe CComPtrBase\u003CIRecorderInfo\u003E* ATL\u002ECComPtrBase\u003CIRecorderInfo\u003E\u002E\u007Bctor\u007D(
    [In] CComPtrBase\u003CIRecorderInfo\u003E* obj0,
    IRecorderInfo* lp)
  {
    *(int*) obj0 = (int) lp;
    if ((IntPtr) lp != IntPtr.Zero)
    {
      IRecorderInfo* irecorderInfoPtr = lp;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) irecorderInfoPtr + 4))((IntPtr) irecorderInfoPtr);
    }
    return obj0;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Insert(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where,
    gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* _Val)
  {
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    int num = ^(int&) ref _Where + 4;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr = \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Buynode(obj0, (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) ^(int&) ref _Where, (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) *(int*) num, _Val);
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Incsize(obj0, 1U);
    *(int*) num = (int) nodePtr;
    *(int*) *(int*) ((IntPtr) nodePtr + 4) = (int) nodePtr;
  }

  internal static unsafe _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Buynode(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0)
  {
    // ISSUE: untyped stack allocation
    int pStorage = (int) __untypedstackalloc(\u003CModule\u003E.__CxxQueryExceptionSize());
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* _Ptr = \u003CModule\u003E.std\u002E_Allocate\u003Cstruct\u0020std\u003A\u003A_List_nod\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E(1U, (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) 0);
    int num = 0;
    try
    {
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node** nodePtr1;
      if ((IntPtr) _Ptr != IntPtr.Zero)
      {
        _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr2;
        *(int*) nodePtr2 = (int) (nodePtr2 = _Ptr);
        nodePtr1 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) _Ptr;
      }
      else
        nodePtr1 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) 0;
      num = 1;
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node** nodePtr3 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) ((IntPtr) _Ptr + 4);
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node** nodePtr4;
      if ((IntPtr) nodePtr3 != IntPtr.Zero)
      {
        *(int*) nodePtr3 = (int) _Ptr;
        nodePtr4 = nodePtr3;
      }
      else
        nodePtr4 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) 0;
    }
    catch (Exception ex1) when (
    {
      // ISSUE: unable to correctly present filter
      uint exceptionCode = (uint) Marshal.GetExceptionCode();
      if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
      {
        SuccessfulFiltering;
      }
      else
        throw;
    }
    )
    {
      uint rethrow = 0;
      \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage);
      try
      {
        try
        {
          if (0 >= num)
            ;
          \u003CModule\u003E.std\u002Eallocator\u003Cstd\u003A\u003A_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E\u002Edeallocate((allocator\u003Cstd\u003A\u003A_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E*) obj0, _Ptr, 1U);
          \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
        }
        catch (Exception ex2) when (
        {
          // ISSUE: unable to correctly present filter
          rethrow = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
          if (rethrow != 0U)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
        }
        if (rethrow != 0U)
          throw;
      }
      finally
      {
        \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage, (int) rethrow);
      }
    }
    return _Ptr;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Tidy(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0)
  {
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eclear(obj0);
    \u003CModule\u003E.delete((void*) *(int*) ((IntPtr) obj0 + 4));
    *(int*) ((IntPtr) obj0 + 4) = 0;
  }

  internal static unsafe void std\u002Eallocator\u003Cstd\u003A\u003A_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E\u002Edeallocate(
    [In] allocator\u003Cstd\u003A\u003A_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E* obj0,
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* _Ptr,
    uint __unnamed001)
  {
    \u003CModule\u003E.delete((void*) _Ptr);
  }

  internal static unsafe uint std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Ecapacity(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0)
  {
    uint num = (uint) *(int*) ((IntPtr) obj0 + 4);
    return num == 0U ? 0U : (uint) (*(int*) ((IntPtr) obj0 + 12) - (int) num >> 2);
  }

  internal static unsafe uint std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0)
  {
    uint num = (uint) *(int*) ((IntPtr) obj0 + 4);
    return num == 0U ? 0U : (uint) (*(int*) ((IntPtr) obj0 + 8) - (int) num >> 2);
  }

  internal static unsafe _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Einsert(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    [In] _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj1,
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _Where,
    uint* _Val)
  {
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    int num = \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(obj0) != 0U ? ^(int&) ref _Where - *(int*) ((IntPtr) obj0 + 4) >> 2 : 0;
    \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Insert_n(obj0, _Where, 1U, _Val);
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong1;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref allocatorUnsignedLong1 = *(int*) ((IntPtr) obj0 + 4);
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong2;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref allocatorUnsignedLong2 = num * 4 + ^(int&) ref allocatorUnsignedLong1;
    // ISSUE: cpblk instruction
    __memcpy((IntPtr) obj1, ref allocatorUnsignedLong2, 4);
    return obj1;
  }

  internal static unsafe _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Eerase(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    [In] _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj1,
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _First,
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _Last)
  {
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    if (^(int&) ref _First != ^(int&) ref _Last)
    {
      _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* allocatorUnsignedLongPtr = \u003CModule\u003E.std\u002Ecopy\u003Cunsigned\u0020long\u0020\u002A\u002Cclass\u0020std\u003A\u003A_Vector_iterator\u003Cunsigned\u0020long\u002Cclass\u0020std\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u0020\u003E(&allocatorUnsignedLong, (uint*) ^(int&) ref _Last, (uint*) *(int*) ((IntPtr) obj0 + 8), _First);
      *(int*) ((IntPtr) obj0 + 8) = *(int*) allocatorUnsignedLongPtr;
    }
    // ISSUE: cpblk instruction
    __memcpy((IntPtr) obj1, ref _First, 4);
    return obj1;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Buy(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    uint _Capacity)
  {
    *(int*) ((IntPtr) obj0 + 4) = 0;
    *(int*) ((IntPtr) obj0 + 8) = 0;
    *(int*) ((IntPtr) obj0 + 12) = 0;
    if (_Capacity == 0U)
      return false;
    if (1073741823U < _Capacity)
      \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Xlen();
    uint* numPtr = \u003CModule\u003E.std\u002E_Allocate\u003Cunsigned\u0020long\u003E(_Capacity, (uint*) 0);
    *(int*) ((IntPtr) obj0 + 4) = (int) numPtr;
    *(int*) ((IntPtr) obj0 + 8) = (int) numPtr;
    *(int*) ((IntPtr) obj0 + 12) = (int) ((int) _Capacity * 4 + (IntPtr) numPtr);
    return true;
  }

  internal static unsafe void std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Tidy(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0)
  {
    uint num = (uint) *(int*) ((IntPtr) obj0 + 4);
    if (num != 0U)
      \u003CModule\u003E.delete((void*) num);
    *(int*) ((IntPtr) obj0 + 4) = 0;
    *(int*) ((IntPtr) obj0 + 8) = 0;
    *(int*) ((IntPtr) obj0 + 12) = 0;
  }

  internal static unsafe uint* std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Ufill(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    uint* _Ptr,
    uint _Count,
    uint* _Val)
  {
    \u003CModule\u003E.stdext\u002Eunchecked_fill_n\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020int\u002Cunsigned\u0020long\u003E(_Ptr, _Count, _Val);
    return (uint*) ((int) _Count * 4 + (IntPtr) _Ptr);
  }

  internal static unsafe basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eerase(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    uint _Off,
    uint _Count)
  {
    if ((uint) *(int*) ((IntPtr) obj0 + 20) < _Off)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xran();
    uint num = (uint) *(int*) ((IntPtr) obj0 + 20) - _Off;
    if (num < _Count)
      _Count = num;
    if (0U < _Count)
    {
      \u003CModule\u003E.std\u002E_Traits_helper\u002Emove_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E(\u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0) + (int) _Off, (uint) *(int*) ((IntPtr) obj0 + 24) - _Off, \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0) + (int) _Off + (int) _Count, num - _Count);
      uint index = (uint) *(int*) ((IntPtr) obj0 + 20) - _Count;
      *(int*) ((IntPtr) obj0 + 20) = (int) index;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)[(int) index] = (sbyte) 0;
    }
    return obj0;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Grow(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    uint _Newsize,
    [MarshalAs(UnmanagedType.U1)] bool _Trim)
  {
    if (4294967294U < _Newsize)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xlen();
    if ((uint) *(int*) ((IntPtr) obj0 + 24) < _Newsize)
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Copy(obj0, _Newsize, (uint) *(int*) ((IntPtr) obj0 + 20));
    else if (_Trim && _Newsize < 16U)
    {
      uint num = (uint) *(int*) ((IntPtr) obj0 + 20);
      uint _Newsize1 = _Newsize >= num ? num : _Newsize;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, _Newsize1);
    }
    else if (_Newsize == 0U)
    {
      *(int*) ((IntPtr) obj0 + 20) = 0;
      *\u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0) = (sbyte) 0;
    }
    return 0U < _Newsize;
  }

  internal static unsafe sbyte* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0)
  {
    return 16U <= (uint) *(int*) ((IntPtr) obj0 + 24) ? (sbyte*) *(int*) ((IntPtr) obj0 + 4) : (sbyte*) ((IntPtr) obj0 + 4);
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eclear(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0)
  {
    int num1 = *(int*) ((IntPtr) obj0 + 4);
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr1 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) *(int*) num1;
    int num2;
    *(int*) num2 = num2 = num1;
    int num3 = *(int*) ((IntPtr) obj0 + 4);
    *(int*) (num3 + 4) = num3;
    *(int*) ((IntPtr) obj0 + 8) = 0;
    if ((IntPtr) nodePtr1 == (IntPtr) *(int*) ((IntPtr) obj0 + 4))
      return;
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* nodePtr2;
    do
    {
      nodePtr2 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) *(int*) nodePtr1;
      \u003CModule\u003E.std\u002E_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Node\u002E\u007Bdtor\u007D(nodePtr1);
      \u003CModule\u003E.delete((void*) nodePtr1);
      nodePtr1 = nodePtr2;
    }
    while ((IntPtr) nodePtr2 != (IntPtr) *(int*) ((IntPtr) obj0 + 4));
  }

  internal static unsafe _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Buynode(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* _Next,
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* _Prev,
    gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* _Val)
  {
    // ISSUE: untyped stack allocation
    int pStorage = (int) __untypedstackalloc(\u003CModule\u003E.__CxxQueryExceptionSize());
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* _Ptr = \u003CModule\u003E.std\u002E_Allocate\u003Cstruct\u0020std\u003A\u003A_List_nod\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E(1U, (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) 0);
    try
    {
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node** nodePtr1;
      if ((IntPtr) _Ptr != IntPtr.Zero)
      {
        *(int*) _Ptr = (int) _Next;
        nodePtr1 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) _Ptr;
      }
      else
        nodePtr1 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) 0;
      void* voidPtr = (void*) ((IntPtr) _Ptr + 4);
      _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node** nodePtr2;
      if ((IntPtr) voidPtr != IntPtr.Zero)
      {
        *(int*) voidPtr = (int) _Prev;
        nodePtr2 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) voidPtr;
      }
      else
        nodePtr2 = (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node**) 0;
      \u003CModule\u003E.std\u002E_Construct\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E((gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) ((IntPtr) _Ptr + 8), _Val);
    }
    catch (Exception ex1) when (
    {
      // ISSUE: unable to correctly present filter
      uint exceptionCode = (uint) Marshal.GetExceptionCode();
      if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
      {
        SuccessfulFiltering;
      }
      else
        throw;
    }
    )
    {
      uint rethrow = 0;
      \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage);
      try
      {
        try
        {
          \u003CModule\u003E.std\u002Eallocator\u003Cstd\u003A\u003A_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E\u002Edeallocate((allocator\u003Cstd\u003A\u003A_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E*) obj0, _Ptr, 1U);
          \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
        }
        catch (Exception ex2) when (
        {
          // ISSUE: unable to correctly present filter
          rethrow = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
          if (rethrow != 0U)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
        }
        if (rethrow != 0U)
          throw;
      }
      finally
      {
        \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage, (int) rethrow);
      }
    }
    return _Ptr;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Incsize(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    uint _Count)
  {
    uint num = (uint) *(int*) ((IntPtr) obj0 + 8);
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E allocatorCharStL70;
    if (1073741823U - num < _Count)
    {
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(&allocatorCharStL70, (sbyte*) &\u003CModule\u003E.\u003F\u003F_C\u0040_0BB\u0040MOGOBHAF\u0040list\u003F\u0024DMT\u003F\u0024DO\u003F5too\u003F5long\u003F\u0024AA\u0040);
      // ISSUE: fault handler
      try
      {
        length_error lengthError;
        \u003CModule\u003E.std\u002Elength_error\u002E\u007Bctor\u007D(&lengthError, &allocatorCharStL70);
        \u003CModule\u003E._CxxThrowException((void*) &lengthError, &\u003CModule\u003E._TI3\u003FAVlength_error\u0040std\u0040\u0040);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bdtor\u007D), (void*) &allocatorCharStL70);
      }
    }
    *(int*) ((IntPtr) obj0 + 8) = (int) num + (int) _Count;
    // ISSUE: fault handler
    try
    {
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bdtor\u007D), (void*) &allocatorCharStL70);
    }
  }

  internal static unsafe void std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Insert_n(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _Where,
    uint _Count,
    uint* _Val)
  {
    // ISSUE: untyped stack allocation
    int pStorage = (int) __untypedstackalloc(\u003CModule\u003E.__CxxQueryExceptionSize());
    uint num1 = *_Val;
    uint num2 = \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Ecapacity(obj0);
    if (_Count == 0U)
      return;
    if (1073741823U - \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(obj0) < _Count)
      \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Xlen();
    uint exceptionCode;
    if (num2 < \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(obj0) + _Count)
    {
      uint num3 = num2 >> 1;
      uint num4 = 1073741823U - num3 >= num2 ? num3 + num2 : 0U;
      uint num5 = num4;
      if (num4 < \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(obj0) + _Count)
        num5 = \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(obj0) + _Count;
      uint* _Ptr1 = \u003CModule\u003E.std\u002E_Allocate\u003Cunsigned\u0020long\u003E(num5, (uint*) 0);
      uint* _Ptr2 = _Ptr1;
      try
      {
        vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* allocatorUnsignedLongPtr = obj0;
        int _First = *(int*) ((IntPtr) allocatorUnsignedLongPtr + 4);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int _Last = ^(int&) ref _Where;
        uint* _Ptr3 = _Ptr1;
        _Ptr2 = \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Ucopy\u003Cunsigned\u0020long\u0020\u002A\u003E(allocatorUnsignedLongPtr, (uint*) _First, (uint*) _Last, _Ptr3);
        _Ptr2 = \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Ufill(obj0, _Ptr2, _Count, &num1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Ucopy\u003Cunsigned\u0020long\u0020\u002A\u003E(obj0, (uint*) ^(int&) ref _Where, (uint*) *(int*) ((IntPtr) obj0 + 8), _Ptr2);
      }
      catch (Exception ex1) when (
      {
        // ISSUE: unable to correctly present filter
        exceptionCode = (uint) Marshal.GetExceptionCode();
        if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
        {
          SuccessfulFiltering;
        }
        else
          throw;
      }
      )
      {
        uint rethrow = 0;
        \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage);
        try
        {
          try
          {
            \u003CModule\u003E.std\u002Eallocator\u003Cunsigned\u0020long\u003E\u002Edeallocate((allocator\u003Cunsigned\u0020long\u003E*) obj0, _Ptr1, num5);
            \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
          }
          catch (Exception ex2) when (
          {
            // ISSUE: unable to correctly present filter
            rethrow = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
            if (rethrow != 0U)
            {
              SuccessfulFiltering;
            }
            else
              throw;
          }
          )
          {
          }
          if (rethrow != 0U)
            throw;
        }
        finally
        {
          \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage, (int) rethrow);
        }
      }
      _Count = \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002Esize(obj0) + _Count;
      int num6 = *(int*) ((IntPtr) obj0 + 4);
      if (num6 != 0)
        \u003CModule\u003E.delete((void*) num6);
      *(int*) ((IntPtr) obj0 + 12) = (int) ((int) num5 * 4 + (IntPtr) _Ptr1);
      *(int*) ((IntPtr) obj0 + 8) = (int) ((int) _Count * 4 + (IntPtr) _Ptr1);
      *(int*) ((IntPtr) obj0 + 4) = (int) _Ptr1;
    }
    else
    {
      int _Last1 = *(int*) ((IntPtr) obj0 + 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((uint) (_Last1 - ^(int&) ref _Where >> 2) < _Count)
      {
        uint* _Last2 = (uint*) _Last1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.std\u002E_Uninitialized_copy\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u002Cclass\u0020std\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E((uint*) ^(int&) ref _Where, _Last2, (uint*) ((int) _Count * 4 + ^(int&) ref _Where), (allocator\u003Cunsigned\u0020long\u003E*) obj0);
        try
        {
          int num7 = *(int*) ((IntPtr) obj0 + 8);
          uint* _Ptr = (uint*) num7;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Ufill(obj0, _Ptr, _Count - (uint) (num7 - ^(int&) ref _Where >> 2), &num1);
        }
        catch (Exception ex3) when (
        {
          // ISSUE: unable to correctly present filter
          exceptionCode = (uint) Marshal.GetExceptionCode();
          if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          uint rethrow = 0;
          \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage);
          try
          {
            try
            {
              int num8 = (int) _Count * 4;
              uint* numPtr1 = (uint*) (*(int*) ((IntPtr) obj0 + 8) + num8);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              uint* numPtr2 = (uint*) (num8 + ^(int&) ref _Where);
              \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
            }
            catch (Exception ex4) when (
            {
              // ISSUE: unable to correctly present filter
              rethrow = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
              if (rethrow != 0U)
              {
                SuccessfulFiltering;
              }
              else
                throw;
            }
            )
            {
            }
            if (rethrow != 0U)
              throw;
          }
          finally
          {
            \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage, (int) rethrow);
          }
        }
        int num9 = (int) _Count * 4;
        *(int*) ((IntPtr) obj0 + 8) = *(int*) ((IntPtr) obj0 + 8) + num9;
        int num10 = *(int*) ((IntPtr) obj0 + 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.std\u002Efill\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u003E((uint*) ^(int&) ref _Where, (uint*) (num10 - num9), &num1);
      }
      else
      {
        uint* numPtr = (uint*) _Last1;
        int num11 = (int) _Count * 4;
        int num12 = _Last1 - num11;
        *(int*) ((IntPtr) obj0 + 8) = (int) \u003CModule\u003E.std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Ucopy\u003Cunsigned\u0020long\u0020\u002A\u003E(obj0, (uint*) num12, (uint*) _Last1, numPtr);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.std\u002Ecopy_backward\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u003E((uint*) ^(int&) ref _Where, (uint*) num12, numPtr);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        \u003CModule\u003E.std\u002Efill\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u003E((uint*) ^(int&) ref _Where, (uint*) (num11 + ^(int&) ref _Where), &num1);
      }
    }
  }

  internal static unsafe void std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Xlen()
  {
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E allocatorCharStL70;
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(&allocatorCharStL70, (sbyte*) &\u003CModule\u003E.\u003F\u003F_C\u0040_0BD\u0040OLBABOEK\u0040vector\u003F\u0024DMT\u003F\u0024DO\u003F5too\u003F5long\u003F\u0024AA\u0040);
    // ISSUE: fault handler
    try
    {
      length_error lengthError;
      \u003CModule\u003E.std\u002Elength_error\u002E\u007Bctor\u007D(&lengthError, &allocatorCharStL70);
      \u003CModule\u003E._CxxThrowException((void*) &lengthError, &\u003CModule\u003E._TI3\u003FAVlength_error\u0040std\u0040\u0040);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bdtor\u007D), (void*) &allocatorCharStL70);
    }
  }

  internal static unsafe void std\u002Eallocator\u003Cunsigned\u0020long\u003E\u002Edeallocate(
    [In] allocator\u003Cunsigned\u0020long\u003E* obj0,
    uint* _Ptr,
    uint __unnamed001)
  {
    \u003CModule\u003E.delete((void*) _Ptr);
  }

  [SpecialName]
  internal static unsafe length_error* std\u002Elength_error\u002E\u007Bctor\u007D(
    [In] length_error* obj0,
    length_error* _param1)
  {
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bctor\u007D((logic_error*) obj0, (logic_error*) _param1);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7length_error\u0040std\u0040\u00406B\u0040;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elogic_error\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  [SpecialName]
  internal static unsafe logic_error* std\u002Elogic_error\u002E\u007Bctor\u007D(
    [In] logic_error* obj0,
    logic_error* _param1)
  {
    \u003CModule\u003E.exception\u002E\u007Bctor\u007D((exception*) obj0, (exception*) _param1);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7logic_error\u0040std\u0040\u00406B\u0040;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D((basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E*) ((IntPtr) obj0 + 12), (basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E*) ((IntPtr) _param1 + 12));
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(exception\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    sbyte* _Ptr)
  {
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, false, 0U);
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eassign(obj0, _Ptr);
    return obj0;
  }

  internal static unsafe void std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Copy(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    uint _Newsize,
    uint _Oldlen)
  {
    uint num1 = (uint) \u003CModule\u003E.__CxxQueryExceptionSize();
    // ISSUE: untyped stack allocation
    int pStorage1 = (int) __untypedstackalloc((int) num1 << 1);
    uint num2 = _Newsize | 15U;
    if (4294967294U < num2)
    {
      num2 = _Newsize;
    }
    else
    {
      uint num3 = (uint) *(int*) ((IntPtr) obj0 + 24);
      uint num4 = num3 >> 1;
      if (num2 / 3U < num4 && num3 <= 4294967294U - num4)
        num2 = num4 + num3;
    }
    sbyte* _First1 = (sbyte*) 0;
    int pStorage2;
    try
    {
      pStorage2 = (int) num1 + pStorage1;
      _First1 = \u003CModule\u003E.std\u002E_Allocate\u003Cchar\u003E(num2 + 1U, (sbyte*) 0);
    }
    catch (Exception ex1) when (
    {
      // ISSUE: unable to correctly present filter
      uint exceptionCode1 = (uint) Marshal.GetExceptionCode();
      if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
      {
        SuccessfulFiltering;
      }
      else
        throw;
    }
    )
    {
      uint rethrow1 = 0;
      \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage2);
      try
      {
        try
        {
          num2 = _Newsize;
          try
          {
            _First1 = \u003CModule\u003E.std\u002E_Allocate\u003Cchar\u003E(_Newsize + 1U, (sbyte*) 0);
            goto label_23;
          }
          catch (Exception ex2) when (
          {
            // ISSUE: unable to correctly present filter
            uint exceptionCode2 = (uint) Marshal.GetExceptionCode();
            if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
            {
              SuccessfulFiltering;
            }
            else
              throw;
          }
          )
          {
            uint rethrow2 = 0;
            \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage1);
            try
            {
              try
              {
                \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, 0U);
                \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
              }
              catch (Exception ex3) when (
              {
                // ISSUE: unable to correctly present filter
                rethrow2 = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
                if (rethrow2 != 0U)
                {
                  SuccessfulFiltering;
                }
                else
                  throw;
              }
              )
              {
              }
              if (rethrow2 != 0U)
                throw;
              else
                goto label_23;
            }
            finally
            {
              \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage1, (int) rethrow2);
            }
          }
        }
        catch (Exception ex4) when (
        {
          // ISSUE: unable to correctly present filter
          rethrow1 = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
          if (rethrow1 != 0U)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
        }
        if (rethrow1 != 0U)
          throw;
      }
      finally
      {
        \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage2, (int) rethrow1);
      }
    }
label_23:
    if (0U < _Oldlen)
      \u003CModule\u003E.std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E(_First1, num2 + 1U, \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0), _Oldlen);
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, 0U);
    *(int*) ((IntPtr) obj0 + 4) = (int) _First1;
    *(int*) ((IntPtr) obj0 + 24) = (int) num2;
    *(int*) ((IntPtr) obj0 + 20) = (int) _Oldlen;
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)[(int) _Oldlen] = (sbyte) 0;
  }

  internal static unsafe basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eassign(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    sbyte* _Ptr)
  {
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* allocatorCharStL70Ptr = obj0;
    sbyte* numPtr = _Ptr;
    int _Num = (int) \u003CModule\u003E.std\u002Echar_traits\u003Cchar\u003E\u002Elength(numPtr);
    return \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eassign(allocatorCharStL70Ptr, numPtr, (uint) _Num);
  }

  internal static unsafe basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eassign(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    sbyte* _Ptr,
    uint _Num)
  {
    if (\u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Inside(obj0, _Ptr))
    {
      basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* _Right = obj0;
      IntPtr _Roff = (IntPtr) _Ptr - (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0);
      int _Count = (int) _Num;
      return \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002Eassign(_Right, _Right, (uint) _Roff, (uint) _Count);
    }
    if (\u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Grow(obj0, _Num, false))
    {
      \u003CModule\u003E.memcpy_s((void*) \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0), (uint) *(int*) ((IntPtr) obj0 + 24), (void*) _Ptr, _Num);
      *(int*) ((IntPtr) obj0 + 20) = (int) _Num;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)[(int) _Num] = (sbyte) 0;
    }
    return obj0;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Inside(
    [In] basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* obj0,
    sbyte* _Ptr)
  {
    return _Ptr >= \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0) && \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E_Myptr(obj0) + *(int*) ((IntPtr) obj0 + 20) > _Ptr;
  }

  internal static unsafe TuneRequest Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E(
    IUnknown* pUnk)
  {
    return (TuneRequest) TuneRequestMarshaler.GetInstance((string) null).MarshalNativeToManaged((IntPtr) (void*) pUnk);
  }

  internal static unsafe IUnknown* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalManagedToNative\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020IUnknown\u0020\u002A\u003E(
    TuneRequest mgd)
  {
    ICustomMarshaler instance = TuneRequestMarshaler.GetInstance((string) null);
    void* native = (void*) instance.MarshalManagedToNative((object) mgd);
    instance.CleanUpManagedData((object) mgd);
    return (IUnknown*) native;
  }

  internal static TuneRequest Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(
    TuneRequest @ref)
  {
    return @ref == null ? (TuneRequest) null : (TuneRequest) ((SafeComWrapper) @ref).ReferenceClone();
  }

  internal static byte[] Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cunsigned\u0020char\u0020\u003E\u005E\u003E(
    byte[] @ref)
  {
    return @ref == null ? (byte[]) null : (byte[]) @ref.Clone();
  }

  internal static string[] Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u0020\u003E\u005E\u003E(
    string[] @ref)
  {
    return @ref == null ? (string[]) null : (string[]) @ref.Clone();
  }

  internal static unsafe Microsoft.MediaCenter.TV.Tuners.SmartCardApplication Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManaged\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASmartCardApplicationMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASmartCardApplication\u0020\u005E\u002Cstruct\u0020SmartCardApplication\u0020\u002A\u003E(
    SmartCardApplication* pUnk)
  {
    ICustomMarshaler instance = SmartCardApplicationMarshaler.GetInstance((string) null);
    IntPtr pNativeData1 = (IntPtr) (void*) pUnk;
    Microsoft.MediaCenter.TV.Tuners.SmartCardApplication managed = (Microsoft.MediaCenter.TV.Tuners.SmartCardApplication) instance.MarshalNativeToManaged(pNativeData1);
    IntPtr pNativeData2 = (IntPtr) (void*) pUnk;
    instance.CleanUpNativeData(pNativeData2);
    return managed;
  }

  internal static SafeRecorder Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASafeRecorder\u0020\u005E\u003E(
    SafeRecorder @ref)
  {
    return @ref == null ? (SafeRecorder) null : (SafeRecorder) @ref.ReferenceClone();
  }

  internal static string Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020System\u003A\u003AString\u0020\u005E\u003E(
    string @ref)
  {
    return @ref == (string) null ? (string) null : (string) @ref.Clone();
  }

  internal static TuneRequest Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u003E(
    TuneRequest @ref)
  {
    return @ref == null ? (TuneRequest) null : (TuneRequest) ((SerializableComWrapper) @ref).Clone();
  }

  internal static unsafe ESEvent Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003AESEventMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003AESEvent\u0020\u005E\u002Cstruct\u0020IESEvent\u0020\u002A\u003E(
    IESEvent* pUnk)
  {
    return (ESEvent) ESEventMarshaler.GetInstance((string) null).MarshalNativeToManaged((IntPtr) (void*) pUnk);
  }

  internal static unsafe TuneRequest Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EMarshalNativeToManagedNoCleanup\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequestMarshaler\u002Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuning\u003A\u003ATuneRequest\u0020\u005E\u002Cstruct\u0020ITuneRequest\u0020\u002A\u003E(
    ITuneRequest* pUnk)
  {
    return (TuneRequest) TuneRequestMarshaler.GetInstance((string) null).MarshalNativeToManaged((IntPtr) (void*) pUnk);
  }

  internal static SafeTunerEventHandler Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ASafeTunerEventHandler\u0020\u005E\u003E(
    SafeTunerEventHandler @ref)
  {
    return @ref == null ? (SafeTunerEventHandler) null : (SafeTunerEventHandler) @ref.ReferenceClone();
  }

  internal static Guid[] Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Eref_clone\u003Ccli\u003A\u003Aarray\u003Cclass\u0020System\u003A\u003AGuid\u0020\u003E\u005E\u003E(
    Guid[] @ref)
  {
    return @ref == null ? (Guid[]) null : (Guid[]) @ref.Clone();
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IRecorderEx2\u002Cstruct\u0020ITunerEvents2\u003E(
    IRecorderEx2* pOwner,
    ITunerEvents2* pHandler,
    uint* dwCookie)
  {
    return \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IRecorderEx2\u002Cstruct\u0020ITunerEvents2\u002Cstruct\u0020ITunerEvents2\u003E(pOwner, pHandler, dwCookie);
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IESEventService\u002Cstruct\u0020IESEvents\u002Cstruct\u0020IESEvent\u003E(
    IESEventService* pOwner,
    IESEvents* pHandler,
    uint* dwCookie)
  {
    CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E b69c00aa00341d07;
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(&b69c00aa00341d07, (IUnknown*) pOwner);
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) pOwner != IntPtr.Zero)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return -2147467262;
label_4:
    CComPtr\u003CIConnectionPoint\u003E iconnectionPoint;
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iconnectionPoint = 0;
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = ^(int&) ref b69c00aa00341d07;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_1f0e5357_af43_44e6_8547_654c645145d2;
        ref CComPtr\u003CIConnectionPoint\u003E local2 = ref iconnectionPoint;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, _GUID*, IConnectionPoint**)>) *(int*) (*(int*) ^(int&) ref b69c00aa00341d07 + 16))((IConnectionPoint**) num2, (_GUID*) ref local1, (IntPtr) ref local2);
        if (num1 >= 0)
          goto label_10;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_10:
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        num1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPSetBlanket((IUnknown*) ^(int&) ref iconnectionPoint);
        if (num1 >= 0)
          goto label_15;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_15:
    int num3;
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num4 = ^(int&) ref iconnectionPoint;
        IESEvents* iesEventsPtr = pHandler;
        uint* numPtr = dwCookie;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num3 = __calli((__FnPtr<int (IntPtr, IUnknown*, uint*)>) *(int*) (*(int*) ^(int&) ref iconnectionPoint + 20))((uint*) num4, (IUnknown*) iesEventsPtr, (IntPtr) numPtr);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num3;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IESEventService\u002Cstruct\u0020IESEvents\u003E(
    IESEventService* pOwner,
    _GUID* CONNPTID,
    IESEvents* pHandler,
    uint* dwCookie)
  {
    CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E b69c00aa00341d07;
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(&b69c00aa00341d07, (IUnknown*) pOwner);
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) pOwner != IntPtr.Zero)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return -2147467262;
label_4:
    CComPtr\u003CIConnectionPoint\u003E iconnectionPoint;
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iconnectionPoint = 0;
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = ^(int&) ref b69c00aa00341d07;
        _GUID* guidPtr = CONNPTID;
        ref CComPtr\u003CIConnectionPoint\u003E local = ref iconnectionPoint;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, _GUID*, IConnectionPoint**)>) *(int*) (*(int*) ^(int&) ref b69c00aa00341d07 + 16))((IConnectionPoint**) num2, guidPtr, (IntPtr) ref local);
        if (num1 >= 0)
          goto label_10;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_10:
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        num1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPSetBlanket((IUnknown*) ^(int&) ref iconnectionPoint);
        if (num1 >= 0)
          goto label_15;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_15:
    int num3;
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num4 = ^(int&) ref iconnectionPoint;
        IESEvents* iesEventsPtr = pHandler;
        uint* numPtr = dwCookie;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num3 = __calli((__FnPtr<int (IntPtr, IUnknown*, uint*)>) *(int*) (*(int*) ^(int&) ref iconnectionPoint + 20))((uint*) num4, (IUnknown*) iesEventsPtr, (IntPtr) numPtr);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num3;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPUnadviseHelper\u003Cstruct\u0020IESEventService\u002Cstruct\u0020IESEvent\u003E(
    IESEventService* pOwner,
    uint* dwCookie)
  {
    CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E b69c00aa00341d07;
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(&b69c00aa00341d07, (IUnknown*) pOwner);
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) pOwner != IntPtr.Zero)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return -2147467262;
label_4:
    CComPtr\u003CIConnectionPoint\u003E iconnectionPoint;
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iconnectionPoint = 0;
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = ^(int&) ref b69c00aa00341d07;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_1f0e5357_af43_44e6_8547_654c645145d2;
        ref CComPtr\u003CIConnectionPoint\u003E local2 = ref iconnectionPoint;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, _GUID*, IConnectionPoint**)>) *(int*) (*(int*) ^(int&) ref b69c00aa00341d07 + 16))((IConnectionPoint**) num2, (_GUID*) ref local1, (IntPtr) ref local2);
        if (num1 >= 0)
          goto label_10;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_10:
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num3 = ^(int&) ref iconnectionPoint;
        int num4 = (int) *dwCookie;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) ^(int&) ref iconnectionPoint + 24))((uint) num3, (IntPtr) num4);
        *dwCookie = 0U;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPUnadviseHelper\u003Cstruct\u0020IRecorderEx2\u002Cstruct\u0020ITunerEvents2\u003E(
    IRecorderEx2* pOwner,
    uint* dwCookie)
  {
    CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E b69c00aa00341d07;
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(&b69c00aa00341d07, (IUnknown*) pOwner);
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) pOwner != IntPtr.Zero)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return -2147467262;
label_4:
    CComPtr\u003CIConnectionPoint\u003E iconnectionPoint;
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iconnectionPoint = 0;
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = ^(int&) ref b69c00aa00341d07;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_7eab3a3d_0900_43a5_9189_631ac98ed822;
        ref CComPtr\u003CIConnectionPoint\u003E local2 = ref iconnectionPoint;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, _GUID*, IConnectionPoint**)>) *(int*) (*(int*) ^(int&) ref b69c00aa00341d07 + 16))((IConnectionPoint**) num2, (_GUID*) ref local1, (IntPtr) ref local2);
        if (num1 >= 0)
          goto label_10;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_10:
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num3 = ^(int&) ref iconnectionPoint;
        int num4 = (int) *dwCookie;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) ^(int&) ref iconnectionPoint + 24))((uint) num3, (IntPtr) num4);
        *dwCookie = 0U;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eassign\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _First,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _Last)
  {
    input_iterator_tag __unnamed002;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Assign\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(obj0, _First, _Last, __unnamed002);
  }

  internal static unsafe sbyte* std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E(
    sbyte* _First1,
    uint _Size,
    sbyte* _First2,
    uint _Count)
  {
    \u003CModule\u003E.memcpy_s((void*) _First1, _Size, (void*) _First2, _Count);
    return _First1;
  }

  internal static unsafe _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* std\u002Ecopy\u003Cunsigned\u0020long\u0020\u002A\u002Cclass\u0020std\u003A\u003A_Vector_iterator\u003Cunsigned\u0020long\u002Cclass\u0020std\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u0020\u003E(
    [In] _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    uint* _First,
    uint* _Last,
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E _Dest)
  {
    _Vector_iterator\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E allocatorUnsignedLong = _Dest;
    uint* numPtr = _First;
    if (_First != _Last)
    {
      do
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(int*) ^(int&) ref allocatorUnsignedLong = (int) *numPtr;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref allocatorUnsignedLong = ^(int&) ref allocatorUnsignedLong + 4;
        ++numPtr;
      }
      while (numPtr != _Last);
    }
    // ISSUE: cpblk instruction
    __memcpy((IntPtr) obj0, ref allocatorUnsignedLong, 4);
    return obj0;
  }

  internal static unsafe sbyte* std\u002E_Traits_helper\u002Emove_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cchar\u003E\u0020\u003E(
    sbyte* _First1,
    uint _Size,
    sbyte* _First2,
    uint _Count)
  {
    \u003CModule\u003E.memmove_s((void*) _First1, _Size, (void*) _First2, _Count);
    return _First1;
  }

  internal static unsafe _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* std\u002E_Allocate\u003Cstruct\u0020std\u003A\u003A_List_nod\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003A_Node\u003E(
    uint _Count,
    _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* __unnamed001)
  {
    if (_Count <= 0U)
      _Count = 0U;
    else if (uint.MaxValue / _Count < 12U)
    {
      bad_alloc badAlloc;
      \u003CModule\u003E.std\u002Ebad_alloc\u002E\u007Bctor\u007D(&badAlloc, (sbyte*) 0);
      \u003CModule\u003E._CxxThrowException((void*) &badAlloc, &\u003CModule\u003E._TI2\u003FAVbad_alloc\u0040std\u0040\u0040);
    }
    return (_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node*) \u003CModule\u003E.@new(_Count * 12U);
  }

  internal static unsafe uint* std\u002Evector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E\u002E_Ucopy\u003Cunsigned\u0020long\u0020\u002A\u003E(
    [In] vector\u003Cunsigned\u0020long\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E* obj0,
    uint* _First,
    uint* _Last,
    uint* _Ptr)
  {
    return \u003CModule\u003E.std\u002E_Uninitialized_copy\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u002Cclass\u0020std\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E(_First, _Last, _Ptr, (allocator\u003Cunsigned\u0020long\u003E*) obj0);
  }

  internal static unsafe void std\u002Efill\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u003E(
    uint* _First,
    uint* _Last,
    uint* _Val)
  {
    if (_First == _Last)
      return;
    do
    {
      *_First = *_Val;
      ++_First;
    }
    while (_First != _Last);
  }

  internal static unsafe uint* std\u002Ecopy_backward\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u003E(
    uint* _First,
    uint* _Last,
    uint* _Dest)
  {
    _Range_checked_iterator_tag __unnamed004;
    // ISSUE: initblk instruction
    __memset(ref __unnamed004, 0, 1);
    _Scalar_ptr_iterator_tag scalarPtrIteratorTag;
    _Scalar_ptr_iterator_tag __unnamed003 = scalarPtrIteratorTag;
    return \u003CModule\u003E.std\u002E_Copy_backward_opt\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u003E(_First, _Last, _Dest, __unnamed003, __unnamed004);
  }

  internal static unsafe uint* std\u002E_Allocate\u003Cunsigned\u0020long\u003E(
    uint _Count,
    uint* __unnamed001)
  {
    if (_Count <= 0U)
      _Count = 0U;
    else if (uint.MaxValue / _Count < 4U)
    {
      bad_alloc badAlloc;
      \u003CModule\u003E.std\u002Ebad_alloc\u002E\u007Bctor\u007D(&badAlloc, (sbyte*) 0);
      \u003CModule\u003E._CxxThrowException((void*) &badAlloc, &\u003CModule\u003E._TI2\u003FAVbad_alloc\u0040std\u0040\u0040);
    }
    return (uint*) \u003CModule\u003E.@new(_Count << 2);
  }

  internal static unsafe void std\u002E_Construct\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E(
    gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* _Ptr,
    gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* _Val)
  {
    void* voidPtr = (void*) _Ptr;
    gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* centerTvTunersTunerPtr = _Ptr;
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) _Ptr == IntPtr.Zero)
        return;
      \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bctor\u007D(_Ptr, _Val);
    }
    __fault
    {
      \u003CModule\u003E.delete((void*) centerTvTunersTunerPtr, voidPtr);
    }
  }

  internal static unsafe sbyte* std\u002E_Allocate\u003Cchar\u003E(uint _Count, sbyte* __unnamed001)
  {
    if (_Count <= 0U)
      _Count = 0U;
    else if (uint.MaxValue / _Count < 1U)
    {
      bad_alloc badAlloc;
      \u003CModule\u003E.std\u002Ebad_alloc\u002E\u007Bctor\u007D(&badAlloc, (sbyte*) 0);
      \u003CModule\u003E._CxxThrowException((void*) &badAlloc, &\u003CModule\u003E._TI2\u003FAVbad_alloc\u0040std\u0040\u0040);
    }
    return (sbyte*) \u003CModule\u003E.@new(_Count);
  }

  internal static unsafe void ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(
    [In] CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPointContainer\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPointContainer\u003E*) obj0);
  }

  [SpecialName]
  internal static unsafe bad_alloc* std\u002Ebad_alloc\u002E\u007Bctor\u007D(
    [In] bad_alloc* obj0,
    bad_alloc* _param1)
  {
    \u003CModule\u003E.exception\u002E\u007Bctor\u007D((exception*) obj0, (exception*) _param1);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7bad_alloc\u0040std\u0040\u00406B\u0040;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(exception\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void std\u002E_List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Node\u002E\u007Bdtor\u007D(
    [In] _List_nod\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E._Node* obj0)
  {
    \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002E\u007Bdtor\u007D((gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) ((IntPtr) obj0 + 8));
  }

  internal static unsafe CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E* ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(
    [In] CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E* obj0,
    IUnknown* lp)
  {
    *(int*) obj0 = 0;
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) lp != IntPtr.Zero)
      {
        IUnknown* iunknownPtr = lp;
        ref __s_GUID local = ref \u003CModule\u003E._GUID_b196b284_bab4_101a_b69c_00aa00341d07;
        CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E* b69c00aa00341d07Ptr = obj0;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        int num = __calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) lp)((void**) iunknownPtr, (_GUID*) ref local, (IntPtr) b69c00aa00341d07Ptr);
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPointContainer\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020IRecorderEx2\u002Cstruct\u0020ITunerEvents2\u002Cstruct\u0020ITunerEvents2\u003E(
    IRecorderEx2* pOwner,
    ITunerEvents2* pHandler,
    uint* dwCookie)
  {
    CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E b69c00aa00341d07;
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(&b69c00aa00341d07, (IUnknown*) pOwner);
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) pOwner != IntPtr.Zero)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return -2147467262;
label_4:
    CComPtr\u003CIConnectionPoint\u003E iconnectionPoint;
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iconnectionPoint = 0;
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = ^(int&) ref b69c00aa00341d07;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_7eab3a3d_0900_43a5_9189_631ac98ed822;
        ref CComPtr\u003CIConnectionPoint\u003E local2 = ref iconnectionPoint;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, _GUID*, IConnectionPoint**)>) *(int*) (*(int*) ^(int&) ref b69c00aa00341d07 + 16))((IConnectionPoint**) num2, (_GUID*) ref local1, (IntPtr) ref local2);
        if (num1 >= 0)
          goto label_10;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_10:
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        num1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPSetBlanket((IUnknown*) ^(int&) ref iconnectionPoint);
        if (num1 >= 0)
          goto label_15;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_15:
    int num3;
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num4 = ^(int&) ref iconnectionPoint;
        ITunerEvents2* itunerEvents2Ptr = pHandler;
        uint* numPtr = dwCookie;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num3 = __calli((__FnPtr<int (IntPtr, IUnknown*, uint*)>) *(int*) (*(int*) ^(int&) ref iconnectionPoint + 20))((uint*) num4, (IUnknown*) itunerEvents2Ptr, (IntPtr) numPtr);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num3;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Assign\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _First,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _Last,
    input_iterator_tag __unnamed002)
  {
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eclear(obj0);
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref _Where = *(int*) *(int*) ((IntPtr) obj0 + 4);
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Einsert\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(obj0, _Where, _First, _Last);
  }

  internal static unsafe uint* std\u002E_Uninitialized_copy\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u002Cclass\u0020std\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E(
    uint* _First,
    uint* _Last,
    uint* _Dest,
    allocator\u003Cunsigned\u0020long\u003E* _Al)
  {
    _Range_checked_iterator_tag __unnamed005;
    // ISSUE: initblk instruction
    __memset(ref __unnamed005, 0, 1);
    _Scalar_ptr_iterator_tag scalarPtrIteratorTag;
    _Scalar_ptr_iterator_tag __unnamed004 = scalarPtrIteratorTag;
    return \u003CModule\u003E.std\u002E_Uninit_copy\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u002Cclass\u0020std\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E(_First, _Last, _Dest, _Al, __unnamed004, __unnamed005);
  }

  internal static unsafe uint* std\u002E_Copy_backward_opt\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u003E(
    uint* _First,
    uint* _Last,
    uint* _Dest,
    _Scalar_ptr_iterator_tag __unnamed003,
    _Range_checked_iterator_tag __unnamed004)
  {
    int num1 = (int) ((IntPtr) _Last - (IntPtr) _First >> 2);
    int num2 = num1 * 4;
    uint* dst = (uint*) ((IntPtr) _Dest - num2);
    if (num1 > 0)
      \u003CModule\u003E.memmove_s((void*) dst, (uint) num2, (void*) _First, (uint) num2);
    return dst;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Einsert\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _First,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _Last)
  {
    forward_iterator_tag __unnamed003;
    \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Insert\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(obj0, _Where, _First, _Last, __unnamed003);
  }

  internal static unsafe void stdext\u002Eunchecked_fill_n\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020int\u002Cunsigned\u0020long\u003E(
    uint* _First,
    uint _Count,
    uint* _Val)
  {
    uint num = _Count;
    uint* numPtr = _First;
    if (0U >= _Count)
      return;
    do
    {
      *numPtr = *_Val;
      --num;
      ++numPtr;
    }
    while (num > 0U);
  }

  internal static unsafe uint* std\u002E_Uninit_copy\u003Cunsigned\u0020long\u0020\u002A\u002Cunsigned\u0020long\u0020\u002A\u002Cclass\u0020std\u003A\u003Aallocator\u003Cunsigned\u0020long\u003E\u0020\u003E(
    uint* _First,
    uint* _Last,
    uint* _Dest,
    allocator\u003Cunsigned\u0020long\u003E* __unnamed003,
    _Scalar_ptr_iterator_tag __unnamed004,
    _Range_checked_iterator_tag __unnamed005)
  {
    uint num1 = (uint) ((IntPtr) _Last - (IntPtr) _First >> 2);
    int num2 = (int) num1 * 4;
    IntPtr num3 = num2 + (IntPtr) _Dest;
    if (num1 <= 0U)
      return (uint*) num3;
    \u003CModule\u003E.memmove_s((void*) _Dest, (uint) num2, (void*) _First, (uint) num2);
    return (uint*) num3;
  }

  internal static unsafe void std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Insert\u003Cclass\u0020std\u003A\u003Alist\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cclass\u0020std\u003A\u003Aallocator\u003Cstruct\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u003A\u003Aconst_iterator\u003E(
    [In] list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E* obj0,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _First,
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator _Last,
    forward_iterator_tag __unnamed003)
  {
    // ISSUE: untyped stack allocation
    int pStorage = (int) __untypedstackalloc(\u003CModule\u003E.__CxxQueryExceptionSize());
    list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.const_iterator constIterator = _First;
    try
    {
      while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D(&_First, &_Last))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E* _Val = (gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E*) (^(int&) ref _First + 8);
        \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002E_Insert(obj0, _Where, _Val);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref _First = *(int*) ^(int&) ref _First;
      }
    }
    catch (Exception ex1) when (
    {
      // ISSUE: unable to correctly present filter
      uint exceptionCode = (uint) Marshal.GetExceptionCode();
      if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
      {
        SuccessfulFiltering;
      }
      else
        throw;
    }
    )
    {
      uint rethrow = 0;
      \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage);
      try
      {
        try
        {
          while (\u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Econst_iterator\u002E\u0021\u003D(&constIterator, &_First))
          {
            list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator _Where1 = _Where;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref _Where1 = *(int*) (^(int&) ref _Where + 4);
            list\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E.iterator iterator;
            \u003CModule\u003E.std\u002Elist\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u002Cstd\u003A\u003Aallocator\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003Agcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E\u0020\u003E\u0020\u003E\u002Eerase(obj0, &iterator, _Where1);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ref constIterator = *(int*) ^(int&) ref constIterator;
          }
          \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
        }
        catch (Exception ex2) when (
        {
          // ISSUE: unable to correctly present filter
          rethrow = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
          if (rethrow != 0U)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
        }
        if (rethrow == 0U)
          return;
        throw;
      }
      finally
      {
        \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage, (int) rethrow);
      }
    }
  }

  internal static unsafe uint \u003FAddRef\u0040TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWBA\u0040AGKXZ(
    [In] TPTunerEventHandler* obj0)
  {
    obj0 -= 16;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EAddRef;
  }

  internal static unsafe int \u003FQueryInterface\u0040TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWM\u0040AGJABU_GUID\u0040\u0040PAPAX\u0040Z(
    [In] TPTunerEventHandler* obj0,
    _GUID* riid,
    void** ppvObject)
  {
    obj0 -= 12;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EQueryInterface;
  }

  internal static unsafe int \u003FQueryInterface\u0040TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWBA\u0040AGJABU_GUID\u0040\u0040PAPAX\u0040Z(
    [In] TPTunerEventHandler* obj0,
    _GUID* riid,
    void** ppvObject)
  {
    obj0 -= 16;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EQueryInterface;
  }

  internal static unsafe uint \u003FRelease\u0040TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWM\u0040AGKXZ(
    [In] TPTunerEventHandler* obj0)
  {
    obj0 -= 12;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ERelease;
  }

  internal static unsafe uint \u003FRelease\u0040TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWBA\u0040AGKXZ(
    [In] TPTunerEventHandler* obj0)
  {
    obj0 -= 16;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002ERelease;
  }

  internal static unsafe uint \u003FAddRef\u0040TPTunerEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWM\u0040AGKXZ(
    [In] TPTunerEventHandler* obj0)
  {
    obj0 -= 12;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EAddRef;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIConnectionPointContainer\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIConnectionPointContainer\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIConnectionPointContainer\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIConnectionPointContainer\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPointContainer\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPointContainer\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIConnectionPoint\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIConnectionPoint\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe IUnknown* ATL\u002EAtlComQIPtrAssign(
    IUnknown** pp,
    IUnknown* lp,
    _GUID* riid)
  {
    if ((IntPtr) pp == IntPtr.Zero)
      return (IUnknown*) 0;
    IUnknown* iunknownPtr1 = (IUnknown*) *(int*) pp;
    *(int*) pp = 0;
    if ((IntPtr) lp != IntPtr.Zero)
    {
      IUnknown* iunknownPtr2 = lp;
      _GUID* guidPtr = riid;
      IUnknown** iunknownPtr3 = pp;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = __calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) lp)((void**) iunknownPtr2, guidPtr, (IntPtr) iunknownPtr3);
    }
    if ((IntPtr) iunknownPtr1 != IntPtr.Zero)
    {
      IUnknown* iunknownPtr4 = iunknownPtr1;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iunknownPtr4 + 8))((IntPtr) iunknownPtr4);
    }
    return (IUnknown*) *(int*) pp;
  }

  internal static unsafe IUnknown* ATL\u002EAtlComPtrAssign(IUnknown** pp, IUnknown* lp)
  {
    if ((IntPtr) pp == IntPtr.Zero)
      return (IUnknown*) 0;
    if ((IntPtr) lp != IntPtr.Zero)
    {
      IUnknown* iunknownPtr = lp;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iunknownPtr + 4))((IntPtr) iunknownPtr);
    }
    uint num1 = (uint) *(int*) pp;
    if (num1 != 0U)
    {
      int num2 = (int) num1;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
    }
    *(int*) pp = (int) lp;
    return lp;
  }

  internal static unsafe void CAutoLock\u002E\u007Bdtor\u007D([In] CAutoLock* obj0) => \u003CModule\u003E.LeaveCriticalSection((_RTL_CRITICAL_SECTION*) *(int*) obj0);

  internal static unsafe CAutoLock* CAutoLock\u002E\u007Bctor\u007D(
    [In] CAutoLock* obj0,
    CCritSec* plock)
  {
    *(int*) obj0 = (int) plock;
    \u003CModule\u003E.EnterCriticalSection((_RTL_CRITICAL_SECTION*) plock);
    return obj0;
  }

  internal static unsafe void CCritSec\u002E\u007Bdtor\u007D([In] CCritSec* obj0) => \u003CModule\u003E.DeleteCriticalSection((_RTL_CRITICAL_SECTION*) obj0);

  internal static unsafe int IsEqualGUID(_GUID* rguid1, _GUID* rguid2)
  {
    uint num1 = 16;
    _GUID* guidPtr1 = rguid2;
    byte num2 = *(byte*) rguid1;
    byte num3 = *(byte*) rguid2;
    int num4;
    if ((uint) num2 >= (uint) num3)
    {
      _GUID* guidPtr2 = (_GUID*) ((IntPtr) rguid1 - (IntPtr) rguid2);
      while ((uint) num2 <= (uint) num3)
      {
        if (num1 != 1U)
        {
          --num1;
          ++guidPtr1;
          num2 = *(byte*) ((IntPtr) guidPtr2 + (IntPtr) guidPtr1);
          num3 = *(byte*) guidPtr1;
          if ((uint) num2 < (uint) num3)
            break;
        }
        else
        {
          num4 = 1;
          goto label_7;
        }
      }
    }
    num4 = 0;
label_7:
    return num4;
  }

  internal static unsafe void ATL\u002ECComVariant\u002E\u007Bdtor\u007D([In] CComVariant* obj0) => \u003CModule\u003E.VariantClear((tagVARIANT*) obj0);

  internal static unsafe void ATL\u002ECComBSTR\u002EAttach([In] CComBSTR* obj0, ushort* src)
  {
    uint num = (uint) *(int*) obj0;
    if ((IntPtr) (int) num == (IntPtr) src)
      return;
    \u003CModule\u003E.SysFreeString((ushort*) num);
    *(int*) obj0 = (int) src;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool ATL\u002ECComBSTR\u002E\u0021\u003D([In] CComBSTR* obj0, int nNull) => *(int*) obj0 != 0;

  internal static unsafe CComBSTR* ATL\u002ECComBSTR\u002E\u007Bctor\u007D(
    [In] CComBSTR* obj0,
    ushort* pSrc)
  {
    if ((IntPtr) pSrc == IntPtr.Zero)
    {
      *(int*) obj0 = 0;
    }
    else
    {
      ushort* numPtr = \u003CModule\u003E.SysAllocString(pSrc);
      *(int*) obj0 = (int) numPtr;
      if ((IntPtr) numPtr == IntPtr.Zero)
        \u003CModule\u003E.ATL\u002EAtlThrowImpl(-2147024882);
    }
    return obj0;
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIEnumRecorder\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E\u002E\u007Bdtor\u007D(
    [In] CComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CINetworkRecorderMgr\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CINetworkRecorderMgr\u003E*) obj0);
  }

  internal static unsafe RecorderMgrEventHandler* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002E\u007Bctor\u007D(
    [In] RecorderMgrEventHandler* obj0,
    TunerManager tm)
  {
    \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bctor\u007D((ComLiteBase*) obj0);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
      *(int*) ((IntPtr) obj0 + 12) = (int) &\u003CModule\u003E.\u003F\u003F_7RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIRecorderMgrEvents\u0040\u0040\u0040;
      \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E\u002E\u007Bctor\u007D((gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E*) ((IntPtr) obj0 + 16), tm);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002E\u007Bdtor\u007D(
    [In] RecorderMgrEventHandler* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BComLiteBase\u00401234\u0040\u0040;
    *(int*) ((IntPtr) obj0 + 12) = (int) &\u003CModule\u003E.\u003F\u003F_7RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u00406BIRecorderMgrEvents\u0040\u0040\u0040;
    // ISSUE: fault handler
    try
    {
      \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E\u002E\u007Bdtor\u007D((gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E*) ((IntPtr) obj0 + 16));
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002E\u007Bdtor\u007D((ComLiteBase*) obj0);
  }

  internal static unsafe uint Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002EAddRef(
    [In] RecorderMgrEventHandler* obj0)
  {
    return (uint) \u003CModule\u003E.InterlockedIncrement((int*) ((IntPtr) obj0 + 8));
  }

  internal static unsafe uint Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002ERelease(
    [In] RecorderMgrEventHandler* obj0)
  {
    return \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002ERelease((ComLiteBase*) obj0);
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002EQueryInterface(
    [In] RecorderMgrEventHandler* obj0,
    _GUID* riid,
    void** ppvObject)
  {
    if ((IntPtr) ppvObject == IntPtr.Zero)
      return -2147467261;
    if (\u003CModule\u003E.IsEqualGUID(riid, (_GUID*) &\u003CModule\u003E._GUID_07f3961a_f626_4bbc_a24f_1e72175f84fb) == 0)
      return \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002EComLiteBase\u002EQueryInterface((ComLiteBase*) obj0, riid, ppvObject);
    RecorderMgrEventHandler* recorderMgrEventHandlerPtr = (IntPtr) obj0 == IntPtr.Zero ? (RecorderMgrEventHandler*) 0 : (RecorderMgrEventHandler*) ((IntPtr) obj0 + 12);
    *(int*) ppvObject = (int) recorderMgrEventHandlerPtr;
    \u003CModule\u003E.InterlockedIncrement((int*) ((IntPtr) obj0 + 8));
    return 0;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002ERecorderArrived(
    [In] RecorderMgrEventHandler* obj0,
    _GUID guid)
  {
    return ((TunerManager) ((GCHandle) new IntPtr((void*) *(int*) ((IntPtr) obj0 + 4))).Target).NativeRecorderArrived(guid);
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002ERecorderDeparted(
    [In] RecorderMgrEventHandler* obj0,
    _GUID guid)
  {
    return ((TunerManager) ((GCHandle) new IntPtr((void*) *(int*) ((IntPtr) obj0 + 4))).Target).NativeRecorderDeparted(guid);
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002ERecorderConfigChanged(
    [In] RecorderMgrEventHandler* obj0,
    _GUID guid)
  {
    return ((TunerManager) ((GCHandle) new IntPtr((void*) *(int*) ((IntPtr) obj0 + 4))).Target).NativeRecorderConfigChanged(guid);
  }

  internal static unsafe void* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002E__vecDelDtor(
    [In] RecorderMgrEventHandler* obj0,
    uint _param1)
  {
    if (((int) _param1 & 2) != 0)
    {
      RecorderMgrEventHandler* p = (RecorderMgrEventHandler*) ((IntPtr) obj0 - 4);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.__ehvec_dtor((void*) obj0, 32U, *(int*) p, (__FnPtr<void (void*)>) __methodptr(Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002E\u007Bdtor\u007D));
      if (((int) _param1 & 1) != 0)
        \u003CModule\u003E.delete\u005B\u005D((void*) p);
      return (void*) p;
    }
    \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002E\u007Bdtor\u007D(obj0);
    if (((int) _param1 & 1) != 0)
      \u003CModule\u003E.delete((void*) obj0);
    return (void*) obj0;
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIRecorderMgrEvents\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIRecorderMgrEvents\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderMgrEvents\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderMgrEvents\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIRecorder\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIRecorder\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorder\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorder\u003E*) obj0);
  }

  internal static unsafe void ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bdtor\u007D(
    [In] CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIRecorderEx2\u003E*) obj0);
  }

  [SpecialName]
  internal static unsafe CComPtr\u003CIEnumRecorder\u003E* ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bctor\u007D(
    [In] CComPtr\u003CIEnumRecorder\u003E* obj0,
    CComPtr\u003CIEnumRecorder\u003E* lp)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bctor\u007D((CComPtrBase\u003CIEnumRecorder\u003E*) obj0, (IEnumRecorder*) *(int*) lp);
    return obj0;
  }

  internal static unsafe IEnumRecorder* ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u003D(
    [In] CComPtr\u003CIEnumRecorder\u003E* obj0,
    CComPtr\u003CIEnumRecorder\u003E* lp)
  {
    int num1 = *(int*) lp;
    uint num2 = (uint) *(int*) obj0;
    if ((int) num2 == num1)
      return (IEnumRecorder*) num2;
    IEnumRecorder* lp1 = (IEnumRecorder*) num1;
    return (IEnumRecorder*) \u003CModule\u003E.ATL\u002EAtlComPtrAssign((IUnknown**) obj0, (IUnknown*) lp1);
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIEnumRecorder\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe CComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E* ATL\u002ECComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E\u002E\u007Bctor\u007D(
    [In] CComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E* obj0,
    IUnknown* lp)
  {
    *(int*) obj0 = 0;
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) lp != IntPtr.Zero)
      {
        IUnknown* iunknownPtr = lp;
        ref __s_GUID local = ref \u003CModule\u003E._GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa;
        CComQIPtr\u003CIEnumRecorder\u002C\u0026_GUID_8a0c6976_25a0_426c_9e20_aee694c7a6aa\u003E* objPtr = obj0;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        int num = __calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) lp)((void**) iunknownPtr, (_GUID*) ref local, (IntPtr) objPtr);
      }
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIEnumRecorder\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CINetworkRecorderMgr\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CINetworkRecorderMgr\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe CComGITPtr\u003CIRecorderEx2\u003E* ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002E\u007Bctor\u007D(
    [In] CComGITPtr\u003CIRecorderEx2\u003E* obj0,
    IRecorderEx2* p)
  {
    *(int*) obj0 = 0;
    int hr = \u003CModule\u003E.ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002EAttach(obj0, p);
    if (hr < 0)
      \u003CModule\u003E.ATL\u002EAtlThrowImpl(hr);
    return obj0;
  }

  internal static unsafe void ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002E\u007Bdtor\u007D(
    [In] CComGITPtr\u003CIRecorderEx2\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002ERevoke(obj0);
  }

  internal static unsafe int ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002ECopyTo(
    [In] CComGITPtr\u003CIRecorderEx2\u003E* obj0,
    IRecorderEx2** pp)
  {
    CComPtr\u003CIGlobalInterfaceTable\u003E iglobalInterfaceTable;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref iglobalInterfaceTable = 0;
    int gitPtr;
    // ISSUE: fault handler
    try
    {
      gitPtr = \u003CModule\u003E.ATL\u002EAtlGetGITPtr((IGlobalInterfaceTable**) &iglobalInterfaceTable);
      if (gitPtr >= 0)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D), (void*) &iglobalInterfaceTable);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) &iglobalInterfaceTable);
    return gitPtr;
label_4:
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      int num2 = ^(int&) ref iglobalInterfaceTable;
      int num3 = *(int*) obj0;
      ref __s_GUID local = ref \u003CModule\u003E._GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339;
      IRecorderEx2** irecorderEx2Ptr = pp;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      num1 = __calli((__FnPtr<int (IntPtr, uint, _GUID*, void**)>) *(int*) (*(int*) ^(int&) ref iglobalInterfaceTable + 20))((void**) num2, (_GUID*) num3, (uint) ref local, (IntPtr) irecorderEx2Ptr);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D), (void*) &iglobalInterfaceTable);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) &iglobalInterfaceTable);
    return num1;
  }

  internal static unsafe gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E* Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E\u002E\u007Bctor\u007D(
    [In] gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E* obj0,
    TunerManager t)
  {
    IntPtr num = (IntPtr) GCHandle.Alloc((object) t);
    *(int*) obj0 = (int) num.ToPointer();
    return obj0;
  }

  internal static unsafe void Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Egcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E\u002E\u007Bdtor\u007D(
    [In] gcroot\u003CMicrosoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATunerManager\u0020\u005E\u003E* obj0)
  {
    ((GCHandle) new IntPtr((void*) *(int*) obj0)).Free();
    *(int*) obj0 = 0;
  }

  internal static unsafe IRecorderMgrEvents* ATL\u002ECComPtr\u003CIRecorderMgrEvents\u003E\u002E\u003D(
    [In] CComPtr\u003CIRecorderMgrEvents\u003E* obj0,
    IRecorderMgrEvents* lp)
  {
    uint num = (uint) *(int*) obj0;
    return (IntPtr) (int) num != (IntPtr) lp ? (IRecorderMgrEvents*) \u003CModule\u003E.ATL\u002EAtlComPtrAssign((IUnknown**) obj0, (IUnknown*) lp) : (IRecorderMgrEvents*) num;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIRecorderMgrEvents\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIRecorderMgrEvents\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIRecorder\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIRecorder\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static unsafe CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E* ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u007Bctor\u007D(
    [In] CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E* obj0)
  {
    *(int*) obj0 = 0;
    return obj0;
  }

  internal static unsafe IRecorderEx2* ATL\u002ECComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E\u002E\u003D(
    [In] CComQIPtr\u003CIRecorderEx2\u002C\u0026_GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339\u003E* obj0,
    IUnknown* lp)
  {
    int num = *(int*) obj0;
    return (IntPtr) num != (IntPtr) lp ? (IRecorderEx2*) \u003CModule\u003E.ATL\u002EAtlComQIPtrAssign((IUnknown**) obj0, lp, (_GUID*) &\u003CModule\u003E._GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339) : (IRecorderEx2*) num;
  }

  internal static unsafe void ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtr\u003CIGlobalInterfaceTable\u003E* obj0)
  {
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) obj0);
  }

  internal static unsafe CComPtrBase\u003CIEnumRecorder\u003E* ATL\u002ECComPtrBase\u003CIEnumRecorder\u003E\u002E\u007Bctor\u007D(
    [In] CComPtrBase\u003CIEnumRecorder\u003E* obj0,
    IEnumRecorder* lp)
  {
    *(int*) obj0 = (int) lp;
    if ((IntPtr) lp != IntPtr.Zero)
    {
      IEnumRecorder* ienumRecorderPtr = lp;
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) ienumRecorderPtr + 4))((IntPtr) ienumRecorderPtr);
    }
    return obj0;
  }

  internal static unsafe int ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002EAttach(
    [In] CComGITPtr\u003CIRecorderEx2\u003E* obj0,
    IRecorderEx2* p)
  {
    CComPtr\u003CIGlobalInterfaceTable\u003E iglobalInterfaceTable;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref iglobalInterfaceTable = 0;
    int num1;
    // ISSUE: fault handler
    try
    {
      num1 = \u003CModule\u003E.ATL\u002EAtlGetGITPtr((IGlobalInterfaceTable**) &iglobalInterfaceTable);
      if (num1 >= 0)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D), (void*) &iglobalInterfaceTable);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) &iglobalInterfaceTable);
    return num1;
label_4:
    // ISSUE: fault handler
    try
    {
      uint num2 = (uint) *(int*) obj0;
      if (num2 != 0U)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num3 = ^(int&) ref iglobalInterfaceTable;
        int num4 = (int) num2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) ^(int&) ref iglobalInterfaceTable + 16))((uint) num3, (IntPtr) num4);
      }
      if (num1 >= 0)
        goto label_9;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D), (void*) &iglobalInterfaceTable);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) &iglobalInterfaceTable);
    return num1;
label_9:
    int num5;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      int num6 = ^(int&) ref iglobalInterfaceTable;
      IRecorderEx2* irecorderEx2Ptr = p;
      ref __s_GUID local = ref \u003CModule\u003E._GUID_706a52d5_e700_4353_8f1c_aa5c5dbb7339;
      CComGITPtr\u003CIRecorderEx2\u003E* gitPtrIrecorderEx2Ptr = obj0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      num5 = __calli((__FnPtr<int (IntPtr, IUnknown*, _GUID*, uint*)>) *(int*) (*(int*) ^(int&) ref iglobalInterfaceTable + 12))((uint*) num6, (_GUID*) irecorderEx2Ptr, (IUnknown*) ref local, (IntPtr) gitPtrIrecorderEx2Ptr);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D), (void*) &iglobalInterfaceTable);
    }
    \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) &iglobalInterfaceTable);
    return num5;
  }

  internal static unsafe int ATL\u002ECComGITPtr\u003CIRecorderEx2\u003E\u002ERevoke(
    [In] CComGITPtr\u003CIRecorderEx2\u003E* obj0)
  {
    if (*(int*) obj0 != 0)
    {
      CComPtr\u003CIGlobalInterfaceTable\u003E iglobalInterfaceTable;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iglobalInterfaceTable = 0;
      int gitPtr;
      // ISSUE: fault handler
      try
      {
        gitPtr = \u003CModule\u003E.ATL\u002EAtlGetGITPtr((IGlobalInterfaceTable**) &iglobalInterfaceTable);
        if (gitPtr >= 0)
          goto label_5;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D), (void*) &iglobalInterfaceTable);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) &iglobalInterfaceTable);
      return gitPtr;
label_5:
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num1 = ^(int&) ref iglobalInterfaceTable;
        int num2 = *(int*) obj0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        if (__calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) ^(int&) ref iglobalInterfaceTable + 16))((uint) num1, (IntPtr) num2) >= 0)
          *(int*) obj0 = 0;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D), (void*) &iglobalInterfaceTable);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIGlobalInterfaceTable\u003E*) &iglobalInterfaceTable);
    }
    return 0;
  }

  internal static unsafe void ATL\u002ECComPtrBase\u003CIGlobalInterfaceTable\u003E\u002E\u007Bdtor\u007D(
    [In] CComPtrBase\u003CIGlobalInterfaceTable\u003E* obj0)
  {
    uint num1 = (uint) *(int*) obj0;
    if (num1 == 0U)
      return;
    int num2 = (int) num1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num3 = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) num2 + 8))((IntPtr) num2);
  }

  internal static Tuner Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002Ememberwise_ref_clone\u003Cclass\u0020Microsoft\u003A\u003AMediaCenter\u003A\u003ATV\u003A\u003ATuners\u003A\u003ATuner\u0020\u005E\u003E(
    Tuner @ref)
  {
    return @ref == null ? (Tuner) null : (Tuner) @ref.ReferenceClone();
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPUnadviseHelper\u003Cstruct\u0020INetworkRecorderMgr\u002Cstruct\u0020IRecorderMgrEvents\u003E(
    INetworkRecorderMgr* pOwner,
    uint* dwCookie)
  {
    CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E b69c00aa00341d07;
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(&b69c00aa00341d07, (IUnknown*) pOwner);
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) pOwner != IntPtr.Zero)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return -2147467262;
label_4:
    CComPtr\u003CIConnectionPoint\u003E iconnectionPoint;
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iconnectionPoint = 0;
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = ^(int&) ref b69c00aa00341d07;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_07f3961a_f626_4bbc_a24f_1e72175f84fb;
        ref CComPtr\u003CIConnectionPoint\u003E local2 = ref iconnectionPoint;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, _GUID*, IConnectionPoint**)>) *(int*) (*(int*) ^(int&) ref b69c00aa00341d07 + 16))((IConnectionPoint**) num2, (_GUID*) ref local1, (IntPtr) ref local2);
        if (num1 >= 0)
          goto label_10;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_10:
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num3 = ^(int&) ref iconnectionPoint;
        int num4 = (int) *dwCookie;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, uint)>) *(int*) (*(int*) ^(int&) ref iconnectionPoint + 24))((uint) num3, (IntPtr) num4);
        *dwCookie = 0U;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
  }

  internal static unsafe int Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPAdviseHelper\u003Cstruct\u0020INetworkRecorderMgr\u002Cstruct\u0020IRecorderMgrEvents\u002Cstruct\u0020IRecorderMgrEvents\u003E(
    INetworkRecorderMgr* pOwner,
    IRecorderMgrEvents* pHandler,
    uint* dwCookie)
  {
    CComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E b69c00aa00341d07;
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bctor\u007D(&b69c00aa00341d07, (IUnknown*) pOwner);
    // ISSUE: fault handler
    try
    {
      if ((IntPtr) pOwner != IntPtr.Zero)
        goto label_4;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return -2147467262;
label_4:
    CComPtr\u003CIConnectionPoint\u003E iconnectionPoint;
    int num1;
    // ISSUE: fault handler
    try
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref iconnectionPoint = 0;
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = ^(int&) ref b69c00aa00341d07;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_07f3961a_f626_4bbc_a24f_1e72175f84fb;
        ref CComPtr\u003CIConnectionPoint\u003E local2 = ref iconnectionPoint;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num1 = __calli((__FnPtr<int (IntPtr, _GUID*, IConnectionPoint**)>) *(int*) (*(int*) ^(int&) ref b69c00aa00341d07 + 16))((IConnectionPoint**) num2, (_GUID*) ref local1, (IntPtr) ref local2);
        if (num1 >= 0)
          goto label_10;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_10:
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        num1 = \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPSetBlanket((IUnknown*) ^(int&) ref iconnectionPoint);
        if (num1 >= 0)
          goto label_15;
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num1;
label_15:
    int num3;
    // ISSUE: fault handler
    try
    {
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num4 = ^(int&) ref iconnectionPoint;
        IRecorderMgrEvents* irecorderMgrEventsPtr = pHandler;
        uint* numPtr = dwCookie;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        num3 = __calli((__FnPtr<int (IntPtr, IUnknown*, uint*)>) *(int*) (*(int*) ^(int&) ref iconnectionPoint + 20))((uint*) num4, (IUnknown*) irecorderMgrEventsPtr, (IntPtr) numPtr);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D), (void*) &iconnectionPoint);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CIConnectionPoint\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CIConnectionPoint\u003E*) &iconnectionPoint);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D), (void*) &b69c00aa00341d07);
    }
    \u003CModule\u003E.ATL\u002ECComQIPtr\u003CIConnectionPointContainer\u002C\u0026_GUID_b196b284_bab4_101a_b69c_00aa00341d07\u003E\u002E\u007Bdtor\u007D(&b69c00aa00341d07);
    return num3;
  }

  internal static unsafe uint \u003FRelease\u0040RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWM\u0040AGKXZ(
    [In] RecorderMgrEventHandler* obj0)
  {
    obj0 -= 12;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002ERelease;
  }

  internal static unsafe uint \u003FAddRef\u0040RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWM\u0040AGKXZ(
    [In] RecorderMgrEventHandler* obj0)
  {
    obj0 -= 12;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002EAddRef;
  }

  internal static unsafe int \u003FQueryInterface\u0040RecorderMgrEventHandler\u0040Tuners\u0040TV\u0040MediaCenter\u0040Microsoft\u0040\u0040\u0024\u0024FWM\u0040AGJABU_GUID\u0040\u0040PAPAX\u0040Z(
    [In] RecorderMgrEventHandler* obj0,
    _GUID* riid,
    void** ppvObject)
  {
    obj0 -= 12;
    // ISSUE: jmp instruction
    __jump \u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ERecorderMgrEventHandler\u002EQueryInterface;
  }

  internal static unsafe int ATL\u002EAtlGetGITPtr(IGlobalInterfaceTable** ppGIT)
  {
    if ((IntPtr) ppGIT == IntPtr.Zero)
      return -2147467261;
    if ((IntPtr) \u003CModule\u003E.ATL\u002E_pAtlModule == IntPtr.Zero)
      return \u003CModule\u003E.CoCreateInstance(&\u003CModule\u003E.CLSID_StdGlobalInterfaceTable, (IUnknown*) 0, 1U, (_GUID*) &\u003CModule\u003E._GUID_00000146_0000_0000_c000_000000000046, (void**) ppGIT);
    CAtlModule* atlPAtlModule = \u003CModule\u003E.ATL\u002E_pAtlModule;
    IGlobalInterfaceTable** iglobalInterfaceTablePtr = ppGIT;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    return __calli((__FnPtr<int (IntPtr, IGlobalInterfaceTable**)>) *(int*) (*(int*) \u003CModule\u003E.ATL\u002E_pAtlModule + 16))((IGlobalInterfaceTable**) atlPAtlModule, (IntPtr) iglobalInterfaceTablePtr);
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static bool \u003CCrtImplementationDetails\u003E\u002ENativeDll\u002EIsSafeForManagedCode() => (\u003CModule\u003E.__native_dllmain_reason != uint.MaxValue ? 1 : 0) == 0 || (\u003CModule\u003E.__native_vcclrit_reason != uint.MaxValue ? 1 : 0) != 0 || \u003CModule\u003E.__native_dllmain_reason != 1U && \u003CModule\u003E.__native_dllmain_reason != 0U;

  internal static unsafe int \u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002EDoNothing(
    void* cookie)
  {
    GC.KeepAlive((object) int.MaxValue);
    return 0;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool \u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002EHasPerProcess()
  {
    if (\u003CModule\u003E.\u003FhasPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A != (TriBool.State) 2)
      return \u003CModule\u003E.\u003FhasPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A == (TriBool.State) -1;
    void** voidPtr = (void**) &\u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_mp_a;
    if (ref \u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_mp_a < ref \u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_mp_z)
    {
      while (*(int*) voidPtr == 0)
      {
        voidPtr += 4;
        if ((IntPtr) voidPtr >= ref \u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_mp_z)
          goto label_5;
      }
      \u003CModule\u003E.\u003FhasPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A = (TriBool.State) -1;
      return true;
    }
label_5:
    \u003CModule\u003E.\u003FhasPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A = (TriBool.State) 0;
    return false;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool \u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002EHasNative()
  {
    if (\u003CModule\u003E.\u003FhasNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A != (TriBool.State) 2)
      return \u003CModule\u003E.\u003FhasNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A == (TriBool.State) -1;
    void** voidPtr1 = (void**) &\u003CModule\u003E.__xi_a;
    if (ref \u003CModule\u003E.__xi_a < ref \u003CModule\u003E.__xi_z)
    {
      while (*(int*) voidPtr1 == 0)
      {
        voidPtr1 += 4;
        if ((IntPtr) voidPtr1 >= ref \u003CModule\u003E.__xi_z)
          goto label_5;
      }
      \u003CModule\u003E.\u003FhasNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A = (TriBool.State) -1;
      return true;
    }
label_5:
    void** voidPtr2 = (void**) &\u003CModule\u003E.__xc_a;
    if (ref \u003CModule\u003E.__xc_a < ref \u003CModule\u003E.__xc_z)
    {
      while (*(int*) voidPtr2 == 0)
      {
        voidPtr2 += 4;
        if ((IntPtr) voidPtr2 >= ref \u003CModule\u003E.__xc_z)
          goto label_9;
      }
      \u003CModule\u003E.\u003FhasNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A = (TriBool.State) -1;
      return true;
    }
label_9:
    \u003CModule\u003E.\u003FhasNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00400W4State\u0040TriBool\u00402\u0040A = (TriBool.State) 0;
    return false;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static bool \u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002ENeedsInitialization() => \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002EHasPerProcess() && !\u003CModule\u003E.\u003FInitializedPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA || \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002EHasNative() && !\u003CModule\u003E.\u003FInitializedNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA && \u003CModule\u003E.__native_startup_state == (__enative_startup_state) 0;

  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002EInitialize() => \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EDoCallBackInDefaultDomain((__FnPtr<int (void*)>) (IntPtr) \u003CModule\u003E.__unep\u0040\u003FDoNothing\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024FCGJPAX\u0040Z, (void*) 0);

  internal static void \u003FA0x03dbac58\u002E\u003F\u003F__E\u003FInitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003FInitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA = 0;

  internal static void \u003FA0x03dbac58\u002E\u003F\u003F__E\u003FUninitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003FUninitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA = 0;

  internal static void \u003FA0x03dbac58\u002E\u003F\u003F__E\u003FIsDefaultDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2_NA\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003FIsDefaultDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2_NA = false;

  internal static void \u003FA0x03dbac58\u002E\u003F\u003F__E\u003FInitializedVtables\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003FInitializedVtables\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 0;

  internal static void \u003FA0x03dbac58\u002E\u003F\u003F__E\u003FInitializedNative\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003FInitializedNative\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 0;

  internal static void \u003FA0x03dbac58\u002E\u003F\u003F__E\u003FInitializedPerProcess\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003FInitializedPerProcess\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 0;

  internal static void \u003FA0x03dbac58\u002E\u003F\u003F__E\u003FInitializedPerAppDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003FInitializedPerAppDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 0;

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeVtables(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0, "The C++ module failed to load during vtable initialization.\n");
    \u003CModule\u003E.\u003FInitializedVtables\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 1;
    \u003CModule\u003E._initterm_m((__FnPtr<void* ()>*) &\u003CModule\u003E.\u003FA0x03dbac58\u002E__xi_vt_a, (__FnPtr<void* ()>*) &\u003CModule\u003E.\u003FA0x03dbac58\u002E__xi_vt_z);
    \u003CModule\u003E.\u003FInitializedVtables\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 2;
  }

  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeDefaultAppDomain(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0, "The C++ module failed to load while attempting to initialize the default appdomain.\n");
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002EInitialize();
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeNative(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0, "The C++ module failed to load during native initialization.\n");
    \u003CModule\u003E.\u003FInitializedNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA = true;
    if (!\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ENativeDll\u002EIsSafeForManagedCode())
      \u003CModule\u003E._amsg_exit(33);
    switch (\u003CModule\u003E.__native_startup_state)
    {
      case (__enative_startup_state) 0:
        \u003CModule\u003E.\u003FInitializedNative\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 1;
        \u003CModule\u003E.__native_startup_state = (__enative_startup_state) 1;
        if (\u003CModule\u003E._initterm_e((__FnPtr<int ()>*) &\u003CModule\u003E.__xi_a, (__FnPtr<int ()>*) &\u003CModule\u003E.__xi_z) != 0)
          \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EThrowModuleLoadException(\u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u002EP\u0024AAVString\u0040System\u0040\u0040((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0));
        \u003CModule\u003E._initterm((__FnPtr<void ()>*) &\u003CModule\u003E.__xc_a, (__FnPtr<void ()>*) &\u003CModule\u003E.__xc_z);
        \u003CModule\u003E.__native_startup_state = (__enative_startup_state) 2;
        \u003CModule\u003E.\u003FInitializedNativeFromCCTOR\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA = true;
        \u003CModule\u003E.\u003FInitializedNative\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 2;
        break;
      case (__enative_startup_state) 1:
        \u003CModule\u003E._amsg_exit(33);
        break;
    }
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializePerProcess(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0, "The C++ module failed to load during process initialization.\n");
    \u003CModule\u003E.\u003FInitializedPerProcess\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 1;
    \u003CModule\u003E._initatexit_m();
    \u003CModule\u003E._initterm_m((__FnPtr<void* ()>*) &\u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_mp_a, (__FnPtr<void* ()>*) &\u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_mp_z);
    \u003CModule\u003E.\u003FInitializedPerProcess\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 2;
    \u003CModule\u003E.\u003FInitializedPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA = true;
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializePerAppDomain(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0, "The C++ module failed to load during appdomain initialization.\n");
    \u003CModule\u003E.\u003FInitializedPerAppDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 1;
    \u003CModule\u003E._initatexit_app_domain();
    \u003CModule\u003E._initterm_m((__FnPtr<void* ()>*) &\u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_ma_a, (__FnPtr<void* ()>*) &\u003CModule\u003E.\u003FA0x03dbac58\u002E__xc_ma_z);
    \u003CModule\u003E.\u003FInitializedPerAppDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2W4State\u0040Progress\u00402\u0040A = (Progress.State) 2;
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeUninitializer(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0, "The C++ module failed to load during registration for the unload events.\n");
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ERegisterModuleUninitializer(new EventHandler(\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EDomainUnload));
  }

  [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E_Initialize(
    [In] LanguageSupport* obj0)
  {
    Interlocked.Increment(ref \u003CModule\u003E.\u003FCount\u0040AllDomains\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402HA);
    \u003CModule\u003E.\u003FIsDefaultDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2_NA = AppDomain.CurrentDomain.IsDefaultAppDomain();
    if (\u003CModule\u003E.\u003FIsDefaultDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2_NA)
      \u003CModule\u003E.\u003FEntered\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA = true;
    void* fiberPtrId = \u003CModule\u003E._getFiberPtrId();
    int num1 = 0;
    int num2 = 0;
    RuntimeHelpers.PrepareConstrainedRegions();
    try
    {
      while (num2 == 0)
      {
        try
        {
        }
        finally
        {
          IntPtr comparand = (IntPtr) 0;
          IntPtr num3 = (IntPtr) fiberPtrId;
          // ISSUE: cast to a reference type
          void* voidPtr = (void*) Interlocked.CompareExchange((IntPtr&) ref \u003CModule\u003E.__native_startup_lock, num3, comparand);
          if ((IntPtr) voidPtr == IntPtr.Zero)
            num2 = 1;
          else if (voidPtr == fiberPtrId)
          {
            num1 = 1;
            num2 = 1;
          }
        }
        if (num2 == 0)
          \u003CModule\u003E.Sleep(1000U);
      }
      if (!\u003CModule\u003E.\u003FIsDefaultDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2_NA)
      {
        if (\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EDefaultDomain\u002ENeedsInitialization())
          \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeDefaultAppDomain(obj0);
      }
    }
    finally
    {
      if (num1 == 0)
      {
        IntPtr num4 = (IntPtr) 0;
        // ISSUE: cast to a reference type
        Interlocked.Exchange((IntPtr&) ref \u003CModule\u003E.__native_startup_lock, num4);
      }
    }
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeVtables(obj0);
    if (\u003CModule\u003E.\u003FIsDefaultDomain\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2_NA)
    {
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeNative(obj0);
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializePerProcess(obj0);
    }
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializePerAppDomain(obj0);
    \u003CModule\u003E.\u003FInitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA = 1;
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitializeUninitializer(obj0);
  }

  internal static void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EUninitializeAppDomain() => \u003CModule\u003E._app_exit_callback();

  internal static unsafe int \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E_UninitializeDefaultDomain(
    void* cookie)
  {
    \u003CModule\u003E._exit_callback();
    \u003CModule\u003E.\u003FInitializedPerProcess\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA = false;
    if (\u003CModule\u003E.\u003FInitializedNativeFromCCTOR\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA)
    {
      \u003CModule\u003E._cexit();
      \u003CModule\u003E.__native_startup_state = (__enative_startup_state) 0;
      \u003CModule\u003E.\u003FInitializedNativeFromCCTOR\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA = false;
    }
    \u003CModule\u003E.\u003FInitializedNative\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA = false;
    return 0;
  }

  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EUninitializeDefaultDomain()
  {
    if (!\u003CModule\u003E.\u003FEntered\u0040DefaultDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402_NA)
      return;
    if (AppDomain.CurrentDomain.IsDefaultAppDomain())
    {
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E_UninitializeDefaultDomain((void*) 0);
    }
    else
    {
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EDoCallBackInDefaultDomain((__FnPtr<int (void*)>) (IntPtr) \u003CModule\u003E.__unep\u0040\u003F_UninitializeDefaultDomain\u0040LanguageSupport\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024FCGJPAX\u0040Z, (void*) 0);
    }
  }

  [PrePrepareMethod]
  internal static void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EDomainUnload(
    object source,
    EventArgs arguments)
  {
    if (\u003CModule\u003E.\u003FInitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA == 0 || Interlocked.Exchange(ref \u003CModule\u003E.\u003FUninitialized\u0040CurrentDomain\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q2HA, 1) != 0)
      return;
    int num = Interlocked.Decrement(ref \u003CModule\u003E.\u003FCount\u0040AllDomains\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402HA) == 0 ? 1 : 0;
    \u003CModule\u003E._app_exit_callback();
    if ((byte) num == (byte) 0)
      return;
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EUninitializeDefaultDomain();
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002ECleanup(
    [In] LanguageSupport* obj0,
    Exception innerException)
  {
    try
    {
      bool flag = Interlocked.Decrement(ref \u003CModule\u003E.\u003FCount\u0040AllDomains\u0040\u003CCrtImplementationDetails\u003E\u0040\u00402HA) == 0;
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EUninitializeAppDomain();
      if (!flag)
        return;
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EUninitializeDefaultDomain();
    }
    catch (Exception ex)
    {
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EThrowNestedModuleLoadException(innerException, ex);
    }
    catch
    {
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EThrowNestedModuleLoadException(innerException, (Exception) null);
    }
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitialize(
    [In] LanguageSupport* obj0)
  {
    try
    {
      \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0, "The C++ module failed to load.\n");
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E_Initialize(obj0);
    }
    catch (Exception ex)
    {
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002ECleanup(obj0, ex);
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EThrowModuleLoadException(\u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u002EP\u0024AAVString\u0040System\u0040\u0040((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0), ex);
    }
    catch
    {
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002ECleanup(obj0, (Exception) null);
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EThrowModuleLoadException(\u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u002EP\u0024AAVString\u0040System\u0040\u0040((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0), (Exception) null);
    }
  }

  [DebuggerStepThrough]
  static unsafe \u003CModule\u003E()
  {
    LanguageSupport languageSupport;
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E\u007Bctor\u007D(&languageSupport);
    // ISSUE: fault handler
    try
    {
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002EInitialize(&languageSupport);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(\u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E\u007Bdtor\u007D), (void*) &languageSupport);
    }
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u007Bdtor\u007D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) &languageSupport);
  }

  internal static unsafe LanguageSupport* \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E\u007Bctor\u007D(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u007Bctor\u007D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0);
    return obj0;
  }

  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002ELanguageSupport\u002E\u007Bdtor\u007D(
    [In] LanguageSupport* obj0)
  {
    \u003CModule\u003E.gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u007Bdtor\u007D((gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E*) obj0);
  }

  internal static unsafe gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E* gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u007Bctor\u007D(
    [In] gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E* obj0)
  {
    IntPtr num = (IntPtr) GCHandle.Alloc((object) null);
    *(int*) obj0 = (int) num.ToPointer();
    return obj0;
  }

  internal static unsafe void gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u007Bdtor\u007D(
    [In] gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E* obj0)
  {
    ((GCHandle) new IntPtr((void*) *(int*) obj0)).Free();
    *(int*) obj0 = 0;
  }

  internal static unsafe gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E* gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u003D(
    [In] gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E* obj0,
    string t)
  {
    ((GCHandle) new IntPtr((void*) *(int*) obj0)).Target = (object) t;
    return obj0;
  }

  internal static unsafe string gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E\u002E\u002EP\u0024AAVString\u0040System\u0040\u0040(
    [In] gcroot\u003CSystem\u003A\u003AString\u0020\u005E\u003E* obj0)
  {
    return (string) ((GCHandle) new IntPtr((void*) *(int*) obj0)).Target;
  }

  [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
  internal static unsafe void __ehvec_dtor(
    void* ptr,
    uint size,
    int count,
    __FnPtr<void (void*)> pDtor)
  {
    int num = 0;
    ptr = (void*) ((int) size * count + (IntPtr) ptr);
    try
    {
      while (true)
      {
        --count;
        if (count >= 0)
        {
          ptr -= (int) size;
          void* voidPtr = ptr;
          // ISSUE: function pointer call
          __calli(pDtor)(voidPtr);
        }
        else
          break;
      }
      num = 1;
    }
    finally
    {
      if (num == 0)
        \u003CModule\u003E.__ArrayUnwind(ptr, size, count, pDtor);
    }
  }

  [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
  internal static unsafe int \u003FA0x93618baa\u002EArrayUnwindFilter(_EXCEPTION_POINTERS* pExPtrs)
  {
    if (*(int*) *(int*) pExPtrs != -529697949)
      return 0;
    \u003CModule\u003E.terminate();
    return 0;
  }

  [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
  internal static unsafe void __ArrayUnwind(
    void* ptr,
    uint size,
    int count,
    __FnPtr<void (void*)> pDtor)
  {
    try
    {
      while (true)
      {
        --count;
        if (count >= 0)
        {
          ptr -= (int) size;
          void* voidPtr = ptr;
          // ISSUE: function pointer call
          __calli(pDtor)(voidPtr);
        }
        else
          break;
      }
    }
    catch (Exception ex) when (\u003CModule\u003E.\u003FA0x93618baa\u002EArrayUnwindFilter((_EXCEPTION_POINTERS*) Marshal.GetExceptionPointers()) != 0)
    {
    }
  }

  internal static unsafe void delete\u005B\u005D(void* p) => \u003CModule\u003E.free(p);

  [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
  internal static unsafe void ___CxxCallUnwindDtor(__FnPtr<void (void*)> pDtor, void* pThis)
  {
    try
    {
      void* voidPtr = pThis;
      // ISSUE: function pointer call
      __calli(pDtor)(voidPtr);
    }
    catch (Exception ex) when (\u003CModule\u003E.__FrameUnwindFilter((_EXCEPTION_POINTERS*) Marshal.GetExceptionPointers()) != 0)
    {
    }
  }

  [PrePrepareMethod]
  internal static unsafe _exception_handling_state_pointers_t* _get_exception_handling_state_uplevel(
    _exception_handling_state_pointers_t* p)
  {
    if (*(int*) p == 0)
    {
      _tiddata_managed* tiddataManagedPtr = \u003CModule\u003E._getptd();
      *(int*) p = (int) ((IntPtr) tiddataManagedPtr + 144);
      *(int*) ((IntPtr) p + 4) = (int) ((IntPtr) tiddataManagedPtr + 524);
      *(int*) ((IntPtr) p + 8) = (int) ((IntPtr) tiddataManagedPtr + 136);
      *(int*) ((IntPtr) p + 12) = (int) ((IntPtr) tiddataManagedPtr + 140);
      *(int*) ((IntPtr) p + 16) = (int) ((IntPtr) tiddataManagedPtr + 148);
      *(int*) ((IntPtr) p + 20) = (int) ((IntPtr) tiddataManagedPtr + 152);
    }
    return p;
  }

  [PrePrepareMethod]
  [SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
  internal static unsafe _tiddata_managed* _getptd()
  {
    _tiddata_managed* tiddataManagedPtr = \u003CModule\u003E._getptd_noexit();
    if ((IntPtr) tiddataManagedPtr == IntPtr.Zero)
      \u003CModule\u003E._amsg_exit(16);
    return tiddataManagedPtr;
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002EAtExitLock\u002EInitialize()
  {
    object obj = new object();
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref \u003CModule\u003E.\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A = 0;
    \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002ESet(&\u003CModule\u003E.\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A, obj);
  }

  [DebuggerStepThrough]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool \u003CCrtImplementationDetails\u003E\u002EAtExitLock\u002EIsInitialized() => \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002EGet(&\u003CModule\u003E.\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A) != null;

  internal static void \u003FA0x37a6207f\u002E\u003F\u003F__E\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A\u0040\u0040YMXXZ() => \u003CModule\u003E._atexit_m_appdomain((__FnPtr<void ()>) __methodptr(\u003FA0x37a6207f\u002E\u003F\u003F__F\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A\u0040\u0040YMXXZ));

  internal static unsafe void \u003FA0x37a6207f\u002E\u003F\u003F__F\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A\u0040\u0040YMXXZ() => \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002E\u007Bdtor\u007D(&\u003CModule\u003E.\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A);

  [DebuggerStepThrough]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool \u003FA0x37a6207f\u002E__global_lock()
  {
    bool flag = false;
    if (\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EAtExitLock\u002EIsInitialized())
    {
      Monitor.Enter(\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002EGet(&\u003CModule\u003E.\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A));
      flag = true;
    }
    return flag;
  }

  [DebuggerStepThrough]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool \u003FA0x37a6207f\u002E__global_unlock()
  {
    bool flag = false;
    if (\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EAtExitLock\u002EIsInitialized())
    {
      Monitor.Exit(\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002EGet(&\u003CModule\u003E.\u003F_lock\u0040AtExitLock\u0040\u003CCrtImplementationDetails\u003E\u0040\u0040\u0024\u0024Q0V\u003F\u0024Handle\u0040P\u0024AAVObject\u0040System\u0040\u0040\u00402\u0040A));
      flag = true;
    }
    return flag;
  }

  [DebuggerStepThrough]
  [return: MarshalAs(UnmanagedType.U1)]
  internal static bool \u003FA0x37a6207f\u002E__alloc_global_lock()
  {
    if (!\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EAtExitLock\u002EIsInitialized())
      \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EAtExitLock\u002EInitialize();
    return \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EAtExitLock\u002EIsInitialized();
  }

  internal static unsafe int _atexit_helper(
    __FnPtr<void ()> func,
    uint* __pexit_list_size,
    __FnPtr<void ()>** __ponexitend,
    __FnPtr<void ()>** __ponexitbegin)
  {
    // ISSUE: cast to a function pointer type
    __FnPtr<void ()> local1 = (__FnPtr<void ()>) 0;
    if (func == null)
      return -1;
    int num1;
    if (\u003CModule\u003E.\u003FA0x37a6207f\u002E__global_lock())
    {
      try
      {
        if (*__pexit_list_size - 1U < (uint) (*(int*) __ponexitend - *(int*) __ponexitbegin) >> 2)
        {
          try
          {
            uint num2 = *__pexit_list_size * 4U;
            uint num3 = num2 >= 2048U ? 2048U : num2;
            IntPtr cb = new IntPtr((int) num2 + (int) num3);
            IntPtr num4 = Marshal.ReAllocHGlobal(new IntPtr((void*) *(int*) __ponexitbegin), cb);
            __FnPtr<void ()>** local2 = __ponexitend;
            IntPtr num5 = *(int*) local2 + ((IntPtr) num4.ToPointer() - *(int*) __ponexitbegin);
            *(int*) local2 = (int) num5;
            *(int*) __ponexitbegin = (int) num4.ToPointer();
            uint num6 = *__pexit_list_size;
            uint num7 = 512U >= num6 ? num6 : 512U;
            *__pexit_list_size = num6 + num7;
          }
          catch (OutOfMemoryException ex)
          {
            IntPtr cb = new IntPtr((int) *__pexit_list_size * 4 + 8);
            IntPtr num8 = Marshal.ReAllocHGlobal(new IntPtr((void*) *(int*) __ponexitbegin), cb);
            __FnPtr<void ()>** local3 = __ponexitend;
            IntPtr num9 = *(int*) local3 + ((IntPtr) num8.ToPointer() - *(int*) __ponexitbegin);
            *(int*) local3 = (int) num9;
            *(int*) __ponexitbegin = (int) num8.ToPointer();
            uint* numPtr = __pexit_list_size;
            int num10 = (int) *numPtr + 4;
            *numPtr = (uint) num10;
          }
        }
        *(int*) *(int*) __ponexitend = (int) func;
        __FnPtr<void ()>** local4 = __ponexitend;
        int num11 = *(int*) local4 + 4;
        *(int*) local4 = num11;
        local1 = func;
      }
      catch (OutOfMemoryException ex)
      {
      }
      finally
      {
        \u003CModule\u003E.\u003FA0x37a6207f\u002E__global_unlock();
      }
      if (local1 != null)
      {
        num1 = 0;
        goto label_12;
      }
    }
    num1 = -1;
label_12:
    return num1;
  }

  internal static unsafe void _exit_callback()
  {
    if ((IntPtr) \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin == new IntPtr(-1) || (IntPtr) \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin == IntPtr.Zero || (IntPtr) \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend == IntPtr.Zero)
      return;
    \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend -= 4;
    if (\u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend >= \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin)
    {
      do
      {
        if (*(int*) \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend != 0)
        {
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          __calli((__FnPtr<void ()>) *(int*) \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend)();
        }
        \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend -= 4;
      }
      while (\u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend >= \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin);
    }
    Marshal.FreeHGlobal(new IntPtr((void*) \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin));
  }

  [DebuggerStepThrough]
  internal static unsafe int _initatexit_m()
  {
    if (!\u003CModule\u003E.\u003FA0x37a6207f\u002E__alloc_global_lock())
      return 0;
    \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin = (__FnPtr<void ()>*) Marshal.AllocHGlobal(128).ToPointer();
    \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend = \u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin;
    \u003CModule\u003E.\u003FA0x37a6207f\u002E__exit_list_size = 32U;
    return 1;
  }

  internal static unsafe int _atexit_m(__FnPtr<void ()> func) => \u003CModule\u003E._atexit_helper(func, &\u003CModule\u003E.\u003FA0x37a6207f\u002E__exit_list_size, &\u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitend, &\u003CModule\u003E.\u003FA0x37a6207f\u002E__onexitbegin);

  [DebuggerStepThrough]
  internal static unsafe int _initatexit_app_domain()
  {
    if (\u003CModule\u003E.\u003FA0x37a6207f\u002E__alloc_global_lock())
    {
      \u003CModule\u003E.__onexitbegin_app_domain = (__FnPtr<void ()>*) Marshal.AllocHGlobal(128).ToPointer();
      \u003CModule\u003E.__onexitend_app_domain = \u003CModule\u003E.__onexitbegin_app_domain;
      \u003CModule\u003E.__exit_list_size_app_domain = 32U;
    }
    return 1;
  }

  internal static unsafe void _app_exit_callback()
  {
    if ((IntPtr) \u003CModule\u003E.__onexitbegin_app_domain == new IntPtr(-1) || (IntPtr) \u003CModule\u003E.__onexitbegin_app_domain == IntPtr.Zero)
      return;
    if ((IntPtr) \u003CModule\u003E.__onexitend_app_domain == IntPtr.Zero)
      return;
    try
    {
      while (true)
      {
        do
        {
          \u003CModule\u003E.__onexitend_app_domain -= 4;
          if (\u003CModule\u003E.__onexitend_app_domain < \u003CModule\u003E.__onexitbegin_app_domain)
            goto label_8;
        }
        while (*(int*) \u003CModule\u003E.__onexitend_app_domain == 0);
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        __calli((__FnPtr<void ()>) *(int*) \u003CModule\u003E.__onexitend_app_domain)();
      }
label_8:;
    }
    finally
    {
      Marshal.FreeHGlobal(new IntPtr((void*) \u003CModule\u003E.__onexitbegin_app_domain));
    }
  }

  [DebuggerStepThrough]
  internal static unsafe int _atexit_m_appdomain(__FnPtr<void ()> func) => \u003CModule\u003E._atexit_helper(func, &\u003CModule\u003E.__exit_list_size_app_domain, &\u003CModule\u003E.__onexitend_app_domain, &\u003CModule\u003E.__onexitbegin_app_domain);

  [DebuggerStepThrough]
  internal static unsafe object \u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002EGet(
    [In] Handle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E* obj0)
  {
    ValueType valueType = \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002E_handle(obj0);
    return valueType != null ? ((GCHandle) valueType).Target : (object) null;
  }

  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002E\u007Bdtor\u007D(
    [In] Handle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E* obj0)
  {
    ValueType valueType = \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002E_handle(obj0);
    if (valueType == null)
      return;
    ((GCHandle) valueType).Free();
    *(int*) obj0 = 0;
  }

  [DebuggerStepThrough]
  internal static unsafe ValueType \u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002E_handle(
    [In] Handle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E* obj0)
  {
    uint num = (uint) *(int*) obj0;
    return num != 0U ? (ValueType) GCHandle.FromIntPtr(new IntPtr((void*) num)) : (ValueType) null;
  }

  [DebuggerStepThrough]
  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002ESet(
    [In] Handle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E* obj0,
    object value)
  {
    ValueType valueType = \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EHandle\u003CSystem\u003A\u003AObject\u0020\u005E\u003E\u002E_handle(obj0);
    if (valueType == null)
    {
      IntPtr intPtr = GCHandle.ToIntPtr(GCHandle.Alloc(value));
      *(int*) obj0 = (int) intPtr.ToPointer();
    }
    else
      ((GCHandle) valueType).Target = value;
  }

  internal static unsafe int memcpy_s(void* dst, uint sizeInBytes, void* src, uint count)
  {
    if (count == 0U)
      return 0;
    if ((IntPtr) dst == IntPtr.Zero)
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return 22;
    }
    if ((IntPtr) src != IntPtr.Zero && sizeInBytes >= count)
    {
      // ISSUE: cpblk instruction
      __memcpy((IntPtr) dst, (IntPtr) src, (int) count);
      return 0;
    }
    // ISSUE: initblk instruction
    __memset((IntPtr) dst, 0, (int) sizeInBytes);
    if ((IntPtr) src == IntPtr.Zero)
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return 22;
    }
    if (sizeInBytes >= count)
      return 22;
    *\u003CModule\u003E._errno() = 34;
    \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
    return 34;
  }

  internal static unsafe int memmove_s(void* dst, uint sizeInBytes, void* src, uint count)
  {
    if (count == 0U)
      return 0;
    if ((IntPtr) dst == IntPtr.Zero)
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return 22;
    }
    if ((IntPtr) src == IntPtr.Zero)
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return 22;
    }
    if (sizeInBytes < count)
    {
      *\u003CModule\u003E._errno() = 34;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return 34;
    }
    \u003CModule\u003E.memmove(dst, src, count);
    return 0;
  }

  internal static void _inconsistency() => \u003CModule\u003E.abort();

  internal static unsafe int __TypeMatch(
    _s_HandlerType* pCatch,
    _s_CatchableType* pCatchable,
    _s_ThrowInfo* pThrow)
  {
    uint num1 = (uint) *(int*) ((IntPtr) pCatch + 4);
    if (num1 == 0U || *(sbyte*) ((int) num1 + 8) == (sbyte) 0)
      return 1;
    uint num2 = (uint) *(int*) ((IntPtr) pCatchable + 4);
    if ((int) num1 != (int) num2)
    {
      int num3 = (int) num2 + 8;
      sbyte num4 = *(sbyte*) ((int) num1 + 8);
      sbyte num5 = *(sbyte*) num3;
      if ((int) num4 >= (int) num5)
      {
        int num6 = (int) num1 + 8 - ((int) num2 + 8);
        while ((int) num4 <= (int) num5)
        {
          if (num4 != (sbyte) 0)
          {
            ++num3;
            num4 = *(sbyte*) (num6 + num3);
            num5 = *(sbyte*) num3;
            if ((int) num4 < (int) num5)
              break;
          }
          else
            goto label_8;
        }
      }
      return 0;
    }
label_8:
    int num7;
    if ((*(int*) pCatchable & 2) == 0 || (*(int*) pCatch & 8) != 0)
    {
      uint num8 = (uint) *(int*) pThrow;
      if ((((int) num8 & 1) == 0 || (*(int*) pCatch & 1) != 0) && (((int) num8 & 2) == 0 || (*(int*) pCatch & 2) != 0))
      {
        num7 = 1;
        goto label_12;
      }
    }
    num7 = 0;
label_12:
    return num7;
  }

  internal static unsafe int __FrameUnwindFilter(_EXCEPTION_POINTERS* pExPtrs)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    switch ((uint) *(int*) *(int*) pExPtrs)
    {
      case 3762507597:
        if (*(int*) *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) > 0)
        {
          int num = *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT);
          *(int*) num = *(int*) num - 1;
        }
        return 0;
      case 3765269347:
        *(int*) *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) = 0;
        \u003CModule\u003E.terminate();
        goto case 3762507597;
      default:
        return 0;
    }
  }

  internal static unsafe int __BuildCatchObjectHelper(
    EHExceptionRecord* pExcept,
    void* pRN,
    _s_HandlerType* pCatch,
    _s_CatchableType* pConv)
  {
    int num1 = 0;
    uint num2 = (uint) *(int*) ((IntPtr) pCatch + 4);
    if (num2 != 0U && *(sbyte*) ((int) num2 + 8) != (sbyte) 0)
    {
      int num3 = *(int*) ((IntPtr) pCatch + 8);
      if (num3 != 0 || (*(int*) pCatch & int.MinValue) != 0)
      {
        uint num4 = (uint) *(int*) pCatch;
        void** data = ((int) num4 & int.MinValue) == 0 ? (void**) ((IntPtr) pRN + num3 + 12) : (void**) pRN;
        try
        {
          if (((int) num4 & 8) != 0)
          {
            if (\u003CModule\u003E._ValidateRead((void*) *(int*) ((IntPtr) pExcept + 24), 1U) != 0 && \u003CModule\u003E._ValidateWrite((void*) data, 1U) != 0)
            {
              int pThis = *(int*) ((IntPtr) pExcept + 24);
              *(int*) data = pThis;
              *(int*) data = (int) \u003CModule\u003E.__AdjustPointer((void*) pThis, (PMD*) ((IntPtr) pConv + 8));
            }
            else
              \u003CModule\u003E._inconsistency();
          }
          else if ((*(int*) pConv & 1) != 0)
          {
            if (\u003CModule\u003E._ValidateRead((void*) *(int*) ((IntPtr) pExcept + 24), 1U) != 0 && \u003CModule\u003E._ValidateWrite((void*) data, 1U) != 0)
            {
              \u003CModule\u003E.memmove((void*) data, (void*) *(int*) ((IntPtr) pExcept + 24), (uint) *(int*) ((IntPtr) pConv + 20));
              if (*(int*) ((IntPtr) pConv + 20) == 4)
              {
                int pThis = *(int*) data;
                if (pThis != 0)
                  *(int*) data = (int) \u003CModule\u003E.__AdjustPointer((void*) pThis, (PMD*) ((IntPtr) pConv + 8));
              }
            }
            else
              \u003CModule\u003E._inconsistency();
          }
          else if (*(int*) ((IntPtr) pConv + 24) == 0)
          {
            if (\u003CModule\u003E._ValidateRead((void*) *(int*) ((IntPtr) pExcept + 24), 1U) != 0 && \u003CModule\u003E._ValidateWrite((void*) data, 1U) != 0)
              \u003CModule\u003E.memmove((void*) data, \u003CModule\u003E.__AdjustPointer((void*) *(int*) ((IntPtr) pExcept + 24), (PMD*) ((IntPtr) pConv + 8)), (uint) *(int*) ((IntPtr) pConv + 20));
            else
              \u003CModule\u003E._inconsistency();
          }
          else
          {
            // ISSUE: cast to a function pointer type
            if (\u003CModule\u003E._ValidateRead((void*) *(int*) ((IntPtr) pExcept + 24), 1U) != 0 && \u003CModule\u003E._ValidateWrite((void*) data, 1U) != 0 && \u003CModule\u003E._ValidateExecute((__FnPtr<int ()>) *(int*) ((IntPtr) pConv + 24)) != 0)
              num1 = (*(int*) pConv & 4) != 0 ? 2 : 1;
            else
              \u003CModule\u003E._inconsistency();
          }
        }
        catch (Exception ex) when (true)
        {
          \u003CModule\u003E.terminate();
        }
        return num1;
      }
    }
    return 0;
  }

  internal static unsafe void __BuildCatchObject(
    EHExceptionRecord* pExcept,
    void* pRN,
    _s_HandlerType* pCatch,
    _s_CatchableType* pConv)
  {
    void** pthis = (*(int*) pCatch & int.MinValue) == 0 ? (void**) ((IntPtr) pRN + *(int*) ((IntPtr) pCatch + 8) + 12) : (void**) pRN;
    try
    {
      switch (\u003CModule\u003E.__BuildCatchObjectHelper(pExcept, pRN, pCatch, pConv))
      {
        case 1:
          \u003CModule\u003E._CallMemberFunction1((void*) pthis, (void*) *(int*) ((IntPtr) pConv + 24), \u003CModule\u003E.__AdjustPointer((void*) *(int*) ((IntPtr) pExcept + 24), (PMD*) ((IntPtr) pConv + 8)));
          break;
        case 2:
          \u003CModule\u003E._CallMemberFunction2((void*) pthis, (void*) *(int*) ((IntPtr) pConv + 24), \u003CModule\u003E.__AdjustPointer((void*) *(int*) ((IntPtr) pExcept + 24), (PMD*) ((IntPtr) pConv + 8)), 1);
          break;
      }
    }
    catch (Exception ex) when (true)
    {
      \u003CModule\u003E.terminate();
    }
  }

  internal static void __DestructExceptionObject(EHExceptionRecord* pExcept, byte fThrowNotAllowed)
  {
    // ISSUE: unable to decompile the method.
  }

  internal static unsafe void* __AdjustPointer(void* pThis, PMD* pmd)
  {
    sbyte* numPtr = (sbyte*) (*(int*) pmd + (IntPtr) pThis);
    if (*(int*) ((IntPtr) pmd + 4) >= 0)
    {
      int num = *(int*) ((IntPtr) pmd + 4);
      numPtr = (sbyte*) (*(int*) (*(int*) (num + (IntPtr) pThis) + *(int*) ((IntPtr) pmd + 8)) + num + (IntPtr) numPtr);
    }
    return (void*) numPtr;
  }

  internal static unsafe int __CxxExceptionFilter(
    void* ppExcept,
    void* pType,
    int adjectives,
    void* pBuildObj)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    if ((IntPtr) ppExcept == IntPtr.Zero)
      return 0;
    EHExceptionRecord* pExcept = (EHExceptionRecord*) *(int*) ppExcept;
    if ((IntPtr) pType == IntPtr.Zero || *(sbyte*) ((IntPtr) pType + 8) == (sbyte) 0)
    {
      uint num1 = (uint) *(int*) pExcept;
      if (num1 == 3762507597U || (adjectives & 64) == 0)
      {
        if (num1 == 3765269347U && *(int*) ((IntPtr) pExcept + 16) == 3)
        {
          switch ((uint) *(int*) ((IntPtr) pExcept + 20))
          {
            case 429065504:
            case 429065505:
            case 429065506:
              if (*(int*) ((IntPtr) pExcept + 28) == 0 && *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) == 0)
                return 0;
              break;
          }
        }
        int num2 = *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT);
        *(int*) num2 = *(int*) num2 + 1;
        return 1;
      }
    }
    if (*(int*) pExcept == -529697949 && *(int*) ((IntPtr) pExcept + 16) == 3)
    {
      switch ((uint) *(int*) ((IntPtr) pExcept + 20))
      {
        case 429065504:
        case 429065505:
        case 429065506:
          if (*(int*) ((IntPtr) pExcept + 28) == 0)
          {
            if (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) == 0)
              return 0;
            pExcept = (EHExceptionRecord*) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8);
          }
          _s_HandlerType sHandlerType;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &sHandlerType + 4) = (int) pType;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ref sHandlerType = adjectives | int.MinValue;
          int num3 = *(int*) (*(int*) ((IntPtr) pExcept + 28) + 12);
          _s_CatchableType** sCatchableTypePtr1 = (_s_CatchableType**) (num3 + 4);
          int num4 = *(int*) num3;
          if (num4 > 0)
          {
            int pThrow = *(int*) ((IntPtr) pExcept + 28);
            _s_CatchableType* sCatchableTypePtr2;
            do
            {
              sCatchableTypePtr2 = (_s_CatchableType*) *(int*) sCatchableTypePtr1;
              if (\u003CModule\u003E.__TypeMatch(&sHandlerType, sCatchableTypePtr2, (_s_ThrowInfo*) pThrow) == 0)
              {
                --num4;
                sCatchableTypePtr1 += 4;
              }
              else
                goto label_14;
            }
            while (num4 > 0);
            break;
label_14:
            int num5 = *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT);
            *(int*) num5 = *(int*) num5 + 1;
            if ((IntPtr) pBuildObj != IntPtr.Zero)
              \u003CModule\u003E.__BuildCatchObject(pExcept, pBuildObj, &sHandlerType, sCatchableTypePtr2);
            return 1;
          }
          break;
      }
    }
    return 0;
  }

  internal static unsafe int __CxxRegisterExceptionObject(void* ppExcept, void* pStorage)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    if ((IntPtr) ppExcept != IntPtr.Zero)
    {
      uint num = (uint) *(int*) ppExcept;
      if (num != 0U)
      {
        EHExceptionRecord* ehExceptionRecordPtr = (EHExceptionRecord*) num;
        if (*(int*) ehExceptionRecordPtr == -529697949 && *(int*) ((IntPtr) ehExceptionRecordPtr + 16) == 3)
        {
          switch ((uint) *(int*) ((IntPtr) ehExceptionRecordPtr + 20))
          {
            case 429065504:
            case 429065505:
            case 429065506:
              if (*(int*) ((IntPtr) ehExceptionRecordPtr + 28) == 0)
              {
                ehExceptionRecordPtr = (EHExceptionRecord*) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8);
                break;
              }
              break;
          }
        }
        \u003CModule\u003E._CreateFrameInfo((FrameInfo*) pStorage, (void*) *(int*) ((IntPtr) ehExceptionRecordPtr + 24));
        *(int*) ((IntPtr) pStorage + 8) = *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8);
        *(int*) ((IntPtr) pStorage + 8 + 4) = *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 12);
        *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) = (int) ehExceptionRecordPtr;
        goto label_8;
      }
    }
    *(int*) ((IntPtr) pStorage + 8) = -1;
    *(int*) ((IntPtr) pStorage + 8 + 4) = -1;
label_8:
    int num1 = *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT);
    *(int*) num1 = *(int*) num1 - 1;
    if (*(int*) *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) < 0)
      *(int*) *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) = 0;
    return 1;
  }

  internal static unsafe int __CxxDetectRethrow(void* ppExcept)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    if ((IntPtr) ppExcept == IntPtr.Zero)
      return 0;
    EHExceptionRecord* ehExceptionRecordPtr = (EHExceptionRecord*) *(int*) ppExcept;
    if (*(int*) ehExceptionRecordPtr == -529697949 && *(int*) ((IntPtr) ehExceptionRecordPtr + 16) == 3)
    {
      switch ((uint) *(int*) ((IntPtr) ehExceptionRecordPtr + 20))
      {
        case 429065504:
        case 429065505:
        case 429065506:
          if (*(int*) ((IntPtr) ehExceptionRecordPtr + 28) == 0)
          {
            int num = *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT);
            *(int*) num = *(int*) num + 1;
            return 1;
          }
          break;
      }
    }
    return 0;
  }

  internal static unsafe void __CxxUnregisterExceptionObject(void* pStorage, int rethrow)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    EHExceptionRecord** ehExceptionRecordPtr = (EHExceptionRecord**) ((IntPtr) pStorage + 8);
    _CONTEXT** contextPtr = (_CONTEXT**) ((IntPtr) ehExceptionRecordPtr + 4);
    if (*(int*) ehExceptionRecordPtr == -1)
      return;
    \u003CModule\u003E._FindAndUnlinkFrame((FrameInfo*) pStorage);
    if (rethrow == 0 && *(int*) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) == -529697949 && *(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 16) == 3 && (*(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 20) == 429065504 || *(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 20) == 429065505 || *(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 20) == 429065506) && \u003CModule\u003E._IsExceptionObjectToBeDestroyed((void*) *(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 24)) != 0)
      \u003CModule\u003E.__DestructExceptionObject((EHExceptionRecord*) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8), (byte) 1);
    if (*(int*) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) == -529697949 && *(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 16) == 3 && (*(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 20) == 429065504 || *(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 20) == 429065505 || *(int*) (*(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) + 20) == 429065506) && rethrow != 0)
    {
      int num = *(int*) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT);
      *(int*) num = *(int*) num - 1;
    }
    *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 8) = *(int*) ehExceptionRecordPtr;
    *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 12) = *(int*) contextPtr;
  }

  internal static int __CxxQueryExceptionSize() => 16;

  internal static unsafe out_of_range* std\u002Eout_of_range\u002E\u007Bctor\u007D(
    [In] out_of_range* obj0,
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E* _Message,
    _STL70* __unnamed001)
  {
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bctor\u007D((logic_error*) obj0, _Message);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7out_of_range\u0040std\u0040\u00406B\u0040;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elogic_error\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void std\u002Eout_of_range\u002E\u007Bdtor\u007D([In] out_of_range* obj0)
  {
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7out_of_range\u0040std\u0040\u00406B\u0040;
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bdtor\u007D((logic_error*) obj0);
  }

  internal static unsafe void* std\u002Eout_of_range\u002E__vecDelDtor(
    [In] out_of_range* obj0,
    uint _param1)
  {
    if (((int) _param1 & 2) != 0)
    {
      out_of_range* p = (out_of_range*) ((IntPtr) obj0 - 4);
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.__ehvec_dtor((void*) obj0, 40U, *(int*) p, (__FnPtr<void (void*)>) __methodptr(std\u002Eout_of_range\u002E\u007Bdtor\u007D));
      if (((int) _param1 & 1) != 0)
        \u003CModule\u003E.delete\u005B\u005D((void*) p);
      return (void*) p;
    }
    *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7out_of_range\u0040std\u0040\u00406B\u0040;
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bdtor\u007D((logic_error*) obj0);
    if (((int) _param1 & 1) != 0)
      \u003CModule\u003E.delete((void*) obj0);
    return (void*) obj0;
  }

  [SpecialName]
  internal static unsafe out_of_range* std\u002Eout_of_range\u002E\u007Bctor\u007D(
    [In] out_of_range* obj0,
    out_of_range* _param1)
  {
    \u003CModule\u003E.std\u002Elogic_error\u002E\u007Bctor\u007D((logic_error*) obj0, (logic_error*) _param1);
    // ISSUE: fault handler
    try
    {
      *(int*) obj0 = (int) &\u003CModule\u003E.\u003F\u003F_7out_of_range\u0040std\u0040\u00406B\u0040;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Elogic_error\u002E\u007Bdtor\u007D), (void*) obj0);
    }
    return obj0;
  }

  internal static unsafe void std\u002E_String_base\u002E_Xlen()
  {
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E allocatorCharStL70;
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(&allocatorCharStL70, (sbyte*) &\u003CModule\u003E.\u003F\u003F_C\u0040_0BA\u0040JFNIOLAK\u0040string\u003F5too\u003F5long\u003F\u0024AA\u0040);
    // ISSUE: fault handler
    try
    {
      length_error lengthError;
      \u003CModule\u003E.std\u002Elength_error\u002E\u007Bctor\u007D(&lengthError, &allocatorCharStL70);
      \u003CModule\u003E._CxxThrowException((void*) &lengthError, &\u003CModule\u003E._TI3\u003FAVlength_error\u0040std\u0040\u0040);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bdtor\u007D), (void*) &allocatorCharStL70);
    }
  }

  internal static unsafe void std\u002E_String_base\u002E_Xran()
  {
    basic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E allocatorCharStL70;
    \u003CModule\u003E.std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(&allocatorCharStL70, (sbyte*) &\u003CModule\u003E.\u003F\u003F_C\u0040_0BI\u0040CFPLBAOH\u0040invalid\u003F5string\u003F5position\u003F\u0024AA\u0040);
    // ISSUE: fault handler
    try
    {
      out_of_range outOfRange;
      \u003CModule\u003E.std\u002Eout_of_range\u002E\u007Bctor\u007D(&outOfRange, &allocatorCharStL70, (_STL70*) 0);
      \u003CModule\u003E._CxxThrowException((void*) &outOfRange, &\u003CModule\u003E._TI3\u003FAVout_of_range\u0040std\u0040\u0040);
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002Ebasic_string\u003Cchar\u002Cstd\u003A\u003Achar_traits\u003Cchar\u003E\u002Cstd\u003A\u003Aallocator\u003Cchar\u003E\u002C_STL70\u003E\u002E\u007Bdtor\u007D), (void*) &allocatorCharStL70);
    }
  }

  internal static void \u003CCrtImplementationDetails\u003E\u002EThrowNestedModuleLoadException(
    Exception innerException,
    Exception nestedException)
  {
    throw new ModuleLoadExceptionHandlerException("A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n", innerException, nestedException);
  }

  internal static void \u003CCrtImplementationDetails\u003E\u002EThrowModuleLoadException(
    string errorMessage)
  {
    throw new ModuleLoadException(errorMessage);
  }

  internal static void \u003CCrtImplementationDetails\u003E\u002EThrowModuleLoadException(
    string errorMessage,
    Exception innerException)
  {
    throw new ModuleLoadException(errorMessage, innerException);
  }

  internal static void \u003CCrtImplementationDetails\u003E\u002ERegisterModuleUninitializer(
    EventHandler handler)
  {
    ModuleUninitializer._ModuleUninitializer.AddHandler(handler);
  }

  internal static unsafe int __get_default_appdomain(IUnknown** ppUnk)
  {
    int defaultAppdomain = 0;
    IUnknown* iunknownPtr1 = (IUnknown*) 0;
    ICorRuntimeHost* icorRuntimeHostPtr1 = (ICorRuntimeHost*) 0;
    try
    {
      defaultAppdomain = \u003CModule\u003E.CoCreateInstance((_GUID*) &\u003CModule\u003E._GUID_cb2f6723_ab3a_11d2_9c40_00c04fa30a3e, (IUnknown*) 0, 1U, (_GUID*) &\u003CModule\u003E._GUID_00000000_0000_0000_c000_000000000046, (void**) &iunknownPtr1);
      if (defaultAppdomain >= 0)
      {
        IUnknown* iunknownPtr2 = iunknownPtr1;
        ref __s_GUID local1 = ref \u003CModule\u003E._GUID_cb2f6722_ab3a_11d2_9c40_00c04fa30a3e;
        ref ICorRuntimeHost* local2 = ref icorRuntimeHostPtr1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        defaultAppdomain = __calli((__FnPtr<int (IntPtr, _GUID*, void**)>) *(int*) *(int*) iunknownPtr1)((void**) iunknownPtr2, (_GUID*) ref local1, (IntPtr) ref local2);
        if (defaultAppdomain >= 0)
        {
          ICorRuntimeHost* icorRuntimeHostPtr2 = icorRuntimeHostPtr1;
          IUnknown** iunknownPtr3 = ppUnk;
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          defaultAppdomain = __calli((__FnPtr<int (IntPtr, IUnknown**)>) *(int*) (*(int*) icorRuntimeHostPtr1 + 52))((IUnknown**) icorRuntimeHostPtr2, (IntPtr) iunknownPtr3);
        }
      }
    }
    finally
    {
      if ((IntPtr) iunknownPtr1 != IntPtr.Zero)
      {
        IUnknown* iunknownPtr4 = iunknownPtr1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iunknownPtr4 + 8))((IntPtr) iunknownPtr4);
      }
      if ((IntPtr) icorRuntimeHostPtr1 != IntPtr.Zero)
      {
        ICorRuntimeHost* icorRuntimeHostPtr3 = icorRuntimeHostPtr1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) icorRuntimeHostPtr3 + 8))((IntPtr) icorRuntimeHostPtr3);
      }
    }
    return defaultAppdomain;
  }

  internal static unsafe void __release_appdomain(IUnknown* ppUnk)
  {
    IUnknown* iunknownPtr = ppUnk;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iunknownPtr + 8))((IntPtr) iunknownPtr);
  }

  internal static unsafe AppDomain \u003CCrtImplementationDetails\u003E\u002EGetDefaultDomain()
  {
    IUnknown* ppUnk = (IUnknown*) 0;
    int defaultAppdomain = \u003CModule\u003E.__get_default_appdomain(&ppUnk);
    if (defaultAppdomain >= 0)
    {
      try
      {
        return (AppDomain) Marshal.GetObjectForIUnknown(new IntPtr((void*) ppUnk));
      }
      finally
      {
        \u003CModule\u003E.__release_appdomain(ppUnk);
      }
    }
    else
    {
      Marshal.ThrowExceptionForHR(defaultAppdomain);
      return (AppDomain) null;
    }
  }

  internal static unsafe void \u003CCrtImplementationDetails\u003E\u002EDoCallBackInDefaultDomain(
    __FnPtr<int (void*)> function,
    void* cookie)
  {
    ICLRRuntimeHost* iclrRuntimeHostPtr1 = (ICLRRuntimeHost*) 0;
    try
    {
      int runtimeEx = \u003CModule\u003E.CorBindToRuntimeEx((char*) 0, (char*) 0, 0U, (_GUID*) &\u003CModule\u003E._GUID_90f1a06e_7712_4762_86b5_7a5eba6bdb02, (_GUID*) &\u003CModule\u003E._GUID_90f1a06c_7712_4762_86b5_7a5eba6bdb02, (void**) &iclrRuntimeHostPtr1);
      if (runtimeEx < 0)
        Marshal.ThrowExceptionForHR(runtimeEx);
      AppDomain defaultDomain = \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EGetDefaultDomain();
      // ISSUE: cast to a function pointer type
      // ISSUE: cast to a function pointer type
      // ISSUE: function pointer call
      int errorCode = __calli((__FnPtr<int (IntPtr, uint, __FnPtr<int (void*)>, void*)>) *(int*) (*(int*) iclrRuntimeHostPtr1 + 32))((void*) iclrRuntimeHostPtr1, (__FnPtr<int (void*)>) defaultDomain.Id, (uint) function, (IntPtr) cookie);
      if (errorCode >= 0)
        return;
      Marshal.ThrowExceptionForHR(errorCode);
    }
    finally
    {
      if ((IntPtr) iclrRuntimeHostPtr1 != IntPtr.Zero)
      {
        ICLRRuntimeHost* iclrRuntimeHostPtr2 = iclrRuntimeHostPtr1;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        int num = (int) __calli((__FnPtr<uint (IntPtr)>) *(int*) (*(int*) iclrRuntimeHostPtr2 + 8))((IntPtr) iclrRuntimeHostPtr2);
      }
    }
  }

  [DebuggerStepThrough]
  internal static unsafe int _initterm_e(__FnPtr<int ()>* pfbegin, __FnPtr<int ()>* pfend)
  {
    int num1 = 0;
    if (pfbegin < pfend)
    {
      while (num1 == 0)
      {
        uint num2 = (uint) *(int*) pfbegin;
        if (num2 != 0U)
        {
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          num1 = __calli((__FnPtr<int ()>) (int) num2)();
        }
        pfbegin += 4;
        if (pfbegin >= pfend)
          break;
      }
    }
    return num1;
  }

  [DebuggerStepThrough]
  internal static unsafe void _initterm(__FnPtr<void ()>* pfbegin, __FnPtr<void ()>* pfend)
  {
    if (pfbegin >= pfend)
      return;
    do
    {
      uint num = (uint) *(int*) pfbegin;
      if (num != 0U)
      {
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        __calli((__FnPtr<void ()>) (int) num)();
      }
      pfbegin += 4;
    }
    while (pfbegin < pfend);
  }

  [DebuggerStepThrough]
  internal static ModuleHandle \u003CCrtImplementationDetails\u003E\u002EThisModule\u002EHandle() => typeof (ThisModule).Module.ModuleHandle;

  [DebuggerStepThrough]
  internal static unsafe void _initterm_m(__FnPtr<void* ()>* pfbegin, __FnPtr<void* ()>* pfend)
  {
    if (pfbegin >= pfend)
      return;
    do
    {
      uint methodToken = (uint) *(int*) pfbegin;
      if (methodToken != 0U)
      {
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        void* voidPtr = __calli(\u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EThisModule\u002EResolveMethod\u003Cvoid\u0020const\u0020\u002A\u0020__clrcall\u0028void\u0029\u003E((__FnPtr<void* ()>) (int) methodToken))();
      }
      pfbegin += 4;
    }
    while (pfbegin < pfend);
  }

  [DebuggerStepThrough]
  internal static unsafe __FnPtr<void* ()> \u003CCrtImplementationDetails\u003E\u002EThisModule\u002EResolveMethod\u003Cvoid\u0020const\u0020\u002A\u0020__clrcall\u0028void\u0029\u003E(
    __FnPtr<void* ()> methodToken)
  {
    // ISSUE: cast to a function pointer type
    return (__FnPtr<void* ()>) (IntPtr) \u003CModule\u003E.\u003CCrtImplementationDetails\u003E\u002EThisModule\u002EHandle().ResolveMethodHandle((int) methodToken).GetFunctionPointer().ToPointer();
  }

  [PrePrepareMethod]
  [SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
  internal static unsafe int \u003FA0x8f7aea2c\u002EGetDllBaseAndSizeFromAddress(
    void* Address,
    void** OutBase,
    uint* OutSize)
  {
    _MEMORY_BASIC_INFORMATION basicInformation;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref basicInformation = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_MEMORY_BASIC_INFORMATION&) ((IntPtr) &basicInformation + 4), 0, 24);
    int andSizeFromAddress = 0;
    if ((IntPtr) OutBase != IntPtr.Zero)
      *(int*) OutBase = 0;
    if ((IntPtr) OutSize != IntPtr.Zero)
      *OutSize = 0U;
    if ((IntPtr) Address != IntPtr.Zero && (IntPtr) OutBase != IntPtr.Zero && (IntPtr) OutSize != IntPtr.Zero && \u003CModule\u003E.VirtualQuery(Address, &basicInformation, 28U) == 28U)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      void* voidPtr = (void*) ^(int&) ((IntPtr) &basicInformation + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      do
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        Address = (void*) (^(int&) ((IntPtr) &basicInformation + 12) + ^(int&) ref basicInformation);
        if (\u003CModule\u003E.VirtualQuery(Address, &basicInformation, 28U) != 28U)
          goto label_9;
      }
      while ((IntPtr) voidPtr == (IntPtr) ^(int&) ((IntPtr) &basicInformation + 4));
      *(int*) OutBase = (int) voidPtr;
      *OutSize = (uint) (int) ((IntPtr) Address - (IntPtr) voidPtr);
      andSizeFromAddress = 1;
    }
label_9:
    return andSizeFromAddress;
  }

  [PrePrepareMethod]
  internal static unsafe int \u003FA0x8f7aea2c\u002EIsPointerInMsvcrtDll(void* p, int* Result)
  {
    int num1 = 0;
    if ((IntPtr) Result != IntPtr.Zero)
      *Result = 0;
    if ((IntPtr) p != IntPtr.Zero && (IntPtr) Result != IntPtr.Zero)
    {
      if ((IntPtr) \u003CModule\u003E.\u003FA0x8f7aea2c\u002E\u003FBegin\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA == IntPtr.Zero || (IntPtr) \u003CModule\u003E.\u003FA0x8f7aea2c\u002E\u003FEnd\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA == IntPtr.Zero)
      {
        uint num2;
        if (\u003CModule\u003E.\u003FA0x8f7aea2c\u002EGetDllBaseAndSizeFromAddress((void*) \u003CModule\u003E.__unep\u0040\u003F_errno\u0040\u0040\u0024\u0024J0YAPAHXZ, &\u003CModule\u003E.\u003FA0x8f7aea2c\u002E\u003FBegin\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA, &num2) != 0)
          \u003CModule\u003E.\u003FA0x8f7aea2c\u002E\u003FEnd\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA = (void*) ((IntPtr) \u003CModule\u003E.\u003FA0x8f7aea2c\u002E\u003FBegin\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA + (int) num2);
        else
          goto label_7;
      }
      int num3 = p < \u003CModule\u003E.\u003FA0x8f7aea2c\u002E\u003FBegin\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA || p >= \u003CModule\u003E.\u003FA0x8f7aea2c\u002E\u003FEnd\u0040\u003F1\u003F\u003FIsPointerInMsvcrtDll\u0040\u003FA0x8f7aea2c\u0040\u0040YAHPAXPAH\u0040Z\u00404PAXA ? 0 : 1;
      *Result = num3;
      num1 = 1;
    }
label_7:
    return num1;
  }

  [PrePrepareMethod]
  [SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
  internal static unsafe _tiddata_managed* _getptd_noexit()
  {
    int lastError = (int) \u003CModule\u003E.GetLastError();
    _tiddata_managed* tiddataManagedPtr = (_tiddata_managed*) 0;
    if ((\u003CModule\u003E.GetVersion() & (uint) byte.MaxValue) >= 6U)
    {
      int* p = \u003CModule\u003E._errno();
      int num = 0;
      if (\u003CModule\u003E.\u003FA0x8f7aea2c\u002EIsPointerInMsvcrtDll((void*) p, &num) != 0 && num == 0)
        tiddataManagedPtr = (_tiddata_managed*) (p - 2);
    }
    \u003CModule\u003E.SetLastError((uint) lastError);
    return tiddataManagedPtr;
  }

  [PrePrepareMethod]
  internal static unsafe _exception_handling_state_pointers_t* _get_exception_handling_state(
    _exception_handling_state_pointers_t* p)
  {
    return \u003CModule\u003E._get_exception_handling_state_uplevel(p);
  }

  internal static unsafe void _CallMemberFunction0(void* pthis, void* pmfn)
  {
    void* voidPtr = pthis;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    __calli((__FnPtr<void (void*)>) (IntPtr) pmfn)(voidPtr);
  }

  internal static unsafe void _CallMemberFunction1(void* pthis, void* pmfn, void* pthat)
  {
    void* voidPtr1 = pthis;
    void* voidPtr2 = pthat;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    __calli((__FnPtr<void (void*, void*)>) (IntPtr) pmfn)(voidPtr1, voidPtr2);
  }

  internal static unsafe void _CallMemberFunction2(void* pthis, void* pmfn, void* pthat, int val2)
  {
    void* voidPtr1 = pthis;
    void* voidPtr2 = pthat;
    int num = val2;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    __calli((__FnPtr<void (void*, void*, int)>) (IntPtr) pmfn)((int) voidPtr1, voidPtr2, (void*) num);
  }

  internal static unsafe FrameInfo* _CreateFrameInfo(
    FrameInfo* pFrameInfo,
    void* pExceptionObject)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    *(int*) pFrameInfo = (int) pExceptionObject;
    *(int*) ((IntPtr) pFrameInfo + 4) = *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 20);
    *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 20) = (int) pFrameInfo;
    return pFrameInfo;
  }

  internal static unsafe int _IsExceptionObjectToBeDestroyed(void* pExceptionObject)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    int beDestroyed;
    for (FrameInfo* frameInfoPtr = (FrameInfo*) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 20); (IntPtr) frameInfoPtr != IntPtr.Zero; frameInfoPtr = (FrameInfo*) *(int*) ((IntPtr) frameInfoPtr + 4))
    {
      if ((IntPtr) *(int*) frameInfoPtr == (IntPtr) pExceptionObject)
      {
        beDestroyed = 0;
        goto label_6;
      }
    }
    beDestroyed = 1;
label_6:
    return beDestroyed;
  }

  internal static unsafe void _FindAndUnlinkFrame(FrameInfo* pFrameInfo)
  {
    _exception_handling_state_pointers_t handlingStatePointersT;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref handlingStatePointersT = 0;
    // ISSUE: cast to a reference type
    // ISSUE: initblk instruction
    __memset((_exception_handling_state_pointers_t&) ((IntPtr) &handlingStatePointersT + 4), 0, 20);
    if ((IntPtr) pFrameInfo == (IntPtr) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 20))
    {
      *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 20) = *(int*) ((IntPtr) pFrameInfo + 4);
    }
    else
    {
      for (FrameInfo* frameInfoPtr = (FrameInfo*) *(int*) *(int*) ((IntPtr) \u003CModule\u003E._get_exception_handling_state(&handlingStatePointersT) + 20); *(int*) ((IntPtr) frameInfoPtr + 4) != 0; frameInfoPtr = (FrameInfo*) *(int*) ((IntPtr) frameInfoPtr + 4))
      {
        if ((IntPtr) pFrameInfo == (IntPtr) *(int*) ((IntPtr) frameInfoPtr + 4))
        {
          *(int*) ((IntPtr) frameInfoPtr + 4) = *(int*) ((IntPtr) pFrameInfo + 4);
          return;
        }
      }
      if (false)
        return;
      \u003CModule\u003E._inconsistency();
    }
  }

  internal static unsafe int _ValidateRead(void* data, uint size) => (IntPtr) data != IntPtr.Zero ? 1 : 0;

  internal static unsafe int _ValidateWrite(void* data, uint size) => (IntPtr) data != IntPtr.Zero ? 1 : 0;

  internal static int _ValidateExecute(__FnPtr<int ()> code) => code != null ? 1 : 0;

  internal static unsafe _Init_locks* std\u002E_Init_locks\u002E\u007Bctor\u007D(
    [In] _Init_locks* obj0)
  {
    if (\u003CModule\u003E.InterlockedIncrement(&\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Einit) == 0)
    {
      _RTL_CRITICAL_SECTION* _Mtx = (_RTL_CRITICAL_SECTION*) &\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Emtx;
      // ISSUE: cast to a reference type
      do
      {
        \u003CModule\u003E._Mtxinit(_Mtx);
        _Mtx += 24;
      }
      while ((IntPtr) _Mtx < (\u0024ArrayType\u0024\u0024\u0024BY03U_RTL_CRITICAL_SECTION\u0040\u0040&) ((IntPtr) &\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Emtx + 96));
    }
    return obj0;
  }

  internal static unsafe void std\u002E_Init_locks\u002E\u007Bdtor\u007D([In] _Init_locks* obj0)
  {
    if (\u003CModule\u003E.InterlockedDecrement(&\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Einit) >= 0)
      return;
    _RTL_CRITICAL_SECTION* _Mtx = (_RTL_CRITICAL_SECTION*) &\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Emtx;
    // ISSUE: cast to a reference type
    do
    {
      \u003CModule\u003E._Mtxdst(_Mtx);
      _Mtx += 24;
    }
    while ((IntPtr) _Mtx < (\u0024ArrayType\u0024\u0024\u0024BY03U_RTL_CRITICAL_SECTION\u0040\u0040&) ((IntPtr) &\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Emtx + 96));
  }

  internal static unsafe void \u003FA0xbb98010b\u002E\u003F\u003F__E\u003FA0xbb98010b\u0040initlocks\u0040std\u0040\u0040YMXXZ()
  {
    \u003CModule\u003E.std\u002E_Init_locks\u002E\u007Bctor\u007D(&\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Einitlocks);
    // ISSUE: method pointer
    // ISSUE: cast to a function pointer type
    \u003CModule\u003E._atexit_m((__FnPtr<void ()>) __methodptr(\u003FA0xbb98010b\u002E\u003F\u003F__F\u003FA0xbb98010b\u0040initlocks\u0040std\u0040\u0040YMXXZ));
  }

  internal static unsafe void \u003FA0xbb98010b\u002E\u003F\u003F__F\u003FA0xbb98010b\u0040initlocks\u0040std\u0040\u0040YMXXZ() => \u003CModule\u003E.std\u002E_Init_locks\u002E\u007Bdtor\u007D(&\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Einitlocks);

  internal static unsafe _Lockit* std\u002E_Lockit\u002E\u007Bctor\u007D(
    [In] _Lockit* obj0,
    int _param1)
  {
    int num = _param1 & 3;
    *(int*) obj0 = num;
    \u003CModule\u003E._Mtxlock((_RTL_CRITICAL_SECTION*) (num * 24 + (IntPtr) &\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Emtx));
    return obj0;
  }

  internal static unsafe void std\u002E_Lockit\u002E\u007Bdtor\u007D([In] _Lockit* obj0) => \u003CModule\u003E._Mtxunlock((_RTL_CRITICAL_SECTION*) (*(int*) obj0 * 24 + (IntPtr) &\u003CModule\u003E.std\u002E\u003FA0xbb98010b\u002Emtx));

  internal static unsafe locale.facet* std\u002Elocale\u002Efacet\u002E_Decref(
    [In] locale.facet* obj0)
  {
    _Lockit lockit;
    \u003CModule\u003E.std\u002E_Lockit\u002E\u007Bctor\u007D(&lockit, 0);
    locale.facet* facetPtr;
    // ISSUE: fault handler
    try
    {
      uint num = (uint) *(int*) ((IntPtr) obj0 + 4);
      if (0U < num && num < uint.MaxValue)
        *(int*) ((IntPtr) obj0 + 4) = (int) num - 1;
      facetPtr = *(int*) ((IntPtr) obj0 + 4) == 0 ? (locale.facet*) (ValueType) (IntPtr) obj0 : (locale.facet*) (ValueType) 0;
    }
    __fault
    {
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(std\u002E_Lockit\u002E\u007Bdtor\u007D), (void*) &lockit);
    }
    \u003CModule\u003E.std\u002E_Lockit\u002E\u007Bdtor\u007D(&lockit);
    return facetPtr;
  }

  internal static unsafe void std\u002Elocale\u002E\u007Bdtor\u007D([In] locale* obj0)
  {
    uint num = (uint) *(int*) obj0;
    if (num == 0U)
      return;
    locale.facet* facetPtr1 = \u003CModule\u003E.std\u002Elocale\u002Efacet\u002E_Decref((locale.facet*) num);
    if ((IntPtr) facetPtr1 == IntPtr.Zero)
      return;
    locale.facet* facetPtr2 = facetPtr1;
    // ISSUE: cast to a function pointer type
    // ISSUE: function pointer call
    void* voidPtr = __calli((__FnPtr<void* (IntPtr, uint)>) *(int*) *(int*) facetPtr1)((uint) facetPtr2, new IntPtr(1));
  }

  internal static void \u003FA0x4e57e0f1\u002E\u003F\u003F__E\u003FA0x4e57e0f1\u0040classic_locale\u0040std\u0040\u0040YMXXZ() => \u003CModule\u003E._atexit_m((__FnPtr<void ()>) __methodptr(\u003FA0x4e57e0f1\u002E\u003F\u003F__F\u003FA0x4e57e0f1\u0040classic_locale\u0040std\u0040\u0040YMXXZ));

  internal static unsafe void \u003FA0x4e57e0f1\u002E\u003F\u003F__F\u003FA0x4e57e0f1\u0040classic_locale\u0040std\u0040\u0040YMXXZ() => \u003CModule\u003E.std\u002Elocale\u002E\u007Bdtor\u007D(&\u003CModule\u003E.std\u002E\u003FA0x4e57e0f1\u002Eclassic_locale);

  internal static unsafe void _Mtxinit(_RTL_CRITICAL_SECTION* _Mtx) => \u003CModule\u003E.InitializeCriticalSection(_Mtx);

  internal static unsafe void _Mtxdst(_RTL_CRITICAL_SECTION* _Mtx) => \u003CModule\u003E.DeleteCriticalSection(_Mtx);

  internal static unsafe void _Mtxlock(_RTL_CRITICAL_SECTION* _Mtx) => \u003CModule\u003E.EnterCriticalSection(_Mtx);

  internal static unsafe void _Mtxunlock(_RTL_CRITICAL_SECTION* _Mtx) => \u003CModule\u003E.LeaveCriticalSection(_Mtx);

  [SpecialName]
  internal static unsafe basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0,
    basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* _Right)
  {
    \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, false, 0U);
    \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002Eassign(obj0, _Right, 0U, uint.MaxValue);
    return obj0;
  }

  [SpecialName]
  internal static unsafe basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E\u007Bctor\u007D(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0,
    basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* _Right)
  {
    \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, false, 0U);
    \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002Eassign(obj0, _Right, 0U, uint.MaxValue);
    return obj0;
  }

  internal static unsafe basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002Eassign(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0,
    basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* _Right,
    uint _Roff,
    uint _Count)
  {
    if ((uint) *(int*) ((IntPtr) _Right + 20) < _Roff)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xran();
    uint num = (uint) *(int*) ((IntPtr) _Right + 20) - _Roff;
    if (_Count < num)
      num = _Count;
    if (obj0 == _Right)
    {
      \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002Eerase(obj0, num + _Roff, uint.MaxValue);
      \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002Eerase(obj0, 0U, _Roff);
    }
    else if (\u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Grow(obj0, num, false))
    {
      \u003CModule\u003E.std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E(\u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0), (uint) *(int*) ((IntPtr) obj0 + 24), (char*) ((int) _Roff * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(_Right)), num);
      *(int*) ((IntPtr) obj0 + 20) = (int) num;
      *(short*) ((int) num * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
    }
    return obj0;
  }

  internal static unsafe basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002Eerase(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0,
    uint _Off,
    uint _Count)
  {
    if ((uint) *(int*) ((IntPtr) obj0 + 20) < _Off)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xran();
    uint num1 = (uint) *(int*) ((IntPtr) obj0 + 20) - _Off;
    if (num1 < _Count)
      _Count = num1;
    if (0U < _Count)
    {
      \u003CModule\u003E.std\u002E_Traits_helper\u002Emove_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E((char*) ((int) _Off * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)), (uint) *(int*) ((IntPtr) obj0 + 24) - _Off, (char*) (((int) _Off + (int) _Count) * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)), num1 - _Count);
      uint num2 = (uint) *(int*) ((IntPtr) obj0 + 20) - _Count;
      *(int*) ((IntPtr) obj0 + 20) = (int) num2;
      *(short*) ((int) num2 * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
    }
    return obj0;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Grow(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0,
    uint _Newsize,
    [MarshalAs(UnmanagedType.U1)] bool _Trim)
  {
    if (2147483646U < _Newsize)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xlen();
    if ((uint) *(int*) ((IntPtr) obj0 + 24) < _Newsize)
      \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Copy(obj0, _Newsize, (uint) *(int*) ((IntPtr) obj0 + 20));
    else if (_Trim && _Newsize < 8U)
    {
      uint num = (uint) *(int*) ((IntPtr) obj0 + 20);
      uint _Newsize1 = _Newsize >= num ? num : _Newsize;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, _Newsize1);
    }
    else if (_Newsize == 0U)
    {
      *(int*) ((IntPtr) obj0 + 20) = 0;
      *\u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0) = char.MinValue;
    }
    return 0U < _Newsize;
  }

  internal static unsafe void std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Tidy(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0,
    [MarshalAs(UnmanagedType.U1)] bool _Built,
    uint _Newsize)
  {
    if (_Built && 8U <= (uint) *(int*) ((IntPtr) obj0 + 24))
    {
      basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* _First1 = (basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E*) ((IntPtr) obj0 + 4);
      char* _First2 = (char*) *(int*) _First1;
      if (0U < _Newsize)
        \u003CModule\u003E.std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E((char*) _First1, 8U, _First2, _Newsize);
      \u003CModule\u003E.delete((void*) _First2);
    }
    *(int*) ((IntPtr) obj0 + 24) = 7;
    *(int*) ((IntPtr) obj0 + 20) = (int) _Newsize;
    *(short*) ((int) _Newsize * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
  }

  internal static unsafe char* std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0)
  {
    return 8U <= (uint) *(int*) ((IntPtr) obj0 + 24) ? (char*) *(int*) ((IntPtr) obj0 + 4) : (char*) ((IntPtr) obj0 + 4);
  }

  internal static unsafe char* std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0)
  {
    return 8U <= (uint) *(int*) ((IntPtr) obj0 + 24) ? (char*) *(int*) ((IntPtr) obj0 + 4) : (char*) ((IntPtr) obj0 + 4);
  }

  internal static unsafe basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002Eassign(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0,
    basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* _Right,
    uint _Roff,
    uint _Count)
  {
    if ((uint) *(int*) ((IntPtr) _Right + 20) < _Roff)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xran();
    uint num = (uint) *(int*) ((IntPtr) _Right + 20) - _Roff;
    if (_Count < num)
      num = _Count;
    if (obj0 == _Right)
    {
      \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002Eerase(obj0, num + _Roff, uint.MaxValue);
      \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002Eerase(obj0, 0U, _Roff);
    }
    else if (\u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Grow(obj0, num, false))
    {
      \u003CModule\u003E.std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u0020\u003E(\u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0), (uint) *(int*) ((IntPtr) obj0 + 24), (ushort*) ((int) _Roff * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(_Right)), num);
      *(int*) ((IntPtr) obj0 + 20) = (int) num;
      *(short*) ((int) num * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
    }
    return obj0;
  }

  internal static unsafe basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002Eerase(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0,
    uint _Off,
    uint _Count)
  {
    if ((uint) *(int*) ((IntPtr) obj0 + 20) < _Off)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xran();
    uint num1 = (uint) *(int*) ((IntPtr) obj0 + 20) - _Off;
    if (num1 < _Count)
      _Count = num1;
    if (0U < _Count)
    {
      \u003CModule\u003E.std\u002E_Traits_helper\u002Emove_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u0020\u003E((ushort*) ((int) _Off * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)), (uint) *(int*) ((IntPtr) obj0 + 24) - _Off, (ushort*) (((int) _Off + (int) _Count) * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)), num1 - _Count);
      uint num2 = (uint) *(int*) ((IntPtr) obj0 + 20) - _Count;
      *(int*) ((IntPtr) obj0 + 20) = (int) num2;
      *(short*) ((int) num2 * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
    }
    return obj0;
  }

  [return: MarshalAs(UnmanagedType.U1)]
  internal static unsafe bool std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Grow(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0,
    uint _Newsize,
    [MarshalAs(UnmanagedType.U1)] bool _Trim)
  {
    if (2147483646U < _Newsize)
      \u003CModule\u003E.std\u002E_String_base\u002E_Xlen();
    if ((uint) *(int*) ((IntPtr) obj0 + 24) < _Newsize)
      \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Copy(obj0, _Newsize, (uint) *(int*) ((IntPtr) obj0 + 20));
    else if (_Trim && _Newsize < 8U)
    {
      uint num = (uint) *(int*) ((IntPtr) obj0 + 20);
      uint _Newsize1 = _Newsize >= num ? num : _Newsize;
      \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, _Newsize1);
    }
    else if (_Newsize == 0U)
    {
      *(int*) ((IntPtr) obj0 + 20) = 0;
      *\u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0) = (ushort) 0;
    }
    return 0U < _Newsize;
  }

  internal static unsafe void std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Tidy(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0,
    [MarshalAs(UnmanagedType.U1)] bool _Built,
    uint _Newsize)
  {
    if (_Built && 8U <= (uint) *(int*) ((IntPtr) obj0 + 24))
    {
      basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* _First1 = (basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E*) ((IntPtr) obj0 + 4);
      ushort* _First2 = (ushort*) *(int*) _First1;
      if (0U < _Newsize)
        \u003CModule\u003E.std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u0020\u003E((ushort*) _First1, 8U, _First2, _Newsize);
      \u003CModule\u003E.delete((void*) _First2);
    }
    *(int*) ((IntPtr) obj0 + 24) = 7;
    *(int*) ((IntPtr) obj0 + 20) = (int) _Newsize;
    *(short*) ((int) _Newsize * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
  }

  internal static unsafe ushort* std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0)
  {
    return 8U <= (uint) *(int*) ((IntPtr) obj0 + 24) ? (ushort*) *(int*) ((IntPtr) obj0 + 4) : (ushort*) ((IntPtr) obj0 + 4);
  }

  internal static unsafe ushort* std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0)
  {
    return 8U <= (uint) *(int*) ((IntPtr) obj0 + 24) ? (ushort*) *(int*) ((IntPtr) obj0 + 4) : (ushort*) ((IntPtr) obj0 + 4);
  }

  internal static unsafe void std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Copy(
    [In] basic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E* obj0,
    uint _Newsize,
    uint _Oldlen)
  {
    uint num1 = (uint) \u003CModule\u003E.__CxxQueryExceptionSize();
    // ISSUE: untyped stack allocation
    int pStorage1 = (int) __untypedstackalloc((int) num1 << 1);
    uint num2 = _Newsize | 7U;
    if (2147483646U < num2)
    {
      num2 = _Newsize;
    }
    else
    {
      uint num3 = (uint) *(int*) ((IntPtr) obj0 + 24);
      uint num4 = num3 >> 1;
      if (num2 / 3U < num4 && num3 <= 2147483646U - num4)
        num2 = num4 + num3;
    }
    char* _First1 = (char*) 0;
    int pStorage2;
    try
    {
      pStorage2 = (int) num1 + pStorage1;
      _First1 = \u003CModule\u003E.std\u002E_Allocate\u003Cwchar_t\u003E(num2 + 1U, (char*) 0);
    }
    catch (Exception ex1) when (
    {
      // ISSUE: unable to correctly present filter
      uint exceptionCode1 = (uint) Marshal.GetExceptionCode();
      if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
      {
        SuccessfulFiltering;
      }
      else
        throw;
    }
    )
    {
      uint rethrow1 = 0;
      \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage2);
      try
      {
        try
        {
          num2 = _Newsize;
          try
          {
            _First1 = \u003CModule\u003E.std\u002E_Allocate\u003Cwchar_t\u003E(_Newsize + 1U, (char*) 0);
            goto label_23;
          }
          catch (Exception ex2) when (
          {
            // ISSUE: unable to correctly present filter
            uint exceptionCode2 = (uint) Marshal.GetExceptionCode();
            if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
            {
              SuccessfulFiltering;
            }
            else
              throw;
          }
          )
          {
            uint rethrow2 = 0;
            \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage1);
            try
            {
              try
              {
                \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, 0U);
                \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
              }
              catch (Exception ex3) when (
              {
                // ISSUE: unable to correctly present filter
                rethrow2 = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
                if (rethrow2 != 0U)
                {
                  SuccessfulFiltering;
                }
                else
                  throw;
              }
              )
              {
              }
              if (rethrow2 != 0U)
                throw;
              else
                goto label_23;
            }
            finally
            {
              \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage1, (int) rethrow2);
            }
          }
        }
        catch (Exception ex4) when (
        {
          // ISSUE: unable to correctly present filter
          rethrow1 = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
          if (rethrow1 != 0U)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
        }
        if (rethrow1 != 0U)
          throw;
      }
      finally
      {
        \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage2, (int) rethrow1);
      }
    }
label_23:
    if (0U < _Oldlen)
      \u003CModule\u003E.std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E(_First1, num2 + 1U, \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0), _Oldlen);
    \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, 0U);
    *(int*) ((IntPtr) obj0 + 4) = (int) _First1;
    *(int*) ((IntPtr) obj0 + 24) = (int) num2;
    *(int*) ((IntPtr) obj0 + 20) = (int) _Oldlen;
    *(short*) ((int) _Oldlen * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cwchar_t\u002Cstd\u003A\u003Achar_traits\u003Cwchar_t\u003E\u002Cstd\u003A\u003Aallocator\u003Cwchar_t\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
  }

  internal static unsafe void std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Copy(
    [In] basic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E* obj0,
    uint _Newsize,
    uint _Oldlen)
  {
    uint num1 = (uint) \u003CModule\u003E.__CxxQueryExceptionSize();
    // ISSUE: untyped stack allocation
    int pStorage1 = (int) __untypedstackalloc((int) num1 << 1);
    uint num2 = _Newsize | 7U;
    if (2147483646U < num2)
    {
      num2 = _Newsize;
    }
    else
    {
      uint num3 = (uint) *(int*) ((IntPtr) obj0 + 24);
      uint num4 = num3 >> 1;
      if (num2 / 3U < num4 && num3 <= 2147483646U - num4)
        num2 = num4 + num3;
    }
    ushort* _First1 = (ushort*) 0;
    int pStorage2;
    try
    {
      pStorage2 = (int) num1 + pStorage1;
      _First1 = \u003CModule\u003E.std\u002E_Allocate\u003Cunsigned\u0020short\u003E(num2 + 1U, (ushort*) 0);
    }
    catch (Exception ex1) when (
    {
      // ISSUE: unable to correctly present filter
      uint exceptionCode1 = (uint) Marshal.GetExceptionCode();
      if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
      {
        SuccessfulFiltering;
      }
      else
        throw;
    }
    )
    {
      uint rethrow1 = 0;
      \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage2);
      try
      {
        try
        {
          num2 = _Newsize;
          try
          {
            _First1 = \u003CModule\u003E.std\u002E_Allocate\u003Cunsigned\u0020short\u003E(_Newsize + 1U, (ushort*) 0);
            goto label_23;
          }
          catch (Exception ex2) when (
          {
            // ISSUE: unable to correctly present filter
            uint exceptionCode2 = (uint) Marshal.GetExceptionCode();
            if (\u003CModule\u003E.__CxxExceptionFilter((void*) Marshal.GetExceptionPointers(), (void*) 0, 0, (void*) 0) != 0)
            {
              SuccessfulFiltering;
            }
            else
              throw;
          }
          )
          {
            uint rethrow2 = 0;
            \u003CModule\u003E.__CxxRegisterExceptionObject((void*) Marshal.GetExceptionPointers(), (void*) pStorage1);
            try
            {
              try
              {
                \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, 0U);
                \u003CModule\u003E._CxxThrowException((void*) 0, (_s__ThrowInfo*) 0);
              }
              catch (Exception ex3) when (
              {
                // ISSUE: unable to correctly present filter
                rethrow2 = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
                if (rethrow2 != 0U)
                {
                  SuccessfulFiltering;
                }
                else
                  throw;
              }
              )
              {
              }
              if (rethrow2 != 0U)
                throw;
              else
                goto label_23;
            }
            finally
            {
              \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage1, (int) rethrow2);
            }
          }
        }
        catch (Exception ex4) when (
        {
          // ISSUE: unable to correctly present filter
          rethrow1 = (uint) \u003CModule\u003E.__CxxDetectRethrow((void*) Marshal.GetExceptionPointers());
          if (rethrow1 != 0U)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
        }
        if (rethrow1 != 0U)
          throw;
      }
      finally
      {
        \u003CModule\u003E.__CxxUnregisterExceptionObject((void*) pStorage2, (int) rethrow1);
      }
    }
label_23:
    if (0U < _Oldlen)
      \u003CModule\u003E.std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u0020\u003E(_First1, num2 + 1U, \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0), _Oldlen);
    \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Tidy(obj0, true, 0U);
    *(int*) ((IntPtr) obj0 + 4) = (int) _First1;
    *(int*) ((IntPtr) obj0 + 24) = (int) num2;
    *(int*) ((IntPtr) obj0 + 20) = (int) _Oldlen;
    *(short*) ((int) _Oldlen * 2 + (IntPtr) \u003CModule\u003E.std\u002Ebasic_string\u003Cunsigned\u0020short\u002Cstd\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u002Cstd\u003A\u003Aallocator\u003Cunsigned\u0020short\u003E\u002C_STL70\u003E\u002E_Myptr(obj0)) = (short) 0;
  }

  internal static unsafe char* std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E(
    char* _First1,
    uint _Size,
    char* _First2,
    uint _Count)
  {
    \u003CModule\u003E.memcpy_s((void*) _First1, _Size << 1, (void*) _First2, _Count << 1);
    return _First1;
  }

  internal static unsafe ushort* std\u002E_Traits_helper\u002Ecopy_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u0020\u003E(
    ushort* _First1,
    uint _Size,
    ushort* _First2,
    uint _Count)
  {
    \u003CModule\u003E.memcpy_s((void*) _First1, _Size << 1, (void*) _First2, _Count << 1);
    return _First1;
  }

  internal static unsafe char* std\u002E_Traits_helper\u002Emove_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cwchar_t\u003E\u0020\u003E(
    char* _First1,
    uint _Size,
    char* _First2,
    uint _Count)
  {
    \u003CModule\u003E.memmove_s((void*) _First1, _Size << 1, (void*) _First2, _Count << 1);
    return _First1;
  }

  internal static unsafe ushort* std\u002E_Traits_helper\u002Emove_s\u003Cstruct\u0020std\u003A\u003Achar_traits\u003Cunsigned\u0020short\u003E\u0020\u003E(
    ushort* _First1,
    uint _Size,
    ushort* _First2,
    uint _Count)
  {
    \u003CModule\u003E.memmove_s((void*) _First1, _Size << 1, (void*) _First2, _Count << 1);
    return _First1;
  }

  internal static unsafe char* std\u002E_Allocate\u003Cwchar_t\u003E(
    uint _Count,
    char* __unnamed001)
  {
    if (_Count <= 0U)
      _Count = 0U;
    else if (uint.MaxValue / _Count < 2U)
    {
      bad_alloc badAlloc;
      \u003CModule\u003E.std\u002Ebad_alloc\u002E\u007Bctor\u007D(&badAlloc, (sbyte*) 0);
      \u003CModule\u003E._CxxThrowException((void*) &badAlloc, &\u003CModule\u003E._TI2\u003FAVbad_alloc\u0040std\u0040\u0040);
    }
    return (char*) \u003CModule\u003E.@new(_Count << 1);
  }

  internal static unsafe ushort* std\u002E_Allocate\u003Cunsigned\u0020short\u003E(
    uint _Count,
    ushort* __unnamed001)
  {
    if (_Count <= 0U)
      _Count = 0U;
    else if (uint.MaxValue / _Count < 2U)
    {
      bad_alloc badAlloc;
      \u003CModule\u003E.std\u002Ebad_alloc\u002E\u007Bctor\u007D(&badAlloc, (sbyte*) 0);
      \u003CModule\u003E._CxxThrowException((void*) &badAlloc, &\u003CModule\u003E._TI2\u003FAVbad_alloc\u0040std\u0040\u0040);
    }
    return (ushort*) \u003CModule\u003E.@new(_Count << 1);
  }

  internal static unsafe void \u003FA0xce0ab027\u002E\u003F\u003F__E\u003FA0xce0ab027\u0040initlocks\u0040std\u0040\u0040YMXXZ()
  {
    \u003CModule\u003E.std\u002E_Init_locks\u002E\u007Bctor\u007D(&\u003CModule\u003E.std\u002E\u003FA0xce0ab027\u002Einitlocks);
    // ISSUE: method pointer
    // ISSUE: cast to a function pointer type
    \u003CModule\u003E._atexit_m((__FnPtr<void ()>) __methodptr(\u003FA0xce0ab027\u002E\u003F\u003F__F\u003FA0xce0ab027\u0040initlocks\u0040std\u0040\u0040YMXXZ));
  }

  internal static unsafe void \u003FA0xce0ab027\u002E\u003F\u003F__F\u003FA0xce0ab027\u0040initlocks\u0040std\u0040\u0040YMXXZ() => \u003CModule\u003E.std\u002E_Init_locks\u002E\u007Bdtor\u007D(&\u003CModule\u003E.std\u002E\u003FA0xce0ab027\u002Einitlocks);

  internal static unsafe void _Init_atexit\u002E\u007Bdtor\u007D([In] _Init_atexit* obj0)
  {
    if (\u003CModule\u003E.\u003FA0xce0ab027\u002Eatcount == 0U)
      return;
    do
    {
      --\u003CModule\u003E.\u003FA0xce0ab027\u002Eatcount;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a function pointer type
      __FnPtr<void ()> local = (__FnPtr<void ()>) ^(int&) ((int) \u003CModule\u003E.\u003FA0xce0ab027\u002Eatcount * 4 + (IntPtr) &\u003CModule\u003E.\u003FA0xce0ab027\u002Eatfuns);
      if (local != null)
      {
        // ISSUE: function pointer call
        __calli(local)();
      }
    }
    while (\u003CModule\u003E.\u003FA0xce0ab027\u002Eatcount != 0U);
  }

  internal static void \u003FA0xce0ab027\u002E\u003F\u003F__E\u003FA0xce0ab027\u0040init_atexit\u0040\u0040YMXXZ() => \u003CModule\u003E._atexit_m((__FnPtr<void ()>) __methodptr(\u003FA0xce0ab027\u002E\u003F\u003F__F\u003FA0xce0ab027\u0040init_atexit\u0040\u0040YMXXZ));

  internal static unsafe void \u003FA0xce0ab027\u002E\u003F\u003F__F\u003FA0xce0ab027\u0040init_atexit\u0040\u0040YMXXZ() => \u003CModule\u003E._Init_atexit\u002E\u007Bdtor\u007D(&\u003CModule\u003E.\u003FA0xce0ab027\u002Einit_atexit);

  internal static unsafe int vsprintf_s(
    sbyte* _Dst,
    uint _SizeInBytes,
    sbyte* _Format,
    sbyte* _ArgList)
  {
    if ((IntPtr) _Dst == IntPtr.Zero || _SizeInBytes <= 0U)
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return -1;
    }
    if ((IntPtr) _Format == IntPtr.Zero)
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return -1;
    }
    int num = \u003CModule\u003E._soutput_s(_Dst, _SizeInBytes, _Format, _ArgList);
    if (num >= 0)
      return num;
    *_Dst = (sbyte) 0;
    if (num != -2)
      return -1;
    *\u003CModule\u003E._errno() = 34;
    \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
    return -1;
  }

  internal static unsafe int _soutput_s(sbyte* _Dst, uint _Size, sbyte* _Format, sbyte* _ArgList)
  {
    _iobuf iobuf;
    if (_Size == uint.MaxValue)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &iobuf + 4) = int.MaxValue;
    }
    else
    {
      if (_Size > (uint) int.MaxValue)
      {
        *\u003CModule\u003E._errno() = 22;
        \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
        return -1;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &iobuf + 4) = (int) _Size;
    }
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ((IntPtr) &iobuf + 8) = (int) _Dst;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ref iobuf = (int) _Dst;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ((IntPtr) &iobuf + 12) = 66;
    int num = \u003CModule\u003E._output_s(&iobuf, _Format, _ArgList);
    *(sbyte*) ((int) _Size + (IntPtr) _Dst - 1) = (sbyte) 0;
    if (num < 0)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &iobuf + 4) < 0)
        return -2;
      if ((IntPtr) _Dst != IntPtr.Zero && _Size > 0U)
        *_Dst = (sbyte) 0;
      return num;
    }
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    ^(int&) ((IntPtr) &iobuf + 4) = ^(int&) ((IntPtr) &iobuf + 4) - 1;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    if (^(int&) ((IntPtr) &iobuf + 4) >= 0)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(sbyte*) ^(int&) ref iobuf = (sbyte) 0;
    }
    else if (\u003CModule\u003E._flsbuf_s(0, &iobuf) == -1)
      return -2;
    return num;
  }

  internal static unsafe void \u003FA0x70126153\u002Ewrite_char(
    sbyte ch,
    _iobuf* f,
    int* pnumwritten)
  {
    if ((*(int*) ((IntPtr) f + 12) & 64) != 0 && *(int*) ((IntPtr) f + 8) == 0)
    {
      int* numPtr = pnumwritten;
      int num = *numPtr + 1;
      *numPtr = num;
    }
    else
    {
      *(int*) ((IntPtr) f + 4) = *(int*) ((IntPtr) f + 4) - 1;
      int num1;
      if (*(int*) ((IntPtr) f + 4) >= 0)
      {
        *(sbyte*) *(int*) f = ch;
        int num2 = (int) (byte) ch;
        _iobuf* iobufPtr = f;
        int num3 = *(int*) iobufPtr + 1;
        *(int*) iobufPtr = num3;
        num1 = num2;
      }
      else
        num1 = \u003CModule\u003E._flsbuf_s((int) ch, f);
      if (num1 == -1)
      {
        *pnumwritten = -1;
      }
      else
      {
        int* numPtr = pnumwritten;
        int num4 = *numPtr + 1;
        *numPtr = num4;
      }
    }
  }

  internal static unsafe void \u003FA0x70126153\u002Ewrite_multi_char(
    sbyte ch,
    int num,
    _iobuf* f,
    int* pnumwritten)
  {
    if (num <= 0)
      return;
    do
    {
      --num;
      \u003CModule\u003E.\u003FA0x70126153\u002Ewrite_char(ch, f, pnumwritten);
    }
    while (*pnumwritten != -1 && num > 0);
  }

  internal static unsafe void \u003FA0x70126153\u002Ewrite_string(
    sbyte* @string,
    int len,
    _iobuf* f,
    int* pnumwritten)
  {
    if ((*(int*) ((IntPtr) f + 12) & 64) != 0 && *(int*) ((IntPtr) f + 8) == 0)
    {
      int* numPtr = pnumwritten;
      int num = *numPtr + len;
      *numPtr = num;
    }
    else
    {
      if (len <= 0)
        return;
      do
      {
        --len;
        \u003CModule\u003E.\u003FA0x70126153\u002Ewrite_char(*@string, f, pnumwritten);
        ++@string;
        if (*pnumwritten == -1)
        {
          if (*\u003CModule\u003E._errno() == 42)
            \u003CModule\u003E.\u003FA0x70126153\u002Ewrite_char((sbyte) 63, f, pnumwritten);
          else
            goto label_8;
        }
      }
      while (len > 0);
      goto label_9;
label_8:
      return;
label_9:;
    }
  }

  internal static int _safecrt_cfltcvt(
    _CRT_DOUBLE* arg,
    sbyte* buffer,
    uint sizeInBytes,
    int type,
    int precision,
    int flags)
  {
    // ISSUE: unable to decompile the method.
  }

  internal static unsafe int _safecrt_wctomb_s(
    int* pRetValue,
    sbyte* dst,
    uint sizeInBytes,
    [MarshalAs(UnmanagedType.U2)] char wchar)
  {
    if ((IntPtr) dst == IntPtr.Zero && sizeInBytes > 0U)
    {
      if ((IntPtr) pRetValue != IntPtr.Zero)
        *pRetValue = 0;
      return 0;
    }
    if ((IntPtr) pRetValue != IntPtr.Zero)
      *pRetValue = -1;
    if (sizeInBytes > (uint) int.MaxValue)
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return 22;
    }
    \u0024ArrayType\u0024\u0024\u0024BY04D arrayTypeBy04D;
    int num = \u003CModule\u003E.wctomb((sbyte*) &arrayTypeBy04D, wchar);
    if (num < 0)
    {
      if ((IntPtr) dst != IntPtr.Zero && sizeInBytes > 0U)
      {
        // ISSUE: initblk instruction
        __memset((IntPtr) dst, 0, (int) sizeInBytes);
      }
      *\u003CModule\u003E._errno() = 42;
      return 42;
    }
    if ((IntPtr) pRetValue != IntPtr.Zero)
      *pRetValue = num;
    if ((int) sizeInBytes < num)
    {
      if ((IntPtr) dst != IntPtr.Zero && sizeInBytes > 0U)
      {
        // ISSUE: initblk instruction
        __memset((IntPtr) dst, 0, (int) sizeInBytes);
      }
      *\u003CModule\u003E._errno() = 34;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return 34;
    }
    if ((IntPtr) dst != IntPtr.Zero)
    {
      // ISSUE: cpblk instruction
      __memcpy((IntPtr) dst, ref arrayTypeBy04D, num);
    }
    return 0;
  }

  internal static unsafe int _flsbuf_s(int ch, _iobuf* str)
  {
    int num1 = \u003CModule\u003E._fileno(str);
    int num2 = *(int*) ((IntPtr) str + 12);
    if ((num2 & 130) == 0)
    {
      *\u003CModule\u003E._errno() = 9;
      *(int*) ((IntPtr) str + 12) = *(int*) ((IntPtr) str + 12) | 32;
      return -1;
    }
    if ((num2 & 64) != 0)
    {
      *\u003CModule\u003E._errno() = 34;
      *(int*) ((IntPtr) str + 12) = *(int*) ((IntPtr) str + 12) | 32;
      return -1;
    }
    if ((num2 & 1) != 0)
    {
      *(int*) ((IntPtr) str + 4) = 0;
      if ((num2 & 16) != 0)
      {
        _iobuf* iobufPtr = str;
        int num3 = *(int*) ((IntPtr) iobufPtr + 8);
        *(int*) iobufPtr = num3;
        *(int*) ((IntPtr) str + 12) = num2 & -2;
      }
      else
      {
        *(int*) ((IntPtr) str + 12) = num2 | 32;
        return -1;
      }
    }
    int num4 = *(int*) ((IntPtr) str + 12) & -17 | 2;
    *(int*) ((IntPtr) str + 12) = num4;
    *(int*) ((IntPtr) str + 4) = 0;
    int num5 = 0;
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    // ISSUE: cast to a reference type
    // ISSUE: explicit reference operation
    if ((num4 & 268) == 0 && ((IntPtr) str != (IntPtr) (^(int&) ref \u003CModule\u003E.__imp__iob + 32) && (IntPtr) str != (IntPtr) (^(int&) ref \u003CModule\u003E.__imp__iob + 64) || \u003CModule\u003E._isatty(num1) == 0))
    {
      *\u003CModule\u003E._errno() = 22;
      \u003CModule\u003E._invalid_parameter((char*) 0, (char*) 0, (char*) 0, 0U, 0U);
      return -1;
    }
    int num6;
    if ((*(int*) ((IntPtr) str + 12) & 264) != 0)
    {
      int num7 = *(int*) ((IntPtr) str + 8);
      num6 = *(int*) str - num7;
      *(int*) str = num7 + 1;
      *(int*) ((IntPtr) str + 4) = *(int*) ((IntPtr) str + 24) - 1;
      if (num6 > 0)
      {
        num5 = \u003CModule\u003E._write(num1, (void*) num7, (uint) num6);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((sbyte) ((int) *(sbyte*) ((num1 == -1 || num1 == -2 ? (IntPtr) (ioinfo*) ^(int&) ref \u003CModule\u003E.__imp___badioinfo : (IntPtr) (ioinfo*) ((num1 & 31) * 36 + *(int*) ((num1 >> 5) * 4 + ^(int&) ref \u003CModule\u003E.__imp___pioinfo))) + 4) & 32) != (sbyte) 0 && \u003CModule\u003E._lseeki64(num1, 0L, 2) == -1L)
        {
          *(int*) ((IntPtr) str + 12) = *(int*) ((IntPtr) str + 12) | 32;
          return -1;
        }
      }
      *(sbyte*) *(int*) ((IntPtr) str + 8) = (sbyte) ch;
    }
    else
    {
      num6 = 1;
      num5 = \u003CModule\u003E._write(num1, (void*) &ch, 1U);
    }
    if (num5 == num6)
      return ch & (int) byte.MaxValue;
    *(int*) ((IntPtr) str + 12) = *(int*) ((IntPtr) str + 12) | 32;
    return -1;
  }

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void DeleteCriticalSection([In] _RTL_CRITICAL_SECTION* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void SysFreeString([In] ushort* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe uint SysStringByteLen([In] ushort* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void delete([In] void* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void RaiseException([In] uint obj0, [In] uint obj1, [In] uint obj2, [In] uint* obj3);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void VariantInit([In] tagVARIANT* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe ushort* SysAllocStringByteLen([In] sbyte* obj0, [In] uint obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int InterlockedIncrement([In] int* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int CoCreateInstance(
    [In] _GUID* obj0,
    [In] IUnknown* obj1,
    [In] uint obj2,
    [In] _GUID* obj3,
    [In] void** obj4);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int SetErrorInfo([In] uint obj0, [In] IErrorInfo* obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int GetErrorInfo([In] uint obj0, [In] IErrorInfo** obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int CLSIDFromString([In] ushort* obj0, [In] _GUID* obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.ThisCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe exception* exception\u002E\u007Bctor\u007D(
    [In] exception* obj0,
    [In] exception* obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void _CxxThrowException([In] void* obj0, [In] _s__ThrowInfo* obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void* @new([In] uint obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void InitializeCriticalSection([In] _RTL_CRITICAL_SECTION* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void LeaveCriticalSection([In] _RTL_CRITICAL_SECTION* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void EnterCriticalSection([In] _RTL_CRITICAL_SECTION* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int CoCreateFreeThreadedMarshaler([In] IUnknown* obj0, [In] IUnknown** obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int InterlockedDecrement([In] int* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int VariantClear([In] tagVARIANT* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void CoTaskMemFree([In] void* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void* CoTaskMemAlloc([In] uint obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int CoSetProxyBlanket(
    [In] IUnknown* obj0,
    [In] uint obj1,
    [In] uint obj2,
    [In] ushort* obj3,
    [In] uint obj4,
    [In] uint obj5,
    [In] void* obj6,
    [In] uint obj7);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe ushort* SysAllocString([In] ushort* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe tagSAFEARRAY* SafeArrayCreate(
    [In] ushort obj0,
    [In] uint obj1,
    [In] tagSAFEARRAYBOUND* obj2);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int SafeArrayDestroy([In] tagSAFEARRAY* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int SafeArrayUnaccessData([In] tagSAFEARRAY* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int SafeArrayAccessData([In] tagSAFEARRAY* obj0, [In] void** obj1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe uint SafeArrayGetDim([In] tagSAFEARRAY* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int DispatchMessageW([In] tagMSG* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int PeekMessageW(
    [In] tagMSG* obj0,
    [In] HWND__* obj1,
    [In] uint obj2,
    [In] uint obj3,
    [In] uint obj4);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe uint MsgWaitForMultipleObjectsEx(
    [In] uint obj0,
    [In] void** obj1,
    [In] uint obj2,
    [In] uint obj3,
    [In] uint obj4);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.ThisCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe exception* exception\u002E\u007Bctor\u007D([In] exception* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.ThisCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void exception\u002E\u007Bdtor\u007D([In] exception* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.ThisCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe exception* exception\u002E\u007Bctor\u007D(
    [In] exception* obj0,
    [In] sbyte** obj1);

  [SuppressUnmanagedCodeSecurity]
  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void* _getFiberPtrId();

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern void _amsg_exit([In] int obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern void Sleep([In] uint obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern void _cexit();

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern void terminate();

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void* malloc([In] uint obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void free([In] void* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int* _errno();

  [SuppressUnmanagedCodeSecurity]
  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void _invalid_parameter(
    [In] char* obj0,
    [In] char* obj1,
    [In] char* obj2,
    [In] uint obj3,
    [In] uint obj4);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void* memmove([In] void* obj0, [In] void* obj1, [In] uint obj2);

  [SuppressUnmanagedCodeSecurity]
  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe void* _CallSettingFrame(
    [In] void* obj0,
    [In] EHRegistrationNode* obj1,
    [In] uint obj2);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern void abort();

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int CorBindToRuntimeEx(
    [In] char* obj0,
    [In] char* obj1,
    [In] uint obj2,
    [In] _GUID* obj3,
    [In] _GUID* obj4,
    [In] void** obj5);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern uint GetVersion();

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern void SetLastError([In] uint obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern uint GetLastError();

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe uint VirtualQuery(
    [In] void* obj0,
    [In] _MEMORY_BASIC_INFORMATION* obj1,
    [In] uint obj2);

  [SuppressUnmanagedCodeSecurity]
  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int sprintf_s([In] sbyte* obj0, [In] uint obj1, [In] sbyte* obj2, __arglist);

  [SuppressUnmanagedCodeSecurity]
  [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int _output_s([In] _iobuf* obj0, [In] sbyte* obj1, [In] sbyte* obj2);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int wctomb([In] sbyte* obj0, [MarshalAs(UnmanagedType.U2)] char _param1);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int _snprintf([In] sbyte* obj0, [In] uint obj1, [In] sbyte* obj2, __arglist);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe sbyte* _itoa([In] int obj0, [In] sbyte* obj1, [In] int obj2);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int _write([In] int obj0, [In] void* obj1, [In] uint obj2);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern unsafe int _fileno([In] _iobuf* obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern int _isatty([In] int obj0);

  [SuppressUnmanagedCodeSecurity]
  [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
  [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
  public static extern long _lseeki64([In] int obj0, [In] long obj1, [In] int obj2);
}
