// Decompiled with JetBrains decompiler
// Type: Standard_Sales.Calculators.CohensCalculator
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using Standard_Sales.ExcelImport;
using Standard_Sales.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace Standard_Sales.Calculators
{
  public class CohensCalculator : IStandard_Salesulator
  {
    private readonly ExcelDataSet _excelDataSet;
    private readonly CohensSettings _cohensSettings;

    public CohensCalculator(ExcelDataSet excelDataSet, CohensSettings cohensSettings)
    {
      this._excelDataSet = excelDataSet;
      this._cohensSettings = cohensSettings;
    }

    public EffectSizeResult CalculateEffectSize()
    {
      EffectSizeResult effectSizeResult = new EffectSizeResult();
label_1:
      int num1 = 944535244;
      List<double> filterVariableValues;
      List<double> variableValues1;
      List<double> variableValues2;
      EffectSizeResult effectSize;
      double standardError;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1166202342)) % 18U)
        {
          case 0:
            effectSizeResult.MeanValue2 = this.CalculateMeanValue(variableValues2);
            num1 = (int) num2 * -1472812192 ^ -1626430180;
            continue;
          case 1:
            double correlation = this.CalculateCorrelation(variableValues1, variableValues2);
            standardError = this.CalculateStandardError(effectSizeResult.Result, correlation, variableValues1.Count);
            num1 = (int) num2 * -264763482 ^ -509513633;
            continue;
          case 2:
            variableValues1 = this.GetVariableValues(this._cohensSettings.SelectedFirstVariable, this._excelDataSet);
            num1 = (int) num2 * 1732538731 ^ 1225424459;
            continue;
          case 3:
            effectSize = effectSizeResult;
            num1 = (int) num2 * -1055574686 ^ 533341819;
            continue;
          case 4:
            effectSizeResult.MeanValue1 = this.CalculateMeanValue(variableValues1);
            num1 = 353080350;
            continue;
          case 5:
            effectSizeResult.ConfidenceIntervalUpper = effectSizeResult.Result + standardError * 1.96;
            num1 = (int) num2 * -916469938 ^ -206812271;
            continue;
          case 6:
            num1 = (int) num2 * 1072301810 ^ 342710810;
            continue;
          case 7:
            num1 = (int) num2 * -835762032 ^ -578167973;
            continue;
          case 8:
            num1 = (int) num2 * 832595386 ^ 1016167552;
            continue;
          case 9:
            num1 = (int) num2 * -2074895663 ^ 51698947;
            continue;
          case 10:
            goto label_1;
          case 12:
            filterVariableValues = this.GetFilterVariableValues(this._cohensSettings, this._excelDataSet);
            this.RemoveEmptyVariables(variableValues1, variableValues2, filterVariableValues);
            num1 = (int) num2 * 913137279 ^ -1221624872;
            continue;
          case 13:
            this.ApplyFilterToVariables(this._cohensSettings.Filter, variableValues1, variableValues2, filterVariableValues);
            num1 = (int) num2 * -1979440450 ^ 2115650825;
            continue;
          case 14:
            double sigma = this.CalculateSigma(this._cohensSettings.SameVariances, variableValues1, variableValues2, effectSizeResult);
            effectSizeResult.Result = (effectSizeResult.MeanValue1 - effectSizeResult.MeanValue2) / sigma;
            num1 = (int) num2 * -18562039 ^ -854450395;
            continue;
          case 15:
            effectSizeResult.ConfidenceIntervalLower = effectSizeResult.Result - standardError * 1.96;
            num1 = (int) num2 * -1802897079 ^ 853033572;
            continue;
          case 16:
            int num3 = filterVariableValues != null ? 1987104565 : (num3 = 1264715206);
            num1 = num3 ^ (int) num2 * 1465566141;
            continue;
          case 17:
            variableValues2 = this.GetVariableValues(this._cohensSettings.SelectedSecondVariable, this._excelDataSet);
            num1 = (int) num2 * 1679125596 ^ 1489678448;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return effectSize;
    }

    private double CalculateCorrelation(
      List<double> firstVariableValues,
      List<double> secondVariableValues)
    {
      double meanValue1 = this.CalculateMeanValue(firstVariableValues);
label_1:
      int num1 = 589141184;
      double num2;
      double num3;
      double num4;
      double num5;
      int index1;
      int index2;
      bool flag;
      double meanValue2;
      double correlation;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1412047134)) % 17U)
        {
          case 0:
            num2 = 0.0;
            num3 = 0.0;
            index2 = 0;
            num1 = (int) num6 * -723662316 ^ 1726459258;
            continue;
          case 1:
            index1 = 0;
            num1 = (int) num6 * -830650459 ^ -1318985223;
            continue;
          case 2:
            int num7;
            num1 = num7 = index1 >= firstVariableValues.Count ? 1166580231 : (num7 = 1496625320);
            continue;
          case 3:
            flag = index2 < firstVariableValues.Count;
            num1 = 396877414;
            continue;
          case 4:
            correlation = num5;
            num1 = (int) num6 * -425727082 ^ 757968820;
            continue;
          case 5:
            int num8 = !flag ? -223418864 : (num8 = -588376096);
            num1 = num8 ^ (int) num6 * -1182270307;
            continue;
          case 6:
            ++index2;
            num1 = (int) num6 * 2017982175 ^ 1222967566;
            continue;
          case 7:
            num3 += CohensCalculator.\u206A⁫‎‭‮‎⁬‌‍‭​‎‏‌⁭‪‏‏‮​‌⁪⁫⁪‏‎⁫‪⁭⁭⁪⁭‫‭⁮⁫​⁭‮‌‮(secondVariableValues[index2] - meanValue2, 2.0);
            num1 = (int) num6 * -1705203746 ^ 757127610;
            continue;
          case 8:
            num2 += CohensCalculator.\u206A⁫‎‭‮‎⁬‌‍‭​‎‏‌⁭‪‏‏‮​‌⁪⁫⁪‏‎⁫‪⁭⁭⁪⁭‫‭⁮⁫​⁭‮‌‮(firstVariableValues[index2] - meanValue1, 2.0);
            num1 = 1355915280;
            continue;
          case 9:
            double num9 = CohensCalculator.\u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮(num2) * CohensCalculator.\u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮(num3);
            num5 = num4 / num9;
            num1 = (int) num6 * -40560382 ^ 184322368;
            continue;
          case 10:
            goto label_1;
          case 12:
            num4 = 0.0;
            num1 = (int) num6 * 402695377 ^ -1651864694;
            continue;
          case 13:
            num4 += (firstVariableValues[index1] - meanValue1) * (secondVariableValues[index1] - meanValue2);
            num1 = 2052829334;
            continue;
          case 14:
            num1 = (int) num6 * -217102201 ^ -1930537253;
            continue;
          case 15:
            ++index1;
            num1 = (int) num6 * 1009935513 ^ 376470174;
            continue;
          case 16:
            meanValue2 = this.CalculateMeanValue(secondVariableValues);
            num1 = (int) num6 * 147950807 ^ 1621715019;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return correlation;
    }

    private double CalculateStandardError(double d, double correlation, int count)
    {
label_1:
      int num1 = -1464793145;
      double num2;
      double standardError;
      double num3;
      double num4;
      double num5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1176183387)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            standardError = num2;
            num1 = (int) num6 * -200814465 ^ 715186913;
            continue;
          case 2:
            num2 = CohensCalculator.\u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮(num5);
            num1 = (int) num6 * -1573215297 ^ 722403650;
            continue;
          case 4:
            num3 = CohensCalculator.\u206A⁫‎‭‮‎⁬‌‍‭​‎‏‌⁭‪‏‏‮​‌⁪⁫⁪‏‎⁫‪⁭⁭⁪⁭‫‭⁮⁫​⁭‮‌‮(d, 2.0) / (double) (2 * (count - 1));
            num4 = (2.0 - correlation) / (double) count;
            num1 = (int) num6 * -1856905744 ^ 1082756468;
            continue;
          case 5:
            num5 = num3 + num4;
            num1 = (int) num6 * 6528672 ^ -1973440035;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return standardError;
    }

    private double CalculateSigma(
      bool sameVariances,
      List<double> firstVariableValues,
      List<double> secondVariableValues,
      EffectSizeResult effectSizeResult)
    {
      bool flag = sameVariances;
label_1:
      int num1 = -1331827173;
      double variance1;
      double num2;
      double variance2;
      double num3;
      double sigma;
      double num4;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num1 ^ -2118810640)) % 12U)
        {
          case 0:
            num4 = (double) (firstVariableValues.Count - 1) * variance2;
            num1 = (int) num5 * -431464566 ^ -687180319;
            continue;
          case 1:
            num1 = (int) num5 * 487293342 ^ 1425640348;
            continue;
          case 3:
            num3 = CohensCalculator.\u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮((num4 + num2) / (double) (firstVariableValues.Count + secondVariableValues.Count));
            num1 = (int) num5 * -1038271415 ^ 1360488521;
            continue;
          case 4:
            variance2 = this.CalculateVariance(firstVariableValues);
            effectSizeResult.StandardDeviation1 = CohensCalculator.\u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮(variance2);
            num1 = -789478469;
            continue;
          case 5:
            num2 = (double) (secondVariableValues.Count - 1) * variance1;
            num1 = (int) num5 * 952873875 ^ 1624854472;
            continue;
          case 6:
            sigma = num3;
            num1 = -1498359415;
            continue;
          case 7:
            int num6 = !flag ? 966235997 : (num6 = 1641854929);
            num1 = num6 ^ (int) num5 * -787611805;
            continue;
          case 8:
            num3 = CohensCalculator.\u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮(this.CalculateVariance(firstVariableValues));
            num1 = (int) num5 * 1308386899 ^ 1590287045;
            continue;
          case 9:
            num1 = (int) num5 * -854328989 ^ 1273827313;
            continue;
          case 10:
            goto label_1;
          case 11:
            variance1 = this.CalculateVariance(secondVariableValues);
            effectSizeResult.StandardDeviation2 = CohensCalculator.\u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮(variance1);
            num1 = (int) num5 * -850267565 ^ 271367321;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return sigma;
    }

    private double CalculateVariance(List<double> variableValues)
    {
label_1:
      int num1 = 580806102;
      double meanValue;
      double num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1803024463)) % 4U)
        {
          case 0:
            num2 = 0.0;
            num1 = (int) num3 * 1833578585 ^ -1633834895;
            continue;
          case 1:
            meanValue = this.CalculateMeanValue(variableValues);
            num1 = (int) num3 * -177827929 ^ -837665744;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      using (List<double>.Enumerator enumerator = variableValues.GetEnumerator())
      {
label_12:
        int num4 = !enumerator.MoveNext() ? 1295954016 : (num4 = 845691992);
        double current;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ 1803024463)) % 6U)
          {
            case 0:
              num4 = 845691992;
              continue;
            case 1:
              num4 = (int) num5 * -347491448 ^ 1949906129;
              continue;
            case 2:
              num2 += CohensCalculator.\u206A⁫‎‭‮‎⁬‌‍‭​‎‏‌⁭‪‏‏‮​‌⁪⁫⁪‏‎⁫‪⁭⁭⁪⁭‫‭⁮⁫​⁭‮‌‮(current - meanValue, 2.0);
              num4 = (int) num5 * -1914924549 ^ -1714987610;
              continue;
            case 3:
              current = enumerator.Current;
              num4 = 2001437319;
              continue;
            case 4:
              goto label_12;
            default:
              goto label_14;
          }
        }
      }
label_14:
      double variance = num2 / (double) (variableValues.Count - 1);
label_15:
      int num6 = 1478562368;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ 1803024463)) % 3U)
        {
          case 0:
            goto label_15;
          case 2:
            num6 = (int) num7 * -1589991968 ^ 746959492;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return variance;
    }

    private double CalculateMeanValue(List<double> variableValues)
    {
      double num1 = 0.0;
      using (List<double>.Enumerator enumerator = variableValues.GetEnumerator())
      {
label_7:
        int num2 = !enumerator.MoveNext() ? -1852642036 : (num2 = -11379770);
        double current;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ -2146963213)) % 6U)
          {
            case 0:
              goto label_7;
            case 1:
              current = enumerator.Current;
              num2 = -1150829154;
              continue;
            case 2:
              num2 = -11379770;
              continue;
            case 4:
              num2 = (int) num3 * 1306301636 ^ -743255401;
              continue;
            case 5:
              num1 += current;
              num2 = (int) num3 * -809688787 ^ -1159109132;
              continue;
            default:
              goto label_9;
          }
        }
      }
label_9:
      double num4 = num1 / (double) variableValues.Count;
label_10:
      int num5 = -1347727670;
      double meanValue;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num5 ^ -2146963213)) % 3U)
        {
          case 1:
            meanValue = num4;
            num5 = (int) num6 * 733121155 ^ -1582409062;
            continue;
          case 2:
            goto label_10;
          default:
            goto label_13;
        }
      }
label_13:
      return meanValue;
    }

    private void ApplyFilterToVariables(
      double filter,
      List<double> firstVariableValues,
      List<double> secondVariableValues,
      List<double> filterVariableValues)
    {
label_1:
      int num1 = -1978725237;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2145947554)) % 10U)
        {
          case 0:
            int num3 = filterVariableValues[index] != filter ? 2139313546 : (num3 = 1597890815);
            num1 = num3 ^ (int) num2 * 1286809147;
            continue;
          case 1:
            index = filterVariableValues.Count - 1;
            num1 = (int) num2 * 438179215 ^ 1378741701;
            continue;
          case 2:
            int num4;
            num1 = num4 = index >= 0 ? -714303158 : (num4 = -843159564);
            continue;
          case 3:
            secondVariableValues.RemoveAt(index);
            num1 = (int) num2 * -973945468 ^ -1958038617;
            continue;
          case 4:
            goto label_3;
          case 5:
            --index;
            num1 = (int) num2 * -2080032093 ^ 430432599;
            continue;
          case 6:
            num1 = -1121867822;
            continue;
          case 7:
            goto label_1;
          case 8:
            firstVariableValues.RemoveAt(index);
            num1 = (int) num2 * 14109159 ^ -1894012343;
            continue;
          case 9:
            num1 = -271721763;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    private List<double> GetFilterVariableValues(
      CohensSettings cohensSettings,
      ExcelDataSet excelDataSet)
    {
      List<double> doubleList = (List<double>) null;
label_1:
      int num1 = -697416496;
      bool flag;
      List<double> filterVariableValues;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -211381784)) % 9U)
        {
          case 0:
            doubleList = this.GetVariableValues(cohensSettings.SelectedFilterVariable, excelDataSet);
            num1 = (int) num2 * -32351043 ^ -312436729;
            continue;
          case 1:
            int num3 = !flag ? 1461629305 : (num3 = 1622938134);
            num1 = num3 ^ (int) num2 * -424916021;
            continue;
          case 2:
            flag = !CohensCalculator.\u202E⁮‪⁫⁮‫‍⁯‏‌​⁬⁬‭‏‪⁪‭‪‫‎⁯‫⁯⁯⁫⁪‫‍⁫⁫⁭‭‬‫‍‮⁯‮⁪‮(cohensSettings.SelectedFilterVariable);
            num1 = (int) num2 * 868776750 ^ 931616647;
            continue;
          case 3:
            num1 = (int) num2 * 524602293 ^ 407396732;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 475432194 ^ -1249347766;
            continue;
          case 7:
            num1 = (int) num2 * 1029713209 ^ 553387344;
            continue;
          case 8:
            filterVariableValues = doubleList;
            num1 = -1609518667;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return filterVariableValues;
    }

    private void RemoveEmptyVariables(
      List<double> firstVariableValues,
      List<double> secondVariableValues,
      List<double> filterVariableValues)
    {
label_1:
      int num1 = -1752773904;
      while (true)
      {
        uint num2;
        bool flag1;
        int index;
        bool flag2;
        bool flag3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1092797852)) % 21U)
        {
          case 0:
            num3 = double.IsNaN(secondVariableValues[index]) ? 1 : 0;
            break;
          case 1:
            index = firstVariableValues.Count - 1;
            num1 = (int) num2 * -2094333658 ^ 1803528562;
            continue;
          case 2:
            --index;
            num1 = -821174134;
            continue;
          case 3:
            num1 = (int) num2 * -1069101893 ^ -109977970;
            continue;
          case 4:
            goto label_1;
          case 5:
            int num4 = flag1 ? -1649925151 : (num4 = -297721263);
            num1 = num4 ^ (int) num2 * -333210877;
            continue;
          case 6:
            int num5 = flag3 ? -1438211470 : (num5 = -1102299966);
            num1 = num5 ^ (int) num2 * 1435836495;
            continue;
          case 7:
            num1 = -434574655;
            continue;
          case 8:
            goto label_3;
          case 9:
            num1 = (int) num2 * 918796831 ^ 1724539304;
            continue;
          case 10:
            secondVariableValues.RemoveAt(index);
            num1 = (int) num2 * 1580405167 ^ -531190808;
            continue;
          case 11:
            filterVariableValues.RemoveAt(index);
            num1 = (int) num2 * -82917926 ^ 1919197531;
            continue;
          case 12:
            int num6 = !flag2 ? -693636782 : (num6 = -551179430);
            num1 = num6 ^ (int) num2 * 1258018267;
            continue;
          case 13:
            num1 = -246671392;
            continue;
          case 14:
            num1 = (int) num2 * 1439586432 ^ -2020272487;
            continue;
          case 15:
            flag1 = index >= 0;
            num1 = -1553504240;
            continue;
          case 16:
            if (double.IsNaN(firstVariableValues[index]))
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 1060362877 ^ 317101777;
            continue;
          case 17:
            num1 = (int) num2 * 1266733940 ^ -1230831967;
            continue;
          case 18:
            flag3 = filterVariableValues != null;
            num1 = (int) num2 * -2089599617 ^ -1123714770;
            continue;
          case 19:
            firstVariableValues.RemoveAt(index);
            num1 = (int) num2 * 710664274 ^ -1049239652;
            continue;
          case 20:
            num1 = (int) num2 * -1515263794 ^ 1215868330;
            continue;
          default:
            goto label_26;
        }
        flag2 = num3 != 0;
        num1 = -1308779054;
      }
label_3:
      return;
label_26:;
    }

    private List<double> GetVariableValues(
      string selectedFilterVariable,
      ExcelDataSet excelDataSet)
    {
      bool flag1 = CohensCalculator.\u202E⁮‪⁫⁮‫‍⁯‏‌​⁬⁬‭‏‪⁪‭‪‫‎⁯‫⁯⁯⁫⁪‫‍⁫⁫⁭‭‬‫‍‮⁯‮⁪‮(selectedFilterVariable);
label_1:
      int num1 = -953599912;
      List<double> variableValues;
      List<double> doubleList;
      double result;
      int index1;
      int index2;
      string s;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -451444563)) % 30U)
        {
          case 0:
            num1 = -949109630;
            continue;
          case 1:
            goto label_9;
          case 2:
            doubleList = new List<double>();
            num1 = -589595133;
            continue;
          case 3:
            num1 = (int) num2 * 183381945 ^ -347967128;
            continue;
          case 4:
            doubleList.Add(double.NaN);
            num1 = (int) num2 * 268104625 ^ -379850888;
            continue;
          case 5:
            num1 = -55847880;
            continue;
          case 6:
            num1 = (int) num2 * -1035220803 ^ 311834392;
            continue;
          case 7:
            doubleList.Add(result);
            num1 = (int) num2 * -448652450 ^ 469612757;
            continue;
          case 8:
            num1 = -388943020;
            continue;
          case 9:
            num1 = -1058406463;
            continue;
          case 11:
            int num3 = !double.TryParse(s, out result) ? 2077042078 : (num3 = 1417533178);
            num1 = num3 ^ (int) num2 * 21531594;
            continue;
          case 12:
            index1 = 1;
            num1 = (int) num2 * 1805160954 ^ -781880259;
            continue;
          case 13:
            num1 = (int) num2 * -1991900678 ^ 1246513914;
            continue;
          case 14:
            index2 = ((IEnumerable<string>) excelDataSet.TrialDataRows[0].Values).ToList<string>().IndexOf(selectedFilterVariable);
            num1 = (int) num2 * 432233749 ^ -1637974671;
            continue;
          case 15:
            int num4 = flag1 ? -1128594800 : (num4 = -1111598782);
            num1 = num4 ^ (int) num2 * 892532779;
            continue;
          case 16:
            ++index1;
            num1 = (int) num2 * -174894656 ^ 1794092989;
            continue;
          case 17:
            int num5 = CohensCalculator.\u200C⁮‫‪‬⁫‏‭‪‬⁭‫‌‫⁭‍‬‍⁯⁮⁯‫‫‫‮​⁫‪‎⁭‭‪‪⁮‎‬‬⁭‫⁯‮(s, string.Empty) ? -227563576 : (num5 = -1997202855);
            num1 = num5 ^ (int) num2 * 2008955673;
            continue;
          case 18:
            num1 = (int) num2 * 1124038138 ^ 438477596;
            continue;
          case 19:
            num1 = (int) num2 * -332281784 ^ -306852191;
            continue;
          case 20:
            num1 = (int) num2 * 1311524519 ^ -2053273711;
            continue;
          case 21:
            num1 = -188829766;
            continue;
          case 22:
            variableValues = (List<double>) null;
            num1 = (int) num2 * 564461363 ^ 301737805;
            continue;
          case 23:
            s = excelDataSet.TrialDataRows[index1].Values[index2] ?? string.Empty;
            num1 = -365378444;
            continue;
          case 24:
            flag2 = index1 < excelDataSet.TrialDataRows.Count;
            num1 = -469353686;
            continue;
          case 25:
            int num6 = !flag2 ? 143453542 : (num6 = 1064578410);
            num1 = num6 ^ (int) num2 * -1399911575;
            continue;
          case 26:
            num1 = (int) num2 * -1836629998 ^ -2021982997;
            continue;
          case 27:
            goto label_1;
          case 28:
            variableValues = doubleList;
            num1 = (int) num2 * 1018663916 ^ 870984598;
            continue;
          case 29:
            num1 = (int) num2 * -221370250 ^ 1045343335;
            continue;
          default:
            goto label_31;
        }
      }
label_9:
      throw CohensCalculator.\u206A⁮‎⁪‪‬⁬‍⁭‪‭‪‬‏​‫‪⁯⁮‎⁮‌⁯‏‍⁯⁯‭⁮⁫‏‌⁮⁯⁭‎‮⁬‌‌‮(\u003CModule\u003E.\u202E⁫⁬⁬⁯‪‏​‍‏⁯‎⁪​‌‭⁪⁯‌‏‏​⁪‮‎‮‌​‪‍‏​‪‪⁫‬‪‮⁫‭‮<string>(1652552916U));
label_31:
      return variableValues;
    }

    static double \u206A⁫‎‭‮‎⁬‌‍‭​‎‏‌⁭‪‏‏‮​‌⁪⁫⁪‏‎⁫‪⁭⁭⁪⁭‫‭⁮⁫​⁭‮‌‮([In] double obj0, [In] double obj1) => Math.Pow(obj0, obj1);

    static double \u202D‮‮⁬⁭⁮⁭‎⁫⁬‫⁬⁫⁭⁪‫‫‮⁪‫‏‌⁭‬‭⁯⁪⁯⁯‪‬⁪‬⁪‪⁫‎‭​‌‮([In] double obj0) => Math.Sqrt(obj0);

    static bool \u202E⁮‪⁫⁮‫‍⁯‏‌​⁬⁬‭‏‪⁪‭‪‫‎⁯‫⁯⁯⁫⁪‫‍⁫⁫⁭‭‬‫‍‮⁯‮⁪‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static bool \u200C⁮‫‪‬⁫‏‭‪‬⁭‫‌‫⁭‍‬‍⁯⁮⁯‫‫‫‮​⁫‪‎⁭‭‪‪⁮‎‬‬⁭‫⁯‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static InvalidOperationException \u206A⁮‎⁪‪‬⁬‍⁭‪‭‪‬‏​‫‪⁯⁮‎⁮‌⁯‏‍⁯⁯‭⁮⁫‏‌⁮⁯⁭‎‮⁬‌‌‮(
      [In] string obj0)
    {
      return new InvalidOperationException(obj0);
    }
  }
}
