// Decompiled with JetBrains decompiler
// Type: Fm49.Xz10
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using Dx4;
using System;
using System.ComponentModel;
using System.Data.Linq.Mapping;
using System.Runtime.InteropServices;
using System.Threading;

namespace Fm49
{
  [Table(Name = "dbo.netpay")]
  public class Xz10 : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs Ⴅ = new PropertyChangingEventArgs(string.Empty);
    private int _payroll_id;
    private string _people_id;
    private int? _total_attendance;
    private int? _total_absence;
    private Decimal? _final_pay;
    private DateTime? _generated_date;
    private Decimal? _ttl_mandatory_ddt;
    private Decimal? _ttl_deduction;
    private PropertyChangedEventHandler Ⴃ;
    private Tf6.Qo9 Ⴀ = new Tf6.Qo9();

    [Column(DbType = "Int NOT NULL", IsPrimaryKey = true, Storage = "_payroll_id")]
    public int Ⴐ
    {
      get => this._payroll_id;
      [param: In] set
      {
        if (this._payroll_id == value)
          return;
        this.b0B6();
        this._payroll_id = value;
        this.Er0y("payroll_id");
      }
    }

    [Column(DbType = "VarChar(15)", Storage = "_people_id")]
    public string Ⴗ
    {
      get => (IComparable) this._people_id as string;
      [param: In] set
      {
        if (string.Equals(this._people_id, value))
          return;
        this.b0B6();
        this._people_id = value;
        this.Er0y("people_id");
      }
    }

    [Column(DbType = "Int", Storage = "_total_attendance")]
    public int? Ⴅ
    {
      get => this._total_attendance;
      [param: In] set
      {
        if (this._total_attendance.Equals((object) value))
          return;
        this.b0B6();
        this._total_attendance = value;
        this.Er0y("total_attendance");
      }
    }

    [Column(DbType = "Int", Storage = "_total_absence")]
    public int? Ⴐ
    {
      get => this._total_absence;
      [param: In] set
      {
        if (this._total_absence.Equals((object) value))
          return;
        this.b0B6();
        this._total_absence = value;
        this.Er0y("total_absence");
      }
    }

    [Column(DbType = "Decimal(18,2)", Storage = "_final_pay")]
    public Decimal? Ⴅ
    {
      get => this._final_pay;
      [param: In] set
      {
        if (this._final_pay.Equals((object) value))
          return;
        this.b0B6();
        this._final_pay = value;
        this.Er0y("final_pay");
      }
    }

    [Column(DbType = "Date", Storage = "_generated_date")]
    public DateTime? Ⴓ
    {
      get => this._generated_date;
      [param: In] set
      {
        if (this._generated_date.Equals((object) value))
          return;
        this.b0B6();
        this._generated_date = value;
        this.Er0y("generated_date");
      }
    }

    [Column(DbType = "Decimal(18,2)", Storage = "_ttl_mandatory_ddt")]
    public Decimal? Ⴗ
    {
      get => this._ttl_mandatory_ddt;
      [param: In] set
      {
        if (this._ttl_mandatory_ddt.Equals((object) value))
          return;
        this.b0B6();
        this._ttl_mandatory_ddt = value;
        this.Er0y("ttl_mandatory_ddt");
      }
    }

    [Column(DbType = "Decimal(18,2)", Storage = "_ttl_deduction")]
    public Decimal? Ⴐ
    {
      get => this._ttl_deduction;
      [param: In] set
      {
        if (this._ttl_deduction.Equals((object) value))
          return;
        this.b0B6();
        this._ttl_deduction = value;
        this.Er0y("ttl_deduction");
      }
    }

    public event PropertyChangingEventHandler Ⴐ
    {
      add
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴀ.Ⴅ;
        object comparand;
        do
        {
          comparand = (object) (multicastDelegate as PropertyChangingEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴀ.Ⴅ, (object) ((comparand as PropertyChangingEventHandler) + value) as PropertyChangingEventHandler, (PropertyChangingEventHandler) comparand);
        }
        while (multicastDelegate as PropertyChangingEventHandler != comparand as PropertyChangingEventHandler);
      }
      remove
      {
        object obj1 = (object) this.Ⴀ.Ⴅ;
        object obj2;
        do
        {
          obj2 = (object) (obj1 as PropertyChangingEventHandler);
          obj1 = (object) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴀ.Ⴅ, (MulticastDelegate) Delegate.Remove((Delegate) obj2, (Delegate) value) as PropertyChangingEventHandler, (PropertyChangingEventHandler) obj2);
        }
        while (obj1 as PropertyChangingEventHandler != obj2 as PropertyChangingEventHandler);
      }
    }

    public event PropertyChangedEventHandler Ⴓ
    {
      add
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴃ;
        object comparand;
        do
        {
          comparand = (object) (multicastDelegate as PropertyChangedEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴃ, (MulticastDelegate) ((comparand as PropertyChangedEventHandler) + value) as PropertyChangedEventHandler, comparand as PropertyChangedEventHandler);
        }
        while ((PropertyChangedEventHandler) multicastDelegate != (PropertyChangedEventHandler) comparand);
      }
      remove
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴃ;
        MulticastDelegate comparand;
        do
        {
          comparand = (MulticastDelegate) (multicastDelegate as PropertyChangedEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴃ, (MulticastDelegate) ((comparand as PropertyChangedEventHandler) - value) as PropertyChangedEventHandler, (PropertyChangedEventHandler) comparand);
        }
        while (multicastDelegate as PropertyChangedEventHandler != (PropertyChangedEventHandler) comparand);
      }
    }

    protected virtual void b0B6()
    {
      if (this.Ⴀ.Ⴅ == null)
        return;
      MulticastDelegate ⴅ = (MulticastDelegate) this.Ⴀ.Ⴅ;
      if ((PropertyChangingEventHandler) ⴅ == null)
        return;
      ((PropertyChangingEventHandler) ⴅ)((object) this, Xz10.Ⴅ);
    }

    protected virtual void Er0y([In] string obj0)
    {
      if (this.Ⴃ == null)
        return;
      object ⴃ = (object) this.Ⴃ;
      if ((PropertyChangedEventHandler) ⴃ == null)
        return;
      (ⴃ as PropertyChangedEventHandler)((object) this, new PropertyChangedEventArgs(obj0));
    }
  }
}
