// Decompiled with JetBrains decompiler
// Type: CustomWindowsForm.ShapedButton
// Assembly: Yashma ransomware builder v1.2, Version=2.0.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 22C18137-3576-4359-994F-BB1A6613DCFC
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-VirTool.MSIL.Agent.gen-f9a5a72ead096594c5d59abe706e3716f6000c3b4ebd7690f2eb114a37d1a7db.exe

using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace CustomWindowsForm
{
  public class ShapedButton : Button
  {
    private Color clr1;
    private Color clr2;
    private Color color1 = Color.DodgerBlue;
    private Color color2 = Color.MidnightBlue;
    private Color m_hovercolor1 = Color.Turquoise;
    private Color m_hovercolor2 = Color.DarkSlateGray;
    private int color1Transparent = 250;
    private int color2Transparent = 250;
    private Color clickcolor1 = Color.Yellow;
    private Color clickcolor2 = Color.Red;
    private int angle = 90;
    private int textX = 100;
    private int textY = 25;
    private string text = "";
    public Color buttonborder = Color.FromArgb(220, 220, 220);
    public bool showButtonText = true;
    public int borderWidth = 2;
    public Color borderColor = Color.Transparent;
    private ShapedButton.ButtonsShapes buttonShape;

    public ShapedButton.ButtonsShapes ButtonShape
    {
      get => this.buttonShape;
      set
      {
        this.buttonShape = value;
        this.Invalidate();
      }
    }

    public string ButtonText
    {
      get => this.text;
      set
      {
        this.text = value;
        this.Invalidate();
      }
    }

    public int BorderWidth
    {
      get => this.borderWidth;
      set
      {
        this.borderWidth = value;
        this.Invalidate();
      }
    }

    private void SetBorderColor(Color bdrColor)
    {
      int red = (int) bdrColor.R - 40;
      int green = (int) bdrColor.G - 40;
      int blue = (int) bdrColor.B - 40;
      if (red < 0)
        red = 0;
      if (green < 0)
        green = 0;
      if (blue < 0)
        blue = 0;
      this.buttonborder = Color.FromArgb(red, green, blue);
    }

    public Color BorderColor
    {
      get => this.borderColor;
      set
      {
        this.borderColor = value;
        if (this.borderColor == Color.Transparent)
          this.buttonborder = Color.FromArgb(220, 220, 220);
        else
          this.SetBorderColor(this.borderColor);
      }
    }

    public Color StartColor
    {
      get => this.color1;
      set
      {
        this.color1 = value;
        this.Invalidate();
      }
    }

    public Color EndColor
    {
      get => this.color2;
      set
      {
        this.color2 = value;
        this.Invalidate();
      }
    }

    public Color MouseHoverColor1
    {
      get => this.m_hovercolor1;
      set
      {
        this.m_hovercolor1 = value;
        this.Invalidate();
      }
    }

    public Color MouseHoverColor2
    {
      get => this.m_hovercolor2;
      set
      {
        this.m_hovercolor2 = value;
        this.Invalidate();
      }
    }

    public Color MouseClickColor1
    {
      get => this.clickcolor1;
      set
      {
        this.clickcolor1 = value;
        this.Invalidate();
      }
    }

    public Color MouseClickColor2
    {
      get => this.clickcolor2;
      set
      {
        this.clickcolor2 = value;
        this.Invalidate();
      }
    }

    public int Transparent1
    {
      get => this.color1Transparent;
      set
      {
        this.color1Transparent = value;
        if (this.color1Transparent > (int) byte.MaxValue)
        {
          this.color1Transparent = (int) byte.MaxValue;
          this.Invalidate();
        }
        else
          this.Invalidate();
      }
    }

    public int Transparent2
    {
      get => this.color2Transparent;
      set
      {
        this.color2Transparent = value;
        if (this.color2Transparent > (int) byte.MaxValue)
        {
          this.color2Transparent = (int) byte.MaxValue;
          this.Invalidate();
        }
        else
          this.Invalidate();
      }
    }

    public int GradientAngle
    {
      get => this.angle;
      set
      {
        this.angle = value;
        this.Invalidate();
      }
    }

    public int TextLocation_X
    {
      get => this.textX;
      set
      {
        this.textX = value;
        this.Invalidate();
      }
    }

    public int TextLocation_Y
    {
      get => this.textY;
      set
      {
        this.textY = value;
        this.Invalidate();
      }
    }

    public bool ShowButtontext
    {
      get => this.showButtonText;
      set
      {
        this.showButtonText = value;
        this.Invalidate();
      }
    }

    public ShapedButton()
    {
      this.Size = new Size(100, 40);
      this.BackColor = Color.Transparent;
      this.FlatStyle = FlatStyle.Flat;
      this.FlatAppearance.BorderSize = 0;
      this.FlatAppearance.MouseOverBackColor = Color.Transparent;
      this.FlatAppearance.MouseDownBackColor = Color.Transparent;
      this.text = this.Text;
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      base.OnMouseEnter(e);
      this.clr1 = this.color1;
      this.clr2 = this.color2;
      this.color1 = this.m_hovercolor1;
      this.color2 = this.m_hovercolor2;
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      base.OnMouseLeave(e);
      this.color1 = this.clr1;
      this.color2 = this.clr2;
      this.SetBorderColor(this.borderColor);
    }

    protected override void OnMouseDown(MouseEventArgs mevent)
    {
      base.OnMouseDown(mevent);
      this.color1 = this.clickcolor1;
      this.color2 = this.clickcolor2;
      this.buttonborder = this.borderColor;
      this.SetBorderColor(this.borderColor);
      this.Invalidate();
    }

    protected override void OnMouseUp(MouseEventArgs mevent)
    {
      base.OnMouseUp(mevent);
      this.OnMouseLeave((EventArgs) mevent);
      this.color1 = this.clr1;
      this.color2 = this.clr2;
      this.SetBorderColor(this.borderColor);
      this.Invalidate();
    }

    protected override void OnLostFocus(EventArgs e)
    {
      base.OnLostFocus(e);
      this.color1 = this.clr1;
      this.color2 = this.clr2;
      this.Invalidate();
    }

    protected override void OnResize(EventArgs e)
    {
      base.OnResize(e);
      this.textX = this.Width / 3 - 1;
      this.textY = this.Height / 3 + 5;
    }

    private void DrawCircularButton(Graphics g)
    {
      Brush brush = (Brush) new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(this.color1Transparent, this.color1), Color.FromArgb(this.color2Transparent, this.color2), (float) this.angle);
      g.FillEllipse(brush, 5, 5, this.Width - 10, this.Height - 10);
      for (int index = 0; index < this.borderWidth; ++index)
        g.DrawEllipse(new Pen((Brush) new SolidBrush(this.buttonborder)), 5 + index, 5, this.Width - 10, this.Height - 10);
      if (this.showButtonText)
      {
        Point point = new Point(this.textX, this.textY);
        SolidBrush solidBrush = new SolidBrush(this.ForeColor);
        g.DrawString(this.text, this.Font, (Brush) solidBrush, (PointF) point);
      }
      brush.Dispose();
    }

    private void DrawRoundRectangularButton(Graphics g)
    {
      Brush brush = (Brush) new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(this.color1Transparent, this.color1), Color.FromArgb(this.color2Transparent, this.color2), (float) this.angle);
      Region region = new Region(new Rectangle(5, 5, this.Width, this.Height));
      GraphicsPath path = new GraphicsPath();
      path.AddArc(5, 5, 40, 40, 180f, 90f);
      path.AddLine(25, 5, this.Width - 25, 5);
      path.AddArc(this.Width - 45, 5, 40, 40, 270f, 90f);
      path.AddLine(this.Width - 5, 25, this.Width - 5, this.Height - 25);
      path.AddArc(this.Width - 45, this.Height - 45, 40, 40, 0.0f, 90f);
      path.AddLine(25, this.Height - 5, this.Width - 25, this.Height - 5);
      path.AddArc(5, this.Height - 45, 40, 40, 90f, 90f);
      path.AddLine(5, 25, 5, this.Height - 25);
      region.Intersect(path);
      g.FillRegion(brush, region);
      for (int index = 0; index < this.borderWidth; ++index)
      {
        g.DrawArc(new Pen(this.buttonborder), 5 + index, 5 + index, 40, 40, 180, 90);
        g.DrawLine(new Pen(this.buttonborder), 25, 5 + index, this.Width - 25, 5 + index);
        g.DrawArc(new Pen(this.buttonborder), this.Width - 45 - index, 5 + index, 40, 40, 270, 90);
        g.DrawLine(new Pen(this.buttonborder), 5 + index, 25, 5 + index, this.Height - 25);
        g.DrawLine(new Pen(this.buttonborder), this.Width - 5 - index, 25, this.Width - 5 - index, this.Height - 25);
        g.DrawArc(new Pen(this.buttonborder), this.Width - 45 - index, this.Height - 45 - index, 40, 40, 0, 90);
        g.DrawLine(new Pen(this.buttonborder), 25, this.Height - 5 - index, this.Width - 25, this.Height - 5 - index);
        g.DrawArc(new Pen(this.buttonborder), 5 + index, this.Height - 45 - index, 40, 40, 90, 90);
      }
      if (this.showButtonText)
      {
        Point point = new Point(this.textX, this.textY);
        SolidBrush solidBrush = new SolidBrush(this.ForeColor);
        g.DrawString(this.text, this.Font, (Brush) solidBrush, (PointF) point);
      }
      brush.Dispose();
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      switch (this.buttonShape)
      {
        case ShapedButton.ButtonsShapes.RoundRect:
          this.DrawRoundRectangularButton(e.Graphics);
          break;
        case ShapedButton.ButtonsShapes.Circle:
          this.DrawCircularButton(e.Graphics);
          break;
      }
    }

    public enum ButtonsShapes
    {
      RoundRect,
      Circle,
    }
  }
}
