// Decompiled with JetBrains decompiler
// Type: ProjNet.Consumers.Tokenizer
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using ProjNet.Shared;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;

namespace ProjNet.Consumers
{
  public class Tokenizer : Field, Factory, Worker
  {
    private List<Interceptor> m_Predicate;
    private string m_System;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Tokenizer(
      string info,
      List<Interceptor> ivk,
      string template,
      string value2,
      long key3,
      string task4,
      string pred5,
      string reference6)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector(template, value2, key3, task4, reference6, pred5);
      this.m_Predicate = ivk;
      this.m_System = info;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CloneState() => this.m_Predicate.Count;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal List<Interceptor> ResetProcess() => this.m_Predicate;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void SelectProcess(List<Interceptor> item) => this.m_Predicate = item;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Interceptor VisitConfiguration(int indexOf_def) => this.m_Predicate[indexOf_def];

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Interceptor VisitConfiguration(string init)
    {
      int num1 = 3;
      List<Interceptor>.Enumerator enumerator;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              enumerator = this.m_Predicate.GetEnumerator();
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_2;
            case 1:
            case 2:
              goto label_2;
            case 4:
              goto label_17;
            default:
              goto label_15;
          }
        }
label_15:
        num1 = 4;
      }
label_2:
      Interceptor interceptor;
      try
      {
label_10:
        while (enumerator.MoveNext())
        {
          Interceptor current = enumerator.Current;
          int num3 = 2;
          while (true)
          {
            int num4 = num3;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 2:
                  goto label_6;
                case 1:
                case 3:
                  goto label_4;
                case 4:
                  goto label_17;
                default:
                  num4 = 3;
                  continue;
              }
            }
label_4:
            bool flag;
            if (flag)
            {
              interceptor = current;
              num3 = 4;
              continue;
            }
            goto label_10;
label_6:
            flag = current.Name.Equals(init, StringComparison.OrdinalIgnoreCase);
            goto label_4;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      interceptor = (Interceptor) null;
label_17:
      return interceptor;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string InitConfiguration() => this.m_System;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 3;
      if (true)
        goto label_3;
label_1:
      if (string.IsNullOrEmpty(this.LoginState()) || this.RestartState() <= 0L)
        goto label_6;
      else
        goto label_5;
label_2:
      int num2;
      num1 = num2;
label_3:
      StringBuilder stringBuilder;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_7;
          case 1:
            goto label_5;
          case 2:
          case 4:
            goto label_1;
          case 5:
            stringBuilder.AppendFormat("PROJECTION[\"{0}\"", (object) this.Name);
            int num3 = 4;
            num1 = Tokenizer.LoginDescriptor() ? num3 : num3;
            continue;
          case 6:
            goto label_9;
          default:
            goto label_4;
        }
      }
label_4:
      num2 = 1;
      goto label_2;
label_7:
      stringBuilder = new StringBuilder();
      num2 = 5;
      goto label_2;
label_9:
      string str;
      return str;
label_5:
      stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.LoginState(), (object) this.RestartState());
label_6:
      stringBuilder.Append("]");
      str = stringBuilder.ToString();
      num2 = 6;
      goto label_2;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState()
    {
      int num1 = 0;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
              stringBuilder = new StringBuilder();
              if (!Tokenizer.LoginDescriptor())
              {
                num2 = 3;
                continue;
              }
              goto label_17;
            case 1:
            case 3:
              stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_Projection Classname=\"{0}\">{1}", new object[2]
              {
                (object) this.InitConfiguration(),
                (object) this.AddProcess()
              });
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 0;
            case 2:
            case 4:
              goto label_1;
            case 5:
              goto label_5;
            case 6:
              goto label_17;
            default:
              goto label_4;
          }
        }
label_1:
        List<Interceptor>.Enumerator enumerator = this.ResetProcess().GetEnumerator();
        goto label_5;
label_4:
        num1 = 5;
        continue;
label_5:
        try
        {
label_10:
          while (enumerator.MoveNext())
          {
            Interceptor current = enumerator.Current;
            int num3 = 2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_7;
                case 1:
                case 3:
                  goto label_10;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_7:
            stringBuilder.Append(current.LogoutProcess());
          }
        }
        finally
        {
          enumerator.Dispose();
        }
        stringBuilder.Append("</CS_Projection>");
        str = stringBuilder.ToString();
        num1 = 6;
      }
label_17:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object item)
    {
      int num1 = 5;
      if (true)
        goto label_14;
label_1:
      bool flag1;
      int indexOf_def;
      Tokenizer tokenizer;
      int num2;
      if (flag1)
      {
        if (true)
        {
          num1 = 6;
          goto label_14;
        }
        else
          goto label_22;
      }
      else
      {
        tokenizer = item as Tokenizer;
        if (tokenizer.CloneState() == this.CloneState())
        {
          indexOf_def = 0;
          goto label_19;
        }
        else
          num2 = 7;
      }
label_13:
      num1 = num2;
label_14:
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            flag1 = !(item is Tokenizer);
            if (Tokenizer.TestDescriptor())
            {
              num1 = 1;
              continue;
            }
            goto case 3;
          case 1:
            goto label_1;
          case 2:
          case 6:
            goto label_16;
          case 3:
            if (!flag2)
            {
              ++indexOf_def;
              if (true)
              {
                num1 = 8;
                continue;
              }
              goto label_12;
            }
            else
              goto label_10;
          case 4:
          case 9:
            goto label_22;
          case 7:
            goto label_12;
          case 8:
            goto label_19;
          default:
            num1 = 4;
            continue;
        }
      }
label_10:
      bool flag3 = false;
      goto label_22;
label_12:
      flag3 = false;
      goto label_22;
label_16:
      flag3 = false;
      goto label_22;
label_19:
      if (indexOf_def < this.m_Predicate.Count)
      {
        Interceptor interceptor = this.VisitConfiguration(tokenizer.VisitConfiguration(indexOf_def).Name);
        if (interceptor == null)
        {
          flag3 = false;
        }
        else
        {
          flag2 = interceptor.LoginProcess() != tokenizer.VisitConfiguration(indexOf_def).LoginProcess();
          num2 = 3;
          goto label_13;
        }
      }
      else
      {
        flag3 = true;
        num2 = 9;
        goto label_13;
      }
label_22:
      return flag3;
    }

    internal static bool TestDescriptor() => true;

    internal static bool LoginDescriptor() => false;
  }
}
