// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Square
// Assembly: Yo, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C4B4A9-DF91-4C66-8221-B310119D49D7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9fa98d845147978f040107c6d725a2b12ba15c204c54ed6d726c0780b40c68c3.exe

using SimpleChessApp.Extras;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  [ToolboxItem(false)]
  public class Square : SimpleSquare
  {
    public int File;
    public int Rank;
    public string Name;
    public Board Board;
    private string msg;
    private IContainer components = (IContainer) null;

    public static event EventHandler Action
    {
      add
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -1968670533;
        EventHandler comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -651756908)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              EventHandler eventHandler2 = (EventHandler) Square.\u200C​⁫​⁫⁪‍‍‪‏‌⁮⁫‬‌⁯‭‍⁮​‭⁮⁭⁬‌‭‭‎‪‬‌⁫⁭‍​⁬⁫​‌‮‮((Delegate) comparand, (Delegate) value);
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              int num3 = eventHandler1 != comparand ? 1914756178 : (num3 = 446995635);
              num1 = num3 ^ (int) num2 * -600863335;
              continue;
            case 2:
              goto label_3;
            case 3:
              comparand = eventHandler1;
              num1 = -98977467;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler eventHandler1 = Square.Action;
label_1:
        int num1 = -57497802;
        EventHandler comparand;
        EventHandler eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -169049692)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              int num3 = eventHandler1 == comparand ? -875174066 : (num3 = -718229382);
              num1 = num3 ^ (int) num2 * 133178334;
              continue;
            case 2:
              goto label_3;
            case 3:
              eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref Square.Action, eventHandler2, comparand);
              num1 = (int) num2 * 1359346209 ^ -88688573;
              continue;
            case 4:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler) Square.\u206B⁮⁮‍‍‬​‫‎⁯‍⁫‮‌⁭‫‪⁮⁫‎⁮​⁪‎‏‭‌‪⁭⁯​​‬⁮‫⁯⁪⁫‭‭‮((Delegate) comparand, (Delegate) value);
              num1 = -1593935335;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public string SpecialName
    {
      get
      {
label_1:
        int num1 = 72449494;
        string specialName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 469672746)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              specialName = Square.\u206F‏‎⁫‭⁪⁫⁮‭⁬‪⁭‬⁪⁪⁭‍⁮⁪‬‮‭⁪⁯‍‮‮⁮⁯⁫‌​​⁬⁬‭‬‫⁪⁮‮(this.CurrentSquare, \u003CModule\u003E.\u202B‎⁫⁮⁪‬⁭‬⁬‏‭‌⁮​‏⁭⁪‌⁫‌⁭‪‬⁪‎⁫⁮⁬⁭⁪⁯‪‫‫⁪‌‭‮⁫‭‮<string>(4094054920U), Square.\u206B‌‫​‎‭⁫⁬⁭‍‪⁭⁮‭‫‮⁭‮⁮​‎⁯⁯⁮‬⁯‪⁪‭‮‌‫‫‍​⁬‍‪‪‪‮((object) this.Piece));
              num1 = (int) num2 * 2134425145 ^ 1571805714;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return specialName;
      }
    }

    public string CurrentSquare
    {
      get
      {
        char ch = Square.\u200C⁯‎‏⁭⁪‍⁮‪‪⁫⁯⁮‏⁫‮​⁮⁮‫‬⁮⁫‫‌‭‏⁬⁪‫‮‬‭‫‮⁬‮⁫⁫‌‮(\u003CModule\u003E.\u202A⁭‬‍‏‭‍⁮⁪‍⁮‮‍‮‫‮⁪⁯‮‍​⁪⁫⁭‎⁭⁮​‏⁯‪‪‍⁬‌‮‬⁮‮<string>(1965877243U), this.File);
label_1:
        int num1 = -508238755;
        string currentSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1907221820)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              currentSquare = Square.\u206A⁭‏‭⁮‫‌⁮‮⁫⁫⁮‭⁯⁫‫‍‍‭‍⁫⁮⁫‌​⁬‫‫⁫⁪⁮‮‪⁮‮⁫‪⁪‮‍‮(ch.ToString(), (this.Rank + 1).ToString());
              num1 = (int) num2 * 576096192 ^ 1512649006;
              continue;
            case 2:
              num1 = (int) num2 * -902682896 ^ 1779054231;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return currentSquare;
      }
    }

    public static void action(string msg)
    {
label_1:
      int num1 = 1565170249;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1505044878)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 470379190 ^ -803063469;
            continue;
          case 3:
            EventHandler action = Square.Action;
            if (action != null)
            {
              action((object) msg, (EventArgs) null);
              num1 = (int) num2 * -10070167 ^ -658026749;
              continue;
            }
            goto label_5;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public Square(int file, int rank, Board Board)
      : this()
    {
label_1:
      int num1 = 2025404573;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 29777908)) % 5U)
        {
          case 0:
            this.Name = Square.\u206A⁭‏‭⁮‫‌⁮‮⁫⁫⁮‭⁯⁫‫‍‍‭‍⁫⁮⁫‌​⁬‫‫⁫⁪⁮‮‪⁮‮⁫‪⁪‮‍‮(Square.\u200C⁯‎‏⁭⁪‍⁮‪‪⁫⁯⁮‏⁫‮​⁮⁮‫‬⁮⁫‫‌‭‏⁬⁪‫‮‬‭‫‮⁬‮⁫⁫‌‮(\u003CModule\u003E.\u200C‫‌‍‭​‫⁬‮‬‫⁪‫‪‫‪⁬⁯⁫‎‎‌‬‬‮⁬‍‭‌⁫⁯‮⁭⁬‍⁮‫‭‏‬‮<string>(260632063U), file).ToString(), (this.Rank + 1).ToString());
            num1 = (int) num2 * 175995948 ^ -733614377;
            continue;
          case 1:
            num1 = (int) num2 * 1992665442 ^ -1191689594;
            continue;
          case 2:
            this.Board = Board;
            this.File = file;
            this.Rank = rank;
            num1 = (int) num2 * -1064441807 ^ -1183239265;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public Square()
    {
label_1:
      int num1 = 1744466901;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 100931684)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Click += new EventHandler<MouseEventArgs>(this.Square_MouseClick);
            num1 = (int) num2 * 1544448673 ^ -1956105891;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1369988237 ^ 17513906;
            continue;
          case 4:
            this.InitializeComponent();
            num1 = (int) num2 * -805639341 ^ 431418709;
            continue;
          case 5:
            num1 = (int) num2 * -1665675542 ^ 1570754966;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void SwitchPlayer()
    {
label_1:
      int num1 = -1770256866;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1215251104)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = -444301387;
            continue;
          case 2:
            flag1 = !this.Board.DisableTurns;
            num1 = (int) num2 * 740778371 ^ -1220866467;
            continue;
          case 3:
            int num3 = !flag1 ? -942242980 : (num3 = -577266617);
            num1 = num3 ^ (int) num2 * -1367792305;
            continue;
          case 4:
            flag2 = this.Board.WhosPlaying == PieceColor.White;
            num1 = (int) num2 * -321686667 ^ -107744859;
            continue;
          case 5:
            int num4 = !flag2 ? 893533799 : (num4 = 710629795);
            num1 = num4 ^ (int) num2 * 527621757;
            continue;
          case 6:
            this.Board.WhosPlaying = PieceColor.White;
            num1 = -1525167759;
            continue;
          case 7:
            num1 = (int) num2 * 223934919 ^ 13391930;
            continue;
          case 8:
            this.Board.WhosPlaying = PieceColor.Black;
            num1 = (int) num2 * 459786869 ^ -1564245223;
            continue;
          case 9:
            goto label_3;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    private bool getSide(Square x)
    {
      if (this.Board.DisableTurns)
        goto label_4;
label_1:
      int num1 = 1654109543;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 694836021)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1985130139 ^ 609032001;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = this.Board.WhosPlaying == x.Piece.Color ? 1 : 0;
      goto label_5;
label_7:
      bool side;
      return side;
label_4:
      num3 = 1;
label_5:
      side = num3 != 0;
      num1 = 129774538;
      goto label_2;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 1046985487;
      while (true)
      {
        uint num2;
        bool flag1;
        bool side;
        bool flag2;
        bool flag3;
        bool flag4;
        bool disableTurns;
        bool flag5;
        List<PossibleMoves> move;
        bool flag6;
        int num3;
        int num4;
        Square to;
        switch ((num2 = (uint) (num1 ^ 1496756548)) % 78U)
        {
          case 0:
            int num5 = !disableTurns ? 1151080023 : (num5 = 723901460);
            num1 = num5 ^ (int) num2 * 1615309572;
            continue;
          case 1:
            num1 = (int) num2 * -593898466 ^ 1506893519;
            continue;
          case 2:
            num1 = (int) num2 * 1622806287 ^ 1056693249;
            continue;
          case 3:
            num1 = 87690809;
            continue;
          case 4:
            num1 = 1178545369;
            continue;
          case 5:
            num1 = (int) num2 * -154521283 ^ 913953637;
            continue;
          case 6:
            move = this.Board.lights.MoveList[this.Board.From.Piece.Id];
            this.msg = Square.\u202A‍⁭⁯⁪‭​‪‫‬⁪⁭‪⁬⁫​⁭⁪⁯‫‭‎‎⁭‏‎⁮⁯‫‎⁪⁫‌‮​⁮⁮⁬⁬‌‮(\u003CModule\u003E.\u202A⁭‬‍‏‭‍⁮⁪‍⁮‮‍‮‫‮⁪⁯‮‍​⁪⁫⁭‎⁭⁮​‏⁯‪‪‍⁬‌‮‬⁮‮<string>(2683641990U), (object) move.Count);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1209770811 ^ 1349396975;
            continue;
          case 7:
            num1 = (int) num2 * 28464360 ^ -2041092220;
            continue;
          case 8:
            num1 = (int) num2 * -896022215 ^ 2120361996;
            continue;
          case 9:
            num1 = (int) num2 * 845198334 ^ 903854721;
            continue;
          case 10:
            this.msg = \u003CModule\u003E.\u202A⁭‬‍‏‭‍⁮⁪‍⁮‮‍‮‫‮⁪⁯‮‍​⁪⁫⁭‎⁭⁮​‏⁯‪‪‍⁬‌‮‬⁮‮<string>(2499642849U);
            num1 = (int) num2 * -1099442346 ^ 775826885;
            continue;
          case 11:
            num1 = (int) num2 * -2142626654 ^ 1892843789;
            continue;
          case 12:
            to.HighLight();
            num1 = (int) num2 * -1009053799 ^ -2009317356;
            continue;
          case 13:
            this.msg = \u003CModule\u003E.\u202A⁭‬‍‏‭‍⁮⁪‍⁮‮‍‮‫‮⁪⁯‮‍​⁪⁫⁭‎⁭⁮​‏⁯‪‪‍⁬‌‮‬⁮‮<string>(3689834762U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1103974289 ^ -912022924;
            continue;
          case 14:
            num1 = (int) num2 * -356270287 ^ -966507147;
            continue;
          case 15:
            this.Board.From = to;
            num1 = (int) num2 * -401913258 ^ -1878107207;
            continue;
          case 16:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 1250492616 ^ -1938471521;
            continue;
          case 17:
            flag4 = Square.\u200E‎‫‪⁮‭⁪‎‬⁫‬⁭‮‪⁮⁯​​⁬⁪⁮‬‍‬‪⁭‬‫‬‭‫‎​‫‎⁪‍‪⁪‫‮(e) == MouseButtons.Left;
            num1 = (int) num2 * -506837097 ^ 2093886999;
            continue;
          case 18:
            int num6 = flag4 ? 210293697 : (num6 = 375554664);
            num1 = num6 ^ (int) num2 * 487275036;
            continue;
          case 19:
            num1 = 1244101216;
            continue;
          case 20:
            to.MovePawn(this.Board.From);
            num1 = 953972034;
            continue;
          case 21:
            num3 = this.Board.From.Piece != null ? 1 : 0;
            goto label_69;
          case 22:
            num1 = (int) num2 * 819313637 ^ 971482658;
            continue;
          case 23:
            num1 = (int) num2 * -1132763649 ^ -617927695;
            continue;
          case 24:
            num1 = (int) num2 * -1388790562 ^ 1132412025;
            continue;
          case 25:
            int num7 = !flag5 ? -20889708 : (num7 = -1498948042);
            num1 = num7 ^ (int) num2 * 1780196125;
            continue;
          case 26:
            to.HighLight();
            num1 = (int) num2 * 109162825 ^ -1884316965;
            continue;
          case 27:
            num1 = (int) num2 * -1556755103 ^ 284395449;
            continue;
          case 28:
            num1 = (int) num2 * -2005452158 ^ -1233121235;
            continue;
          case 29:
            num1 = 1343535038;
            continue;
          case 30:
            num1 = (int) num2 * 56539538 ^ -43290608;
            continue;
          case 31:
            num1 = (int) num2 * -715279268 ^ 1964082335;
            continue;
          case 32:
            num1 = (int) num2 * 95752498 ^ -912704881;
            continue;
          case 33:
            num1 = (int) num2 * -1822299928 ^ 896570583;
            continue;
          case 34:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -817440494 ^ -1153868938;
            continue;
          case 35:
            num1 = (int) num2 * -1270540326 ^ -475047926;
            continue;
          case 36:
            num1 = (int) num2 * 1253632574 ^ 56097094;
            continue;
          case 37:
            num4 = this.getSide(to) ? 1 : 0;
            break;
          case 38:
            this.Board.HidePieceMoves(this.Board.From);
            this.Board.From = (Square) null;
            num1 = (int) num2 * 1341546955 ^ -635825684;
            continue;
          case 39:
            side = this.getSide(this.Board.From);
            num1 = 572991495;
            continue;
          case 40:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * 672321144 ^ -1141203288;
            continue;
          case 41:
            flag6 = move.Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * -1474246967 ^ -794728183;
            continue;
          case 42:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200C‫‌‍‭​‫⁬‮‬‫⁪‫‪‫‪⁬⁯⁫‎‎‌‬‬‮⁬‍‭‌⁫⁯‮⁭⁬‍⁮‫‭‏‬‮<string>(4193272884U);
            num1 = (int) num2 * -239721735 ^ -222171844;
            continue;
          case 43:
            num1 = (int) num2 * 872864973 ^ -710320555;
            continue;
          case 44:
            if (this.Board.From != null)
            {
              num1 = (int) num2 * 620982977 ^ 1300304679;
              continue;
            }
            num3 = 0;
            goto label_69;
          case 45:
            int num8 = !side ? 1080038217 : (num8 = 1994128881);
            num1 = num8 ^ (int) num2 * -1888632528;
            continue;
          case 46:
            int num9 = flag3 ? 1795953320 : (num9 = 1942336113);
            num1 = num9 ^ (int) num2 * 284170046;
            continue;
          case 47:
            int num10 = flag1 ? -532576488 : (num10 = -1212768691);
            num1 = num10 ^ (int) num2 * 1259776295;
            continue;
          case 48:
            flag3 = to.Piece.Color != this.Board.From.Piece.Color;
            num1 = (int) num2 * -1999481494 ^ 356119794;
            continue;
          case 49:
            num1 = (int) num2 * 247366566 ^ -1673862798;
            continue;
          case 50:
            to.CaptPawn(this.Board.From);
            num1 = (int) num2 * -1169668764 ^ 2114247479;
            continue;
          case 51:
            this.msg = \u003CModule\u003E.\u200C‫‌‍‭​‫⁬‮‬‫⁪‫‪‫‪⁬⁯⁫‎‎‌‬‬‮⁬‍‭‌⁫⁯‮⁭⁬‍⁮‫‭‏‬‮<string>(216077643U);
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1052461038 ^ 379225702;
            continue;
          case 52:
            num1 = (int) num2 * -703133245 ^ -1897415330;
            continue;
          case 53:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -1464719857 ^ 1080675654;
            continue;
          case 54:
            num1 = (int) num2 * -45936401 ^ -1456588568;
            continue;
          case 55:
            num1 = 1178545369;
            continue;
          case 56:
            to = this;
            num1 = (int) num2 * -1459942119 ^ 873596174;
            continue;
          case 57:
            this.hideMoves(this.Board.From);
            num1 = (int) num2 * -883504983 ^ 1896101235;
            continue;
          case 58:
            to.HighLight();
            num1 = (int) num2 * -1729576226 ^ -1517176548;
            continue;
          case 59:
            int num11 = this.Board.From.Piece.Kind == Pieces.Pawn ? 1974999666 : (num11 = 410546);
            num1 = num11 ^ (int) num2 * 1526770734;
            continue;
          case 60:
            this.msg = \u003CModule\u003E.\u202B‎⁫⁮⁪‬⁭‬⁬‏‭‌⁮​‏⁭⁪‌⁫‌⁭‪‬⁪‎⁫⁮⁬⁭⁪⁯‪‫‫⁪‌‭‮⁫‭‮<string>(4226097039U);
            flag1 = this.Board.lights.MoveList[this.Board.From.Piece.Id].Exists((Predicate<PossibleMoves>) (t => t.Square == to));
            num1 = (int) num2 * -1892413460 ^ -1051880979;
            continue;
          case 61:
            int num12;
            num1 = num12 = this.Board.From.Piece.Color == to.Piece.Color ? 940653177 : (num12 = 946912652);
            continue;
          case 62:
            to.HighLight();
            num1 = (int) num2 * -625642584 ^ -1695744971;
            continue;
          case 63:
            num1 = (int) num2 * -2118659554 ^ 1593890880;
            continue;
          case 64:
            goto label_3;
          case 65:
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * 292826464 ^ -299506326;
            continue;
          case 66:
            int num13 = !flag6 ? 1021330573 : (num13 = 1841493599);
            num1 = num13 ^ (int) num2 * -435678682;
            continue;
          case 67:
            goto label_1;
          case 68:
            int num14 = to.Piece.Id != this.Board.From.Piece.Id ? 1278661517 : (num14 = 1311806851);
            num1 = num14 ^ (int) num2 * 542160990;
            continue;
          case 69:
            if (to.Piece != null)
            {
              num1 = 284823979;
              continue;
            }
            num4 = 0;
            break;
          case 70:
            disableTurns = this.Board.DisableTurns;
            num1 = 1276307930;
            continue;
          case 71:
            num1 = 1119215495;
            continue;
          case 72:
            this.Board.From = to;
            this.msg = \u003CModule\u003E.\u200D⁬‎‬⁫⁯⁯​​‍‪⁭‍‫‫‮‎‏​‫⁯⁮​⁯⁭⁭⁫⁯‏⁮‏‫​⁪‪⁭⁮‭⁭‎‮<string>(2604131642U);
            this.Board.ShowPieceMoves(to);
            num1 = (int) num2 * -1149069484 ^ 988307784;
            continue;
          case 73:
            num1 = (int) num2 * 1209866060 ^ -951213062;
            continue;
          case 74:
            Square.action(this.msg);
            num1 = 566515171;
            continue;
          case 75:
            int num15;
            num1 = num15 = flag2 ? 416724568 : (num15 = 785646843);
            continue;
          case 76:
            this.msg = \u003CModule\u003E.\u202A‍⁮‍‌⁯‬‮⁫⁫‭⁫‪‎⁪⁭⁮‌⁮‌⁯‏⁯​‬‎⁭‫⁭​‏‪‮‌⁭‪⁫‮‬‌‮<string>(3362918106U);
            num1 = 1119215495;
            continue;
          case 77:
            this.msg = \u003CModule\u003E.\u202B‎⁫⁮⁪‬⁭‬⁬‏‭‌⁮​‏⁭⁪‌⁫‌⁭‪‬⁪‎⁫⁮⁬⁭⁪⁯‪‫‫⁪‌‭‮⁫‭‮<string>(3829970682U);
            num1 = (int) num2 * -83585409 ^ -1465905418;
            continue;
          default:
            goto label_86;
        }
        int num16;
        num1 = num16 = num4 == 0 ? 145773338 : (num16 = 1923465176);
        continue;
label_69:
        flag2 = num3 != 0;
        flag5 = to.Piece == null & flag2;
        num1 = 1533621281;
      }
label_3:
      return;
label_86:;
    }

    private void hideMoves(Square to)
    {
label_1:
      int num1 = 382754142;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 15105516)) % 9U)
        {
          case 0:
            this.Board.HidePieceMoves(to);
            num1 = (int) num2 * 1717241086 ^ 205293194;
            continue;
          case 1:
            goto label_3;
          case 2:
            int num3 = flag ? -943959993 : (num3 = -976193723);
            num1 = num3 ^ (int) num2 * -716827057;
            continue;
          case 3:
            num1 = (int) num2 * 2047910771 ^ -1314629804;
            continue;
          case 4:
            flag = this.Board.From != null;
            num1 = (int) num2 * -1368347883 ^ 940557443;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * -23342603 ^ 148537552;
            continue;
          case 7:
            num1 = (int) num2 * 2101890052 ^ 1403419386;
            continue;
          case 8:
            this.Board.From.ClearHighLight();
            num1 = (int) num2 * -2036488932 ^ -25504700;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private void CaptPawn(Square from)
    {
      bool flag1 = this.Piece.Color == PieceColor.White;
label_1:
      int num1 = -2049652458;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1845665684)) % 32U)
        {
          case 0:
            int num5 = !flag6 ? -746291970 : (num5 = -94272182);
            num1 = num5 ^ (int) num2 * 1432930096;
            continue;
          case 1:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -367541435 ^ -1998470242;
            continue;
          case 2:
            flag5 = true;
            num1 = (int) num2 * 377177332 ^ -1469547168;
            continue;
          case 3:
            flag6 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -2028951651 ^ 1484327195;
            continue;
          case 4:
            num1 = -841144578;
            continue;
          case 5:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            break;
          case 6:
            num1 = (int) num2 * 548781451 ^ 350410429;
            continue;
          case 7:
            from.Piece = (ChessPiece) null;
            if (flag5)
            {
              num1 = -135355404;
              continue;
            }
            goto label_57;
          case 8:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              goto label_22;
            }
            else
            {
              num1 = (int) num2 * 933603664 ^ 112208070;
              continue;
            }
          case 9:
            num1 = (int) num2 * 318425083 ^ -399065169;
            continue;
          case 10:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_22;
          case 11:
            int num6 = flag4 ? -616675860 : (num6 = -172904882);
            num1 = num6 ^ (int) num2 * 1972372999;
            continue;
          case 12:
            this.Board.WhitePieces.Remove(this.Piece.Id);
            num1 = (int) num2 * -220185041 ^ -723935769;
            continue;
          case 13:
            this.Board.WhitePieces[from.Piece.Id].Current = this;
            num1 = (int) num2 * 848617075 ^ 665418930;
            continue;
          case 14:
            this.handleWhiteCastling();
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1875654036 ^ 1922845761;
            continue;
          case 15:
            this.Board.BlackPieces[from.Piece.Id].Current = this;
            num1 = -1495719588;
            continue;
          case 16:
            this.Piece = from.Piece;
            num1 = -1301444976;
            continue;
          case 18:
            flag2 = this.Piece.Color == PieceColor.Black;
            num1 = -1391278889;
            continue;
          case 19:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            num1 = (int) num2 * -1774573011 ^ -1332372587;
            continue;
          case 20:
            num1 = (int) num2 * -1453261575 ^ -1721942631;
            continue;
          case 21:
            int num7 = !flag3 ? 873452550 : (num7 = 1598480608);
            num1 = num7 ^ (int) num2 * 1069110038;
            continue;
          case 22:
            goto label_1;
          case 23:
            this.handleBlackCastling();
            num1 = (int) num2 * -1158109542 ^ -2078323662;
            continue;
          case 24:
            num1 = (int) num2 * -2062977442 ^ -1739918099;
            continue;
          case 25:
            num1 = -816960501;
            continue;
          case 26:
            int num8 = !flag1 ? -940756561 : (num8 = -1643641890);
            num1 = num8 ^ (int) num2 * -656131573;
            continue;
          case 27:
            int num9 = !flag2 ? 2088100431 : (num9 = 396551996);
            num1 = num9 ^ (int) num2 * -1668700020;
            continue;
          case 28:
            flag5 = false;
            num1 = (int) num2 * -1160911791 ^ -1889105133;
            continue;
          case 29:
            this.Board.BlackPieces.Remove(this.Piece.Id);
            num1 = -1304043693;
            continue;
          case 30:
            flag5 = true;
            num1 = (int) num2 * 471041167 ^ 910192407;
            continue;
          case 31:
            flag4 = from.Piece.Color == PieceColor.White;
            num1 = -1957594553;
            continue;
          default:
            goto label_40;
        }
        flag3 = num3 != 0;
        num1 = -1226107943;
        continue;
label_22:
        int num10;
        num1 = num10 = num4 == 0 ? -2030569067 : (num10 = -870312398);
      }
label_40:
      Promotion promotion = new Promotion(Square.\u200B‫⁫‭‭‮‪⁬‌⁫​⁪⁮⁯⁬​⁫⁮‏‍​‌⁫⁯‬‪‏⁭⁬⁬‬‌⁪⁪‍⁪⁫‬​⁬‮());
      try
      {
label_42:
        int num11 = -56888024;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ -1845665684)) % 5U)
          {
            case 1:
              num11 = (int) num12 * -1614122777 ^ 709852631;
              continue;
            case 2:
              this.Kind = promotion.Piece;
              num11 = (int) num12 * -1487503673 ^ -290392128;
              continue;
            case 3:
              int num13 = (int) Square.\u206D⁮​‍‪⁮‬⁬‪⁬‏‌⁭⁪⁪‪‮‫‪⁬‮⁪⁬‬‎​⁬‪‮⁮‏⁪⁫⁮‬⁯⁫‬‮‌‮((Form) promotion);
              num11 = (int) num12 * -523087299 ^ 1313889868;
              continue;
            case 4:
              goto label_42;
            default:
              goto label_53;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_48:
          int num14 = -2020257895;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ -1845665684)) % 3U)
            {
              case 1:
                Square.\u202B‌⁮‌⁯⁮‫‍⁭⁬​‫‫‎‏‫‭⁭‍‪‮‌‍⁬‮⁫‌‍⁬‬⁭⁪⁬‮⁭‏‭‏‪⁭‮((IDisposable) promotion);
                num14 = (int) num15 * 831040428 ^ -309718744;
                continue;
              case 2:
                goto label_48;
              default:
                goto label_52;
            }
          }
        }
label_52:;
      }
label_53:
label_54:
      int num16 = -1028086509;
label_55:
      while (true)
      {
        uint num17;
        switch ((num17 = (uint) (num16 ^ -1845665684)) % 7U)
        {
          case 0:
            goto label_56;
          case 1:
            PlaySound.Play();
            num16 = (int) num17 * 409648145 ^ 20914915;
            continue;
          case 2:
            goto label_57;
          case 3:
            this.SwitchPlayer();
            num16 = (int) num17 * -78168000 ^ -1918867685;
            continue;
          case 4:
            num16 = (int) num17 * -285180364 ^ 513570911;
            continue;
          case 5:
            goto label_54;
          case 6:
            num16 = (int) num17 * 93946162 ^ -1750585315;
            continue;
          default:
            goto label_50;
        }
      }
label_56:
      return;
label_50:
      return;
label_57:
      this.Board.lights.FindAllMoves();
      num16 = -1461914634;
      goto label_55;
    }

    private void MovePawn(Square from)
    {
      ChessPiece chessPiece = (ChessPiece) null;
      this.Piece = from.Piece;
label_1:
      int num1 = 69219352;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ 757653691)) % 29U)
        {
          case 0:
            if (flag3)
            {
              num1 = (int) num2 * 70282029 ^ -1372735985;
              continue;
            }
            goto label_71;
          case 1:
            flag2 = this.Piece.Kind == Pieces.Pawn;
            num1 = (int) num2 * -1345626054 ^ -980279834;
            continue;
          case 2:
            this.Board.WhitePieces[this.Piece.Id].Current = this;
            chessPiece = this.handleWhiteCastling();
            num1 = (int) num2 * 266562482 ^ -961045423;
            continue;
          case 3:
            num3 = this.Piece.Current.Rank == 7 ? 1 : 0;
            goto label_39;
          case 4:
            num4 = this.Piece.Current.Rank == 0 ? 1 : 0;
            goto label_15;
          case 5:
            goto label_1;
          case 6:
            int num6 = flag4 ? -528110506 : (num6 = -1685021653);
            num1 = num6 ^ (int) num2 * 955561776;
            continue;
          case 7:
            this.Board.lastPassantPawn = (ChessPiece) null;
            num1 = (int) num2 * -1489210083 ^ -894105470;
            continue;
          case 8:
            flag3 = flag5;
            num1 = (int) num2 * -1715052687 ^ 1815058290;
            continue;
          case 9:
            num1 = (int) num2 * -1549605203 ^ 1239359813;
            continue;
          case 10:
            int num7 = !flag1 ? -301635170 : (num7 = -1741752896);
            num1 = num7 ^ (int) num2 * 988048553;
            continue;
          case 11:
            if (this.Piece.Kind != Pieces.Pawn)
            {
              num4 = 0;
              goto label_15;
            }
            else
            {
              num1 = (int) num2 * -824171877 ^ -1091790602;
              continue;
            }
          case 12:
            flag1 = this.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -87808509 ^ 1180556528;
            continue;
          case 13:
            flag5 = true;
            num1 = (int) num2 * 1582886026 ^ -1444090160;
            continue;
          case 14:
            num1 = (int) num2 * -566016156 ^ -719840120;
            continue;
          case 15:
            this.Board.lastPassantPawn = this.Piece;
            num1 = (int) num2 * 833580733 ^ 1942384210;
            continue;
          case 16:
            this.Board.BlackPieces[this.Piece.Id].Current = this;
            num1 = 1730159972;
            continue;
          case 17:
            int num8 = !flag2 ? 1551568616 : (num8 = 344151283);
            num1 = num8 ^ (int) num2 * -1295944594;
            continue;
          case 18:
            num5 = this.Rank == 4 ? 1 : 0;
            break;
          case 19:
            chessPiece = this.handleBlackCastling();
            num1 = (int) num2 * -1546567084 ^ 350873918;
            continue;
          case 20:
            num1 = 757939517;
            continue;
          case 22:
            flag5 = false;
            num1 = 1483373742;
            continue;
          case 23:
            num1 = 757939517;
            continue;
          case 24:
            from.Piece = (ChessPiece) null;
            num1 = 1626805657;
            continue;
          case 25:
            if (this.Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 943937259 ^ -320790750;
              continue;
            }
            num3 = 0;
            goto label_39;
          case 26:
            if (this.Rank == 3)
            {
              num5 = 1;
              break;
            }
            num1 = (int) num2 * 799464603 ^ -797335724;
            continue;
          case 27:
            num1 = 5501286;
            continue;
          case 28:
            flag5 = true;
            num1 = (int) num2 * 1526918891 ^ 1782204218;
            continue;
          default:
            goto label_40;
        }
        flag4 = num5 != 0;
        num1 = 321348297;
        continue;
label_15:
        int num9;
        num1 = num9 = num4 == 0 ? 1344329662 : (num9 = 903521392);
        continue;
label_39:
        int num10;
        num1 = num10 = num3 != 0 ? 1159342145 : (num10 = 659598916);
      }
label_40:
      Promotion promotion = new Promotion(Square.\u200B‫⁫‭‭‮‪⁬‌⁫​⁪⁮⁯⁬​⁫⁮‏‍​‌⁫⁯‬‪‏⁭⁬⁬‬‌⁪⁪‍⁪⁫‬​⁬‮());
      try
      {
label_42:
        int num11 = 199094160;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 757653691)) % 4U)
          {
            case 0:
              goto label_42;
            case 2:
              num11 = (int) num12 * 1432269250 ^ 667303506;
              continue;
            case 3:
              int num13 = (int) Square.\u206D⁮​‍‪⁮‬⁬‪⁬‏‌⁭⁪⁪‪‮‫‪⁬‮⁪⁬‬‎​⁬‪‮⁮‏⁪⁫⁮‬⁯⁫‬‮‌‮((Form) promotion);
              this.Kind = promotion.Piece;
              num11 = (int) num12 * 299736176 ^ 1125595953;
              continue;
            default:
              goto label_52;
          }
        }
      }
      finally
      {
        if (promotion != null)
        {
label_47:
          int num14 = 1602145008;
          while (true)
          {
            uint num15;
            switch ((num15 = (uint) (num14 ^ 757653691)) % 3U)
            {
              case 0:
                goto label_47;
              case 2:
                Square.\u202B‌⁮‌⁯⁮‫‍⁭⁬​‫‫‎‏‫‭⁭‍‪‮‌‍⁬‮⁫‌‍⁬‬⁭⁪⁬‮⁭‏‭‏‪⁭‮((IDisposable) promotion);
                num14 = (int) num15 * -241370194 ^ -1558683130;
                continue;
              default:
                goto label_51;
            }
          }
        }
label_51:;
      }
label_52:
label_53:
      int num16 = 1282112586;
label_54:
      bool isOnCheck;
      while (true)
      {
        uint num17;
        Square square1;
        bool flag6;
        int rank;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        int file;
        Square square2;
        switch ((num17 = (uint) (num16 ^ 757653691)) % 46U)
        {
          case 0:
            square2 = this.Board[0, rank];
            break;
          case 1:
            flag10 = flag1;
            num16 = (int) num17 * -1890494070 ^ -1784176243;
            continue;
          case 2:
            from.Piece = this.Piece;
            num16 = (int) num17 * 1981410394 ^ -1033385488;
            continue;
          case 3:
            num16 = (int) num17 * 788727710 ^ 768861583;
            continue;
          case 4:
            int num18 = !flag9 ? 1489400102 : (num18 = 286929008);
            num16 = num18 ^ (int) num17 * -296617607;
            continue;
          case 5:
            num16 = (int) num17 * 1215956285 ^ -11410212;
            continue;
          case 6:
            num16 = (int) num17 * 1871906748 ^ -1163987924;
            continue;
          case 7:
            this.Piece = (ChessPiece) null;
            this.msg = \u003CModule\u003E.\u202B‎⁫⁮⁪‬⁭‬⁬‏‭‌⁮​‏⁭⁪‌⁫‌⁭‪‬⁪‎⁫⁮⁬⁭⁪⁯‪‫‫⁪‌‭‮⁫‭‮<string>(2104958422U);
            int num19 = flag1 ? 77394401 : (num19 = 582470255);
            num16 = num19 ^ (int) num17 * 1980733193;
            continue;
          case 8:
            int num20 = !flag7 ? 1939137746 : (num20 = 502116487);
            num16 = num20 ^ (int) num17 * 75607930;
            continue;
          case 9:
            this.Board.BlackPieces[from.Piece.Id].Current = from;
            num16 = 692487772;
            continue;
          case 10:
            this.Board[file, rank].Piece = (ChessPiece) null;
            num16 = 1617829927;
            continue;
          case 11:
            flag8 = this.Board.lights.IsOnCheck;
            num16 = (int) num17 * 1761590873 ^ -961054483;
            continue;
          case 12:
            flag8 = true;
            num16 = (int) num17 * -1959238028 ^ -71592194;
            continue;
          case 13:
            flag9 = flag8;
            num16 = 1621717203;
            continue;
          case 14:
            num16 = (int) num17 * -1150175223 ^ -2076712122;
            continue;
          case 15:
            goto label_53;
          case 16:
            int num21 = !flag6 ? 1763000088 : (num21 = 223584519);
            num16 = num21 ^ (int) num17 * 329812797;
            continue;
          case 17:
            num16 = (int) num17 * 167453066 ^ -742004092;
            continue;
          case 18:
            num16 = (int) num17 * 232476820 ^ 1100326892;
            continue;
          case 19:
            this.Board.lights.FindAllMoves();
            num16 = 771038658;
            continue;
          case 20:
            int num22 = !isOnCheck ? 455634601 : (num22 = 1702821200);
            num16 = num22 ^ (int) num17 * -690949318;
            continue;
          case 21:
            goto label_71;
          case 22:
            int num23 = this.Board.lights.KingColorOnCheck == this.Piece.Color ? -251551 : (num23 = -1817283116);
            num16 = num23 ^ (int) num17 * -675619340;
            continue;
          case 23:
            this.msg = \u003CModule\u003E.\u200C‫‌‍‭​‫⁬‮‬‫⁪‫‪‫‪⁬⁯⁫‎‎‌‬‬‮⁬‍‭‌⁫⁯‮⁭⁬‍⁮‫‭‏‬‮<string>(3076026138U);
            num16 = (int) num17 * -1539240294 ^ 1017568045;
            continue;
          case 24:
            this.Board.BlackCanCastleKingSide = true;
            num16 = (int) num17 * -158917732 ^ 1818116920;
            continue;
          case 25:
            flag7 = chessPiece != null;
            num16 = 1342841919;
            continue;
          case 26:
            num16 = (int) num17 * -227963833 ^ -1579983608;
            continue;
          case 27:
            num16 = (int) num17 * -2104362541 ^ -1703903000;
            continue;
          case 28:
            this.Board.BlackPieces[chessPiece.Id].Current = square1;
            num16 = (int) num17 * -1572810000 ^ 1692181530;
            continue;
          case 29:
            num16 = (int) num17 * 1035747706 ^ -187644144;
            continue;
          case 30:
            num16 = 1225008479;
            continue;
          case 31:
            num16 = 242287888;
            continue;
          case 32:
            this.Board.WhiteCanCastleKingSide = true;
            num16 = (int) num17 * 131706906 ^ 1401930513;
            continue;
          case 33:
            this.Board.WhitePieces[chessPiece.Id].Current = square1;
            this.Board.WhiteCanCastleQueenSide = true;
            num16 = (int) num17 * 1210528811 ^ -1028384078;
            continue;
          case 34:
            PlaySound.Play();
            this.SwitchPlayer();
            num16 = 1966272289;
            continue;
          case 35:
            this.Board.WhitePieces[from.Piece.Id].Current = from;
            num16 = (int) num17 * -1816740146 ^ 1455655009;
            continue;
          case 36:
            num16 = (int) num17 * -1667025061 ^ -733534781;
            continue;
          case 37:
            flag6 = this.Piece.Kind == Pieces.King;
            num16 = (int) num17 * 1031885600 ^ 1418920577;
            continue;
          case 38:
            if (file == 5)
            {
              square2 = this.Board[7, rank];
              break;
            }
            num16 = (int) num17 * 898260022 ^ 1606162365;
            continue;
          case 39:
            goto label_55;
          case 40:
            num16 = 794147281;
            continue;
          case 41:
            num16 = (int) num17 * -1323125546 ^ 668469297;
            continue;
          case 42:
            int num24 = !flag10 ? 525204357 : (num24 = 1621080300);
            num16 = num24 ^ (int) num17 * 52516991;
            continue;
          case 43:
            this.Board.BlackCanCastleQueenSide = true;
            num16 = (int) num17 * 22154484 ^ 233667229;
            continue;
          case 44:
            file = chessPiece.Current.File;
            rank = chessPiece.Current.Rank;
            num16 = (int) num17 * 1689559004 ^ -1836285431;
            continue;
          case 45:
            num16 = 1680968348;
            continue;
          default:
            goto label_49;
        }
        square1 = square2;
        square1.Piece = chessPiece;
        num16 = 416112000;
      }
label_55:
      return;
label_49:
      return;
label_71:
      this.Board.lights.IsOnCheck = false;
      this.Board.lights.FindAllMoves();
      isOnCheck = this.Board.lights.IsOnCheck;
      num16 = 74234711;
      goto label_54;
    }

    private ChessPiece handleBlackCastling()
    {
      ChessPiece chessPiece1 = (ChessPiece) null;
      if (this.Board.BlackCanCastleKingSide)
        goto label_16;
label_1:
      int num1 = 780528351;
label_2:
      ChessPiece chessPiece2;
      while (true)
      {
        uint num2;
        bool flag1;
        Square square1;
        Square square2;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1743422728)) % 34U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = 1085864716;
            continue;
          case 2:
            if (this.Piece.Kind == Pieces.King)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -2048229539 ^ -762882216;
            continue;
          case 3:
            this.Board.BlackCanCastleQueenSide = false;
            this.Board.BlackCanCastleKingSide = false;
            num1 = 985535459;
            continue;
          case 4:
            int num4 = !flag4 ? -293098032 : (num4 = -2072246088);
            num1 = num4 ^ (int) num2 * -203316446;
            continue;
          case 5:
            square1 = this.Board[3, 7];
            square1.Piece = this.Board[0, 7].Piece;
            num1 = (int) num2 * -1292973393 ^ 18811388;
            continue;
          case 6:
            int num5 = flag1 ? -1505547760 : (num5 = -1080187514);
            num1 = num5 ^ (int) num2 * -1378481509;
            continue;
          case 7:
            num1 = 1062986035;
            continue;
          case 8:
            this.Board.BlackCanCastleKingSide = false;
            num1 = 1300676483;
            continue;
          case 9:
            flag3 = this.Piece.Kind == Pieces.Rook;
            num1 = (int) num2 * 576659054 ^ -921938588;
            continue;
          case 10:
            num3 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 11:
            int num6;
            num1 = num6 = this.Piece.Current.File == 2 ? 595631620 : (num6 = 627316241);
            continue;
          case 12:
            this.Board.BlackPieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 1892884920 ^ -1452434782;
            continue;
          case 13:
            this.Board[7, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 1538585573 ^ 703178792;
            continue;
          case 14:
            int num7 = flag2 ? -692242905 : (num7 = -389168561);
            num1 = num7 ^ (int) num2 * 1129432295;
            continue;
          case 15:
            num1 = (int) num2 * -461904272 ^ 89297794;
            continue;
          case 17:
            goto label_15;
          case 18:
            this.Board.BlackCanCastleQueenSide = false;
            num1 = (int) num2 * 1175391817 ^ -357949321;
            continue;
          case 19:
            num1 = (int) num2 * -1946366489 ^ 789751825;
            continue;
          case 20:
            square2.Piece = this.Board[7, 7].Piece;
            num1 = (int) num2 * 596520012 ^ -397994047;
            continue;
          case 21:
            num1 = (int) num2 * -83190878 ^ -402824333;
            continue;
          case 22:
            int num8 = !flag3 ? 1374991993 : (num8 = 1550340723);
            num1 = num8 ^ (int) num2 * -1626492299;
            continue;
          case 23:
            flag2 = this.Piece.Current.File == 6;
            num1 = 946454196;
            continue;
          case 24:
            chessPiece1 = square1.Piece;
            num1 = (int) num2 * 263449019 ^ 414859887;
            continue;
          case 25:
            this.Board[0, 7].Piece = (ChessPiece) null;
            num1 = (int) num2 * 952172317 ^ -248451890;
            continue;
          case 26:
            num1 = (int) num2 * 1967670455 ^ 1943968361;
            continue;
          case 27:
            flag4 = Square.\u206E‫‌⁫‎​⁮⁬​⁪⁭⁯‭⁯‬⁬⁫‍‍⁬‏⁫‌⁫‌⁪‬‭⁬‏⁭​‬⁪‭‍‭‍‭⁪‮(this.Piece.Home.Name, \u003CModule\u003E.\u202B‎⁫⁮⁪‬⁭‬⁬‏‭‌⁮​‏⁭⁪‌⁫‌⁭‪‬⁪‎⁫⁮⁬⁭⁪⁯‪‫‫⁪‌‭‮⁫‭‮<string>(1092846819U));
            num1 = (int) num2 * 1593056473 ^ -173365377;
            continue;
          case 28:
            num1 = (int) num2 * -1602688235 ^ -255652819;
            continue;
          case 29:
            this.Board.BlackPieces[square2.Piece.Id].Current = square2;
            chessPiece1 = square2.Piece;
            num1 = (int) num2 * -1662079507 ^ -1401059726;
            continue;
          case 30:
            num1 = 1038235810;
            continue;
          case 31:
            square2 = this.Board[5, 7];
            num1 = (int) num2 * -283384426 ^ -1652766846;
            continue;
          case 32:
            chessPiece2 = chessPiece1;
            num1 = 2062336157;
            continue;
          case 33:
            num1 = (int) num2 * 1817057596 ^ -1326886089;
            continue;
          default:
            goto label_40;
        }
        flag1 = num3 != 0;
        num1 = 639906358;
      }
label_15:
      int num9 = this.Board.BlackCanCastleQueenSide ? 1 : 0;
      goto label_17;
label_40:
      return chessPiece2;
label_16:
      num9 = 1;
label_17:
      num1 = num9 != 0 ? 940654392 : (num1 = 1038235810);
      goto label_2;
    }

    private ChessPiece handleWhiteCastling()
    {
label_1:
      int num1 = -1853749068;
      ChessPiece chessPiece1;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        ChessPiece chessPiece2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1049540957)) % 41U)
        {
          case 0:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = -1199367748;
            continue;
          case 1:
            int num5 = !flag3 ? 541395807 : (num5 = 1303827099);
            num1 = num5 ^ (int) num2 * -492871974;
            continue;
          case 2:
            num1 = (int) num2 * -1859357478 ^ 1090374960;
            continue;
          case 3:
            num1 = (int) num2 * 1422617207 ^ 292974076;
            continue;
          case 4:
            chessPiece2 = square2.Piece;
            num1 = (int) num2 * -121078588 ^ -581728521;
            continue;
          case 5:
            chessPiece1 = chessPiece2;
            num1 = -1423336223;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.Board.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1248473933 ^ -1054826069;
            continue;
          case 8:
            square2 = this.Board[3, 0];
            square2.Piece = this.Board[0, 0].Piece;
            num1 = (int) num2 * 1491925758 ^ 697061136;
            continue;
          case 9:
            num1 = (int) num2 * 1587880515 ^ 1399833823;
            continue;
          case 10:
            num3 = this.Board.WhiteCanCastleKingSide ? 1 : 0;
            goto label_34;
          case 11:
            num1 = -434542760;
            continue;
          case 12:
            this.Board.WhitePieces[square2.Piece.Id].Current = square2;
            num1 = (int) num2 * 2052677741 ^ -1115848492;
            continue;
          case 13:
            if (!this.Board.WhiteCanCastleKingSide)
            {
              num1 = (int) num2 * 1765644825 ^ -1536473941;
              continue;
            }
            num3 = 1;
            goto label_34;
          case 14:
            int num6 = !flag2 ? 1231605633 : (num6 = 303634230);
            num1 = num6 ^ (int) num2 * 1919196801;
            continue;
          case 15:
            int num7 = this.Piece.Kind == Pieces.Rook ? 1763978526 : (num7 = 1068376006);
            num1 = num7 ^ (int) num2 * 1647655194;
            continue;
          case 16:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -524594854 ^ -98455906;
            continue;
          case 17:
            int num8 = flag4 ? -354639017 : (num8 = -1763877570);
            num1 = num8 ^ (int) num2 * -147969806;
            continue;
          case 18:
            square1 = this.Board[5, 0];
            num1 = (int) num2 * 390181863 ^ 1422291323;
            continue;
          case 19:
            flag1 = this.Piece.Current.File == 6;
            num1 = -938867359;
            continue;
          case 20:
            chessPiece2 = (ChessPiece) null;
            num1 = (int) num2 * 1040405474 ^ 318172699;
            continue;
          case 21:
            num1 = (int) num2 * 1629137407 ^ 758357293;
            continue;
          case 22:
            if (this.Piece.Kind == Pieces.King)
            {
              num4 = 1;
              break;
            }
            num1 = (int) num2 * -1444170990 ^ 1530807842;
            continue;
          case 23:
            num1 = (int) num2 * 786502381 ^ -1208676259;
            continue;
          case 24:
            int num9 = !flag1 ? 897405533 : (num9 = 1917072899);
            num1 = num9 ^ (int) num2 * -165424321;
            continue;
          case 25:
            square1.Piece = this.Board[7, 0].Piece;
            num1 = (int) num2 * -800281126 ^ -1163885526;
            continue;
          case 26:
            num4 = this.Piece.Kind == Pieces.Rook ? 1 : 0;
            break;
          case 27:
            this.Board.WhiteCanCastleKingSide = false;
            num1 = -342675932;
            continue;
          case 28:
            this.Board[7, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1573243012 ^ -1811407228;
            continue;
          case 29:
            this.Board.WhitePieces[square1.Piece.Id].Current = square1;
            num1 = (int) num2 * 1201942095 ^ -1822938226;
            continue;
          case 30:
            int num10;
            num1 = num10 = this.Piece.Current.File == 2 ? -1903831954 : (num10 = -32093257);
            continue;
          case 31:
            flag2 = Square.\u206E‫‌⁫‎​⁮⁬​⁪⁭⁯‭⁯‬⁬⁫‍‍⁬‏⁫‌⁫‌⁪‬‭⁬‏⁭​‬⁪‭‍‭‍‭⁪‮(this.Piece.Home.Name, \u003CModule\u003E.\u200D⁬‎‬⁫⁯⁯​​‍‪⁭‍‫‫‮‎‏​‫⁯⁮​⁯⁭⁭⁫⁯‏⁮‏‫​⁪‪⁭⁮‭⁭‎‮<string>(4245048651U));
            num1 = (int) num2 * 1190981880 ^ 116058275;
            continue;
          case 33:
            num1 = (int) num2 * 1932827118 ^ -204753829;
            continue;
          case 34:
            num1 = (int) num2 * 1451022168 ^ -146033723;
            continue;
          case 35:
            num1 = (int) num2 * -1039513089 ^ 739761002;
            continue;
          case 36:
            chessPiece2 = square1.Piece;
            num1 = (int) num2 * -484133300 ^ 804586419;
            continue;
          case 37:
            this.Board[0, 0].Piece = (ChessPiece) null;
            num1 = (int) num2 * -1365574657 ^ 220259154;
            continue;
          case 38:
            num1 = -818913703;
            continue;
          case 39:
            num1 = -1897009588;
            continue;
          case 40:
            num1 = (int) num2 * 1202266891 ^ -437562905;
            continue;
          default:
            goto label_48;
        }
        flag3 = num4 != 0;
        num1 = -1378935540;
        continue;
label_34:
        flag4 = num3 != 0;
        num1 = -392373790;
      }
label_48:
      return chessPiece1;
    }

    public void ShowAllMoves()
    {
    }

    public void ShowSelectedPieceMoves()
    {
    }

    public void HideMove()
    {
label_1:
      int num1 = 1131421767;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1536678979)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            Square.\u200D‮⁯⁭⁮‪‫⁮‮‍‬‮⁬⁪⁪⁫⁯⁫⁮⁭⁭‏⁭‮⁯⁯‮‌⁯‭‫‎⁮‍‫⁪‮⁮‎‪‮((Control) this.panel1, (Image) null);
            num1 = (int) num2 * 1899624009 ^ -1498085853;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_10;
label_1:
      int num1 = -274369635;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -184184896)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            Square.\u202B‌⁮‌⁯⁮‫‍⁭⁬​‫‫‎‏‫‭⁭‍‪‮‌‍⁬‮⁫‌‍⁬‬⁭⁪⁬‮⁭‏‭‏‪⁭‮((IDisposable) this.components);
            num1 = (int) num2 * -2068414564 ^ -830744621;
            continue;
          case 3:
            num1 = (int) num2 * 1005276683 ^ -1483414043;
            continue;
          case 4:
            base.Dispose(disposing);
            num1 = -1686475585;
            continue;
          case 5:
            goto label_9;
          case 6:
            int num3 = flag ? -1793169238 : (num3 = -70970124);
            num1 = num3 ^ (int) num2 * -1055929492;
            continue;
          case 7:
            num1 = (int) num2 * 1086165111 ^ -1389081616;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:
      return;
label_9:
      int num4 = this.components != null ? 1 : 0;
      goto label_11;
label_10:
      num4 = 0;
label_11:
      flag = num4 != 0;
      num1 = -1990481258;
      goto label_2;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -1904850235;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1480493177)) % 15U)
        {
          case 0:
            num1 = (int) num2 * 543145112 ^ -817223241;
            continue;
          case 1:
            num1 = (int) num2 * -1535612645 ^ 631160173;
            continue;
          case 2:
            num1 = (int) num2 * -352658670 ^ -267812831;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 268116883 ^ 1631846018;
            continue;
          case 5:
            this.Name = \u003CModule\u003E.\u202B‎⁫⁮⁪‬⁭‬⁬‏‭‌⁮​‏⁭⁪‌⁫‌⁭‪‬⁪‎⁫⁮⁬⁭⁪⁯‪‫‫⁪‌‭‮⁫‭‮<string>(1339367703U);
            num1 = (int) num2 * -1624174450 ^ 803787390;
            continue;
          case 6:
            Square.\u206A‌‎‬‪⁯‮⁭‏⁯‭⁯‫‎‮‪⁬‎‏‌⁫‮‎‏⁮‎​‌‫‫‍‍‍​‌⁬‌‮⁫⁯‮((Control) this);
            num1 = (int) num2 * 1163973138 ^ -1945344324;
            continue;
          case 7:
            num1 = (int) num2 * 1351123261 ^ 1249801319;
            continue;
          case 8:
            Square.\u202E‬⁮‌⁬‏⁬‭⁮⁯​‌‍‬‫⁫‎‬‪‏‭‫⁬‍‮‎‫‬‍⁯⁫⁭‪‍‏‏⁮‭‬‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * -2117628748 ^ 1897473987;
            continue;
          case 9:
            goto label_3;
          case 10:
            Square.\u200E⁭​⁯‮‏⁯⁫⁫⁯‌‮⁭⁭⁬‭‍‍‬‫‮⁪‬​‫⁭​‪‮‮‫‬​‭‍‏​‭⁫‎‮((Control) this, false);
            num1 = (int) num2 * 1687623006 ^ 700789755;
            continue;
          case 11:
            Square.\u206A‪⁭‫‌‎‪⁬‪‮‮⁫⁫⁫⁯‌‭⁭‍‬‎‪⁪⁬⁬‌⁬‬‬‭‏‎‏‎⁯‪⁬‮⁮‎‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * -1120794291 ^ -756207914;
            continue;
          case 12:
            Square.\u206E​​⁪‬‏‍‎‫‏‫‮‌‍‍⁭‌‪​‎‭⁬⁭‎‌‌⁬​‬⁮‌‍‬⁫‎‍‫‎⁭⁪‮((Control) this, new Padding(0));
            num1 = (int) num2 * 86799458 ^ 196988440;
            continue;
          case 13:
            Square.\u200C‭⁮⁬⁯‬‮‫‪‮‌‍‎‬‌​‬‪‮⁯⁮‭⁮⁯‫⁮‮‎‬⁫‏‬⁯⁯⁪‎‍⁮‎‪‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 884417177 ^ 941662980;
            continue;
          case 14:
            Square.\u206E‪‬‪‌‪⁬‬‭‌​‌‍⁬‫⁪‪‏‮⁯‭⁭​⁬⁯⁬‎‎‌⁫‪‍‌‫‍‪​‏​‭‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -1631485512 ^ -1257194710;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    static Delegate \u200C​⁫​⁫⁪‍‍‪‏‌⁮⁫‬‌⁯‭‍⁮​‭⁮⁭⁬‌‭‭‎‪‬‌⁫⁭‍​⁬⁫​‌‮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206B⁮⁮‍‍‬​‫‎⁯‍⁫‮‌⁭‫‪⁮⁫‎⁮​⁪‎‏‭‌‪⁭⁯​​‬⁮‫⁯⁪⁫‭‭‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static string \u206B‌‫​‎‭⁫⁬⁭‍‪⁭⁮‭‫‮⁭‮⁮​‎⁯⁯⁮‬⁯‪⁪‭‮‌‫‫‍​⁬‍‪‪‪‮([In] object obj0) => obj0.ToString();

    static string \u206F‏‎⁫‭⁪⁫⁮‭⁬‪⁭‬⁪⁪⁭‍⁮⁪‬‮‭⁪⁯‍‮‮⁮⁯⁫‌​​⁬⁬‭‬‫⁪⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static char \u200C⁯‎‏⁭⁪‍⁮‪‪⁫⁯⁮‏⁫‮​⁮⁮‫‬⁮⁫‫‌‭‏⁬⁪‫‮‬‭‫‮⁬‮⁫⁫‌‮([In] string obj0, [In] int obj1) => obj0[obj1];

    static string \u206A⁭‏‭⁮‫‌⁮‮⁫⁫⁮‭⁯⁫‫‍‍‭‍⁫⁮⁫‌​⁬‫‫⁫⁪⁮‮‪⁮‮⁫‪⁪‮‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static MouseButtons \u200E‎‫‪⁮‭⁪‎‬⁫‬⁭‮‪⁮⁯​​⁬⁪⁮‬‍‬‪⁭‬‫‬‭‫‎​‫‎⁪‍‪⁪‫‮(
      [In] MouseEventArgs obj0)
    {
      return obj0.Button;
    }

    static string \u202A‍⁭⁯⁪‭​‪‫‬⁪⁭‪⁬⁫​⁭⁪⁯‫‭‎‎⁭‏‎⁮⁯‫‎⁪⁫‌‮​⁮⁮⁬⁬‌‮([In] string obj0, [In] object obj1) => string.Format(obj0, obj1);

    static Point \u200B‫⁫‭‭‮‪⁬‌⁫​⁪⁮⁯⁬​⁫⁮‏‍​‌⁫⁯‬‪‏⁭⁬⁬‬‌⁪⁪‍⁪⁫‬​⁬‮() => Cursor.Position;

    static DialogResult \u206D⁮​‍‪⁮‬⁬‪⁬‏‌⁭⁪⁪‪‮‫‪⁬‮⁪⁬‬‎​⁬‪‮⁮‏⁪⁫⁮‬⁯⁫‬‮‌‮([In] Form obj0) => obj0.ShowDialog();

    static void \u202B‌⁮‌⁯⁮‫‍⁭⁬​‫‫‎‏‫‭⁭‍‪‮‌‍⁬‮⁫‌‍⁬‬⁭⁪⁬‮⁭‏‭‏‪⁭‮([In] IDisposable obj0) => obj0.Dispose();

    static bool \u206E‫‌⁫‎​⁮⁬​⁪⁭⁯‭⁯‬⁬⁫‍‍⁬‏⁫‌⁫‌⁪‬‭⁬‏⁭​‬⁪‭‍‭‍‭⁪‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u200D‮⁯⁭⁮‪‫⁮‮‍‬‮⁬⁪⁪⁫⁯⁫⁮⁭⁭‏⁭‮⁯⁯‮‌⁯‭‫‎⁮‍‫⁪‮⁮‎‪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u206A‌‎‬‪⁯‮⁭‏⁯‭⁯‫‎‮‪⁬‎‏‌⁫‮‎‏⁮‎​‌‫‫‍‍‍​‌⁬‌‮⁫⁯‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206E‪‬‪‌‪⁬‬‭‌​‌‍⁬‫⁪‪‏‮⁯‭⁭​⁬⁯⁬‎‎‌⁫‪‍‌‫‍‪​‏​‭‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u206A‪⁭‫‌‎‪⁬‪‮‮⁫⁫⁫⁯‌‭⁭‍‬‎‪⁪⁬⁬‌⁬‬‬‭‏‎‏‎⁯‪⁬‮⁮‎‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static void \u200C‭⁮⁬⁯‬‮‫‪‮‌‍‎‬‌​‬‪‮⁯⁮‭⁮⁯‫⁮‮‎‬⁫‏‬⁯⁯⁪‎‍⁮‎‪‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206E​​⁪‬‏‍‎‫‏‫‮‌‍‍⁭‌‪​‎‭⁬⁭‎‌‌⁬​‬⁮‌‍‬⁫‎‍‫‎⁭⁪‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u202E‬⁮‌⁬‏⁬‭⁮⁯​‌‍‬‫⁫‎‬‪‏‭‫⁬‍‮‎‫‬‍⁯⁫⁭‪‍‏‏⁮‭‬‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200E⁭​⁯‮‏⁯⁫⁫⁯‌‮⁭⁭⁬‭‍‍‬‫‮⁪‬​‫⁭​‪‮‮‫‬​‭‍‏​‭⁫‎‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
