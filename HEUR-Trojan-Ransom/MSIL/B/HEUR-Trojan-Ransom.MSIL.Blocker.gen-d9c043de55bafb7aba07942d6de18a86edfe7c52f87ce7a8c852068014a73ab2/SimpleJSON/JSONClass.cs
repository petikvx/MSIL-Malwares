// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: CORINFOEHCLAU, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CA1C166-25B8-418F-B14D-0C0D6D66CCB2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d9c043de55bafb7aba07942d6de18a86edfe7c52f87ce7a8c852068014a73ab2.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
        if (!this.m_Dict.ContainsKey(aKey))
          goto label_4;
label_1:
        int num1 = -1370978652;
label_2:
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -382409007)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_4;
            case 2:
              num1 = (int) num2 * 376534789 ^ 2008248944;
              continue;
            case 3:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 996298046 ^ 2127533939;
              continue;
            case 4:
              num1 = (int) num2 * 1361597088 ^ 1150493428;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return jsonNode;
label_4:
        jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
        num1 = -308033909;
        goto label_2;
      }
      set
      {
label_1:
        int num1 = -1552813072;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -260500273)) % 7U)
          {
            case 0:
              num1 = (int) num2 * 1136562553 ^ -1036351143;
              continue;
            case 1:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * 491744734 ^ -1773596514;
              continue;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 1509433003 ^ -1436899867;
              continue;
            case 3:
              int num3 = !flag ? 584283611 : (num3 = 893920341);
              num1 = num3 ^ (int) num2 * 2112670261;
              continue;
            case 4:
              goto label_1;
            case 5:
              this.m_Dict.Add(aKey, value);
              num1 = -1083743524;
              continue;
            case 6:
              goto label_3;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 349208099;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 1903194884)) % 8U)
          {
            case 0:
              goto label_1;
            case 1:
              int num4 = flag ? 145322090 : (num4 = 496615076);
              num1 = num4 ^ (int) num2 * 1923820274;
              continue;
            case 2:
              jsonNode = (JSONNode) null;
              num1 = 608014578;
              continue;
            case 3:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 4:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -274914076 ^ 1945911857;
              continue;
            case 5:
              num1 = (int) num2 * -412655250 ^ 45950804;
              continue;
            case 7:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -1081038295 ^ 716406976;
                continue;
              }
              num3 = 1;
              break;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = 1638637893;
        }
label_12:
        return jsonNode;
      }
      set
      {
        if (aIndex < 0)
          goto label_7;
label_1:
        int num1 = 331507994;
label_2:
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1855466107)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * 416609515 ^ 1062382830;
              continue;
            case 3:
              int num3 = !flag ? 1343612526 : (num3 = 883950251);
              num1 = num3 ^ (int) num2 * -714804777;
              continue;
            case 4:
              goto label_6;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:
        return;
label_6:
        int num4 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_8;
label_7:
        num4 = 1;
label_8:
        flag = num4 != 0;
        num1 = 1030780579;
        goto label_2;
      }
    }

    public override int Count => this.m_Dict.Count;

    public override void Add(string aKey, JSONNode aItem)
    {
      bool flag1 = !JSONClass.\u206A⁬⁯‪‌‏‌‬⁯⁭‮‌‫‎‌⁫‪‌‪‏‌‎​​‌‮⁬‬​‭‬‮⁭‮‍‍⁬⁭⁮‭‮(aKey);
label_1:
      int num1 = 164630534;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 258617313)) % 14U)
        {
          case 0:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 2024563104 ^ -863687978;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = 463954175;
            continue;
          case 3:
            this.m_Dict.Add(aKey, aItem);
            num1 = 544823759;
            continue;
          case 4:
            flag2 = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * 229750705 ^ -961838004;
            continue;
          case 5:
            num1 = (int) num2 * -75695285 ^ -937502892;
            continue;
          case 6:
            num1 = (int) num2 * 54511635 ^ -2116831274;
            continue;
          case 7:
            int num3 = !flag1 ? -342381543 : (num3 = -95281217);
            num1 = num3 ^ (int) num2 * 1064299611;
            continue;
          case 8:
            num1 = (int) num2 * 306758576 ^ -1933911135;
            continue;
          case 9:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 1119746284;
            continue;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num2 * 76800869 ^ 223317476;
            continue;
          case 12:
            num1 = (int) num2 * 1076659865 ^ 1439293097;
            continue;
          case 13:
            int num4 = !flag2 ? 1049333205 : (num4 = 433125896);
            num1 = num4 ^ (int) num2 * 140578849;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = -1764698300;
      JSONNode jsonNode1;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1328575370)) % 7U)
        {
          case 0:
            JSONNode jsonNode2 = this.m_Dict[aKey];
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = -1995848175;
            continue;
          case 1:
            int num3 = flag ? -283453199 : (num3 = -970412065);
            num1 = num3 ^ (int) num2 * -81208258;
            continue;
          case 2:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * -1076000938 ^ 1796187365;
            continue;
          case 3:
            flag = !this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -540606543 ^ 1637366609;
            continue;
          case 4:
            goto label_1;
          case 6:
            num1 = (int) num2 * -699354521 ^ 1157690994;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return jsonNode1;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -1649169773;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1916498808)) % 8U)
        {
          case 0:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 1:
            num1 = (int) num2 * -1483573604 ^ -1265147666;
            continue;
          case 3:
            if (aIndex >= 0)
            {
              num1 = (int) num2 * 1469573367 ^ 1927192229;
              continue;
            }
            num3 = 1;
            break;
          case 4:
            num1 = (int) num2 * 379736417 ^ -914616602;
            continue;
          case 5:
            jsonNode = (JSONNode) null;
            num1 = -2010940900;
            continue;
          case 6:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -1782202863 ^ -1718978329;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 != 0 ? -604997530 : (num4 = -391395403);
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = -816371455;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ -326865274)) % 23U)
            {
              case 0:
                goto label_1;
              case 1:
                num2 = (int) num3 * -137993030 ^ 1310614788;
                continue;
              case 2:
                goto label_6;
              case 3:
                this.\u003C\u003E1__state = 1;
                num2 = (int) num3 * -386113739 ^ 42233170;
                continue;
              case 4:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * -786627787 ^ 1851676473;
                continue;
              case 5:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * -222051498 ^ 781291124;
                continue;
              case 6:
                num2 = (int) num3 * 1964622845 ^ 1697320584;
                continue;
              case 7:
                num2 = (int) num3 * -290425467 ^ -1436334411;
                continue;
              case 8:
              case 16:
                this.\u003C\u003E1__state = -3;
                num2 = -1181796467;
                continue;
              case 9:
                int num4;
                num2 = num4 = enumerator.MoveNext() ? -2133766538 : (num4 = -1035367147);
                continue;
              case 10:
                num2 = (int) num3 * -437208850 ^ -1415746656;
                continue;
              case 11:
                enumerator = new Dictionary<string, JSONNode>.Enumerator();
                childs = false;
                num2 = (int) num3 * 1930386211 ^ 1492320999;
                continue;
              case 12:
              case 22:
                this.\u003C\u003E1__state = -1;
                num2 = -1358030248;
                continue;
              case 15:
                N = enumerator.Current;
                this.\u003C\u003E2__current = N.Value;
                num2 = -1858694215;
                continue;
              case 17:
                childs = false;
                num2 = -189643466;
                continue;
              case 18:
                int num5 = num1 == 0 ? 1635499499 : (num5 = 495497961);
                num2 = num5 ^ (int) num3 * -1447490018;
                continue;
              case 19:
                num2 = (int) num3 * -1552313090 ^ -1219913301;
                continue;
              case 20:
                int num6;
                num2 = num6 = num1 == 1 ? -1084366334 : (num6 = -60789069);
                continue;
              case 21:
                enumerator = this.m_Dict.GetEnumerator();
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * 612300283 ^ -357177007;
                continue;
              default:
                goto label_22;
            }
          }
label_6:
          childs = true;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_22:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
label_1:
      int num1 = 1160489743;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 838879902)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = "{";
            num1 = (int) num2 * 239224571 ^ -30666110;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_10:
        int num3 = enumerator.MoveNext() ? 529088180 : (num3 = 1462474477);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 838879902)) % 9U)
          {
            case 0:
              num3 = (int) num4 * 1189927865 ^ 750963007;
              continue;
            case 1:
              str1 = JSONClass.\u206B‪‪‭⁫⁪‍‎⁯‍‬⁪‍⁬‌‏‮⁪‭⁮⁪‍‌⁫⁫‭‎‬‏‭‫‌‭‏⁬​⁬⁫⁫⁮‮(str1, ", ");
              num3 = (int) num4 * -183585652 ^ 1804828480;
              continue;
            case 3:
              str1 = JSONClass.\u200B‬‭‎⁬⁬‍‮⁮⁬⁫‫⁯⁪⁭⁫⁭‌‫​‬⁬‪⁭⁫‮​‎‮‫⁮‌⁯⁮⁬⁮‮⁯‍⁮‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u202C⁮⁬‌‮‎⁪​‪⁬‮‍⁭‪‎‌‌‫‭‎‪​‫⁫⁪⁬⁯⁫⁫‍​⁫‏‏‭‬‭⁫⁬‪‮((object) current.Value)
              });
              num3 = 559241005;
              continue;
            case 4:
              goto label_10;
            case 5:
              flag = JSONClass.\u206F‫‎‬‫‮⁮⁯‏⁮‫‎‭​‭‎⁭‌⁪⁯⁯​‍⁫‬‌‫⁬‪⁬⁬⁪⁫⁮‎‮​‬⁬⁮‮(str1) > 2;
              num3 = (int) num4 * -1701272541 ^ -1396999260;
              continue;
            case 6:
              int num5 = flag ? -1393951532 : (num5 = -1014191638);
              num3 = num5 ^ (int) num4 * -258511762;
              continue;
            case 7:
              current = enumerator.Current;
              num3 = 1863712733;
              continue;
            case 8:
              num3 = 529088180;
              continue;
            default:
              goto label_20;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_16:
        int num6 = 1334970202;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ 838879902)) % 3U)
          {
            case 1:
              num6 = (int) num7 * -1887986628 ^ 1709657530;
              continue;
            case 2:
              goto label_16;
            default:
              goto label_19;
          }
        }
label_19:;
      }
label_20:
      string str2 = JSONClass.\u206B‪‪‭⁫⁪‍‎⁯‍‬⁪‍⁬‌‏‮⁪‭⁮⁪‍‌⁫⁫‭‎‬‏‭‫‌‭‏⁬​⁬⁫⁫⁮‮(str1, "}");
label_21:
      int num8 = 616310323;
      string str3;
      while (true)
      {
        uint num9;
        switch ((num9 = (uint) (num8 ^ 838879902)) % 4U)
        {
          case 1:
            str3 = str2;
            num8 = (int) num9 * -1304091663 ^ -223626200;
            continue;
          case 2:
            goto label_21;
          case 3:
            num8 = (int) num9 * 2053650616 ^ -439309022;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
label_1:
      int num1 = -755336762;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -769609163)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1198745706 ^ -326103963;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_11:
        int num3 = enumerator.MoveNext() ? -841526497 : (num3 = -245527971);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -769609163)) % 11U)
          {
            case 0:
              str1 = JSONClass.\u206B‪‪‭⁫⁪‍‎⁯‍‬⁪‍⁬‌‏‮⁪‭⁮⁪‍‌⁫⁫‭‎‬‏‭‫‌‭‏⁬​⁬⁫⁫⁮‮(str1, ", ");
              num3 = (int) num4 * -1034209615 ^ -1894761783;
              continue;
            case 1:
              int num5 = !flag ? -2003041700 : (num5 = -1126737264);
              num3 = num5 ^ (int) num4 * 1920983759;
              continue;
            case 2:
              goto label_11;
            case 3:
              flag = JSONClass.\u206F‫‎‬‫‮⁮⁯‏⁮‫‎‭​‭‎⁭‌⁪⁯⁯​‍⁫‬‌‫⁬‪⁬⁬⁪⁫⁮‎‮​‬⁬⁮‮(str1) > 3;
              num3 = (int) num4 * -643661764 ^ -288420007;
              continue;
            case 4:
              current = enumerator.Current;
              num3 = -1326611096;
              continue;
            case 5:
              str1 = JSONClass.\u200B‬‭‎⁬⁬‍‮⁮⁬⁫‫⁯⁪⁭⁫⁭‌‫​‬⁬‪⁭⁫‮​‎‮‫⁮‌⁯⁮⁬⁮‮⁯‍⁮‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u206B‪‪‭⁫⁪‍‎⁯‍‬⁪‍⁬‌‏‮⁪‭⁮⁪‍‌⁫⁫‭‎‬‏‭‫‌‭‏⁬​⁬⁫⁫⁮‮(aPrefix, "   "))
              });
              num3 = (int) num4 * -1656300747 ^ 748300303;
              continue;
            case 6:
              str1 = JSONClass.\u202A⁭‌‏⁮⁬‪⁪⁮‫​⁬⁪⁮‌⁮‏‏⁭⁭⁫‭‮‏‏‭‬⁯‌⁭⁬‎​‫‍⁯‌‍⁬‮‮(str1, "\n", aPrefix, "   ");
              num3 = -673172046;
              continue;
            case 7:
              num3 = -841526497;
              continue;
            case 8:
              num3 = (int) num4 * -1308197133 ^ 1605028608;
              continue;
            case 9:
              num3 = (int) num4 * 851598268 ^ -1593316643;
              continue;
            default:
              goto label_18;
          }
        }
      }
label_18:
      string str2 = JSONClass.\u202A⁭‌‏⁮⁬‪⁪⁮‫​⁬⁪⁮‌⁮‏‏⁭⁭⁫‭‮‏‏‭‬⁯‌⁭⁬‎​‫‍⁯‌‍⁬‮‮(str1, "\n", aPrefix, "}");
label_19:
      int num6 = -1198438116;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -769609163)) % 3U)
        {
          case 0:
            goto label_19;
          case 2:
            num6 = (int) num7 * 213404845 ^ -2117852383;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return str2;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -1763252996;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1545939516)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            JSONClass.\u200D⁭‪​‪‍⁫‫‬‭‍‏‬​⁭⁭‭⁬⁯⁬‫⁬‭⁪⁮⁬⁮⁮⁯‌‭‏‫‫⁪⁮‌‮‫‏‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -360493602 ^ 2131174909;
            continue;
          case 3:
            JSONClass.\u206A‫⁫‬⁭‭⁮⁬‏‪‭‪‏⁭‬⁫‬⁯‭‬‬⁭‎‏⁮‮⁯⁫‎​‍⁪‫‬‪⁬‪‪⁪‪‮(aWriter, (byte) 2);
            num1 = (int) num2 * -1679781409 ^ -794585613;
            continue;
          case 4:
            num1 = (int) num2 * 2000442165 ^ -428284235;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_11:
        int num3 = !enumerator.MoveNext() ? -244761350 : (num3 = -396985087);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1545939516)) % 8U)
          {
            case 0:
              num3 = (int) num4 * -392505630 ^ 324502694;
              continue;
            case 1:
              JSONClass.\u202B‌⁪⁯‌⁬‌‏⁭⁮⁭‮⁮⁯⁭‬⁫⁯⁯⁪‭⁯‍‍‫⁯‌⁭‍⁯⁭⁭‫‍⁬‭‏‌‎‭‮(aWriter, current);
              num3 = (int) num4 * -574416323 ^ -422990182;
              continue;
            case 2:
              num3 = (int) num4 * -60803433 ^ -196680562;
              continue;
            case 3:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * 1202151753 ^ -1356957185;
              continue;
            case 4:
              goto label_11;
            case 5:
              current = enumerator.Current;
              num3 = -869332139;
              continue;
            case 6:
              goto label_17;
            case 7:
              num3 = -396985087;
              continue;
            default:
              goto label_10;
          }
        }
label_17:
        return;
label_10:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = 1487750712;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1956018759)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 988124045 ^ 34635409;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u206A⁬⁯‪‌‏‌‬⁯⁭‮‌‫‎‌⁫‪‌‪‏‌‎​​‌‮⁬‬​‭‬‮⁭‮‍‍⁬⁭⁮‭‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206F‫‎‬‫‮⁮⁯‏⁮‫‎‭​‭‎⁭‌⁪⁯⁯​‍⁫‬‌‫⁬‪⁬⁬⁪⁫⁮‎‮​‬⁬⁮‮([In] string obj0) => obj0.Length;

    static string \u206B‪‪‭⁫⁪‍‎⁯‍‬⁪‍⁬‌‏‮⁪‭⁮⁪‍‌⁫⁫‭‎‬‏‭‫‌‭‏⁬​⁬⁫⁫⁮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202C⁮⁬‌‮‎⁪​‪⁬‮‍⁭‪‎‌‌‫‭‎‪​‫⁫⁪⁬⁯⁫⁫‍​⁫‏‏‭‬‭⁫⁬‪‮([In] object obj0) => obj0.ToString();

    static string \u200B‬‭‎⁬⁬‍‮⁮⁬⁫‫⁯⁪⁭⁫⁭‌‫​‬⁬‪⁭⁫‮​‎‮‫⁮‌⁯⁮⁬⁮‮⁯‍⁮‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A⁭‌‏⁮⁬‪⁪⁮‫​⁬⁪⁮‌⁮‏‏⁭⁭⁫‭‮‏‏‭‬⁯‌⁭⁬‎​‫‍⁯‌‍⁬‮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206A‫⁫‬⁭‭⁮⁬‏‪‭‪‏⁭‬⁫‬⁯‭‬‬⁭‎‏⁮‮⁯⁫‎​‍⁪‫‬‪⁬‪‪⁪‪‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200D⁭‪​‪‍⁫‫‬‭‍‏‬​⁭⁭‭⁬⁯⁬‫⁬‭⁪⁮⁬⁮⁮⁯‌‭‏‫‫⁪⁮‌‮‫‏‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202B‌⁪⁯‌⁬‌‏⁭⁮⁭‮⁮⁯⁭‬⁫⁯⁯⁪‭⁯‍‍‫⁯‌⁭‍⁯⁭⁭‫‍⁬‭‏‌‎‭‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
