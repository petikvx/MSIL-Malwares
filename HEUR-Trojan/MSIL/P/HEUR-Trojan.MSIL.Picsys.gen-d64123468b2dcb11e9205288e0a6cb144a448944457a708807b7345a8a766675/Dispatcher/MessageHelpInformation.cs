// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.MessageHelpInformation
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime;
using System.Runtime.Serialization;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Syndication;
using System.ServiceModel.Web;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace System.ServiceModel.Dispatcher
{
  internal class MessageHelpInformation
  {
    public string BodyDescription { get; private set; }

    public string FormatString { get; private set; }

    public System.Type Type { get; private set; }

    public bool SupportsJson { get; private set; }

    public XmlSchemaSet SchemaSet { get; private set; }

    public System.Xml.Schema.XmlSchema Schema { get; private set; }

    public XElement XmlExample { get; private set; }

    public XElement JsonExample { get; private set; }

    internal MessageHelpInformation(
      OperationDescription od,
      bool isRequest,
      System.Type type,
      bool wrapped)
    {
      this.Type = type;
      this.SupportsJson = WebHttpBehavior.SupportsJsonFormat(od);
      // ISSUE: reference to a compiler-generated method
      // ISSUE: reference to a compiler-generated method
      string str = isRequest ? SR2.GetString(SR2.HelpPageRequest) : SR2.GetString(SR2.HelpPageResponse);
      if (wrapped && !typeof (void).Equals(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageBodyIsWrapped, (object) str);
        // ISSUE: reference to a compiler-generated method
        this.FormatString = SR2.GetString(SR2.HelpPageUnknown);
      }
      else if (typeof (void).Equals(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageBodyIsEmpty, (object) str);
        // ISSUE: reference to a compiler-generated method
        this.FormatString = SR2.GetString(SR2.HelpPageNA);
      }
      else if (typeof (Message).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsMessage, (object) str);
        // ISSUE: reference to a compiler-generated method
        this.FormatString = SR2.GetString(SR2.HelpPageUnknown);
      }
      else if (typeof (Stream).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsStream, (object) str);
        // ISSUE: reference to a compiler-generated method
        this.FormatString = SR2.GetString(SR2.HelpPageUnknown);
      }
      else if (typeof (Atom10FeedFormatter).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsAtom10Feed, (object) str);
        this.FormatString = WebMessageFormat.Xml.ToString();
      }
      else if (typeof (Atom10ItemFormatter).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsAtom10Entry, (object) str);
        this.FormatString = WebMessageFormat.Xml.ToString();
      }
      else if (typeof (AtomPub10ServiceDocumentFormatter).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsAtomPubServiceDocument, (object) str);
        this.FormatString = WebMessageFormat.Xml.ToString();
      }
      else if (typeof (AtomPub10CategoriesDocumentFormatter).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsAtomPubCategoriesDocument, (object) str);
        this.FormatString = WebMessageFormat.Xml.ToString();
      }
      else if (typeof (Rss20FeedFormatter).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsRSS20Feed, (object) str);
        this.FormatString = WebMessageFormat.Xml.ToString();
      }
      else if (typeof (SyndicationFeedFormatter).IsAssignableFrom(type))
      {
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsSyndication, (object) str);
        this.FormatString = WebMessageFormat.Xml.ToString();
      }
      else
      {
        if (!typeof (XElement).IsAssignableFrom(type))
        {
          if (!typeof (XmlElement).IsAssignableFrom(type))
          {
            try
            {
              bool flag = od.Behaviors.Contains(typeof (XmlSerializerOperationBehavior));
              this.SchemaSet = new XmlSchemaSet();
              IDictionary<XmlQualifiedName, System.Type> knownTypes = (IDictionary<XmlQualifiedName, System.Type>) new Dictionary<XmlQualifiedName, System.Type>();
              XmlQualifiedName name;
              if (flag)
              {
                XmlTypeMapping xmlTypeMapping = new XmlReflectionImporter().ImportTypeMapping(this.Type);
                name = new XmlQualifiedName(xmlTypeMapping.ElementName, xmlTypeMapping.Namespace);
                XmlSchemas schemas = new XmlSchemas();
                new XmlSchemaExporter(schemas).ExportTypeMapping(xmlTypeMapping);
                foreach (System.Xml.Schema.XmlSchema schema in (CollectionBase) schemas)
                  this.SchemaSet.Add(schema);
              }
              else
              {
                XsdDataContractExporter contractExporter = new XsdDataContractExporter();
                List<System.Type> typeList = new List<System.Type>((IEnumerable<System.Type>) od.KnownTypes);
                System.Type dataContractType = DataContractSerializerOperationFormatter.GetSubstituteDataContractType(this.Type, out bool _);
                typeList.Add(dataContractType);
                contractExporter.Export((ICollection<System.Type>) typeList);
                if (!contractExporter.CanExport(dataContractType))
                {
                  // ISSUE: reference to a compiler-generated method
                  this.BodyDescription = SR2.GetString(SR2.HelpPageCouldNotGenerateSchema);
                  // ISSUE: reference to a compiler-generated method
                  this.FormatString = SR2.GetString(SR2.HelpPageUnknown);
                  return;
                }
                name = contractExporter.GetRootElementName(dataContractType);
                DataContract dataContract = DataContract.GetDataContract(dataContractType);
                if (dataContract.KnownDataContracts != null)
                {
                  foreach (XmlQualifiedName key in dataContract.KnownDataContracts.Keys)
                    knownTypes.Add(key, dataContract.KnownDataContracts[key].UnderlyingType);
                }
                foreach (System.Type knownType in od.KnownTypes)
                {
                  XmlQualifiedName schemaTypeName = contractExporter.GetSchemaTypeName(knownType);
                  if (!knownTypes.ContainsKey(schemaTypeName))
                    knownTypes.Add(schemaTypeName, knownType);
                }
                foreach (System.Xml.Schema.XmlSchema schema in (IEnumerable) contractExporter.Schemas.Schemas())
                  this.SchemaSet.Add(schema);
              }
              this.SchemaSet.Compile();
              XmlWriterSettings settings = new XmlWriterSettings()
              {
                CloseOutput = false,
                Indent = true
              };
              if (this.SupportsJson)
              {
                XDocument xdocument = new XDocument();
                using (XmlWriter writer = XmlWriter.Create(xdocument.CreateWriter(), settings))
                  HelpExampleGenerator.GenerateJsonSample(this.SchemaSet, name, writer, knownTypes);
                this.JsonExample = xdocument.Root;
              }
              if (name.Namespace != "http://schemas.microsoft.com/2003/10/Serialization/")
              {
                foreach (System.Xml.Schema.XmlSchema schema in (IEnumerable) this.SchemaSet.Schemas(name.Namespace))
                  this.Schema = schema;
              }
              XDocument xdocument1 = new XDocument();
              using (XmlWriter writer = XmlWriter.Create(xdocument1.CreateWriter(), settings))
                HelpExampleGenerator.GenerateXmlSample(this.SchemaSet, name, writer);
              this.XmlExample = xdocument1.Root;
              return;
            }
            catch (Exception ex)
            {
              if (Fx.IsFatal(ex))
              {
                throw;
              }
              else
              {
                // ISSUE: reference to a compiler-generated method
                this.BodyDescription = SR2.GetString(SR2.HelpPageCouldNotGenerateSchema);
                // ISSUE: reference to a compiler-generated method
                this.FormatString = SR2.GetString(SR2.HelpPageUnknown);
                this.Schema = (System.Xml.Schema.XmlSchema) null;
                this.JsonExample = (XElement) null;
                this.XmlExample = (XElement) null;
                return;
              }
            }
          }
        }
        // ISSUE: reference to a compiler-generated method
        this.BodyDescription = SR2.GetString(SR2.HelpPageIsXML, (object) str);
        this.FormatString = WebMessageFormat.Xml.ToString();
      }
    }
  }
}
