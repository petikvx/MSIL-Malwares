// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.NTTaggedData
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip
{
  public class NTTaggedData : ITaggedData
  {
    private DateTime \uE002 = DateTime.FromFileTime(0L);
    private DateTime \uE001 = DateTime.FromFileTime(0L);
    private DateTime \uE000 = DateTime.FromFileTime(0L);

    public short TagID => 10;

    public void SetData(byte[] data, int index, int count)
    {
      using (MemoryStream memoryStream = new MemoryStream(data, index, count, false))
      {
        using (\uE00B obj = new \uE00B((Stream) memoryStream))
        {
          obj.\uE005();
          while (obj.Position < obj.Length)
          {
            int num = obj.\uE006();
            int offset = obj.\uE006();
            if (num == 1)
            {
              if (offset < 24)
                break;
              this.\uE001 = DateTime.FromFileTime(obj.\uE000());
              this.\uE002 = DateTime.FromFileTime(obj.\uE000());
              this.\uE000 = DateTime.FromFileTime(obj.\uE000());
              break;
            }
            obj.Seek((long) offset, SeekOrigin.Current);
          }
        }
      }
    }

    public byte[] GetData()
    {
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (\uE00B obj = new \uE00B((Stream) memoryStream))
        {
          obj.\uE000 = false;
          obj.\uE002(0);
          obj.\uE004(1);
          obj.\uE004(24);
          obj.\uE000(this.\uE001.ToFileTime());
          obj.\uE000(this.\uE002.ToFileTime());
          obj.\uE000(this.\uE000.ToFileTime());
          return memoryStream.ToArray();
        }
      }
    }

    public static bool IsValidValue(DateTime value)
    {
      bool flag = true;
      try
      {
        value.ToFileTimeUtc();
      }
      catch
      {
        flag = false;
      }
      return flag;
    }

    public DateTime LastModificationTime
    {
      get => this.\uE001;
      set => this.\uE001 = NTTaggedData.IsValidValue(value) ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }

    public DateTime CreateTime
    {
      get => this.\uE000;
      set => this.\uE000 = NTTaggedData.IsValidValue(value) ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }

    public DateTime LastAccessTime
    {
      get => this.\uE002;
      set => this.\uE002 = NTTaggedData.IsValidValue(value) ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }
  }
}
