// Decompiled with JetBrains decompiler
// Type: BatchRunner.SilentGameEngine
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using PlanetDebug;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace BatchRunner
{
  internal class SilentGameEngine
  {
    private Game engine = (Game) null;
    private static char[] newline = new char[1]{ '\n' };

    public bool IsRunning { get; private set; }

    public bool Aborted { get; private set; }

    public void Abort() => this.Aborted = true;

    public botDebugBase Player1 { get; set; }

    public botDebugBase Player2 { get; set; }

    public int PlayerWinnerId { get; private set; }

    public string MapName { get; set; }

    public int MaxTurns { get; set; }

    public int TurnsPlayed { get; private set; }

    public bool Start()
    {
label_1:
      int num1 = -1870904384;
      bool flag1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -570908873)) % 11U)
        {
          case 0:
            this.MaxTurns = 200;
            num1 = (int) num2 * -1777973371 ^ 188352614;
            continue;
          case 1:
            int num3 = !flag1 ? -1320076258 : (num3 = -859337746);
            num1 = num3 ^ (int) num2 * 832529598;
            continue;
          case 2:
            flag1 = this.MaxTurns <= 0;
            num1 = (int) num2 * -539810814 ^ 1803858857;
            continue;
          case 4:
            this.TurnsPlayed = 0;
            this.PlayerWinnerId = 0;
            num1 = (int) num2 * -1302132603 ^ -1938083728;
            continue;
          case 5:
            int num4 = this.IsRunning ? 1088955701 : (num4 = 996277207);
            num1 = num4 ^ (int) num2 * -1663102888;
            continue;
          case 6:
            goto label_5;
          case 7:
            goto label_1;
          case 8:
            num1 = -1549694936;
            continue;
          case 9:
            this.Aborted = false;
            this.IsRunning = true;
            num1 = -909808253;
            continue;
          case 10:
            num1 = (int) num2 * -1798491688 ^ -1161001865;
            continue;
          default:
            goto label_12;
        }
      }
label_5:
      bool flag2 = false;
      goto label_65;
label_12:
      try
      {
        this.engine = new Game(this.MapName, this.MaxTurns, 0, (string) null);
label_14:
        int num5 = -46989161;
        while (true)
        {
          uint num6;
          List<botDebugBase> source1;
          bool flag3;
          bool flag4;
          bool flag5;
          bool flag6;
          bool flag7;
          int turnsPlayed;
          int maxTurns;
          ParallelQuery<botDebugBase> source2;
          int num7;
          switch ((num6 = (uint) (num5 ^ -570908873)) % 39U)
          {
            case 0:
              int num8 = !flag5 ? -624024549 : (num8 = -1344754343);
              num5 = num8 ^ (int) num6 * 311534394;
              continue;
            case 1:
              num5 = (int) num6 * -272583221 ^ -724671734;
              continue;
            case 2:
              if (maxTurns > 0)
              {
                num5 = -409660686;
                continue;
              }
              num7 = 0;
              break;
            case 3:
              int num9 = !this.Aborted ? 1949005389 : (num9 = 1188099055);
              num5 = num9 ^ (int) num6 * 1381323799;
              continue;
            case 4:
              this.PlayerWinnerId = 2;
              num5 = (int) num6 * 1811069016 ^ -618744749;
              continue;
            case 5:
              num5 = (int) num6 * -1913220856 ^ 27091795;
              continue;
            case 6:
              source2 = source1.AsParallel<botDebugBase>();
              maxTurns = this.MaxTurns;
              num5 = (int) num6 * 1534243503 ^ 1517101381;
              continue;
            case 7:
              num5 = (int) num6 * -22557315 ^ -2006278026;
              continue;
            case 9:
              num5 = (int) num6 * -1651521086 ^ 839377256;
              continue;
            case 10:
              int num10 = flag4 ? 1954396155 : (num10 = 1771436677);
              num5 = num10 ^ (int) num6 * -414297017;
              continue;
            case 11:
              flag6 = !SilentGameEngine.CheckForAlliveOrDropPlayer(this.engine, source1[0]);
              num5 = (int) num6 * 1720410486 ^ 769547183;
              continue;
            case 12:
              int num11 = !flag7 ? 1690740640 : (num11 = 643478102);
              num5 = num11 ^ (int) num6 * 1249441076;
              continue;
            case 13:
              source1.ForEach((Action<botDebugBase>) (player => player.GameBoardData = this.engine.PovRepresentation(player.Id)));
              num5 = -413885787;
              continue;
            case 14:
              int num12;
              num5 = num12 = !SilentGameEngine.CheckForAlliveOrDropPlayer(this.engine, source1[1]) ? -1178696412 : (num12 = -1279345194);
              continue;
            case 15:
              int num13 = flag6 ? 1167450816 : (num13 = 731765899);
              num5 = num13 ^ (int) num6 * 189151017;
              continue;
            case 16:
              this.PlayerWinnerId = 1;
              num5 = (int) num6 * -308055792 ^ 1236189413;
              continue;
            case 17:
              this.PlayerWinnerId = 2;
              num5 = (int) num6 * -797857498 ^ -1346382844;
              continue;
            case 18:
              flag3 = !SilentGameEngine.CheckForAlliveOrDropPlayer(this.engine, source1[0]);
              num5 = (int) num6 * -85214984 ^ -1925002045;
              continue;
            case 19:
              flag5 = this.PlayerWinnerId > 0;
              num5 = -243575081;
              continue;
            case 20:
              flag7 = !SilentGameEngine.CheckForAlliveOrDropPlayer(this.engine, source1[1]);
              num5 = -1032568722;
              continue;
            case 21:
              num5 = (int) num6 * 220460415 ^ -289050975;
              continue;
            case 22:
              --maxTurns;
              num5 = (int) num6 * -932202297 ^ 444583781;
              continue;
            case 23:
              turnsPlayed = this.TurnsPlayed;
              num5 = -1221423259;
              continue;
            case 24:
              source2.ForAll<botDebugBase>(new Action<botDebugBase>(this.PushGameDataToPlayer));
              num5 = (int) num6 * 641078028 ^ -1390022178;
              continue;
            case 25:
              goto label_17;
            case 26:
              int num14 = !flag3 ? -1665840117 : (num14 = -1245091622);
              num5 = num14 ^ (int) num6 * 1094296348;
              continue;
            case 27:
              goto label_14;
            case 28:
              this.TurnsPlayed = turnsPlayed + 1;
              this.engine.FlushGamePlaybackString();
              this.engine.DoTimeStep();
              num5 = (int) num6 * -749299089 ^ 850949480;
              continue;
            case 29:
              num5 = (int) num6 * 1321078722 ^ -1166994126;
              continue;
            case 30:
              int num15;
              num5 = num15 = this.PlayerWinnerId > 0 ? -726418749 : (num15 = -1020463091);
              continue;
            case 31:
              num7 = this.engine.Winner() < 0 ? 1 : 0;
              break;
            case 32:
              source1.Add(this.Player2);
              num5 = (int) num6 * 1883969394 ^ -501850082;
              continue;
            case 33:
              this.PlayerWinnerId = 1;
              num5 = (int) num6 * -1528438389 ^ -166581948;
              continue;
            case 34:
              num5 = (int) num6 * -1460450525 ^ -536806112;
              continue;
            case 35:
              this.engine.Init();
              source1 = new List<botDebugBase>();
              num5 = (int) num6 * 1706185503 ^ -1933371565;
              continue;
            case 36:
              num5 = -669635859;
              continue;
            case 37:
              num5 = -1210816170;
              continue;
            case 38:
              source1.Add(this.Player1);
              num5 = (int) num6 * 122060160 ^ 2059511833;
              continue;
            default:
              goto label_61;
          }
          flag4 = num7 != 0;
          num5 = -1950186003;
        }
label_17:
        flag2 = false;
        goto label_65;
      }
      finally
      {
label_57:
        int num16 = -1174665844;
        while (true)
        {
          uint num17;
          switch ((num17 = (uint) (num16 ^ -570908873)) % 3U)
          {
            case 1:
              this.IsRunning = false;
              num16 = (int) num17 * -359589783 ^ -1319195526;
              continue;
            case 2:
              goto label_57;
            default:
              goto label_60;
          }
        }
label_60:;
      }
label_61:
      flag2 = true;
label_62:
      int num18 = -1266932569;
      while (true)
      {
        uint num19;
        switch ((num19 = (uint) (num18 ^ -570908873)) % 3U)
        {
          case 0:
            goto label_62;
          case 1:
            num18 = (int) num19 * 1785336610 ^ -1086230079;
            continue;
          default:
            goto label_65;
        }
      }
label_65:
      return flag2;
    }

    public static bool CheckForAlliveOrDropPlayer(Game engine, botDebugBase player)
    {
label_1:
      int num1 = -778832498;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -63948639)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            engine.DropPlayer(player.Id);
            flag2 = false;
            num1 = -852309852;
            continue;
          case 2:
            num1 = (int) num2 * -743341829 ^ 598164560;
            continue;
          case 4:
            flag2 = true;
            num1 = (int) num2 * 999141148 ^ -886181859;
            continue;
          case 5:
            int num3 = !flag1 ? -1003308287 : (num3 = -61506154);
            num1 = num3 ^ (int) num2 * 100968003;
            continue;
          case 6:
            flag1 = engine.IsAlive(player.Id);
            num1 = (int) num2 * -1737886972 ^ -593073192;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    private void PushGameDataToPlayer(botDebugBase player)
    {
      try
      {
        player.CreateGameBoardInstance();
label_2:
        int num1 = -646881799;
        string[] strArray;
        int index;
        string order;
        string str;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1773440532)) % 13U)
          {
            case 0:
              goto label_2;
            case 1:
              num1 = (int) num2 * -90685228 ^ 617392139;
              continue;
            case 2:
              num1 = (int) num2 * -1262387366 ^ -798661847;
              continue;
            case 3:
              this.engine.IssueOrder(player.Id, order);
              num1 = (int) num2 * -1600014847 ^ 1627192721;
              continue;
            case 4:
              strArray = SilentGameEngine.\u200F⁮‎‪⁮‪⁭⁫⁫⁬‌⁬‮‎‫⁮‭⁯‏‎‎‏⁭‌‌‍‎⁮⁯⁭⁮‮⁮⁯⁬‪‪‭⁬‎‮(str, SilentGameEngine.newline, StringSplitOptions.RemoveEmptyEntries);
              index = 0;
              num1 = (int) num2 * -1661012518 ^ 1941971579;
              continue;
            case 5:
              goto label_16;
            case 6:
              num1 = (int) num2 * -148063283 ^ -2072352752;
              continue;
            case 7:
              player.DoMove();
              num1 = (int) num2 * 318208425 ^ 1358465908;
              continue;
            case 8:
              str = SilentGameEngine.\u200C​‫‮‫⁯⁭⁫​⁮⁬⁫‪⁬‪‫‫‏⁫‫⁫‍‌⁬⁫⁮‍⁭⁫⁬‮⁫‏​⁫⁯⁮‏‬‫‮(player.OutputBuffer, "\r\n", "\n");
              num1 = (int) num2 * -1621627449 ^ -667061613;
              continue;
            case 9:
              int num3;
              num1 = num3 = index >= strArray.Length ? -464818861 : (num3 = -249071818);
              continue;
            case 10:
              order = strArray[index];
              num1 = -1063859731;
              continue;
            case 11:
              num1 = (int) num2 * 1987874206 ^ -774137860;
              continue;
            case 12:
              ++index;
              num1 = (int) num2 * -498996866 ^ -1715497973;
              continue;
            default:
              goto label_4;
          }
        }
label_16:
        return;
label_4:;
      }
      catch
      {
      }
      finally
      {
        player.Clear();
      }
    }

    static string \u200C​‫‮‫⁯⁭⁫​⁮⁬⁫‪⁬‪‫‫‏⁫‫⁫‍‌⁬⁫⁮‍⁭⁫⁬‮⁫‏​⁫⁯⁮‏‬‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0.Replace(obj1, obj2);
    }

    static string[] \u200F⁮‎‪⁮‪⁭⁫⁫⁬‌⁬‮‎‫⁮‭⁯‏‎‎‏⁭‌‌‍‎⁮⁯⁭⁮‮⁮⁯⁬‪‪‭⁬‎‮(
      [In] string obj0,
      [In] char[] obj1,
      [In] StringSplitOptions obj2)
    {
      return obj0.Split(obj1, obj2);
    }
  }
}
