// Decompiled with JetBrains decompiler
// Type: 636812835384.475915125247
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003589226503932;
using \u003636812835384;
using System;

namespace \u003636812835384
{
  internal static class \u003475915125247
  {
    public static bool \u003553144866625(
      this string _param0,
      int _param1,
      out long _param2,
      out int _param3,
      int? _param4 = null)
    {
      int num1 = _param4 ?? int.MaxValue;
      _param2 = 0L;
      bool flag = false;
      int num2 = 0;
      _param3 = _param1;
      for (; _param1 < _param0.Length && char.IsDigit(_param0[_param1]) && num2 < num1; ++num2)
      {
        flag = true;
        _param2 = _param2 * 10L + (long) _param0[_param1] - 48L;
        ++_param1;
      }
      _param3 = _param1;
      return flag;
    }

    private static bool \u003236179860097(this char _param0, out int _param1)
    {
      char lowerInvariant = char.ToLowerInvariant(_param0);
      if (char.IsDigit(lowerInvariant))
      {
        _param1 = (int) lowerInvariant - 48;
        return true;
      }
      if (lowerInvariant >= 'a' && lowerInvariant <= 'f')
      {
        _param1 = 10 + ((int) lowerInvariant - 97);
        return true;
      }
      _param1 = -1;
      return false;
    }

    public static bool \u003536410186849(
      this string _param0,
      int _param1,
      out long _param2,
      out int _param3)
    {
      _param2 = 0L;
      bool flag = false;
      int num;
      for (; _param1 < _param0.Length && _param0[_param1].\u003236179860097(out num); ++_param1)
      {
        flag = true;
        _param2 = _param2 * 16L + (long) num;
      }
      _param3 = _param1;
      return flag;
    }

    public static bool \u003990101920792(
      this string _param0,
      int _param1,
      char _param2,
      out int _param3)
    {
      if (_param1 < _param0.Length && (int) _param0[_param1] == (int) _param2)
      {
        _param3 = _param1 + 1;
        return true;
      }
      _param3 = _param1;
      return false;
    }

    public static bool \u003838311038555(
      this string _param0,
      int _param1,
      char _param2,
      out int _param3,
      out char? _param4)
    {
      _param4 = new char?();
      if (_param1 < _param0.Length && (int) _param0[_param1] == (int) _param2)
      {
        _param3 = _param1 + 1;
        _param4 = new char?(_param2);
        return true;
      }
      _param3 = _param1;
      return false;
    }

    public static bool \u003657212472534(
      this string _param0,
      int _param1,
      string _param2,
      out int _param3)
    {
      if (_param1 + _param2.Length > _param0.Length)
      {
        _param3 = _param1;
        return false;
      }
      for (int index = 0; index < _param2.Length; ++index)
      {
        if ((int) _param0[_param1 + index] != (int) _param2[index])
        {
          _param3 = _param1;
          return false;
        }
      }
      _param3 = _param1 + _param2.Length;
      return true;
    }

    public static bool \u003752059139002(this string _param0, int _param1, out int _param2)
    {
      bool flag = false;
      for (; _param1 < _param0.Length && char.IsWhiteSpace(_param0[_param1]); ++_param1)
        flag = true;
      _param2 = _param1;
      return flag;
    }

    public static bool \u003673884708623(this string _param0, int _param1, out int _param2)
    {
      _param2 = _param1;
      if (_param1 >= _param0.Length)
        return true;
      return _param0.\u003752059139002(_param1, out _param2) && _param2 >= _param0.Length;
    }

    public static bool \u003825622699475(
      this string _param0,
      int _param1,
      out int _param2,
      Predicate<char> _param3)
    {
      bool flag = false;
      for (; _param1 < _param0.Length && !_param3(_param0[_param1]); ++_param1)
        flag = true;
      _param2 = _param1;
      return flag;
    }

    public static bool \u003697726782996(
      this string _param0,
      int _param1,
      out int _param2,
      Predicate<char> _param3)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003475915125247.\u003220026796163 obj = (\u003475915125247.\u003220026796163) new \u003218959882389.\u003639884408807();
      // ISSUE: reference to a compiler-generated field
      ((\u003218959882389.\u003639884408807) obj).\u003423854032329 = _param3;
      // ISSUE: reference to a compiler-generated method
      return _param0.\u003825622699475(_param1, out _param2, new Predicate<char>(obj.\u003738682565773));
    }

    public static bool \u003791443841354(this string _param0, int _param1, out int _param2)
    {
      if (_param1 <= _param0.Length - 2 && _param0[_param1] == '\r' && _param0[_param1 + 1] == '\n')
      {
        _param2 = _param1 + 2;
        return true;
      }
      if (_param1 <= _param0.Length - 1 && _param0[_param1] == '\n')
      {
        _param2 = _param1 + 1;
        return true;
      }
      _param2 = _param1;
      return false;
    }

    private static bool \u003294142510941(
      this string _param0,
      int _param1,
      out int _param2,
      out bool _param3)
    {
      _param2 = _param1;
      _param3 = false;
      if (_param1 >= _param0.Length)
        return false;
      if (_param0[_param1] == '-' || _param0[_param1] == '−' || _param0[_param1] == '﹣' || _param0[_param1] == '－')
      {
        _param3 = true;
        _param2 = _param1 + 1;
        return true;
      }
      if (_param0[_param1] == '+' || _param0[_param1] == '﬩')
      {
        _param2 = _param1 + 1;
        return true;
      }
      _param2 = _param1;
      return false;
    }

    public static bool \u003799004331030(
      this string _param0,
      int _param1,
      out double _param2,
      out int _param3,
      bool _param4 = false)
    {
      int num = _param1;
      _param2 = double.NaN;
      bool flag;
      _param0.\u003294142510941(_param1, out _param1, out flag);
      if (!_param0.\u003889027038369(_param1, out _param2, out _param3, _param4))
      {
        _param3 = num;
        return false;
      }
      _param2 = flag ? -_param2 : _param2;
      return true;
    }

    public static bool \u003889027038369(
      this string _param0,
      int _param1,
      out double _param2,
      out int _param3,
      bool _param4 = false)
    {
      double num1 = 0.0;
      bool flag1 = false;
      _param3 = _param1;
      _param2 = double.NaN;
      for (; _param1 < _param0.Length && char.IsDigit(_param0[_param1]); ++_param1)
      {
        flag1 = true;
        num1 = num1 * 10.0 + (double) ((int) _param0[_param1] - 48);
      }
      if (_param1 >= _param0.Length || _param0[_param1] != '.' && _param0[_param1] != ',' && _param0[_param1] != '/')
      {
        if (_param4)
          return false;
        _param2 = flag1 ? num1 : double.NaN;
        _param3 = _param1;
        return flag1;
      }
      ++_param1;
      double num2 = 0.0;
      double num3 = 10.0;
      bool flag2 = false;
      for (; _param1 < _param0.Length && char.IsDigit(_param0[_param1]); ++_param1)
      {
        flag2 = true;
        num2 += (double) ((int) _param0[_param1] - 48) / num3;
        num3 *= 10.0;
      }
      if (!flag2)
        return false;
      _param3 = _param1;
      _param2 = num1 + num2;
      return true;
    }
  }
}
