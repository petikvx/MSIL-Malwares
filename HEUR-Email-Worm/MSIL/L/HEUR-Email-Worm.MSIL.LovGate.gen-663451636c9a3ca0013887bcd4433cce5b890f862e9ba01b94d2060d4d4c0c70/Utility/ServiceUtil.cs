// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.Utility.ServiceUtil
// Assembly: EventRegistrationTokenTa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 99BE195C-C4C5-4E88-A9C4-8AB7EF40C780
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-663451636c9a3ca0013887bcd4433cce5b890f862e9ba01b94d2060d4d4c0c70.exe

using Microsoft.Win32;
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace CiscoAnyconnectControl.Utility
{
  public static class ServiceUtil
  {
    private const int STANDARD_RIGHTS_REQUIRED = 983040;
    private const int SERVICE_WIN32_OWN_PROCESS = 16;

    public static string GetEnvironment(string name, bool ExpandVariables = true) => ExpandVariables ? Environment.GetEnvironmentVariable(name) : (string) Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\\").GetValue(name, (object) "", RegistryValueOptions.DoNotExpandEnvironmentNames);

    public static void SetEnvironment(string name, string value) => Environment.SetEnvironmentVariable(name, value);

    public static ServiceController[] List => (ServiceController[]) null;

    public static void Start(string serviceName, int timeoutMilliseconds)
    {
    }

    public static void Stop(string serviceName, int timeoutMilliseconds)
    {
    }

    public static void Restart(string serviceName, int timeoutMilliseconds)
    {
    }

    public static bool IsInstalled(string serviceName) => false;

    [DllImport("advapi32.dll", EntryPoint = "OpenSCManagerA")]
    private static extern IntPtr OpenSCManager(
      string lpMachineName,
      string lpDatabaseName,
      ServiceUtil.ServiceManagerRights dwDesiredAccess);

    [DllImport("advapi32.dll", EntryPoint = "OpenServiceA", CharSet = CharSet.Ansi)]
    private static extern IntPtr OpenService(
      IntPtr hSCManager,
      string lpServiceName,
      ServiceUtil.ServiceRights dwDesiredAccess);

    [DllImport("advapi32.dll", EntryPoint = "CreateServiceA")]
    private static extern IntPtr CreateService(
      IntPtr hSCManager,
      string lpServiceName,
      string lpDisplayName,
      ServiceUtil.ServiceRights dwDesiredAccess,
      int dwServiceType,
      ServiceUtil.ServiceBootFlag dwStartType,
      ServiceUtil.ServiceError dwErrorControl,
      string lpBinaryPathName,
      string lpLoadOrderGroup,
      IntPtr lpdwTagId,
      string lpDependencies,
      string lp,
      string lpPassword);

    [DllImport("advapi32.dll")]
    private static extern int CloseServiceHandle(IntPtr hSCObject);

    [DllImport("advapi32.dll")]
    private static extern int QueryServiceStatus(
      IntPtr hService,
      ServiceUtil.SERVICE_STATUS lpServiceStatus);

    [DllImport("advapi32.dll", SetLastError = true)]
    private static extern int DeleteService(IntPtr hService);

    [DllImport("advapi32.dll")]
    private static extern int ControlService(
      IntPtr hService,
      ServiceUtil.ServiceControl dwControl,
      ServiceUtil.SERVICE_STATUS lpServiceStatus);

    [DllImport("advapi32.dll", EntryPoint = "StartServiceA")]
    private static extern int StartService(
      IntPtr hService,
      int dwNumServiceArgs,
      int lpServiceArgVectors);

    [DllImport("advapi32.dll")]
    private static extern int ChangeServiceConfig2(
      IntPtr hService,
      ServiceUtil.ServiceConfig dwInfoLevel,
      object lpInfo);

    public static void Uninstall(string ServiceName)
    {
      IntPtr num1 = ServiceUtil.OpenSCManager(ServiceUtil.ServiceManagerRights.Connect);
      try
      {
        IntPtr num2 = ServiceUtil.OpenService(num1, ServiceName, ServiceUtil.ServiceRights.StandardRightsRequired | ServiceUtil.ServiceRights.QueryStatus | ServiceUtil.ServiceRights.Stop);
        if (num2 == IntPtr.Zero)
          throw new ApplicationException("Service not installed.");
        try
        {
          ServiceUtil.StopService(num2);
          if (ServiceUtil.DeleteService(num2) == 0)
            throw new ApplicationException("Could not delete service " + Marshal.GetLastWin32Error().ToString());
        }
        finally
        {
          ServiceUtil.CloseServiceHandle(num2);
        }
      }
      finally
      {
        ServiceUtil.CloseServiceHandle(num1);
      }
    }

    public static bool ServiceIsInstalled(string ServiceName)
    {
      IntPtr num = ServiceUtil.OpenSCManager(ServiceUtil.ServiceManagerRights.Connect);
      try
      {
        IntPtr hSCObject = ServiceUtil.OpenService(num, ServiceName, ServiceUtil.ServiceRights.QueryStatus);
        if (hSCObject == IntPtr.Zero)
          return false;
        ServiceUtil.CloseServiceHandle(hSCObject);
        return true;
      }
      finally
      {
        ServiceUtil.CloseServiceHandle(num);
      }
    }

    public static void InstallAndStart(
      string ServiceName,
      string DisplayName,
      string FileName,
      string Dependencies = null,
      string Description = null)
    {
      IntPtr num1 = ServiceUtil.OpenSCManager(ServiceUtil.ServiceManagerRights.Connect | ServiceUtil.ServiceManagerRights.CreateService);
      try
      {
        IntPtr num2 = ServiceUtil.OpenService(num1, ServiceName, ServiceUtil.ServiceRights.QueryStatus | ServiceUtil.ServiceRights.Start);
        if (num2 == IntPtr.Zero)
          num2 = ServiceUtil.CreateService(num1, ServiceName, DisplayName, ServiceUtil.ServiceRights.QueryStatus | ServiceUtil.ServiceRights.Start, 16, ServiceUtil.ServiceBootFlag.AutoStart, ServiceUtil.ServiceError.Normal, FileName, (string) null, IntPtr.Zero, Dependencies, (string) null, (string) null);
        if (num2 == IntPtr.Zero)
          throw new ApplicationException("Failed to install service.");
        ServiceUtil.SERVICE_DESCRIPTION lpInfo = new ServiceUtil.SERVICE_DESCRIPTION()
        {
          lpDescription = Description
        };
        ServiceUtil.ChangeServiceConfig2(num2, ServiceUtil.ServiceConfig.Description, (object) lpInfo);
        try
        {
          ServiceUtil.StartService(num2);
        }
        finally
        {
          ServiceUtil.CloseServiceHandle(num2);
        }
      }
      finally
      {
        ServiceUtil.CloseServiceHandle(num1);
      }
    }

    public static void StartService(string Name)
    {
      IntPtr num1 = ServiceUtil.OpenSCManager(ServiceUtil.ServiceManagerRights.Connect);
      try
      {
        IntPtr num2 = ServiceUtil.OpenService(num1, Name, ServiceUtil.ServiceRights.QueryStatus | ServiceUtil.ServiceRights.Start);
        if (num2 == IntPtr.Zero)
          throw new ApplicationException("Could not open service.");
        try
        {
          ServiceUtil.StartService(num2);
        }
        finally
        {
          ServiceUtil.CloseServiceHandle(num2);
        }
      }
      finally
      {
        ServiceUtil.CloseServiceHandle(num1);
      }
    }

    public static void StopService(string Name)
    {
      IntPtr num1 = ServiceUtil.OpenSCManager(ServiceUtil.ServiceManagerRights.Connect);
      try
      {
        IntPtr num2 = ServiceUtil.OpenService(num1, Name, ServiceUtil.ServiceRights.QueryStatus | ServiceUtil.ServiceRights.Stop);
        if (num2 == IntPtr.Zero)
          throw new ApplicationException("Could not open service.");
        try
        {
          ServiceUtil.StopService(num2);
        }
        finally
        {
          ServiceUtil.CloseServiceHandle(num2);
        }
      }
      finally
      {
        ServiceUtil.CloseServiceHandle(num1);
      }
    }

    public static void RestartService(string Name)
    {
      IntPtr num1 = ServiceUtil.OpenSCManager(ServiceUtil.ServiceManagerRights.Connect);
      try
      {
        IntPtr num2 = ServiceUtil.OpenService(num1, Name, ServiceUtil.ServiceRights.QueryStatus | ServiceUtil.ServiceRights.Start | ServiceUtil.ServiceRights.Stop);
        if (num2 == IntPtr.Zero)
          throw new ApplicationException("Could not open service.");
        try
        {
          ServiceUtil.RestartService(num2);
        }
        finally
        {
          ServiceUtil.CloseServiceHandle(num2);
        }
      }
      finally
      {
        ServiceUtil.CloseServiceHandle(num1);
      }
    }

    private static void StartService(IntPtr hService)
    {
      ServiceUtil.SERVICE_STATUS serviceStatus = new ServiceUtil.SERVICE_STATUS();
      ServiceUtil.StartService(hService, 0, 0);
      ServiceUtil.WaitForServiceStatus(hService, ServiceUtil.ServiceState.Starting, ServiceUtil.ServiceState.Run);
    }

    private static void StopService(IntPtr hService)
    {
      ServiceUtil.SERVICE_STATUS lpServiceStatus = new ServiceUtil.SERVICE_STATUS();
      ServiceUtil.ControlService(hService, ServiceUtil.ServiceControl.Stop, lpServiceStatus);
      ServiceUtil.WaitForServiceStatus(hService, ServiceUtil.ServiceState.Stopping, ServiceUtil.ServiceState.Stop);
    }

    private static void RestartService(IntPtr hService)
    {
      ServiceUtil.StopService(hService);
      ServiceUtil.StartService(hService);
    }

    public static ServiceUtil.ServiceState GetServiceStatus(string ServiceName)
    {
      IntPtr num = ServiceUtil.OpenSCManager(ServiceUtil.ServiceManagerRights.Connect);
      try
      {
        IntPtr hService = ServiceUtil.OpenService(num, ServiceName, ServiceUtil.ServiceRights.QueryStatus);
        if (hService == IntPtr.Zero)
          return ServiceUtil.ServiceState.NotFound;
        try
        {
          return ServiceUtil.GetServiceStatus(hService);
        }
        finally
        {
          ServiceUtil.CloseServiceHandle(num);
        }
      }
      finally
      {
        ServiceUtil.CloseServiceHandle(num);
      }
    }

    private static ServiceUtil.ServiceState GetServiceStatus(IntPtr hService)
    {
      ServiceUtil.SERVICE_STATUS lpServiceStatus = new ServiceUtil.SERVICE_STATUS();
      return ServiceUtil.QueryServiceStatus(hService, lpServiceStatus) != 0 ? lpServiceStatus.dwCurrentState : throw new ApplicationException("Failed to query service status.");
    }

    private static bool WaitForServiceStatus(
      IntPtr hService,
      ServiceUtil.ServiceState WaitStatus,
      ServiceUtil.ServiceState DesiredStatus)
    {
      ServiceUtil.SERVICE_STATUS lpServiceStatus = new ServiceUtil.SERVICE_STATUS();
      ServiceUtil.QueryServiceStatus(hService, lpServiceStatus);
      if (lpServiceStatus.dwCurrentState == DesiredStatus)
        return true;
      int tickCount = Environment.TickCount;
      int dwCheckPoint = lpServiceStatus.dwCheckPoint;
      while (lpServiceStatus.dwCurrentState == WaitStatus)
      {
        int millisecondsTimeout = lpServiceStatus.dwWaitHint / 10;
        if (millisecondsTimeout < 1000)
          millisecondsTimeout = 1000;
        else if (millisecondsTimeout > 10000)
          millisecondsTimeout = 10000;
        Thread.Sleep(millisecondsTimeout);
        if (ServiceUtil.QueryServiceStatus(hService, lpServiceStatus) != 0)
        {
          if (lpServiceStatus.dwCheckPoint > dwCheckPoint)
          {
            tickCount = Environment.TickCount;
            dwCheckPoint = lpServiceStatus.dwCheckPoint;
          }
          else if (Environment.TickCount - tickCount > lpServiceStatus.dwWaitHint)
            break;
        }
        else
          break;
      }
      return lpServiceStatus.dwCurrentState == DesiredStatus;
    }

    private static IntPtr OpenSCManager(ServiceUtil.ServiceManagerRights Rights)
    {
      IntPtr num = ServiceUtil.OpenSCManager((string) null, (string) null, Rights);
      return !(num == IntPtr.Zero) ? num : throw new ApplicationException("Could not connect to service control manager.");
    }

    [System.Flags]
    public enum ServiceManagerRights
    {
      Connect = 1,
      CreateService = 2,
      EnumerateService = 4,
      Lock = 8,
      QueryLockStatus = 16, // 0x00000010
      ModifyBootConfig = 32, // 0x00000020
      StandardRightsRequired = 983040, // 0x000F0000
      AllAccess = StandardRightsRequired | ModifyBootConfig | QueryLockStatus | Lock | EnumerateService | CreateService | Connect, // 0x000F003F
    }

    [System.Flags]
    public enum ServiceRights
    {
      QueryConfig = 1,
      ChangeConfig = 2,
      QueryStatus = 4,
      EnumerateDependants = 8,
      Start = 16, // 0x00000010
      Stop = 32, // 0x00000020
      PauseContinue = 64, // 0x00000040
      Interrogate = 128, // 0x00000080
      UserDefinedControl = 256, // 0x00000100
      Delete = 65536, // 0x00010000
      StandardRightsRequired = 983040, // 0x000F0000
      AllAccess = StandardRightsRequired | UserDefinedControl | Interrogate | PauseContinue | Stop | Start | EnumerateDependants | QueryStatus | ChangeConfig | QueryConfig, // 0x000F01FF
    }

    public enum ServiceBootFlag
    {
      Start,
      SystemStart,
      AutoStart,
      DemandStart,
      Disabled,
    }

    public enum ServiceState
    {
      Unknown = -1, // 0xFFFFFFFF
      NotFound = 0,
      Stop = 1,
      Run = 2,
      Stopping = 3,
      Starting = 4,
    }

    public enum ServiceControl
    {
      Stop = 1,
      Pause = 2,
      Continue = 3,
      Interrogate = 4,
      Shutdown = 5,
      ParamChange = 6,
      NetBindAdd = 7,
      NetBindRemove = 8,
      NetBindEnable = 9,
      NetBindDisable = 10, // 0x0000000A
    }

    public enum ServiceError
    {
      Ignore,
      Normal,
      Severe,
      Critical,
    }

    public enum ServiceConfig
    {
      Description = 1,
      FailiureActions = 2,
      ServiceConfidDelayedAutoStartInfo = 3,
      FailiureActionFlag = 4,
      ServiceSidInfo = 5,
      RequiredPrivilegesInfo = 6,
      PreshutdownInfo = 7,
      TriggerInfo = 8,
      PreferredNode = 9,
      LaunchProtected = 12, // 0x0000000C
    }

    [StructLayout(LayoutKind.Sequential)]
    private class SERVICE_DESCRIPTION
    {
      public string lpDescription;
    }

    [StructLayout(LayoutKind.Sequential)]
    private class SERVICE_STATUS
    {
      public int dwServiceType = 0;
      public ServiceUtil.ServiceState dwCurrentState = ServiceUtil.ServiceState.NotFound;
      public int dwControlsAccepted = 0;
      public int dwWin32ExitCode = 0;
      public int dwServiceSpecificExitCode = 0;
      public int dwCheckPoint = 0;
      public int dwWaitHint = 0;
    }
  }
}
