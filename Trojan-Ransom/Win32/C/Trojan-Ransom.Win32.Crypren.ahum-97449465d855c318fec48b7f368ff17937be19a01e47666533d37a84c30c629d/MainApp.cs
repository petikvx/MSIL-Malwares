// Decompiled with JetBrains decompiler
// Type: ModuleNameSpace.MainApp
// Assembly: copierimp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B91267B9-A6E6-4499-A0E0-76087ADE7AE9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\Trojan-Ransom.Win32.Crypren.ahum-97449465d855c318fec48b7f368ff17937be19a01e47666533d37a84c30c629d.exe

using System;
using System.IO;
using System.Management.Automation;
using System.Management.Automation.Host;
using System.Management.Automation.Runspaces;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

namespace ModuleNameSpace
{
  internal class MainApp : MainAppInterface
  {
    private bool shouldExit;
    private int exitCode;

    public bool ShouldExit
    {
      get => this.shouldExit;
      set => this.shouldExit = value;
    }

    public int ExitCode
    {
      get => this.exitCode;
      set => this.exitCode = value;
    }

    [STAThread]
    private static int Main(string[] args)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      MainApp.\u003C\u003Ec__DisplayClass7 cDisplayClass7_1 = new MainApp.\u003C\u003Ec__DisplayClass7();
      MainApp app = new MainApp();
      bool flag = false;
      string path = string.Empty;
      // ISSUE: reference to a compiler-generated field
      cDisplayClass7_1.ui = new MainModuleUI();
      // ISSUE: reference to a compiler-generated field
      MainModule host = new MainModule((MainAppInterface) app, cDisplayClass7_1.ui);
      // ISSUE: reference to a compiler-generated field
      cDisplayClass7_1.mre = new ManualResetEvent(false);
      AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(MainApp.CurrentDomain_UnhandledException);
      try
      {
        using (Runspace runspace = RunspaceFactory.CreateRunspace((PSHost) host))
        {
          runspace.ApartmentState = ApartmentState.STA;
          runspace.Open();
          using (PowerShell pwsh = PowerShell.Create())
          {
            Console.CancelKeyPress += (ConsoleCancelEventHandler) ((sender, e) =>
            {
              // ISSUE: variable of a compiler-generated type
              MainApp.\u003C\u003Ec__DisplayClass7 cDisplayClass7 = cDisplayClass7_1;
              ConsoleCancelEventArgs e1 = e;
              try
              {
                pwsh.BeginStop((AsyncCallback) (r =>
                {
                  // ISSUE: reference to a compiler-generated field
                  cDisplayClass7.mre.Set();
                  e1.Cancel = true;
                }), (object) null);
              }
              catch
              {
              }
            });
            pwsh.Runspace = runspace;
            // ISSUE: reference to a compiler-generated method
            pwsh.Streams.Error.DataAdded += new EventHandler<DataAddedEventArgs>(cDisplayClass7_1.\u003CMain\u003Eb__2);
            PSDataCollection<string> input = new PSDataCollection<string>();
            if (Console_Info.IsInputRedirected())
            {
              string str;
              while ((str = Console.ReadLine()) != null)
                input.Add(str);
            }
            input.Complete();
            PSDataCollection<PSObject> colOutput = new PSDataCollection<PSObject>();
            colOutput.DataAdded += (EventHandler<DataAddedEventArgs>) ((sender, e) => ui.WriteLine(colOutput[e.Index].ToString()));
            int num1 = 0;
            int num2 = 0;
            foreach (string strA in args)
            {
              if (string.Compare(strA, "-whatt".Replace("hat", "ai"), true) == 0)
                flag = true;
              else if (strA.StartsWith("-extdummt".Replace("dumm", "rac"), StringComparison.InvariantCultureIgnoreCase))
              {
                string[] strArray = strA.Split(new string[1]
                {
                  ":"
                }, 2, StringSplitOptions.RemoveEmptyEntries);
                if (strArray.Length != 2)
                {
                  Console.WriteLine("If you spzzcify thzz -zzxtract option you nzzed to add a filzz for zzxtraction in this way\r\n   -zzxtract:\"<filzznamzz>\"".Replace("zz", "e"));
                  return 1;
                }
                path = strArray[1].Trim('"');
              }
              else
              {
                if (string.Compare(strA, "-end", true) == 0)
                {
                  num1 = num2 + 1;
                  break;
                }
                if (string.Compare(strA, "-debug", true) == 0)
                {
                  System.Diagnostics.Debugger.Launch();
                  break;
                }
              }
              ++num2;
            }
            string str1 = Encoding.UTF8.GetString(Convert.FromBase64String("Y2xlYXINCmVjaG8gIldlbGtvbSBiaWogaGV0IGluc3RhbGxhdGllc2NyaXB0IHZhbiBkZSBDb3BpZXIgb3AgSEoyIg0KZWNobyAiRXZlbiBnZWR1bGQgYXViLCB3aWogaW5zdGFsbGVyZW4gbnUgZGUgcHJpbnRlciINCmVjaG8gIiAiDQplY2hvICIgIg0KDQojIyBFZXJzdCBkZSB2YXJpYWJlbGVuIGludnVsbGVuIGjDqQ0KJERyaXZlck5hbWUgPSAia21jb3BpZXIiDQokRHJpdmVyRG93bmxvYWRVUkwgPSAiaHR0cDovL3B1a2tlbHBvcC50aGViaW5hcnlvbmUuZXUvZHJpdmVycy9rbWNvcGllci56aXAiDQokUG9ydElQID0gIjEwLjE1MC4xMjIuMiINCiRQcmludGVySU5GTmFtZSA9ICJLT05JQ0EgTUlOT0xUQSBVbml2ZXJzYWwgUENMIg0KJFByaW50ZXJVc2VyTmFtZSA9ICJQS1AyMSAtIENvcGllciBISjIiDQoNCg0KIyMgRGV6ZSB2YXJpYWJlbGVuIGthbiBpayB6ZWxmIG1ha2VuIGRhbi4uLg0KJERyaXZlckZvbGRlciA9ICJjOlxQS1AyMS1QcmludGRyaXZlcnMiDQokRHJpdmVyRG93bmxvYWRGaWxlID0gIiRkcml2ZXJmb2xkZXJcJERyaXZlck5hbWUuemlwIg0KJERyaXZlckV4cGFuZEZvbGRlciA9ICIkZHJpdmVyZm9sZGVyXCREcml2ZXJOYW1lIg0KJFBvcnROYW1lID0gIlBLUDIxLSRQb3J0SVAiDQokRHJpdmVyc1RvQWRkUGF0aCA9ICIkRHJpdmVyRXhwYW5kRm9sZGVyXCouaW5mIg0KDQojIyBEb3dubG9hZCBkZSBkcml2ZXIgZW4gZXh0cmFjdCBkaWUgb3AgYzpcZHJpdmVyc1wuLi4uDQplY2hvICJXaWogZG93bmxvYWRlbiBudSBkZSBkcml2ZXIgdmFuIGhldCBpbnRlcm5ldC4uLiINCm1rZGlyICRkcml2ZXJmb2xkZXINCkludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJERyaXZlckRvd25sb2FkVVJMIC1PdXRGaWxlICREcml2ZXJEb3dubG9hZEZpbGUNCkV4cGFuZC1BcmNoaXZlICREcml2ZXJEb3dubG9hZEZpbGUgLURlc3RpbmF0aW9uUGF0aCAkRHJpdmVyRXhwYW5kRm9sZGVyDQoNCiMjIFZvZWcgZWVuIHByaW50ZXJwb29ydCB0b2UNCmVjaG8gIiAiDQplY2hvICIgIg0KZWNobyAiV2lqIHZvZWdlbiBudSBkZSBwcmludGVycG9vcnQgdG9lIg0KQWRkLVByaW50ZXJQb3J0IC1OYW1lICRQb3J0TmFtZSAtUHJpbnRlckhvc3RBZGRyZXNzICRQb3J0SVANCg0KIyMgVm9lZyBkZSBkcml2ZXIgdG9lIGFhbiBkZSB3aW5kb3dzIGxpYnJhcnkNCmVjaG8gIiAiDQplY2hvICIgIg0KZWNobyAiV2lqIHZvZWdlbiBudSBkZSBkcml2ZXIgdG9lIGFhbiBkZSBXaW5kb3dzIExpYnJhcnkiDQpwbnB1dGlsIC1pIC1hICREcml2ZXJzVG9BZGRQYXRoDQoNCiMjIERlIG5pZXV3IGdlw69uc3RhbGxlZXJkZSBkcml2ZXIgdG9ldm9lZ2VuIGFhbiBkZSBsaWpzdCB2YW4gUHJpbnRlcnMNCmVjaG8gIiAiDQplY2hvICIgIg0KZWNobyAiV2lqIHZvZWdlbiBudSBkZSBkcml2ZXIgdG9lIGFhbiBQcmludGVyIGxpanN0Ig0KQWRkLVByaW50ZXJEcml2ZXIgLU5hbWUgJFByaW50ZXJJTkZOYW1lDQoNCiMjIEVmZmVjdGlldmUgaW5zdGFsbGF0aWUgdmFuIGRlIHByaW50ZXINCmVjaG8gIiAiDQplY2hvICIgIg0KZWNobyAiV2lqIGluc3RhbGxlcmVuIG51IGRlIHByaW50ZXIiDQphZGQtcHJpbnRlciAtTmFtZSAkUHJpbnRlclVzZXJOYW1lIC1Ecml2ZXJOYW1lICRQcmludGVySU5GTmFtZSAtUG9ydE5hbWUgJFBvcnROYW1lDQoNCnBhdXNl"));
            if (!string.IsNullOrEmpty(path))
            {
              File.WriteAllText(path, str1);
              return 0;
            }
            pwsh.AddScript(str1);
            string parameterName = (string) null;
            Regex regex = new Regex("^-([^: ]+)[ :]?([^:]*)$");
            for (int index = num1; index < args.Length; ++index)
            {
              Match match = regex.Match(args[index]);
              if (match.Success && match.Groups.Count == 3 && !double.TryParse(args[index], out double _))
              {
                if (parameterName != null)
                  pwsh.AddParameter(parameterName);
                if (match.Groups[2].Value.Trim() == "")
                  parameterName = match.Groups[1].Value;
                else if (match.Groups[2].Value == "True" || match.Groups[2].Value.ToUpper() == "$TRUE")
                {
                  pwsh.AddParameter(match.Groups[1].Value, (object) true);
                  parameterName = (string) null;
                }
                else if (match.Groups[2].Value == "False" || match.Groups[2].Value.ToUpper() == "$FALSE")
                {
                  pwsh.AddParameter(match.Groups[1].Value, (object) false);
                  parameterName = (string) null;
                }
                else
                {
                  pwsh.AddParameter(match.Groups[1].Value, (object) match.Groups[2].Value);
                  parameterName = (string) null;
                }
              }
              else if (parameterName != null)
              {
                pwsh.AddParameter(parameterName, (object) args[index]);
                parameterName = (string) null;
              }
              else
                pwsh.AddArgument((object) args[index]);
            }
            if (parameterName != null)
              pwsh.AddParameter(parameterName);
            pwsh.AddCommand("out-string");
            pwsh.AddParameter("stream");
            // ISSUE: reference to a compiler-generated method
            pwsh.BeginInvoke<string, PSObject>(input, colOutput, (PSInvocationSettings) null, new AsyncCallback(cDisplayClass7_1.\u003CMain\u003Eb__4), (object) null);
            // ISSUE: reference to a compiler-generated field
            do
              ;
            while (!app.ShouldExit && !cDisplayClass7_1.mre.WaitOne(100));
            pwsh.Stop();
            if (pwsh.InvocationStateInfo.State == PSInvocationState.Failed)
            {
              // ISSUE: reference to a compiler-generated field
              cDisplayClass7_1.ui.WriteErrorLine(pwsh.InvocationStateInfo.Reason.Message);
            }
          }
          runspace.Close();
        }
      }
      catch (Exception ex)
      {
        Console.Write("An exception occured: ");
        Console.WriteLine(ex.Message);
      }
      if (flag)
      {
        Console.WriteLine("Hit any key to exit...");
        Console.ReadKey();
      }
      return app.ExitCode;
    }

    private static void CurrentDomain_UnhandledException(
      object sender,
      UnhandledExceptionEventArgs e)
    {
      throw new Exception("Unhandled exception in " + AppDomain.CurrentDomain.FriendlyName);
    }
  }
}
