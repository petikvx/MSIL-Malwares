// Decompiled with JetBrains decompiler
// Type:  
// Assembly: UnmanagedFunctionPointerAttrib, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 44335795-CD3E-49C2-4F11-D0E96376ED3B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-9b50b93463b74bcf86085712d710821aac99f26dbcf305432a5315c987959601.exe

using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;

[DebuggerStepThrough]
public sealed class \u000E\u2005 : TextWriter, \u0006\u2005
{
  private bool \u0002;
  private static UnicodeEncoding \u0003;
  private readonly int \u0005;
  private readonly string \u0008;

  public \u000E\u2005()
    : this(0, Debugger.DefaultCategory)
  {
  }

  public \u000E\u2005(int _param1, string _param2)
    : this(_param1, _param2, (IFormatProvider) CultureInfo.CurrentCulture)
  {
  }

  public \u000E\u2005(int _param1, string _param2, IFormatProvider _param3)
    : base(_param3)
  {
    this.\u0005 = _param1;
    this.\u0008 = _param2;
    this.\u0002 = true;
  }

  protected override void Dispose(bool _param1)
  {
    this.\u0002 = false;
    base.Dispose(_param1);
  }

  public override void Write(char _param1)
  {
    if (!this.\u0002)
      throw new ObjectDisposedException((string) null);
    Debugger.Log(this.\u0005, this.\u0008, _param1.ToString());
  }

  public override void Write(string _param1)
  {
    if (!this.\u0002)
      throw new ObjectDisposedException((string) null);
    if (_param1 == null)
      return;
    Debugger.Log(this.\u0005, this.\u0008, _param1);
  }

  public override void Write(char[] _param1, int _param2, int _param3)
  {
    if (!this.\u0002)
      throw new ObjectDisposedException((string) null);
    if (_param1 == null || _param2 < 0 || _param3 < 0 || _param1.Length - _param2 < _param3)
      base.Write(_param1, _param2, _param3);
    Debugger.Log(this.\u0005, this.\u0008, new string(_param1, _param2, _param3));
  }

  public override Encoding Encoding
  {
    get
    {
      if (\u000E\u2005.\u0003 == null)
        \u000E\u2005.\u0003 = new UnicodeEncoding(false, false);
      return (Encoding) \u000E\u2005.\u0003;
    }
  }

  public int \u0003\u2000\u2000\u2001\u2006\u200A\u2002​\u2009\u2001\u2000() => this.\u0005;

  public string \u0002\u2009\u2007\u2009\u2005\u200A\u2005\u2005\u200A​\u2009\u2004\u200A\u2004\u2006\u2005\u2007\u2003\u2006() => this.\u0008;

  public TextWriter Get() => (TextWriter) this;
}
