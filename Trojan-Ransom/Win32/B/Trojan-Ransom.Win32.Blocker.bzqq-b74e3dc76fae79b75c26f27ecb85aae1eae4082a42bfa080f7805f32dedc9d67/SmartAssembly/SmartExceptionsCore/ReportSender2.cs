// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportSender2
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.Zip;
using System;
using System.Net;
using System.Text;

namespace SmartAssembly.SmartExceptionsCore
{
  public class ReportSender2
  {
    protected const string AssemblyID = "{100fd8cd-4fe2-410e-8c33-ae1af08ef31d}";
    private const string LicenseID = "{be78a0c5-c47c-4127-a428-52bdc580a02f}";
    private const string CryptoPublicKey = "{bf13b64c-b3d2-4165-b3f5-7f852d4744cf}";
    private IWebProxy m_Proxy;

    public void SetProxy(IWebProxy proxy) => this.m_Proxy = proxy;

    internal bool SendReport(
      byte[] reportData,
      ReportSender2.NotificationEmailSettings notificationEmailSettings)
    {
      byte[] data;
      try
      {
        data = SimpleZip1.Zip(reportData);
      }
      catch (Exception ex)
      {
        this.InvokeSendingReportFeedback(SendingReportStep2.PreparingReport, SimpleZip1.ExceptionMessage);
        return false;
      }
      byte[] encryptedData = Encryption.Encrypt(data, "<RSAKeyValue><Modulus>ouQsWoWBnmOqk5oiU2jtlbq5pjqf+VMkxyeAMax4XhYx/73DvmvK2hM6oHyJMzG9z4q2g6iVzseYCR9G25/HguU2hRhyjPcloCXUrQo5yBoVCQzTNnnc5XXeKzLqKuEpkrNRSRyWRB9eh4a6BtuxveEOfBxiHIIXzo0+ffdbu90=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>");
      if (encryptedData == null)
      {
        this.InvokeSendingReportFeedback(SendingReportStep2.PreparingReport, Encryption.ExceptionMessage);
        return false;
      }
      this.InvokeSendingReportFeedback(SendingReportStep2.ConnectingToServer);
      WebServicesClient services = new WebServicesClient("!1b5d570f-4f6d-4187-55a3-b83778a63f94");
      if (this.m_Proxy != null)
        services.SetProxy(this.m_Proxy);
      ReportSender2.AfterLoginClosure afterLoginClosure = new ReportSender2.AfterLoginClosure(this, encryptedData, services, notificationEmailSettings);
      services.LoginToServer(new StringCallback(afterLoginClosure.AfterLogin));
      return afterLoginClosure.Succeeded;
    }

    public event SendingReportFeedbackEventHandler2 SendingReportFeedback;

    protected void InvokeSendingReportFeedback(
      SendingReportStep2 step,
      string errorMessage,
      string reportId)
    {
      SendingReportFeedbackEventHandler2 sendingReportFeedback = this.SendingReportFeedback;
      if (sendingReportFeedback == null)
        return;
      sendingReportFeedback((object) this, new SendingReportFeedbackEventArgs2(step, errorMessage, reportId));
    }

    protected void InvokeSendingReportFeedback(SendingReportStep2 step, string errorMessage) => this.InvokeSendingReportFeedback(step, errorMessage, string.Empty);

    protected void InvokeSendingReportFeedback(SendingReportStep2 step) => this.InvokeSendingReportFeedback(step, string.Empty);

    private class AfterLoginClosure
    {
      private readonly ReportSender2 m_ReportSender;
      private readonly byte[] m_EncryptedData;
      private readonly WebServicesClient m_Services;
      private readonly ReportSender2.NotificationEmailSettings m_NotificationEmailSettings;
      public bool Succeeded = true;

      public AfterLoginClosure(
        ReportSender2 reportSender,
        byte[] encryptedData,
        WebServicesClient services,
        ReportSender2.NotificationEmailSettings notificationEmailSettings)
      {
        this.m_ReportSender = reportSender;
        this.m_NotificationEmailSettings = notificationEmailSettings;
        this.m_Services = services;
        this.m_EncryptedData = encryptedData;
      }

      public void AfterLogin(string loginResult)
      {
        if (loginResult == "OK")
        {
          this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep2.Transfering);
          byte[] bytes = Encoding.UTF8.GetBytes("{FA0844EB-EF82-404C-B76C-C092ABDB9392}");
          byte[] numArray = new byte[bytes.Length + this.m_EncryptedData.Length];
          Array.Copy((Array) bytes, (Array) numArray, bytes.Length);
          Array.Copy((Array) this.m_EncryptedData, 0, (Array) numArray, bytes.Length, this.m_EncryptedData.Length);
          ReportSender2.AfterUploadClosure afterUploadClosure = new ReportSender2.AfterUploadClosure(this.m_ReportSender);
          this.m_Services.Upload(numArray, this.m_NotificationEmailSettings.EmailAddress, this.m_NotificationEmailSettings.AppFriendlyName, this.m_NotificationEmailSettings.BuildFriendlyNumber, new StringCallback(afterUploadClosure.AfterUpload));
          this.Succeeded = afterUploadClosure.Succeeded;
        }
        else
        {
          string errorMessage = loginResult;
          if (this.m_ReportSender.SendingReportFeedback != null)
            this.m_ReportSender.SendingReportFeedback((object) this, new SendingReportFeedbackEventArgs2(SendingReportStep2.ConnectingToServer, errorMessage));
          this.Succeeded = false;
        }
      }
    }

    private class AfterUploadClosure
    {
      private readonly ReportSender2 m_ReportSender;
      public bool Succeeded;

      public AfterUploadClosure(ReportSender2 reportSender) => this.m_ReportSender = reportSender;

      public void AfterUpload(string transferingResult)
      {
        if (transferingResult.StartsWith("ERR"))
        {
          this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep2.Transfering, transferingResult);
          this.Succeeded = false;
        }
        else
        {
          this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep2.Finished, string.Empty, transferingResult);
          this.Succeeded = true;
        }
      }
    }

    internal class NotificationEmailSettings
    {
      public static ReportSender2.NotificationEmailSettings NullEmailSettings = new ReportSender2.NotificationEmailSettings((string) null, (string) null, (string) null);
      private readonly string m_EmailAddress;
      private readonly string m_AppFriendlyName;
      private readonly string m_BuildFriendlyNumber;

      public NotificationEmailSettings(
        string emailAddress,
        string appFriendlyName,
        string buildFriendlyNumber)
      {
        this.m_EmailAddress = emailAddress;
        this.m_BuildFriendlyNumber = buildFriendlyNumber;
        this.m_AppFriendlyName = appFriendlyName;
      }

      public string BuildFriendlyNumber => this.m_BuildFriendlyNumber;

      public string AppFriendlyName => this.m_AppFriendlyName;

      public string EmailAddress => this.m_EmailAddress;
    }
  }
}
