// Decompiled with JetBrains decompiler
// Type: .
// Assembly: file, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71f2cf7c2509b8fe
// MVID: 1F473243-1123-401F-8099-7648B7C34C41
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan-Dropper.Win32.Injector.deqx-3dcf304237ebec8756d9362ccf0259126c1c62ff5c0b09096876be2cdc64ae5a.exe

using \u0001;
using \u0007;
using \u000E;
using System;
using System.Drawing;
using System.Runtime.InteropServices;

namespace \u000E
{
  internal class \u0006
  {
    [NonSerialized]
    internal static \u0001.\u0001 \u0001;
    private const int \u0001 = 16;
    private const int \u0002 = 1024;
    private const int \u0003 = 2048;
    private const int \u0004 = 1;
    private const int \u0005 = 89;
    private const int \u0006 = 9;
    private static bool \u0001;
    private static \u0006.\u0002 \u0001;

    static \u0006() => \u0003.\u0002(typeof (\u0006));

    [DllImport("shell32", EntryPoint = "ExtractIconEx")]
    private static extern int \u0002(
      string lpszFile,
      int nIconIndex,
      ref int phiconLarge,
      ref int phiconSmall,
      int nIcons);

    [DllImport("user32", EntryPoint = "DrawText", CharSet = CharSet.Unicode)]
    private static extern int \u0002(
      IntPtr hDC,
      string text,
      int textLength,
      ref \u0006.\u0001 lpRect,
      int format);

    [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
    private static extern IntPtr \u0002(IntPtr hDC, IntPtr hGdiObj);

    [DllImport("kernel32.Dll", EntryPoint = "GetVersionEx")]
    private static extern short \u0002(ref \u0006.\u0002 o);

    [DllImport("user32.dll", EntryPoint = "GetSystemMetrics")]
    private static extern int \u0002(int smIndex);

    [DllImport("kernel32.dll", EntryPoint = "GetSystemInfo")]
    private static extern void \u0002(ref \u0006.\u0003 lpSystemInfo);

    private static \u0006.\u0002 VersionInfo
    {
      get
      {
        if (!\u0006.\u0001)
        {
          \u0006.\u0001 = new \u0006.\u0002();
          try
          {
            \u0006.\u0001.\u0001 = \u001E\u0006.\u0096\u0007(\u0087\u0005.\u0092\u0004(__typeref (\u0006.\u0002)));
            do
            {
              if (true)
              {
                int num = (int) \u0006.\u0002(ref \u0006.\u0001);
              }
              if (false)
                goto label_9;
            }
            while (false);
            \u0006.\u0001 = true;
          }
          catch
          {
          }
        }
label_9:
        return \u0006.\u0001;
      }
    }

    internal static bool IsX64
    {
      get
      {
        bool flag;
        try
        {
          \u0006.\u0003 lpSystemInfo;
          do
          {
            lpSystemInfo = new \u0006.\u0003();
            \u0006.\u0002(ref lpSystemInfo);
          }
          while (false);
          do
          {
            int num1 = (int) lpSystemInfo.\u0001;
            int num2;
            do
            {
              num2 = 9;
              while (num2 != 0)
              {
                if (true)
                {
                  int num3 = num1 == num2 ? 1 : 0;
                  num2 = 6;
                  num1 = num3;
                  break;
                }
              }
            }
            while (num2 == 0);
            if (true)
              goto label_9;
label_8:
            continue;
label_9:
            flag = num1 != 0;
            goto label_8;
          }
          while (false);
        }
        catch
        {
          flag = false;
        }
        return flag;
      }
    }

    internal static bool IsServerR2
    {
      get
      {
        bool flag;
        try
        {
          int smIndex;
          for (int index = 0; index == 0; index = smIndex)
          {
            smIndex = 89;
            if (smIndex != 0)
            {
              if (false)
                continue;
              smIndex = \u0006.\u0002(smIndex) == 0 ? 1 : 0;
            }
            else
              goto label_8;
label_5:
            int num = 0;
label_6:
            if (true)
              smIndex = smIndex == num ? 1 : 0;
            else
              goto label_9;
label_8:
            num = 0;
            if (num != 0)
              goto label_6;
label_9:
            if (num == 0)
            {
              flag = smIndex != 0;
              break;
            }
            goto label_5;
          }
        }
        catch
        {
          flag = false;
        }
        return flag;
      }
    }

    internal static bool IsWorkstation => \u0006.VersionInfo.\u0001 == (byte) 1;

    internal static string ServicePack => \u0006.VersionInfo.\u0001;

    public static Icon \u0002()
    {
      try
      {
        return \u0006.\u0003();
      }
      catch (Exception ex)
      {
        return \u0008.\u0002(\u0006.\u0001(5833));
      }
    }

    private static Icon \u0003()
    {
      int phiconLarge;
      int num1;
      if (true)
      {
        int num2 = 0;
        if (num2 == 0)
        {
          if (true)
            phiconLarge = num2;
        }
        else
        {
          num1 = num2;
          goto label_8;
        }
      }
      else
        goto label_7;
label_3:
      int num3;
      if (true)
      {
        if (true)
          num3 = 0;
      }
      int num4 = \u0006.\u0002(\u0017\u0005.\u001C\u000E(), -1, ref num3, ref num3, 1);
      if (true)
        goto label_12;
label_6:
      int num5;
      if (num5 <= 0)
        goto label_10;
      else
        goto label_7;
label_12:
      num5 = num4;
      goto label_6;
label_7:
      \u0006.\u0002(\u0017\u0005.\u001C\u000E(), 0, ref phiconLarge, ref num3, 1);
      num1 = phiconLarge;
label_8:
      if (num1 != 0)
        return \u0096\u0007.\u0087\u0010(new IntPtr(phiconLarge));
label_10:
      if (true)
        return (Icon) null;
      goto label_3;
    }

    internal static int \u0002(Graphics graphics, string text, Font font, int width)
    {
      int num1;
      try
      {
        do
        {
          do
          {
            int num2 = \u0006.\u0004(graphics, text, font, width);
            if (true)
              goto label_3;
label_1:
            continue;
label_3:
            num1 = num2;
            goto label_1;
          }
          while (false);
        }
        while (false);
        goto label_11;
      }
      catch (Exception ex1)
      {
        try
        {
          if (false)
            goto label_7;
label_6:
          int num3 = \u0011\u0005.\u0002\u0004((double) \u0006.\u0003(graphics, text, font, width) * 1.1);
          if (true)
            num1 = num3;
label_7:
          if (false)
            goto label_6;
          else
            goto label_11;
        }
        catch (Exception ex2)
        {
        }
      }
label_10:
      return 0;
label_11:
      if (true)
        return num1;
      goto label_10;
    }

    private static int \u0003(Graphics graphics, string text, Font font, int width)
    {
      Size size1;
      if (true)
      {
        Size size2 = \u0097\u0007.\u0091\u0010(\u0091\u0007.\u007E\u007F\u0010((object) graphics, text, font, width));
        if (true)
          size1 = size2;
      }
      return size1.Height;
    }

    private static int \u0004(Graphics graphics, string text, Font font, int width)
    {
      \u0006.\u0001 obj = new \u0006.\u0001(new Rectangle(0, 0, width, 10000));
      int num1 = 3088;
      int num2;
      while (true)
      {
        if (true)
          goto label_15;
label_2:
        IntPtr num3 = \u008E\u0007.\u007E\u001D\u0010((object) graphics);
        if (true)
          goto label_16;
label_3:
        IntPtr num4 = \u008E\u0007.\u007E\u0098\u0010((object) font);
        if (true)
          goto label_13;
label_4:
        IntPtr num5;
        IntPtr hDC1 = num5;
        IntPtr num6;
        IntPtr hGdiObj1 = num6;
        int num7;
        while (true)
        {
          IntPtr num8 = \u0006.\u0002(hDC1, hGdiObj1);
          if (true)
            goto label_14;
label_6:
          IntPtr num9;
          IntPtr hDC2;
          IntPtr hGdiObj2;
          do
          {
            hDC2 = num5;
            if (true)
            {
              string text1 = text;
              ref \u0006.\u0001 local = ref obj;
              int format = num7;
              \u0006.\u0002(hDC2, text1, -1, ref local, format);
              hDC2 = num5;
            }
            hGdiObj2 = num9;
            if (true)
              \u0006.\u0002(hDC2, hGdiObj2);
            else
              goto label_12;
          }
          while (false);
          break;
label_12:
          hGdiObj1 = hGdiObj2;
          hDC1 = hDC2;
          continue;
label_14:
          num9 = num8;
          goto label_6;
        }
        \u008F\u0007.\u007E\u001E\u0010((object) graphics, num5);
        num2 = obj.\u0004;
        if (false)
        {
          num1 = num2;
          continue;
        }
        break;
label_13:
        num6 = num4;
        goto label_4;
label_16:
        num5 = num3;
        goto label_3;
label_15:
        num7 = num1;
        goto label_2;
      }
      int num10 = obj.\u0002;
      return num2 - num10;
    }

    private struct \u0001
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;

      public \u0001(Rectangle rectangle)
      {
        this.\u0001 = rectangle.Left;
        this.\u0002 = rectangle.Top;
        this.\u0004 = rectangle.Bottom;
        this.\u0003 = rectangle.Right;
      }
    }

    private struct \u0002
    {
      public int \u0001;
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
      public string \u0001;
      public ushort \u0001;
      public ushort \u0002;
      public ushort \u0003;
      public byte \u0001;
      private byte \u0002;
    }

    internal struct \u0003
    {
      public ushort \u0001;
      private ushort \u0002;
      public uint \u0001;
      public IntPtr \u0001;
      public IntPtr \u0002;
      public IntPtr \u0003;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public ushort \u0003;
      public ushort \u0004;
    }
  }
}
