// Decompiled with JetBrains decompiler
// Type: Org.BouncyCastle.X509.X509V3CertificateGenerator
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Security;
using System;
using System.Collections;

namespace Org.BouncyCastle.X509
{
  internal class X509V3CertificateGenerator
  {
    private readonly X509ExtensionsGenerator extGenerator;
    private V3TbsCertificateGenerator tbsGen;
    private DerObjectIdentifier sigOid;
    private AlgorithmIdentifier sigAlgId;
    private string signatureAlgorithm;
    public void Reset();
    public void SetSerialNumber(BigInteger serialNumber);
    public void SetIssuerDN(X509Name issuer);
    public void SetNotBefore(DateTime date);
    public void SetNotAfter(DateTime date);
    public void SetSubjectDN(X509Name subject);
    public void SetPublicKey(AsymmetricKeyParameter publicKey);
    [Obsolete("Not needed if Generate used with an ISignatureFactory")]
    public void SetSignatureAlgorithm(string signatureAlgorithm);
    public void SetSubjectUniqueID(bool[] uniqueID);
    public void SetIssuerUniqueID(bool[] uniqueID);
    private DerBitString booleanToBitString(bool[] id);
    public void AddExtension(string oid, bool critical, Asn1Encodable extensionValue);
    public void AddExtension(DerObjectIdentifier oid, bool critical, Asn1Encodable extensionValue);
    public void AddExtension(string oid, bool critical, byte[] extensionValue);
    public void AddExtension(DerObjectIdentifier oid, bool critical, byte[] extensionValue);
    public void CopyAndAddExtension(string oid, bool critical, X509Certificate cert);
    public void CopyAndAddExtension(DerObjectIdentifier oid, bool critical, X509Certificate cert);
    [Obsolete("Use Generate with an ISignatureFactory")]
    public X509Certificate Generate(AsymmetricKeyParameter privateKey);
    [Obsolete("Use Generate with an ISignatureFactory")]
    public X509Certificate Generate(AsymmetricKeyParameter privateKey, SecureRandom random);
    public X509Certificate Generate(ISignatureFactory signatureCalculatorFactory);
    private X509Certificate GenerateJcaObject(
      TbsCertificateStructure tbsCert,
      AlgorithmIdentifier sigAlg,
      byte[] signature);
    public IEnumerable SignatureAlgNames { get; }
  }
}
