// Decompiled with JetBrains decompiler
// Type: 432388962105.302295231489
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003174673078711;
using \u003254501269877;
using \u003271601668933;
using \u003321063983049;
using \u003364073242711;
using \u003410944228285;
using \u003432388962105;
using \u003441916305726;
using \u003548736522694;
using \u003703682515837;
using \u003785947670411;
using \u003788284974361;
using \u003871896905930;
using Microsoft.PythonTools;
using Microsoft.PythonTools.Analysis;
using Microsoft.PythonTools.Infrastructure;
using Microsoft.PythonTools.Ipc.Json;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace \u003432388962105
{
  [ExtensionUri("executor://PythonUnitTestExecutor/v1")]
  internal class \u003302295231489 : ITestExecutor
  {
    private static readonly string \u003686243308378 = PythonToolsInstallPath.GetFile("visualstudio_py_testlauncher.py", (Assembly) null);
    private readonly ManualResetEvent \u003229866390408 = new ManualResetEvent(false);
    private readonly \u003803592471815 \u003238369061639;

    public \u003302295231489() => this.\u003238369061639 = \u003803592471815.\u003269632878397("_PTVS_PID");

    public void \u003950547467697() => this.\u003229866390408.Set();

    public void \u003085296012115(
      IEnumerable<string> _param1,
      IRunContext _param2,
      IFrameworkHandle _param3)
    {
      // ISSUE: variable of a compiler-generated type
      \u003302295231489.\u003835041993859 obj1 = (\u003302295231489.\u003835041993859) new \u003302295231489.\u003308556210152();
      if (_param1 == null)
        throw new ArgumentNullException("sources");
      if (_param2 == null)
        throw new ArgumentNullException("runContext");
      if (_param3 == null)
        throw new ArgumentNullException("frameworkHandle");
      this.\u003229866390408.Reset();
      ((\u003302295231489.\u003308556210152) obj1).\u003442169174692 = \u003388106528341.\u003392492734249(((IDiscoveryContext) _param2).RunSettings, \u003196266377257.UnitTest);
      \u003383960945124 obj2 = new \u003383960945124();
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      foreach (IGrouping<\u003064588995134, string> grouping in _param1.GroupBy<string, \u003064588995134>(obj1.\u003422363476755 ?? (obj1.\u003422363476755 = new Func<string, \u003064588995134>(obj1.\u003115232331234))))
      {
        \u003064588995134 key = grouping.Key;
        try
        {
          new \u003615347801101().\u003882301074999((IEnumerable<string>) grouping, key, (IMessageLogger) _param3, (ITestCaseDiscoverySink) obj2);
        }
        catch (Exception ex)
        {
          ((IMessageLogger) _param3).SendMessage((TestMessageLevel) 2, ex.Message);
        }
        if (this.\u003229866390408.WaitOne(0))
          return;
      }
      this.\u003736258144396((IEnumerable<TestCase>) obj2.\u003107848819816, _param2, _param3);
    }

    public void \u003377641190741(
      IEnumerable<TestCase> _param1,
      IRunContext _param2,
      IFrameworkHandle _param3)
    {
      if (_param1 == null)
        throw new ArgumentNullException("tests");
      if (_param2 == null)
        throw new ArgumentNullException("runContext");
      if (_param3 == null)
        throw new ArgumentNullException("frameworkHandle");
      this.\u003229866390408.Reset();
      this.\u003736258144396(_param1, _param2, _param3);
    }

    private void \u003736258144396(
      IEnumerable<TestCase> _param1,
      IRunContext _param2,
      IFrameworkHandle _param3)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003302295231489.\u003363935585114 obj1 = (\u003302295231489.\u003363935585114) new \u003302295231489.\u003835041993859();
      bool flag = \u003549737716975.\u003328768774063(_param2);
      string codeCoverageFile = (string) null;
      if (flag)
        codeCoverageFile = \u003549737716975.\u003592782547770(_param1);
      // ISSUE: reference to a compiler-generated field
      ((\u003302295231489.\u003835041993859) obj1).\u003406063061988 = \u003388106528341.\u003392492734249(((IDiscoveryContext) _param2).RunSettings, \u003196266377257.UnitTest);
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      foreach (IGrouping<\u003064588995134, TestCase> tests in _param1.GroupBy<TestCase, \u003064588995134>(obj1.\u003455831629325 ?? (obj1.\u003455831629325 = new Func<TestCase, \u003064588995134>(obj1.\u003900978527418))))
      {
        if (!this.\u003229866390408.WaitOne(0))
        {
          if (tests.Key.\u003487150642898 == \u003196266377257.UnitTest)
          {
            // ISSUE: object of a compiler-generated type is created
            using (\u003302295231489.\u003308556210152 obj2 = (\u003302295231489.\u003308556210152) new \u003022174816886.\u003507265261402(_param3, _param2, (IEnumerable<TestCase>) tests, codeCoverageFile, tests.Key, this.\u003238369061639, this.\u003229866390408))
              obj2.\u003860293954535();
          }
        }
        else
          break;
      }
      if (!flag)
        return;
      \u003549737716975.\u003099152921219(_param3, codeCoverageFile);
    }

    private static void \u003697014484163(
      IFrameworkHandle _param0,
      TestResult _param1,
      string _param2,
      string _param3,
      TestOutcome _param4,
      \u003969475877042.\u003457320777310 _param5)
    {
      _param1.EndTime = DateTimeOffset.Now;
      _param1.Duration = TimeSpan.FromSeconds(_param5.\u003856989781148);
      _param1.Outcome = _param4;
      _param2 = _param2.Replace("\r\n", "\n").Replace("\n", "\r\n");
      _param3 = _param3.Replace("\r\n", "\n").Replace("\n", "\r\n");
      _param1.Messages.Add(new TestResultMessage(TestResultMessage.StandardOutCategory, _param2));
      _param1.Messages.Add(new TestResultMessage(TestResultMessage.StandardErrorCategory, _param3));
      _param1.Messages.Add(new TestResultMessage(TestResultMessage.AdditionalInfoCategory, _param3));
      if (_param5.\u003782542100865 != null)
      {
        _param1.ErrorStackTrace = _param5.\u003782542100865;
        _param1.Messages.Add(new TestResultMessage(TestResultMessage.DebugTraceCategory, _param5.\u003782542100865));
      }
      if (_param5.\u003497115308650 != null)
        _param1.ErrorMessage = _param5.\u003497115308650;
      ((ITestExecutionRecorder) _param0).RecordResult(_param1);
      ((ITestExecutionRecorder) _param0).RecordEnd(_param1.TestCase, _param4);
    }

    private sealed class \u003308556210152 : IDisposable
    {
      private readonly IRunContext \u003925163836499;
      private readonly TestCase[] \u003594492667023;
      private readonly string \u003781759414743;
      private readonly \u003064588995134 \u003822463843032;
      private readonly \u003454440989623 \u003133846461470;
      private readonly \u003803592471815 \u003526429324610;
      private readonly string \u003392706402931;
      private readonly Dictionary<string, string> \u003576619354326;
      private readonly string \u003626884766788;
      private readonly int \u003056557390523;
      private readonly ManualResetEvent \u003144782055672;
      private readonly ManualResetEvent \u003505049108052;
      private readonly AutoResetEvent \u003194192647006;
      private Connection \u003514973611262;
      private readonly Socket \u003823533526907;
      private readonly StringBuilder \u003884656257896;
      private readonly StringBuilder \u003655965244262;
      private TestResult \u003652669391772;
      private readonly bool \u003254473408181;
      private readonly bool \u003985603487662;
      public Dictionary<string, \u003064588995134> \u003442169174692;

      public void \u003345576583765()
      {
        this.\u003823533526907.Dispose();
        this.\u003505049108052.Dispose();
        this.\u003194192647006.Dispose();
        this.\u003514973611262?.Dispose();
      }

      private static Task \u003220349590715(RequestArgs _param0, Func<Response, Task> _param1) => throw new NotImplementedException();

      private void \u003569712627579(object _param1, EventReceivedEventArgs _param2)
      {
        switch (_param2.Name)
        {
          case "result":
            \u003969475877042.\u003457320777310 obj1 = (\u003969475877042.\u003457320777310) _param2.Event;
            TestOutcome testOutcome = (TestOutcome) 0;
            switch (obj1.\u003821265696119)
            {
              case "passed":
                testOutcome = (TestOutcome) 1;
                break;
              case "failed":
                testOutcome = (TestOutcome) 2;
                break;
              case "skipped":
                testOutcome = (TestOutcome) 3;
                break;
            }
            // ISSUE: reference to a compiler-generated field
            \u003302295231489.\u003697014484163(((\u003022174816886.\u003507265261402) this).\u003079046838843, this.\u003652669391772, this.\u003884656257896.ToString(), this.\u003655965244262.ToString(), testOutcome, obj1);
            this.\u003884656257896.Clear();
            this.\u003655965244262.Clear();
            break;
          case "start":
            \u003969475877042.\u003739990328328 obj2 = (\u003969475877042.\u003739990328328) _param2.Event;
            this.\u003652669391772 = (TestResult) null;
            foreach (KeyValuePair<string, TestCase> keyValuePair in this.\u003394272496306())
            {
              if (keyValuePair.Key == obj2.\u003731207308745)
              {
                this.\u003652669391772 = new TestResult(keyValuePair.Value);
                break;
              }
            }
            if (this.\u003652669391772 != null)
            {
              // ISSUE: reference to a compiler-generated field
              ((ITestExecutionRecorder) ((\u003022174816886.\u003507265261402) this).\u003079046838843).RecordStart(this.\u003652669391772.TestCase);
              break;
            }
            this.\u003888344489311(StringExtensions.FormatUI(Strings.Test_UnexpectedResult, (object) obj2.\u003572716128368, (object) obj2.\u003282355495670));
            break;
          case "stderr":
            this.\u003655965244262.Append(((\u003969475877042.\u003487067081731) _param2.Event).\u003965517329888);
            break;
          case "stdout":
            this.\u003884656257896.Append(((\u003969475877042.\u003821497837357) _param2.Event).\u003687136585970);
            break;
          case "done":
            this.\u003194192647006.Set();
            break;
        }
      }

      private static string \u003324517914766(
        IEnumerable<TestCase> _param0,
        \u003064588995134 _param1)
      {
        List<string> list = _param1.\u003579671787876.ToList<string>();
        HashSet<string> stringSet = new HashSet<string>();
        foreach (TestCase testCase in _param0)
        {
          ModulePath modulePath = ModulePath.FromFullPath(PathUtils.GetAbsoluteFilePath(_param1.\u003634011796970, testCase.CodeFilePath));
          if (stringSet.Add(((ModulePath) ref modulePath).LibraryPath))
            list.Insert(0, ((ModulePath) ref modulePath).LibraryPath);
        }
        return string.Join(";", list.Where<string>(new Func<string, bool>(Directory.Exists)).Distinct<string>((IEqualityComparer<string>) StringComparer.OrdinalIgnoreCase));
      }

      private void \u003569111412999(IAsyncResult _param1)
      {
        Socket asyncState = (Socket) _param1.AsyncState;
        Socket socket;
        try
        {
          socket = asyncState.EndAccept(_param1);
        }
        catch (SocketException ex)
        {
          return;
        }
        catch (ObjectDisposedException ex)
        {
          return;
        }
        this.\u003514973611262 = new Connection((Stream) new MemoryStream(), true, (Stream) new NetworkStream(socket, true), true, new Func<RequestArgs, Func<Response, Task>, Task>(\u003302295231489.\u003308556210152.\u003220349590715), \u003969475877042.\u003755498662505, "TestExecutor", (TextWriter) null);
        this.\u003514973611262.EventReceived += new EventHandler<EventReceivedEventArgs>(this.\u003569712627579);
        TaskExtensions.DoNotWait(Task.Run(new Func<Task>(this.\u003514973611262.ProcessMessages)));
        this.\u003505049108052.Set();
      }

      public void \u003860293954535()
      {
        if (!System.IO.File.Exists(this.\u003822463843032.\u003383078423503))
        {
          this.\u003417885110759(StringExtensions.FormatUI(Strings.Test_InterpreterDoesNotExist, (object) this.\u003822463843032.\u003383078423503));
        }
        else
        {
          try
          {
            \u003198191743587.\u003653358623390(this.\u003526429324610, this.\u003133846461470);
            KeyValuePair<string, string> keyValuePair1 = this.\u003768975681802();
            string path = (string) null;
            if (this.\u003594492667023.Length > 5)
              path = \u003036900961292.\u003152675385819(this.\u003394272496306().Select<KeyValuePair<string, TestCase>, string>((Func<KeyValuePair<string, TestCase>, string>) (_param1 => _param1.Key)));
            string[] strArray = this.\u003788578180978(path);
            this.\u003505049108052.Reset();
            using (ProcessOutput processOutput = ProcessOutput.Run(this.\u003822463843032.\u003383078423503, (IEnumerable<string>) strArray, this.\u003822463843032.\u003106365127459, (IEnumerable<KeyValuePair<string, string>>) this.\u003576619354326, this.\u003985603487662, (Redirector) null, true, false, (Encoding) null, (Encoding) null))
            {
              bool flag = false;
              this.\u003142352685285("cd " + this.\u003822463843032.\u003106365127459);
              this.\u003142352685285("set " + keyValuePair1.Key + "=" + keyValuePair1.Value);
              this.\u003142352685285(processOutput.Arguments);
              WaitHandle.WaitAny(new WaitHandle[2]
              {
                (WaitHandle) this.\u003505049108052,
                processOutput.WaitHandle
              });
              if (!this.\u003505049108052.WaitOne(1) && processOutput.ExitCode.HasValue)
              {
                processOutput.Wait();
                this.\u003417885110759(Strings.Test_FailedToStartExited);
                if (processOutput.StandardErrorLines.Any<string>())
                {
                  foreach (string standardErrorLine in processOutput.StandardErrorLines)
                    this.\u003417885110759(standardErrorLine);
                }
                foreach (KeyValuePair<string, TestCase> keyValuePair2 in this.\u003394272496306())
                {
                  // ISSUE: reference to a compiler-generated field
                  ((ITestExecutionRecorder) ((\u003022174816886.\u003507265261402) this).\u003079046838843).RecordStart(keyValuePair2.Value);
                  // ISSUE: reference to a compiler-generated field
                  ((ITestExecutionRecorder) ((\u003022174816886.\u003507265261402) this).\u003079046838843).RecordResult(new TestResult(keyValuePair2.Value)
                  {
                    Outcome = (TestOutcome) 3,
                    ErrorMessage = Strings.Test_NotRun
                  });
                }
                flag = true;
              }
              if (!flag)
              {
                if (this.\u003133846461470 != \u003454440989623.None)
                {
                  try
                  {
                    \u003198191743587.\u003372740317946(this.\u003526429324610, processOutput, this.\u003133846461470, this.\u003626884766788, this.\u003056557390523);
                  }
                  catch (COMException ex1)
                  {
                    this.\u003417885110759(Strings.Test_ErrorConnecting);
                    try
                    {
                      processOutput.Kill();
                    }
                    catch (InvalidOperationException ex2)
                    {
                    }
                    flag = true;
                  }
                }
              }
              WaitHandle[] waitHandles = new WaitHandle[3]
              {
                (WaitHandle) this.\u003144782055672,
                processOutput.WaitHandle,
                (WaitHandle) this.\u003194192647006
              };
              if (waitHandles[1] == null)
                flag = true;
              if (!flag)
              {
                switch (WaitHandle.WaitAny(waitHandles))
                {
                  case 0:
                    try
                    {
                      processOutput.Kill();
                    }
                    catch (InvalidOperationException ex)
                    {
                    }
                    break;
                  case 1:
                    if (WaitHandle.WaitAny(new WaitHandle[2]
                    {
                      (WaitHandle) this.\u003144782055672,
                      (WaitHandle) this.\u003194192647006
                    }, 10000) != 1)
                    {
                      this.\u003888344489311(Strings.Test_NoTestFinishedNotification);
                      break;
                    }
                    break;
                }
              }
            }
            if (!System.IO.File.Exists(path))
              return;
            try
            {
              System.IO.File.Delete(path);
            }
            catch (IOException ex)
            {
            }
          }
          catch (Exception ex)
          {
            this.\u003417885110759(ex.ToString());
          }
        }
      }

      [Conditional("DEBUG")]
      private void \u003243807805289(string _param1) => ((IMessageLogger) ((\u003022174816886.\u003507265261402) this).\u003079046838843).SendMessage((TestMessageLevel) 0, _param1);

      [Conditional("DEBUG")]
      private void \u003975400780171(string _param1) => ((IMessageLogger) ((\u003022174816886.\u003507265261402) this).\u003079046838843).SendMessage((TestMessageLevel) 2, _param1);

      private void \u003142352685285(string _param1) => ((IMessageLogger) ((\u003022174816886.\u003507265261402) this).\u003079046838843).SendMessage((TestMessageLevel) 0, _param1);

      private void \u003417885110759(string _param1) => ((IMessageLogger) ((\u003022174816886.\u003507265261402) this).\u003079046838843).SendMessage((TestMessageLevel) 2, _param1);

      private void \u003888344489311(string _param1) => ((IMessageLogger) ((\u003022174816886.\u003507265261402) this).\u003079046838843).SendMessage((TestMessageLevel) 1, _param1);

      private KeyValuePair<string, string> \u003768975681802()
      {
        string key = this.\u003822463843032.\u003433255215837;
        string str = this.\u003392706402931;
        if (!string.IsNullOrWhiteSpace(key))
          this.\u003576619354326[key] = str;
        foreach (KeyValuePair<string, string> keyValuePair in this.\u003822463843032.\u003615420650558)
          this.\u003576619354326[keyValuePair.Key] = keyValuePair.Value;
        return new KeyValuePair<string, string>(key, str);
      }

      private IEnumerable<KeyValuePair<string, TestCase>> \u003394272496306()
      {
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: variable of a compiler-generated type
        \u003302295231489.\u003308556210152.\u003200863829658 obj = new \u003302295231489.\u003308556210152.\u003200863829658(-2);
        // ISSUE: reference to a compiler-generated field
        ((\u003302295231489.\u003308556210152.\u003684499846223) obj).\u003518297614914 = this;
        return (IEnumerable<KeyValuePair<string, TestCase>>) obj;
      }

      private string[] \u003788578180978(string _param1 = null)
      {
        List<string> stringList1 = new List<string>();
        stringList1.Add(\u003302295231489.\u003686243308378);
        if (string.IsNullOrEmpty(_param1))
        {
          foreach (KeyValuePair<string, TestCase> keyValuePair in this.\u003394272496306())
          {
            stringList1.Add("-t");
            stringList1.Add(keyValuePair.Key);
          }
        }
        else
        {
          stringList1.Add("--test-list");
          stringList1.Add(_param1);
        }
        if (this.\u003254473408181)
          stringList1.Add("--dry-run");
        if (this.\u003781759414743 != null)
        {
          stringList1.Add("--coverage");
          stringList1.Add(this.\u003781759414743);
        }
        int port;
        if (this.\u003133846461470 == \u003454440989623.PythonOnly)
        {
          stringList1.Add("-p");
          List<string> stringList2 = stringList1;
          port = this.\u003056557390523;
          string str = port.ToString();
          stringList2.Add(str);
          if (this.\u003822463843032.\u003713212492592)
          {
            stringList1.Add("-s");
            stringList1.Add(this.\u003626884766788);
          }
        }
        else if (this.\u003133846461470 == \u003454440989623.PythonAndNative)
          stringList1.Add("-x");
        stringList1.Add("-r");
        List<string> stringList3 = stringList1;
        port = ((IPEndPoint) this.\u003823533526907.LocalEndPoint).Port;
        string str1 = port.ToString();
        stringList3.Add(str1);
        return stringList1.ToArray();
      }
    }
  }
}
