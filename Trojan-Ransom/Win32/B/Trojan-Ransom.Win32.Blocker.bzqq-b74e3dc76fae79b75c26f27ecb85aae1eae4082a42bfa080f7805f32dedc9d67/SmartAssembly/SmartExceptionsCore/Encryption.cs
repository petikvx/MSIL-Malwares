// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.Encryption
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.IO;
using System.Security.Cryptography;

namespace SmartAssembly.SmartExceptionsCore
{
  internal class Encryption
  {
    public static string ExceptionMessage;

    public static byte[] Encrypt(byte[] data, string xmlPublicKey)
    {
      if (xmlPublicKey.StartsWith("{"))
      {
        Encryption.ExceptionMessage = "ERR 2006: This template was not properly processed by SmartAssembly";
        return (byte[]) null;
      }
      RijndaelManaged rijndaelManaged = (RijndaelManaged) null;
      RSACryptoServiceProvider cryptoServiceProvider = (RSACryptoServiceProvider) null;
      MemoryStream memoryStream = (MemoryStream) null;
      CryptoStream cryptoStream = (CryptoStream) null;
      try
      {
        rijndaelManaged = new RijndaelManaged();
        cryptoServiceProvider = new RSACryptoServiceProvider();
        cryptoServiceProvider.FromXmlString(xmlPublicKey);
        rijndaelManaged.GenerateKey();
        rijndaelManaged.GenerateIV();
        byte[] numArray1 = new byte[48];
        Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray1, 0, 32);
        Buffer.BlockCopy((Array) rijndaelManaged.IV, 0, (Array) numArray1, 32, 16);
        memoryStream = new MemoryStream();
        try
        {
          byte[] buffer = cryptoServiceProvider.Encrypt(numArray1, false);
          memoryStream.WriteByte((byte) 1);
          memoryStream.WriteByte(Convert.ToByte(buffer.Length / 8));
          memoryStream.Write(buffer, 0, buffer.Length);
        }
        catch (CryptographicException ex1)
        {
          try
          {
            byte[] numArray2 = new byte[16];
            byte[] numArray3 = new byte[16];
            Buffer.BlockCopy((Array) rijndaelManaged.Key, 0, (Array) numArray2, 0, 16);
            Buffer.BlockCopy((Array) rijndaelManaged.Key, 16, (Array) numArray3, 0, 16);
            byte[] buffer1 = cryptoServiceProvider.Encrypt(numArray2, false);
            byte[] buffer2 = cryptoServiceProvider.Encrypt(numArray3, false);
            byte[] buffer3 = cryptoServiceProvider.Encrypt(rijndaelManaged.IV, false);
            memoryStream.WriteByte((byte) 2);
            memoryStream.WriteByte(Convert.ToByte(buffer1.Length / 8));
            memoryStream.Write(buffer1, 0, buffer1.Length);
            memoryStream.Write(buffer2, 0, buffer2.Length);
            memoryStream.Write(buffer3, 0, buffer3.Length);
          }
          catch (CryptographicException ex2)
          {
            Encryption.ExceptionMessage = "ERR 2005: The 128-bit encryption is not available on this computer. You need to install the High Encryption Pack in order to use the reporting feature.";
            return (byte[]) null;
          }
        }
        cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
        cryptoStream.Write(data, 0, data.Length);
        cryptoStream.FlushFinalBlock();
        return memoryStream.ToArray();
      }
      catch (Exception ex)
      {
        Encryption.ExceptionMessage = "ERR 2004: " + ex.Message;
        return (byte[]) null;
      }
      finally
      {
        rijndaelManaged?.Clear();
        cryptoServiceProvider?.Clear();
        memoryStream?.Close();
        cryptoStream?.Close();
      }
    }
  }
}
