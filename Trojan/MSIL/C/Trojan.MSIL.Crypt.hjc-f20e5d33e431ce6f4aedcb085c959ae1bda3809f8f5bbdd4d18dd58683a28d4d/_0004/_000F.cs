// Decompiled with JetBrains decompiler
// Type: .
// Assembly: syncui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cab8849a7bf7875b
// MVID: B8136FDA-4EB0-4CA7-9502-281BC34A634B
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hjc-f20e5d33e431ce6f4aedcb085c959ae1bda3809f8f5bbdd4d18dd58683a28d4d.exe

using \u0001;
using \u0002;
using \u0004;
using \u0007;
using Microsoft.Win32;
using System;
using System.Runtime.InteropServices;

namespace \u0004
{
  internal class \u000F : \u0005.\u0007
  {
    internal static readonly string \u0001;
    internal static readonly string \u0002;
    internal static bool? \u0001;
    [NonSerialized]
    internal static \u0003 \u0084;

    protected override void \u0001([In] \u000E obj0)
    {
      try
      {
        \u0012.\u0001(obj0);
      }
      catch (Exception ex)
      {
        \u000E obj = obj0;
        \u0012.\u0001(ex, (object) this, (object) obj);
        throw;
      }
    }

    protected override bool \u0001()
    {
      bool flag;
      try
      {
        flag = \u0012.\u0001();
      }
      catch (Exception ex)
      {
        \u0012.\u0001(ex, (object) this);
        throw;
      }
      return flag;
    }

    internal static void \u0001()
    {
      object obj1;
      RegistryKey registryKey1;
      bool flag;
      string str1;
      try
      {
        do
        {
          registryKey1 = (RegistryKey) null;
          try
          {
            str1 = \u0094\u0003.\u000F\u0006(\u000F.\u0084(7600), \u000F.\u0002, \u000F.\u0084(7613), \u000F.\u0001);
            registryKey1 = \u0082.\u007E\u0092\u0002((object) Registry.CurrentUser, str1);
            obj1 = \u0010\u0004.\u007E\u0086\u0006((object) registryKey1, \u000F.\u0084(7618));
            if (obj1 == null)
            {
              \u0011\u0004.\u007E\u0087\u0006((object) registryKey1, \u000F.\u0084(7618), (object) bool.FalseString);
              flag = \u0012.\u0001();
              \u0012\u0004.\u007E\u0088\u0006((object) registryKey1, \u000F.\u0084(7618), (object) flag.ToString(), RegistryValueKind.String);
              \u000F.\u0001 = new bool?(flag);
            }
            else
              \u000F.\u0001 = new bool?(\u0013\u0004.\u0089\u0006(obj1));
          }
          catch
          {
            \u000F.\u0001 = new bool?(false);
          }
          finally
          {
            if (registryKey1 != null)
              \u0014.\u007E\u0018((object) registryKey1);
          }
        }
        while (false);
      }
      catch (Exception ex)
      {
        RegistryKey registryKey2 = registryKey1;
        string str2 = str1;
        object obj2 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (ValueType) flag;
        \u0012.\u0001(ex, (object) registryKey2, (object) str2, obj2, (object) local);
        throw;
      }
    }

    static \u000F()
    {
      try
      {
        do
        {
          \u0005.\u0002.\u0001(typeof (\u000F));
        }
        while (false);
        \u000F.\u0001 = \u000F.\u0084(2552);
        \u000F.\u0002 = \u000F.\u0084(2251);
      }
      catch (Exception ex)
      {
        \u0012.\u0001(ex);
        throw;
      }
    }
  }
}
