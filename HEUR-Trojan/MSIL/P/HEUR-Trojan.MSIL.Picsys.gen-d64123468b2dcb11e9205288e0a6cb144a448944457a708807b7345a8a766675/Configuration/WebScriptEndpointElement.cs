// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Configuration.WebScriptEndpointElement
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.ComponentModel;
using System.Configuration;
using System.Runtime.InteropServices;
using System.ServiceModel.Description;
using System.Text;

namespace System.ServiceModel.Configuration
{
  [ComVisible(false)]
  public class WebScriptEndpointElement : StandardEndpointElement
  {
    private ConfigurationPropertyCollection properties;

    protected internal override Type EndpointType => typeof (WebScriptEndpoint);

    [ConfigurationProperty("hostNameComparisonMode", DefaultValue = HostNameComparisonMode.StrongWildcard)]
    [ServiceModelEnumValidator(typeof (HostNameComparisonModeHelper))]
    public HostNameComparisonMode HostNameComparisonMode
    {
      get => (HostNameComparisonMode) this["hostNameComparisonMode"];
      set => this["hostNameComparisonMode"] = (object) value;
    }

    [ConfigurationProperty("maxBufferPoolSize", DefaultValue = 524288)]
    [LongValidator(MinValue = 0)]
    public long MaxBufferPoolSize
    {
      get => (long) this["maxBufferPoolSize"];
      set => this["maxBufferPoolSize"] = (object) value;
    }

    [ConfigurationProperty("maxBufferSize", DefaultValue = 65536)]
    [IntegerValidator(MinValue = 1)]
    public int MaxBufferSize
    {
      get => (int) this["maxBufferSize"];
      set => this["maxBufferSize"] = (object) value;
    }

    [ConfigurationProperty("maxReceivedMessageSize", DefaultValue = 65536)]
    [LongValidator(MinValue = 1)]
    public long MaxReceivedMessageSize
    {
      get => (long) this["maxReceivedMessageSize"];
      set => this["maxReceivedMessageSize"] = (object) value;
    }

    [ConfigurationProperty("readerQuotas")]
    public XmlDictionaryReaderQuotasElement ReaderQuotas => (XmlDictionaryReaderQuotasElement) this["readerQuotas"];

    [ConfigurationProperty("security")]
    public WebHttpSecurityElement Security => (WebHttpSecurityElement) this["security"];

    [ConfigurationProperty("transferMode", DefaultValue = TransferMode.Buffered)]
    [ServiceModelEnumValidator(typeof (TransferModeHelper))]
    public TransferMode TransferMode
    {
      get => (TransferMode) this["transferMode"];
      set => this["transferMode"] = (object) value;
    }

    [ConfigurationProperty("writeEncoding", DefaultValue = "utf-8")]
    [TypeConverter(typeof (EncodingConverter))]
    [WebEncodingValidator]
    public Encoding WriteEncoding
    {
      get => (Encoding) this["writeEncoding"];
      set => this["writeEncoding"] = (object) value;
    }

    [ConfigurationProperty("contentTypeMapper", DefaultValue = "")]
    [StringValidator(MinLength = 0)]
    public string ContentTypeMapper
    {
      get => (string) this["contentTypeMapper"];
      set
      {
        if (string.IsNullOrEmpty(value))
          value = string.Empty;
        this["contentTypeMapper"] = (object) value;
      }
    }

    [ConfigurationProperty("crossDomainScriptAccessEnabled", DefaultValue = false)]
    public bool CrossDomainScriptAccessEnabled
    {
      get => (bool) this["crossDomainScriptAccessEnabled"];
      set => this["crossDomainScriptAccessEnabled"] = (object) value;
    }

    protected override ConfigurationPropertyCollection Properties
    {
      get
      {
        if (this.properties == null)
        {
          lock (this.lockObj)
          {
            if (this.properties == null)
            {
              ConfigurationPropertyCollection properties = base.Properties;
              properties.Add(new ConfigurationProperty("hostNameComparisonMode", typeof (HostNameComparisonMode), (object) HostNameComparisonMode.StrongWildcard, (TypeConverter) null, (ConfigurationValidatorBase) new ServiceModelEnumValidator(typeof (HostNameComparisonModeHelper)), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("maxBufferSize", typeof (int), (object) 65536, (TypeConverter) null, (ConfigurationValidatorBase) new IntegerValidator(1, int.MaxValue, false), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("maxBufferPoolSize", typeof (long), (object) 524288L, (TypeConverter) null, (ConfigurationValidatorBase) new LongValidator(0L, long.MaxValue, false), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("maxReceivedMessageSize", typeof (long), (object) 65536L, (TypeConverter) null, (ConfigurationValidatorBase) new LongValidator(1L, long.MaxValue, false), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("readerQuotas", typeof (XmlDictionaryReaderQuotasElement), (object) null, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("security", typeof (WebHttpSecurityElement), (object) null, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("writeEncoding", typeof (Encoding), (object) "utf-8", (TypeConverter) new EncodingConverter(), (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("transferMode", typeof (TransferMode), (object) TransferMode.Buffered, (TypeConverter) null, (ConfigurationValidatorBase) new ServiceModelEnumValidator(typeof (TransferModeHelper)), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("contentTypeMapper", typeof (string), (object) string.Empty, (TypeConverter) null, (ConfigurationValidatorBase) new StringValidator(0), ConfigurationPropertyOptions.None));
              properties.Add(new ConfigurationProperty("crossDomainScriptAccessEnabled", typeof (bool), (object) false, (TypeConverter) null, (ConfigurationValidatorBase) null, ConfigurationPropertyOptions.None));
              this.properties = properties;
            }
          }
        }
        return this.properties;
      }
    }

    protected internal override ServiceEndpoint CreateServiceEndpoint(
      ContractDescription contractDescription)
    {
      return (ServiceEndpoint) new WebScriptEndpoint(contractDescription);
    }

    protected override void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement)
    {
      if (string.IsNullOrEmpty(channelEndpointElement.Binding))
        channelEndpointElement.Binding = "webHttpBinding";
      else if (!string.Equals(channelEndpointElement.Binding, "webHttpBinding", StringComparison.Ordinal))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.WebEndpointRequiredBinding, (object) typeof (WebScriptEndpoint).Name, (object) "webHttpBinding")));
      }
    }

    protected override void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement)
    {
      if (string.IsNullOrEmpty(serviceEndpointElement.Binding))
        serviceEndpointElement.Binding = "webHttpBinding";
      else if (!string.Equals(serviceEndpointElement.Binding, "webHttpBinding", StringComparison.Ordinal))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.WebEndpointRequiredBinding, (object) typeof (WebScriptEndpoint).Name, (object) "webHttpBinding")));
      }
    }

    protected override void OnApplyConfiguration(
      ServiceEndpoint endpoint,
      ServiceEndpointElement serviceEndpointElement)
    {
      this.InternalOnApplyConfiguration(endpoint);
    }

    protected override void OnApplyConfiguration(
      ServiceEndpoint endpoint,
      ChannelEndpointElement serviceEndpointElement)
    {
      this.InternalOnApplyConfiguration(endpoint);
    }

    private void InternalOnApplyConfiguration(ServiceEndpoint endpoint)
    {
      WebScriptEndpoint webScriptEndpoint = endpoint as WebScriptEndpoint;
      if (this.IsSet("hostNameComparisonMode"))
        webScriptEndpoint.HostNameComparisonMode = this.HostNameComparisonMode;
      if (this.IsSet("maxBufferPoolSize"))
        webScriptEndpoint.MaxBufferPoolSize = this.MaxBufferPoolSize;
      if (this.IsSet("maxReceivedMessageSize"))
        webScriptEndpoint.MaxReceivedMessageSize = this.MaxReceivedMessageSize;
      if (this.IsSet("writeEncoding"))
        webScriptEndpoint.WriteEncoding = this.WriteEncoding;
      if (this.IsSet("transferMode"))
        webScriptEndpoint.TransferMode = this.TransferMode;
      if (this.IsSet("crossDomainScriptAccessEnabled"))
        webScriptEndpoint.CrossDomainScriptAccessEnabled = this.CrossDomainScriptAccessEnabled;
      if (this.ElementInformation.Properties["maxBufferSize"].ValueOrigin != PropertyValueOrigin.Default)
        webScriptEndpoint.MaxBufferSize = this.MaxBufferSize;
      if (this.IsSet("contentTypeMapper"))
        webScriptEndpoint.ContentTypeMapper = WebHttpBindingElement.GetContentTypeMapper(this.ContentTypeMapper);
      this.Security.ApplyConfiguration(webScriptEndpoint.Security);
      WebHttpBindingElement.ApplyReaderQuotasConfiguration(webScriptEndpoint.ReaderQuotas, this.ReaderQuotas);
    }

    private bool IsSet(string propertyName) => this.ElementInformation.Properties[propertyName].IsModified;
  }
}
