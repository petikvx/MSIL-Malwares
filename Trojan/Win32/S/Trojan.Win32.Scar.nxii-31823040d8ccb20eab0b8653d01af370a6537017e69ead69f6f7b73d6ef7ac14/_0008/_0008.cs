// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0014;
using System;
using System.Runtime.InteropServices;

namespace \u0008
{
  internal static class \u0008
  {
    public static bool \u0001([In] object obj0, [In] object obj1)
    {
      if (obj0 == null)
        goto label_16;
label_2:
      if (true)
      {
        if (obj0 != null && obj1 == null)
        {
          if (true)
            return false;
        }
        else
          goto label_18;
label_10:
        return \u008A\u0002.\u0001\u0006(obj0, (IFormatProvider) \u0098.\u0003\u0004()).Equals(\u008A\u0002.\u0001\u0006(obj1, (IFormatProvider) \u0098.\u0003\u0004()));
label_18:
        if (obj0 == null && obj1 != null)
          return false;
        if ((object) \u0001\u0002.\u007E\u0017\u0004(obj0) == (object) \u0001\u0002.\u007E\u0017\u0004(obj1))
          return \u0006\u0002.\u007E\u0089\u0004(obj0, obj1);
        int num = \u0006.\u0001(obj0) ? 1 : 0;
        if (false)
          return num != 0;
        if (num == 0 || !\u0006.\u0001(obj1))
        {
          switch (obj0)
          {
            case double _:
            case float _:
            case Decimal _:
              switch (obj1)
              {
                case double _:
                case float _:
                case Decimal _:
                  return \u0006.\u0001(\u008B\u0002.\u0002\u0006(obj0, (IFormatProvider) \u0098.\u0003\u0004()), \u008B\u0002.\u0002\u0006(obj1, (IFormatProvider) \u0098.\u0003\u0004()));
              }
              break;
          }
          return false;
        }
        goto label_10;
      }
label_16:
      if (obj1 == null)
        return true;
      goto label_2;
    }

    public static unsafe int \u0001([In] byte[] obj0, [In] byte[] obj1)
    {
      void* voidPtr;
      do
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(16);
        *(int*) ((IntPtr) voidPtr + 4) = obj0.Length;
        if (true)
        {
          *(int*) voidPtr = ((int*) ((IntPtr) voidPtr + 4))->CompareTo(obj1.Length);
          if (*(int*) voidPtr == 0)
            goto label_4;
        }
        else
          goto label_11;
      }
      while (false);
      goto label_15;
label_4:
      *(int*) ((IntPtr) voidPtr + 8) = 0;
      goto label_9;
label_7:
      return *(int*) ((IntPtr) voidPtr + 12);
label_9:
      int num = *(int*) ((IntPtr) voidPtr + 8);
label_10:
      if (num < obj0.Length)
      {
        *(int*) ((IntPtr) voidPtr + 12) = obj0[*(int*) ((IntPtr) voidPtr + 8)].CompareTo(obj1[*(int*) ((IntPtr) voidPtr + 8)]);
        if (true)
        {
          if (*(int*) ((IntPtr) voidPtr + 12) == 0)
          {
            *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
            goto label_9;
          }
          else
            goto label_7;
        }
        else
          goto label_4;
      }
label_11:
      if (true)
      {
        num = 0;
        if (num == 0)
          return num != 0 ? num : num;
        goto label_10;
      }
      else
        goto label_7;
label_15:
      return *(int*) voidPtr;
    }
  }
}
