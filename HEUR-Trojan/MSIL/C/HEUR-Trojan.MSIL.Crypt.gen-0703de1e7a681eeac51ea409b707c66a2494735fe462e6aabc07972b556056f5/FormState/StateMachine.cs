// Decompiled with JetBrains decompiler
// Type: FormState.StateMachine
// Assembly: Interna, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 443E8749-461D-4E08-9210-1C57029CD0B8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-0703de1e7a681eeac51ea409b707c66a2494735fe462e6aabc07972b556056f5.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using System.Windows.Forms;

namespace FormState
{
  public class StateMachine
  {
    private static StateMachine instance;
    private static frmMain _owner;
    private static frmHelp _help;
    private static Dictionary<string, Form> _forms;
    private static Stack<Form> _stack;
    private static Stack<string> _next;
    public bool AutoCreateForms = true;
    public string FormPrefix = "frm";
    public bool ExceptionOnNullOrEmptyForm = true;

    public StateMachine()
    {
      StateMachine._forms = new Dictionary<string, Form>();
      StateMachine._stack = new Stack<Form>();
      StateMachine._next = new Stack<string>();
    }

    public static StateMachine Instance(frmMain owner)
    {
      if (StateMachine.instance == null)
      {
        StateMachine.instance = new StateMachine();
        StateMachine._owner = owner;
        StateMachine._owner.IsMdiContainer = true;
        StateMachine._owner.tsBack.Click += new EventHandler(StateMachine.Back_Click);
      }
      return StateMachine.instance;
    }

    public static StateMachine Instance(frmMain owner, frmHelp help)
    {
      if (StateMachine.instance == null)
      {
        StateMachine.instance = new StateMachine();
        StateMachine._owner = owner;
        StateMachine._owner.tsBack.Click += new EventHandler(StateMachine.Back_Click);
        StateMachine._help = help;
      }
      return StateMachine.instance;
    }

    public static StateMachine Instance()
    {
      if (StateMachine.instance == null)
        StateMachine.instance = new StateMachine();
      if (LicenseManager.UsageMode != LicenseUsageMode.Designtime && StateMachine._owner == null)
        throw new StateMachineException("I need an owner, please call that instance first");
      return StateMachine.instance;
    }

    public void AddForm(string Name, Form frm)
    {
    }

    public void AddForms(System.Type frm)
    {
      foreach (System.Type type in Assembly.GetAssembly(frm).GetTypes())
      {
        if (type.BaseType == frm)
        {
          Form instance = (Form) Activator.CreateInstance(type);
          StateMachine._forms.Add(instance.ToString(), instance);
        }
      }
    }

    private Form FindForm(string Name)
    {
      System.Type[] types = Assembly.GetExecutingAssembly().GetTypes();
      Form form = (Form) null;
      foreach (System.Type type in types)
      {
        if (type.Name == Name | type.Name == this.FormPrefix + Name)
          form = (Form) Activator.CreateInstance(type);
      }
      return form;
    }

    public void Navigate(params string[] list) => this.Navigate(StateMachine._next.Pop());

    public void Navigate(string Name)
    {
      if (!string.IsNullOrEmpty(Name))
      {
        Form frm = (Form) null;
        if (frm == null)
          throw new StateMachineException("State Machine: I don't know what " + Name + " is");
        if (StateMachine._owner.ActiveMdiChild != null)
        {
          StateMachine._stack.Push(StateMachine._owner.ActiveMdiChild);
          StateMachine._owner.ActiveMdiChild.Hide();
        }
        this.Navigate(frm);
      }
      else if (this.ExceptionOnNullOrEmptyForm)
        throw new StateMachineException("State Machine: I was told to move to a null or empty form name");
    }

    public void SetStatus(string msg) => StateMachine._owner.statusLabel.Text = msg;

    private void Navigate(Form frm)
    {
      frm.MdiParent = (Form) StateMachine._owner;
      frm.Dock = DockStyle.Fill;
      frm.FormBorderStyle = FormBorderStyle.None;
      frm.Show();
      frm.BringToFront();
      StateMachine._owner.tsBack.Enabled = this.CanGoBack;
      if (StateMachine._help != null)
        StateMachine._help.Navigate(frm.Name.ToString());
      this.SetStatus(frm.Text);
    }

    private bool CanGoBack => StateMachine._stack.Count > 0;

    private static void Back_Click(object sender, EventArgs e)
    {
      if (StateMachine._stack.Count <= 0)
        return;
      Form frm = StateMachine._stack.Pop();
      StateMachine.instance.Navigate(frm);
    }

    public bool CanGoForward => StateMachine._next.Count > 0;

    public void NextForm()
    {
      if (StateMachine._next.Count <= 0)
        return;
      string Name = StateMachine._next.Pop();
      if (!this.ExceptionOnNullOrEmptyForm)
      {
        while (string.IsNullOrEmpty(Name))
        {
          Name = StateMachine._next.Pop();
          if (!this.CanGoForward)
            break;
        }
      }
      StateMachine.instance.Navigate(Name);
    }
  }
}
