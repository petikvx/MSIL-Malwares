// Decompiled with JetBrains decompiler
// Type: .
// Assembly: WindowsBC, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9909ee17073e3364
// MVID: 658BFC85-36E1-493D-98E6-AE9127D73D60
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Downloader.MSIL.BitCoinMiner.c-64f742a0b28b2c3d2a62ef6607fcfd5fa55b793a1aff3a6c11e014e3b119149e.exe

using \u000E;
using \u000E\u0002;
using \u0017\u0002;
using \u0090;
using ICSharpCode.SharpZipLib;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0017\u0002
{
  internal sealed class \u0013
  {
    private static readonly int[] \u0001 = new int[29]
    {
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258
    };
    private static readonly int[] \u0002 = new int[29]
    {
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0
    };
    private static readonly int[] \u0003 = new int[30]
    {
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577
    };
    private static readonly int[] \u0004 = new int[30]
    {
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13
    };
    private int \u0005;
    private int \u0006;
    private int \u0007;
    private int \u0008;
    private int \u000E;
    private int \u000F;
    private bool \u0010;
    private long \u0011;
    private long \u0012;
    private bool \u0013;
    private \u0014 \u0014;
    private \u0015 \u0015;
    private \u0017 \u0016;
    private \u0016 \u0017;
    private \u0016 \u0018;
    private \u008F \u0019;

    public \u0013()
      : this(false)
    {
    }

    public \u0013([In] bool obj0)
    {
      this.\u0013 = obj0;
      this.\u0019 = new \u008F();
      this.\u0014 = new \u0014();
      this.\u0015 = new \u0015();
      this.\u0005 = obj0 ? 2 : 0;
    }

    private bool \u0088\u0004()
    {
      int num1 = this.\u0014.\u0013\u0003(16);
      if (num1 < 0)
        return false;
      this.\u0014.\u0014\u0003(16);
      int num2 = (num1 << 8 | num1 >> 8) & (int) ushort.MaxValue;
      if (num2 % 31 != 0)
        throw new SharpZipBaseException(\u0008.\u000E\u0003(3263));
      if ((num2 & 3840) != 2048)
        throw new SharpZipBaseException(\u0008.\u000E\u0003(3296));
      if ((num2 & 32) == 0)
      {
        this.\u0005 = 2;
      }
      else
      {
        this.\u0005 = 1;
        this.\u0007 = 32;
      }
      return true;
    }

    private bool \u0089\u0004()
    {
      for (; this.\u0007 > 0; this.\u0007 -= 8)
      {
        int num = this.\u0014.\u0013\u0003(8);
        if (num < 0)
          return false;
        this.\u0014.\u0014\u0003(8);
        this.\u0006 = this.\u0006 << 8 | num;
      }
      return false;
    }

    private bool \u0010\u0003()
    {
      int num1 = this.\u0015.\u001E\u0003();
      while (num1 >= 258)
      {
        switch (this.\u0005)
        {
          case 7:
            int num2;
            while (((num2 = this.\u0017.\u0081\u0003(this.\u0014)) & -256) == 0)
            {
              this.\u0015.Write(num2);
              if (--num1 < 258)
                return true;
            }
            if (num2 < 257)
            {
              if (num2 < 0)
                return false;
              this.\u0018 = (\u0016) null;
              this.\u0017 = (\u0016) null;
              this.\u0005 = 2;
              return true;
            }
            try
            {
              this.\u0008 = \u0013.\u0001[num2 - 257];
              this.\u0007 = \u0013.\u0002[num2 - 257];
              goto case 8;
            }
            catch (Exception ex)
            {
              throw new SharpZipBaseException(\u0008.\u000E\u0003(3333));
            }
          case 8:
            if (this.\u0007 > 0)
            {
              this.\u0005 = 8;
              int num3 = this.\u0014.\u0013\u0003(this.\u0007);
              if (num3 < 0)
                return false;
              this.\u0014.\u0014\u0003(this.\u0007);
              this.\u0008 += num3;
            }
            this.\u0005 = 9;
            goto case 9;
          case 9:
            int index = this.\u0018.\u0081\u0003(this.\u0014);
            if (index < 0)
              return false;
            try
            {
              this.\u000E = \u0013.\u0003[index];
              this.\u0007 = \u0013.\u0004[index];
              goto case 10;
            }
            catch (Exception ex)
            {
              throw new SharpZipBaseException(\u0008.\u000E\u0003(3366));
            }
          case 10:
            if (this.\u0007 > 0)
            {
              this.\u0005 = 10;
              int num4 = this.\u0014.\u0013\u0003(this.\u0007);
              if (num4 < 0)
                return false;
              this.\u0014.\u0014\u0003(this.\u0007);
              this.\u000E += num4;
            }
            this.\u0015.\u001C\u0003(this.\u0008, this.\u000E);
            num1 -= this.\u0008;
            this.\u0005 = 7;
            continue;
          default:
            throw new SharpZipBaseException(\u0008.\u000E\u0003(3395));
        }
      }
      return true;
    }

    private bool \u008A\u0004()
    {
      for (; this.\u0007 > 0; this.\u0007 -= 8)
      {
        int num = this.\u0014.\u0013\u0003(8);
        if (num < 0)
          return false;
        this.\u0014.\u0014\u0003(8);
        this.\u0006 = this.\u0006 << 8 | num;
      }
      if ((int) this.\u0019.\u0088\u0003() != this.\u0006)
      {
        object[] objArray = new object[4]
        {
          (object) \u0008.\u000E\u0003(3424),
          (object) (int) this.\u0019.\u0088\u0003(),
          (object) \u0008.\u000E\u0003(3465),
          (object) this.\u0006
        };
        throw new SharpZipBaseException(\u008B\u0004.\u001E\u0002(objArray));
      }
      this.\u0005 = 12;
      return false;
    }

    private bool \u0011\u0003()
    {
      switch (this.\u0005)
      {
        case 0:
          return this.\u0088\u0004();
        case 1:
          return this.\u0089\u0004();
        case 2:
          if (this.\u0010)
          {
            if (this.\u0013)
            {
              this.\u0005 = 12;
              return false;
            }
            this.\u0014.\u0017\u0003();
            this.\u0007 = 32;
            this.\u0005 = 11;
            return true;
          }
          int num1 = this.\u0014.\u0013\u0003(3);
          if (num1 < 0)
            return false;
          this.\u0014.\u0014\u0003(3);
          if ((num1 & 1) != 0)
            this.\u0010 = true;
          switch (num1 >> 1)
          {
            case 0:
              this.\u0014.\u0017\u0003();
              this.\u0005 = 3;
              break;
            case 1:
              this.\u0017 = \u0016.\u0002;
              this.\u0018 = \u0016.\u0003;
              this.\u0005 = 7;
              break;
            case 2:
              this.\u0016 = new \u0017();
              this.\u0005 = 6;
              break;
            default:
              throw new SharpZipBaseException(\u0002\u0005.\u001C\u0002((object) \u0008.\u000E\u0003(3474), (object) num1));
          }
          return true;
        case 3:
          if ((this.\u000F = this.\u0014.\u0013\u0003(16)) < 0)
            return false;
          this.\u0014.\u0014\u0003(16);
          this.\u0005 = 4;
          goto case 4;
        case 4:
          int num2 = this.\u0014.\u0013\u0003(16);
          if (num2 < 0)
            return false;
          this.\u0014.\u0014\u0003(16);
          if (num2 != (this.\u000F ^ (int) ushort.MaxValue))
            throw new SharpZipBaseException(\u0008.\u000E\u0003(3503));
          this.\u0005 = 5;
          goto case 5;
        case 5:
          this.\u000F -= this.\u0015.\u001D\u0003(this.\u0014, this.\u000F);
          if (this.\u000F != 0)
            return !this.\u0014.\u0018\u0003();
          this.\u0005 = 2;
          return true;
        case 6:
          if (!this.\u0016.\u0011\u0003(this.\u0014))
            return false;
          this.\u0017 = this.\u0016.\u0082\u0003();
          this.\u0018 = this.\u0016.\u0083\u0003();
          this.\u0005 = 7;
          goto case 7;
        case 7:
        case 8:
        case 9:
        case 10:
          return this.\u0010\u0003();
        case 11:
          return this.\u008A\u0004();
        case 12:
          return false;
        default:
          throw new SharpZipBaseException(\u0008.\u000E\u0003(3540));
      }
    }

    public void \u001A\u0003([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      this.\u0014.\u001A\u0003(obj0, obj1, obj2);
      this.\u0012 += (long) obj2;
    }

    public int \u0012\u0003([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      if (obj0 == null)
        throw new ArgumentNullException(\u0008.\u000E\u0003(568));
      if (obj2 < 0)
        throw new ArgumentOutOfRangeException(\u0008.\u000E\u0003(611), \u0008.\u000E\u0003(3581));
      if (obj1 < 0)
        throw new ArgumentOutOfRangeException(\u0008.\u000E\u0003(577), \u0008.\u000E\u0003(3614));
      if (obj1 + obj2 > obj0.Length)
        throw new ArgumentException(\u0008.\u000E\u0003(3651));
      if (obj2 == 0)
      {
        if (!this.\u008C\u0004())
          this.\u0011\u0003();
        return 0;
      }
      int num1 = 0;
      do
      {
        if (this.\u0005 != 11)
        {
          int num2 = this.\u0015.\u007F\u0003(obj0, obj1, obj2);
          if (num2 > 0)
          {
            this.\u0019.\u0089\u0003(obj0, obj1, num2);
            obj1 += num2;
            num1 += num2;
            this.\u0011 += (long) num2;
            obj2 -= num2;
            if (obj2 == 0)
              return num1;
          }
        }
      }
      while (this.\u0011\u0003() || this.\u0015.\u001F\u0003() > 0 && this.\u0005 != 11);
      return num1;
    }

    [SpecialName]
    public bool \u0018\u0003() => this.\u0014.\u0018\u0003();

    [SpecialName]
    public bool \u008B\u0004() => this.\u0005 == 1 && this.\u0007 == 0;

    [SpecialName]
    public bool \u008C\u0004() => this.\u0005 == 12 && this.\u0015.\u001F\u0003() == 0;
  }
}
