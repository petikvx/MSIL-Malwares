// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Candidates.AdapterGetterCandidate
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Collections;
using IEnumUnkn.Definitions;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using RiskGame;
using RiskGame.Common;
using RiskGame.Connections;
using RiskGame.Game;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;

namespace IEnumUnkn.Candidates
{
  [Serializable]
  public class AdapterGetterCandidate
  {
    private static readonly string filter;
    public List<Player> worker;
    public List<AuthenticationBridgeRule> m_Connection;
    public List<Registry> exporter;
    public AuthenticationBridgeRule m_Base;
    public AuthenticationBridgeRule _Server;
    public Player dispatcher;
    public int client;
    public int m_Attr;
    public double proxy;
    public DateTime message;
    public GameState authentication;
    public GameMode m_List;
    public SecurityPermissionFlag m_Container;
    private int _Queue;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int NewMapper() => this._Queue;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AdapterGetterCandidate()
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            ListenerManager.InitStub();
            num2 = 4;
            break;
          case 1:
          case 4:
            this.worker = new List<Player>();
            goto case 2;
          case 2:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.InitMapper();
            num2 = 5;
            break;
          case 5:
            goto label_7;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitMapper()
    {
      int num1 = 1;
      bool flag1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            flag1 = File.Exists(AdapterGetterCandidate.filter);
            num1 = 3;
            continue;
          case 2:
          case 4:
            goto label_1;
          case 3:
            if (!flag1)
            {
              this._Queue = 0;
              num1 = 5;
              continue;
            }
            goto label_1;
          case 5:
            goto label_27;
          default:
            num1 = 4;
            continue;
        }
      }
label_1:
      using (Stream serializationStream = (Stream) new FileStream(AdapterGetterCandidate.filter, FileMode.Open))
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        int num2 = 0;
        while (true)
        {
          int num3 = num2;
          List<int> intList;
          int num4;
          bool flag2;
          while (true)
          {
            switch (num3)
            {
              case 0:
                intList = new List<int>();
                while (serializationStream.Position < serializationStream.Length)
                {
                  AdapterGetterCandidate adapterGetterCandidate = (AdapterGetterCandidate) binaryFormatter.Deserialize(serializationStream);
                  intList.Add(adapterGetterCandidate.NewMapper());
                }
                num4 = 0;
                goto case 2;
              case 1:
                goto label_21;
              case 2:
                flag2 = num4 < intList.Count + 1;
                if (!AdapterGetterCandidate.MoveObject())
                {
                  num3 = 5;
                  continue;
                }
                goto label_17;
              case 3:
              case 5:
                if (flag2)
                {
                  if (!intList.Contains(num4))
                  {
                    this._Queue = num4;
                    num3 = 4;
                    continue;
                  }
                  ++num4;
                  goto case 2;
                }
                else
                  goto label_10;
              case 4:
                goto label_11;
              case 6:
                goto label_28;
              default:
                goto label_15;
            }
          }
label_10:
          num2 = 6;
          continue;
label_15:
          num2 = 2;
        }
label_21:
        return;
label_11:
        return;
label_28:
        return;
label_17:
        return;
      }
label_27:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void DeleteMapper(int asset)
    {
      int num1 = 5;
      BinaryFormatter binaryFormatter;
      List<AdapterGetterCandidate> adapterGetterCandidateList;
      Stream serializationStream1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              adapterGetterCandidateList = new List<AdapterGetterCandidate>();
              goto case 4;
            case 1:
            case 3:
              if (File.Exists(AdapterGetterCandidate.filter))
              {
                binaryFormatter = new BinaryFormatter();
                num2 = 0;
                continue;
              }
              goto label_34;
            case 4:
              using (Stream serializationStream2 = (Stream) new FileStream(AdapterGetterCandidate.filter, FileMode.Open))
              {
                while (true)
                {
                  bool flag = serializationStream2.Position < serializationStream2.Length;
label_19:
                  AdapterGetterCandidate adapterGetterCandidate;
                  int num3;
                  if (flag)
                  {
                    adapterGetterCandidate = (AdapterGetterCandidate) binaryFormatter.Deserialize(serializationStream2);
                    num3 = 3;
                  }
                  else
                    goto label_20;
label_14:
                  while (true)
                  {
                    int num4 = num3;
                    while (true)
                    {
                      switch (num4)
                      {
                        case 0:
                        case 3:
                          goto label_17;
                        case 1:
                        case 4:
                          goto label_11;
                        case 2:
                          goto label_19;
                        case 5:
                          goto label_24;
                        default:
                          if (!AdapterGetterCandidate.MoveObject())
                          {
                            num4 = 2;
                            continue;
                          }
                          goto label_17;
                      }
                    }
label_17:
                    if (adapterGetterCandidate.NewMapper() != asset)
                      num3 = 4;
                    else
                      goto label_12;
                  }
label_11:
                  adapterGetterCandidateList.Add(adapterGetterCandidate);
label_12:
                  continue;
label_20:
                  num3 = 5;
                  goto label_14;
                }
              }
label_24:
              File.Delete(AdapterGetterCandidate.filter);
              serializationStream1 = (Stream) new FileStream(AdapterGetterCandidate.filter, FileMode.Create);
              if (AdapterGetterCandidate.QueryObject())
              {
                num2 = 6;
                continue;
              }
              goto label_25;
            case 5:
              AdapterGetterCandidate.PrintMapper();
              num2 = 3;
              continue;
            case 6:
              goto label_25;
            default:
              goto label_7;
          }
        }
label_7:
        num1 = 4;
      }
label_34:
      return;
label_25:
      try
      {
        foreach (AdapterGetterCandidate graph in adapterGetterCandidateList)
        {
          int num5 = 2;
          if (AdapterGetterCandidate.QueryObject())
            goto label_29;
label_28:
          binaryFormatter.Serialize(serializationStream1, (object) graph);
          goto label_31;
label_29:
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 2:
                goto label_28;
              case 1:
              case 3:
                goto label_31;
              default:
                num5 = 3;
                continue;
            }
          }
label_31:;
        }
      }
      finally
      {
        serializationStream1?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void ConnectMapper(AdapterGetterCandidate item)
    {
      int num1 = 3;
      FileMode mode;
      FileStream serializationStream;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_5;
            case 1:
              if (!flag)
              {
                mode = FileMode.OpenOrCreate;
                goto case 5;
              }
              else
                goto label_2;
            case 2:
            case 4:
              serializationStream = new FileStream(AdapterGetterCandidate.filter, mode);
              num2 = 6;
              continue;
            case 5:
              goto case 2;
            case 6:
              goto label_10;
            default:
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_10;
          }
        }
label_2:
        mode = FileMode.Open;
        num1 = 4;
        continue;
label_5:
        flag = File.Exists(AdapterGetterCandidate.filter);
        num1 = 1;
      }
label_10:
      try
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        int num3 = 0;
        if (true)
          goto label_18;
label_11:
        AdapterGetterCandidate adapterGetterCandidate = (AdapterGetterCandidate) binaryFormatter.Deserialize((Stream) serializationStream);
        if (true)
        {
          num3 = 6;
          goto label_18;
        }
label_12:
        bool flag;
        int num4;
        if (!flag)
          num4 = 3;
        else
          goto label_22;
label_17:
        num3 = num4;
        goto label_18;
label_22:
        long position = serializationStream.Position;
        num4 = 1;
        goto label_17;
label_18:
        while (true)
        {
          switch (num3)
          {
            case 0:
              if (mode != FileMode.Open)
                break;
              goto label_16;
            case 1:
              goto label_11;
            case 2:
            case 6:
              goto label_14;
            case 3:
            case 4:
              break;
            case 5:
              goto label_12;
            case 7:
              goto label_21;
            default:
              if (AdapterGetterCandidate.QueryObject())
              {
                num3 = 5;
                continue;
              }
              goto case 0;
          }
          serializationStream.Seek(serializationStream.Length, SeekOrigin.Begin);
          item.message = DateTime.Now;
          binaryFormatter.Serialize((Stream) serializationStream, (object) item);
          if (true)
            num3 = 7;
          else
            goto label_25;
        }
label_14:
        if (adapterGetterCandidate.NewMapper() == item.NewMapper())
        {
          serializationStream.Seek(position, SeekOrigin.Begin);
          item.message = DateTime.Now;
          binaryFormatter.Serialize((Stream) serializationStream, (object) item);
          return;
        }
label_16:
        flag = serializationStream.Position < serializationStream.Length;
        goto label_12;
label_21:
        return;
label_25:;
      }
      finally
      {
        serializationStream?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static AdapterGetterCandidate StopMapper(int index_spec)
    {
      int num1 = 4;
      if (true)
        goto label_5;
label_1:
      Stream serializationStream = (Stream) new FileStream(AdapterGetterCandidate.filter, FileMode.Open);
      int num2 = 5;
label_4:
      num1 = num2;
label_5:
      bool flag;
      switch (num1)
      {
        case 0:
        case 2:
          goto label_1;
        case 1:
        case 3:
          if (!flag)
            throw new PublisherConnector();
          goto label_1;
        case 4:
          flag = File.Exists(AdapterGetterCandidate.filter);
          num2 = 3;
          goto label_4;
        case 5:
          try
          {
            BinaryFormatter binaryFormatter = new BinaryFormatter();
            while (serializationStream.Position < serializationStream.Length)
            {
              AdapterGetterCandidate adapterGetterCandidate = (AdapterGetterCandidate) binaryFormatter.Deserialize(serializationStream);
              if (adapterGetterCandidate.NewMapper() == index_spec)
              {
                foreach (Player player in adapterGetterCandidate.worker)
                {
                  int num3 = 2;
                  if (!AdapterGetterCandidate.MoveObject())
                    goto label_13;
label_12:
                  player.PatchField();
                  goto label_15;
label_13:
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 2:
                        goto label_12;
                      case 1:
                      case 3:
                        goto label_15;
                      default:
                        num3 = 3;
                        continue;
                    }
                  }
label_15:;
                }
                return adapterGetterCandidate;
              }
            }
            throw new PublisherConnector();
          }
          finally
          {
            serializationStream?.Dispose();
          }
        default:
          num2 = 0;
          goto label_4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ObservableCollection<Importer> VisitMapper(
      List<Human> reference)
    {
      ObservableCollection<Importer> observableCollection = new ObservableCollection<Importer>();
      if (File.Exists(AdapterGetterCandidate.filter))
      {
        using (Stream serializationStream = (Stream) new FileStream(AdapterGetterCandidate.filter, FileMode.Open))
        {
          BinaryFormatter binaryFormatter = new BinaryFormatter();
          while (serializationStream.Position < serializationStream.Length)
          {
            AdapterGetterCandidate adapterGetterCandidate = (AdapterGetterCandidate) binaryFormatter.Deserialize(serializationStream);
            bool flag = false;
            foreach (Player player in reference)
            {
              if (player.WriteField() == adapterGetterCandidate.worker[0].WriteField())
              {
                flag = true;
                break;
              }
            }
            if (flag)
            {
              Importer importer = new Importer(adapterGetterCandidate.message.ToString("g"), adapterGetterCandidate.worker[0].WriteField(), adapterGetterCandidate.m_Container.ToString(), adapterGetterCandidate.m_List.ToString(), adapterGetterCandidate.NewMapper().ToString());
              observableCollection.Add(importer);
            }
          }
        }
      }
      return observableCollection;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void PrintMapper()
    {
      int num1 = 2;
      bool flag;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_6;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        flag = File.Exists(AdapterGetterCandidate.filter);
        num1 = 3;
      }
label_2:
      if (!flag)
        return;
label_6:
      try
      {
        using (Stream serializationStream = (Stream) new FileStream(AdapterGetterCandidate.filter, FileMode.Open))
        {
          BinaryFormatter binaryFormatter = new BinaryFormatter();
          int num3 = 2;
          if (!AdapterGetterCandidate.MoveObject())
            goto label_10;
label_9:
          AdapterGetterCandidate adapterGetterCandidate = (AdapterGetterCandidate) binaryFormatter.Deserialize(serializationStream);
          goto label_17;
label_10:
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_9;
              case 1:
              case 3:
                goto label_17;
              default:
                num3 = 3;
                continue;
            }
          }
        }
      }
      catch (SerializationException ex)
      {
        File.Delete(AdapterGetterCandidate.filter);
      }
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static AdapterGetterCandidate()
    {
      ListenerManager.InitStub();
      AdapterGetterCandidate.filter = "GameSaves.bin";
    }

    internal static bool QueryObject() => true;

    internal static bool MoveObject() => false;
  }
}
