// Decompiled with JetBrains decompiler
// Type: AjScript.Language.DynamicObject
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using System;
using System.Collections.Generic;
using System.Linq;

namespace AjScript.Language
{
  public class DynamicObject : IObject
  {
    private Dictionary<string, object> values = new Dictionary<string, object>();
    private static string[] nativeMethods = new string[7]
    {
      "SetValue",
      "GetValue",
      "ToString",
      "GetNames",
      "Invoke",
      "GetHashCode",
      "Equals"
    };
    private IFunction function;

    public DynamicObject()
    {
    }

    public DynamicObject(IFunction function) => this.function = function;

    public IFunction Function
    {
      get => this.function;
      internal set => this.function = value;
    }

    public virtual void SetValue(string name, object value) => this.values[name] = value;

    public virtual object GetValue(string name)
    {
      if (this.values.ContainsKey(name))
        return this.values[name];
      if (this.function == null)
        return (object) Undefined.Instance;
      object obj = this.function.GetValue("prototype");
      return obj == null || obj == Undefined.Instance ? (object) Undefined.Instance : ((IObject) obj).GetValue(name);
    }

    public virtual ICollection<string> GetNames() => (ICollection<string>) this.values.Keys;

    public virtual bool IsNativeMethod(string name) => ((IEnumerable<string>) DynamicObject.nativeMethods).Contains<string>(name);

    public virtual object Invoke(string name, object[] parameters)
    {
      object obj = this.GetValue(name);
      if ((obj == null || obj == Undefined.Instance) && this.IsNativeMethod(name))
        return ObjectUtilities.GetNativeValue((object) this, name, parameters);
      if (obj == null || obj == Undefined.Instance)
        throw new InvalidOperationException(string.Format("Unknown member '{0}'", (object) name));
      if (obj is ICallable)
        return ((ICallable) obj).Invoke((IContext) null, (object) this, parameters);
      if (parameters == null)
        return obj;
      throw new InvalidOperationException(string.Format("'{0}' is not a method", (object) name));
    }

    public virtual object Invoke(ICallable method, object[] parameters) => method.Invoke((IContext) null, (object) this, parameters);
  }
}
