// Decompiled with JetBrains decompiler
// Type: ModuleNameSpace.Progress_Form
// Assembly: installer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE36CCF7-21FD-4261-9C31-8B7F15D1A5A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\VHO-Trojan.MSIL.Convagent.gen-668779a07751d78171d250ab0016b85e84293cc1703def87a04451a1e2df8b37.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Management.Automation;
using System.Windows.Forms;

namespace ModuleNameSpace
{
  public class Progress_Form : Form
  {
    private ConsoleColor ProgressBarColor = ConsoleColor.DarkCyan;
    private List<Progress_Form.Progress_Data> progressDataList = new List<Progress_Form.Progress_Data>();

    private Color DrawingColor(ConsoleColor color)
    {
      switch (color)
      {
        case ConsoleColor.Black:
          return Color.Black;
        case ConsoleColor.DarkBlue:
          return ColorTranslator.FromHtml("#000080");
        case ConsoleColor.DarkGreen:
          return ColorTranslator.FromHtml("#008000");
        case ConsoleColor.DarkCyan:
          return ColorTranslator.FromHtml("#008080");
        case ConsoleColor.DarkRed:
          return ColorTranslator.FromHtml("#800000");
        case ConsoleColor.DarkMagenta:
          return ColorTranslator.FromHtml("#800080");
        case ConsoleColor.DarkYellow:
          return ColorTranslator.FromHtml("#808000");
        case ConsoleColor.Gray:
          return ColorTranslator.FromHtml("#C0C0C0");
        case ConsoleColor.DarkGray:
          return ColorTranslator.FromHtml("#808080");
        case ConsoleColor.Blue:
          return Color.Blue;
        case ConsoleColor.Green:
          return ColorTranslator.FromHtml("#00FF00");
        case ConsoleColor.Cyan:
          return Color.Cyan;
        case ConsoleColor.Red:
          return Color.Red;
        case ConsoleColor.Magenta:
          return Color.Magenta;
        case ConsoleColor.White:
          return Color.White;
        default:
          return Color.Yellow;
      }
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.AutoScroll = true;
      this.Text = AppDomain.CurrentDomain.FriendlyName;
      this.Height = 147;
      this.Width = 800;
      this.BackColor = Color.White;
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.MinimizeBox = false;
      this.MaximizeBox = false;
      this.ControlBox = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.ResumeLayout();
    }

    private void AddBar(ref Progress_Form.Progress_Data pd, int position)
    {
      pd.lbActivity = new Label();
      pd.lbActivity.Left = 5;
      pd.lbActivity.Top = 104 * position + 10;
      pd.lbActivity.Width = 780;
      pd.lbActivity.Height = 16;
      pd.lbActivity.Font = new Font(pd.lbActivity.Font, FontStyle.Bold);
      pd.lbActivity.Text = "";
      this.Controls.Add((Control) pd.lbActivity);
      pd.lbStatus = new Label();
      pd.lbStatus.Left = 25;
      pd.lbStatus.Top = 104 * position + 26;
      pd.lbStatus.Width = 760;
      pd.lbStatus.Height = 16;
      pd.lbStatus.Text = "";
      this.Controls.Add((Control) pd.lbStatus);
      pd.objProgressBar = new ProgressBar();
      pd.objProgressBar.Value = 0;
      pd.objProgressBar.Style = ProgressBarStyle.Continuous;
      pd.objProgressBar.ForeColor = this.DrawingColor(this.ProgressBarColor);
      if (pd.Depth < 15)
      {
        pd.objProgressBar.Size = new Size(740 - 30 * pd.Depth, 20);
        pd.objProgressBar.Left = 25 + 30 * pd.Depth;
      }
      else
      {
        pd.objProgressBar.Size = new Size(290, 20);
        pd.objProgressBar.Left = 475;
      }
      pd.objProgressBar.Top = 104 * position + 47;
      this.Controls.Add((Control) pd.objProgressBar);
      pd.lbRemainingTime = new Label();
      pd.lbRemainingTime.Left = 5;
      pd.lbRemainingTime.Top = 104 * position + 72;
      pd.lbRemainingTime.Width = 780;
      pd.lbRemainingTime.Height = 16;
      pd.lbRemainingTime.Text = "";
      this.Controls.Add((Control) pd.lbRemainingTime);
      pd.lbOperation = new Label();
      pd.lbOperation.Left = 25;
      pd.lbOperation.Top = 104 * position + 88;
      pd.lbOperation.Width = 760;
      pd.lbOperation.Height = 16;
      pd.lbOperation.Text = "";
      this.Controls.Add((Control) pd.lbOperation);
    }

    public int GetCount() => this.progressDataList.Count;

    public Progress_Form() => this.InitializeComponent();

    public Progress_Form(ConsoleColor BarColor)
    {
      this.ProgressBarColor = BarColor;
      this.InitializeComponent();
    }

    public void Update(ProgressRecord objRecord)
    {
      if (objRecord == null)
        return;
      int index1 = -1;
      for (int index2 = 0; index2 < this.progressDataList.Count; ++index2)
      {
        if (this.progressDataList[index2].ActivityId == objRecord.ActivityId)
        {
          index1 = index2;
          break;
        }
      }
      if (objRecord.RecordType == ProgressRecordType.Completed)
      {
        if (index1 >= 0)
        {
          this.Controls.Remove((Control) this.progressDataList[index1].lbActivity);
          this.Controls.Remove((Control) this.progressDataList[index1].lbStatus);
          this.Controls.Remove((Control) this.progressDataList[index1].objProgressBar);
          this.Controls.Remove((Control) this.progressDataList[index1].lbRemainingTime);
          this.Controls.Remove((Control) this.progressDataList[index1].lbOperation);
          this.progressDataList[index1].lbActivity.Dispose();
          this.progressDataList[index1].lbStatus.Dispose();
          this.progressDataList[index1].objProgressBar.Dispose();
          this.progressDataList[index1].lbRemainingTime.Dispose();
          this.progressDataList[index1].lbOperation.Dispose();
          this.progressDataList.RemoveAt(index1);
        }
        if (this.progressDataList.Count == 0)
        {
          this.Close();
        }
        else
        {
          if (index1 < 0)
            return;
          for (int index3 = index1; index3 < this.progressDataList.Count; ++index3)
          {
            this.progressDataList[index3].lbActivity.Top = 104 * index3 + 10;
            this.progressDataList[index3].lbStatus.Top = 104 * index3 + 26;
            this.progressDataList[index3].objProgressBar.Top = 104 * index3 + 47;
            this.progressDataList[index3].lbRemainingTime.Top = 104 * index3 + 72;
            this.progressDataList[index3].lbOperation.Top = 104 * index3 + 88;
          }
          if (104 * this.progressDataList.Count + 43 <= Screen.FromControl((Control) this).Bounds.Height)
          {
            this.Height = 104 * this.progressDataList.Count + 43;
            this.Location = new Point((Screen.FromControl((Control) this).Bounds.Width - this.Width) / 2, (Screen.FromControl((Control) this).Bounds.Height - this.Height) / 2);
          }
          else
          {
            this.Height = Screen.FromControl((Control) this).Bounds.Height;
            this.Location = new Point((Screen.FromControl((Control) this).Bounds.Width - this.Width) / 2, 0);
          }
        }
      }
      else
      {
        if (index1 < 0)
        {
          Progress_Form.Progress_Data pd = new Progress_Form.Progress_Data();
          pd.ActivityId = objRecord.ActivityId;
          pd.ParentActivityId = objRecord.ParentActivityId;
          pd.Depth = 0;
          int num = -1;
          int index4 = -1;
          if (pd.ParentActivityId >= 0)
          {
            for (int index5 = 0; index5 < this.progressDataList.Count; ++index5)
            {
              if (this.progressDataList[index5].ActivityId == pd.ParentActivityId)
              {
                index4 = index5;
                break;
              }
            }
          }
          if (index4 >= 0)
          {
            pd.Depth = this.progressDataList[index4].Depth + 1;
            for (int index6 = index4 + 1; index6 < this.progressDataList.Count; ++index6)
            {
              if (this.progressDataList[index6].Depth < pd.Depth || this.progressDataList[index6].Depth == pd.Depth && this.progressDataList[index6].ParentActivityId != pd.ParentActivityId)
              {
                num = index6;
                break;
              }
            }
          }
          if (num == -1)
          {
            this.AddBar(ref pd, this.progressDataList.Count);
            index1 = this.progressDataList.Count;
            this.progressDataList.Add(pd);
          }
          else
          {
            this.AddBar(ref pd, num);
            index1 = num;
            this.progressDataList.Insert(num, pd);
            for (int index7 = index1 + 1; index7 < this.progressDataList.Count; ++index7)
            {
              this.progressDataList[index7].lbActivity.Top = 104 * index7 + 10;
              this.progressDataList[index7].lbStatus.Top = 104 * index7 + 26;
              this.progressDataList[index7].objProgressBar.Top = 104 * index7 + 47;
              this.progressDataList[index7].lbRemainingTime.Top = 104 * index7 + 72;
              this.progressDataList[index7].lbOperation.Top = 104 * index7 + 88;
            }
          }
          if (104 * this.progressDataList.Count + 43 <= Screen.FromControl((Control) this).Bounds.Height)
          {
            this.Height = 104 * this.progressDataList.Count + 43;
            this.Location = new Point((Screen.FromControl((Control) this).Bounds.Width - this.Width) / 2, (Screen.FromControl((Control) this).Bounds.Height - this.Height) / 2);
          }
          else
          {
            this.Height = Screen.FromControl((Control) this).Bounds.Height;
            this.Location = new Point((Screen.FromControl((Control) this).Bounds.Width - this.Width) / 2, 0);
          }
        }
        if (!string.IsNullOrEmpty(objRecord.Activity))
          this.progressDataList[index1].lbActivity.Text = objRecord.Activity;
        else
          this.progressDataList[index1].lbActivity.Text = "";
        if (!string.IsNullOrEmpty(objRecord.StatusDescription))
          this.progressDataList[index1].lbStatus.Text = objRecord.StatusDescription;
        else
          this.progressDataList[index1].lbStatus.Text = "";
        if (objRecord.PercentComplete >= 0 && objRecord.PercentComplete <= 100)
        {
          this.progressDataList[index1].objProgressBar.Value = objRecord.PercentComplete;
          this.progressDataList[index1].objProgressBar.Visible = true;
        }
        else if (objRecord.PercentComplete > 100)
        {
          this.progressDataList[index1].objProgressBar.Value = 0;
          this.progressDataList[index1].objProgressBar.Visible = true;
        }
        else
          this.progressDataList[index1].objProgressBar.Visible = false;
        if (objRecord.SecondsRemaining >= 0)
        {
          TimeSpan timeSpan = new TimeSpan(0, 0, objRecord.SecondsRemaining);
          this.progressDataList[index1].lbRemainingTime.Text = "Remaining time: " + string.Format("{0:00}:{1:00}:{2:00}", (object) (int) timeSpan.TotalHours, (object) timeSpan.Minutes, (object) timeSpan.Seconds);
        }
        else
          this.progressDataList[index1].lbRemainingTime.Text = "";
        if (!string.IsNullOrEmpty(objRecord.CurrentOperation))
          this.progressDataList[index1].lbOperation.Text = objRecord.CurrentOperation;
        else
          this.progressDataList[index1].lbOperation.Text = "";
        Application.DoEvents();
      }
    }

    private struct Progress_Data
    {
      internal Label lbActivity;
      internal Label lbStatus;
      internal ProgressBar objProgressBar;
      internal Label lbRemainingTime;
      internal Label lbOperation;
      internal int ActivityId;
      internal int ParentActivityId;
      internal int Depth;
    }
  }
}
