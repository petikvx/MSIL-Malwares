// Decompiled with JetBrains decompiler
// Type: Data.SqlDataAccess
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Xml;

namespace Data
{
  public sealed class SqlDataAccess
  {
    private static SqlConnection _connection;

    public static SqlTransaction OpenTransaction(string connectionString)
    {
      SqlDataAccess._connection = new SqlConnection(connectionString);
      SqlDataAccess._connection.Open();
      return SqlDataAccess._connection.BeginTransaction();
    }

    public static void Commit(SqlTransaction transaction)
    {
      transaction.Commit();
      SqlDataAccess._connection.Close();
      SqlDataAccess._connection.Dispose();
      SqlDataAccess._connection = (SqlConnection) null;
    }

    public static void Rollback(SqlTransaction transaction)
    {
      transaction.Rollback();
      SqlDataAccess._connection.Close();
      SqlDataAccess._connection.Dispose();
      SqlDataAccess._connection = (SqlConnection) null;
    }

    public static int ExecuteNonQuery(string connectionString, string text) => SqlDataAccess.ExecuteNonQuery(connectionString, text, (IDictionary<string, object>) null);

    public static int ExecuteNonQuery(
      string connectionString,
      string text,
      IDictionary<string, object> args)
    {
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
        using (SqlCommand sqlCommand = new SqlCommand(text, connection))
        {
          sqlCommand.CommandType = CommandType.StoredProcedure;
          if (args != null && args.Count > 0)
          {
            foreach (string key in (IEnumerable<string>) args.Keys)
              sqlCommand.Parameters.AddWithValue(key, args[key] == null ? (object) DBNull.Value : args[key]);
          }
          connection.Open();
          try
          {
            return sqlCommand.ExecuteNonQuery();
          }
          finally
          {
            try
            {
              connection.Close();
              connection.Dispose();
              sqlCommand.Dispose();
            }
            catch
            {
            }
          }
        }
      }
    }

    public static int ExecuteNonQuery(
      string text,
      IDictionary<string, object> args,
      SqlTransaction transaction)
    {
      using (SqlCommand sqlCommand = new SqlCommand(text, SqlDataAccess._connection, transaction))
      {
        sqlCommand.CommandType = CommandType.StoredProcedure;
        if (args != null && args.Count > 0)
        {
          foreach (string key in (IEnumerable<string>) args.Keys)
            sqlCommand.Parameters.AddWithValue(key, args[key] == null ? (object) DBNull.Value : args[key]);
        }
        try
        {
          return sqlCommand.ExecuteNonQuery();
        }
        finally
        {
          try
          {
            sqlCommand.Dispose();
          }
          catch
          {
          }
        }
      }
    }

    public static T ExecuteScalarQuery<T>(string connectionString, string text) => (T) Convert.ChangeType(SqlDataAccess.ExecuteScalarQuery(connectionString, text, (IDictionary<string, object>) null, (string) null), typeof (T));

    public static T ExecuteScalarQuery<T>(
      string connectionString,
      string text,
      IDictionary<string, object> args)
    {
      return (T) Convert.ChangeType(SqlDataAccess.ExecuteScalarQuery(connectionString, text, args, (string) null), typeof (T));
    }

    public static T ExecuteScalarQuery<T>(
      string connectionString,
      string text,
      IDictionary<string, object> args,
      string field)
    {
      return (T) Convert.ChangeType(SqlDataAccess.ExecuteScalarQuery(connectionString, text, args, field), typeof (T));
    }

    private static object ExecuteScalarQuery(
      string connectionString,
      string text,
      IDictionary<string, object> args,
      string field)
    {
      if (field != null)
        return SqlDataAccess.executeDataRowAsScalar(connectionString, text, args, field);
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
        using (SqlCommand sqlCommand = new SqlCommand(text, connection))
        {
          sqlCommand.CommandType = CommandType.StoredProcedure;
          if (args != null && args.Count > 0)
          {
            foreach (string key in (IEnumerable<string>) args.Keys)
              sqlCommand.Parameters.AddWithValue(key, args[key] == null ? (object) DBNull.Value : args[key]);
          }
          connection.Open();
          try
          {
            return sqlCommand.ExecuteScalar();
          }
          finally
          {
            try
            {
              connection.Close();
              connection.Dispose();
              sqlCommand.Dispose();
            }
            catch
            {
            }
          }
        }
      }
    }

    public static T ExecuteScalarQuery<T>(
      string text,
      IDictionary<string, object> args,
      SqlTransaction transaction)
    {
      object obj = (object) null;
      using (SqlCommand sqlCommand = new SqlCommand(text, SqlDataAccess._connection, transaction))
      {
        sqlCommand.CommandType = CommandType.StoredProcedure;
        if (args != null && args.Count > 0)
        {
          foreach (string key in (IEnumerable<string>) args.Keys)
            sqlCommand.Parameters.AddWithValue(key, args[key] == null ? (object) DBNull.Value : args[key]);
        }
        try
        {
          obj = sqlCommand.ExecuteScalar();
        }
        finally
        {
          try
          {
            sqlCommand.Dispose();
          }
          catch
          {
          }
        }
      }
      return (T) Convert.ChangeType(obj, typeof (T));
    }

    public static DataTable ExecuteDataTableQuery(string connectionString, string text) => SqlDataAccess.ExecuteDataTableQuery(connectionString, text, (IDictionary<string, object>) null);

    public static DataTable ExecuteDataTableQuery(
      string connectionString,
      string text,
      IDictionary<string, object> args)
    {
      DataTable dataTable = (DataTable) null;
      int num = 0;
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
        using (SqlCommand sqlCommand = new SqlCommand(text, connection))
        {
          sqlCommand.CommandType = CommandType.StoredProcedure;
          if (args != null && args.Count > 0)
          {
            foreach (string key in (IEnumerable<string>) args.Keys)
              sqlCommand.Parameters.AddWithValue(key, args[key] == null ? (object) DBNull.Value : args[key]);
          }
          connection.Open();
          try
          {
            SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
            if (sqlDataReader.HasRows)
            {
              dataTable = new DataTable();
              while (sqlDataReader.Read())
              {
                DataRow row = dataTable.NewRow();
                for (int index = 0; index < sqlDataReader.FieldCount; ++index)
                {
                  if (num == 0)
                    dataTable.Columns.Add(sqlDataReader.GetName(index));
                  row[index] = sqlDataReader[index];
                }
                dataTable.Rows.Add(row);
                ++num;
              }
            }
            sqlDataReader.Close();
          }
          finally
          {
            try
            {
              connection.Close();
              connection.Dispose();
              sqlCommand.Dispose();
            }
            catch
            {
            }
          }
        }
      }
      return dataTable;
    }

    public static DataRow ExecuteDataRowQuery(string connectionString, string text) => SqlDataAccess.ExecuteDataRowQuery(connectionString, text, (IDictionary<string, object>) null);

    public static DataRow ExecuteDataRowQuery(
      string connectionString,
      string text,
      IDictionary<string, object> args)
    {
      DataRow dataRow = (DataRow) null;
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
        using (SqlCommand sqlCommand = new SqlCommand(text, connection))
        {
          sqlCommand.CommandType = CommandType.StoredProcedure;
          if (args != null && args.Count > 0)
          {
            foreach (string key in (IEnumerable<string>) args.Keys)
              sqlCommand.Parameters.AddWithValue(key, args[key] == null ? (object) DBNull.Value : args[key]);
          }
          connection.Open();
          try
          {
            SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
            if (sqlDataReader.HasRows)
            {
              sqlDataReader.Read();
              dataRow = new DataTable().NewRow();
              for (int index = 0; index < sqlDataReader.FieldCount; ++index)
              {
                dataRow.Table.Columns.Add(sqlDataReader.GetName(index));
                dataRow[index] = sqlDataReader[index];
              }
            }
            sqlDataReader.Close();
          }
          finally
          {
            try
            {
              connection.Close();
              connection.Dispose();
              sqlCommand.Dispose();
            }
            catch
            {
            }
          }
        }
      }
      return dataRow;
    }

    public static DataRow ExecuteDataRowText(
      string connectionString,
      string text,
      IDictionary<string, object> args)
    {
      DataRow dataRow = (DataRow) null;
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
        using (SqlCommand sqlCommand = new SqlCommand(text, connection))
        {
          sqlCommand.CommandType = CommandType.Text;
          if (args != null && args.Count > 0)
          {
            foreach (string key in (IEnumerable<string>) args.Keys)
              sqlCommand.Parameters.AddWithValue(key, args[key]);
          }
          connection.Open();
          try
          {
            SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
            if (sqlDataReader.HasRows)
            {
              sqlDataReader.Read();
              dataRow = new DataTable().NewRow();
              for (int index = 0; index < sqlDataReader.FieldCount; ++index)
              {
                dataRow.Table.Columns.Add(sqlDataReader.GetName(index));
                dataRow[index] = sqlDataReader[index];
              }
            }
            sqlDataReader.Close();
          }
          finally
          {
            try
            {
              connection.Close();
              connection.Dispose();
              sqlCommand.Dispose();
            }
            catch
            {
            }
          }
        }
      }
      return dataRow;
    }

    public static XmlDocument ExecuteXmlQuery(string connectionString, string text) => SqlDataAccess.ExecuteXmlQuery(connectionString, text, (IDictionary<string, object>) null);

    public static XmlDocument ExecuteXmlQuery(
      string connectionString,
      string text,
      IDictionary<string, object> args)
    {
      XmlDocument xmlDocument = (XmlDocument) null;
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
        using (SqlCommand sqlCommand = new SqlCommand(text, connection))
        {
          sqlCommand.CommandType = CommandType.StoredProcedure;
          if (args != null && args.Count > 0)
          {
            foreach (string key in (IEnumerable<string>) args.Keys)
              sqlCommand.Parameters.AddWithValue(key, args[key] == null ? (object) DBNull.Value : args[key]);
          }
          connection.Open();
          try
          {
            XmlReader reader = sqlCommand.ExecuteXmlReader();
            xmlDocument = new XmlDocument();
            xmlDocument.Load(reader);
            reader.Close();
          }
          catch (Exception ex)
          {
            if (ex.InnerException.GetType().Equals(typeof (SqlNullValueException)))
              return (XmlDocument) null;
          }
          finally
          {
            try
            {
              connection.Close();
              connection.Dispose();
              sqlCommand.Dispose();
            }
            catch
            {
            }
          }
        }
      }
      return xmlDocument;
    }

    private static object executeDataRowAsScalar(
      string connectionString,
      string text,
      IDictionary<string, object> args,
      string field)
    {
      DataRow dataRow = SqlDataAccess.ExecuteDataRowQuery(connectionString, text, args);
      if (dataRow == null)
        return (object) null;
      return !dataRow.Table.Columns.Contains(field) ? (object) null : dataRow[field];
    }

    private SqlDataAccess()
    {
    }
  }
}
