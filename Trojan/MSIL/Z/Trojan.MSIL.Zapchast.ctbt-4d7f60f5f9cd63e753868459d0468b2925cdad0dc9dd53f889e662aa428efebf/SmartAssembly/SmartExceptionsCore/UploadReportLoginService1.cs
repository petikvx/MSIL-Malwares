// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UploadReportLoginService1
// Assembly: Crypter, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B731B599-442F-4A0A-B652-36FDF3199CF1
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.MSIL.Zapchast.ctbt-4d7f60f5f9cd63e753868459d0468b2925cdad0dc9dd53f889e662aa428efebf.exe

using \u0007;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Net;
using System.Web.Services;
using System.Web.Services.Protocols;

namespace SmartAssembly.SmartExceptionsCore
{
  [WebServiceBinding(Name = "LoginServiceSoap", Namespace = "http://www.smartassembly.com/webservices/UploadReportLogin/")]
  internal sealed class UploadReportLoginService1 : SoapHttpClientProtocol
  {
    [NonSerialized]
    internal static GetString \u008D;

    public UploadReportLoginService1()
    {
      try
      {
        string str = \u0005.\u0007.\u0001;
        this.Url = \u0005.\u0007.\u0001 + UploadReportLoginService1.\u008D(3261);
        this.Timeout = 30000;
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex, (object) this);
        throw;
      }
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/UploadReportLogin/GetServerURL")]
    public string GetServerURL(string licenseID)
    {
      object[] objArray1;
      string serverUrl;
      try
      {
        \u0094\u0002 obj = \u0094\u0002.\u000E\u0004;
        string str = UploadReportLoginService1.\u008D(3294);
        objArray1 = new object[1]{ (object) licenseID };
        object[] objArray2 = objArray1;
        serverUrl = (string) obj((object) this, str, objArray2)[0];
      }
      catch (Exception ex)
      {
        object[] objArray3 = objArray1;
        string str = licenseID;
        \u0003.\u0001(ex, (object) objArray3, (object) this, (object) str);
        throw;
      }
      return serverUrl;
    }

    protected override WebRequest GetWebRequest(Uri uri)
    {
      WebRequest webRequest1;
      HttpWebRequest httpWebRequest1;
      try
      {
        webRequest1 = \u0095\u0002.\u000F\u0004((object) this, uri);
label_1:
        if (true)
        {
          if (true)
            httpWebRequest1 = webRequest1 as HttpWebRequest;
          else
            goto label_6;
        }
        else
          goto label_4;
label_3:
        if (true)
        {
          if (httpWebRequest1 == null)
            goto label_6;
        }
        else
          goto label_1;
label_4:
        if (true)
          \u0016.\u007E\u008B((object) \u0096\u0002.\u007E\u0010\u0004((object) httpWebRequest1), false);
        else
          goto label_3;
label_6:
        return webRequest1;
      }
      catch (Exception ex)
      {
        WebRequest webRequest2 = webRequest1;
        HttpWebRequest httpWebRequest2 = httpWebRequest1;
        Uri uri1 = uri;
        \u0003.\u0001(ex, (object) webRequest2, (object) httpWebRequest2, (object) this, (object) uri1);
        throw;
      }
    }

    static UploadReportLoginService1() => Strings.CreateGetStringDelegate(typeof (UploadReportLoginService1));
  }
}
