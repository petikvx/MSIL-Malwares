// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ClaimTyp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CD146E8-0143-4099-A2FD-F452B55D5FF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-200a5cb8bf6489144c66e3b85eaeec5327dc66321001f4c0fda42840d0f230ec.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -734577129;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -949115374)) % 4U)
        {
          case 0:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -965818811 ^ 609670621;
            continue;
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -1581232617 ^ 1358327289;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 1544769609;
      int aIndex;
      float[] numArray;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 129723478)) % 7U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 1817774133;
            continue;
          case 1:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 1330549571 : (num3 = 793187945);
            continue;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * -1644816993 ^ 1252689891;
            continue;
          case 4:
            num1 = (int) num2 * -775618140 ^ 1656354340;
            continue;
          case 5:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * -671838525 ^ 357823912;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
      List<Card> cardList = new List<Card>();
label_1:
      int num1 = 2113718903;
      int aIndex1;
      JSONNode jsonNode;
      bool flag1;
      bool flag2;
      int aIndex2;
      int num2;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 2038038647)) % 27U)
        {
          case 0:
            num1 = (int) num3 * -1923412532 ^ 1833184622;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * 1457921388 ^ 1186381450;
            continue;
          case 2:
            ++aIndex2;
            num1 = (int) num3 * -844079579 ^ 621042528;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num3 * -1808645527 ^ 352346322;
            continue;
          case 5:
            num1 = (int) num3 * 1603260745 ^ 603858781;
            continue;
          case 6:
            num1 = 106213006;
            continue;
          case 7:
            num1 = (int) num3 * -657056130 ^ 818402949;
            continue;
          case 8:
            num1 = (int) num3 * -873168127 ^ 908230072;
            continue;
          case 9:
            num1 = 833865689;
            continue;
          case 10:
            num1 = (int) num3 * 1354016057 ^ -1882809620;
            continue;
          case 11:
            num1 = 1188113710;
            continue;
          case 12:
            num1 = (int) num3 * -1105695487 ^ 1563900782;
            continue;
          case 13:
            aIndex1 = 0;
            num1 = (int) num3 * -1462570865 ^ -1557750637;
            continue;
          case 14:
            num1 = (int) num3 * -965917093 ^ 1268071438;
            continue;
          case 16:
            int num4 = !flag1 ? 60782769 : (num4 = 1268115292);
            num1 = num4 ^ (int) num3 * 1892639643;
            continue;
          case 17:
            flag2 = aIndex2 < maxImpact;
            num1 = (int) num3 * -1863281091 ^ 43334078;
            continue;
          case 18:
            int num5;
            num1 = num5 = aIndex1 < count ? 191697452 : (num5 = 375074265);
            continue;
          case 19:
            ++num2;
            num1 = (int) num3 * -1009081309 ^ -120437275;
            continue;
          case 20:
            aIndex2 = 0;
            num1 = (int) num3 * -834330813 ^ 1556515529;
            continue;
          case 21:
            array = cardList.ToArray();
            num1 = (int) num3 * 1566108698 ^ -1748576004;
            continue;
          case 22:
            flag1 = aIndex2 < maxImpact * 2;
            num1 = 1575451679;
            continue;
          case 23:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 527341695;
            continue;
          case 24:
            int num6;
            num1 = num6 = num2 < jsonNode[aIndex2].AsInt ? 1161122043 : (num6 = 1410111440);
            continue;
          case 25:
            ++aIndex1;
            num1 = (int) num3 * 122424901 ^ -1411431736;
            continue;
          case 26:
            jsonNode = json[aIndex1];
            num1 = (int) num3 * 946579991 ^ 839303949;
            continue;
          default:
            goto label_28;
        }
      }
label_28:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u206F‏⁭‬‎⁬‍‎⁯‌⁮‏⁭‭‫⁬‍⁬⁫‎‍⁮‪‪⁬⁪⁭‭‎‫‫​⁯⁫⁪​‪‎‌⁫‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = -975471747;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -766218540)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -1696019005 ^ 1861797659;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = 1979553021;
      Card card1;
      int num2;
      string str2;
      Card[] cards;
      int index;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 728446576)) % 15U)
        {
          case 0:
            num1 = (int) num3 * 1190820393 ^ 60943169;
            continue;
          case 1:
            int num4 = num2 == card1.Type ? -963168112 : (num4 = -1793643481);
            num1 = num4 ^ (int) num3 * 2046705172;
            continue;
          case 2:
            str2 = Rules.\u202E⁯‫‌⁮⁭⁫​‎‫‏‍⁫⁪‬‭‍​‬‫‌‍‭⁯‭‮‮⁮‎⁪‬⁬⁬‪‮‪⁭‮‮‮(str1, "\n]");
            num1 = (int) num3 * 1255606250 ^ -1786821650;
            continue;
          case 3:
            card1 = cards[index];
            num1 = 832257790;
            continue;
          case 4:
            str1 = Rules.\u202E⁯‫‌⁮⁭⁫​‎‫‏‍⁫⁪‬‭‍​‬‫‌‍‭⁯‭‮‮⁮‎⁪‬⁬⁬‪‮‪⁭‮‮‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * 1414276906 ^ -1311885386;
            continue;
          case 6:
            num1 = (int) num3 * 719464909 ^ -1244936838;
            continue;
          case 7:
            num2 = 0;
            num1 = (int) num3 * -1926557827 ^ -2013419559;
            continue;
          case 8:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200B‮⁯‌⁯⁯‬‪‍⁪‏⁫‪‪‏‍⁮‫‭‌‍‌‬‪‭‮⁯⁬⁫‏‮‭‍‍‎‍‎⁫‏‎‮((object) card2) : (string) null;
            str1 = Rules.\u202D⁯‎‎⁫‮‬‍‏⁫‬⁬⁫‎⁫‌⁮‏‮‌⁪​‫​‭⁮​⁫‎‮⁬⁫​‌‏⁫‎‮‏⁬‮(str3, str4, " ");
            num1 = 1399065264;
            continue;
          case 9:
            num1 = (int) num3 * -1391920287 ^ 632512341;
            continue;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num3 * 1448423229 ^ 432595491;
            continue;
          case 12:
            ++index;
            num1 = (int) num3 * 1284574797 ^ 578086081;
            continue;
          case 13:
            int num5;
            num1 = num5 = index >= cards.Length ? 243307582 : (num5 = 1098733357);
            continue;
          case 14:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -213215685 ^ 1836695520;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -942279299;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -101771979)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -1801096983 ^ 123039900;
            continue;
          case 1:
            index = 1;
            num1 = (int) num2 * -1215948448 ^ 1327015497;
            continue;
          case 2:
            int num3 = !flag ? 1902889436 : (num3 = 1004054323);
            num1 = num3 ^ (int) num2 * 162724274;
            continue;
          case 3:
            str1 = Rules.\u202E⁯‫‌⁮⁭⁫​‎‫‏‍⁫⁪‬‭‍​‬‫‌‍‭⁯‭‮‮⁮‎⁪‬⁬⁬‪‮‪⁭‮‮‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202A‮⁪‏⁫⁪‏‪⁬‭‭⁮​⁭‏‮​‍‬⁯⁯‫⁬‮‫‏‍⁮‪‫‎‪‮‮‫‌‪⁫​‎‮()));
            num1 = (int) num2 * -781938876 ^ 800225244;
            continue;
          case 4:
            str1 = Rules.\u202D⁯‎‎⁫‮‬‍‏⁫‬⁬⁫‎⁫‌⁮‏‮‌⁪​‫​‭⁮​⁫‎‮⁬⁫​‌‏⁫‎‮‏⁬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202A‮⁪‏⁫⁪‏‪⁬‭‭⁮​⁭‏‮​‍‬⁯⁯‫⁬‮‫‏‍⁮‪‫‎‪‮‮‫‌‪⁫​‎‮()));
            num1 = -1975847837;
            continue;
          case 6:
            str2 = Rules.\u202E⁯‫‌⁮⁭⁫​‎‫‏‍⁫⁪‬‭‍​‬‫‌‍‭⁯‭‮‮⁮‎⁪‬⁬⁬‪‮‪⁭‮‮‮(str1, " ]");
            num1 = (int) num2 * 1227205887 ^ -1756237702;
            continue;
          case 7:
            flag = index < this.RiskChances.Length;
            num1 = -1943514498;
            continue;
          case 8:
            ++index;
            num1 = (int) num2 * 1692764872 ^ 213151899;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * -1453076047 ^ -4380169;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    static string \u206F‏⁭‬‎⁬‍‎⁯‌⁮‏⁭‭‫⁬‍⁬⁫‎‍⁮‪‪⁬⁪⁭‭‎‫‫​⁯⁫⁪​‪‎‌⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202E⁯‫‌⁮⁭⁫​‎‫‏‍⁫⁪‬‭‍​‬‫‌‍‭⁯‭‮‮⁮‎⁪‬⁬⁬‪‮‪⁭‮‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200B‮⁯‌⁯⁯‬‪‍⁪‏⁫‪‪‏‍⁮‫‭‌‍‌‬‪‭‮⁯⁬⁫‏‮‭‍‍‎‍‎⁫‏‎‮([In] object obj0) => obj0.ToString();

    static string \u202D⁯‎‎⁫‮‬‍‏⁫‬⁬⁫‎⁫‌⁮‏‮‌⁪​‫​‭⁮​⁫‎‮⁬⁫​‌‏⁫‎‮‏⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202A‮⁪‏⁫⁪‏‪⁬‭‭⁮​⁭‏‮​‍‬⁯⁯‫⁬‮‫‏‍⁮‪‫‎‪‮‮‫‌‪⁫​‎‮() => CultureInfo.InvariantCulture;
  }
}
