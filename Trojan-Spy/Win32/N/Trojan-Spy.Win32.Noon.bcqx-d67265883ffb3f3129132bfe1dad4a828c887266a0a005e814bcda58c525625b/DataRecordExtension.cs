// Decompiled with JetBrains decompiler
// Type: Alero.DataRecordExtension
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Data;

namespace Alero
{
  public static class DataRecordExtension
  {
    public static object GetObject(this IDataRecord record, string fieldName)
    {
      object obj = record[fieldName];
      return obj == DBNull.Value ? (object) null : obj;
    }

    public static string GetString(this IDataRecord record, string fieldName) => (string) record.GetObject(fieldName);

    public static T GetEnum<T>(this IDataRecord record, string fieldName) where T : struct
    {
      string str = record.GetString(fieldName);
      T result;
      if (Enum.TryParse<T>(str, out result))
        return result;
      throw new InvalidOperationException(string.Format("Cannot get enum parameter of type {0}. String {1} could not be parsed", (object) typeof (T).Name, (object) str));
    }

    public static long GetLong(this IDataRecord record, string fieldName)
    {
      object obj = record[fieldName];
      return obj != DBNull.Value ? (long) obj : throw new InvalidOperationException(string.Format("Cannot get long parameter for field, {0}. Field returned NULL which was not allowed", (object) fieldName));
    }

    public static T Get<T>(this IDataRecord record, string fieldName)
    {
      object obj = record[fieldName];
      return obj != DBNull.Value ? (T) obj : throw new InvalidOperationException(string.Format("Cannot get parameter for field, {0}. Field returned NULL which was not allowed", (object) fieldName));
    }

    public static T? GetNullable<T>(this IDataRecord record, string fieldName) where T : struct
    {
      object obj = record[fieldName];
      return obj == DBNull.Value ? new T?() : new T?((T) obj);
    }
  }
}
