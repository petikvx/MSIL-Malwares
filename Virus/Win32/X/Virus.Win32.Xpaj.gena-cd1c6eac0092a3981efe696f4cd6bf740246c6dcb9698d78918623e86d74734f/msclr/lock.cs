// Decompiled with JetBrains decompiler
// Type: msclr.lock
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace msclr
{
  internal class @lock : IDisposable
  {
    private object m_object;
    private bool m_locked;

    public @lock(object _object)
    {
      this.m_object = _object;
      this.m_locked = false;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.acquire(-1);
    }

    private void \u007Elock() => this.release();

    [return: MarshalAs(UnmanagedType.U1)]
    public bool is_locked() => this.m_locked;

    [SpecialName]
    public string op_Implicit() => this.m_locked ? _detail_class._safe_true : _detail_class._safe_false;

    public void acquire(TimeSpan _timeout)
    {
      if (this.m_locked)
        return;
      if (!Monitor.TryEnter(this.m_object, _timeout))
        throw new ApplicationException("lock timeout");
      this.m_locked = true;
    }

    public void acquire()
    {
      if (this.m_locked)
        return;
      if (!Monitor.TryEnter(this.m_object, -1))
        throw new ApplicationException("lock timeout");
      this.m_locked = true;
    }

    public void acquire(int _timeout)
    {
      if (this.m_locked)
        return;
      if (!Monitor.TryEnter(this.m_object, _timeout))
        throw new ApplicationException("lock timeout");
      this.m_locked = true;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    public bool try_acquire(TimeSpan _timeout)
    {
      if (!this.m_locked)
      {
        if (!Monitor.TryEnter(this.m_object, _timeout))
          return false;
        this.m_locked = true;
      }
      return true;
    }

    [return: MarshalAs(UnmanagedType.U1)]
    public bool try_acquire(int _timeout)
    {
      if (!this.m_locked)
      {
        if (!Monitor.TryEnter(this.m_object, _timeout))
          return false;
        this.m_locked = true;
      }
      return true;
    }

    public void release()
    {
      if (!this.m_locked)
        return;
      this.m_locked = false;
      Monitor.Exit(this.m_object);
    }

    protected virtual void Dispose([MarshalAs(UnmanagedType.U1)] bool _param1)
    {
      if (_param1)
      {
        this.release();
      }
      else
      {
        // ISSUE: explicit finalizer call
        this.Finalize();
      }
    }

    public virtual void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }
  }
}
