// Decompiled with JetBrains decompiler
// Type: .
// Assembly: act, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 15E8DE45-08FE-4015-993F-8312F3DED562
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.MSIL.Agent.gnd-09af37149f55320f3df79af73a0cb6f471824599f66b6ea8aa9fe7369b50134c.exe

using System;
using System.Collections;
using System.Diagnostics;
using System.Text;

namespace \u0004
{
  internal sealed class \u0002
  {
    internal const string \u0001 = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0002 = 4;
    internal static Hashtable \u0003 = new Hashtable();

    internal static bool IsWebApplication
    {
      get
      {
        bool flag;
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (true)
          {
            int num = lower == "w3wp.exe" ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                if (true)
                {
                  flag = true;
                  goto label_12;
                }
                else
                  goto label_12;
              }
              else
                num = lower == "aspnet_wp.exe" ? 1 : 0;
            }
            if (num != 0)
            {
              flag = true;
              goto label_12;
            }
          }
        }
        catch
        {
        }
label_10:
        return false;
label_12:
        if (true)
        {
          int num = flag ? 1 : 0;
          return false ? num != 0 : num != 0;
        }
        goto label_10;
      }
    }

    internal struct \u0001
    {
      public string \u0001;
      public Version \u0002;
      public string \u0003;
      public string \u0004;

      public string \u0001(bool _param1)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.\u0001);
        if (true)
          goto label_8;
label_5:
        if (true)
        {
          stringBuilder.Append(this.\u0003.Length == 0 ? "neutral" : this.\u0003);
          stringBuilder.Append(", PublicKeyToken=");
          stringBuilder.Append(this.\u0004.Length == 0 ? "null" : this.\u0004);
        }
        return stringBuilder.ToString();
label_8:
        int num;
        for (int index = _param1 ? 1 : 0; index != 0; index = num)
        {
          num = this.\u0002 != (Version) null ? 1 : 0;
          if (true)
          {
            if (num != 0)
            {
              stringBuilder.Append(", Version=");
              stringBuilder.Append((object) this.\u0002);
              break;
            }
            break;
          }
        }
        stringBuilder.Append(", Culture=");
        goto label_5;
      }

      public \u0001(string assemblyFullName)
      {
        this.\u0002 = (Version) null;
        this.\u0003 = string.Empty;
        this.\u0004 = string.Empty;
        this.\u0001 = string.Empty;
        string str1 = assemblyFullName;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.StartsWith("Version="))
            this.\u0002 = new Version(str3.Substring(8));
          else if (str3.StartsWith("Culture="))
          {
            this.\u0003 = str3.Substring(8);
            if (this.\u0003 == "neutral")
              this.\u0003 = string.Empty;
          }
          else if (str3.StartsWith("PublicKeyToken="))
          {
            this.\u0004 = str3.Substring(15);
            if (this.\u0004 == "null")
              this.\u0004 = string.Empty;
          }
          else
            this.\u0001 = str3;
        }
      }
    }
  }
}
