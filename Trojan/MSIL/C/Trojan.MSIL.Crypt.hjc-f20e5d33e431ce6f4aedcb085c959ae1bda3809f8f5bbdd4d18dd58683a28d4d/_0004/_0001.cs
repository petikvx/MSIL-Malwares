// Decompiled with JetBrains decompiler
// Type: .
// Assembly: syncui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cab8849a7bf7875b
// MVID: B8136FDA-4EB0-4CA7-9502-281BC34A634B
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hjc-f20e5d33e431ce6f4aedcb085c959ae1bda3809f8f5bbdd4d18dd58683a28d4d.exe

using \u0001;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0004
{
  internal class \u0001
  {
    private static Assembly \u0001;
    private static string[] \u0001;

    internal static void \u0001()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0004.\u0001.\u0001);
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex)
      {
        \u0012.\u0001(ex);
        throw;
      }
    }

    private static Assembly \u0001([In] object obj0, [In] ResolveEventArgs obj1)
    {
      string[] strArray1;
      string name;
      Assembly assembly;
      int index;
      try
      {
        if ((object) \u0004.\u0001.\u0001 != null)
          goto label_17;
label_1:
        Monitor.Enter((object) (strArray1 = \u0004.\u0001.\u0001));
        try
        {
          \u0004.\u0001.\u0001 = Assembly.Load("{1e14e8b7-6a42-4cba-a6b3-7ed5e25598fb}, PublicKeyToken=3e56350693f7355e");
          if ((object) \u0004.\u0001.\u0001 != null)
            \u0004.\u0001.\u0001 = \u0004.\u0001.\u0001.GetManifestResourceNames();
        }
        finally
        {
          Monitor.Exit((object) strArray1);
        }
label_17:
        name = obj1.Name;
        index = 0;
        while (true)
        {
          do
          {
            if (index < \u0004.\u0001.\u0001.Length)
            {
              int num = \u0004.\u0001.\u0001[index] == name ? 1 : 0;
              if (true)
              {
                if (num != 0)
                {
                  if (true)
                    num = \u0004.\u0001.\u0001() ? 1 : 0;
                  else
                    goto label_1;
                }
                else
                  goto label_13;
              }
              if (num != 0)
                goto label_12;
            }
            else
              goto label_15;
label_10:
            continue;
label_15:
            if (false)
              goto label_10;
            else
              goto label_16;
          }
          while (false);
          break;
label_13:
          ++index;
        }
        assembly = (Assembly) null;
        if (false)
          goto label_1;
        else
          goto label_19;
label_12:
        assembly = \u0004.\u0001.\u0001;
        goto label_19;
label_16:
        assembly = (Assembly) null;
      }
      catch (Exception ex)
      {
        string str = name;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) index;
        string[] strArray2 = strArray1;
        object obj = obj0;
        ResolveEventArgs resolveEventArgs = obj1;
        \u0012.\u0001(ex, (object) str, (object) local, (object) strArray2, obj, (object) resolveEventArgs);
        throw;
      }
label_19:
      return assembly;
    }

    private static unsafe bool \u0001()
    {
      int num1 = 6;
      int num2;
      while (true)
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(num1);
        StackFrame[] frames;
        StackFrame stackFrame1;
        try
        {
          try
          {
            frames = new StackTrace().GetFrames();
            *(int*) voidPtr = 2;
            while (true)
            {
              int num3 = *(int*) voidPtr;
              int num4 = frames.Length;
              if (true)
                num4 = num4;
              if (num3 < num4)
              {
                do
                {
                  stackFrame1 = frames[*(int*) voidPtr];
                  if ((object) stackFrame1.GetMethod().Module.Assembly != (object) Assembly.GetExecutingAssembly())
                    goto label_6;
                }
                while (false);
                break;
label_6:
                *(int*) voidPtr = *(int*) voidPtr + 1;
              }
              else
                goto label_10;
            }
            *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 1;
            goto label_15;
label_10:
            *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 0;
          }
          catch
          {
            if (true)
              *(sbyte*) ((IntPtr) voidPtr + 4) = (sbyte) 1;
          }
label_15:
          *(sbyte*) ((IntPtr) voidPtr + 5) = *(sbyte*) ((IntPtr) voidPtr + 4);
        }
        catch (Exception ex)
        {
          StackFrame[] stackFrameArray = frames;
          // ISSUE: variable of a boxed type
          __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
          StackFrame stackFrame2 = stackFrame1;
          // ISSUE: variable of a boxed type
          __Boxed<bool> local2 = (ValueType) (bool) *(sbyte*) ((IntPtr) voidPtr + 4);
          \u0012.\u0001(ex, (object) stackFrameArray, (object) local1, (object) stackFrame2, (object) local2);
          throw;
        }
        num2 = (int) *(sbyte*) ((IntPtr) voidPtr + 5);
        if (false)
          num1 = num2;
        else
          break;
      }
      return num2 != 0;
    }

    static \u0001()
    {
      try
      {
        \u0004.\u0001.\u0001 = (Assembly) null;
        \u0004.\u0001.\u0001 = new string[0];
      }
      catch (Exception ex)
      {
        \u0012.\u0001(ex);
        throw;
      }
    }
  }
}
