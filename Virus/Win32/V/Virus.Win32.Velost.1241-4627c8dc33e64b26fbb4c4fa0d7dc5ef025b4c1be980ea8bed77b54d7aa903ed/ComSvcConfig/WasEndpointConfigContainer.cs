// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.WasEndpointConfigContainer
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Runtime.InteropServices;
using System.ServiceModel.Configuration;
using System.ServiceModel.Description;
using System.Web.Configuration;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class WasEndpointConfigContainer : EndpointConfigContainer
  {
    private const string defaultBindingType = "wsHttpBinding";
    private const string defaultTransactionBindingType = "wsHttpBinding";
    private const string defaultMexBindingType = "mexHttpBinding";
    private const string defaultBindingName = "comNonTransactionalBinding";
    private const string defaultTransactionalBindingName = "comTransactionalBinding";
    private bool closed;
    private AtomicFile configFile;
    private SvcFileManager svcFileManager;
    private string webDirectoryName;
    private string webDirectoryPath;
    private string webServerName;
    private RuntimeVersions runtimeVersion;
    private bool modified;

    private WasEndpointConfigContainer(
      string webServerName,
      string webDirectoryName,
      string webDirectoryPath,
      RuntimeVersions runtimeVersion)
    {
      if (string.IsNullOrEmpty(webDirectoryPath) || !Directory.Exists(webDirectoryPath))
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("WebDirectoryPathNotFound", (object) webDirectoryName, (object) webDirectoryPath), (Exception) null);
      this.webDirectoryName = webDirectoryName;
      this.webDirectoryPath = webDirectoryPath;
      this.webServerName = webServerName;
      this.closed = false;
      this.configFile = new AtomicFile(this.webDirectoryPath + "\\web.config");
      this.svcFileManager = new SvcFileManager(this.webDirectoryPath);
      this.runtimeVersion = runtimeVersion;
    }

    public override bool WasModified
    {
      get => this.modified;
      set => this.modified = value;
    }

    public override void AbortChanges()
    {
      this.closed = true;
      this.configFile.Abort();
      this.svcFileManager.Abort();
    }

    internal AtomicFile ConfigFile => this.configFile;

    public override void Add(IList<EndpointConfig> endpointConfigs)
    {
      this.ThrowIfClosed();
      System.Configuration.Configuration configuration = this.GetConfiguration(false);
      bool flag = false;
      foreach (EndpointConfig endpointConfig in (IEnumerable<EndpointConfig>) endpointConfigs)
      {
        Guid appid;
        if (this.svcFileManager.ResolveClsid(endpointConfig.Clsid, out appid) && endpointConfig.Appid != appid)
        {
          ToolConsole.WriteError(Microsoft.Tools.ServiceModel.SR.GetString("AppIDsDontMatch"), "");
          return;
        }
      }
      CompilationSection compilation = ((SystemWebSectionGroup) configuration.GetSectionGroup("system.web")).Compilation;
      if (string.IsNullOrEmpty(compilation.TargetFramework) && RuntimeVersions.V40 == this.runtimeVersion)
      {
        flag = true;
        compilation.TargetFramework = ".NETFramework, Version=v4.0";
      }
      foreach (EndpointConfig endpointConfig in (IEnumerable<EndpointConfig>) endpointConfigs)
      {
        if (this.BaseAddEndpointConfig(configuration, endpointConfig))
        {
          this.svcFileManager.Add(endpointConfig.Appid, endpointConfig.Clsid);
          flag = true;
          if (endpointConfig.Iid == typeof (IMetadataExchange).GUID)
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointAdded"));
          else if (!Tool.Options.ShowGuids)
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAdded", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
          else
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAdded", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
        }
        else if (endpointConfig.Iid == typeof (IMetadataExchange).GUID)
        {
          if (!Tool.Options.ShowGuids)
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointAlreadyExposed", (object) endpointConfig.ComponentProgID));
          else
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("MexEndpointAlreadyExposed", (object) endpointConfig.Clsid));
        }
        else if (!Tool.Options.ShowGuids)
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAlreadyExposed", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
        else
          ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceAlreadyExposed", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
      }
      if (!flag)
        return;
      this.WasModified = true;
      configuration.Save();
    }

    private void EnsureWSProfileBindingAdded(System.Configuration.Configuration config)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      if (!sectionGroup.Bindings.WSHttpBinding.Bindings.ContainsKey((object) this.DefaultBindingName))
      {
        WSHttpBindingElement element = new WSHttpBindingElement(this.DefaultBindingName);
        element.ReliableSession.Enabled = true;
        sectionGroup.Bindings.WSHttpBinding.Bindings.Add(element);
      }
      if (sectionGroup.Bindings.WSHttpBinding.Bindings.ContainsKey((object) this.DefaultTransactionalBindingName))
        return;
      WSHttpBindingElement element1 = new WSHttpBindingElement(this.DefaultTransactionalBindingName);
      element1.ReliableSession.Enabled = true;
      element1.TransactionFlow = true;
      sectionGroup.Bindings.WSHttpBinding.Bindings.Add(element1);
    }

    protected override void AddBinding(System.Configuration.Configuration config) => this.EnsureWSProfileBindingAdded(config);

    public override string DefaultBindingType => "wsHttpBinding";

    public override string DefaultBindingName => "comNonTransactionalBinding";

    public override string DefaultTransactionalBindingType => "wsHttpBinding";

    public override string DefaultTransactionalBindingName => "comTransactionalBinding";

    public override string DefaultMexBindingType => "mexHttpBinding";

    public override string DefaultMexBindingName => (string) null;

    private void EnsureBindingRemoved(System.Configuration.Configuration config)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      if (sectionGroup.Bindings.WSHttpBinding.Bindings.ContainsKey((object) this.DefaultBindingName))
      {
        WSHttpBindingElement binding = sectionGroup.Bindings.WSHttpBinding.Bindings[(object) this.DefaultBindingName];
        sectionGroup.Bindings.WSHttpBinding.Bindings.Remove(binding);
      }
      if (!sectionGroup.Bindings.WSHttpBinding.Bindings.ContainsKey((object) this.DefaultTransactionalBindingName))
        return;
      WSHttpBindingElement binding1 = sectionGroup.Bindings.WSHttpBinding.Bindings[(object) this.DefaultTransactionalBindingName];
      sectionGroup.Bindings.WSHttpBinding.Bindings.Remove(binding1);
    }

    protected override void RemoveBinding(System.Configuration.Configuration config) => this.EnsureBindingRemoved(config);

    public override void CommitChanges()
    {
      this.configFile.Commit();
      this.svcFileManager.Commit();
    }

    public override string DefaultEndpointAddress(Guid appId, Guid clsid, Guid iid)
    {
      string uriString = Uri.EscapeUriString((((ComAdminWrapper.GetAppInfo(appId.ToString("B")) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindAppInfo", (object) appId.ToString("B")), (Exception) null)).FindClass(clsid.ToString("B")) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindClassInfo", (object) clsid.ToString("B")), (Exception) null)).FindInterface(iid.ToString("B")) ?? throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("CannotFindInterfaceInfo", (object) iid.ToString("B")), (Exception) null)).Name);
      return Uri.IsWellFormedUriString(uriString, UriKind.RelativeOrAbsolute) ? uriString : iid.ToString().ToUpperInvariant();
    }

    public override List<string> GetBaseAddresses(EndpointConfig config) => new List<string>();

    public override string BaseServiceAddress(Guid appId, Guid clsid, Guid iid) => string.Empty;

    public override string DefaultMexAddress(Guid appId, Guid clsid) => EndpointConfig.MexEndpointSuffix;

    public override System.Configuration.Configuration GetConfiguration(bool readOnly)
    {
      string currentFileName = this.configFile.GetCurrentFileName(readOnly);
      return string.IsNullOrEmpty(currentFileName) ? (System.Configuration.Configuration) null : this.GetConfigurationFromFile(currentFileName);
    }

    public override List<EndpointConfig> GetEndpointConfigs()
    {
      this.ThrowIfClosed();
      System.Configuration.Configuration configuration = this.GetConfiguration(true);
      if (configuration == null)
        return new List<EndpointConfig>();
      Dictionary<string, List<EndpointConfig>> fromConfiguration = this.BaseGetEndpointsFromConfiguration(configuration);
      List<EndpointConfig> endpointConfigs = new List<EndpointConfig>();
      foreach (List<EndpointConfig> endpointConfigList in fromConfiguration.Values)
      {
        foreach (EndpointConfig endpointConfig in endpointConfigList)
        {
          Guid appid;
          if (this.svcFileManager.ResolveClsid(endpointConfig.Clsid, out appid))
          {
            endpointConfig.Appid = appid;
            endpointConfigs.Add(endpointConfig);
          }
          else
          {
            string applicationName = endpointConfig.ApplicationName;
            string componentProgId = endpointConfig.ComponentProgID;
            string interfaceName = endpointConfig.InterfaceName;
            if (!Tool.Options.ShowGuids && !string.IsNullOrEmpty(applicationName) && !string.IsNullOrEmpty(componentProgId) && !string.IsNullOrEmpty(interfaceName))
              ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("EndpointNotFoundInSvcFile", (object) applicationName, (object) componentProgId, (object) interfaceName, (object) endpointConfig.BindingName, (object) endpointConfig.Address));
            else
              ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("EndpointNotFoundInSvcFile", (object) endpointConfig.Appid.ToString("B"), (object) endpointConfig.Clsid.ToString("B"), (object) endpointConfig.Iid.ToString("B"), (object) endpointConfig.BindingName, (object) endpointConfig.Address));
          }
        }
      }
      return endpointConfigs;
    }

    private int NumEndpointsForClsid(System.Configuration.Configuration config, Guid clsid, Guid appId)
    {
      foreach (ServiceElement service in (ConfigurationElementCollection) ServiceModelSectionGroup.GetSectionGroup(config).Services.Services)
      {
        string[] strArray = service.Name.Split(',');
        if (strArray.Length == 2)
        {
          Guid guid1;
          Guid guid2;
          try
          {
            guid1 = new Guid(strArray[0]);
            guid2 = new Guid(strArray[1]);
          }
          catch (FormatException ex)
          {
            continue;
          }
          if (guid2 == clsid && guid1 == appId)
            return service.Endpoints.Count;
        }
      }
      return 0;
    }

    public override void PrepareChanges()
    {
      this.closed = true;
      bool flag = this.configFile.HasBeenModified() && this.WasModified;
      this.configFile.Prepare();
      if (flag)
        ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString(this.configFile.OriginalFileExists ? "FileUpdated" : "FileCreated", (object) this.configFile.OriginalFileName));
      this.svcFileManager.Prepare();
    }

    public override void Remove(IList<EndpointConfig> endpointConfigs)
    {
      this.ThrowIfClosed();
      System.Configuration.Configuration configuration = this.GetConfiguration(false);
      bool flag = false;
      foreach (EndpointConfig endpointConfig in (IEnumerable<EndpointConfig>) endpointConfigs)
      {
        if (this.BaseRemoveEndpointConfig(configuration, endpointConfig))
        {
          flag = true;
          if (this.NumEndpointsForClsid(configuration, endpointConfig.Clsid, endpointConfig.Appid) == 0)
            this.svcFileManager.Remove(endpointConfig.Appid, endpointConfig.Clsid);
          if (!Tool.Options.ShowGuids)
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceRemoved", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
          else
            ToolConsole.WriteLine(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceRemoved", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
        }
        else if (!endpointConfig.IsMexEndpoint)
        {
          if (!Tool.Options.ShowGuids)
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceNotExposed", (object) endpointConfig.ComponentProgID, (object) endpointConfig.InterfaceName));
          else
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("InterfaceNotExposed", (object) endpointConfig.Clsid, (object) endpointConfig.Iid));
        }
      }
      if (!flag)
        return;
      this.WasModified = true;
      configuration.Save();
    }

    private void ThrowIfClosed()
    {
      if (this.closed)
        throw new InvalidOperationException();
    }

    public static string DefaultWebServer => WasAdminWrapper.DefaultWebServer;

    public static List<WasEndpointConfigContainer> Get(
      string applicationIdOrName)
    {
      List<WasEndpointConfigContainer> endpointConfigContainerList = new List<WasEndpointConfigContainer>();
      string[] webServerNames = WasAdminWrapper.GetWebServerNames();
      if (webServerNames != null)
      {
        foreach (string webServer in webServerNames)
        {
          List<WasEndpointConfigContainer> collection = WasEndpointConfigContainer.Get(webServer, applicationIdOrName);
          endpointConfigContainerList.AddRange((IEnumerable<WasEndpointConfigContainer>) collection);
        }
      }
      return endpointConfigContainerList;
    }

    public static List<WasEndpointConfigContainer> Get(
      string webServer,
      string applicationIdOrName)
    {
      List<WasEndpointConfigContainer> endpointConfigContainerList = new List<WasEndpointConfigContainer>();
      string[] webDirectoryNames = WasAdminWrapper.GetWebDirectoryNames(webServer);
      if (webDirectoryNames != null)
      {
        foreach (string webDirectory in webDirectoryNames)
        {
          WasEndpointConfigContainer endpointConfigContainer = WasEndpointConfigContainer.Get(webServer, webDirectory, applicationIdOrName);
          if (endpointConfigContainer != null)
            endpointConfigContainerList.Add(endpointConfigContainer);
        }
      }
      return endpointConfigContainerList;
    }

    public static WasEndpointConfigContainer Get(
      string webServer,
      string webDirectory,
      string applicationIdOrName)
    {
      string webDirectoryPath = (string) null;
      RuntimeVersions runtimeVersion = RuntimeVersions.V40;
      if (!string.IsNullOrEmpty(applicationIdOrName))
        runtimeVersion = ComAdminWrapper.GetAppInfo(applicationIdOrName).RuntimeVersion;
      if (!WasAdminWrapper.GetWebDirectoryPath(webServer, webDirectory, out webDirectoryPath))
        return (WasEndpointConfigContainer) null;
      try
      {
        return new WasEndpointConfigContainer(webServer, webDirectory, webDirectoryPath, runtimeVersion);
      }
      catch (Exception ex)
      {
        switch (ex)
        {
          case NullReferenceException _:
          case SEHException _:
            throw ex;
          default:
            ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("FailedToLoadConfigForWebDirectoryOnWebSite", (object) webDirectory, (object) webServer));
            break;
        }
      }
      return (WasEndpointConfigContainer) null;
    }
  }
}
