// Decompiled with JetBrains decompiler
// Type: rw.BS
// Assembly: DynamicMet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AF763EB9-8CE5-4C8D-A157-180B851AA721
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9cf1ff0097d861156fd09818614a3bb202741325fc00049356ff51a8388dfd6.exe

using System;

namespace rw
{
  public class BS
  {
    private int mT;
    private int WQ;
    private int NN;
    private byte[] Vf;
    private static BS rw;

    public BS(int _param1)
    {
      ccw.xFvA3V();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num1 = 0;
      if (false)
      {
        int num2;
        num1 = num2;
      }
      switch (num1)
      {
        default:
          this.mT = _param1;
          this.Vf = new byte[_param1];
          this.WQ = 0;
          this.NN = 0;
          break;
      }
    }

    public void ew(byte _param1)
    {
      this.Vf[this.WQ] = _param1;
      this.WQ = (this.WQ + 1) % this.mT;
      this.NN = Math.Max(this.NN + 1, this.mT);
    }

    public void Mi(byte[] _param1)
    {
      for (int index = 0; index < _param1.Length; ++index)
        this.ew(_param1[index]);
    }

    public bool ux(string _param1)
    {
      char[] charArray = _param1.ToCharArray();
      byte[] numArray = new byte[charArray.Length];
      int num1 = 1;
      if (BS.cq() == null)
        goto label_2;
label_1:
      int num2;
      num1 = num2;
label_2:
      while (true)
      {
        int index;
        bool flag;
        switch (num1)
        {
          case 1:
            index = 0;
            break;
          default:
            if (flag)
            {
              numArray[index] = (byte) charArray[index];
              ++index;
              break;
            }
            goto label_7;
        }
        flag = index < charArray.Length;
        if (BS.fV())
          num1 = 0;
        else
          goto label_1;
      }
label_7:
      return this.pW(numArray);
    }

    public bool pW(byte[] _param1)
    {
      if (this.NN < _param1.Length)
        goto label_10;
      else
        goto label_6;
label_1:
      bool flag;
      int num;
      switch (num)
      {
        case 1:
          goto label_10;
        case 2:
          for (int index = 0; index < _param1.Length; ++index)
          {
            if ((int) this.Vf[(this.WQ + index) % this.mT] != (int) _param1[index])
            {
              flag = false;
              goto label_5;
            }
          }
          flag = true;
          break;
      }
label_5:
      return flag;
label_6:
      num = 2;
      goto label_1;
label_10:
      flag = false;
      num = 0;
      if (BS.fV())
      {
        num = 0;
        goto label_1;
      }
      else
        goto label_1;
    }

    internal static bool fV() => BS.rw == null;

    internal static BS cq() => BS.rw;
  }
}
