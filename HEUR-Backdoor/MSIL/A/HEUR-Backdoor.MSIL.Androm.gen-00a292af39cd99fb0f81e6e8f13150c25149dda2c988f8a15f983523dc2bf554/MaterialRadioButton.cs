// Decompiled with JetBrains decompiler
// Type: MaterialSurface.MaterialRadioButton
// Assembly: PropagationFl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45597167-9313-4C0B-891A-DAD42EC632D8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-00a292af39cd99fb0f81e6e8f13150c25149dda2c988f8a15f983523dc2bf554.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MaterialSurface
{
  public class MaterialRadioButton : RadioButton, IMaterialControl
  {
    private readonly Timer animationDirector1 = new Timer()
    {
      Interval = 16
    };
    private readonly Timer animationDirector2 = new Timer()
    {
      Interval = 35
    };
    private Rectangle textArea;
    private readonly StringFormat textAglignment = new StringFormat()
    {
      Alignment = StringAlignment.Near,
      LineAlignment = StringAlignment.Center
    };
    private Color primaryColor = Color.BlueViolet;
    private int aniAlpha = 0;
    private int aniSize;
    private int aniLocation;
    private int incLocation;
    private int incSize;

    [Category("Appearance Material")]
    [Description("Check color.")]
    public Color PrimaryColor
    {
      get => this.primaryColor;
      set
      {
        this.primaryColor = value;
        this.Invalidate();
      }
    }

    public MouseState MouseState { get; set; }

    public MaterialRadioButton()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.MinimumSize = new Size(25, 24);
      this.AutoSize = false;
      this.Size = new Size(165, 25);
      this.Font = new Font("Segoe UI", 11f, FontStyle.Regular);
      this.MouseState = MouseState.OUT;
      this.textArea = new Rectangle(this.Height - 2, 0, this.Width, this.Height - 1);
      this.aniSize = 0;
      this.aniLocation = this.Height / 2;
      this.incLocation = this.Height / 24;
      this.incSize = this.Height / 12;
      this.animationDirector1.Tick += new EventHandler(this.OnAnimate1);
      this.animationDirector2.Tick += new EventHandler(this.OnAnimate2);
    }

    private void OnAnimate1(object sender, EventArgs e)
    {
      if (this.Checked)
      {
        if (this.aniLocation > 8)
        {
          this.aniLocation -= this.incLocation;
          this.aniSize += this.incSize;
        }
        else
        {
          if (this.aniSize < this.Height - 16)
            this.aniSize += this.Height % 2;
          this.animationDirector1.Stop();
        }
      }
      else if (this.aniLocation < Convert.ToInt32(Math.Round((double) this.Height / 2.0, 0)))
      {
        this.aniLocation += this.incLocation;
        this.aniSize -= this.incSize;
      }
      else
      {
        this.aniSize = 0;
        this.aniLocation = this.Height / 2;
        this.animationDirector1.Stop();
      }
      this.Invalidate();
    }

    private void OnAnimate2(object sender, EventArgs e)
    {
      if (this.aniAlpha > 0)
        this.aniAlpha -= 5;
      else
        this.animationDirector2.Stop();
      if (this.animationDirector1.Enabled)
        return;
      this.Invalidate();
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      base.OnPaint(pevent);
      Graphics graphics = pevent.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      if (this.Parent is IMaterialControl)
        graphics.Clear(((MaterialCard) this.Parent).CardColor);
      else
        graphics.Clear(this.Parent.BackColor);
      graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(this.aniAlpha, Color.Gray)), 1, 1, this.Height - 2, this.Height - 2);
      if (this.Enabled)
      {
        if (this.Focused || this.MouseState == MouseState.HOVER)
        {
          if (!this.Checked)
            graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(80, Color.Gray)), 1, 1, this.Height - 2, this.Height - 2);
          else
            graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(80, this.primaryColor)), 1, 1, this.Height - 2, this.Height - 2);
        }
        if (!this.Checked && !this.animationDirector1.Enabled)
          graphics.DrawEllipse(new Pen((Brush) new SolidBrush(Color.Gray), 1.8f), 6, 6, this.Height - 12, this.Height - 12);
        else
          graphics.DrawEllipse(new Pen((Brush) new SolidBrush(this.PrimaryColor), 1.8f), 6, 6, this.Height - 12, this.Height - 12);
        graphics.FillEllipse((Brush) new SolidBrush(this.primaryColor), new Rectangle(this.aniLocation, this.aniLocation, this.aniSize, this.aniSize));
        graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(this.ForeColor), (RectangleF) this.textArea, this.textAglignment);
      }
      else
      {
        graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(Color.Silver), (RectangleF) this.textArea, this.textAglignment);
        graphics.DrawEllipse(new Pen((Brush) new SolidBrush(Color.Silver), 1.8f), 6, 6, this.Height - 12, this.Height - 12);
        graphics.FillEllipse((Brush) new SolidBrush(Color.Silver), new Rectangle(this.aniLocation, this.aniLocation, this.aniSize, this.aniSize));
      }
    }

    protected override void OnClick(EventArgs e)
    {
      base.OnClick(e);
      this.aniAlpha = 110;
      this.animationDirector2.Start();
    }

    protected override void OnCheckedChanged(EventArgs e)
    {
      base.OnCheckedChanged(e);
      this.animationDirector1.Start();
    }

    protected override void OnSizeChanged(EventArgs e)
    {
      base.OnSizeChanged(e);
      if (!this.Checked)
      {
        this.aniSize = 0;
        this.aniLocation = this.Height / 2;
      }
      else
      {
        this.aniSize = this.Height - 16;
        this.aniLocation = 8;
      }
      this.incLocation = this.Height / 24;
      this.incSize = this.Height / 12;
      this.textArea = new Rectangle(this.Height - 2, 0, this.Width, this.Height - 1);
    }

    protected override void OnFontChanged(EventArgs e)
    {
      base.OnFontChanged(e);
      if (!this.Checked)
      {
        this.aniSize = 0;
        this.aniLocation = this.Height / 2;
      }
      else
      {
        this.aniSize = this.Height - 16;
        this.aniLocation = 8;
      }
      this.incLocation = this.Height / 24;
      this.incSize = this.Height / 12;
      this.textArea = new Rectangle(this.Height - 2, 0, this.Width, this.Height - 1);
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      base.OnMouseEnter(e);
      this.MouseState = MouseState.HOVER;
      this.Invalidate();
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      base.OnMouseLeave(e);
      if (!this.Focused)
        this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    protected override void OnGotFocus(EventArgs e)
    {
      base.OnGotFocus(e);
      this.Invalidate();
    }

    protected override void OnLostFocus(EventArgs e)
    {
      base.OnLostFocus(e);
      this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    protected override void OnTextChanged(EventArgs e)
    {
      base.OnTextChanged(e);
      this.Invalidate();
    }
  }
}
