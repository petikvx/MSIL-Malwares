// Decompiled with JetBrains decompiler
// Type: NChanges.TypeInfo
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Xml;

namespace NChanges
{
  [DebuggerDisplay("{Name}")]
  public class TypeInfo
  {
    private List<MemberInfo> _members = new List<MemberInfo>();
    private List<TypeChangeInfo> _changes = new List<TypeChangeInfo>();

    public string Name { get; set; }

    public string Namespace { get; set; }

    public TypeKind Kind { get; set; }

    public bool Obsolete { get; set; }

    public string ObsoleteMessage { get; set; }

    public ICollection<MemberInfo> Members => (ICollection<MemberInfo>) this._members;

    public ICollection<TypeChangeInfo> Changes => (ICollection<TypeChangeInfo>) this._changes;

    public void ReadType(Type type)
    {
      this.Name = type.Name;
      this.Namespace = type.Namespace;
      if (type.IsSubclassOf(typeof (Delegate)))
        this.Kind = TypeKind.Delegate;
      else if (type.IsClass)
        this.Kind = TypeKind.Class;
      else if (type.IsInterface)
        this.Kind = TypeKind.Interface;
      else if (type.IsEnum)
        this.Kind = TypeKind.Enum;
      else if (type.IsValueType)
        this.Kind = TypeKind.ValueType;
      ObsoleteAttribute customAttribute = (ObsoleteAttribute) Attribute.GetCustomAttribute((System.Reflection.MemberInfo) type, typeof (ObsoleteAttribute));
      if (customAttribute != null)
      {
        this.Obsolete = true;
        this.ObsoleteMessage = customAttribute.Message;
      }
      foreach (System.Reflection.MemberInfo member in type.GetMembers())
      {
        if (!TypeInfo.MemberIsNotDeclaredOnThisType(member, type) && !TypeInfo.MemberIsSpecialMethodButNotConstructor(member) && !TypeInfo.MemberIsSpecialField(member) && !TypeInfo.MemberIsOverride(member))
        {
          MemberInfo memberInfo = new MemberInfo();
          memberInfo.ReadMember(member);
          this._members.Add(memberInfo);
        }
      }
    }

    private static bool MemberIsNotDeclaredOnThisType(System.Reflection.MemberInfo member, Type type) => (object) member.DeclaringType != (object) type;

    private static bool MemberIsSpecialMethodButNotConstructor(System.Reflection.MemberInfo member) => (object) (member as MethodBase) != null && ((MethodBase) member).IsSpecialName && !(member is ConstructorInfo);

    private static bool MemberIsSpecialField(System.Reflection.MemberInfo member) => (object) (member as System.Reflection.FieldInfo) != null && (((System.Reflection.FieldInfo) member).Attributes & FieldAttributes.RTSpecialName) == FieldAttributes.RTSpecialName;

    private static bool MemberIsOverride(System.Reflection.MemberInfo member)
    {
      if ((object) (member as MethodInfo) != null)
      {
        MethodInfo methodInfo = (MethodInfo) member;
        if (methodInfo.IsVirtual && (object) methodInfo.GetBaseDefinition() != (object) methodInfo)
          return true;
      }
      if ((object) (member as PropertyInfo) != null)
      {
        PropertyInfo propertyInfo = (PropertyInfo) member;
        MethodInfo getMethod1 = propertyInfo.GetGetMethod();
        MethodInfo getMethod2 = propertyInfo.GetGetMethod();
        if ((getMethod1 == (MethodInfo) null || getMethod1.IsVirtual && TypeInfo.MemberIsOverride((System.Reflection.MemberInfo) getMethod1)) && (getMethod2 == (MethodInfo) null || getMethod2.IsVirtual && TypeInfo.MemberIsOverride((System.Reflection.MemberInfo) getMethod2)))
          return true;
      }
      return false;
    }

    public void WriteXml(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("type");
      xmlWriter.WriteAttributeString("name", this.Name);
      xmlWriter.WriteAttributeString("namespace", this.Namespace);
      xmlWriter.WriteAttributeString("kind", this.Kind.ToString());
      if (this.Obsolete)
        xmlWriter.WriteAttributeString("obsolete", this.Obsolete.ToString());
      if (this.ObsoleteMessage != null)
        xmlWriter.WriteAttributeString("obsoleteMessage", this.ObsoleteMessage);
      foreach (TypeChangeInfo change in (IEnumerable<TypeChangeInfo>) this.Changes)
        change.WriteXml(xmlWriter);
      foreach (MemberInfo member in (IEnumerable<MemberInfo>) this.Members)
        member.WriteXml(xmlWriter);
      xmlWriter.WriteEndElement();
    }

    public void ReadXml(XmlReader xmlReader)
    {
      this.Name = xmlReader.GetAttribute("name");
      this.Namespace = xmlReader.GetAttribute("namespace");
      this.Kind = (TypeKind) Enum.Parse(typeof (TypeKind), xmlReader.GetAttribute("kind"));
      this.Obsolete = string.Equals(xmlReader.GetAttribute("obsolete"), "true", StringComparison.OrdinalIgnoreCase);
      this.ObsoleteMessage = xmlReader.GetAttribute("obsoleteMessage");
      if (xmlReader.IsEmptyElement)
        return;
      XmlReader xmlReader1 = xmlReader.ReadSubtree();
      while (xmlReader1.Read())
      {
        if (xmlReader1.NodeType == XmlNodeType.Element)
        {
          if (xmlReader1.Name == "change")
          {
            TypeChangeInfo typeChangeInfo = new TypeChangeInfo();
            typeChangeInfo.ReadXml(xmlReader);
            this.Changes.Add(typeChangeInfo);
          }
          else if (xmlReader1.Name == "member")
          {
            MemberInfo memberInfo = new MemberInfo();
            memberInfo.ReadXml(xmlReader);
            this.Members.Add(memberInfo);
          }
        }
      }
    }

    public TypeInfo Clone()
    {
      TypeInfo typeInfo = (TypeInfo) this.MemberwiseClone();
      typeInfo._members = new List<MemberInfo>(this.Members.Select<MemberInfo, MemberInfo>((Func<MemberInfo, MemberInfo>) (m => m.Clone())));
      typeInfo._changes = new List<TypeChangeInfo>(this.Changes.Select<TypeChangeInfo, TypeChangeInfo>((Func<TypeChangeInfo, TypeChangeInfo>) (c => c.Clone())));
      return typeInfo;
    }
  }
}
