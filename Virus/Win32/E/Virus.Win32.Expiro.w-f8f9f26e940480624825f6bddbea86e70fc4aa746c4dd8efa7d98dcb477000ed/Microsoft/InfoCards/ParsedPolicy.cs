// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.ParsedPolicy
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 1D4D5564-A025-490C-AF1D-DF4FBB709D1F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Expiro.w-f8f9f26e940480624825f6bddbea86e70fc4aa746c4dd8efa7d98dcb477000ed.exe

using Microsoft.InfoCards.Diagnostics;

namespace Microsoft.InfoCards
{
  internal class ParsedPolicy
  {
    private string m_policyXmlOriginal;
    private string m_policyXmlPrimary;
    private string m_policyXmlSecondary;
    private PolicyType m_policyType;

    public string PolicyXmlOriginal => this.m_policyXmlOriginal;

    public string PolicyXmlPrimary => this.m_policyXmlPrimary;

    public string PolicyXmlSecondary => this.m_policyXmlSecondary;

    public PolicyType PolicyType => this.m_policyType;

    public ParsedPolicy(
      string policyXmlOriginal,
      string policyXmlPrimary,
      string policyXmlSecondary)
    {
      InfoCardTrace.Assert(!string.IsNullOrEmpty(policyXmlOriginal), "Original Policy Xml cannot be null or empty");
      this.m_policyXmlOriginal = policyXmlOriginal;
      this.m_policyXmlPrimary = policyXmlPrimary;
      this.m_policyXmlSecondary = policyXmlSecondary;
      if (!string.IsNullOrEmpty(policyXmlPrimary) && string.IsNullOrEmpty(policyXmlSecondary))
        this.m_policyType = PolicyType.PrimaryOnly;
      else if (!string.IsNullOrEmpty(policyXmlPrimary) && !string.IsNullOrEmpty(policyXmlSecondary))
        this.m_policyType = PolicyType.Composite;
      else if (string.IsNullOrEmpty(policyXmlPrimary) && !string.IsNullOrEmpty(policyXmlSecondary))
        this.m_policyType = PolicyType.SecondaryOnly;
      else
        InfoCardTrace.Assert(false, "Both policies cannot be empty");
    }
  }
}
