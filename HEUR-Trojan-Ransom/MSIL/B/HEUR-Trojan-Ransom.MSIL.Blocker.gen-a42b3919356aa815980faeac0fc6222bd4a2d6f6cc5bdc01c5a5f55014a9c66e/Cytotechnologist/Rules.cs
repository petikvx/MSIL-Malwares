// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ILegacyEvidenceAdapt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C8AEC27-D027-41D5-B71C-E99019A8E594
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a42b3919356aa815980faeac0fc6222bd4a2d6f6cc5bdc01c5a5f55014a9c66e.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = 124071598;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2077407712)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 1939392058 ^ 1037804093;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 348975730;
      float[] numArray;
      int aIndex;
      float[] riskChances;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1917255608)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            ++aIndex;
            num1 = (int) num2 * 569562510 ^ -322853392;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1440712866;
            continue;
          case 3:
            riskChances = numArray;
            num1 = (int) num2 * -651691138 ^ -2086009366;
            continue;
          case 4:
            flag = aIndex < numArray.Length;
            num1 = 1048604147;
            continue;
          case 6:
            int num3 = flag ? 1478960564 : (num3 = 2017540264);
            num1 = num3 ^ (int) num2 * 1990254006;
            continue;
          case 7:
            num1 = (int) num2 * 457116493 ^ -879469208;
            continue;
          case 8:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * 1971727035 ^ 188546546;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 991050244;
      bool flag1;
      int aIndex1;
      int aIndex2;
      List<Card> cardList;
      int num2;
      JSONNode jsonNode;
      int count;
      bool flag2;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 340849040)) % 27U)
        {
          case 0:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = 1230162064;
            continue;
          case 1:
            num1 = 966098292;
            continue;
          case 2:
            num1 = (int) num3 * -443223040 ^ 959042549;
            continue;
          case 3:
            num1 = (int) num3 * 1757115433 ^ 900530061;
            continue;
          case 4:
            num1 = (int) num3 * -1051316099 ^ 208687252;
            continue;
          case 5:
            bool flag3 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 813328192;
            continue;
          case 6:
            int num4 = flag1 ? 522405522 : (num4 = 1358624243);
            num1 = num4 ^ (int) num3 * 216388015;
            continue;
          case 7:
            num1 = (int) num3 * -1217837339 ^ 1441145259;
            continue;
          case 8:
            num1 = (int) num3 * -1387015365 ^ -775524117;
            continue;
          case 9:
            ++aIndex2;
            num1 = (int) num3 * -1174450317 ^ 996591303;
            continue;
          case 10:
            num1 = 1091666273;
            continue;
          case 11:
            int num5 = !flag2 ? -178107346 : (num5 = -457078078);
            num1 = num5 ^ (int) num3 * -723445241;
            continue;
          case 12:
            array = cardList.ToArray();
            num1 = (int) num3 * -262630107 ^ 1211251510;
            continue;
          case 13:
            num1 = (int) num3 * -1283555854 ^ 877968543;
            continue;
          case 15:
            int num6;
            num1 = num6 = num2 >= jsonNode[aIndex2].AsInt ? 315807027 : (num6 = 184641713);
            continue;
          case 16:
            jsonNode = json[aIndex1];
            num1 = (int) num3 * -955812809 ^ 978449431;
            continue;
          case 17:
            aIndex1 = 0;
            num1 = (int) num3 * 1107041916 ^ 658647935;
            continue;
          case 18:
            ++num2;
            num1 = (int) num3 * 586121496 ^ 1862661933;
            continue;
          case 19:
            goto label_1;
          case 20:
            count = json.Count;
            cardList = new List<Card>();
            num1 = (int) num3 * -1326807452 ^ 59998669;
            continue;
          case 21:
            flag1 = aIndex1 < count;
            num1 = 1836444173;
            continue;
          case 22:
            num2 = 0;
            num1 = (int) num3 * 1694899362 ^ 1846415549;
            continue;
          case 23:
            num1 = 1866175412;
            continue;
          case 24:
            num1 = (int) num3 * -1361670613 ^ 581583170;
            continue;
          case 25:
            aIndex2 = 0;
            num1 = (int) num3 * 303357599 ^ -1945411420;
            continue;
          case 26:
            ++aIndex1;
            num1 = (int) num3 * 613929572 ^ -35945571;
            continue;
          default:
            goto label_28;
        }
      }
label_28:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1992379502;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 941853615)) % 4U)
        {
          case 1:
            str = Rules.\u202A‭⁮‫‏‏‬⁮‎‍​⁫‬⁫‪​⁭⁭⁪⁫‮‪‫⁭⁬⁮‏⁭‫⁫⁪‬‬‎‏⁬⁬‫‫⁬‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -1366122891 ^ 1441004897;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1899306748 ^ 1321578683;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -958249337;
      Card[] cards;
      int index;
      Card card1;
      int num2;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -156904997)) % 20U)
        {
          case 0:
            num2 = 0;
            num1 = (int) num3 * -944836123 ^ -443604503;
            continue;
          case 1:
            index = 0;
            num1 = (int) num3 * -1656159713 ^ -1403961087;
            continue;
          case 2:
            int num4;
            num1 = num4 = index >= cards.Length ? -653100638 : (num4 = -1507374326);
            continue;
          case 3:
            num2 = card1.Type;
            num1 = (int) num3 * 265747519 ^ -1784705296;
            continue;
          case 4:
            ++index;
            num1 = (int) num3 * -919544097 ^ -1842058567;
            continue;
          case 5:
            num1 = (int) num3 * -1797408862 ^ 916051539;
            continue;
          case 6:
            num1 = (int) num3 * -277351707 ^ -1568485445;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num3 * 121132481 ^ 1243799803;
            continue;
          case 9:
            str2 = Rules.\u206F‌​‏⁯⁯⁮⁪‎⁫‭‪‎‎‫‍‬‏⁬⁫‭⁫‌‎‏‫⁫⁮⁮⁬‭‫‬‮⁮⁬​‬‍‮(str1, "\n]");
            num1 = (int) num3 * 863955118 ^ 1129631390;
            continue;
          case 10:
            str1 = Rules.\u206F‌​‏⁯⁯⁮⁪‎⁫‭‪‎‎‫‍‬‏⁬⁫‭⁫‌‎‏‫⁫⁮⁮⁬‭‫‬‮⁮⁬​‬‍‮(str1, "\n\t");
            num1 = (int) num3 * -1032744937 ^ -1780355238;
            continue;
          case 11:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200E⁭‎‫⁪‬⁫‎‭⁮⁬​‏⁪‭⁫‍⁮‎‏‮​‎⁯‌⁬⁫‍​‍‏⁯⁮​⁪⁪‮‌⁮‮‮((object) card2) : (string) null;
            str1 = Rules.\u206A⁭​​​⁬⁫‫⁮⁮‭‍⁬‎‮‏⁭‍⁯⁮‭⁭‪⁬⁫‏‎‪‮‫‬​⁯‎‬‎⁪‎⁬‮‮(str3, str4, " ");
            num1 = -346432293;
            continue;
          case 12:
            str1 = "[\n\t";
            num1 = (int) num3 * -1300679247 ^ 920589435;
            continue;
          case 13:
            card1 = cards[index];
            num1 = -1214549001;
            continue;
          case 14:
            num1 = (int) num3 * 623870850 ^ 673669400;
            continue;
          case 16:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -93080927 ^ 134639194;
            continue;
          case 17:
            int num5 = flag ? 1607089306 : (num5 = 923349607);
            num1 = num5 ^ (int) num3 * 1240499863;
            continue;
          case 18:
            cards = this.Cards;
            num1 = (int) num3 * 1616449206 ^ 217205358;
            continue;
          case 19:
            num1 = (int) num3 * -1531025064 ^ 1926471448;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u206F‌​‏⁯⁯⁮⁪‎⁫‭‪‎‎‫‍‬‏⁬⁫‭⁫‌‎‏‫⁫⁮⁮⁬‭‫‬‮⁮⁬​‬‍‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200B‭‪‫‍‮‮‬⁪‎​‏‬‬⁭⁯‬⁬‏‏‌⁬‮‫⁮‌‪⁮⁮‎⁭‫⁯⁪‫⁮⁬⁪‌‌‮()));
label_1:
      int num1 = -1599197682;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -446410539)) % 8U)
        {
          case 0:
            str1 = Rules.\u206A⁭​​​⁬⁫‫⁮⁮‭‍⁬‎‮‏⁭‍⁯⁮‭⁭‪⁬⁫‏‎‪‮‫‬​⁯‎‬‎⁪‎⁬‮‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200B‭‪‫‍‮‮‬⁪‎​‏‬‬⁭⁯‬⁬‏‏‌⁬‮‫⁮‌‪⁮⁮‎⁭‫⁯⁪‫⁮⁬⁪‌‌‮()));
            num1 = -89367720;
            continue;
          case 1:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? -1969767435 : (num3 = -1214004070);
            continue;
          case 2:
            goto label_1;
          case 3:
            index = 1;
            num1 = (int) num2 * 1749339824 ^ 1888857364;
            continue;
          case 5:
            ++index;
            num1 = (int) num2 * 1354174772 ^ -388798432;
            continue;
          case 6:
            num1 = (int) num2 * 499375745 ^ 1517883927;
            continue;
          case 7:
            str2 = Rules.\u206F‌​‏⁯⁯⁮⁪‎⁫‭‪‎‎‫‍‬‏⁬⁫‭⁫‌‎‏‫⁫⁮⁮⁬‭‫‬‮⁮⁬​‬‍‮(str1, " ]");
            num1 = (int) num2 * 1381874612 ^ -1665645089;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    static string \u202A‭⁮‫‏‏‬⁮‎‍​⁫‬⁫‪​⁭⁭⁪⁫‮‪‫⁭⁬⁮‏⁭‫⁫⁪‬‬‎‏⁬⁬‫‫⁬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206F‌​‏⁯⁯⁮⁪‎⁫‭‪‎‎‫‍‬‏⁬⁫‭⁫‌‎‏‫⁫⁮⁮⁬‭‫‬‮⁮⁬​‬‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200E⁭‎‫⁪‬⁫‎‭⁮⁬​‏⁪‭⁫‍⁮‎‏‮​‎⁯‌⁬⁫‍​‍‏⁯⁮​⁪⁪‮‌⁮‮‮([In] object obj0) => obj0.ToString();

    static string \u206A⁭​​​⁬⁫‫⁮⁮‭‍⁬‎‮‏⁭‍⁯⁮‭⁭‪⁬⁫‏‎‪‮‫‬​⁯‎‬‎⁪‎⁬‮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200B‭‪‫‍‮‮‬⁪‎​‏‬‬⁭⁯‬⁬‏‏‌⁬‮‫⁮‌‪⁮⁮‎⁭‫⁯⁪‫⁮⁬⁪‌‌‮() => CultureInfo.InvariantCulture;
  }
}
