// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.Templates.BroadcasterRulesTemplate
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Tourield.Attributes;
using Tourield.Roles;
using Tourield.Schemes;

namespace DebuggerTypeProxyAttrib.Templates
{
  public class BroadcasterRulesTemplate : TestsWrapperAttribute
  {
    private static readonly int[] m_TestWrapper;
    private string _RepositoryWrapper;
    private int m_IdentifierWrapper;
    private ulong m_ProxyWrapper;
    private BindingList<UtilsWrapper> m_PropertyWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int WriteWrapper() => this.m_IdentifierWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ulong AwakeWrapper() => this.m_ProxyWrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public BindingList<UtilsWrapper> SearchWrapper()
    {
      if (this.m_PropertyWrapper == null)
        this.m_PropertyWrapper = new BindingList<UtilsWrapper>();
      return this.m_PropertyWrapper;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ExcludeWrapper(string item)
    {
      this._RepositoryWrapper = item;
      this.CalculateWrapper();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalculateWrapper()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        UtilsWrapper utilsWrapper;
        while (true)
        {
          byte num3;
          bool flag;
          int num4;
          switch (num2)
          {
            case 0:
            case 1:
              this.CustomizePrototype(this._RepositoryWrapper);
              if (BroadcasterRulesTemplate.ComputeMethod())
              {
                num2 = 2;
                continue;
              }
              goto case 2;
            case 2:
              this.SearchWrapper().Clear();
              flag = Encoding.Default.GetString(this.FindPrototype(), 0, 3) != "Ver";
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 6;
            case 3:
              goto label_20;
            case 4:
              if (!flag)
              {
                this.InsertPrototype(3);
                this.m_IdentifierWrapper = (int) this.EnablePrototype();
                if (this.RestartWrapper())
                {
                  this.m_ProxyWrapper = this.ExcludePrototype();
                  utilsWrapper = (UtilsWrapper) null;
                  num3 = byte.MaxValue;
                  goto label_25;
                }
                else
                  goto label_8;
              }
              else
                goto label_6;
            case 5:
              goto label_26;
            case 6:
            case 8:
label_24:
              goto label_25;
            case 7:
label_14:
              num4 = num3 == (byte) 0 ? 1 : 0;
              break;
            case 9:
              try
              {
                num3 = this.ResetPrototype(false);
              }
              catch (EndOfStreamException ex)
              {
                return;
              }
              switch (num3)
              {
                case 99:
                  num4 = 1;
                  break;
                case byte.MaxValue:
                  goto label_13;
                default:
                  goto label_14;
              }
              break;
            default:
              goto label_4;
          }
          if (num4 == 0)
          {
            if (num3 == (byte) 2 || num3 == (byte) 1)
            {
              utilsWrapper.AssetWrapper().Add(new RegFactoryRole(this));
              goto label_24;
            }
            else
              goto label_23;
          }
          else
            goto label_17;
label_25:
          num2 = 9;
        }
label_4:
        num1 = 7;
        continue;
label_13:
        num1 = 3;
        continue;
label_17:
        utilsWrapper = new UtilsWrapper(this);
        num1 = 5;
        continue;
label_26:
        this.m_PropertyWrapper.Add(utilsWrapper);
        num1 = 8;
      }
label_20:
      return;
label_6:
      throw new Exception("Invalid file header.");
label_8:
      throw new Exception("Unsupported file version '" + this.m_IdentifierWrapper.ToString() + "'.");
label_23:
      throw new Exception("Unknown index type found");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool RestartWrapper()
    {
      int num1 = 2;
      bool flag;
      if (BroadcasterRulesTemplate.ComputeMethod())
      {
        while (true)
        {
          int index;
          int[] testWrapper;
          int num2;
          int num3;
          switch (num1)
          {
            case 0:
            case 2:
label_7:
              testWrapper = BroadcasterRulesTemplate.m_TestWrapper;
              num2 = 3;
              goto label_10;
            case 1:
              if (this.m_IdentifierWrapper != num3)
              {
                ++index;
                break;
              }
              goto label_9;
            case 3:
              index = 0;
              break;
            case 4:
            case 5:
              flag = false;
              if (!BroadcasterRulesTemplate.QueryMethod())
              {
                num1 = 7;
                continue;
              }
              goto label_14;
            case 6:
            case 7:
              goto label_14;
            default:
              if (true)
              {
                num1 = 6;
                continue;
              }
              goto case 4;
          }
          if (index >= testWrapper.Length)
          {
            num2 = 5;
          }
          else
          {
            num3 = testWrapper[index];
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto label_7;
          }
label_10:
          num1 = num2;
        }
label_9:
        flag = true;
      }
label_14:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public BroadcasterRulesTemplate()
    {
      RegistryPagePage.ListMethod();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static BroadcasterRulesTemplate()
    {
      RegistryPagePage.ListMethod();
      BroadcasterRulesTemplate.m_TestWrapper = new int[3]
      {
        9,
        10,
        11
      };
    }

    internal static bool ComputeMethod() => true;

    internal static bool QueryMethod() => false;
  }
}
