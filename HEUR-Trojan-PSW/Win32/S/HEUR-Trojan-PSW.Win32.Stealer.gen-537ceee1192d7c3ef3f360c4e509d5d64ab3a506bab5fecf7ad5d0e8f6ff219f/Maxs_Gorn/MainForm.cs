// Decompiled with JetBrains decompiler
// Type: Maxs_Gorn.MainForm
// Assembly: ThrowHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FEB54C5-CA11-4457-9687-04CC2C090BB8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.Win32.Stealer.gen-537ceee1192d7c3ef3f360c4e509d5d64ab3a506bab5fecf7ad5d0e8f6ff219f.exe

using MaxsGorn;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.Layout;

namespace Maxs_Gorn
{
  public class MainForm : Form
  {
    private Palette palette;
    private int bmWidth = 16;
    private int bmHeight = 16;
    private byte[] bmData = new byte[256];
    private bool drawtext = false;
    private Bitmap canvas;
    private int zoom = 2;
    private bool mouseDraw = false;
    private DrawMode drawMode;
    private Stack<HistoryEvent> undoStack = new Stack<HistoryEvent>();
    private Stack<HistoryEvent> redoStack = new Stack<HistoryEvent>();
    public const string FileHeader = "TGRV";
    private IContainer components = (IContainer) null;
    private MenuStrip menuStrip1;
    private ToolStripMenuItem menuFile;
    private ToolStripMenuItem openImage;
    private ToolStripMenuItem saveImage;
    private ToolStripSeparator toolStripSeparator1;
    private ToolStripMenuItem importImage;
    private ToolStripMenuItem exportImage;
    private ToolStripSeparator toolStripSeparator2;
    private ToolStripMenuItem exit;
    private ToolStripMenuItem menuEdit;
    private ToolStripMenuItem drawToolStripMenuItem;
    private ToolStripMenuItem fillToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator3;
    private ToolStripMenuItem showPalette;
    private ToolStripMenuItem menuView;
    private ToolStripMenuItem zoomLabel;
    private ToolStripSeparator toolStripSeparator5;
    private ToolStripMenuItem zoomIn;
    private ToolStripMenuItem zoomOut;
    private ToolStripSeparator toolStripSeparator4;
    private ToolStripMenuItem zoom100;
    private ToolStripMenuItem zoom200;
    private ToolStripMenuItem zoom500;
    private ToolStripMenuItem newToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator6;
    private SaveFileDialog saveVGA;
    private SaveFileDialog saveExport;
    private ListView colorSelector;
    private PictureBox canvasBox;
    private ColumnHeader columnHeader1;
    private ColumnHeader columnHeader2;
    private ToolStripMenuItem pixerToolStripMenuItem;
    private OpenFileDialog openVGA;
    private OpenFileDialog openImport;
    private ToolStripMenuItem loadPaletteToolStripMenuItem;
    private ToolStripMenuItem helpToolStripMenuItem;
    private ToolStripMenuItem aboutToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator7;
    private ToolStripMenuItem showGrid;
    private ToolStripMenuItem undoAction;
    private ToolStripMenuItem redoAction;
    private ToolStripSeparator toolStripSeparator8;
    private Panel panel1;
    private StatusStrip statusBar;
    private ToolStripStatusLabel toolStripStatusLabel1;
    private ToolStripProgressBar importProgress;
    private BackgroundWorker importer;
    private ToolStripStatusLabel statusMode;
    private ToolStripMenuItem helpToolStripMenuItem1;
    private ToolStripMenuItem reportAnissueToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator9;
    private ColorDialog colorDialog1;
    private ToolStripMenuItem paletteToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator11;
    private ToolStripMenuItem builtinToolStripMenuItem;
    private ToolStripMenuItem grayscaleToolStripMenuItem;
    private ToolStripMenuItem vGAMode13hToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator10;
    private ToolStripMenuItem importToolStripMenuItem;
    private ToolStripMenuItem exportToolStripMenuItem;
    private ToolStripMenuItem збільшити1000ToolStripMenuItem;
    private ToolStripMenuItem добавитьТекстToolStripMenuItem;
    private ToolStripMenuItem відтінкиЧервоногоToolStripMenuItem;
    private ToolStripMenuItem відтінкиЗеленогоToolStripMenuItem;
    private ToolStripMenuItem відтінкиЖовтогоToolStripMenuItem;
    private ToolStripMenuItem відтінкиЖовтогоToolStripMenuItem1;
    private ToolStripMenuItem відтінкиЖовтогоToolStripMenuItem2;
    private ToolStripMenuItem відтінкиЖовтогоToolStripMenuItem3;
    private ToolStripMenuItem фільтриToolStripMenuItem;
    private ToolStripMenuItem гаммаToolStripMenuItem;
    private ToolStripMenuItem яркостьToolStripMenuItem;
    private ToolStripMenuItem контрастToolStripMenuItem;
    private ToolStripMenuItem вращениеИПереворотToolStripMenuItem;
    private ToolStripMenuItem на180ToolStripMenuItem;
    private ToolStripMenuItem на90ToolStripMenuItem;
    private ToolStripMenuItem на270ToolStripMenuItem;
    private ToolStripMenuItem добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem;
    private ToolStripMenuItem інвертуватиКольориToolStripMenuItem;
    private ToolStripMenuItem обрізкаФотоToolStripMenuItem;
    private FontDialog fontDialog1;
    private ToolStripMenuItem на90YToolStripMenuItem;
    private ToolStripMenuItem на180XYToolStripMenuItem;
    private ToolStripMenuItem на270XYToolStripMenuItem;

    public MainForm()
    {
      this.palette = Palette.VGA;
      this.InitializeComponent();
      this.ColorSelector_Update();
      this.statusMode.Text = this.drawMode.ToString();
      this.FullRedraw();
      this.UpdateStackButtons();
    }

    private void ColorSelector_Update()
    {
      while (this.colorSelector.Items.Count > 0)
        this.colorSelector.Items.RemoveAt(0);
      ImageList imageList = new ImageList();
      this.colorSelector.LargeImageList = imageList;
      this.colorSelector.SmallImageList = imageList;
      for (int index = 0; index < 256; ++index)
      {
        Color color = this.palette[index];
        Bitmap bitmap = new Bitmap(16, 16);
        for (int y = 0; y < 16; ++y)
        {
          for (int x = 0; x < 16; ++x)
            bitmap.SetPixel(x, y, color);
        }
        this.colorSelector.Items.Add(new ListViewItem(index.ToString(), index)
        {
          SubItems = {
            string.Format("#{0:X2}{1:X2}{2:X2}", (object) color.R, (object) color.G, (object) color.B)
          }
        });
        imageList.Images.Add((Image) bitmap);
      }
      this.FullRedraw();
    }

    private void ShowPalette_Click(object sender, EventArgs e)
    {
      this.bmWidth = 16;
      this.bmHeight = 256 / this.bmWidth;
      this.bmData = new byte[this.bmWidth * this.bmHeight];
      for (int index = 0; index <= (int) byte.MaxValue; ++index)
        this.bmData[index] = (byte) index;
      this.undoStack.Clear();
      this.redoStack.Clear();
      this.FullRedraw();
    }

    private Bitmap RenderBitmap(int scale, bool grid)
    {
      if (scale <= 0)
        return (Bitmap) null;
      Bitmap bitmap = new Bitmap(this.bmWidth * scale, this.bmHeight * scale);
      for (int index1 = 0; index1 < bitmap.Height; index1 += scale)
      {
        for (int index2 = 0; index2 < bitmap.Width; index2 += scale)
        {
          Color color = this.palette[(int) this.bmData[index1 / scale * this.bmWidth + index2 / scale]];
          for (int index3 = 0; index3 < scale; ++index3)
          {
            for (int index4 = 0; index4 < scale; ++index4)
              bitmap.SetPixel(index2 + index4, index1 + index3, color);
          }
        }
      }
      if (grid && scale > 1)
      {
        Color gray = Color.Gray;
        for (int x = scale - 1; x < bitmap.Width; x += scale)
        {
          for (int y = 0; y < bitmap.Height; ++y)
            bitmap.SetPixel(x, y, gray);
        }
        for (int y = scale - 1; y < bitmap.Height; y += scale)
        {
          for (int x = 0; x < bitmap.Width; ++x)
            bitmap.SetPixel(x, y, gray);
        }
      }
      return bitmap;
    }

    private void FullRedraw()
    {
      this.canvas = this.RenderBitmap(this.zoom, this.showGrid.Checked);
      this.Redraw();
    }

    private void Redraw()
    {
      try
      {
        this.canvasBox.Image = (Image) this.canvas;
        this.canvasBox.Refresh();
        this.canvasBox.Update();
      }
      catch (Exception ex)
      {
      }
    }

    private void RedrawUITrigger(object sender, EventArgs e) => this.FullRedraw();

    private void ViewToolStripMenuItem_Click(object sender, EventArgs e) => this.zoomLabel.Text = string.Format("Збільшити: {0}%", (object) (this.zoom * 100));

    private void ZoomIn_Click(object sender, EventArgs e)
    {
      ++this.zoom;
      this.FullRedraw();
    }

    private void ZoomOut_Click(object sender, EventArgs e)
    {
      if (this.zoom > 1)
        --this.zoom;
      this.FullRedraw();
    }

    private void ZoomReset_Click(object sender, EventArgs e)
    {
      this.zoom = int.Parse((sender as ToolStripItem).Tag as string);
      this.FullRedraw();
    }

    private void OpenImg(string filename)
    {
      BinaryReader binaryReader = new BinaryReader((Stream) new FileStream(filename, FileMode.Open), Encoding.ASCII);
      this.bmWidth = !(new string(binaryReader.ReadChars("TGRV".Length)) != "TGRV") ? (int) binaryReader.ReadUInt16() : throw new Exception("Недійсний формат");
      this.bmHeight = (int) binaryReader.ReadUInt16();
      this.bmData = binaryReader.ReadBytes(this.bmWidth * this.bmHeight);
      binaryReader.Close();
    }

    private void OpenImage_Click(object sender, EventArgs e)
    {
      if (this.openVGA.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.OpenImg(this.openVGA.FileName);
      this.undoStack.Clear();
      this.redoStack.Clear();
      this.FullRedraw();
    }

    private void SaveImage_Click(object sender, EventArgs e)
    {
      DialogResult dialogResult = this.saveVGA.ShowDialog((IWin32Window) this);
      if (dialogResult == DialogResult.Cancel && e is FormClosingEventArgs)
        (e as FormClosingEventArgs).Cancel = true;
      if (dialogResult != DialogResult.OK)
        return;
      BinaryWriter binaryWriter = new BinaryWriter((Stream) new FileStream(this.saveVGA.FileName, FileMode.Create), Encoding.ASCII);
      binaryWriter.Write("TGRV".ToCharArray());
      binaryWriter.Write((ushort) this.bmWidth);
      binaryWriter.Write((ushort) this.bmHeight);
      binaryWriter.Write(this.bmData);
      binaryWriter.Close();
    }

    private void ImportImage_Click(object sender, EventArgs e)
    {
      if (this.openImport.ShowDialog() != DialogResult.OK)
        return;
      this.newToolStripMenuItem.Enabled = false;
      this.openImage.Enabled = false;
      this.saveImage.Enabled = false;
      this.exportImage.Enabled = false;
      this.importImage.Enabled = false;
      this.showPalette.Enabled = false;
      this.zoom100.Enabled = false;
      this.zoom200.Enabled = false;
      this.zoom500.Enabled = false;
      this.zoomIn.Enabled = false;
      this.zoomOut.Enabled = false;
      this.showGrid.Enabled = false;
      this.importProgress.Visible = true;
      this.importProgress.Value = 0;
      this.undoStack.Clear();
      this.redoStack.Clear();
      this.UpdateStackButtons();
      this.importer.RunWorkerAsync();
    }

    private void ExportImage_Click(object sender, EventArgs e)
    {
      if (this.saveExport.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.RenderBitmap(1, false).Save(this.saveExport.FileName);
    }

    private void DoMouse(int mouseX, int mouseY)
    {
      if (this.importer.IsBusy)
        return;
      byte color = 0;
      if (this.colorSelector.SelectedItems.Count > 0)
        color = byte.Parse(this.colorSelector.SelectedItems[0].Text);
      mouseX /= this.zoom;
      mouseY /= this.zoom;
      if (mouseX >= this.bmWidth || mouseY >= this.bmHeight)
        return;
      int index = mouseY * this.bmWidth + mouseX;
      if (index < 0 || index >= this.bmData.Length)
        return;
      HashSet<PixelChange> pixelChanges = new HashSet<PixelChange>();
      switch (this.drawMode)
      {
        case DrawMode.Draw:
          PixelChange pixelChange = this.DrawPixel(mouseX, mouseY, color);
          if (pixelChange != null)
            pixelChanges.Add(pixelChange);
          this.redoStack.Clear();
          break;
        case DrawMode.Fill:
          ISet<PixelChange> other = this.FloodFill(mouseX, mouseY, color);
          if (other != null)
            pixelChanges.UnionWith((IEnumerable<PixelChange>) other);
          this.redoStack.Clear();
          break;
        case DrawMode.Picker:
          this.colorSelector.Items[(int) this.bmData[index]].Selected = true;
          break;
        case DrawMode.DrawText:
          this.DrawText(mouseX, mouseY, color);
          break;
        default:
          throw new NotImplementedException("Draw mode " + this.drawMode.ToString() + " not implemented.");
      }
      if (pixelChanges.Count > 0)
        this.undoStack.Push(new HistoryEvent((ISet<PixelChange>) pixelChanges));
      this.UpdateStackButtons();
      this.Redraw();
    }

    private void DrawText(int x, int y, byte color) => Graphics.FromImage((Image) this.canvas).DrawString("Your Text Here", new Font(new FontFamily("Times New Roman"), 12f, FontStyle.Regular, GraphicsUnit.Pixel), (Brush) new SolidBrush(Color.AliceBlue), new PointF((float) (x * this.zoom), (float) (y * this.zoom)));

    private void NewToolStripMenuItem_Click(object sender, EventArgs e)
    {
      NewArtwork newArtwork = new NewArtwork();
      if (newArtwork.ShowDialog() != DialogResult.OK)
        return;
      this.bmWidth = (int) newArtwork.bmWidth.Value;
      this.bmHeight = (int) newArtwork.bmHeight.Value;
      this.bmData = new byte[this.bmWidth * this.bmHeight];
      this.FullRedraw();
    }

    private void CanvasBox_MouseDown(object sender, MouseEventArgs e)
    {
      this.mouseDraw = true;
      this.DoMouse(e.X, e.Y);
    }

    private void CanvasBox_MouseUp(object sender, MouseEventArgs e)
    {
      this.mouseDraw = false;
      this.DoMouse(e.X, e.Y);
    }

    private void CanvasBox_MouseMove(object sender, MouseEventArgs e)
    {
      if (!this.importer.IsBusy)
        this.toolStripStatusLabel1.Text = string.Format("{0}, {1}", (object) (e.X / this.zoom), (object) (e.Y / this.zoom));
      if (!this.mouseDraw)
        return;
      this.DoMouse(e.X, e.Y);
    }

    private void CanvasBox_MouseLeave(object sender, EventArgs e) => this.mouseDraw = false;

    private PixelChange DrawPixel(int x, int y, byte color)
    {
      int offset = y * this.bmWidth + x;
      if (offset < 0 || offset >= this.bmData.Length || (int) this.bmData[offset] == (int) color)
        return (PixelChange) null;
      PixelChange pixelChange = new PixelChange(offset, this.bmData[offset], color);
      this.bmData[offset] = color;
      Graphics graphics = Graphics.FromImage((Image) this.canvas);
      if (!this.drawtext)
        ;
      graphics.FillRectangle((Brush) new SolidBrush(this.palette[(int) color]), x * this.zoom, y * this.zoom, this.zoom - (this.showGrid.Checked ? 1 : 0), this.zoom - (this.showGrid.Checked ? 1 : 0));
      return pixelChange;
    }

    private ISet<PixelChange> FloodFill(int x, int y, byte color)
    {
      int num1 = y * this.bmWidth + x;
      if (num1 < 0 || num1 >= this.bmData.Length)
        return (ISet<PixelChange>) null;
      HashSet<PixelChange> pixelChangeSet = new HashSet<PixelChange>();
      HashSet<int> intSet = new HashSet<int>();
      Queue<int> intQueue = new Queue<int>();
      intQueue.Enqueue(y * this.bmWidth + x);
      Graphics graphics = Graphics.FromImage((Image) this.canvas);
      while (intQueue.Count > 0)
      {
        int offset = intQueue.Dequeue();
        byte oldColor = this.bmData[offset];
        if (!intSet.Contains(offset))
        {
          pixelChangeSet.Add(new PixelChange(offset, oldColor, color));
          this.bmData[offset] = color;
          graphics.FillRectangle((Brush) new SolidBrush(this.palette[(int) color]), offset % this.bmWidth * this.zoom, offset / this.bmWidth * this.zoom, this.zoom - (this.showGrid.Checked ? 1 : 0), this.zoom - (this.showGrid.Checked ? 1 : 0));
          intSet.Add(offset);
          int[] numArray = new int[4]
          {
            -this.bmWidth,
            this.bmWidth,
            -1,
            1
          };
          foreach (int num2 in numArray)
          {
            int index = offset + num2;
            try
            {
              if ((int) oldColor == (int) this.bmData[index])
              {
                if (!intSet.Contains(index))
                  intQueue.Enqueue(index);
              }
            }
            catch
            {
            }
          }
        }
      }
      return (ISet<PixelChange>) pixelChangeSet;
    }

    private void Exit_Click(object sender, EventArgs e) => this.Close();

    private void UpdateStackButtons()
    {
      this.undoAction.Enabled = this.undoStack.Count > 0;
      this.redoAction.Enabled = this.redoStack.Count > 0;
    }

    private void UndoAction_Click(object sender, EventArgs e)
    {
      if (this.undoStack.Count <= 0)
        return;
      HistoryEvent historyEvent = this.undoStack.Pop();
      foreach (PixelChange change in (IEnumerable<PixelChange>) historyEvent.changes)
        this.DrawPixel(change.Offset % this.bmWidth, change.Offset / this.bmWidth, change.OldColor);
      this.redoStack.Push(historyEvent);
      this.Redraw();
      this.UpdateStackButtons();
    }

    private void RedoAction_Click(object sender, EventArgs e)
    {
      if (this.redoStack.Count <= 0)
        return;
      HistoryEvent historyEvent = this.redoStack.Pop();
      foreach (PixelChange change in (IEnumerable<PixelChange>) historyEvent.changes)
        this.DrawPixel(change.Offset % this.bmWidth, change.Offset / this.bmWidth, change.NewColor);
      this.undoStack.Push(historyEvent);
      this.Redraw();
      this.UpdateStackButtons();
    }

    private void Importer_DoWork(object sender, DoWorkEventArgs e)
    {
      Bitmap bitmap = new Bitmap(this.openImport.FileName);
      int width = bitmap.Width;
      int height = bitmap.Height;
      byte[] numArray1 = new byte[width * height];
      int num1 = 0;
      for (int y = 0; y < height; ++y)
      {
        for (int x = 0; x < width; ++x)
        {
          Color pixel = bitmap.GetPixel(x, y);
          if (num1++ == 10)
          {
            this.importer.ReportProgress(100 * (y * width + x) / numArray1.Length, (object) new ImporterStatus(y * width + x, numArray1.Length));
            num1 = 0;
          }
          if (pixel.A == (byte) 0)
          {
            numArray1[y * width + x] = (byte) 0;
          }
          else
          {
            int num2 = -1;
            int maxValue = int.MaxValue;
            int[] numArray2 = new int[256];
            for (int key = 0; key < numArray2.Length; ++key)
            {
              Color color = this.palette[key];
              numArray2[key] += Math.Abs((int) pixel.R - (int) color.R);
              numArray2[key] += Math.Abs((int) pixel.G - (int) color.G);
              numArray2[key] += Math.Abs((int) pixel.B - (int) color.B);
              if (numArray2[key] < maxValue)
              {
                maxValue = numArray2[key];
                num2 = key;
              }
            }
            numArray1[y * width + x] = (byte) num2;
          }
        }
      }
      this.importer.ReportProgress(100, (object) new ImporterStatus(true, numArray1.Length));
      this.bmWidth = width;
      this.bmHeight = height;
      this.bmData = numArray1;
      this.canvas = this.RenderBitmap(this.zoom, this.showGrid.Checked);
      e.Result = (object) true;
    }

    private void Importer_ProgressChanged(object sender, ProgressChangedEventArgs e)
    {
      this.importProgress.Value = e.ProgressPercentage;
      this.toolStripStatusLabel1.Text = e.UserState.ToString();
    }

    private void Importer_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
      this.importProgress.Visible = false;
      this.toolStripStatusLabel1.Text = "";
      this.newToolStripMenuItem.Enabled = true;
      this.openImage.Enabled = true;
      this.saveImage.Enabled = true;
      this.exportImage.Enabled = true;
      this.importImage.Enabled = true;
      this.showPalette.Enabled = true;
      this.zoom100.Enabled = true;
      this.zoom200.Enabled = true;
      this.zoom500.Enabled = true;
      this.zoomIn.Enabled = true;
      this.zoomOut.Enabled = true;
      this.showGrid.Enabled = true;
      this.Redraw();
    }

    private void HelpToolStripMenuItem1_Click(object sender, EventArgs e) => Process.Start("https://www.instagram.com/not_your_maxson/?hl=uk");

    private void ReportAnissueToolStripMenuItem_Click(object sender, EventArgs e) => Process.Start("mailto:maximus56133@gmail.com");

    private void DrawTool_Select(object sender, EventArgs e)
    {
      foreach (object dropDownItem in (ArrangedElementCollection) this.menuEdit.DropDownItems)
      {
        if (dropDownItem is ToolStripMenuItem)
          (dropDownItem as ToolStripMenuItem).Checked = false;
      }
      if (!(sender is ToolStripMenuItem))
        return;
      ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem) sender;
      this.drawMode = (DrawMode) Enum.Parse(this.drawMode.GetType(), toolStripMenuItem.Tag as string);
      toolStripMenuItem.Checked = true;
      this.statusMode.Text = this.drawMode.ToString();
    }

    private void ColorSelector_DoubleClick(object sender, EventArgs e)
    {
      byte key = 0;
      if (this.colorSelector.SelectedItems.Count > 0)
        key = byte.Parse(this.colorSelector.SelectedItems[0].Text);
      this.colorDialog1.Color = this.palette[(int) key];
      if (this.colorDialog1.ShowDialog() != DialogResult.OK)
        return;
      this.palette[(int) key] = this.colorDialog1.Color;
      this.ColorSelector_Update();
    }

    private void GrayscaleToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.palette = Palette.Grayscale;
      this.ColorSelector_Update();
    }

    private void VGAMode13hToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.palette = Palette.VGA;
      this.ColorSelector_Update();
    }

    private void ImportToolStripMenuItem_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.Filter = "PaintMax Gorn|*.gorn";
      openFileDialog.DefaultExt = "gorn";
      openFileDialog.Title = "Імпортуйте палітру ілюстрацій";
      if (openFileDialog.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.palette = Palette.Load(openFileDialog.FileName);
      this.ColorSelector_Update();
    }

    private void ExportToolStripMenuItem_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "PaintMax Gorn|*.gorn";
      saveFileDialog.DefaultExt = "gorn";
      saveFileDialog.Title = "Імпортуйте палітру ілюстрацій";
      if (saveFileDialog.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.palette.Save(saveFileDialog.FileName);
    }

    private void MainForm_Load(object sender, EventArgs e) => this.fontDialog1.ShowColor = true;

    private void importProgress_Click(object sender, EventArgs e)
    {
    }

    private void changeColorToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void canvasBox_Click(object sender, EventArgs e)
    {
    }

    private void AboutToolStripMenuItem_Click(object sender, EventArgs e)
    {
      int num = (int) new AboutBox().ShowDialog();
    }

    private void збільшити1000ToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.zoom = int.Parse((sender as ToolStripItem).Tag as string);
      this.FullRedraw();
    }

    private void aboutToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      int num = (int) new AboutBox().ShowDialog();
    }

    private void loadPaletteToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void добавитьТекстToolStripMenuItem_Click(object sender, EventArgs e)
    {
      foreach (object dropDownItem in (ArrangedElementCollection) this.menuEdit.DropDownItems)
      {
        if (dropDownItem is ToolStripMenuItem)
          (dropDownItem as ToolStripMenuItem).Checked = false;
      }
      if (!(sender is ToolStripMenuItem))
        return;
      ToolStripMenuItem toolStripMenuItem = (ToolStripMenuItem) sender;
      this.drawMode = (DrawMode) Enum.Parse(this.drawMode.GetType(), toolStripMenuItem.Tag as string);
      toolStripMenuItem.Checked = true;
      this.statusMode.Text = this.drawMode.ToString();
    }

    private void canvasBox_Paint(object sender, PaintEventArgs e)
    {
    }

    private void colorSelector_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    private void відтінкиЧервоногоToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.palette = Palette.RedScale;
      this.ColorSelector_Update();
    }

    private void відтінкиЗеленогоToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.palette = Palette.PurpleScale;
      this.ColorSelector_Update();
    }

    private void відтінкиЖовтогоToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.palette = Palette.BlueScale;
      this.ColorSelector_Update();
    }

    private void відтінкиЖовтогоToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      this.palette = Palette.GreenScale;
      this.ColorSelector_Update();
    }

    private void відтінкиЖовтогоToolStripMenuItem2_Click(object sender, EventArgs e)
    {
      this.palette = Palette.LightBlueScale;
      this.ColorSelector_Update();
    }

    private void відтінкиЖовтогоToolStripMenuItem3_Click(object sender, EventArgs e)
    {
      this.palette = Palette.YellowScale;
      this.ColorSelector_Update();
    }

    private void гаммаToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void гаммаToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      Gamma gamma1 = new Gamma(2, 5, "Гамма R");
      if (gamma1.ShowDialog() == DialogResult.OK)
        num1 = gamma1.value;
      Gamma gamma2 = new Gamma(2, 5, "Гамма G");
      if (gamma2.ShowDialog() == DialogResult.OK)
        num2 = gamma2.value;
      Gamma gamma3 = new Gamma(2, 5, "Гамма B");
      if (gamma3.ShowDialog() == DialogResult.OK)
        num3 = gamma3.value;
      if (num1 == 0 || num2 == 0 || num3 == 0)
        return;
      this.zoom = 1;
      this.FullRedraw();
      this.SetGamma((double) (num1 / 10), (double) (num2 / 10), (double) (num3 / 10));
    }

    private byte[] CreateGammaArray(double color)
    {
      byte[] gammaArray = new byte[256];
      for (int index = 0; index < 256; ++index)
        gammaArray[index] = (byte) Math.Min((int) byte.MaxValue, (int) ((double) byte.MaxValue * Math.Pow((double) index / (double) byte.MaxValue, 1.0 / color) + 0.5));
      return gammaArray;
    }

    private void SetBrightness(int brightness)
    {
      Bitmap image = (Bitmap) this.canvasBox.Image;
      if (brightness < -255)
        brightness = -255;
      if (brightness > (int) byte.MaxValue)
        brightness = (int) byte.MaxValue;
      for (int x = 0; x < image.Width; ++x)
      {
        for (int y = 0; y < image.Height; ++y)
        {
          Color pixel = image.GetPixel(x, y);
          int red = (int) pixel.R + brightness;
          int green = (int) pixel.G + brightness;
          int blue = (int) pixel.B + brightness;
          if (red < 0)
            red = 1;
          if (red > (int) byte.MaxValue)
            red = (int) byte.MaxValue;
          if (green < 0)
            green = 1;
          if (green > (int) byte.MaxValue)
            green = (int) byte.MaxValue;
          if (blue < 0)
            blue = 1;
          if (blue > (int) byte.MaxValue)
            blue = (int) byte.MaxValue;
          image.SetPixel(x, y, Color.FromArgb((int) (byte) red, (int) (byte) green, (int) (byte) blue));
        }
      }
      this.SaveSLoadEffect(image);
    }

    private void SaveSLoadEffect(Bitmap bmap)
    {
      try
      {
        bmap.Save("def.png", ImageFormat.Png);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "Notifications", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      Bitmap bitmap = new Bitmap("def.png");
      int width = bitmap.Width;
      int height = bitmap.Height;
      byte[] numArray1 = new byte[width * height];
      int num1 = 0;
      for (int y = 0; y < height; ++y)
      {
        for (int x = 0; x < width; ++x)
        {
          Color pixel = bitmap.GetPixel(x, y);
          if (num1++ == 10)
            num1 = 0;
          if (pixel.A == (byte) 0)
          {
            numArray1[y * width + x] = (byte) 0;
          }
          else
          {
            int num2 = -1;
            int maxValue = int.MaxValue;
            int[] numArray2 = new int[256];
            for (int key = 0; key < numArray2.Length; ++key)
            {
              Color color = this.palette[key];
              numArray2[key] += Math.Abs((int) pixel.R - (int) color.R);
              numArray2[key] += Math.Abs((int) pixel.G - (int) color.G);
              numArray2[key] += Math.Abs((int) pixel.B - (int) color.B);
              if (numArray2[key] < maxValue)
              {
                maxValue = numArray2[key];
                num2 = key;
              }
            }
            numArray1[y * width + x] = (byte) num2;
          }
        }
      }
      this.bmWidth = width;
      this.bmHeight = height;
      this.bmData = numArray1;
      this.canvas = this.RenderBitmap(this.zoom, this.showGrid.Checked);
      this.FullRedraw();
    }

    private void SetGamma(double red, double green, double blue)
    {
      Bitmap image = (Bitmap) this.canvasBox.Image;
      byte[] gammaArray1 = this.CreateGammaArray(red);
      byte[] gammaArray2 = this.CreateGammaArray(green);
      byte[] gammaArray3 = this.CreateGammaArray(blue);
      for (int x = 0; x < image.Width; ++x)
      {
        for (int y = 0; y < image.Height; ++y)
        {
          Color pixel = image.GetPixel(x, y);
          image.SetPixel(x, y, Color.FromArgb((int) gammaArray1[(int) pixel.R], (int) gammaArray2[(int) pixel.G], (int) gammaArray3[(int) pixel.B]));
        }
      }
      this.SaveSLoadEffect(image);
    }

    private void яркостьToolStripMenuItem_Click(object sender, EventArgs e)
    {
      Gamma gamma = new Gamma(-255, (int) byte.MaxValue, "Гамма");
      if (gamma.ShowDialog() != DialogResult.OK)
        return;
      this.zoom = 1;
      this.FullRedraw();
      this.SetBrightness(gamma.value);
    }

    public void DrawOutCropArea(int xPosition, int yPosition, int width, int height)
    {
      Bitmap image = (Bitmap) this.canvasBox.Image;
      Graphics graphics = Graphics.FromImage((Image) image);
      Brush brush = new Pen(Color.FromArgb(150, Color.White)).Brush;
      Rectangle rect1 = new Rectangle(0, 0, this.canvasBox.Width, yPosition);
      Rectangle rect2 = new Rectangle(0, yPosition, xPosition, height);
      Rectangle rect3 = new Rectangle(0, yPosition + height, this.canvasBox.Width, this.canvasBox.Height);
      Rectangle rect4 = new Rectangle(xPosition + width, yPosition, this.canvasBox.Width - xPosition - width, height);
      graphics.FillRectangle(brush, rect1);
      graphics.FillRectangle(brush, rect2);
      graphics.FillRectangle(brush, rect3);
      graphics.FillRectangle(brush, rect4);
      this.canvasBox.Image = (Image) image.Clone();
    }

    private void контрастToolStripMenuItem_Click(object sender, EventArgs e)
    {
      Gamma gamma = new Gamma(-100, 100, "Контраст");
      if (gamma.ShowDialog() != DialogResult.OK)
        return;
      this.zoom = 1;
      this.FullRedraw();
      this.SetContrast((double) gamma.value);
    }

    private void SetContrast(double contrast)
    {
      Bitmap image = (Bitmap) this.canvasBox.Image;
      if (contrast < -100.0)
        contrast = -100.0;
      if (contrast > 100.0)
        contrast = 100.0;
      contrast = (100.0 + contrast) / 100.0;
      contrast *= contrast;
      for (int x = 0; x < image.Width; ++x)
      {
        for (int y = 0; y < image.Height; ++y)
        {
          Color pixel = image.GetPixel(x, y);
          double red = (((double) pixel.R / (double) byte.MaxValue - 0.5) * contrast + 0.5) * (double) byte.MaxValue;
          if (red < 0.0)
            red = 0.0;
          if (red > (double) byte.MaxValue)
            red = (double) byte.MaxValue;
          double green = (((double) pixel.G / (double) byte.MaxValue - 0.5) * contrast + 0.5) * (double) byte.MaxValue;
          if (green < 0.0)
            green = 0.0;
          if (green > (double) byte.MaxValue)
            green = (double) byte.MaxValue;
          double blue = (((double) pixel.B / (double) byte.MaxValue - 0.5) * contrast + 0.5) * (double) byte.MaxValue;
          if (blue < 0.0)
            blue = 0.0;
          if (blue > (double) byte.MaxValue)
            blue = (double) byte.MaxValue;
          image.SetPixel(x, y, Color.FromArgb((int) (byte) red, (int) (byte) green, (int) (byte) blue));
        }
      }
      this.SaveSLoadEffect(image);
    }

    private void RotateFlip(RotateFlipType rotateFlipType)
    {
      Bitmap image = (Bitmap) this.canvasBox.Image;
      image.RotateFlip(rotateFlipType);
      this.SaveSLoadEffect(image);
    }

    private void фільтриToolStripMenuItem_Click(object sender, EventArgs e)
    {
    }

    private void на180ToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() => this.RotateFlip(RotateFlipType.Rotate180FlipX)), TaskCreationOptions.AttachedToParent);
    })).Wait();

    private void на90ToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() => this.RotateFlip(RotateFlipType.Rotate90FlipX)), TaskCreationOptions.AttachedToParent);
    })).Wait();

    private void на270ToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() => this.RotateFlip(RotateFlipType.Rotate270FlipX)), TaskCreationOptions.AttachedToParent);
    })).Wait();

    public void InsertText(
      string text,
      int xPosition,
      int yPosition,
      Font font,
      Color colorName1,
      Color colorName2)
    {
      Bitmap image = (Bitmap) this.canvasBox.Image;
      Graphics graphics = Graphics.FromImage((Image) image);
      Color color1 = colorName1;
      Color color2 = colorName2;
      int num = (int) ((double) text.Length * (double) font.Size);
      LinearGradientBrush linearGradientBrush = new LinearGradientBrush(new Rectangle(0, 0, num == 0 ? 10 : num, (int) font.Size), color1, color2, LinearGradientMode.Vertical);
      graphics.DrawString(text, font, (Brush) linearGradientBrush, (float) xPosition, (float) yPosition);
      this.SaveSLoadEffect(image);
    }

    private void добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem_Click(
      object sender,
      EventArgs e)
    {
      byte num1 = 0;
      byte num2 = 0;
      if (this.colorSelector.SelectedItems.Count > 0)
        num1 = byte.Parse(this.colorSelector.SelectedItems[0].Text);
      Color color1 = this.colorDialog1.Color;
      if (this.colorDialog1.ShowDialog() != DialogResult.OK)
        return;
      if (this.colorSelector.SelectedItems.Count > 0)
        num2 = byte.Parse(this.colorSelector.SelectedItems[0].Text);
      Color color22 = this.colorDialog1.Color;
      DialogResult dialogResult = this.colorDialog1.ShowDialog();
      if (dialogResult != DialogResult.OK)
        return;
      this.fontDialog1.ShowDialog();
      if (dialogResult != DialogResult.OK)
        return;
      Font font = this.fontDialog1.Font;
      Task.Factory.StartNew((Action) (() =>
      {
        this.zoom = 1;
        this.FullRedraw();
        Task.Factory.StartNew((Action) (() => this.InsertText("max gornitskiy test", 40, 40, font, color1, color22)), TaskCreationOptions.AttachedToParent);
      })).Wait();
    }

    private void інвертуватиКольориToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() => this.SetInvert()), TaskCreationOptions.AttachedToParent);
    })).Wait();

    private void SetInvert()
    {
      Bitmap image = (Bitmap) this.canvasBox.Image;
      for (int x = 0; x < image.Width; ++x)
      {
        for (int y = 0; y < image.Height; ++y)
        {
          Color pixel = image.GetPixel(x, y);
          image.SetPixel(x, y, Color.FromArgb((int) byte.MaxValue - (int) pixel.R, (int) byte.MaxValue - (int) pixel.G, (int) byte.MaxValue - (int) pixel.B));
        }
      }
      this.SaveSLoadEffect(image);
    }

    public void Resize(int newWidth, int newHeight)
    {
      if (newWidth == 0 || newHeight == 0)
        return;
      Bitmap image = (Bitmap) this.canvasBox.Image;
      Bitmap bitmap = new Bitmap(newWidth, newHeight, image.PixelFormat);
      double num1 = (double) image.Width / (double) newWidth;
      double num2 = (double) image.Height / (double) newHeight;
      Color color1 = new Color();
      Color color2 = new Color();
      Color color3 = new Color();
      Color color4 = new Color();
      for (int x1 = 0; x1 < bitmap.Width; ++x1)
      {
        for (int y1 = 0; y1 < bitmap.Height; ++y1)
        {
          int x2 = (int) Math.Floor((double) x1 * num1);
          int y2 = (int) Math.Floor((double) y1 * num2);
          int x3 = x2 + 1;
          if (x3 >= image.Width)
            x3 = x2;
          int y3 = y2 + 1;
          if (y3 >= image.Height)
            y3 = y2;
          double num3 = (double) x1 * num1 - (double) x2;
          double num4 = (double) y1 * num2 - (double) y2;
          double num5 = 1.0 - num3;
          double num6 = 1.0 - num4;
          Color pixel1 = image.GetPixel(x2, y2);
          Color pixel2 = image.GetPixel(x3, y2);
          Color pixel3 = image.GetPixel(x2, y3);
          Color pixel4 = image.GetPixel(x3, y3);
          byte num7 = (byte) (num5 * (double) pixel1.B + num3 * (double) pixel2.B);
          byte num8 = (byte) (num5 * (double) pixel3.B + num3 * (double) pixel4.B);
          byte blue = (byte) (num6 * (double) num7 + num4 * (double) num8);
          byte num9 = (byte) (num5 * (double) pixel1.G + num3 * (double) pixel2.G);
          byte num10 = (byte) (num5 * (double) pixel3.G + num3 * (double) pixel4.G);
          byte green = (byte) (num6 * (double) num9 + num4 * (double) num10);
          byte num11 = (byte) (num5 * (double) pixel1.R + num3 * (double) pixel2.R);
          byte num12 = (byte) (num5 * (double) pixel3.R + num3 * (double) pixel4.R);
          byte red = (byte) (num6 * (double) num11 + num4 * (double) num12);
          bitmap.SetPixel(x1, y1, Color.FromArgb((int) byte.MaxValue, (int) red, (int) green, (int) blue));
        }
      }
    }

    private void обрізкаФотоToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      MaxsGorn.Crop gamma = new MaxsGorn.Crop(this.canvasBox.Width, this.canvasBox.Height);
      if (gamma.ShowDialog() != DialogResult.OK)
        return;
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() =>
      {
        this.DrawOutCropArea(gamma.value1, gamma.value2, gamma.value3, gamma.value4);
        if (MessageBox.Show("Crop?", "Notifications", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
          this.Crop(gamma.value1, gamma.value2, gamma.value3, gamma.value4);
        else
          this.FullRedraw();
      }), TaskCreationOptions.LongRunning);
    })).Wait();

    private void Crop(int xPosition, int yPosition, int width, int height)
    {
      Bitmap bitmap = (Bitmap) this.canvasBox.Image.Clone();
      if (xPosition + width > bitmap.Width)
        width = bitmap.Width - xPosition;
      if (yPosition + height > this.canvasBox.Height)
        height = bitmap.Height - yPosition;
      Rectangle rect = new Rectangle(xPosition, yPosition, width, height);
      this.SaveSLoadEffect(bitmap.Clone(rect, bitmap.PixelFormat));
    }

    private void на90YToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() => this.RotateFlip(RotateFlipType.Rotate270FlipNone)), TaskCreationOptions.AttachedToParent);
    })).Wait();

    private void на180XYToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() => this.RotateFlip(RotateFlipType.RotateNoneFlipNone)), TaskCreationOptions.AttachedToParent);
    })).Wait();

    private void на270XYToolStripMenuItem_Click(object sender, EventArgs e) => Task.Factory.StartNew((Action) (() =>
    {
      this.zoom = 1;
      this.FullRedraw();
      Task.Factory.StartNew((Action) (() => this.RotateFlip(RotateFlipType.Rotate90FlipNone)), TaskCreationOptions.AttachedToParent);
    })).Wait();

    private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (this.undoStack.Count > 0)
      {
        DialogResult dialogResult = MessageBox.Show("Ви хочете зберегти свою роботу перед тим, як вийти?", "Зберегти та вийти", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation);
        if (dialogResult == DialogResult.Cancel)
          e.Cancel = true;
        if (dialogResult == DialogResult.Yes)
          this.SaveImage_Click(sender, (EventArgs) e);
      }
      this.importer.CancelAsync();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.menuStrip1 = new MenuStrip();
      this.menuFile = new ToolStripMenuItem();
      this.newToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator6 = new ToolStripSeparator();
      this.openImage = new ToolStripMenuItem();
      this.saveImage = new ToolStripMenuItem();
      this.toolStripSeparator1 = new ToolStripSeparator();
      this.importImage = new ToolStripMenuItem();
      this.exportImage = new ToolStripMenuItem();
      this.toolStripSeparator2 = new ToolStripSeparator();
      this.exit = new ToolStripMenuItem();
      this.menuEdit = new ToolStripMenuItem();
      this.undoAction = new ToolStripMenuItem();
      this.redoAction = new ToolStripMenuItem();
      this.toolStripSeparator8 = new ToolStripSeparator();
      this.drawToolStripMenuItem = new ToolStripMenuItem();
      this.fillToolStripMenuItem = new ToolStripMenuItem();
      this.pixerToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator3 = new ToolStripSeparator();
      this.showPalette = new ToolStripMenuItem();
      this.loadPaletteToolStripMenuItem = new ToolStripMenuItem();
      this.добавитьТекстToolStripMenuItem = new ToolStripMenuItem();
      this.menuView = new ToolStripMenuItem();
      this.zoomLabel = new ToolStripMenuItem();
      this.toolStripSeparator5 = new ToolStripSeparator();
      this.zoomIn = new ToolStripMenuItem();
      this.zoomOut = new ToolStripMenuItem();
      this.toolStripSeparator4 = new ToolStripSeparator();
      this.zoom100 = new ToolStripMenuItem();
      this.zoom200 = new ToolStripMenuItem();
      this.zoom500 = new ToolStripMenuItem();
      this.toolStripSeparator7 = new ToolStripSeparator();
      this.showGrid = new ToolStripMenuItem();
      this.збільшити1000ToolStripMenuItem = new ToolStripMenuItem();
      this.paletteToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator11 = new ToolStripSeparator();
      this.builtinToolStripMenuItem = new ToolStripMenuItem();
      this.grayscaleToolStripMenuItem = new ToolStripMenuItem();
      this.vGAMode13hToolStripMenuItem = new ToolStripMenuItem();
      this.відтінкиЧервоногоToolStripMenuItem = new ToolStripMenuItem();
      this.відтінкиЗеленогоToolStripMenuItem = new ToolStripMenuItem();
      this.відтінкиЖовтогоToolStripMenuItem = new ToolStripMenuItem();
      this.відтінкиЖовтогоToolStripMenuItem1 = new ToolStripMenuItem();
      this.відтінкиЖовтогоToolStripMenuItem2 = new ToolStripMenuItem();
      this.відтінкиЖовтогоToolStripMenuItem3 = new ToolStripMenuItem();
      this.toolStripSeparator10 = new ToolStripSeparator();
      this.importToolStripMenuItem = new ToolStripMenuItem();
      this.exportToolStripMenuItem = new ToolStripMenuItem();
      this.фільтриToolStripMenuItem = new ToolStripMenuItem();
      this.гаммаToolStripMenuItem = new ToolStripMenuItem();
      this.яркостьToolStripMenuItem = new ToolStripMenuItem();
      this.контрастToolStripMenuItem = new ToolStripMenuItem();
      this.інвертуватиКольориToolStripMenuItem = new ToolStripMenuItem();
      this.вращениеИПереворотToolStripMenuItem = new ToolStripMenuItem();
      this.на90ToolStripMenuItem = new ToolStripMenuItem();
      this.на180ToolStripMenuItem = new ToolStripMenuItem();
      this.на270ToolStripMenuItem = new ToolStripMenuItem();
      this.на90YToolStripMenuItem = new ToolStripMenuItem();
      this.на180XYToolStripMenuItem = new ToolStripMenuItem();
      this.на270XYToolStripMenuItem = new ToolStripMenuItem();
      this.добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem = new ToolStripMenuItem();
      this.обрізкаФотоToolStripMenuItem = new ToolStripMenuItem();
      this.helpToolStripMenuItem = new ToolStripMenuItem();
      this.helpToolStripMenuItem1 = new ToolStripMenuItem();
      this.reportAnissueToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator9 = new ToolStripSeparator();
      this.aboutToolStripMenuItem = new ToolStripMenuItem();
      this.saveVGA = new SaveFileDialog();
      this.saveExport = new SaveFileDialog();
      this.colorSelector = new ListView();
      this.columnHeader1 = new ColumnHeader();
      this.columnHeader2 = new ColumnHeader();
      this.openVGA = new OpenFileDialog();
      this.openImport = new OpenFileDialog();
      this.panel1 = new Panel();
      this.canvasBox = new PictureBox();
      this.statusBar = new StatusStrip();
      this.statusMode = new ToolStripStatusLabel();
      this.importProgress = new ToolStripProgressBar();
      this.toolStripStatusLabel1 = new ToolStripStatusLabel();
      this.importer = new BackgroundWorker();
      this.colorDialog1 = new ColorDialog();
      this.fontDialog1 = new FontDialog();
      this.menuStrip1.SuspendLayout();
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.canvasBox).BeginInit();
      this.statusBar.SuspendLayout();
      this.SuspendLayout();
      this.menuStrip1.BackColor = Color.White;
      this.menuStrip1.Font = new Font("Showcard Gothic", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.menuStrip1.ImageScalingSize = new Size(20, 20);
      this.menuStrip1.Items.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.menuFile,
        (ToolStripItem) this.menuEdit,
        (ToolStripItem) this.menuView,
        (ToolStripItem) this.paletteToolStripMenuItem,
        (ToolStripItem) this.helpToolStripMenuItem
      });
      this.menuStrip1.Location = new Point(0, 0);
      this.menuStrip1.Name = "menuStrip1";
      this.menuStrip1.Padding = new Padding(4, 2, 0, 2);
      this.menuStrip1.Size = new Size(800, 28);
      this.menuStrip1.TabIndex = 0;
      this.menuStrip1.Text = "menuStrip1";
      this.menuFile.BackColor = Color.White;
      this.menuFile.DropDownItems.AddRange(new ToolStripItem[9]
      {
        (ToolStripItem) this.newToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator6,
        (ToolStripItem) this.openImage,
        (ToolStripItem) this.saveImage,
        (ToolStripItem) this.toolStripSeparator1,
        (ToolStripItem) this.importImage,
        (ToolStripItem) this.exportImage,
        (ToolStripItem) this.toolStripSeparator2,
        (ToolStripItem) this.exit
      });
      this.menuFile.Font = new Font("Showcard Gothic", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.menuFile.Name = "menuFile";
      this.menuFile.Size = new Size(64, 24);
      this.menuFile.Text = "&Файл";
      this.newToolStripMenuItem.Name = "newToolStripMenuItem";
      this.newToolStripMenuItem.ShortcutKeys = Keys.N | Keys.Control;
      this.newToolStripMenuItem.Size = new Size(267, 24);
      this.newToolStripMenuItem.Text = "&Новий..";
      this.newToolStripMenuItem.Click += new EventHandler(this.NewToolStripMenuItem_Click);
      this.toolStripSeparator6.Name = "toolStripSeparator6";
      this.toolStripSeparator6.Size = new Size(264, 6);
      this.openImage.Name = "openImage";
      this.openImage.ShortcutKeys = Keys.O | Keys.Control;
      this.openImage.Size = new Size(267, 24);
      this.openImage.Text = "&Відкрити...";
      this.openImage.Click += new EventHandler(this.OpenImage_Click);
      this.saveImage.Name = "saveImage";
      this.saveImage.ShortcutKeys = Keys.S | Keys.Control;
      this.saveImage.Size = new Size(267, 24);
      this.saveImage.Text = "&Зберегти...";
      this.saveImage.Click += new EventHandler(this.SaveImage_Click);
      this.toolStripSeparator1.Name = "toolStripSeparator1";
      this.toolStripSeparator1.Size = new Size(264, 6);
      this.importImage.Name = "importImage";
      this.importImage.ShortcutKeys = Keys.A | Keys.Control;
      this.importImage.Size = new Size(267, 24);
      this.importImage.Text = "&Імпортувати...";
      this.importImage.Click += new EventHandler(this.ImportImage_Click);
      this.exportImage.Name = "exportImage";
      this.exportImage.ShortcutKeys = Keys.B | Keys.Control;
      this.exportImage.Size = new Size(267, 24);
      this.exportImage.Text = "&Експортувати...";
      this.exportImage.Click += new EventHandler(this.ExportImage_Click);
      this.toolStripSeparator2.Name = "toolStripSeparator2";
      this.toolStripSeparator2.Size = new Size(264, 6);
      this.exit.Name = "exit";
      this.exit.ShortcutKeys = Keys.F4 | Keys.Alt;
      this.exit.Size = new Size(267, 24);
      this.exit.Text = "&Вихід";
      this.exit.Click += new EventHandler(this.Exit_Click);
      this.menuEdit.BackColor = Color.White;
      this.menuEdit.DropDownItems.AddRange(new ToolStripItem[10]
      {
        (ToolStripItem) this.undoAction,
        (ToolStripItem) this.redoAction,
        (ToolStripItem) this.toolStripSeparator8,
        (ToolStripItem) this.drawToolStripMenuItem,
        (ToolStripItem) this.fillToolStripMenuItem,
        (ToolStripItem) this.pixerToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator3,
        (ToolStripItem) this.showPalette,
        (ToolStripItem) this.loadPaletteToolStripMenuItem,
        (ToolStripItem) this.добавитьТекстToolStripMenuItem
      });
      this.menuEdit.Font = new Font("Showcard Gothic", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.menuEdit.Name = "menuEdit";
      this.menuEdit.Size = new Size(110, 24);
      this.menuEdit.Text = "&Редагувати";
      this.undoAction.Name = "undoAction";
      this.undoAction.ShortcutKeys = Keys.Z | Keys.Control;
      this.undoAction.Size = new Size(227, 24);
      this.undoAction.Text = "&Повернути";
      this.undoAction.Click += new EventHandler(this.UndoAction_Click);
      this.redoAction.Name = "redoAction";
      this.redoAction.ShortcutKeys = Keys.Y | Keys.Control;
      this.redoAction.Size = new Size(227, 24);
      this.redoAction.Text = "&Вперед";
      this.redoAction.Click += new EventHandler(this.RedoAction_Click);
      this.toolStripSeparator8.Name = "toolStripSeparator8";
      this.toolStripSeparator8.Size = new Size(224, 6);
      this.drawToolStripMenuItem.Checked = true;
      this.drawToolStripMenuItem.CheckState = CheckState.Checked;
      this.drawToolStripMenuItem.Name = "drawToolStripMenuItem";
      this.drawToolStripMenuItem.ShortcutKeys = Keys.F5;
      this.drawToolStripMenuItem.Size = new Size(227, 24);
      this.drawToolStripMenuItem.Tag = (object) "Draw";
      this.drawToolStripMenuItem.Text = "&Малювати";
      this.drawToolStripMenuItem.Click += new EventHandler(this.DrawTool_Select);
      this.fillToolStripMenuItem.Name = "fillToolStripMenuItem";
      this.fillToolStripMenuItem.ShortcutKeys = Keys.F6;
      this.fillToolStripMenuItem.Size = new Size(227, 24);
      this.fillToolStripMenuItem.Tag = (object) "Fill";
      this.fillToolStripMenuItem.Text = "&Заповнити";
      this.fillToolStripMenuItem.Click += new EventHandler(this.DrawTool_Select);
      this.pixerToolStripMenuItem.Name = "pixerToolStripMenuItem";
      this.pixerToolStripMenuItem.ShortcutKeys = Keys.F8;
      this.pixerToolStripMenuItem.Size = new Size(227, 24);
      this.pixerToolStripMenuItem.Tag = (object) "Picker";
      this.pixerToolStripMenuItem.Text = "&Піпетка";
      this.pixerToolStripMenuItem.Click += new EventHandler(this.DrawTool_Select);
      this.toolStripSeparator3.Name = "toolStripSeparator3";
      this.toolStripSeparator3.Size = new Size(224, 6);
      this.showPalette.Name = "showPalette";
      this.showPalette.Size = new Size(227, 24);
      this.showPalette.Text = "&Показати палітру";
      this.showPalette.Click += new EventHandler(this.ShowPalette_Click);
      this.loadPaletteToolStripMenuItem.Enabled = false;
      this.loadPaletteToolStripMenuItem.Name = "loadPaletteToolStripMenuItem";
      this.loadPaletteToolStripMenuItem.Size = new Size(227, 24);
      this.loadPaletteToolStripMenuItem.Text = "&Load Palette...";
      this.loadPaletteToolStripMenuItem.Click += new EventHandler(this.loadPaletteToolStripMenuItem_Click);
      this.добавитьТекстToolStripMenuItem.Name = "добавитьТекстToolStripMenuItem";
      this.добавитьТекстToolStripMenuItem.Size = new Size(227, 24);
      this.добавитьТекстToolStripMenuItem.Tag = (object) "DrawText";
      this.добавитьТекстToolStripMenuItem.Text = "Добавить текст";
      this.добавитьТекстToolStripMenuItem.Click += new EventHandler(this.добавитьТекстToolStripMenuItem_Click);
      this.menuView.BackColor = Color.White;
      this.menuView.DropDownItems.AddRange(new ToolStripItem[11]
      {
        (ToolStripItem) this.zoomLabel,
        (ToolStripItem) this.toolStripSeparator5,
        (ToolStripItem) this.zoomIn,
        (ToolStripItem) this.zoomOut,
        (ToolStripItem) this.toolStripSeparator4,
        (ToolStripItem) this.zoom100,
        (ToolStripItem) this.zoom200,
        (ToolStripItem) this.zoom500,
        (ToolStripItem) this.toolStripSeparator7,
        (ToolStripItem) this.showGrid,
        (ToolStripItem) this.збільшити1000ToolStripMenuItem
      });
      this.menuView.Font = new Font("Showcard Gothic", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.menuView.Name = "menuView";
      this.menuView.Size = new Size(52, 24);
      this.menuView.Text = "&Вид";
      this.menuView.Click += new EventHandler(this.ViewToolStripMenuItem_Click);
      this.zoomLabel.Enabled = false;
      this.zoomLabel.Name = "zoomLabel";
      this.zoomLabel.Size = new Size(377, 24);
      this.zoomLabel.Text = "Збільшити: {0}%";
      this.toolStripSeparator5.Name = "toolStripSeparator5";
      this.toolStripSeparator5.Size = new Size(374, 6);
      this.zoomIn.Name = "zoomIn";
      this.zoomIn.ShortcutKeys = Keys.Oemplus | Keys.Shift | Keys.Control;
      this.zoomIn.Size = new Size(377, 24);
      this.zoomIn.Text = "Приближувати";
      this.zoomIn.Click += new EventHandler(this.ZoomIn_Click);
      this.zoomOut.Name = "zoomOut";
      this.zoomOut.ShortcutKeys = Keys.OemMinus | Keys.Shift | Keys.Control;
      this.zoomOut.Size = new Size(377, 24);
      this.zoomOut.Text = "Зменшення";
      this.zoomOut.Click += new EventHandler(this.ZoomOut_Click);
      this.toolStripSeparator4.Name = "toolStripSeparator4";
      this.toolStripSeparator4.Size = new Size(374, 6);
      this.zoom100.Name = "zoom100";
      this.zoom100.ShortcutKeys = Keys.D0 | Keys.Control;
      this.zoom100.Size = new Size(377, 24);
      this.zoom100.Tag = (object) "1";
      this.zoom100.Text = "Збільшити 100%";
      this.zoom100.Click += new EventHandler(this.ZoomReset_Click);
      this.zoom200.Name = "zoom200";
      this.zoom200.Size = new Size(377, 24);
      this.zoom200.Tag = (object) "2";
      this.zoom200.Text = "Збільшити 200%";
      this.zoom200.Click += new EventHandler(this.ZoomReset_Click);
      this.zoom500.Name = "zoom500";
      this.zoom500.Size = new Size(377, 24);
      this.zoom500.Tag = (object) "5";
      this.zoom500.Text = "Збільшити 500%";
      this.zoom500.Click += new EventHandler(this.ZoomReset_Click);
      this.toolStripSeparator7.Name = "toolStripSeparator7";
      this.toolStripSeparator7.Size = new Size(374, 6);
      this.showGrid.Checked = true;
      this.showGrid.CheckOnClick = true;
      this.showGrid.CheckState = CheckState.Checked;
      this.showGrid.Name = "showGrid";
      this.showGrid.ShortcutKeys = Keys.G | Keys.Control;
      this.showGrid.Size = new Size(377, 24);
      this.showGrid.Text = "Показати  сітку";
      this.showGrid.CheckedChanged += new EventHandler(this.RedrawUITrigger);
      this.збільшити1000ToolStripMenuItem.Name = "збільшити1000ToolStripMenuItem";
      this.збільшити1000ToolStripMenuItem.Size = new Size(377, 24);
      this.збільшити1000ToolStripMenuItem.Tag = (object) "10";
      this.збільшити1000ToolStripMenuItem.Text = "Збільшити 1000%";
      this.збільшити1000ToolStripMenuItem.Click += new EventHandler(this.збільшити1000ToolStripMenuItem_Click);
      this.paletteToolStripMenuItem.BackColor = Color.White;
      this.paletteToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[9]
      {
        (ToolStripItem) this.toolStripSeparator11,
        (ToolStripItem) this.builtinToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator10,
        (ToolStripItem) this.importToolStripMenuItem,
        (ToolStripItem) this.exportToolStripMenuItem,
        (ToolStripItem) this.фільтриToolStripMenuItem,
        (ToolStripItem) this.вращениеИПереворотToolStripMenuItem,
        (ToolStripItem) this.добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem,
        (ToolStripItem) this.обрізкаФотоToolStripMenuItem
      });
      this.paletteToolStripMenuItem.Font = new Font("Showcard Gothic", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.paletteToolStripMenuItem.Name = "paletteToolStripMenuItem";
      this.paletteToolStripMenuItem.Size = new Size(82, 24);
      this.paletteToolStripMenuItem.Text = "&Палітра";
      this.toolStripSeparator11.Name = "toolStripSeparator11";
      this.toolStripSeparator11.Size = new Size(414, 6);
      this.builtinToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[8]
      {
        (ToolStripItem) this.grayscaleToolStripMenuItem,
        (ToolStripItem) this.vGAMode13hToolStripMenuItem,
        (ToolStripItem) this.відтінкиЧервоногоToolStripMenuItem,
        (ToolStripItem) this.відтінкиЗеленогоToolStripMenuItem,
        (ToolStripItem) this.відтінкиЖовтогоToolStripMenuItem,
        (ToolStripItem) this.відтінкиЖовтогоToolStripMenuItem1,
        (ToolStripItem) this.відтінкиЖовтогоToolStripMenuItem2,
        (ToolStripItem) this.відтінкиЖовтогоToolStripMenuItem3
      });
      this.builtinToolStripMenuItem.Name = "builtinToolStripMenuItem";
      this.builtinToolStripMenuItem.Size = new Size(417, 24);
      this.builtinToolStripMenuItem.Text = "&Вбудований";
      this.grayscaleToolStripMenuItem.Name = "grayscaleToolStripMenuItem";
      this.grayscaleToolStripMenuItem.Size = new Size(264, 24);
      this.grayscaleToolStripMenuItem.Text = "Відтінки сірого";
      this.grayscaleToolStripMenuItem.Click += new EventHandler(this.GrayscaleToolStripMenuItem_Click);
      this.vGAMode13hToolStripMenuItem.Name = "vGAMode13hToolStripMenuItem";
      this.vGAMode13hToolStripMenuItem.Size = new Size(264, 24);
      this.vGAMode13hToolStripMenuItem.Text = "VGA";
      this.vGAMode13hToolStripMenuItem.Click += new EventHandler(this.VGAMode13hToolStripMenuItem_Click);
      this.відтінкиЧервоногоToolStripMenuItem.Name = "відтінкиЧервоногоToolStripMenuItem";
      this.відтінкиЧервоногоToolStripMenuItem.Size = new Size(264, 24);
      this.відтінкиЧервоногоToolStripMenuItem.Text = "Відтінки червоного";
      this.відтінкиЧервоногоToolStripMenuItem.Click += new EventHandler(this.відтінкиЧервоногоToolStripMenuItem_Click);
      this.відтінкиЗеленогоToolStripMenuItem.Name = "відтінкиЗеленогоToolStripMenuItem";
      this.відтінкиЗеленогоToolStripMenuItem.Size = new Size(264, 24);
      this.відтінкиЗеленогоToolStripMenuItem.Text = "Відтінки фіолетового";
      this.відтінкиЗеленогоToolStripMenuItem.Click += new EventHandler(this.відтінкиЗеленогоToolStripMenuItem_Click);
      this.відтінкиЖовтогоToolStripMenuItem.Name = "відтінкиЖовтогоToolStripMenuItem";
      this.відтінкиЖовтогоToolStripMenuItem.Size = new Size(264, 24);
      this.відтінкиЖовтогоToolStripMenuItem.Text = "Відтінки синього";
      this.відтінкиЖовтогоToolStripMenuItem.Click += new EventHandler(this.відтінкиЖовтогоToolStripMenuItem_Click);
      this.відтінкиЖовтогоToolStripMenuItem1.Name = "відтінкиЖовтогоToolStripMenuItem1";
      this.відтінкиЖовтогоToolStripMenuItem1.Size = new Size(264, 24);
      this.відтінкиЖовтогоToolStripMenuItem1.Text = "Відтінки зеленего";
      this.відтінкиЖовтогоToolStripMenuItem1.Click += new EventHandler(this.відтінкиЖовтогоToolStripMenuItem1_Click);
      this.відтінкиЖовтогоToolStripMenuItem2.Name = "відтінкиЖовтогоToolStripMenuItem2";
      this.відтінкиЖовтогоToolStripMenuItem2.Size = new Size(264, 24);
      this.відтінкиЖовтогоToolStripMenuItem2.Text = "Відтінки cвітло голубого";
      this.відтінкиЖовтогоToolStripMenuItem2.Click += new EventHandler(this.відтінкиЖовтогоToolStripMenuItem2_Click);
      this.відтінкиЖовтогоToolStripMenuItem3.Name = "відтінкиЖовтогоToolStripMenuItem3";
      this.відтінкиЖовтогоToolStripMenuItem3.Size = new Size(264, 24);
      this.відтінкиЖовтогоToolStripMenuItem3.Text = "Відтінки жовтого";
      this.відтінкиЖовтогоToolStripMenuItem3.Click += new EventHandler(this.відтінкиЖовтогоToolStripMenuItem3_Click);
      this.toolStripSeparator10.Name = "toolStripSeparator10";
      this.toolStripSeparator10.Size = new Size(414, 6);
      this.importToolStripMenuItem.Name = "importToolStripMenuItem";
      this.importToolStripMenuItem.Size = new Size(417, 24);
      this.importToolStripMenuItem.Text = "&Імпорт...";
      this.importToolStripMenuItem.Click += new EventHandler(this.ImportToolStripMenuItem_Click);
      this.exportToolStripMenuItem.Name = "exportToolStripMenuItem";
      this.exportToolStripMenuItem.Size = new Size(417, 24);
      this.exportToolStripMenuItem.Text = "&Експорт...";
      this.exportToolStripMenuItem.Click += new EventHandler(this.ExportToolStripMenuItem_Click);
      this.фільтриToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.гаммаToolStripMenuItem,
        (ToolStripItem) this.яркостьToolStripMenuItem,
        (ToolStripItem) this.контрастToolStripMenuItem,
        (ToolStripItem) this.інвертуватиКольориToolStripMenuItem
      });
      this.фільтриToolStripMenuItem.Name = "фільтриToolStripMenuItem";
      this.фільтриToolStripMenuItem.Size = new Size(417, 24);
      this.фільтриToolStripMenuItem.Text = "Фільтри";
      this.фільтриToolStripMenuItem.Click += new EventHandler(this.фільтриToolStripMenuItem_Click);
      this.гаммаToolStripMenuItem.Name = "гаммаToolStripMenuItem";
      this.гаммаToolStripMenuItem.Size = new Size(237, 24);
      this.гаммаToolStripMenuItem.Text = "Гамма";
      this.гаммаToolStripMenuItem.Click += new EventHandler(this.гаммаToolStripMenuItem_Click_1);
      this.яркостьToolStripMenuItem.Name = "яркостьToolStripMenuItem";
      this.яркостьToolStripMenuItem.Size = new Size(237, 24);
      this.яркостьToolStripMenuItem.Text = "Яркость";
      this.яркостьToolStripMenuItem.Click += new EventHandler(this.яркостьToolStripMenuItem_Click);
      this.контрастToolStripMenuItem.Name = "контрастToolStripMenuItem";
      this.контрастToolStripMenuItem.Size = new Size(237, 24);
      this.контрастToolStripMenuItem.Text = "Контраст";
      this.контрастToolStripMenuItem.Click += new EventHandler(this.контрастToolStripMenuItem_Click);
      this.інвертуватиКольориToolStripMenuItem.Name = "інвертуватиКольориToolStripMenuItem";
      this.інвертуватиКольориToolStripMenuItem.Size = new Size(237, 24);
      this.інвертуватиКольориToolStripMenuItem.Text = "Інвертувати кольори";
      this.інвертуватиКольориToolStripMenuItem.Click += new EventHandler(this.інвертуватиКольориToolStripMenuItem_Click);
      this.вращениеИПереворотToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[6]
      {
        (ToolStripItem) this.на90ToolStripMenuItem,
        (ToolStripItem) this.на180ToolStripMenuItem,
        (ToolStripItem) this.на270ToolStripMenuItem,
        (ToolStripItem) this.на90YToolStripMenuItem,
        (ToolStripItem) this.на180XYToolStripMenuItem,
        (ToolStripItem) this.на270XYToolStripMenuItem
      });
      this.вращениеИПереворотToolStripMenuItem.Name = "вращениеИПереворотToolStripMenuItem";
      this.вращениеИПереворотToolStripMenuItem.Size = new Size(417, 24);
      this.вращениеИПереворотToolStripMenuItem.Text = "Вращение и переворот";
      this.на90ToolStripMenuItem.Name = "на90ToolStripMenuItem";
      this.на90ToolStripMenuItem.Size = new Size(157, 24);
      this.на90ToolStripMenuItem.Text = "на 90° X";
      this.на90ToolStripMenuItem.Click += new EventHandler(this.на90ToolStripMenuItem_Click);
      this.на180ToolStripMenuItem.Name = "на180ToolStripMenuItem";
      this.на180ToolStripMenuItem.Size = new Size(157, 24);
      this.на180ToolStripMenuItem.Text = "на 180° X";
      this.на180ToolStripMenuItem.Click += new EventHandler(this.на180ToolStripMenuItem_Click);
      this.на270ToolStripMenuItem.Name = "на270ToolStripMenuItem";
      this.на270ToolStripMenuItem.Size = new Size(157, 24);
      this.на270ToolStripMenuItem.Text = "на 270° X";
      this.на270ToolStripMenuItem.Click += new EventHandler(this.на270ToolStripMenuItem_Click);
      this.на90YToolStripMenuItem.Name = "на90YToolStripMenuItem";
      this.на90YToolStripMenuItem.Size = new Size(157, 24);
      this.на90YToolStripMenuItem.Text = "на 90° XY";
      this.на90YToolStripMenuItem.Click += new EventHandler(this.на90YToolStripMenuItem_Click);
      this.на180XYToolStripMenuItem.Name = "на180XYToolStripMenuItem";
      this.на180XYToolStripMenuItem.Size = new Size(157, 24);
      this.на180XYToolStripMenuItem.Text = "на 180° XY";
      this.на180XYToolStripMenuItem.Click += new EventHandler(this.на180XYToolStripMenuItem_Click);
      this.на270XYToolStripMenuItem.Name = "на270XYToolStripMenuItem";
      this.на270XYToolStripMenuItem.Size = new Size(157, 24);
      this.на270XYToolStripMenuItem.Text = "на 270° XY";
      this.на270XYToolStripMenuItem.Click += new EventHandler(this.на270XYToolStripMenuItem_Click);
      this.добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem.Name = "добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem";
      this.добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem.Size = new Size(417, 24);
      this.добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem.Text = "Добавить градиентний текст з збереженням";
      this.добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem.Click += new EventHandler(this.добавитьГрадиентнийТекстЗЗбереженнямToolStripMenuItem_Click);
      this.обрізкаФотоToolStripMenuItem.Name = "обрізкаФотоToolStripMenuItem";
      this.обрізкаФотоToolStripMenuItem.Size = new Size(417, 24);
      this.обрізкаФотоToolStripMenuItem.Text = "Обрізка фото";
      this.обрізкаФотоToolStripMenuItem.Click += new EventHandler(this.обрізкаФотоToolStripMenuItem_Click);
      this.helpToolStripMenuItem.BackColor = Color.White;
      this.helpToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.helpToolStripMenuItem1,
        (ToolStripItem) this.reportAnissueToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator9,
        (ToolStripItem) this.aboutToolStripMenuItem
      });
      this.helpToolStripMenuItem.Font = new Font("Showcard Gothic", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
      this.helpToolStripMenuItem.Size = new Size(82, 24);
      this.helpToolStripMenuItem.Text = "&Довідка";
      this.helpToolStripMenuItem1.Name = "helpToolStripMenuItem1";
      this.helpToolStripMenuItem1.ShortcutKeys = Keys.F1;
      this.helpToolStripMenuItem1.Size = new Size(309, 24);
      this.helpToolStripMenuItem1.Text = "&Про Автора";
      this.helpToolStripMenuItem1.Click += new EventHandler(this.HelpToolStripMenuItem1_Click);
      this.reportAnissueToolStripMenuItem.Name = "reportAnissueToolStripMenuItem";
      this.reportAnissueToolStripMenuItem.ShortcutKeys = Keys.F2;
      this.reportAnissueToolStripMenuItem.Size = new Size(309, 24);
      this.reportAnissueToolStripMenuItem.Text = "Повідомте про & проблему...";
      this.reportAnissueToolStripMenuItem.Click += new EventHandler(this.ReportAnissueToolStripMenuItem_Click);
      this.toolStripSeparator9.Name = "toolStripSeparator9";
      this.toolStripSeparator9.Size = new Size(306, 6);
      this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
      this.aboutToolStripMenuItem.ShortcutKeys = Keys.F3;
      this.aboutToolStripMenuItem.Size = new Size(309, 24);
      this.aboutToolStripMenuItem.Text = "&Про програму...";
      this.aboutToolStripMenuItem.Click += new EventHandler(this.aboutToolStripMenuItem_Click_1);
      this.saveVGA.DefaultExt = "gorn";
      this.saveVGA.Filter = "PaintMax Gorn|*.gorn";
      this.saveVGA.Title = "Зберегти роботу";
      this.saveExport.DefaultExt = "png";
      this.saveExport.Filter = "PNG (Portable Network Graphics)|*.png|BMP (Bitmap)|*.bmp|GIF (Graphics Interchange Format)|*.gif";
      this.saveExport.Title = "Експортувати роботу";
      this.colorSelector.Columns.AddRange(new ColumnHeader[2]
      {
        this.columnHeader1,
        this.columnHeader2
      });
      this.colorSelector.Dock = DockStyle.Left;
      this.colorSelector.Font = new Font("Stencil", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.colorSelector.HeaderStyle = ColumnHeaderStyle.None;
      this.colorSelector.HideSelection = false;
      this.colorSelector.Location = new Point(0, 28);
      this.colorSelector.MultiSelect = false;
      this.colorSelector.Name = "colorSelector";
      this.colorSelector.Size = new Size(144, 422);
      this.colorSelector.TabIndex = 1;
      this.colorSelector.UseCompatibleStateImageBehavior = false;
      this.colorSelector.View = View.Details;
      this.colorSelector.SelectedIndexChanged += new EventHandler(this.colorSelector_SelectedIndexChanged);
      this.colorSelector.DoubleClick += new EventHandler(this.ColorSelector_DoubleClick);
      this.columnHeader1.Text = "VGA";
      this.columnHeader1.Width = 50;
      this.columnHeader2.Text = "RGB";
      this.columnHeader2.Width = 90;
      this.openVGA.DefaultExt = "gorn";
      this.openVGA.FileName = "*.gorn";
      this.openVGA.Filter = "PaintMax Gorn|*.gorn";
      this.openImport.Filter = "Any files|*.*|PNG (Portable Network Graphics)|*.png|BMP (Bitmap)|*.bmp|GIF (Graphics Interchange Format)|*.gif";
      this.panel1.AutoScroll = true;
      this.panel1.BackColor = Color.FromArgb(33, 33, 33);
      this.panel1.Controls.Add((Control) this.canvasBox);
      this.panel1.Dock = DockStyle.Fill;
      this.panel1.Location = new Point(144, 28);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(656, 400);
      this.panel1.TabIndex = 3;
      this.canvasBox.Location = new Point(3, 3);
      this.canvasBox.Name = "canvasBox";
      this.canvasBox.Size = new Size(369, 265);
      this.canvasBox.SizeMode = PictureBoxSizeMode.AutoSize;
      this.canvasBox.TabIndex = 2;
      this.canvasBox.TabStop = false;
      this.canvasBox.Click += new EventHandler(this.canvasBox_Click);
      this.canvasBox.Paint += new PaintEventHandler(this.canvasBox_Paint);
      this.canvasBox.MouseDown += new MouseEventHandler(this.CanvasBox_MouseDown);
      this.canvasBox.MouseLeave += new EventHandler(this.CanvasBox_MouseLeave);
      this.canvasBox.MouseMove += new MouseEventHandler(this.CanvasBox_MouseMove);
      this.canvasBox.MouseUp += new MouseEventHandler(this.CanvasBox_MouseUp);
      this.statusBar.ImageScalingSize = new Size(20, 20);
      this.statusBar.Items.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.statusMode,
        (ToolStripItem) this.importProgress,
        (ToolStripItem) this.toolStripStatusLabel1
      });
      this.statusBar.Location = new Point(144, 428);
      this.statusBar.Name = "statusBar";
      this.statusBar.Size = new Size(656, 22);
      this.statusBar.TabIndex = 4;
      this.statusBar.Text = "statusStrip1";
      this.statusMode.Name = "statusMode";
      this.statusMode.Size = new Size(0, 17);
      this.importProgress.Name = "importProgress";
      this.importProgress.Size = new Size(100, 16);
      this.importProgress.Click += new EventHandler(this.importProgress_Click);
      this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
      this.toolStripStatusLabel1.Size = new Size(0, 17);
      this.importer.WorkerReportsProgress = true;
      this.importer.WorkerSupportsCancellation = true;
      this.importer.DoWork += new DoWorkEventHandler(this.Importer_DoWork);
      this.importer.ProgressChanged += new ProgressChangedEventHandler(this.Importer_ProgressChanged);
      this.importer.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.Importer_RunWorkerCompleted);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(800, 450);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.statusBar);
      this.Controls.Add((Control) this.colorSelector);
      this.Controls.Add((Control) this.menuStrip1);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.MainMenuStrip = this.menuStrip1;
      this.Name = nameof (MainForm);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "PaintMax";
      this.FormClosing += new FormClosingEventHandler(this.MainForm_FormClosing);
      this.Load += new EventHandler(this.MainForm_Load);
      this.menuStrip1.ResumeLayout(false);
      this.menuStrip1.PerformLayout();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      ((ISupportInitialize) this.canvasBox).EndInit();
      this.statusBar.ResumeLayout(false);
      this.statusBar.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
