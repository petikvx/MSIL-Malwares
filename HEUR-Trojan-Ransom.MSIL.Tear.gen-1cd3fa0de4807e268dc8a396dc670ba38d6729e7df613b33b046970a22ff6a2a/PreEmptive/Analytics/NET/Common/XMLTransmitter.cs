// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.NET.Common.XMLTransmitter
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Net;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.NET.Common
{
  public class XMLTransmitter : IXMLTransmitter
  {
    private string a = "";
    private ILogger b;

    public XMLTransmitter(Configuration config, [Optional] ILogger logger)
    {
      this.a = config.GetFullEndpointURI();
      this.b = logger ?? (ILogger) new BlankLogger();
    }

    public bool Post(IEnumerable<KeyValuePair<string, string>> headers, string data)
    {
      int A_1 = 14;
      switch (0)
      {
        default:
          XMLTransmitter.a a = new XMLTransmitter.a();
          try
          {
            a.Headers.Add(HttpRequestHeader.ContentType, Utils.a("뛁ꇃ뻅볇\uE5C9듋ꏍ볏", A_1));
            IEnumerator<KeyValuePair<string, string>> enumerator = headers.GetEnumerator();
            try
            {
              int num1 = 3;
              while (true)
              {
                int num2;
                switch (num1)
                {
                  case 0:
                    goto label_18;
                  case 1:
                    num2 = 0;
                    num1 = num2;
                    continue;
                  case 3:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 4:
                    if (!enumerator.MoveNext())
                    {
                      num2 = 1;
                      num1 = num2;
                      continue;
                    }
                    KeyValuePair<string, string> current = enumerator.Current;
                    a.Headers.Add(current.Key, current.Value);
                    num2 = 2;
                    num1 = num2;
                    continue;
                }
                num2 = 4;
                num1 = num2;
              }
            }
            finally
            {
              int num = 2;
              while (true)
              {
                switch (num)
                {
                  case 0:
                    enumerator.Dispose();
                    num = 1;
                    continue;
                  case 1:
                    goto label_17;
                  case 2:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                }
                if (enumerator != null)
                  num = 0;
                else
                  break;
              }
label_17:;
            }
label_18:
            try
            {
              a.UploadString(this.a, data);
              return true;
            }
            catch (Exception ex)
            {
              this.b.LogException(ex, Utils.a("菁\uAAC3\uE6C5귇닉꿋ꯍꃏꛑ뷓맕뛗龎돛뷝菟韡難菥賧쫩裫鯭苯鯱髳釵\uD8F7軹軻\u9FFD滿焁椃漅笇礉攋愍縏㈑笓瀕㠗眙礛洝匟䌡䌣䌥嬧", A_1));
              return false;
            }
          }
          finally
          {
            int num3 = 2;
            while (true)
            {
              int num4;
              switch (num3)
              {
                case 0:
                  num4 = 1;
                  if (num4 == 0)
                    ;
                  a.Dispose();
                  num4 = 1;
                  num3 = num4;
                  continue;
                case 1:
                  goto label_29;
                case 2:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
              }
              if (a != null)
              {
                num4 = 12858;
                int num5 = num4;
                num4 = 12858;
                int num6 = num4;
                switch (num5 == num6 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    goto label_29;
                  default:
                    num4 = 0;
                    if (num4 == 0)
                      ;
                    num4 = 0;
                    num3 = num4;
                    continue;
                }
              }
              else
                break;
            }
label_29:;
          }
      }
    }

    internal class a : WebClient
    {
      protected override WebRequest GetWebRequest(Uri address)
      {
        int num1 = 18874;
        int num2 = num1;
        num1 = 18874;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            HttpWebRequest webRequest = (HttpWebRequest) base.GetWebRequest(address);
            webRequest.AllowAutoRedirect = false;
            return (WebRequest) webRequest;
          default:
            goto case 1;
        }
      }

      protected override WebResponse GetWebResponse(WebRequest request)
      {
        int A_1 = 7;
label_1:
        int num;
        WebResponse webResponse;
        switch (0)
        {
          case 0:
label_3:
            webResponse = base.GetWebResponse(request);
            num = 3;
            goto default;
          default:
            int statusCode;
            while (true)
            {
              switch (num)
              {
                case 0:
                  if (statusCode > 299)
                  {
                    num = 2;
                    continue;
                  }
                  goto label_14;
                case 1:
                  if (statusCode >= 200)
                  {
                    num = 4;
                    continue;
                  }
                  goto label_6;
                case 2:
                  goto label_6;
                case 3:
                  if (webResponse is HttpWebResponse)
                  {
                    num = 5;
                    continue;
                  }
                  goto label_14;
                case 4:
                  num = 0;
                  continue;
                case 5:
                  if (false)
                    ;
                  statusCode = (int) (webResponse as HttpWebResponse).StatusCode;
                  num = 1;
                  continue;
                default:
                  goto label_3;
              }
            }
label_6:
            throw new WebException(Utils.a("ﶺ\uDCBC횾귀뛂럄ꋆ\uE9C8駊\uA8CC볎ꇐ볒믔ꓖ볘ﯚ远뫞苠諢胤釦賨迪", A_1), WebExceptionStatus.ConnectFailure);
label_14:
            switch (true ? 1 : 0)
            {
              case 0:
              case 2:
                goto label_1;
              default:
                if (true)
                  ;
                return webResponse;
            }
        }
      }
    }
  }
}
