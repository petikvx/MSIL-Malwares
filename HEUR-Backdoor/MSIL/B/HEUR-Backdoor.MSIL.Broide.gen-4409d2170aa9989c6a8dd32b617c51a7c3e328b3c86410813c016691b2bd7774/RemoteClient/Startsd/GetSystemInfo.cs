// Decompiled with JetBrains decompiler
// Type: RemoteClient.Startsd.GetSystemInfo
// Assembly: rtewsd, Version=1.0.0.23, Culture=neutral, PublicKeyToken=null
// MVID: 26A2B99D-71EF-4F92-906D-8BA9A2FB9EEF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Backdoor.MSIL.Broide.gen-4409d2170aa9989c6a8dd32b617c51a7c3e328b3c86410813c016691b2bd7774.exe

using System;
using System.Management;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Text;

namespace RemoteClient.Startsd
{
  internal class GetSystemInfo
  {
    public static string GetInfo()
    {
      string str = "";
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController").Get())
      {
        str = str + managementObject["VideoProcessor"]?.ToString() + " | ";
        str = str + managementObject["AdapterRAM"]?.ToString() + "\n";
      }
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_Processor").Get())
      {
        str = str + managementObject["Name"]?.ToString() + " | ";
        str = str + managementObject["NumberOfCores"]?.ToString() + "\n";
      }
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_PhysicalMemory").Get())
        str += string.Format("{0} ; {1} Mb; {2} \n", managementObject["BankLabel"], (object) Math.Round(Convert.ToDouble(managementObject["Capacity"]) / 1024.0 / 1024.0, 2), managementObject["Speed"]);
      return str + GetSystemInfo.GetMacAddress();
    }

    public static string GetCode()
    {
      string code = "";
      string info = GetSystemInfo.GetInfo();
      char[] chArray = new char[1]{ '\n' };
      foreach (string str in info.Split(chArray))
      {
        string hashString = GetSystemInfo.GetHashString(str);
        code += hashString.Substring(0, hashString.Length - 16);
      }
      return code;
    }

    public static string GetHashString(string Param_388)
    {
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.Unicode.GetBytes(Param_388));
      string empty = string.Empty;
      foreach (byte num in hash)
        empty += string.Format("{0:x2}", (object) num);
      return empty;
    }

    public static string GetMacAddress()
    {
      try
      {
        string macAddress = "";
        foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
        {
          if (networkInterface.OperationalStatus == OperationalStatus.Up && !networkInterface.Description.Contains("Virtual") && !networkInterface.Description.Contains("Pseudo") && networkInterface.GetPhysicalAddress().ToString() != "")
            macAddress = networkInterface.GetPhysicalAddress().ToString();
        }
        return macAddress;
      }
      catch (Exception ex)
      {
        ex.ToString();
        return "";
      }
    }
  }
}
