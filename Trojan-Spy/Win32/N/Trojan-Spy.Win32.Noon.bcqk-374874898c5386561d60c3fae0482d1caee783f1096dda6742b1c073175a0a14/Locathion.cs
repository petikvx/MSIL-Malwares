// Decompiled with JetBrains decompiler
// Type: mmxAH.Locathion
// Assembly: IAsyncLocalValue, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 5C4F3FBF-C751-4B18-BBEA-B1DDBC6F76B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqk-374874898c5386561d60c3fae0482d1caee783f1096dda6742b1c073175a0a14.exe

using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

namespace mmxAH
{
  public abstract class Locathion
  {
    protected GameEngine en;
    protected string codeName;
    protected string displayName;
    protected string MoveToTitle;
    protected short LocathionIndex;
    protected List<byte> investigators;
    protected LocathionType type;

    public Locathion()
    {
      this.investigators = new List<byte>();
      this.codeName = "";
    }

    public string GetTitle() => this.displayName;

    public string GetCodeName() => this.codeName;

    public void SetLocIndex(short ind) => this.LocathionIndex = ind;

    public void AddInvestigator(byte invest) => this.investigators.Add(invest);

    public void RemoveInvestigator(byte invest)
    {
      int index = this.investigators.IndexOf(invest);
      if (index == -1)
        return;
      this.investigators.RemoveAt(index);
    }

    public LocathionType GetLocType() => this.type;

    public abstract void Move();

    public abstract bool FromText(TextFileParser prs, TextFileParser text);

    public abstract void Print(byte label);

    public abstract void FromBin(BinaryReader rd);

    protected void FromBin1(BinaryReader rd)
    {
      this.type = (LocathionType) rd.ReadInt32();
      this.codeName = rd.ReadString();
      this.displayName = rd.ReadString();
      this.MoveToTitle = rd.ReadString();
    }

    public abstract void ToBin(BinaryWriter wr);

    protected void ToBin1(BinaryWriter wr)
    {
      wr.Write((int) this.type);
      wr.Write(this.codeName);
      wr.Write(this.displayName);
      wr.Write(this.MoveToTitle);
    }

    protected bool FromText3(TextFileParser prs, TextFileParser text)
    {
      if (this.codeName == "")
      {
        this.codeName = prs.GetToken();
        if (this.codeName == null)
          return false;
      }
      this.displayName = text.GetCurString();
      if (this.displayName == null)
      {
        int num = (int) MessageBox.Show(" Could not load loc text . Code Name:" + this.codeName);
        return false;
      }
      if (text.isMultiName)
      {
        this.MoveToTitle = text.GetCurString();
        if (this.MoveToTitle == null)
        {
          int num = (int) MessageBox.Show(" Could not load loc text . Code Name:" + this.codeName);
          return false;
        }
      }
      else
        this.MoveToTitle = this.displayName;
      return true;
    }

    public string GetMoveToTitle() => this.MoveToTitle;

    public override string ToString() => "lt: " + this.type.ToString() + "  name: " + this.codeName;

    public virtual void Reset() => this.investigators.Clear();

    public virtual void WriteToSave(BinaryWriter wr)
    {
    }

    public virtual void ReadFromSave(BinaryReader rd)
    {
    }

    public virtual void Encounter() => this.en.clock.NextPlayer();

    public byte GetInvestCount() => (byte) this.investigators.Count;

    public byte GetMinSneak()
    {
      byte minSneak = 250;
      foreach (int investigator in this.investigators)
      {
        byte charValue = (byte) this.en.ActiveInvistigators[investigator].GetCharValue(SkillTestType.Sneak);
        if ((int) charValue < (int) minSneak)
          minSneak = charValue;
      }
      return minSneak;
    }
  }
}
