// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportSender3
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.Zip;
using System;
using System.Net;
using System.Text;
using System.Threading;

namespace SmartAssembly.SmartExceptionsCore
{
  public class ReportSender3
  {
    protected const string AssemblyID = "{100fd8cd-4fe2-410e-8c33-ae1af08ef31d}";
    private const string LicenseID = "{be78a0c5-c47c-4127-a428-52bdc580a02f}";
    private const string CryptoPublicKey = "{bf13b64c-b3d2-4165-b3f5-7f852d4744cf}";
    private IWebProxy m_Proxy;
    private SendingReportFeedbackEventHandler3 SendingReportFeedback;

    public void SetProxy(IWebProxy proxy)
    {
      try
      {
        this.m_Proxy = proxy;
      }
      catch (Exception ex)
      {
        IWebProxy o2 = proxy;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    internal bool SendReport(
      byte[] reportData,
      ReportSender3.NotificationEmailSettings notificationEmailSettings)
    {
      byte[] data;
      byte[] encryptedData;
      WebServicesClient1 services;
      ReportSender3.AfterLoginClosure afterLoginClosure;
      try
      {
        bool flag;
        try
        {
          data = SimpleZip1.Zip(reportData);
        }
        catch (Exception ex)
        {
          this.InvokeSendingReportFeedback(SendingReportStep3.PreparingReport, SimpleZip1.ExceptionMessage);
          flag = false;
          goto label_7;
        }
        encryptedData = Encryption1.Encrypt(data, "<RSAKeyValue><Modulus>ouQsWoWBnmOqk5oiU2jtlbq5pjqf+VMkxyeAMax4XhYx/73DvmvK2hM6oHyJMzG9z4q2g6iVzseYCR9G25/HguU2hRhyjPcloCXUrQo5yBoVCQzTNnnc5XXeKzLqKuEpkrNRSRyWRB9eh4a6BtuxveEOfBxiHIIXzo0+ffdbu90=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>");
        if (encryptedData == null)
        {
          this.InvokeSendingReportFeedback(SendingReportStep3.PreparingReport, Encryption1.ExceptionMessage);
          return false;
        }
        this.InvokeSendingReportFeedback(SendingReportStep3.ConnectingToServer);
        services = new WebServicesClient1("!1b5d570f-4f6d-4187-55a3-b83778a63f94");
        if (this.m_Proxy != null)
          services.SetProxy(this.m_Proxy);
        afterLoginClosure = new ReportSender3.AfterLoginClosure(this, encryptedData, services, notificationEmailSettings);
        services.LoginToServer(new StringCallback1(afterLoginClosure.AfterLogin));
        return afterLoginClosure.Succeeded;
label_7:
        return flag;
      }
      catch (Exception ex)
      {
        byte[] o1 = data;
        byte[] o2 = encryptedData;
        WebServicesClient1 o3 = services;
        ReportSender3.AfterLoginClosure o4 = afterLoginClosure;
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o5 = (ValueType) flag;
        byte[] o7 = reportData;
        ReportSender3.NotificationEmailSettings o8 = notificationEmailSettings;
        StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8);
        throw;
      }
    }

    public event SendingReportFeedbackEventHandler3 SendingReportFeedback
    {
      add
      {
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_1;
        SendingReportFeedbackEventHandler3 comparand;
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_2;
        try
        {
          feedbackEventHandler3_1 = this.SendingReportFeedback;
          do
          {
            comparand = feedbackEventHandler3_1;
            feedbackEventHandler3_2 = comparand + value;
            feedbackEventHandler3_1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler3>(ref this.SendingReportFeedback, feedbackEventHandler3_2, comparand);
          }
          while (feedbackEventHandler3_1 != comparand);
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler3 o1 = feedbackEventHandler3_1;
          SendingReportFeedbackEventHandler3 o2 = comparand;
          SendingReportFeedbackEventHandler3 o3 = feedbackEventHandler3_2;
          SendingReportFeedbackEventHandler3 o5 = value;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }
      remove
      {
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_1;
        SendingReportFeedbackEventHandler3 comparand;
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_2;
        try
        {
          feedbackEventHandler3_1 = this.SendingReportFeedback;
          do
          {
            comparand = feedbackEventHandler3_1;
            feedbackEventHandler3_2 = comparand - value;
            feedbackEventHandler3_1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler3>(ref this.SendingReportFeedback, feedbackEventHandler3_2, comparand);
          }
          while (feedbackEventHandler3_1 != comparand);
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler3 o1 = feedbackEventHandler3_1;
          SendingReportFeedbackEventHandler3 o2 = comparand;
          SendingReportFeedbackEventHandler3 o3 = feedbackEventHandler3_2;
          SendingReportFeedbackEventHandler3 o5 = value;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }
    }

    protected void InvokeSendingReportFeedback(
      SendingReportStep3 step,
      string errorMessage,
      string reportId)
    {
      SendingReportFeedbackEventHandler3 sendingReportFeedback;
      try
      {
        sendingReportFeedback = this.SendingReportFeedback;
        if (sendingReportFeedback == null)
          return;
        sendingReportFeedback((object) this, new SendingReportFeedbackEventArgs3(step, errorMessage, reportId));
      }
      catch (Exception ex)
      {
        SendingReportFeedbackEventHandler3 o1 = sendingReportFeedback;
        // ISSUE: variable of a boxed type
        __Boxed<SendingReportStep3> o3 = (System.Enum) step;
        string o4 = errorMessage;
        string o5 = reportId;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    protected void InvokeSendingReportFeedback(SendingReportStep3 step, string errorMessage)
    {
      try
      {
        this.InvokeSendingReportFeedback(step, errorMessage, string.Empty);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<SendingReportStep3> o2 = (System.Enum) step;
        string o3 = errorMessage;
        StackFrameHelper.CreateException3(ex, (object) this, (object) o2, (object) o3);
        throw;
      }
    }

    protected void InvokeSendingReportFeedback(SendingReportStep3 step)
    {
      try
      {
        this.InvokeSendingReportFeedback(step, string.Empty);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<SendingReportStep3> o2 = (System.Enum) step;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    private class AfterLoginClosure
    {
      private readonly ReportSender3 m_ReportSender;
      private readonly byte[] m_EncryptedData;
      private readonly WebServicesClient1 m_Services;
      private readonly ReportSender3.NotificationEmailSettings m_NotificationEmailSettings;
      public bool Succeeded = true;

      public AfterLoginClosure(
        ReportSender3 reportSender,
        byte[] encryptedData,
        WebServicesClient1 services,
        ReportSender3.NotificationEmailSettings notificationEmailSettings)
      {
        try
        {
          this.m_ReportSender = reportSender;
          this.m_NotificationEmailSettings = notificationEmailSettings;
          this.m_Services = services;
          this.m_EncryptedData = encryptedData;
        }
        catch (Exception ex)
        {
          ReportSender3 o2 = reportSender;
          byte[] o3 = encryptedData;
          WebServicesClient1 o4 = services;
          ReportSender3.NotificationEmailSettings o5 = notificationEmailSettings;
          StackFrameHelper.CreateException5(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      public void AfterLogin(string loginResult)
      {
        byte[] bytes;
        byte[] numArray;
        ReportSender3.AfterUploadClosure afterUploadClosure;
        string errorMessage;
        try
        {
          if (loginResult == "OK")
          {
            this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep3.Transfering);
            bytes = Encoding.UTF8.GetBytes("{FA0844EB-EF82-404C-B76C-C092ABDB9392}");
            numArray = new byte[bytes.Length + this.m_EncryptedData.Length];
            Array.Copy((Array) bytes, (Array) numArray, bytes.Length);
            Array.Copy((Array) this.m_EncryptedData, 0, (Array) numArray, bytes.Length, this.m_EncryptedData.Length);
            afterUploadClosure = new ReportSender3.AfterUploadClosure(this.m_ReportSender);
            this.m_Services.Upload(numArray, this.m_NotificationEmailSettings.EmailAddress, this.m_NotificationEmailSettings.AppFriendlyName, this.m_NotificationEmailSettings.BuildFriendlyNumber, new StringCallback1(afterUploadClosure.AfterUpload));
            this.Succeeded = afterUploadClosure.Succeeded;
          }
          else
          {
            errorMessage = loginResult;
            if (this.m_ReportSender.SendingReportFeedback != null)
              this.m_ReportSender.SendingReportFeedback((object) this, new SendingReportFeedbackEventArgs3(SendingReportStep3.ConnectingToServer, errorMessage));
            this.Succeeded = false;
          }
        }
        catch (Exception ex)
        {
          byte[] o1 = bytes;
          byte[] o2 = numArray;
          ReportSender3.AfterUploadClosure o3 = afterUploadClosure;
          string o4 = errorMessage;
          string o6 = loginResult;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }
    }

    private class AfterUploadClosure
    {
      private readonly ReportSender3 m_ReportSender;
      public bool Succeeded;

      public AfterUploadClosure(ReportSender3 reportSender)
      {
        try
        {
          this.m_ReportSender = reportSender;
        }
        catch (Exception ex)
        {
          ReportSender3 o2 = reportSender;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public void AfterUpload(string transferingResult)
      {
        try
        {
          if (transferingResult.StartsWith("ERR"))
          {
            this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep3.Transfering, transferingResult);
            this.Succeeded = false;
          }
          else
          {
            this.m_ReportSender.InvokeSendingReportFeedback(SendingReportStep3.Finished, string.Empty, transferingResult);
            this.Succeeded = true;
          }
        }
        catch (Exception ex)
        {
          string o2 = transferingResult;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }
    }

    internal class NotificationEmailSettings
    {
      public static ReportSender3.NotificationEmailSettings NullEmailSettings;
      private readonly string m_EmailAddress;
      private readonly string m_AppFriendlyName;
      private readonly string m_BuildFriendlyNumber;

      public NotificationEmailSettings(
        string emailAddress,
        string appFriendlyName,
        string buildFriendlyNumber)
      {
        try
        {
          this.m_EmailAddress = emailAddress;
          this.m_BuildFriendlyNumber = buildFriendlyNumber;
          this.m_AppFriendlyName = appFriendlyName;
        }
        catch (Exception ex)
        {
          string o2 = emailAddress;
          string o3 = appFriendlyName;
          string o4 = buildFriendlyNumber;
          StackFrameHelper.CreateException4(ex, (object) this, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      public string BuildFriendlyNumber
      {
        get
        {
          try
          {
            return this.m_BuildFriendlyNumber;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public string AppFriendlyName
      {
        get
        {
          try
          {
            return this.m_AppFriendlyName;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      public string EmailAddress
      {
        get
        {
          try
          {
            return this.m_EmailAddress;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
      }

      static NotificationEmailSettings()
      {
        try
        {
          ReportSender3.NotificationEmailSettings.NullEmailSettings = new ReportSender3.NotificationEmailSettings((string) null, (string) null, (string) null);
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }
  }
}
