// Decompiled with JetBrains decompiler
// Type: CaseInsensitiveCompa.fl
// Assembly: UInt32ArrayTypeI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2F94D963-B282-4BF6-A540-85D019D8F975
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqa-e64990765a452d35a4b5e461940d547ab3e145dbdf2e3b4b282b12ed1eba308d.exe

using CustomQueryInterfaceRes;
using ILegacyEvidenceAdap;
using ISpon;
using MulticastDeleg;
using NullableTypeI;
using ReadLinesItera;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using TraceFor;

namespace CaseInsensitiveCompa
{
  internal class fl
  {
    private const int BURST = 21;

    public List<Func> PrepareDeck()
    {
      List<Func> funcList = new List<Func>();
label_1:
      int num1 = -894905004;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -394147907)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 385038841 ^ -858832827;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      // ISSUE: type reference
      IEnumerator enumerator1 = fl.\u202C‌‮‪⁮‪⁪‫⁮‬‍‭​‌‭⁮⁮‏⁬⁫⁬‬⁮‬‮‬‎‮⁬‮⁫⁬⁮‪⁬​‌‌⁮⁬‮(fl.\u200B⁭‬‭‭⁬‏⁬‏​⁬⁭⁭‭⁮‪‮⁯‌‬‮‏⁯‫‌‫‭‭⁮⁭⁭‍‬‭‌‮⁪​⁯⁯‮(fl.\u200B‮‏‪‮⁫‪‮‎‫⁬⁫⁪‮⁬‬​⁯⁬‬⁯‍⁮⁯⁯‬⁫⁭‫⁪⁮⁮⁫‫⁪‌‍⁮‏‫‮(__typeref (IMPLTYPEFL))));
      try
      {
label_25:
        while (fl.\u206C‮‌‎⁭‮‭⁬‍‫⁯‭‭⁪‌‪‮‏⁫‌‌⁮‏‫⁮⁪‎‭‎‏⁫⁫⁮‫‬‫⁪⁮⁯‭‮(enumerator1))
        {
label_8:
          IMPLTYPEFL Pip = (IMPLTYPEFL) fl.\u202B‫‍‪‮‬⁬‭⁯⁬‭‪‌‪‏⁭‏⁯‪⁪⁭⁭‪‌⁫⁯‬⁮⁮⁮‌⁪‬⁮‍⁫⁯‭‌‫‮(enumerator1);
          int num3 = -228144284;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ -394147907)) % 3U)
            {
              case 1:
                goto label_8;
              case 2:
                num3 = -801737070;
                continue;
              default:
                goto label_9;
            }
          }
label_9:
          // ISSUE: type reference
          IEnumerator enumerator2 = fl.\u202C‌‮‪⁮‪⁪‫⁮‬‍‭​‌‭⁮⁮‏⁬⁫⁬‬⁮‬‮‬‎‮⁬‮⁫⁬⁮‪⁬​‌‌⁮⁬‮(fl.\u200B⁭‬‭‭⁬‏⁬‏​⁬⁭⁭‭⁮‪‮⁯‌‬‮‏⁯‫‌‫‭‭⁮⁭⁭‍‬‭‌‮⁪​⁯⁯‮(fl.\u200B‮‏‪‮⁫‪‮‎‫⁬⁫⁪‮⁬‬​⁯⁬‬⁯‍⁮⁯⁯‬⁫⁭‫⁪⁮⁮⁫‫⁪‌‍⁮‏‫‮(__typeref (InteropXmlTypeEn))));
          try
          {
label_16:
            int num5 = !fl.\u206C‮‌‎⁭‮‭⁬‍‫⁯‭‭⁪‌‪‮‏⁫‌‌⁮‏‫⁮⁪‎‭‎‏⁫⁫⁮‫‬‫⁪⁮⁯‭‮(enumerator2) ? -1282095874 : (num5 = -1240513998);
            InteropXmlTypeEn Suit;
            Func func;
            while (true)
            {
              uint num6;
              switch ((num6 = (uint) (num5 ^ -394147907)) % 7U)
              {
                case 0:
                  func = new Func(Suit, Pip);
                  num5 = (int) num6 * -2053272313 ^ 2122396656;
                  continue;
                case 1:
                  num5 = (int) num6 * 379914053 ^ -949171959;
                  continue;
                case 3:
                  Suit = (InteropXmlTypeEn) fl.\u202B‫‍‪‮‬⁬‭⁯⁬‭‪‌‪‏⁭‏⁯‪⁪⁭⁭‪‌⁫⁯‬⁮⁮⁮‌⁪‬⁮‍⁫⁯‭‌‫‮(enumerator2);
                  num5 = -346535958;
                  continue;
                case 4:
                  funcList.Add(func);
                  num5 = (int) num6 * 1529078396 ^ 573889908;
                  continue;
                case 5:
                  num5 = -1240513998;
                  continue;
                case 6:
                  goto label_16;
                default:
                  goto label_25;
              }
            }
          }
          finally
          {
            IDisposable disposable = enumerator2 as IDisposable;
label_19:
            int num7 = -1369939254;
            while (true)
            {
              uint num8;
              switch ((num8 = (uint) (num7 ^ -394147907)) % 5U)
              {
                case 0:
                  num7 = (int) num8 * -999728623 ^ 468210229;
                  continue;
                case 1:
                  int num9 = disposable == null ? -1061216839 : (num9 = -614050769);
                  num7 = num9 ^ (int) num8 * -2095323509;
                  continue;
                case 3:
                  goto label_19;
                case 4:
                  fl.\u200F‌⁭‌‬⁬‪‮⁭‍⁯⁮‫‎⁫⁯⁮⁬⁮‭⁮‮⁬‬‮‫‍​‮⁪‍⁬‬⁫‬⁬⁯‏⁬‫‮(disposable);
                  num7 = (int) num8 * -100938974 ^ 1397684546;
                  continue;
                default:
                  goto label_24;
              }
            }
label_24:;
          }
        }
      }
      finally
      {
        IDisposable disposable = enumerator1 as IDisposable;
label_27:
        int num10 = -606378085;
        while (true)
        {
          uint num11;
          switch ((num11 = (uint) (num10 ^ -394147907)) % 5U)
          {
            case 0:
              goto label_27;
            case 1:
              fl.\u200F‌⁭‌‬⁬‪‮⁭‍⁯⁮‫‎⁫⁯⁮⁬⁮‭⁮‮⁬‬‮‫‍​‮⁪‍⁬‬⁫‬⁬⁯‏⁬‫‮(disposable);
              num10 = (int) num11 * 1233075452 ^ -1870043371;
              continue;
            case 2:
              num10 = (int) num11 * 1127539208 ^ -598261403;
              continue;
            case 4:
              int num12 = disposable != null ? 1721382164 : (num12 = 1630578855);
              num10 = num12 ^ (int) num11 * 811335371;
              continue;
            default:
              goto label_32;
          }
        }
label_32:;
      }
      return funcList;
    }

    public List<Func> ShuffleDeck(List<Func> Deck)
    {
label_1:
      int num1 = 441778306;
      int index;
      Func func;
      int num2;
      List<Func> funcList;
      Random random;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1055971116)) % 16U)
        {
          case 0:
            Deck[num2 + 1] = Deck.ElementAt<Func>(index);
            num1 = (int) num3 * 1630244804 ^ -1140385413;
            continue;
          case 1:
            funcList = Deck;
            num1 = (int) num3 * 324023200 ^ -546505309;
            continue;
          case 2:
            index = fl.\u200D‭‪⁬‪‫⁪⁭‭‏⁪⁫‭⁫​⁮‮‪⁯⁯‮‌‫⁯‬‮‭⁮‮‮‫‎‌⁯‍‪⁫‪‪‎‮(random, 0, num2--);
            num1 = 1595436896;
            continue;
          case 4:
            num1 = (int) num3 * -1868720469 ^ -1621287723;
            continue;
          case 5:
            num1 = (int) num3 * -759798690 ^ -352524176;
            continue;
          case 6:
            Deck[index] = func;
            num1 = (int) num3 * 612587096 ^ -1192263448;
            continue;
          case 7:
            num1 = (int) num3 * 746181357 ^ -1927392127;
            continue;
          case 8:
            num2 = Deck.Count - 1;
            func = (Func) null;
            num1 = (int) num3 * 847535084 ^ 640457009;
            continue;
          case 9:
            num1 = (int) num3 * -378860596 ^ -657343670;
            continue;
          case 10:
            int num4;
            num1 = num4 = num2 != 0 ? 475037166 : (num4 = 1128601197);
            continue;
          case 11:
            goto label_1;
          case 12:
            func = Deck.ElementAt<Func>(num2 + 1);
            num1 = (int) num3 * 1707531317 ^ -1791524496;
            continue;
          case 13:
            index = -1;
            num1 = (int) num3 * -2089706455 ^ -1814351584;
            continue;
          case 14:
            random = fl.\u206F‫⁮⁭⁬‭⁮⁪‎​⁭⁯⁯⁭‏‮‏‌‭‌⁬‏⁯⁮⁪⁯‮⁫‪⁫⁫‮‏⁭‮‏‭‫‏⁫‮();
            num1 = (int) num3 * 1084530830 ^ -1968117920;
            continue;
          case 15:
            num1 = (int) num3 * -1485066775 ^ -630280280;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return funcList;
    }

    public void DealCardsSingleHand(IManagedActivationFact GameController)
    {
      fl.\u206F‫⁮⁭⁬‭⁮⁪‎​⁭⁯⁯⁭‏‮‏‌‭‌⁬‏⁯⁮⁪⁯‮⁫‪⁫⁫‮‏⁭‮‏‭‫‏⁫‮();
label_1:
      int num1 = -1415561797;
      while (true)
      {
        uint num2;
        bool flag1;
        Func func;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -975976598)) % 32U)
        {
          case 0:
            num3 = GameController.Game.Machine.Hand1.Count != 2 ? 1 : 0;
            break;
          case 1:
            num1 = (int) num2 * 1167181864 ^ -171291121;
            continue;
          case 2:
            flag1 = false;
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Machine.Hand1Flipped);
            num1 = (int) num2 * 1988240933 ^ 1733667786;
            continue;
          case 3:
            num1 = (int) num2 * 984956574 ^ -631596878;
            continue;
          case 4:
            func.Set = false;
            num1 = (int) num2 * -702911106 ^ -1243909055;
            continue;
          case 5:
            flag2 = flag1;
            num1 = (int) num2 * 251952668 ^ -909698144;
            continue;
          case 6:
            int num4 = !flag2 ? 818975256 : (num4 = 296486094);
            num1 = num4 ^ (int) num2 * 453629429;
            continue;
          case 7:
            num1 = (int) num2 * -2144462711 ^ 657408720;
            continue;
          case 8:
            num1 = (int) num2 * -274712417 ^ -840505715;
            continue;
          case 9:
            GameController.Game.Machine.Hand1.Add(func);
            num1 = -784896951;
            continue;
          case 10:
            num1 = (int) num2 * -1809495662 ^ 734504707;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = -626488004;
            continue;
          case 13:
            if (GameController.Game.Player.Hand1.Count != 2)
            {
              num3 = 1;
              break;
            }
            num1 = -968335414;
            continue;
          case 14:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = -1386549516;
            continue;
          case 15:
            num1 = (int) num2 * 347659677 ^ 1699723664;
            continue;
          case 16:
            num1 = -1254057130;
            continue;
          case 17:
            flag1 = false;
            num1 = (int) num2 * -1471440934 ^ -1767846127;
            continue;
          case 18:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -1362998284 ^ 1454622805;
            continue;
          case 19:
            num1 = (int) num2 * 654741903 ^ 319612460;
            continue;
          case 20:
            func.Set = false;
            num1 = (int) num2 * -1386183796 ^ 1199919285;
            continue;
          case 21:
            num1 = (int) num2 * 997511240 ^ -2030232116;
            continue;
          case 22:
            int num5 = GameController.Game.Player.Hand1.Count != 0 ? -274970304 : (num5 = -1453893217);
            num1 = num5 ^ (int) num2 * -1272585627;
            continue;
          case 23:
            num1 = (int) num2 * 1291925977 ^ 1363836460;
            continue;
          case 24:
            goto label_3;
          case 25:
            num1 = (int) num2 * -1016126998 ^ 1526317630;
            continue;
          case 26:
            int num6 = GameController.Game.Machine.Hand1.Count == 0 ? 470939669 : (num6 = 322307784);
            num1 = num6 ^ (int) num2 * -45462601;
            continue;
          case 27:
            GameController.Game.Player.Hand1.Add(func);
            num1 = -1634760926;
            continue;
          case 28:
            func = GameController.Game.Deck.ElementAt<Func>(0);
            GameController.Game.Deck.RemoveAt(0);
            num1 = (int) num2 * 806332976 ^ 444067789;
            continue;
          case 29:
            num1 = (int) num2 * 689900185 ^ -1487025174;
            continue;
          case 30:
            num1 = (int) num2 * 772964997 ^ -1696831183;
            continue;
          case 31:
            flag1 = true;
            num1 = (int) num2 * 722504570 ^ -2045942882;
            continue;
          default:
            goto label_37;
        }
        int num7;
        num1 = num7 = num3 != 0 ? -1276049670 : (num7 = -1071452046);
      }
label_3:
      return;
label_37:;
    }

    public void PassPlayerTurn(IManagedActivationFact GameController)
    {
label_1:
      int num1 = 459600762;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1447681738)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -513932786 ^ -398784940;
            continue;
          case 1:
            this.SimulateMachineRoundAsync(GameController);
            num1 = (int) num2 * -1581382099 ^ -572266438;
            continue;
          case 2:
            goto label_3;
          case 3:
            ++GameController.Game.TurnWho;
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * 380213843 ^ 761578923;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public void AllowDraw1Card(IManagedActivationFact GameController)
    {
      bool flag = GameController.Game.Player.Hand2.Count != 0;
label_1:
      int num1 = 449141956;
      DirectoryI directoryI;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1787852267)) % 12U)
        {
          case 0:
            GameController.GameView.SetLabels(GameController.Game);
            GameController.GameView.ToogleGameButtonsState(GameController.Game);
            num1 = (int) num2 * 188677767 ^ -1619639244;
            continue;
          case 1:
            num1 = (int) num2 * -1030246813 ^ -483882106;
            continue;
          case 2:
            int num3 = (int) fl.\u202D‌‌⁫⁬‬⁬‭⁬‫‪‫‌⁯⁮‍⁫‏⁪‬⁮‏‬‬⁫‬⁯⁪‎​‮⁫‫⁭‫⁪‪‮‎⁭‮((Form) directoryI);
            num1 = (int) num2 * 1993048192 ^ 2003737534;
            continue;
          case 3:
            int num4 = flag ? 619302557 : (num4 = 25831213);
            num1 = num4 ^ (int) num2 * -1900377435;
            continue;
          case 4:
            num1 = (int) num2 * -1005282272 ^ 754948414;
            continue;
          case 5:
            goto label_3;
          case 6:
            directoryI = new DirectoryI(GameController);
            num1 = (int) num2 * -520783470 ^ -955561699;
            continue;
          case 7:
            num1 = (int) num2 * 587462552 ^ -494467233;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = 831682352;
            continue;
          case 10:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -175583519 ^ -1292842063;
            continue;
          case 11:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            num1 = (int) num2 * -1884697640 ^ -1298057183;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    public void DrawToSelectedHand(string Hand, IManagedActivationFact GameController)
    {
      bool flag = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
label_1:
      int num1 = -1275196777;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1412736502)) % 13U)
        {
          case 0:
            num1 = (int) num2 * 1174168480 ^ -433994919;
            continue;
          case 1:
            num1 = (int) num2 * 902952817 ^ -1502520026;
            continue;
          case 2:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -680034217 ^ 1009632772;
            continue;
          case 3:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = -1491900129;
            continue;
          case 4:
            num1 = (int) num2 * 423282861 ^ 1962622610;
            continue;
          case 5:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            num1 = (int) num2 * -1037985715 ^ -1185434655;
            continue;
          case 6:
            GameController.UpdateLogs("Hit card Hand1;");
            num1 = (int) num2 * 1251214194 ^ 1779938800;
            continue;
          case 7:
            int num3 = !flag ? -437634127 : (num3 = -255957348);
            num1 = num3 ^ (int) num2 * 2022731588;
            continue;
          case 8:
            GameController.UpdateLogs("Hit card Hand2;");
            this.Draw1CardFor("Player", "Hand2", true, GameController);
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = -305516859;
            continue;
          case 9:
            GameController.GameView.ToogleGameButtonsState(GameController.Game);
            num1 = (int) num2 * -1697002963 ^ 651326681;
            continue;
          case 10:
            goto label_3;
          case 11:
            num1 = (int) num2 * 1170162027 ^ 653954172;
            continue;
          case 12:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    public void DoubleBetThenFlipHands(IManagedActivationFact GameController)
    {
label_1:
      int num1 = -665574400;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1484835986)) % 44U)
        {
          case 0:
            num1 = -2046551285;
            continue;
          case 1:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * 229821348 ^ -1403298110;
            continue;
          case 2:
            GameController.Game.Player.Bet *= 2;
            num1 = (int) num2 * 1998524295 ^ 1731997267;
            continue;
          case 3:
            num1 = (int) num2 * -136354306 ^ -1704543607;
            continue;
          case 4:
            num1 = (int) num2 * 448977350 ^ -1108840630;
            continue;
          case 5:
            if (!GameController.Game.Player.Hand1Flipped)
            {
              num3 = 1;
              break;
            }
            num1 = -1380944011;
            continue;
          case 6:
            this.FlipPlayerHands(GameController);
            num1 = (int) num2 * -924714337 ^ -1583365557;
            continue;
          case 7:
            goto label_1;
          case 8:
            this.Draw1CardFor("Player", "Hand2", true, GameController);
            num1 = (int) num2 * 506601871 ^ 28323929;
            continue;
          case 9:
            num1 = (int) num2 * -307255617 ^ 101507709;
            continue;
          case 10:
            int num4 = GameController.Game.GetHandSumFor(GameController.Game.Player.Hand1) <= 21 ? -422583694 : (num4 = -614406568);
            num1 = num4 ^ (int) num2 * 804142893;
            continue;
          case 11:
            num1 = (int) num2 * 638648166 ^ -175421636;
            continue;
          case 12:
            num1 = (int) num2 * 1002532425 ^ 1586788956;
            continue;
          case 13:
            num1 = -1899682853;
            continue;
          case 14:
            num1 = (int) num2 * -68331529 ^ -1936425079;
            continue;
          case 15:
            num1 = (int) num2 * 594578881 ^ 595886180;
            continue;
          case 16:
            num1 = (int) num2 * 718278964 ^ 386783731;
            continue;
          case 17:
            num1 = (int) num2 * 422921180 ^ 1711825962;
            continue;
          case 18:
            int num5 = flag1 ? -1042515410 : (num5 = -462499583);
            num1 = num5 ^ (int) num2 * -774743407;
            continue;
          case 19:
            num1 = (int) num2 * 588474287 ^ 90221015;
            continue;
          case 20:
            num1 = (int) num2 * -2019442504 ^ 1865024148;
            continue;
          case 21:
            GameController.GameView.SetLabels(GameController.Game);
            flag2 = GameController.Game.Player.Hand2.Count == 0;
            num1 = (int) num2 * -1278916879 ^ 529727572;
            continue;
          case 22:
            GameController.UpdateLogs("Flip player hands;");
            num1 = (int) num2 * -1027843701 ^ 1768561212;
            continue;
          case 23:
            this.LooseBurstHand(GameController, "Player", "Hand1");
            num1 = (int) num2 * 1784350137 ^ -270944466;
            continue;
          case 24:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * 1208499131 ^ 1260746812;
            continue;
          case 25:
            this.LooseBurstHand(GameController, "Player", "Hand2");
            num1 = (int) num2 * 2110171426 ^ -2070823430;
            continue;
          case 26:
            GameController.UpdateLogs("Player burst Hand2;");
            num1 = (int) num2 * 2085497932 ^ 755695758;
            continue;
          case 27:
            num1 = (int) num2 * 1736295501 ^ 1719201016;
            continue;
          case 28:
            num1 = -2046551285;
            continue;
          case 29:
            GameController.UpdateLogs("Flip player hand;");
            num1 = (int) num2 * 1926451947 ^ -181740678;
            continue;
          case 30:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * 809755711 ^ -86240514;
            continue;
          case 31:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 1968717734 ^ 902438054;
            continue;
          case 32:
            int num6 = GameController.Game.GetHandSumFor(GameController.Game.Player.Hand1) <= 21 ? -287250553 : (num6 = -191457258);
            num1 = num6 ^ (int) num2 * 1077812514;
            continue;
          case 33:
            num1 = (int) num2 * -503265577 ^ -658180767;
            continue;
          case 34:
            GameController.UpdateLogs("Player burst Hand1;");
            this.LooseBurstHand(GameController, "Player", "Hand1");
            num1 = (int) num2 * 1666399836 ^ 1844594927;
            continue;
          case 35:
            int num7 = !flag2 ? 691559006 : (num7 = 1775580386);
            num1 = num7 ^ (int) num2 * 1120947657;
            continue;
          case 36:
            num1 = (int) num2 * 2143346092 ^ -1454198984;
            continue;
          case 37:
            this.FlipPlayerHands(GameController);
            num1 = (int) num2 * -266503873 ^ -1914662828;
            continue;
          case 38:
            flag1 = GameController.Game.GetHandSumFor(GameController.Game.Player.Hand2) > 21;
            num1 = -646224636;
            continue;
          case 39:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            num1 = -1115722309;
            continue;
          case 40:
            GameController.UpdateLogs("Player burst. Game-over;");
            num1 = (int) num2 * -185533890 ^ -577681683;
            continue;
          case 41:
            goto label_3;
          case 42:
            num1 = (int) num2 * -1388075571 ^ -1475832164;
            continue;
          case 43:
            num3 = !GameController.Game.Player.Hand2Flipped ? 1 : 0;
            break;
          default:
            goto label_49;
        }
        int num8;
        num1 = num8 = num3 != 0 ? -2059552412 : (num8 = -606107434);
      }
label_3:
      return;
label_49:;
    }

    public void SplitPlayerHandThenDraw(IManagedActivationFact GameController)
    {
      Func func = GameController.Game.Player.Hand1.ElementAt<Func>(1);
      GameController.Game.Player.Hand1.RemoveAt(1);
label_1:
      int num1 = -191373031;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1018461818)) % 9U)
        {
          case 0:
            num1 = (int) num2 * -2091863513 ^ 589082280;
            continue;
          case 1:
            num1 = (int) num2 * -355457434 ^ -1315633513;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            this.Draw1CardFor("Player", "Hand2", true, GameController);
            num1 = (int) num2 * -1824315883 ^ -1923790862;
            continue;
          case 4:
            GameController.GameView.SetLabels(GameController.Game);
            GameController.GameView.ToogleGameButtonsState(GameController.Game);
            num1 = (int) num2 * 214626637 ^ -2005510942;
            continue;
          case 5:
            num1 = (int) num2 * 215543447 ^ 961862660;
            continue;
          case 6:
            GameController.Game.Player.Hand2.Add(func);
            num1 = (int) num2 * 515357707 ^ 333356265;
            continue;
          case 7:
            goto label_3;
          case 8:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 1820680656 ^ 60466482;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void FlipPlayerHands(IManagedActivationFact GameController)
    {
label_1:
      int num1 = 1137244352;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1313465567)) % 23U)
        {
          case 0:
            num1 = (int) num2 * 1063329575 ^ 1835457462;
            continue;
          case 1:
            num1 = (int) num2 * -1605847103 ^ 1613674121;
            continue;
          case 2:
            goto label_1;
          case 3:
            int num3 = flag ? 957195434 : (num3 = 416093394);
            num1 = num3 ^ (int) num2 * 700602020;
            continue;
          case 4:
            GameController.Game.Machine.Hand2Flipped = true;
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 1368489700 ^ 1880428001;
            continue;
          case 5:
            num1 = (int) num2 * 681151800 ^ 543988284;
            continue;
          case 6:
            int num4 = GameController.Game.Player.Hand2.Count != 0 ? -1759320627 : (num4 = -44021095);
            num1 = num4 ^ (int) num2 * -1862477108;
            continue;
          case 7:
            num1 = (int) num2 * 19260572 ^ 962432233;
            continue;
          case 8:
            num1 = (int) num2 * 1660852096 ^ 53384751;
            continue;
          case 9:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 144828964;
            continue;
          case 10:
            num1 = (int) num2 * -1773659093 ^ 124049625;
            continue;
          case 11:
            GameController.Game.Player.Hand2Flipped = true;
            num1 = (int) num2 * 1295200756 ^ -519164737;
            continue;
          case 12:
            num1 = (int) num2 * -959260674 ^ -1034756395;
            continue;
          case 13:
            num1 = (int) num2 * 2085085371 ^ 681551792;
            continue;
          case 14:
            flag = GameController.Game.Machine.Hand2.Count != 0;
            num1 = (int) num2 * 1299621702 ^ -442985269;
            continue;
          case 15:
            this.CalculateBalance(GameController.Game);
            num1 = 813616986;
            continue;
          case 16:
            num1 = (int) num2 * -1420907799 ^ -205132124;
            continue;
          case 17:
            GameController.Game.Player.Hand1Flipped = true;
            num1 = (int) num2 * 1753331225 ^ -1643636506;
            continue;
          case 18:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -2103392989 ^ -286823836;
            continue;
          case 19:
            goto label_3;
          case 20:
            num1 = (int) num2 * 401461160 ^ 1648825752;
            continue;
          case 21:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 944677885;
            continue;
          case 22:
            GameController.Game.Machine.Hand1Flipped = true;
            num1 = 513100065;
            continue;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    public void LooseBurstHand(IManagedActivationFact GameController, string Who, string Hand)
    {
label_1:
      int num1 = -1565426511;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1963453268)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1619800233 ^ -1726796169;
            continue;
          case 2:
            this.PlayerBurstAsync(GameController, Hand);
            num1 = (int) num2 * 1825948662 ^ -2136647311;
            continue;
          case 3:
            int num3 = !flag ? 255796666 : (num3 = 2002056654);
            num1 = num3 ^ (int) num2 * -174187952;
            continue;
          case 4:
            num1 = (int) num2 * 636610886 ^ 917333707;
            continue;
          case 5:
            flag = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Who, "Player");
            num1 = (int) num2 * 50235209 ^ 933129818;
            continue;
          case 6:
            this.MachineBurstAsync(GameController, Hand);
            num1 = -75108765;
            continue;
          case 7:
            goto label_3;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void PlayerBurstAsync(IManagedActivationFact GameController, string Hand)
    {
label_1:
      int num1 = 578235728;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1330925146)) % 35U)
        {
          case 0:
            num1 = (int) num2 * -220219129 ^ -1066081889;
            continue;
          case 1:
            num1 = 727179157;
            continue;
          case 2:
            int num3 = flag2 ? 240248064 : (num3 = 789100614);
            num1 = num3 ^ (int) num2 * 128341655;
            continue;
          case 3:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * 808222672 ^ -1951523498;
            continue;
          case 4:
            int num4 = flag1 ? -1739699644 : (num4 = -353189770);
            num1 = num4 ^ (int) num2 * -216480022;
            continue;
          case 5:
            GameController.Game.Winner = "Machine";
            num1 = (int) num2 * -171519419 ^ 1446149024;
            continue;
          case 6:
            flag3 = GameController.Game.Player.Hand2.Count == 0;
            num1 = (int) num2 * 732421313 ^ 307009353;
            continue;
          case 7:
            num1 = (int) num2 * 1165197133 ^ -1295865956;
            continue;
          case 8:
            goto label_3;
          case 9:
            num1 = (int) num2 * -653304812 ^ 1109352008;
            continue;
          case 10:
            int num5 = !GameController.Game.Player.Hand1Flipped ? 1440471056 : (num5 = 1359154078);
            num1 = num5 ^ (int) num2 * -559264970;
            continue;
          case 11:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -450632187 ^ 1644777375;
            continue;
          case 12:
            num1 = (int) num2 * -1829470760 ^ -1599369284;
            continue;
          case 13:
            num1 = (int) num2 * -443738914 ^ -1598827422;
            continue;
          case 14:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = 1643744376;
            continue;
          case 15:
            this.CalculateBalance(GameController.Game);
            num1 = 1858070000;
            continue;
          case 16:
            num1 = (int) num2 * -755751683 ^ -1864779384;
            continue;
          case 17:
            num1 = 471729077;
            continue;
          case 18:
            flag2 = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
            num1 = (int) num2 * -2002191832 ^ -1974456552;
            continue;
          case 19:
            flag1 = GameController.Game.Machine.Hand2.Count == 0;
            num1 = (int) num2 * 1560300277 ^ -680767569;
            continue;
          case 20:
            int num6 = !flag3 ? -1029475835 : (num6 = -1835195706);
            num1 = num6 ^ (int) num2 * -1957934312;
            continue;
          case 21:
            goto label_1;
          case 22:
            GameController.Game.Player.Hand2Flipped = true;
            num1 = 12109434;
            continue;
          case 23:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            int num7;
            num1 = num7 = !GameController.Game.Player.Hand2Flipped ? 1462531162 : (num7 = 520679348);
            continue;
          case 24:
            num1 = (int) num2 * -2037905551 ^ 1526913836;
            continue;
          case 25:
            num1 = (int) num2 * -1306173524 ^ -1703752799;
            continue;
          case 26:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * 762689549 ^ -1838087009;
            continue;
          case 27:
            num1 = 116486316;
            continue;
          case 28:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 1046635989 ^ -1801989288;
            continue;
          case 29:
            num1 = (int) num2 * 2113951820 ^ -1033439676;
            continue;
          case 30:
            GameController.Game.Player.Hand1Flipped = true;
            num1 = (int) num2 * 1084082301 ^ 2142205479;
            continue;
          case 31:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * 1106029694 ^ 1720975210;
            continue;
          case 32:
            GameController.Game.Machine.Hand1Flipped = true;
            GameController.Game.Machine.Hand2Flipped = true;
            num1 = (int) num2 * 203212063 ^ 1010089140;
            continue;
          case 33:
            num1 = (int) num2 * 93149141 ^ -1678515388;
            continue;
          case 34:
            num1 = (int) num2 * 1259819256 ^ -678526614;
            continue;
          default:
            goto label_37;
        }
      }
label_3:
      return;
label_37:;
    }

    private void MachineBurstAsync(IManagedActivationFact GameController, string Hand)
    {
      bool flag = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
label_1:
      int num1 = -1695358985;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -523834233)) % 29U)
        {
          case 0:
            num1 = (int) num2 * 1676185326 ^ 1952521970;
            continue;
          case 1:
            int num3 = !flag ? -1134831060 : (num3 = -1806022369);
            num1 = num3 ^ (int) num2 * 1927539950;
            continue;
          case 2:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * 817579297 ^ -801582269;
            continue;
          case 3:
            GameController.Game.Winner = "Player";
            num1 = (int) num2 * 984328987 ^ -1004217837;
            continue;
          case 4:
            num1 = -1782529957;
            continue;
          case 5:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * 1664837852 ^ -1283411299;
            continue;
          case 6:
            num1 = -1285881925;
            continue;
          case 7:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * 855301600 ^ -1915576281;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 1875066969 ^ 403810033;
            continue;
          case 10:
            num1 = (int) num2 * -2084742154 ^ -883620351;
            continue;
          case 11:
            GameController.Game.Machine.Hand2Flipped = true;
            num1 = (int) num2 * 1610603773 ^ 1731892456;
            continue;
          case 12:
            num1 = (int) num2 * 771577863 ^ -1254929794;
            continue;
          case 13:
            GameController.Game.Machine.Hand1Flipped = true;
            int num4 = GameController.Game.Machine.Hand2.Count != 0 ? 1240747374 : (num4 = 2046164382);
            num1 = num4 ^ (int) num2 * -1298032741;
            continue;
          case 14:
            int num5 = GameController.Game.Player.Hand2.Count != 0 ? -1230389198 : (num5 = -753403148);
            num1 = num5 ^ (int) num2 * 452620931;
            continue;
          case 15:
            num1 = (int) num2 * -949115518 ^ 2012459043;
            continue;
          case 16:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = -736055919;
            continue;
          case 17:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            int num6 = !GameController.Game.Machine.Hand2Flipped ? -1364958995 : (num6 = -596601287);
            num1 = num6 ^ (int) num2 * -224870386;
            continue;
          case 18:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -1960601459 ^ -568158202;
            continue;
          case 19:
            num1 = (int) num2 * -1931708153 ^ 1383248113;
            continue;
          case 20:
            this.CalculateBalance(GameController.Game);
            num1 = -2071279573;
            continue;
          case 21:
            GameController.Game.Player.Hand2Flipped = true;
            num1 = (int) num2 * -128464528 ^ 2053886164;
            continue;
          case 22:
            GameController.Game.Player.Hand1Flipped = true;
            num1 = (int) num2 * 1771820449 ^ -601094040;
            continue;
          case 23:
            num1 = -1268325001;
            continue;
          case 24:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -1156820437 ^ 554769628;
            continue;
          case 25:
            goto label_3;
          case 26:
            num1 = -2071279573;
            continue;
          case 27:
            num1 = -1104934284;
            continue;
          case 28:
            int num7 = !GameController.Game.Machine.Hand1Flipped ? -2068431527 : (num7 = -795832876);
            num1 = num7 ^ (int) num2 * 2015620807;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void CalculateBalance(EvidenceCollect Game)
    {
    }

    private void SimulateMachineRoundAsync(IManagedActivationFact GameController)
    {
label_1:
      int num1 = 2113431625;
      bool flag1;
      bool flag2;
      Func func;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 454660308)) % 29U)
        {
          case 0:
            num1 = 2037754974;
            continue;
          case 1:
            goto label_3;
          case 2:
            GameController.UpdateLogs("House run 1 hand;");
            num1 = 1507259547;
            continue;
          case 3:
            int num3;
            num1 = num3 = GameController.Game.Machine.Hand2.Count != 0 ? 1255823990 : (num3 = 1102451206);
            continue;
          case 4:
            num1 = (int) num2 * 791224107 ^ 994518403;
            continue;
          case 5:
            GameController.Game.Machine.Hand2.Add(func);
            this.Draw1CardFor("Machine", "Hand1", false, GameController);
            num1 = (int) num2 * -1273397642 ^ 2004955204;
            continue;
          case 6:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * 164910671 ^ -1610784545;
            continue;
          case 7:
            int num4 = !flag2 ? -1166913061 : (num4 = -100479310);
            num1 = num4 ^ (int) num2 * -959084057;
            continue;
          case 8:
            num1 = (int) num2 * 1468784027 ^ 1033339906;
            continue;
          case 9:
            num1 = (int) num2 * -153052566 ^ -85201122;
            continue;
          case 10:
            GameController.UpdateLogs("House split hand;");
            num1 = (int) num2 * -809931776 ^ -2093492347;
            continue;
          case 11:
            func = GameController.Game.Machine.Hand1.ElementAt<Func>(1);
            GameController.Game.Machine.Hand1.RemoveAt(1);
            num1 = (int) num2 * -1344518512 ^ -1753250086;
            continue;
          case 12:
            num1 = (int) num2 * -846598969 ^ -611576813;
            continue;
          case 13:
            this.RunGame1Hand(GameController, "Hand1", false);
            num1 = (int) num2 * 984927119 ^ 1252402594;
            continue;
          case 14:
            this.RunGame1Hand(GameController, "Hand2", true);
            num1 = (int) num2 * -183142550 ^ 675163302;
            continue;
          case 15:
            flag2 = flag1;
            num1 = (int) num2 * -218657705 ^ -761537894;
            continue;
          case 16:
            this.Draw1CardFor("Machine", "Hand2", true, GameController);
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 461285104 ^ -220642398;
            continue;
          case 17:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * 238289809 ^ -146225094;
            continue;
          case 18:
            num1 = (int) num2 * -1642322438 ^ -578415293;
            continue;
          case 19:
            GameController.UpdateLogs("House run 2 hands;");
            num1 = (int) num2 * -159530554 ^ -1522805366;
            continue;
          case 20:
            flag1 = GameController.Game.CheckIdenticalHand("Machine", "Hand1");
            num1 = (int) num2 * 474692784 ^ 381059188;
            continue;
          case 21:
            num1 = (int) num2 * -1855433972 ^ 1329689415;
            continue;
          case 22:
            ++GameController.Game.TurnWho;
            num1 = 61160254;
            continue;
          case 23:
            num1 = (int) num2 * 1330904819 ^ 759442322;
            continue;
          case 24:
            goto label_1;
          case 25:
            this.RunGame1Hand(GameController, "Hand1", true);
            num1 = (int) num2 * 676091877 ^ 1768119957;
            continue;
          case 26:
            num1 = (int) num2 * -1805446316 ^ -473135167;
            continue;
          case 27:
            num1 = (int) num2 * 1710729461 ^ 629217915;
            continue;
          case 28:
            int num5 = GameController.Game.Machine.Hand2.Count != 0 ? 1973647420 : (num5 = 695737082);
            num1 = num5 ^ (int) num2 * 323855178;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    private void RunGame1Hand(
      IManagedActivationFact GameController,
      string Hand,
      bool RenderContext)
    {
      bool flag = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
label_1:
      int num1 = -993348934;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -269513628)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 936053102 ^ 2026578072;
            continue;
          case 1:
            this.SimulateMachine1Hand(GameController, Hand, RenderContext);
            num1 = (int) num2 * -158920813 ^ -171337478;
            continue;
          case 2:
            num1 = (int) num2 * 1031586042 ^ -1590589332;
            continue;
          case 3:
            this.SimulateMachine1Hand(GameController, Hand, RenderContext);
            num1 = -333610634;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * 272443594 ^ 1446642038;
            continue;
          case 6:
            int num3 = flag ? 1979332931 : (num3 = 641677913);
            num1 = num3 ^ (int) num2 * -83846723;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void SimulateMachine1Hand(
      IManagedActivationFact GameController,
      string Hand,
      bool RenderContext)
    {
label_51:
      bool flag1 = GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) < 11;
      int num1 = 553322368;
      while (true)
      {
        uint num2;
        bool flag2;
        double num3;
        double num4;
        double num5;
        double num6;
        double num7;
        double num8;
        double num9;
        bool flag3;
        bool flag4;
        int num10;
        int num11;
        switch ((num2 = (uint) (num1 ^ 1403177310)) % 64U)
        {
          case 0:
            num10 = GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) <= 19 ? 1 : 0;
            goto label_68;
          case 1:
            int num12 = !flag2 ? -380950141 : (num12 = -507941854);
            num1 = num12 ^ (int) num2 * 352834995;
            continue;
          case 2:
            num1 = (int) num2 * 1198082519 ^ 880675067;
            continue;
          case 3:
            if (GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) < 11)
            {
              num11 = 0;
              break;
            }
            num1 = 346319899;
            continue;
          case 4:
            num3 = HostProtectionAttrib.RandDoubleInRange(0.0, 1.0);
            num1 = (int) num2 * -196661113 ^ -694278238;
            continue;
          case 5:
            num11 = GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) <= 16 ? 1 : 0;
            break;
          case 6:
            GameController.UpdateLogs("House hit card;");
            num1 = (int) num2 * -1174141838 ^ 114677871;
            continue;
          case 7:
            GameController.UpdateLogs("House hit card;");
            num1 = (int) num2 * -1962937786 ^ 900631812;
            continue;
          case 8:
            num1 = (int) num2 * -64402721 ^ -1055839179;
            continue;
          case 9:
            GameController.UpdateLogs("House stand. Turn: Player;");
            num1 = (int) num2 * -1826254866 ^ 731471921;
            continue;
          case 10:
            int num13 = num7 != num3 ? 1661705010 : (num13 = 904233383);
            num1 = num13 ^ (int) num2 * -704673896;
            continue;
          case 11:
            this.CheckMachineBurst(GameController, Hand, RenderContext);
            num1 = (int) num2 * 61122086 ^ -812459710;
            continue;
          case 12:
            goto label_51;
          case 13:
            GameController.UpdateLogs("House flip hand;");
            num1 = (int) num2 * 1032308691 ^ -33781240;
            continue;
          case 14:
            this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
            num1 = (int) num2 * 4667435 ^ 1956456391;
            continue;
          case 15:
            num1 = (int) num2 * -2046214775 ^ -142672795;
            continue;
          case 16:
            GameController.UpdateLogs("House double bet;");
            num1 = 1288166986;
            continue;
          case 17:
            GameController.UpdateLogs("House double bet;");
            this.SimulateMachineDoubleBetAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * 813693620 ^ -892302628;
            continue;
          case 18:
            num1 = (int) num2 * -1501395421 ^ 1657871232;
            continue;
          case 19:
            num1 = 1920701232;
            continue;
          case 20:
            num1 = (int) num2 * 192510701 ^ 833366454;
            continue;
          case 21:
            num1 = 1499791914;
            continue;
          case 22:
            this.Draw1CardFor("Machine", Hand, true, GameController);
            num1 = (int) num2 * 1982335759 ^ 1570906083;
            continue;
          case 23:
            num1 = (int) num2 * 932804547 ^ 186732200;
            continue;
          case 24:
            num1 = (int) num2 * -522470370 ^ -2100279032;
            continue;
          case 25:
            int num14 = !flag3 ? -466742105 : (num14 = -1112796408);
            num1 = num14 ^ (int) num2 * 260240354;
            continue;
          case 26:
            num1 = (int) num2 * -1374076660 ^ 1080455445;
            continue;
          case 27:
            this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
            num1 = (int) num2 * 1945575300 ^ 1849027112;
            continue;
          case 28:
            int num15;
            num1 = num15 = num7 != num4 ? 967491067 : (num15 = 781794118);
            continue;
          case 29:
            num1 = (int) num2 * 1926414130 ^ 1446769506;
            continue;
          case 30:
            int num16 = flag1 ? -277322248 : (num16 = -2027276701);
            num1 = num16 ^ (int) num2 * -180965849;
            continue;
          case 31:
            num7 = HostProtectionAttrib.Max(new double[4]
            {
              num3,
              num4,
              num5,
              num6
            });
            num1 = (int) num2 * 1532195201 ^ 2008513675;
            continue;
          case 32:
            num4 = HostProtectionAttrib.RandDoubleInRange(0.0, 0.5);
            num1 = (int) num2 * 302179518 ^ -1934910876;
            continue;
          case 33:
            num1 = (int) num2 * 991256068 ^ 390807892;
            continue;
          case 34:
            int num17 = num8 >= num9 ? 280090643 : (num17 = 835266372);
            num1 = num17 ^ (int) num2 * 1968719381;
            continue;
          case 35:
            num1 = 650915691;
            continue;
          case 36:
            num1 = (int) num2 * 821965632 ^ -1017262317;
            continue;
          case 37:
            int num18;
            num1 = num18 = num7 != num5 ? 100274173 : (num18 = 2029575777);
            continue;
          case 38:
            GameController.Game.Machine.Hand2Flipped = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand2");
            num1 = (int) num2 * 1113359420 ^ -55382419;
            continue;
          case 39:
            num1 = (int) num2 * 1225381274 ^ -512895538;
            continue;
          case 40:
            this.CheckMachineBurst(GameController, Hand, RenderContext);
            num1 = (int) num2 * -1770950896 ^ -1944494988;
            continue;
          case 41:
            num1 = (int) num2 * -902802435 ^ -2063532969;
            continue;
          case 42:
            num1 = (int) num2 * 63835482 ^ 2098739794;
            continue;
          case 43:
            goto label_3;
          case 44:
            this.SimulateMachineDoubleBetAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * -1819967462 ^ 1531892959;
            continue;
          case 45:
            GameController.UpdateLogs("House hit card;");
            num1 = (int) num2 * 1876385835 ^ -790338838;
            continue;
          case 46:
            if (GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) >= 17)
            {
              num1 = 910475870;
              continue;
            }
            num10 = 0;
            goto label_68;
          case 47:
            flag4 = GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) == 20;
            num1 = 1153065830;
            continue;
          case 48:
            this.Draw1CardFor("Machine", Hand, true, GameController);
            num1 = (int) num2 * -2134096807 ^ 223927836;
            continue;
          case 49:
            num1 = (int) num2 * 982245870 ^ 1272190139;
            continue;
          case 50:
            this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * 27393524 ^ 1926222820;
            continue;
          case 51:
            num1 = 1910073909;
            continue;
          case 52:
            num1 = 137362355;
            continue;
          case 53:
            GameController.UpdateLogs("House flip hand(s);");
            GameController.Game.Machine.Hand1Flipped = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
            num1 = (int) num2 * -1046084238 ^ -1459228701;
            continue;
          case 54:
            num1 = (int) num2 * -2074072333 ^ 655160367;
            continue;
          case 55:
            this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * 245033358 ^ -1661475106;
            continue;
          case 56:
            int num19 = !flag4 ? 143124381 : (num19 = 1738637946);
            num1 = num19 ^ (int) num2 * -1101051056;
            continue;
          case 57:
            num1 = (int) num2 * 2000440635 ^ 1308441070;
            continue;
          case 58:
            num5 = HostProtectionAttrib.RandDoubleInRange(0.0, 0.25);
            num6 = HostProtectionAttrib.RandDoubleInRange(0.0, 0.75);
            num1 = (int) num2 * 1851708418 ^ 1691219189;
            continue;
          case 59:
            num1 = (int) num2 * -529911355 ^ 2060861124;
            continue;
          case 60:
            num8 = HostProtectionAttrib.RandDoubleInRange(0.4, 1.0);
            num9 = HostProtectionAttrib.RandDoubleInRange(0.0, 0.6);
            num1 = (int) num2 * -1394081917 ^ 475217352;
            continue;
          case 61:
            this.Draw1CardFor("Machine", Hand, true, GameController);
            this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * 633723996 ^ -568652069;
            continue;
          case 62:
            num1 = (int) num2 * 480841275 ^ -237721469;
            continue;
          case 63:
            num1 = (int) num2 * 566631583 ^ -19539730;
            continue;
          default:
            goto label_72;
        }
        flag2 = num11 != 0;
        num1 = 524930655;
        continue;
label_68:
        flag3 = num10 != 0;
        num1 = 1113410439;
      }
label_3:
      return;
label_72:;
    }

    private void CheckMachineBurst(
      IManagedActivationFact GameController,
      string Hand,
      bool RenderContext)
    {
label_1:
      int num1 = -839063578;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2138799496)) % 14U)
        {
          case 0:
            int num3 = flag ? -1138178145 : (num3 = -1360283955);
            num1 = num3 ^ (int) num2 * 1648943321;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1190086249 ^ -43777281;
            continue;
          case 3:
            num1 = (int) num2 * -329069728 ^ -1728353003;
            continue;
          case 4:
            int num4;
            num1 = num4 = GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) == 21 ? -7648530 : (num4 = -399018447);
            continue;
          case 5:
            GameController.Game.Machine.Hand1Flipped = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
            GameController.Game.Machine.Hand2Flipped = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand2");
            num1 = (int) num2 * 844877991 ^ 383884429;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.LooseBurstHand(GameController, "Machine", Hand);
            num1 = (int) num2 * 808704301 ^ -1936924226;
            continue;
          case 8:
            num1 = (int) num2 * 1014599865 ^ 422056223;
            continue;
          case 9:
            GameController.UpdateLogs("House burst hand;");
            num1 = (int) num2 * -273392579 ^ 763806993;
            continue;
          case 10:
            num1 = (int) num2 * 1643225951 ^ -527641527;
            continue;
          case 11:
            num1 = (int) num2 * -269054777 ^ -1083333411;
            continue;
          case 12:
            GameController.UpdateLogs("House get Jack;");
            this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
            num1 = (int) num2 * -851949246 ^ -2103203407;
            continue;
          case 13:
            flag = GameController.Game.GetHandSumFor(fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) > 21;
            num1 = -1896018304;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    private void RenderMachine1HandAsync(
      IManagedActivationFact GameController,
      string Hand,
      bool RenderContext)
    {
label_1:
      int num1 = 286226727;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 701400723)) % 9U)
        {
          case 0:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -359757440 ^ 1992670843;
            continue;
          case 1:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 1033874647;
            continue;
          case 2:
            num1 = (int) num2 * 767129409 ^ -1272081410;
            continue;
          case 3:
            goto label_1;
          case 4:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = 1478265804;
            continue;
          case 5:
            int num3 = !flag ? 1527071564 : (num3 = 597909419);
            num1 = num3 ^ (int) num2 * 1180731631;
            continue;
          case 6:
            flag = RenderContext;
            num1 = (int) num2 * -465836070 ^ -948276690;
            continue;
          case 7:
            num1 = (int) num2 * -810198221 ^ -1424206737;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    private void SimulateMachineDoubleBetAsync(
      IManagedActivationFact GameController,
      string Hand,
      bool RenderContext)
    {
      GameController.Game.Machine.Bet *= 2;
label_1:
      int num1 = 1784076981;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1305093888)) % 9U)
        {
          case 1:
            num1 = (int) num2 * -500989284 ^ -1944213942;
            continue;
          case 2:
            num1 = (int) num2 * -2003005592 ^ -1852350189;
            continue;
          case 3:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -1508651015 ^ -1202800007;
            continue;
          case 4:
            this.CheckMachineBurst(GameController, Hand, RenderContext);
            int num3 = RenderContext ? -1658528099 : (num3 = -1324203030);
            num1 = num3 ^ (int) num2 * -1137509039;
            continue;
          case 5:
            goto label_1;
          case 6:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * -584343796 ^ 429057310;
            continue;
          case 7:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 152828952;
            continue;
          case 8:
            this.Draw1CardFor("Machine", Hand, true, GameController);
            num1 = (int) num2 * 70931086 ^ 509430138;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
    }

    private void SimulateMachineFlipHand(
      IManagedActivationFact GameController,
      string Hand,
      bool RenderContext)
    {
label_1:
      int num1 = -682785444;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -534968)) % 21U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -968377247 ^ -49954149;
            continue;
          case 2:
            GameController.Game.Player.Hand1Flipped = true;
            num1 = -1025846234;
            continue;
          case 3:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -780413876 ^ 382581252;
            continue;
          case 4:
            int num3 = flag ? -1151642796 : (num3 = -1167156081);
            num1 = num3 ^ (int) num2 * -1708346112;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.CalculateBalance(GameController.Game);
            num1 = -1821971909;
            continue;
          case 7:
            num1 = (int) num2 * 1716889781 ^ 2110239118;
            continue;
          case 8:
            GameController.Game.Machine.Hand1Flipped = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
            num1 = (int) num2 * -1881712383 ^ 210253262;
            continue;
          case 9:
            flag = GameController.Game.Player.Hand2.Count != 0;
            num1 = (int) num2 * 1649659250 ^ -894342671;
            continue;
          case 10:
            num1 = (int) num2 * 1277651788 ^ -2133295438;
            continue;
          case 11:
            num1 = (int) num2 * 840211234 ^ 516070096;
            continue;
          case 12:
            GameController.Game.Machine.Hand2Flipped = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand2");
            num1 = (int) num2 * 742326605 ^ -1707876030;
            continue;
          case 13:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = -1502370511;
            continue;
          case 14:
            num1 = (int) num2 * -1626331613 ^ 68411154;
            continue;
          case 15:
            int num4 = !RenderContext ? -1441321211 : (num4 = -678143401);
            num1 = num4 ^ (int) num2 * -1668973371;
            continue;
          case 16:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = -773198141;
            continue;
          case 17:
            num1 = (int) num2 * 1081153257 ^ -180459532;
            continue;
          case 18:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 831035714 ^ 1175411634;
            continue;
          case 19:
            GameController.Game.Player.Hand2Flipped = true;
            num1 = (int) num2 * 1983578319 ^ 744486671;
            continue;
          case 20:
            num1 = (int) num2 * -744646217 ^ 536436644;
            continue;
          default:
            goto label_23;
        }
      }
label_3:
      return;
label_23:;
    }

    private void Draw1CardFor(
      string Who,
      string Hand,
      bool Set,
      IManagedActivationFact GameController)
    {
label_1:
      int num1 = -323105819;
      Func func;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1178400554)) % 21U)
        {
          case 0:
            GameController.Game.Player.Hand2.Add(func);
            num1 = -166634042;
            continue;
          case 1:
            num1 = (int) num2 * -324828145 ^ 1302102513;
            continue;
          case 2:
            int num3 = flag1 ? 931722908 : (num3 = 1325520931);
            num1 = num3 ^ (int) num2 * 1485363763;
            continue;
          case 3:
            num1 = (int) num2 * -1372166543 ^ 2074650981;
            continue;
          case 4:
            num1 = -460629032;
            continue;
          case 5:
            flag1 = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Who, "Player");
            num1 = (int) num2 * -650740676 ^ 1880493602;
            continue;
          case 6:
            GameController.Game.Player.Hand1.Add(func);
            num1 = (int) num2 * -322062864 ^ -1178632647;
            continue;
          case 7:
            flag2 = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1");
            num1 = (int) num2 * 84069433 ^ 741137952;
            continue;
          case 8:
            int num4 = !flag2 ? 512841343 : (num4 = 1040643194);
            num1 = num4 ^ (int) num2 * -1898795257;
            continue;
          case 9:
            num1 = (int) num2 * -1718581262 ^ -900289726;
            continue;
          case 10:
            goto label_1;
          case 11:
            GameController.Game.Machine.Hand1.Add(func);
            num1 = (int) num2 * 1137930256 ^ -1398626735;
            continue;
          case 12:
            num1 = -1255892398;
            continue;
          case 13:
            func = GameController.Game.Deck.ElementAt<Func>(0);
            GameController.Game.Deck.RemoveAt(0);
            num1 = (int) num2 * 1459367696 ^ 659554622;
            continue;
          case 14:
            num1 = (int) num2 * -1418852539 ^ 347030092;
            continue;
          case 15:
            num1 = (int) num2 * 1685514884 ^ 637269427;
            continue;
          case 16:
            goto label_3;
          case 17:
            GameController.Game.Machine.Hand2.Add(func);
            num1 = -639433789;
            continue;
          case 18:
            int num5;
            num1 = num5 = fl.\u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮(Hand, "Hand1") ? -220410334 : (num5 = -1017288300);
            continue;
          case 19:
            num1 = (int) num2 * -1603951287 ^ -1191936766;
            continue;
          case 20:
            num1 = (int) num2 * 170086374 ^ 2002796677;
            continue;
          default:
            goto label_23;
        }
      }
label_3:
      return;
label_23:;
    }

    static System.Type \u200B‮‏‪‮⁫‪‮‎‫⁬⁫⁪‮⁬‬​⁯⁬‬⁯‍⁮⁯⁯‬⁫⁭‫⁪⁮⁮⁫‫⁪‌‍⁮‏‫‮([In] RuntimeTypeHandle obj0) => System.Type.GetTypeFromHandle(obj0);

    static Array \u200B⁭‬‭‭⁬‏⁬‏​⁬⁭⁭‭⁮‪‮⁯‌‬‮‏⁯‫‌‫‭‭⁮⁭⁭‍‬‭‌‮⁪​⁯⁯‮([In] System.Type obj0) => Enum.GetValues(obj0);

    static IEnumerator \u202C‌‮‪⁮‪⁪‫⁮‬‍‭​‌‭⁮⁮‏⁬⁫⁬‬⁮‬‮‬‎‮⁬‮⁫⁬⁮‪⁬​‌‌⁮⁬‮([In] Array obj0) => obj0.GetEnumerator();

    static object \u202B‫‍‪‮‬⁬‭⁯⁬‭‪‌‪‏⁭‏⁯‪⁪⁭⁭‪‌⁫⁯‬⁮⁮⁮‌⁪‬⁮‍⁫⁯‭‌‫‮([In] IEnumerator obj0) => obj0.Current;

    static bool \u206C‮‌‎⁭‮‭⁬‍‫⁯‭‭⁪‌‪‮‏⁫‌‌⁮‏‫⁮⁪‎‭‎‏⁫⁫⁮‫‬‫⁪⁮⁯‭‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u200F‌⁭‌‬⁬‪‮⁭‍⁯⁮‫‎⁫⁯⁮⁬⁮‭⁮‮⁬‬‮‫‍​‮⁪‍⁬‬⁫‬⁬⁯‏⁬‫‮([In] IDisposable obj0) => obj0.Dispose();

    static Random \u206F‫⁮⁭⁬‭⁮⁪‎​⁭⁯⁯⁭‏‮‏‌‭‌⁬‏⁯⁮⁪⁯‮⁫‪⁫⁫‮‏⁭‮‏‭‫‏⁫‮() => new Random();

    static int \u200D‭‪⁬‪‫⁪⁭‭‏⁪⁫‭⁫​⁮‮‪⁯⁯‮‌‫⁯‬‮‭⁮‮‮‫‎‌⁯‍‪⁫‪‪‎‮([In] Random obj0, [In] int obj1, [In] int obj2) => obj0.Next(obj1, obj2);

    static DialogResult \u202D‌‌⁫⁬‬⁬‭⁬‫‪‫‌⁯⁮‍⁫‏⁪‬⁮‏‬‬⁫‬⁯⁪‎​‮⁫‫⁭‫⁪‪‮‎⁭‮([In] Form obj0) => obj0.ShowDialog();

    static bool \u200D‭‏⁯⁯‬​‌‭‌​⁬‍⁭⁬‎‭‮‮⁬⁬​‌‬‪‏‭‏⁬‪⁬‭‌⁪⁯‬⁯⁭‭⁭‮([In] string obj0, [In] string obj1) => obj0 == obj1;
  }
}
