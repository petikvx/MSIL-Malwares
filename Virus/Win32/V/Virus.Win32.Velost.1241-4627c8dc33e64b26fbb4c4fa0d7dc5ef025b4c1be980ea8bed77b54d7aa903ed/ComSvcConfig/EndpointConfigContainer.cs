// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.EndpointConfigContainer
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Reflection;
using System.ServiceModel.Configuration;
using System.ServiceModel.Description;
using System.Xml;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal abstract class EndpointConfigContainer
  {
    private const string comServiceBehavior = "ComServiceMexBehavior";

    public abstract List<EndpointConfig> GetEndpointConfigs();

    public virtual bool HasEndpointsForApplication(Guid appid) => this.GetEndpointConfigs(appid).Count > 0;

    public virtual List<EndpointConfig> GetEndpointConfigs(Guid appid)
    {
      List<EndpointConfig> endpointConfigs = new List<EndpointConfig>();
      foreach (EndpointConfig endpointConfig in this.GetEndpointConfigs())
      {
        if (endpointConfig.Appid == appid)
          endpointConfigs.Add(endpointConfig);
      }
      return endpointConfigs;
    }

    public abstract void Add(IList<EndpointConfig> endpointConfigs);

    public abstract void PrepareChanges();

    public abstract void AbortChanges();

    public abstract void CommitChanges();

    public abstract string DefaultEndpointAddress(Guid appId, Guid clsid, Guid iid);

    public abstract string DefaultMexAddress(Guid appId, Guid clsid);

    public abstract string DefaultBindingType { get; }

    public abstract string DefaultBindingName { get; }

    public abstract string DefaultTransactionalBindingType { get; }

    public abstract string DefaultTransactionalBindingName { get; }

    public abstract string DefaultMexBindingType { get; }

    public abstract string DefaultMexBindingName { get; }

    public abstract bool WasModified { get; set; }

    public abstract System.Configuration.Configuration GetConfiguration(bool readOnly);

    public abstract string BaseServiceAddress(Guid appId, Guid clsid, Guid iid);

    public abstract List<string> GetBaseAddresses(EndpointConfig config);

    public abstract void Remove(IList<EndpointConfig> endpointConfigs);

    protected abstract void RemoveBinding(System.Configuration.Configuration config);

    protected abstract void AddBinding(System.Configuration.Configuration config);

    protected bool BaseAddEndpointConfig(System.Configuration.Configuration config, EndpointConfig endpointConfig)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      ServiceElementCollection services = sectionGroup.Services.Services;
      ServiceElement element = (ServiceElement) null;
      foreach (ServiceElement serviceElement in (ConfigurationElementCollection) services)
      {
        if (endpointConfig.MatchServiceType(serviceElement.Name))
        {
          element = serviceElement;
          break;
        }
      }
      if (element == null)
      {
        element = new ServiceElement(endpointConfig.ServiceType);
        string str = this.BaseServiceAddress(endpointConfig.Appid, endpointConfig.Clsid, endpointConfig.Iid);
        if (!string.IsNullOrEmpty(str))
          element.Host.BaseAddresses.Add(new BaseAddressElement()
          {
            BaseAddress = str
          });
        sectionGroup.Services.Services.Add(element);
      }
      if (endpointConfig.IsMexEndpoint)
      {
        this.EnsureComMetaDataExchangeBehaviorAdded(config);
        element.BehaviorConfiguration = "ComServiceMexBehavior";
      }
      bool flag1 = false;
      if (!endpointConfig.IsMexEndpoint)
        flag1 = this.AddComContractToConfig(config, endpointConfig.InterfaceName, endpointConfig.Iid.ToString("B"), endpointConfig.Methods);
      foreach (ServiceEndpointElement endpoint in (ConfigurationElementCollection) element.Endpoints)
      {
        bool flag2 = true;
        if (this is ComplusEndpointConfigContainer)
          flag2 = ((ComplusEndpointConfigContainer) this).ListenerComponentExists;
        if (endpointConfig.MatchContract(endpoint.Contract))
        {
          if (flag2)
            return flag1;
          element.Endpoints.Remove(endpoint);
        }
      }
      element.Endpoints.Add(new ServiceEndpointElement(endpointConfig.Address, endpointConfig.ContractType)
      {
        Binding = endpointConfig.BindingType,
        BindingConfiguration = endpointConfig.BindingName
      });
      this.AddBinding(config);
      return true;
    }

    protected bool RemoveComContractMethods(
      System.Configuration.Configuration config,
      string interfaceID,
      IList<string> methods)
    {
      Guid guid = new Guid(interfaceID);
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      foreach (ComContractElement comContract in (ConfigurationElementCollection) sectionGroup.ComContracts.ComContracts)
      {
        try
        {
          if (new Guid(comContract.Contract) == guid)
          {
            foreach (string method in (IEnumerable<string>) methods)
            {
              foreach (ComMethodElement exposedMethod in (ConfigurationElementCollection) comContract.ExposedMethods)
              {
                if (exposedMethod.ExposedMethod == method)
                {
                  comContract.ExposedMethods.Remove(exposedMethod);
                  break;
                }
              }
            }
            if (comContract.ExposedMethods.Count == 0)
            {
              sectionGroup.ComContracts.ComContracts.Remove(comContract);
              return true;
            }
          }
        }
        catch (FormatException ex)
        {
        }
      }
      return false;
    }

    protected bool RemoveComContractIfNotUsedByAnyService(System.Configuration.Configuration config, string interfaceID)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      ServiceElementCollection services = sectionGroup.Services.Services;
      Guid guid1 = new Guid(interfaceID);
      foreach (ServiceElement serviceElement in (ConfigurationElementCollection) services)
      {
        foreach (ServiceEndpointElement endpoint in (ConfigurationElementCollection) serviceElement.Endpoints)
        {
          try
          {
            if (!this.IsMetaDataEndpoint(endpoint))
            {
              Guid guid2 = new Guid(endpoint.Contract);
              if (guid1 == guid2)
                return false;
            }
          }
          catch (FormatException ex)
          {
          }
        }
      }
      ComContractElementCollection comContracts = sectionGroup.ComContracts.ComContracts;
      foreach (ComContractElement element in (ConfigurationElementCollection) comContracts)
      {
        try
        {
          if (new Guid(element.Contract) == guid1)
          {
            comContracts.Remove(element);
            return true;
          }
        }
        catch (FormatException ex)
        {
        }
      }
      return false;
    }

    protected bool AddComContractToConfig(
      System.Configuration.Configuration config,
      string name,
      string contractType,
      IList<string> methods)
    {
      Guid guid1 = new Guid(contractType);
      ComContractElementCollection comContracts = ServiceModelSectionGroup.GetSectionGroup(config).ComContracts.ComContracts;
      foreach (ComContractElement comContractElement in (ConfigurationElementCollection) comContracts)
      {
        try
        {
          Guid guid2 = new Guid(comContractElement.Contract);
          if (guid1 == guid2)
          {
            bool config1 = false;
            foreach (string method in (IEnumerable<string>) methods)
            {
              bool flag = false;
              foreach (ComMethodElement exposedMethod in (ConfigurationElementCollection) comContractElement.ExposedMethods)
              {
                if (exposedMethod.ExposedMethod == method)
                  flag = true;
              }
              if (!flag)
              {
                comContractElement.ExposedMethods.Add(new ComMethodElement(method));
                config1 = true;
              }
            }
            if (comContractElement.PersistableTypes.Count == 0 && Tool.Options.AllowReferences && config1)
              comContractElement.PersistableTypes.EmitClear = true;
            return config1;
          }
        }
        catch (FormatException ex)
        {
        }
      }
      ComContractElement element = new ComContractElement(guid1.ToString("B").ToUpperInvariant());
      element.Name = name;
      element.Namespace = EndpointConfig.TempURI + guid1.ToString().ToUpperInvariant();
      foreach (string method in (IEnumerable<string>) methods)
        element.ExposedMethods.Add(new ComMethodElement(method));
      if (element.PersistableTypes.Count == 0 && Tool.Options.AllowReferences)
        element.PersistableTypes.EmitClear = true;
      element.RequiresSession = true;
      comContracts.Add(element);
      return true;
    }

    protected bool IsMetaDataEndpoint(ServiceEndpointElement ee) => ee.Contract == "IMetadataExchange";

    protected Dictionary<string, List<EndpointConfig>> BaseGetEndpointsFromConfiguration(
      System.Configuration.Configuration config)
    {
      Dictionary<string, List<EndpointConfig>> fromConfiguration = new Dictionary<string, List<EndpointConfig>>();
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      ServiceElementCollection services;
      try
      {
        services = sectionGroup.Services.Services;
      }
      catch (ConfigurationErrorsException ex)
      {
        ToolConsole.WriteWarning(ex.Message);
        ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("ConfigFileSkipped", (object) ex.Filename));
        return fromConfiguration;
      }
      foreach (ServiceElement serviceElement in (ConfigurationElementCollection) services)
      {
        string name = serviceElement.Name;
        Guid empty1 = Guid.Empty;
        Guid empty2 = Guid.Empty;
        string[] strArray = name.Split(',');
        if (strArray.Length == 2)
        {
          Guid clsid;
          try
          {
            Guid guid = new Guid(strArray[0]);
            clsid = new Guid(strArray[1]);
          }
          catch (FormatException ex)
          {
            continue;
          }
          List<EndpointConfig> endpointConfigList;
          if (fromConfiguration.ContainsKey(name))
          {
            endpointConfigList = fromConfiguration[name];
          }
          else
          {
            endpointConfigList = new List<EndpointConfig>();
            fromConfiguration[name] = endpointConfigList;
          }
          foreach (ServiceEndpointElement endpoint in (ConfigurationElementCollection) serviceElement.Endpoints)
          {
            EndpointConfig endpointConfig;
            if (!this.IsMetaDataEndpoint(endpoint))
            {
              Guid iid;
              try
              {
                iid = new Guid(endpoint.Contract);
              }
              catch (FormatException ex)
              {
                continue;
              }
              endpointConfig = new EndpointConfig(Guid.Empty, clsid, iid, endpoint.Binding, endpoint.BindingConfiguration, endpoint.Address, false, new List<string>());
            }
            else
              endpointConfig = new EndpointConfig(Guid.Empty, clsid, typeof (IMetadataExchange).GUID, endpoint.Binding, endpoint.BindingConfiguration, endpoint.Address, true, new List<string>());
            endpointConfigList.Add(endpointConfig);
          }
        }
      }
      return fromConfiguration;
    }

    protected bool RemoveAllServicesForContract(System.Configuration.Configuration config, string interfaceID)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      ServiceElementCollection services = sectionGroup.Services.Services;
      bool flag = false;
      ServiceElementCollection elementCollection1 = new ServiceElementCollection();
      foreach (ServiceElement element1 in (ConfigurationElementCollection) services)
      {
        ServiceEndpointElementCollection elementCollection2 = new ServiceEndpointElementCollection();
        foreach (ServiceEndpointElement endpoint in (ConfigurationElementCollection) element1.Endpoints)
        {
          if (interfaceID.ToUpperInvariant() == endpoint.Contract.ToUpperInvariant())
          {
            flag = true;
            elementCollection2.Add(endpoint);
          }
        }
        foreach (ServiceEndpointElement element2 in (ConfigurationElementCollection) elementCollection2)
        {
          element1.Endpoints.Remove(element2);
          if (element1.Endpoints.Count == 1 && element1.Endpoints[0].Contract == "IMetadataExchange")
            element1.Endpoints.Remove(element1.Endpoints[0]);
          if (element1.Endpoints.Count == 0)
            elementCollection1.Add(element1);
        }
      }
      foreach (ServiceElement element in (ConfigurationElementCollection) elementCollection1)
        sectionGroup.Services.Services.Remove(element);
      if (services.Count == 0)
      {
        this.EnsureComMetaDataExchangeBehaviorRemoved(config);
        this.RemoveBinding(config);
      }
      return flag;
    }

    protected bool RemoveEndpointFromServiceOnly(
      System.Configuration.Configuration config,
      EndpointConfig endpointConfig)
    {
      ServiceElementCollection services = ServiceModelSectionGroup.GetSectionGroup(config).Services.Services;
      ServiceElement element = (ServiceElement) null;
      foreach (ServiceElement serviceElement in (ConfigurationElementCollection) services)
      {
        if (endpointConfig.MatchServiceType(serviceElement.Name))
        {
          element = serviceElement;
          break;
        }
      }
      if (element == null)
        return false;
      foreach (ServiceEndpointElement endpoint in (ConfigurationElementCollection) element.Endpoints)
      {
        if (endpointConfig.MatchContract(endpoint.Contract) && endpoint.Address == endpointConfig.Address)
        {
          element.Endpoints.Remove(endpoint);
          if (!endpointConfig.IsMexEndpoint)
            this.RemoveComContractIfNotUsedByAnyService(config, endpoint.Contract);
          if (element.Endpoints.Count == 1 && element.Endpoints[0].Contract == "IMetadataExchange")
            element.Endpoints.Remove(element.Endpoints[0]);
          if (element.Endpoints.Count == 0)
          {
            services.Remove(element);
            if (services.Count == 0)
            {
              this.EnsureComMetaDataExchangeBehaviorRemoved(config);
              this.RemoveBinding(config);
            }
          }
          return true;
        }
      }
      return false;
    }

    protected bool BaseRemoveEndpointConfig(System.Configuration.Configuration config, EndpointConfig endpointConfig)
    {
      if (endpointConfig.Methods == null || endpointConfig.IsMexEndpoint)
        return this.RemoveEndpointFromServiceOnly(config, endpointConfig);
      if (this.RemoveComContractMethods(config, endpointConfig.Iid.ToString("B"), endpointConfig.Methods))
        this.RemoveAllServicesForContract(config, endpointConfig.Iid.ToString("B"));
      return true;
    }

    protected System.Configuration.Configuration GetConfigurationFromFile(
      string fileName)
    {
      ExeConfigurationFileMap fileMap = new ExeConfigurationFileMap();
      System.Configuration.Configuration configuration = ConfigurationManager.OpenMachineConfiguration();
      fileMap.MachineConfigFilename = configuration.FilePath;
      fileMap.ExeConfigFilename = fileName;
      if (!EndpointConfigContainer.IsValidRuntime(fileName))
      {
        ToolConsole.WriteError(Microsoft.Tools.ServiceModel.SR.GetString("InvalidRuntime", (object) Assembly.GetExecutingAssembly().ImageRuntimeVersion), "");
        throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("OperationAbortedDuetoClrVersion"), (Exception) null);
      }
      return ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None);
    }

    protected void EnsureComMetaDataExchangeBehaviorAdded(System.Configuration.Configuration config)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      if (sectionGroup.Behaviors.ServiceBehaviors.ContainsKey((object) "ComServiceMexBehavior"))
        return;
      ServiceBehaviorElement element = new ServiceBehaviorElement("ComServiceMexBehavior");
      sectionGroup.Behaviors.ServiceBehaviors.Add(element);
      element.Add((BehaviorExtensionElement) new ServiceMetadataPublishingElement()
      {
        HttpGetEnabled = (Tool.Options.Hosting != Hosting.Complus && Tool.Options.Hosting != Hosting.NotSpecified)
      });
      element.Add((BehaviorExtensionElement) new ServiceDebugElement()
      {
        IncludeExceptionDetailInFaults = false
      });
    }

    protected void EnsureComMetaDataExchangeBehaviorRemoved(System.Configuration.Configuration config)
    {
      ServiceModelSectionGroup sectionGroup = ServiceModelSectionGroup.GetSectionGroup(config);
      if (!sectionGroup.Behaviors.ServiceBehaviors.ContainsKey((object) "ComServiceMexBehavior"))
        return;
      ServiceBehaviorElement serviceBehavior = sectionGroup.Behaviors.ServiceBehaviors[(object) "ComServiceMexBehavior"];
      sectionGroup.Behaviors.ServiceBehaviors.Remove(serviceBehavior);
    }

    internal static bool IsValidVersion(string version) => !string.IsNullOrEmpty(version) && version == Assembly.GetExecutingAssembly().ImageRuntimeVersion;

    public static bool IsValidRuntime(string fileName)
    {
      if (string.IsNullOrEmpty(fileName) || !File.Exists(fileName))
        return true;
      XmlDocument xmlDocument = new XmlDocument();
      xmlDocument.Load(fileName);
      XmlNode xmlNode1 = xmlDocument.DocumentElement.SelectSingleNode("startup");
      bool flag = true;
      if (xmlNode1 != null)
      {
        XmlNodeList xmlNodeList = xmlNode1.SelectNodes("supportedRuntime");
        if (xmlNodeList != null)
        {
          flag = xmlNodeList.Count == 0;
          foreach (XmlNode xmlNode2 in xmlNodeList)
          {
            if (EndpointConfigContainer.IsValidVersion(xmlNode2.Attributes.GetNamedItem("version").Value))
              flag = true;
          }
        }
        XmlNode xmlNode3 = xmlNode1.SelectSingleNode("requiredRuntime");
        if (xmlNode3 != null && !EndpointConfigContainer.IsValidVersion(xmlNode3.Attributes.GetNamedItem("version").Value))
          flag = false;
      }
      return flag;
    }
  }
}
