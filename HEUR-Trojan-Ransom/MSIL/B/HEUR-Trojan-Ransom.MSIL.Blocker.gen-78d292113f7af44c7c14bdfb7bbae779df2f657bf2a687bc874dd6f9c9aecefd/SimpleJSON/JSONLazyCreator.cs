// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: CustomA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ABC0B0F-8965-48BE-A39F-300B4A85D17D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-78d292113f7af44c7c14bdfb7bbae779df2f657bf2a687bc874dd6f9c9aecefd.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = 1261820599;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2039475093)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * -1728935740 ^ 1602950752;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.m_Key = (string) null;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = -1305786812;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -196431231)) % 4U)
        {
          case 0:
            this.m_Key = aKey;
            num1 = (int) num2 * -337383510 ^ -878815709;
            continue;
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * -564195890 ^ -1619649745;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = -330371776;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -960500141)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = -1251733244;
            continue;
          case 2:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * 602369222 ^ -1287135862;
            continue;
          case 3:
            num1 = (int) num2 * -333818996 ^ -1751796061;
            continue;
          case 4:
            num1 = (int) num2 * 1459598581 ^ -1337048154;
            continue;
          case 5:
            num1 = (int) num2 * 1628699165 ^ -2042383877;
            continue;
          case 6:
            num1 = (int) num2 * 1157787374 ^ -1512389070;
            continue;
          case 7:
            num1 = (int) num2 * -114784047 ^ -1622765156;
            continue;
          case 9:
            int num3 = this.m_Key != null ? -2030842897 : (num3 = -1481821971);
            num1 = num3 ^ (int) num2 * 278483431;
            continue;
          case 10:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = (int) num2 * 2142228127 ^ 418580915;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this.m_Node = (JSONNode) null;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
label_1:
        int num1 = 796824396;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 852459772)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 1606492933 ^ -899620019;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = -114176706;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -134224893)) % 6U)
          {
            case 0:
              num1 = (int) num2 * -147173519 ^ 1840475069;
              continue;
            case 1:
              aVal.Add(value);
              num1 = (int) num2 * -1731380684 ^ 2136939578;
              continue;
            case 2:
              goto label_3;
            case 3:
              num1 = (int) num2 * 1854950306 ^ -871683166;
              continue;
            case 4:
              goto label_1;
            case 5:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1668247377 ^ 1912844644;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1121811173;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1469035042)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * -1417572384 ^ -949264321;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1795373088;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1602070299)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal.Add(aKey, value);
              num1 = (int) num2 * 522111555 ^ 1141605688;
              continue;
            case 2:
              aVal = new JSONClass();
              num1 = (int) num2 * 1525276831 ^ 1442747090;
              continue;
            case 4:
              num1 = (int) num2 * 777827311 ^ 292625398;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        this.Set((JSONNode) aVal);
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
label_1:
      int num1 = -176482561;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -88177885)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            aVal.Add(aItem);
            num1 = (int) num2 * -265576635 ^ -713215826;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -1365360479 ^ -375812844;
            continue;
          case 4:
            num1 = (int) num2 * 1041253083 ^ 850438391;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = -1081421041;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1439397015)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            aVal = new JSONClass();
            num1 = (int) num2 * -1823355257 ^ -140129993;
            continue;
          case 2:
            goto label_1;
          case 3:
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -933241234 ^ 1266925742;
            continue;
          case 4:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -2143962382 ^ -259975570;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      if (b != null)
        goto label_4;
label_1:
      int num1 = 462534820;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1631601785)) % 5U)
        {
          case 0:
            goto label_1;
          case 2:
            goto label_4;
          case 3:
            num1 = (int) num2 * -1528088012 ^ 1257786471;
            continue;
          case 4:
            flag = true;
            num1 = (int) num2 * -1511421785 ^ 418881852;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return flag;
label_4:
      flag = (object) a == b;
      num1 = 177103029;
      goto label_2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
      bool flag = !(a == b);
label_1:
      int num1 = -1966811569;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1357482299)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1531914439 ^ 301592866;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
label_1:
      int num1 = 2044199641;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 931230983)) % 6U)
        {
          case 0:
            flag = true;
            num1 = (int) num2 * -1043161643 ^ 1257824710;
            continue;
          case 1:
            num1 = (int) num2 * 1572528236 ^ 896718845;
            continue;
          case 3:
            flag = (object) this == obj;
            num1 = 825755713;
            continue;
          case 4:
            int num3 = obj != null ? -209150502 : (num3 = -1211900203);
            num1 = num3 ^ (int) num2 * 967340609;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return flag;
    }

    public override int GetHashCode()
    {
      int hashCode = base.GetHashCode();
label_1:
      int num1 = 1461864183;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 570851711)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 425534916 ^ -675047532;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = -578398998;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1777453043)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -1596358578 ^ -1653118144;
            continue;
          case 3:
            str = "";
            num1 = (int) num2 * -695639582 ^ 1841378869;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = 1853079257;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 285660540)) % 4U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * 1484837752 ^ 1238584858;
            continue;
          case 2:
            num1 = (int) num2 * 888761913 ^ -1092754362;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override int AsInt
    {
      get
      {
        this.Set((JSONNode) new JSONData(0));
        return 0;
      }
      set
      {
label_1:
        int num1 = -379812420;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1424255267)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1033208673 ^ 771876220;
              continue;
            case 2:
              num1 = (int) num2 * 276215057 ^ -1547113388;
              continue;
            case 3:
              aVal = new JSONData(value);
              num1 = (int) num2 * 719003637 ^ 1852016452;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = 490037444;
        JSONData aVal;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1681815713)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              asFloat = 0.0f;
              num1 = (int) num2 * 1522182055 ^ -1399472459;
              continue;
            case 2:
              aVal = new JSONData(0.0f);
              num1 = (int) num2 * 1897087128 ^ 1221811117;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1135407418 ^ 797030700;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asFloat;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = -1416513521;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -384551864)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -534774583 ^ 1381153472;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override double AsDouble
    {
      get
      {
        JSONData aVal = new JSONData(0.0);
label_1:
        int num1 = -368893924;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1741824460)) % 3U)
          {
            case 1:
              this.Set((JSONNode) aVal);
              asDouble = 0.0;
              num1 = (int) num2 * 1111852323 ^ 641895563;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return asDouble;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = 666635092;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1078091810)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1877165204 ^ 415925585;
              continue;
            case 3:
              num1 = (int) num2 * 1806983539 ^ -921396350;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = 1471715375;
        bool asBool;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 39552313)) % 7U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1539335196 ^ -708132547;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 225497490 ^ -2028607511;
              continue;
            case 3:
              asBool = false;
              num1 = (int) num2 * -1826899726 ^ 480794748;
              continue;
            case 5:
              aVal = new JSONData(false);
              num1 = (int) num2 * -798248092 ^ 1303015762;
              continue;
            case 6:
              num1 = (int) num2 * 1992429925 ^ 2025253838;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return asBool;
      }
      set
      {
label_1:
        int num1 = -562405493;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1072659754)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 1024897878 ^ -233659482;
              continue;
            case 2:
              num1 = (int) num2 * 1600634734 ^ -1770486363;
              continue;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = -765520967;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -440099142)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              asArray = aVal;
              num1 = (int) num2 * 184820437 ^ 480726970;
              continue;
            case 2:
              num1 = (int) num2 * 815847110 ^ 1438402583;
              continue;
            case 4:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1681644628 ^ 448481418;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
label_1:
        int num1 = 239945755;
        JSONClass aVal;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2039219617)) % 7U)
          {
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 703324558 ^ 1291977549;
              continue;
            case 2:
              num1 = (int) num2 * -1792225862 ^ -165749500;
              continue;
            case 3:
              asObject = aVal;
              num1 = (int) num2 * 2140958758 ^ -1876843969;
              continue;
            case 4:
              num1 = (int) num2 * 230835927 ^ -1769570554;
              continue;
            case 5:
              aVal = new JSONClass();
              num1 = (int) num2 * -830813201 ^ -187143268;
              continue;
            case 6:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_8:
        return asObject;
      }
    }
  }
}
