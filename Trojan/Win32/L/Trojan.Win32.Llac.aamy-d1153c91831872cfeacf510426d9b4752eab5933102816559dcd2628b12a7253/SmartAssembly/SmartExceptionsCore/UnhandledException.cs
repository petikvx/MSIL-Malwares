// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UnhandledException
// Assembly: syncuiLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F112AE9C-7564-463C-8834-3BB2BC4FBE1B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Llac.aamy-d1153c91831872cfeacf510426d9b4752eab5933102816559dcd2628b12a7253.exe

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [Serializable]
  public sealed class UnhandledException : Exception
  {
    public int MethodID;
    public object[] Objects;
    public int ILOffset;
    private Exception previousException;

    internal Exception \u0003() => this.previousException;

    public static Exception \u0003([In] Exception obj0) => UnhandledException.\u0003(obj0, new object[0]);

    public static Exception \u0003([In] Exception obj0, [In] object obj1) => UnhandledException.\u0003(obj0, new object[1]
    {
      obj1
    });

    public static Exception \u0003([In] Exception obj0, [In] object obj1, [In] object obj2) => UnhandledException.\u0003(obj0, new object[2]
    {
      obj1,
      obj2
    });

    public static Exception \u0003([In] Exception obj0, [In] object obj1, [In] object obj2, [In] object obj3) => UnhandledException.\u0003(obj0, new object[3]
    {
      obj1,
      obj2,
      obj3
    });

    public static Exception \u0003(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4)
    {
      return UnhandledException.\u0003(obj0, new object[4]
      {
        obj1,
        obj2,
        obj3,
        obj4
      });
    }

    public static Exception \u0003(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5)
    {
      return UnhandledException.\u0003(obj0, new object[5]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5
      });
    }

    public static Exception \u0003(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6)
    {
      return UnhandledException.\u0003(obj0, new object[6]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6
      });
    }

    public static Exception \u0003(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7)
    {
      return UnhandledException.\u0003(obj0, new object[7]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7
      });
    }

    public static Exception \u0003(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8)
    {
      return UnhandledException.\u0003(obj0, new object[8]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8
      });
    }

    public static Exception \u0003(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8,
      [In] object obj9)
    {
      return UnhandledException.\u0003(obj0, new object[9]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8,
        obj9
      });
    }

    public static Exception \u0003(
      [In] Exception obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3,
      [In] object obj4,
      [In] object obj5,
      [In] object obj6,
      [In] object obj7,
      [In] object obj8,
      [In] object obj9,
      [In] object obj10)
    {
      return UnhandledException.\u0003(obj0, new object[10]
      {
        obj1,
        obj2,
        obj3,
        obj4,
        obj5,
        obj6,
        obj7,
        obj8,
        obj9,
        obj10
      });
    }

    public static Exception \u0003([In] Exception obj0, [In] object[] obj1)
    {
      if (\u0003.\u0003.\u0001)
        return (Exception) null;
      int num1 = -1;
      int num2 = -1;
      try
      {
        StackTrace stackTrace = new StackTrace(obj0);
        if (stackTrace.FrameCount > 0)
        {
          StackFrame frame = stackTrace.GetFrame(stackTrace.FrameCount - 1);
          num2 = (frame.GetMethod().MetadataToken & 16777215) - 1;
          num1 = frame.GetILOffset();
        }
      }
      catch
      {
      }
      UnhandledException unhandledException = new UnhandledException(num2, obj1, num1, obj0);
      if (obj0 is UnhandledException)
      {
        Exception exception = (obj0 as UnhandledException).\u0003();
        if (exception != null)
          obj0 = exception;
      }
      Exception exception1 = obj0;
      while (exception1.InnerException != null)
        exception1 = exception1.InnerException;
      try
      {
        typeof (Exception).GetField("_innerException", BindingFlags.Instance | BindingFlags.NonPublic).SetValue((object) exception1, (object) unhandledException);
      }
      catch
      {
      }
      return obj0;
    }

    public override void GetObjectData([In] SerializationInfo obj0, [In] StreamingContext obj1)
    {
      base.GetObjectData(obj0, obj1);
      obj0.AddValue("UnhandledException.MethodID", (object) this.MethodID, typeof (int));
      obj0.AddValue("UnhandledException.ILOffset", (object) this.ILOffset, typeof (int));
      obj0.AddValue("UnhandledException.PreviousException", (object) this.previousException, typeof (Exception));
      int num = this.Objects == null ? 0 : this.Objects.Length;
      obj0.AddValue("UnhandledException.Objects.Length", (object) num, typeof (int));
      for (int index = 0; index < num; ++index)
        obj0.AddValue(string.Format("UnhandledException.Objects[{0}]", (object) index), this.Objects[index], typeof (object));
    }

    internal UnhandledException([In] SerializationInfo obj0, [In] StreamingContext obj1)
      : base(obj0, obj1)
    {
      this.MethodID = obj0.GetInt32("UnhandledException.MethodID");
      this.ILOffset = obj0.GetInt32("UnhandledException.ILOffset");
      this.previousException = (Exception) obj0.GetValue("UnhandledException.PreviousException", typeof (Exception));
      int int32 = obj0.GetInt32("UnhandledException.Objects.Length");
      this.Objects = new object[int32];
      for (int index = 0; index < int32; ++index)
        this.Objects[index] = obj0.GetValue(string.Format("UnhandledException.Objects[{0}]", (object) index), typeof (object));
    }

    internal UnhandledException([In] int obj0, [In] object[] obj1, [In] int obj2, [In] Exception obj3)
      : base(string.Format("SmartExceptionsCore.UnhandledException @ {0}, offset:{1}", (object) obj0, (object) obj2))
    {
      this.MethodID = obj0;
      this.Objects = obj1;
      this.ILOffset = obj2;
      this.previousException = obj3;
    }
  }
}
