// Decompiled with JetBrains decompiler
// Type: vcCUX55ezy8cZuH5.GEZX9FCLgqe60
// Assembly: server 3.6, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 78702866-4FCA-4087-83C1-D481D36DCA54
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Foreign.neki-3dbeae94aa76d73d91612d22d1d82600e59b54ea77e5438c64464047f992a405.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace vcCUX55ezy8cZuH5
{
  public class GEZX9FCLgqe60
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr aASs60kBvVGhvg5183;

    public GEZX9FCLgqe60() => this.aASs60kBvVGhvg5183 = IntPtr.Zero;

    public GEZX9FCLgqe60(string baseName) => this.MlyC7kpp258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr PmWB2w2cOZn239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr SLoo8XJwHPc240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int AmB1PGyS829241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int D6jBF4rc242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int vWciMeyK243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int xF2KJpCM244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr A00GlEVR245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int lI8h5wiF246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int \u0034vjgo3ON247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int gV0d6iqe248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr tx1E4KQQ249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int \u0031lX36gF0250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int mnFd5mnw251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double bcqpDIK2252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr iUOxuDAj253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr Ete36LH0254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr g0QJCc87255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr \u0039vtRkrcj256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int AUKbs7vJ257(IntPtr handle);

    public void MlyC7kpp258(string baseName)
    {
      if (GEZX9FCLgqe60.D6jBF4rc242(this.\u0035LoZySTi8NXREo2265(baseName), out this.aASs60kBvVGhvg5183) != 0)
      {
        this.aASs60kBvVGhvg5183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void up8DR1p6259()
    {
      if (!(this.aASs60kBvVGhvg5183 != IntPtr.Zero))
        return;
      GEZX9FCLgqe60.vWciMeyK243(this.aASs60kBvVGhvg5183);
    }

    public ArrayList LHnZaIYd260()
    {
      DataTable dataTable = this.P53nUizryuEqLJv262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void gVsb0vx8v7WgDvZ261(string query)
    {
      IntPtr errorr;
      GEZX9FCLgqe60.xF2KJpCM244(this.aASs60kBvVGhvg5183, this.\u0035LoZySTi8NXREo2265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.irHtlc93bCsIjqF266(GEZX9FCLgqe60.A00GlEVR245(errorr)));
    }

    public DataTable P53nUizryuEqLJv262(string query)
    {
      IntPtr statement;
      GEZX9FCLgqe60.lI8h5wiF246(this.aASs60kBvVGhvg5183, this.\u0035LoZySTi8NXREo2265(query), this.\u0032sX1CfMrlaWIdm6268(this.\u0035LoZySTi8NXREo2265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.z3nlmbRepYS08K5263(statement, ref table);
      while (num == 100)
        num = this.\u0039sgHyT6l3VGuUGm264(statement, ref table);
      GEZX9FCLgqe60.AUKbs7vJ257(statement);
      return table;
    }

    private int z3nlmbRepYS08K5263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (GEZX9FCLgqe60.\u0034vjgo3ON247(statement) == 100)
      {
        int num1 = GEZX9FCLgqe60.gV0d6iqe248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.irHtlc93bCsIjqF266(GEZX9FCLgqe60.tx1E4KQQ249(statement, columnNumber));
          int num3 = GEZX9FCLgqe60.\u0031lX36gF0250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) GEZX9FCLgqe60.mnFd5mnw251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) GEZX9FCLgqe60.bcqpDIK2252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.irHtlc93bCsIjqF266(GEZX9FCLgqe60.iUOxuDAj253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) GEZX9FCLgqe60.g0QJCc87255(statement, columnNumber);
            objArray[columnNumber] = (object) this.HXx2T6B9bcf97UA267(GEZX9FCLgqe60.Ete36LH0254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return GEZX9FCLgqe60.\u0034vjgo3ON247(statement);
    }

    private int \u0039sgHyT6l3VGuUGm264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = GEZX9FCLgqe60.gV0d6iqe248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = GEZX9FCLgqe60.\u0031lX36gF0250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) GEZX9FCLgqe60.mnFd5mnw251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) GEZX9FCLgqe60.bcqpDIK2252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.irHtlc93bCsIjqF266(GEZX9FCLgqe60.iUOxuDAj253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) GEZX9FCLgqe60.g0QJCc87255(statement, columnNumber);
            objArray[columnNumber] = (object) this.HXx2T6B9bcf97UA267(GEZX9FCLgqe60.Ete36LH0254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = GEZX9FCLgqe60.\u0034vjgo3ON247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr \u0035LoZySTi8NXREo2265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = GEZX9FCLgqe60.PmWB2w2cOZn239(GEZX9FCLgqe60.SLoo8XJwHPc240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string irHtlc93bCsIjqF266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.\u0032sX1CfMrlaWIdm6268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array HXx2T6B9bcf97UA267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.\u0032sX1CfMrlaWIdm6268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int \u0032sX1CfMrlaWIdm6268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : GEZX9FCLgqe60.AmB1PGyS829241(ptr);

    public enum \u003229AAZLiNqUwbSX61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
