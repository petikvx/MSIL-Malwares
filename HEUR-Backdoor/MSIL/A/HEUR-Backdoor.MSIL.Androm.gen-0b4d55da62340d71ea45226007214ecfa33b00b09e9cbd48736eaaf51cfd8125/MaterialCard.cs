// Decompiled with JetBrains decompiler
// Type: MaterialSurface.MaterialCard
// Assembly: Func, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EFD38B4B-EBC7-4ADC-A92E-3AF74F6197CA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0b4d55da62340d71ea45226007214ecfa33b00b09e9cbd48736eaaf51cfd8125.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MaterialSurface
{
  public class MaterialCard : Panel, IMaterialControl
  {
    private int radius = 8;
    private int shadowOpacity = 50;
    private int shadowDepth = 2;
    private bool mouseInteract = false;
    private MaterialCard.CardStyle cardStyle = MaterialCard.CardStyle.Elevated;
    private Color cardColor = Color.White;

    [Category("Appearance Material")]
    [Description("Effect type on click.")]
    public Color CardColor
    {
      get => this.cardColor;
      set
      {
        this.cardColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Effect type on click.")]
    public MaterialCard.CardStyle Style
    {
      get => this.cardStyle;
      set
      {
        this.cardStyle = value;
        switch (this.cardStyle)
        {
          case MaterialCard.CardStyle.Elevated:
            this.Margin = new Padding(5);
            break;
          case MaterialCard.CardStyle.Outlined:
            this.Margin = new Padding(4);
            break;
        }
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Rounded ratio.")]
    public int Radius
    {
      get => this.radius;
      set
      {
        this.radius = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("The depth of shadow.")]
    public int ShawdowDepth
    {
      get => this.shadowDepth;
      set
      {
        if (value < 0 || value > 5)
          return;
        this.shadowDepth = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Shadow opacity, yeah.")]
    public int ShawdowOpacity
    {
      get => this.shadowOpacity;
      set
      {
        if (value < 40 || value > 60)
          return;
        this.shadowOpacity = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Toggle card animation on mouse enter/leave.")]
    public bool MouseInteract
    {
      get => this.mouseInteract;
      set => this.mouseInteract = value;
    }

    public MouseState MouseState { get; set; }

    public MaterialCard()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.Margin = new Padding(5);
      this.BorderStyle = BorderStyle.None;
      this.Size = new Size(300, 100);
      this.Font = new Font("Segoe UI", 10.5f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.MouseState = MouseState.OUT;
    }

    protected override void InitLayout()
    {
      base.InitLayout();
      this.BackColor = this.Parent.BackColor;
    }

    protected override void OnParentBackColorChanged(EventArgs e)
    {
      base.OnParentBackColorChanged(e);
      this.BackColor = this.Parent.BackColor;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics = e.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      GraphicsPath path = new GraphicsPath();
      switch (this.cardStyle)
      {
        case MaterialCard.CardStyle.Elevated:
          path = GraphicHelper.GetRoundedRectangle(5f, 5f, (float) (this.Width - 10), (float) (this.Height - 10), this.radius);
          graphics.Clear(this.Parent.BackColor);
          if ((this.MouseState == MouseState.HOVER || this.Focused) && this.mouseInteract)
          {
            for (int index = 0; index < this.shadowDepth + 1; ++index)
            {
              GraphicsPath roundedRectangle = GraphicHelper.GetRoundedRectangle((float) (5 - index), (float) (5 - index + 2), (float) (this.Width - 10 + index * 2), (float) (this.Height - 10 + index * 2), this.radius);
              graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.shadowOpacity + 10 - 5 * index, Color.Black)), roundedRectangle);
            }
          }
          else
          {
            for (int index = 0; index < this.shadowDepth; ++index)
            {
              GraphicsPath roundedRectangle = GraphicHelper.GetRoundedRectangle((float) (5 - index), (float) (5 - index + 1), (float) (this.Width - 10 + index * 2), (float) (this.Height - 10 + index * 2), this.radius);
              graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.shadowOpacity - 5 * index, Color.Black)), roundedRectangle);
            }
          }
          graphics.FillPath((Brush) new SolidBrush(this.cardColor), path);
          break;
        case MaterialCard.CardStyle.Outlined:
          path = GraphicHelper.GetRoundedRectangle(4f, 4f, (float) (this.Width - 8), (float) (this.Height - 8), this.radius + 1);
          graphics.DrawPath(new Pen(Color.Gray, 1.4f), path);
          if ((this.MouseState == MouseState.HOVER || this.Focused) && this.mouseInteract)
          {
            for (int index = 0; index < 4; ++index)
            {
              GraphicsPath roundedRectangle = GraphicHelper.GetRoundedRectangle((float) (5 - index), (float) (5 - index + 2), (float) (this.Width - 10 + index * 2), (float) (this.Height - 10 + index * 2), this.radius);
              graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.shadowOpacity - 20 - 5 * index, Color.Black)), roundedRectangle);
            }
          }
          graphics.FillPath((Brush) new SolidBrush(this.cardColor), path);
          break;
      }
      path.Dispose();
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      base.OnMouseEnter(e);
      this.MouseState = MouseState.HOVER;
      this.Invalidate();
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      base.OnMouseLeave(e);
      this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    protected override void OnControlAdded(ControlEventArgs e)
    {
      base.OnControlAdded(e);
      e.Control.MouseEnter += (EventHandler) ((s, ev) =>
      {
        this.MouseState = MouseState.HOVER;
        this.Invalidate();
      });
    }

    public enum CardStyle
    {
      Elevated,
      Outlined,
    }
  }
}
