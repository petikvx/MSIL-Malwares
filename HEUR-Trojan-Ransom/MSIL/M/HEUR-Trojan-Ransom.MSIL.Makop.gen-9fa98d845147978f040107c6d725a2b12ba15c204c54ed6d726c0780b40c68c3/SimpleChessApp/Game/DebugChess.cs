// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: Yo, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C4B4A9-DF91-4C66-8221-B310119D49D7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9fa98d845147978f040107c6d725a2b12ba15c204c54ed6d726c0780b40c68c3.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 1431188489;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1054652831)) % 13U)
        {
          case 0:
            int num3 = !flag ? 126574880 : (num3 = 134583968);
            num1 = num3 ^ (int) num2 * -2131976186;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * 21987742 ^ -814717468;
            continue;
          case 2:
            num1 = (int) num2 * 398875360 ^ 702072520;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * 55019019 ^ -288578894;
            continue;
          case 5:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -1192569039 ^ 1266915852;
            continue;
          case 6:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * 1253832436 ^ -565525608;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * 927001715 ^ -1115476620;
            continue;
          case 9:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 863957384 ^ -1502888759;
            continue;
          case 10:
            this.b.DisableTurns = true;
            num1 = 2075453183;
            continue;
          case 11:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 119054316 ^ 556424279;
            continue;
          case 12:
            flag = x == Pieces.King;
            num1 = (int) num2 * -1472815510 ^ 112367197;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 1313948019;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 566431598)) % 9U)
        {
          case 0:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 2000436066 ^ 1785995904;
            continue;
          case 1:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 1221060684 ^ -1903320560;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1833649213 ^ -1478443477;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * 795804379 ^ -1262745284;
            continue;
          case 6:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1233929607 ^ -1046864687;
            continue;
          case 7:
            this.b.ClearBoard();
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 1597201583 ^ 1015829955;
            continue;
          case 8:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 205764281 ^ 1583787195;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 976207309;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1024781604)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * -489160425 ^ -1811332232;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1427904253 ^ -1324119376;
            continue;
          case 4:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * 646470809 ^ 1638862325;
            continue;
          case 5:
            this.b.addBlack(4, 1, Pieces.Pawn);
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 2121392541 ^ 1545025967;
            continue;
          case 6:
            num1 = (int) num2 * -302682011 ^ -1158270763;
            continue;
          case 7:
            num1 = (int) num2 * -228914592 ^ -943924182;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 81822339 ^ 1601153286;
            continue;
          case 9:
            this.b.ClearBoard();
            num1 = (int) num2 * 806305490 ^ -1825178640;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1288331812;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1424200152)) % 15U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1686183341 ^ -1561585783;
            continue;
          case 2:
            num1 = (int) num2 * 1029294001 ^ 594922494;
            continue;
          case 3:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -820744853 ^ 1407101225;
            continue;
          case 4:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1599101772 ^ -39166022;
            continue;
          case 5:
            num1 = (int) num2 * -1008367502 ^ 121122405;
            continue;
          case 6:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -808419318 ^ 354618151;
            continue;
          case 7:
            num1 = (int) num2 * -850258291 ^ 1270240020;
            continue;
          case 8:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -1430726439 ^ -671696307;
            continue;
          case 9:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 251511228 ^ -853614551;
            continue;
          case 10:
            num1 = (int) num2 * -1144694758 ^ 483621264;
            continue;
          case 11:
            goto label_1;
          case 12:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1519251991 ^ -1621477530;
            continue;
          case 13:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -2092222924 ^ -1849993718;
            continue;
          case 14:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 751849227 ^ 2040844947;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 1172228066;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1393021011)) % 8U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 251197427 ^ -2006874932;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * 1156345916 ^ 1046108931;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1225921869 ^ -839352439;
            continue;
          case 5:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * -381865673 ^ 1000920760;
            continue;
          case 6:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -1973258123 ^ -1172443288;
            continue;
          case 7:
            num1 = (int) num2 * 1810601845 ^ 1914869171;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 376609760;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 537096835)) % 6U)
        {
          case 0:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * -908396528 ^ -423834284;
            continue;
          case 1:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 954700474 ^ -31335529;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 432407393 ^ -1485647655;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -1892741879 ^ -382120560;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1942517213;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -237468462)) % 16U)
        {
          case 0:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -208973693 ^ -949196436;
            continue;
          case 1:
            num1 = (int) num2 * -1581260472 ^ -328441846;
            continue;
          case 2:
            num1 = (int) num2 * 1725124009 ^ -1947415397;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -867175075 ^ 723293929;
            continue;
          case 5:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 1241001043 ^ 647448410;
            continue;
          case 6:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -204777763 ^ 1783821126;
            continue;
          case 7:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -314274909 ^ 2111161811;
            continue;
          case 8:
            num1 = (int) num2 * -1807066328 ^ -1967468076;
            continue;
          case 9:
            this.b.addBlack(4, 2, Pieces.Bishop);
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 1331258054 ^ -1485376842;
            continue;
          case 10:
            num1 = (int) num2 * 836787466 ^ 1734261939;
            continue;
          case 11:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1193635662 ^ 950457259;
            continue;
          case 12:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1885542961 ^ 175954038;
            continue;
          case 13:
            goto label_1;
          case 14:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -886331517 ^ -601589852;
            continue;
          case 15:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -2033094261 ^ -901976530;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }
  }
}
