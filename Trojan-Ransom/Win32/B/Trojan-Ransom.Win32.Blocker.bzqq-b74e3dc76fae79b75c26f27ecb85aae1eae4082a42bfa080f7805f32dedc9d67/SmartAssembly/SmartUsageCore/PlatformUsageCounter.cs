// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.PlatformUsageCounter
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.Win32;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Globalization;
using System.Runtime.InteropServices;

namespace SmartAssembly.SmartUsageCore
{
  internal static class PlatformUsageCounter
  {
    public static void CountPlatformUsages()
    {
      int major;
      int minor1;
      int minor2;
      try
      {
        try
        {
          if (PlatformUsageCounter.DotNetVersionInstalled("v4"))
            PlatformUsageCounter.ReportUsage("Platform: .NET 4.0 installed");
          else if (PlatformUsageCounter.DotNetVersionInstalled("v3.5"))
            PlatformUsageCounter.ReportUsage("Platform: .NET 3.5 installed");
          else if (PlatformUsageCounter.DotNetVersionInstalled("v3.0"))
            PlatformUsageCounter.ReportUsage("Platform: .NET 3.0 installed");
          else if (PlatformUsageCounter.DotNetVersionInstalled("v2.0.50727"))
            PlatformUsageCounter.ReportUsage("Platform: .NET 2.0 installed");
          else if (PlatformUsageCounter.DotNetVersionInstalled("v1.1.4322"))
            PlatformUsageCounter.ReportUsage("Platform: .NET 1.1 installed");
          major = Environment.OSVersion.Version.Major;
          switch (major)
          {
            case 5:
              minor1 = Environment.OSVersion.Version.Minor;
              switch (minor1)
              {
                case 0:
                  PlatformUsageCounter.ReportUsage("Platform: Windows 2000");
                  break;
                case 1:
                  PlatformUsageCounter.ReportUsage("Platform: Windows XP");
                  break;
                case 2:
                  PlatformUsageCounter.ReportUsage("Platform: Windows 2003");
                  break;
              }
              break;
            case 6:
              minor2 = Environment.OSVersion.Version.Minor;
              switch (minor2)
              {
                case 0:
                  PlatformUsageCounter.ReportUsage("Platform: Windows Vista/2008");
                  break;
                case 1:
                  PlatformUsageCounter.ReportUsage("Platform: Windows 7/2008 R2");
                  break;
                case 2:
                  PlatformUsageCounter.ReportUsage("Platform: Windows 8");
                  break;
              }
              break;
          }
          PlatformUsageCounter.ReportNumberOfCpuCores();
          PlatformUsageCounter.ReportCultureName();
          PlatformUsageCounter.ReportOSBitness();
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) major;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) minor1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) minor2;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    public static void ReportNumberOfCpuCores()
    {
      try
      {
        try
        {
          PlatformUsageCounter.ReportUsage("Platform CPU Cores: " + (object) Environment.ProcessorCount);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    public static void ReportCultureName()
    {
      try
      {
        try
        {
          PlatformUsageCounter.ReportUsage("Platform Culture Name: " + CultureInfo.CurrentCulture.Name);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    public static void ReportOSBitness()
    {
      try
      {
        try
        {
          PlatformUsageCounter.ReportUsage("Platform OS Bitness: " + (object) (PlatformUsageCounter.Is64BitOperatingSystem() ? 64 : 32));
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    private static bool Is64BitOperatingSystem()
    {
      bool wow64Process;
      try
      {
        if (IntPtr.Size == 8)
          return true;
        return PlatformUsageCounter.DoesWin32MethodExist("kernel32.dll", "IsWow64Process") && PlatformUsageCounter.IsWow64Process(PlatformUsageCounter.GetCurrentProcess(), out wow64Process) && wow64Process;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<bool> o1 = (ValueType) wow64Process;
        StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    private static bool DoesWin32MethodExist(string moduleName, string methodName)
    {
      IntPtr moduleHandle;
      try
      {
        moduleHandle = PlatformUsageCounter.GetModuleHandle(moduleName);
        return !(moduleHandle == IntPtr.Zero) && PlatformUsageCounter.GetProcAddress(moduleHandle, methodName) != IntPtr.Zero;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<IntPtr> o1 = (ValueType) moduleHandle;
        string o2 = moduleName;
        string o3 = methodName;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetCurrentProcess();

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
    private static extern IntPtr GetModuleHandle(string moduleName);

    [DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetProcAddress(IntPtr hModule, [MarshalAs(UnmanagedType.LPStr)] string procName);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool IsWow64Process(IntPtr hProcess, out bool wow64Process);

    private static bool DotNetVersionInstalled(string versionKey)
    {
      RegistryKey registryKey;
      bool flag;
      try
      {
        registryKey = (RegistryKey) null;
        try
        {
          registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\" + versionKey) ?? Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node\\Microsoft\\NET Framework Setup\\NDP\\" + versionKey);
          flag = registryKey != null;
        }
        finally
        {
          registryKey?.Close();
        }
        return flag;
      }
      catch (Exception ex)
      {
        RegistryKey o1 = registryKey;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o2 = (ValueType) flag;
        string o3 = versionKey;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    [ReportUsageAttribute1]
    public static void ReportUsage([FeatureName, DoNotPruneAttribute1] string featureName)
    {
    }
  }
}
