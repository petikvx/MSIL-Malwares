// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONData
// Assembly: ILegacyEvidenceAdapt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C8AEC27-D027-41D5-B71C-E99019A8E594
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a42b3919356aa815980faeac0fc6222bd4a2d6f6cc5bdc01c5a5f55014a9c66e.exe

using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONData : JSONNode
  {
    private string m_Data;

    public override string Value
    {
      get => this.m_Data;
      set => this.m_Data = value;
    }

    public JSONData(string aData) => this.m_Data = aData;

    public JSONData(float aData)
    {
label_1:
      int num1 = -1657692237;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -597776316)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -550546269 ^ 1582540539;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.AsFloat = aData;
    }

    public JSONData(double aData) => this.AsDouble = aData;

    public JSONData(bool aData) => this.AsBool = aData;

    public JSONData(int aData)
    {
label_1:
      int num1 = 99850494;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 756416880)) % 5U)
        {
          case 0:
            this.AsInt = aData;
            num1 = (int) num2 * -574908440 ^ 943901319;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -2047404713 ^ -607840918;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -422207496 ^ -1625352058;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override string ToString()
    {
label_1:
      int num1 = -299735274;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1773640853)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 510427874 ^ -1361070728;
            continue;
          case 1:
            str = JSONData.\u202C⁫‭⁪⁯‍⁫‍‌⁭‏⁭⁪‎‮​⁬‏‎‌⁯⁯‭⁬​⁪‭‌‎⁫‫⁭⁯‎⁭⁪‬‎‍⁯‮("\"", JSONNode.Escape(this.m_Data), "\"");
            num1 = (int) num2 * -1527127937 ^ 1894105304;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = 1313170276;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1593369857)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -152401731 ^ 1122026499;
            continue;
          case 1:
            str = JSONData.\u202C⁫‭⁪⁯‍⁫‍‌⁭‏⁭⁪‎‮​⁬‏‎‌⁯⁯‭⁬​⁪‭‌‎⁫‫⁭⁯‎⁭⁪‬‎‍⁯‮("\"", JSONNode.Escape(this.m_Data), "\"");
            num1 = (int) num2 * 333776076 ^ 1678870729;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -662179135;
      JSONData jsonData;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -321666893)) % 38U)
        {
          case 0:
            num1 = (int) num2 * 1400723055 ^ -1022485046;
            continue;
          case 1:
            jsonData.AsInt = this.AsInt;
            num1 = (int) num2 * 1563267207 ^ -2024169845;
            continue;
          case 2:
            num1 = (int) num2 * 860693881 ^ 60923449;
            continue;
          case 3:
            num1 = (int) num2 * -22885978 ^ -1956083699;
            continue;
          case 4:
            num1 = (int) num2 * -2053542426 ^ -1573574355;
            continue;
          case 5:
            num1 = (int) num2 * -1592624198 ^ -2128539271;
            continue;
          case 6:
            num1 = (int) num2 * -885018802 ^ 1599473771;
            continue;
          case 7:
            JSONData.\u206B⁪‮⁫‌⁬⁯‎‬‍‎‌⁯‪‮‬‭⁮‏‬‎​‪‌​⁭‏‌‏⁫⁬⁪⁬‬​​‫‍‭⁭‮(aWriter, (byte) 6);
            num1 = (int) num2 * -1697295932 ^ -580326867;
            continue;
          case 8:
            jsonData.AsDouble = this.AsDouble;
            num1 = -748166949;
            continue;
          case 9:
            jsonData.AsFloat = this.AsFloat;
            num1 = -489394393;
            continue;
          case 10:
            goto label_1;
          case 11:
            int num3 = flag2 ? -1778547823 : (num3 = -1974001905);
            num1 = num3 ^ (int) num2 * 1631192829;
            continue;
          case 12:
            JSONData.\u206B⁪‮⁫‌⁬⁯‎‬‍‎‌⁯‪‮‬‭⁮‏‬‎​‪‌​⁭‏‌‏⁫⁬⁪⁬‬​​‫‍‭⁭‮(aWriter, (byte) 7);
            num1 = (int) num2 * -951541090 ^ 978896102;
            continue;
          case 13:
            num1 = (int) num2 * -1586490636 ^ 1555938523;
            continue;
          case 14:
            JSONData.\u206B⁪‮⁫‌⁬⁯‎‬‍‎‌⁯‪‮‬‭⁮‏‬‎​‪‌​⁭‏‌‏⁫⁬⁪⁬‬​​‫‍‭⁭‮(aWriter, (byte) 3);
            num1 = -1602910315;
            continue;
          case 15:
            int num4 = JSONData.\u200D‎‪‌‭‌​‮‎⁮‬‍⁭⁪‭⁯‬⁪‭‬‭⁫⁭⁫​⁮⁫​⁭‫​‮⁫‫‍⁯‍⁬‌‭‮(jsonData.m_Data, this.m_Data) ? 113916367 : (num4 = 1394157466);
            num1 = num4 ^ (int) num2 * -240995857;
            continue;
          case 16:
            goto label_3;
          case 17:
            int num5 = !flag3 ? -2026157111 : (num5 = -1741197489);
            num1 = num5 ^ (int) num2 * 509888899;
            continue;
          case 18:
            jsonData = new JSONData("");
            num1 = (int) num2 * -269978032 ^ -1554407168;
            continue;
          case 19:
            int num6 = flag1 ? -1375524937 : (num6 = -982437201);
            num1 = num6 ^ (int) num2 * -841862770;
            continue;
          case 20:
            JSONData.\u206B⁪‮⁫‌⁬⁯‎‬‍‎‌⁯‪‮‬‭⁮‏‬‎​‪‌​⁭‏‌‏⁫⁬⁪⁬‬​​‫‍‭⁭‮(aWriter, (byte) 4);
            JSONData.\u206A⁮‎⁮‎‭⁭⁫‫‫‮⁮⁬‌⁮⁯‬‪‫‭‬‍⁬⁯‬⁮⁬‭⁬‬⁪‎‎⁭‬‪⁬⁯⁬‌‮(aWriter, this.AsInt);
            num1 = (int) num2 * 36592909 ^ 1082388083;
            continue;
          case 21:
            flag3 = JSONData.\u200D‎‪‌‭‌​‮‎⁮‬‍⁭⁪‭⁯‬⁪‭‬‭⁫⁭⁫​⁮⁫​⁭‫​‮⁫‫‍⁯‍⁬‌‭‮(jsonData.m_Data, this.m_Data);
            num1 = (int) num2 * -1126791715 ^ 1952516271;
            continue;
          case 22:
            num1 = (int) num2 * 850079190 ^ 1690074967;
            continue;
          case 23:
            num1 = (int) num2 * -578304453 ^ -1178245485;
            continue;
          case 24:
            num1 = (int) num2 * 1154641319 ^ -1895139345;
            continue;
          case 25:
            jsonData.AsBool = this.AsBool;
            num1 = -412384578;
            continue;
          case 26:
            JSONData.\u206A⁫⁮‎‪‌⁬‎‌‭‍‌⁭‬⁬⁮⁫⁮‎‎‍⁬​‬⁯⁭​⁮‌⁫‮‮‬‭‭⁮‭⁮‌⁪‮(aWriter, this.m_Data);
            num1 = (int) num2 * 530291965 ^ -1875630569;
            continue;
          case 27:
            num1 = (int) num2 * -1812034358 ^ -804807346;
            continue;
          case 28:
            num1 = (int) num2 * -44577319 ^ 1731514766;
            continue;
          case 29:
            num1 = (int) num2 * -1447674604 ^ 934032623;
            continue;
          case 30:
            JSONData.\u202D‌⁮⁭⁬‪⁪‍⁯‌⁬⁫‎‮‏‎⁪⁫‪⁬⁮⁪⁮‌‪‬‎⁬⁬⁪⁮‬​​‌‭⁪‎‭‎‮(aWriter, this.AsDouble);
            num1 = (int) num2 * -1225646456 ^ 1954266442;
            continue;
          case 31:
            num1 = (int) num2 * 295277326 ^ 305569738;
            continue;
          case 32:
            flag1 = JSONData.\u200D‎‪‌‭‌​‮‎⁮‬‍⁭⁪‭⁯‬⁪‭‬‭⁫⁭⁫​⁮⁫​⁭‫​‮⁫‫‍⁯‍⁬‌‭‮(jsonData.m_Data, this.m_Data);
            num1 = (int) num2 * 994261757 ^ 400712554;
            continue;
          case 33:
            num1 = (int) num2 * 1126574827 ^ 766113118;
            continue;
          case 34:
            JSONData.\u202C‎‮⁪⁪‪‫‭​‬⁭‭‌‍‭‭⁮⁭​‫⁭‌⁫‮⁬‌⁬⁫‎‮‫⁭⁪‍⁭‮⁭‪‏‍‮(aWriter, this.AsFloat);
            num1 = (int) num2 * -175042347 ^ -1083321543;
            continue;
          case 35:
            JSONData.\u206B⁪‮⁫‌⁬⁯‎‬‍‎‌⁯‪‮‬‭⁮‏‬‎​‪‌​⁭‏‌‏⁫⁬⁪⁬‬​​‫‍‭⁭‮(aWriter, (byte) 5);
            num1 = (int) num2 * -1110975722 ^ -1082633156;
            continue;
          case 36:
            flag2 = JSONData.\u200D‎‪‌‭‌​‮‎⁮‬‍⁭⁪‭⁯‬⁪‭‬‭⁫⁭⁫​⁮⁫​⁭‫​‮⁫‫‍⁯‍⁬‌‭‮(jsonData.m_Data, this.m_Data);
            num1 = (int) num2 * -1981407811 ^ 1127776486;
            continue;
          case 37:
            JSONData.\u206B‫⁪‫‮⁬⁮⁫‮‍⁬‮‫​‌‍​‎⁫‮⁮‪⁫‎‌‪‪⁪⁬‫⁪‪⁭⁬⁭⁭⁬‪‪‌‮(aWriter, this.AsBool);
            num1 = (int) num2 * 1149438832 ^ 1187197851;
            continue;
          default:
            goto label_40;
        }
      }
label_3:
      return;
label_40:;
    }

    static string \u202C⁫‭⁪⁯‍⁫‍‌⁭‏⁭⁪‎‮​⁬‏‎‌⁯⁯‭⁬​⁪‭‌‎⁫‫⁭⁯‎⁭⁪‬‎‍⁯‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static bool \u200D‎‪‌‭‌​‮‎⁮‬‍⁭⁪‭⁯‬⁪‭‬‭⁫⁭⁫​⁮⁫​⁭‫​‮⁫‫‍⁯‍⁬‌‭‮([In] string obj0, [In] string obj1) => obj0 == obj1;

    static void \u206B⁪‮⁫‌⁬⁯‎‬‍‎‌⁯‪‮‬‭⁮‏‬‎​‪‌​⁭‏‌‏⁫⁬⁪⁬‬​​‫‍‭⁭‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206A⁮‎⁮‎‭⁭⁫‫‫‮⁮⁬‌⁮⁯‬‪‫‭‬‍⁬⁯‬⁮⁬‭⁬‬⁪‎‎⁭‬‪⁬⁯⁬‌‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202C‎‮⁪⁪‪‫‭​‬⁭‭‌‍‭‭⁮⁭​‫⁭‌⁫‮⁬‌⁬⁫‎‮‫⁭⁪‍⁭‮⁭‪‏‍‮([In] BinaryWriter obj0, [In] float obj1) => obj0.Write(obj1);

    static void \u202D‌⁮⁭⁬‪⁪‍⁯‌⁬⁫‎‮‏‎⁪⁫‪⁬⁮⁪⁮‌‪‬‎⁬⁬⁪⁮‬​​‌‭⁪‎‭‎‮([In] BinaryWriter obj0, [In] double obj1) => obj0.Write(obj1);

    static void \u206B‫⁪‫‮⁬⁮⁫‮‍⁬‮‫​‌‍​‎⁫‮⁮‪⁫‎‌‪‪⁪⁬‫⁪‪⁭⁬⁭⁭⁬‪‪‌‮([In] BinaryWriter obj0, [In] bool obj1) => obj0.Write(obj1);

    static void \u206A⁫⁮‎‪‌⁬‎‌‭‍‌⁭‬⁬⁮⁫⁮‎‎‍⁬​‬⁯⁭​⁮‌⁫‮‮‬‭‭⁮‭⁮‌⁪‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
