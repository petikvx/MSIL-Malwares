// Decompiled with JetBrains decompiler
// Type: Alero.sudokugrid
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Drawing;
using System.Windows.Forms;

namespace Alero
{
  internal class sudokugrid
  {
    public void generate(
      TextBox[,] txtar,
      int[,] ans,
      ComboBox cmb_level,
      int variation,
      SudokuManager objGrid,
      Label lblPencilMark)
    {
      for (int frequency = 4000; frequency <= 15000; frequency += 4000)
        Console.Beep(frequency, 100);
      lblPencilMark.Visible = false;
      objGrid.changeGrid(txtar, variation);
      switch (variation)
      {
        case 0:
          this.swap(ans);
          break;
        case 1:
          this.swapx(ans);
          break;
        case 2:
          this.swapC(ans);
          break;
        case 3:
          this.swap4(ans);
          break;
      }
      int num = this.difficulty(cmb_level);
      Random random = new Random(DateTime.Now.Millisecond);
      for (int index1 = 0; index1 < num; ++index1)
      {
        int index2 = random.Next(0, 9);
        int index3 = random.Next(0, 9);
        txtar[index2, index3].Text = ans[index2, index3].ToString();
        txtar[index2, index3].ReadOnly = true;
        txtar[index2, index3].ForeColor = Color.DarkBlue;
      }
      lblPencilMark.Text = "";
    }

    public int difficulty(ComboBox cmb_level)
    {
      int num = 60;
      switch (cmb_level.SelectedIndex)
      {
        case 0:
          num = 60;
          break;
        case 1:
          num = 40;
          break;
        case 2:
          num = 25;
          break;
      }
      return num;
    }

    public void swap(int[,] ans)
    {
      int index1;
      int index2;
      do
      {
        Random random = new Random(DateTime.Now.Millisecond);
        index1 = random.Next(0, 3);
        index2 = random.Next(0, 3);
      }
      while (index1 == index2);
      for (int index3 = 0; index3 < 3; ++index3)
      {
        for (int index4 = 0; index4 < 9; ++index4)
        {
          int an = ans[index1, index4];
          ans[index1, index4] = ans[index2, index4];
          ans[index2, index4] = an;
        }
        for (int index5 = 0; index5 < 9; ++index5)
        {
          int an = ans[index5, index1];
          ans[index5, index1] = ans[index5, index2];
          ans[index5, index2] = an;
        }
        index1 += 3;
        index2 += 3;
      }
    }

    public void swapC(int[,] ans)
    {
      int num = new Random(DateTime.Now.Millisecond).Next(0, 3);
      int index1 = num * 3;
      int index2 = index1 + 2;
      for (int index3 = 0; index3 < 9; ++index3)
      {
        int an = ans[index1, index3];
        ans[index1, index3] = ans[index2, index3];
        ans[index2, index3] = an;
      }
      for (int index4 = 0; index4 < 9; ++index4)
      {
        int an = ans[index4, index1];
        ans[index4, index1] = ans[index4, index2];
        ans[index4, index2] = an;
      }
      switch (num)
      {
        case 0:
          index1 = 0;
          index2 = 3;
          break;
        case 1:
          index1 = 0;
          index2 = 6;
          break;
        case 2:
          index1 = 3;
          index2 = 6;
          break;
      }
      for (int index5 = 0; index5 < 3; ++index5)
      {
        for (int index6 = 0; index6 < 9; ++index6)
        {
          int an = ans[index1, index6];
          ans[index1, index6] = ans[index2, index6];
          ans[index2, index6] = an;
        }
        ++index1;
        ++index2;
      }
      for (int index7 = 0; index7 < 3; ++index7)
      {
        --index1;
        --index2;
        for (int index8 = 0; index8 < 9; ++index8)
        {
          int an = ans[index8, index1];
          ans[index8, index1] = ans[index8, index2];
          ans[index8, index2] = an;
        }
      }
    }

    public void swapx(int[,] ans)
    {
      int index1;
      int index2;
      do
      {
        Random random = new Random(DateTime.Now.Millisecond);
        index1 = random.Next(0, 3);
        index2 = random.Next(0, 3);
      }
      while (index1 == index2);
      for (int index3 = 0; index3 < 2; ++index3)
      {
        for (int index4 = 0; index4 < 9; ++index4)
        {
          int an = ans[index1, index4];
          ans[index1, index4] = ans[index2, index4];
          ans[index2, index4] = an;
        }
        for (int index5 = 0; index5 < 9; ++index5)
        {
          int an = ans[index5, index1];
          ans[index5, index1] = ans[index5, index2];
          ans[index5, index2] = an;
        }
        index1 = 8 - index1;
        index2 = 8 - index2;
      }
      for (int index6 = 0; index6 < 9; ++index6)
      {
        int an = ans[3, index6];
        ans[3, index6] = ans[5, index6];
        ans[5, index6] = an;
      }
      for (int index7 = 0; index7 < 9; ++index7)
      {
        int an = ans[index7, 3];
        ans[index7, 3] = ans[index7, 5];
        ans[index7, 5] = an;
      }
    }

    public void swap4(int[,] ans)
    {
      int num = 0;
      if (new Random(DateTime.Now.Millisecond).Next(0, 2) == 0)
      {
        for (int index1 = 1; index1 < 3; ++index1)
        {
          for (int index2 = 0; index2 < 9; ++index2)
          {
            int an = ans[num + index1, index2];
            ans[num + index1, index2] = ans[num + index1 + 1, index2];
            ans[num + index1 + 1, index2] = an;
          }
          num = 4;
        }
        int index3 = 0;
        int index4 = 8;
        for (int index5 = 0; index5 < 4; ++index5)
        {
          for (int index6 = 0; index6 < 9; ++index6)
          {
            int an = ans[index3, index6];
            ans[index3, index6] = ans[index4, index6];
            ans[index4, index6] = an;
          }
          ++index3;
          --index4;
        }
      }
      else
      {
        for (int index7 = 1; index7 < 3; ++index7)
        {
          for (int index8 = 0; index8 < 9; ++index8)
          {
            int an = ans[index8, num + index7];
            ans[index8, num + index7] = ans[index8, num + index7 + 1];
            ans[index8, num + index7 + 1] = an;
          }
          num = 4;
        }
        int index9 = 0;
        int index10 = 8;
        for (int index11 = 0; index11 < 4; ++index11)
        {
          for (int index12 = 0; index12 < 9; ++index12)
          {
            int an = ans[index12, index9];
            ans[index12, index9] = ans[index12, index10];
            ans[index12, index10] = an;
          }
          ++index9;
          --index10;
        }
      }
    }
  }
}
