// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Description.WebServiceEndpoint
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Runtime.InteropServices;
using System.ServiceModel.Channels;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Description
{
  [ComVisible(false)]
  public abstract class WebServiceEndpoint : ServiceEndpoint
  {
    internal WebServiceEndpoint(ContractDescription contract, EndpointAddress address)
      : base(contract, (Binding) new WebHttpBinding(), address)
    {
    }

    public HostNameComparisonMode HostNameComparisonMode
    {
      get => this.webHttpBinding.HostNameComparisonMode;
      set => this.webHttpBinding.HostNameComparisonMode = value;
    }

    public long MaxBufferPoolSize
    {
      get => this.webHttpBinding.MaxBufferPoolSize;
      set => this.webHttpBinding.MaxBufferPoolSize = value;
    }

    public int MaxBufferSize
    {
      get => this.webHttpBinding.MaxBufferSize;
      set => this.webHttpBinding.MaxBufferSize = value;
    }

    public long MaxReceivedMessageSize
    {
      get => this.webHttpBinding.MaxReceivedMessageSize;
      set => this.webHttpBinding.MaxReceivedMessageSize = value;
    }

    public TransferMode TransferMode
    {
      get => this.webHttpBinding.TransferMode;
      set => this.webHttpBinding.TransferMode = value;
    }

    public XmlDictionaryReaderQuotas ReaderQuotas
    {
      get => this.webHttpBinding.ReaderQuotas;
      set => this.webHttpBinding.ReaderQuotas = value;
    }

    public WebHttpSecurity Security => this.webHttpBinding.Security;

    public Encoding WriteEncoding
    {
      get => this.webHttpBinding.WriteEncoding;
      set => this.webHttpBinding.WriteEncoding = value;
    }

    public WebContentTypeMapper ContentTypeMapper
    {
      get => this.webHttpBinding.ContentTypeMapper;
      set => this.webHttpBinding.ContentTypeMapper = value;
    }

    public bool CrossDomainScriptAccessEnabled
    {
      get => this.webHttpBinding.CrossDomainScriptAccessEnabled;
      set => this.webHttpBinding.CrossDomainScriptAccessEnabled = value;
    }

    protected abstract System.Type WebEndpointType { get; }

    private WebHttpBinding webHttpBinding => this.Binding is WebHttpBinding binding ? binding : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebHttpBindingNotFoundWithEndpoint, (object) this.WebEndpointType.Name, (object) typeof (WebHttpBinding).Name)));
  }
}
