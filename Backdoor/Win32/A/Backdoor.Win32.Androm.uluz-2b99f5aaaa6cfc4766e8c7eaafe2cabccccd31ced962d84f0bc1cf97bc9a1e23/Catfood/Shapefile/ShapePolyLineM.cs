// Decompiled with JetBrains decompiler
// Type: Catfood.Shapefile.ShapePolyLineM
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;

namespace Catfood.Shapefile
{
  public class ShapePolyLineM : ShapePolyLine
  {
    protected internal ShapePolyLineM(
      int recordNumber,
      StringDictionary metadata,
      IDataRecord dataRecord,
      byte[] shapeData)
      : base(recordNumber, metadata, dataRecord)
    {
      this._type = ShapeType.PolyLineM;
      this.M = new List<double>();
      this.ParsePolyLineM(shapeData, out this._boundingBox, out this._parts);
    }

    public double Mmin { get; protected set; }

    public double Mmax { get; protected set; }

    public List<double> M { get; protected set; }

    private void ParsePolyLineM(
      byte[] shapeData,
      out RectangleD boundingBox,
      out List<PointD[]> parts)
    {
      boundingBox = new RectangleD();
      parts = (List<PointD[]>) null;
      if (shapeData == null)
        throw new ArgumentNullException(nameof (shapeData));
      boundingBox = shapeData.Length >= 44 ? this.ParseBoundingBox(shapeData, 12, ProvidedOrder.Little) : throw new InvalidOperationException("Invalid shape data");
      int int32_1 = EndianBitConverter.ToInt32(shapeData, 44, ProvidedOrder.Little);
      int int32_2 = EndianBitConverter.ToInt32(shapeData, 48, ProvidedOrder.Little);
      if (shapeData.Length != 52 + 4 * int32_1 + 16 + 8 * int32_2 + 16 * int32_2)
        throw new InvalidOperationException("Invalid shape data");
      int num1 = 52 + 4 * int32_1;
      parts = new List<PointD[]>(int32_1);
      for (int index1 = 0; index1 < int32_1; ++index1)
      {
        int num2 = EndianBitConverter.ToInt32(shapeData, 52 + 4 * index1, ProvidedOrder.Little) * 16 + num1;
        int length = (index1 != int32_1 - 1 ? EndianBitConverter.ToInt32(shapeData, 52 + 4 * (index1 + 1), ProvidedOrder.Little) * 16 + num1 - num2 : shapeData.Length - num2 - (int32_2 * 8 + 16)) / 16;
        PointD[] pointDArray = new PointD[length];
        for (int index2 = 0; index2 < length; ++index2)
          pointDArray[index2] = new PointD(EndianBitConverter.ToDouble(shapeData, num2 + 16 * index2, ProvidedOrder.Little), EndianBitConverter.ToDouble(shapeData, num2 + 8 + 16 * index2, ProvidedOrder.Little));
        parts.Add(pointDArray);
      }
      this.Mmin = EndianBitConverter.ToDouble(shapeData, 52 + 4 * int32_1 + 16 * int32_2, ProvidedOrder.Little);
      this.Mmax = EndianBitConverter.ToDouble(shapeData, 60 + 4 * int32_1 + 16 * int32_2, ProvidedOrder.Little);
      this.M.Clear();
      for (int index = 0; index < int32_2; ++index)
        this.M.Add(EndianBitConverter.ToDouble(shapeData, 68 + 4 * int32_1 + 16 * int32_2 + index * 8, ProvidedOrder.Little));
    }
  }
}
