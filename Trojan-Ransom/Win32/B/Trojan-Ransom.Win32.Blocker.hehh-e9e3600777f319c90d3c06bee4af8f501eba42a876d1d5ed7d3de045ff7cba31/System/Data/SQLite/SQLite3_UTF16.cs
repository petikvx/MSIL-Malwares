// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLite3_UTF16
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Runtime.InteropServices;

namespace System.Data.SQLite
{
  internal class SQLite3_UTF16 : SQLite3
  {
    internal SQLite3_UTF16(SQLiteDateFormats fmt)
      : base(fmt)
    {
    }

    public override string ToString(IntPtr b, int nbytelen) => SQLite3_UTF16.UTF16ToString(b, nbytelen);

    public static string UTF16ToString(IntPtr b, int nbytelen)
    {
      if (nbytelen == 0 || b == IntPtr.Zero)
        return "";
      return nbytelen == -1 ? Marshal.PtrToStringUni(b) : Marshal.PtrToStringUni(b, nbytelen / 2);
    }

    internal override void Open(
      string strFilename,
      SQLiteOpenFlagsEnum flags,
      int maxPoolSize,
      bool usePool)
    {
      if (this._sql != null)
        return;
      this._usePool = usePool;
      if (usePool)
      {
        this._fileName = strFilename;
        this._sql = SQLiteConnectionPool.Remove(strFilename, maxPoolSize, out this._poolVersion);
      }
      if (this._sql == null)
      {
        IntPtr db;
        int errorCode = UnsafeNativeMethods.sqlite3_open16_interop(SQLiteConvert.ToUTF8(strFilename), (int) flags, out db);
        if (errorCode > 0)
          throw new SQLiteException(errorCode, (string) null);
        this._sql = (SQLiteConnectionHandle) db;
      }
      this._functionsArray = SQLiteFunction.BindFunctions((SQLiteBase) this);
    }

    internal override void Bind_DateTime(SQLiteStatement stmt, int index, DateTime dt) => this.Bind_Text(stmt, index, this.ToString(dt));

    internal override void Bind_Text(SQLiteStatement stmt, int index, string value)
    {
      int errorCode = UnsafeNativeMethods.sqlite3_bind_text16((IntPtr) stmt._sqlite_stmt, index, value, value.Length * 2, (IntPtr) -1);
      if (errorCode > 0)
        throw new SQLiteException(errorCode, this.SQLiteLastError());
    }

    internal override DateTime GetDateTime(SQLiteStatement stmt, int index) => this.ToDateTime(this.GetText(stmt, index));

    internal override string ColumnName(SQLiteStatement stmt, int index)
    {
      int len;
      return SQLite3_UTF16.UTF16ToString(UnsafeNativeMethods.sqlite3_column_name16_interop((IntPtr) stmt._sqlite_stmt, index, out len), len);
    }

    internal override string GetText(SQLiteStatement stmt, int index)
    {
      int len;
      return SQLite3_UTF16.UTF16ToString(UnsafeNativeMethods.sqlite3_column_text16_interop((IntPtr) stmt._sqlite_stmt, index, out len), len);
    }

    internal override string ColumnOriginalName(SQLiteStatement stmt, int index)
    {
      int len;
      return SQLite3_UTF16.UTF16ToString(UnsafeNativeMethods.sqlite3_column_origin_name16_interop((IntPtr) stmt._sqlite_stmt, index, out len), len);
    }

    internal override string ColumnDatabaseName(SQLiteStatement stmt, int index)
    {
      int len;
      return SQLite3_UTF16.UTF16ToString(UnsafeNativeMethods.sqlite3_column_database_name16_interop((IntPtr) stmt._sqlite_stmt, index, out len), len);
    }

    internal override string ColumnTableName(SQLiteStatement stmt, int index)
    {
      int len;
      return SQLite3_UTF16.UTF16ToString(UnsafeNativeMethods.sqlite3_column_table_name16_interop((IntPtr) stmt._sqlite_stmt, index, out len), len);
    }

    internal override string GetParamValueText(IntPtr ptr)
    {
      int len;
      return SQLite3_UTF16.UTF16ToString(UnsafeNativeMethods.sqlite3_value_text16_interop(ptr, out len), len);
    }

    internal override void ReturnError(IntPtr context, string value) => UnsafeNativeMethods.sqlite3_result_error16(context, value, value.Length * 2);

    internal override void ReturnText(IntPtr context, string value) => UnsafeNativeMethods.sqlite3_result_text16(context, value, value.Length * 2, (IntPtr) -1);
  }
}
