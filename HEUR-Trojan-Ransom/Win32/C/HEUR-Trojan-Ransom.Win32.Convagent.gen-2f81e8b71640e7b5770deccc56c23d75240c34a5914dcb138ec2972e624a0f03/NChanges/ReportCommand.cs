// Decompiled with JetBrains decompiler
// Type: NChanges.ReportCommand
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using Mono.Options;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.XPath;
using System.Xml.Xsl;

namespace NChanges
{
  public class ReportCommand
  {
    private readonly OptionSet _optionSet;
    private string _output = "%name%-%version%-report.xml";
    private string _transform;
    private string _transformOutput = "%name%-%version%-report.html";

    public ReportCommand() => this._optionSet = new OptionSet()
    {
      {
        "o|output=",
        "output file",
        (Action<string>) (v => this._output = v)
      },
      {
        "t|transform=",
        "XSLT file",
        (Action<string>) (v => this._transform = v)
      },
      {
        "r|result=",
        "XSLT output file",
        (Action<string>) (v => this._transformOutput = v)
      }
    };

    public void Run(IEnumerable<string> args)
    {
      List<string> paths = this._optionSet.Parse(args);
      List<AssemblyInfo> source = new List<AssemblyInfo>();
      foreach (string expandPath in PathHelper.ExpandPaths((IEnumerable<string>) paths))
      {
        AssemblyInfo assemblyInfo = new AssemblyInfo();
        using (XmlTextReader xmlTextReader = new XmlTextReader(expandPath))
          assemblyInfo.ReadXml((XmlReader) xmlTextReader);
        source.Add(assemblyInfo);
      }
      foreach (IGrouping<string, AssemblyInfo> grouping in source.GroupBy<AssemblyInfo, string>((Func<AssemblyInfo, string>) (a => a.Name)))
      {
        Reporter reporter = new Reporter();
        foreach (AssemblyInfo assemblyInfo in (IEnumerable<AssemblyInfo>) grouping)
          reporter.Assemblies.Add(assemblyInfo);
        AssemblyInfo report = reporter.GenerateReport();
        string str = PathHelper.FormatPath(this._output, report);
        PathHelper.EnsureFolderExists(str);
        using (XmlTextWriter xmlTextWriter = new XmlTextWriter(str, Encoding.UTF8)
        {
          Formatting = Formatting.Indented
        })
          report.WriteXml((XmlWriter) xmlTextWriter);
        if (!string.IsNullOrEmpty(this._transform))
        {
          XslCompiledTransform compiledTransform = new XslCompiledTransform();
          compiledTransform.Load(this._transform);
          XPathDocument input = new XPathDocument(str);
          using (FileStream results = new FileStream(PathHelper.FormatPath(this._transformOutput, report), FileMode.Create))
          {
            compiledTransform.Transform((IXPathNavigable) input, (XsltArgumentList) null, (Stream) results);
            results.Flush();
          }
        }
      }
    }

    public void ShowHelp() => this._optionSet.WriteOptionDescriptions(Console.Error);
  }
}
