// Decompiled with JetBrains decompiler
// Type: MaterialSurface.MaterialButton
// Assembly: PropagationFl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45597167-9313-4C0B-891A-DAD42EC632D8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-00a292af39cd99fb0f81e6e8f13150c25149dda2c988f8a15f983523dc2bf554.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace MaterialSurface
{
  public abstract class MaterialButton : Button, IMaterialControl
  {
    protected readonly Timer animationDirector = new Timer()
    {
      Interval = 1
    };
    protected readonly StringFormat textAlignment = new StringFormat()
    {
      LineAlignment = StringAlignment.Center,
      Alignment = StringAlignment.Center
    };
    protected Rectangle drawArea;
    protected Rectangle iconArea;
    protected int mouseX;
    protected int mouseY;
    protected int radius = 6;
    protected int aniOpacity = 140;
    protected int aniDec = 4;
    protected int defaultAniOpacity = 140;
    protected float animationSize = 0.0f;
    protected float maxSize;
    protected float incSize;
    protected Color primaryColor = Color.BlueViolet;
    protected ET effectType = ET.Custom;
    protected Image icon;
    protected EventArgs _eventArgs;
    protected MouseEventArgs _mouseClickArgs;
    protected bool isPerformClick = false;

    [Category("Appearance Material")]
    [Description("Ripple animation color.")]
    public Color PrimaryColor
    {
      get => this.primaryColor;
      set
      {
        if (this.DesignMode && this.effectType != ET.Custom)
          return;
        this.primaryColor = value;
        this.ForeColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Rounded ratio.")]
    public int Radius
    {
      get => this.radius;
      set
      {
        this.radius = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Text alignment.")]
    public StringAlignment TextAlignment
    {
      get => this.textAlignment.Alignment;
      set
      {
        this.textAlignment.Alignment = value;
        this.Invalidate();
      }
    }

    public MouseState MouseState { get; set; }

    protected abstract void OnAnimate(object sender, EventArgs e);

    public new void PerformClick()
    {
      this.isPerformClick = true;
      this.OnClick(EventArgs.Empty);
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      base.OnMouseEnter(e);
      this.MouseState = MouseState.HOVER;
      this.Invalidate();
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      base.OnMouseLeave(e);
      if (!this.Focused)
        this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    protected override void OnGotFocus(EventArgs e)
    {
      base.OnGotFocus(e);
      this.Invalidate();
    }

    protected override void OnLostFocus(EventArgs e)
    {
      base.OnLostFocus(e);
      this.MouseState = MouseState.OUT;
      this.Invalidate();
    }
  }
}
