// Decompiled with JetBrains decompiler
// Type: ChessBoard.Chessmens.Rook
// Assembly: IArraySortHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B08900B5-C53F-4995-B311-D7E8DC4113C6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcrg-fe8d5c5d892bac95b940a26cf50aacf262dd40e3394fc1ba8444ab3842a16fda.exe

using System.Collections.Generic;

namespace ChessBoard.Chessmens
{
  public class Rook : BaseChessman
  {
    public override ChessmenType Type => ChessmenType.Rook;

    public Rook()
    {
label_1:
      int num1 = 1186893877;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 490381553)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1336738485 ^ -341304704;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Rook(Colorz color)
      : base(color)
    {
    }

    public override bool Equals(object obj)
    {
      bool flag1 = !(obj is Rook);
label_1:
      int num1 = 1100027799;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 592421791)) % 6U)
        {
          case 0:
            flag2 = false;
            num1 = (int) num2 * 1881058091 ^ -1773951845;
            continue;
          case 2:
            num1 = (int) num2 * 1484634671 ^ -565648708;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num3 = !flag1 ? -619114698 : (num3 = -307130513);
            num1 = num3 ^ (int) num2 * -952687011;
            continue;
          case 5:
            flag2 = base.Equals(obj);
            num1 = 959004552;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public override int GetHashCode()
    {
      int hashCode = base.GetHashCode();
label_1:
      int num1 = -1973613001;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2143645671)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 365271118 ^ -1314543912;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override List<Cell> GetAcceptableCells(
      BoardCell[,] boardCells,
      Cell currentCell,
      bool needToCheckShah = true)
    {
label_1:
      int num1 = 510406776;
      List<Cell> cellsForDirections;
      List<Cell> acceptableCells;
      Direction[] possibleDirections;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 356463185)) % 8U)
        {
          case 0:
            acceptableCells = cellsForDirections;
            num1 = 303174083;
            continue;
          case 1:
            Direction[] directionArray = new Direction[4];
            Direction direction1 = new Direction();
            direction1.Row = -1;
            direction1.Column = 0;
            directionArray[0] = direction1;
            Direction direction2 = new Direction();
            direction2.Row = 1;
            direction2.Column = 0;
            directionArray[1] = direction2;
            Direction direction3 = new Direction();
            direction3.Row = 0;
            direction3.Column = -1;
            directionArray[2] = direction3;
            Direction direction4 = new Direction();
            direction4.Row = 0;
            direction4.Column = 1;
            directionArray[3] = direction4;
            possibleDirections = directionArray;
            num1 = (int) num2 * 492070519 ^ -205705629;
            continue;
          case 3:
            num1 = (int) num2 * 1373338989 ^ -785511378;
            continue;
          case 4:
            this.AdjustAcceptableCellsInCaseShah(boardCells, cellsForDirections, currentCell);
            num1 = (int) num2 * 26499373 ^ 756853014;
            continue;
          case 5:
            cellsForDirections = this.GetAcceptableCellsForDirections(boardCells, possibleDirections, currentCell);
            num1 = (int) num2 * 1214557007 ^ 1513890685;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num3 = !needToCheckShah ? -551771063 : (num3 = -460797531);
            num1 = num3 ^ (int) num2 * -261296032;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return acceptableCells;
    }
  }
}
