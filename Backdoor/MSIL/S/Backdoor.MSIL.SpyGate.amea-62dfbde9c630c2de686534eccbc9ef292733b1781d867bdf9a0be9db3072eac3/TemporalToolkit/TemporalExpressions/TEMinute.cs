// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEMinute
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEMinute : TemporalExpression
  {
    public int Start { get; set; }

    public int? End { get; set; }

    public TEMinute(int minute)
    {
label_1:
      int num1 = 122321373;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1049084884)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -792104288 ^ -2140598385;
            continue;
          case 1:
            num1 = (int) num2 * 150730800 ^ -1262739178;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            this.Start = minute;
            num1 = (int) num2 * -1917688436 ^ 1094364624;
            continue;
          case 5:
            this.End = new int?();
            num1 = (int) num2 * 1675049120 ^ 625756891;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public TEMinute(int start, int end)
    {
label_1:
      int num1 = -952558243;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -246706414)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -596825296 ^ 1094499130;
            continue;
          case 1:
            this.End = new int?(end);
            num1 = (int) num2 * 1258291368 ^ 1245073994;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -1695518201 ^ -978311062;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Start = start;
            num1 = (int) num2 * 2030501745 ^ -1464674962;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = -700925276;
      bool flag1;
      while (true)
      {
        uint num2;
        int? end;
        bool hasValue;
        bool flag2;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -1027986586)) % 13U)
        {
          case 0:
          case 3:
            flag1 = flag2;
            num1 = -1075206022;
            continue;
          case 1:
            int minute1 = aDate.Minute;
            end = this.End;
            int num5 = end.Value;
            num3 = minute1 <= num5 ? 1 : 0;
            goto label_12;
          case 2:
            end = this.End;
            num1 = (int) num2 * 826238826 ^ 364075586;
            continue;
          case 4:
            int num6 = hasValue ? 121822387 : (num6 = 1977093677);
            num1 = num6 ^ (int) num2 * 1075620756;
            continue;
          case 5:
            if (aDate.Minute < this.Start)
            {
              num3 = 0;
              goto label_12;
            }
            else
            {
              num1 = (int) num2 * 1796042908 ^ -625978792;
              continue;
            }
          case 6:
            int minute2 = aDate.Minute;
            end = this.End;
            int num7 = end.Value;
            num4 = minute2 <= num7 ? 1 : 0;
            break;
          case 7:
            if (aDate.Minute >= this.Start)
            {
              num4 = 1;
              break;
            }
            num1 = -1495240476;
            continue;
          case 9:
            goto label_1;
          case 10:
            int num8 = end.Value <= this.Start ? 1025580514 : (num8 = 391857235);
            num1 = num8 ^ (int) num2 * -1701573644;
            continue;
          case 11:
            end = this.End;
            hasValue = end.HasValue;
            num1 = (int) num2 * 241631886 ^ 903280466;
            continue;
          case 12:
            flag2 = this.Start == aDate.Minute;
            num1 = -1616629366;
            continue;
          default:
            goto label_19;
        }
        flag2 = num4 != 0;
        num1 = -66539067;
        continue;
label_12:
        flag2 = num3 != 0;
        num1 = -66539067;
      }
label_19:
      return flag1;
    }
  }
}
