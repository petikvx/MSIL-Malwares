// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Protected, Version=6.2.8400.0, Culture=neutral, PublicKeyToken=null
// MVID: 52CBE997-50C3-42B2-A704-C908D57869A5
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-2a8dca5794c095ea67845468a3fd0a8e91a24bf3f0bb5e0ec6c16a6579cc4e90.exe

using System;
using System.Text;

internal sealed class \uE01E : \uE029
{
  private string \uE000;
  public \uE028[] \uE001;

  public \uE01E(\uE028 _param1)
    : base(_param1)
  {
  }

  public override int \uE007 => 1;

  public bool \uE000 => this.\uE001 != null && this.\uE001.Length > 0;

  public override string \uE008
  {
    get => base.\uE008 + this.\uE000();
    set => throw new NotSupportedException();
  }

  public override string \uE009 => ((\uE021) this).\uE008 + ", " + ((\uE028) this).\uE000.\uE000;

  private string \uE000()
  {
    int num1;
    switch (this.\uE000)
    {
      case null:
        num1 = 0;
        break;
      default:
        num1 = 1;
        break;
    }
    if (num1 == 0)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if ((!this.\uE000 ? 1 : 0) == 0)
      {
        stringBuilder.Append("[");
label_7:
        int num2 = \uE000.\uE000(46);
        while (true)
        {
          int index;
          switch (num2 ^ 90)
          {
            case 94:
              index = 0;
              num2 = 58;
              continue;
            case 95:
label_9:
              if (index > 0)
              {
                num2 = 59;
                continue;
              }
              break;
            case 96:
              if (index != 0)
              {
                num2 = \uE01D.\uE000(60);
                continue;
              }
              goto label_20;
            case 97:
              stringBuilder.Append(",");
              break;
            default:
              goto label_7;
          }
          stringBuilder.Append("[");
label_16:
          int num3 = \uE026.\uE000(28);
          while (true)
          {
            switch ((num3 ^ 93) + 91)
            {
              case 0:
                stringBuilder.Append(this.\uE001[index].\uE009);
                num3 = -5;
                continue;
              case 1:
                stringBuilder.Append("]");
                num3 = -6;
                continue;
              case 2:
                goto label_19;
              default:
                goto label_16;
            }
          }
label_19:
          ++index;
label_20:
          if (index < this.\uE001.Length)
            goto label_9;
          else
            break;
        }
        stringBuilder.Append("]");
      }
      this.\uE000 = stringBuilder.ToString();
    }
    return this.\uE000;
  }
}
