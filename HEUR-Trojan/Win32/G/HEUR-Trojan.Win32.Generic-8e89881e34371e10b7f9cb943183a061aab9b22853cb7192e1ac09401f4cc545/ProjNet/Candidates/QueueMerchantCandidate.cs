// Decompiled with JetBrains decompiler
// Type: ProjNet.Candidates.QueueMerchantCandidate
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Services;
using ProjNet.Structs;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.Candidates
{
  public class QueueMerchantCandidate : Form
  {
    private IContainer m_RefAdvisor;
    private DataGridView _GlobalAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public QueueMerchantCandidate()
    {
      int num1 = 3;
      if (QueueMerchantCandidate.ManageModel())
        goto label_5;
label_1:
      this.m_RefAdvisor = (IContainer) null;
      if (true)
      {
        num1 = 4;
        goto label_5;
      }
label_2:
      this._GlobalAdvisor.DataSource = (object) CallbackRegistry.WriteFacade();
      int num2 = 6;
label_4:
      num1 = num2;
label_5:
      switch (num1)
      {
        case 0:
        case 1:
          goto label_1;
        case 2:
        case 4:
          // ISSUE: explicit constructor call
          base.\u002Ector();
          this.ForgotFacade();
          goto label_2;
        case 3:
          PageAdvisorStructBuilder.PrepareCreator();
          num2 = 0;
          goto label_4;
        case 5:
          goto label_2;
        case 6:
          break;
        default:
          num2 = 5;
          goto label_4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool evaluatevar1)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (evaluatevar1)
              {
                if (!QueueMerchantCandidate.CountModel())
                {
                  num2 = 3;
                  continue;
                }
                goto label_12;
              }
              else
                goto label_2;
            case 1:
            case 3:
              goto label_1;
            case 2:
            case 4:
              goto label_8;
            case 5:
              goto label_4;
            default:
              goto label_7;
          }
        }
label_1:
        int num3 = this.m_RefAdvisor != null ? 1 : 0;
        goto label_3;
label_2:
        num3 = 0;
label_3:
        if (num3 == 0)
          goto label_9;
        else
          goto label_8;
label_7:
        num1 = 4;
        continue;
label_8:
        this.m_RefAdvisor.Dispose();
label_9:
        base.Dispose(evaluatevar1);
        num1 = 5;
      }
label_4:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ForgotFacade()
    {
      int num1 = 2;
      if (true)
        goto label_5;
label_1:
      ((ISupportInitialize) this._GlobalAdvisor).BeginInit();
      this.SuspendLayout();
      this._GlobalAdvisor.AllowUserToAddRows = false;
      int num2 = 1;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
            this._GlobalAdvisor.Dock = DockStyle.Fill;
            this._GlobalAdvisor.Location = new Point(0, 0);
            this._GlobalAdvisor.Name = "dataGridView";
            this._GlobalAdvisor.ReadOnly = true;
            this._GlobalAdvisor.Size = new Size(474, 306);
            this._GlobalAdvisor.TabIndex = 0;
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(474, 306);
            this.Controls.Add((Control) this._GlobalAdvisor);
            this.Name = "QueryAuthorAndISBN";
            if (QueueMerchantCandidate.ManageModel())
            {
              num1 = 5;
              continue;
            }
            goto label_11;
          case 1:
            goto label_2;
          case 2:
            this._GlobalAdvisor = new DataGridView();
            if (!QueueMerchantCandidate.CountModel())
            {
              num1 = 8;
              continue;
            }
            goto case 5;
          case 3:
          case 7:
            this._GlobalAdvisor.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            goto case 0;
          case 4:
          case 6:
            goto label_9;
          case 5:
            this.Text = "Author and ISBN";
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_9;
          case 8:
            goto label_1;
          case 9:
            goto label_13;
          default:
            num1 = 0;
            continue;
        }
      }
label_2:
      this._GlobalAdvisor.AllowUserToDeleteRows = false;
      num2 = 7;
      goto label_4;
label_13:
      return;
label_9:
      ((ISupportInitialize) this._GlobalAdvisor).EndInit();
      this.ResumeLayout(false);
      num2 = 9;
      goto label_4;
label_11:;
    }

    internal static bool ManageModel() => true;

    internal static bool CountModel() => false;
  }
}
