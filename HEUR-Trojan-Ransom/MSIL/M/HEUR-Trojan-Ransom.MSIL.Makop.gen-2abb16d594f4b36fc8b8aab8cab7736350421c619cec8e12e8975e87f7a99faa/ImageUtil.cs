// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: طv, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8DDF840D-AD0E-4D2F-A03C-7E334C2C97A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2abb16d594f4b36fc8b8aab8cab7736350421c619cec8e12e8975e87f7a99faa.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    bool flag1 = (ImageUtil.\u202B⁬​‪⁯⁫⁯⁫‍⁯⁪⁭‪⁮⁮⁫‭‭⁬⁫⁪‫‏‮‪‭‬⁭⁪‮⁮‍⁫‍⁯‎⁫​‬‬‮(originalImage) & PixelFormat.Indexed) == PixelFormat.Indexed;
label_1:
    int num1 = 516011770;
    Bitmap bitmap;
    PixelFormat pixelFormat;
    IntPtr num2;
    byte[] numArray;
    int length;
    Image image;
    BitmapData bitmapData;
    int num3;
    int num4;
    bool flag2;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ 1090428279)) % 28U)
      {
        case 0:
          flag2 = numArray[num3 + 4 - 1] == (byte) 0;
          num1 = 1569448678;
          continue;
        case 1:
          int num6 = flag1 ? 1400455542 : (num6 = 1593636543);
          num1 = num6 ^ (int) num5 * -498619437;
          continue;
        case 2:
          num3 = 0;
          num1 = (int) num5 * 879742028 ^ -1499073602;
          continue;
        case 3:
          num1 = (int) num5 * -38377907 ^ 99462844;
          continue;
        case 4:
          ImageUtil.\u200C⁮⁪‮⁪​⁫‮⁭​⁫‪​​⁫‌⁪⁬‮⁮‭⁯‏⁪‬​‍‮⁪‪‮‭⁪⁯⁪⁭‏‎‫⁯‮(numArray, 0, num2, length);
          num1 = (int) num5 * 565234398 ^ 1757791213;
          continue;
        case 5:
          ++num4;
          num1 = (int) num5 * -1244770168 ^ 902277961;
          continue;
        case 6:
          image = originalImage;
          num1 = (int) num5 * 1284407139 ^ 1003629238;
          continue;
        case 7:
          num2 = ImageUtil.\u202D‏‫⁫‪⁭⁬⁫⁫⁭​⁮⁬‬‮‏‬‍‫‮‌⁬⁪⁫‎​‍​⁭‮⁮⁬‪‫⁭‭‭⁪‎‮(bitmapData);
          num1 = (int) num5 * -684571611 ^ 321407702;
          continue;
        case 8:
          num1 = (int) num5 * 832980456 ^ -1382789989;
          continue;
        case 9:
          ++num4;
          num1 = (int) num5 * 621279765 ^ -1981797705;
          continue;
        case 10:
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = (int) num5 * -1238256289 ^ -1941732415;
          continue;
        case 11:
          bitmap = (Bitmap) ImageUtil.\u206D‪⁭‎⁬⁪‭‮‪‪‎‌⁬⁯⁪⁪⁪⁭‫‌⁮‭⁮⁪‍‌⁯‪⁫‌​⁭‏‎⁮⁮‫⁯‎‭‮(originalImage);
          num1 = 1622167633;
          continue;
        case 12:
          ImageUtil.\u206A‌⁯‭⁮⁬‌⁮⁯⁫‬⁫⁭‫‌‫‭‎‬⁮‫‪‮⁯‍‭‫‮‮⁫‏⁬‭⁫‬⁫‍​⁭⁪‮(num2, numArray, 0, length);
          num1 = (int) num5 * -1864726147 ^ 2041957681;
          continue;
        case 13:
          int num7 = flag2 ? -226522153 : (num7 = -847425555);
          num1 = num7 ^ (int) num5 * -845581895;
          continue;
        case 14:
          length = ImageUtil.\u206E⁪​⁮‪‬‏⁪‮‫‍⁭‭⁯⁫‏⁮‎‎‎‌‪‍⁫⁬⁭‏⁬‫​⁮⁮‫‪‫⁭⁯⁬⁪‪‮((Image) bitmap) * ImageUtil.\u206F‎⁫⁫⁪⁪‪⁯⁬‫⁬⁬‪​‫⁮‪‮‬‮⁫‌​⁪‪‬⁮⁫‪‎​⁯‌‮‪‏⁯⁮‮‮‮((Image) bitmap) * 4;
          numArray = new byte[length];
          num1 = (int) num5 * 192817584 ^ -914888289;
          continue;
        case 15:
          num3 += 4;
          num1 = 2101285072;
          continue;
        case 16:
          Rectangle rectangle = new Rectangle(0, 0, ImageUtil.\u206E⁪​⁮‪‬‏⁪‮‫‍⁭‭⁯⁫‏⁮‎‎‎‌‪‍⁫⁬⁭‏⁬‫​⁮⁮‫‪‫⁭⁯⁬⁪‪‮((Image) bitmap), ImageUtil.\u206F‎⁫⁫⁪⁪‪⁯⁬‫⁬⁬‪​‫⁮‪‮‬‮⁫‌​⁪‪‬⁮⁫‪‎​⁯‌‮‪‏⁯⁮‮‮‮((Image) bitmap));
          bitmapData = ImageUtil.\u206A⁪​‪⁪‫‫⁫⁪‬‮‎‍​‮‫⁮‫‌‬⁬⁯⁪⁮‪⁪‌⁪‎⁯⁬⁯⁬‪‮⁭⁬‬⁬‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * -1264129485 ^ 1180628664;
          continue;
        case 17:
          num1 = (int) num5 * 1756530626 ^ 2101199286;
          continue;
        case 18:
          ++num4;
          numArray[num3 + num4] = (byte) ((double) numArray[num3 + num4] * opacity);
          num1 = (int) num5 * 1356631010 ^ -1376789136;
          continue;
        case 19:
          num4 = 0;
          num1 = 316437118;
          continue;
        case 20:
          num1 = (int) num5 * -1204885289 ^ 2113746230;
          continue;
        case 21:
          image = (Image) bitmap;
          num1 = (int) num5 * 1602245643 ^ -241172652;
          continue;
        case 22:
          ImageUtil.\u206D​⁭‎‍⁭‬‎⁬‏‭‭‮‪‫⁭‪⁬⁪⁪⁬‭‭​‌⁮‏‍‮‏‍‬‏⁪‫⁫⁮​⁬‮‮(bitmap, bitmapData);
          num1 = (int) num5 * -1817668351 ^ 1659151433;
          continue;
        case 23:
          int num8;
          num1 = num8 = num3 < numArray.Length ? 906378051 : (num8 = 299976091);
          continue;
        case 25:
          num1 = (int) num5 * 1341421991 ^ 1610135703;
          continue;
        case 26:
          goto label_1;
        case 27:
          num1 = (int) num5 * -1002249513 ^ -484854407;
          continue;
        default:
          goto label_29;
      }
    }
label_29:
    return image;
  }

  static PixelFormat \u202B⁬​‪⁯⁫⁯⁫‍⁯⁪⁭‪⁮⁮⁫‭‭⁬⁫⁪‫‏‮‪‭‬⁭⁪‮⁮‍⁫‍⁯‎⁫​‬‬‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206D‪⁭‎⁬⁪‭‮‪‪‎‌⁬⁯⁪⁪⁪⁭‫‌⁮‭⁮⁪‍‌⁯‪⁫‌​⁭‏‎⁮⁮‫⁯‎‭‮([In] Image obj0) => obj0.Clone();

  static int \u206E⁪​⁮‪‬‏⁪‮‫‍⁭‭⁯⁫‏⁮‎‎‎‌‪‍⁫⁬⁭‏⁬‫​⁮⁮‫‪‫⁭⁯⁬⁪‪‮([In] Image obj0) => obj0.Width;

  static int \u206F‎⁫⁫⁪⁪‪⁯⁬‫⁬⁬‪​‫⁮‪‮‬‮⁫‌​⁪‪‬⁮⁫‪‎​⁯‌‮‪‏⁯⁮‮‮‮([In] Image obj0) => obj0.Height;

  static BitmapData \u206A⁪​‪⁪‫‫⁫⁪‬‮‎‍​‮‫⁮‫‌‬⁬⁯⁪⁮‪⁪‌⁪‎⁯⁬⁯⁬‪‮⁭⁬‬⁬‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u202D‏‫⁫‪⁭⁬⁫⁫⁭​⁮⁬‬‮‏‬‍‫‮‌⁬⁪⁫‎​‍​⁭‮⁮⁬‪‫⁭‭‭⁪‎‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u206A‌⁯‭⁮⁬‌⁮⁯⁫‬⁫⁭‫‌‫‭‎‬⁮‫‪‮⁯‍‭‫‮‮⁫‏⁬‭⁫‬⁫‍​⁭⁪‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u200C⁮⁪‮⁪​⁫‮⁭​⁫‪​​⁫‌⁪⁬‮⁮‭⁯‏⁪‬​‍‮⁪‪‮‭⁪⁯⁪⁭‏‎‫⁯‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206D​⁭‎‍⁭‬‎⁬‏‭‭‮‪‫⁭‪⁬⁪⁪⁬‭‭​‌⁮‏‍‮‏‍‬‏⁪‫⁫⁮​⁬‮‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
