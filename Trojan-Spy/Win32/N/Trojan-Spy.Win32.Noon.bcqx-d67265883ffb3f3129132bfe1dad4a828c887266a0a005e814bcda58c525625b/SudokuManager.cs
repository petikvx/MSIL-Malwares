// Decompiled with JetBrains decompiler
// Type: Alero.SudokuManager
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Windows.Forms;

namespace Alero
{
  internal class SudokuManager
  {
    private int[,] ans = new int[9, 9]
    {
      {
        5,
        6,
        4,
        7,
        3,
        8,
        2,
        9,
        1
      },
      {
        7,
        3,
        8,
        9,
        2,
        1,
        6,
        5,
        4
      },
      {
        9,
        2,
        1,
        6,
        5,
        4,
        8,
        7,
        3
      },
      {
        8,
        9,
        7,
        5,
        6,
        3,
        4,
        1,
        2
      },
      {
        6,
        5,
        3,
        4,
        1,
        2,
        9,
        8,
        7
      },
      {
        4,
        1,
        2,
        8,
        9,
        7,
        5,
        3,
        6
      },
      {
        3,
        8,
        9,
        2,
        7,
        6,
        1,
        4,
        5
      },
      {
        2,
        7,
        5,
        1,
        4,
        9,
        3,
        6,
        8
      },
      {
        1,
        4,
        6,
        3,
        8,
        5,
        7,
        2,
        9
      }
    };
    private int[,] ansx = new int[9, 9]
    {
      {
        7,
        1,
        6,
        2,
        8,
        4,
        5,
        9,
        3
      },
      {
        4,
        5,
        9,
        3,
        1,
        6,
        7,
        2,
        8
      },
      {
        8,
        2,
        3,
        5,
        7,
        9,
        4,
        6,
        1
      },
      {
        5,
        4,
        2,
        8,
        3,
        7,
        6,
        1,
        9
      },
      {
        6,
        3,
        8,
        4,
        9,
        1,
        2,
        7,
        5
      },
      {
        9,
        7,
        1,
        6,
        5,
        2,
        3,
        8,
        4
      },
      {
        2,
        6,
        5,
        9,
        4,
        8,
        1,
        3,
        7
      },
      {
        3,
        8,
        7,
        1,
        6,
        5,
        9,
        4,
        2
      },
      {
        1,
        9,
        4,
        7,
        2,
        3,
        8,
        5,
        6
      }
    };
    private int[,] ansC = new int[9, 9]
    {
      {
        2,
        3,
        5,
        4,
        6,
        1,
        7,
        8,
        9
      },
      {
        6,
        4,
        7,
        2,
        9,
        8,
        1,
        3,
        5
      },
      {
        8,
        9,
        1,
        3,
        5,
        7,
        2,
        4,
        6
      },
      {
        3,
        2,
        4,
        5,
        8,
        6,
        9,
        1,
        7
      },
      {
        5,
        1,
        8,
        9,
        7,
        2,
        3,
        6,
        4
      },
      {
        7,
        6,
        9,
        1,
        3,
        4,
        5,
        2,
        8
      },
      {
        1,
        5,
        2,
        6,
        4,
        9,
        8,
        7,
        3
      },
      {
        9,
        8,
        6,
        7,
        2,
        3,
        4,
        5,
        1
      },
      {
        4,
        7,
        3,
        8,
        1,
        5,
        6,
        9,
        2
      }
    };
    private int[,] ans4 = new int[9, 9]
    {
      {
        4,
        8,
        9,
        3,
        1,
        2,
        6,
        7,
        5
      },
      {
        5,
        2,
        7,
        4,
        8,
        6,
        1,
        3,
        9
      },
      {
        6,
        3,
        1,
        9,
        7,
        5,
        2,
        8,
        4
      },
      {
        1,
        6,
        8,
        5,
        3,
        7,
        9,
        4,
        2
      },
      {
        2,
        7,
        5,
        6,
        9,
        4,
        8,
        1,
        3
      },
      {
        9,
        4,
        3,
        8,
        2,
        1,
        7,
        5,
        6
      },
      {
        3,
        9,
        2,
        7,
        5,
        8,
        4,
        6,
        1
      },
      {
        7,
        5,
        6,
        1,
        4,
        9,
        3,
        2,
        8
      },
      {
        8,
        1,
        4,
        2,
        6,
        3,
        5,
        9,
        7
      }
    };
    private int[,] save = new int[9, 9];
    private ToolTip tt = new ToolTip();
    private int var;

    public void setPuzzle()
    {
      switch (this.var)
      {
        case 0:
          this.save = this.ans;
          break;
        case 1:
          this.save = this.ansx;
          break;
        case 2:
          this.save = this.ansC;
          break;
        case 3:
          this.save = this.ans4;
          break;
      }
    }

    public void create(
      TextBox[,] txtar,
      ComboBox cmb_level,
      int variation,
      SudokuManager objGrid,
      Label lblPencilMark)
    {
      sudokugrid sudokugrid = new sudokugrid();
      this.var = variation;
      this.setPuzzle();
      sudokugrid.generate(txtar, this.save, cmb_level, variation, objGrid, lblPencilMark);
    }

    public void savegrid(TextBox[,] txtar) => new Storage().save(txtar, this.save, this.var);

    public void loadgrid(TextBox[,] txtar, SudokuManager objGrid) => new Storage().load(txtar, this.save, objGrid);

    public void check(TextBox[,] txtar) => new Features().check(txtar, this.save, this.var);

    public void submit(TextBox[,] txtar)
    {
      if (new Features().check(txtar, this.save, this.var))
      {
        for (int frequency = 1000; frequency <= 6000; frequency += 1000)
          Console.Beep(frequency, 100);
        for (int frequency = 6000; frequency >= 1000; frequency -= 1000)
          Console.Beep(frequency, 100);
        int num = (int) MessageBox.Show("Congratulations!!! You won the game!!!");
      }
      else
      {
        for (int frequency = 1000; frequency <= 6000; frequency += 1000)
          Console.Beep(frequency, 100);
        for (int frequency = 6000; frequency >= 1000; frequency -= 1000)
          Console.Beep(frequency, 100);
        int num = (int) MessageBox.Show("You lose the game. Better luck next time!!!");
      }
    }

    public void cheat(TextBox[,] txtar) => new Features().hint(txtar, this.save);

    public void showans(TextBox[,] txtar) => new Features().showanswer(txtar, this.save);

    public void changeGrid(TextBox[,] txtar, int var) => new Form1().changeBackground(txtar, var);

    public void pencilMarking(TextBox[,] txtar, Label lblPencilMark)
    {
      Features features = new Features();
      switch (this.var)
      {
        case 0:
          features.pencilMarking(txtar, lblPencilMark, this.tt);
          break;
        case 1:
          features.pencilMarkingX(txtar, lblPencilMark, this.tt);
          break;
        case 2:
          features.pencilMarkingC(txtar, lblPencilMark, this.tt);
          break;
        case 3:
          features.pencilMarking4(txtar, lblPencilMark, this.tt);
          break;
      }
    }

    public void pencilMarkReset() => new Features().toolTipReset(this.tt);
  }
}
