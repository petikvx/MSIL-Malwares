// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Serialization.WriterMapSerializer
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Rules;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;
using TYPELIBA.Importers;
using TYPELIBA.Listeners;

namespace TYPELIBA.Serialization
{
  internal class WriterMapSerializer : StateProcess
  {
    protected RepositoryProcess list;
    private List<PrinterRefListener> instance;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WriterMapSerializer()
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(new List<PrinterRefListener>());
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WriterMapSerializer(List<PrinterRefListener> def)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.instance = def;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public List<PrinterRefListener> IncludeConsumer() => this.instance;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RunConsumer(List<PrinterRefListener> param)
    {
      this.instance = param;
      this.list = (RepositoryProcess) null;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] DisableConfiguration(double[] info)
    {
      int num1 = 3;
      List<PrinterRefListener>.Enumerator enumerator;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            enumerator = this.instance.GetEnumerator();
            num1 = 2;
            continue;
          case 1:
          case 2:
            goto label_1;
          case 4:
            goto label_12;
          default:
            num1 = 4;
            continue;
        }
      }
label_1:
      try
      {
label_6:
        while (enumerator.MoveNext())
        {
          PrinterRefListener current = enumerator.Current;
          int num2 = 2;
          if (true)
            goto label_4;
label_3:
          info = current.ViewConfiguration().DisableConfiguration(info);
          continue;
label_4:
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 3:
                goto label_6;
              default:
                num2 = 3;
                continue;
            }
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      double[] numArray = info;
label_12:
      return numArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> SearchConfiguration(List<double[]> ident)
    {
      List<double[]> last = new List<double[]>(ident.Count);
      last.AddRange((IEnumerable<double[]>) ident);
      foreach (PrinterRefListener printerRefListener in this.instance)
        last = printerRefListener.ViewConfiguration().SearchConfiguration(last);
      return last;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override RepositoryProcess CreateState()
    {
      int num1 = 2;
      RepositoryProcess list;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          bool flag;
          switch (num2)
          {
            case 0:
            case 2:
              flag = this.list == null;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 1;
            case 1:
            case 4:
              if (!flag)
                break;
              goto label_7;
            case 3:
              this.list.ValidateConfiguration();
              break;
            case 5:
              this.list = (RepositoryProcess) this.CompareConsumer();
              goto case 3;
            case 6:
              goto label_11;
            default:
              goto label_4;
          }
          list = this.list;
          num2 = 6;
        }
label_4:
        num1 = 3;
        continue;
label_7:
        num1 = 5;
      }
label_11:
      return list;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void ValidateConfiguration()
    {
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            this.instance.Reverse();
            num1 = 2;
            continue;
          case 1:
          case 2:
            goto label_2;
          case 4:
            goto label_5;
          default:
            num1 = 4;
            continue;
        }
      }
label_2:
      List<PrinterRefListener>.Enumerator enumerator = this.instance.GetEnumerator();
label_5:
      try
      {
        while (enumerator.MoveNext())
        {
          PrinterRefListener current = enumerator.Current;
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
              case 3:
                goto label_10;
              default:
                num2 = 3;
                continue;
            }
          }
label_7:
          current.ViewConfiguration().ValidateConfiguration();
label_10:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public WriterMapSerializer CompareConsumer()
    {
      int num1 = 4;
      WriterMapSerializer writerMapSerializer;
      while (true)
      {
        int num2 = num1;
        List<PrinterRefListener> def;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              def = new List<PrinterRefListener>(this.instance.Count);
              num2 = 2;
              continue;
            case 1:
            case 2:
              goto label_11;
            case 3:
              goto label_1;
            case 5:
              goto label_15;
            default:
              num2 = 3;
              continue;
          }
        }
label_1:
        List<PrinterRefListener>.Enumerator enumerator;
        try
        {
          while (enumerator.MoveNext())
          {
            PrinterRefListener current = enumerator.Current;
            int num3 = 2;
            if (!WriterMapSerializer.CalcDescriptor())
              goto label_4;
label_3:
            def.Add(current);
            goto label_6;
label_4:
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_3;
                case 1:
                case 3:
                  goto label_6;
                default:
                  if (WriterMapSerializer.PushDescriptor())
                  {
                    num3 = 3;
                    continue;
                  }
                  goto label_6;
              }
            }
label_6:;
          }
        }
        finally
        {
          enumerator.Dispose();
        }
        writerMapSerializer = new WriterMapSerializer(def);
        num1 = 5;
        continue;
label_11:
        enumerator = this.instance.GetEnumerator();
        goto label_1;
      }
label_15:
      return writerMapSerializer;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError() => throw new NotImplementedException();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => throw new NotImplementedException();

    internal static bool PushDescriptor() => true;

    internal static bool CalcDescriptor() => false;
  }
}
