// Decompiled with JetBrains decompiler
// Type: 582573968022.Utils.366397293684
// Assembly: 582573968022, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 22949299-4A50-46F6-851E-C2A296093D37
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-35a63266858befa3a9a9f8f0684d53a6905ab1fbfd8df949e6989c20107cc290.exe

using \u003582573968022.Utils;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing.Text;
using System.IO;
using System.Linq;

namespace \u003582573968022.Utils
{
  public static class \u003366397293684
  {
    public static int \u003335913201618(this Color _param0) => (int) Math.Sqrt((double) ((int) _param0.R * (int) _param0.R) * 0.241 + (double) ((int) _param0.G * (int) _param0.G) * 0.691 + (double) ((int) _param0.B * (int) _param0.B) * 0.068);

    public static bool \u003546622734171(Color _param0, Color _param1, double _param2 = 70.0) => (double) Math.Abs(_param0.\u003335913201618() - _param1.\u003335913201618()) > _param2;

    public static unsafe Color \u003509364623552(this Bitmap _param0)
    {
      int width = _param0.Width;
      int height = _param0.Height;
      int num1 = 15;
      int num2 = 0;
      long[] numArray = new long[3];
      int num3 = _param0.PixelFormat == PixelFormat.Format24bppRgb ? 3 : 4;
      BitmapData bitmapData = _param0.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.ReadOnly, _param0.PixelFormat);
      int stride = bitmapData.Stride;
      IntPtr scan0 = bitmapData.Scan0;
      int red = 0;
      int green = 0;
      int blue = 0;
      byte* numPtr = (byte*) (void*) scan0;
      for (int index1 = 0; index1 < height; ++index1)
      {
        for (int index2 = 0; index2 < width; ++index2)
        {
          int index3 = index1 * stride + index2 * num3;
          red = (int) numPtr[index3 + 2];
          green = (int) numPtr[index3 + 1];
          blue = (int) numPtr[index3];
          if (Math.Abs(red - green) > num1 || Math.Abs(red - blue) > num1 || Math.Abs(green - blue) > num1)
          {
            numArray[2] += (long) red;
            numArray[1] += (long) green;
            numArray[0] += (long) blue;
          }
          else
            ++num2;
        }
      }
      int num4 = width * height - num2;
      return num4 == 0 ? Color.FromArgb(red, green, blue) : Color.FromArgb((int) (numArray[2] / (long) num4), (int) (numArray[1] / (long) num4), (int) (numArray[0] / (long) num4));
    }

    public static Color \u003521604977973(this Color _param0, float _param1)
    {
      float r = (float) _param0.R;
      float g = (float) _param0.G;
      float b = (float) _param0.B;
      float red;
      float green;
      float blue;
      if ((double) _param1 < 0.0)
      {
        _param1 = 1f + _param1;
        red = r * _param1;
        green = g * _param1;
        blue = b * _param1;
      }
      else
      {
        red = ((float) byte.MaxValue - r) * _param1 + r;
        green = ((float) byte.MaxValue - g) * _param1 + g;
        blue = ((float) byte.MaxValue - b) * _param1 + b;
      }
      return Color.FromArgb((int) _param0.A, (int) red, (int) green, (int) blue);
    }

    public static Bitmap \u003382782614593(this Image _param0, Rectangle _param1)
    {
      Bitmap bitmap = new Bitmap(_param1.Width, _param1.Height);
      using (Graphics graphics = Graphics.FromImage((Image) bitmap))
        graphics.DrawImage(_param0, new Rectangle(0, 0, bitmap.Width, bitmap.Height), _param1, GraphicsUnit.Pixel);
      return bitmap;
    }

    public static Rectangle \u003414220578019(
      Graphics _param0,
      Rectangle _param1,
      int _param2,
      Pen _param3,
      Color _param4)
    {
      int int32 = Convert.ToInt32(Math.Ceiling((double) _param3.Width));
      _param1 = Rectangle.Inflate(_param1, -int32, -int32);
      _param3.EndCap = _param3.StartCap = LineCap.Round;
      GraphicsPath path = new GraphicsPath();
      path.AddArc(_param1.X, _param1.Y, _param2, _param2, 180f, 90f);
      path.AddArc(_param1.X + _param1.Width - _param2, _param1.Y, _param2, _param2, 270f, 90f);
      path.AddArc(_param1.X + _param1.Width - _param2, _param1.Y + _param1.Height - _param2, _param2, _param2, 0.0f, 90f);
      path.AddArc(_param1.X, _param1.Y + _param1.Height - _param2, _param2, _param2, 90f, 90f);
      path.CloseAllFigures();
      _param0.FillPath((Brush) new SolidBrush(_param4), path);
      _param0.DrawPath(_param3, path);
      return _param1;
    }

    public static Font \u003365928215612(int _param0, FontStyle _param1, string _param2)
    {
      PrivateFontCollection privateFontCollection = new PrivateFontCollection();
      privateFontCollection.AddFontFile(_param2);
      return new Font(privateFontCollection.Families[0], (float) _param0, _param1, GraphicsUnit.Pixel);
    }

    public static SizeF \u003154461202341(string _param0, Font _param1)
    {
      using (Bitmap bitmap = new Bitmap(1, 1))
      {
        using (Graphics graphics = Graphics.FromImage((Image) bitmap))
          return graphics.MeasureString(_param0, _param1);
      }
    }

    public static SizeF \u003314287879119(
      string _param0,
      int _param1,
      FontStyle _param2,
      string _param3)
    {
      using (Bitmap bitmap = new Bitmap(1, 1))
      {
        using (Graphics graphics = Graphics.FromImage((Image) bitmap))
        {
          using (PrivateFontCollection privateFontCollection = new PrivateFontCollection())
          {
            privateFontCollection.AddFontFile(_param3);
            using (FontFamily family = privateFontCollection.Families[0])
            {
              using (Font font = new Font(family, (float) _param1, _param2, GraphicsUnit.Pixel))
                return graphics.MeasureString(_param0, font);
            }
          }
        }
      }
    }

    public static string \u003059917882951(this string _param0) => ((IEnumerable<char>) Path.GetInvalidFileNameChars()).Aggregate<char, string>(_param0, (Func<string, char, string>) ((_param1, _param2) => _param1.Replace(_param2.ToString(), string.Empty)));
  }
}
