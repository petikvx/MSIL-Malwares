// Decompiled with JetBrains decompiler
// Type: C3904355907.C3568589458
// Assembly: Google Software Update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ECCB2B4-E3D0-48EA-84ED-06938D43796B
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.DelShad.gen-b37761715d5a2405a3fa75abccaf6bb15b7298673aaad91a158725be3c518a87.exe

using \u003Cdion2ntty2ic0uyoe\u003E\u007B43570453\u002D3AD8\u002D4A5B\u002DB273\u002D83DF8156D820\u007D;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace C3904355907
{
  public sealed class C3568589458 : IDisposable
  {
    private readonly C2564639436 C3554254475;
    private bool C3554254475 = false;
    private byte[] C3554254475 = (byte[]) null;
    private byte C3554254475 = 0;
    private byte C3904355907 = 0;
    private C1255198513.C30677878 C3554254475 = (C1255198513.C30677878) null;
    private C1255198513.C1993550816 C3554254475 = (C1255198513.C1993550816) null;

    public C3568589458([In] C2564639436 obj0, [In] byte[] obj1)
    {
      if (obj1 == null)
      {
        Debug.Assert(false);
        throw new ArgumentNullException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cA());
      }
      int length = obj1.Length;
      if (length <= 0)
      {
        Debug.Assert(false);
        throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cA());
      }
      this.C3554254475 = obj0;
      switch (obj0)
      {
        case C2564639436.C3904355907:
          this.C3554254475 = new byte[256];
          for (int index = 0; index < 256; ++index)
            this.C3554254475[index] = (byte) index;
          byte index1 = 0;
          int index2 = 0;
          for (int index3 = 0; index3 < 256; ++index3)
          {
            index1 += (byte) ((uint) this.C3554254475[index3] + (uint) obj1[index2]);
            byte num = this.C3554254475[0];
            this.C3554254475[0] = this.C3554254475[(int) index1];
            this.C3554254475[(int) index1] = num;
            ++index2;
            if (index2 >= length)
              index2 = 0;
          }
          this.C3554254475(512U);
          break;
        case C2564639436.C1255198513:
          this.C3554254475 = new C1255198513.C30677878(C1304234792.C3554254475(obj1), new byte[8]
          {
            (byte) 232,
            (byte) 48,
            (byte) 9,
            (byte) 75,
            (byte) 151,
            (byte) 32,
            (byte) 93,
            (byte) 42
          });
          break;
        case C2564639436.C1908338681:
          byte[] destinationArray1 = new byte[32];
          byte[] destinationArray2 = new byte[12];
          using (SHA512Managed shA512Managed = new SHA512Managed())
          {
            byte[] hash = shA512Managed.ComputeHash(obj1);
            Array.Copy((Array) hash, (Array) destinationArray1, 32);
            Array.Copy((Array) hash, 32, (Array) destinationArray2, 0, 12);
            C3554254475.C2137352139.C3904355907(hash);
          }
          this.C3554254475 = new C1255198513.C1993550816(destinationArray1, destinationArray2, true);
          break;
        default:
          Debug.Assert(false);
          throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.C1505515367());
      }
    }

    public void Dispose()
    {
      this.C3554254475(true);
      GC.SuppressFinalize((object) this);
    }

    private void C3554254475([In] bool obj0)
    {
      if (!obj0)
        return;
      if (this.C3554254475 == C2564639436.C1908338681)
        this.C3554254475.Dispose();
      else if (this.C3554254475 == C2564639436.C1255198513)
        this.C3554254475.Dispose();
      else if (this.C3554254475 == C2564639436.C3904355907)
      {
        C3554254475.C2137352139.C3904355907(this.C3554254475);
        this.C3554254475 = (byte) 0;
        this.C3904355907 = (byte) 0;
      }
      else
        Debug.Assert(false);
      this.C3554254475 = true;
    }

    public byte[] C3554254475([In] uint obj0)
    {
      if (this.C3554254475)
        throw new ObjectDisposedException((string) null);
      if (obj0 == 0U)
        return C3554254475.C2137352139.C3554254475;
      int length = obj0 <= (uint) int.MaxValue ? (int) obj0 : throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.ca());
      byte[] numArray = new byte[length];
      if (this.C3554254475 == C2564639436.C1908338681)
        this.C3554254475.C3554254475(numArray, 0, length);
      else if (this.C3554254475 == C2564639436.C1255198513)
        this.C3554254475.C3554254475(numArray, 0, length);
      else if (this.C3554254475 == C2564639436.C3904355907)
      {
        for (int index1 = 0; index1 < length; ++index1)
        {
          ++this.C3554254475;
          this.C3904355907 += this.C3554254475[(int) this.C3554254475];
          byte num = this.C3554254475[(int) this.C3554254475];
          this.C3554254475[(int) this.C3554254475] = this.C3554254475[(int) this.C3904355907];
          this.C3554254475[(int) this.C3904355907] = num;
          byte index2 = (byte) ((uint) this.C3554254475[(int) this.C3554254475] + (uint) this.C3554254475[(int) this.C3904355907]);
          numArray[index1] = this.C3554254475[(int) index2];
        }
      }
      else
        Debug.Assert(false);
      return numArray;
    }

    public ulong C3554254475() => C3554254475.C2137352139.C1037565863(this.C3554254475(8U));

    internal ulong C3554254475([In] ulong obj0)
    {
      if (obj0 == 0UL)
      {
        Debug.Assert(false);
        throw new ArgumentOutOfRangeException(DC0DFFA6\u002DD07E\u002D4569\u002D8923\u002D61FED0540CB3.cB());
      }
      ulong num1;
      ulong num2;
      do
      {
        num1 = this.C3554254475();
        num2 = num1 % obj0;
      }
      while (num1 - num2 > ulong.MaxValue - (obj0 - 1UL));
      return num2;
    }
  }
}
