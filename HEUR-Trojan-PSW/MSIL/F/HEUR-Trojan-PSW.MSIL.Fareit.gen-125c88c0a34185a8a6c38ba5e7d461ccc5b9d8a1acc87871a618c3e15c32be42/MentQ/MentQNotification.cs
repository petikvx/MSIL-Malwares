// Decompiled with JetBrains decompiler
// Type: MentQ.MentQNotification
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MentQ
{
  [Category("MentQ")]
  public class MentQNotification : Control
  {
    private Color _effectColor;
    private Styles _style;

    public MentQNotification()
    {
      this.UnderlineSize = 2;
      this.BackColor = MentQDefaults.MentQBlue;
      this.Font = new Font("Verdana", 7f);
      this.ForeColor = Color.White;
      this.Size = new Size(60, 15);
      this.Style = Styles.None;
      this.EffectColor = Color.FromArgb(120, 65, 65, 65);
      this.SetStyle(ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.OptimizedDoubleBuffer, true);
      this.TextAlignment = MentQNotification.TextAlign.Center;
    }

    [Category("Appearance")]
    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public Styles Style
    {
      get => this._style;
      set
      {
        this._style = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public Color EffectColor
    {
      get => this._effectColor;
      set
      {
        this._effectColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public int UnderlineSize { get; set; }

    [Category("Appearance")]
    public MentQNotification.TextAlign TextAlignment { get; set; }

    protected override void OnPaint(PaintEventArgs e)
    {
      int num = this.Style == Styles.Underlined ? -this.UnderlineSize + 1 : 0;
      Graphics graphics = e.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.Clear(this.Parent.BackColor);
      using (SolidBrush solidBrush1 = new SolidBrush(this.BackColor))
      {
        if (this.Style == Styles.Outlined)
        {
          graphics.FillPath((Brush) solidBrush1, GlobalHelpers.GetRoundedRect(new Rectangle(0, 0, this.Width - 1, this.Height - 1), 5));
          using (Pen pen = new Pen(this.EffectColor))
            graphics.DrawPath(pen, GlobalHelpers.GetRoundedRect(new Rectangle(0, 0, this.Width - 1, this.Height - 1), 5));
        }
        else if (this.Style == Styles.Underlined)
        {
          using (SolidBrush solidBrush2 = new SolidBrush(this.EffectColor))
            graphics.FillPath((Brush) solidBrush2, GlobalHelpers.GetRoundedRect(new Rectangle(-1, -1, this.Width + 1, this.Height + 1), 5));
          graphics.SetClip(new Rectangle(0, 0, this.Width, this.Height - this.UnderlineSize));
          graphics.FillPath((Brush) solidBrush1, GlobalHelpers.GetRoundedRect(new Rectangle(-1, -1, this.Width + 1, this.Height - this.UnderlineSize + 1), 5));
        }
        else
          graphics.FillPath((Brush) solidBrush1, GlobalHelpers.GetRoundedRect(new Rectangle(-1, -1, this.Width + 1, this.Height + 1), 5));
      }
      if (!string.IsNullOrEmpty(this.Text))
      {
        using (SolidBrush solidBrush = new SolidBrush(this.ForeColor))
        {
          if (this.TextAlignment == MentQNotification.TextAlign.Center)
            graphics.DrawString(this.Text, this.Font, (Brush) solidBrush, (float) (((double) this.Width - (double) graphics.MeasureString(this.Text, this.Font).Width) / 2.0), (float) (((double) this.Height - (double) graphics.MeasureString(this.Text, this.Font).Height) / 2.0) + (float) num);
          if (this.TextAlignment == MentQNotification.TextAlign.Left)
            graphics.DrawString(this.Text, this.Font, (Brush) solidBrush, 4f, (float) (((double) this.Height - (double) graphics.MeasureString(this.Text, this.Font).Height) / 2.0) + (float) num);
        }
      }
      base.OnPaint(e);
    }

    public enum TextAlign
    {
      Left,
      Center,
    }
  }
}
